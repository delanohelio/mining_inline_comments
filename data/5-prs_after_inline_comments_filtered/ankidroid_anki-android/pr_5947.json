{"pr_number": 5947, "pr_title": "Loading models after GUI is shown", "pr_createdAt": "2020-04-07T11:39:41Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/5947", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2OTQ4NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5947#discussion_r404769485", "bodyText": "I don't think this loop is doing what you think it's doing... You would need to actually restart the task to get a different result. I think most likely it's fine to just throw the exception without retrying anyway. Execution exception only happens when the runnable throws, and I think interrupted exception only occurs if we cancel the future task? And we never do that.", "author": "timrae", "createdAt": "2020-04-07T12:29:55Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -2024,15 +2024,73 @@ public Media getMedia() {\n         return mMedia;\n     }\n \n+    private class ModelsLoader {\n+    /**\n+        Ensure that models get loaded. This operation only need to be\n+        done once; this is the point of using a future.\n+\n+        Loading only need to be done when anki starts and after full\n+        sync. This is the point of using a future, ensuring it's done\n+        once and only once.\n+\n+        However, loading may blocks database for a long time when\n+        there are a lot of note types or when there are big note\n+        types, so it should only be performed when database is not\n+        used by more important tasks. This is why it is not done in\n+        the main thread, but in a separate thread. Furthermore, the\n+        models are not required to show the deck picker screen, so it\n+        can wait until the screen has loaded.\n+\n+        Most of the time is spent querying the database, and blocking\n+        access to it. Because of that we want to load the models only\n+        when there are no important data base access\n+        needed. E.g. after the list of deck is displayed to the user.\n+\n+     */\n+        Collection mCol;\n+        private FutureTask<Models> ft;\n+\n+        public ModelsLoader (Collection col) {\n+            mCol = col;\n+        }\n+\n+        public void load() {\n+            if (ft != null) {\n+                return;\n+            }\n+            ft = new FutureTask<Models> (() -> new Models(mCol).load(loadColumn(\"models\")));\n+            new Thread(ft).start();\n+        }\n+\n+        public Models get() {\n+            load();\n+            int tries = 0;\n+            while (true) {\n+                try {", "originalCommit": "f9567ddc792f429d66bbddf927d4f3cfe1828b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cbaa92c4c94b6f41ae2f2f9fcbfdedec803919a5", "url": "https://github.com/ankidroid/Anki-Android/commit/cbaa92c4c94b6f41ae2f2f9fcbfdedec803919a5", "message": "Loading models after GUI is shown\n\nMy AnkiDroid is really slow to start. According to profiling, the\nslowest part is reading the database content. In particular, reading\nthe json configurations. Those are JSON files which may easily takes\nmore than a MB and does not fit into the cursor.\n\nNote type are not required to show the GUI. So I ensure they are\nloaded asynchronously. Furthermore, since loading is database heavy, I\nensure it get done only once the GUI thread has accessed everything it\nneeds.\n\nIn order to ensure that the models are accessed only once they are\nloaded, I create a private class, ModelLoader, which will be required\nto accessed the models. It ensures that models are returned only once\nit's loaded. This diminish the risk that a future edition tries to\naccess models while they are actually not ready to be used.\n\nThis was first push as the Pull Request\nhttps://github.com/ankidroid/Anki-Android/pull/5929\n\nGiven the number of change, I am creating a new branch and a new Pull\nRequest, so if it does not please ankidroid mainteneurs, the previous\nwork is not lost", "committedDate": "2020-04-07T12:39:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMTM3Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/5947#discussion_r405101376", "bodyText": "Can you please comment this out rather than deleting it, and add the following comment:\n// We deviate from upstream by lazy loading the models to improve app start time", "author": "timrae", "createdAt": "2020-04-07T20:45:28Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -266,7 +267,6 @@ public void load() {\n                 cursor.close();\n             }\n         }\n-        mModels.load(loadColumn(\"models\"));", "originalCommit": "cbaa92c4c94b6f41ae2f2f9fcbfdedec803919a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzY3Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/5947#discussion_r405113673", "bodyText": "// Waits for the FutureTask to complete and returns the result", "author": "timrae", "createdAt": "2020-04-07T21:07:45Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -2024,15 +2024,66 @@ public Media getMedia() {\n         return mMedia;\n     }\n \n+    private class ModelsLoader {\n+    /**\n+        Ensure that models get loaded. This operation only need to be\n+        done once; this is the point of using a future.\n+\n+        Loading only need to be done when anki starts and after full\n+        sync. This is the point of using a future, ensuring it's done\n+        once and only once.\n+\n+        However, loading may blocks database for a long time when\n+        there are a lot of note types or when there are big note\n+        types, so it should only be performed when database is not\n+        used by more important tasks. This is why it is not done in\n+        the main thread, but in a separate thread. Furthermore, the\n+        models are not required to show the deck picker screen, so it\n+        can wait until the screen has loaded.\n+\n+        Most of the time is spent querying the database, and blocking\n+        access to it. Because of that we want to load the models only\n+        when there are no important data base access\n+        needed. E.g. after the list of deck is displayed to the user.\n+\n+     */\n+        private Collection mCol;\n+        private FutureTask<Models> mFutureTask;\n+\n+        public ModelsLoader (Collection col) {\n+            mCol = col;\n+        }\n+\n+        public void load() {\n+            if (mFutureTask != null) {\n+                return;\n+            }\n+            mFutureTask = new FutureTask<Models> (() -> new Models(mCol).load(loadColumn(\"models\")));\n+            new Thread(mFutureTask).start();\n+        }\n+", "originalCommit": "cbaa92c4c94b6f41ae2f2f9fcbfdedec803919a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNTYyMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5947#discussion_r405115621", "bodyText": "// Starts a FutureTask on a new thread (if one doesn't already exist) to load the models asynchronously", "author": "timrae", "createdAt": "2020-04-07T21:11:27Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -2024,15 +2024,66 @@ public Media getMedia() {\n         return mMedia;\n     }\n \n+    private class ModelsLoader {\n+    /**\n+        Ensure that models get loaded. This operation only need to be\n+        done once; this is the point of using a future.\n+\n+        Loading only need to be done when anki starts and after full\n+        sync. This is the point of using a future, ensuring it's done\n+        once and only once.\n+\n+        However, loading may blocks database for a long time when\n+        there are a lot of note types or when there are big note\n+        types, so it should only be performed when database is not\n+        used by more important tasks. This is why it is not done in\n+        the main thread, but in a separate thread. Furthermore, the\n+        models are not required to show the deck picker screen, so it\n+        can wait until the screen has loaded.\n+\n+        Most of the time is spent querying the database, and blocking\n+        access to it. Because of that we want to load the models only\n+        when there are no important data base access\n+        needed. E.g. after the list of deck is displayed to the user.\n+\n+     */\n+        private Collection mCol;\n+        private FutureTask<Models> mFutureTask;\n+\n+        public ModelsLoader (Collection col) {\n+            mCol = col;\n+        }\n+", "originalCommit": "cbaa92c4c94b6f41ae2f2f9fcbfdedec803919a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTU3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/5947#discussion_r405505572", "bodyText": "Add a comment here:\n// Start loading the models asynchronously\n// This can still indirectly block other operations if they require database access", "author": "timrae", "createdAt": "2020-04-08T13:01:02Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -2024,15 +2024,66 @@ public Media getMedia() {\n         return mMedia;\n     }\n \n+    private class ModelsLoader {\n+    /**\n+        Ensure that models get loaded. This operation only need to be\n+        done once; this is the point of using a future.\n+\n+        Loading only need to be done when anki starts and after full\n+        sync. This is the point of using a future, ensuring it's done\n+        once and only once.\n+\n+        However, loading may blocks database for a long time when\n+        there are a lot of note types or when there are big note\n+        types, so it should only be performed when database is not\n+        used by more important tasks. This is why it is not done in\n+        the main thread, but in a separate thread. Furthermore, the\n+        models are not required to show the deck picker screen, so it\n+        can wait until the screen has loaded.\n+\n+        Most of the time is spent querying the database, and blocking\n+        access to it. Because of that we want to load the models only\n+        when there are no important data base access\n+        needed. E.g. after the list of deck is displayed to the user.\n+\n+     */\n+        private Collection mCol;\n+        private FutureTask<Models> mFutureTask;\n+\n+        public ModelsLoader (Collection col) {\n+            mCol = col;\n+        }\n+\n+        public void load() {\n+            if (mFutureTask != null) {\n+                return;\n+            }\n+            mFutureTask = new FutureTask<Models> (() -> new Models(mCol).load(loadColumn(\"models\")));\n+            new Thread(mFutureTask).start();\n+        }\n+\n+        public Models get() {\n+            load();\n+            try {\n+                return mFutureTask.get();\n+            } catch (ExecutionException | InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+    ", "originalCommit": "cbaa92c4c94b6f41ae2f2f9fcbfdedec803919a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwOTk3NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5947#discussion_r405509975", "bodyText": "This function could potentially be called simultaneously from multiple threads which would lead to a race condition, so better make it synchronized", "author": "timrae", "createdAt": "2020-04-08T13:07:38Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -2024,15 +2024,66 @@ public Media getMedia() {\n         return mMedia;\n     }\n \n+    private class ModelsLoader {\n+    /**\n+        Ensure that models get loaded. This operation only need to be\n+        done once; this is the point of using a future.\n+\n+        Loading only need to be done when anki starts and after full\n+        sync. This is the point of using a future, ensuring it's done\n+        once and only once.\n+\n+        However, loading may blocks database for a long time when\n+        there are a lot of note types or when there are big note\n+        types, so it should only be performed when database is not\n+        used by more important tasks. This is why it is not done in\n+        the main thread, but in a separate thread. Furthermore, the\n+        models are not required to show the deck picker screen, so it\n+        can wait until the screen has loaded.\n+\n+        Most of the time is spent querying the database, and blocking\n+        access to it. Because of that we want to load the models only\n+        when there are no important data base access\n+        needed. E.g. after the list of deck is displayed to the user.\n+\n+     */\n+        private Collection mCol;\n+        private FutureTask<Models> mFutureTask;\n+\n+        public ModelsLoader (Collection col) {\n+            mCol = col;\n+        }\n+\n+        public void load() {\n+            if (mFutureTask != null) {", "originalCommit": "cbaa92c4c94b6f41ae2f2f9fcbfdedec803919a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxNDg0NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/5947#discussion_r405514844", "bodyText": "Personally I feel this comment is too long and difficult to understand. You don't need to tell the whole life story of this pull request, just briefly put what does the class do, why does it do it, and how is it used. It's up to you though.", "author": "timrae", "createdAt": "2020-04-08T13:14:49Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -2024,15 +2024,66 @@ public Media getMedia() {\n         return mMedia;\n     }\n \n+    private class ModelsLoader {\n+    /**\n+        Ensure that models get loaded. This operation only need to be", "originalCommit": "cbaa92c4c94b6f41ae2f2f9fcbfdedec803919a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9487642be73790e51b3d0ed18fc3cbba0df0d5a3", "url": "https://github.com/ankidroid/Anki-Android/commit/9487642be73790e51b3d0ed18fc3cbba0df0d5a3", "message": "Loading models after GUI is shown\n\nMy AnkiDroid is really slow to start. According to profiling, the\nslowest part is reading the database content. In particular, reading\nthe json configurations. Those are JSON files which may easily takes\nmore than a MB and does not fit into the cursor.\n\nNote type are not required to show the GUI. So I ensure they are\nloaded asynchronously. Furthermore, since loading is database heavy, I\nensure it get done only once the GUI thread has accessed everything it\nneeds.\n\nIn order to ensure that the models are accessed only once they are\nloaded, I create a private class, ModelLoader, which will be required\nto accessed the models. It ensures that models are returned only once\nit's loaded. This diminish the risk that a future edition tries to\naccess models while they are actually not ready to be used.\n\nThis was first push as the Pull Request\nhttps://github.com/ankidroid/Anki-Android/pull/5929\n\nGiven the number of change, I am creating a new branch and a new Pull\nRequest, so if it does not please ankidroid mainteneurs, the previous\nwork is not lost", "committedDate": "2020-04-08T17:27:12Z", "type": "forcePushed"}, {"oid": "15befab31af05c8fcc92536715d5ae425d739d81", "url": "https://github.com/ankidroid/Anki-Android/commit/15befab31af05c8fcc92536715d5ae425d739d81", "message": "Loading models after GUI is shown\n\nMy AnkiDroid is really slow to start. According to profiling, the\nslowest part is reading the database content. In particular, reading\nthe json configurations. Those are JSON files which may easily takes\nmore than a MB and does not fit into the cursor.\n\nNote type are not required to show the GUI. So I ensure they are\nloaded asynchronously. Furthermore, since loading is database heavy, I\nensure it get done only once the GUI thread has accessed everything it\nneeds.\n\nIn order to ensure that the models are accessed only once they are\nloaded, I create a private class, ModelLoader, which will be required\nto accessed the models. It ensures that models are returned only once\nit's loaded. This diminish the risk that a future edition tries to\naccess models while they are actually not ready to be used.\n\nThis was first push as the Pull Request\nhttps://github.com/ankidroid/Anki-Android/pull/5929\n\nGiven the number of change, I am creating a new branch and a new Pull\nRequest, so if it does not please ankidroid mainteneurs, the previous\nwork is not lost", "committedDate": "2020-04-09T12:40:43Z", "type": "commit"}, {"oid": "15befab31af05c8fcc92536715d5ae425d739d81", "url": "https://github.com/ankidroid/Anki-Android/commit/15befab31af05c8fcc92536715d5ae425d739d81", "message": "Loading models after GUI is shown\n\nMy AnkiDroid is really slow to start. According to profiling, the\nslowest part is reading the database content. In particular, reading\nthe json configurations. Those are JSON files which may easily takes\nmore than a MB and does not fit into the cursor.\n\nNote type are not required to show the GUI. So I ensure they are\nloaded asynchronously. Furthermore, since loading is database heavy, I\nensure it get done only once the GUI thread has accessed everything it\nneeds.\n\nIn order to ensure that the models are accessed only once they are\nloaded, I create a private class, ModelLoader, which will be required\nto accessed the models. It ensures that models are returned only once\nit's loaded. This diminish the risk that a future edition tries to\naccess models while they are actually not ready to be used.\n\nThis was first push as the Pull Request\nhttps://github.com/ankidroid/Anki-Android/pull/5929\n\nGiven the number of change, I am creating a new branch and a new Pull\nRequest, so if it does not please ankidroid mainteneurs, the previous\nwork is not lost", "committedDate": "2020-04-09T12:40:43Z", "type": "forcePushed"}]}