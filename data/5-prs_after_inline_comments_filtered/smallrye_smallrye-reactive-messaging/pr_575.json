{"pr_number": 575, "pr_title": "Call the `accepted` method on the right context", "pr_createdAt": "2020-06-01T16:54:54Z", "pr_url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/575", "timeline": [{"oid": "535dfe3797c483aa63d453aee6fb42e6b93dbe26", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/535dfe3797c483aa63d453aee6fb42e6b93dbe26", "message": "Call the `accepted` method on the right context.", "committedDate": "2020-06-02T17:35:33Z", "type": "forcePushed"}, {"oid": "1096088e3862d8f47613bfc05e5f0f7fdf2a75b7", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/1096088e3862d8f47613bfc05e5f0f7fdf2a75b7", "message": "Call the `accepted` method on the right context.", "committedDate": "2020-06-03T07:13:23Z", "type": "commit"}, {"oid": "1096088e3862d8f47613bfc05e5f0f7fdf2a75b7", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/1096088e3862d8f47613bfc05e5f0f7fdf2a75b7", "message": "Call the `accepted` method on the right context.", "committedDate": "2020-06-03T07:13:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwMzM1Mg==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/575#discussion_r434503352", "bodyText": "Should it check it needs to do this? Doesn't this also rather change the behaviour anywhere ack() was already being called on the correct thread?", "author": "gemmellr", "createdAt": "2020-06-03T11:40:45Z", "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpMessage.java", "diffHunk": "@@ -87,8 +86,15 @@ public AmqpMessage(io.vertx.amqp.AmqpMessage msg) {\n \n     @Override\n     public CompletionStage<Void> ack() {\n-        this.message.accepted();\n-        return CompletableFuture.completedFuture(null);\n+        // We must switch to the context having created the message.\n+        // This context is passed when this instance of message is created.\n+        // It's more a Vert.x AMQP client issue which should ensure calling `accepted` on the right context.\n+        CompletableFuture<Void> future = new CompletableFuture<>();\n+        this.context.runOnContext(x -> {\n+            this.message.accepted();\n+            future.complete(null);\n+        });", "originalCommit": "1096088e3862d8f47613bfc05e5f0f7fdf2a75b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNDYxOQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/575#discussion_r434504619", "bodyText": "Do you mean implementing a trampoline?\nHopefully, this is a temporary fix and the Vert.x AMQP client would do it more consistently.", "author": "cescoffier", "createdAt": "2020-06-03T11:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwMzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMTE3OA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/575#discussion_r434521178", "bodyText": "I just mean that if the ack method was already being used in other places on the correct event loop thread then it would have actually done the work when called previously, whereas now it will only do it later, possibly after whatever the thread attempts next once it has called ack. The difference may or may not be important. I'm mainly just surprised to see that change rather than only the off-event-loop handling.", "author": "gemmellr", "createdAt": "2020-06-03T12:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwMzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5NjQxNg==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/575#discussion_r434596416", "bodyText": "So you mean implementing a trampoline to check if we are on the correct context, and if not doing this logic. It can be done. I would have preferred having it done in the vert.x amqp client than here, as this is just a temporary fix for the real bug (which is in the Vert.x AMQP client).", "author": "cescoffier", "createdAt": "2020-06-03T14:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwMzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxMTUzMg==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/575#discussion_r434611532", "bodyText": "Yep. I realise you see this as a temporary fix I just figured it would have much the same effect, such that the unaffected bits dont see any change in behaviour now, or again later when the temp fix is removed and it goes back.", "author": "gemmellr", "createdAt": "2020-06-03T14:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwMzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDA2OA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/575#discussion_r434734068", "bodyText": "I've added the trampoline in #585", "author": "cescoffier", "createdAt": "2020-06-03T17:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwMzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3ODA0Nw==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/575#discussion_r435078047", "bodyText": "Looks good", "author": "gemmellr", "createdAt": "2020-06-04T08:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwMzM1Mg=="}], "type": "inlineReview"}]}