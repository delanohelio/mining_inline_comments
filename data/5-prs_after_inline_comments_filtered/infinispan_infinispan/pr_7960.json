{"pr_number": 7960, "pr_title": "ISPN-11386 Use blocking thread pool in Persistent preload", "pr_createdAt": "2020-02-26T18:46:18Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7960", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMzc5MQ==", "url": "https://github.com/infinispan/infinispan/pull/7960#discussion_r384733791", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .observeOn(blockingScheduler)\n          \n          \n            \n                        .doOnNext(me -> preloadKey(flaggedCache, me))\n          \n          \n            \n                        .doOnNext(me -> preloadKey(flaggedCache, me))\n          \n          \n            \n                        .observeOn(nonBlockingScheduler)\n          \n      \n    \n    \n  \n\nWe already subscribe on the blockingScheduler below so there is no reason to invoke observeOn with the same value. We should really observe the completion on a non blocking thread since it is highly likely we may block on the completion in a blocking thread at some point.\nAnd technically it should do observeOn before hand if it isn't tx, but we can avoid that for now.\nWhile this change is fine with me, this really isn't a good idea to continue this on the blocking executor. This should really be done in a non blocking way if possible (ie. putAsync). I have logged https://issues.redhat.com/browse/ISPN-11387 to handle this better later when we can.", "author": "wburns", "createdAt": "2020-02-26T20:03:16Z", "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -376,7 +376,7 @@ public boolean isPreloaded() {\n       final AdvancedCache<Object, Object> flaggedCache = getCacheForStateInsertion();\n       return Flowable.fromPublisher(preloadCl.entryPublisher(null, true, true))\n             .take(maxEntries)\n-            .observeOn(nonBlockingScheduler)\n+            .observeOn(blockingScheduler)\n             .doOnNext(me -> preloadKey(flaggedCache, me))", "originalCommit": "598f0a8dc86f64675255d080c1cc7255091ac65f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2ODA0NQ==", "url": "https://github.com/infinispan/infinispan/pull/7960#discussion_r384768045", "bodyText": "done!", "author": "pruivo", "createdAt": "2020-02-26T21:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMzc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2MDc5NA==", "url": "https://github.com/infinispan/infinispan/pull/7960#discussion_r384860794", "bodyText": "Actually, sorry Pedro, but can you move it down 1 more line. So the observeOn is after the count. Otherwise we will have up to N-1  context switches just to add a counter. After the counter it will only send 1 value downstream.", "author": "wburns", "createdAt": "2020-02-27T01:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMzc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk5NTEzNA==", "url": "https://github.com/infinispan/infinispan/pull/7960#discussion_r384995134", "bodyText": "updated! \ud83d\udc4d", "author": "pruivo", "createdAt": "2020-02-27T09:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMzc5MQ=="}], "type": "inlineReview"}, {"oid": "65f979cbdf85ee695f07fb10b9c9096434133a56", "url": "https://github.com/infinispan/infinispan/commit/65f979cbdf85ee695f07fb10b9c9096434133a56", "message": "ISPN-11386 Use blocking thread pool in Persistent preload", "committedDate": "2020-02-26T21:11:37Z", "type": "forcePushed"}, {"oid": "45a61f6c84e702410a545a141cb86bc75b1f8ef6", "url": "https://github.com/infinispan/infinispan/commit/45a61f6c84e702410a545a141cb86bc75b1f8ef6", "message": "ISPN-11386 Use blocking thread pool in Persistent preload", "committedDate": "2020-02-27T09:11:09Z", "type": "commit"}, {"oid": "45a61f6c84e702410a545a141cb86bc75b1f8ef6", "url": "https://github.com/infinispan/infinispan/commit/45a61f6c84e702410a545a141cb86bc75b1f8ef6", "message": "ISPN-11386 Use blocking thread pool in Persistent preload", "committedDate": "2020-02-27T09:11:09Z", "type": "forcePushed"}]}