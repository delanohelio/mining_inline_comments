{"pr_number": 8128, "pr_title": "ISPN-11525 Fix Authz with REST admin ops", "pr_createdAt": "2020-03-30T22:46:10Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8128", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNTk3NA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400725974", "bodyText": "never used.", "author": "pruivo", "createdAt": "2020-03-31T08:18:32Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -65,15 +70,18 @@\n public class CacheManagerResource implements ResourceHandler {\n \n    private final EmbeddedCacheManager cacheManager;\n+   private InvocationHelper invocationHelper;\n    private final InternalCacheRegistry internalCacheRegistry;\n    private final JsonWriter jsonWriter = new JsonWriter();\n    private final ObjectMapper objectMapper;\n    private final ParserRegistry parserRegistry = new ParserRegistry();\n    private final String cacheManagerName;\n+   private final static Logger log = LogFactory.getLogger(CacheManagerResource.class.toString());", "originalCommit": "418b5914e798acd3a48010016864c32ded888a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTk2MA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400739960", "bodyText": "yeah, will should add some trace logs TBH", "author": "karesti", "createdAt": "2020-03-31T08:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNTk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400726943", "bodyText": "I don't understand why do you need the RestCacheManager.\nIt only decorates the cache with encodings and flags. Both don't affect the methods getName() neither getCacheConfiguration()", "author": "pruivo", "createdAt": "2020-03-31T08:20:10Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -202,9 +215,10 @@ public Invocations getInvocations() {\n          cachesHeath.put(ch.getCacheName(), ch.getStatus());\n       }\n \n+      RestCacheManager<Object> restCacheManager = invocationHelper.getRestCacheManager();\n       // We rely on the fact that getCacheNames doesn't block for embedded - remote it does unfortunately\n       return Flowable.fromIterable(cacheManager.getCacheNames())\n-            .map(cacheManager::getCache)\n+            .map(cacheName -> restCacheManager.getCache(cacheName, request))", "originalCommit": "418b5914e798acd3a48010016864c32ded888a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTQzNg==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400739436", "bodyText": "because of the subject", "author": "karesti", "createdAt": "2020-03-31T08:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTc2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400739761", "bodyText": "if you go to the cache resource you will see", "author": "karesti", "createdAt": "2020-03-31T08:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2OTAwMA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400769000", "bodyText": "so, you are using the RestCacheManager just to avoid doing\n.map(cache -> subject == null ? cache : cache.withSubject(subject))\n?", "author": "pruivo", "createdAt": "2020-03-31T09:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyODUwNA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r401128504", "bodyText": "well, not only", "author": "karesti", "createdAt": "2020-03-31T18:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNjk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTEzMw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400729133", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        () -> cacheManager.getCacheManagerInfo());\n          \n          \n            \n                        cacheManager::getCacheManagerInfo);", "author": "pruivo", "createdAt": "2020-03-31T08:23:43Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -108,9 +116,13 @@ public Invocations getInvocations() {\n \n    private CompletionStage<RestResponse> getInfo(RestRequest request) {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n+\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n+      CacheManagerInfo cacheManagerInfo = Security.doAs(request.getSubject(), (PrivilegedAction<CacheManagerInfo>)\n+            () -> cacheManager.getCacheManagerInfo());", "originalCommit": "418b5914e798acd3a48010016864c32ded888a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTQwNA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400729404", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        () -> cacheManager.getCacheManagerConfiguration());\n          \n          \n            \n                        cacheManager::getCacheManagerConfiguration);", "author": "pruivo", "createdAt": "2020-03-31T08:24:03Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -123,8 +135,8 @@ public Invocations getInvocations() {\n    private CompletionStage<RestResponse> getConfig(RestRequest request) {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n-\n-      GlobalConfiguration globalConfiguration = cacheManager.getCacheManagerConfiguration();\n+      GlobalConfiguration globalConfiguration = Security.doAs(request.getSubject(), (PrivilegedAction<GlobalConfiguration>)\n+            () -> cacheManager.getCacheManagerConfiguration());", "originalCommit": "418b5914e798acd3a48010016864c32ded888a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTY0NA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400729644", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        () -> cacheManager.getStats());\n          \n          \n            \n                        cacheManager::getStats);", "author": "pruivo", "createdAt": "2020-03-31T08:24:23Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -149,10 +161,11 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n-      CacheContainerStats stats = cacheManager.getStats();\n+      CacheContainerStats containerStats = Security.doAs(request.getSubject(), (PrivilegedAction<CacheContainerStats>)\n+            () -> cacheManager.getStats());", "originalCommit": "418b5914e798acd3a48010016864c32ded888a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyOTk1OA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400729958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           () -> cacheManager.getCacheConfigurationNames());\n          \n          \n            \n                           cacheManager::getCacheConfigurationNames);", "author": "pruivo", "createdAt": "2020-03-31T08:24:50Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -270,13 +285,22 @@ public Invocations getInvocations() {\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n       try {\n-         Set<String> cacheConfigurationNames = cacheManager.getCacheConfigurationNames();\n+\n+         Set<String> cacheConfigurationNames = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>)\n+               () -> cacheManager.getCacheConfigurationNames());", "originalCommit": "418b5914e798acd3a48010016864c32ded888a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMDYzNg==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400730636", "bodyText": "Extract it to a method? it is used more than once.", "author": "pruivo", "createdAt": "2020-03-31T08:25:55Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -270,13 +285,22 @@ public Invocations getInvocations() {\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n       try {\n-         Set<String> cacheConfigurationNames = cacheManager.getCacheConfigurationNames();\n+\n+         Set<String> cacheConfigurationNames = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>)\n+               () -> cacheManager.getCacheConfigurationNames());\n \n          List<NamedCacheConfiguration> configurations = cacheConfigurationNames.stream()\n                .filter(n -> !internalCacheRegistry.isInternalCache(n))\n-               .filter(n -> cacheManager.getCacheConfiguration(n).isTemplate())\n+               .filter(n -> {\n+                  Configuration cacheConfiguration = Security.doAs(request.getSubject(), (PrivilegedAction<Configuration>) () -> cacheManager.getCacheConfiguration(n));", "originalCommit": "418b5914e798acd3a48010016864c32ded888a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNDI4OQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r400734289", "bodyText": "ps. you have GetCacheConfigurationFromManagerAction available as well.", "author": "pruivo", "createdAt": "2020-03-31T08:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMDYzNg=="}], "type": "inlineReview"}, {"oid": "74e368b85a28d91de9428de6a847451cea813520", "url": "https://github.com/infinispan/infinispan/commit/74e368b85a28d91de9428de6a847451cea813520", "message": "use the cache manager with subject in templates", "committedDate": "2020-04-01T15:55:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMzMxNw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r402113317", "bodyText": "Can you keep all this security stuff outside the rest resources and put them inside the  invocationHelper?  Thus by doing a invocationHelper.getRestCacheManager(request) you'd already get a cacheManager/cache/whatever with proper security credentials", "author": "gustavonalle", "createdAt": "2020-04-02T07:44:27Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -202,13 +210,14 @@ public Invocations getInvocations() {\n          cachesHeath.put(ch.getCacheName(), ch.getStatus());\n       }\n \n+      RestCacheManager<Object> restCacheManager = invocationHelper.getRestCacheManager();\n       // We rely on the fact that getCacheNames doesn't block for embedded - remote it does unfortunately\n-      return Flowable.fromIterable(cacheManager.getCacheNames())\n-            .map(cacheManager::getCache)\n+      return Flowable.fromIterable(cacheManager.withSubject(request.getSubject()).getCacheNames())", "originalCommit": "dbb45d0784be618165f07c30dfbee3d17769e7f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNDIwOQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r402114209", "bodyText": "There are no tests or reproducers for the changes. Those tests should be in the rest module itself rather than outside.", "author": "gustavonalle", "createdAt": "2020-04-02T07:46:06Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -65,6 +68,7 @@\n public class CacheManagerResource implements ResourceHandler {", "originalCommit": "dbb45d0784be618165f07c30dfbee3d17769e7f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "746c67c815b37d059599e1689c73922ad757c748", "url": "https://github.com/infinispan/infinispan/commit/746c67c815b37d059599e1689c73922ad757c748", "message": "wip test", "committedDate": "2020-04-02T14:29:13Z", "type": "forcePushed"}, {"oid": "7ee9ead68894554388fe64bc12fdfab8943740a9", "url": "https://github.com/infinispan/infinispan/commit/7ee9ead68894554388fe64bc12fdfab8943740a9", "message": "wip", "committedDate": "2020-04-18T14:57:00Z", "type": "forcePushed"}, {"oid": "6cddf759a7a86d941df4f6df8f6dcd883d347a85", "url": "https://github.com/infinispan/infinispan/commit/6cddf759a7a86d941df4f6df8f6dcd883d347a85", "message": "ISPN-11525 Fix authorization in REST endpoints", "committedDate": "2020-04-19T16:20:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk0MDgyOA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r410940828", "bodyText": "@gustavonalle @tristantarrant this little thing has been driving me crazy :))) and I think this explains why I could not create a cache from the console but you told me you could. Tests with auth enabled had been like crazy for this", "author": "karesti", "createdAt": "2020-04-19T16:27:53Z", "path": "server/rest/src/main/java/org/infinispan/rest/RestRequestHandler.java", "diffHunk": "@@ -85,6 +85,7 @@ public void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) thr\n          // Ensure that the authorization header, if needed, has not changed\n          String authz = request.headers().get(HttpHeaderNames.AUTHORIZATION);\n          if (Objects.equals(authz, authorization)) {\n+            restRequest.setSubject(subject);", "originalCommit": "6cddf759a7a86d941df4f6df8f6dcd883d347a85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0NTg2MA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411345860", "bodyText": "Not only that, but I think there is something wrong further down:\n            subject = restRequest.getSubject();\n            authorization = restRequest.getAuthorizationHeader();\n            restRequest.setSubject(subject);\nI think the setSubject can be removed", "author": "tristantarrant", "createdAt": "2020-04-20T12:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk0MDgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2Mzc5Ng==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411463796", "bodyText": "where further down", "author": "karesti", "createdAt": "2020-04-20T15:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk0MDgyOA=="}], "type": "inlineReview"}, {"oid": "c4437fbb40d945cda787fd1f7ec17a78d3dc0961", "url": "https://github.com/infinispan/infinispan/commit/c4437fbb40d945cda787fd1f7ec17a78d3dc0961", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-20T11:52:13Z", "type": "forcePushed"}, {"oid": "8b363293b1254dc29b15ef3e8240848bcfa9f604", "url": "https://github.com/infinispan/infinispan/commit/8b363293b1254dc29b15ef3e8240848bcfa9f604", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-20T11:54:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0OTM5NQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411349395", "bodyText": "No, this is wrong: the cache object passed in should already have the Subject applied (cache.withSubject(subject)) (RestCacheManager does this)", "author": "tristantarrant", "createdAt": "2020-04-20T12:48:48Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/BaseCacheResource.java", "diffHunk": "@@ -114,7 +118,7 @@ public BaseCacheResource(InvocationHelper invocationHelper) {\n                }\n             }\n          }\n-         return putInCache(responseBuilder, cache, key, data, ttl, idle);\n+         return putInCache(responseBuilder, cache, key, data, ttl, idle, request.getSubject());", "originalCommit": "8b363293b1254dc29b15ef3e8240848bcfa9f604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NDQ1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411464451", "bodyText": "ok", "author": "karesti", "createdAt": "2020-04-20T15:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0OTM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0OTcxNA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411349714", "bodyText": "Undo these changes please", "author": "tristantarrant", "createdAt": "2020-04-20T12:49:17Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/BaseCacheResource.java", "diffHunk": "@@ -224,10 +228,12 @@ private void writeValue(Object value, MediaType requested, MediaType configuredM\n \n    private CompletionStage<RestResponse> putInCache(NettyRestResponse.Builder responseBuilder,\n                                                     AdvancedCache<Object, Object> cache, Object key, byte[] data, Long ttl,\n-                                                    Long idleTime) {\n+                                                    Long idleTime, Subject subject) {", "originalCommit": "8b363293b1254dc29b15ef3e8240848bcfa9f604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTAxMw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411465013", "bodyText": "ok", "author": "karesti", "createdAt": "2020-04-20T15:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0OTcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MTExNA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411351114", "bodyText": "Rename to cachesHealth", "author": "tristantarrant", "createdAt": "2020-04-20T12:51:25Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());\n       Map<String, HealthStatus> cachesHeath = new HashMap<>();", "originalCommit": "8b363293b1254dc29b15ef3e8240848bcfa9f604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NDkwNA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411464904", "bodyText": "ok", "author": "karesti", "createdAt": "2020-04-20T15:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MTExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MjAyMA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411352020", "bodyText": "withSubjectCM is not particularly pleasant. subjectCacheManager is nicer (like you do below)", "author": "tristantarrant", "createdAt": "2020-04-20T12:52:52Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());", "originalCommit": "8b363293b1254dc29b15ef3e8240848bcfa9f604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NTY5Mw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411465693", "bodyText": "ok", "author": "karesti", "createdAt": "2020-04-20T15:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MjAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MzQ5MQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411353491", "bodyText": "You can use cacheNames.removeAll(internalCacheRegistry.getInternalCacheNames());", "author": "tristantarrant", "createdAt": "2020-04-20T12:55:01Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -196,21 +210,28 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n+      EmbeddedCacheManager withSubjectCM = cacheManager.withSubject(request.getSubject());\n       Map<String, HealthStatus> cachesHeath = new HashMap<>();\n+      // Remove internal caches\n+      Set<String> cacheNames = new HashSet<>(withSubjectCM.getCacheNames());\n+      cacheNames.remove(PROTOBUF_METADATA_CACHE_NAME);\n+      cacheNames.remove(SCRIPT_CACHE);", "originalCommit": "8b363293b1254dc29b15ef3e8240848bcfa9f604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNTg0OQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411415849", "bodyText": "ok", "author": "karesti", "createdAt": "2020-04-20T14:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MzQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NDg4OA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411354888", "bodyText": "RestCacheManager.getCacheManagerAdmin() should already return a privileged RemoteCacheAdmin so remove all these Subject.doAs invocations", "author": "tristantarrant", "createdAt": "2020-04-20T12:57:03Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -183,7 +187,10 @@ public Invocations getInvocations() {\n          return CompletableFuture.completedFuture(responseBuilder.build());\n       }\n       return CompletableFuture.supplyAsync(() -> {\n-         restCacheManager.getCacheManagerAdmin(request).removeCache(cacheName);\n+         Subject.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "originalCommit": "8b363293b1254dc29b15ef3e8240848bcfa9f604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMjkyMQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r411412921", "bodyText": "ok! yes", "author": "karesti", "createdAt": "2020-04-20T14:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NDg4OA=="}], "type": "inlineReview"}, {"oid": "5a01b29137a9836bf5b8953bfd081cc5b4b7db1c", "url": "https://github.com/infinispan/infinispan/commit/5a01b29137a9836bf5b8953bfd081cc5b4b7db1c", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-20T15:22:54Z", "type": "forcePushed"}, {"oid": "3527d4db22df90d3adf52251060c4da69e250118", "url": "https://github.com/infinispan/infinispan/commit/3527d4db22df90d3adf52251060c4da69e250118", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-20T15:45:41Z", "type": "forcePushed"}, {"oid": "5045c0bba55abf91a718cd1722fec8cfad451e82", "url": "https://github.com/infinispan/infinispan/commit/5045c0bba55abf91a718cd1722fec8cfad451e82", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-22T15:41:47Z", "type": "forcePushed"}, {"oid": "ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92", "url": "https://github.com/infinispan/infinispan/commit/ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-24T10:14:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMTM4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r414521383", "bodyText": "This should be unnecessary: the administration object should already have the Subject set on it.", "author": "tristantarrant", "createdAt": "2020-04-24T12:01:46Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -211,7 +218,10 @@ public Invocations getInvocations() {\n       if (template != null && !template.isEmpty()) {\n          String templateName = template.iterator().next();\n          return CompletableFuture.supplyAsync(() -> {\n-            administration.createCache(cacheName, templateName);\n+            Security.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "originalCommit": "ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMTUyNw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r414521527", "bodyText": "Same", "author": "tristantarrant", "createdAt": "2020-04-24T12:02:04Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -221,7 +231,10 @@ public Invocations getInvocations() {\n       byte[] bytes = contents.rawContent();\n       if (bytes == null || bytes.length == 0) {\n          return CompletableFuture.supplyAsync(() -> {\n-            administration.createCache(cacheName, (String) null);\n+            Security.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "originalCommit": "ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMTU3Nw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r414521577", "bodyText": "Same", "author": "tristantarrant", "createdAt": "2020-04-24T12:02:10Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -242,8 +255,10 @@ public Invocations getInvocations() {\n \n       ConfigurationBuilder finalCfgBuilder = cfgBuilder;\n       return CompletableFuture.supplyAsync(() -> {\n-         administration.createCache(cacheName, finalCfgBuilder.build());\n-\n+         Security.doAs(request.getSubject(), (PrivilegedAction<Void>) () -> {", "originalCommit": "ed4d9e44eb76cf87dec934d0c48070a4f0fb7a92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1ODE2NA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r414558164", "bodyText": "i thought I modified those already ... hmmm\ndoing the changes", "author": "karesti", "createdAt": "2020-04-24T13:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMTU3Nw=="}], "type": "inlineReview"}, {"oid": "2ec38fdfff5cc3830c1ba1a00b739fa3e9dbead0", "url": "https://github.com/infinispan/infinispan/commit/2ec38fdfff5cc3830c1ba1a00b739fa3e9dbead0", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-24T13:49:13Z", "type": "forcePushed"}, {"oid": "712bddcd73795d7f70338ab6eabccac54758ed1b", "url": "https://github.com/infinispan/infinispan/commit/712bddcd73795d7f70338ab6eabccac54758ed1b", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-25T08:54:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzMzAyOQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415633029", "bodyText": "This is changing the return payload of the API, IMO we should keep returning all caches and add a new request parameter to filter internal caches", "author": "gustavonalle", "createdAt": "2020-04-27T08:54:48Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheManagerResource.java", "diffHunk": "@@ -195,21 +207,27 @@ public Invocations getInvocations() {\n       NettyRestResponse.Builder responseBuilder = checkCacheManager(request);\n       if (responseBuilder.getHttpStatus() == NOT_FOUND) return completedFuture(responseBuilder.build());\n \n-      Map<String, HealthStatus> cachesHeath = new HashMap<>();\n+      EmbeddedCacheManager subjectCacheManager = cacheManager.withSubject(request.getSubject());\n+      Map<String, HealthStatus> cachesHealth = new HashMap<>();\n+      // Remove internal caches\n+      Set<String> cacheNames = new HashSet<>(subjectCacheManager.getCacheNames());", "originalCommit": "712bddcd73795d7f70338ab6eabccac54758ed1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NDIyNg==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415794226", "bodyText": "this is the experimental endpoint used in the console. maybe we can add a filter to include all the caches but not get the internals by default", "author": "karesti", "createdAt": "2020-04-27T13:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzMzAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NzU3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415797576", "bodyText": "You're right, I thought it was breaking the GET /rest/v2/caches API", "author": "gustavonalle", "createdAt": "2020-04-27T13:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzMzAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415634105", "bodyText": "The idea is to have ADMIN have all permissions, but USER be a regular user, otherwise we have the same two subjects with different names", "author": "gustavonalle", "createdAt": "2020-04-27T08:56:13Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n public class AbstractRestResourceTest extends MultipleCacheManagersTest {\n    public static final String REALM = \"ApplicationRealm\";\n    public static final Subject ADMIN_USER = TestingUtil.makeSubject(\"ADMIN\", ScriptingManager.SCRIPT_MANAGER_ROLE, ProtobufMetadataManager.SCHEMA_MANAGER_ROLE);\n-   public static final Subject USER = TestingUtil.makeSubject(\"USER\");\n+   public static final Subject USER = TestingUtil.makeSubject(\"USER\", ProtobufMetadataManager.SCHEMA_MANAGER_ROLE, ScriptingManager.SCRIPT_MANAGER_ROLE);", "originalCommit": "712bddcd73795d7f70338ab6eabccac54758ed1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NDkxMQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415794911", "bodyText": "I was experiencing issues with tests because of the lack of protostream. but I'm going to recheck this", "author": "karesti", "createdAt": "2020-04-27T13:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NTIwMQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415795201", "bodyText": "and the task execution", "author": "karesti", "createdAt": "2020-04-27T13:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5OTg2Ng==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415799866", "bodyText": "The ADMIN user is used to bootstrap the server, fire-up the REST endopint, etc, and the USER is the one who should be used in the rest client to perform requests. Do regular users need those two roles to interact with the rest endpoint?", "author": "gustavonalle", "createdAt": "2020-04-27T13:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwOTM0MQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r416409341", "bodyText": "I changed the test", "author": "karesti", "createdAt": "2020-04-28T07:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415634479", "bodyText": "Same as above, why does USER need to have the same permissions as ADMIN?", "author": "gustavonalle", "createdAt": "2020-04-27T08:56:41Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -89,7 +89,7 @@ protected GlobalConfigurationBuilder getGlobalConfigForNode(int id) {\n    protected void addSecurity(GlobalConfigurationBuilder globalBuilder) {\n       globalBuilder.security().authorization().enable().principalRoleMapper(new IdentityRoleMapper())\n                    .role(\"ADMIN\").permission(AuthorizationPermission.ALL)\n-                   .role(\"USER\");\n+                   .role(\"USER\").permission(AuthorizationPermission.ALL);", "originalCommit": "712bddcd73795d7f70338ab6eabccac54758ed1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NTQzNw==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415795437", "bodyText": "task execution as far as I remember", "author": "karesti", "createdAt": "2020-04-27T13:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwMDI2OQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415800269", "bodyText": "Maybe add only EXEC?", "author": "gustavonalle", "createdAt": "2020-04-27T13:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NDQzOQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415874439", "bodyText": "ok", "author": "karesti", "createdAt": "2020-04-27T14:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NzQ1NQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415877455", "bodyText": "in any case adding permissions is mandatory here", "author": "karesti", "createdAt": "2020-04-27T14:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3Nzg1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415877856", "bodyText": "the xml validation does not work if we don't. the permissions property is mandatory", "author": "karesti", "createdAt": "2020-04-27T14:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1MjE3Mg==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415952172", "bodyText": "So the builder should validate it, or does it assume some default ones? /cc @tristantarrant", "author": "gustavonalle", "createdAt": "2020-04-27T16:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwOTExOA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r416209118", "bodyText": "I get on validation that the permissions are mandatory and this is a required field in the xsd\nMaybe the java code should be improved on that?\nIn any case, I added READ WRITE and EXEC. But for the cache manipulation on protobuf, I need to keep on the subject USER the role that it's needed for that.\nI added a commit so you can check the changes easily. I rather not spent more time on this right now, since this should be backported asap", "author": "karesti", "createdAt": "2020-04-27T23:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNDQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNTExMQ==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415635111", "bodyText": "As commented before, we should not change the API return payloads, but add a new request parameter to filter out the internal caches", "author": "gustavonalle", "createdAt": "2020-04-27T08:57:34Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheManagerResourceTest.java", "diffHunk": "@@ -142,7 +142,8 @@ public void testCaches() throws Exception {\n       String json = response.getContentAsString();\n       JsonNode jsonNode = mapper.readTree(json);\n       List<String> names = asText(jsonNode.findValues(\"name\"));\n-      Set<String> expectedNames = Util.asSet(\"defaultcache\", \"___protobuf_metadata\", \"___script_cache\", \"cache1\", \"cache2\");\n+      Set<String> expectedNames = Util.asSet(\"defaultcache\", \"cache1\", \"cache2\");", "originalCommit": "712bddcd73795d7f70338ab6eabccac54758ed1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NjUzMg==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415796532", "bodyText": "since this endpoint has been created for the console needs and documented as experimental, can't we change it not to include internals but only if I add a filter to ask for them? in any case, we do have the option to get the internal cache and the details, since the cache manager api does not filter internal cache names", "author": "karesti", "createdAt": "2020-04-27T13:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5Njk0MA==", "url": "https://github.com/infinispan/infinispan/pull/8128#discussion_r415796940", "bodyText": "I mean, the defined caches properties", "author": "karesti", "createdAt": "2020-04-27T13:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYzNTExMQ=="}], "type": "inlineReview"}, {"oid": "be3aab5eec89e75c2b8d1c8ec2470929779bb2af", "url": "https://github.com/infinispan/infinispan/commit/be3aab5eec89e75c2b8d1c8ec2470929779bb2af", "message": "ISPN-11525 DefaultCacheManager.withSubject()", "committedDate": "2020-04-28T11:38:05Z", "type": "commit"}, {"oid": "8b731c7cdfebcfb6edd100e8431bc69f79110f84", "url": "https://github.com/infinispan/infinispan/commit/8b731c7cdfebcfb6edd100e8431bc69f79110f84", "message": "ISPN-11525 Authz handled in REST endpoints", "committedDate": "2020-04-28T11:38:11Z", "type": "commit"}, {"oid": "da39c5e5b5bf49f206b291fb9c74d812a89d7062", "url": "https://github.com/infinispan/infinispan/commit/da39c5e5b5bf49f206b291fb9c74d812a89d7062", "message": "ISPN-11525 User test subject permissions change\n* Protobuf role subject is needed for now\n* Tasks only need exec permission for now", "committedDate": "2020-04-28T11:38:11Z", "type": "commit"}, {"oid": "da39c5e5b5bf49f206b291fb9c74d812a89d7062", "url": "https://github.com/infinispan/infinispan/commit/da39c5e5b5bf49f206b291fb9c74d812a89d7062", "message": "ISPN-11525 User test subject permissions change\n* Protobuf role subject is needed for now\n* Tasks only need exec permission for now", "committedDate": "2020-04-28T11:38:11Z", "type": "forcePushed"}]}