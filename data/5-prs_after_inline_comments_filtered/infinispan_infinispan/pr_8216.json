{"pr_number": 8216, "pr_title": "ISPN-11674 RemoteCache cleanup", "pr_createdAt": "2020-04-17T17:48:35Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8216", "timeline": [{"oid": "6722ebde397318565831961ef05fb66a96688ea3", "url": "https://github.com/infinispan/infinispan/commit/6722ebde397318565831961ef05fb66a96688ea3", "message": "ISPN-11674 Clean up RemoteCache method overrides", "committedDate": "2020-04-20T14:08:11Z", "type": "forcePushed"}, {"oid": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "url": "https://github.com/infinispan/infinispan/commit/08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "message": "ISPN-11674 Clean up RemoteCache method overrides", "committedDate": "2020-04-22T18:22:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NzU5MA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r419987590", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private void initRemoteCache(InternalRemoteCache remoteCache, OperationsFactory operationsFactory) {\n          \n          \n            \n               private void initRemoteCache(InternalRemoteCache<?, ?> remoteCache, OperationsFactory operationsFactory) {", "author": "pruivo", "createdAt": "2020-05-05T09:46:25Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManager.java", "diffHunk": "@@ -526,22 +522,19 @@ private Properties loadFromStream(InputStream stream) {\n       return NearCacheService.create(cfg, listenerNotifier);\n    }\n \n-   private void startRemoteCache(RemoteCacheHolder remoteCacheHolder, Codec codec) {\n-      RemoteCacheImpl<?, ?> remoteCache = remoteCacheHolder.remoteCache();\n+   private void startRemoteCache(InternalRemoteCache<?, ?> remoteCache, Codec codec, boolean forceReturnValue) {\n       OperationsFactory operationsFactory = createOperationFactory(remoteCache.getName(),\n-            remoteCacheHolder.forceReturnValue, codec, remoteCache.getClientStatistics());\n+            forceReturnValue, codec, remoteCache.clientStatistics());\n       initRemoteCache(remoteCache, operationsFactory);\n       remoteCache.start();\n    }\n \n    // Method that handles cache initialization - needed as a placeholder\n-   private void initRemoteCache(RemoteCacheImpl remoteCache, OperationsFactory operationsFactory) {\n+   private void initRemoteCache(InternalRemoteCache remoteCache, OperationsFactory operationsFactory) {", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5MDU2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r419990561", "bodyText": "Remove the warning from IDE\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return (InternalRemoteCache) this;\n          \n          \n            \n                  //noinspection unchecked\n          \n          \n            \n                  return (InternalRemoteCache<T, U>) this;", "author": "pruivo", "createdAt": "2020-05-05T09:51:58Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/DelegatingRemoteCache.java", "diffHunk": "@@ -0,0 +1,311 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.infinispan.client.hotrod.CacheTopologyInfo;\n+import org.infinispan.client.hotrod.DataFormat;\n+import org.infinispan.client.hotrod.Flag;\n+import org.infinispan.client.hotrod.MetadataValue;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.ServerStatistics;\n+import org.infinispan.client.hotrod.StreamingRemoteCache;\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorCollection;\n+import org.infinispan.commons.util.CloseableIteratorSet;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.query.dsl.Query;\n+\n+/**\n+ * Delegates all invocations to the provided underlying {@link InternalRemoteCache} but provides extensibility to intercept\n+ * when a method is invoked. Currently all methods are supported except for iterators produced from the\n+ * {@link #keyIterator(IntSet)} and {@link #entryIterator(IntSet)} which are known to invoke back into the delegate cache.\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public abstract class DelegatingRemoteCache<K, V> extends RemoteCacheSupport<K, V> implements InternalRemoteCache<K, V> {\n+   protected final InternalRemoteCache<K, V> delegate;\n+\n+   protected DelegatingRemoteCache(InternalRemoteCache<K, V> delegate) {\n+      this.delegate = delegate;\n+   }\n+\n+   abstract <Key, Value> InternalRemoteCache<Key, Value> newDelegatingCache(InternalRemoteCache<Key, Value> innerCache);\n+\n+   @Override\n+   public CompletableFuture<Void> putAllAsync(Map<? extends K, ? extends V> data, long lifespan, TimeUnit lifespanUnit, long maxIdle, TimeUnit maxIdleUnit) {\n+      return delegate.putAllAsync(data, lifespan, lifespanUnit, maxIdle, maxIdleUnit);\n+   }\n+\n+   @Override\n+   public CompletableFuture<Void> clearAsync() {\n+      return delegate.clearAsync();\n+   }\n+\n+   @Override\n+   public ClientStatistics clientStatistics() {\n+      return delegate.clientStatistics();\n+   }\n+\n+   @Override\n+   public ServerStatistics serverStatistics() {\n+      return delegate.serverStatistics();\n+   }\n+\n+   @Override\n+   public InternalRemoteCache<K, V> withFlags(Flag... flags) {\n+      InternalRemoteCache<K, V> newCache = delegate.withFlags(flags);\n+      if (newCache != delegate) {\n+         return newDelegatingCache(newCache);\n+      }\n+      return this;\n+   }\n+\n+   @Override\n+   public RemoteCacheManager getRemoteCacheManager() {\n+      return delegate.getRemoteCacheManager();\n+   }\n+\n+   @Override\n+   public CompletableFuture<Map<K, V>> getAllAsync(Set<?> keys) {\n+      return delegate.getAllAsync(keys);\n+   }\n+\n+   @Override\n+   public String getProtocolVersion() {\n+      return delegate.getProtocolVersion();\n+   }\n+\n+   @Override\n+   public void addClientListener(Object listener) {\n+      delegate.addClientListener(listener);\n+   }\n+\n+   @Override\n+   public void addClientListener(Object listener, Object[] filterFactoryParams, Object[] converterFactoryParams) {\n+      delegate.addClientListener(listener, filterFactoryParams, converterFactoryParams);\n+   }\n+\n+   @Override\n+   public void removeClientListener(Object listener) {\n+      delegate.removeClientListener(listener);\n+   }\n+\n+   @Override\n+   public Set<Object> getListeners() {\n+      return delegate.getListeners();\n+   }\n+\n+   @Override\n+   public <T> T execute(String taskName, Map<String, ?> params) {\n+      return delegate.execute(taskName, params);\n+   }\n+\n+   @Override\n+   public CacheTopologyInfo getCacheTopologyInfo() {\n+      return delegate.getCacheTopologyInfo();\n+   }\n+\n+   @Override\n+   public StreamingRemoteCache<K> streaming() {\n+      return delegate.streaming();\n+   }\n+\n+   @Override\n+   public <T, U> InternalRemoteCache<T, U> withDataFormat(DataFormat dataFormat) {\n+      InternalRemoteCache<T, U> newCache = delegate.withDataFormat(dataFormat);\n+      if (newCache != delegate) {\n+         return newDelegatingCache(newCache);\n+      }\n+      return (InternalRemoteCache) this;", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5NDUyMA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r419994520", "bodyText": "can't org.infinispan.client.hotrod.impl.DelegatingRemoteCache implement these methods?", "author": "pruivo", "createdAt": "2020-05-05T09:59:07Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/InvalidatedNearRemoteCache.java", "diffHunk": "@@ -133,4 +146,24 @@ public void stop() {\n       nearcache.stop(this);\n       super.stop();\n    }\n+\n+   @Override", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzOTY0OA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424439648", "bodyText": "Yes, think I missed moving these when playing with the inheritance.", "author": "wburns", "createdAt": "2020-05-13T13:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5NDUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTE2Ng==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r419999166", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private InternalRemoteCache<K, V> remoteCache;\n          \n          \n            \n               private final InternalRemoteCache<K, V> remoteCache;", "author": "pruivo", "createdAt": "2020-05-05T10:07:52Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheEntrySet.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractSet;\n+import java.util.Map;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorSet;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheEntrySet<K, V> extends AbstractSet<Map.Entry<K, V>> implements CloseableIteratorSet<Map.Entry<K, V>> {\n+   private InternalRemoteCache<K, V> remoteCache;", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDIxMw==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424440213", "bodyText": "Whoops, not sure how I missed that.", "author": "wburns", "createdAt": "2020-05-13T13:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMTQ3Mg==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420001472", "bodyText": "You can do only a single if with\nif (!(o instanceof Map.Entry))\n                return false;", "author": "pruivo", "createdAt": "2020-05-05T10:12:19Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheEntrySet.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractSet;\n+import java.util.Map;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorSet;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheEntrySet<K, V> extends AbstractSet<Map.Entry<K, V>> implements CloseableIteratorSet<Map.Entry<K, V>> {\n+   private InternalRemoteCache<K, V> remoteCache;\n+   private final IntSet segments;\n+\n+   public RemoteCacheEntrySet(InternalRemoteCache<K, V> remoteCache, IntSet segments) {\n+      this.remoteCache = remoteCache;\n+      this.segments = segments;\n+   }\n+\n+   @Override\n+   public CloseableIterator<Map.Entry<K, V>> iterator() {\n+      return new RemovableCloseableIterator<>(remoteCache.entryIterator(segments), this::remove);\n+   }\n+\n+   @Override\n+   public CloseableSpliterator<Map.Entry<K, V>> spliterator() {\n+      return Closeables.spliterator(iterator(), Long.MAX_VALUE, Spliterator.NONNULL | Spliterator.CONCURRENT);\n+   }\n+\n+   @Override\n+   public Stream<Map.Entry<K, V>> stream() {\n+      return Closeables.stream(spliterator(), false);\n+   }\n+\n+   @Override\n+   public Stream<Map.Entry<K, V>> parallelStream() {\n+      return Closeables.stream(spliterator(), true);\n+   }\n+\n+   @Override\n+   public int size() {\n+      return remoteCache.size();\n+   }\n+\n+   @Override\n+   public void clear() {\n+      remoteCache.clear();\n+   }\n+\n+   @Override\n+   public boolean contains(Object o) {\n+      Map.Entry entry = toEntry(o);", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNDU3Mw==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420004573", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private InternalRemoteCache<?, V> remoteCache;\n          \n          \n            \n               private final InternalRemoteCache<?, V> remoteCache;", "author": "pruivo", "createdAt": "2020-05-05T10:18:37Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheValuesCollection.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractCollection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorCollection;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.IteratorMapper;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheValuesCollection<V> extends AbstractCollection<V> implements CloseableIteratorCollection<V> {\n+   private InternalRemoteCache<?, V> remoteCache;", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTg1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420005851", "bodyText": "you can avoid the cast if you add K as a type: RemoteCacheValuesCollection<K, V>", "author": "pruivo", "createdAt": "2020-05-05T10:20:59Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheValuesCollection.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractCollection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorCollection;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.IteratorMapper;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheValuesCollection<V> extends AbstractCollection<V> implements CloseableIteratorCollection<V> {\n+   private InternalRemoteCache<?, V> remoteCache;\n+   private final IntSet segments;\n+\n+   RemoteCacheValuesCollection(InternalRemoteCache<?, V> remoteCache, IntSet segments) {\n+      this.remoteCache = remoteCache;\n+      this.segments = segments;\n+   }\n+\n+   @Override\n+   public CloseableIterator<V> iterator() {\n+      CloseableIterator<Map.Entry<?, V>> entryIterator = ((InternalRemoteCache) remoteCache).entryIterator(segments);", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDY2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424444661", "bodyText": "I can't add type K as it then doesn't override the method.", "author": "wburns", "createdAt": "2020-05-13T13:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MjIzMw==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424642233", "bodyText": "If you change the class signature to RemoteCacheValuesCollection<K, V>, and the remoteCache field, it works.", "author": "pruivo", "createdAt": "2020-05-13T18:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0OTc3Mg==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424649772", "bodyText": "Sorry, yes I was only thinking of the method. I can add it to the class definition sure.", "author": "wburns", "createdAt": "2020-05-13T18:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNjM3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420006376", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private InternalRemoteCache<K, Collection<V>> cache;\n          \n          \n            \n               private final InternalRemoteCache<K, Collection<V>> cache;", "author": "pruivo", "createdAt": "2020-05-05T10:22:05Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/multimap/RemoteMultimapCacheImpl.java", "diffHunk": "@@ -36,7 +37,7 @@\n    private static final Log log = LogFactory.getLog(RemoteMultimapCacheImpl.class, Log.class);\n    private static final boolean trace = log.isTraceEnabled();\n \n-   private RemoteCacheImpl<K, Collection<V>> cache;\n+   private InternalRemoteCache<K, Collection<V>> cache;", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzMxNA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420007314", "bodyText": "offtopic: why do we need lifespan and max idle?\n   private long defaultLifespan = 0;\n   private long defaultMaxIdleTime = 0;\n\nThey never change and they aren't set anywhere\ncc @karesti", "author": "pruivo", "createdAt": "2020-05-05T10:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNjM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzg3NA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420007874", "bodyText": "use CompletionStage instead? I think it is the recommended way to do it.", "author": "pruivo", "createdAt": "2020-05-05T10:25:11Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/TransactionContext.java", "diffHunk": "@@ -69,17 +69,17 @@ public String toString() {\n              '}';\n    }\n \n-   boolean containsKey(Object key, Function<K, MetadataValue<V>> remoteValueSupplier) {\n-      ByRef<Boolean> result = new ByRef<>(null);\n+   CompletableFuture<Boolean> containsKey(Object key, Function<K, MetadataValue<V>> remoteValueSupplier) {", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjA2Mg==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424446062", "bodyText": "Unfortunately, AsyncCache defines containsKeyAsync as returning a CompletableFuture :(", "author": "wburns", "createdAt": "2020-05-13T13:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwODY2NA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420008664", "bodyText": "create a JIRA please!!!", "author": "pruivo", "createdAt": "2020-05-05T10:26:41Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/TransactionalRemoteCacheImpl.java", "diffHunk": "@@ -42,7 +42,8 @@\n    private final TransactionManager transactionManager;\n    private final TransactionTable transactionTable;\n \n-   private final Function<K, MetadataValue<V>> remoteGet = super::getWithMetadata;\n+   // TODO: the remote get is force to be sync and is blocking!", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0OTUxNA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424449514", "bodyText": "I created https://issues.redhat.com/browse/ISPN-11633 a while back. Let me add it as a comment here though.", "author": "wburns", "createdAt": "2020-05-13T13:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwODY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMDM2NQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420010365", "bodyText": "nitpick: update test name", "author": "pruivo", "createdAt": "2020-05-05T10:30:09Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/CacheManagerNotStartedTest.java", "diffHunk": "@@ -107,7 +107,7 @@ public void testPutAllAsync() {\n \n    @Test(expectedExceptions = RemoteCacheManagerNotStartedException.class)\n    public void testVersionedGet() {", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMDU0OA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420010548", "bodyText": "nitpick: update test name", "author": "pruivo", "createdAt": "2020-05-05T10:30:28Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/CacheManagerStoppedTest.java", "diffHunk": "@@ -112,7 +112,7 @@ public void testPutAllAsync() {\n \n    @Test(expectedExceptions = RemoteCacheManagerNotStartedException.class, dependsOnMethods = \"testStopCacheManager\")\n    public void testVersionedGet() {", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMTExNQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420011115", "bodyText": "revert?", "author": "pruivo", "createdAt": "2020-05-05T10:31:35Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/SecureExecTest.java", "diffHunk": "@@ -156,7 +156,8 @@ private void runTestWithGivenScript(Configuration config, String scriptPath) thr\n          uploadScript(scriptName, script);\n       }\n \n-      String result = remoteCacheManager.getCache(CACHE_NAME).execute(scriptName, params);\n+      String result = remoteCacheManager.getCache(CACHE_NAME)", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MjMyMQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424452321", "bodyText": "Yeah, not sure how this change snuck in here :)", "author": "wburns", "createdAt": "2020-05-13T13:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMTk4OQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420011989", "bodyText": "nitpick: update test name", "author": "pruivo", "createdAt": "2020-05-05T10:33:20Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/retry/ReplicationRetryTest.java", "diffHunk": "@@ -59,7 +59,7 @@ public void testContains() {\n    public void testGetWithVersion() {", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMjk3OQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r420012979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private InternalRemoteCache<K, ?> remoteCache;\n          \n          \n            \n               private final InternalRemoteCache<K, ?> remoteCache;", "author": "pruivo", "createdAt": "2020-05-05T10:35:16Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/RemoteCacheKeySet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.infinispan.client.hotrod.impl;\n+\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.Spliterator;\n+import java.util.stream.Stream;\n+\n+import org.infinispan.commons.util.CloseableIterator;\n+import org.infinispan.commons.util.CloseableIteratorSet;\n+import org.infinispan.commons.util.CloseableSpliterator;\n+import org.infinispan.commons.util.Closeables;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.RemovableCloseableIterator;\n+\n+class RemoteCacheKeySet<K> extends AbstractSet<K> implements CloseableIteratorSet<K> {\n+   private InternalRemoteCache<K, ?> remoteCache;", "originalCommit": "08fb27c315b7407c190f57c67f4adcf2a2df0fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "url": "https://github.com/infinispan/infinispan/commit/4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "message": "ISPN-11674 Clean up RemoteCache method overrides", "committedDate": "2020-05-13T14:19:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NjYwNg==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424646606", "bodyText": "nitpick: extra lines", "author": "pruivo", "createdAt": "2020-05-13T18:30:04Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/TransactionalRemoteCacheImpl.java", "diffHunk": "@@ -203,14 +200,16 @@ public V get(Object key) {\n    }\n \n    @Override\n-   public boolean remove(Object key, Object value) {\n+   public CompletableFuture<Boolean> removeAsync(Object key, Object value) {\n       TransactionContext<K, V> txContext = getTransactionContext();\n       //noinspection unchecked\n       return txContext == null ?\n-            super.remove(key, value) :\n-            txContext.computeSync((K) key, entry -> removeEntryIfEquals(entry, value), remoteGet);\n+            super.removeAsync(key, value) :\n+            txContext.compute((K) key, entry -> removeEntryIfEquals(entry, value), remoteGet);\n    }\n \n+", "originalCommit": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MDE2OQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424650169", "bodyText": "can you check if this class RemoteCacheWrapper can be replaced by DelegatingRemoteCache?", "author": "pruivo", "createdAt": "2020-05-13T18:36:21Z", "path": "jcache/remote/src/main/java/org/infinispan/jcache/remote/RemoteCacheWrapper.java", "diffHunk": "@@ -15,7 +15,6 @@\n import org.infinispan.client.hotrod.RemoteCacheManager;", "originalCommit": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNTk3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424725975", "bodyText": "I had thought of doing it, but never looked into it. I can try real quick.", "author": "wburns", "createdAt": "2020-05-13T20:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MDE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDgwOA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424734808", "bodyText": "Unfortunately the DelegatingRemoteCache requires the new InternalRemoteCache. I will just leave it as is for now. We can try to clean up JCache sometime later maybe :D", "author": "wburns", "createdAt": "2020-05-13T21:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MDE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MTQzMA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424651430", "bodyText": "are these methods needed? They don't seem to be invoked in JCache", "author": "pruivo", "createdAt": "2020-05-13T18:38:36Z", "path": "jcache/remote/src/main/java/org/infinispan/jcache/remote/RemoteCacheWithStats.java", "diffHunk": "@@ -12,16 +14,25 @@ public RemoteCacheWithStats(RemoteCache<K, V> delegate, LocalStatistics stats) {\n       this.stats = stats;\n    }\n \n-   @Override\n-   public V get(Object key) {\n-      V v = delegate.get(key);\n+   private final Function<V, V> getFunction = v -> {\n       if (v == null) {\n          stats.incrementCacheMisses();\n       } else {\n          stats.incrementCacheHits();\n       }\n       stats.incrementCacheGets();\n       return v;\n+   };\n+\n+   @Override\n+   public CompletableFuture<V> getAsync(K key) {", "originalCommit": "4d15aa3d4c5221ee208dd9c595c2aa4407bf6527", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MTYzMw==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424651633", "bodyText": "if they are, the putAsyn() isn't updating the stats.", "author": "pruivo", "createdAt": "2020-05-13T18:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MTQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NDI0NA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424654244", "bodyText": "No I thought I reverted all the changes let me do that.", "author": "wburns", "createdAt": "2020-05-13T18:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MTQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4ODEzOA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424688138", "bodyText": "Also, it is missing the following methods in this class:\n@Override\n   public boolean replace(K key, V oldValue, V newValue) {\n      boolean replaced = delegate.replace(key, oldValue, newValue);\n      if (replaced) {\n         stats.incrementCachePuts();\n      }\n      return replaced;\n   }\n\nand\n@Override\n   public boolean remove(Object key, Object oldValue) {\n      boolean removed = delegate.remove(key, oldValue);\n      if (removed) {\n         stats.incrementCacheRemovals();\n      }\n      return removed;\n   }\n\nIt fixes the CacheMBStatisticsBeanTest", "author": "pruivo", "createdAt": "2020-05-13T19:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MTQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MjIwOA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424692208", "bodyText": "The same methods are missing from RemoteCacheWithSyncListeners.", "author": "pruivo", "createdAt": "2020-05-13T19:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MTQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNjQxMA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424726410", "bodyText": "Thanks, yeah removing the old value wrapper is causing that. The RemoteCacheImpl properly implements these methods out of the box now so that class wasn't needed any longer. But these were relying on it to translate the call to another method.", "author": "wburns", "createdAt": "2020-05-13T20:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MTQzMA=="}], "type": "inlineReview"}, {"oid": "c5096988d46a3dc003a55439048b5212aec8dc78", "url": "https://github.com/infinispan/infinispan/commit/c5096988d46a3dc003a55439048b5212aec8dc78", "message": "ISPN-11674 Clean up RemoteCache method overrides", "committedDate": "2020-05-13T21:12:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0NjQ1NA==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r424946454", "bodyText": "leftover?", "author": "pruivo", "createdAt": "2020-05-14T08:06:22Z", "path": "jcache/remote/src/main/java/org/infinispan/jcache/remote/RemoteCacheWithStats.java", "diffHunk": "@@ -22,7 +22,7 @@ public V get(Object key) {\n       }\n       stats.incrementCacheGets();\n       return v;\n-   }\n+   };", "originalCommit": "c5096988d46a3dc003a55439048b5212aec8dc78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTE1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8216#discussion_r425201151", "bodyText": "Yeah, removed.", "author": "wburns", "createdAt": "2020-05-14T14:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0NjQ1NA=="}], "type": "inlineReview"}, {"oid": "9d2b5c71c501459c277bd1bfeb18e74d6639a63d", "url": "https://github.com/infinispan/infinispan/commit/9d2b5c71c501459c277bd1bfeb18e74d6639a63d", "message": "ISPN-11619 Remove deprecated RemoteCache#getVersioned", "committedDate": "2020-05-14T14:55:01Z", "type": "commit"}, {"oid": "e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f", "url": "https://github.com/infinispan/infinispan/commit/e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f", "message": "ISPN-11674 Clean up RemoteCache method overrides", "committedDate": "2020-05-14T14:55:01Z", "type": "commit"}, {"oid": "e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f", "url": "https://github.com/infinispan/infinispan/commit/e2a1cf178bb58c4013ded6c8e0ba686f401e5f1f", "message": "ISPN-11674 Clean up RemoteCache method overrides", "committedDate": "2020-05-14T14:55:01Z", "type": "forcePushed"}]}