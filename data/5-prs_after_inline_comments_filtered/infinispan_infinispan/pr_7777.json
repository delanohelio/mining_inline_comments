{"pr_number": 7777, "pr_title": "[9.4.x] REPL read opt perf", "pr_createdAt": "2020-01-22T23:19:47Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7777", "timeline": [{"oid": "5e766191abc0a0221d4a3fbb40bf33f12392f273", "url": "https://github.com/infinispan/infinispan/commit/5e766191abc0a0221d4a3fbb40bf33f12392f273", "message": "check for segmentation being disabled", "committedDate": "2020-01-23T21:17:59Z", "type": "forcePushed"}, {"oid": "cf6c34b93921cd1a1433cb0566b021d7024f4a58", "url": "https://github.com/infinispan/infinispan/commit/cf6c34b93921cd1a1433cb0566b021d7024f4a58", "message": "ISPN-11209 Max Idle changes caused a REPL read performance regression\n\n* Make sure to not calculate segment if segmentation is disabled\n* Add in interface to prevent additional if/else blocks", "committedDate": "2020-02-04T18:01:05Z", "type": "commit"}, {"oid": "cf6c34b93921cd1a1433cb0566b021d7024f4a58", "url": "https://github.com/infinispan/infinispan/commit/cf6c34b93921cd1a1433cb0566b021d7024f4a58", "message": "ISPN-11209 Max Idle changes caused a REPL read performance regression\n\n* Make sure to not calculate segment if segmentation is disabled\n* Add in interface to prevent additional if/else blocks", "committedDate": "2020-02-04T18:01:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyODgzOA==", "url": "https://github.com/infinispan/infinispan/pull/7777#discussion_r376528838", "bodyText": "Shouldn't we check if (isCompletedSuccessfully(stage)) first?", "author": "danberindei", "createdAt": "2020-02-07T18:04:55Z", "path": "core/src/main/java/org/infinispan/factories/InternalCacheFactory.java", "diffHunk": "@@ -311,56 +312,18 @@ public boolean containsKey(Object key) {\n       }\n \n       @Override\n-      public CompletableFuture<V> getAsync(K key) {\n-         return getCacheEntryAsync(key)\n-               .thenApply(ice -> ice != null ? ice.getValue() : null);\n-      }\n-\n-      private InternalCacheEntry<K, V> internalPeekCacheEntry(Object key, int segment) {\n+      public InternalCacheEntry<K, V> getCacheEntry(Object key) {\n          assertKeyNotNull(key);\n          checkCanRun(cache, cache.getName());\n-         return getDataContainer().peek(segment, key);\n-      }\n-\n-      @Override\n-      public InternalCacheEntry<K, V> getCacheEntry(Object key) {\n-         int segment = keyPartitioner.getSegment(key);\n-         InternalCacheEntry<K, V> ice = internalPeekCacheEntry(key, segment);\n-         if (ice != null) {\n-            if (ice.canExpire()) {\n-               CompletionStage<Boolean> stage = expirationManager.handlePossibleExpiration(ice, segment, false);\n-               if (CompletionStages.join(stage)) {\n-                  ice = null;\n-               }\n-            }\n-         }\n-         return ice;\n-      }\n-\n-      @Override\n-      public CompletableFuture<CacheEntry<K, V>> getCacheEntryAsync(Object key) {\n          int segment = keyPartitioner.getSegment(key);\n-         InternalCacheEntry<K, V> ice = internalPeekCacheEntry(key, segment);\n-         if (ice == null) {\n-            return CompletableFutures.completedNull();\n-         }\n-         if (ice.canExpire()) {\n+         InternalCacheEntry<K, V> ice = getDataContainer().peek(segment, key);\n+         if (ice != null && ice.canExpire()) {\n             CompletionStage<Boolean> stage = expirationManager.handlePossibleExpiration(ice, segment, false);\n-            if (CompletionStages.isCompletedSuccessfully(stage)) {\n-               if (CompletionStages.join(stage)) {\n-                  return CompletableFutures.completedNull();\n-               }\n-               return CompletableFuture.completedFuture(ice);\n-            } else {\n-               return stage.thenApply(expired -> {\n-                  if (expired == Boolean.TRUE) {\n-                     return null;\n-                  }\n-                  return (CacheEntry<K, V>) ice;\n-               }).toCompletableFuture();\n+            if (CompletionStages.join(stage)) {", "originalCommit": "cf6c34b93921cd1a1433cb0566b021d7024f4a58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}