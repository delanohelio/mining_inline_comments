{"pr_number": 8101, "pr_title": "ISPN-11510 Convert detection of blocking or non blocking threads", "pr_createdAt": "2020-03-25T18:34:56Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8101", "timeline": [{"oid": "a59ba6f722a5889a06bae236efafcef0ae1a0f4a", "url": "https://github.com/infinispan/infinispan/commit/a59ba6f722a5889a06bae236efafcef0ae1a0f4a", "message": "ISPN-11510 Convert detection of blocking or non blocking threads", "committedDate": "2020-03-26T19:30:02Z", "type": "forcePushed"}, {"oid": "1af458b9aa12c7c14d811cef07bccb61be4e4646", "url": "https://github.com/infinispan/infinispan/commit/1af458b9aa12c7c14d811cef07bccb61be4e4646", "message": "ISPN-11510 Convert detection of blocking or non blocking threads", "committedDate": "2020-03-27T14:16:22Z", "type": "forcePushed"}, {"oid": "c3a65ff4626ffe646231df2db6d93d1304de7c46", "url": "https://github.com/infinispan/infinispan/commit/c3a65ff4626ffe646231df2db6d93d1304de7c46", "message": "ISPN-11510 Convert detection of blocking or non blocking threads", "committedDate": "2020-03-27T14:20:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400202495", "bodyText": "Either this method should be named something like isLoomAvailable(), or it should be possible to implement it without multi-version classes.", "author": "danberindei", "createdAt": "2020-03-30T13:44:31Z", "path": "commons/loom/src/main/java/org/infinispan/commons/jdkspecific/JREVersion.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.infinispan.commons.jdkspecific;\n+\n+public class JREVersion {\n+   private JREVersion() { }\n+\n+   public static boolean isJava15OrNewer() {", "originalCommit": "c3a65ff4626ffe646231df2db6d93d1304de7c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTM0OQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400229349", "bodyText": "Well the idea was originally that I would detect if a thread group produces non blocking threads that it can't be configured with a blocking executor. But in Loom we will want this. How do you think we should do this then?", "author": "wburns", "createdAt": "2020-03-30T14:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxODAyNg==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400318026", "bodyText": "I can just remove this for now though I guess. And we can deal with it later.", "author": "wburns", "createdAt": "2020-03-30T16:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3Nzg0MA==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400377840", "bodyText": "I would have been fine with something like isLoomAvailable(), or virtualThreadsAvailable(), I didn't want isJava15OrNewer() because stock OpenJDK 15 still doesn't have Loom.", "author": "danberindei", "createdAt": "2020-03-30T17:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3ODcwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400378705", "bodyText": "Oh okay, I misunderstood what you were saying. Either way I removed it for now.", "author": "wburns", "createdAt": "2020-03-30T17:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDM2Mg==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400380362", "bodyText": "I have created https://issues.redhat.com/browse/ISPN-11563 which we can look into later about this.", "author": "wburns", "createdAt": "2020-03-30T17:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMjQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400204619", "bodyText": "Non-backwards-compatible change, same in the builder", "author": "danberindei", "createdAt": "2020-03-30T13:47:26Z", "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfiguration.java", "diffHunk": "@@ -67,8 +60,8 @@ public AttributeSet attributes() {\n       return name;\n    }\n \n-   public Attribute<ThreadGroup> groupName() {\n-      return group;\n+   public Attribute<String> groupName() {", "originalCommit": "c3a65ff4626ffe646231df2db6d93d1304de7c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNDAwNg==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400224006", "bodyText": "I know. I did it on purpose. We can't let people specify the thread group and work properly moving forward. And we never allowed the xml definition to pass a thread group, just the name. So it is only a backwards compatibility issue for programmatic configuration.\nI guess I can add in the other method and throw an exception if you want?", "author": "wburns", "createdAt": "2020-03-30T14:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTY3Mw==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400381673", "bodyText": "No, there's no point in keeping the method just to fail at runtime.\nIn theory you could keep the old ThreadGroup setting and create our thread group within the one from the config, but I'm not sure it's worth it. I'd just like the change to be explained, either in a javadoc in the configuration/builder, or maybe just in the upgrade notes.", "author": "danberindei", "createdAt": "2020-03-30T17:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NzQ2Mw==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400387463", "bodyText": "Yeah I was going to add to the upgrading guide. I can add it there.", "author": "wburns", "createdAt": "2020-03-30T18:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxODY5Mw==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400418693", "bodyText": "Added", "author": "wburns", "createdAt": "2020-03-30T18:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NzQ3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402377475", "bodyText": "@wburns I see you kept the methods and they throw UnsupportedOperationException, I thought you'd add a comment instead?", "author": "danberindei", "createdAt": "2020-04-02T14:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMTYyMA==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400211620", "bodyText": "Missing @since and @author.", "author": "danberindei", "createdAt": "2020-03-30T13:56:30Z", "path": "commons/all/src/main/java/org/infinispan/commons/executors/BlockingResource.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.infinispan.commons.executors;\n+\n+/**\n+ * Interface to designate the resource is a blocking one.", "originalCommit": "c3a65ff4626ffe646231df2db6d93d1304de7c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTQxNQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400229415", "bodyText": "Okay.", "author": "wburns", "createdAt": "2020-03-30T14:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMTYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400215695", "bodyText": "Couldn't we have a single DefaultThreadFactory class again, with the thread group as a constructor parameter?", "author": "danberindei", "createdAt": "2020-03-30T14:01:43Z", "path": "core/src/main/java/org/infinispan/factories/NamedExecutorsFactory.java", "diffHunk": "@@ -107,13 +108,18 @@ public Object construct(String componentName) {\n \n    private ThreadFactory createThreadFactoryWithDefaults(GlobalConfiguration globalCfg, final String componentName,\n                                                          ExecutorServiceType type) {\n-      if (type.isNonBlocking()) {\n-         return new DefaultNonBlockingThreadFactory(null, getDefaultThreadPrio(componentName),\n-               DefaultThreadFactory.DEFAULT_PATTERN, globalCfg.transport().nodeName(), shortened(componentName));\n+      switch (type) {\n+         case BLOCKING:\n+            return new BlockingThreadFactory(\"ISPN-blocking-thread-group\", getDefaultThreadPrio(componentName),", "originalCommit": "c3a65ff4626ffe646231df2db6d93d1304de7c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNzkxNQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400217915", "bodyText": "I think so, yeah. Originally this was for the thread creation.", "author": "wburns", "createdAt": "2020-03-30T14:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMDUwMA==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400320500", "bodyText": "Actually, it isn't quite that simple as we would lose a check to ensure that the thread factory is non blocking when registering a non blocking executor. I can do an instanceof check and invoke a method instead though.", "author": "wburns", "createdAt": "2020-03-30T16:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NDY2Nw==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400354667", "bodyText": "Actually this ends up being much more troublesome as DefaultThreadFactory is in core which would have to move down to commons as well. I think leaving it how I had it is probably best unfortunately.", "author": "wburns", "createdAt": "2020-03-30T17:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4Njc2Mg==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400386762", "bodyText": "Actually, it isn't quite that simple as we would lose a check to ensure that the thread factory is non blocking when registering a non blocking executor. I can do an instanceof check and invoke a method instead though.\n\nMaybe I'm missing something, but why do we need a check, if the blocking threads and the non-blocking threads are exactly the same, and only the thread group is different.\n\nActually this ends up being much more troublesome as DefaultThreadFactory is in core which would have to move down to commons as well.\n\nI'm definitely missing something here, I just see that NamedExecutorsFactory, BlockingThreadFactory, and NonBlockingThreadFactory are also in core.", "author": "danberindei", "createdAt": "2020-03-30T17:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwMDA1NA==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400400054", "bodyText": "https://github.com/infinispan/infinispan/blob/master/commons/all/src/main/java/org/infinispan/commons/executors/BlockingThreadPoolExecutorFactory.java#L67 is the guy who checks to make sure that when you have an executor that is non blocking that you also have a thread factory that produces non blocking threads.", "author": "wburns", "createdAt": "2020-03-30T18:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxOTM3MQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r400419371", "bodyText": "Actually, it isn't quite that simple as we would lose a check to ensure that the thread factory is non blocking when registering a non blocking executor. I can do an instanceof check and invoke a method instead though.\n\nMaybe I'm missing something, but why do we need a check, if the blocking threads and the non-blocking threads are exactly the same, and only the thread group is different.\n\nThey aren't exactly the same, we have to make sure all threads of a given executor are either never blocked or can be.", "author": "wburns", "createdAt": "2020-03-30T18:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMjU5Nw==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402402597", "bodyText": "I had to try to remove BlockingThreadFactory and NonBlockingThreadFactory myself to see the problem, but I think I have a solution here:\nmaster...danberindei:ISPN-11510_thread_type_detection\nI'm looking forward to having the programmatic configuration as simple as the XML configuration, with its <blocking-thread-pool/> and <non-blocking-thread-pool/> elements.\n\n[...] we have to make sure all threads of a given executor are either never blocked or can be.\n\nSure, but the check now involves only the thread's group, not the thread itself.", "author": "danberindei", "createdAt": "2020-04-02T15:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNzE5OA==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402417198", "bodyText": "I'm looking forward to having the programmatic configuration as simple as the XML configuration, with its  and  elements.\n\nOops, I thought we had merged the <thread-factory/> element into <blocking-thread-pool/> and <non-blocking-thread-pool/>. I guess the XML configuration is just as complicated as the programmatic one :)", "author": "danberindei", "createdAt": "2020-04-02T15:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDg5NQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402420895", "bodyText": "Oops, I thought we had merged the <thread-factory/> element into <blocking-thread-pool/> and <non-blocking-thread-pool/>. I guess the XML configuration is just as complicated as the programmatic one :)\n\nNo, this is something I had thought of doing, but didn't really look into it. I would love if we didn't have it, it is really annoying to say the least.", "author": "wburns", "createdAt": "2020-04-02T15:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE2MTg0Nw==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r403161847", "bodyText": "I had to try to remove BlockingThreadFactory and NonBlockingThreadFactory myself to see the problem, but I think I have a solution here:\nmaster...danberindei:ISPN-11510_thread_type_detection\n\nSo the changes here delay the check until runtime and inside the executor itself. This isn't as friendly from an error perspective as what I have at the moment as the error is immediately seen in the thread that is bootstrapping the components, which will bubble up quite well. I am not sure how this other error will propagate if at all.", "author": "wburns", "createdAt": "2020-04-03T17:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNzY4OQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r405117689", "bodyText": "Fair enough, hopefully we'll simplify the config at some point and make that check unnecessary anyway.", "author": "danberindei", "createdAt": "2020-04-07T21:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTY5NQ=="}], "type": "inlineReview"}, {"oid": "d8007979bbf41ae757d1fcd6d3a0e05dc3914b18", "url": "https://github.com/infinispan/infinispan/commit/d8007979bbf41ae757d1fcd6d3a0e05dc3914b18", "message": "ISPN-11561 Remove extra thread in BlockingTaskAwareExecutorServiceImpl", "committedDate": "2020-03-30T17:05:06Z", "type": "forcePushed"}, {"oid": "0b7ee815144fb7efb0010bbc0ffc94907b4a1f9a", "url": "https://github.com/infinispan/infinispan/commit/0b7ee815144fb7efb0010bbc0ffc94907b4a1f9a", "message": "ISPN-11561 Remove extra thread in BlockingTaskAwareExecutorServiceImpl", "committedDate": "2020-03-30T17:13:13Z", "type": "forcePushed"}, {"oid": "39c7dba152e12416bade5eb4b4525e06b5e5d38f", "url": "https://github.com/infinispan/infinispan/commit/39c7dba152e12416bade5eb4b4525e06b5e5d38f", "message": "ISPN-11561 Remove extra thread in BlockingTaskAwareExecutorServiceImpl", "committedDate": "2020-03-30T18:48:15Z", "type": "forcePushed"}, {"oid": "23761b8a3d110cc74b7f9ece7b4c415f804e908a", "url": "https://github.com/infinispan/infinispan/commit/23761b8a3d110cc74b7f9ece7b4c415f804e908a", "message": "ISPN-11561 Remove extra thread in BlockingTaskAwareExecutorServiceImpl", "committedDate": "2020-03-31T03:43:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MDE5NQ==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r402380195", "bodyText": "Shouldn't this method return attributes.attribute(GROUP).get()?", "author": "danberindei", "createdAt": "2020-04-02T14:57:16Z", "path": "core/src/main/java/org/infinispan/configuration/global/ThreadFactoryConfigurationBuilder.java", "diffHunk": "@@ -45,15 +53,23 @@ public ThreadFactoryConfigurationBuilder nodeName(String nodeName) {\n       return this;\n    }\n \n-   public String name() {\n+   /**\n+    * @deprecated Please use {@link #threadGroupName()} instead\n+    */\n+   @Deprecated\n+   public ThreadGroup group() {\n+      throw new UnsupportedOperationException();\n+   }\n+\n+   public String threadGroupName() {", "originalCommit": "23761b8a3d110cc74b7f9ece7b4c415f804e908a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE3MTY1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8101#discussion_r403171656", "bodyText": "Actually it was supposed to be named name instead. But I can just remove the unsupported operation methods instead , as that is cleaner.", "author": "wburns", "createdAt": "2020-04-03T17:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MDE5NQ=="}], "type": "inlineReview"}, {"oid": "ffdc67126c4952a5db5964ead107e1621f46cfe9", "url": "https://github.com/infinispan/infinispan/commit/ffdc67126c4952a5db5964ead107e1621f46cfe9", "message": "ISPN-11561 Remove extra thread in BlockingTaskAwareExecutorServiceImpl", "committedDate": "2020-04-03T17:29:43Z", "type": "forcePushed"}, {"oid": "2fc042d529e36a7e287b4cb5f87e34ed1b4b5774", "url": "https://github.com/infinispan/infinispan/commit/2fc042d529e36a7e287b4cb5f87e34ed1b4b5774", "message": "ISPN-11510 Convert detection of blocking or non blocking threads", "committedDate": "2020-04-07T21:24:37Z", "type": "commit"}, {"oid": "dfb4c31b56dfd84d98485bac18ee0afcc890973d", "url": "https://github.com/infinispan/infinispan/commit/dfb4c31b56dfd84d98485bac18ee0afcc890973d", "message": "ISPN-11561 Remove extra thread in BlockingTaskAwareExecutorServiceImpl", "committedDate": "2020-04-07T21:24:37Z", "type": "commit"}, {"oid": "dfb4c31b56dfd84d98485bac18ee0afcc890973d", "url": "https://github.com/infinispan/infinispan/commit/dfb4c31b56dfd84d98485bac18ee0afcc890973d", "message": "ISPN-11561 Remove extra thread in BlockingTaskAwareExecutorServiceImpl", "committedDate": "2020-04-07T21:24:37Z", "type": "forcePushed"}]}