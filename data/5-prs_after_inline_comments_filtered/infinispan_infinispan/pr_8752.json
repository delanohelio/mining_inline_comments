{"pr_number": 8752, "pr_title": "ISPN-12394 Allow templates to be defined clusterwide and persisted", "pr_createdAt": "2020-10-07T09:17:32Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8752", "timeline": [{"oid": "f9df257fac1d6ff4b3c6f664393fa30329558ce8", "url": "https://github.com/infinispan/infinispan/commit/f9df257fac1d6ff4b3c6f664393fa30329558ce8", "message": "ISPN-12394 Allow templates to be defined clusterwide and persisted", "committedDate": "2020-10-07T09:50:41Z", "type": "forcePushed"}, {"oid": "8eaea95270d782b5785116da42056b4889f23135", "url": "https://github.com/infinispan/infinispan/commit/8eaea95270d782b5785116da42056b4889f23135", "message": "ISPN-12394 Allow templates to be defined clusterwide and persisted", "committedDate": "2020-10-07T12:36:39Z", "type": "forcePushed"}, {"oid": "b8b3f02be9c680a8ae4d7187e674d66628fe78e2", "url": "https://github.com/infinispan/infinispan/commit/b8b3f02be9c680a8ae4d7187e674d66628fe78e2", "message": "ISPN-12394 Allow templates to be defined clusterwide and persisted", "committedDate": "2020-10-08T15:35:53Z", "type": "forcePushed"}, {"oid": "75067f76897596eafc79f9f66ac8cb1954ec73ea", "url": "https://github.com/infinispan/infinispan/commit/75067f76897596eafc79f9f66ac8cb1954ec73ea", "message": "ISPN-12394 Allow templates to be defined clusterwide and persisted", "committedDate": "2020-10-08T16:28:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzMDc1MA==", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r503930750", "bodyText": "Why didn't you add these to CacheContainerAdmin instead so that they can be shared with EmbeddedCacheManagerAdmin", "author": "tristantarrant", "createdAt": "2020-10-13T13:01:22Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManagerAdmin.java", "diffHunk": "@@ -102,4 +102,23 @@\n     * @throws HotRodClientException\n     */\n    void reindexCache(String name) throws HotRodClientException;\n+\n+   /**\n+    * Retrieves an existing template on the remote server cluster. If it doesn't exist, it will be created using the\n+    * specified template name.\n+    *\n+    * @param name the name of the template to create\n+    * @param configuration the configuration object\n+    *\n+    * @throws HotRodClientException\n+    */\n+   void createTemplate(String name, BasicConfiguration configuration);", "originalCommit": "cde276338614e5df352a0a0b04e733925e4edaef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3MzE5OA==", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r503973198", "bodyText": "Just an oversight, updated", "author": "ryanemerson", "createdAt": "2020-10-13T13:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzMDc1MA=="}], "type": "inlineReview"}, {"oid": "2bc227d9ba09522383f6b42eb9c06ca347e6fc2a", "url": "https://github.com/infinispan/infinispan/commit/2bc227d9ba09522383f6b42eb9c06ca347e6fc2a", "message": "ISPN-12394 Allow templates to be defined clusterwide and persisted", "committedDate": "2020-10-13T13:56:03Z", "type": "commit"}, {"oid": "155b1ff04ca5322b446cf00c6af8825628d6717a", "url": "https://github.com/infinispan/infinispan/commit/155b1ff04ca5322b446cf00c6af8825628d6717a", "message": "ISPN-12411 org.infinispan.CONFIG should ignore zero-capacity-node=true", "committedDate": "2020-10-13T13:56:03Z", "type": "commit"}, {"oid": "155b1ff04ca5322b446cf00c6af8825628d6717a", "url": "https://github.com/infinispan/infinispan/commit/155b1ff04ca5322b446cf00c6af8825628d6717a", "message": "ISPN-12411 org.infinispan.CONFIG should ignore zero-capacity-node=true", "committedDate": "2020-10-13T13:56:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczOTk4MA==", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r510739980", "bodyText": "What's the reason to not allow a LOCAL configuration?\nI was thinking of deprecating DefaultCacheManager.defineConfiguration() and telling the users to use the admin interface instead, but we can't do that if we don't allow LOCAL templates.", "author": "danberindei", "createdAt": "2020-10-23T09:00:20Z", "path": "commons/all/src/main/java/org/infinispan/commons/api/CacheContainerAdmin.java", "diffHunk": "@@ -119,4 +119,19 @@ public static AdminFlag valueOf(int index) {\n     * @return\n     */\n    C withFlags(EnumSet<AdminFlag> flags);\n+\n+   /**\n+    *  Creates a template on the container using the provided configuration.\n+    *\n+    * @param name the name of the template\n+    * @param configuration the configuration to use. It must be a clustered configuration (e.g. distributed)", "originalCommit": "155b1ff04ca5322b446cf00c6af8825628d6717a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NDkzNw==", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r512564937", "bodyText": "I was simply replicating what we allow for createCache. I guess the idea is that a local cache/template should always be local and not replicated to other nodes. For example, if two nodes wanted a local cache with the same name.", "author": "ryanemerson", "createdAt": "2020-10-27T10:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczOTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0MTk3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r510741976", "bodyText": "In keeping with my previous comment, Defines a cache template cluster-wide would sound more friendly to LOCAL caches. It would also fit better with @oraNod's in-progress terminology PR (#8742).", "author": "danberindei", "createdAt": "2020-10-23T09:04:09Z", "path": "core/src/main/java/org/infinispan/globalstate/GlobalConfigurationManager.java", "diffHunk": "@@ -26,6 +26,24 @@\n     */\n    Cache<ScopedState, Object> getStateCache();\n \n+   /**\n+    * Defines a cluster-wide configuration template", "originalCommit": "155b1ff04ca5322b446cf00c6af8825628d6717a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0NzY5MA==", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r510747690", "bodyText": "DefaultCacheManager and Configuration don't allow a template and a cache to have the same name, shouldn't we do that here as well? Either way, the documentation should be clear about the namespaces and there should be a test.\nIt might have been simpler to keep a single scope and rely on Configuration.isTemplate() to distinguish between caches and templates.", "author": "danberindei", "createdAt": "2020-10-23T09:13:51Z", "path": "core/src/main/java/org/infinispan/globalstate/impl/GlobalConfigurationManagerImpl.java", "diffHunk": "@@ -143,6 +163,28 @@ void start() {\n       return stateCache;\n    }\n \n+   @Override\n+   public CompletableFuture<Void> createTemplate(String name, Configuration configuration, EnumSet<CacheContainerAdmin.AdminFlag> flags) {\n+      Cache<ScopedState, Object> cache = getStateCache();\n+      ScopedState key = new ScopedState(TEMPLATE_SCOPE, name);\n+      return cache.containsKeyAsync(key).thenCompose(exists -> {", "originalCommit": "155b1ff04ca5322b446cf00c6af8825628d6717a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NjE4NQ==", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r512566185", "bodyText": "It might have been simpler to keep a single scope and rely on Configuration.isTemplate() to distinguish between caches and templates.\n\nThis isn't possible as we don't serialize whether a configuration is a template or not. This is always set via the ConfigurationBuilder.", "author": "ryanemerson", "createdAt": "2020-10-27T10:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0NzY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTU5Nw==", "url": "https://github.com/infinispan/infinispan/pull/8752#discussion_r510751597", "bodyText": "Shouldn't it say \"across the cluster\" as well? E.g.\nRemoves a template across the cluster. If the template is persistent, it will also be removed from persisted state.", "author": "danberindei", "createdAt": "2020-10-23T09:20:33Z", "path": "core/src/main/java/org/infinispan/manager/EmbeddedCacheManagerAdmin.java", "diffHunk": "@@ -68,6 +68,37 @@\n     */\n    <K, V> Cache<K, V> getOrCreateCache(String name, Configuration configuration);\n \n+   /**\n+    * Creates a template that is replicated across the cluster using the specified configuration.\n+    * The template will survive topology changes, e.g. when a new node joins the cluster,\n+    * it will automatically be created there. This method will wait for the template to be created on all nodes before\n+    * returning.\n+    *\n+    * @param name the name of the template\n+    * @param configuration the configuration to use. It must be a clustered configuration (e.g. distributed)\n+    * @throws org.infinispan.commons.CacheConfigurationException if a template with the same name already exists\n+    */\n+   void createTemplate(String name, Configuration configuration);\n+\n+   /**\n+    * Retrieves an existing template or creates one across the cluster using the specified configuration.\n+    * The template will survive topology changes, e.g. when a new node joins the cluster,\n+    * it will automatically be created there. This method will wait for the template to be created on all nodes before\n+    * returning.\n+    *\n+    * @param name the name of the template\n+    * @param configuration the configuration to use. It must be a clustered configuration (e.g. distributed)\n+    * @return the template configuration\n+    */\n+   Configuration getOrCreateTemplate(String name, Configuration configuration);\n+\n+   /**\n+    * Removes a template from the cache container. Any persisted data will be cleared.", "originalCommit": "155b1ff04ca5322b446cf00c6af8825628d6717a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}