{"pr_number": 8775, "pr_title": "ISPN-12402 + ISPN-12184 Multiple single-port endpoints and explicit/implicit fixes", "pr_createdAt": "2020-10-13T14:46:39Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8775", "timeline": [{"oid": "98fa779955224b99d8deec70f5aedb76ac7a8251", "url": "https://github.com/infinispan/infinispan/commit/98fa779955224b99d8deec70f5aedb76ac7a8251", "message": "ISPN-12402 Allow multiple endpoints\n\n* Allow the ability to disable admin ops on endpoint", "committedDate": "2020-10-13T14:47:49Z", "type": "forcePushed"}, {"oid": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9", "url": "https://github.com/infinispan/infinispan/commit/0cf7ef6234fafcd9d066cd8c050b18ea024393f9", "message": "ISPN-12402 Allow multiple endpoints\n\n* Allow the ability to disable admin ops on endpoint", "committedDate": "2020-10-21T06:55:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1OTU5NA==", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510259594", "bodyText": "not sure how useful to have IMPLICIT_CONNECTOR_SECURITY. It is only used by org.infinispan.server.configuration.endpoint.EndpointConfigurationBuilder#create() and it could be a boolean in that class.", "author": "pruivo", "createdAt": "2020-10-22T15:34:31Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfiguration.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package org.infinispan.server.configuration.endpoint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.core.configuration.ProtocolServerConfiguration;\n+import org.infinispan.server.router.configuration.SinglePortRouterConfiguration;\n+\n+/**\n+ * @since 10.0\n+ */\n+public class EndpointConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> SOCKET_BINDING = AttributeDefinition.builder(\"socket-binding\", null, String.class).build();\n+   static final AttributeDefinition<String> SECURITY_REALM = AttributeDefinition.builder(\"security-realm\", null, String.class).build();\n+   static final AttributeDefinition<Boolean> IMPLICIT_CONNECTOR_SECURITY = AttributeDefinition.builder(\"implicit-connector-security\", false, Boolean.class).build();\n+   static final AttributeDefinition<Boolean> ADMIN = AttributeDefinition.builder(\"admin\", true, Boolean.class).build();\n+\n+   private final List<ProtocolServerConfiguration> connectors;\n+   private final SinglePortRouterConfiguration singlePort;\n+\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(EndpointConfiguration.class, SOCKET_BINDING, SECURITY_REALM, IMPLICIT_CONNECTOR_SECURITY, ADMIN);\n+   }\n+\n+   private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.ENDPOINTS.toString());\n+\n+   private final AttributeSet attributes;\n+\n+   private final List<ConfigurationInfo> configs = new ArrayList<>();\n+\n+   EndpointConfiguration(AttributeSet attributes,\n+                         List<ProtocolServerConfiguration> connectors,\n+                         SinglePortRouterConfiguration singlePort) {\n+      this.attributes = attributes.checkProtection();\n+      this.connectors = connectors;\n+      this.singlePort = singlePort;\n+      configs.addAll(connectors);\n+   }\n+\n+   @Override\n+   public List<ConfigurationInfo> subElements() {\n+      return configs;\n+   }\n+\n+   public SinglePortRouterConfiguration singlePortRouter() {\n+      return singlePort;\n+   }\n+\n+   public List<ProtocolServerConfiguration> connectors() {\n+      return connectors;\n+   }\n+\n+   public boolean implicitConnectorSecurity() {\n+      return attributes.attribute(IMPLICIT_CONNECTOR_SECURITY).get();", "originalCommit": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MDI2Nw==", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510260267", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 10.0\n          \n          \n            \n             * @since 12.0", "author": "pruivo", "createdAt": "2020-10-22T15:35:23Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.infinispan.server.configuration.endpoint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.rest.configuration.RestServerConfigurationBuilder;\n+import org.infinispan.server.Server;\n+import org.infinispan.server.configuration.ServerConfigurationBuilder;\n+import org.infinispan.server.configuration.security.KerberosSecurityFactoryConfiguration;\n+import org.infinispan.server.core.configuration.ProtocolServerConfiguration;\n+import org.infinispan.server.core.configuration.ProtocolServerConfigurationBuilder;\n+import org.infinispan.server.hotrod.configuration.AuthenticationConfigurationBuilder;\n+import org.infinispan.server.hotrod.configuration.HotRodServerConfigurationBuilder;\n+import org.infinispan.server.security.ServerSecurityRealm;\n+import org.wildfly.security.sasl.util.SaslMechanismInformation;\n+\n+/**\n+ * @since 10.0", "originalCommit": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NDEzMg==", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510264132", "bodyText": "nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Optional<Entry<String, List<ProtocolServerConfigurationBuilder<?, ?>>>> repeated = buildersPerClass.entrySet()\n          \n          \n            \n                        .stream().filter(e -> e.getValue().size() > 1).findFirst();\n          \n          \n            \n            \n          \n          \n            \n                  repeated.ifPresent(e -> {\n          \n          \n            \n                     String names = e.getValue().stream().map(ProtocolServerConfigurationBuilder::name).collect(Collectors.joining(\",\"));\n          \n          \n            \n                     throw Server.log.multipleEndpointsSameTypeFound(names);\n          \n          \n            \n                  });\n          \n          \n            \n            buildersPerClass.values().stream()\n          \n          \n            \n                        .filter(c -> c.size() > 1)\n          \n          \n            \n                        .findFirst()\n          \n          \n            \n                        .ifPresent(c -> {\n          \n          \n            \n                           String names = c.stream().map(ProtocolServerConfigurationBuilder::name).collect(Collectors.joining(\",\"));\n          \n          \n            \n                           throw Server.log.multipleEndpointsSameTypeFound(names);\n          \n          \n            \n                        });", "author": "pruivo", "createdAt": "2020-10-22T15:40:37Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.infinispan.server.configuration.endpoint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.rest.configuration.RestServerConfigurationBuilder;\n+import org.infinispan.server.Server;\n+import org.infinispan.server.configuration.ServerConfigurationBuilder;\n+import org.infinispan.server.configuration.security.KerberosSecurityFactoryConfiguration;\n+import org.infinispan.server.core.configuration.ProtocolServerConfiguration;\n+import org.infinispan.server.core.configuration.ProtocolServerConfigurationBuilder;\n+import org.infinispan.server.hotrod.configuration.AuthenticationConfigurationBuilder;\n+import org.infinispan.server.hotrod.configuration.HotRodServerConfigurationBuilder;\n+import org.infinispan.server.security.ServerSecurityRealm;\n+import org.wildfly.security.sasl.util.SaslMechanismInformation;\n+\n+/**\n+ * @since 10.0\n+ */\n+public class EndpointConfigurationBuilder implements Builder<EndpointConfiguration> {\n+   private final AttributeSet attributes;\n+   private final ServerConfigurationBuilder serverConfigurationBuilder;\n+   private final List<ProtocolServerConfigurationBuilder<?, ?>> connectorBuilders = new ArrayList<>(2);\n+   private final SinglePortServerConfigurationBuilder singlePortBuilder = new SinglePortServerConfigurationBuilder();\n+\n+   public EndpointConfigurationBuilder(ServerConfigurationBuilder serverConfigurationBuilder, String socketBindingName) {\n+      this.serverConfigurationBuilder = serverConfigurationBuilder;\n+      this.attributes = EndpointConfiguration.attributeDefinitionSet();\n+      attributes.attribute(EndpointConfiguration.SOCKET_BINDING).set(socketBindingName);\n+      serverConfigurationBuilder.applySocketBinding(socketBindingName, singlePortBuilder, singlePortBuilder);\n+   }\n+\n+   public EndpointConfigurationBuilder securityRealm(String name) {\n+      attributes.attribute(EndpointConfiguration.SECURITY_REALM).set(name);\n+      singlePortBuilder.securityRealm(serverConfigurationBuilder.getSecurityRealm(name));\n+      return this;\n+   }\n+\n+   public EndpointConfigurationBuilder implicitConnectorSecurity(boolean implicitConnectorSecurity) {\n+      attributes.attribute(EndpointConfiguration.IMPLICIT_CONNECTOR_SECURITY).set(implicitConnectorSecurity);\n+      return this;\n+   }\n+\n+   public EndpointConfigurationBuilder admin(boolean admin) {\n+      attributes.attribute(EndpointConfiguration.ADMIN).set(admin);\n+      return this;\n+   }\n+\n+   public boolean admin() {\n+      return attributes.attribute(EndpointConfiguration.ADMIN).get();\n+   }\n+\n+   public List<ProtocolServerConfigurationBuilder<?, ?>> connectors() {\n+      return connectorBuilders;\n+   }\n+\n+   public SinglePortServerConfigurationBuilder singlePort() {\n+      return singlePortBuilder;\n+   }\n+\n+   public <T extends ProtocolServerConfigurationBuilder<?, ?>> T addConnector(Class<T> klass) {\n+      try {\n+         T builder = klass.getConstructor().newInstance();\n+         connectorBuilders.add(builder);\n+         singlePortBuilder.applyConfigurationToProtocol(builder);\n+         return builder;\n+      } catch (Exception e) {\n+         throw Server.log.cannotInstantiateProtocolServerConfigurationBuilder(klass, e);\n+      }\n+   }\n+\n+   @Override\n+   public void validate() {\n+      Map<String, List<ProtocolServerConfigurationBuilder<?, ?>>> buildersPerClass = connectorBuilders.stream()\n+            .collect(Collectors.groupingBy(s -> s.getClass().getSimpleName() + \"/\" + s.host() + \":\" + s.port()));\n+\n+      Optional<Entry<String, List<ProtocolServerConfigurationBuilder<?, ?>>>> repeated = buildersPerClass.entrySet()\n+            .stream().filter(e -> e.getValue().size() > 1).findFirst();\n+\n+      repeated.ifPresent(e -> {\n+         String names = e.getValue().stream().map(ProtocolServerConfigurationBuilder::name).collect(Collectors.joining(\",\"));\n+         throw Server.log.multipleEndpointsSameTypeFound(names);\n+      });", "originalCommit": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3MDUxNg==", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510270516", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 11.0\n          \n          \n            \n             * @since 12.0", "author": "pruivo", "createdAt": "2020-10-22T15:49:09Z", "path": "server/tests/src/test/java/org/infinispan/server/security/AuthenticationMultiEndpointIT.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.infinispan.server.security;\n+\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.client.hotrod.exceptions.HotRodClientException;\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.RestResponse;\n+import org.infinispan.client.rest.configuration.Protocol;\n+import org.infinispan.client.rest.configuration.RestClientConfigurationBuilder;\n+import org.infinispan.configuration.cache.CacheMode;\n+import org.infinispan.server.test.core.LdapServerRule;\n+import org.infinispan.server.test.core.category.Security;\n+import org.infinispan.server.test.junit4.InfinispanServerRule;\n+import org.infinispan.server.test.junit4.InfinispanServerRuleBuilder;\n+import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.wildfly.security.http.HttpConstants;\n+import org.wildfly.security.sasl.util.SaslMechanismInformation;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0", "originalCommit": "0cf7ef6234fafcd9d066cd8c050b18ea024393f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7204afe187edc50e84e6c7b107b6eb8e86b20157", "url": "https://github.com/infinispan/infinispan/commit/7204afe187edc50e84e6c7b107b6eb8e86b20157", "message": "ISPN-12402 Allow multiple endpoints\n\n* Allow the ability to disable admin ops on endpoint", "committedDate": "2020-10-22T19:36:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMjQzOA==", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r510722438", "bodyText": "nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 10.0\n          \n          \n            \n             * @since 12.0", "author": "pruivo", "createdAt": "2020-10-23T08:31:30Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/endpoint/EndpointConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.infinispan.server.configuration.endpoint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.core.configuration.ProtocolServerConfiguration;\n+import org.infinispan.server.router.configuration.SinglePortRouterConfiguration;\n+\n+/**\n+ * @since 10.0", "originalCommit": "7204afe187edc50e84e6c7b107b6eb8e86b20157", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "83b7acc8de83a25048eb0c4c45b3c909e1089a70", "url": "https://github.com/infinispan/infinispan/commit/83b7acc8de83a25048eb0c4c45b3c909e1089a70", "message": "ISPN-12402 Allow multiple endpoints\n\n* Allow the ability to disable admin ops on endpoint", "committedDate": "2020-10-23T10:57:49Z", "type": "forcePushed"}, {"oid": "d1b1e03ef8561e5173ba5f3cef64a3dbb7192962", "url": "https://github.com/infinispan/infinispan/commit/d1b1e03ef8561e5173ba5f3cef64a3dbb7192962", "message": "Optional metrics auth", "committedDate": "2020-11-05T11:24:01Z", "type": "forcePushed"}, {"oid": "6612c16a554e94d626a9d0e12db7b7b7d35a16d2", "url": "https://github.com/infinispan/infinispan/commit/6612c16a554e94d626a9d0e12db7b7b7d35a16d2", "message": "Optional metrics auth", "committedDate": "2020-11-05T12:19:30Z", "type": "forcePushed"}, {"oid": "5def4cab0155d5055a77b44097b8bbf242ffc760", "url": "https://github.com/infinispan/infinispan/commit/5def4cab0155d5055a77b44097b8bbf242ffc760", "message": "ISPN-12470 Metrics authentication should be optional", "committedDate": "2020-11-05T12:23:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MDE3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r518270175", "bodyText": "I guess this requires a proper log message :)", "author": "pruivo", "createdAt": "2020-11-05T18:26:18Z", "path": "server/runtime/src/main/java/org/infinispan/server/Server.java", "diffHunk": "@@ -348,43 +355,48 @@ public void setExitHandler(ExitHandler exitHandler) {\n          taskManager = bcr.getComponent(TaskManager.class).running();\n          taskManager.registerTaskEngine(extensions.getServerTaskEngine(cm));\n \n-         // Start the protocol servers\n-         SinglePortRouteSource routeSource = new SinglePortRouteSource();\n-         ConcurrentMap<Route<? extends RouteSource, ? extends RouteDestination>, Object> routes = new ConcurrentHashMap<>();\n-         serverConfiguration.endpoints().connectors().parallelStream().forEach(configuration -> {\n-            try {\n-               Class<? extends ProtocolServer> protocolServerClass = configuration.getClass().getAnnotation(ConfigurationFor.class).value().asSubclass(ProtocolServer.class);\n-               ProtocolServer protocolServer = Util.getInstance(protocolServerClass);\n-               if (protocolServer instanceof RestServer) ((RestServer) protocolServer).setServer(this);\n-               protocolServers.put(protocolServer.getName() + \"-\" + configuration.name(), protocolServer);\n-               SecurityActions.startProtocolServer(protocolServer, configuration, cm);\n-               ProtocolServerConfiguration protocolConfig = protocolServer.getConfiguration();\n-               if (protocolConfig.startTransport()) {\n-                  log.protocolStarted(protocolServer.getName(), protocolConfig.host(), protocolConfig.port());\n-               } else {\n-                  if (protocolServer instanceof HotRodServer) {\n-                     routes.put(new Route<>(routeSource, new HotRodServerRouteDestination(protocolServer.getName(), (HotRodServer) protocolServer)), 0);\n-                     extensions.apply((HotRodServer) protocolServer);\n-                  } else if (protocolServer instanceof RestServer) {\n-                     routes.put(new Route<>(routeSource, new RestServerRouteDestination(protocolServer.getName(), (RestServer) protocolServer)), 0);\n+         for (EndpointConfiguration endpoint : serverConfiguration.endpoints().endpoints()) {\n+            // Start the protocol servers\n+            SinglePortRouteSource routeSource = new SinglePortRouteSource();\n+            ConcurrentMap<Route<? extends RouteSource, ? extends RouteDestination>, Object> routes = new ConcurrentHashMap<>();\n+            endpoint.connectors().parallelStream().forEach(configuration -> {\n+               try {\n+                  Class<? extends ProtocolServer> protocolServerClass = configuration.getClass().getAnnotation(ConfigurationFor.class).value().asSubclass(ProtocolServer.class);\n+                  ProtocolServer protocolServer = Util.getInstance(protocolServerClass);\n+                  if (endpoint.admin()) {\n+                     protocolServer.setServer(this);\n+                  }\n+                  protocolServers.put(protocolServer.getName() + \"-\" + configuration.name(), protocolServer);\n+                  SecurityActions.startProtocolServer(protocolServer, configuration, cm);\n+                  ProtocolServerConfiguration protocolConfig = protocolServer.getConfiguration();\n+                  if (protocolConfig.startTransport()) {\n+                     log.protocolStarted(protocolServer.getName(), configuration.socketBinding(), protocolConfig.host(), protocolConfig.port());\n+                  } else {\n+                     if (protocolServer instanceof HotRodServer) {\n+                        routes.put(new Route<>(routeSource, new HotRodServerRouteDestination(protocolServer.getName(), (HotRodServer) protocolServer)), 0);\n+                        extensions.apply((HotRodServer) protocolServer);\n+                     } else if (protocolServer instanceof RestServer) {\n+                        routes.put(new Route<>(routeSource, new RestServerRouteDestination(protocolServer.getName(), (RestServer) protocolServer)), 0);\n+                     }\n+                     log.protocolStarted(protocolServer.getName());\n                   }\n-                  log.protocolStarted(protocolServer.getName());\n+               } catch (Throwable t) {\n+                  System.err.println(t.getMessage());", "originalCommit": "5def4cab0155d5055a77b44097b8bbf242ffc760", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MTI4Nw==", "url": "https://github.com/infinispan/infinispan/pull/8775#discussion_r518271287", "bodyText": "nitpick: remove empty line", "author": "pruivo", "createdAt": "2020-11-05T18:28:13Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java", "diffHunk": "@@ -1102,10 +1102,10 @@ private void parseDataSourceConnectionPool(XMLExtendedStreamReader reader, DataS\n    }\n \n    private void parseEndpoints(XMLExtendedStreamReader reader, ConfigurationBuilderHolder holder, ServerConfigurationBuilder builder) throws XMLStreamException {\n-      EndpointsConfigurationBuilder endpoints = builder.endpoints();\n+", "originalCommit": "5def4cab0155d5055a77b44097b8bbf242ffc760", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cfb7c4fcc69db2de98d7b559e169329e6fb0a71b", "url": "https://github.com/infinispan/infinispan/commit/cfb7c4fcc69db2de98d7b559e169329e6fb0a71b", "message": "ISPN-12470 Metrics authentication should be optional", "committedDate": "2020-11-06T10:04:59Z", "type": "forcePushed"}, {"oid": "bc575dca28d32a5cd6104eea89cb452dda55bddd", "url": "https://github.com/infinispan/infinispan/commit/bc575dca28d32a5cd6104eea89cb452dda55bddd", "message": "ISPN-12470 Metrics authentication should be optional", "committedDate": "2020-11-06T11:53:19Z", "type": "forcePushed"}, {"oid": "ec78d0d27e308114349cf8543b3ae98080251da8", "url": "https://github.com/infinispan/infinispan/commit/ec78d0d27e308114349cf8543b3ae98080251da8", "message": "ISPN-12470 Metrics authentication should be optional", "committedDate": "2020-11-06T14:30:11Z", "type": "forcePushed"}, {"oid": "3ca8f1d20109a7971f0ed343bf322edaed14c910", "url": "https://github.com/infinispan/infinispan/commit/3ca8f1d20109a7971f0ed343bf322edaed14c910", "message": "ISPN-12184 Don't override explicit authentication mechanisms", "committedDate": "2020-11-06T14:32:38Z", "type": "commit"}, {"oid": "a2d47f4cfa46a242136646c9de30f4b942e27b88", "url": "https://github.com/infinispan/infinispan/commit/a2d47f4cfa46a242136646c9de30f4b942e27b88", "message": "ISPN-12402 Multiple Endpoints", "committedDate": "2020-11-06T14:32:38Z", "type": "commit"}, {"oid": "28be3dfdcb79a30fb9cee7a2628bc5080abf64f6", "url": "https://github.com/infinispan/infinispan/commit/28be3dfdcb79a30fb9cee7a2628bc5080abf64f6", "message": "ISPN-12470 Metrics authentication should be optional", "committedDate": "2020-11-06T14:32:38Z", "type": "commit"}, {"oid": "28be3dfdcb79a30fb9cee7a2628bc5080abf64f6", "url": "https://github.com/infinispan/infinispan/commit/28be3dfdcb79a30fb9cee7a2628bc5080abf64f6", "message": "ISPN-12470 Metrics authentication should be optional", "committedDate": "2020-11-06T14:32:38Z", "type": "forcePushed"}]}