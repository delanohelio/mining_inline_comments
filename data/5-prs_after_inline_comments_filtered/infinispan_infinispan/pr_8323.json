{"pr_number": 8323, "pr_title": "ISPN-11831 Rest Server BlockHound", "pr_createdAt": "2020-05-14T22:11:03Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8323", "timeline": [{"oid": "ded71746c47643e4f45efe02a9933614904b494a", "url": "https://github.com/infinispan/infinispan/commit/ded71746c47643e4f45efe02a9933614904b494a", "message": "ISPN-11831 Add blockhound to server rest module", "committedDate": "2020-05-15T00:12:29Z", "type": "commit"}, {"oid": "43f590e06864e2b064d37ae016f8b0b55062fe82", "url": "https://github.com/infinispan/infinispan/commit/43f590e06864e2b064d37ae016f8b0b55062fe82", "message": "ISPN-11836 MassIndexLock should be non blocking", "committedDate": "2020-05-15T00:35:06Z", "type": "forcePushed"}, {"oid": "2888457aaa6b4f9b4ed83fc0ce2c97cfda99daae", "url": "https://github.com/infinispan/infinispan/commit/2888457aaa6b4f9b4ed83fc0ce2c97cfda99daae", "message": "ISPN-11731 Add blockhound to query module\n\n* Just adding some preemptive changes", "committedDate": "2020-05-15T13:31:05Z", "type": "commit"}, {"oid": "496578ea56ee57d4695839a08dc992d8d7ee8414", "url": "https://github.com/infinispan/infinispan/commit/496578ea56ee57d4695839a08dc992d8d7ee8414", "message": "ISPN-11834 Rest ResponseWrite CHUNKED_FILE response is blocking", "committedDate": "2020-05-15T13:31:05Z", "type": "commit"}, {"oid": "7e4dfa1f67a8faf521202ea5997539a02cb39ce5", "url": "https://github.com/infinispan/infinispan/commit/7e4dfa1f67a8faf521202ea5997539a02cb39ce5", "message": "ISPN-11835 Clustered Lock creation is blocking", "committedDate": "2020-05-15T13:31:05Z", "type": "commit"}, {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "url": "https://github.com/infinispan/infinispan/commit/1b0088fd72e93d00dbefa61d238147adb9581cd9", "message": "ISPN-11836 MassIndexLock should be non blocking", "committedDate": "2020-05-15T13:31:06Z", "type": "commit"}, {"oid": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "url": "https://github.com/infinispan/infinispan/commit/1b0088fd72e93d00dbefa61d238147adb9581cd9", "message": "ISPN-11836 MassIndexLock should be non blocking", "committedDate": "2020-05-15T13:31:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MDAzMg==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427150032", "bodyText": "This changes the API of the MassIndexer. I am deprecating it in favour of another interface called Indexer in #8303, that has only non-blocking methods that return CompletionStage.\nI think the old interface should not be changed though.", "author": "gustavonalle", "createdAt": "2020-05-19T09:10:45Z", "path": "query/src/main/java/org/infinispan/query/MassIndexer.java", "diffHunk": "@@ -20,14 +21,14 @@\n    /**\n     * Deletes all the indexes and skip the reindexing.\n     */\n-   CompletableFuture<Void> purge();\n+   CompletionStage<Void> purge();", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3MzA2NA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427173064", "bodyText": "Actually, don't worry, I will revert it back in my PR", "author": "gustavonalle", "createdAt": "2020-05-19T09:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MDAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3ODY3Nw==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427278677", "bodyText": "I missed Gustavo's comments and wrote the same thing :)", "author": "danberindei", "createdAt": "2020-05-19T12:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MDAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzOTU4NA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427039584", "bodyText": "Weird that BlockHound wouldn't work with <cinit>", "author": "danberindei", "createdAt": "2020-05-19T05:32:44Z", "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/MediaTypeResolver.java", "diffHunk": "@@ -22,6 +22,11 @@\n    private static final String MIME_TYPES = \"mime.types\";\n \n    static {\n+      populateFileMap();\n+   }\n+\n+   // This has to be a separate method so we can mark it as blocking via blockhound", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MjcyNQ==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427292725", "bodyText": "I personally think it is a bug, I ran into the same issue in a prior module as well.", "author": "wburns", "createdAt": "2020-05-19T13:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzOTU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MTM3MA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427041370", "bodyText": "Reading a schema file from a jar is the same as reading a class file from a jar: both are blocking, but we expect that they are only done once during startup. If an SerializationContextInitializer runs in response to a request, that's a bug and should be fixed IMO.\nNitpicking: \"We\" starts a new sentence, so it should be on a new line", "author": "danberindei", "createdAt": "2020-05-19T05:39:11Z", "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -122,5 +123,9 @@ private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder\n \n       // This can block if there is a store otherwise it won't block\n       builder.allowBlockingCallsInside(CacheMgmtInterceptor.class.getName(), \"getNumberOfEntries\");\n+\n+      // Unfortunately retrieving the protobuf schema reads from a separately generated file - We hope this can be changed", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzY1NA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427293654", "bodyText": "We also start/stop caches and register schemas at runtime. Having this as a String in the file also saves a lot of heartache for Infinispan Quarkus as well. It would be a lot simpler and nicer to have it in there eventually, but that requires changes in protostream.", "author": "wburns", "createdAt": "2020-05-19T13:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MTM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MzA5OQ==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427043099", "bodyText": "Unfortunately MassIndexer is public API, I don't think it's ok to change the return types.", "author": "danberindei", "createdAt": "2020-05-19T05:45:02Z", "path": "query/src/main/java/org/infinispan/query/MassIndexer.java", "diffHunk": "@@ -20,14 +21,14 @@\n    /**\n     * Deletes all the indexes and skip the reindexing.\n     */\n-   CompletableFuture<Void> purge();\n+   CompletionStage<Void> purge();", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4NjgxMg==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427286812", "bodyText": "I've already reverted it on https://github.com/infinispan/infinispan/pull/8303/files#diff-281c939f8f0475ca9bddd807c3c616ec and also deprecated it.", "author": "gustavonalle", "createdAt": "2020-05-19T13:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MzA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzkyMA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427293920", "bodyText": "Sorry didn't realize it was public.", "author": "wburns", "createdAt": "2020-05-19T13:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0MzA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0Mzc2OA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427043768", "bodyText": "IMO ISPN-11731 should be strictly about adding BlockHound, reducing blocking should have a separate issue", "author": "danberindei", "createdAt": "2020-05-19T05:47:16Z", "path": "query/src/main/java/org/infinispan/query/backend/QueryInterceptor.java", "diffHunk": "@@ -185,14 +187,19 @@ private Object handleDataWriteCommand(InvocationContext ctx, DataWriteCommand co\n             prev = UNKNOWN;\n          }\n          Object oldValue = prev;\n-         return invokeNextThenAccept(ctx, command, (rCtx, cmd, rv) -> {\n+         return invokeNextThenApply(ctx, command, (rCtx, cmd, rv) -> {\n             if (!cmd.isSuccessful()) {\n-               return;\n+               return rv;\n             }\n             CacheEntry entry2 = entry != null ? entry : rCtx.lookupEntry(cmd.getKey());\n             if (entry2 != null && entry2.isChanged()) {\n-               processChange(rCtx, cmd, cmd.getKey(), oldValue, entry2.getValue(), NoTransactionContext.INSTANCE);\n+               // TODO: need to reduce the scope of the blocking thread to less if possible later as part of\n+               // https://issues.redhat.com/browse/ISPN-11731", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5NDI5Mg==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427294292", "bodyText": "Okay.", "author": "wburns", "createdAt": "2020-05-19T13:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0Mzc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NTU0MA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427045540", "bodyText": "You didn't really have to comment out the cancel line :)", "author": "danberindei", "createdAt": "2020-05-19T05:52:51Z", "path": "query/src/test/java/org/infinispan/query/distributed/AsyncMassIndexPerfTest.java", "diffHunk": "@@ -240,7 +240,9 @@ public void run() {\n                   System.out.println(\"\\rMassIndexer not started\");\n                   continue;\n                } else {\n-                  future.cancel(true);\n+                  // Mass Indexer doesn't provide cancellation currently\n+                  // https://issues.redhat.com/browse/ISPN-11735\n+//                  future.cancel(true);", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MDg2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427270861", "bodyText": "Do you still need the debug log? Maybe it should be trace?\nAlso poll interval is awfully low, although I'm removing the poll interval parameter altogether in #8344", "author": "danberindei", "createdAt": "2020-05-19T12:42:37Z", "path": "query/src/test/java/org/infinispan/query/distributed/MassIndexingTest.java", "diffHunk": "@@ -59,29 +61,33 @@ public void testOverlappingMassIndexers() {\n \n       IntStream.range(0, 10).forEach(i -> cache.put(i, new Car(\"whatever\", \"whatever\", 0)));\n \n-      CompletableFuture<Void> first = massIndexer.startAsync();\n-      eventually(massIndexer::isRunning);\n \n-      CompletableFuture<Void> second = massIndexer.startAsync();\n+      CompletionStage<Void> first = massIndexer.startAsync();\n+      eventually(() -> {\n+         log.debug(\"Checking if massIndexer is running\");\n+         return massIndexer.isRunning();\n+      }, 10_000, 10, TimeUnit.MILLISECONDS);", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4OTQzOA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427289438", "bodyText": "It is low because the test finishes between even 50ms poll timeout and then fails. Like I mentioned in chat, this test is very very flaky. I would love if @gustavonalle could rewrite this with his other changes :)", "author": "wburns", "createdAt": "2020-05-19T13:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MDg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5NDg0OA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427294848", "bodyText": "It started failing for me since this PR went in :)\nI will rewrite this test in one of my PRs", "author": "gustavonalle", "createdAt": "2020-05-19T13:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MDg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5NzM1Mg==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427297352", "bodyText": "The reason I say it is flaky is because it uses eventually in a way that isn't designed. It wants to see the lock being held, but there is a chance that it can acquire the lock and complete during that time frame.\nThe only reason it didn't fail before is because it would block waiting for the lock and then it wouldn't finish before it checked.\nEventually is designed (or at least my assumption has been) that it wants the value to be in a stable state eventually (so you can query later at any point - not in a very specific window).", "author": "wburns", "createdAt": "2020-05-19T13:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MDg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5OTk0OA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427299948", "bodyText": "The test used to be stable before, as it had about 1000 entries and was never too fast, but @danberindei complained the test was taking too long with TRACE on, so the number of entries was reduced. I agree this should be reviewed so that it works with any number of entries", "author": "gustavonalle", "createdAt": "2020-05-19T13:26:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MDg2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMTk5OQ==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427301999", "bodyText": "The best way would be to use some sort of synchronization tool to prevent mass indexer from completing and then wait for that in the main thread - then submit the new task which would always not be able to acquire the lock and then finally release mass indexer to complete in the main thread.", "author": "wburns", "createdAt": "2020-05-19T13:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MDg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MjA1MA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427272050", "bodyText": "Does this actually come up in our test suite? Can we replace the error handler, or is it used internally by something else, like Nashorn?", "author": "danberindei", "createdAt": "2020-05-19T12:44:24Z", "path": "server/core/src/main/java/org/infinispan/server/core/ServerCoreBlockHoundIntegration.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.infinispan.server.core;\n+\n+import org.infinispan.commons.internal.CommonsBlockHoundIntegration;\n+import org.kohsuke.MetaInfServices;\n+\n+import io.netty.util.concurrent.GlobalEventExecutor;\n+import reactor.blockhound.BlockHound;\n+import reactor.blockhound.integration.BlockHoundIntegration;\n+\n+@MetaInfServices\n+public class ServerCoreBlockHoundIntegration implements BlockHoundIntegration {\n+   @Override\n+   public void applyTo(BlockHound.Builder builder) {\n+      builder.allowBlockingCallsInside(GlobalEventExecutor.class.getName(), \"addTask\");\n+      builder.allowBlockingCallsInside(GlobalEventExecutor.class.getName(), \"takeTask\");\n+\n+      // The xerces parser when it finds a parsing error will print to possibly a file output - ignore\n+      builder.allowBlockingCallsInside(\"com.sun.org.apache.xerces.internal.util.DefaultErrorHandler\", \"printError\");", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MDAyMw==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427290023", "bodyText": "We have tests in REST that have parsing errors at runtime and the parser was either writing to Stderror or trying to write to a file or something. I wasn't too picky about looking into tbh.", "author": "wburns", "createdAt": "2020-05-19T13:12:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3MjA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NzEyOQ==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427277129", "bodyText": "Could we use cache.keySet().localPublisher(null) to make it non-blocking?", "author": "danberindei", "createdAt": "2020-05-19T12:52:13Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/CacheResourceV2.java", "diffHunk": "@@ -172,10 +172,14 @@ public Invocations getInvocations() {\n          responseBuilder.status(HttpResponseStatus.NOT_FOUND);\n          return CompletableFuture.completedFuture(responseBuilder.build());\n       }\n-      responseBuilder.entity(new CacheInputStream(cache.keySet().stream(), batch));\n+      // Streaming over the cache is blocking", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5NTUyMA==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427295520", "bodyText": "The problem is that method doesn't yet support encoding. I would love to add that at some point, I was originally waiting for the new API to do that. But I think I will have to add that for 11.1 as it is becoming more and more needed.", "author": "wburns", "createdAt": "2020-05-19T13:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NzEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5NjAyNg==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427296026", "bodyText": "The method is really designed for local invocation only currently and isn't used in the remote part and is actually blocking currently (when it has to go remote) :(", "author": "wburns", "createdAt": "2020-05-19T13:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NzEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3Nzg0MQ==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427277841", "bodyText": "We use Arjuna in core tests as well, maybe we should put the exception in the core module instead?", "author": "danberindei", "createdAt": "2020-05-19T12:53:20Z", "path": "server/rest/src/test/java/org/infinispan/rest/ServerRestTestBlockHoundIntegration.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.infinispan.rest;\n+\n+import org.kohsuke.MetaInfServices;\n+\n+import com.arjuna.ats.internal.arjuna.coordinator.ReaperThread;\n+import com.arjuna.ats.internal.arjuna.coordinator.ReaperWorkerThread;\n+\n+import reactor.blockhound.BlockHound;\n+import reactor.blockhound.integration.BlockHoundIntegration;\n+\n+@MetaInfServices\n+public class ServerRestTestBlockHoundIntegration implements BlockHoundIntegration {\n+   @Override\n+   public void applyTo(BlockHound.Builder builder) {\n+      // Let arjuna block - sometimes its thread will be put in our non blocking thread group", "originalCommit": "1b0088fd72e93d00dbefa61d238147adb9581cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MDgwMg==", "url": "https://github.com/infinispan/infinispan/pull/8323#discussion_r427290802", "bodyText": "We may need to. My guess is the reason is because we start arjuna in the main thread so the thread group for its thread isn't marked as non blocking.", "author": "wburns", "createdAt": "2020-05-19T13:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3Nzg0MQ=="}], "type": "inlineReview"}]}