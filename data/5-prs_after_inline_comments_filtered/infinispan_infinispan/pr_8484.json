{"pr_number": 8484, "pr_title": "ISPN-11952 Revive Infinispan Archetypes", "pr_createdAt": "2020-06-16T16:23:09Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8484", "timeline": [{"oid": "61e65dff401a9e50fade0bad3cd9b3ee43f0d53a", "url": "https://github.com/infinispan/infinispan/commit/61e65dff401a9e50fade0bad3cd9b3ee43f0d53a", "message": "ISPN-11952 Revive Infinispan Archetypes\n\n- ISPN-11957 'embedded' archetype created to replace 'newproject-archetype'\n- configuration and pom xml versions parametised\n- integration test added to ensure archetypes compile", "committedDate": "2020-06-17T08:17:56Z", "type": "forcePushed"}, {"oid": "1e5796b7a6e470a06a3129cd1dddec7969ff3d95", "url": "https://github.com/infinispan/infinispan/commit/1e5796b7a6e470a06a3129cd1dddec7969ff3d95", "message": "ISPN-11952 Revive Infinispan Archetypes\n\n- ISPN-11957 'embedded' archetype created to replace 'newproject-archetype'\n- configuration and pom xml versions parametised\n- integration test added to ensure archetypes compile", "committedDate": "2020-06-17T08:37:00Z", "type": "forcePushed"}, {"oid": "10934547761e06b8b454f4fd06fc85cf4ae0e640", "url": "https://github.com/infinispan/infinispan/commit/10934547761e06b8b454f4fd06fc85cf4ae0e640", "message": "ISPN-11952 Revive Infinispan Archetypes\n\n- ISPN-11957 'embedded' archetype created to replace 'newproject-archetype'\n- configuration and pom xml versions parametised\n- integration test added to ensure archetypes compile", "committedDate": "2020-06-17T10:40:30Z", "type": "forcePushed"}, {"oid": "60161d02935fa6f3e15e1045ffde60af033bd060", "url": "https://github.com/infinispan/infinispan/commit/60161d02935fa6f3e15e1045ffde60af033bd060", "message": "ISPN-11952 Revive Infinispan Archetypes\n\n- ISPN-11957 'embedded' archetype created to replace 'newproject-archetype'\n- configuration and pom xml versions parametised\n- integration test added to ensure archetypes compile", "committedDate": "2020-06-17T10:52:13Z", "type": "forcePushed"}, {"oid": "4b190ade5b441705be9f5f94879556d3cb44fc15", "url": "https://github.com/infinispan/infinispan/commit/4b190ade5b441705be9f5f94879556d3cb44fc15", "message": "ISPN-11953 Create Client archetype", "committedDate": "2020-06-17T15:57:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjEwOQ==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r441706109", "bodyText": "It is missing a CacheManager.stop() invocation.\nIf you use a clustered config and run mvn exec:java, the JVM never terminates.", "author": "pruivo", "createdAt": "2020-06-17T17:22:30Z", "path": "archetypes/embedded/src/main/resources/archetype-resources/src/main/java/Application.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package ${package};\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryModified;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryVisited;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryEvent;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryVisitedEvent;\n+\n+/**\n+ * Sample application code. For more examples please see our documentation (https://infinispan.org/docs/stable/index.html)\n+ * and tutorials (https://infinispan.org/tutorials).\n+ */\n+public class Application {\n+\n+   public void basicUse() {\n+      System.out.println(\"\\n\\n1.  Demonstrating basic usage of Infinispan.  This cache stores arbitrary Strings.\");\n+      Cache<String, String> cache = SampleCacheContainer.getCache();\n+\n+      System.out.println(\"  Storing value 'World' under key 'Hello'\");\n+      String oldValue = cache.put(\"Hello\", \"World\");\n+      System.out.printf(\"  Done.  Saw old value as '%s'\\n\", oldValue);\n+\n+      System.out.println(\"  Replacing 'World' with 'Mars'.\");\n+      boolean worked = cache.replace(\"Hello\", \"World\", \"Mars\");\n+      System.out.printf(\"  Successful? %s\\n\", worked);\n+\n+      assert oldValue == null;\n+      assert worked == true;\n+   }\n+\n+   public void lifespans() throws InterruptedException {\n+      System.out.println(\"\\n\\n2.  Demonstrating usage of Infinispan with expirable entries.\");\n+      Cache<String, Float> stocksCache = SampleCacheContainer.getCache(\"stockTickers\");\n+      System.out.println(\"  Storing key 'RHT' for 10 seconds.\");\n+      stocksCache.put(\"RHT\", 45.0f, 10, TimeUnit.SECONDS);\n+      System.out.printf(\"  Checking for existence of key.  Is it there? %s\\n\", stocksCache.containsKey(\"RHT\"));\n+      System.out.println(\"  Sleeping for 10 seconds...\");\n+      Thread.sleep(10000);\n+      System.out.printf(\"  Checking for existence of key.  Is it there? %s\\n\", stocksCache.containsKey(\"RHT\"));\n+      assert stocksCache.get(\"RHT\") == null;\n+   }\n+\n+   public void asyncOperations() {\n+      System.out.println(\"\\n\\n3.  Demonstrating asynchronous operations - where writes can be done in a non-blocking fashion.\");\n+      Cache<String, Integer> wineCache = SampleCacheContainer.getCache(\"wineCache\");\n+\n+      System.out.println(\"  Put #1\");\n+      CompletableFuture<Integer> f1 = wineCache.putAsync(\"Pinot Noir\", 300);\n+      System.out.println(\"  Put #1\");\n+      CompletableFuture<Integer> f2 = wineCache.putAsync(\"Merlot\", 120);\n+      System.out.println(\"  Put #1\");\n+      CompletableFuture<Integer> f3 = wineCache.putAsync(\"Chardonnay\", 180);\n+\n+      // now poll the futures to make sure any remote calls have completed!\n+      for (CompletableFuture<Integer> f : Arrays.asList(f1, f2, f3)) {\n+         try {\n+            System.out.println(\"  Checking future... \");\n+            f.get();\n+         } catch (Exception e) {\n+            throw new RuntimeException(\"Operation failed!\", e);\n+         }\n+      }\n+      System.out.println(\"  Everything stored!\");\n+\n+      // TIP: For more examples on using the asynchronous API, visit https://infinispan.org/docs/stable/titles/developing/developing.html#cache_asynchronous_api\n+   }\n+\n+   public void registeringListeners() {\n+      System.out.println(\"\\n\\n4.  Demonstrating use of listeners.\");\n+      Cache<Integer, String> anotherCache = SampleCacheContainer.getCache(\"another\");\n+      System.out.println(\"  Attaching listener\");\n+      MyListener l = new MyListener();\n+      anotherCache.addListener(l);\n+\n+      System.out.println(\"  Put #1\");\n+      anotherCache.put(1, \"One\");\n+      System.out.println(\"  Put #2\");\n+      anotherCache.put(2, \"Two\");\n+      System.out.println(\"  Put #3\");\n+      anotherCache.put(3, \"Three\");\n+\n+      // TIP: For more examples on using listeners visit https://infinispan.org/docs/stable/titles/developing/developing.html#listeners_and_notifications\n+   }\n+\n+   public static void main(String[] args) throws Exception {\n+      System.out.println(\"\\n\\n\\n   ********************************  \\n\\n\\n\");\n+      System.out.println(\"Hello.  This is a sample application making use of Infinispan.\");\n+      Application a = new Application();\n+      a.basicUse();\n+      a.lifespans();\n+      a.asyncOperations();\n+      a.registeringListeners();\n+      System.out.println(\"Sample complete.\");", "originalCommit": "4b190ade5b441705be9f5f94879556d3cb44fc15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMzEyOA==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r442113128", "bodyText": "Fixed by utilising the EmbeddedCacheManager inside a try statement and passing it to new Application(EmbeddedCacheManager).", "author": "ryanemerson", "createdAt": "2020-06-18T10:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNzUyMw==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r441707523", "bodyText": "I would move the instantiation before the println and create/invoke a star() method. Just to remove the log4j entries out of the way\n1.  Demonstrating basic usage of Infinispan.  This cache stores arbitrary Strings.\nJun 17, 2020 6:19:48 PM org.infinispan.configuration.parsing.Parser parseStoreAsBinary\nWARN: ISPN000428: The 'store-as-binary' element has been deprecated. Please use the 'memory' element instead\nJun 17, 2020 6:19:48 PM org.infinispan.configuration.parsing.Parser parseMemory\nWARN: ISPN000586: The memory configuration element 'object' has been deprecated. Please update your configuration\nJun 17, 2020 6:19:49 PM org.infinispan.factories.GlobalComponentRegistry preStart\nINFO: ISPN000128: Infinispan version: Infinispan 'Corona Extra' 11.0.1-SNAPSHOT\nJun 17, 2020 6:19:49 PM org.infinispan.remoting.transport.jgroups.JGroupsTransport start\nINFO: ISPN000078: Starting JGroups channel mycluster with stack tcp\nJun 17, 2020 6:19:51 PM org.jgroups.protocols.pbcast.ClientGmsImpl joinInternal\nINFO: pedro-laptop-3-14776: no members discovered after 2002 ms: creating cluster as coordinator\nJun 17, 2020 6:19:51 PM org.infinispan.remoting.transport.jgroups.JGroupsTransport receiveClusterView\nINFO: ISPN000094: Received new cluster view for channel mycluster: [pedro-laptop-3-14776|0] (1) [pedro-laptop-3-14776]\nJun 17, 2020 6:19:51 PM org.infinispan.remoting.transport.jgroups.JGroupsTransport startJGroupsChannelIfNeeded\nINFO: ISPN000079: Channel mycluster local address is pedro-laptop-3-14776, physical addresses are [172.17.0.1:7800]\n  Storing value 'World' under key 'Hello'\n  Done.  Saw old value as 'null'\n  Replacing 'World' with 'Mars'.\n  Successful? true", "author": "pruivo", "createdAt": "2020-06-17T17:24:53Z", "path": "archetypes/embedded/src/main/resources/archetype-resources/src/main/java/Application.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package ${package};\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.infinispan.Cache;\n+import org.infinispan.notifications.Listener;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryCreated;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryModified;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryRemoved;\n+import org.infinispan.notifications.cachelistener.annotation.CacheEntryVisited;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryEvent;\n+import org.infinispan.notifications.cachelistener.event.CacheEntryVisitedEvent;\n+\n+/**\n+ * Sample application code. For more examples please see our documentation (https://infinispan.org/docs/stable/index.html)\n+ * and tutorials (https://infinispan.org/tutorials).\n+ */\n+public class Application {\n+\n+   public void basicUse() {\n+      System.out.println(\"\\n\\n1.  Demonstrating basic usage of Infinispan.  This cache stores arbitrary Strings.\");\n+      Cache<String, String> cache = SampleCacheContainer.getCache();\n+\n+      System.out.println(\"  Storing value 'World' under key 'Hello'\");\n+      String oldValue = cache.put(\"Hello\", \"World\");\n+      System.out.printf(\"  Done.  Saw old value as '%s'\\n\", oldValue);\n+\n+      System.out.println(\"  Replacing 'World' with 'Mars'.\");\n+      boolean worked = cache.replace(\"Hello\", \"World\", \"Mars\");\n+      System.out.printf(\"  Successful? %s\\n\", worked);\n+\n+      assert oldValue == null;\n+      assert worked == true;\n+   }\n+\n+   public void lifespans() throws InterruptedException {\n+      System.out.println(\"\\n\\n2.  Demonstrating usage of Infinispan with expirable entries.\");\n+      Cache<String, Float> stocksCache = SampleCacheContainer.getCache(\"stockTickers\");\n+      System.out.println(\"  Storing key 'RHT' for 10 seconds.\");\n+      stocksCache.put(\"RHT\", 45.0f, 10, TimeUnit.SECONDS);\n+      System.out.printf(\"  Checking for existence of key.  Is it there? %s\\n\", stocksCache.containsKey(\"RHT\"));\n+      System.out.println(\"  Sleeping for 10 seconds...\");\n+      Thread.sleep(10000);\n+      System.out.printf(\"  Checking for existence of key.  Is it there? %s\\n\", stocksCache.containsKey(\"RHT\"));\n+      assert stocksCache.get(\"RHT\") == null;\n+   }\n+\n+   public void asyncOperations() {\n+      System.out.println(\"\\n\\n3.  Demonstrating asynchronous operations - where writes can be done in a non-blocking fashion.\");\n+      Cache<String, Integer> wineCache = SampleCacheContainer.getCache(\"wineCache\");\n+\n+      System.out.println(\"  Put #1\");\n+      CompletableFuture<Integer> f1 = wineCache.putAsync(\"Pinot Noir\", 300);\n+      System.out.println(\"  Put #1\");\n+      CompletableFuture<Integer> f2 = wineCache.putAsync(\"Merlot\", 120);\n+      System.out.println(\"  Put #1\");\n+      CompletableFuture<Integer> f3 = wineCache.putAsync(\"Chardonnay\", 180);\n+\n+      // now poll the futures to make sure any remote calls have completed!\n+      for (CompletableFuture<Integer> f : Arrays.asList(f1, f2, f3)) {\n+         try {\n+            System.out.println(\"  Checking future... \");\n+            f.get();\n+         } catch (Exception e) {\n+            throw new RuntimeException(\"Operation failed!\", e);\n+         }\n+      }\n+      System.out.println(\"  Everything stored!\");\n+\n+      // TIP: For more examples on using the asynchronous API, visit https://infinispan.org/docs/stable/titles/developing/developing.html#cache_asynchronous_api\n+   }\n+\n+   public void registeringListeners() {\n+      System.out.println(\"\\n\\n4.  Demonstrating use of listeners.\");\n+      Cache<Integer, String> anotherCache = SampleCacheContainer.getCache(\"another\");\n+      System.out.println(\"  Attaching listener\");\n+      MyListener l = new MyListener();\n+      anotherCache.addListener(l);\n+\n+      System.out.println(\"  Put #1\");\n+      anotherCache.put(1, \"One\");\n+      System.out.println(\"  Put #2\");\n+      anotherCache.put(2, \"Two\");\n+      System.out.println(\"  Put #3\");\n+      anotherCache.put(3, \"Three\");\n+\n+      // TIP: For more examples on using listeners visit https://infinispan.org/docs/stable/titles/developing/developing.html#listeners_and_notifications\n+   }\n+\n+   public static void main(String[] args) throws Exception {\n+      System.out.println(\"\\n\\n\\n   ********************************  \\n\\n\\n\");\n+      System.out.println(\"Hello.  This is a sample application making use of Infinispan.\");\n+      Application a = new Application();", "originalCommit": "4b190ade5b441705be9f5f94879556d3cb44fc15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMjY2OA==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r442112668", "bodyText": "I have removed the SampleCacheContainer in favour of keeping everything within Application.java. The Application class is now instantiated and ran inside of a try(EmbeddedCacheManager){} block", "author": "ryanemerson", "createdAt": "2020-06-18T10:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNzUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMjAzMw==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r441722033", "bodyText": "for some reason, --net=host isn't working for me :(", "author": "pruivo", "createdAt": "2020-06-17T17:49:02Z", "path": "archetypes/client/src/main/resources/archetype-resources/src/main/java/Application.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package ${package};\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.client.hotrod.RemoteCacheManager;\n+import org.infinispan.client.hotrod.annotation.ClientCacheEntryCreated;\n+import org.infinispan.client.hotrod.annotation.ClientCacheEntryModified;\n+import org.infinispan.client.hotrod.annotation.ClientCacheEntryRemoved;\n+import org.infinispan.client.hotrod.annotation.ClientListener;\n+import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;\n+import org.infinispan.client.hotrod.event.ClientCacheEntryCreatedEvent;\n+import org.infinispan.client.hotrod.event.ClientCacheEntryModifiedEvent;\n+import org.infinispan.client.hotrod.event.ClientCacheEntryRemovedEvent;\n+\n+/**\n+ * Sample client application code. For more examples please see our client documentation\n+ * (https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html).\n+ * <p>\n+ * In order to run this application, it's necessary for a Infinispan server to be executing on your localhost with the\n+ * HotRod endpoint available on port 11222. The easiest way to achieve this, is by utilising our server docker image:\n+ * <p>\n+ * <code>docker run --net=host -p 11222:11222 -e USER=\"user\" -e PASS=\"pass\" infinispan/server</code>", "originalCommit": "4b190ade5b441705be9f5f94879556d3cb44fc15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5MzEzNw==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r442093137", "bodyText": "This is necessary so that the container binds to 127.0.0.1. What error do you get?", "author": "ryanemerson", "createdAt": "2020-06-18T09:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMjAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMTc0MQ==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r442111741", "bodyText": "Actually, -p 11222:11222 is sufficient.", "author": "ryanemerson", "createdAt": "2020-06-18T09:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMjAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMjEyNQ==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r442112125", "bodyText": "the connection is blocked somewhere. The server starts and binds to the port successfully, but I can't connect (neither with the browser)\nwithout it, it works. And If I use the \"zip\" version, it works as well.\nOn a side note, I would add --rm to remove the container when it stops.", "author": "pruivo", "createdAt": "2020-06-18T09:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMjAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExODI4Nw==", "url": "https://github.com/infinispan/infinispan/pull/8484#discussion_r442118287", "bodyText": "Hmm not sure why that's the case, but I've removed the flag anyway.\n\nOn a side note, I would add --rm to remove the container when it stops.\n\nI would rather not add this as I want to keep the command as simple as possible. We're trying to educate users on how to use Infinispan, not docker|podman|<some-other-container-runtime>", "author": "ryanemerson", "createdAt": "2020-06-18T10:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMjAzMw=="}], "type": "inlineReview"}, {"oid": "8ae2fe63626d8d28e8f77c4894e67325bf96f2c7", "url": "https://github.com/infinispan/infinispan/commit/8ae2fe63626d8d28e8f77c4894e67325bf96f2c7", "message": "ISPN-11952 Revive Infinispan Archetypes\n\n- ISPN-11957 'embedded' archetype created to replace 'newproject-archetype'\n- configuration and pom xml versions parametised\n- integration test added to ensure archetypes compile", "committedDate": "2020-06-18T09:57:05Z", "type": "commit"}, {"oid": "09ae3d3d606ccdc5dda99f360dd759302072d8af", "url": "https://github.com/infinispan/infinispan/commit/09ae3d3d606ccdc5dda99f360dd759302072d8af", "message": "ISPN-11956 Add store archetype utilising the NonBlockingStore SPI", "committedDate": "2020-06-18T09:57:05Z", "type": "commit"}, {"oid": "36066661007a6b3645bad4df4318dab49b2a35d7", "url": "https://github.com/infinispan/infinispan/commit/36066661007a6b3645bad4df4318dab49b2a35d7", "message": "ISPN-11953 Create Client archetype", "committedDate": "2020-06-18T09:57:05Z", "type": "forcePushed"}, {"oid": "74efc79d325f5673a0590f2cfada3609b3062c8e", "url": "https://github.com/infinispan/infinispan/commit/74efc79d325f5673a0590f2cfada3609b3062c8e", "message": "ISPN-11953 Create Client archetype", "committedDate": "2020-06-18T09:58:56Z", "type": "commit"}, {"oid": "74efc79d325f5673a0590f2cfada3609b3062c8e", "url": "https://github.com/infinispan/infinispan/commit/74efc79d325f5673a0590f2cfada3609b3062c8e", "message": "ISPN-11953 Create Client archetype", "committedDate": "2020-06-18T09:58:56Z", "type": "forcePushed"}]}