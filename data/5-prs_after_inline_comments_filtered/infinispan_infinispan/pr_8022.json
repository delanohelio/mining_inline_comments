{"pr_number": 8022, "pr_title": "ISPN-11443 PersistenceManagerImpl thread checks need to be updated", "pr_createdAt": "2020-03-10T13:56:48Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8022", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMjg1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391732851", "bodyText": "Not sure what above means here, but the lruLock is in SegmentedBoundedOffHeapDataContainer itself.", "author": "danberindei", "createdAt": "2020-03-12T16:16:11Z", "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -29,6 +30,8 @@ public void applyTo(BlockHound.Builder builder) {\n       // Block designates methods that should only hold a lock very briefly\n       {\n          CommonsBlockHoundIntegration.allowPublicMethodsToBlock(builder, OffHeapConcurrentMap.class);\n+         // This acquires the locks from the above OffHeapConcurrentMap instance", "originalCommit": "045051f6a94dbaf2e0ceb6843763b26199e49a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2MTQxMg==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391761412", "bodyText": "The issue that identified it wasn't actually lruLock, but that it found it was the stamped lock from the off heap concurrent map.  However this fixes both :) I can change the comment.", "author": "wburns", "createdAt": "2020-03-12T16:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMjg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMzMzMg==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391733332", "bodyText": "I suggest removing them if they don't need a description", "author": "danberindei", "createdAt": "2020-03-12T16:16:50Z", "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/InfinispanLock.java", "diffHunk": "@@ -55,19 +56,22 @@\n    private final Queue<LockPlaceHolder> pendingRequest;\n    private final ConcurrentMap<Object, LockPlaceHolder> lockOwners;\n    private final Runnable releaseRunnable;\n-   private final Executor executor;\n+   private final Executor blockingExecutor;\n+   private final Executor nonBlockingExecutor;\n    private TimeService timeService;\n    @SuppressWarnings(\"CanBeFinal\")\n    private volatile LockPlaceHolder current;\n \n    /**\n     * Creates a new instance.\n     *\n-    * @param executor\n+    * @param blockingExecutor\n+    * @param nonBlockingExecutor", "originalCommit": "045051f6a94dbaf2e0ceb6843763b26199e49a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3MTA3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391771076", "bodyText": "I will add a description.", "author": "wburns", "createdAt": "2020-03-12T17:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMzMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTI3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391739276", "bodyText": "This should be in a separate commit for ISPN-11295.\nAlso, I would expect no blocking in the vast majority of cases, so we need an optimized path for that case and/or a PerfAck test to see if the extra thread switching affects performance.", "author": "danberindei", "createdAt": "2020-03-12T16:25:51Z", "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/InfinispanLock.java", "diffHunk": "@@ -412,13 +418,13 @@ public InvocationStage toInvocationStage(Supplier<TimeoutException> timeoutSuppl\n             return checkState(notifier.getNow(lockState), InvocationStage::completedNullStage,\n                   ExceptionSyncInvocationStage::new, timeoutSupplier);\n          }\n-         return new SimpleAsyncInvocationStage(notifier.thenApplyAsync(state -> {\n+         return new SimpleAsyncInvocationStage(CompletionStages.continueOnExecutor(notifier.thenApplyAsync(state -> {\n             Object rv = checkState(state, () -> null, throwable -> throwable, timeoutSupplier);\n             if (rv != null) {\n                throw (RuntimeException) rv;\n             }\n             return null;\n-         }, executor));\n+         }, blockingExecutor), nonBlockingExecutor, this));", "originalCommit": "045051f6a94dbaf2e0ceb6843763b26199e49a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2MzI0Mg==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391763242", "bodyText": "In vast majority of cases this code is never even hit, because the notifier is normally usually done above. So I would think the thread switching here is probably not going to be an issue, and actually has a very high likely hood of actually blocking.\nThe reason the change is needed is because it then resumed the operation on the blocking thread, which we don't want.", "author": "wburns", "createdAt": "2020-03-12T17:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3MDIzNA==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391770234", "bodyText": "I can make a separate commit for it.", "author": "wburns", "createdAt": "2020-03-12T17:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3NTk3Mw==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391775973", "bodyText": "I will take a closer look at this in general with this pass though. I should be able to solve it how I would want for ISPN-11295.", "author": "wburns", "createdAt": "2020-03-12T17:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMjU3MA==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r393132570", "bodyText": "In vast majority of cases this code is never even hit, because the notifier is normally usually done above.\n\nThat depends on the access access pattern. PerfAck tests make each stressor use separate keys, so there is no contention, but when there is lots of contention the stage wouldn't be done.\nThe new approach resuming directly on a non-blocking thread looks much better!", "author": "danberindei", "createdAt": "2020-03-16T16:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNjM2OQ==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r393136369", "bodyText": "Yeah, I am not sure why it needed a blocking thread before. So I am glad to change it to this now.", "author": "wburns", "createdAt": "2020-03-16T16:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MTU3MQ==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391741571", "bodyText": "I'd use field injection instead.\nlock.setTimeService(timeService) looks like it might be useful, but because there is no synchronization there's always a chance of missing one of the locks, so I'd remove that and force tests to replace the time service ahead of time.", "author": "danberindei", "createdAt": "2020-03-12T16:29:02Z", "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/PerKeyLockContainer.java", "diffHunk": "@@ -26,16 +26,19 @@\n \n    private static final int INITIAL_CAPACITY = 32;\n    private final ConcurrentMap<Object, InfinispanLock> lockMap;\n-   private Executor executor;\n+   private Executor blockingExecutor;\n+   private Executor nonBlockingExecutor;\n    private TimeService timeService;\n \n    public PerKeyLockContainer() {\n       lockMap = new ConcurrentHashMap<>(INITIAL_CAPACITY);\n    }\n \n    @Inject\n-   void inject(@ComponentName(KnownComponentNames.BLOCKING_EXECUTOR) Executor executor, TimeService timeService) {\n-      this.executor = executor;\n+   void inject(@ComponentName(KnownComponentNames.BLOCKING_EXECUTOR) Executor blockingExecutor,\n+         @ComponentName(KnownComponentNames.NON_BLOCKING_EXECUTOR) Executor nonBlockingExecutor, TimeService timeService) {", "originalCommit": "045051f6a94dbaf2e0ceb6843763b26199e49a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2NjI4NQ==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391766285", "bodyText": "I'd use field injection instead.\n\nI can change it, was just keeping it consistent with the previous code.\n\nlock.setTimeService(timeService) looks like it might be useful, but because there is no synchronization there's always a chance of missing one of the locks, so I'd remove that and force tests to replace the time service ahead of time.\n\nI thought you said before that cache initialization was thread safe in regards to visibility? Is this not true now?", "author": "wburns", "createdAt": "2020-03-12T17:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MTU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjQ4MQ==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r392272481", "bodyText": "Regular cache initialization is safe. But once a component A is started, there's no other synchronization to ensure that changes made to A's fields are properly seen by all threads that are concurrently accessing A.", "author": "danberindei", "createdAt": "2020-03-13T14:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MTU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MDY0MA==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391750640", "bodyText": "We should set the executors on the other branch as well. Even though I'd rather avoid that other branch completely, there's too much code in the tests that relies on replacing components after startup.", "author": "danberindei", "createdAt": "2020-03-12T16:43:25Z", "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/StripedLockContainer.java", "diffHunk": "@@ -34,10 +34,11 @@ public StripedLockContainer(int concurrencyLevel) {\n    }\n \n    @Inject\n-   void inject(@ComponentName(KnownComponentNames.BLOCKING_EXECUTOR) Executor executor, TimeService timeService) {\n+   void inject(@ComponentName(KnownComponentNames.BLOCKING_EXECUTOR) Executor blockingExecutor,\n+         @ComponentName(KnownComponentNames.NON_BLOCKING_EXECUTOR) Executor nonBlockingExecutor, TimeService timeService) {\n       for (int i = 0; i < sharedLocks.length; i++) {\n          if (sharedLocks[i] == null) {\n-            sharedLocks[i] = new InfinispanLock(executor, timeService);\n+            sharedLocks[i] = new InfinispanLock(blockingExecutor, nonBlockingExecutor, timeService);", "originalCommit": "045051f6a94dbaf2e0ceb6843763b26199e49a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2ODc0NA==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391768744", "bodyText": "I think I will just remove the if/else block so it always creates a new one.", "author": "wburns", "createdAt": "2020-03-12T17:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MDY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTEzMw==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r392275133", "bodyText": "I'm not sure that's ok either, as it will basically drop the locks that are held by in-progress operations/txs, and the dropped locks will never resume their waiters.\nAnd unfortunately modules that need to override core components use the same rewire() functionality as tests, so we can't say that it will only affect tests (although modules should do this before any locks can be acquired, there's no guarantee).", "author": "danberindei", "createdAt": "2020-03-13T14:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MDY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MTE4MA==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391751180", "bodyText": "Please use AbstractInfinispanTest.testExecutor() in the tests, with the common pool it's impossible to filter logs by test.", "author": "danberindei", "createdAt": "2020-03-12T16:44:12Z", "path": "core/src/test/java/org/infinispan/lock/InfinispanLockTest.java", "diffHunk": "@@ -41,7 +41,7 @@ public void testTimeout() throws InterruptedException {\n       final String lockOwner1 = \"LO1\";\n       final String lockOwner2 = \"LO2\";\n \n-      final InfinispanLock lock = new InfinispanLock(commonPool(), AbstractCacheTest.TIME_SERVICE);\n+      final InfinispanLock lock = new InfinispanLock(commonPool(), commonPool(), AbstractCacheTest.TIME_SERVICE);", "originalCommit": "045051f6a94dbaf2e0ceb6843763b26199e49a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2ODA5Ng==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391768096", "bodyText": "Sure, I can change the existing reference to the updated one.", "author": "wburns", "createdAt": "2020-03-12T17:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MTE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1Mjg1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391752856", "bodyText": "I'm a bit scared that none of these tests need the executor, it suggests that maybe they don't cover all the code paths ;)", "author": "danberindei", "createdAt": "2020-03-12T16:46:43Z", "path": "core/src/test/java/org/infinispan/lock/LockContainerTest.java", "diffHunk": "@@ -32,29 +30,28 @@\n  */\n @Test(groups = \"unit\", testName = \"lock.LockContainerTest\")\n public class LockContainerTest extends AbstractInfinispanTest {\n-   private final ExecutorService executor = new WithinThreadExecutor();\n \n    public void testSingleLockWithPerEntry() throws InterruptedException {\n       PerKeyLockContainer lockContainer = new PerKeyLockContainer();\n-      TestingUtil.inject(lockContainer, executor, AbstractCacheTest.TIME_SERVICE);\n+      TestingUtil.inject(lockContainer, AbstractCacheTest.TIME_SERVICE);", "originalCommit": "045051f6a94dbaf2e0ceb6843763b26199e49a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3NDU1MA==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r391774550", "bodyText": "I agree. As I mentioned above the executor is only used when it has to wait for the lock.", "author": "wburns", "createdAt": "2020-03-12T17:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1Mjg1Ng=="}], "type": "inlineReview"}, {"oid": "43c4bb7f852eded598b92e9f8e851ef2e5de3336", "url": "https://github.com/infinispan/infinispan/commit/43c4bb7f852eded598b92e9f8e851ef2e5de3336", "message": "ISPN-11295 InfinispanLock needs to block on a blocking thread but continue its operation on a non blocking thread", "committedDate": "2020-03-12T18:16:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNjcyNw==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r393136727", "bodyText": "I'm starting to think figuring out why a lock isn't unlocked after a BasicComponentRegistry.rewire() is too hard, and tests almost never replace executors anyway, so the master version of the method is safer.", "author": "danberindei", "createdAt": "2020-03-16T16:06:23Z", "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/StripedLockContainer.java", "diffHunk": "@@ -34,13 +34,10 @@ public StripedLockContainer(int concurrencyLevel) {\n    }\n \n    @Inject\n-   void inject(@ComponentName(KnownComponentNames.BLOCKING_EXECUTOR) Executor executor, TimeService timeService) {\n+   void inject(@ComponentName(KnownComponentNames.NON_BLOCKING_EXECUTOR) Executor nonBlockingExecutor,\n+         TimeService timeService) {\n       for (int i = 0; i < sharedLocks.length; i++) {\n-         if (sharedLocks[i] == null) {\n-            sharedLocks[i] = new InfinispanLock(executor, timeService);\n-         } else {\n-            sharedLocks[i].setTimeService(timeService);\n-         }\n+         sharedLocks[i] = new InfinispanLock(nonBlockingExecutor, timeService);", "originalCommit": "43c4bb7f852eded598b92e9f8e851ef2e5de3336", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f89c3397294b6ed808d84510a91bfc1072a7bd36", "url": "https://github.com/infinispan/infinispan/commit/f89c3397294b6ed808d84510a91bfc1072a7bd36", "message": "ISPN-11295 InfinispanLock needs to block on a blocking thread but continue its operation on a non blocking thread", "committedDate": "2020-03-16T16:09:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTEwMw==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r393769103", "bodyText": "Not sure the comment belongs here", "author": "danberindei", "createdAt": "2020-03-17T15:34:44Z", "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -1384,25 +1388,42 @@ private long getMaxEntries() {\n       return Long.MAX_VALUE;\n    }\n \n-   private void preloadKey(AdvancedCache<Object, Object> cache, MarshallableEntry me) {\n-      final Transaction transaction = suspendIfNeeded();\n-      boolean success = false;\n-      try {\n+   private Single<?> preloadKey(AdvancedCache<Object, Object> cache, MarshallableEntry me) {\n+      // CallInterceptor will preserve the timestamps if the metadata is an InternalMetadataImpl instance\n+      InternalMetadataImpl metadata = new InternalMetadataImpl(me.getMetadata(), me.created(), me.lastUsed());\n+      CompletionStage<Object> stage;\n+      if (configuration.transaction().transactionMode().isTransactional() && transactionManager != null) {\n+         final Transaction transaction = suspendIfNeeded();\n+         CompletionStage<Transaction> putStage;\n          try {\n             beginIfNeeded();\n-            // CallInterceptor will preserve the timestamps if the metadata is an InternalMetadataImpl instance\n-            InternalMetadataImpl metadata = new InternalMetadataImpl(me.getMetadata(), me.created(), me.lastUsed());\n-            cache.put(me.getKey(), me.getValue(), metadata);\n-            success = true;\n+            putStage = cache.putAsync(me.getKey(), me.getValue(), metadata)\n+               .thenApply(ignore -> {\n+                  try {\n+                     return transactionManager.suspend();\n+                  } catch (SystemException e) {\n+                     throw new PersistenceException(\"Unable to preload!\", e);\n+                  }\n+               });\n          } catch (Exception e) {\n             throw new PersistenceException(\"Unable to preload!\", e);\n-         } finally {\n-            commitIfNeeded(success);\n          }\n-      } finally {\n-         //commitIfNeeded can throw an exception, so we need a try { } finally { }\n-         resumeIfNeeded(transaction);\n+         stage = (CompletionStage) putStage.whenCompleteAsync((pendingTransaction, t) -> {\n+            try {\n+               transactionManager.resume(pendingTransaction);\n+               commitIfNeeded(t == null);\n+            } catch (InvalidTransactionException | SystemException e) {\n+               throw new PersistenceException(\"Unable to preload!\", e);\n+            } finally {\n+               //commitIfNeeded can throw an exception, so we need a try { } finally { }", "originalCommit": "b8ef985cdebf93f77f9ccd0d366f9a3da3bf5ec8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3ODI2Ng==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r393778266", "bodyText": "Sure I can remove.", "author": "wburns", "createdAt": "2020-03-17T15:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MTEwMw==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r393771103", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompletionStage<Object> stage;\n          \n          \n            \n                  CompletionStage<?> stage;", "author": "danberindei", "createdAt": "2020-03-17T15:37:22Z", "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -1384,25 +1388,42 @@ private long getMaxEntries() {\n       return Long.MAX_VALUE;\n    }\n \n-   private void preloadKey(AdvancedCache<Object, Object> cache, MarshallableEntry me) {\n-      final Transaction transaction = suspendIfNeeded();\n-      boolean success = false;\n-      try {\n+   private Single<?> preloadKey(AdvancedCache<Object, Object> cache, MarshallableEntry me) {\n+      // CallInterceptor will preserve the timestamps if the metadata is an InternalMetadataImpl instance\n+      InternalMetadataImpl metadata = new InternalMetadataImpl(me.getMetadata(), me.created(), me.lastUsed());\n+      CompletionStage<Object> stage;", "originalCommit": "b8ef985cdebf93f77f9ccd0d366f9a3da3bf5ec8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MzM5Nw==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r393773397", "bodyText": "The return value isn't used, so completionStageToSingle() should work -- or there should be a comment explaining why the double conversion is needed.", "author": "danberindei", "createdAt": "2020-03-17T15:40:17Z", "path": "core/src/main/java/org/infinispan/persistence/manager/PersistenceManagerImpl.java", "diffHunk": "@@ -1384,25 +1388,42 @@ private long getMaxEntries() {\n       return Long.MAX_VALUE;\n    }\n \n-   private void preloadKey(AdvancedCache<Object, Object> cache, MarshallableEntry me) {\n-      final Transaction transaction = suspendIfNeeded();\n-      boolean success = false;\n-      try {\n+   private Single<?> preloadKey(AdvancedCache<Object, Object> cache, MarshallableEntry me) {\n+      // CallInterceptor will preserve the timestamps if the metadata is an InternalMetadataImpl instance\n+      InternalMetadataImpl metadata = new InternalMetadataImpl(me.getMetadata(), me.created(), me.lastUsed());\n+      CompletionStage<Object> stage;\n+      if (configuration.transaction().transactionMode().isTransactional() && transactionManager != null) {\n+         final Transaction transaction = suspendIfNeeded();\n+         CompletionStage<Transaction> putStage;\n          try {\n             beginIfNeeded();\n-            // CallInterceptor will preserve the timestamps if the metadata is an InternalMetadataImpl instance\n-            InternalMetadataImpl metadata = new InternalMetadataImpl(me.getMetadata(), me.created(), me.lastUsed());\n-            cache.put(me.getKey(), me.getValue(), metadata);\n-            success = true;\n+            putStage = cache.putAsync(me.getKey(), me.getValue(), metadata)\n+               .thenApply(ignore -> {\n+                  try {\n+                     return transactionManager.suspend();\n+                  } catch (SystemException e) {\n+                     throw new PersistenceException(\"Unable to preload!\", e);\n+                  }\n+               });\n          } catch (Exception e) {\n             throw new PersistenceException(\"Unable to preload!\", e);\n-         } finally {\n-            commitIfNeeded(success);\n          }\n-      } finally {\n-         //commitIfNeeded can throw an exception, so we need a try { } finally { }\n-         resumeIfNeeded(transaction);\n+         stage = (CompletionStage) putStage.whenCompleteAsync((pendingTransaction, t) -> {\n+            try {\n+               transactionManager.resume(pendingTransaction);\n+               commitIfNeeded(t == null);\n+            } catch (InvalidTransactionException | SystemException e) {\n+               throw new PersistenceException(\"Unable to preload!\", e);\n+            } finally {\n+               //commitIfNeeded can throw an exception, so we need a try { } finally { }\n+               resumeIfNeeded(transaction);\n+            }\n+         }, blockingExecutor);\n+      } else {\n+         stage = cache.putAsync(me.getKey(), me.getValue(), metadata);\n       }\n+      return RxJavaInterop.completionStageToMaybe(stage)\n+            .toSingle(me);", "originalCommit": "b8ef985cdebf93f77f9ccd0d366f9a3da3bf5ec8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3ODE3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8022#discussion_r393778175", "bodyText": "It is used sadly because stage can have a null value and we have to have a non null one. Same reason why I can't use CompletionStage<?> above.", "author": "wburns", "createdAt": "2020-03-17T15:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MzM5Nw=="}], "type": "inlineReview"}, {"oid": "073217b78178065e54a85da679630624992173d5", "url": "https://github.com/infinispan/infinispan/commit/073217b78178065e54a85da679630624992173d5", "message": "ISPN-11443 PersistenceManagerImpl thread checks need to be updated", "committedDate": "2020-03-17T16:56:28Z", "type": "commit"}, {"oid": "0863893a91e6ef21d4ac7b7bca9dd601b8060259", "url": "https://github.com/infinispan/infinispan/commit/0863893a91e6ef21d4ac7b7bca9dd601b8060259", "message": "changed to concat map to prevent concurrency", "committedDate": "2020-03-17T16:56:39Z", "type": "commit"}, {"oid": "50f0b25d42d0a7205e3bb1c3a8361686d5c6e253", "url": "https://github.com/infinispan/infinispan/commit/50f0b25d42d0a7205e3bb1c3a8361686d5c6e253", "message": "ISPN-11450 SegmentedBoundedOffHeapDataContainer#ensureSize should be marked as okay to be blocking", "committedDate": "2020-03-17T16:56:39Z", "type": "commit"}, {"oid": "11207859f4ba0b62e29d27ad535c2672c445fb32", "url": "https://github.com/infinispan/infinispan/commit/11207859f4ba0b62e29d27ad535c2672c445fb32", "message": "ISPN-11295 InfinispanLock needs to block on a blocking thread but continue its operation on a non blocking thread", "committedDate": "2020-03-17T16:56:39Z", "type": "commit"}, {"oid": "11207859f4ba0b62e29d27ad535c2672c445fb32", "url": "https://github.com/infinispan/infinispan/commit/11207859f4ba0b62e29d27ad535c2672c445fb32", "message": "ISPN-11295 InfinispanLock needs to block on a blocking thread but continue its operation on a non blocking thread", "committedDate": "2020-03-17T16:56:39Z", "type": "forcePushed"}]}