{"pr_number": 8677, "pr_title": "ISPN-12288 Upgrade to Hibernate Search 6.0.0.Beta10", "pr_createdAt": "2020-09-08T13:42:31Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8677", "timeline": [{"oid": "3960d0998015f8c9bd6e02f1ba2b52b3c52f7332", "url": "https://github.com/infinispan/infinispan/commit/3960d0998015f8c9bd6e02f1ba2b52b3c52f7332", "message": "ISPN-12288 Upgrade to Hibernate Search 6.0.0.Beta10", "committedDate": "2020-09-08T13:41:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDAwMg==", "url": "https://github.com/infinispan/infinispan/pull/8677#discussion_r487974002", "bodyText": "@gustavonalle FYI replacing .indexedEmbedded().prefix( cleanedUpPrefix ) with .indexedEmbedded(cleanedUpPrefix) implies a change in behavior.... Essentially the parameter to indexedEmbedded is a name, but the prefix really is really just a prefix prepended to included fields.\nFor example if you include field myField and want it to be registered at path myEmbedded.myField, you'll have to use .indexedEmbedded(\"myEmbedded\") or .indexedEmbedded().prefix(\"myEmbedded.\") (notice the trailing dot). If you call .indexedEmbedded(\"myEmbedded.\") you'll get an error.\nAnother example, if you include field  myField and want it to be registered at path myEmbedded_myField, you'll have to use .indexedEmbedded().prefix(\"myEmbedded_\"). You cannot achieve anything similar with .indexedEmbedded(<some name>), since calling .indexedEmbedded(\"myEmbedded_\") will result in the path myEmbedded_.myField.\nI'm not sure you wanted that?", "author": "yrodiere", "createdAt": "2020-09-14T14:25:44Z", "path": "search-mapper/src/main/java/org/hibernate/search/annotations/IndexedEmbedded.java", "diffHunk": "@@ -77,31 +77,29 @@ public void process(PropertyMappingStep mappingContext, IndexedEmbedded annotati\n             cleanedUpPrefix = cleanedUpPrefix.substring(1);\n          }\n \n-         if ( cleanedUpPrefix.isEmpty() ) {\n+         if (cleanedUpPrefix.isEmpty()) {\n             cleanedUpPrefix = null;\n          }\n \n          Integer cleanedUpMaxDepth = annotation.depth();\n-         if ( cleanedUpMaxDepth.equals( -1 ) ) {\n+         if (cleanedUpMaxDepth.equals(-1)) {\n             cleanedUpMaxDepth = null;\n          }\n \n          String[] includePathsArray = annotation.includePaths();\n          Set<String> cleanedUpIncludePaths;\n-         if ( includePathsArray.length > 0 ) {\n+         if (includePathsArray.length > 0) {\n             cleanedUpIncludePaths = new HashSet<>();\n-            Collections.addAll( cleanedUpIncludePaths, includePathsArray );\n-         }\n-         else {\n+            Collections.addAll(cleanedUpIncludePaths, includePathsArray);\n+         } else {\n             cleanedUpIncludePaths = Collections.emptySet();\n          }\n \n-         mappingContext.indexedEmbedded()\n-               .extractors( ContainerExtractorPath.defaultExtractors() )\n-               .prefix( cleanedUpPrefix )", "originalCommit": "3960d0998015f8c9bd6e02f1ba2b52b3c52f7332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4Njg3OA==", "url": "https://github.com/infinispan/infinispan/pull/8677#discussion_r487986878", "bodyText": "I am puzzled why no tests failed because of this change.\nAnd I didn't want to necessarily to change this behaviour, I noticed .indexedEmbedded().prefix( cleanedUpPrefix ) was deprecated, and I thought the replacement would be using a name according to the javadoc of org.hibernate.search.mapper.pojo.mapping.definition.programmatic.PropertyMappingIndexedEmbeddedStep#prefix\nClearly I didn't pay attention :)", "author": "gustavonalle", "createdAt": "2020-09-14T14:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4ODM1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8677#discussion_r487988351", "bodyText": "I will send a follow up PR to fix this", "author": "gustavonalle", "createdAt": "2020-09-14T14:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDAwMg=="}], "type": "inlineReview"}]}