{"pr_number": 8917, "pr_title": "ISPN-12518 Possible deadlock if an entry is replaced at the same time\u2026", "pr_createdAt": "2020-12-07T17:14:15Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8917", "timeline": [{"oid": "4bff8e865ee0fd5d9121ec8449667fc97e3e3ef7", "url": "https://github.com/infinispan/infinispan/commit/4bff8e865ee0fd5d9121ec8449667fc97e3e3ef7", "message": "ISPN-12518 Possible deadlock if an entry is replaced at the same time expiration take effect\n\n* Ensure backup writes don't check expiration", "committedDate": "2020-12-10T20:21:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTExNQ==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r541021115", "bodyText": "nit: can you merge FlagBitSets.SKIP_LOCKING to the line above and remove this line?", "author": "pruivo", "createdAt": "2020-12-11T15:18:56Z", "path": "core/src/main/java/org/infinispan/commands/triangle/BackupWriteCommand.java", "diffHunk": "@@ -46,7 +46,8 @@\n    public final CompletionStage<?> invokeAsync(ComponentRegistry componentRegistry) {\n       WriteCommand command = createWriteCommand();\n       command.init(componentRegistry);\n-      command.setFlagsBitSet(flags);\n+      // Mark the command as a backup write\n+      command.setFlagsBitSet(flags | FlagBitSets.BACKUP_WRITE);\n       command.addFlags(FlagBitSets.SKIP_LOCKING);", "originalCommit": "4bff8e865ee0fd5d9121ec8449667fc97e3e3ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1OTgzNQ==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r542459835", "bodyText": "Ah yes, didn't notice \ud83d\udc4d", "author": "wburns", "createdAt": "2020-12-14T15:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMjU1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r541022551", "bodyText": "unused. can be removed.", "author": "pruivo", "createdAt": "2020-12-11T15:20:59Z", "path": "core/src/test/java/org/infinispan/expiration/impl/ClusterExpirationFunctionalTest.java", "diffHunk": "@@ -432,4 +439,32 @@ private void testMaxIdleNodeDies(Function<Cache<Object, String>, Object> keyToUs\n \n       assertNotNull(cache1.get(key));\n    }\n+\n+   public static final int LIFESPAN = 64;", "originalCommit": "4bff8e865ee0fd5d9121ec8449667fc97e3e3ef7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMzU3Nw==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r541023577", "bodyText": "so, isn't the replicated cache affected by this?", "author": "pruivo", "createdAt": "2020-12-11T15:22:17Z", "path": "core/src/test/java/org/infinispan/expiration/impl/ClusterExpirationFunctionalTest.java", "diffHunk": "@@ -432,4 +439,32 @@ private void testMaxIdleNodeDies(Function<Cache<Object, String>, Object> keyToUs\n \n       assertNotNull(cache1.get(key));\n    }\n+\n+   public static final int LIFESPAN = 64;\n+\n+   public void testPrimaryNotExpiredButBackupWas() throws InterruptedException, ExecutionException, TimeoutException {\n+      if (transactional || cacheMode != CacheMode.DIST_SYNC) {", "originalCommit": "4bff8e865ee0fd5d9121ec8449667fc97e3e3ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2Njg0OA==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r542466848", "bodyText": "It is, but the test wasn't utilizing it :(", "author": "wburns", "createdAt": "2020-12-14T15:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2ODE4NA==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r542468184", "bodyText": "I will try to tweak it to add it, requires slightly different rpc handling.", "author": "wburns", "createdAt": "2020-12-14T15:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NDc2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r542494761", "bodyText": "REPL is broken atm, have to figure out how to fix it still.", "author": "wburns", "createdAt": "2020-12-14T15:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMzU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTM2MA==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r541031360", "bodyText": "for completeness :)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               }\n          \n          \n            \n               assertEquals(value + \"-expire-backup\", cache0.get(key));\n          \n          \n            \n               assertEquals(value + \"-expire-backup\", cache1.get(key));\n          \n          \n            \n               assertEquals(value + \"-expire-backup\", cache2.get(key));\n          \n          \n            \n               }", "author": "pruivo", "createdAt": "2020-12-11T15:33:13Z", "path": "core/src/test/java/org/infinispan/expiration/impl/ClusterExpirationFunctionalTest.java", "diffHunk": "@@ -432,4 +439,32 @@ private void testMaxIdleNodeDies(Function<Cache<Object, String>, Object> keyToUs\n \n       assertNotNull(cache1.get(key));\n    }\n+\n+   public static final int LIFESPAN = 64;\n+\n+   public void testPrimaryNotExpiredButBackupWas() throws InterruptedException, ExecutionException, TimeoutException {\n+      if (transactional || cacheMode != CacheMode.DIST_SYNC) {\n+         throw new SkipException(\"Test isn't supported in transactional mode\");\n+      }\n+      Object key = createKey(cache0, cache1);\n+      String value = key.toString();\n+      cache0.put(key, value,10, TimeUnit.SECONDS);\n+\n+      final ControlledRpcManager controlledRpcManager = ControlledRpcManager.replaceRpcManager(cache0);\n+      controlledRpcManager.excludeCommands(PutKeyValueCommand.class);\n+\n+      try {\n+         Future<String> result = fork(() -> cache0.put(key, value + \"-expire-backup\"));\n+\n+         ControlledRpcManager.BlockedRequest<BackupWriteCommand> blockedRequest = controlledRpcManager.expectCommand(BackupWriteCommand.class);\n+\n+         incrementAllTimeServices(11, TimeUnit.SECONDS);\n+\n+         blockedRequest.send();\n+\n+         assertEquals(value, result.get(10, TimeUnit.SECONDS));\n+      } finally {\n+         controlledRpcManager.revertRpcManager();\n+      }\n+   }", "originalCommit": "4bff8e865ee0fd5d9121ec8449667fc97e3e3ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2MDM4MQ==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r542460381", "bodyText": "\ud83d\udc4d", "author": "wburns", "createdAt": "2020-12-14T15:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTM2MA=="}], "type": "inlineReview"}, {"oid": "ae5122f0e4d7478eefa5b79ab013e4dd6b9a8b35", "url": "https://github.com/infinispan/infinispan/commit/ae5122f0e4d7478eefa5b79ab013e4dd6b9a8b35", "message": "ISPN-12518 Possible deadlock if an entry is replaced at the same time expiration take effect\n\n* Ensure backup writes don't check expiration", "committedDate": "2020-12-14T16:52:10Z", "type": "forcePushed"}, {"oid": "0fc6a6a089a0418edcaa0d9ddd7be10a9393bdb5", "url": "https://github.com/infinispan/infinispan/commit/0fc6a6a089a0418edcaa0d9ddd7be10a9393bdb5", "message": "ISPN-12518 Possible deadlock if an entry is replaced at the same time expiration take effect\n\n* Ensure backup writes don't check expiration", "committedDate": "2020-12-14T16:54:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NzQyOA==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r543167428", "bodyText": "I think you have to remove the flag after sending (after line 280 below). if the command retries (topology changed), the command will have this flag on the primary owner.", "author": "pruivo", "createdAt": "2020-12-15T09:08:17Z", "path": "core/src/main/java/org/infinispan/interceptors/distribution/BaseDistributionInterceptor.java", "diffHunk": "@@ -270,6 +270,8 @@ protected Object primaryReturnHandler(InvocationContext ctx, AbstractDataWriteCo\n       }\n       MapResponseCollector collector = MapResponseCollector.ignoreLeavers(isReplicated, owners.size());\n       RpcOptions rpcOptions = rpcManager.getSyncRpcOptions();\n+      // Mark the command as a backup write so it can skip some checks\n+      command.addFlags(FlagBitSets.BACKUP_WRITE);", "originalCommit": "0fc6a6a089a0418edcaa0d9ddd7be10a9393bdb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwNjA0Nw==", "url": "https://github.com/infinispan/infinispan/pull/8917#discussion_r543406047", "bodyText": "Makes sense, let me take a closer look.", "author": "wburns", "createdAt": "2020-12-15T14:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NzQyOA=="}], "type": "inlineReview"}, {"oid": "5325fd01e01aa1298900f95f50a17cd22f379fca", "url": "https://github.com/infinispan/infinispan/commit/5325fd01e01aa1298900f95f50a17cd22f379fca", "message": "ISPN-12518 Possible deadlock if an entry is replaced at the same time expiration take effect\n\n* Ensure backup writes don't check expiration", "committedDate": "2020-12-15T17:29:57Z", "type": "commit"}, {"oid": "5325fd01e01aa1298900f95f50a17cd22f379fca", "url": "https://github.com/infinispan/infinispan/commit/5325fd01e01aa1298900f95f50a17cd22f379fca", "message": "ISPN-12518 Possible deadlock if an entry is replaced at the same time expiration take effect\n\n* Ensure backup writes don't check expiration", "committedDate": "2020-12-15T17:29:57Z", "type": "forcePushed"}]}