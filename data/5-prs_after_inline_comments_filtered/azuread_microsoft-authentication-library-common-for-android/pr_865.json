{"pr_number": 865, "pr_title": "Detect MDM link", "pr_createdAt": "2020-03-20T06:09:14Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865", "timeline": [{"oid": "e73a8f7e85671655dd870a1497505fc551bb0729", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e73a8f7e85671655dd870a1497505fc551bb0729", "message": "Detect MDM link", "committedDate": "2020-03-20T06:02:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NzE5MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395667190", "bodyText": "Looks we already had the constant defined using the forward link instead of the query string and were using it to launch CP. So server change was not a must but good to have.", "author": "Om83", "createdAt": "2020-03-20T14:19:31Z", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1016,14 +1021,14 @@ private AuthenticationConstants() {\n         public static final String BROWSER_EXT_INSTALL_PREFIX = \"msauth://\";\n \n         /**\n-         * Prefix in the redirect to open external browser to finish the CA auth.\n+         * A query param indicating that this is an intune device CA link.\n          */\n-        public static final String BROWSER_DEVICE_CA_URL = \"browser://go.microsoft.com/fwlink/?LinkId=396941\";\n+        public static final String BROWSER_DEVICE_CA_URL_QUERY_STRING_PARAMETER = \"&ismdmurl=1\";", "originalCommit": "e73a8f7e85671655dd870a1497505fc551bb0729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyMjgwNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395722807", "bodyText": "Given that the link defined by Intune could be changed on the server side at any point in time, if we are going to ship this, I think having a 'contract' (i.e. the server side explicitly sends us a signal) is a must.", "author": "rpdome", "createdAt": "2020-03-20T15:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NzE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2OTQwNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395669406", "bodyText": "Why are we passing the same parameter twice?", "author": "Om83", "createdAt": "2020-03-20T14:22:51Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/azureactivedirectory/AzureActiveDirectoryAuthorizationResultFactory.java", "diffHunk": "@@ -103,11 +103,21 @@ public AzureActiveDirectoryAuthorizationResult createAuthorizationResult(final i\n                 break;\n \n             case AuthenticationConstants.UIResponse.BROWSER_CODE_DEVICE_REGISTER:\n-                Logger.verbose(TAG, \"Device needs to have broker installed, we expect the apps to call us\"\n-                        + \"back when the broker is installed\");\n+                Logger.info(TAG, \"Device Registration needed, need to start WPJ\");\n                 result = createAuthorizationResultWithErrorResponse(AuthorizationStatus.FAIL,\n-                        MicrosoftAuthorizationErrorResponse.AUTHORIZATION_FAILED,\n-                        MicrosoftAuthorizationErrorResponse.BROKER_NEEDS_TO_BE_INSTALLED);\n+                        MicrosoftAuthorizationErrorResponse.DEVICE_REGISTRATION_NEEDED,", "originalCommit": "e73a8f7e85671655dd870a1497505fc551bb0729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyNzg0Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395727846", "bodyText": "The pattern I'm seeing is that the error code itself (MicrosoftAuthorizationErrorResponse.XXXX) can also be used as a error message.\nWe could also have separate values for this one.", "author": "rpdome", "createdAt": "2020-03-20T15:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2OTQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NDU2OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395674568", "bodyText": "Same here", "author": "Om83", "createdAt": "2020-03-20T14:30:25Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/azureactivedirectory/AzureActiveDirectoryAuthorizationResultFactory.java", "diffHunk": "@@ -103,11 +103,21 @@ public AzureActiveDirectoryAuthorizationResult createAuthorizationResult(final i\n                 break;\n \n             case AuthenticationConstants.UIResponse.BROWSER_CODE_DEVICE_REGISTER:\n-                Logger.verbose(TAG, \"Device needs to have broker installed, we expect the apps to call us\"\n-                        + \"back when the broker is installed\");\n+                Logger.info(TAG, \"Device Registration needed, need to start WPJ\");\n                 result = createAuthorizationResultWithErrorResponse(AuthorizationStatus.FAIL,\n-                        MicrosoftAuthorizationErrorResponse.AUTHORIZATION_FAILED,\n-                        MicrosoftAuthorizationErrorResponse.BROKER_NEEDS_TO_BE_INSTALLED);\n+                        MicrosoftAuthorizationErrorResponse.DEVICE_REGISTRATION_NEEDED,\n+                        MicrosoftAuthorizationErrorResponse.DEVICE_REGISTRATION_NEEDED);\n+                // Set username returned from the service\n+                result.getAuthorizationErrorResponse().setUserName(data.getStringExtra(\n+                        AuthenticationConstants.Broker.INSTALL_UPN_KEY)\n+                );\n+                break;\n+\n+            case AuthenticationConstants.UIResponse.BROWSER_CODE_MDM:\n+                Logger.info(TAG, \"MDM required. Launching Intune MDM link on browser.\");\n+                result = createAuthorizationResultWithErrorResponse(AuthorizationStatus.FAIL,\n+                        MicrosoftAuthorizationErrorResponse.DEVICE_NEEDS_TO_BE_MANAGED,", "originalCommit": "e73a8f7e85671655dd870a1497505fc551bb0729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NDcxOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395674719", "bodyText": "And here", "author": "Om83", "createdAt": "2020-03-20T14:30:37Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsAuthorizationResultFactory.java", "diffHunk": "@@ -123,7 +123,12 @@ public MicrosoftStsAuthorizationResult createAuthorizationResult(final int resul\n                         );\n                 break;\n \n-\n+            case AuthenticationConstants.UIResponse.BROWSER_CODE_MDM:\n+                Logger.info(TAG, \"MDM required. Launching Intune MDM link on browser.\");\n+                result = createAuthorizationResultWithErrorResponse(AuthorizationStatus.FAIL,\n+                        MicrosoftAuthorizationErrorResponse.DEVICE_NEEDS_TO_BE_MANAGED,", "originalCommit": "e73a8f7e85671655dd870a1497505fc551bb0729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NzIxMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395677213", "bodyText": "Why do we need this. Shouldn't the server already be rejecting it?", "author": "Om83", "createdAt": "2020-03-20T14:34:20Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/ui/webview/AzureActiveDirectoryWebViewClient.java", "diffHunk": "@@ -214,35 +214,40 @@ protected boolean processRedirectUrl(@NonNull final WebView view, @NonNull final\n \n     private boolean processWebsiteRequest(@NonNull final WebView view, @NonNull final String url) {\n         final String methodName = \"#processWebsiteRequest\";\n-        final PackageHelper packageHelper = new PackageHelper(getActivity().getPackageManager());\n-        final Context applicationContext = getActivity().getApplicationContext();\n-        if (url.startsWith(AuthenticationConstants.Broker.BROWSER_DEVICE_CA_URL)\n-                && packageHelper.isPackageInstalledAndEnabled(applicationContext, AuthenticationConstants.Broker.COMPANY_PORTAL_APP_PACKAGE_NAME)\n-                && packageHelper.isPackageInstalledAndEnabled(applicationContext, AuthenticationConstants.Broker.IPPHONE_APP_PACKAGE_NAME)\n-                && AuthenticationConstants.Broker.IPPHONE_APP_SIGNATURE.equals(\n-                packageHelper.getCurrentSignatureForPackage(AuthenticationConstants.Broker.IPPHONE_APP_PACKAGE_NAME))) {\n-            // TODO: This flow should really check if the Microsoft Intune or the Company Portal apps are installed,\n-            // which is the correct client app to launch depending on the enrollment, and launch that app, to permanently skip the browser.\n-            // Also it must handle 3rd party MDMs as appropriate, which will depend on the browser flow determining the authority.\n-            Logger.info(TAG + methodName, \"It is a device CA request on IPPhone. Company Portal is installed.\");\n-            try {\n-                Logger.verbose(TAG + methodName, \"Sending intent to launch the CompanyPortal.\");\n-                final Intent intent = new Intent();\n-                intent.setComponent(new ComponentName(AuthenticationConstants.Broker.COMPANY_PORTAL_APP_PACKAGE_NAME,\n-                        AuthenticationConstants.Broker.COMPANY_PORTAL_APP_LAUNCH_ACTIVITY_NAME));\n-                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n-                getActivity().startActivity(intent);\n-            } catch (final SecurityException ex) {\n-                Logger.warn(TAG + methodName, \"Failed to launch Company Portal, falling back to browser.\");\n-                openLinkInBrowser(url);\n+\n+        view.stopLoading();\n+\n+        if (url.contains(AuthenticationConstants.Broker.BROWSER_DEVICE_CA_URL_QUERY_STRING_PARAMETER)) {\n+            Logger.info(TAG + methodName, \"This is a device CA request.\");\n+            final PackageHelper packageHelper = new PackageHelper(getActivity().getPackageManager());\n+            final Context applicationContext = getActivity().getApplicationContext();\n+\n+            // If CP is installed, redirect to CP.\n+            if (!getActivity().getPackageName().equalsIgnoreCase(AuthenticationConstants.Broker.COMPANY_PORTAL_APP_PACKAGE_NAME) &&\n+                    packageHelper.isPackageInstalledAndEnabled(applicationContext, AuthenticationConstants.Broker.COMPANY_PORTAL_APP_PACKAGE_NAME)) {\n+                try {\n+                    Logger.verbose(TAG + methodName, \"Sending intent to launch the CompanyPortal.\");\n+                    final Intent intent = new Intent();\n+                    intent.setComponent(new ComponentName(AuthenticationConstants.Broker.COMPANY_PORTAL_APP_PACKAGE_NAME,\n+                            AuthenticationConstants.Broker.COMPANY_PORTAL_APP_LAUNCH_ACTIVITY_NAME));\n+                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n+                    getActivity().startActivity(intent);\n+\n+                    getCompletionCallback().onChallengeResponseReceived(AuthenticationConstants.UIResponse.BROWSER_CODE_MDM, new Intent());\n+                    return true;\n+                } catch (final Exception ex) {\n+                    Logger.warn(TAG + methodName, \"Failed to launch Company Portal, falling back to browser.\");\n+                }\n             }\n-        } else {\n-            openLinkInBrowser(url);\n+\n+            // Otherwise, strip out BROWSER_DEVICE_CA_URL_QUERY_STRING_PARAMETER and launch in Browser.\n+            openLinkInBrowser(url.replace(AuthenticationConstants.Broker.BROWSER_DEVICE_CA_URL_QUERY_STRING_PARAMETER, \"\"));", "originalCommit": "e73a8f7e85671655dd870a1497505fc551bb0729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyODk3Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395728977", "bodyText": "This is what I and Carlos originally agreed on. Although I agree with you that if we make the query string parameter unique enough, we might not have to do this.\nI've forwarded him this PR and will let him chime in.", "author": "rpdome", "createdAt": "2020-03-20T15:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NzIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3ODAzMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395878031", "bodyText": "Yes I would be curious to understand why server can't reject it .", "author": "Om83", "createdAt": "2020-03-20T20:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NzIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4Mjg3NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r396582875", "bodyText": "Intune confirmed they'll reject it. I'll remove this logic.", "author": "rpdome", "createdAt": "2020-03-23T16:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3NzIxMw=="}], "type": "inlineReview"}, {"oid": "e62d9cb40acbeb2523977148e4cf966dc3e9ddec", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e62d9cb40acbeb2523977148e4cf966dc3e9ddec", "message": "Merge branch 'dev' into rapong/MDMCancel", "committedDate": "2020-03-20T16:02:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyODQ5MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395828490", "bodyText": "Why is this check removed ? I see a TODO, but did we test this ?", "author": "kreedula", "createdAt": "2020-03-20T18:46:46Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/ui/webview/AzureActiveDirectoryWebViewClient.java", "diffHunk": "@@ -214,35 +214,40 @@ protected boolean processRedirectUrl(@NonNull final WebView view, @NonNull final\n \n     private boolean processWebsiteRequest(@NonNull final WebView view, @NonNull final String url) {\n         final String methodName = \"#processWebsiteRequest\";\n-        final PackageHelper packageHelper = new PackageHelper(getActivity().getPackageManager());\n-        final Context applicationContext = getActivity().getApplicationContext();\n-        if (url.startsWith(AuthenticationConstants.Broker.BROWSER_DEVICE_CA_URL)\n-                && packageHelper.isPackageInstalledAndEnabled(applicationContext, AuthenticationConstants.Broker.COMPANY_PORTAL_APP_PACKAGE_NAME)\n-                && packageHelper.isPackageInstalledAndEnabled(applicationContext, AuthenticationConstants.Broker.IPPHONE_APP_PACKAGE_NAME)\n-                && AuthenticationConstants.Broker.IPPHONE_APP_SIGNATURE.equals(\n-                packageHelper.getCurrentSignatureForPackage(AuthenticationConstants.Broker.IPPHONE_APP_PACKAGE_NAME))) {", "originalCommit": "e62d9cb40acbeb2523977148e4cf966dc3e9ddec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNjMyMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395836321", "bodyText": "Once we get a clear signal from the server side, we can remove this app-specific workaround.\nI've tested this by adding ismdmurl=1 at the end of the url and set COMPANY_PORTAL_APP_PACKAGE_NAME to CP package in debug mode, CP is launched.", "author": "rpdome", "createdAt": "2020-03-20T19:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0MjQ3Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395842476", "bodyText": "(if we use brokertestapp, then an exception will be thrown as it wouldn't be able to find SplashActivity. In that case we'll proceed to the next step - launching browser and returning AuthenticationConstants.UIResponse.BROWSER_CODE_MDM.", "author": "rpdome", "createdAt": "2020-03-20T19:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1OTczMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395859732", "bodyText": "okay makes sense, probably this check is the reason, we always end up in Playstore even if CP is installed", "author": "kreedula", "createdAt": "2020-03-20T19:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2MjIwOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395862209", "bodyText": "I guess this check was probably added because playstore is not available on ipphone devices.\nOtherwise the user can redirect to the app through playstore. (one more click -but it's not blocking).", "author": "rpdome", "createdAt": "2020-03-20T19:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyODQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2MzYxMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395863613", "bodyText": "Yup, never made sense to me,  as why not directly go to CP in regular case also, i.e. why a specific app check. anyways this should fix", "author": "kreedula", "createdAt": "2020-03-20T20:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyODQ5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyOTQxNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/865#discussion_r395829417", "bodyText": "nit : most of the lines in this method are very long, way beyond 100 chars, see if you can format to improve readability", "author": "kreedula", "createdAt": "2020-03-20T18:48:38Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/ui/webview/AzureActiveDirectoryWebViewClient.java", "diffHunk": "@@ -214,35 +214,40 @@ protected boolean processRedirectUrl(@NonNull final WebView view, @NonNull final\n \n     private boolean processWebsiteRequest(@NonNull final WebView view, @NonNull final String url) {\n         final String methodName = \"#processWebsiteRequest\";\n-        final PackageHelper packageHelper = new PackageHelper(getActivity().getPackageManager());\n-        final Context applicationContext = getActivity().getApplicationContext();\n-        if (url.startsWith(AuthenticationConstants.Broker.BROWSER_DEVICE_CA_URL)\n-                && packageHelper.isPackageInstalledAndEnabled(applicationContext, AuthenticationConstants.Broker.COMPANY_PORTAL_APP_PACKAGE_NAME)\n-                && packageHelper.isPackageInstalledAndEnabled(applicationContext, AuthenticationConstants.Broker.IPPHONE_APP_PACKAGE_NAME)\n-                && AuthenticationConstants.Broker.IPPHONE_APP_SIGNATURE.equals(\n-                packageHelper.getCurrentSignatureForPackage(AuthenticationConstants.Broker.IPPHONE_APP_PACKAGE_NAME))) {\n-            // TODO: This flow should really check if the Microsoft Intune or the Company Portal apps are installed,\n-            // which is the correct client app to launch depending on the enrollment, and launch that app, to permanently skip the browser.\n-            // Also it must handle 3rd party MDMs as appropriate, which will depend on the browser flow determining the authority.\n-            Logger.info(TAG + methodName, \"It is a device CA request on IPPhone. Company Portal is installed.\");\n-            try {\n-                Logger.verbose(TAG + methodName, \"Sending intent to launch the CompanyPortal.\");\n-                final Intent intent = new Intent();\n-                intent.setComponent(new ComponentName(AuthenticationConstants.Broker.COMPANY_PORTAL_APP_PACKAGE_NAME,\n-                        AuthenticationConstants.Broker.COMPANY_PORTAL_APP_LAUNCH_ACTIVITY_NAME));\n-                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n-                getActivity().startActivity(intent);\n-            } catch (final SecurityException ex) {\n-                Logger.warn(TAG + methodName, \"Failed to launch Company Portal, falling back to browser.\");\n-                openLinkInBrowser(url);\n+", "originalCommit": "e62d9cb40acbeb2523977148e4cf966dc3e9ddec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b36b4a55275cc16ea01ba756c4e651a53a84aef", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1b36b4a55275cc16ea01ba756c4e651a53a84aef", "message": "Address comment", "committedDate": "2020-03-20T19:48:57Z", "type": "commit"}, {"oid": "9df1a927b6cb684848e311b47202b783339a7494", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9df1a927b6cb684848e311b47202b783339a7494", "message": "Remove self-check. It should not matter if the call is being made through broker's company portal.", "committedDate": "2020-03-20T20:20:53Z", "type": "commit"}, {"oid": "1e987359236f835fa5ef9eae1b2521774dd3a18a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1e987359236f835fa5ef9eae1b2521774dd3a18a", "message": "Merge branch 'rapong/MDMCancel' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into rapong/MDMCancel", "committedDate": "2020-03-20T20:21:28Z", "type": "commit"}, {"oid": "112954e149f6a2778316217230e097e8a38fd17a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/112954e149f6a2778316217230e097e8a38fd17a", "message": "Update test case", "committedDate": "2020-03-20T20:46:13Z", "type": "commit"}, {"oid": "944b6e71e293df90b9b04d13f1913c4222ee0160", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/944b6e71e293df90b9b04d13f1913c4222ee0160", "message": "Merge branch 'dev' into rapong/MDMCancel", "committedDate": "2020-03-23T16:26:05Z", "type": "commit"}, {"oid": "19d37909e4ce82f8019127ede05663590d558d87", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/19d37909e4ce82f8019127ede05663590d558d87", "message": "Remove url stripping logic", "committedDate": "2020-03-23T16:53:15Z", "type": "commit"}]}