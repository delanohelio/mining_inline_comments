{"pr_number": 1108, "pr_title": "Hello() cache", "pr_createdAt": "2020-11-01T07:32:17Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxOTM5Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515719396", "bodyText": "these will change, so you may want a distinguishing factor in here.", "author": "AdamBJohnsonx", "createdAt": "2020-11-02T03:04:57Z", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -644,11 +644,21 @@\n          */\n         public static final String BROKER_ACTIVITY_NAME = \"broker.activity.name\";\n \n+        /**\n+         * The Msal-To-Broker protocol name.\n+         */\n+        public static final String MSAL_TO_BROKER_PROTOCOL_NAME = \"msal.to.broker\";\n+\n         /**\n          * The newest Msal-To-Broker protocol version.\n          */\n         public static final String MSAL_TO_BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n \n+        /**\n+         * The Msal-To-Broker protocol name.\n+         */\n+        public static final String BROKER_API_TO_BROKER_PROTOCOL_NAME = \"broker.api.to.broker\";", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxOTQ0MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515719441", "bodyText": "Log.", "author": "AdamBJohnsonx", "createdAt": "2020-11-02T03:05:06Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/ipc/ContentProviderStrategy.java", "diffHunk": "@@ -136,6 +136,10 @@ public boolean isBrokerContentProviderAvailable(@NonNull final String targetedBr\n         final List<ProviderInfo> providers = mContext.getPackageManager()\n                 .queryContentProviders(null, 0, 0);\n \n+        if (providers == null){\n+            return false;", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxOTgzMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515719831", "bodyText": "We might want a way to clean these up so they don't continually build.", "author": "AdamBJohnsonx", "createdAt": "2020-11-02T03:07:30Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/HelloCache.java", "diffHunk": "@@ -0,0 +1,152 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.cache;\n+\n+import android.content.Context;\n+import android.content.pm.PackageInfo;\n+import android.content.pm.PackageManager;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+\n+import com.microsoft.identity.common.internal.logging.Logger;\n+\n+/**\n+ * Persisted cache for the IPC hello() protocol.\n+ * Use client's protocol version and the targeted app's package name and app version as a key\n+ * to cache the negotiated protocol version.\n+ * <p>\n+ * This means a new hello() call will ONLY be triggered only when.\n+ * 1. IPC operation is invoked for the very first time.\n+ * 2. Client bumps up protocol version.\n+ * 3. The targeted app is updated, uninstalled, reinstalled.\n+ * <p>\n+ * NOTE: the downside of this is that if you're debugging protocol change on the targeted app side,\n+ * you'll either have to keep bumping the test app version or clear the cache.\n+ * I've provided clearCache() for this purpose.\n+ */\n+public class HelloCache {\n+    private static final String TAG = HelloCache.class.getSimpleName();\n+\n+    private static final String SHARED_PREFERENCE_NAME = \"com.microsoft.common.ipc.hello.cache\";\n+\n+    private final SharedPreferencesFileManager mFileManager;\n+    private final Context mContext;\n+    private final String mProtocolName;\n+    private final String mTargetAppPackageName;\n+\n+    /**\n+     * Default constructor.\n+     *\n+     * @param context              application context.\n+     * @param protocolName         name of the protocol that invokes hello().\n+     * @param targetAppPackageName package name of the app that this client will hello() with.\n+     */\n+    public HelloCache(@NonNull final Context context,\n+                      @NonNull final String protocolName,\n+                      @NonNull final String targetAppPackageName) {\n+        mFileManager = new SharedPreferencesFileManager(context, SHARED_PREFERENCE_NAME);\n+        mContext = context;\n+        mProtocolName = protocolName;\n+        mTargetAppPackageName = targetAppPackageName;\n+    }\n+\n+    /**\n+     * Gets the cached negotiated protocol version. Returns null if there is none.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     */\n+    public @Nullable String tryGetNegotiatedProtocolVersion(@Nullable final String clientMinimumProtocolVersion,\n+                                                            @NonNull final String clientMaximumProtocolVersion) {\n+        final String methodName = \":tryGetNegotiatedProtocolVersion\";\n+\n+        final String key;\n+        try {\n+            key = getKey(clientMinimumProtocolVersion, clientMaximumProtocolVersion);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            Logger.error(TAG + methodName, \"Failed to retrieve key\", e);\n+            return null;\n+        }\n+\n+        return mFileManager.getString(key);\n+    }\n+\n+    /**\n+     * Store the given negotiated protocol version into the cache.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     * @param negotiatedProtocolVersion    the negotiated protocol version as returned from hello().\n+     */\n+    public void saveNegotiatedProtocolVersion(@Nullable final String clientMinimumProtocolVersion,\n+                                              @NonNull final String clientMaximumProtocolVersion,\n+                                              @NonNull final String negotiatedProtocolVersion) {\n+        final String methodName = \":saveNegotiatedProtocolVersion\";\n+\n+        final String key;\n+        try {\n+            key = getKey(clientMinimumProtocolVersion, clientMaximumProtocolVersion);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            Logger.error(TAG + methodName, \"Failed to retrieve key\", e);\n+            return;\n+        }\n+\n+        mFileManager.putString(key, negotiatedProtocolVersion);\n+    }\n+\n+    /**\n+     * Generates {@link SharedPreferencesFileManager}'s key.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     */\n+    private @NonNull String getKey(@Nullable final String clientMinimumProtocolVersion,\n+                                   @NonNull final String clientMaximumProtocolVersion)\n+            throws PackageManager.NameNotFoundException {\n+        return mProtocolName +\n+                \"[\" + clientMinimumProtocolVersion + \",\" + clientMaximumProtocolVersion + \"]:\"\n+                + mTargetAppPackageName + \"[\" + getVersionCode() + \"]\";\n+    }\n+\n+    /**\n+     * To be used while debugging protocol change only.\n+     */\n+    @VisibleForTesting\n+    public void clearCache() {\n+        mFileManager.clear();\n+    }", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNTE0MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515735140", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * The Msal-To-Broker protocol name.\n          \n          \n            \n                     * The Broker-To-Broker protocol name.", "author": "shahzaibj", "createdAt": "2020-11-02T04:30:28Z", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -644,11 +644,21 @@\n          */\n         public static final String BROKER_ACTIVITY_NAME = \"broker.activity.name\";\n \n+        /**\n+         * The Msal-To-Broker protocol name.\n+         */\n+        public static final String MSAL_TO_BROKER_PROTOCOL_NAME = \"msal.to.broker\";\n+\n         /**\n          * The newest Msal-To-Broker protocol version.\n          */\n         public static final String MSAL_TO_BROKER_PROTOCOL_VERSION_CODE = \"5.0\";\n \n+        /**\n+         * The Msal-To-Broker protocol name.", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNTYwNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515735607", "bodyText": "Or you could pass a flag to disable/enable the cache for Hello....I would actually like to see that...doesn't necessarily have to be in this PR.", "author": "shahzaibj", "createdAt": "2020-11-02T04:33:09Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/HelloCache.java", "diffHunk": "@@ -0,0 +1,152 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.cache;\n+\n+import android.content.Context;\n+import android.content.pm.PackageInfo;\n+import android.content.pm.PackageManager;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+\n+import com.microsoft.identity.common.internal.logging.Logger;\n+\n+/**\n+ * Persisted cache for the IPC hello() protocol.\n+ * Use client's protocol version and the targeted app's package name and app version as a key\n+ * to cache the negotiated protocol version.\n+ * <p>\n+ * This means a new hello() call will ONLY be triggered only when.\n+ * 1. IPC operation is invoked for the very first time.\n+ * 2. Client bumps up protocol version.\n+ * 3. The targeted app is updated, uninstalled, reinstalled.\n+ * <p>\n+ * NOTE: the downside of this is that if you're debugging protocol change on the targeted app side,\n+ * you'll either have to keep bumping the test app version or clear the cache.\n+ * I've provided clearCache() for this purpose.", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4Nzc4MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515787781", "bodyText": "Might as well do it otherwise it'll sit in my backlog for eternity :D", "author": "rpdome", "createdAt": "2020-11-02T07:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNTYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNjIwNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515736204", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNull String getKey(@Nullable final String clientMinimumProtocolVersion,\n          \n          \n            \n                private @NonNull String getNegotiatedProtocolVersionCacheKey(@Nullable final String clientMinimumProtocolVersion,", "author": "shahzaibj", "createdAt": "2020-11-02T04:36:11Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/HelloCache.java", "diffHunk": "@@ -0,0 +1,152 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.cache;\n+\n+import android.content.Context;\n+import android.content.pm.PackageInfo;\n+import android.content.pm.PackageManager;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+\n+import com.microsoft.identity.common.internal.logging.Logger;\n+\n+/**\n+ * Persisted cache for the IPC hello() protocol.\n+ * Use client's protocol version and the targeted app's package name and app version as a key\n+ * to cache the negotiated protocol version.\n+ * <p>\n+ * This means a new hello() call will ONLY be triggered only when.\n+ * 1. IPC operation is invoked for the very first time.\n+ * 2. Client bumps up protocol version.\n+ * 3. The targeted app is updated, uninstalled, reinstalled.\n+ * <p>\n+ * NOTE: the downside of this is that if you're debugging protocol change on the targeted app side,\n+ * you'll either have to keep bumping the test app version or clear the cache.\n+ * I've provided clearCache() for this purpose.\n+ */\n+public class HelloCache {\n+    private static final String TAG = HelloCache.class.getSimpleName();\n+\n+    private static final String SHARED_PREFERENCE_NAME = \"com.microsoft.common.ipc.hello.cache\";\n+\n+    private final SharedPreferencesFileManager mFileManager;\n+    private final Context mContext;\n+    private final String mProtocolName;\n+    private final String mTargetAppPackageName;\n+\n+    /**\n+     * Default constructor.\n+     *\n+     * @param context              application context.\n+     * @param protocolName         name of the protocol that invokes hello().\n+     * @param targetAppPackageName package name of the app that this client will hello() with.\n+     */\n+    public HelloCache(@NonNull final Context context,\n+                      @NonNull final String protocolName,\n+                      @NonNull final String targetAppPackageName) {\n+        mFileManager = new SharedPreferencesFileManager(context, SHARED_PREFERENCE_NAME);\n+        mContext = context;\n+        mProtocolName = protocolName;\n+        mTargetAppPackageName = targetAppPackageName;\n+    }\n+\n+    /**\n+     * Gets the cached negotiated protocol version. Returns null if there is none.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     */\n+    public @Nullable String tryGetNegotiatedProtocolVersion(@Nullable final String clientMinimumProtocolVersion,\n+                                                            @NonNull final String clientMaximumProtocolVersion) {\n+        final String methodName = \":tryGetNegotiatedProtocolVersion\";\n+\n+        final String key;\n+        try {\n+            key = getKey(clientMinimumProtocolVersion, clientMaximumProtocolVersion);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            Logger.error(TAG + methodName, \"Failed to retrieve key\", e);\n+            return null;\n+        }\n+\n+        return mFileManager.getString(key);\n+    }\n+\n+    /**\n+     * Store the given negotiated protocol version into the cache.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     * @param negotiatedProtocolVersion    the negotiated protocol version as returned from hello().\n+     */\n+    public void saveNegotiatedProtocolVersion(@Nullable final String clientMinimumProtocolVersion,\n+                                              @NonNull final String clientMaximumProtocolVersion,\n+                                              @NonNull final String negotiatedProtocolVersion) {\n+        final String methodName = \":saveNegotiatedProtocolVersion\";\n+\n+        final String key;\n+        try {\n+            key = getKey(clientMinimumProtocolVersion, clientMaximumProtocolVersion);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            Logger.error(TAG + methodName, \"Failed to retrieve key\", e);\n+            return;\n+        }\n+\n+        mFileManager.putString(key, negotiatedProtocolVersion);\n+    }\n+\n+    /**\n+     * Generates {@link SharedPreferencesFileManager}'s key.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     */\n+    private @NonNull String getKey(@Nullable final String clientMinimumProtocolVersion,", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNjI3MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515736270", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Generates {@link SharedPreferencesFileManager}'s key.\n          \n          \n            \n                 * Generates {@link SharedPreferencesFileManager}'s cache key for the negotiated protocol version.", "author": "shahzaibj", "createdAt": "2020-11-02T04:36:34Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/HelloCache.java", "diffHunk": "@@ -0,0 +1,152 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.cache;\n+\n+import android.content.Context;\n+import android.content.pm.PackageInfo;\n+import android.content.pm.PackageManager;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+\n+import com.microsoft.identity.common.internal.logging.Logger;\n+\n+/**\n+ * Persisted cache for the IPC hello() protocol.\n+ * Use client's protocol version and the targeted app's package name and app version as a key\n+ * to cache the negotiated protocol version.\n+ * <p>\n+ * This means a new hello() call will ONLY be triggered only when.\n+ * 1. IPC operation is invoked for the very first time.\n+ * 2. Client bumps up protocol version.\n+ * 3. The targeted app is updated, uninstalled, reinstalled.\n+ * <p>\n+ * NOTE: the downside of this is that if you're debugging protocol change on the targeted app side,\n+ * you'll either have to keep bumping the test app version or clear the cache.\n+ * I've provided clearCache() for this purpose.\n+ */\n+public class HelloCache {\n+    private static final String TAG = HelloCache.class.getSimpleName();\n+\n+    private static final String SHARED_PREFERENCE_NAME = \"com.microsoft.common.ipc.hello.cache\";\n+\n+    private final SharedPreferencesFileManager mFileManager;\n+    private final Context mContext;\n+    private final String mProtocolName;\n+    private final String mTargetAppPackageName;\n+\n+    /**\n+     * Default constructor.\n+     *\n+     * @param context              application context.\n+     * @param protocolName         name of the protocol that invokes hello().\n+     * @param targetAppPackageName package name of the app that this client will hello() with.\n+     */\n+    public HelloCache(@NonNull final Context context,\n+                      @NonNull final String protocolName,\n+                      @NonNull final String targetAppPackageName) {\n+        mFileManager = new SharedPreferencesFileManager(context, SHARED_PREFERENCE_NAME);\n+        mContext = context;\n+        mProtocolName = protocolName;\n+        mTargetAppPackageName = targetAppPackageName;\n+    }\n+\n+    /**\n+     * Gets the cached negotiated protocol version. Returns null if there is none.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     */\n+    public @Nullable String tryGetNegotiatedProtocolVersion(@Nullable final String clientMinimumProtocolVersion,\n+                                                            @NonNull final String clientMaximumProtocolVersion) {\n+        final String methodName = \":tryGetNegotiatedProtocolVersion\";\n+\n+        final String key;\n+        try {\n+            key = getKey(clientMinimumProtocolVersion, clientMaximumProtocolVersion);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            Logger.error(TAG + methodName, \"Failed to retrieve key\", e);\n+            return null;\n+        }\n+\n+        return mFileManager.getString(key);\n+    }\n+\n+    /**\n+     * Store the given negotiated protocol version into the cache.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     * @param negotiatedProtocolVersion    the negotiated protocol version as returned from hello().\n+     */\n+    public void saveNegotiatedProtocolVersion(@Nullable final String clientMinimumProtocolVersion,\n+                                              @NonNull final String clientMaximumProtocolVersion,\n+                                              @NonNull final String negotiatedProtocolVersion) {\n+        final String methodName = \":saveNegotiatedProtocolVersion\";\n+\n+        final String key;\n+        try {\n+            key = getKey(clientMinimumProtocolVersion, clientMaximumProtocolVersion);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            Logger.error(TAG + methodName, \"Failed to retrieve key\", e);\n+            return;\n+        }\n+\n+        mFileManager.putString(key, negotiatedProtocolVersion);\n+    }\n+\n+    /**\n+     * Generates {@link SharedPreferencesFileManager}'s key.", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNjY1OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515736658", "bodyText": "this cache is actually in the calling app itself right? If yes, then do we even need to store the package name?", "author": "shahzaibj", "createdAt": "2020-11-02T04:38:58Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/HelloCache.java", "diffHunk": "@@ -0,0 +1,152 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+\n+package com.microsoft.identity.common.internal.cache;\n+\n+import android.content.Context;\n+import android.content.pm.PackageInfo;\n+import android.content.pm.PackageManager;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+\n+import com.microsoft.identity.common.internal.logging.Logger;\n+\n+/**\n+ * Persisted cache for the IPC hello() protocol.\n+ * Use client's protocol version and the targeted app's package name and app version as a key\n+ * to cache the negotiated protocol version.\n+ * <p>\n+ * This means a new hello() call will ONLY be triggered only when.\n+ * 1. IPC operation is invoked for the very first time.\n+ * 2. Client bumps up protocol version.\n+ * 3. The targeted app is updated, uninstalled, reinstalled.\n+ * <p>\n+ * NOTE: the downside of this is that if you're debugging protocol change on the targeted app side,\n+ * you'll either have to keep bumping the test app version or clear the cache.\n+ * I've provided clearCache() for this purpose.\n+ */\n+public class HelloCache {\n+    private static final String TAG = HelloCache.class.getSimpleName();\n+\n+    private static final String SHARED_PREFERENCE_NAME = \"com.microsoft.common.ipc.hello.cache\";\n+\n+    private final SharedPreferencesFileManager mFileManager;\n+    private final Context mContext;\n+    private final String mProtocolName;\n+    private final String mTargetAppPackageName;\n+\n+    /**\n+     * Default constructor.\n+     *\n+     * @param context              application context.\n+     * @param protocolName         name of the protocol that invokes hello().\n+     * @param targetAppPackageName package name of the app that this client will hello() with.\n+     */\n+    public HelloCache(@NonNull final Context context,\n+                      @NonNull final String protocolName,\n+                      @NonNull final String targetAppPackageName) {\n+        mFileManager = new SharedPreferencesFileManager(context, SHARED_PREFERENCE_NAME);\n+        mContext = context;\n+        mProtocolName = protocolName;\n+        mTargetAppPackageName = targetAppPackageName;\n+    }\n+\n+    /**\n+     * Gets the cached negotiated protocol version. Returns null if there is none.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     */\n+    public @Nullable String tryGetNegotiatedProtocolVersion(@Nullable final String clientMinimumProtocolVersion,\n+                                                            @NonNull final String clientMaximumProtocolVersion) {\n+        final String methodName = \":tryGetNegotiatedProtocolVersion\";\n+\n+        final String key;\n+        try {\n+            key = getKey(clientMinimumProtocolVersion, clientMaximumProtocolVersion);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            Logger.error(TAG + methodName, \"Failed to retrieve key\", e);\n+            return null;\n+        }\n+\n+        return mFileManager.getString(key);\n+    }\n+\n+    /**\n+     * Store the given negotiated protocol version into the cache.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     * @param negotiatedProtocolVersion    the negotiated protocol version as returned from hello().\n+     */\n+    public void saveNegotiatedProtocolVersion(@Nullable final String clientMinimumProtocolVersion,\n+                                              @NonNull final String clientMaximumProtocolVersion,\n+                                              @NonNull final String negotiatedProtocolVersion) {\n+        final String methodName = \":saveNegotiatedProtocolVersion\";\n+\n+        final String key;\n+        try {\n+            key = getKey(clientMinimumProtocolVersion, clientMaximumProtocolVersion);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            Logger.error(TAG + methodName, \"Failed to retrieve key\", e);\n+            return;\n+        }\n+\n+        mFileManager.putString(key, negotiatedProtocolVersion);\n+    }\n+\n+    /**\n+     * Generates {@link SharedPreferencesFileManager}'s key.\n+     *\n+     * @param clientMinimumProtocolVersion minimum version of the protocol that the client supports.\n+     * @param clientMaximumProtocolVersion maximum version of the protocol that to be advertised by the client.\n+     */\n+    private @NonNull String getKey(@Nullable final String clientMinimumProtocolVersion,\n+                                   @NonNull final String clientMaximumProtocolVersion)\n+            throws PackageManager.NameNotFoundException {\n+        return mProtocolName +\n+                \"[\" + clientMinimumProtocolVersion + \",\" + clientMaximumProtocolVersion + \"]:\"\n+                + mTargetAppPackageName + \"[\" + getVersionCode() + \"]\";", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNjkyNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515736926", "bodyText": "package name of the broker.", "author": "rpdome", "createdAt": "2020-11-02T04:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNjY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNzYxNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515737616", "bodyText": "Got it", "author": "shahzaibj", "createdAt": "2020-11-02T04:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNjY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNzMzMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515737332", "bodyText": "and do we actually want a RuntimeException in that case?", "author": "shahzaibj", "createdAt": "2020-11-02T04:42:13Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -153,16 +170,41 @@ public BrokerMsalController(final Context applicationContext) {\n      * @param parameters a {@link CommandParameters}\n      * @return a protocol version negotiated by MSAL and Broker.\n      */\n-    private @NonNull String hello(@NonNull IIpcStrategy strategy,\n-                                  @NonNull final CommandParameters parameters) throws BaseException {\n+    @VisibleForTesting\n+    public @NonNull String hello(@NonNull IIpcStrategy strategy,\n+                                 @NonNull final CommandParameters parameters) throws BaseException {\n+\n+        final Bundle bundle = mRequestAdapter.getRequestBundleForHello(parameters);\n+        final String minimumProtocolVersion = bundle.getString(CLIENT_CONFIGURED_MINIMUM_BP_VERSION_KEY);\n+        final String maximumProtocolVersion = bundle.getString(CLIENT_ADVERTISED_MAXIMUM_BP_VERSION_KEY);\n+\n+        // This should be part of the bundle.\n+        // If we're hitting this, it means that the hello protocol changed. see getRequestBundleForHello().", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNzQzNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515737435", "bodyText": "can we just catch, log, and return anything that is BaseException?", "author": "shahzaibj", "createdAt": "2020-11-02T04:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNzMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNzUzOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515737538", "bodyText": "we probably don't need this method....whatever it is doing I think can be done directly in the test", "author": "shahzaibj", "createdAt": "2020-11-02T04:43:27Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -103,15 +108,27 @@\n     private final Context mApplicationContext;\n     private final String mActiveBrokerPackageName;\n     private final BrokerOperationExecutor mBrokerOperationExecutor;\n+    private final HelloCache mHelloCache;\n \n     public BrokerMsalController(final Context applicationContext) {\n         mApplicationContext = applicationContext;\n-        mActiveBrokerPackageName = new BrokerValidator(mApplicationContext).getCurrentActiveBrokerPackageName();\n+        mActiveBrokerPackageName = getActiveBrokerPackageName();\n         if (TextUtils.isEmpty(mActiveBrokerPackageName)) {\n             throw new IllegalStateException(\"Active Broker not found. This class should not be initialized.\");\n         }\n \n         mBrokerOperationExecutor = new BrokerOperationExecutor(getIpcStrategies(mApplicationContext, mActiveBrokerPackageName));\n+        mHelloCache = getHelloCache();\n+    }\n+\n+    @VisibleForTesting\n+    public HelloCache getHelloCache() {", "originalCommit": "7de082f9113e0c86fee41e06432603094a278678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgwNTkzNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1108#discussion_r515805935", "bodyText": "This is for testing if the cache is properly wired.. we need this to inject the mock Token cache into BrokerMsalController.", "author": "rpdome", "createdAt": "2020-11-02T08:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczNzUzOA=="}], "type": "inlineReview"}, {"oid": "b3541a8dab3e745ff147b6a82b05e6e631166a57", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b3541a8dab3e745ff147b6a82b05e6e631166a57", "message": "Resolve comments", "committedDate": "2020-11-02T08:29:00Z", "type": "forcePushed"}, {"oid": "d4372f6647816c9317c3d5da43cfeed4485215bf", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d4372f6647816c9317c3d5da43cfeed4485215bf", "message": "Introduce a cache for Hello() protocol", "committedDate": "2020-11-02T08:58:49Z", "type": "commit"}, {"oid": "d4372f6647816c9317c3d5da43cfeed4485215bf", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d4372f6647816c9317c3d5da43cfeed4485215bf", "message": "Introduce a cache for Hello() protocol", "committedDate": "2020-11-02T08:58:49Z", "type": "forcePushed"}]}