{"pr_number": 763, "pr_title": "Introduce AuthorizationFragment", "pr_createdAt": "2020-01-01T13:16:50Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/763", "timeline": [{"oid": "7acb14cc9b8f719066c5be867130627f486a2d9c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7acb14cc9b8f719066c5be867130627f486a2d9c", "message": "Introduce AuthorizationFragment", "committedDate": "2020-01-01T12:54:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwNDEwMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/763#discussion_r362604103", "bodyText": "FragmentActivity seems to be added in API 22, however the documentation says it's in AndroidX jetpack, did we test this on lower level devices (SDK 21 or below)?", "author": "kreedula", "createdAt": "2020-01-02T19:45:18Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationActivity.java", "diffHunk": "@@ -1,473 +1,35 @@\n package com.microsoft.identity.common.internal.providers.oauth2;\n \n-import android.annotation.SuppressLint;\n-import android.app.Activity;\n-import android.content.BroadcastReceiver;\n-import android.content.Context;\n-import android.content.Intent;\n-import android.content.IntentFilter;\n-import android.net.Uri;\n import android.os.Bundle;\n-import android.text.TextUtils;\n-import android.view.MotionEvent;\n-import android.view.View;\n-import android.webkit.WebSettings;\n-import android.webkit.WebView;\n \n-import com.microsoft.identity.common.R;\n-import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n-import com.microsoft.identity.common.adal.internal.util.StringExtensions;\n-import com.microsoft.identity.common.exception.ClientException;\n-import com.microsoft.identity.common.exception.ErrorStrings;\n-import com.microsoft.identity.common.internal.controllers.CommandDispatcher;\n-import com.microsoft.identity.common.internal.logging.DiagnosticContext;\n-import com.microsoft.identity.common.internal.logging.Logger;\n-import com.microsoft.identity.common.internal.telemetry.Telemetry;\n-import com.microsoft.identity.common.internal.telemetry.events.UiEndEvent;\n-import com.microsoft.identity.common.internal.telemetry.events.UiStartEvent;\n-import com.microsoft.identity.common.internal.ui.AuthorizationAgent;\n-import com.microsoft.identity.common.internal.ui.webview.AzureActiveDirectoryWebViewClient;\n-import com.microsoft.identity.common.internal.ui.webview.WebViewUtil;\n-import com.microsoft.identity.common.internal.ui.webview.challengehandlers.IAuthorizationCompletionCallback;\n-import com.microsoft.identity.common.internal.util.StringUtil;\n-\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.VisibleForTesting;\n-\n-import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.DEVICE_REGISTRATION_REDIRECT_URI_HOSTNAME;\n-import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.INSTALL_URL_KEY;\n-import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.REDIRECT_PREFIX;\n-import static com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResultFactory.ERROR;\n-import static com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResultFactory.ERROR_DESCRIPTION;\n-import static com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResultFactory.ERROR_SUBCODE;\n-\n-public final class AuthorizationActivity extends Activity {\n-    @VisibleForTesting\n-    static final String KEY_AUTH_INTENT = \"authIntent\";\n-\n-    @VisibleForTesting\n-    static final String KEY_BROWSER_FLOW_STARTED = \"browserFlowStarted\";\n-\n-    @VisibleForTesting\n-    static final String KEY_PKEYAUTH_STATUS = \"pkeyAuthStatus\";\n-\n-    @VisibleForTesting\n-    static final String KEY_AUTH_REQUEST_URL = \"authRequestUrl\";\n-\n-    @VisibleForTesting\n-    static final String KEY_AUTH_REDIRECT_URI = \"authRedirectUri\";\n-\n-    @VisibleForTesting\n-    static final String KEY_AUTH_AUTHORIZATION_AGENT = \"authorizationAgent\";\n-\n-    @VisibleForTesting\n-    static final String KEY_REQUEST_HEADERS = \"requestHeaders\";\n-\n-\n-    public static final String CANCEL_INTERACTIVE_REQUEST_ACTION = \"cancel_interactive_request_action\";\n-\n-    private static final String TAG = AuthorizationActivity.class.getSimpleName();\n-\n-    private boolean mBrowserFlowStarted = false;\n-\n-    private WebView mWebView;\n-\n-    private Intent mAuthIntent;\n-\n-    private boolean mPkeyAuthStatus = false; //NOPMD //TODO Will finish the implementation in Phase 1 (broker is ready).\n-\n-    private String mAuthorizationRequestUrl;\n-\n-    private String mRedirectUri;\n-\n-    private HashMap<String, String> mRequestHeaders;\n-\n-    private AuthorizationAgent mAuthorizationAgent;\n-\n-    private boolean mAuthResultSent = false;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentTransaction;\n \n-    private BroadcastReceiver mCancelRequestReceiver = new BroadcastReceiver() {\n-        @Override\n-        public void onReceive(Context context, Intent intent) {\n-            Logger.info(TAG, \"Received Authorization flow cancel request from SDK\");\n-            Telemetry.emit(new UiEndEvent().isUserCancelled());\n-            sendResult(AuthenticationConstants.UIResponse.BROWSER_CODE_SDK_CANCEL, new Intent());\n-            finish();\n-        }\n-    };\n-\n-    public static Intent createStartIntent(final Context context,\n-                                           final Intent authIntent,\n-                                           final String requestUrl,\n-                                           final String redirectUri,\n-                                           final HashMap<String, String> requestHeaders,\n-                                           final AuthorizationAgent authorizationAgent) {\n-        final Intent intent = new Intent(context, AuthorizationActivity.class);\n-        intent.putExtra(KEY_AUTH_INTENT, authIntent);\n-        intent.putExtra(KEY_AUTH_REQUEST_URL, requestUrl);\n-        intent.putExtra(KEY_AUTH_REDIRECT_URI, redirectUri);\n-        intent.putExtra(KEY_REQUEST_HEADERS, requestHeaders);\n-        intent.putExtra(KEY_AUTH_AUTHORIZATION_AGENT, authorizationAgent);\n-        intent.putExtra(DiagnosticContext.CORRELATION_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n-        return intent;\n-    }\n-\n-    public static Intent createResultIntent(@NonNull final String url) {\n-        Intent resultIntent = new Intent();\n-        final Map<String, String> parameters = StringExtensions.getUrlParameters(url);\n-        if (!StringExtensions.isNullOrBlank(parameters.get(ERROR))) {\n-            Logger.info(TAG, \"Sending intent to cancel authentication activity\");\n-\n-            resultIntent.putExtra(AuthenticationConstants.Browser.RESPONSE_ERROR_CODE, parameters.get(ERROR));\n-            resultIntent.putExtra(AuthenticationConstants.Browser.RESPONSE_ERROR_SUBCODE, parameters.get(ERROR_SUBCODE));\n-\n-            // Fallback logic on error_subcode when error_description is not provided.\n-            // When error is \"login_required\", redirect url has error_description.\n-            // When error is  \"access_denied\", redirect url has  error_subcode.\n-            if (!StringUtil.isEmpty(parameters.get(ERROR_DESCRIPTION))) {\n-                resultIntent.putExtra(AuthenticationConstants.Browser.RESPONSE_ERROR_MESSAGE, parameters.get(ERROR_DESCRIPTION));\n-            } else {\n-                resultIntent.putExtra(AuthenticationConstants.Browser.RESPONSE_ERROR_MESSAGE, parameters.get(ERROR_SUBCODE));\n-            }\n-        } else {\n-            Logger.info(TAG, \"It is pointing to redirect. Final url can be processed to get the code or error.\");\n-            resultIntent.putExtra(AuthorizationStrategy.AUTHORIZATION_FINAL_URL, url);\n-        }\n-\n-        return resultIntent;\n-    }\n-\n-    /**\n-     * Creates an intent to handle the completion of an authorization flow with browser. This restores\n-     * the original AuthorizationActivity that was created at the start of the flow.\n-     *\n-     * @param context     the package context for the app.\n-     * @param responseUri the response URI, which carries the parameters describing the response.\n-     */\n-    public static Intent createCustomTabResponseIntent(final Context context,\n-                                                       final String responseUri) {\n-        final Intent intent = new Intent(context, AuthorizationActivity.class);\n-        intent.putExtra(AuthorizationStrategy.CUSTOM_TAB_REDIRECT, responseUri);\n-        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\n-        return intent;\n-    }\n-\n-    private void extractState(final Bundle state) {\n-        if (state == null) {\n-            Logger.warn(TAG, \"No stored state. Unable to handle response\");\n-            finish();\n-            return;\n-        }\n+import com.microsoft.identity.common.R;\n \n-        setDiagnosticContextForNewThread(state.getString(DiagnosticContext.CORRELATION_ID));\n-        mAuthIntent = state.getParcelable(KEY_AUTH_INTENT);\n-        mBrowserFlowStarted = state.getBoolean(KEY_BROWSER_FLOW_STARTED, false);\n-        mPkeyAuthStatus = state.getBoolean(KEY_PKEYAUTH_STATUS, false);\n-        mAuthorizationRequestUrl = state.getString(KEY_AUTH_REQUEST_URL);\n-        mRedirectUri = state.getString(KEY_AUTH_REDIRECT_URI);\n-        mRequestHeaders = getRequestHeaders(state);\n-        mAuthorizationAgent = (AuthorizationAgent) state.getSerializable(KEY_AUTH_AUTHORIZATION_AGENT);\n-    }\n+public final class AuthorizationActivity extends FragmentActivity {", "originalCommit": "7acb14cc9b8f719066c5be867130627f486a2d9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYxODQ2Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/763#discussion_r362618463", "bodyText": "Verified with emulator SDK 16/21.", "author": "rpdome", "createdAt": "2020-01-02T20:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwNDEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwODA5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/763#discussion_r362608097", "bodyText": "This method is used both by EmbeddedWebViewStrategy and BrowserStrategy. Shouldn't this be only for Webview ? i.e. in case of browser, what does adding a fragment do ?", "author": "kreedula", "createdAt": "2020-01-02T19:56:30Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/AuthorizationStrategy.java", "diffHunk": "@@ -50,6 +58,46 @@\n \n     public static final String REQUEST_CODE = \"com.microsoft.identity.client.request.code\";\n \n+    private WeakReference<Context> mReferencedApplicationContext;\n+    private WeakReference<Activity> mReferencedActivity;\n+    private WeakReference<Fragment> mReferencedFragment;\n+\n+    /**\n+     * Constructor of AuthorizationStrategy.\n+     */\n+    public AuthorizationStrategy(@NonNull Context applicationContext,\n+                                 @NonNull Activity activity,\n+                                 @Nullable Fragment fragment) {\n+        mReferencedApplicationContext = new WeakReference<>(applicationContext);\n+        mReferencedActivity = new WeakReference<>(activity);\n+        mReferencedFragment = new WeakReference<>(fragment);\n+    }\n+\n+    protected Context getApplicationContext() {\n+        return mReferencedApplicationContext.get();\n+    }\n+\n+    /**\n+     * If fragment is provided, add AuthorizationFragment on top of that fragment.\n+     * Otherwise, launch AuthorizationActivity.\n+     */\n+    protected void launchIntent(@NonNull Intent intent) {", "originalCommit": "7acb14cc9b8f719066c5be867130627f486a2d9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYxMjIxNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/763#discussion_r362612214", "bodyText": "AuthorizationFragment will be launched, which in turn would launch CustomTabsActivity - inside onResume().\nCustomTabsActivity will be popped up and take the whole screen. It won't be displayed in-line in the specified fragment area.\nI was considering extracting Browser logic out of AuthorizationFragment, but decided not to do so as there are lifecycle-dependent code that are shared by both Browser and WebView flows.", "author": "rpdome", "createdAt": "2020-01-02T20:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwODA5Nw=="}], "type": "inlineReview"}, {"oid": "10524b5afba3ed82c5485e1cce460b65f21c2de4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/10524b5afba3ed82c5485e1cce460b65f21c2de4", "message": "Add white background to fragment", "committedDate": "2020-01-02T20:30:03Z", "type": "commit"}, {"oid": "d9ed822da0456cd140062d7c17d50cac0e4012c3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d9ed822da0456cd140062d7c17d50cac0e4012c3", "message": "Merge branch 'dev' into rapong/fragmentSupport", "committedDate": "2020-01-02T23:01:04Z", "type": "commit"}]}