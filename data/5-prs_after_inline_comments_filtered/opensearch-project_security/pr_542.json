{"pr_number": 542, "pr_title": "Use Jackson to serialize and de-serialize audit configuration", "pr_createdAt": "2020-07-01T19:13:44Z", "pr_url": "https://github.com/opensearch-project/security/pull/542", "timeline": [{"oid": "9b1ec1db18ee312c92a3c33e7d7206039a5a9232", "url": "https://github.com/opensearch-project/security/commit/9b1ec1db18ee312c92a3c33e7d7206039a5a9232", "message": "Use Jackson to serialize and de-serialize audit configuration", "committedDate": "2020-07-01T19:10:24Z", "type": "commit"}, {"oid": "cdf3acc2b919608fd493f5847110ff8ebbb7a26d", "url": "https://github.com/opensearch-project/security/commit/cdf3acc2b919608fd493f5847110ff8ebbb7a26d", "message": "Code review (#192)", "committedDate": "2020-07-05T21:03:51Z", "type": "commit"}, {"oid": "5451b4eec9ed47e24245377b11c788c0d78f241d", "url": "https://github.com/opensearch-project/security/commit/5451b4eec9ed47e24245377b11c788c0d78f241d", "message": "Code review (#193)", "committedDate": "2020-07-06T23:15:45Z", "type": "commit"}, {"oid": "62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "url": "https://github.com/opensearch-project/security/commit/62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "message": "Merge remote-tracking branch 'upstream/master' into jackson", "committedDate": "2020-07-06T23:29:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NzU3Ng==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450577576", "bodyText": "nit: can align imports with same parents", "author": "palashhedau", "createdAt": "2020-07-07T02:29:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/DefaultObjectMapper.java", "diffHunk": "@@ -34,7 +34,9 @@\n import java.security.AccessController;\n import java.security.PrivilegedActionException;\n import java.security.PrivilegedExceptionAction;\n+import java.util.Map;\n \n+import com.fasterxml.jackson.databind.InjectableValues;", "originalCommit": "62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3ODc3MA==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450578770", "bodyText": "can we directly cast as boolean?", "author": "palashhedau", "createdAt": "2020-07-07T02:34:35Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/DefaultObjectMapper.java", "diffHunk": "@@ -61,6 +63,22 @@\n         YAML_MAPPER.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n     }\n \n+    public static void inject(final InjectableValues.Std injectableValues) {\n+        objectMapper.setInjectableValues(injectableValues);\n+        YAML_MAPPER.setInjectableValues(injectableValues);\n+        defaulOmittingObjectMapper.setInjectableValues(injectableValues);\n+    }\n+\n+    public static boolean getOrDefault(Map<String, Object> properties, String key, boolean defaultValue) {\n+        Boolean value = (Boolean)properties.get(key);", "originalCommit": "62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4NjE2OA==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450586168", "bodyText": "No, it will cause NullPointerException if the property is missing in the properties. Should properties always contain key property, it would be possible to cast directly to boolean (unboxing).", "author": "vrozov", "createdAt": "2020-07-07T03:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3ODc3MA=="}], "type": "inlineReview"}, {"oid": "d9fc24a085be99e85ef45ab8711c9c909a74c380", "url": "https://github.com/opensearch-project/security/commit/d9fc24a085be99e85ef45ab8711c9c909a74c380", "message": "code review", "committedDate": "2020-07-07T02:40:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3MzY2NQ==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450573665", "bodyText": "don't think you need @JsonProperty here since the variable name is compliance", "author": "debjanibnrj", "createdAt": "2020-07-07T02:14:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -1,45 +1,130 @@\n package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n \n import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.compliance.ComplianceConfig;\n import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n import org.apache.logging.log4j.Logger;\n import org.elasticsearch.common.settings.Settings;\n \n import java.util.Collections;\n import java.util.EnumSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n+import static com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper.getOrDefault;\n+\n /**\n  * Class represents configuration for audit logging.\n+ * Expected class structure\n+ * {\n+ *   \"enabled\": true,\n+ *   \"audit\" : {\n+ *     \"enable_rest\" : true,\n+ *     \"disabled_rest_categories\" : [\n+ *       \"GRANTED_PRIVILEGES\",\n+ *       \"SSL_EXCEPTION\"\n+ *     ],\n+ *     \"enable_transport\" : true,\n+ *     \"disabled_transport_categories\" : [\n+ *       \"GRANTED_PRIVILEGES\",\n+ *       \"AUTHENTICATED\"\n+ *     ],\n+ *     \"resolve_bulk_requests\" : false,\n+ *     \"log_request_body\" : true,\n+ *     \"resolve_indices\" : true,\n+ *     \"exclude_sensitive_headers\" : true,\n+ *     \"ignore_users\" : [\n+ *       \"kibanaserver\"\n+ *     ],\n+ *     \"ignore_requests\" : [ ]\n+ *   },\n+ *   \"compliance\" : {\n+ *     \"enabled\": true,\n+ *     \"internal_config\" : true,\n+ *     \"external_config\" : true,\n+ *     \"read_metadata_only\" : true,\n+ *     \"read_watched_fields\" : { },\n+ *     \"read_ignore_users\" : [ ],\n+ *     \"write_metadata_only\" : true,\n+ *     \"write_log_diffs\" : false,\n+ *     \"write_watched_indices\" : [ ],\n+ *     \"write_ignore_users\" : [ ]\n+ *   }\n+ * }\n  */\n public class AuditConfig {\n \n     public static final List<String> DEFAULT_IGNORED_USERS = Collections.singletonList(\"kibanaserver\");\n \n-    private AuditConfig() { }\n+    private AuditConfig() {\n+        this(true, null, null);\n+    }\n+\n+    @JsonProperty(\"enabled\")\n+    private final boolean auditLogEnabled;\n+    @JsonProperty(\"audit\")\n+    private final Filter filter;\n+    @JsonProperty(\"compliance\")", "originalCommit": "62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4NTIzMw==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450585233", "bodyText": "By default only public properties are auto detected by Jackson (if I remember correctly).", "author": "vrozov", "createdAt": "2020-07-07T03:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3MzY2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5NjY1OQ==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450596659", "bodyText": "It seems to work because the property/getter with visibility on and variable name matches.", "author": "sujithvm", "createdAt": "2020-07-07T03:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3MzY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTkxNg==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450575916", "bodyText": "Think @vrozov had recently modified code for this here - https://github.com/opendistro-for-elasticsearch/security/pull/543/files#diff-c7afdd983cdd9cca05fa869112ff95b9R76-R77", "author": "debjanibnrj", "createdAt": "2020-07-07T02:23:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -55,12 +140,42 @@ private Filter(final boolean isRestApiAuditEnabled,\n             this.logRequestBody = logRequestBody;\n             this.resolveIndices = resolveIndices;\n             this.excludeSensitiveHeaders = excludeSensitiveHeaders;\n+            this.ignoredAuditUsers = ignoredAuditUsers;\n             this.ignoredAuditUsersMatcher = WildcardMatcher.from(ignoredAuditUsers);\n+            this.ignoredAuditRequests = ignoredAuditRequests;\n             this.ignoredAuditRequestsMatcher = WildcardMatcher.from(ignoredAuditRequests);\n             this.disabledRestCategories = disabledRestCategories;\n             this.disabledTransportCategories = disabledTransportCategories;\n         }\n \n+        @JsonCreator\n+        @VisibleForTesting\n+        static Filter from(Map<String, Object> properties) {\n+            final boolean isRestApiAuditEnabled = getOrDefault(properties,\"enable_rest\", true);\n+            final boolean isTransportAuditEnabled = getOrDefault(properties,\"enable_transport\", true);\n+            final boolean resolveBulkRequests = getOrDefault(properties, \"resolve_bulk_requests\", false);\n+            final boolean logRequestBody = getOrDefault(properties, \"log_request_body\", true);\n+            final boolean resolveIndices = getOrDefault(properties, \"resolve_indices\", true);\n+            final boolean excludeSensitiveHeaders = getOrDefault(properties, \"exclude_sensitive_headers\", true);\n+            final EnumSet<AuditCategory> disabledRestCategories = AuditCategory.parse(getOrDefault(properties,\"disabled_rest_categories\", ConfigConstants.OPENDISTRO_SECURITY_AUDIT_DISABLED_CATEGORIES_DEFAULT));", "originalCommit": "62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MTg0MA==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450581840", "bodyText": "It is the same. Look below.\nThis function is used by jackson and function at the bottom for elasticsearch yml settings", "author": "sujithvm", "createdAt": "2020-07-07T02:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3Njg4OQ==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450576889", "bodyText": "Shouldn't this be @JsonProperty(value=\"external_config\")? Any reason why it is not mentioned here and added here - https://github.com/opendistro-for-elasticsearch/security/pull/542/files#diff-0e04f575b10578faf6c21e321ea023b3R293 ?\nSame for following lines - https://github.com/opendistro-for-elasticsearch/security/pull/542/files#diff-0e04f575b10578faf6c21e321ea023b3R80-R82?", "author": "debjanibnrj", "createdAt": "2020-07-07T02:26:40Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceConfig.java", "diffHunk": "@@ -53,25 +57,40 @@\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n \n+import static com.amazon.opendistroforelasticsearch.security.DefaultObjectMapper.getOrDefault;\n+\n /**\n  * This class represents all configurations for compliance.\n  * DLS/FLS uses this configuration for filtering and anonymizing fields.\n  * Audit Logger uses this configuration to post compliance audit logs.\n  */\n+@JsonAutoDetect(getterVisibility = JsonAutoDetect.Visibility.NONE)\n public class ComplianceConfig {\n \n     private static final Logger log = LogManager.getLogger(ComplianceConfig.class);\n+    public static final ComplianceConfig DEFAULT = ComplianceConfig.from(Settings.EMPTY);\n     private static final int CACHE_SIZE = 1000;\n     private static final String INTERNAL_ELASTICSEARCH = \"internal_elasticsearch\";\n \n     private final boolean logExternalConfig;", "originalCommit": "62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4NTAwMw==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450585003", "bodyText": "Because other properties are used internally within the class only. They dont have associated getter.\nJackon prefers getter binding and if not available uses property binding.\nEdit: Read answer below", "author": "sujithvm", "createdAt": "2020-07-07T03:00:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3Njg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4ODI5OA==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450588298", "bodyText": "To be more exact, it is not Jackson that prefers getter. By annotating getters, we tell Jackson to use getters during serialization and use @JsonCreator during de-serialization. For those properties that don't have getters, there is no other options.", "author": "vrozov", "createdAt": "2020-07-07T03:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3Njg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3OTExNg==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450579116", "bodyText": "what is the difference between this and https://github.com/opendistro-for-elasticsearch/security/pull/542/files#diff-0e04f575b10578faf6c21e321ea023b3R255-R262? Why are we handling them differently?", "author": "debjanibnrj", "createdAt": "2020-07-07T02:35:56Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/compliance/ComplianceConfig.java", "diffHunk": "@@ -105,17 +126,19 @@ private ComplianceConfig(\n         this.ignoredComplianceUsersForReadMatcher = WildcardMatcher.from(ignoredComplianceUsersForRead);\n         this.ignoredComplianceUsersForWriteMatcher = WildcardMatcher.from(ignoredComplianceUsersForWrite);\n         this.opendistrosecurityIndex = opendistrosecurityIndex;\n-\n-        //opendistro_security.compliance.pii_fields:\n-        //  - indexpattern,fieldpattern,fieldpattern,....\n-        this.readEnabledFields = watchedReadFields.stream()\n-                .map(watchedReadField -> watchedReadField.split(\",\"))\n-                .filter(split -> split.length != 0 && !Strings.isNullOrEmpty(split[0]))\n-                .collect(ImmutableMap.toImmutableMap(\n-                        split -> WildcardMatcher.from(split[0]),\n-                        split -> split.length == 1 ?\n-                                Collections.singleton(\"*\") : Arrays.stream(split).skip(1).collect(ImmutableSet.toImmutableSet())\n-                ));\n+        this.watchedReadFields = watchedReadFields;\n+        this.ignoredComplianceUsersForRead = ignoredComplianceUsersForRead;\n+        this.watchedWriteIndicesPatterns = watchedWriteIndicesPatterns;\n+        this.ignoredComplianceUsersForWrite = ignoredComplianceUsersForWrite;\n+\n+        this.readEnabledFields = watchedReadFields.entrySet().stream()", "originalCommit": "62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MzE1MA==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450583150", "bodyText": "The other place converts a comma separated list provided from elasticsearch settings yml to Map.\nEg:\ntwitter,id,message is converted to\n{ \n   \"twitter*\": [\"id\", \"message\"]\n}\n\nAnd this converts map to WildcardMatcher patterns.\n{\n   <twitter wilcard pattern>: [\"id\", \"message\"]\n}", "author": "sujithvm", "createdAt": "2020-07-07T02:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3OTExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MDI0Mg==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450580242", "bodyText": "I remember using the minidev JSONObject object to create JSON objects for testing in unit tests here - https://github.com/opendistro-for-elasticsearch/security/blob/master/src/test/java/com/amazon/opendistroforelasticsearch/security/ssl/OpenDistroSecuritySSLReloadCertsActionTests.java#L67-L70.\nIt helped make the tests little more readable for me. Just a suggestion in case your dealing with a lot of JSON object creation via testing", "author": "debjanibnrj", "createdAt": "2020-07-07T02:40:37Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigSerializeTest.java", "diffHunk": "@@ -0,0 +1,247 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.compliance.ComplianceConfig;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.InjectableValues;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.AUTHENTICATED;\n+import static com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory.GRANTED_PRIVILEGES;\n+\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+\n+public class AuditConfigSerializeTest {\n+\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n+    private final WildcardMatcher DEFAULT_IGNORED_USER = WildcardMatcher.from(AuditConfig.DEFAULT_IGNORED_USERS);\n+\n+    @Before\n+    public void setUp() {\n+        InjectableValues.Std iv = new InjectableValues.Std();\n+        iv.addValue(Settings.class, Settings.EMPTY);\n+        objectMapper.setInjectableValues(iv);\n+    }\n+\n+    @Test\n+    public void testDefaultSerialize() throws JsonProcessingException {\n+        // arrange\n+        final AuditConfig audit = new AuditConfig(true, null, null);\n+        // act\n+        final String json = objectMapper.writeValueAsString(audit);\n+        assertEquals(\"{\" +", "originalCommit": "62b4cc36f30f529d4f8e59b8ad0c480a6979f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5NTkyOQ==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450595929", "bodyText": "@debjanibnrj Looks like minidev is some internal dependency. I used XContentBuilder and Jackson to assert all jsons and also removed the index field making it cleaner.", "author": "sujithvm", "createdAt": "2020-07-07T03:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MDI0Mg=="}], "type": "inlineReview"}, {"oid": "ff585f03cada40f18badf47e3e088febbef2f7e4", "url": "https://github.com/opensearch-project/security/commit/ff585f03cada40f18badf47e3e088febbef2f7e4", "message": "code review", "committedDate": "2020-07-07T03:46:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMTU0Nw==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450601547", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @JsonProperty(value = \"ignore_users\")\n          \n          \n            \n                    @JsonProperty(\"ignore_users\")", "author": "vrozov", "createdAt": "2020-07-07T04:16:09Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfig.java", "diffHunk": "@@ -114,9 +113,9 @@ public static AuditConfig from(final Settings settings) {\n         private final boolean logRequestBody;\n         private final boolean resolveIndices;\n         private final boolean excludeSensitiveHeaders;\n-        @JsonProperty(value = \"ignore_users\", index = 8)\n+        @JsonProperty(value = \"ignore_users\")", "originalCommit": "ff585f03cada40f18badf47e3e088febbef2f7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4cf41c46fab350454a6bb82e6f597a49cbe1517e", "url": "https://github.com/opensearch-project/security/commit/4cf41c46fab350454a6bb82e6f597a49cbe1517e", "message": "code review", "committedDate": "2020-07-07T04:18:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDA2Ng==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450610066", "bodyText": "Any reason to use XContentBuilder instead of ObjectMapper?", "author": "vrozov", "createdAt": "2020-07-07T04:54:35Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/auditlog/config/AuditConfigSerializeTest.java", "diffHunk": "@@ -0,0 +1,334 @@\n+package com.amazon.opendistroforelasticsearch.security.auditlog.config;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.impl.AuditCategory;\n+import com.amazon.opendistroforelasticsearch.security.compliance.ComplianceConfig;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.InjectableValues;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;", "originalCommit": "4cf41c46fab350454a6bb82e6f597a49cbe1517e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMTIwOQ==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450611209", "bodyText": "It was cleaner to use XContentBuilder to build a json object compared to ObjectMapper. With object mapper, had to make separate child nodes and add them to main json object nodes whereas xcontentbuilder has a more fluid API.\nMain intent was clarity in creating json object for test and there seems to be many ways to do it.", "author": "sujithvm", "createdAt": "2020-07-07T04:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTIyNA==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r450615224", "bodyText": "Object built with XContentBuilder needs to be converted to String and parsed using ObjectMapper anyway. By using ObjectMapper we can bypass that step.", "author": "vrozov", "createdAt": "2020-07-07T05:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMzA3OQ==", "url": "https://github.com/opensearch-project/security/pull/542#discussion_r474233079", "bodyText": "Created issue #656", "author": "sujithvm", "createdAt": "2020-08-20T19:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDA2Ng=="}], "type": "inlineReview"}]}