{"pr_number": 690, "pr_title": "Restrict configured indices access to adminDn only.", "pr_createdAt": "2020-09-03T18:15:06Z", "pr_url": "https://github.com/opensearch-project/security/pull/690", "timeline": [{"oid": "06ec5649ed4bb235b6ec778a6ee4788aa6c3e9e2", "url": "https://github.com/opensearch-project/security/commit/06ec5649ed4bb235b6ec778a6ee4788aa6c3e9e2", "message": "Restrict configured indices access to adminDn. Issue# 666", "committedDate": "2020-09-03T18:12:29Z", "type": "commit"}, {"oid": "218cf6ba88d399237c96240f2189eaf60864d01a", "url": "https://github.com/opensearch-project/security/commit/218cf6ba88d399237c96240f2189eaf60864d01a", "message": "allow request without user from plugin", "committedDate": "2020-09-04T15:44:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MjM5Mw==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r487252393", "bodyText": "what about read?  indices:data/read*\nCan't we deny all using indices:data/* and indices:admin/*  and cluster:admin/snapshot/restore* ?\nSystem indices should not be accessed directly for any actions for nonAdminDN  (Super admin).", "author": "hardik-k-shah", "createdAt": "2020-09-11T19:39:57Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/OpenDistroSystemIndexAccessEvaluator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.privileges;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.resolver.IndexResolverReplacer;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.RealtimeRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Blocks requests for below actions and configured index for all non adminDNs.\n+ */\n+public class OpenDistroSystemIndexAccessEvaluator {\n+\n+    private final Logger log = LogManager.getLogger(this.getClass());\n+\n+    private final AuditLog auditLog;\n+    private final WildcardMatcher indexMatcher;\n+    private final Boolean systemIndexEnabled;\n+    private final WildcardMatcher deniedActionMatcher;\n+\n+\n+    public OpenDistroSystemIndexAccessEvaluator(final Settings settings, AuditLog auditLog) {\n+        this.indexMatcher = WildcardMatcher.from(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_KEY, ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_DEFAULT));\n+        this.systemIndexEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_ENABLED_KEY, ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_ENABLED_DEFAULT);\n+        this.auditLog = auditLog;\n+\n+        final List<String> indexDeniedActionPatterns = new ArrayList<String>();\n+        indexDeniedActionPatterns.add(\"indices:data/write*\");", "originalCommit": "218cf6ba88d399237c96240f2189eaf60864d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4ODkzNQ==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r488288935", "bodyText": "Followed below 3 links\nhttps://github.com/opendistro-for-elasticsearch/security/pull/126#discussion_r320539005\nhttps://github.com/opendistro-for-elasticsearch/security/pull/126#discussion_r320539568\nhttps://github.com/opendistro-for-elasticsearch/security/blob/d62ac5334609ea92b913caa5e73917efb8b29043/src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/OpenDistroSecurityIndexAccessEvaluator.java#L71-L82\nOpenDistroSecurityIndexSearcherWrapper blocks indices:data/write*. indices:data/read* is blocked here in OpenDistroSystemIndexAccessEvaluator.\nOn indices:admin/*, I tried to make this behavior is same as security index. (OpenDistroSecurityIndexAccessEvaluator).", "author": "skkosuri-amzn", "createdAt": "2020-09-14T23:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MjM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2ODMxNw==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r491768317", "bodyText": "Had a offline discussion with @hardik-k-shah and we decided to merge class logic into OpenDistroSecurityIndexAccessEvaluator. And remove OpenDistroSystemIndexAccessEvaluator class completely.", "author": "skkosuri-amzn", "createdAt": "2020-09-21T02:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MjM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1NDkxNA==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r487254914", "bodyText": "Can you cover this in UT?", "author": "hardik-k-shah", "createdAt": "2020-09-11T19:45:21Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/OpenDistroSystemIndexAccessEvaluator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.privileges;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.resolver.IndexResolverReplacer;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.RealtimeRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Blocks requests for below actions and configured index for all non adminDNs.\n+ */\n+public class OpenDistroSystemIndexAccessEvaluator {\n+\n+    private final Logger log = LogManager.getLogger(this.getClass());\n+\n+    private final AuditLog auditLog;\n+    private final WildcardMatcher indexMatcher;\n+    private final Boolean systemIndexEnabled;\n+    private final WildcardMatcher deniedActionMatcher;\n+\n+\n+    public OpenDistroSystemIndexAccessEvaluator(final Settings settings, AuditLog auditLog) {\n+        this.indexMatcher = WildcardMatcher.from(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_KEY, ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_DEFAULT));\n+        this.systemIndexEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_ENABLED_KEY, ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_ENABLED_DEFAULT);\n+        this.auditLog = auditLog;\n+\n+        final List<String> indexDeniedActionPatterns = new ArrayList<String>();\n+        indexDeniedActionPatterns.add(\"indices:data/write*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/delete*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/mapping/delete*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/mapping/put*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/freeze*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/settings/update*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/aliases\");\n+        indexDeniedActionPatterns.add(\"indices:admin/close*\");\n+        indexDeniedActionPatterns.add(\"cluster:admin/snapshot/restore*\");\n+        this.deniedActionMatcher = WildcardMatcher.from(indexDeniedActionPatterns);\n+    }\n+\n+    public PrivilegesEvaluatorResponse evaluate(final ActionRequest request, final Task task, final String action,\n+                                                final IndexResolverReplacer.Resolved requestedResolved, final PrivilegesEvaluatorResponse presponse, final boolean isAdminDn) {\n+\n+        if (!systemIndexEnabled) {\n+            return presponse;\n+        }\n+\n+        if (indexMatcher.matchAny(requestedResolved.getAllIndices()) && deniedActionMatcher.test(action) && !isAdminDn) {\n+            auditLog.logMissingPrivileges(action, request, task);\n+            log.warn(action + \" for '{}' index/indices is not allowed for a non adminDN user\", indexMatcher);\n+            presponse.allowed = false;\n+            return presponse.markComplete();\n+        }\n+\n+        if (requestedResolved.isLocalAll() && deniedActionMatcher.test(action) && !isAdminDn) {\n+            auditLog.logMissingPrivileges(action, request, task);\n+            log.warn(action + \" for '_all' indices is not allowed for a non adminDN user\");\n+            presponse.allowed = false;\n+            return presponse.markComplete();", "originalCommit": "218cf6ba88d399237c96240f2189eaf60864d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4OTAxMw==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r488289013", "bodyText": "Good point. \"_all\" is currently caught by OpenDistroSecurityIndexAccessEvaluator. I don't see a case (with _all) which will pass OpenDistroSecurityIndexAccessEvaluator and reaches here. I am tending to remove this check with isLocalAll(). What do you think?", "author": "skkosuri-amzn", "createdAt": "2020-09-14T23:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1NDkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1Nzc4NQ==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r487257785", "bodyText": "Can we explore combining condition check on line#71 and line#78?", "author": "hardik-k-shah", "createdAt": "2020-09-11T19:51:03Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/OpenDistroSystemIndexAccessEvaluator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Portions Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.privileges;\n+\n+import com.amazon.opendistroforelasticsearch.security.auditlog.AuditLog;\n+import com.amazon.opendistroforelasticsearch.security.resolver.IndexResolverReplacer;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.support.WildcardMatcher;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.RealtimeRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.tasks.Task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Blocks requests for below actions and configured index for all non adminDNs.\n+ */\n+public class OpenDistroSystemIndexAccessEvaluator {\n+\n+    private final Logger log = LogManager.getLogger(this.getClass());\n+\n+    private final AuditLog auditLog;\n+    private final WildcardMatcher indexMatcher;\n+    private final Boolean systemIndexEnabled;\n+    private final WildcardMatcher deniedActionMatcher;\n+\n+\n+    public OpenDistroSystemIndexAccessEvaluator(final Settings settings, AuditLog auditLog) {\n+        this.indexMatcher = WildcardMatcher.from(settings.getAsList(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_KEY, ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_DEFAULT));\n+        this.systemIndexEnabled = settings.getAsBoolean(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_ENABLED_KEY, ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_ENABLED_DEFAULT);\n+        this.auditLog = auditLog;\n+\n+        final List<String> indexDeniedActionPatterns = new ArrayList<String>();\n+        indexDeniedActionPatterns.add(\"indices:data/write*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/delete*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/mapping/delete*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/mapping/put*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/freeze*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/settings/update*\");\n+        indexDeniedActionPatterns.add(\"indices:admin/aliases\");\n+        indexDeniedActionPatterns.add(\"indices:admin/close*\");\n+        indexDeniedActionPatterns.add(\"cluster:admin/snapshot/restore*\");\n+        this.deniedActionMatcher = WildcardMatcher.from(indexDeniedActionPatterns);\n+    }\n+\n+    public PrivilegesEvaluatorResponse evaluate(final ActionRequest request, final Task task, final String action,\n+                                                final IndexResolverReplacer.Resolved requestedResolved, final PrivilegesEvaluatorResponse presponse, final boolean isAdminDn) {\n+\n+        if (!systemIndexEnabled) {\n+            return presponse;\n+        }\n+\n+        if (indexMatcher.matchAny(requestedResolved.getAllIndices()) && deniedActionMatcher.test(action) && !isAdminDn) {\n+            auditLog.logMissingPrivileges(action, request, task);\n+            log.warn(action + \" for '{}' index/indices is not allowed for a non adminDN user\", indexMatcher);\n+            presponse.allowed = false;\n+            return presponse.markComplete();\n+        }\n+\n+        if (requestedResolved.isLocalAll() && deniedActionMatcher.test(action) && !isAdminDn) {", "originalCommit": "218cf6ba88d399237c96240f2189eaf60864d01a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2Mjc1Mg==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r487262752", "bodyText": "why are we allowing admin to search system indices?\nSystem indices will be accessible through es APIs only for AdminDN.  All the other user including admin will be able to access index only through APIs defined by respective plugin.", "author": "hardik-k-shah", "createdAt": "2020-09-11T20:00:55Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/system_indices/SystemIndicesTests.java", "diffHunk": "@@ -0,0 +1,547 @@\n+/*\n+ * Portions Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.system_indices;\n+\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.DynamicSecurityConfig;\n+import com.amazon.opendistroforelasticsearch.security.test.SingleClusterTest;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.file.FileHelper;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.rest.RestHelper;\n+import org.apache.http.Header;\n+import org.apache.http.HttpStatus;\n+import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;\n+import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;\n+import org.elasticsearch.action.admin.indices.close.CloseIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.client.transport.TransportClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.rest.RestStatus;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ *  Test for opendistro system indices, to restrict configured indices access to adminDn\n+ *  Refer:    \"opendistro_security.system_indices.enabled\"\n+ *            \"opendistro_security.system_indices.indices\";\n+ */\n+public class SystemIndicesTests extends SingleClusterTest {\n+\n+    private static final List<String> listOfIndexesToTest = Arrays.asList(\"config1\", \"config2\");\n+    private static final String matchAllQuery = \"{\\n\\\"query\\\": {\\\"match_all\\\": {}}}\";\n+    private static final String allAccessUser = \"admin_all_access\";\n+    private static final Header allAccessUserHeader = encodeBasicHeader(allAccessUser, allAccessUser);\n+    private static final String generalErrorMessage = String.format(\"no permissions for [] and User [name=%s, backend_roles=[], requestedTenant=null]\", allAccessUser);\n+\n+    private void setupSystemIndicesDisabledWithSsl() throws Exception {\n+\n+        Settings systemIndexSettings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_ENABLED_KEY, false)\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_KEY, listOfIndexesToTest)\n+                .put(\"opendistro_security.ssl.http.enabled\",true)\n+                .put(\"opendistro_security.ssl.http.keystore_filepath\", FileHelper.getAbsoluteFilePathFromClassPath(\"node-0-keystore.jks\"))\n+                .put(\"opendistro_security.ssl.http.truststore_filepath\", FileHelper.getAbsoluteFilePathFromClassPath(\"truststore.jks\"))\n+                .put(\"path.repo\", repositoryPath.getRoot().getAbsolutePath())\n+                .build();\n+        setup(Settings.EMPTY,\n+                new DynamicSecurityConfig()\n+                        .setConfig(\"config_system_indices.yml\")\n+                        .setSecurityRoles(\"roles_system_indices.yml\")\n+                        .setSecurityInternalUsers(\"internal_users_system_indices.yml\")\n+                        .setSecurityRolesMapping(\"roles_mapping_system_indices.yml\"),\n+                systemIndexSettings,\n+                true);\n+    }\n+\n+    private void setupSystemIndicesEnabledWithSsl() throws Exception {\n+\n+        Settings systemIndexSettings = Settings.builder()\n+                .put(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_ENABLED_KEY, true)\n+                .putList(ConfigConstants.OPENDISTRO_SECURITY_SYSTEM_INDICES_KEY, listOfIndexesToTest)\n+                .put(\"opendistro_security.ssl.http.enabled\",true)\n+                .put(\"opendistro_security.ssl.http.keystore_filepath\", FileHelper.getAbsoluteFilePathFromClassPath(\"node-0-keystore.jks\"))\n+                .put(\"opendistro_security.ssl.http.truststore_filepath\", FileHelper.getAbsoluteFilePathFromClassPath(\"truststore.jks\"))\n+                .put(\"path.repo\", repositoryPath.getRoot().getAbsolutePath())\n+                .build();\n+        setup(Settings.EMPTY,\n+                new DynamicSecurityConfig()\n+                        .setConfig(\"config_system_indices.yml\")\n+                        .setSecurityRoles(\"roles_system_indices.yml\")\n+                        .setSecurityInternalUsers(\"internal_users_system_indices.yml\")\n+                        .setSecurityRolesMapping(\"roles_mapping_system_indices.yml\"),\n+                systemIndexSettings,\n+                true);\n+    }\n+\n+    /**\n+     * Creates a set of test indices and indexes one document into each index.\n+     *\n+     * @throws Exception\n+     */\n+    private void createTestIndicesAndDocs() {\n+        try (TransportClient tc = getInternalTransportClient()) {\n+            for (String index : listOfIndexesToTest) {\n+                tc.admin().indices().create(new CreateIndexRequest(index)).actionGet();\n+                tc.index(new IndexRequest(index).setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).id(\"document1\").source(\"{ \\\"foo\\\": \\\"bar\\\" }\", XContentType.JSON)).actionGet();\n+            }\n+        }\n+    }\n+\n+    private void createSnapshots() {\n+        try (TransportClient tc = getInternalTransportClient()) {\n+            for (String index : listOfIndexesToTest) {\n+                tc.admin().cluster().putRepository(new PutRepositoryRequest(index).type(\"fs\").settings(Settings.builder().put(\"location\", repositoryPath.getRoot().getAbsolutePath() + \"/\" + index))).actionGet();\n+                tc.admin().cluster().createSnapshot(new CreateSnapshotRequest(index, index + \"_1\").indices(index).includeGlobalState(true).waitForCompletion(true)).actionGet();\n+            }\n+        }\n+    }\n+\n+    private RestHelper keyStoreRestHelper() {\n+        RestHelper restHelper = restHelper();\n+        restHelper.keystore = \"kirk-keystore.jks\";\n+        restHelper.enableHTTPClientSSL = true;\n+        restHelper.trustHTTPServerCertificate = true;\n+        restHelper.sendAdminCertificate = true;\n+        return restHelper;\n+    }\n+\n+    private RestHelper sslRestHelper() {\n+        RestHelper restHelper = restHelper();\n+        restHelper.enableHTTPClientSSL = true;\n+        return restHelper;\n+    }\n+\n+    /***************************************************************************************************************************\n+     * Search api tests. Search is a special case.\n+     ***************************************************************************************************************************/\n+\n+    private void validateSearchResponse(RestHelper.HttpResponse response, int expectecdHits) throws IOException {\n+        assertEquals(RestStatus.OK.getStatus(), response.getStatusCode());\n+\n+        XContentParser xcp = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, response.getBody());\n+        SearchResponse searchResponse = SearchResponse.fromXContent(xcp);\n+        assertEquals(RestStatus.OK, searchResponse.status());\n+        assertEquals(expectecdHits, searchResponse.getHits().getHits().length);\n+        assertEquals(0, searchResponse.getFailedShards());\n+        assertEquals(5, searchResponse.getSuccessfulShards());\n+    }\n+\n+    @Test\n+    public void testSearchAsSuperAdmin() throws Exception {\n+        setupSystemIndicesDisabledWithSsl();\n+        createTestIndicesAndDocs();\n+        RestHelper restHelper = keyStoreRestHelper();\n+\n+        //search system indices\n+        for (String index : listOfIndexesToTest) {\n+            validateSearchResponse(restHelper.executePostRequest(index + \"/_search\", matchAllQuery), 1);\n+        }\n+\n+        //search all indices\n+        RestHelper.HttpResponse response = restHelper.executePostRequest(\"/_search\", matchAllQuery);\n+        assertEquals(RestStatus.OK.getStatus(), response.getStatusCode());\n+    }\n+\n+    @Test\n+    public void testSearchAsAdmin() throws Exception {\n+        setupSystemIndicesDisabledWithSsl();\n+        createTestIndicesAndDocs();\n+        RestHelper restHelper = sslRestHelper();\n+\n+        //search system indices\n+        for (String index : listOfIndexesToTest) {\n+            validateSearchResponse(restHelper.executePostRequest(index + \"/_search\", matchAllQuery, allAccessUserHeader), 1);\n+        }\n+\n+        //search all indices\n+        RestHelper.HttpResponse response = restHelper.executePostRequest(\"/_search\", matchAllQuery, allAccessUserHeader);\n+        assertEquals(RestStatus.OK.getStatus(), response.getStatusCode());\n+    }\n+\n+    @Test\n+    public void testSearchWithSystemIndicesAsSuperAdmin() throws Exception {\n+        setupSystemIndicesEnabledWithSsl();\n+        createTestIndicesAndDocs();\n+        RestHelper restHelper = keyStoreRestHelper();\n+\n+        //search system indices\n+        for (String index : listOfIndexesToTest) {\n+            validateSearchResponse(restHelper.executePostRequest(index + \"/_search\", matchAllQuery), 1);\n+        }\n+\n+        //search all indices\n+        RestHelper.HttpResponse response = restHelper.executePostRequest(\"/_search\", matchAllQuery);\n+        assertEquals(RestStatus.OK.getStatus(), response.getStatusCode());\n+    }\n+\n+\n+    @Test\n+    public void testSearchWithSystemIndicesAsAdmin() throws Exception {\n+        setupSystemIndicesEnabledWithSsl();\n+        createTestIndicesAndDocs();\n+        RestHelper restHelper = sslRestHelper();\n+\n+        for (String index : listOfIndexesToTest) {\n+            validateSearchResponse(restHelper.executePostRequest(index + \"/_search\", matchAllQuery, allAccessUserHeader), 0);", "originalCommit": "218cf6ba88d399237c96240f2189eaf60864d01a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4OTc3Mw==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r488289773", "bodyText": "No, we are not allowing admin to search system indices. admin requests return 200 but with empty results. This is same behavior as security index. This allows _all\\_search request work, but filters results from system indices.", "author": "skkosuri-amzn", "createdAt": "2020-09-14T23:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2Mjc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNDE3NA==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r488424174", "bodyText": "Thanks for clarifying!", "author": "hardik-k-shah", "createdAt": "2020-09-15T06:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2Mjc1Mg=="}], "type": "inlineReview"}, {"oid": "e2e0c41ff0669057f5e0bda656781ae298dbf6bd", "url": "https://github.com/opensearch-project/security/commit/e2e0c41ff0669057f5e0bda656781ae298dbf6bd", "message": "Merge branch 'master' into systemindices", "committedDate": "2020-09-19T00:51:49Z", "type": "commit"}, {"oid": "96237ca805661da7663e6bbeb42b7bb778217489", "url": "https://github.com/opensearch-project/security/commit/96237ca805661da7663e6bbeb42b7bb778217489", "message": "Merged system index evaluator to security index evaluator", "committedDate": "2020-09-19T05:02:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMzk0MQ==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r492933941", "bodyText": "should we add isSystemIndexRequest() check here?", "author": "hardik-k-shah", "createdAt": "2020-09-22T18:06:13Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/OpenDistroSecurityIndexSearcherWrapper.java", "diffHunk": "@@ -87,7 +93,12 @@ public final DirectoryReader apply(DirectoryReader reader) throws IOException {\n         if (isSecurityIndexRequest() && !isAdminAuthenticatedOrInternalRequest()) {", "originalCommit": "96237ca805661da7663e6bbeb42b7bb778217489", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NTEzNg==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r493055136", "bodyText": "Had a offline discussion and decided to keep it current way.", "author": "skkosuri-amzn", "createdAt": "2020-09-22T21:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMzk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5ODcxNw==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r494698717", "bodyText": "IMO, the entire class needs to be modified. I'll do this in a follow up PR.", "author": "vrozov", "createdAt": "2020-09-25T01:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMzk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1ODgzNg==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r492958836", "bodyText": "make sure this is not by mistake..", "author": "hardik-k-shah", "createdAt": "2020-09-22T18:47:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/PrivilegesEvaluator.java", "diffHunk": "@@ -36,7 +36,6 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;", "originalCommit": "96237ca805661da7663e6bbeb42b7bb778217489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1OTEzNw==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r492959137", "bodyText": "\"Portions\" is not required. Amazon has full copyright on this file.", "author": "hardik-k-shah", "createdAt": "2020-09-22T18:48:11Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/system_indices/SystemIndicesTests.java", "diffHunk": "@@ -0,0 +1,547 @@\n+/*\n+ * Portions Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "originalCommit": "96237ca805661da7663e6bbeb42b7bb778217489", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c9e9e1c7d142f3cee8f995861a43625acb9ddb0e", "url": "https://github.com/opensearch-project/security/commit/c9e9e1c7d142f3cee8f995861a43625acb9ddb0e", "message": "minor cleanup", "committedDate": "2020-09-22T21:57:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5OTEyNQ==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r494699125", "bodyText": "Boolean -> boolean", "author": "vrozov", "createdAt": "2020-09-25T01:39:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/OpenDistroSecurityIndexAccessEvaluator.java", "diffHunk": "@@ -58,12 +58,18 @@\n     private final WildcardMatcher securityDeniedActionMatcher;\n     private final IndexResolverReplacer irr;\n     private final boolean filterSecurityIndex;\n-    \n+\n+    // for system-indices configuration\n+    private final WildcardMatcher systemIndexMatcher;\n+    private final Boolean systemIndexEnabled;", "originalCommit": "c9e9e1c7d142f3cee8f995861a43625acb9ddb0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAzMjA5NA==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r495032094", "bodyText": "changed", "author": "skkosuri-amzn", "createdAt": "2020-09-25T14:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5OTEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5OTk5Nw==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r494699997", "bodyText": "use Java logical &&, not bitwise &.", "author": "vrozov", "createdAt": "2020-09-25T01:42:51Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/OpenDistroSecurityIndexAccessEvaluator.java", "diffHunk": "@@ -147,4 +153,8 @@ public PrivilegesEvaluatorResponse evaluate(final ActionRequest request, final T\n         }\n         return presponse;\n     }\n+\n+    private boolean matchAnySystemIndices(final Resolved requestedResolved){\n+        return systemIndexEnabled & systemIndexMatcher.matchAny(requestedResolved.getAllIndices());", "originalCommit": "c9e9e1c7d142f3cee8f995861a43625acb9ddb0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAzMjAyOQ==", "url": "https://github.com/opensearch-project/security/pull/690#discussion_r495032029", "bodyText": "\ud83d\udc4d", "author": "skkosuri-amzn", "createdAt": "2020-09-25T14:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5OTk5Nw=="}], "type": "inlineReview"}, {"oid": "70de716e6cd167cb7664a5ad6711c2cb61d43fb6", "url": "https://github.com/opensearch-project/security/commit/70de716e6cd167cb7664a5ad6711c2cb61d43fb6", "message": "Minor refactor", "committedDate": "2020-09-25T14:44:53Z", "type": "commit"}]}