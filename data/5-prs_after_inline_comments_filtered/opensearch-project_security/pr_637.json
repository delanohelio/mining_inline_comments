{"pr_number": 637, "pr_title": "Clean up rest and transport header filtering", "pr_createdAt": "2020-08-07T20:13:09Z", "pr_url": "https://github.com/opensearch-project/security/pull/637", "timeline": [{"oid": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4", "url": "https://github.com/opensearch-project/security/commit/ea605549c280f5bdfe0ef62e493b60eda0a60ea4", "message": "Clean up rest and transport header filtering", "committedDate": "2020-08-07T20:08:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTc0Ng==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467499746", "bodyText": "Is it necessary to create the clone even if excludeSensitiveHeaders is false?", "author": "vrozov", "createdAt": "2020-08-08T20:07:32Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -307,15 +307,11 @@ public void addRestParams(Map<String,String> params) {\n \n     public void addRestHeaders(Map<String,List<String>> headers, boolean excludeSensitiveHeaders) {\n         if(headers != null && !headers.isEmpty()) {\n-            if(excludeSensitiveHeaders) {\n-                final Map<String, List<String>> headersClone = new HashMap<String, List<String>>(headers)\n-                        .entrySet().stream()\n-                        .filter(map -> !map.getKey().equalsIgnoreCase(AUTHORIZATION_HEADER))\n-                        .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));\n-                auditInfo.put(REST_REQUEST_HEADERS, headersClone);\n-            } else {\n-                auditInfo.put(REST_REQUEST_HEADERS, new HashMap<String, List<String>>(headers));\n+            final Map<String, List<String>> headersClone = new HashMap<>(headers);", "originalCommit": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMTEyOQ==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467501129", "bodyText": "Input can be unmodifiable map. IMO its better to have consistency in what the method is setting for that attribute. It would assign unmodifiable map if excludeSensitiveHeaders is false or modifiable map if true. Retaining current behavior of setting modifiable map in either case.", "author": "sujithvm", "createdAt": "2020-08-08T20:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwNzI1Mw==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467507253", "bodyText": "Why does it matter? Where and why it can be modified?", "author": "vrozov", "createdAt": "2020-08-08T21:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NjA3NQ==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r468256075", "bodyText": "As i ve mentioned in the PR body, retaining the current behavior as it was specifically doing that.\nThis may help in building a redactor module.", "author": "sujithvm", "createdAt": "2020-08-11T00:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MTY1OA==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r468261658", "bodyText": "I don't see why is it necessary to keep the original behavior.  It should be redactor module responsibility to create a copy or filter original Map if necessary.", "author": "vrozov", "createdAt": "2020-08-11T00:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTg5OQ==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467499899", "bodyText": "headers = Maps.filterEntries(headers, header -> !AUTHORIZATION_HEADER.test(header.getKey()));", "author": "vrozov", "createdAt": "2020-08-08T20:09:47Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -307,15 +307,11 @@ public void addRestParams(Map<String,String> params) {\n \n     public void addRestHeaders(Map<String,List<String>> headers, boolean excludeSensitiveHeaders) {\n         if(headers != null && !headers.isEmpty()) {\n-            if(excludeSensitiveHeaders) {\n-                final Map<String, List<String>> headersClone = new HashMap<String, List<String>>(headers)\n-                        .entrySet().stream()\n-                        .filter(map -> !map.getKey().equalsIgnoreCase(AUTHORIZATION_HEADER))\n-                        .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));\n-                auditInfo.put(REST_REQUEST_HEADERS, headersClone);\n-            } else {\n-                auditInfo.put(REST_REQUEST_HEADERS, new HashMap<String, List<String>>(headers));\n+            final Map<String, List<String>> headersClone = new HashMap<>(headers);\n+            if (excludeSensitiveHeaders) {\n+                headersClone.keySet().removeIf(AUTHORIZATION_HEADER);", "originalCommit": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMTMzOQ==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467501339", "bodyText": "What is the advantage of doing this ?", "author": "sujithvm", "createdAt": "2020-08-08T20:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwNzM4MQ==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467507381", "bodyText": "There is no copy/clone, it is a read only filtered view on the original map.", "author": "vrozov", "createdAt": "2020-08-08T21:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5OTg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMDQ2Mw==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467500463", "bodyText": "Avoid code duplication. Merge addTransportHeaders and addRestHeaders to a single method with one more parameter.", "author": "vrozov", "createdAt": "2020-08-08T20:17:02Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -339,15 +335,11 @@ void addRestRequestInfo(final RestRequest request, final AuditConfig.Filter filt\n \n     public void addTransportHeaders(Map<String,String> headers, boolean excludeSensitiveHeaders) {\n         if(headers != null && !headers.isEmpty()) {\n-            if(excludeSensitiveHeaders) {\n-                final Map<String,String> headersClone = new HashMap<String,String>(headers)\n-                        .entrySet().stream()\n-                        .filter(map -> !map.getKey().equalsIgnoreCase(AUTHORIZATION_HEADER))\n-                        .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));\n-                auditInfo.put(TRANSPORT_REQUEST_HEADERS, headersClone);\n-            } else {\n-                auditInfo.put(TRANSPORT_REQUEST_HEADERS, new HashMap<String,String>(headers));\n+            final Map<String, String> headersClone = new HashMap<>(headers);", "originalCommit": "ea605549c280f5bdfe0ef62e493b60eda0a60ea4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMTYxOQ==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467501619", "bodyText": "Both are accepting different map types.", "author": "sujithvm", "createdAt": "2020-08-08T20:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMDQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwNzg3MQ==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r467507871", "bodyText": "Accept Map<String, ?>, value type actually does not matter (or use generic).", "author": "vrozov", "createdAt": "2020-08-08T21:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMDQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NzI5Mw==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r468257293", "bodyText": "Not in favor of merging addTransportHeaders and addRestHeaders into one function with accepting generics as value types will be permissive for consumers.\nMaybe the validation and filtering can be done as a separate function with generics.\nIntention of this PR was not to do a lot of refactor (check PR body). Maybe raise a separate issue?", "author": "sujithvm", "createdAt": "2020-08-11T00:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMDQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjYyMQ==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r468266621", "bodyText": "Yes, please open a follow up PR.\n\navoid code duplication. IMO, it is OK to accept generics as AuditMessage does not care in what format Headers are provided.\nheader filtering logic should avoid creating a new map and then removing elements from them.", "author": "vrozov", "createdAt": "2020-08-11T00:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMDQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNTgxOA==", "url": "https://github.com/opensearch-project/security/pull/637#discussion_r474235818", "bodyText": "Created #657", "author": "sujithvm", "createdAt": "2020-08-20T19:52:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwMDQ2Mw=="}], "type": "inlineReview"}]}