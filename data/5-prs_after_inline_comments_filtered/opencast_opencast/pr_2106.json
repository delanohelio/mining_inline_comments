{"pr_number": 2106, "pr_title": "Attempt to detect invalid DB credentials", "pr_createdAt": "2020-11-27T22:31:47Z", "pr_url": "https://github.com/opencast/opencast/pull/2106", "timeline": [{"oid": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db", "url": "https://github.com/opencast/opencast/commit/8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db", "message": "Adding an attempt to check if the database user permissions are correct.  This is by no means comprehensive, but will catch a bunch of easily missed situations.", "committedDate": "2020-11-27T22:30:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5NjUyNw==", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532096527", "bodyText": "Nitpicking ;-P\nTo be consistent with the other table names:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String tableName = \"oc-temp\" + time;\n          \n          \n            \n                String tableName = \"oc_temp_\" + time;", "author": "lkiesow", "createdAt": "2020-11-28T19:20:58Z", "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;", "originalCommit": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODI2MQ==", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098261", "bodyText": "I don't think this is actually doing what you want it to do. You are selecting the entry with id = time + 2 but you only ever set id = time and id = time + 1. This means that you never actually go into the loop. Also, one simple insert should suffice for this test:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n          \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n          \n          \n            \n                  runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n          \n          \n            \n                  ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n          \n          \n            \n                  while (rs.next()) {\n          \n          \n            \n                    long id = rs.getLong(\"id\");\n          \n          \n            \n                    long test = rs.getLong(\"test\");\n          \n          \n            \n                    if (id != time || test != time + 2) {\n          \n          \n            \n                  runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \", 0);\");\n          \n          \n            \n                  runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + \";\");\n          \n          \n            \n                  ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \";\");\n          \n          \n            \n                  while (rs.next()) {\n          \n          \n            \n                    long id = rs.getLong(\"id\");\n          \n          \n            \n                    long test = rs.getLong(\"test\");\n          \n          \n            \n                    if (id != time || test != time) {", "author": "lkiesow", "createdAt": "2020-11-28T19:39:01Z", "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;\n+    try {\n+      runUpdate(statement, \"CREATE TABLE \" + tableName + \" ( id BIGINT NOT NULL, test BIGINT, PRIMARY KEY (id) );\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n+      runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n+      ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n+      while (rs.next()) {\n+        long id = rs.getLong(\"id\");\n+        long test = rs.getLong(\"test\");\n+        if (id != time || test != time + 2) {", "originalCommit": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODUyNQ==", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098525", "bodyText": "I think using a unique table name is a good solution for this problem. But imaging a cluster to start up at the same time. That would potentially select the same table names. Maybe just pick a large random number instead?", "author": "lkiesow", "createdAt": "2020-11-28T19:41:09Z", "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();", "originalCommit": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5ODcxOQ==", "url": "https://github.com/opencast/opencast/pull/2106#discussion_r532098719", "bodyText": "In case of an error, we might leave a random table in the database. We could try deleting it in case of an error?\nSomething like this in a final block (catching and ignoring excepzions):\nrunUpdate(statement, \"DROP TABLE \" + tableName + \";\");", "author": "lkiesow", "createdAt": "2020-11-28T19:43:11Z", "path": "modules/db/src/main/java/org/opencastproject/db/Activator.java", "diffHunk": "@@ -137,6 +139,36 @@ else if (pooledDataSource.getMaxIdleTime() == 0) {\n     logger.info(\"Database connection pool established at {}\", jdbcUrl);\n     logger.info(\"Database connection pool parameters: max.size={}, min.size={}, max.idle.time={}\",\n       pooledDataSource.getMaxPoolSize(), pooledDataSource.getMinPoolSize(), pooledDataSource.getMaxIdleTime());\n+    Statement statement = pooledDataSource.getConnection().createStatement();\n+\n+    long time = System.currentTimeMillis();\n+    String tableName = \"oc-temp\" + time;\n+    try {\n+      runUpdate(statement, \"CREATE TABLE \" + tableName + \" ( id BIGINT NOT NULL, test BIGINT, PRIMARY KEY (id) );\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + \",\" + time + \");\");\n+      runUpdate(statement, \"INSERT INTO \" + tableName + \" VALUES (\" + time + 1 + \",\" + time + 1 + \");\");\n+      runUpdate(statement, \"UPDATE \" + tableName + \" SET test = \" + time + 2 + \" WHERE id = \" + time + \";\");\n+      ResultSet rs = statement.executeQuery(\"SELECT FROM \" + tableName + \" WHERE id = \" + time + 2 + \";\");\n+      while (rs.next()) {\n+        long id = rs.getLong(\"id\");\n+        long test = rs.getLong(\"test\");\n+        if (id != time || test != time + 2) {\n+          throw new RuntimeException(\"Unable to verify updating a table functions correctly\");\n+        }\n+      }\n+      runUpdate(statement, \"DELETE FROM \" + tableName + \" WHERE id = \" + time + \";\");\n+      runUpdate(statement, \"DROP TABLE \" + tableName + \";\");\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to verify SQL credentials have required permissions!\");", "originalCommit": "8acda708fa0309cc94a5f40e5fe35fe0e3f5a8db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b80b20e9d18dcf2b126017a8852d3889f99a4d76", "url": "https://github.com/opencast/opencast/commit/b80b20e9d18dcf2b126017a8852d3889f99a4d76", "message": "Addressing review comments", "committedDate": "2020-12-01T03:11:19Z", "type": "commit"}, {"oid": "b80b20e9d18dcf2b126017a8852d3889f99a4d76", "url": "https://github.com/opencast/opencast/commit/b80b20e9d18dcf2b126017a8852d3889f99a4d76", "message": "Addressing review comments", "committedDate": "2020-12-01T03:11:19Z", "type": "forcePushed"}, {"oid": "483cfd4f29d4c263f9840a762b106e9a6b00a7bb", "url": "https://github.com/opencast/opencast/commit/483cfd4f29d4c263f9840a762b106e9a6b00a7bb", "message": "Fixing a bunch of broken logic.\n\n1) double -> long: Table names can't have dots in them (duh).\n2) SELECT needs to know what it's selecting.\n3) CREATE and DROP table does not generate an affected, yielding a failed test.", "committedDate": "2021-01-04T21:08:54Z", "type": "commit"}]}