{"pr_number": 1363, "pr_title": "Added the adopter registration form for statistics.", "pr_createdAt": "2020-01-17T14:52:51Z", "pr_url": "https://github.com/opencast/opencast/pull/1363", "timeline": [{"oid": "dedd4d966ec6a2eac4a18263337fda5242a242d4", "url": "https://github.com/opencast/opencast/commit/dedd4d966ec6a2eac4a18263337fda5242a242d4", "message": "Added the adopter registration form for statistics.", "committedDate": "2020-01-17T14:26:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTY4Mg==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370289682", "bodyText": "Not that f isn't a wonderful name but what about using form? ;-)", "author": "lkiesow", "createdAt": "2020-01-23T18:42:39Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopterstatistics/registration/Controller.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopterstatistics.registration;\n+\n+import static com.entwinemedia.fn.data.json.Jsons.f;\n+import static com.entwinemedia.fn.data.json.Jsons.obj;\n+import static com.entwinemedia.fn.data.json.Jsons.v;\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+import org.opencastproject.index.service.util.RestUtils;\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.entwinemedia.fn.data.json.Field;\n+import com.entwinemedia.fn.data.json.JValue;\n+import com.entwinemedia.fn.data.json.Jsons;\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * The REST endpoint for the adopter statistics service\n+ */\n+@Path(\"/\")\n+@RestService(name = \"registrationController\",\n+        title = \"Adopter Statistics Registration Service Endpoint\",\n+        abstractText = \"Rest Endpoint for the registration form.\",\n+        notes = {\"Provides operations regarding the adopter registration form\"})\n+public class Controller {\n+\n+  /** The logger */\n+  private static final Logger logger = LoggerFactory.getLogger(Controller.class);\n+\n+  /** The rest docs */\n+  protected String docs;\n+\n+  /** The service that provides methods for the registration */\n+  protected Service registrationService;\n+\n+  public void setRegistrationService(Service registrationService) {\n+    this.registrationService = registrationService;\n+  }\n+\n+\n+  private static final Type stringMapType = new TypeToken<Map<String, String>>() { }.getType();\n+  private static final Gson gson = new Gson();\n+  private static final SimpleDateFormat jsonDateFormat = new SimpleDateFormat(\"yyyy/MM/dd\");\n+\n+\n+  @GET\n+  @Path(\"registration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"getregistrationform\", description = \"GETs the form data for the current logged in user\", reponses = {\n+          @RestResponse(description = \"Successful retrieved form data.\", responseCode = HttpServletResponse.SC_OK),\n+          @RestResponse(description = \"The underlying service could not output something.\", responseCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR) }, returnDescription = \"GETs the form data for a specific user.\")\n+  public Response getRegistrationForm() throws Exception {\n+\n+    logger.info(\"Retrieving statistics registration form for logged in user\");\n+    return RestUtils.okJson(formToJson(registrationService.retrieveFormData()));\n+  }\n+\n+  @POST\n+  @Path(\"registration\")\n+  @Consumes({MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON})\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"saveregistrationform\",\n+          description = \"Saves the adopter statistics registration form\",\n+          returnDescription = \"Status\", reponses = {\n+          @RestResponse(responseCode = SC_OK, description = \"Theme created\"),\n+          @RestResponse(responseCode = SC_BAD_REQUEST, description = \"The theme references a non-existing file\") })\n+  public Response register(String data) {\n+\n+    Map<String, String> dataMap = gson.fromJson(data, stringMapType);\n+    Form f = jsonToForm(dataMap);", "originalCommit": "dedd4d966ec6a2eac4a18263337fda5242a242d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0ODk3OA==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370548978", "bodyText": "Renamed.", "author": "marwyg", "createdAt": "2020-01-24T09:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MTIzMQ==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370291231", "bodyText": "Much simpler and you don't need any null checks: ` BooleanUtils.toBoolean\u00b4", "author": "lkiesow", "createdAt": "2020-01-23T18:45:55Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopterstatistics/registration/Controller.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopterstatistics.registration;\n+\n+import static com.entwinemedia.fn.data.json.Jsons.f;\n+import static com.entwinemedia.fn.data.json.Jsons.obj;\n+import static com.entwinemedia.fn.data.json.Jsons.v;\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+import org.opencastproject.index.service.util.RestUtils;\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.entwinemedia.fn.data.json.Field;\n+import com.entwinemedia.fn.data.json.JValue;\n+import com.entwinemedia.fn.data.json.Jsons;\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * The REST endpoint for the adopter statistics service\n+ */\n+@Path(\"/\")\n+@RestService(name = \"registrationController\",\n+        title = \"Adopter Statistics Registration Service Endpoint\",\n+        abstractText = \"Rest Endpoint for the registration form.\",\n+        notes = {\"Provides operations regarding the adopter registration form\"})\n+public class Controller {\n+\n+  /** The logger */\n+  private static final Logger logger = LoggerFactory.getLogger(Controller.class);\n+\n+  /** The rest docs */\n+  protected String docs;\n+\n+  /** The service that provides methods for the registration */\n+  protected Service registrationService;\n+\n+  public void setRegistrationService(Service registrationService) {\n+    this.registrationService = registrationService;\n+  }\n+\n+\n+  private static final Type stringMapType = new TypeToken<Map<String, String>>() { }.getType();\n+  private static final Gson gson = new Gson();\n+  private static final SimpleDateFormat jsonDateFormat = new SimpleDateFormat(\"yyyy/MM/dd\");\n+\n+\n+  @GET\n+  @Path(\"registration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"getregistrationform\", description = \"GETs the form data for the current logged in user\", reponses = {\n+          @RestResponse(description = \"Successful retrieved form data.\", responseCode = HttpServletResponse.SC_OK),\n+          @RestResponse(description = \"The underlying service could not output something.\", responseCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR) }, returnDescription = \"GETs the form data for a specific user.\")\n+  public Response getRegistrationForm() throws Exception {\n+\n+    logger.info(\"Retrieving statistics registration form for logged in user\");\n+    return RestUtils.okJson(formToJson(registrationService.retrieveFormData()));\n+  }\n+\n+  @POST\n+  @Path(\"registration\")\n+  @Consumes({MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON})\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"saveregistrationform\",\n+          description = \"Saves the adopter statistics registration form\",\n+          returnDescription = \"Status\", reponses = {\n+          @RestResponse(responseCode = SC_OK, description = \"Theme created\"),\n+          @RestResponse(responseCode = SC_BAD_REQUEST, description = \"The theme references a non-existing file\") })\n+  public Response register(String data) {\n+\n+    Map<String, String> dataMap = gson.fromJson(data, stringMapType);\n+    Form f = jsonToForm(dataMap);\n+\n+    try {\n+      registrationService.saveFormData(f);\n+    } catch (Exception e) {\n+      return Response.serverError().build();\n+    }\n+\n+    return Response.ok().build();\n+  }\n+\n+  @GET\n+  @Produces(MediaType.TEXT_HTML)\n+  @Path(\"docs\")\n+  public String getDocs() {\n+    return docs;\n+  }\n+\n+  /**\n+   * Constructs a form object from a map\n+   * @param dataMap Form data as map\n+   *\n+   * @return The form object\n+   */\n+  private Form jsonToForm(Map<String, String> dataMap) {\n+    Form f = new Form();\n+    f.setOrganisationName(dataMap.get(\"organisationName\"));\n+    f.setDepartmentName(dataMap.get(\"departmentName\"));\n+    f.setFirstName(dataMap.get(\"firstName\"));\n+    f.setLastName(dataMap.get(\"lastName\"));\n+    f.setEmail(dataMap.get(\"email\"));\n+    f.setCountry(dataMap.get(\"country\"));\n+    f.setPostalCode(dataMap.get(\"postalCode\"));\n+    f.setCity(dataMap.get(\"city\"));\n+    f.setStreet(dataMap.get(\"street\"));\n+    f.setStreetNo(dataMap.get(\"streetNo\"));\n+    f.setDateModified(new Date());\n+\n+    String contactMe = dataMap.get(\"contactMe\");\n+    if (contactMe != null) {\n+      f.setContactMe(Boolean.parseBoolean(contactMe));\n+    }\n+\n+    String allowStatistics = dataMap.get(\"allowsStatistics\");\n+    if (allowStatistics != null) {\n+      f.setAllowsStatistics(Boolean.parseBoolean(allowStatistics));\n+    }\n+\n+    String allowErrorReports = dataMap.get(\"allowsErrorReports\");\n+    if (allowErrorReports != null) {\n+      f.setAllowsErrorReports(Boolean.parseBoolean(allowErrorReports));\n+    }\n+\n+    String allowTechData = dataMap.get(\"allowsTechData\");\n+    if (allowTechData != null) {\n+      f.setAllowsTechData(Boolean.parseBoolean(allowTechData));\n+    }", "originalCommit": "dedd4d966ec6a2eac4a18263337fda5242a242d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1MDc1NA==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370550754", "bodyText": "Changed.", "author": "marwyg", "createdAt": "2020-01-24T09:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MTIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MzM5MQ==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370293391", "bodyText": "You are using GSON anyway and could use it for serialization here which should be much simpler \u2013 basically just:\nString jsonString = gson.toJson(form);", "author": "lkiesow", "createdAt": "2020-01-23T18:50:22Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopterstatistics/registration/Controller.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopterstatistics.registration;\n+\n+import static com.entwinemedia.fn.data.json.Jsons.f;\n+import static com.entwinemedia.fn.data.json.Jsons.obj;\n+import static com.entwinemedia.fn.data.json.Jsons.v;\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+import org.opencastproject.index.service.util.RestUtils;\n+import org.opencastproject.util.doc.rest.RestQuery;\n+import org.opencastproject.util.doc.rest.RestResponse;\n+import org.opencastproject.util.doc.rest.RestService;\n+\n+import com.entwinemedia.fn.data.json.Field;\n+import com.entwinemedia.fn.data.json.JValue;\n+import com.entwinemedia.fn.data.json.Jsons;\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * The REST endpoint for the adopter statistics service\n+ */\n+@Path(\"/\")\n+@RestService(name = \"registrationController\",\n+        title = \"Adopter Statistics Registration Service Endpoint\",\n+        abstractText = \"Rest Endpoint for the registration form.\",\n+        notes = {\"Provides operations regarding the adopter registration form\"})\n+public class Controller {\n+\n+  /** The logger */\n+  private static final Logger logger = LoggerFactory.getLogger(Controller.class);\n+\n+  /** The rest docs */\n+  protected String docs;\n+\n+  /** The service that provides methods for the registration */\n+  protected Service registrationService;\n+\n+  public void setRegistrationService(Service registrationService) {\n+    this.registrationService = registrationService;\n+  }\n+\n+\n+  private static final Type stringMapType = new TypeToken<Map<String, String>>() { }.getType();\n+  private static final Gson gson = new Gson();\n+  private static final SimpleDateFormat jsonDateFormat = new SimpleDateFormat(\"yyyy/MM/dd\");\n+\n+\n+  @GET\n+  @Path(\"registration\")\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"getregistrationform\", description = \"GETs the form data for the current logged in user\", reponses = {\n+          @RestResponse(description = \"Successful retrieved form data.\", responseCode = HttpServletResponse.SC_OK),\n+          @RestResponse(description = \"The underlying service could not output something.\", responseCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR) }, returnDescription = \"GETs the form data for a specific user.\")\n+  public Response getRegistrationForm() throws Exception {\n+\n+    logger.info(\"Retrieving statistics registration form for logged in user\");\n+    return RestUtils.okJson(formToJson(registrationService.retrieveFormData()));\n+  }\n+\n+  @POST\n+  @Path(\"registration\")\n+  @Consumes({MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON})\n+  @Produces(MediaType.APPLICATION_JSON)\n+  @RestQuery(name = \"saveregistrationform\",\n+          description = \"Saves the adopter statistics registration form\",\n+          returnDescription = \"Status\", reponses = {\n+          @RestResponse(responseCode = SC_OK, description = \"Theme created\"),\n+          @RestResponse(responseCode = SC_BAD_REQUEST, description = \"The theme references a non-existing file\") })\n+  public Response register(String data) {\n+\n+    Map<String, String> dataMap = gson.fromJson(data, stringMapType);\n+    Form f = jsonToForm(dataMap);\n+\n+    try {\n+      registrationService.saveFormData(f);\n+    } catch (Exception e) {\n+      return Response.serverError().build();\n+    }\n+\n+    return Response.ok().build();\n+  }\n+\n+  @GET\n+  @Produces(MediaType.TEXT_HTML)\n+  @Path(\"docs\")\n+  public String getDocs() {\n+    return docs;\n+  }\n+\n+  /**\n+   * Constructs a form object from a map\n+   * @param dataMap Form data as map\n+   *\n+   * @return The form object\n+   */\n+  private Form jsonToForm(Map<String, String> dataMap) {\n+    Form f = new Form();\n+    f.setOrganisationName(dataMap.get(\"organisationName\"));\n+    f.setDepartmentName(dataMap.get(\"departmentName\"));\n+    f.setFirstName(dataMap.get(\"firstName\"));\n+    f.setLastName(dataMap.get(\"lastName\"));\n+    f.setEmail(dataMap.get(\"email\"));\n+    f.setCountry(dataMap.get(\"country\"));\n+    f.setPostalCode(dataMap.get(\"postalCode\"));\n+    f.setCity(dataMap.get(\"city\"));\n+    f.setStreet(dataMap.get(\"street\"));\n+    f.setStreetNo(dataMap.get(\"streetNo\"));\n+    f.setDateModified(new Date());\n+\n+    String contactMe = dataMap.get(\"contactMe\");\n+    if (contactMe != null) {\n+      f.setContactMe(Boolean.parseBoolean(contactMe));\n+    }\n+\n+    String allowStatistics = dataMap.get(\"allowsStatistics\");\n+    if (allowStatistics != null) {\n+      f.setAllowsStatistics(Boolean.parseBoolean(allowStatistics));\n+    }\n+\n+    String allowErrorReports = dataMap.get(\"allowsErrorReports\");\n+    if (allowErrorReports != null) {\n+      f.setAllowsErrorReports(Boolean.parseBoolean(allowErrorReports));\n+    }\n+\n+    String allowTechData = dataMap.get(\"allowsTechData\");\n+    if (allowTechData != null) {\n+      f.setAllowsTechData(Boolean.parseBoolean(allowTechData));\n+    }\n+\n+    return f;\n+  }\n+\n+  /**\n+   * @return The JSON representation of the form.\n+   */\n+  private JValue formToJson(IForm iform) {", "originalCommit": "dedd4d966ec6a2eac4a18263337fda5242a242d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3ODE4OQ==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370578189", "bodyText": "Changed.", "author": "marwyg", "createdAt": "2020-01-24T10:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MzM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NjAxNw==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370296017", "bodyText": "Why by username?\nIn which scenario is this used?", "author": "lkiesow", "createdAt": "2020-01-23T18:55:58Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopterstatistics/registration/Form.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopterstatistics.registration;\n+\n+import org.opencastproject.security.api.Organization;\n+import org.opencastproject.util.EqualsUtil;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Access;\n+import javax.persistence.AccessType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+/**\n+ * JPA-annotated registration form object\n+ */\n+@Entity\n+@Access(AccessType.FIELD)\n+@Table(name = \"oc_statistic_registration\")\n+@NamedQueries({\n+        @NamedQuery(name = \"Form.findByUsername\", query = \"Select f FROM Form f where f.username = :username\"),", "originalCommit": "dedd4d966ec6a2eac4a18263337fda5242a242d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5ODQzNQ==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370298435", "bodyText": "You don't need to cast this if you use the TypedQuery interface above:\nTypedQuery<Integer> q = em.createQuery(\u2026, Integerclass);", "author": "lkiesow", "createdAt": "2020-01-23T19:01:04Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopterstatistics/registration/FormRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopterstatistics.registration;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.NoResultException;\n+import javax.persistence.Query;\n+\n+/**\n+ * Repository that handles registration forms for the adopter statistics\n+ */\n+public class FormRepositoryImpl implements FormRepository {\n+\n+  /**\n+   * The factory used to generate the entity manager.\n+   */\n+  protected EntityManagerFactory emf = null;\n+\n+  /**\n+   * Logging utilities\n+   */\n+  private static final Logger logger = LoggerFactory.getLogger(FormRepository.class);\n+\n+  /**\n+   * The setter for OSGI.\n+   *\n+   * @param emf The entity manager factory.\n+   */\n+  void setEntityManagerFactory(EntityManagerFactory emf) {\n+    this.emf = emf;\n+  }\n+\n+  @Override\n+  public void save(IForm f) throws FormRepositoryException {\n+    Form form = (Form) f;\n+    EntityManager em = null;\n+    EntityTransaction tx = null;\n+    try {\n+      em = emf.createEntityManager();\n+      tx = em.getTransaction();\n+      tx.begin();\n+      Form dbForm = findByUsername(form.getUsername(), em);\n+      if (dbForm == null) {\n+        if (countEntries(em) > 0) {\n+          throw new FormRepositoryException(\"There must be just one form entry in the DB\");\n+        }\n+        // There is no entry in the DB yet, so we create a UUID\n+        form.setAdopterKey(UUID.randomUUID().toString());\n+        form.setDateCreated(new Date());\n+        em.persist(form);\n+      } else {\n+        dbForm.merge(form);\n+        em.merge(dbForm);\n+      }\n+      tx.commit();\n+    } catch (Exception e) {\n+      logger.error(\"Could not update adopter statistics registration form: {}\", e.getMessage());\n+      if (tx.isActive()) {\n+        tx.rollback();\n+      }\n+      throw new FormRepositoryException(e);\n+    } finally {\n+      if (em != null)\n+        em.close();\n+    }\n+  }\n+\n+  private int countEntries(EntityManager em) {\n+    Query q = em.createNamedQuery(\"Form.findAllCount\");\n+    try {\n+      return ((Number) q.getSingleResult()).intValue();", "originalCommit": "dedd4d966ec6a2eac4a18263337fda5242a242d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1MzAxOQ==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370553019", "bodyText": "Changed.", "author": "marwyg", "createdAt": "2020-01-24T10:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5ODQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5OTEwOQ==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370299109", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ServiceImpl implements Service {\n          \n          \n            \n            public class AdopterRegistrationServiceImpl implements Service {", "author": "lkiesow", "createdAt": "2020-01-23T19:02:33Z", "path": "modules/adopter-statistics-impl/src/main/java/org/opencastproject/adopterstatistics/registration/ServiceImpl.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ *\n+ * The Apereo Foundation licenses this file to you under the Educational\n+ * Community License, Version 2.0 (the \"License\"); you may not use this file\n+ * except in compliance with the License. You may obtain a copy of the License\n+ * at:\n+ *\n+ *   http://opensource.org/licenses/ecl2.txt\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.opencastproject.adopterstatistics.registration;\n+\n+import org.opencastproject.security.api.SecurityService;\n+import org.opencastproject.security.api.User;\n+import org.opencastproject.util.NotFoundException;\n+\n+/**\n+ * This service is used for registration and retrieving form data for\n+ * the logged in user in the context of adopter statistics.\n+ */\n+public class ServiceImpl implements Service {", "originalCommit": "dedd4d966ec6a2eac4a18263337fda5242a242d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1MzkxNA==", "url": "https://github.com/opencast/opencast/pull/1363#discussion_r370553914", "bodyText": "Changed.", "author": "marwyg", "createdAt": "2020-01-24T10:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5OTEwOQ=="}], "type": "inlineReview"}]}