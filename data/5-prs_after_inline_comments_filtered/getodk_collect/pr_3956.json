{"pr_number": 3956, "pr_title": "Add form sync button to Fill Blank Forms", "pr_createdAt": "2020-07-02T17:03:02Z", "pr_url": "https://github.com/getodk/collect/pull/3956", "timeline": [{"oid": "f500635ba7dd6359b71264d3d17171386be1969f", "url": "https://github.com/getodk/collect/commit/f500635ba7dd6359b71264d3d17171386be1969f", "message": "Use ViewModel and Scheduler for form syncing", "committedDate": "2020-07-02T17:10:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1OTM0OQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r449159349", "bodyText": "It felt like a good idea to bring this back as the ServerPollingJob and DownloadFormListTask were both using it and don't have a lot of tests around them. This would make it riskier to iterate on and improve the ServerFormsDetailsFetcher.", "author": "seadowg", "createdAt": "2020-07-02T17:13:06Z", "path": "collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java", "diffHunk": "@@ -135,11 +135,11 @@ WebCredentialsUtils provideWebCredentials() {\n     }\n \n     @Provides\n-    ServerFormsDetailsFetcher provideDownloadFormListDownloader(\n+    FormListDownloader formListDownloader(", "originalCommit": "8768321dbfac4961f4a51c914865c56841f6f961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1OTUxMQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r449159511", "bodyText": "I'll deprecate in a later commit.", "author": "seadowg", "createdAt": "2020-07-02T17:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1OTM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxMTA3OA==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r449411078", "bodyText": "I think eventually this should also encapsulate DiskSyncTask, hold the list of forms that the adapter needs (probably as LiveData) and be responsible for sorting.", "author": "seadowg", "createdAt": "2020-07-03T07:02:02Z", "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/BlankFormsListViewModel.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.ViewModel;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.forms.MediaFileRepository;\n+import org.odk.collect.android.openrosa.api.FormAPI;\n+import org.odk.collect.android.openrosa.api.FormAPIError;\n+import org.odk.collect.android.utilities.MultiFormDownloader;\n+import org.odk.collect.async.Scheduler;\n+\n+import javax.inject.Inject;\n+\n+public class BlankFormsListViewModel extends ViewModel {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxMjM1NQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r449412355", "bodyText": "I had completely forgotten we could do this. I'm not usually a huge fan of @Injects scattered around the place randomly building the dependency graph for the app - as much as it's terse give me a 500 line module definition any day. However, in the case of ViewModel where we have to deal with Factory classes like this I think just being able to @Inject the constructor and then injecting it in the Activity cuts down on a lot of explicit dependencies at the Activity level that only get used for ViewModel construction.\nProbably a nice trick to use elsewhere.", "author": "seadowg", "createdAt": "2020-07-03T07:05:16Z", "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/BlankFormsListViewModel.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.ViewModel;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.forms.MediaFileRepository;\n+import org.odk.collect.android.openrosa.api.FormAPI;\n+import org.odk.collect.android.openrosa.api.FormAPIError;\n+import org.odk.collect.android.utilities.MultiFormDownloader;\n+import org.odk.collect.async.Scheduler;\n+\n+import javax.inject.Inject;\n+\n+public class BlankFormsListViewModel extends ViewModel {\n+\n+    private final Scheduler scheduler;\n+    private final FormRepository formRepository;\n+    private final MediaFileRepository mediaFileRepository;\n+    private final FormAPI formAPI;\n+    private final MultiFormDownloader multiFormDownloader;\n+\n+    private final MutableLiveData<Boolean> syncing = new MutableLiveData<>(false);\n+\n+    public BlankFormsListViewModel(Scheduler scheduler, FormRepository formRepository, MediaFileRepository mediaFileRepository, FormAPI formAPI, MultiFormDownloader multiFormDownloader) {\n+        this.scheduler = scheduler;\n+        this.formRepository = formRepository;\n+        this.mediaFileRepository = mediaFileRepository;\n+        this.formAPI = formAPI;\n+        this.multiFormDownloader = multiFormDownloader;\n+    }\n+\n+    public LiveData<Boolean> isSyncing() {\n+        return syncing;\n+    }\n+\n+    public void syncWithServer() {\n+        syncing.setValue(true);\n+\n+        scheduler.scheduleInBackground(() -> {\n+            try {\n+                ServerFormListSynchronizer synchronizer = new ServerFormListSynchronizer(formRepository, mediaFileRepository, formAPI, multiFormDownloader);\n+                synchronizer.synchronize();\n+            } catch (FormAPIError ignored) {\n+                // Ignored\n+            }\n+\n+            return null;\n+        }, ignored -> syncing.setValue(false));\n+    }\n+\n+    public static class Factory implements ViewModelProvider.Factory {\n+\n+        private final Scheduler scheduler;\n+        private final FormRepository formRepository;\n+        private final MediaFileRepository mediaFileRepository;\n+        private final FormAPI formAPI;\n+        private final MultiFormDownloader multiFormDownloader;\n+\n+        @Inject", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzOTEyOQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450539129", "bodyText": "typo", "author": "lognaturel", "createdAt": "2020-07-07T00:00:00Z", "path": "collect_app/src/main/java/org/odk/collect/android/dao/FormsDao.java", "diffHunk": "@@ -32,7 +32,7 @@\n import java.util.List;\n \n /**\n- * This class is used to encapsulate all access to the {@link org.odk.collect.android.database.helpers.FormsDatabaseHelper#DATABASE_NAME}\n+ * This class is used to encap`sulate all access to the {@link org.odk.collect.android.database.helpers.FormsDatabaseHelper#DATABASE_NAME}", "originalCommit": "c9b51a1b54068a68c55d4a5fe1fd82daf18c4248", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0ODYyMg==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450548622", "bodyText": "Should use the androidx annotations\nEdit: hmm, now I see we haven't been very consistent. I think in general we should use the androidx ones because of the android studio nullability analysis.", "author": "lognaturel", "createdAt": "2020-07-07T00:36:01Z", "path": "collect_app/src/main/java/org/odk/collect/android/openrosa/api/OpenRosaFormAPI.java", "diffHunk": "@@ -1,12 +1,11 @@\n package org.odk.collect.android.openrosa.api;\n \n import org.javarosa.xform.parse.XFormParser;\n+import org.jetbrains.annotations.NotNull;", "originalCommit": "78ea55d10e3e61c7c651b138a8c88faa2ab5572c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNDc2Ng==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450704766", "bodyText": "Hmmm. I think here I actually prefer the JetBrains one as this code has no other Android dependencies. Either work within Android Studio (as it's just IntelliJ under the hood). Does that sound ok?", "author": "seadowg", "createdAt": "2020-07-07T08:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0ODYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NDMwMQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450554301", "bodyText": "I think this needs to be more analogous to InstancesRepository. For that interface, the concrete implementation is called DatabaseInstancesRepository and it lives in the instances package which I like slightly better. I don't mind this if you strongly prefer it, though, but I think the two should be the same. I think DatabaseXRepository captures what's really meaningful and contrasts from the test implementation -- that it's fetching X from a database.", "author": "lognaturel", "createdAt": "2020-07-07T00:59:21Z", "path": "collect_app/src/main/java/org/odk/collect/android/dao/FormsDaoFormRepository.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.odk.collect.android.dao;\n+\n+import android.database.Cursor;\n+\n+import org.odk.collect.android.forms.Form;\n+import org.odk.collect.android.forms.FormRepository;\n+\n+import java.util.List;\n+\n+public class FormsDaoFormRepository implements FormRepository {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMjEzMw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450712133", "bodyText": "I'd managed to miss/forget about InstancesRepository but totally would have followed it's pattern if I hadn't. Will make those consistent.", "author": "seadowg", "createdAt": "2020-07-07T08:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NDMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NTQ2Mw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450555463", "bodyText": "API should be Api: https://google.github.io/styleguide/javaguide.html#s5.3-camel-case\nWould you consider FormListApi? That links it more clearly to the corresponding OpenRosa standard https://docs.getodk.org/openrosa-form-list/. It makes sense to me that fetching the manifest is a subset of fetching the form list.", "author": "lognaturel", "createdAt": "2020-07-07T01:03:52Z", "path": "collect_app/src/main/java/org/odk/collect/android/openrosa/api/FormAPI.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.odk.collect.android.openrosa.api;\n+\n+import java.util.List;\n+\n+public interface FormAPI {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzMwNg==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450707306", "bodyText": "So I've had feedback when pairing with newer or English-as-a-second-language engineers that the uppercasing helps identify acronyms they don't know, so I tend to go with that. However, we do reference that style guide and I don't want to get into debating exceptions! I'll fix.", "author": "seadowg", "createdAt": "2020-07-07T08:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NTQ2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NTUwOA==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450555508", "bodyText": "FormApiError", "author": "lognaturel", "createdAt": "2020-07-07T01:04:03Z", "path": "collect_app/src/main/java/org/odk/collect/android/openrosa/api/FormAPIError.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.odk.collect.android.openrosa.api;\n+\n+public class FormAPIError extends Exception {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwODE2Mw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450708163", "bodyText": "I'm also going to rename this to ...Exception while I'm here. I'm way to cavalier around the difference between those.", "author": "seadowg", "createdAt": "2020-07-07T08:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NTUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNzEzMQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450607131", "bodyText": "At https://forum.getodk.org/t/have-collect-exactly-match-the-forms-on-central/23101, we had described doing a soft delete so that saved records could still be edited. Unfortunately that does need adding to the db schema, I think. Maybe something to discuss.", "author": "lognaturel", "createdAt": "2020-07-07T04:41:33Z", "path": "collect_app/src/main/java/org/odk/collect/android/dao/FormsDaoFormRepository.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.odk.collect.android.dao;\n+\n+import android.database.Cursor;\n+\n+import org.odk.collect.android.forms.Form;\n+import org.odk.collect.android.forms.FormRepository;\n+\n+import java.util.List;\n+\n+public class FormsDaoFormRepository implements FormRepository {\n+\n+    @Override\n+    public boolean contains(String jrFormID) {\n+        try (Cursor cursor = new FormsDao().getFormsCursorForFormId(jrFormID)) {\n+            return cursor != null && cursor.getCount() > 0;\n+        }\n+    }\n+\n+    @Override\n+    public List<Form> getAll() {\n+        try (Cursor cursor = new FormsDao().getFormsCursor()) {\n+            return new FormsDao().getFormsFromCursor(cursor);\n+        }\n+    }\n+\n+    @Override\n+    public void save(Form form) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void delete(Long id) {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwOTYxMw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450709613", "bodyText": "For some reason I'd assumed that was what was happening from how we were talking about. Good to add something like this at an acceptance level I think so it's really clear what we mean. I think looking at this as a separate issue would be good!", "author": "seadowg", "createdAt": "2020-07-07T08:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNzEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE0NjA0Mw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r451146043", "bodyText": "Filed #3961. You should be able to edit the issue as needed!", "author": "lognaturel", "createdAt": "2020-07-07T21:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNzEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwODAwNA==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450608004", "bodyText": "Should be OpenRosaXmlFetcher", "author": "lognaturel", "createdAt": "2020-07-07T04:45:34Z", "path": "collect_app/src/main/java/org/odk/collect/android/openrosa/OpenRosaXMLFetcher.java", "diffHunk": "@@ -21,15 +21,15 @@\n \n import timber.log.Timber;\n \n-public class OpenRosaAPIClient {\n+public class OpenRosaXMLFetcher {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwODU1Ng==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450608556", "bodyText": "why not in formmanagement?", "author": "lognaturel", "createdAt": "2020-07-07T04:48:16Z", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/MultiFormDownloader.java", "diffHunk": "@@ -56,26 +58,28 @@\n import static org.odk.collect.android.utilities.FileUtils.STUB_XML;\n import static org.odk.collect.android.utilities.FileUtils.write;\n \n-public class FormDownloader {\n+public class MultiFormDownloader implements FormDownloader {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMDk4OQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450710989", "bodyText": "I think I didn't feel like it was ready to go there yet as we still haven't taken a stab at cleaning it up? Maybe that's silly. What do you think?", "author": "seadowg", "createdAt": "2020-07-07T08:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwODU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwOTE4Nw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450609187", "bodyText": "Need test and implementation to hide refresh button when setting is off.", "author": "lognaturel", "createdAt": "2020-07-07T04:50:53Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/settings/MatchExactlyTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.odk.collect.android.feature.settings;\n+\n+import android.Manifest;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.openrosa.OpenRosaHttpInterface;\n+import org.odk.collect.android.support.CollectTestRule;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.CountingScheduler;\n+import org.odk.collect.android.support.CountingSchedulerIdlingResource;\n+import org.odk.collect.android.support.IdlingResourceRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.StubOpenRosaServer;\n+import org.odk.collect.async.CoroutineScheduler;\n+import org.odk.collect.async.Scheduler;\n+import org.odk.collect.utilities.UserAgentProvider;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MatchExactlyTest {\n+\n+    public final StubOpenRosaServer server = new StubOpenRosaServer();\n+    private final CountingScheduler countingScheduler = new CountingScheduler(new CoroutineScheduler());\n+\n+    public CollectTestRule rule = new CollectTestRule();\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                public OpenRosaHttpInterface provideHttpInterface(MimeTypeMap mimeTypeMap, UserAgentProvider userAgentProvider) {\n+                    return server;\n+                }\n+\n+                @Override\n+                public Scheduler providesScheduler() {\n+                    return countingScheduler;\n+                }\n+            }))\n+            .around(new IdlingResourceRule(new CountingSchedulerIdlingResource(countingScheduler)))\n+            .around(new CopyFormRule(\"one-question.xml\"))\n+            .around(new CopyFormRule(\"one-question-repeat.xml\"))\n+            .around(rule);\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_clickingFillBlankForm_andClickingRefresh_getsLatestFormsFromServer() {\n+        server.addForm(\"One Question Updated\", \"one_question\", \"one-question-updated.xml\");\n+        server.addForm(\"Two Question\", \"two_question\", \"two-question.xml\");\n+\n+        rule.mainMenu()\n+                .setServer(server.getURL())\n+                .enableMatchExactly()\n+                .clickFillBlankForm()\n+                .assertText(\"One Question\")\n+                .assertText(\"One Question Repeat\")\n+                .clickRefresh()\n+                .assertText(\"Two Question\") // Check new form downloaded\n+                .assertText(\"One Question Updated\") // Check updated form updated\n+                .assertTextDoesNotExist(\"One Question Repeat\"); // Check deleted form deleted\n+    }\n+", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMDU3NQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450710575", "bodyText": "\ud83e\udd2d talk about getting caught up in what you're working on! Definitely needs fixed.", "author": "seadowg", "createdAt": "2020-07-07T08:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwOTE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwOTQ0NA==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450609444", "bodyText": "Consider OpenRosaFormListApi", "author": "lognaturel", "createdAt": "2020-07-07T04:51:48Z", "path": "collect_app/src/main/java/org/odk/collect/android/openrosa/api/OpenRosaFormAPI.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package org.odk.collect.android.openrosa.api;\n+\n+import org.javarosa.xform.parse.XFormParser;\n+import org.jetbrains.annotations.NotNull;\n+import org.kxml2.kdom.Element;\n+import org.odk.collect.android.openrosa.OpenRosaXMLFetcher;\n+import org.odk.collect.android.openrosa.api.FormAPIError.Type;\n+import org.odk.collect.android.utilities.DocumentFetchResult;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.odk.collect.android.openrosa.api.FormAPIError.Type.AUTH_REQUIRED;\n+import static org.odk.collect.android.openrosa.api.FormAPIError.Type.FETCH_ERROR;\n+import static org.odk.collect.android.openrosa.api.FormAPIError.Type.PARSE_ERROR;\n+\n+public class OpenRosaFormAPI implements FormAPI {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwOTcxNA==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450609714", "bodyText": "Change to w so we don't forget later? I don't think any of these would point to a software error we can fix.", "author": "lognaturel", "createdAt": "2020-07-07T04:52:59Z", "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormsDetailsFetcher.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2018 Nafundi\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.odk.collect.android.formmanagement;\n+\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.forms.MediaFileRepository;\n+import org.odk.collect.android.logic.FormDetails;\n+import org.odk.collect.android.openrosa.api.FormAPI;\n+import org.odk.collect.android.openrosa.api.FormAPIError;\n+import org.odk.collect.android.openrosa.api.FormListItem;\n+import org.odk.collect.android.openrosa.api.ManifestFile;\n+import org.odk.collect.android.openrosa.api.MediaFile;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.MultiFormDownloader;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+public class ServerFormsDetailsFetcher {\n+\n+    private final FormRepository formRepository;\n+    private final MediaFileRepository mediaFileRepository;\n+    private final FormAPI formAPI;\n+\n+    public ServerFormsDetailsFetcher(FormRepository formRepository,\n+                                     MediaFileRepository mediaFileRepository,\n+                                     FormAPI formAPI) {\n+        this.formRepository = formRepository;\n+        this.mediaFileRepository = mediaFileRepository;\n+        this.formAPI = formAPI;\n+    }\n+\n+    public List<FormDetails> fetchFormDetails() throws FormAPIError {\n+        return fetchFormDetails(true);\n+    }\n+\n+    public List<FormDetails> fetchFormDetails(boolean checkMediaFiles) throws FormAPIError {\n+        List<FormListItem> formListItems = formAPI.fetchFormList();\n+        List<FormDetails> formDetailsList = new ArrayList<>();\n+\n+        for (FormListItem listItem : formListItems) {\n+            boolean isNewerFormVersionAvailable = false;\n+            boolean areNewerMediaFilesAvailable = false;\n+            ManifestFile manifestFile = null;\n+\n+            if (isThisFormAlreadyDownloaded(listItem.getFormID())) {\n+                isNewerFormVersionAvailable = isNewerFormVersionAvailable(MultiFormDownloader.getMd5Hash(listItem.getHashWithPrefix()));\n+                if ((!isNewerFormVersionAvailable || checkMediaFiles) && listItem.getManifestURL() != null) {\n+                    manifestFile = getManifestFile(formAPI, listItem.getManifestURL());\n+                    if (manifestFile != null) {\n+                        List<MediaFile> newMediaFiles = manifestFile.getMediaFiles();\n+                        if (newMediaFiles != null && !newMediaFiles.isEmpty()) {\n+                            areNewerMediaFilesAvailable = areNewerMediaFilesAvailable(listItem.getFormID(), listItem.getVersion(), newMediaFiles);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            FormDetails formDetails = FormDetails.toFormDetails(\n+                    listItem,\n+                    manifestFile != null ? manifestFile.getHash() : null,\n+                    isNewerFormVersionAvailable,\n+                    areNewerMediaFilesAvailable\n+            );\n+\n+            formDetailsList.add(formDetails);\n+        }\n+        return formDetailsList;\n+    }\n+\n+    private boolean isThisFormAlreadyDownloaded(String formId) {\n+        return formRepository.contains(formId);\n+    }\n+\n+    private ManifestFile getManifestFile(FormAPI formAPI, String manifestUrl) {\n+        if (manifestUrl == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return formAPI.fetchManifest(manifestUrl);\n+        } catch (FormAPIError formAPIError) {\n+            Timber.e(formAPIError);", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDIwNA==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450610204", "bodyText": "This is n^2, right? Both lists are going to be relatively small in this case so I think it's ok but we should be careful if doing similar things with e.g. instances at some point. I feel like streams can hide complexity in a kind of scary way sometimes.", "author": "lognaturel", "createdAt": "2020-07-07T04:55:09Z", "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormListSynchronizer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import org.odk.collect.android.forms.Form;\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.forms.MediaFileRepository;\n+import org.odk.collect.android.logic.FormDetails;\n+import org.odk.collect.android.openrosa.api.FormAPI;\n+import org.odk.collect.android.openrosa.api.FormAPIError;\n+\n+import java.util.List;\n+\n+public class ServerFormListSynchronizer {\n+\n+    private final FormRepository formRepository;\n+    private final MediaFileRepository mediaFileRepository;\n+    private final FormAPI formAPI;\n+    private final FormDownloader formDownloader;\n+\n+    public ServerFormListSynchronizer(FormRepository formRepository, MediaFileRepository mediaFileRepository, FormAPI formAPI, FormDownloader formDownloader) {\n+        this.formRepository = formRepository;\n+        this.mediaFileRepository = mediaFileRepository;\n+        this.formAPI = formAPI;\n+        this.formDownloader = formDownloader;\n+    }\n+\n+    public void synchronize() throws FormAPIError {\n+        ServerFormsDetailsFetcher listDownloader = new ServerFormsDetailsFetcher(formRepository, mediaFileRepository, formAPI);\n+        List<FormDetails> formList = listDownloader.fetchFormDetails();\n+\n+        List<Form> formsOnDevice = formRepository.getAll();\n+\n+        formsOnDevice.stream().forEach(form -> {\n+            if (formList.stream().noneMatch(f -> form.getJrFormId().equals(f.getFormId()))) {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc0OTc1MA==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450749750", "bodyText": "Interesting. I tend to find the opposite is true as it feels clearer where the loops are happening.\nThis is set difference so without sorting I don't think we can do better than O(n^2) right? I guess maybe using a HashMap or HashSet could get us O(1) complexity (in theory) on remove operations which gives us linear time. I need more tea \u2615\ufe0f", "author": "seadowg", "createdAt": "2020-07-07T09:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDkwMQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450610901", "bodyText": "Consider adding a repository method to get a form by md5hash? Seems clearer and more efficient.", "author": "lognaturel", "createdAt": "2020-07-07T04:58:07Z", "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormsDetailsFetcher.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2018 Nafundi\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.odk.collect.android.formmanagement;\n+\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.forms.MediaFileRepository;\n+import org.odk.collect.android.logic.FormDetails;\n+import org.odk.collect.android.openrosa.api.FormAPI;\n+import org.odk.collect.android.openrosa.api.FormAPIError;\n+import org.odk.collect.android.openrosa.api.FormListItem;\n+import org.odk.collect.android.openrosa.api.ManifestFile;\n+import org.odk.collect.android.openrosa.api.MediaFile;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.MultiFormDownloader;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+public class ServerFormsDetailsFetcher {\n+\n+    private final FormRepository formRepository;\n+    private final MediaFileRepository mediaFileRepository;\n+    private final FormAPI formAPI;\n+\n+    public ServerFormsDetailsFetcher(FormRepository formRepository,\n+                                     MediaFileRepository mediaFileRepository,\n+                                     FormAPI formAPI) {\n+        this.formRepository = formRepository;\n+        this.mediaFileRepository = mediaFileRepository;\n+        this.formAPI = formAPI;\n+    }\n+\n+    public List<FormDetails> fetchFormDetails() throws FormAPIError {\n+        return fetchFormDetails(true);\n+    }\n+\n+    public List<FormDetails> fetchFormDetails(boolean checkMediaFiles) throws FormAPIError {\n+        List<FormListItem> formListItems = formAPI.fetchFormList();\n+        List<FormDetails> formDetailsList = new ArrayList<>();\n+\n+        for (FormListItem listItem : formListItems) {\n+            boolean isNewerFormVersionAvailable = false;\n+            boolean areNewerMediaFilesAvailable = false;\n+            ManifestFile manifestFile = null;\n+\n+            if (isThisFormAlreadyDownloaded(listItem.getFormID())) {\n+                isNewerFormVersionAvailable = isNewerFormVersionAvailable(MultiFormDownloader.getMd5Hash(listItem.getHashWithPrefix()));\n+                if ((!isNewerFormVersionAvailable || checkMediaFiles) && listItem.getManifestURL() != null) {\n+                    manifestFile = getManifestFile(formAPI, listItem.getManifestURL());\n+                    if (manifestFile != null) {\n+                        List<MediaFile> newMediaFiles = manifestFile.getMediaFiles();\n+                        if (newMediaFiles != null && !newMediaFiles.isEmpty()) {\n+                            areNewerMediaFilesAvailable = areNewerMediaFilesAvailable(listItem.getFormID(), listItem.getVersion(), newMediaFiles);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            FormDetails formDetails = FormDetails.toFormDetails(\n+                    listItem,\n+                    manifestFile != null ? manifestFile.getHash() : null,\n+                    isNewerFormVersionAvailable,\n+                    areNewerMediaFilesAvailable\n+            );\n+\n+            formDetailsList.add(formDetails);\n+        }\n+        return formDetailsList;\n+    }\n+\n+    private boolean isThisFormAlreadyDownloaded(String formId) {\n+        return formRepository.contains(formId);\n+    }\n+\n+    private ManifestFile getManifestFile(FormAPI formAPI, String manifestUrl) {\n+        if (manifestUrl == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return formAPI.fetchManifest(manifestUrl);\n+        } catch (FormAPIError formAPIError) {\n+            Timber.e(formAPIError);\n+            return null;\n+        }\n+    }\n+\n+    private boolean isNewerFormVersionAvailable(String md5Hash) {\n+        if (md5Hash == null) {\n+            return false;\n+        }\n+\n+        return formRepository.getAll().stream().noneMatch(f -> f.getMD5Hash().equals(md5Hash));", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMzQ1Ng==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450713456", "bodyText": "Yeah that seems like a nice optimization!", "author": "seadowg", "createdAt": "2020-07-07T08:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMDkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMjY0MQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450612641", "bodyText": "I'm not loving all this. Isn't FormDetails a wrapper for a FormListItem that provides status information? Maybe a FormDetails should have a FormListItem field? Maybe it should be FormListItemStatus?", "author": "lognaturel", "createdAt": "2020-07-07T05:04:50Z", "path": "collect_app/src/main/java/org/odk/collect/android/logic/FormDetails.java", "diffHunk": "@@ -87,4 +90,48 @@ public boolean isNewerFormVersionAvailable() {\n     public boolean areNewerMediaFilesAvailable() {\n         return areNewerMediaFilesAvailable;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        FormDetails that = (FormDetails) o;\n+        return isNewerFormVersionAvailable() == that.isNewerFormVersionAvailable() &&\n+                areNewerMediaFilesAvailable == that.areNewerMediaFilesAvailable &&\n+                Objects.equals(getErrorStr(), that.getErrorStr()) &&\n+                Objects.equals(getFormName(), that.getFormName()) &&\n+                Objects.equals(getDownloadUrl(), that.getDownloadUrl()) &&\n+                Objects.equals(getManifestUrl(), that.getManifestUrl()) &&\n+                Objects.equals(formID, that.formID) &&\n+                Objects.equals(getFormVersion(), that.getFormVersion()) &&\n+                Objects.equals(getHash(), that.getHash()) &&\n+                Objects.equals(getManifestFileHash(), that.getManifestFileHash());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getErrorStr(), getFormName(), getDownloadUrl(), getManifestUrl(), formID, getFormVersion(), getHash(), getManifestFileHash(), isNewerFormVersionAvailable(), areNewerMediaFilesAvailable);\n+    }\n+\n+    public static FormDetails toFormDetails(FormListItem formListItem) {\n+        return toFormDetails(formListItem, null, false, false);\n+    }\n+\n+    public static FormDetails toFormDetails(FormListItem formListItem, String manifestFileHash, boolean isNewerFormVersionAvailable, boolean areNewerMediaFilesAvailable) {", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxNDI3Ng==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450714276", "bodyText": "Yeah actually this is something I meant to come back to. Initially I'd thought I'd be getting rid of FormDetails so this was a way of converting between those values while I worked towards that. You're right that it seems really funky now. I'll take a look at cleaning it up.", "author": "seadowg", "createdAt": "2020-07-07T08:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMjY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMzY2NA==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450613664", "bodyText": "Is all this really necessary? Wouldn't comparing the hash and the error string be sufficient? The download URL would also be needed if somehow you could have downloads from multiple servers going on at the same time but I don't think we have any intention of making that possible. It seems weird to compare these status objects, anyway. Where is this used? Or is it just hashing that ends up getting used?", "author": "lognaturel", "createdAt": "2020-07-07T05:08:43Z", "path": "collect_app/src/main/java/org/odk/collect/android/logic/FormDetails.java", "diffHunk": "@@ -87,4 +90,48 @@ public boolean isNewerFormVersionAvailable() {\n     public boolean areNewerMediaFilesAvailable() {\n         return areNewerMediaFilesAvailable;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        FormDetails that = (FormDetails) o;\n+        return isNewerFormVersionAvailable() == that.isNewerFormVersionAvailable() &&", "originalCommit": "7509c58681820585ebeb00737bfbb9f23250d2c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxODU5Mw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r450718593", "bodyText": "This is just using the Android Studio equals/hash generator. Probably good to add a comment when I do that. Generally I'd argue for \"data\" objects like this it makes sense to just compare the whole thing (like we'd get with Lombok or Kotlin) unless we have a very good reason to do otherwise.\nI generated this for testing with mockito but I ended up converting to a fake (which makes life easier) so I can just kill this code.", "author": "seadowg", "createdAt": "2020-07-07T09:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMzY2NA=="}], "type": "inlineReview"}, {"oid": "751d9e7dfaef0d8b0130aadb4cbc8c3920aba46e", "url": "https://github.com/getodk/collect/commit/751d9e7dfaef0d8b0130aadb4cbc8c3920aba46e", "message": "Hide Get Blank Form when match exactly enabled", "committedDate": "2020-07-07T16:07:07Z", "type": "commit"}, {"oid": "5d764003912fdce3efb7ac6437282664455e6179", "url": "https://github.com/getodk/collect/commit/5d764003912fdce3efb7ac6437282664455e6179", "message": "Disable form update options when match exactly enabled", "committedDate": "2020-07-07T16:07:08Z", "type": "commit"}, {"oid": "77e6913707ab156054301bf37fb758fe622cfe98", "url": "https://github.com/getodk/collect/commit/77e6913707ab156054301bf37fb758fe622cfe98", "message": "Add experimental settings", "committedDate": "2020-07-07T16:07:08Z", "type": "commit"}, {"oid": "588acc7068bcc845bf851166b49de50bee96c65c", "url": "https://github.com/getodk/collect/commit/588acc7068bcc845bf851166b49de50bee96c65c", "message": "Add failing test for match exactly refresh", "committedDate": "2020-07-07T16:10:17Z", "type": "commit"}, {"oid": "a8190912aa9fa5e2234ddb25e18ed54582010720", "url": "https://github.com/getodk/collect/commit/a8190912aa9fa5e2234ddb25e18ed54582010720", "message": "Add naive implementation to make test green", "committedDate": "2020-07-07T16:10:18Z", "type": "commit"}, {"oid": "ba199d30ff88436f5736990bcca7f0ef307de74d", "url": "https://github.com/getodk/collect/commit/ba199d30ff88436f5736990bcca7f0ef307de74d", "message": "Replace match exactly implementation with smarter but nastier version", "committedDate": "2020-07-07T16:10:19Z", "type": "commit"}, {"oid": "784c1fabbdf842380e8fb1bd870da5a9ddb05cd8", "url": "https://github.com/getodk/collect/commit/784c1fabbdf842380e8fb1bd870da5a9ddb05cd8", "message": "Make FormDownloader stateless", "committedDate": "2020-07-07T16:10:19Z", "type": "commit"}, {"oid": "17c9b0b9f81e8ab48d5005805729987afb4c09af", "url": "https://github.com/getodk/collect/commit/17c9b0b9f81e8ab48d5005805729987afb4c09af", "message": "Inject FormDownloader for match exactly logic", "committedDate": "2020-07-07T16:10:19Z", "type": "commit"}, {"oid": "b32884c72e6476dad90d8ede9d46a22d215a5786", "url": "https://github.com/getodk/collect/commit/b32884c72e6476dad90d8ede9d46a22d215a5786", "message": "Rename class", "committedDate": "2020-07-07T16:10:19Z", "type": "commit"}, {"oid": "86da699fc1d4b1d6082838b6a7857db3fbc49a95", "url": "https://github.com/getodk/collect/commit/86da699fc1d4b1d6082838b6a7857db3fbc49a95", "message": "Factor out tested use case for syncing forms with server", "committedDate": "2020-07-07T16:10:19Z", "type": "commit"}, {"oid": "55039932cd9a8b71a84c9eb2152eb934be5c316a", "url": "https://github.com/getodk/collect/commit/55039932cd9a8b71a84c9eb2152eb934be5c316a", "message": "Use FormAPI abstraction from sync use case", "committedDate": "2020-07-07T16:10:19Z", "type": "commit"}, {"oid": "3214209eed0a8e96a423494eb0339cfe95858d15", "url": "https://github.com/getodk/collect/commit/3214209eed0a8e96a423494eb0339cfe95858d15", "message": "Create OpenRosaFormAPI for fetching form lists", "committedDate": "2020-07-07T16:10:19Z", "type": "commit"}, {"oid": "6833ec7455767acaa2d799dff3a50899bf7d2b3f", "url": "https://github.com/getodk/collect/commit/6833ec7455767acaa2d799dff3a50899bf7d2b3f", "message": "Use FormAPI in FormListDownloader", "committedDate": "2020-07-07T16:10:20Z", "type": "commit"}, {"oid": "11c81d84c7db7bf628e1e2c0f7ac6eabfc4ecc41", "url": "https://github.com/getodk/collect/commit/11c81d84c7db7bf628e1e2c0f7ac6eabfc4ecc41", "message": "Show progress bar when syncing forms", "committedDate": "2020-07-07T16:10:20Z", "type": "commit"}, {"oid": "43eac679f04e9775ddd7f7de177d46fe2288486c", "url": "https://github.com/getodk/collect/commit/43eac679f04e9775ddd7f7de177d46fe2288486c", "message": "Download forms when media files change", "committedDate": "2020-07-07T16:10:20Z", "type": "commit"}, {"oid": "a8e087b7375a8a7b9dd085278c1ee9b4f945b80f", "url": "https://github.com/getodk/collect/commit/a8e087b7375a8a7b9dd085278c1ee9b4f945b80f", "message": "Remove unused methods from Form", "committedDate": "2020-07-07T16:10:20Z", "type": "commit"}, {"oid": "765105f682610cb29a0ccc4d245150aec3d39293", "url": "https://github.com/getodk/collect/commit/765105f682610cb29a0ccc4d245150aec3d39293", "message": "Use repositories in FormListDownloader", "committedDate": "2020-07-07T16:10:20Z", "type": "commit"}, {"oid": "0b1e4e8b475f0fab78a2dff173646cd263eaa27f", "url": "https://github.com/getodk/collect/commit/0b1e4e8b475f0fab78a2dff173646cd263eaa27f", "message": "Move manifest API classes", "committedDate": "2020-07-07T16:10:20Z", "type": "commit"}, {"oid": "45516197a4adb48638a8137fd84c16d19fe499e0", "url": "https://github.com/getodk/collect/commit/45516197a4adb48638a8137fd84c16d19fe499e0", "message": "Create new formmanagement package", "committedDate": "2020-07-07T16:10:20Z", "type": "commit"}, {"oid": "ebc81654f8d08bd8fefafd9186340afc41a25541", "url": "https://github.com/getodk/collect/commit/ebc81654f8d08bd8fefafd9186340afc41a25541", "message": "Move FormListDownloader to management package", "committedDate": "2020-07-07T16:10:21Z", "type": "commit"}, {"oid": "5a6fd01b9028d66ba5707227299f9bacd6f353a6", "url": "https://github.com/getodk/collect/commit/5a6fd01b9028d66ba5707227299f9bacd6f353a6", "message": "Use FormListDownloader to implement sync", "committedDate": "2020-07-07T16:10:21Z", "type": "commit"}, {"oid": "e3706d342e06ac5abf83866c0743dbfb2cbecd4e", "url": "https://github.com/getodk/collect/commit/e3706d342e06ac5abf83866c0743dbfb2cbecd4e", "message": "Rename FormListDownloader", "committedDate": "2020-07-07T16:10:21Z", "type": "commit"}, {"oid": "cfa89fcf050651d0c6edf18d7b24a2f520660c00", "url": "https://github.com/getodk/collect/commit/cfa89fcf050651d0c6edf18d7b24a2f520660c00", "message": "Fix incorrect tests", "committedDate": "2020-07-07T16:10:21Z", "type": "commit"}, {"oid": "5a0e62bae7f9a79e50a430f4fa975bb9f66a1cab", "url": "https://github.com/getodk/collect/commit/5a0e62bae7f9a79e50a430f4fa975bb9f66a1cab", "message": "Throw errors from new ServerFormsDetailsFetcher method", "committedDate": "2020-07-07T16:10:21Z", "type": "commit"}, {"oid": "f27a7d2265eeb75eae610c69b0526bf186d506fb", "url": "https://github.com/getodk/collect/commit/f27a7d2265eeb75eae610c69b0526bf186d506fb", "message": "Pull old FormListDownloader out of new component to make replacing simpler", "committedDate": "2020-07-07T16:10:21Z", "type": "commit"}, {"oid": "d1fe3feecbf3214224f889f9c31fcf3a8b37e58d", "url": "https://github.com/getodk/collect/commit/d1fe3feecbf3214224f889f9c31fcf3a8b37e58d", "message": "Simplify methods in ServerFormsDetailsFetcher", "committedDate": "2020-07-07T16:10:21Z", "type": "commit"}, {"oid": "a8d17f970a372a7c7010503bb401a52ae22dd114", "url": "https://github.com/getodk/collect/commit/a8d17f970a372a7c7010503bb401a52ae22dd114", "message": "Use ViewModel and Scheduler for form syncing", "committedDate": "2020-07-07T16:10:22Z", "type": "commit"}, {"oid": "df6d4e098d593bb5454ced209d905f3c6adf2e43", "url": "https://github.com/getodk/collect/commit/df6d4e098d593bb5454ced209d905f3c6adf2e43", "message": "Deprecate FormListDownloader", "committedDate": "2020-07-07T16:10:22Z", "type": "commit"}, {"oid": "5fda653646425e032474f7db8ec4f2db834067ad", "url": "https://github.com/getodk/collect/commit/5fda653646425e032474f7db8ec4f2db834067ad", "message": "Correct camel style and correct typos", "committedDate": "2020-07-07T16:10:22Z", "type": "commit"}, {"oid": "2fc19c9e12e293d55a4d2e32efb2df746432d00f", "url": "https://github.com/getodk/collect/commit/2fc19c9e12e293d55a4d2e32efb2df746432d00f", "message": "Remove Timber error logging", "committedDate": "2020-07-07T16:10:22Z", "type": "commit"}, {"oid": "071e0ec02cdf8f2ab223e6a0e2231ff32c8bbc2b", "url": "https://github.com/getodk/collect/commit/071e0ec02cdf8f2ab223e6a0e2231ff32c8bbc2b", "message": "Remove unused equals/hashcode", "committedDate": "2020-07-07T16:10:22Z", "type": "commit"}, {"oid": "7a5a805490c0dcc0ed89b587010935d555876be0", "url": "https://github.com/getodk/collect/commit/7a5a805490c0dcc0ed89b587010935d555876be0", "message": "Make repositories consistent", "committedDate": "2020-07-07T16:10:22Z", "type": "commit"}, {"oid": "eb3283787368c4df9832d9217690dd3381a530fa", "url": "https://github.com/getodk/collect/commit/eb3283787368c4df9832d9217690dd3381a530fa", "message": "Hide match exactly refresh button when not enabled", "committedDate": "2020-07-07T16:10:22Z", "type": "commit"}, {"oid": "52e55f3f967908b1e3899b6d2ff57d0718a940af", "url": "https://github.com/getodk/collect/commit/52e55f3f967908b1e3899b6d2ff57d0718a940af", "message": "Add method to fetch forms by hash", "committedDate": "2020-07-07T16:10:23Z", "type": "commit"}, {"oid": "8f7ea1e93ea7870c3e5fffe5eaa5f48bb7c8647b", "url": "https://github.com/getodk/collect/commit/8f7ea1e93ea7870c3e5fffe5eaa5f48bb7c8647b", "message": "Rename FormApi", "committedDate": "2020-07-07T16:10:23Z", "type": "commit"}, {"oid": "19e081ffed9af4a6a5695fdb7e0d9cfa22dd4083", "url": "https://github.com/getodk/collect/commit/19e081ffed9af4a6a5695fdb7e0d9cfa22dd4083", "message": "Isolate converting between FormListItem and FormDetails to ServerFormDetailsFetcher", "committedDate": "2020-07-07T16:10:23Z", "type": "commit"}, {"oid": "19e081ffed9af4a6a5695fdb7e0d9cfa22dd4083", "url": "https://github.com/getodk/collect/commit/19e081ffed9af4a6a5695fdb7e0d9cfa22dd4083", "message": "Isolate converting between FormListItem and FormDetails to ServerFormDetailsFetcher", "committedDate": "2020-07-07T16:10:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE0NzkxMw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r451147913", "bodyText": "This should be whenMatchExactlyNotEnabled or whenMatchExactlyDisabled or whatever!", "author": "lognaturel", "createdAt": "2020-07-07T21:15:51Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/settings/MatchExactlyTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.odk.collect.android.feature.settings;\n+\n+import android.Manifest;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.openrosa.OpenRosaHttpInterface;\n+import org.odk.collect.android.support.CollectTestRule;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.CountingScheduler;\n+import org.odk.collect.android.support.CountingSchedulerIdlingResource;\n+import org.odk.collect.android.support.IdlingResourceRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.StubOpenRosaServer;\n+import org.odk.collect.async.CoroutineScheduler;\n+import org.odk.collect.async.Scheduler;\n+import org.odk.collect.utilities.UserAgentProvider;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.assertion.ViewAssertions.doesNotExist;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MatchExactlyTest {\n+\n+    public final StubOpenRosaServer server = new StubOpenRosaServer();\n+    private final CountingScheduler countingScheduler = new CountingScheduler(new CoroutineScheduler());\n+\n+    public CollectTestRule rule = new CollectTestRule();\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                public OpenRosaHttpInterface provideHttpInterface(MimeTypeMap mimeTypeMap, UserAgentProvider userAgentProvider) {\n+                    return server;\n+                }\n+\n+                @Override\n+                public Scheduler providesScheduler() {\n+                    return countingScheduler;\n+                }\n+            }))\n+            .around(new IdlingResourceRule(new CountingSchedulerIdlingResource(countingScheduler)))\n+            .around(new CopyFormRule(\"one-question.xml\"))\n+            .around(new CopyFormRule(\"one-question-repeat.xml\"))\n+            .around(rule);\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_clickingFillBlankForm_andClickingRefresh_getsLatestFormsFromServer() {\n+        server.addForm(\"One Question Updated\", \"one_question\", \"one-question-updated.xml\");\n+        server.addForm(\"Two Question\", \"two_question\", \"two-question.xml\");\n+\n+        rule.mainMenu()\n+                .setServer(server.getURL())\n+                .enableMatchExactly()\n+                .clickFillBlankForm()\n+                .assertText(\"One Question\")\n+                .assertText(\"One Question Repeat\")\n+                .clickRefresh()\n+                .assertText(\"Two Question\") // Check new form downloaded\n+                .assertText(\"One Question Updated\") // Check updated form updated\n+                .assertTextDoesNotExist(\"One Question Repeat\"); // Check deleted form deleted\n+    }\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_getBlankFormsButtonIsGone() {\n+        rule.mainMenu()\n+                .enableMatchExactly()\n+                .assertTextNotDisplayed(R.string.get_forms);\n+    }\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_formManagementFormUpdateIsDisabled() {\n+        rule.mainMenu()\n+                .enableMatchExactly()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .assertDisabled(R.string.periodic_form_updates_check_title)\n+                .assertDisabled(R.string.automatic_download)\n+                .assertDisabled(R.string.hide_old_form_versions_setting_title);\n+    }\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_fillBlankFormRefreshButtonIsGone() {", "originalCommit": "19e081ffed9af4a6a5695fdb7e0d9cfa22dd4083", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1MjE5Mg==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r451152192", "bodyText": "In our live review we talked about in a follow-up PR considering changing this to a Set. There's no reason for the results to be ordered and sets will make some client code cleaner. We also talked about replacing contains with a get by jrFormId (which should also return a set with potentially multiple versions). No action needed now but writing it down so we don't forget.", "author": "lognaturel", "createdAt": "2020-07-07T21:24:35Z", "path": "collect_app/src/main/java/org/odk/collect/android/forms/DatabaseFormRepository.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.odk.collect.android.forms;\n+\n+import android.database.Cursor;\n+\n+import org.odk.collect.android.dao.FormsDao;\n+\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+public class DatabaseFormRepository implements FormRepository {\n+\n+    @Override\n+    public boolean contains(String jrFormID) {\n+        try (Cursor cursor = new FormsDao().getFormsCursorForFormId(jrFormID)) {\n+            return cursor != null && cursor.getCount() > 0;\n+        }\n+    }\n+\n+    @Override\n+    public List<Form> getAll() {", "originalCommit": "19e081ffed9af4a6a5695fdb7e0d9cfa22dd4083", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDI1Nw==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r451154257", "bodyText": "Not actionable so let's do Timber.w or remove since it goes to the UI.", "author": "lognaturel", "createdAt": "2020-07-07T21:28:56Z", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/FormListDownloader.java", "diffHunk": "@@ -110,213 +80,38 @@ public FormListDownloader(\n             }\n         }\n \n-        DocumentFetchResult result = openRosaAPIClient.getXML(downloadListUrl);\n-\n-        clearTemporaryCredentials(url);\n-\n-        // If we can't get the document, return the error, cancel the task\n-        if (result.errorMessage != null) {\n-            if (result.responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n-                formList.put(DL_AUTH_REQUIRED, new FormDetails(result.errorMessage));\n-            } else {\n-                formList.put(DL_ERROR_MSG, new FormDetails(result.errorMessage));\n-            }\n-            return formList;\n-        }\n-\n-        if (result.isOpenRosaResponse) {\n-            // Attempt OpenRosa 1.0 parsing\n-            Element xformsElement = result.doc.getRootElement();\n-            if (!xformsElement.getName().equals(\"xforms\")) {\n-                String error = \"root element is not <xforms> : \" + xformsElement.getName();\n-                Timber.e(\"Parsing OpenRosa reply -- %s\", error);\n-                formList.put(\n-                        DL_ERROR_MSG,\n-                        new FormDetails(application.getString(\n-                                R.string.parse_openrosa_formlist_failed, error)));\n-                return formList;\n-            }\n-            String namespace = xformsElement.getNamespace();\n-            if (!isXformsListNamespacedElement(xformsElement)) {\n-                String error = \"root element namespace is incorrect:\" + namespace;\n-                Timber.e(\"Parsing OpenRosa reply -- %s\", error);\n-                formList.put(\n-                        DL_ERROR_MSG,\n-                        new FormDetails(application.getString(\n-                                R.string.parse_openrosa_formlist_failed, error)));\n-                return formList;\n-            }\n-            int elements = xformsElement.getChildCount();\n-            for (int i = 0; i < elements; ++i) {\n-                if (xformsElement.getType(i) != Element.ELEMENT) {\n-                    // e.g., whitespace (text)\n-                    continue;\n-                }\n-                Element xformElement = xformsElement.getElement(i);\n-                if (!isXformsListNamespacedElement(xformElement)) {\n-                    // someone else's extension?\n-                    continue;\n-                }\n-                String name = xformElement.getName();\n-                if (!name.equalsIgnoreCase(\"xform\")) {\n-                    // someone else's extension?\n-                    continue;\n-                }\n+        OpenRosaFormListApi formAPI = new OpenRosaFormListApi(openRosaXMLFetcher, downloadListUrl, downloadPath);\n+        // We populate this with available forms from the specified server.\n+        // <formname, details>\n+        HashMap<String, ServerFormDetails> formList = new HashMap<>();\n \n-                // this is something we know how to interpret\n-                String formId = null;\n-                String formName = null;\n-                String version = null;\n-                String majorMinorVersion = null;\n-                String description = null;\n-                String downloadUrl = null;\n-                String manifestUrl = null;\n-                String hash = null;\n-                // don't process descriptionUrl\n-                int fieldCount = xformElement.getChildCount();\n-                for (int j = 0; j < fieldCount; ++j) {\n-                    if (xformElement.getType(j) != Element.ELEMENT) {\n-                        // whitespace\n-                        continue;\n-                    }\n-                    Element child = xformElement.getElement(j);\n-                    if (!isXformsListNamespacedElement(child)) {\n-                        // someone else's extension?\n-                        continue;\n-                    }\n-                    String tag = child.getName();\n-                    switch (tag) {\n-                        case \"formID\":\n-                            formId = XFormParser.getXMLText(child, true);\n-                            if (formId != null && formId.length() == 0) {\n-                                formId = null;\n-                            }\n-                            break;\n-                        case \"name\":\n-                            formName = XFormParser.getXMLText(child, true);\n-                            if (formName != null && formName.length() == 0) {\n-                                formName = null;\n-                            }\n-                            break;\n-                        case \"version\":\n-                            version = XFormParser.getXMLText(child, true);\n-                            if (version != null && version.length() == 0) {\n-                                version = null;\n-                            }\n-                            break;\n-                        case \"majorMinorVersion\":\n-                            majorMinorVersion = XFormParser.getXMLText(child, true);\n-                            if (majorMinorVersion != null && majorMinorVersion.length() == 0) {\n-                                majorMinorVersion = null;\n-                            }\n-                            break;\n-                        case \"descriptionText\":\n-                            description = XFormParser.getXMLText(child, true);\n-                            if (description != null && description.length() == 0) {\n-                                description = null;\n-                            }\n-                            break;\n-                        case \"downloadUrl\":\n-                            downloadUrl = XFormParser.getXMLText(child, true);\n-                            if (downloadUrl != null && downloadUrl.length() == 0) {\n-                                downloadUrl = null;\n-                            }\n-                            break;\n-                        case \"manifestUrl\":\n-                            manifestUrl = XFormParser.getXMLText(child, true);\n-                            if (manifestUrl != null && manifestUrl.length() == 0) {\n-                                manifestUrl = null;\n-                            }\n-                            break;\n-                        case \"hash\":\n-                            hash = XFormParser.getXMLText(child, true);\n-                            if (hash != null && hash.length() == 0) {\n-                                hash = null;\n-                            }\n-                            break;\n-                    }\n-                }\n-                if (formId == null || downloadUrl == null || formName == null) {\n-                    String error =\n-                            \"Forms list entry \" + Integer.toString(i)\n-                                    + \" has missing or empty tags: formID, name, or downloadUrl\";\n-                    Timber.e(\"Parsing OpenRosa reply -- %s\", error);\n-                    formList.clear();\n-                    formList.put(\n-                            DL_ERROR_MSG,\n-                            new FormDetails(application.getString(\n-                                    R.string.parse_openrosa_formlist_failed, error)));\n-                    return formList;\n-                }\n-                boolean isNewerFormVersionAvailable = false;\n-                boolean areNewerMediaFilesAvailable = false;\n-                ManifestFile manifestFile = null;\n-                if (isThisFormAlreadyDownloaded(formId)) {\n-                    isNewerFormVersionAvailable = isNewerFormVersionAvailable(FormDownloader.getMd5Hash(hash));\n-                    if ((!isNewerFormVersionAvailable || alwaysCheckMediaFiles) && manifestUrl != null) {\n-                        manifestFile = getManifestFile(manifestUrl);\n-                        if (manifestFile != null) {\n-                            List<MediaFile> newMediaFiles = manifestFile.getMediaFiles();\n-                            if (newMediaFiles != null && !newMediaFiles.isEmpty()) {\n-                                areNewerMediaFilesAvailable = areNewerMediaFilesAvailable(formId, version, newMediaFiles);\n-                            }\n-                        }\n-                    }\n-                }\n-                formList.put(formId, new FormDetails(formName, downloadUrl, manifestUrl, formId,\n-                        (version != null) ? version : majorMinorVersion, hash,\n-                        manifestFile != null ? manifestFile.getHash() : null,\n-                        isNewerFormVersionAvailable, areNewerMediaFilesAvailable));\n+        try {\n+            ServerFormsDetailsFetcher serverFormsDetailsFetcher = new ServerFormsDetailsFetcher(formRepository, mediaFileRepository, formAPI);\n+            List<ServerFormDetails> serverFormDetailsList = serverFormsDetailsFetcher.fetchFormDetails(alwaysCheckMediaFiles);\n+            for (ServerFormDetails serverFormDetails : serverFormDetailsList) {\n+                formList.put(serverFormDetails.getFormId(), serverFormDetails);\n             }\n-        } else {\n-            // Aggregate 0.9.x mode...\n-            // populate HashMap with form names and urls\n-            Element formsElement = result.doc.getRootElement();\n-            int formsCount = formsElement.getChildCount();\n-            String formId = null;\n-            for (int i = 0; i < formsCount; ++i) {\n-                if (formsElement.getType(i) != Element.ELEMENT) {\n-                    // whitespace\n-                    continue;\n-                }\n-                Element child = formsElement.getElement(i);\n-                String tag = child.getName();\n-                if (tag.equals(\"formID\")) {\n-                    formId = XFormParser.getXMLText(child, true);\n-                    if (formId != null && formId.length() == 0) {\n-                        formId = null;\n-                    }\n-                }\n-                if (tag.equalsIgnoreCase(\"form\")) {\n-                    String formName = XFormParser.getXMLText(child, true);\n-                    if (formName != null && formName.length() == 0) {\n-                        formName = null;\n-                    }\n-                    String downloadUrl = child.getAttributeValue(null, \"url\");\n-                    downloadUrl = downloadUrl.trim();\n-                    if (downloadUrl.length() == 0) {\n-                        downloadUrl = null;\n-                    }\n-                    if (formName == null) {\n-                        String error =\n-                                \"Forms list entry \" + Integer.toString(i)\n-                                        + \" is missing form name or url attribute\";\n-                        Timber.e(\"Parsing OpenRosa reply -- %s\", error);\n-                        formList.clear();\n-                        formList.put(\n-                                DL_ERROR_MSG,\n-                                new FormDetails(application.getString(\n-                                        R.string.parse_legacy_formlist_failed, error)));\n-                        return formList;\n-                    }\n-                    formList.put(formName,\n-                            new FormDetails(formName, downloadUrl, null, formId, null, null, null, false, false));\n-\n-                    formId = null;\n-                }\n+        } catch (FormApiException formApiException) {\n+            Timber.e(formApiException);", "originalCommit": "19e081ffed9af4a6a5695fdb7e0d9cfa22dd4083", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NTE3NQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r451155175", "bodyText": "I couldn't really come up with a reliable and efficient way to verify that you addressed the exact same exception list when extracting OpenRosaFormListApi. That means I'm just trusting you on that and it seems like a potential source of risk.", "author": "lognaturel", "createdAt": "2020-07-07T21:30:49Z", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/FormListDownloader.java", "diffHunk": "@@ -110,213 +80,38 @@ public FormListDownloader(\n             }\n         }\n \n-        DocumentFetchResult result = openRosaAPIClient.getXML(downloadListUrl);\n-\n-        clearTemporaryCredentials(url);\n-\n-        // If we can't get the document, return the error, cancel the task\n-        if (result.errorMessage != null) {\n-            if (result.responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n-                formList.put(DL_AUTH_REQUIRED, new FormDetails(result.errorMessage));\n-            } else {\n-                formList.put(DL_ERROR_MSG, new FormDetails(result.errorMessage));\n-            }\n-            return formList;\n-        }\n-\n-        if (result.isOpenRosaResponse) {\n-            // Attempt OpenRosa 1.0 parsing\n-            Element xformsElement = result.doc.getRootElement();\n-            if (!xformsElement.getName().equals(\"xforms\")) {\n-                String error = \"root element is not <xforms> : \" + xformsElement.getName();\n-                Timber.e(\"Parsing OpenRosa reply -- %s\", error);\n-                formList.put(\n-                        DL_ERROR_MSG,\n-                        new FormDetails(application.getString(\n-                                R.string.parse_openrosa_formlist_failed, error)));\n-                return formList;\n-            }\n-            String namespace = xformsElement.getNamespace();\n-            if (!isXformsListNamespacedElement(xformsElement)) {\n-                String error = \"root element namespace is incorrect:\" + namespace;\n-                Timber.e(\"Parsing OpenRosa reply -- %s\", error);\n-                formList.put(\n-                        DL_ERROR_MSG,\n-                        new FormDetails(application.getString(\n-                                R.string.parse_openrosa_formlist_failed, error)));\n-                return formList;\n-            }\n-            int elements = xformsElement.getChildCount();\n-            for (int i = 0; i < elements; ++i) {\n-                if (xformsElement.getType(i) != Element.ELEMENT) {\n-                    // e.g., whitespace (text)\n-                    continue;\n-                }\n-                Element xformElement = xformsElement.getElement(i);\n-                if (!isXformsListNamespacedElement(xformElement)) {\n-                    // someone else's extension?\n-                    continue;\n-                }\n-                String name = xformElement.getName();\n-                if (!name.equalsIgnoreCase(\"xform\")) {\n-                    // someone else's extension?\n-                    continue;\n-                }\n+        OpenRosaFormListApi formAPI = new OpenRosaFormListApi(openRosaXMLFetcher, downloadListUrl, downloadPath);\n+        // We populate this with available forms from the specified server.\n+        // <formname, details>\n+        HashMap<String, ServerFormDetails> formList = new HashMap<>();\n \n-                // this is something we know how to interpret\n-                String formId = null;\n-                String formName = null;\n-                String version = null;\n-                String majorMinorVersion = null;\n-                String description = null;\n-                String downloadUrl = null;\n-                String manifestUrl = null;\n-                String hash = null;\n-                // don't process descriptionUrl\n-                int fieldCount = xformElement.getChildCount();\n-                for (int j = 0; j < fieldCount; ++j) {\n-                    if (xformElement.getType(j) != Element.ELEMENT) {\n-                        // whitespace\n-                        continue;\n-                    }\n-                    Element child = xformElement.getElement(j);\n-                    if (!isXformsListNamespacedElement(child)) {\n-                        // someone else's extension?\n-                        continue;\n-                    }\n-                    String tag = child.getName();\n-                    switch (tag) {\n-                        case \"formID\":\n-                            formId = XFormParser.getXMLText(child, true);\n-                            if (formId != null && formId.length() == 0) {\n-                                formId = null;\n-                            }\n-                            break;\n-                        case \"name\":\n-                            formName = XFormParser.getXMLText(child, true);\n-                            if (formName != null && formName.length() == 0) {\n-                                formName = null;\n-                            }\n-                            break;\n-                        case \"version\":\n-                            version = XFormParser.getXMLText(child, true);\n-                            if (version != null && version.length() == 0) {\n-                                version = null;\n-                            }\n-                            break;\n-                        case \"majorMinorVersion\":\n-                            majorMinorVersion = XFormParser.getXMLText(child, true);\n-                            if (majorMinorVersion != null && majorMinorVersion.length() == 0) {\n-                                majorMinorVersion = null;\n-                            }\n-                            break;\n-                        case \"descriptionText\":\n-                            description = XFormParser.getXMLText(child, true);\n-                            if (description != null && description.length() == 0) {\n-                                description = null;\n-                            }\n-                            break;\n-                        case \"downloadUrl\":\n-                            downloadUrl = XFormParser.getXMLText(child, true);\n-                            if (downloadUrl != null && downloadUrl.length() == 0) {\n-                                downloadUrl = null;\n-                            }\n-                            break;\n-                        case \"manifestUrl\":\n-                            manifestUrl = XFormParser.getXMLText(child, true);\n-                            if (manifestUrl != null && manifestUrl.length() == 0) {\n-                                manifestUrl = null;\n-                            }\n-                            break;\n-                        case \"hash\":\n-                            hash = XFormParser.getXMLText(child, true);\n-                            if (hash != null && hash.length() == 0) {\n-                                hash = null;\n-                            }\n-                            break;\n-                    }\n-                }\n-                if (formId == null || downloadUrl == null || formName == null) {\n-                    String error =\n-                            \"Forms list entry \" + Integer.toString(i)\n-                                    + \" has missing or empty tags: formID, name, or downloadUrl\";\n-                    Timber.e(\"Parsing OpenRosa reply -- %s\", error);\n-                    formList.clear();\n-                    formList.put(\n-                            DL_ERROR_MSG,\n-                            new FormDetails(application.getString(\n-                                    R.string.parse_openrosa_formlist_failed, error)));\n-                    return formList;\n-                }\n-                boolean isNewerFormVersionAvailable = false;\n-                boolean areNewerMediaFilesAvailable = false;\n-                ManifestFile manifestFile = null;\n-                if (isThisFormAlreadyDownloaded(formId)) {\n-                    isNewerFormVersionAvailable = isNewerFormVersionAvailable(FormDownloader.getMd5Hash(hash));\n-                    if ((!isNewerFormVersionAvailable || alwaysCheckMediaFiles) && manifestUrl != null) {\n-                        manifestFile = getManifestFile(manifestUrl);\n-                        if (manifestFile != null) {\n-                            List<MediaFile> newMediaFiles = manifestFile.getMediaFiles();\n-                            if (newMediaFiles != null && !newMediaFiles.isEmpty()) {\n-                                areNewerMediaFilesAvailable = areNewerMediaFilesAvailable(formId, version, newMediaFiles);\n-                            }\n-                        }\n-                    }\n-                }\n-                formList.put(formId, new FormDetails(formName, downloadUrl, manifestUrl, formId,\n-                        (version != null) ? version : majorMinorVersion, hash,\n-                        manifestFile != null ? manifestFile.getHash() : null,\n-                        isNewerFormVersionAvailable, areNewerMediaFilesAvailable));\n+        try {\n+            ServerFormsDetailsFetcher serverFormsDetailsFetcher = new ServerFormsDetailsFetcher(formRepository, mediaFileRepository, formAPI);\n+            List<ServerFormDetails> serverFormDetailsList = serverFormsDetailsFetcher.fetchFormDetails(alwaysCheckMediaFiles);\n+            for (ServerFormDetails serverFormDetails : serverFormDetailsList) {\n+                formList.put(serverFormDetails.getFormId(), serverFormDetails);\n             }\n-        } else {\n-            // Aggregate 0.9.x mode...\n-            // populate HashMap with form names and urls\n-            Element formsElement = result.doc.getRootElement();\n-            int formsCount = formsElement.getChildCount();\n-            String formId = null;\n-            for (int i = 0; i < formsCount; ++i) {\n-                if (formsElement.getType(i) != Element.ELEMENT) {\n-                    // whitespace\n-                    continue;\n-                }\n-                Element child = formsElement.getElement(i);\n-                String tag = child.getName();\n-                if (tag.equals(\"formID\")) {\n-                    formId = XFormParser.getXMLText(child, true);\n-                    if (formId != null && formId.length() == 0) {\n-                        formId = null;\n-                    }\n-                }\n-                if (tag.equalsIgnoreCase(\"form\")) {\n-                    String formName = XFormParser.getXMLText(child, true);\n-                    if (formName != null && formName.length() == 0) {\n-                        formName = null;\n-                    }\n-                    String downloadUrl = child.getAttributeValue(null, \"url\");\n-                    downloadUrl = downloadUrl.trim();\n-                    if (downloadUrl.length() == 0) {\n-                        downloadUrl = null;\n-                    }\n-                    if (formName == null) {\n-                        String error =\n-                                \"Forms list entry \" + Integer.toString(i)\n-                                        + \" is missing form name or url attribute\";\n-                        Timber.e(\"Parsing OpenRosa reply -- %s\", error);\n-                        formList.clear();\n-                        formList.put(\n-                                DL_ERROR_MSG,\n-                                new FormDetails(application.getString(\n-                                        R.string.parse_legacy_formlist_failed, error)));\n-                        return formList;\n-                    }\n-                    formList.put(formName,\n-                            new FormDetails(formName, downloadUrl, null, formId, null, null, null, false, false));\n-\n-                    formId = null;\n-                }\n+        } catch (FormApiException formApiException) {\n+            Timber.e(formApiException);\n+\n+            switch (formApiException.getType()) {", "originalCommit": "19e081ffed9af4a6a5695fdb7e0d9cfa22dd4083", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MTk2NQ==", "url": "https://github.com/getodk/collect/pull/3956#discussion_r451381965", "bodyText": "Yeah I agree this is a source of risk!", "author": "seadowg", "createdAt": "2020-07-08T08:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NTE3NQ=="}], "type": "inlineReview"}, {"oid": "cdc8324f728f6554061edeec302c99568f022d46", "url": "https://github.com/getodk/collect/commit/cdc8324f728f6554061edeec302c99568f022d46", "message": "Clean up db connection after tests that open it", "committedDate": "2020-07-08T09:45:31Z", "type": "commit"}, {"oid": "5b0c582a213a99b5cb5da5f18833b0b19142334f", "url": "https://github.com/getodk/collect/commit/5b0c582a213a99b5cb5da5f18833b0b19142334f", "message": "Correct typo in test name", "committedDate": "2020-07-08T10:29:09Z", "type": "commit"}, {"oid": "d78eabee79a9740542325843b5326922b78d20f5", "url": "https://github.com/getodk/collect/commit/d78eabee79a9740542325843b5326922b78d20f5", "message": "Remove timber error logging", "committedDate": "2020-07-08T10:29:58Z", "type": "commit"}, {"oid": "007edeac377b9ad54c3b94a004d44fee735d72b0", "url": "https://github.com/getodk/collect/commit/007edeac377b9ad54c3b94a004d44fee735d72b0", "message": "Merge branch 'master' into match-exactly", "committedDate": "2020-07-08T23:45:30Z", "type": "commit"}]}