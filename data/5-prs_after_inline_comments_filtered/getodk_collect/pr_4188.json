{"pr_number": 4188, "pr_title": "Extend existing external application functionality to receive binary files in field-list groups", "pr_createdAt": "2020-10-26T14:06:44Z", "pr_url": "https://github.com/getodk/collect/pull/4188", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4NDQ1Mg==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513484452", "bodyText": "Do these values need to be random or are you just using random values to generate test data?", "author": "seadowg", "createdAt": "2020-10-28T14:23:23Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +95,109 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyNzQ3Ng==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514127476", "bodyText": "It was just for test data it's not required and I got rid of it to simplify the long externalApp_ShouldPopulateFields test.", "author": "grzesiek2010", "createdAt": "2020-10-29T09:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4NDQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4Njk2NQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513486965", "bodyText": "You can just use Files.createTempFile here I think. Then there's no need to use the StoragePathProvider in here.", "author": "seadowg", "createdAt": "2020-10-28T14:26:17Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +95,109 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        Intent resultIntent = new Intent();\n+\n+        File tmpJpg = new File(new StoragePathProvider().getTmpFilePath());", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyMzg0Mw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514123843", "bodyText": "Right", "author": "grzesiek2010", "createdAt": "2020-10-29T09:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4Njk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4ODUxOQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513488519", "bodyText": "Could this just be one test where the group contains every kind of data? That might be harder to read though I guess... Interested in what you think!", "author": "seadowg", "createdAt": "2020-10-28T14:28:02Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +95,109 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateStringFields() {\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        int randomInteger = new Random().nextInt(255);\n+        double scale = Math.pow(10, 2);\n+        double randomDecimal = Math.round(new Random().nextDouble() * scale) / scale;\n+        String randomText = RandomString.make();\n+\n+        resultIntent.putExtra(\"questionInteger\", randomInteger);\n+        resultIntent.putExtra(\"questionDecimal\", randomDecimal);\n+        resultIntent.putExtra(\"questionText\", randomText);\n \n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n         onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        onView(withText(String.valueOf(randomDecimal))).check(matches(isDisplayed()));\n+        onView(withText(randomText)).check(matches(isDisplayed()));\n+    }\n+\n+    @Test\n+    public void externalApp_ShouldPopulateImageField() throws IOException {", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyODc0Nw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514128747", "bodyText": "The test will be long but yeah in this case where it's about populating multiple fields at the same time it's maybe better to have one test.\nIt's Improved.", "author": "grzesiek2010", "createdAt": "2020-10-29T09:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4ODUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4OTUxNA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513489514", "bodyText": "Nice! Really like this being here.", "author": "seadowg", "createdAt": "2020-10-28T14:29:17Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/questions/QuestionDetails.java", "diffHunk": "@@ -24,4 +30,8 @@ public FormEntryPrompt getPrompt() {\n     public String getFormAnalyticsID() {\n         return formAnalyticsID;\n     }\n+\n+    public boolean isReadOnly() {", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5MTA5MA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513491090", "bodyText": "Could this maybe be answerFile or instanceFile? The QuestionMediaManager refers to these as \"answer files\". I'm frequently getting confused between files in the instance folder and files that come with the form.", "author": "seadowg", "createdAt": "2020-10-28T14:31:08Z", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/FileUtils.java", "diffHunk": "@@ -100,6 +103,39 @@\n     private FileUtils() {\n     }\n \n+    public static void saveMediaFileFromUri(Uri uri, File destFile, Context context) {", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzMDQ1OQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514130459", "bodyText": "Ok, done.", "author": "grzesiek2010", "createdAt": "2020-10-29T09:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5MTA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5MTg0MQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r513491841", "bodyText": "This could maybe use the QuestionMediaManager in some way. I've ended up playing with that in #4190 so might be better to come back fro that later!", "author": "seadowg", "createdAt": "2020-10-28T14:32:08Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java", "diffHunk": "@@ -475,40 +483,70 @@ public void scrollTo(@Nullable QuestionWidget qw) {\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n+\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                break;\n+                            default:\n+                                throw new RuntimeException(\n+                                        getContext().getString(R.string.ext_assign_value_error,\n+                                                treeReference.toString(false)));\n+                        }\n+\n+                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                        break;\n                     }\n+                }\n+            }\n+        }\n+\n+        if (clipData != null) {\n+            for (int i = 0; i < clipData.getItemCount(); i++) {\n+                CharSequence key = clipData.getItemAt(i).getText();\n+                if (key == null) {\n+                    continue;\n+                }\n \n-                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                    break;\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+\n+                    if (FormEntryPromptUtils.getQuestionName(prompt).equals(key.toString())\n+                            && prompt.getDataType() == Constants.DATATYPE_BINARY) {\n+                        Uri uri = clipData.getItemAt(i).getUri();\n+                        if (uri != null) {\n+                            try {\n+                                File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                FileUtils.saveMediaFileFromUri(uri, destFile, getContext());", "originalCommit": "36b39bdb62696618d9bdb437d9d6a50004c67ffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzMzE1Mw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514133153", "bodyText": "That might be a good idea, I've added a TODO comment to improve it later.", "author": "grzesiek2010", "createdAt": "2020-10-29T09:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5MTg0MQ=="}], "type": "inlineReview"}, {"oid": "d403b9d6b64ceda33509bcd991a85ffefd95121b", "url": "https://github.com/getodk/collect/commit/d403b9d6b64ceda33509bcd991a85ffefd95121b", "message": "Improved tests", "committedDate": "2020-10-29T09:43:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NzY3NA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514357674", "bodyText": "Out of interest did you need the parent (new File(\"/sdcard\")) here? I was under the impression we could just create a file outright and Android handles it.", "author": "seadowg", "createdAt": "2020-10-29T15:37:40Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +92,67 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        // Check AudioWidget without answer\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        // Check VideoWidget without answer\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));\n+        clipData.addItem(new ClipData.Item(\"questionAudio\", null, createTempFile(\"sampleAudio\", \"wav\")));\n+        clipData.addItem(new ClipData.Item(\"questionVideo\", null, createTempFile(\"sampleVideo\", \"mp4\")));\n+        clipData.addItem(new ClipData.Item(\"questionFile\", null, createTempFile(\"fruits\", \"csv\")));\n+\n+        resultIntent.setClipData(clipData);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n         onView(withText(\"This is buttonText\")).perform(click());\n \n-        onView(withText(\"Here is a text value\")).check(matches(isDisplayed()));\n-        onView(withText(Integer.toString(randomInteger))).check(matches(isDisplayed()));\n+        // Check StringWidgets with answers\n+        onView(withText(\"25\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"46.74\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withText(\"sampleAnswer\")).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+\n+        // Check ImageWidget with answer\n+        onView(withTagValue(is(\"ImageView\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        // Check AudioWidget with answer\n+        onView(withId(R.id.audio_controller)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+\n+        // Check VideoWidget with answer\n+        onView(withId(R.id.play_video)).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(isEnabled()));\n+\n+        // Check ArbitraryFileWidget with answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).perform(nestedScrollTo()).check(matches(isDisplayed()));\n+    }\n+\n+    @SuppressWarnings(\"PMD.DoNotHardCodeSDCard\")\n+    private Uri createTempFile(String name, String extension) throws IOException {\n+        File file = File.createTempFile(name, extension, new File(\"/sdcard\"));", "originalCommit": "70e92e09075f46f202c0763915c9bb83273ab966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTQwNA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515031404", "bodyText": "Without it I get java.io.IOException: Read-only file system", "author": "grzesiek2010", "createdAt": "2020-10-30T11:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NzY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NzE1Mw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515847153", "bodyText": "Huh strange. The same thing just worked\u2122\ufe0f for me here: https://github.com/getodk/collect/pull/4190/files#diff-83ee5909b031fabf1a76172164745099e708b293a264d0ae3f2cf9dce844ae21R154.", "author": "seadowg", "createdAt": "2020-11-02T09:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NzY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyNDkyNA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r516324924", "bodyText": "Ah ok this way it could work but then I need to use that file via fileprovider that means I would need to edit our provider_paths.xml file and add <cache-path path=\"/\" name=\"files\" /> there. Since we would need that only for tests I would need to create such a separate file for tests only. Is it worth the effort?", "author": "grzesiek2010", "createdAt": "2020-11-02T23:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NzY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODMxNA==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514478314", "bodyText": "See my comments on the test -- I don't think this matches the spec we had written up. It looks like it has the external app set both the text and a URI for each clip data item. The way we had written it up was to for ClipData, only set the URI and use an intent extra to do the match between Collect field name and clipdata URI. You should be able to read the extra to match with the Collect field (same as non-binary types) and then use the extra's value to get the file. I don't think you need to walk the ClipData at all, it's just there to provide permissions for when you resolve the content.", "author": "lognaturel", "createdAt": "2020-10-29T18:29:27Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java", "diffHunk": "@@ -479,40 +487,71 @@ public void scrollTo(@Nullable QuestionWidget qw) {\n     /**\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n-    public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+    public void setDataForFields(Bundle bundle, ClipData clipData) throws JavaRosaException {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n+\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                break;\n+                            default:\n+                                throw new RuntimeException(\n+                                        getContext().getString(R.string.ext_assign_value_error,\n+                                                treeReference.toString(false)));\n+                        }\n+\n+                        ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                        break;\n                     }\n+                }\n+            }\n+        }\n+\n+        if (clipData != null) {\n+            for (int i = 0; i < clipData.getItemCount(); i++) {\n+                CharSequence key = clipData.getItemAt(i).getText();", "originalCommit": "70e92e09075f46f202c0763915c9bb83273ab966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MDkzOQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514570939", "bodyText": "The spec document says:\n\nLook for an intent extra with the name of the field. If one is found, attempt to exactly match the intent extra value to one of the ClipData items\u2019 content URI\nIf there\u2019s a match, copy the file to the form instance folder and write its local filename in the corresponding form field\n\nWe don't really need to do that, I don't think. We can just try to resolve the URI from the extra as I described above. If that works, it means the ClipData was correctly populated.", "author": "lognaturel", "createdAt": "2020-10-29T21:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4Nzg5Nw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514487897", "bodyText": "According to our spec, an external app is supposed to:\n\nAdd content URIs for the files to attach to the form to the return intent\u2019s ClipData\n\n\nAdd an intent extra with desired form field name and set its value to the content URI for the corresponding file.", "author": "lognaturel", "createdAt": "2020-10-29T18:46:02Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -80,17 +92,67 @@ public void appMissingErrorText_ShouldComeFromSpecialFormText() {\n     }\n \n     @Test\n-    public void externalApp_ShouldPopulateFields() {\n+    public void externalApp_ShouldPopulateFields() throws IOException {\n+        // Check ImageWidget without answer\n+        onView(withTagValue(is(\"ImageView\"))).check(doesNotExist());\n+        onView(withId(R.id.capture_image)).check(doesNotExist());\n+        onView(withId(R.id.choose_image)).check(doesNotExist());\n+\n+        // Check AudioWidget without answer\n+        onView(withId(R.id.audio_controller)).check(matches(not(isDisplayed())));\n+\n+        // Check VideoWidget without answer\n+        onView(withId(R.id.play_video)).check(matches(isDisplayed()));\n+        onView(withId(R.id.play_video)).check(matches(not(isEnabled())));\n+\n+        // Check ArbitraryFileWidget without answer\n+        onView(withTagValue(is(\"ArbitraryFileWidgetAnswer\"))).check(matches(not(isDisplayed())));\n+\n         Intent resultIntent = new Intent();\n-        resultIntent.putExtra(\"sometext\", \"Here is a text value\");\n \n-        int randomInteger = (new Random()).nextInt(255);\n-        resultIntent.putExtra(\"someinteger\", randomInteger);\n+        resultIntent.putExtra(\"questionInteger\", \"25\");\n+        resultIntent.putExtra(\"questionDecimal\", \"46.74\");\n+        resultIntent.putExtra(\"questionText\", \"sampleAnswer\");\n \n+        ClipData clipData = ClipData.newRawUri(null, null);\n+        clipData.addItem(new ClipData.Item(\"questionImage\", null, createTempFile(\"famous\", \"jpg\")));", "originalCommit": "70e92e09075f46f202c0763915c9bb83273ab966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjgwOQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514632809", "bodyText": "This test needs to be updated!", "author": "lognaturel", "createdAt": "2020-10-29T23:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4Nzg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3MTk1MQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515071951", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2020-10-30T12:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4Nzg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r514632197", "bodyText": "Will this implicitly clear any existing value?\nI think there's one more error case missing -- if the type of the file passed from the external app doesn't match the question type. For example, a .mp3 file shouldn't be allowed for an image widget.", "author": "lognaturel", "createdAt": "2020-10-29T23:53:53Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/ODKView.java", "diffHunk": "@@ -480,39 +486,58 @@ public void scrollTo(@Nullable QuestionWidget qw) {\n      * Saves answers for the widgets in this view. Called when the widgets are in an intent group.\n      */\n     public void setDataForFields(Bundle bundle) throws JavaRosaException {\n-        if (bundle == null) {\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController == null) {\n             return;\n         }\n-        FormController formController = Collect.getInstance().getFormController();\n-        Set<String> keys = bundle.keySet();\n-        for (String key : keys) {\n-            for (QuestionWidget questionWidget : widgets) {\n-                FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n-                TreeReference treeReference =\n-                        (TreeReference) prompt.getFormElement().getBind().getReference();\n-\n-                if (treeReference.getNameLast().equals(key)) {\n-                    switch (prompt.getDataType()) {\n-                        case Constants.DATATYPE_TEXT:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asStringData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_INTEGER:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asIntegerData(bundle.get(key)));\n-                            break;\n-                        case Constants.DATATYPE_DECIMAL:\n-                            formController.saveAnswer(prompt.getIndex(),\n-                                    ExternalAppsUtils.asDecimalData(bundle.get(key)));\n-                            break;\n-                        default:\n-                            throw new RuntimeException(\n-                                    getContext().getString(R.string.ext_assign_value_error,\n-                                            treeReference.toString(false)));\n-                    }\n \n-                    ((StringWidget) questionWidget).setDisplayValueFromModel();\n-                    break;\n+        if (bundle != null) {\n+            Set<String> keys = bundle.keySet();\n+            for (String key : keys) {\n+                for (QuestionWidget questionWidget : widgets) {\n+                    FormEntryPrompt prompt = questionWidget.getFormEntryPrompt();\n+                    TreeReference treeReference =\n+                            (TreeReference) prompt.getFormElement().getBind().getReference();\n+\n+                    if (treeReference.getNameLast().equals(key)) {\n+                        switch (prompt.getDataType()) {\n+                            case Constants.DATATYPE_TEXT:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asStringData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_INTEGER:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asIntegerData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_DECIMAL:\n+                                formController.saveAnswer(prompt.getIndex(),\n+                                        ExternalAppsUtils.asDecimalData(bundle.get(key)));\n+                                ((StringWidget) questionWidget).setDisplayValueFromModel();\n+                                break;\n+                            case Constants.DATATYPE_BINARY:\n+                                try {\n+                                    Uri uri = (Uri) bundle.get(key);\n+                                    try {\n+                                        File destFile = FileUtils.createDestinationMediaFile(formController.getInstanceFile().getParent(), ContentResolverHelper.getFileExtensionFromUri(getContext(), uri));\n+                                        //TODO might be better to use QuestionMediaManager in the future\n+                                        FileUtils.saveAnswerFileFromUri(uri, destFile, getContext());\n+                                        ((WidgetDataReceiver) questionWidget).setData(destFile);\n+                                    } catch (SecurityException e) {\n+                                        Timber.w(e);", "originalCommit": "3dc61b4e2e7b4d4635fb40479fb9bb67119d726d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3ODU1Mg==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515078552", "bodyText": "When it comes to file formats please take a look below I described that it should be a separate pr if needed because we don't check file types using binary widgets normally so why here in intents group?\n\nWill this implicitly clear any existing value?\n\nwe call setData() in the last step so if any exception occurs it's just not called and doesn't remove an existing answer.", "author": "grzesiek2010", "createdAt": "2020-10-30T12:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE2MjkwMQ==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515162901", "bodyText": "doesn't remove an existing answer\n\nThis is a weird case -- a user would have to get data from an external app, have it work fine, then get data again and have it fail. It's not very likely but then if it does happen I think it's nice for the answer to be cleared so it's easier for a user to see that something unexpected happened. It should be straightforward to clear in each catch block, right?", "author": "lognaturel", "createdAt": "2020-10-30T15:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNzYzMw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515217633", "bodyText": "Again like in case of checking file types I think it wouldn't align with what normal widgets outside intent groups do. If something goes wrong we don't remove an existed answer. We remove the old answer only in setData() so just before adding a new one where we are almost sure that everything is fine.", "author": "grzesiek2010", "createdAt": "2020-10-30T16:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNDAyNw==", "url": "https://github.com/getodk/collect/pull/4188#discussion_r515234027", "bodyText": "Next time let's make sure we have these conversations when we're considering the spec and make sure the implementation is based on the spec! I'll file issues once this is merged.", "author": "lognaturel", "createdAt": "2020-10-30T16:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjE5Nw=="}], "type": "inlineReview"}, {"oid": "53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "url": "https://github.com/getodk/collect/commit/53d0d807f8a401ff7c2ea79d5181ccbe3bd1515b", "message": "Pass readOnlyOverride to QuestionDetails to avoid passing that parameter to every widget separately", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "12506d3a71c2871aa5d60677a18f35ceead9698f", "url": "https://github.com/getodk/collect/commit/12506d3a71c2871aa5d60677a18f35ceead9698f", "message": "Removed redundant readOnlyOverride parameter from DecimalWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "3224445a6f51c3d2c142ffc894b60363743c0802", "url": "https://github.com/getodk/collect/commit/3224445a6f51c3d2c142ffc894b60363743c0802", "message": "Removed redundant readOnlyOverride parameter from IntegerWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "3736ef19a60629e97bf4d561719cfac97b4801cd", "url": "https://github.com/getodk/collect/commit/3736ef19a60629e97bf4d561719cfac97b4801cd", "message": "Removed redundant readOnlyOverride parameter from StringNumberWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "9b5d238be377297c7b999e0712f1242312262ce5", "url": "https://github.com/getodk/collect/commit/9b5d238be377297c7b999e0712f1242312262ce5", "message": "Removed redundant readOnlyOverride parameter from StringWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "11caae6b744a9ad18255a0fb429bb31938301718", "url": "https://github.com/getodk/collect/commit/11caae6b744a9ad18255a0fb429bb31938301718", "message": "Code improvements in StringWidget", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "01b201d3cc5cec1175dce3df5a2fe71183b19810", "url": "https://github.com/getodk/collect/commit/01b201d3cc5cec1175dce3df5a2fe71183b19810", "message": "Added tests for readOnlyOverride in string widgets", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "f10dbd32ccbd404a1f7bfc9d8554dc04f3f233be", "url": "https://github.com/getodk/collect/commit/f10dbd32ccbd404a1f7bfc9d8554dc04f3f233be", "message": "Fixed answer text in ExString widgets and added tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "71dc8ba41e4807f757ba6e34f0eccf11e4e627e2", "url": "https://github.com/getodk/collect/commit/71dc8ba41e4807f757ba6e34f0eccf11e4e627e2", "message": "ImageWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "9050070a875a289287cefb0a5a897f21c25efa6b", "url": "https://github.com/getodk/collect/commit/9050070a875a289287cefb0a5a897f21c25efa6b", "message": "SignatureWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "a38a608ce1600fbc184119fd3579249d77e70557", "url": "https://github.com/getodk/collect/commit/a38a608ce1600fbc184119fd3579249d77e70557", "message": "DrawWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "6011947aa4cfeb69ba406b6208ccc3b320d671e0", "url": "https://github.com/getodk/collect/commit/6011947aa4cfeb69ba406b6208ccc3b320d671e0", "message": "AnnotateWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "2f645b3199be1e5c6ee8530385015779ea86134f", "url": "https://github.com/getodk/collect/commit/2f645b3199be1e5c6ee8530385015779ea86134f", "message": "VideoWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "8ebd45ab729b1473d506ed54684e659b4afc10cc", "url": "https://github.com/getodk/collect/commit/8ebd45ab729b1473d506ed54684e659b4afc10cc", "message": "ArbitraryFileWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "c598a20a4b8523beb96e7ba70d9bc69d9855d8aa", "url": "https://github.com/getodk/collect/commit/c598a20a4b8523beb96e7ba70d9bc69d9855d8aa", "message": "AudioWidget should be displayed in intent groups like it was readOnly", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "23832e7a3db1692580351958a71a1b63eb7e3a75", "url": "https://github.com/getodk/collect/commit/23832e7a3db1692580351958a71a1b63eb7e3a75", "message": "Fixed Play Video button in VideoWidget readOnly #3653", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "ad1af29dd6cc6082fa22776512225defa2f66f8c", "url": "https://github.com/getodk/collect/commit/ad1af29dd6cc6082fa22776512225defa2f66f8c", "message": "Handle receiving files from extrenal apps", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "679464ebd53eb30a5f63caed650a591c928b439f", "url": "https://github.com/getodk/collect/commit/679464ebd53eb30a5f63caed650a591c928b439f", "message": "Added tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "f3e12da2c903871b5f2a29c57b510560eab81cf0", "url": "https://github.com/getodk/collect/commit/f3e12da2c903871b5f2a29c57b510560eab81cf0", "message": "Catch SecurityException when receiving uris", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "ce0f65667491bad121da9eb83a97cf9791ecfbb4", "url": "https://github.com/getodk/collect/commit/ce0f65667491bad121da9eb83a97cf9791ecfbb4", "message": "Improved tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "0be7b76be1b8313967b68ce2c05aa6e4374feadf", "url": "https://github.com/getodk/collect/commit/0be7b76be1b8313967b68ce2c05aa6e4374feadf", "message": "Naming improvements", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "bf455d711eba941af42004336856fee48de440e6", "url": "https://github.com/getodk/collect/commit/bf455d711eba941af42004336856fee48de440e6", "message": "Added a comment to remember about improving the code in the future", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "5fc1d2ec1c412fdcc0bd5521beca62835c097335", "url": "https://github.com/getodk/collect/commit/5fc1d2ec1c412fdcc0bd5521beca62835c097335", "message": "Fixed tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "e82a1a1f599bbe0055be67c6b580eb1687c44d64", "url": "https://github.com/getodk/collect/commit/e82a1a1f599bbe0055be67c6b580eb1687c44d64", "message": "Improved receiving binary fiels from external apps", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "60d4bf2dfd3d77c12bfa51bc130c64b2910cd0b1", "url": "https://github.com/getodk/collect/commit/60d4bf2dfd3d77c12bfa51bc130c64b2910cd0b1", "message": "Updated tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "0669d945b956f5995881d8e52a94bc5eba4327f0", "url": "https://github.com/getodk/collect/commit/0669d945b956f5995881d8e52a94bc5eba4327f0", "message": "Added changes and tests to assert nothing wrong happens when null values are returned", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "45a6410ef26f899c29f756ae7cd8d73192c7cfd2", "url": "https://github.com/getodk/collect/commit/45a6410ef26f899c29f756ae7cd8d73192c7cfd2", "message": "Improved tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "b42d8dfb0678fff2ac00b68a5cfdc158181cb55f", "url": "https://github.com/getodk/collect/commit/b42d8dfb0678fff2ac00b68a5cfdc158181cb55f", "message": "Catch every exception and error that might happen during copying files", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "6d63f0153910a13778250e7f37aeb0fe18c67555", "url": "https://github.com/getodk/collect/commit/6d63f0153910a13778250e7f37aeb0fe18c67555", "message": "Added more tests", "committedDate": "2020-11-04T07:24:11Z", "type": "commit"}, {"oid": "6d63f0153910a13778250e7f37aeb0fe18c67555", "url": "https://github.com/getodk/collect/commit/6d63f0153910a13778250e7f37aeb0fe18c67555", "message": "Added more tests", "committedDate": "2020-11-04T07:24:11Z", "type": "forcePushed"}]}