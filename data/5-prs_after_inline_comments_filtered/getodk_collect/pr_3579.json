{"pr_number": 3579, "pr_title": "Support default image answers", "pr_createdAt": "2020-01-10T13:35:41Z", "pr_url": "https://github.com/getodk/collect/pull/3579", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r365910033", "bodyText": "I think we could drive these changes out in tests for the Widgets (Robolectric most likely) themselves rather than at an Espresso level. This would also let us test that the correct default image is loaded, as well as testing the ImageView appears. What do you think?", "author": "seadowg", "createdAt": "2020-01-13T16:48:14Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/DefaultImageAnswerTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.activities.FormEntryActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.FormEntryPage;\n+import org.odk.collect.android.test.FormLoadingUtils;\n+\n+import java.util.Collections;\n+\n+public class DefaultImageAnswerTest {", "originalCommit": "98dff8f88921587c48eabeb7a73f116e44457845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4MjY0Mg==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r372382642", "bodyText": "I was thinking about it. We could add a test for every single widget like I did for readOnly option. The problem is that we always get answers using getAnswerText() (from Javarosa) so we don't know if such an answer comes from a default value or it's just a previously saved answer. So in fact such a test (in every single widget) would be for saved answers not default values. The only way to make sure we are testing default values is using a form.", "author": "grzesiek2010", "createdAt": "2020-01-29T13:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ3NDc4OQ==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r372474789", "bodyText": "I'm not meaning that we test the whole of the default value behaviour - like you say that's something that JavaRosa is partly responsible for. I mean that we could have a test for driving out that the image is shown (in BaseImageWidget) if there is a default (getAnswerText returns an image reference). In pseudocode I'm thinking:\n\nCreate temp image file\nSet up mock reference to default image (Helpers.createMockReference)\nSet up prompt with reference returned from getAnswerText() (MockFormEntryPromptBuilder)\nCreate BaseImageWidget with prompt\nCheck the widget's image view has loaded the bitmap - I think you can do this using Robolectric's ShadowBitmapDrawable (shadowOf((BitmapDrawable) imageView.getDrawable()).getPath())\n\nAs far as I can see this would drive out the changes without needing Espresso. I might be misunderstanding something though.", "author": "seadowg", "createdAt": "2020-01-29T16:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMTAyMw==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r373611023", "bodyText": "I believe that @grzesiek2010 is correct that what you've described, @seadowg, would not specifically test having an image default but would just check that an image is loaded when there's an image in the current form instance. I think it's a worthwhile test but it's not testing the new behavior here. In other words, I would expect it to pass on master.\nThe new behavior is doing something with a jr://images/ URI and I think step 2 of what @seadowg has described wipes that out.\n@seadowg's test would need to be augmented with some tests that fail today. I think that ideally we could add a component to the test that lets us verify that either a relative (local to the submission folder) URI or an absolute (jr://images/ which means relative to the form definition folder) URI can be resolved and passed on to the image display machinery.\nAlso, I think the implementation is incorrect because it copies an image with a jr://images/ URI to the submission folder which it shouldn't do.", "author": "lognaturel", "createdAt": "2020-01-31T18:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzQyOQ==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r373613429", "bodyText": "Hmmm I must be misunderstanding how it shiould work. My thinking was that kind of test would drive out the code in getDefaultFilPath that deals with jr://images/. Either way I think agree with how you think it should go!", "author": "seadowg", "createdAt": "2020-01-31T18:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzk5NA==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r373613994", "bodyText": "Well, wait a minute, maybe I'm the one not getting it. How are you thinking a relative URI and jr://images/ URI would be differentiated in what you described?", "author": "lognaturel", "createdAt": "2020-01-31T18:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjM5Mw==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r373616393", "bodyText": "I think what I'd missed is that it did different things on whether the URI started with jr://images/  rather than only setting defaultFilePath if the URI started with jr://images/ . I was seeing an if rather than an if-else. I'm guessing you're saying we need two tests (one for each kind of URI) to drive out the new behaviour?", "author": "seadowg", "createdAt": "2020-01-31T18:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNzk2Mw==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r373617963", "bodyText": "I'm guessing you're saying we need two tests (one for each kind of URI) to drive out the new behaviour?\n\nYes. And on master, the test using a jr://images/ URI should fail.\nI added some comments around the implementation which I don't think is quite right. There really is no \"default\" concept at the widget level since we can't tell the difference between a value from a form definition vs a submission that's being re-entered.", "author": "lognaturel", "createdAt": "2020-01-31T18:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0OTUzNg==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r374649536", "bodyText": "I added some unite tests for each image widget but still I think it would be good to keep this espresso tests as well.", "author": "grzesiek2010", "createdAt": "2020-02-04T12:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM1MDMxNw==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r375350317", "bodyText": "I put together an example of how I think we could drive out the changes to the ImageWidgets using just Robolectric. It requires an update to our createMockReference method so it can use real files.\nhttps://gist.github.com/seadowg/a9dd682666b2ec7b8f9d242f6553e9ea\nI'm very interested in seeing how far we can go with testing Widgets in isolation as I think it would let us write a lot fewer Espresso tests. Can totally see that it might just feel easier/better to stick with the Espresso test here though.", "author": "seadowg", "createdAt": "2020-02-05T16:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNzI3Ng==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r375637276", "bodyText": "@seadowg, when you say \"drive out\", you mean that in a test-driven development sense, right? As in write a test that describes the desired behavior which initially fails and use that test to get to a good code design? I just want to make sure that we're all on the same page. I do think that's a powerful approach that would be good to use more as opposed to writing some code and then fitting tests around it.\nI think that both the tests that @grzesiek2010 added and the one @seadowg is proposing basically check to make sure that the ReferenceManager gets used to resolve a jr://images URI. @grzesiek2010's very much rely on the current structure of the code because the unit they test is the method that goes from an answer value in an instance to an actual path. What I like about @seadowg's in contrast is that it is at a higher level and verifies what the user ultimately cares about -- that the image that will be shown is the one they expect. It requires exposing a getter for the imageView but that change seems acceptable to me. The test remains high-level enough that it could support a refactor of the functionality it tests. @grzesiek2010, would a test like that make you feel comfortable dropping the Espresso test?\nAs I mentioned before, ideally we'd have an analogous test for an image without a jr://images prefix. I believe that would take a non-trivial refactor because of the dependency that addCurrentImageToLayout has on FormController.", "author": "lognaturel", "createdAt": "2020-02-06T04:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMTg1OA==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r375731858", "bodyText": "when you say \"drive out\", you mean that in a test-driven development sense, right? As in write a test that describes the desired behavior which initially fails and use that test to get to a good code design?\n\nYes exactly. I find a nice trick for writing these after the fact is to comment out the changes in the code, write the tests for the behaviour, verify they they're red/fail and then bring the code back (uncomment) until you're green again.\n\nIt requires exposing a getter for the imageView but that change seems acceptable to me.\n\nYeah this can seem weird given you'd usually avoid making something public just to test it - you want to test the \"interface\" and so as you were pointing out elsewhere it can be a sign that you need to change your design. In this case the imageView is \"visible\" to the user so actually is part of the \"interface\".", "author": "seadowg", "createdAt": "2020-02-06T09:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMTc5Nw==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r376331797", "bodyText": "would a test like that make you feel comfortable dropping the Espresso test?\n\nyes I think so but if it's only about test I would vote for testing it and merging as is and then working on tests in a separate pr.", "author": "grzesiek2010", "createdAt": "2020-02-07T10:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMDc4MA==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r376820780", "bodyText": "Works for me. Maybe @seadowg can take the test he's written, polish it up and send it in, also removing the Espresso test. Perhaps it will also be a reasonable time to pull out the FormController dependency and do the test for non-jr://images files?", "author": "lognaturel", "createdAt": "2020-02-09T22:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MjYzMA==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r376952630", "bodyText": "Sounds good to me!", "author": "seadowg", "createdAt": "2020-02-10T09:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNTU5Mg==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r373615592", "bodyText": "I think that here you can just try to use the reference manager to resolve the ref and go with that if it works. You don't want to copy the image and you don't want to change what value is in the instance (binaryName). The instance value should only change if the image is replaced (including if an image previously from jr://images/ is annotated).", "author": "lognaturel", "createdAt": "2020-01-31T18:16:44Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BaseImageWidget.java", "diffHunk": "@@ -154,27 +157,25 @@ protected void addCurrentImageToLayout() {\n             int screenHeight = metrics.heightPixels;\n \n             File f = new File(getInstanceFolder() + File.separator + binaryName);\n+            if (!f.exists()) {\n+                f = addDefaultImageIfExists(f);", "originalCommit": "98dff8f88921587c48eabeb7a73f116e44457845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDExNA==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r374010114", "bodyText": "If I don't copy the image it won't be saved in instance dir and it won't be uploaded to a server.", "author": "grzesiek2010", "createdAt": "2020-02-03T09:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3MDgyOA==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r374470828", "bodyText": "That is the intent! You can read more about that in the forum thread. You'll see I wasn't on board initially but I was convinced.", "author": "lognaturel", "createdAt": "2020-02-04T04:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNTU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0ODkzNw==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r374648937", "bodyText": "Ok I fixed it, now it should be ok.", "author": "grzesiek2010", "createdAt": "2020-02-04T12:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNTU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjkwNQ==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r373616905", "bodyText": "This means you're also trying to manually get things from the media folder if a file has no prefix? Why? Also consider that if a jr://file/ URI is set, for example, you'd end up with a path that looks like /path/to/media/folder/jr://file/name", "author": "lognaturel", "createdAt": "2020-01-31T18:19:35Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BaseImageWidget.java", "diffHunk": "@@ -313,4 +314,32 @@ protected void launchActivityForResult(Intent intent, final int resourceCode, fi\n             cancelWaitingForData();\n         }\n     }\n+\n+    private File addDefaultImageIfExists(File f) {\n+        File defaultFile = new File(getDefaultFilePath());\n+        if (defaultFile.exists()) {\n+            binaryName = System.currentTimeMillis() + \".\" + FilenameUtils.getExtension(defaultFile.getName());\n+            FileUtils.copyFile(defaultFile, new File(getInstanceFolder() + File.separator + binaryName));\n+            f = new File(getInstanceFolder() + File.separator + binaryName);\n+        }\n+        return f;\n+    }\n+\n+    private String getDefaultFilePath() {\n+        String defaultFilePath = null;\n+        FormController formController = Collect.getInstance().getFormController();\n+        if (formController != null) {\n+            if (binaryName.startsWith(\"jr://images/\")) {\n+                try {\n+                    defaultFilePath = referenceManager.deriveReference(binaryName).getLocalURI();\n+                } catch (InvalidReferenceException e) {\n+                    Timber.w(e);\n+                }\n+            } else {\n+                defaultFilePath = formController.getMediaFolder() + File.separator + binaryName;", "originalCommit": "98dff8f88921587c48eabeb7a73f116e44457845", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDcwNA==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r374010704", "bodyText": "Ok I assumed that we should support both with and without prefix. I'll get rid of it.", "author": "grzesiek2010", "createdAt": "2020-02-03T09:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjkwNQ=="}], "type": "inlineReview"}, {"oid": "35c51a09b827e498009379528917360d3b378356", "url": "https://github.com/getodk/collect/commit/35c51a09b827e498009379528917360d3b378356", "message": "Support default image files", "committedDate": "2020-02-03T10:48:15Z", "type": "commit"}, {"oid": "f997fd0401de05d91ffa328c5e329d5588a39e1d", "url": "https://github.com/getodk/collect/commit/f997fd0401de05d91ffa328c5e329d5588a39e1d", "message": "Display ImageView only if the file it should contain really exists", "committedDate": "2020-02-03T10:48:45Z", "type": "commit"}, {"oid": "d6050970c6474d356611853825a66f33dee90215", "url": "https://github.com/getodk/collect/commit/d6050970c6474d356611853825a66f33dee90215", "message": "Added automated tests", "committedDate": "2020-02-03T10:49:37Z", "type": "commit"}, {"oid": "e74b3cce734ca6428508f28f40b8c37db6acb003", "url": "https://github.com/getodk/collect/commit/e74b3cce734ca6428508f28f40b8c37db6acb003", "message": "Removed redundant supporitng defaults without prefix", "committedDate": "2020-02-03T10:49:37Z", "type": "commit"}, {"oid": "fc8bc9a992e44fa14595cc571dda0599e2bac87b", "url": "https://github.com/getodk/collect/commit/fc8bc9a992e44fa14595cc571dda0599e2bac87b", "message": "Fixed test", "committedDate": "2020-02-03T10:49:37Z", "type": "commit"}, {"oid": "8133db6727756dfc8e0ad94b1807a3aa12ac1523", "url": "https://github.com/getodk/collect/commit/8133db6727756dfc8e0ad94b1807a3aa12ac1523", "message": "Fixed bugs", "committedDate": "2020-02-03T10:50:58Z", "type": "commit"}, {"oid": "8133db6727756dfc8e0ad94b1807a3aa12ac1523", "url": "https://github.com/getodk/collect/commit/8133db6727756dfc8e0ad94b1807a3aa12ac1523", "message": "Fixed bugs", "committedDate": "2020-02-03T10:50:58Z", "type": "forcePushed"}, {"oid": "b7d1760e896cc70efc5b00a7b5ded9810c6317d0", "url": "https://github.com/getodk/collect/commit/b7d1760e896cc70efc5b00a7b5ded9810c6317d0", "message": "Don't save default images automatically", "committedDate": "2020-02-04T11:32:57Z", "type": "commit"}, {"oid": "e159dcb8359d5fc67885993187aad72b79f2dc65", "url": "https://github.com/getodk/collect/commit/e159dcb8359d5fc67885993187aad72b79f2dc65", "message": "Remoced redundant comment", "committedDate": "2020-02-04T11:34:09Z", "type": "commit"}, {"oid": "cdfc3ab38a08e45e924b7d47ac86027d039310d1", "url": "https://github.com/getodk/collect/commit/cdfc3ab38a08e45e924b7d47ac86027d039310d1", "message": "Naming improvement", "committedDate": "2020-02-04T11:35:01Z", "type": "commit"}, {"oid": "c855970b33e604e3299d0d663ca81e2916fa49bf", "url": "https://github.com/getodk/collect/commit/c855970b33e604e3299d0d663ca81e2916fa49bf", "message": "Added unit tests", "committedDate": "2020-02-04T12:21:53Z", "type": "commit"}, {"oid": "a536708a7b71133a35c22eb62c6fe745f516d228", "url": "https://github.com/getodk/collect/commit/a536708a7b71133a35c22eb62c6fe745f516d228", "message": "Improced test form", "committedDate": "2020-02-04T12:29:25Z", "type": "commit"}, {"oid": "7fecf80f4fbb9513974e1cb7a8ef3c1cf83fc435", "url": "https://github.com/getodk/collect/commit/7fecf80f4fbb9513974e1cb7a8ef3c1cf83fc435", "message": "Removed redundant file", "committedDate": "2020-02-04T12:31:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MjA5Mw==", "url": "https://github.com/getodk/collect/pull/3579#discussion_r375552093", "bodyText": "I think I've said something like this before before -- having to change the visibility of methods to add tests seems like a bit of a red flag. That probably means either the design isn't right or the tests aren't trying out a realistic path through the app.", "author": "lognaturel", "createdAt": "2020-02-05T22:49:00Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BaseImageWidget.java", "diffHunk": "@@ -309,7 +309,7 @@ protected void launchActivityForResult(Intent intent, final int resourceCode, fi\n         }\n     }\n \n-    private File getFile() {\n+    File getFile() {", "originalCommit": "c855970b33e604e3299d0d663ca81e2916fa49bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}