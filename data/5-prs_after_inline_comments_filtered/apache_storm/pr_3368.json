{"pr_number": 3368, "pr_title": "[STORM-3729] fix assgin memory error over 2g", "pr_createdAt": "2020-12-23T08:47:00Z", "pr_url": "https://github.com/apache/storm/pull/3368", "timeline": [{"oid": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad", "url": "https://github.com/apache/storm/commit/d1b3a01761091cf1b181559a9e8f0738bdc6c0ad", "message": "[STORM-3729] fix assgin memory error over 2g", "committedDate": "2020-12-23T08:42:54Z", "type": "commit"}, {"oid": "22de57beac187919a26b70810df002321fe73f33", "url": "https://github.com/apache/storm/commit/22de57beac187919a26b70810df002321fe73f33", "message": "Update UtilsTest.java", "committedDate": "2020-12-23T08:48:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548029960", "bodyText": "Even for several gigabytes, the number is still smaller than Integer.MAX_VALUE in terms of \"m\", \"k\" or \"g\" units, right?", "author": "bipinprasad", "createdAt": "2020-12-23T16:05:09Z", "path": "storm-client/src/jvm/org/apache/storm/utils/Utils.java", "diffHunk": "@@ -1039,7 +1039,7 @@ public static Double parseJvmHeapMemByChildOpts(List<String> options, Double def\n                 }\n                 Matcher m = optsPattern.matcher(option);\n                 while (m.find()) {\n-                    int value = Integer.parseInt(m.group(1));\n+                    long value = Long.parseLong(m.group(1));", "originalCommit": "d1b3a01761091cf1b181559a9e8f0738bdc6c0ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMzc1Mw==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548033753", "bodyText": "The problem is from \n  \n    \n      storm/storm-client/src/jvm/org/apache/storm/utils/Utils.java\n    \n    \n         Line 1105\n      in\n      ab6b6f6\n    \n    \n    \n    \n\n        \n          \n           Double result = value * unit / 1024.0 / 1024.0; \n        \n    \n  \n\n\n2 * 1024 * 1024 * 1024= 2^31 > (2^31-1) = Integer.MAX_VALUE", "author": "Ethanlm", "createdAt": "2020-12-23T16:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzNzY2MQ==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548037661", "bodyText": "RHS expression \"should\" be promoted to double - wonder why that is not not happening.", "author": "bipinprasad", "createdAt": "2020-12-23T16:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE2MTYzMw==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548161633", "bodyText": "value * unit has integer overflow so it equals to -2147483648.\nThen -2147483648 / 1024.0 / 1024.0 = -2048.0, this is when it is casted to double.", "author": "Ethanlm", "createdAt": "2020-12-23T19:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE2ODM3Ng==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548168376", "bodyText": "Tested this - RHS is not getting promoted to a double. But the following works with \"int value:\"\ndouble result = 1.0 * value * unit / 1024.0 / 1024.0;\n\n   (without \"1.0 *\" the new case test fails)", "author": "bipinprasad", "createdAt": "2020-12-23T19:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE3ODgwNg==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548178806", "bodyText": "@Ethanlm that is definitely what is happening - but I find this surprising, the expression should be widened to a double (set at compile time because of doubles in the expression (1024.0).Maybe there is a fine print at https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html.", "author": "bipinprasad", "createdAt": "2020-12-23T19:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MDIyNg==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548240226", "bodyText": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.7\n\nThe left-hand operand of a binary operator appears to be fully evaluated before any part of the right-hand operand is evaluated.\nThe Java programming language guarantees that every operand of an operator (except the conditional operators &&, ||, and ? :) appears to be fully evaluated before any part of the operation itself is performed.\n\nSo I would look at value * unit / 1024.0 / 1024.0;  as\nint tmp = value * unit;\ndouble tmp1 = tmp / 1024.0;\ndouble tmp2 = tmp1 / 1024.0;\n\nAnd the Widening Primitive Conversion happens at each operation. Looking at the byte code of this short example:\njava:\npublic static void main(String[] args)  {\n        int value = 2;\n        int unit = 1024 * 1024 * 1024;\n        double result = value * unit / 1024.0 / 1024.0 ;\n        System.out.println(result);\n}\n\nbytecode:\n  public static void main(java.lang.String[]);\n    Code:\n       0: iconst_2\n       1: istore_1\n       2: ldc           #2                  // int 1073741824\n       4: istore_2\n       5: iload_1\n       6: iload_2\n       7: imul\n       8: i2d\n       9: ldc2_w        #3                  // double 1024.0d\n      12: ddiv\n      13: ldc2_w        #3                  // double 1024.0d\n      16: ddiv\n      17: dstore_3\n      18: getstatic     #5                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      21: dload_3\n      22: invokevirtual #6                  // Method java/io/PrintStream.println:(D)V\n      25: return\n}\n\n\nIt first calculate value * unit based on integer. Then on line8, i2d is invoked to convert integer to double.", "author": "Ethanlm", "createdAt": "2020-12-23T21:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU2NjgxMQ==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548566811", "bodyText": "@Ethanlm thanks for the detailed bytecode explanation. This behavior is the same in jdk14 and jdk16EA. I checked via jshell.", "author": "bipinprasad", "createdAt": "2020-12-24T15:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyOTk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyNTcxNA==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548025714", "bodyText": "nit: indention is a little off", "author": "Ethanlm", "createdAt": "2020-12-23T15:55:29Z", "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "diffHunk": "@@ -94,13 +94,15 @@ public void parseJvmHeapMemByChildOptsTestM() {\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100M results in 100 MB\", \"Xmx100m\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100m results in 100 MB\", \"Xmx100M\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"-Xmx100M results in 100 MB\", \"-Xmx100m\", 100.0);\n+\tdoParseJvmHeapMemByChildOptsTest(\"-Xmx2048M results in 2048 MB\", \"-Xmx2048m\", 2048.0);", "originalCommit": "22de57beac187919a26b70810df002321fe73f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyNTc3Mg==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548025772", "bodyText": "nit: indention is a little off", "author": "Ethanlm", "createdAt": "2020-12-23T15:55:34Z", "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "diffHunk": "@@ -94,13 +94,15 @@ public void parseJvmHeapMemByChildOptsTestM() {\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100M results in 100 MB\", \"Xmx100m\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"Xmx100m results in 100 MB\", \"Xmx100M\", 100.0);\n         doParseJvmHeapMemByChildOptsTest(\"-Xmx100M results in 100 MB\", \"-Xmx100m\", 100.0);\n+\tdoParseJvmHeapMemByChildOptsTest(\"-Xmx2048M results in 2048 MB\", \"-Xmx2048m\", 2048.0);\n     }\n \n     @Test\n     public void parseJvmHeapMemByChildOptsTestG() {\n         doParseJvmHeapMemByChildOptsTest(\"Xmx1g results in 1024 MB\", \"Xmx1g\", 1024.0);\n         doParseJvmHeapMemByChildOptsTest(\"Xmx1G results in 1024 MB\", \"Xmx1G\", 1024.0);\n         doParseJvmHeapMemByChildOptsTest(\"-Xmx1g results in 1024 MB\", \"-Xmx1g\", 1024.0);\n+\tdoParseJvmHeapMemByChildOptsTest(\"-Xmx2g results in 2048 MB\", \"-Xmx2g\", 2048.0);", "originalCommit": "22de57beac187919a26b70810df002321fe73f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE5MDUyNw==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548190527", "bodyText": "Another nit: Would be nice to fix the UtilsTest#80 so that parameters are in correct order - first expected, then actual. Otherwise error message is confusing.", "author": "bipinprasad", "createdAt": "2020-12-23T20:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyNTc3Mg=="}], "type": "inlineReview"}, {"oid": "355efed0122c2013d4031b1b8cd53df0f3762629", "url": "https://github.com/apache/storm/commit/355efed0122c2013d4031b1b8cd53df0f3762629", "message": "solve indention error", "committedDate": "2020-12-24T00:16:33Z", "type": "commit"}, {"oid": "b98a462347599b606200f119361b1b7dfd6d0ce7", "url": "https://github.com/apache/storm/commit/b98a462347599b606200f119361b1b7dfd6d0ce7", "message": "[STORM-3729] fix UtilsTest parameters in correct order.", "committedDate": "2020-12-24T03:15:27Z", "type": "commit"}, {"oid": "fab7bf21b5e133962d1fb174f6c3f01555c67b97", "url": "https://github.com/apache/storm/commit/fab7bf21b5e133962d1fb174f6c3f01555c67b97", "message": "Merge branch 'master' into STORM-3729", "committedDate": "2020-12-24T03:19:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1NjUwOA==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548556508", "bodyText": "doubleValue is redundant", "author": "Ethanlm", "createdAt": "2020-12-24T15:16:44Z", "path": "storm-client/test/jvm/org/apache/storm/utils/UtilsTest.java", "diffHunk": "@@ -89,7 +89,9 @@ private void doParseJvmHeapMemByChildOptsTest(String message, String opt, double\n     }\n \n     private void doParseJvmHeapMemByChildOptsTest(String message, List<String> opts, double expected) {\n-        Assert.assertEquals(message, Utils.parseJvmHeapMemByChildOpts(opts, 123.0), expected, 0);\n+        Assert.assertEquals(\n+            message,\n+            expected, Utils.parseJvmHeapMemByChildOpts(opts, 123.0).doubleValue(), 0);", "originalCommit": "fab7bf21b5e133962d1fb174f6c3f01555c67b97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2MTM2Nw==", "url": "https://github.com/apache/storm/pull/3368#discussion_r548761367", "bodyText": "removed", "author": "zeahoo", "createdAt": "2020-12-24T23:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1NjUwOA=="}], "type": "inlineReview"}, {"oid": "9ad9a3d5320dcc12c764a7831bbe08046c910723", "url": "https://github.com/apache/storm/commit/9ad9a3d5320dcc12c764a7831bbe08046c910723", "message": "[STORM-3729] remove redundant cast from Double to double", "committedDate": "2020-12-24T23:12:47Z", "type": "commit"}]}