{"pr_number": 214, "pr_title": "feat: Update opencensus metrics to include bigtable resource ids and rpc level metrics", "pr_createdAt": "2020-03-05T23:53:39Z", "pr_url": "https://github.com/googleapis/java-bigtable/pull/214", "timeline": [{"oid": "0afccbb52deb99cfd91ce728efa45d1842f62f97", "url": "https://github.com/googleapis/java-bigtable/commit/0afccbb52deb99cfd91ce728efa45d1842f62f97", "message": "missing dep", "committedDate": "2020-03-05T23:00:04Z", "type": "forcePushed"}, {"oid": "cd9d8a5837b964eb315acd2c539ed7dade9750ed", "url": "https://github.com/googleapis/java-bigtable/commit/cd9d8a5837b964eb315acd2c539ed7dade9750ed", "message": "wip", "committedDate": "2020-03-31T22:44:09Z", "type": "forcePushed"}, {"oid": "c38313108791da617cb54fd3060e5f7ec1a944da", "url": "https://github.com/googleapis/java-bigtable/commit/c38313108791da617cb54fd3060e5f7ec1a944da", "message": "feat: Update opencensus metrics to include bigtable resource ids and rpc level metrics\n\nThis PR refactors opencensus metrics integration to use gax's ApiTracers.\nWhich allows this client to instrument individual attempts and tag everything\nwith bigtable resource ids", "committedDate": "2020-04-01T23:14:02Z", "type": "forcePushed"}, {"oid": "b0d92dd9d28e76f7dbf5a1b1ee47a5761cf8db23", "url": "https://github.com/googleapis/java-bigtable/commit/b0d92dd9d28e76f7dbf5a1b1ee47a5761cf8db23", "message": "feat: Update opencensus metrics to include bigtable resource ids and rpc level metrics\n\nThis PR refactors opencensus metrics integration to use gax's ApiTracers.\nWhich allows this client to instrument individual attempts and tag everything\nwith bigtable resource ids", "committedDate": "2020-04-01T23:17:35Z", "type": "forcePushed"}, {"oid": "7f5df26a249e79a9d5971f040c5e2eca3962b006", "url": "https://github.com/googleapis/java-bigtable/commit/7f5df26a249e79a9d5971f040c5e2eca3962b006", "message": "feat: Update opencensus metrics to include bigtable resource ids and rpc level metrics\n\nThis PR refactors opencensus metrics integration to use gax's ApiTracers.\nWhich allows this client to instrument individual attempts and tag everything\nwith bigtable resource ids", "committedDate": "2020-04-02T14:45:55Z", "type": "commit"}, {"oid": "7f5df26a249e79a9d5971f040c5e2eca3962b006", "url": "https://github.com/googleapis/java-bigtable/commit/7f5df26a249e79a9d5971f040c5e2eca3962b006", "message": "feat: Update opencensus metrics to include bigtable resource ids and rpc level metrics\n\nThis PR refactors opencensus metrics integration to use gax's ApiTracers.\nWhich allows this client to instrument individual attempts and tag everything\nwith bigtable resource ids", "committedDate": "2020-04-02T14:45:55Z", "type": "forcePushed"}, {"oid": "78fcc4da89014f81bb4b09bc4667856ecfe02c84", "url": "https://github.com/googleapis/java-bigtable/commit/78fcc4da89014f81bb4b09bc4667856ecfe02c84", "message": "fix deps", "committedDate": "2020-04-02T15:05:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4OTg2Nw==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r402389867", "bodyText": "add*", "author": "kolea2", "createdAt": "2020-04-02T15:09:24Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -117,22 +119,64 @@\n \n   public static EnhancedBigtableStub create(EnhancedBigtableStubSettings settings)\n       throws IOException {\n-    ClientContext clientContext = ClientContext.create(settings);\n \n     return new EnhancedBigtableStub(\n-        settings, clientContext, Tags.getTagger(), Stats.getStatsRecorder());\n+        settings, ClientContext.create(settings), Tags.getTagger(), Stats.getStatsRecorder());\n   }\n \n   @InternalApi(\"Visible for testing\")\n-  private EnhancedBigtableStub(\n+  public EnhancedBigtableStub(\n       EnhancedBigtableStubSettings settings,\n       ClientContext clientContext,\n       Tagger tagger,\n       StatsRecorder statsRecorder) {\n     this.settings = settings;\n-    this.clientContext = clientContext;\n-    this.tagger = tagger;\n-    this.statsRecorder = statsRecorder;\n+\n+    this.clientContext =\n+        clientContext\n+            .toBuilder()\n+            .setTracerFactory(\n+                new CompositeTracerFactory(\n+                    ImmutableList.of(\n+                        // Ad OpenCensus Tracing", "originalCommit": "78fcc4da89014f81bb4b09bc4667856ecfe02c84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MTM2OA==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r402391368", "bodyText": "is nextAttemptDelay used anywhere?", "author": "kolea2", "createdAt": "2020-04-02T15:11:22Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/metrics/MetricsTracer.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import com.google.api.gax.tracing.ApiTracer;\n+import com.google.api.gax.tracing.ApiTracerFactory.OperationType;\n+import com.google.api.gax.tracing.SpanName;\n+import com.google.common.base.Stopwatch;\n+import io.opencensus.stats.MeasureMap;\n+import io.opencensus.stats.StatsRecorder;\n+import io.opencensus.tags.TagContext;\n+import io.opencensus.tags.TagContextBuilder;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tagger;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.annotation.Nullable;\n+import org.threeten.bp.Duration;\n+\n+class MetricsTracer implements ApiTracer {\n+  private final OperationType operationType;\n+\n+  private final Tagger tagger;\n+  private final StatsRecorder stats;\n+\n+  // Tags\n+  private final TagContext parentContext;\n+  private final SpanName spanName;\n+  private final Map<TagKey, TagValue> statsAttributes;\n+\n+  // Operation level metrics\n+  private final AtomicBoolean opFinished = new AtomicBoolean();\n+  private final Stopwatch operationTimer = Stopwatch.createStarted();\n+  private final Stopwatch firstResponsePerOpTimer = Stopwatch.createStarted();\n+  private long operationResponseCount = 0;\n+\n+  // Attempt level metrics\n+  private int attemptCount = 0;\n+  private Stopwatch attemptTimer;\n+  private long attemptResponseCount = 0;\n+\n+  MetricsTracer(\n+      OperationType operationType,\n+      Tagger tagger,\n+      StatsRecorder stats,\n+      SpanName spanName,\n+      Map<TagKey, TagValue> statsAttributes) {\n+    this.operationType = operationType;\n+    this.tagger = tagger;\n+    this.stats = stats;\n+    this.parentContext = tagger.getCurrentTagContext();\n+    this.spanName = spanName;\n+    this.statsAttributes = statsAttributes;\n+  }\n+\n+  @Override\n+  public Scope inScope() {\n+    return new Scope() {\n+      @Override\n+      public void close() {}\n+    };\n+  }\n+\n+  @Override\n+  public void operationSucceeded() {\n+    recordOperationCompletion(null);\n+  }\n+\n+  @Override\n+  public void operationCancelled() {\n+    recordOperationCompletion(new CancellationException());\n+  }\n+\n+  @Override\n+  public void operationFailed(Throwable throwable) {\n+    recordOperationCompletion(throwable);\n+  }\n+\n+  private void recordOperationCompletion(@Nullable Throwable throwable) {\n+    if (!opFinished.compareAndSet(false, true)) {\n+      return;\n+    }\n+    operationTimer.stop();\n+\n+    long elapsed = operationTimer.elapsed(TimeUnit.MILLISECONDS);\n+\n+    MeasureMap measures =\n+        stats\n+            .newMeasureMap()\n+            .put(RpcMeasureConstants.BIGTABLE_OP_LATENCY, elapsed)\n+            .put(RpcMeasureConstants.BIGTABLE_OP_ATTEMPT_COUNT, attemptCount);\n+\n+    if (operationType == OperationType.ServerStreaming\n+        && spanName.getMethodName().equals(\"ReadRows\")) {\n+      measures.put(\n+          RpcMeasureConstants.BIGTABLE_READ_ROWS_FIRST_ROW_LATENCY,\n+          firstResponsePerOpTimer.elapsed(TimeUnit.MILLISECONDS));\n+    }\n+\n+    TagContextBuilder tagCtx =\n+        newTagCtxBuilder()\n+            .putLocal(RpcMeasureConstants.BIGTABLE_STATUS, Util.extractStatus(throwable));\n+\n+    measures.record(tagCtx.build());\n+  }\n+\n+  @Override\n+  public void connectionSelected(String s) {\n+    // noop: cardinality for connection ids is too high to use as tags\n+  }\n+\n+  @Override\n+  public void attemptStarted(int i) {\n+    attemptCount++;\n+    attemptTimer = Stopwatch.createStarted();\n+    attemptResponseCount = 0;\n+  }\n+\n+  @Override\n+  public void attemptSucceeded() {\n+    recordAttemptCompletion(null, null);\n+  }\n+\n+  @Override\n+  public void attemptCancelled() {\n+    recordAttemptCompletion(new CancellationException(), null);\n+  }\n+\n+  @Override\n+  public void attemptFailed(Throwable throwable, Duration duration) {\n+    recordAttemptCompletion(throwable, duration);\n+  }\n+\n+  @Override\n+  public void attemptFailedRetriesExhausted(Throwable throwable) {\n+    recordAttemptCompletion(throwable, null);\n+  }\n+\n+  @Override\n+  public void attemptPermanentFailure(Throwable throwable) {\n+    recordAttemptCompletion(throwable, null);\n+  }\n+\n+  private void recordAttemptCompletion(\n+      @Nullable Throwable throwable, @Nullable Duration nextAttemptDelay) {", "originalCommit": "78fcc4da89014f81bb4b09bc4667856ecfe02c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5OTMxNw==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r402399317", "bodyText": "No, but it's part of the ApiTracer interface and  can be used to record delay", "author": "igorbernstein2", "createdAt": "2020-04-02T15:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMTEzMw==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r402401133", "bodyText": "Actually you are right, its unnecessary", "author": "igorbernstein2", "createdAt": "2020-04-02T15:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5MTM2OA=="}], "type": "inlineReview"}, {"oid": "1a109a40fe39e9c0aebc588237b8497c52e0e77b", "url": "https://github.com/googleapis/java-bigtable/commit/1a109a40fe39e9c0aebc588237b8497c52e0e77b", "message": "typo", "committedDate": "2020-04-02T15:22:28Z", "type": "commit"}, {"oid": "b39dc5a32c8136c7a669f59a19592d81024722fb", "url": "https://github.com/googleapis/java-bigtable/commit/b39dc5a32c8136c7a669f59a19592d81024722fb", "message": "remove unused param", "committedDate": "2020-04-02T15:23:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzNzE4NQ==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r406237185", "bodyText": "super minor, but while you're here can you delete these random comments?", "author": "kolea2", "createdAt": "2020-04-09T14:16:45Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -544,19 +570,9 @@ private EnhancedBigtableStub(\n \n     UnaryCallable<RequestT, ResponseT> traced =\n         new TracedUnaryCallable<>(\n-            inner,\n-            clientContext.getTracerFactory(),\n-            SpanName.of(TRACING_OUTER_CLIENT_NAME, methodName));\n-\n-    UnaryCallable<RequestT, ResponseT> measured =\n-        new MeasuredUnaryCallable<>(\n-            traced,\n-            TRACING_OUTER_CLIENT_NAME + \".\" + methodName,\n-            tagger,\n-            statsRecorder,\n-            clientContext.getClock());\n+            inner, clientContext.getTracerFactory(), SpanName.of(CLIENT_NAME, methodName));\n \n-    return measured.withDefaultCallContext(clientContext.getDefaultCallContext());\n+    return traced.withDefaultCallContext(clientContext.getDefaultCallContext());\n   }\n   // </editor-fold>", "originalCommit": "b39dc5a32c8136c7a669f59a19592d81024722fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NDk2Ng==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r424554966", "bodyText": "I find those comments useful, they allow me to enable code folding in intellij", "author": "igorbernstein2", "createdAt": "2020-05-13T16:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzNzE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMjM1MA==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r424602350", "bodyText": "ohh, a feature I didn't know existed :) Sounds good then!", "author": "kolea2", "createdAt": "2020-05-13T17:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzNzE4NQ=="}], "type": "inlineReview"}, {"oid": "71ea40123ee946cbf00cd1bb11ebb01e11901ff2", "url": "https://github.com/googleapis/java-bigtable/commit/71ea40123ee946cbf00cd1bb11ebb01e11901ff2", "message": "Merge branch 'master' of github.com:googleapis/java-bigtable into metrics-rewrite", "committedDate": "2020-05-13T15:51:11Z", "type": "commit"}, {"oid": "8153020fc716d72176cb6d4010660b7560606f95", "url": "https://github.com/googleapis/java-bigtable/commit/8153020fc716d72176cb6d4010660b7560606f95", "message": "add clirr", "committedDate": "2020-05-13T15:54:02Z", "type": "commit"}, {"oid": "94a0141f27fa0ecdca76b74ecda60830a1c50596", "url": "https://github.com/googleapis/java-bigtable/commit/94a0141f27fa0ecdca76b74ecda60830a1c50596", "message": "review feedback", "committedDate": "2020-05-13T17:38:11Z", "type": "commit"}, {"oid": "f8779aeed65b7aa8349f24caf3e3b130b6e8b452", "url": "https://github.com/googleapis/java-bigtable/commit/f8779aeed65b7aa8349f24caf3e3b130b6e8b452", "message": "code formatting", "committedDate": "2020-05-13T17:39:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3NDk4Mg==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r425174982", "bodyText": "why are we wrapping this in a list?", "author": "kolea2", "createdAt": "2020-05-14T14:20:47Z", "path": "google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/stub/metrics/MetricsTracerTest.java", "diffHunk": "@@ -0,0 +1,401 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.bigtable.data.v2.stub.metrics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import com.google.api.gax.rpc.ClientContext;\n+import com.google.bigtable.v2.BigtableGrpc;\n+import com.google.bigtable.v2.ReadRowsRequest;\n+import com.google.bigtable.v2.ReadRowsResponse;\n+import com.google.bigtable.v2.ReadRowsResponse.CellChunk;\n+import com.google.cloud.bigtable.data.v2.BigtableDataSettings;\n+import com.google.cloud.bigtable.data.v2.models.Query;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStub;\n+import com.google.cloud.bigtable.data.v2.stub.EnhancedBigtableStubSettings;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Range;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.BytesValue;\n+import com.google.protobuf.StringValue;\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.opencensus.common.Function;\n+import io.opencensus.impl.stats.StatsComponentImpl;\n+import io.opencensus.stats.AggregationData;\n+import io.opencensus.stats.AggregationData.CountData;\n+import io.opencensus.stats.AggregationData.DistributionData;\n+import io.opencensus.stats.AggregationData.LastValueDataDouble;\n+import io.opencensus.stats.AggregationData.LastValueDataLong;\n+import io.opencensus.stats.AggregationData.SumDataDouble;\n+import io.opencensus.stats.AggregationData.SumDataLong;\n+import io.opencensus.stats.View;\n+import io.opencensus.stats.ViewData;\n+import io.opencensus.tags.TagKey;\n+import io.opencensus.tags.TagValue;\n+import io.opencensus.tags.Tags;\n+import java.net.ServerSocket;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.mockito.stubbing.Answer;\n+\n+@RunWith(JUnit4.class)\n+public class MetricsTracerTest {\n+  private static final String PROJECT_ID = \"fake-project\";\n+  private static final String INSTANCE_ID = \"fake-instance\";\n+  private static final String APP_PROFILE_ID = \"default\";\n+  private static final String TABLE_ID = \"fake-table\";\n+\n+  private static final ReadRowsResponse DEFAULT_READ_ROWS_RESPONSES =\n+      ReadRowsResponse.newBuilder()\n+          .addChunks(\n+              CellChunk.newBuilder()\n+                  .setRowKey(ByteString.copyFromUtf8(\"fake-key\"))\n+                  .setFamilyName(StringValue.of(\"cf\"))\n+                  .setQualifier(BytesValue.newBuilder().setValue(ByteString.copyFromUtf8(\"q\")))\n+                  .setTimestampMicros(1_000)\n+                  .setValue(ByteString.copyFromUtf8(\"value\"))\n+                  .setCommitRow(true))\n+          .build();\n+\n+  @Rule public final MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+  private Server server;\n+\n+  @Mock(answer = Answers.CALLS_REAL_METHODS)\n+  private BigtableGrpc.BigtableImplBase mockService;\n+\n+  private StatsComponentImpl localStats = new StatsComponentImpl();\n+  private EnhancedBigtableStub stub;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    int port;\n+    try (ServerSocket ss = new ServerSocket(0)) {\n+      port = ss.getLocalPort();\n+    }\n+    server = ServerBuilder.forPort(port).addService(mockService).build();\n+    server.start();\n+\n+    RpcViews.registerBigtableClientViews(localStats.getViewManager());\n+\n+    BigtableDataSettings settings =\n+        BigtableDataSettings.newBuilderForEmulator(port)\n+            .setProjectId(PROJECT_ID)\n+            .setInstanceId(INSTANCE_ID)\n+            .setAppProfileId(APP_PROFILE_ID)\n+            .build();\n+    EnhancedBigtableStubSettings stubSettings = settings.getStubSettings();\n+\n+    stub =\n+        new EnhancedBigtableStub(\n+            stubSettings,\n+            ClientContext.create(stubSettings),\n+            Tags.getTagger(),\n+            localStats.getStatsRecorder());\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    stub.close();\n+    server.shutdown();\n+  }\n+\n+  @Test\n+  public void testReadRowsLatency() throws InterruptedException {\n+    final long sleepTime = 50;\n+\n+    doAnswer(\n+            new Answer() {\n+              @Override\n+              public Object answer(InvocationOnMock invocation) throws Throwable {\n+                @SuppressWarnings(\"unchecked\")\n+                StreamObserver<ReadRowsResponse> observer =\n+                    (StreamObserver<ReadRowsResponse>) invocation.getArguments()[1];\n+                Thread.sleep(sleepTime);\n+                observer.onNext(DEFAULT_READ_ROWS_RESPONSES);\n+                observer.onCompleted();\n+                return null;\n+              }\n+            })\n+        .when(mockService)\n+        .readRows(any(ReadRowsRequest.class), anyObserver(ReadRowsResponse.class));\n+\n+    Stopwatch stopwatch = Stopwatch.createStarted();\n+    Lists.newArrayList(stub.readRowsCallable().call(Query.create(TABLE_ID)));\n+    long elapsed = stopwatch.elapsed(TimeUnit.MILLISECONDS);\n+\n+    // Give OpenCensus a chance to update the views asynchronously.\n+    Thread.sleep(100);\n+\n+    long opLatency =\n+        getAggregationValueAsLong(\n+            RpcViewConstants.BIGTABLE_OP_LATENCY_VIEW,\n+            ImmutableMap.of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.ReadRows\"),\n+                RpcMeasureConstants.BIGTABLE_STATUS, TagValue.create(\"OK\")));\n+    assertThat(opLatency).isIn(Range.closed(sleepTime, elapsed));\n+  }\n+\n+  @Test\n+  public void testReadRowsOpCount() throws InterruptedException {\n+    doAnswer(\n+            new Answer() {\n+              @Override\n+              public Object answer(InvocationOnMock invocation) {\n+                @SuppressWarnings(\"unchecked\")\n+                StreamObserver<ReadRowsResponse> observer =\n+                    (StreamObserver<ReadRowsResponse>) invocation.getArguments()[1];\n+                observer.onNext(DEFAULT_READ_ROWS_RESPONSES);\n+                observer.onCompleted();\n+                return null;\n+              }\n+            })\n+        .when(mockService)\n+        .readRows(any(ReadRowsRequest.class), anyObserver(ReadRowsResponse.class));\n+\n+    Lists.newArrayList(stub.readRowsCallable().call(Query.create(TABLE_ID)));\n+    Lists.newArrayList(stub.readRowsCallable().call(Query.create(TABLE_ID)));\n+\n+    // Give OpenCensus a chance to update the views asynchronously.\n+    Thread.sleep(100);\n+\n+    long opLatency =\n+        getAggregationValueAsLong(\n+            RpcViewConstants.BIGTABLE_COMPLETED_OP_VIEW,\n+            ImmutableMap.of(\n+                RpcMeasureConstants.BIGTABLE_OP, TagValue.create(\"Bigtable.ReadRows\"),\n+                RpcMeasureConstants.BIGTABLE_STATUS, TagValue.create(\"OK\")));\n+    assertThat(opLatency).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void testReadRowsFirstRow() throws InterruptedException {\n+    final long beforeSleep = 50;\n+    final long afterSleep = 50;\n+\n+    doAnswer(\n+            new Answer() {\n+              @Override\n+              public Object answer(InvocationOnMock invocation) throws Throwable {\n+                @SuppressWarnings(\"unchecked\")\n+                StreamObserver<ReadRowsResponse> observer =\n+                    (StreamObserver<ReadRowsResponse>) invocation.getArguments()[1];\n+                Thread.sleep(beforeSleep);\n+                observer.onNext(DEFAULT_READ_ROWS_RESPONSES);\n+                Thread.sleep(afterSleep);\n+                observer.onCompleted();\n+                return null;\n+              }\n+            })\n+        .when(mockService)\n+        .readRows(any(ReadRowsRequest.class), anyObserver(ReadRowsResponse.class));\n+\n+    Stopwatch stopwatch = Stopwatch.createStarted();\n+    Lists.newArrayList(stub.readRowsCallable().call(Query.create(TABLE_ID)));", "originalCommit": "f8779aeed65b7aa8349f24caf3e3b130b6e8b452", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3NjUzNA==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r425176534", "bodyText": "To read the stream...the returned iterator is lazy and needs to be consumed", "author": "igorbernstein2", "createdAt": "2020-05-14T14:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3NDk4Mg=="}], "type": "inlineReview"}, {"oid": "787bc594a3579f9bcd8c9076befe4c787baeceeb", "url": "https://github.com/googleapis/java-bigtable/commit/787bc594a3579f9bcd8c9076befe4c787baeceeb", "message": "fix deps", "committedDate": "2020-05-14T19:29:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MDYzMw==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r425380633", "bodyText": "@igorbernstein2, please take a look here to ensure I didn't miss anything in updating the branch", "author": "kolea2", "createdAt": "2020-05-14T19:31:13Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStub.java", "diffHunk": "@@ -59,9 +62,9 @@\n import com.google.cloud.bigtable.data.v2.models.RowAdapter;\n import com.google.cloud.bigtable.data.v2.models.RowMutation;\n import com.google.cloud.bigtable.data.v2.models.RowMutationEntry;\n-import com.google.cloud.bigtable.data.v2.stub.metrics.MeasuredMutateRowsCallable;", "originalCommit": "787bc594a3579f9bcd8c9076befe4c787baeceeb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MDcxNA==", "url": "https://github.com/googleapis/java-bigtable/pull/214#discussion_r425380714", "bodyText": "@igorbernstein2 same here please :)", "author": "kolea2", "createdAt": "2020-05-14T19:31:22Z", "path": "google-cloud-bigtable/src/main/java/com/google/cloud/bigtable/data/v2/stub/EnhancedBigtableStubSettings.java", "diffHunk": "@@ -20,17 +20,14 @@\n import com.google.api.gax.batching.BatchingSettings;\n import com.google.api.gax.batching.FlowControlSettings;", "originalCommit": "787bc594a3579f9bcd8c9076befe4c787baeceeb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}