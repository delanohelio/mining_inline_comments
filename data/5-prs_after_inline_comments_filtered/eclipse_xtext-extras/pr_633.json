{"pr_number": 633, "pr_title": "[eclipse/xtext#1777] ported xtend code to java", "pr_createdAt": "2020-08-01T09:53:06Z", "pr_url": "https://github.com/eclipse/xtext-extras/pull/633", "timeline": [{"oid": "aa3fc54ccf226e1b37b0bf4582759c8c650fb2e1", "url": "https://github.com/eclipse/xtext-extras/commit/aa3fc54ccf226e1b37b0bf4582759c8c650fb2e1", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-08-01T09:42:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2MTQzMg==", "url": "https://github.com/eclipse/xtext-extras/pull/633#discussion_r464261432", "bodyText": "Cosmetics: Can be annotated with @Mandatory", "author": "szarnekow", "createdAt": "2020-08-03T08:17:06Z", "path": "org.eclipse.xtext.generator/src/org/eclipse/xtext/generator/adapter/FragmentAdapter.java", "diffHunk": "@@ -0,0 +1,626 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.generator.adapter;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.xpand2.XpandExecutionContext;\n+import org.eclipse.xpand2.XpandExecutionContextImpl;\n+import org.eclipse.xpand2.output.Outlet;\n+import org.eclipse.xpand2.output.PostProcessor;\n+import org.eclipse.xtend.expression.Variable;\n+import org.eclipse.xtend.type.impl.java.JavaBeansMetaModel;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtend2.lib.StringConcatenationClient;\n+import org.eclipse.xtext.generator.Binding;\n+import org.eclipse.xtext.generator.Generator;\n+import org.eclipse.xtext.generator.IFileSystemAccess2;\n+import org.eclipse.xtext.generator.IGeneratorFragment;\n+import org.eclipse.xtext.generator.IGeneratorFragmentExtension;\n+import org.eclipse.xtext.generator.IGeneratorFragmentExtension2;\n+import org.eclipse.xtext.generator.IGeneratorFragmentExtension3;\n+import org.eclipse.xtext.generator.IGeneratorFragmentExtension4;\n+import org.eclipse.xtext.generator.LanguageConfig;\n+import org.eclipse.xtext.generator.Naming;\n+import org.eclipse.xtext.generator.NamingAware;\n+import org.eclipse.xtext.generator.NewlineNormalizer;\n+import org.eclipse.xtext.parser.IEncodingProvider;\n+import org.eclipse.xtext.xbase.lib.CollectionExtensions;\n+import org.eclipse.xtext.xbase.lib.Conversions;\n+import org.eclipse.xtext.xtext.generator.AbstractXtextGeneratorFragment;\n+import org.eclipse.xtext.xtext.generator.CodeConfig;\n+import org.eclipse.xtext.xtext.generator.IXtextGeneratorLanguage;\n+import org.eclipse.xtext.xtext.generator.Issues;\n+import org.eclipse.xtext.xtext.generator.MweIssues;\n+import org.eclipse.xtext.xtext.generator.XtextGeneratorLanguage;\n+import org.eclipse.xtext.xtext.generator.XtextGeneratorNaming;\n+import org.eclipse.xtext.xtext.generator.model.GuiceModuleAccess;\n+import org.eclipse.xtext.xtext.generator.model.IXtextGeneratorFileSystemAccess;\n+import org.eclipse.xtext.xtext.generator.model.TypeReference;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @since 2.9\n+ * \n+ * @deprecated please rewrite your fragment with the new generator\n+ * infrastructure.\n+ */\n+@Deprecated\n+public class FragmentAdapter extends AbstractXtextGeneratorFragment {\n+\t@Inject\n+\tprivate CodeConfig codeConfig;\n+\n+\t@Inject\n+\tprivate IEncodingProvider encodingProvider;\n+\n+\t@Inject\n+\tprivate XtextGeneratorNaming xtextGeneratorNaming;\n+\n+\tprivate IGeneratorFragment fragment;\n+\n+\tprivate Naming naming;\n+\n+\tprivate final List<PostProcessor> postProcessors = new ArrayList<>();\n+\n+\tpublic FragmentAdapter() {\n+\t}\n+\n+\tpublic FragmentAdapter(IGeneratorFragment fragment) {\n+\t\tsetFragment(fragment);\n+\t}\n+\n+\tpublic void addPostProcessor(PostProcessor postProcessor) {\n+\t\tpostProcessors.add(postProcessor);\n+\t}\n+\n+\t@Override\n+\tpublic void checkConfiguration(Issues issues) {\n+\t\tif (naming == null) {\n+\t\t\tnaming = createNaming();\n+\t\t}\n+\t\tif (fragment == null) {\n+\t\t\tissues.addError(\"The property \\'fragment\\' must be set.\", this);\n+\t\t} else {\n+\t\t\tfragment.checkConfiguration(((MweIssues) issues).getDelegate());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void generate() {\n+\t\tif (naming == null) {\n+\t\t\tnaming = createNaming();\n+\t\t}\n+\t\tXpandExecutionContext ctx = createExecutionContext();\n+\t\tLanguageConfig config1 = createLanguageConfig();\n+\t\tif (fragment instanceof IGeneratorFragmentExtension2) {\n+\t\t\t((IGeneratorFragmentExtension2) fragment).generate(config1, ctx);\n+\t\t} else {\n+\t\t\tfragment.generate(config1.getGrammar(), ctx);\n+\t\t}\n+\t\tgenerateStandaloneSetup(config1, ctx);\n+\t\tgenerateGuiceModuleRt(config1, ctx);\n+\t\tgenerateGuiceModuleUi(config1, ctx);\n+\t\tgeneratePluginXmlRt(config1, ctx);\n+\t\tgenerateManifestRt(config1, ctx);\n+\t\tgeneratePluginXmlUi(config1, ctx);\n+\t\tgenerateManifestUi(config1, ctx);\n+\t\tgenerateManifestIde(config1, ctx);\n+\t\tgenerateManifestTests(config1, ctx);\n+\t}\n+\n+\tprivate void generateStandaloneSetup(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tctx.getOutput().openFile(null, StringConcatOutputImpl.STRING_OUTLET);\n+\t\ttry {\n+\t\t\tIXtextGeneratorLanguage config2 = getLanguage();\n+\t\t\tif (fragment instanceof IGeneratorFragmentExtension2) {\n+\t\t\t\t((IGeneratorFragmentExtension2) fragment).addToStandaloneSetup(config1, ctx);\n+\t\t\t} else {\n+\t\t\t\tfragment.addToStandaloneSetup(config1.getGrammar(), ctx);\n+\t\t\t}\n+\t\t\tStringConcatenation result = ((StringConcatOutputImpl) ctx.getOutput()).getStringOutlet();\n+\t\t\tconfig2.getRuntimeGenSetup().getRegistrations().add(new StringConcatenationClient() {\n+\t\t\t\t@Override\n+\t\t\t\tprotected void appendTo(StringConcatenationClient.TargetStringConcatenation builder) {\n+\t\t\t\t\tbuilder.append(decreaseIndentation(result.toString(), 2));\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tconfig2.getRuntimeGenSetup().getImports().add(new TypeReference(\"org.eclipse.emf.ecore.EPackage\"));\n+\t\t\tconfig2.getRuntimeGenSetup().getImports().add(new TypeReference(\"org.eclipse.emf.ecore.resource.Resource\"));\n+\t\t} finally {\n+\t\t\tctx.getOutput().closeFile();\n+\t\t}\n+\t}\n+\n+\tprivate void generateGuiceModuleRt(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tIXtextGeneratorLanguage config2 = getLanguage();\n+\t\tSet<Binding> bindings = fragment.getGuiceBindingsRt(config1.getGrammar());\n+\t\tif (bindings != null) {\n+\t\t\tconfig2.getRuntimeGenModule().addAll(Iterables.transform(bindings, it -> translateBinding(it)));\n+\t\t}\n+\t\tif (fragment instanceof IGeneratorFragmentExtension4) {\n+\t\t\tString superClass = ((IGeneratorFragmentExtension4) fragment)\n+\t\t\t\t\t.getDefaultRuntimeModuleClassName(config1.getGrammar());\n+\t\t\tif (superClass != null) {\n+\t\t\t\tconfig2.getRuntimeGenModule().setSuperClass(new TypeReference(superClass));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void generateGuiceModuleUi(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tIXtextGeneratorLanguage config2 = getLanguage();\n+\t\tSet<Binding> bindings = fragment.getGuiceBindingsUi(config1.getGrammar());\n+\t\tif (bindings != null) {\n+\t\t\tconfig2.getEclipsePluginGenModule().addAll(Iterables.transform(bindings, it -> translateBinding(it)));\n+\t\t}\n+\t\tif (fragment instanceof IGeneratorFragmentExtension4) {\n+\t\t\tString superClass = ((IGeneratorFragmentExtension4) fragment)\n+\t\t\t\t\t.getDefaultUiModuleClassName(config1.getGrammar());\n+\t\t\tif (superClass != null) {\n+\t\t\t\tconfig2.getEclipsePluginGenModule().setSuperClass(new TypeReference(superClass));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate GuiceModuleAccess.Binding translateBinding(Binding it) {\n+\t\tGuiceModuleAccess.BindKey newKey;\n+\t\tString[] statements = it.getValue().getStatements();\n+\t\tif (statements == null\n+\t\t\t\t|| statements.length==0) {\n+\t\t\tString type = it.getKey().getType();\n+\t\t\tTypeReference guessTypeRef = null;\n+\t\t\tif (type != null) {\n+\t\t\t\tguessTypeRef = TypeReference.guessTypeRef(type);\n+\t\t\t}\n+\t\t\tnewKey = new GuiceModuleAccess.BindKey(null, guessTypeRef, it.getKey().isSingleton(), it.getKey().isEagerSingleton());\n+\t\t} else {\n+\t\t\tnewKey = new GuiceModuleAccess.BindKey(getClassName(it.getKey().getType()), null, it.getKey().isSingleton(), it.getKey().isEagerSingleton());\n+\t\t}\n+\t\tString typeName = it.getValue().getTypeName();\n+\t\tTypeReference guessTypeRef2 = null;\n+\t\tif (typeName != null) {\n+\t\t\tguessTypeRef2 = TypeReference.guessTypeRef(typeName);\n+\t\t}\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tList<String> statementList = (List<String>) Conversions.doWrapArray(statements);\n+\t\tGuiceModuleAccess.BindValue newValue = new GuiceModuleAccess.BindValue(it.getValue().getExpression(), guessTypeRef2,\n+\t\t\t\tit.getValue().isProvider(), Lists.transform(\n+\t\t\t\t\t\tstatementList, (String s) -> {\n+\t\t\t\t\t\t\tif (s.endsWith(\";\")) {\n+\t\t\t\t\t\t\t\treturn s;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\treturn s + \";\";\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}));\n+\t\treturn new GuiceModuleAccess.Binding(newKey, newValue, it.isFinal(), it.getContributedBy());\n+\t}\n+\n+\tprivate String getClassName(String qualifiedName) {\n+\t\tint classStart = qualifiedName.length();\n+\t\tfor (int i = qualifiedName.length() - 1; i >= 0; i--) {\n+\t\t\tif (matches(qualifiedName.charAt(i), '.')) {\n+\t\t\t\tif (Character.isLowerCase(qualifiedName.charAt((i + 1)))) {\n+\t\t\t\t\treturn qualifiedName.substring(classStart);\n+\t\t\t\t} else {\n+\t\t\t\t\tclassStart = i + 1;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn qualifiedName;\n+\t}\n+\n+\tprivate void generatePluginXmlRt(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tif (getProjectConfig().getRuntime().getPluginXml() != null) {\n+\t\t\tctx.getOutput().openFile(null, StringConcatOutputImpl.STRING_OUTLET);\n+\t\t\ttry {\n+\t\t\t\tif (fragment instanceof IGeneratorFragmentExtension2) {\n+\t\t\t\t\t((IGeneratorFragmentExtension2) fragment).addToPluginXmlRt(config1, ctx);\n+\t\t\t\t} else {\n+\t\t\t\t\tfragment.addToPluginXmlRt(config1.getGrammar(), ctx);\n+\t\t\t\t}\n+\t\t\t\tStringConcatenation result = ((StringConcatOutputImpl) ctx.getOutput()).getStringOutlet();\n+\t\t\t\tStringBuilder entry = decreaseIndentation(result.toString(), 1);\n+\t\t\t\tif (!entry.toString().trim().isEmpty()) {\n+\t\t\t\t\tgetProjectConfig().getRuntime().getPluginXml().getEntries().add(entry);\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tctx.getOutput().closeFile();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void generatePluginXmlUi(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tif (getProjectConfig().getEclipsePlugin().getPluginXml() != null) {\n+\t\t\tctx.getOutput().openFile(null, StringConcatOutputImpl.STRING_OUTLET);\n+\t\t\ttry {\n+\t\t\t\tif (fragment instanceof IGeneratorFragmentExtension2) {\n+\t\t\t\t\t((IGeneratorFragmentExtension2) fragment).addToPluginXmlUi(config1, ctx);\n+\t\t\t\t} else {\n+\t\t\t\t\tfragment.addToPluginXmlUi(config1.getGrammar(), ctx);\n+\t\t\t\t}\n+\t\t\t\tStringConcatenation result = ((StringConcatOutputImpl) ctx.getOutput()).getStringOutlet();\n+\t\t\t\tStringBuilder entry = decreaseIndentation(result.toString(), 1);\n+\t\t\t\tif (!entry.toString().trim().isEmpty()) {\n+\t\t\t\t\tgetProjectConfig().getEclipsePlugin().getPluginXml().getEntries().add(entry);\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tctx.getOutput().closeFile();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void generateManifestRt(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tif (getProjectConfig().getRuntime().getManifest() != null) {\n+\t\t\tString[] exported = fragment.getExportedPackagesRt(config1.getGrammar());\n+\t\t\tif (exported != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getRuntime().getManifest().getExportedPackages(),\n+\t\t\t\t\t\texported);\n+\t\t\t}\n+\t\t\tString[] required = fragment.getRequiredBundlesRt(config1.getGrammar());\n+\t\t\tif (required != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getRuntime().getManifest().getRequiredBundles(),\n+\t\t\t\t\t\trequired);\n+\t\t\t}\n+\t\t\tString[] imported = fragment.getImportedPackagesRt(config1.getGrammar());\n+\t\t\tif (imported != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getRuntime().getManifest().getImportedPackages(),\n+\t\t\t\t\t\timported);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void generateManifestUi(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tif (getProjectConfig().getEclipsePlugin().getManifest() != null) {\n+\t\t\tString[] exported = fragment.getExportedPackagesUi(config1.getGrammar());\n+\t\t\tif (exported != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getEclipsePlugin().getManifest().getExportedPackages(),\n+\t\t\t\t\t\texported);\n+\t\t\t}\n+\t\t\tString[] required = fragment.getRequiredBundlesUi(config1.getGrammar());\n+\t\t\tif (required != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getEclipsePlugin().getManifest().getRequiredBundles(),\n+\t\t\t\t\t\trequired);\n+\t\t\t}\n+\t\t\tString[] imported = fragment.getImportedPackagesUi(config1.getGrammar());\n+\t\t\tif (imported != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getEclipsePlugin().getManifest().getImportedPackages(),\n+\t\t\t\t\t\timported);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void generateManifestIde(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tif (fragment instanceof IGeneratorFragmentExtension3\n+\t\t\t\t&& getProjectConfig().getGenericIde().getManifest() != null) {\n+\t\t\tIGeneratorFragmentExtension3 fr = ((IGeneratorFragmentExtension3) fragment);\n+\t\t\tString[] exported = fr.getExportedPackagesIde(config1.getGrammar());\n+\t\t\tif (exported != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getGenericIde().getManifest().getExportedPackages(),\n+\t\t\t\t\t\texported);\n+\t\t\t}\n+\t\t\tString[] required = fr.getRequiredBundlesIde(config1.getGrammar());\n+\t\t\tif (required != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getGenericIde().getManifest().getRequiredBundles(),\n+\t\t\t\t\t\trequired);\n+\t\t\t}\n+\t\t\tString[] imported = fr.getImportedPackagesIde(config1.getGrammar());\n+\t\t\tif (imported != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getGenericIde().getManifest().getImportedPackages(),\n+\t\t\t\t\t\timported);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void generateManifestTests(LanguageConfig config1, XpandExecutionContext ctx) {\n+\t\tif (fragment instanceof IGeneratorFragmentExtension\n+\t\t\t\t&& getProjectConfig().getRuntimeTest().getManifest() != null) {\n+\t\t\tIGeneratorFragmentExtension fr = ((IGeneratorFragmentExtension) fragment);\n+\t\t\tString[] exported = fr.getExportedPackagesTests(config1.getGrammar());\n+\t\t\tif (exported != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getRuntimeTest().getManifest().getExportedPackages(),\n+\t\t\t\t\t\texported);\n+\t\t\t}\n+\t\t\tString[] required = fr.getRequiredBundlesTests(config1.getGrammar());\n+\t\t\tif (required != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getRuntimeTest().getManifest().getRequiredBundles(),\n+\t\t\t\t\t\trequired);\n+\t\t\t}\n+\t\t\tString[] imported = fr.getImportedPackagesTests(config1.getGrammar());\n+\t\t\tif (imported != null) {\n+\t\t\t\tCollectionExtensions.addAll(getProjectConfig().getRuntimeTest().getManifest().getImportedPackages(),\n+\t\t\t\t\t\timported);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprotected Naming createNaming() {\n+\t\tIXtextGeneratorLanguage config2 = getLanguage();\n+\t\tNaming result = new Naming();\n+\t\tIXtextGeneratorFileSystemAccess runtimeRoot = getProjectConfig().getRuntime().getRoot();\n+\t\tString runtimeRootPath = null;\n+\t\tif (runtimeRoot != null) {\n+\t\t\truntimeRootPath = runtimeRoot.getPath();\n+\t\t}\n+\t\tresult.setProjectNameRt(getLastSegment(runtimeRootPath));\n+\t\tIXtextGeneratorFileSystemAccess genericIdeRoot = getProjectConfig().getGenericIde().getRoot();\n+\t\tString genericIdeRootPath = null;\n+\t\tif (genericIdeRoot != null) {\n+\t\t\tgenericIdeRootPath = genericIdeRoot.getPath();\n+\t\t}\n+\t\tresult.setProjectNameIde(getLastSegment(genericIdeRootPath));\n+\t\tIXtextGeneratorFileSystemAccess eclipsePluginRoot = getProjectConfig().getEclipsePlugin().getRoot();\n+\t\tString eclipsePluginRootPath = null;\n+\t\tif (eclipsePluginRoot != null) {\n+\t\t\teclipsePluginRootPath = eclipsePluginRoot.getPath();\n+\t\t}\n+\t\tresult.setProjectNameUi(getLastSegment(eclipsePluginRootPath));\n+\t\tresult.setIdeBasePackage(xtextGeneratorNaming.getGenericIdeBasePackage(config2.getGrammar()));\n+\t\tresult.setUiBasePackage(xtextGeneratorNaming.getEclipsePluginBasePackage(config2.getGrammar()));\n+\t\tTypeReference eclipsePluginActivator = xtextGeneratorNaming.getEclipsePluginActivator();\n+\t\tString activatorName = null;\n+\t\tif (eclipsePluginActivator != null) {\n+\t\t\tactivatorName = eclipsePluginActivator.getName();\n+\t\t}\n+\t\tresult.setActivatorName(activatorName);\n+\t\tIXtextGeneratorFileSystemAccess runtimeTestRoot = getProjectConfig().getRuntimeTest().getRoot();\n+\t\tString runtimeTestRootPath = null;\n+\t\tif (runtimeTestRoot != null) {\n+\t\t\truntimeTestRootPath = runtimeTestRoot.getPath();\n+\t\t}\n+\t\tresult.setPathTestProject(runtimeTestRootPath);\n+\t\tresult.setLineDelimiter(codeConfig.getLineDelimiter());\n+\t\tresult.setFileHeader(codeConfig.getFileHeader());\n+\t\tresult.setClassAnnotations(codeConfig.getClassAnnotationsAsString());\n+\t\tresult.setAnnotationImports(codeConfig.getAnnotationImportsAsString());\n+\t\tresult.setHasUI(result.getProjectNameUi() != null);\n+\t\tresult.setHasIde(result.getProjectNameIde() != null);\n+\t\tresult.setGrammarId(config2.getGrammar().getName());\n+\t\tif (fragment instanceof NamingAware) {\n+\t\t\t((NamingAware) fragment).registerNaming(result);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprotected LanguageConfig createLanguageConfig() {\n+\t\tXtextGeneratorLanguage config2 = (XtextGeneratorLanguage) getLanguage();\n+\t\tLanguageConfig config = new LanguageConfig();\n+\t\tconfig.setForcedResourceSet(config2.getResourceSet());\n+\t\tconfig.setFileExtensions(Joiner.on(\",\").join(config2.getFileExtensions()));\n+\t\tconfig.setUri(config2.getGrammarUri());\n+\t\tconfig.registerNaming(naming);\n+\t\treturn config;\n+\t}\n+\n+\tprotected XpandExecutionContext createExecutionContext() {\n+\t\tString encoding = encodingProvider.getEncoding(null);\n+\t\tStringConcatOutputImpl output = new StringConcatOutputImpl();\n+\t\tif (getProjectConfig().getRuntime().getRoot() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.PLUGIN_RT, false,\n+\t\t\t\t\tgetProjectConfig().getRuntime().getRoot().getPath()));\n+\t\t}\n+\t\tif (getProjectConfig().getRuntime().getSrc() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC, false,\n+\t\t\t\t\tgetProjectConfig().getRuntime().getSrc().getPath()));\n+\t\t}\n+\t\tif (getProjectConfig().getRuntime().getSrcGen() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_GEN, true,\n+\t\t\t\t\tgetProjectConfig().getRuntime().getSrcGen().getPath()));\n+\t\t}\n+\t\tif (getProjectConfig().getRuntime().getRoot() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.MODEL, false,\n+\t\t\t\t\tgetProjectConfig().getRuntime().getRoot().getPath() + \"/model\"));\n+\t\t}\n+\t\tif (getProjectConfig().getEclipsePlugin().getRoot() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.PLUGIN_UI, false,\n+\t\t\t\t\tgetProjectConfig().getEclipsePlugin().getRoot().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getRuntime().getRoot() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.PLUGIN_UI, false,\n+\t\t\t\t\t\tgetProjectConfig().getRuntime().getRoot().getPath()));\n+\t\t\t}\n+\t\t}\n+\t\tif (getProjectConfig().getEclipsePlugin().getSrc() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_UI, false,\n+\t\t\t\t\tgetProjectConfig().getEclipsePlugin().getSrc().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getRuntime().getSrc() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_UI, false,\n+\t\t\t\t\t\tgetProjectConfig().getRuntime().getSrc().getPath()));\n+\t\t\t}\n+\t\t}\n+\t\tif (getProjectConfig().getEclipsePlugin().getSrcGen() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_GEN_UI, true,\n+\t\t\t\t\tgetProjectConfig().getEclipsePlugin().getSrcGen().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getRuntime().getSrcGen() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_GEN_UI, true,\n+\t\t\t\t\t\tgetProjectConfig().getRuntime().getSrcGen().getPath()));\n+\t\t\t}\n+\t\t}\n+\t\tif (getProjectConfig().getGenericIde().getRoot() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.PLUGIN_IDE, false,\n+\t\t\t\t\tgetProjectConfig().getGenericIde().getRoot().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getEclipsePlugin().getRoot() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.PLUGIN_IDE, false,\n+\t\t\t\t\t\tgetProjectConfig().getEclipsePlugin().getRoot().getPath()));\n+\t\t\t} else {\n+\t\t\t\tif (getProjectConfig().getRuntime().getRoot() != null) {\n+\t\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.PLUGIN_IDE, false,\n+\t\t\t\t\t\t\tgetProjectConfig().getRuntime().getRoot().getPath()));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (getProjectConfig().getGenericIde().getSrc() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_IDE, false,\n+\t\t\t\t\tgetProjectConfig().getGenericIde().getSrc().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getEclipsePlugin().getSrc() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_IDE, false,\n+\t\t\t\t\t\tgetProjectConfig().getEclipsePlugin().getSrc().getPath()));\n+\t\t\t} else {\n+\t\t\t\tif (getProjectConfig().getRuntime().getSrc() != null) {\n+\t\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_IDE, false,\n+\t\t\t\t\t\t\tgetProjectConfig().getRuntime().getSrc().getPath()));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (getProjectConfig().getGenericIde().getSrcGen() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_GEN_IDE, true,\n+\t\t\t\t\tgetProjectConfig().getGenericIde().getSrcGen().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getEclipsePlugin().getSrcGen() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_GEN_IDE, true,\n+\t\t\t\t\t\tgetProjectConfig().getEclipsePlugin().getSrcGen().getPath()));\n+\t\t\t} else {\n+\t\t\t\tif (getProjectConfig().getRuntime().getSrcGen() != null) {\n+\t\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_GEN_IDE, true,\n+\t\t\t\t\t\t\tgetProjectConfig().getRuntime().getSrcGen().getPath()));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (getProjectConfig().getRuntimeTest().getRoot() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.PLUGIN_TEST, false,\n+\t\t\t\t\tgetProjectConfig().getRuntimeTest().getRoot().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getRuntime().getRoot() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.PLUGIN_TEST, false,\n+\t\t\t\t\t\tgetProjectConfig().getRuntime().getRoot().getPath()));\n+\t\t\t}\n+\t\t}\n+\t\tif (getProjectConfig().getRuntimeTest().getSrc() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_TEST, false,\n+\t\t\t\t\tgetProjectConfig().getRuntimeTest().getSrc().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getRuntime().getSrc() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_TEST, false,\n+\t\t\t\t\t\tgetProjectConfig().getRuntime().getSrc().getPath()));\n+\t\t\t}\n+\t\t}\n+\t\tif (getProjectConfig().getRuntimeTest().getSrcGen() != null) {\n+\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_GEN_TEST, true,\n+\t\t\t\t\tgetProjectConfig().getRuntimeTest().getSrcGen().getPath()));\n+\t\t} else {\n+\t\t\tif (getProjectConfig().getRuntime().getSrcGen() != null) {\n+\t\t\t\toutput.addOutlet(createOutlet(false, encoding, Generator.SRC_GEN_TEST, true,\n+\t\t\t\t\t\tgetProjectConfig().getRuntime().getSrcGen().getPath()));\n+\t\t\t}\n+\t\t}\n+\t\tMap<String, Variable> globalVars = Maps.newHashMap();\n+\t\tglobalVars.put(Naming.GLOBAL_VAR_NAME, new Variable(Naming.GLOBAL_VAR_NAME, naming));\n+\t\tXpandExecutionContextImpl execCtx = new XpandExecutionContextImpl(output, null, globalVars, null, null);\n+\t\texecCtx.getResourceManager().setFileEncoding(\"ISO-8859-1\");\n+\t\texecCtx.registerMetaModel(new JavaBeansMetaModel());\n+\t\texecCtx = (XpandExecutionContextImpl) execCtx\n+\t\t\t\t.cloneWithVariable(new Variable(\"modelPluginID\", naming.getProjectNameRt()));\n+\t\treturn execCtx;\n+\t}\n+\n+\tprotected Outlet createOutlet(boolean append, String encoding, String name, boolean overwrite, String path) {\n+\t\tOutlet outlet = new Outlet(append, encoding, name, overwrite, path);\n+\t\toutlet.addPostprocessor(new NewlineNormalizer(codeConfig.getLineDelimiter()));\n+\t\tfor (PostProcessor pp : postProcessors) {\n+\t\t\toutlet.addPostprocessor(pp);\n+\t\t}\n+\t\treturn outlet;\n+\t}\n+\n+\tprotected String getPath(IFileSystemAccess2 fsa) {\n+\t\tString path = fsa.getURI(\"\").toFileString();\n+\t\tif (path.endsWith(File.separator)) {\n+\t\t\treturn path.substring(0, path.length() - 1);\n+\t\t} else {\n+\t\t\treturn path;\n+\t\t}\n+\t}\n+\n+\tprivate String getLastSegment(String path) {\n+\t\tif (path != null) {\n+\t\t\treturn path.substring(path.lastIndexOf(\"/\") + 1);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate StringBuilder decreaseIndentation(String text, int level) {\n+\t\tStringBuilder result = new StringBuilder(text.length());\n+\t\tboolean newLine = true;\n+\t\tint skippedSpaces = 0;\n+\t\tint skippedTabs = 0;\n+\t\tfor (int i = 0; i < text.length(); i++) {\n+\t\t\tchar c = text.charAt(i);\n+\t\t\tboolean append = false;\n+\t\t\tif (matches(c, '\\n', '\\r')) {\n+\t\t\t\tnewLine = true;\n+\t\t\t\tappend = true;\n+\t\t\t\tskippedTabs = 0;\n+\t\t\t\tskippedSpaces = 0;\n+\t\t\t} else {\n+\t\t\t\tif (newLine) {\n+\t\t\t\t\tif (matches(c, ' ')) {\n+\t\t\t\t\t\tskippedSpaces++;\n+\t\t\t\t\t\tif (skippedSpaces >= 4) {\n+\t\t\t\t\t\t\tskippedSpaces = 0;\n+\t\t\t\t\t\t\tskippedTabs++;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (matches(c, '\\t')) {\n+\t\t\t\t\t\t\tskippedSpaces = 0;\n+\t\t\t\t\t\t\tskippedTabs++;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnewLine = false;\n+\t\t\t\t\t\t\tappend = true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (skippedTabs >= level) {\n+\t\t\t\t\t\tnewLine = false;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tappend = true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (append) {\n+\t\t\t\tresult.append(c);\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprivate boolean matches(char c, char... m) {\n+\t\tfor (int i = 0; i < m.length; i++) {\n+\t\t\tif (c == m[i]) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tpublic IGeneratorFragment getFragment() {\n+\t\treturn fragment;\n+\t}\n+\n+\tpublic void setFragment(IGeneratorFragment fragment) {", "originalCommit": "aa3fc54ccf226e1b37b0bf4582759c8c650fb2e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}