{"pr_number": 576, "pr_title": "[eclipse/xtext#1679] ported xtend code 2 java", "pr_createdAt": "2020-03-10T19:25:46Z", "pr_url": "https://github.com/eclipse/xtext-extras/pull/576", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNDY1NQ==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391014655", "bodyText": "Unneeded finals", "author": "tivervac", "createdAt": "2020-03-11T14:33:20Z", "path": "org.eclipse.xtext.builder.standalone.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2009, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.builder.tests;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.builder.tests.builderTestLanguage.Element;\n+import org.eclipse.xtext.generator.IFileSystemAccess;\n+import org.eclipse.xtext.generator.IFileSystemAccess2;\n+import org.eclipse.xtext.generator.IGenerator;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class MyGenerator implements IGenerator {\n+\t@Override\n+\tpublic void doGenerate(final Resource input, final IFileSystemAccess fsa) {", "originalCommit": "ec0d114c1b05d94a3dc18564221631ef472a8e1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNTYxNg==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391015616", "bodyText": "Don't we prefer Streams.stream(...).filter(...)?", "author": "tivervac", "createdAt": "2020-03-11T14:34:38Z", "path": "org.eclipse.xtext.builder.standalone.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2009, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.builder.tests;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.builder.tests.builderTestLanguage.Element;\n+import org.eclipse.xtext.generator.IFileSystemAccess;\n+import org.eclipse.xtext.generator.IFileSystemAccess2;\n+import org.eclipse.xtext.generator.IGenerator;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class MyGenerator implements IGenerator {\n+\t@Override\n+\tpublic void doGenerate(final Resource input, final IFileSystemAccess fsa) {\n+\t\tfor (final Element ele : Iterables.filter(IteratorExtensions.toIterable(input.getAllContents()),", "originalCommit": "ec0d114c1b05d94a3dc18564221631ef472a8e1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzAxNA==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391173014", "bodyText": "have no idea what we prefer", "author": "cdietrich", "createdAt": "2020-03-11T18:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNTYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjQ3NA==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391016474", "bodyText": "We don't like sneakies", "author": "tivervac", "createdAt": "2020-03-11T14:35:46Z", "path": "org.eclipse.xtext.java/src/org/eclipse/xtext/java/resource/InMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.java.resource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.util.Map;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+public class InMemoryClassLoader extends ClassLoader {\n+\tprivate Map<String, byte[]> classMap;\n+\n+\tpublic InMemoryClassLoader(Map<String, byte[]> classMap, ClassLoader parent) {\n+\t\tsuper(parent);\n+\t\tthis.classMap = classMap;\n+\t}\n+\n+\t@Override\n+\tprotected Class<?> findClass(String name) throws ClassNotFoundException {\n+\t\tbyte[] bytes = classMap.get(name);\n+\t\tif (bytes == null) {\n+\t\t\treturn super.findClass(name);\n+\t\t} else {\n+\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic URL getResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tprotected URLConnection openConnection(URL it) throws IOException {\n+\t\t\t\t\t\t\treturn new URLConnection(it) {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void connect() {\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic InputStream getInputStream() {\n+\t\t\t\t\t\t\t\t\treturn new ByteArrayInputStream(bytes);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t\treturn super.getResource(path);\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t} catch (MalformedURLException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected URL findResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tprotected URLConnection openConnection(URL it) throws IOException {\n+\t\t\t\t\t\t\treturn new URLConnection(it) {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void connect() {\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic InputStream getInputStream() {\n+\t\t\t\t\t\t\t\t\treturn new ByteArrayInputStream(bytes);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn super.findResource(path);\n+\t\t} catch (MalformedURLException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);", "originalCommit": "ec0d114c1b05d94a3dc18564221631ef472a8e1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3NTI4OQ==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391175289", "bodyText": "i want to keep it here as i dont want to break. see above", "author": "cdietrich", "createdAt": "2020-03-11T18:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3NjIzMQ==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391176231", "bodyText": "what is your alternative in this case.\nswallow the exception and do nothing?", "author": "cdietrich", "createdAt": "2020-03-11T18:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNzc5MQ==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391337791", "bodyText": "Either return null (and log) or rethrow the error.", "author": "tivervac", "createdAt": "2020-03-12T00:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwODk3Mg==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391408972", "bodyText": "Retro\u2019s is what sneaky does. The api of classloaddr is bs. I don\u2019t want to do some fancy different exception handler right now", "author": "cdietrich", "createdAt": "2020-03-12T05:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1NDE5Mg==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391654192", "bodyText": "Okay", "author": "tivervac", "createdAt": "2020-03-12T14:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjczMg==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391016732", "bodyText": "Sneaky", "author": "tivervac", "createdAt": "2020-03-11T14:36:04Z", "path": "org.eclipse.xtext.java/src/org/eclipse/xtext/java/resource/InMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.java.resource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.util.Map;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+public class InMemoryClassLoader extends ClassLoader {\n+\tprivate Map<String, byte[]> classMap;\n+\n+\tpublic InMemoryClassLoader(Map<String, byte[]> classMap, ClassLoader parent) {\n+\t\tsuper(parent);\n+\t\tthis.classMap = classMap;\n+\t}\n+\n+\t@Override\n+\tprotected Class<?> findClass(String name) throws ClassNotFoundException {\n+\t\tbyte[] bytes = classMap.get(name);\n+\t\tif (bytes == null) {\n+\t\t\treturn super.findClass(name);\n+\t\t} else {\n+\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic URL getResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tprotected URLConnection openConnection(URL it) throws IOException {\n+\t\t\t\t\t\t\treturn new URLConnection(it) {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void connect() {\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic InputStream getInputStream() {\n+\t\t\t\t\t\t\t\t\treturn new ByteArrayInputStream(bytes);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t\treturn super.getResource(path);\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t} catch (MalformedURLException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);", "originalCommit": "ec0d114c1b05d94a3dc18564221631ef472a8e1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MzI3OA==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391173278", "bodyText": "is lefft there by intention as it was there before", "author": "cdietrich", "createdAt": "2020-03-11T18:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNzUzMQ==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391337531", "bodyText": "It was there in the Java code you mean? I don't see it in the xtend code", "author": "tivervac", "createdAt": "2020-03-12T00:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwODcwNg==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391408706", "bodyText": "Well this code is as tend generated it before", "author": "cdietrich", "createdAt": "2020-03-12T05:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1NDM3Mw==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391654373", "bodyText": "Okay", "author": "tivervac", "createdAt": "2020-03-12T14:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNzAzMg==", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391017032", "bodyText": "You can extract this code, it's being used in the method above as well", "author": "tivervac", "createdAt": "2020-03-11T14:36:31Z", "path": "org.eclipse.xtext.java/src/org/eclipse/xtext/java/resource/InMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.java.resource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.util.Map;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+public class InMemoryClassLoader extends ClassLoader {\n+\tprivate Map<String, byte[]> classMap;\n+\n+\tpublic InMemoryClassLoader(Map<String, byte[]> classMap, ClassLoader parent) {\n+\t\tsuper(parent);\n+\t\tthis.classMap = classMap;\n+\t}\n+\n+\t@Override\n+\tprotected Class<?> findClass(String name) throws ClassNotFoundException {\n+\t\tbyte[] bytes = classMap.get(name);\n+\t\tif (bytes == null) {\n+\t\t\treturn super.findClass(name);\n+\t\t} else {\n+\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic URL getResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tprotected URLConnection openConnection(URL it) throws IOException {\n+\t\t\t\t\t\t\treturn new URLConnection(it) {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void connect() {\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic InputStream getInputStream() {\n+\t\t\t\t\t\t\t\t\treturn new ByteArrayInputStream(bytes);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t\treturn super.getResource(path);\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t} catch (MalformedURLException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected URL findResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {", "originalCommit": "ec0d114c1b05d94a3dc18564221631ef472a8e1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9d3abb3fa5b06715e7845a8b5c6169ecaad39646", "url": "https://github.com/eclipse/xtext-extras/commit/9d3abb3fa5b06715e7845a8b5c6169ecaad39646", "message": "[eclipse/xtext#1679] ported xtend code 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-11T18:25:07Z", "type": "commit"}, {"oid": "9d3abb3fa5b06715e7845a8b5c6169ecaad39646", "url": "https://github.com/eclipse/xtext-extras/commit/9d3abb3fa5b06715e7845a8b5c6169ecaad39646", "message": "[eclipse/xtext#1679] ported xtend code 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-03-11T18:25:07Z", "type": "forcePushed"}]}