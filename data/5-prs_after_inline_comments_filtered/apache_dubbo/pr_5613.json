{"pr_number": 5613, "pr_title": "Reduce memory allocation during address change notification.", "pr_createdAt": "2020-01-09T08:33:54Z", "pr_url": "https://github.com/apache/dubbo/pull/5613", "timeline": [{"oid": "f7e0bf5289ffc5ea1dbe2b1e9263c7d3eca677fd", "url": "https://github.com/apache/dubbo/commit/f7e0bf5289ffc5ea1dbe2b1e9263c7d3eca677fd", "message": "performance tuning, reduce memo allocation on address notification path.\n1 simplify log, 2 cache URL, 3 disable local file snapshot.", "committedDate": "2019-12-27T01:17:45Z", "type": "commit"}, {"oid": "074a4e7773df2130fd470fdb8956d07838a6b1e4", "url": "https://github.com/apache/dubbo/commit/074a4e7773df2130fd470fdb8956d07838a6b1e4", "message": "performance tuning:\n1.reduce mem alloc during export&refer,\n2.merge registry address notification event\n3.add frozen status for URL", "committedDate": "2020-01-09T08:02:08Z", "type": "commit"}, {"oid": "77911ead416a047bca736b68e1fd66677631b37c", "url": "https://github.com/apache/dubbo/commit/77911ead416a047bca736b68e1fd66677631b37c", "message": "remove timestamp key from default provider registry keys", "committedDate": "2020-01-09T08:28:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA4NDA5Mw==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365084093", "bodyText": "volatile", "author": "guohao", "createdAt": "2020-01-10T06:04:50Z", "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.registry;\n+\n+import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public abstract class RegistryNotifier {\n+    private long lastExecuteTime;\n+    private long lastEventTime;", "originalCommit": "77911ead416a047bca736b68e1fd66677631b37c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwMzQ0MA==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365103440", "bodyText": "Corner case:  Continuing notification from registry may cause the listener nerver  be notified.(lastEventTime is always greater than this.time).\nAt most one running listener.doNotifyTask task will  be better :P", "author": "guohao", "createdAt": "2020-01-10T07:35:08Z", "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.registry;\n+\n+import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public abstract class RegistryNotifier {\n+    private long lastExecuteTime;\n+    private long lastEventTime;\n+\n+    private Object rawAddresses;\n+    private Registry registry;\n+\n+    private ScheduledExecutorService scheduler = ExtensionLoader.getExtensionLoader(ExecutorRepository.class)\n+            .getDefaultExtension().getRegistryNotificationExecutor();\n+\n+    public Registry getRegistry() {\n+        return registry;\n+    }\n+\n+    public RegistryNotifier(Registry registry) {\n+        this.registry = registry;\n+    }\n+\n+    public void notify(Object rawAddresses) {\n+        this.rawAddresses = rawAddresses;\n+        long notifyTime = System.currentTimeMillis();\n+        this.lastEventTime = notifyTime;\n+        scheduler.submit(new NotificationTask(this, notifyTime));\n+    }\n+\n+    protected abstract void doNotify(Object rawAddresses);\n+\n+    public class NotificationTask implements Runnable {\n+        private RegistryNotifier listener;\n+        private long time;\n+\n+        public NotificationTask(RegistryNotifier listener, long time) {\n+            this.listener = listener;\n+            this.time = time;\n+        }\n+\n+        @Override\n+        public void run() {\n+            int delayTime = getRegistry().getDelay();\n+            if (this.time < listener.lastEventTime) {", "originalCommit": "77911ead416a047bca736b68e1fd66677631b37c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwMzY5Nw==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365103697", "bodyText": "Math.max(0,delayTime-(System.currentTimeMillis() - listener.lastExecuteTime))", "author": "guohao", "createdAt": "2020-01-10T07:36:20Z", "path": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/RegistryNotifier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.registry;\n+\n+import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.threadpool.manager.ExecutorRepository;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public abstract class RegistryNotifier {\n+    private long lastExecuteTime;\n+    private long lastEventTime;\n+\n+    private Object rawAddresses;\n+    private Registry registry;\n+\n+    private ScheduledExecutorService scheduler = ExtensionLoader.getExtensionLoader(ExecutorRepository.class)\n+            .getDefaultExtension().getRegistryNotificationExecutor();\n+\n+    public Registry getRegistry() {\n+        return registry;\n+    }\n+\n+    public RegistryNotifier(Registry registry) {\n+        this.registry = registry;\n+    }\n+\n+    public void notify(Object rawAddresses) {\n+        this.rawAddresses = rawAddresses;\n+        long notifyTime = System.currentTimeMillis();\n+        this.lastEventTime = notifyTime;\n+        scheduler.submit(new NotificationTask(this, notifyTime));\n+    }\n+\n+    protected abstract void doNotify(Object rawAddresses);\n+\n+    public class NotificationTask implements Runnable {\n+        private RegistryNotifier listener;\n+        private long time;\n+\n+        public NotificationTask(RegistryNotifier listener, long time) {\n+            this.listener = listener;\n+            this.time = time;\n+        }\n+\n+        @Override\n+        public void run() {\n+            int delayTime = getRegistry().getDelay();\n+            if (this.time < listener.lastEventTime) {\n+                return;\n+            } else if (delayTime <= 0) {\n+                listener.doNotify(listener.rawAddresses);\n+                listener.lastExecuteTime = System.currentTimeMillis();\n+            } else if (System.currentTimeMillis() - listener.lastExecuteTime < delayTime) {\n+                scheduler.schedule(new NotificationTask(this.listener, this.time), System.currentTimeMillis() - listener.lastExecuteTime, TimeUnit.MILLISECONDS);", "originalCommit": "77911ead416a047bca736b68e1fd66677631b37c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwNjM1Mg==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365106352", "bodyText": "unused", "author": "guohao", "createdAt": "2020-01-10T07:47:21Z", "path": "dubbo-registry/dubbo-registry-etcd3/src/main/java/org/apache/dubbo/registry/etcd/EtcdRegistry.java", "diffHunk": "@@ -196,6 +196,7 @@ public void doSubscribe(URL url, NotifyListener listener) {\n                             CHECK_KEY, String.valueOf(false)), listener);\n                 }\n             } else {\n+                CountDownLatch latch = new CountDownLatch(1);", "originalCommit": "77911ead416a047bca736b68e1fd66677631b37c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NDgyNQ==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365554825", "bodyText": "if localMap is empty, remoteMap will loss these entries, I'm not sure if this works as expected.", "author": "LinShunKang", "createdAt": "2020-01-12T03:19:21Z", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "diffHunk": "@@ -50,71 +41,42 @@ private ClusterUtils() {\n     }\r\n \r\n     public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\r\n-        Map<String, String> map = new HashMap<String, String>();\r\n         Map<String, String> remoteMap = remoteUrl.getParameters();\r\n \r\n-        if (remoteMap != null && remoteMap.size() > 0) {\r\n-            map.putAll(remoteMap);\r\n-\r\n-            // Remove configurations from provider, some items should be affected by provider.\r\n-            map.remove(THREAD_NAME_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\r\n-\r\n-            map.remove(THREADPOOL_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\r\n-\r\n-            map.remove(CORE_THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\r\n-\r\n-            map.remove(THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\r\n-\r\n-            map.remove(QUEUES_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\r\n-\r\n-            map.remove(ALIVE_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\r\n-\r\n-            map.remove(Constants.TRANSPORTER_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\r\n+        if (remoteMap == null || remoteMap.size() <= 0) {\r\n+            return remoteUrl.addParameters(localMap);\r\n         }\r\n \r\n-        if (localMap != null && localMap.size() > 0) {\r\n-            Map<String, String> copyOfLocalMap = new HashMap<>(localMap);\r\n-\r\n-            if(map.containsKey(GROUP_KEY)){\r\n-                copyOfLocalMap.remove(GROUP_KEY);\r\n-            }\r\n-            if(map.containsKey(VERSION_KEY)){\r\n-                copyOfLocalMap.remove(VERSION_KEY);\r\n-            }\r\n+        // Remove configurations from provider, some items should not being affected by provider.\r\n+        remoteMap.remove(THREAD_NAME_KEY);\r\n+        remoteMap.remove(THREADPOOL_KEY);\r\n+        remoteMap.remove(CORE_THREADS_KEY);\r\n+        remoteMap.remove(THREADS_KEY);\r\n+        remoteMap.remove(QUEUES_KEY);\r\n+        remoteMap.remove(ALIVE_KEY);\r\n+        remoteMap.remove(TRANSPORTER_KEY);\r", "originalCommit": "77911ead416a047bca736b68e1fd66677631b37c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzNTExOQ==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r376335119", "bodyText": "Yes, that is what we want, these entries only work for the provider side.", "author": "chickenlj", "createdAt": "2020-02-07T11:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NDgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NDgzNw==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365554837", "bodyText": "Use MapUtils.isEmpty(remoteMap) is better ?", "author": "LinShunKang", "createdAt": "2020-01-12T03:20:19Z", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "diffHunk": "@@ -50,71 +41,42 @@ private ClusterUtils() {\n     }\r\n \r\n     public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\r\n-        Map<String, String> map = new HashMap<String, String>();\r\n         Map<String, String> remoteMap = remoteUrl.getParameters();\r\n \r\n-        if (remoteMap != null && remoteMap.size() > 0) {\r\n-            map.putAll(remoteMap);\r\n-\r\n-            // Remove configurations from provider, some items should be affected by provider.\r\n-            map.remove(THREAD_NAME_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\r\n-\r\n-            map.remove(THREADPOOL_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\r\n-\r\n-            map.remove(CORE_THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\r\n-\r\n-            map.remove(THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\r\n-\r\n-            map.remove(QUEUES_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\r\n-\r\n-            map.remove(ALIVE_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\r\n-\r\n-            map.remove(Constants.TRANSPORTER_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\r\n+        if (remoteMap == null || remoteMap.size() <= 0) {\r", "originalCommit": "77911ead416a047bca736b68e1fd66677631b37c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NDg5NA==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365554894", "bodyText": "Use StringUtils.isNotEmpty(remoteFilter) && StringUtils.isNotEmpty(localFilter) is better ?", "author": "LinShunKang", "createdAt": "2020-01-12T03:21:41Z", "path": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java", "diffHunk": "@@ -50,71 +41,42 @@ private ClusterUtils() {\n     }\r\n \r\n     public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\r\n-        Map<String, String> map = new HashMap<String, String>();\r\n         Map<String, String> remoteMap = remoteUrl.getParameters();\r\n \r\n-        if (remoteMap != null && remoteMap.size() > 0) {\r\n-            map.putAll(remoteMap);\r\n-\r\n-            // Remove configurations from provider, some items should be affected by provider.\r\n-            map.remove(THREAD_NAME_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREAD_NAME_KEY);\r\n-\r\n-            map.remove(THREADPOOL_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADPOOL_KEY);\r\n-\r\n-            map.remove(CORE_THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + CORE_THREADS_KEY);\r\n-\r\n-            map.remove(THREADS_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + THREADS_KEY);\r\n-\r\n-            map.remove(QUEUES_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + QUEUES_KEY);\r\n-\r\n-            map.remove(ALIVE_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + ALIVE_KEY);\r\n-\r\n-            map.remove(Constants.TRANSPORTER_KEY);\r\n-            map.remove(DEFAULT_KEY_PREFIX + Constants.TRANSPORTER_KEY);\r\n+        if (remoteMap == null || remoteMap.size() <= 0) {\r\n+            return remoteUrl.addParameters(localMap);\r\n         }\r\n \r\n-        if (localMap != null && localMap.size() > 0) {\r\n-            Map<String, String> copyOfLocalMap = new HashMap<>(localMap);\r\n-\r\n-            if(map.containsKey(GROUP_KEY)){\r\n-                copyOfLocalMap.remove(GROUP_KEY);\r\n-            }\r\n-            if(map.containsKey(VERSION_KEY)){\r\n-                copyOfLocalMap.remove(VERSION_KEY);\r\n-            }\r\n+        // Remove configurations from provider, some items should not being affected by provider.\r\n+        remoteMap.remove(THREAD_NAME_KEY);\r\n+        remoteMap.remove(THREADPOOL_KEY);\r\n+        remoteMap.remove(CORE_THREADS_KEY);\r\n+        remoteMap.remove(THREADS_KEY);\r\n+        remoteMap.remove(QUEUES_KEY);\r\n+        remoteMap.remove(ALIVE_KEY);\r\n+        remoteMap.remove(TRANSPORTER_KEY);\r\n \r\n-            copyOfLocalMap.remove(RELEASE_KEY);\r\n-            copyOfLocalMap.remove(DUBBO_VERSION_KEY);\r\n-            copyOfLocalMap.remove(METHODS_KEY);\r\n-            copyOfLocalMap.remove(TIMESTAMP_KEY);\r\n-            copyOfLocalMap.remove(TAG_KEY);\r\n-\r\n-            map.putAll(copyOfLocalMap);\r\n-\r\n-            map.put(REMOTE_APPLICATION_KEY, remoteMap.get(APPLICATION_KEY));\r\n+        if (localMap != null && localMap.size() > 0) {\r\n+            String remoteApplication = remoteMap.get(APPLICATION_KEY);\r\n+            remoteMap.putAll(localMap);\r\n+            remoteMap.put(REMOTE_APPLICATION_KEY, remoteApplication);\r\n \r\n             // Combine filters and listeners on Provider and Consumer\r\n             String remoteFilter = remoteMap.get(REFERENCE_FILTER_KEY);\r\n-            String localFilter = copyOfLocalMap.get(REFERENCE_FILTER_KEY);\r\n+            String localFilter = localMap.get(REFERENCE_FILTER_KEY);\r\n             if (remoteFilter != null && remoteFilter.length() > 0\r\n                     && localFilter != null && localFilter.length() > 0) {\r", "originalCommit": "77911ead416a047bca736b68e1fd66677631b37c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU1NTE4MA==", "url": "https://github.com/apache/dubbo/pull/5613#discussion_r365555180", "bodyText": "Create map with expect size would reduce memory, just like this:\nMap<String, String> srcParams = getParameters();\nMap<String, String> newMap = new HashMap<>((int)((srcParams.size() + parameters.size) / 0.75 + 1));\nnewMap.putAll(srcParams);\nnewMap.putAll(parameters);", "author": "LinShunKang", "createdAt": "2020-01-12T03:31:14Z", "path": "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java", "diffHunk": "@@ -1139,18 +1143,34 @@ public URL addParameters(Map<String, String> parameters) {\n             return this;\r\n         }\r\n \r\n-        Map<String, String> map = new HashMap<>(getParameters());\r\n-        map.putAll(parameters);\r\n-        return new URL(protocol, username, password, host, port, path, map);\r\n+        if (frozen) {\r\n+            Map<String, String> map = new HashMap<>(getParameters());\r\n+            map.putAll(parameters);\r", "originalCommit": "77911ead416a047bca736b68e1fd66677631b37c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd0f4d1bd8abf976361258371927e720ad48f48e", "url": "https://github.com/apache/dubbo/commit/cd0f4d1bd8abf976361258371927e720ad48f48e", "message": "refactor: build modifiable sub URL", "committedDate": "2020-02-07T03:34:44Z", "type": "commit"}, {"oid": "35652e0609b8d4d8947c3b76e27d2f13f7915210", "url": "https://github.com/apache/dubbo/commit/35652e0609b8d4d8947c3b76e27d2f13f7915210", "message": "user modifiable URL in certain path.", "committedDate": "2020-02-07T08:21:29Z", "type": "commit"}, {"oid": "c5d76f3ef669fe8f2d6dcda4ca8912c5b0d7140d", "url": "https://github.com/apache/dubbo/commit/c5d76f3ef669fe8f2d6dcda4ca8912c5b0d7140d", "message": "fix ClusterUtils according to review", "committedDate": "2020-02-09T04:15:16Z", "type": "commit"}, {"oid": "1c42e11e03416f6a678acfdf6d5d66af8069899c", "url": "https://github.com/apache/dubbo/commit/1c42e11e03416f6a678acfdf6d5d66af8069899c", "message": "enhance registry notification event merge mechanism", "committedDate": "2020-02-09T04:15:53Z", "type": "commit"}, {"oid": "43615794e416d645790cfb55d8e83b0cf743f9d2", "url": "https://github.com/apache/dubbo/commit/43615794e416d645790cfb55d8e83b0cf743f9d2", "message": "use positive delta", "committedDate": "2020-02-09T05:00:10Z", "type": "commit"}, {"oid": "ac720cc1bbfe6d071372ea0cabbfb49a223bfab7", "url": "https://github.com/apache/dubbo/commit/ac720cc1bbfe6d071372ea0cabbfb49a223bfab7", "message": "add a quick documentation link", "committedDate": "2020-03-27T11:34:11Z", "type": "commit"}, {"oid": "19c2bf66a19da3ea741a30889098ef7f6a2277e9", "url": "https://github.com/apache/dubbo/commit/19c2bf66a19da3ea741a30889098ef7f6a2277e9", "message": "Merge branch 'master' into registry-perf\n\n# Conflicts:\n#\tdubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java\n#\tdubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/DubboBootstrap.java\n#\tdubbo-config/dubbo-config-spring/src/main/resources/META-INF/compat/dubbo.xsd\n#\tdubbo-config/dubbo-config-spring/src/main/resources/META-INF/dubbo.xsd\n#\tdubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java\n#\tdubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryProtocol.java\n#\tdubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java\n#\tdubbo-registry/dubbo-registry-redis/src/main/java/org/apache/dubbo/registry/redis/RedisRegistry.java", "committedDate": "2020-03-27T12:07:57Z", "type": "commit"}, {"oid": "616bfeb65b7268e6c3ed7782689bfea25ba5fbdd", "url": "https://github.com/apache/dubbo/commit/616bfeb65b7268e6c3ed7782689bfea25ba5fbdd", "message": "merge master", "committedDate": "2020-04-01T04:19:51Z", "type": "commit"}, {"oid": "506bb43cc9341be08da2a8a23876d4660e5181bf", "url": "https://github.com/apache/dubbo/commit/506bb43cc9341be08da2a8a23876d4660e5181bf", "message": "Merge branch 'master' of https://github.com/apache/dubbo", "committedDate": "2020-04-02T11:33:51Z", "type": "commit"}, {"oid": "c42ecaebb3ebc697e4a025b41e32b04ed56a2052", "url": "https://github.com/apache/dubbo/commit/c42ecaebb3ebc697e4a025b41e32b04ed56a2052", "message": "Merge branch 'master' of https://github.com/apache/dubbo", "committedDate": "2020-04-03T02:29:39Z", "type": "commit"}, {"oid": "d1224821680e7947acd36d37d842da65c3883fd0", "url": "https://github.com/apache/dubbo/commit/d1224821680e7947acd36d37d842da65c3883fd0", "message": "Merge branch 'master' of https://github.com/apache/dubbo", "committedDate": "2020-04-03T02:46:01Z", "type": "commit"}, {"oid": "8e8a3d4421f15f13222f68b193812e933f604e2f", "url": "https://github.com/apache/dubbo/commit/8e8a3d4421f15f13222f68b193812e933f604e2f", "message": "Merge branch 'master' of https://github.com/apache/dubbo", "committedDate": "2020-04-13T06:09:20Z", "type": "commit"}, {"oid": "3fef4299a9292ae8fe8740d31e7cdb63975d0592", "url": "https://github.com/apache/dubbo/commit/3fef4299a9292ae8fe8740d31e7cdb63975d0592", "message": "Merge branch 'master' of https://github.com/apache/dubbo", "committedDate": "2020-04-17T02:45:25Z", "type": "commit"}, {"oid": "7e9c7dbe1e24641b99400667af2e3554102f2364", "url": "https://github.com/apache/dubbo/commit/7e9c7dbe1e24641b99400667af2e3554102f2364", "message": "Merge branch 'master' of https://github.com/apache/dubbo", "committedDate": "2020-04-22T11:41:13Z", "type": "commit"}, {"oid": "b73a9678e067a8c8d67d4a1b3219360a5d05783e", "url": "https://github.com/apache/dubbo/commit/b73a9678e067a8c8d67d4a1b3219360a5d05783e", "message": "Merge branch 'master' of https://github.com/apache/dubbo", "committedDate": "2020-04-28T07:40:19Z", "type": "commit"}, {"oid": "6b16c54d8dcfb3c82641d7218680e6a1fe22a054", "url": "https://github.com/apache/dubbo/commit/6b16c54d8dcfb3c82641d7218680e6a1fe22a054", "message": "Merge branch 'master' into registry-perf\n\n# Conflicts:\n#\tdubbo-common/src/main/java/org/apache/dubbo/common/URL.java\n#\tdubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java\n#\tdubbo-registry/dubbo-registry-zookeeper/src/main/java/org/apache/dubbo/registry/zookeeper/ZookeeperRegistry.java", "committedDate": "2020-05-01T08:58:25Z", "type": "commit"}, {"oid": "880d450fb60b5cc162457419fc418c132508dd95", "url": "https://github.com/apache/dubbo/commit/880d450fb60b5cc162457419fc418c132508dd95", "message": "enable URLStrParser", "committedDate": "2020-05-07T05:56:47Z", "type": "commit"}, {"oid": "e594cc3db169a46d3670cac8e28d43b3e8492115", "url": "https://github.com/apache/dubbo/commit/e594cc3db169a46d3670cac8e28d43b3e8492115", "message": "Merge branch 'master' of https://github.com/apache/dubbo", "committedDate": "2020-05-07T10:54:49Z", "type": "commit"}, {"oid": "17c419bfa5f36ddbe04f7ab01d43fe48b139e83d", "url": "https://github.com/apache/dubbo/commit/17c419bfa5f36ddbe04f7ab01d43fe48b139e83d", "message": "Merge branch 'master' into registry-perf\n\n# Conflicts:\n#\tdubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/Registry.java\n#\tdubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosRegistry.java", "committedDate": "2020-05-07T11:00:16Z", "type": "commit"}]}