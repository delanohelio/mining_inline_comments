{"pr_number": 1627, "pr_title": "[IOTDB-778] Support double quotation in Path and optimize the Path String usage v2", "pr_createdAt": "2020-08-17T06:18:48Z", "pr_url": "https://github.com/apache/iotdb/pull/1627", "timeline": [{"oid": "f6d1fee69c08128cdd9566ee7c85b6bfbf5eba0f", "url": "https://github.com/apache/iotdb/commit/f6d1fee69c08128cdd9566ee7c85b6bfbf5eba0f", "message": "all", "committedDate": "2020-08-17T01:44:00Z", "type": "commit"}, {"oid": "b283dd859f60ae1190cba9fdb1ee1ef5bc7c329a", "url": "https://github.com/apache/iotdb/commit/b283dd859f60ae1190cba9fdb1ee1ef5bc7c329a", "message": "fix test.", "committedDate": "2020-08-17T06:15:34Z", "type": "commit"}, {"oid": "78598da3b2718a416baf8c6e3b936949d57609de", "url": "https://github.com/apache/iotdb/commit/78598da3b2718a416baf8c6e3b936949d57609de", "message": "add cache", "committedDate": "2020-08-17T06:34:51Z", "type": "commit"}, {"oid": "9e214f8562142e07239110ac65191e9214c46189", "url": "https://github.com/apache/iotdb/commit/9e214f8562142e07239110ac65191e9214c46189", "message": "optimize code style", "committedDate": "2020-08-17T06:39:50Z", "type": "commit"}, {"oid": "7365f94c9a6793cdd5d6c426c12a1acb67b24212", "url": "https://github.com/apache/iotdb/commit/7365f94c9a6793cdd5d6c426c12a1acb67b24212", "message": "update doc", "committedDate": "2020-08-17T06:43:04Z", "type": "commit"}, {"oid": "e98254036688711ed90a7bf70dd3d9ebe6785cc9", "url": "https://github.com/apache/iotdb/commit/e98254036688711ed90a7bf70dd3d9ebe6785cc9", "message": "Add MetaUtilsTest", "committedDate": "2020-08-17T07:08:57Z", "type": "commit"}, {"oid": "08c689667fdc188afbb39d2fd25894151dad318a", "url": "https://github.com/apache/iotdb/commit/08c689667fdc188afbb39d2fd25894151dad318a", "message": "Merge branch 'optimize_path_v2' of https://github.com/apache/incubator-iotdb into optimize_path_v2", "committedDate": "2020-08-17T07:09:11Z", "type": "commit"}, {"oid": "13549998036dfd96af0c1d387eb4e475401266d8", "url": "https://github.com/apache/iotdb/commit/13549998036dfd96af0c1d387eb4e475401266d8", "message": "update test.", "committedDate": "2020-08-17T07:11:07Z", "type": "commit"}, {"oid": "f8ee1c9253551c5c9ba43cbeab0f268b8115efc8", "url": "https://github.com/apache/iotdb/commit/f8ee1c9253551c5c9ba43cbeab0f268b8115efc8", "message": "update tsfile path and test", "committedDate": "2020-08-17T07:16:11Z", "type": "commit"}, {"oid": "787cc2e10de7710cec59fd18e0a19852a472c9aa", "url": "https://github.com/apache/iotdb/commit/787cc2e10de7710cec59fd18e0a19852a472c9aa", "message": "Merge pull request #1628 from Alima777/optimize_path_v2\n\n[Optimize path v2] Add MetaUtils Test", "committedDate": "2020-08-17T07:17:06Z", "type": "commit"}, {"oid": "cc7bb42f1b71ea842cf72b2b1b5d07497c8cd5b5", "url": "https://github.com/apache/iotdb/commit/cc7bb42f1b71ea842cf72b2b1b5d07497c8cd5b5", "message": "update test.", "committedDate": "2020-08-17T09:15:23Z", "type": "commit"}, {"oid": "c2106307e00da8c5a2717f90ea0b1bbb7e685ce3", "url": "https://github.com/apache/iotdb/commit/c2106307e00da8c5a2717f90ea0b1bbb7e685ce3", "message": "update Path", "committedDate": "2020-08-18T05:59:20Z", "type": "commit"}, {"oid": "5ae06cf691636fc54565a2f3aec1743d3b607817", "url": "https://github.com/apache/iotdb/commit/5ae06cf691636fc54565a2f3aec1743d3b607817", "message": "Update Path.java", "committedDate": "2020-08-18T06:02:00Z", "type": "commit"}, {"oid": "2953298ec6eb2fdd24e2df033fb99a8f8d0aa055", "url": "https://github.com/apache/iotdb/commit/2953298ec6eb2fdd24e2df033fb99a8f8d0aa055", "message": "Update MTree.java", "committedDate": "2020-08-18T06:27:59Z", "type": "commit"}, {"oid": "e2d4c6a60d3e38cde769a450a38a9132210d5d65", "url": "https://github.com/apache/iotdb/commit/e2d4c6a60d3e38cde769a450a38a9132210d5d65", "message": "fix test", "committedDate": "2020-08-18T08:01:04Z", "type": "commit"}, {"oid": "eaad8cc0f980b321058674afbc3e72e309ad0483", "url": "https://github.com/apache/iotdb/commit/eaad8cc0f980b321058674afbc3e72e309ad0483", "message": "Update MergeMultiChunkTask.java", "committedDate": "2020-08-18T08:08:29Z", "type": "commit"}, {"oid": "f34057d1f0f797fe388d153e830af93bf34c9518", "url": "https://github.com/apache/iotdb/commit/f34057d1f0f797fe388d153e830af93bf34c9518", "message": "fix test", "committedDate": "2020-08-18T08:19:17Z", "type": "commit"}, {"oid": "a7e5e42435a01cc22be8a6a18b2e4d84a854b1f0", "url": "https://github.com/apache/iotdb/commit/a7e5e42435a01cc22be8a6a18b2e4d84a854b1f0", "message": "fix test.", "committedDate": "2020-08-18T08:46:16Z", "type": "commit"}, {"oid": "3156ea95dda9ec5f1dff3ef5c4e7c071130ecaf0", "url": "https://github.com/apache/iotdb/commit/3156ea95dda9ec5f1dff3ef5c4e7c071130ecaf0", "message": "update session", "committedDate": "2020-08-18T08:57:35Z", "type": "commit"}, {"oid": "efef52709d4ec7fc29c9aa2b5d5e842ac8443077", "url": "https://github.com/apache/iotdb/commit/efef52709d4ec7fc29c9aa2b5d5e842ac8443077", "message": "update accoring to sonnar", "committedDate": "2020-08-18T09:57:11Z", "type": "commit"}, {"oid": "984bc599426e366f29f6f14389fa8289e1057e1b", "url": "https://github.com/apache/iotdb/commit/984bc599426e366f29f6f14389fa8289e1057e1b", "message": "update according to sonnar", "committedDate": "2020-08-18T10:28:22Z", "type": "commit"}, {"oid": "4131d70091b1b844d883693567e66588764ca65e", "url": "https://github.com/apache/iotdb/commit/4131d70091b1b844d883693567e66588764ca65e", "message": "update according to sonnar", "committedDate": "2020-08-19T01:48:12Z", "type": "commit"}, {"oid": "5dc7a7d1a1343fc03f7e846ea024c655b44d2b6d", "url": "https://github.com/apache/iotdb/commit/5dc7a7d1a1343fc03f7e846ea024c655b44d2b6d", "message": "update according to sonnar", "committedDate": "2020-08-19T01:55:31Z", "type": "commit"}, {"oid": "f7ed8beb31ba0e6a939624deb536aea236efea60", "url": "https://github.com/apache/iotdb/commit/f7ed8beb31ba0e6a939624deb536aea236efea60", "message": "update according to sonnar", "committedDate": "2020-08-19T02:06:08Z", "type": "commit"}, {"oid": "0fa64bb539f623e074695d9314c1ec1ba27ea6e2", "url": "https://github.com/apache/iotdb/commit/0fa64bb539f623e074695d9314c1ec1ba27ea6e2", "message": "update accoding to sonnar", "committedDate": "2020-08-19T02:19:25Z", "type": "commit"}, {"oid": "bcd8250106104ee1e65955a54aca6429ff28dde6", "url": "https://github.com/apache/iotdb/commit/bcd8250106104ee1e65955a54aca6429ff28dde6", "message": "update according to sonnar", "committedDate": "2020-08-19T02:31:16Z", "type": "commit"}, {"oid": "5e0986255ef530bc07a6f9f02c7f6a01b225ba5c", "url": "https://github.com/apache/iotdb/commit/5e0986255ef530bc07a6f9f02c7f6a01b225ba5c", "message": "fix test.", "committedDate": "2020-08-19T03:14:09Z", "type": "commit"}, {"oid": "41843da6730efc066ee8dbdb2afdc7871f2742b6", "url": "https://github.com/apache/iotdb/commit/41843da6730efc066ee8dbdb2afdc7871f2742b6", "message": "fix test.", "committedDate": "2020-08-19T03:51:03Z", "type": "commit"}, {"oid": "9b512a695178b66909b84ac605b368d27fb36ab8", "url": "https://github.com/apache/iotdb/commit/9b512a695178b66909b84ac605b368d27fb36ab8", "message": "update accoding to sonnar", "committedDate": "2020-08-19T03:55:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1NzQxNw==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r472957417", "bodyText": "getMeasurement()?", "author": "qiaojialin", "createdAt": "2020-08-19T11:27:34Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata;\n+\n+import java.util.Arrays;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.tsfile.common.constant.TsFileConstant;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+\n+/**\n+ * A prefix path, suffix path or fullPath generated from SQL\n+ */\n+public class PartialPath implements Comparable<PartialPath> {\n+\n+  private String[] nodes;\n+  private String path;\n+  private String pathWithoutLastNode;\n+  private String alias;\n+\n+  public PartialPath(String path) throws IllegalPathException {\n+    this.nodes = MetaUtils.splitPathToDetachedPath(path);\n+    this.path = path;\n+  }\n+\n+  public PartialPath(String[] partialNodes) {\n+    nodes = partialNodes;\n+  }\n+\n+  /**\n+   * it will return a new partial path\n+   * @param partialPath the path you want to concat\n+   * @return new partial path\n+   */\n+  public PartialPath concatPath(PartialPath partialPath) {\n+    int len = nodes.length;\n+    String[] newNodes = Arrays.copyOf(nodes, nodes.length + partialPath.nodes.length);\n+    System.arraycopy(partialPath.nodes, 0, newNodes, len, partialPath.nodes.length);\n+    return new PartialPath(newNodes);\n+  }\n+\n+  /**\n+   * It will change nodes in this partial path\n+   * @param otherNodes nodes\n+   */\n+  public void concatPath(String[] otherNodes) {\n+    int len = nodes.length;\n+    this.nodes = Arrays.copyOf(nodes, nodes.length + otherNodes.length);\n+    System.arraycopy(otherNodes, 0, nodes, len, otherNodes.length);\n+  }\n+\n+  public PartialPath concatNode(String node) {\n+    String[] newPathNodes = Arrays.copyOf(nodes, nodes.length + 1);\n+    newPathNodes[newPathNodes.length - 1] = node;\n+    return new PartialPath(newPathNodes);\n+  }\n+\n+  public String[] getNodes() {\n+    return nodes;\n+  }\n+\n+  public String toString() {\n+    if (path != null) {\n+      return path;\n+    } else {\n+      StringBuilder s = new StringBuilder(nodes[0]);\n+      for (int i = 1; i < nodes.length; i++) {\n+        s.append(TsFileConstant.PATH_SEPARATOR);\n+        s.append(nodes[i]);\n+      }\n+      path = s.toString();\n+      return path;\n+    }\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if(!(obj instanceof PartialPath)) {\n+      return false;\n+    }\n+    String[] otherNodes = ((PartialPath) obj).getNodes();\n+    if( this.nodes.length != otherNodes.length) {\n+      return false;\n+    } else {\n+      for(int i = 0; i < this.nodes.length; i++) {\n+        if(!nodes[i].equals(otherNodes[i])) {\n+          return false;\n+        }\n+      }\n+     }\n+    return true;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return this.toString().hashCode();\n+  }\n+\n+  public String getLastNode() {", "originalCommit": "9b512a695178b66909b84ac605b368d27fb36ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwNTQzNQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r473905435", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-20T11:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1NzQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1NzU3MQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r472957571", "bodyText": "getDevice?", "author": "qiaojialin", "createdAt": "2020-08-19T11:27:54Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata;\n+\n+import java.util.Arrays;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.tsfile.common.constant.TsFileConstant;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+\n+/**\n+ * A prefix path, suffix path or fullPath generated from SQL\n+ */\n+public class PartialPath implements Comparable<PartialPath> {\n+\n+  private String[] nodes;\n+  private String path;\n+  private String pathWithoutLastNode;\n+  private String alias;\n+\n+  public PartialPath(String path) throws IllegalPathException {\n+    this.nodes = MetaUtils.splitPathToDetachedPath(path);\n+    this.path = path;\n+  }\n+\n+  public PartialPath(String[] partialNodes) {\n+    nodes = partialNodes;\n+  }\n+\n+  /**\n+   * it will return a new partial path\n+   * @param partialPath the path you want to concat\n+   * @return new partial path\n+   */\n+  public PartialPath concatPath(PartialPath partialPath) {\n+    int len = nodes.length;\n+    String[] newNodes = Arrays.copyOf(nodes, nodes.length + partialPath.nodes.length);\n+    System.arraycopy(partialPath.nodes, 0, newNodes, len, partialPath.nodes.length);\n+    return new PartialPath(newNodes);\n+  }\n+\n+  /**\n+   * It will change nodes in this partial path\n+   * @param otherNodes nodes\n+   */\n+  public void concatPath(String[] otherNodes) {\n+    int len = nodes.length;\n+    this.nodes = Arrays.copyOf(nodes, nodes.length + otherNodes.length);\n+    System.arraycopy(otherNodes, 0, nodes, len, otherNodes.length);\n+  }\n+\n+  public PartialPath concatNode(String node) {\n+    String[] newPathNodes = Arrays.copyOf(nodes, nodes.length + 1);\n+    newPathNodes[newPathNodes.length - 1] = node;\n+    return new PartialPath(newPathNodes);\n+  }\n+\n+  public String[] getNodes() {\n+    return nodes;\n+  }\n+\n+  public String toString() {\n+    if (path != null) {\n+      return path;\n+    } else {\n+      StringBuilder s = new StringBuilder(nodes[0]);\n+      for (int i = 1; i < nodes.length; i++) {\n+        s.append(TsFileConstant.PATH_SEPARATOR);\n+        s.append(nodes[i]);\n+      }\n+      path = s.toString();\n+      return path;\n+    }\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if(!(obj instanceof PartialPath)) {\n+      return false;\n+    }\n+    String[] otherNodes = ((PartialPath) obj).getNodes();\n+    if( this.nodes.length != otherNodes.length) {\n+      return false;\n+    } else {\n+      for(int i = 0; i < this.nodes.length; i++) {\n+        if(!nodes[i].equals(otherNodes[i])) {\n+          return false;\n+        }\n+      }\n+     }\n+    return true;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return this.toString().hashCode();\n+  }\n+\n+  public String getLastNode() {\n+    return nodes[nodes.length - 1];\n+  }\n+\n+  public String getFirstNode() {\n+    return nodes[0];\n+  }\n+\n+  public String getPathWithoutLastNode() {", "originalCommit": "9b512a695178b66909b84ac605b368d27fb36ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwNTQ5Mw==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r473905493", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-20T11:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1NzU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk2MTYyOA==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r472961628", "bodyText": "This should be String device,because all the following usage of PartialPath is toString().", "author": "qiaojialin", "createdAt": "2020-08-19T11:35:15Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -445,8 +446,8 @@ public void delete(String deviceId, String measurementId, long startTime, long e\n    */\n   public QueryDataSource query(SingleSeriesExpression seriesExpression, QueryContext context,\n       QueryFileManager filePathsManager)\n-      throws StorageEngineException, QueryProcessException {\n-    String deviceId = seriesExpression.getSeriesPath().getDevice();\n+      throws StorageEngineException, QueryProcessException, IllegalPathException {\n+    PartialPath deviceId = new PartialPath(seriesExpression.getSeriesPath().getDevice());", "originalCommit": "9b512a695178b66909b84ac605b368d27fb36ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwNTAzNg==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r473905036", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-20T11:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk2MTYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4NzE3Mg==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r472987172", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Path toTSFilePath() {\n          \n          \n            \n              public Path toPath() {\n          \n      \n    \n    \n  \n\ntoTsFilePath makes people treat this as a file path", "author": "qiaojialin", "createdAt": "2020-08-19T12:22:51Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata;\n+\n+import java.util.Arrays;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.exception.metadata.IllegalPathException;\n+import org.apache.iotdb.tsfile.common.constant.TsFileConstant;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+\n+/**\n+ * A prefix path, suffix path or fullPath generated from SQL\n+ */\n+public class PartialPath implements Comparable<PartialPath> {\n+\n+  private String[] nodes;\n+  private String path;\n+  private String pathWithoutLastNode;\n+  private String alias;\n+\n+  public PartialPath(String path) throws IllegalPathException {\n+    this.nodes = MetaUtils.splitPathToDetachedPath(path);\n+    this.path = path;\n+  }\n+\n+  public PartialPath(String[] partialNodes) {\n+    nodes = partialNodes;\n+  }\n+\n+  /**\n+   * it will return a new partial path\n+   * @param partialPath the path you want to concat\n+   * @return new partial path\n+   */\n+  public PartialPath concatPath(PartialPath partialPath) {\n+    int len = nodes.length;\n+    String[] newNodes = Arrays.copyOf(nodes, nodes.length + partialPath.nodes.length);\n+    System.arraycopy(partialPath.nodes, 0, newNodes, len, partialPath.nodes.length);\n+    return new PartialPath(newNodes);\n+  }\n+\n+  /**\n+   * It will change nodes in this partial path\n+   * @param otherNodes nodes\n+   */\n+  public void concatPath(String[] otherNodes) {\n+    int len = nodes.length;\n+    this.nodes = Arrays.copyOf(nodes, nodes.length + otherNodes.length);\n+    System.arraycopy(otherNodes, 0, nodes, len, otherNodes.length);\n+  }\n+\n+  public PartialPath concatNode(String node) {\n+    String[] newPathNodes = Arrays.copyOf(nodes, nodes.length + 1);\n+    newPathNodes[newPathNodes.length - 1] = node;\n+    return new PartialPath(newPathNodes);\n+  }\n+\n+  public String[] getNodes() {\n+    return nodes;\n+  }\n+\n+  public String toString() {\n+    if (path != null) {\n+      return path;\n+    } else {\n+      StringBuilder s = new StringBuilder(nodes[0]);\n+      for (int i = 1; i < nodes.length; i++) {\n+        s.append(TsFileConstant.PATH_SEPARATOR);\n+        s.append(nodes[i]);\n+      }\n+      path = s.toString();\n+      return path;\n+    }\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if(!(obj instanceof PartialPath)) {\n+      return false;\n+    }\n+    String[] otherNodes = ((PartialPath) obj).getNodes();\n+    if( this.nodes.length != otherNodes.length) {\n+      return false;\n+    } else {\n+      for(int i = 0; i < this.nodes.length; i++) {\n+        if(!nodes[i].equals(otherNodes[i])) {\n+          return false;\n+        }\n+      }\n+     }\n+    return true;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return this.toString().hashCode();\n+  }\n+\n+  public String getLastNode() {\n+    return nodes[nodes.length - 1];\n+  }\n+\n+  public String getFirstNode() {\n+    return nodes[0];\n+  }\n+\n+  public String getPathWithoutLastNode() {\n+    if (pathWithoutLastNode != null) {\n+      return pathWithoutLastNode;\n+    } else {\n+      if(nodes.length == 1) {\n+        return \"\";\n+      }\n+      StringBuilder s = new StringBuilder(nodes[0]);\n+      for (int i = 1; i < nodes.length - 1; i++) {\n+        s.append(TsFileConstant.PATH_SEPARATOR);\n+        s.append(nodes[i]);\n+      }\n+      pathWithoutLastNode = s.toString();\n+      return pathWithoutLastNode;\n+    }\n+  }\n+\n+  public void setAlias(String alias) {\n+    this.alias = alias;\n+  }\n+\n+  public String getPathWithoutLastNodeWithAlias() {\n+    return getPathWithoutLastNode() + IoTDBConstant.PATH_SEPARATOR + alias;\n+  }\n+\n+  public String getAlias() {\n+    return alias;\n+  }\n+\n+  public boolean startsWith(String[] otherNodes) {\n+    for(int i = 0; i < otherNodes.length; i++) {\n+      if(!nodes[i].equals(otherNodes[i])) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  public Path toTSFilePath() {", "originalCommit": "9b512a695178b66909b84ac605b368d27fb36ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwNTA5Nw==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r473905097", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-20T11:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4NzE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxOTc1Ng==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r473019756", "bodyText": "recover this, leave this to another PR\uff0c The pair structure is not good also", "author": "qiaojialin", "createdAt": "2020-08-19T13:15:14Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -671,11 +668,11 @@ private int getCountInGivenLevel(MNode node, int targetLevel) {\n    *\n    * <p>result: [name, alias, storage group, dataType, encoding, compression, offset]\n    */\n-  List<String[]> getAllMeasurementSchema(ShowTimeSeriesPlan plan) throws MetadataException {\n-    List<String[]> res;\n-    String[] nodes = MetaUtils.getNodeNames(plan.getPath().getFullPath());\n+  List<Pair<PartialPath, String[]>> getAllMeasurementSchema(ShowTimeSeriesPlan plan) throws MetadataException {", "originalCommit": "9b512a695178b66909b84ac605b368d27fb36ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwNTIzNQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r473905235", "bodyText": "OK", "author": "Genius-pig", "createdAt": "2020-08-20T11:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxOTc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyNjM4Mg==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r473026382", "bodyText": "If the PartialPath extends the Path, this is no need to change.", "author": "qiaojialin", "createdAt": "2020-08-19T13:24:48Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java", "diffHunk": "@@ -55,7 +56,7 @@\n    * @param path path\n    * @param values values\n    */\n-  public InOperator(int tokenIntType, Path path, boolean not, Set<String> values) {\n+  public InOperator(int tokenIntType, PartialPath path, boolean not, Set<String> values) {", "originalCommit": "9b512a695178b66909b84ac605b368d27fb36ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwNTM3NA==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r473905374", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-20T11:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyNjM4Mg=="}], "type": "inlineReview"}, {"oid": "70ce272bbc3138f6bd9bc7699eaa469fe2f5f606", "url": "https://github.com/apache/iotdb/commit/70ce272bbc3138f6bd9bc7699eaa469fe2f5f606", "message": "partialPath is child class of path", "committedDate": "2020-08-20T10:51:41Z", "type": "commit"}, {"oid": "fb0fc666ae3673b22cc26f5f96750954ce0281be", "url": "https://github.com/apache/iotdb/commit/fb0fc666ae3673b22cc26f5f96750954ce0281be", "message": "fix align by device bug", "committedDate": "2020-08-20T11:24:59Z", "type": "commit"}, {"oid": "f6920a7beb02e0d1e46166a7deeace06f794d4cb", "url": "https://github.com/apache/iotdb/commit/f6920a7beb02e0d1e46166a7deeace06f794d4cb", "message": "Merge pull request #1639 from Alima777/optimize_path_v2\n\n[optimize_path_v2] fix align by device bug", "committedDate": "2020-08-20T11:27:56Z", "type": "commit"}, {"oid": "0fb9af76aaab8594e812944d7d5e0b77f22ea4b3", "url": "https://github.com/apache/iotdb/commit/0fb9af76aaab8594e812944d7d5e0b77f22ea4b3", "message": "update according to sonnar", "committedDate": "2020-08-20T11:33:28Z", "type": "commit"}, {"oid": "aa48226b59d597459968f068b7c5eec8284d8a22", "url": "https://github.com/apache/iotdb/commit/aa48226b59d597459968f068b7c5eec8284d8a22", "message": "Merge branch 'optimize_path_v2' of https://github.com/apache/incubator-iotdb into optimize_path_v2", "committedDate": "2020-08-20T11:33:48Z", "type": "commit"}, {"oid": "cf27f2d6072a5b75b00881b96d724bab85899f50", "url": "https://github.com/apache/iotdb/commit/cf27f2d6072a5b75b00881b96d724bab85899f50", "message": "Update FileLoader.java", "committedDate": "2020-08-20T11:46:48Z", "type": "commit"}, {"oid": "e49ed0983858a513edbc843187c7276aea6e0879", "url": "https://github.com/apache/iotdb/commit/e49ed0983858a513edbc843187c7276aea6e0879", "message": "Update PlanExecutor.java", "committedDate": "2020-08-20T12:15:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwNzEyOQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474007129", "bodyText": "No need to construct a Path", "author": "qiaojialin", "createdAt": "2020-08-20T14:02:00Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/InOperator.java", "diffHunk": "@@ -129,7 +130,7 @@ public void reverseFunc() {\n                   .endsWith(\"\\\"\")) ? new Binary(val.substring(1, val.length() - 1))\n                   : new Binary(val));\n         }\n-        ret = In.getUnaryExpression(singlePath, binaryValues, not);\n+        ret = In.getUnaryExpression(new Path(singlePath.getDevice(), singlePath.getMeasurement()), binaryValues, not);", "originalCommit": "e49ed0983858a513edbc843187c7276aea6e0879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NjgxOQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474356819", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-21T01:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwNzEyOQ=="}], "type": "inlineReview"}, {"oid": "2f71dcf41f6b6c9bc86252bd377ac76e8309e5c8", "url": "https://github.com/apache/iotdb/commit/2f71dcf41f6b6c9bc86252bd377ac76e8309e5c8", "message": "update according to review", "committedDate": "2020-08-21T01:11:11Z", "type": "commit"}, {"oid": "bfc288be2c2f5f514bbb75f6320184dd19795448", "url": "https://github.com/apache/iotdb/commit/bfc288be2c2f5f514bbb75f6320184dd19795448", "message": "Update PlanExecutor.java", "committedDate": "2020-08-21T01:21:21Z", "type": "commit"}, {"oid": "c95438e384d81557671991f60590957a9aeeaa79", "url": "https://github.com/apache/iotdb/commit/c95438e384d81557671991f60590957a9aeeaa79", "message": "update pattern.", "committedDate": "2020-08-21T09:27:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyNzc5Mw==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474527793", "bodyText": "We support all nodes surrounded by double quotes now. Modify the comments and regular expressions. Then add some tests for it.", "author": "Alima777", "createdAt": "2020-08-21T08:37:24Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -53,9 +53,9 @@\n   // e.g.,  .s1\n   private static final String NODE_MATCHER = \"[\" + PATH_SEPARATOR + \"]\" + ID_MATCHER;\n \n-  // for path like: root.sg1.d1.\"1.2.3\" or root.sg1.d1.'1.2.3', only occurs in the end of the path and only occurs once\n+  // for path like: root.sg1.d1.\"1.2.3\", only occurs in the end of the path and only occurs once\n   private static final String NODE_WITH_QUOTATION_MARK_MATCHER =\n-      \"[\" + PATH_SEPARATOR + \"][\\\"|\\']\" + ID_MATCHER + \"(\" + NODE_MATCHER + \")*[\\\"|\\']\";\n+      \"[\" + PATH_SEPARATOR + \"][\\\"]\" + ID_MATCHER + \"(\" + NODE_MATCHER + \")*[\\\"]\";\n   public static final Pattern PATH_PATTERN = Pattern", "originalCommit": "bfc288be2c2f5f514bbb75f6320184dd19795448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5ODYzNQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474598635", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-21T09:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyNzc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUzMDU3NQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474530575", "bodyText": "storageGroup -> storageGroupPath is more intuitive.", "author": "Alima777", "createdAt": "2020-08-21T08:40:32Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -270,31 +272,30 @@ public ServiceType getID() {\n     return ServiceType.STORAGE_ENGINE_SERVICE;\n   }\n \n-  public StorageGroupProcessor getProcessor(String path) throws StorageEngineException {\n-    String storageGroupName;\n+  public StorageGroupProcessor getProcessor(PartialPath path) throws StorageEngineException {\n+    PartialPath storageGroup;", "originalCommit": "bfc288be2c2f5f514bbb75f6320184dd19795448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMDc5MQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474600791", "bodyText": "I think only storageGroupName need to be renamed", "author": "Genius-pig", "createdAt": "2020-08-21T10:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUzMDU3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUzMTM2NQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474531365", "bodyText": "storageGroupName -> storageGroupPath", "author": "Alima777", "createdAt": "2020-08-21T08:41:25Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -364,7 +365,7 @@ public void forceCloseAllProcessor() throws TsFileProcessorException {\n     }\n   }\n \n-  public void asyncCloseProcessor(String storageGroupName, boolean isSeq)\n+  public void asyncCloseProcessor(PartialPath storageGroupName, boolean isSeq)", "originalCommit": "bfc288be2c2f5f514bbb75f6320184dd19795448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5ODc5Mw==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474598793", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-21T09:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUzMTM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUzMTc1Mg==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474531752", "bodyText": "Same as above", "author": "Alima777", "createdAt": "2020-08-21T08:41:50Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -389,11 +390,11 @@ public void asyncCloseProcessor(String storageGroupName, boolean isSeq)\n         processor.writeUnlock();\n       }\n     } else {\n-      throw new StorageGroupNotSetException(storageGroupName);\n+      throw new StorageGroupNotSetException(storageGroupName.getFullPath());\n     }\n   }\n \n-  public void asyncCloseProcessor(String storageGroupName, long partitionId, boolean isSeq)\n+  public void asyncCloseProcessor(PartialPath storageGroupName, long partitionId, boolean isSeq)", "originalCommit": "bfc288be2c2f5f514bbb75f6320184dd19795448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5ODg0Mg==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474598842", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-21T09:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUzMTc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0MzkwNg==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474543906", "bodyText": "Many places kept the origin parameter name.  I will not sign every place.\nBascially, storageGroup or storageGroupName -> storageGroupPath is ok.", "author": "Alima777", "createdAt": "2020-08-21T08:54:39Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java", "diffHunk": "@@ -499,13 +501,13 @@ public void mergeAll(boolean fullMerge) throws StorageEngineException {\n    * delete all data files (both memory data and file on disk) in a storage group. It is used when\n    * there is no timeseries (which are all deleted) in this storage group)\n    */\n-  public void deleteAllDataFilesInOneStorageGroup(String storageGroupName) {\n+  public void deleteAllDataFilesInOneStorageGroup(PartialPath storageGroupName) {", "originalCommit": "bfc288be2c2f5f514bbb75f6320184dd19795448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5ODkxMA==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474598910", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-21T09:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0MzkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0NjcxNQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474546715", "bodyText": "Path and PartialPath are not in the same package now. I'm not sure it's ok.", "author": "Alima777", "createdAt": "2020-08-21T08:57:42Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/PartialPath.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.metadata;", "originalCommit": "bfc288be2c2f5f514bbb75f6320184dd19795448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5OTA3NQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474599075", "bodyText": "why should be in the same package?", "author": "Genius-pig", "createdAt": "2020-08-21T09:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0NjcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA3NDAzMA==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r475074030", "bodyText": "In my opinion, as a large project, to maintain it and keep it a better structure, the classes with the similar function are put in the same package is better.", "author": "Alima777", "createdAt": "2020-08-22T09:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU0NjcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2Nzc0NQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474567745", "bodyText": "storageGroupName -> storageGroupPath", "author": "Alima777", "createdAt": "2020-08-21T09:21:16Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -371,12 +372,12 @@ public void createTimeseries(CreateTimeSeriesPlan plan) throws MetadataException\n   public void createTimeseries(CreateTimeSeriesPlan plan, long offset) throws MetadataException {\n     lock.writeLock().lock();\n     try {\n-      String path = plan.getPath().getFullPath();\n+      PartialPath path = plan.getPath();\n       SchemaUtils.checkDataTypeWithEncoding(plan.getDataType(), plan.getEncoding());\n       /*\n        * get the storage group with auto create schema\n        */\n-      String storageGroupName;\n+      PartialPath storageGroupName;", "originalCommit": "bfc288be2c2f5f514bbb75f6320184dd19795448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5OTE2Ng==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474599166", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-21T09:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU2Nzc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU3OTI3NA==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474579274", "bodyText": "Why changing the access restrictions here?", "author": "Alima777", "createdAt": "2020-08-21T09:33:51Z", "path": "server/src/main/java/org/apache/iotdb/db/monitor/MonitorConstants.java", "diffHunk": "@@ -40,12 +41,12 @@\n   public static final String FILE_SIZE_STORAGE_GROUP_NAME = STAT_STORAGE_GROUP_PREFIX\n       + MONITOR_PATH_SEPARATOR + FILE_SIZE;\n   // statistic for insert module\n-  static final String FILE_NODE_MANAGER_PATH = \"write.global\";\n+  private static final String FILE_NODE_MANAGER_PATH = \"write.global\";\n   public static final String FILE_NODE_PATH = \"write\";\n   /**\n    * Stat information.\n    */\n-  public static final String STAT_STORAGE_DELTA_NAME = STAT_STORAGE_GROUP_PREFIX\n+  static final String STAT_STORAGE_DELTA_NAME = STAT_STORAGE_GROUP_PREFIX", "originalCommit": "bfc288be2c2f5f514bbb75f6320184dd19795448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5OTU3Ng==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r474599576", "bodyText": "The idea wants me to remove the public.", "author": "Genius-pig", "createdAt": "2020-08-21T09:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU3OTI3NA=="}], "type": "inlineReview"}, {"oid": "72032a2398640738d35e74d7c6a1b08e46be7041", "url": "https://github.com/apache/iotdb/commit/72032a2398640738d35e74d7c6a1b08e46be7041", "message": "optimize code style", "committedDate": "2020-08-21T09:38:21Z", "type": "commit"}, {"oid": "4dda0eab99f41ab454c438d114c4d72e798550e8", "url": "https://github.com/apache/iotdb/commit/4dda0eab99f41ab454c438d114c4d72e798550e8", "message": "rename", "committedDate": "2020-08-21T09:52:35Z", "type": "commit"}, {"oid": "25d81ab2a9488c875a40d295f8bf00f1f21fbc30", "url": "https://github.com/apache/iotdb/commit/25d81ab2a9488c875a40d295f8bf00f1f21fbc30", "message": "Merge pull request #1641 from Alima777/optimize_path_v2\n\n[optimize_path_v2] optimize code style", "committedDate": "2020-08-21T10:02:45Z", "type": "commit"}, {"oid": "e0aadb8c1093d3770711f0d0b726d39fd54cf347", "url": "https://github.com/apache/iotdb/commit/e0aadb8c1093d3770711f0d0b726d39fd54cf347", "message": "Merge branch 'master' into optimize_path_v2", "committedDate": "2020-08-22T12:03:03Z", "type": "commit"}, {"oid": "ba00bdaf752973537f6708a97801f9e94a2a76eb", "url": "https://github.com/apache/iotdb/commit/ba00bdaf752973537f6708a97801f9e94a2a76eb", "message": "Update StorageEngine.java", "committedDate": "2020-08-22T12:03:08Z", "type": "commit"}, {"oid": "07843715034fbbab5da17656ba269c5900371eb0", "url": "https://github.com/apache/iotdb/commit/07843715034fbbab5da17656ba269c5900371eb0", "message": "Update IoTDBQuotedPathIT.java", "committedDate": "2020-08-22T14:06:07Z", "type": "commit"}, {"oid": "6a033179cd939ed5a7e92c1af715d9c8f0771f1a", "url": "https://github.com/apache/iotdb/commit/6a033179cd939ed5a7e92c1af715d9c8f0771f1a", "message": "print file", "committedDate": "2020-08-22T14:26:30Z", "type": "commit"}, {"oid": "c8f301742239e3543f7e1a71d8b82015c91d67b8", "url": "https://github.com/apache/iotdb/commit/c8f301742239e3543f7e1a71d8b82015c91d67b8", "message": "Revert \"print file\"\n\nThis reverts commit 6a033179cd939ed5a7e92c1af715d9c8f0771f1a.", "committedDate": "2020-08-23T03:31:23Z", "type": "commit"}, {"oid": "decf380febd0f3968f2bc3b3280a23dabae70bca", "url": "https://github.com/apache/iotdb/commit/decf380febd0f3968f2bc3b3280a23dabae70bca", "message": "Update IoTDBQuotedPathIT.java", "committedDate": "2020-08-23T03:32:31Z", "type": "commit"}, {"oid": "6148ee6f568e30245479f2556213d2971fb76dc6", "url": "https://github.com/apache/iotdb/commit/6148ee6f568e30245479f2556213d2971fb76dc6", "message": "update storagegroup name rule", "committedDate": "2020-08-23T12:15:07Z", "type": "commit"}, {"oid": "feda1d526617d9c91ece357a2233cc9d28d832f1", "url": "https://github.com/apache/iotdb/commit/feda1d526617d9c91ece357a2233cc9d28d832f1", "message": "fix test", "committedDate": "2020-08-23T12:51:23Z", "type": "commit"}, {"oid": "94e2cd3363ed46dc915709d153d8d6faf6e0a6ae", "url": "https://github.com/apache/iotdb/commit/94e2cd3363ed46dc915709d153d8d6faf6e0a6ae", "message": "Update EnvironmentUtils.java", "committedDate": "2020-08-24T01:37:00Z", "type": "forcePushed"}, {"oid": "feda1d526617d9c91ece357a2233cc9d28d832f1", "url": "https://github.com/apache/iotdb/commit/feda1d526617d9c91ece357a2233cc9d28d832f1", "message": "fix test", "committedDate": "2020-08-23T12:51:23Z", "type": "forcePushed"}, {"oid": "5267c9cce8729becff7bbc4ebb0e70b11d2e8119", "url": "https://github.com/apache/iotdb/commit/5267c9cce8729becff7bbc4ebb0e70b11d2e8119", "message": "Update StorageEngine.java", "committedDate": "2020-08-24T11:27:59Z", "type": "commit"}, {"oid": "3a4d567dbe42018836b6500e8e4d54935cf1c636", "url": "https://github.com/apache/iotdb/commit/3a4d567dbe42018836b6500e8e4d54935cf1c636", "message": "fix test.", "committedDate": "2020-08-25T01:19:57Z", "type": "commit"}, {"oid": "37e8737a1e52482ab989190174572337a434e705", "url": "https://github.com/apache/iotdb/commit/37e8737a1e52482ab989190174572337a434e705", "message": "Update MTree.java", "committedDate": "2020-08-25T02:25:57Z", "type": "commit"}, {"oid": "68a4affab953f09592126e6abe1e6aac567009a2", "url": "https://github.com/apache/iotdb/commit/68a4affab953f09592126e6abe1e6aac567009a2", "message": "Merge branch 'master' into optimize_path_v2", "committedDate": "2020-08-27T04:36:56Z", "type": "commit"}, {"oid": "be5e0fe4416eb6a7c0541779a7e377d81035c7c3", "url": "https://github.com/apache/iotdb/commit/be5e0fe4416eb6a7c0541779a7e377d81035c7c3", "message": "change Measurement", "committedDate": "2020-08-27T07:32:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3MDUxNw==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r479170517", "bodyText": "I think we can use PartialPath directly here. There is no need to transfer it to String. If so, you need to change the type of memTableMap in AbstractMemTable to Map<PartialPath, Map<String, IWritableMemChunk>> memTableMap.\nAnd by the way, i think you should rewrite the both hashCode and compareTo methods in PartialPath. We can compare each string in string arraynodes instead of calling the fullPath() method which will retain it in memory until the PartialPath is cleaned by GC.", "author": "JackieTien97", "createdAt": "2020-08-28T11:35:22Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/memtable/AbstractMemTable.java", "diffHunk": "@@ -108,7 +108,7 @@ public void insert(InsertRowPlan insertRowPlan) {\n       Object value = insertRowPlan.getValues()[i];\n       memSize += MemUtils.getRecordSize(insertRowPlan.getSchemas()[i].getType(), value);\n \n-      write(insertRowPlan.getDeviceId(), insertRowPlan.getMeasurements()[i],\n+      write(insertRowPlan.getDeviceId().getFullPath(), insertRowPlan.getMeasurements()[i],", "originalCommit": "be5e0fe4416eb6a7c0541779a7e377d81035c7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3Njg0Nw==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r479176847", "bodyText": "Why here we need to copy it?", "author": "JackieTien97", "createdAt": "2020-08-28T11:40:50Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/merge/task/MergeFileTask.java", "diffHunk": "@@ -151,7 +152,10 @@ private void moveMergedToOld(TsFileResource seqFile) throws IOException {\n       TsFileIOWriter oldFileWriter = getOldFileWriter(seqFile);\n \n       // filter the chunks that have been merged\n-      oldFileWriter.filterChunks(context.getUnmergedChunkStartTimes().get(seqFile));\n+      oldFileWriter.filterChunks(\n+          context.getUnmergedChunkStartTimes().get(seqFile).entrySet().stream()\n+              .collect(Collectors.toMap(Entry::getKey, Map.Entry::getValue))\n+      );", "originalCommit": "be5e0fe4416eb6a7c0541779a7e377d81035c7c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1OTcwMg==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r479359702", "bodyText": "fixed", "author": "Genius-pig", "createdAt": "2020-08-28T14:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3Njg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3OTc3OQ==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r479179779", "bodyText": "Same as above, I think we can use PartialPath directly.", "author": "JackieTien97", "createdAt": "2020-08-28T11:43:24Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -736,7 +736,7 @@ public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {\n       // insert to sequence or unSequence file\n       insertToTsFileProcessor(insertRowPlan,\n           insertRowPlan.getTime() > partitionLatestFlushedTimeForEachDevice.get(timePartitionId)\n-              .getOrDefault(insertRowPlan.getDeviceId(), Long.MIN_VALUE));\n+              .getOrDefault(insertRowPlan.getDeviceId().getFullPath(), Long.MIN_VALUE));", "originalCommit": "be5e0fe4416eb6a7c0541779a7e377d81035c7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE4NDQ0Ng==", "url": "https://github.com/apache/iotdb/pull/1627#discussion_r479184446", "bodyText": "Same as above, if we change the key's type of the map to PartialPath, we don't have to call the getFullPath() method.", "author": "JackieTien97", "createdAt": "2020-08-28T11:47:21Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileProcessor.java", "diffHunk": "@@ -216,11 +216,11 @@ public void insert(InsertRowPlan insertRowPlan) throws WriteProcessException {\n     }\n \n     // update start time of this memtable\n-    tsFileResource.updateStartTime(insertRowPlan.getDeviceId(), insertRowPlan.getTime());\n+    tsFileResource.updateStartTime(insertRowPlan.getDeviceId().getFullPath(), insertRowPlan.getTime());", "originalCommit": "be5e0fe4416eb6a7c0541779a7e377d81035c7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bbd79c45d001144af1079baf9a8cf3c7ca79b99c", "url": "https://github.com/apache/iotdb/commit/bbd79c45d001144af1079baf9a8cf3c7ca79b99c", "message": "Update MergeFileTask.java", "committedDate": "2020-08-28T14:35:14Z", "type": "commit"}, {"oid": "f3fcf062b4c33f78bc020d51b41f520c880251ae", "url": "https://github.com/apache/iotdb/commit/f3fcf062b4c33f78bc020d51b41f520c880251ae", "message": "Update ServerTimeGenerator.java", "committedDate": "2020-08-29T02:08:12Z", "type": "commit"}, {"oid": "762d23ea0610989e95423a8de479d73f506cc83a", "url": "https://github.com/apache/iotdb/commit/762d23ea0610989e95423a8de479d73f506cc83a", "message": "optimize code", "committedDate": "2020-08-29T02:15:47Z", "type": "commit"}, {"oid": "2748866cfac6aaad859bda69aeed2a216837f25c", "url": "https://github.com/apache/iotdb/commit/2748866cfac6aaad859bda69aeed2a216837f25c", "message": "replace \".\"", "committedDate": "2020-08-29T02:34:54Z", "type": "commit"}, {"oid": "44560f9eb784446249136e4a88900fc640dfdc8a", "url": "https://github.com/apache/iotdb/commit/44560f9eb784446249136e4a88900fc640dfdc8a", "message": "Merge branch 'optimize_path_v2' of https://github.com/apache/incubator-iotdb into optimize_path_v2", "committedDate": "2020-08-29T02:35:32Z", "type": "commit"}, {"oid": "d0a9b801a11e7af833f5b695bd87bb049624db74", "url": "https://github.com/apache/iotdb/commit/d0a9b801a11e7af833f5b695bd87bb049624db74", "message": "Merge branch 'master' into optimize_path_v2", "committedDate": "2020-08-29T02:51:20Z", "type": "commit"}]}