{"pr_number": 2352, "pr_title": "[IOTDB-965] Add timeout in query", "pr_createdAt": "2020-12-28T02:00:48Z", "pr_url": "https://github.com/apache/iotdb/pull/2352", "timeline": [{"oid": "1fedc1b6d3153056e310a1714601529674af6946", "url": "https://github.com/apache/iotdb/commit/1fedc1b6d3153056e310a1714601529674af6946", "message": "support", "committedDate": "2020-10-30T02:23:09Z", "type": "commit"}, {"oid": "2625f758dab80742b88e2a8800b890737ce4b262", "url": "https://github.com/apache/iotdb/commit/2625f758dab80742b88e2a8800b890737ce4b262", "message": "Trigger", "committedDate": "2020-10-30T03:34:02Z", "type": "commit"}, {"oid": "8b17ffc1b1c4bfd5ae9dc2e1d1946d8997d2e0e7", "url": "https://github.com/apache/iotdb/commit/8b17ffc1b1c4bfd5ae9dc2e1d1946d8997d2e0e7", "message": "merge master", "committedDate": "2020-11-05T05:35:35Z", "type": "commit"}, {"oid": "fe720efee4062be7aeae0409074299c33ff7adce", "url": "https://github.com/apache/iotdb/commit/fe720efee4062be7aeae0409074299c33ff7adce", "message": "Merge branch 'master' of https://github.com/apache/iotdb into master", "committedDate": "2020-11-25T09:07:17Z", "type": "commit"}, {"oid": "4717a7ca4b92bbd9fae0ab66b5610e0cbbee6675", "url": "https://github.com/apache/iotdb/commit/4717a7ca4b92bbd9fae0ab66b5610e0cbbee6675", "message": "implement query over time", "committedDate": "2020-11-25T10:32:09Z", "type": "commit"}, {"oid": "4032fce6fe2dd72de8385032c7cec0117b79303d", "url": "https://github.com/apache/iotdb/commit/4032fce6fe2dd72de8385032c7cec0117b79303d", "message": "implement without nonalign", "committedDate": "2020-11-26T09:26:24Z", "type": "commit"}, {"oid": "d2f2716ebf2b97ebb00160abd72426cdddaccad9", "url": "https://github.com/apache/iotdb/commit/d2f2716ebf2b97ebb00160abd72426cdddaccad9", "message": "implement version 1", "committedDate": "2020-11-26T14:39:26Z", "type": "commit"}, {"oid": "9ca625f9e92412a950e3b9417754a08afd1ddf21", "url": "https://github.com/apache/iotdb/commit/9ca625f9e92412a950e3b9417754a08afd1ddf21", "message": "add charset UTF-8", "committedDate": "2020-12-01T09:14:09Z", "type": "commit"}, {"oid": "b1118ce09d896ee4945083309c9164a5dd6a1ee3", "url": "https://github.com/apache/iotdb/commit/b1118ce09d896ee4945083309c9164a5dd6a1ee3", "message": "implement query cancel", "committedDate": "2020-12-01T13:08:35Z", "type": "commit"}, {"oid": "64ebe05b46ae1eb409b17ceb551c584ccb5fc0b0", "url": "https://github.com/apache/iotdb/commit/64ebe05b46ae1eb409b17ceb551c584ccb5fc0b0", "message": "Merge branch 'master' of https://github.com/apache/iotdb into master", "committedDate": "2020-12-02T10:12:13Z", "type": "commit"}, {"oid": "0ff64faa86010fdd7a35a2918a87fac9b9cd6f70", "url": "https://github.com/apache/iotdb/commit/0ff64faa86010fdd7a35a2918a87fac9b9cd6f70", "message": "Merge branch 'master' of https://github.com/apache/iotdb into master", "committedDate": "2020-12-03T01:39:09Z", "type": "commit"}, {"oid": "dec719f26c3f35fc1adb732b3f15c723c43bc791", "url": "https://github.com/apache/iotdb/commit/dec719f26c3f35fc1adb732b3f15c723c43bc791", "message": "Merge branch 'master' of https://github.com/apache/iotdb into master", "committedDate": "2020-12-04T07:31:08Z", "type": "commit"}, {"oid": "be4eb541ea7d87cdf0390fa09bd7150f0b7269d8", "url": "https://github.com/apache/iotdb/commit/be4eb541ea7d87cdf0390fa09bd7150f0b7269d8", "message": "Merge branch 'master' of https://github.com/apache/iotdb into master", "committedDate": "2020-12-05T13:08:19Z", "type": "commit"}, {"oid": "e5ecc0bf6b7b19222f79e62426e664fa00eff006", "url": "https://github.com/apache/iotdb/commit/e5ecc0bf6b7b19222f79e62426e664fa00eff006", "message": "Merge branch 'master' into queryOverTime", "committedDate": "2020-12-05T13:08:29Z", "type": "commit"}, {"oid": "2f46b7f4c336112a5588639e28574cd85aaab6ca", "url": "https://github.com/apache/iotdb/commit/2f46b7f4c336112a5588639e28574cd85aaab6ca", "message": "implement kill query and show query processlist", "committedDate": "2020-12-05T13:50:33Z", "type": "commit"}, {"oid": "ad56d2abad8d53b33299f67a338fca8d35194af6", "url": "https://github.com/apache/iotdb/commit/ad56d2abad8d53b33299f67a338fca8d35194af6", "message": "throw QueryIdNotExistException explicitly", "committedDate": "2020-12-05T13:56:51Z", "type": "commit"}, {"oid": "445cec76253ada94fe7cbd6abbf1f86c66f33727", "url": "https://github.com/apache/iotdb/commit/445cec76253ada94fe7cbd6abbf1f86c66f33727", "message": "use schedule instead of scheduleAtFixedRate", "committedDate": "2020-12-08T01:49:41Z", "type": "commit"}, {"oid": "076047c236e789ba267782ebe6cf7afc72476e75", "url": "https://github.com/apache/iotdb/commit/076047c236e789ba267782ebe6cf7afc72476e75", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-12-09T11:32:24Z", "type": "commit"}, {"oid": "53467a724c3364bd82de9ac74b67ae54bcc6a97c", "url": "https://github.com/apache/iotdb/commit/53467a724c3364bd82de9ac74b67ae54bcc6a97c", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-12-16T11:44:52Z", "type": "commit"}, {"oid": "766e79ae91e6e3af29405e31f03eeac958131663", "url": "https://github.com/apache/iotdb/commit/766e79ae91e6e3af29405e31f03eeac958131663", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-12-17T11:53:08Z", "type": "commit"}, {"oid": "cae93549c9aeb49fa82aaf59631ab2faf9e46a76", "url": "https://github.com/apache/iotdb/commit/cae93549c9aeb49fa82aaf59631ab2faf9e46a76", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-12-23T04:02:01Z", "type": "commit"}, {"oid": "d2b767abd184223ba4ae63e0e858a08394e86ea4", "url": "https://github.com/apache/iotdb/commit/d2b767abd184223ba4ae63e0e858a08394e86ea4", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-12-28T02:06:44Z", "type": "commit"}, {"oid": "5b018ffa036566de327db8aa246595f9e0951890", "url": "https://github.com/apache/iotdb/commit/5b018ffa036566de327db8aa246595f9e0951890", "message": "fix conflict", "committedDate": "2020-12-28T02:32:42Z", "type": "commit"}, {"oid": "960d36ed4a509449890cd3f2bb20a98a609903e4", "url": "https://github.com/apache/iotdb/commit/960d36ed4a509449890cd3f2bb20a98a609903e4", "message": "add license", "committedDate": "2020-12-28T07:31:36Z", "type": "commit"}, {"oid": "6dbf425751e170657a9e7bbdc7bd16112d522709", "url": "https://github.com/apache/iotdb/commit/6dbf425751e170657a9e7bbdc7bd16112d522709", "message": "add executeQuery timeout parameter for JDBC and Session", "committedDate": "2020-12-28T09:07:22Z", "type": "commit"}, {"oid": "9245430231279a5798a64886c8ad73cb1ce6b695", "url": "https://github.com/apache/iotdb/commit/9245430231279a5798a64886c8ad73cb1ce6b695", "message": "throw QueryTimeoutRuntimeException", "committedDate": "2020-12-28T11:55:23Z", "type": "commit"}, {"oid": "51b8a69ef7ec8e98b6a223c1b25a41f18696b2e7", "url": "https://github.com/apache/iotdb/commit/51b8a69ef7ec8e98b6a223c1b25a41f18696b2e7", "message": "isInterruptted -> interrupted", "committedDate": "2020-12-28T12:59:58Z", "type": "commit"}, {"oid": "8b65a791bc79994d9707275a93a4c412d631665a", "url": "https://github.com/apache/iotdb/commit/8b65a791bc79994d9707275a93a4c412d631665a", "message": "add integration test", "committedDate": "2020-12-30T03:57:09Z", "type": "commit"}, {"oid": "1bbe92e0a7e6a6a743681c6ec48494c438ec5ccd", "url": "https://github.com/apache/iotdb/commit/1bbe92e0a7e6a6a743681c6ec48494c438ec5ccd", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-12-30T03:58:26Z", "type": "commit"}, {"oid": "54443d6998760ed08651e00f0d5c78d100638d88", "url": "https://github.com/apache/iotdb/commit/54443d6998760ed08651e00f0d5c78d100638d88", "message": "fix conflict", "committedDate": "2020-12-30T04:37:53Z", "type": "commit"}, {"oid": "18f4b4ba94b5a64fba44d00ff68ed34e33fd0450", "url": "https://github.com/apache/iotdb/commit/18f4b4ba94b5a64fba44d00ff68ed34e33fd0450", "message": "fix codesmells", "committedDate": "2020-12-30T05:20:45Z", "type": "commit"}, {"oid": "2d3357bad014cb0faada4a49846d3732226fce6f", "url": "https://github.com/apache/iotdb/commit/2d3357bad014cb0faada4a49846d3732226fce6f", "message": "add kill query tests", "committedDate": "2020-12-30T07:04:38Z", "type": "commit"}, {"oid": "b4599429d30c348cd493a4049a7c314cc924185d", "url": "https://github.com/apache/iotdb/commit/b4599429d30c348cd493a4049a7c314cc924185d", "message": "seperate kill query tests", "committedDate": "2020-12-30T12:28:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODUzMA==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r550428530", "bodyText": "better to add a comment to indicate the unit is second.", "author": "JackieTien97", "createdAt": "2020-12-31T08:33:19Z", "path": "jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBStatement.java", "diffHunk": "@@ -48,7 +48,7 @@\n   private ResultSet resultSet = null;\n   private IoTDBConnection connection;\n   private int fetchSize;\n-  private int queryTimeout = 10;\n+  private int queryTimeout = 60;", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA4NzQ1Ng==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551087456", "bodyText": "killQuery function will change the map while iterating the map keyset. This may cause ConcurrentModificationException.", "author": "JackieTien97", "createdAt": "2021-01-04T02:01:39Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -319,6 +331,25 @@ private void operateCreateSnapshot() {\n     IoTDB.metaManager.createMTreeSnapshot();\n   }\n \n+  private void operateKillQuery(KillQueryPlan killQueryPlan) throws QueryIdNotExsitException {\n+    QueryTimeManager queryTimeManager = QueryTimeManager.getInstance();\n+    if (killQueryPlan.getQueryId() != -1) {\n+      if (queryTimeManager.getQueryThreadMap().get(killQueryPlan.getQueryId()) != null) {\n+        queryTimeManager.killQuery(killQueryPlan.getQueryId());\n+      } else {\n+        throw new QueryIdNotExsitException(String\n+            .format(\"Query Id %d is not exist, please check it.\", killQueryPlan.getQueryId()));\n+      }\n+    } else {\n+      // if queryId is not specified, kill all running queries\n+      if (!queryTimeManager.getQueryThreadMap().isEmpty()) {\n+        for (Long queryId : queryTimeManager.getQueryThreadMap().keySet()) {\n+          queryTimeManager.killQuery(queryId);\n+        }", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwMDM2Ng==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551200366", "bodyText": "Fixed. Thanks for the reminder.", "author": "Alima777", "createdAt": "2021-01-04T09:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA4NzQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA4ODg4Mw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551088883", "bodyText": "It will have some parallel errors. If I manually do the kill operation after the if statement has been judged, then my kill operation will successfully remove it from map, but the scheduled thread will cause nullpointerexception in the killQuery function, vice versa.", "author": "JackieTien97", "createdAt": "2021-01-04T02:11:16Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryTimeManager.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.iotdb.db.concurrent.IoTDBThreadPoolFactory;\n+import org.apache.iotdb.db.exception.query.QueryTimeoutRuntimeException;\n+import org.apache.iotdb.db.service.IService;\n+import org.apache.iotdb.db.service.ServiceType;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class is used to monitor the executing time of each query.\n+ * </p>\n+ * Once one is over the threshold, it will be killed and return the time out exception.\n+ */\n+public class QueryTimeManager implements IService {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(QueryTimeManager.class);\n+\n+  /**\n+   * the key of queryStartTimeMap is the query id and the value of queryStartTimeMap is the start\n+   * time and the sql of this query.\n+   */\n+  private Map<Long, Pair<Long, String>> queryInfoMap;\n+  /**\n+   * the key of queryThreadMap is the query id and the value of queryThreadMap is the executing\n+   * thread of this query.\n+   * Only main thread is put in this map since the sub threads are maintained by the thread pool.\n+   * The thread allocated for readTask will change every time, so we have to access this map\n+   * frequently, which will lead to big performance cost.\n+   */\n+  private Map<Long, Thread> queryThreadMap;\n+\n+  private ScheduledExecutorService executorService;\n+\n+  private QueryTimeManager() {\n+    queryInfoMap = new ConcurrentHashMap<>();\n+    queryThreadMap = new ConcurrentHashMap<>();\n+    executorService = IoTDBThreadPoolFactory.newScheduledThreadPool(1,\n+        \"query-time-manager\");\n+  }\n+\n+  public void registerQuery(long queryId, long startTime, String sql, long timeout,\n+      Thread queryThread) {\n+    queryInfoMap.put(queryId, new Pair<>(startTime, sql));\n+    queryThreadMap.put(queryId, queryThread);\n+    // submit a scheduled task to judge whether query is still running after timeout\n+    executorService.schedule(() -> {\n+      if (queryThreadMap.get(queryId) != null) {\n+        killQuery(queryId);\n+        logger.error(String.format(\"Query is time out with queryId %d\", queryId));\n+      }", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA4OTA0MQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551089041", "bodyText": "You should try the computeIfPresent() function, it can guarantee atomicity.", "author": "JackieTien97", "createdAt": "2021-01-04T02:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA4ODg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxMTQzMA==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551211430", "bodyText": "Fixed. Thanks.", "author": "Alima777", "createdAt": "2021-01-04T09:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA4ODg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MDY1Nw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551090657", "bodyText": "The static method interrupted() in Thread class will clear the interrupt flag, you should call the instance method isInterrupted().", "author": "JackieTien97", "createdAt": "2021-01-04T02:21:49Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/NonAlignEngineDataSet.java", "diffHunk": "@@ -286,6 +293,11 @@ public TSQueryNonAlignDataSet fillBuffer(int fetchSize, WatermarkEncoder encoder\n \n     for (int seriesIndex = 0; seriesIndex < seriesNum; seriesIndex++) {\n       if (!noMoreDataInQueueArray[seriesIndex]) {\n+        // check the interrupted status of main thread before take next batch\n+        if (Thread.interrupted()) {", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTI1NQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551091255", "bodyText": "Same as above.", "author": "JackieTien97", "createdAt": "2021-01-04T02:25:27Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/RawQueryDataSetWithoutValueFilter.java", "diffHunk": "@@ -175,9 +182,15 @@ private void init() throws IOException, InterruptedException {\n       reader.setHasRemaining(true);\n       reader.setManagedByQueryManager(true);\n       TASK_POOL_MANAGER\n-          .submit(new ReadTask(reader, blockingQueueArray[i], paths.get(i).getFullPath()));\n+          .submit(new ReadTask(reader, blockingQueueArray[i], paths.get(i).getFullPath(),\n+              Thread.currentThread()));\n     }\n     for (int i = 0; i < seriesReaderList.size(); i++) {\n+      // check the interrupted status of main thread before taking next batch\n+      if (Thread.interrupted()) {", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTYzNQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551091635", "bodyText": "Check the main thread's interrupt flag in the init method.", "author": "JackieTien97", "createdAt": "2021-01-04T02:27:23Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/NonAlignEngineDataSet.java", "diffHunk": "@@ -264,7 +271,7 @@ private void init(WatermarkEncoder encoder, int fetchSize) {\n       ManagedSeriesReader reader = seriesReaderWithoutValueFilterList.get(i);", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTY4OQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551091689", "bodyText": "Same as above", "author": "JackieTien97", "createdAt": "2021-01-04T02:27:43Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/RawQueryDataSetWithoutValueFilter.java", "diffHunk": "@@ -283,7 +296,12 @@ public TSQueryDataSet fillBuffer(int fetchSize, WatermarkEncoder encoder)\n           // move next\n           cachedBatchDataArray[seriesIndex].next();\n \n-          // get next batch if current batch is empty and  still have remaining batch data in queue\n+          // check the interrupted status of main thread before taking next batch\n+          if (Thread.interrupted()) {", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTcxMw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551091713", "bodyText": "Same as above", "author": "JackieTien97", "createdAt": "2021-01-04T02:27:53Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/RawQueryDataSetWithoutValueFilter.java", "diffHunk": "@@ -430,6 +448,11 @@ public RowRecord nextWithoutConstraint() throws IOException {\n         // move next\n         cachedBatchDataArray[seriesIndex].next();\n \n+        // check the interrupted status of main thread before taking next batch\n+        if (Thread.interrupted()) {", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTgyMw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551091823", "bodyText": "Same as above", "author": "JackieTien97", "createdAt": "2021-01-04T02:28:32Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -173,6 +174,10 @@ public boolean isEmpty() throws IOException {\n   }\n \n   boolean hasNextFile() throws IOException {\n+    if (Thread.interrupted()) {", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5MTg2NQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551091865", "bodyText": "Same as above.", "author": "JackieTien97", "createdAt": "2021-01-04T02:28:45Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -351,6 +361,10 @@ void skipCurrentChunk() {\n   @SuppressWarnings(\"squid:S3776\")\n   // Suppress high Cognitive Complexity warning\n   boolean hasNextPage() throws IOException {\n+    if (Thread.interrupted()) {", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA5Mjc2NQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r551092765", "bodyText": "Query may not finish in one rpc call, user may call two or more rpc to fetch complete result set. So, you shouldn't remove it after the first call finished.", "author": "JackieTien97", "createdAt": "2021-01-04T02:34:01Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -769,17 +779,22 @@ private TSExecuteStatementResp internalExecuteQueryStatement(String statement,\n         }\n       }\n \n+      // remove query info in QueryTimeManager\n+      QueryTimeManager.getInstance().unRegisterQuery(queryId);", "originalCommit": "b4599429d30c348cd493a4049a7c314cc924185d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d05ef244d89279ec4b43897e924ea32a123583f", "url": "https://github.com/apache/iotdb/commit/3d05ef244d89279ec4b43897e924ea32a123583f", "message": "fix conflict", "committedDate": "2021-01-04T03:18:18Z", "type": "commit"}, {"oid": "96400db0bbf0fe1e81f968a98ac2740fef72d59b", "url": "https://github.com/apache/iotdb/commit/96400db0bbf0fe1e81f968a98ac2740fef72d59b", "message": "fix some issues based on review comments", "committedDate": "2021-01-04T09:26:01Z", "type": "commit"}, {"oid": "13e737a7f90e18ca7bcee5c2807918a2f7dbc5d1", "url": "https://github.com/apache/iotdb/commit/13e737a7f90e18ca7bcee5c2807918a2f7dbc5d1", "message": "refactor imports", "committedDate": "2021-01-04T09:57:15Z", "type": "commit"}, {"oid": "e43bcc99d5f976310fc30b064ee9cdca0bf380d1", "url": "https://github.com/apache/iotdb/commit/e43bcc99d5f976310fc30b064ee9cdca0bf380d1", "message": "Merge branch 'master' into queryOverTime", "committedDate": "2021-01-04T10:35:22Z", "type": "commit"}, {"oid": "4ab01826d920a7164965d5e01251537ed5167b0f", "url": "https://github.com/apache/iotdb/commit/4ab01826d920a7164965d5e01251537ed5167b0f", "message": "revert metaGroupMember", "committedDate": "2021-01-04T10:39:15Z", "type": "commit"}, {"oid": "6b85e28aa42579a0738a7c2ad3dffa53b877a6a2", "url": "https://github.com/apache/iotdb/commit/6b85e28aa42579a0738a7c2ad3dffa53b877a6a2", "message": "add newline", "committedDate": "2021-01-04T10:40:21Z", "type": "commit"}, {"oid": "05e2213808881be392b9281649ac04b7321a6b6f", "url": "https://github.com/apache/iotdb/commit/05e2213808881be392b9281649ac04b7321a6b6f", "message": "implement fetchResult timeout", "committedDate": "2021-01-04T13:02:21Z", "type": "commit"}, {"oid": "b2a4a522dab355a4dd59d7cb2f4131824889d3ff", "url": "https://github.com/apache/iotdb/commit/b2a4a522dab355a4dd59d7cb2f4131824889d3ff", "message": "Merge branch 'master' into queryOverTime", "committedDate": "2021-01-05T01:11:29Z", "type": "commit"}, {"oid": "de34ba27f263900a0823d936ce484b71f2b7b706", "url": "https://github.com/apache/iotdb/commit/de34ba27f263900a0823d936ce484b71f2b7b706", "message": "fix sonar codesmells", "committedDate": "2021-01-05T01:42:19Z", "type": "commit"}, {"oid": "095281f968d153530ebd113efd648631e2d6e8e9", "url": "https://github.com/apache/iotdb/commit/095281f968d153530ebd113efd648631e2d6e8e9", "message": "f*** sonar", "committedDate": "2021-01-05T02:10:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMzNTUwOQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r552335509", "bodyText": "No need to do the if judgement, computeIfPresent already enough", "author": "JackieTien97", "createdAt": "2021-01-06T02:51:44Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -327,6 +339,32 @@ private void operateCreateSnapshot() {\n     IoTDB.metaManager.createMTreeSnapshot();\n   }\n \n+  private void operateKillQuery(KillQueryPlan killQueryPlan) throws QueryIdNotExsitException {\n+    QueryTimeManager queryTimeManager = QueryTimeManager.getInstance();\n+    long killQueryId = killQueryPlan.getQueryId();\n+    if (killQueryId != -1) {\n+      if (queryTimeManager.getQueryThreadMap().get(killQueryId) != null) {", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NzA2MQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r552357061", "bodyText": "It's for the else statement actually.", "author": "Alima777", "createdAt": "2021-01-06T04:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMzNTUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzNzkwNg==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554937906", "bodyText": "I think it's better to check the timeoutInMS parameter at the very begeinning of the function call.", "author": "SteveYurongSu", "createdAt": "2021-01-11T10:09:15Z", "path": "jdbc/src/main/java/org/apache/iotdb/jdbc/IoTDBStatement.java", "diffHunk": "@@ -319,10 +328,14 @@ public ResultSet executeQuery(String sql) throws SQLException {\n     }\n   }\n \n-  private ResultSet executeQuerySQL(String sql) throws TException, SQLException {\n+  private ResultSet executeQuerySQL(String sql, long timeoutInMS) throws TException, SQLException {\n     isCancelled = false;\n     TSExecuteStatementReq execReq = new TSExecuteStatementReq(sessionId, sql, stmtId);\n     execReq.setFetchSize(fetchSize);\n+    if (timeoutInMS <= 0) {", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzODY5Mw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554938693", "bodyText": "in public ResultSet executeQuery(String sql, long timeoutInMS) or somewhere...", "author": "SteveYurongSu", "createdAt": "2021-01-11T10:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzNzkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAyODYyMw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555028623", "bodyText": "Fixed", "author": "Alima777", "createdAt": "2021-01-11T12:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzNzkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk0MDg3OA==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554940878", "bodyText": "Specify the unit please.", "author": "SteveYurongSu", "createdAt": "2021-01-11T10:14:33Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -475,6 +475,11 @@\n    */\n   private long cacheFileReaderClearPeriod = 100000;\n \n+  /**\n+   * the max executing time of query.", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk0MTYzMg==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554941632", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class QueryIdNotExsitException extends IoTDBException {\n          \n          \n            \n            public class QueryIdNotExistedException extends IoTDBException {", "author": "SteveYurongSu", "createdAt": "2021-01-11T10:15:50Z", "path": "server/src/main/java/org/apache/iotdb/db/exception/QueryIdNotExsitException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.exception;\n+\n+import org.apache.iotdb.rpc.TSStatusCode;\n+\n+public class QueryIdNotExsitException extends IoTDBException {", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk2NjQzOQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554966439", "bodyText": "?", "author": "SteveYurongSu", "createdAt": "2021-01-11T10:59:13Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java", "diffHunk": "@@ -115,8 +132,11 @@ public InputStream wrapAsInputStream() {\n   public void close() throws IOException {\n     try {\n       channel.close();\n+    } catch (ClosedByInterruptException e) {\n+      throw new QueryTimeoutRuntimeException(\n+          QueryTimeoutRuntimeException.TIMEOUT_EXCEPTION_MESSAGE);\n     } catch (IOException e) {\n-      logger.error(\"Error happened while closing {}\", filePath);\n+      logger.error(\"Error happened while getting {} size\", filePath);", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk2NjU2OQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554966569", "bodyText": "?", "author": "SteveYurongSu", "createdAt": "2021-01-11T10:59:27Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java", "diffHunk": "@@ -85,8 +99,11 @@ public int read(ByteBuffer dst) throws IOException {\n   public int read(ByteBuffer dst, long position) throws IOException {\n     try {\n       return channel.read(dst, position);\n+    } catch (ClosedByInterruptException e) {\n+      throw new QueryTimeoutRuntimeException(\n+          QueryTimeoutRuntimeException.TIMEOUT_EXCEPTION_MESSAGE);\n     } catch (IOException e) {\n-      logger.error(\"Error happened while reading {} from position {}\", filePath, position);\n+      logger.error(\"Error happened while getting {} size\", filePath);", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk2NjcwNw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554966707", "bodyText": "?", "author": "SteveYurongSu", "createdAt": "2021-01-11T10:59:42Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java", "diffHunk": "@@ -75,8 +86,11 @@ public TsFileInput position(long newPosition) throws IOException {\n   public int read(ByteBuffer dst) throws IOException {\n     try {\n       return channel.read(dst);\n+    } catch (ClosedByInterruptException e) {\n+      throw new QueryTimeoutRuntimeException(\n+          QueryTimeoutRuntimeException.TIMEOUT_EXCEPTION_MESSAGE);\n     } catch (IOException e) {\n-      logger.error(\"Error happened while reading {} from current position\", filePath);\n+      logger.error(\"Error happened while getting {} size\", filePath);", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk2NjgxMQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554966811", "bodyText": "?", "author": "SteveYurongSu", "createdAt": "2021-01-11T10:59:54Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java", "diffHunk": "@@ -65,8 +73,11 @@ public TsFileInput position(long newPosition) throws IOException {\n     try {\n       channel.position(newPosition);\n       return this;\n+    } catch (ClosedByInterruptException e) {\n+      throw new QueryTimeoutRuntimeException(\n+          QueryTimeoutRuntimeException.TIMEOUT_EXCEPTION_MESSAGE);\n     } catch (IOException e) {\n-      logger.error(\"Error happened while changing {} position to {}\", filePath, newPosition);\n+      logger.error(\"Error happened while getting {} size\", filePath);", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk2Njg5Mw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554966893", "bodyText": "?", "author": "SteveYurongSu", "createdAt": "2021-01-11T11:00:04Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/reader/LocalTsFileInput.java", "diffHunk": "@@ -54,8 +59,11 @@ public long size() throws IOException {\n   public long position() throws IOException {\n     try {\n       return channel.position();\n+    } catch (ClosedByInterruptException e) {\n+      throw new QueryTimeoutRuntimeException(\n+          QueryTimeoutRuntimeException.TIMEOUT_EXCEPTION_MESSAGE);\n     } catch (IOException e) {\n-      logger.error(\"Error happened while getting {} current position\", filePath);\n+      logger.error(\"Error happened while getting {} size\", filePath);", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk2ODQ5Ng==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554968496", "bodyText": "Add it to the user doc.\nLink: https://iotdb.apache.org/UserGuide/Master/Client/Status%20Codes.html", "author": "SteveYurongSu", "createdAt": "2021-01-11T11:02:39Z", "path": "service-rpc/src/main/java/org/apache/iotdb/rpc/TSStatusCode.java", "diffHunk": "@@ -60,6 +60,7 @@\n   QUERY_PROCESS_ERROR(411),\n   WRITE_PROCESS_ERROR(412),\n   WRITE_PROCESS_REJECT(413),\n+  QUERY_ID_NOT_EXIST(414),", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1NTk1Mw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555055953", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2021-01-11T13:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk2ODQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk3NDQ3Nw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554974477", "bodyText": "Make QueryIdNotExsitException extended from QueryProcessException?", "author": "SteveYurongSu", "createdAt": "2021-01-11T11:13:30Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -291,6 +296,13 @@ public boolean processNonQuery(PhysicalPlan plan)\n         throw new QueryProcessException(\"Create index hasn't been supported yet\");\n       case DROP_INDEX:\n         throw new QueryProcessException(\"Drop index hasn't been supported yet\");\n+      case KILL:\n+        try {\n+          operateKillQuery((KillQueryPlan) plan);\n+        } catch (QueryIdNotExsitException e) {", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAzMDQ2NQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555030465", "bodyText": "It's ok now I think.", "author": "Alima777", "createdAt": "2021-01-11T13:01:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk3NDQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5NDI5Mg==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554994292", "bodyText": "Why using synchronized here?", "author": "SteveYurongSu", "createdAt": "2021-01-11T11:52:33Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -327,6 +339,32 @@ private void operateCreateSnapshot() {\n     IoTDB.metaManager.createMTreeSnapshot();\n   }\n \n+  private void operateKillQuery(KillQueryPlan killQueryPlan) throws QueryIdNotExsitException {\n+    QueryTimeManager queryTimeManager = QueryTimeManager.getInstance();\n+    long killQueryId = killQueryPlan.getQueryId();\n+    if (killQueryId != -1) {\n+      if (queryTimeManager.getQueryThreadMap().get(killQueryId) != null) {\n+        queryTimeManager.getQueryThreadMap().computeIfPresent(killQueryId, (k, v) -> {\n+          queryTimeManager.killQuery(k);\n+          return null;\n+        });\n+      } else {\n+        throw new QueryIdNotExsitException(String\n+            .format(\"Query Id %d is not exist, please check it.\", killQueryPlan.getQueryId()));\n+      }\n+    } else {\n+      // if queryId is not specified, kill all running queries\n+      if (!queryTimeManager.getQueryThreadMap().isEmpty()) {\n+        synchronized (queryTimeManager.getQueryThreadMap()) {", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAzMDY1Nw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555030657", "bodyText": "To keep thread safe while iterating.", "author": "Alima777", "createdAt": "2021-01-11T13:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5NDI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5ODgxOA==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r554998818", "bodyText": "ignoreTimeStamp is false by default... This statement is unneccessary...", "author": "SteveYurongSu", "createdAt": "2021-01-11T12:01:28Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -744,7 +753,9 @@ private TSExecuteStatementResp internalExecuteQueryStatement(String statement,\n       resp.setOperationType(plan.getOperatorType().toString());\n       if (plan.getOperatorType() == OperatorType.AGGREGATION) {\n         resp.setIgnoreTimeStamp(true);\n-      } // else default ignoreTimeStamp is false\n+      } else if (plan instanceof ShowQueryProcesslistPlan) {", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwMjE5Mw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555002193", "bodyText": "What if exceptions occur before unRegisterQuery  is executed?", "author": "SteveYurongSu", "createdAt": "2021-01-11T12:08:02Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -769,17 +780,24 @@ private TSExecuteStatementResp internalExecuteQueryStatement(String statement,\n         }\n       }\n \n+      // remove query info in QueryTimeManager\n+      if (!(plan instanceof ShowQueryProcesslistPlan)) {", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwMzMyMw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555003323", "bodyText": "It's better to save the stack trace.", "author": "SteveYurongSu", "createdAt": "2021-01-11T12:10:15Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -769,17 +780,24 @@ private TSExecuteStatementResp internalExecuteQueryStatement(String statement,\n         }\n       }\n \n+      // remove query info in QueryTimeManager\n+      if (!(plan instanceof ShowQueryProcesslistPlan)) {\n+        queryTimeManager.unRegisterQuery(queryId);\n+      }\n       return resp;\n     } catch (Exception e) {\n-      if (e instanceof NullPointerException) {\n+      if (e instanceof QueryTimeoutRuntimeException && Thread.interrupted()) {\n+        // do nothing, just recover the state of thread here\n+        logger.error(\"Recover the state of the thread interrupted\");", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwMzgyMg==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555003822", "bodyText": "What if exceptions occur before unRegisterQuery is executed?", "author": "SteveYurongSu", "createdAt": "2021-01-11T12:11:14Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -998,6 +1021,8 @@ public TSFetchResultsResp fetchResults(TSFetchResultsReq req) {\n         resp.setHasResultSet(hasResultSet);\n         resp.setQueryDataSet(result);\n         resp.setIsAlign(true);\n+\n+        queryTimeManager.unRegisterQuery(req.queryId);", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwMzg2OA==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555003868", "bodyText": "What if exceptions occur before unRegisterQuery is executed?", "author": "SteveYurongSu", "createdAt": "2021-01-11T12:11:20Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -1017,9 +1042,15 @@ public TSFetchResultsResp fetchResults(TSFetchResultsReq req) {\n         resp.setHasResultSet(hasResultSet);\n         resp.setNonAlignQueryDataSet(nonAlignResult);\n         resp.setIsAlign(false);\n+\n+        queryTimeManager.unRegisterQuery(req.queryId);", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwOTM0MQ==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555009341", "bodyText": "Package queryInfoMap and queryThreadMap?", "author": "SteveYurongSu", "createdAt": "2021-01-11T12:21:35Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryTimeManager.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.iotdb.db.concurrent.IoTDBThreadPoolFactory;\n+import org.apache.iotdb.db.exception.query.QueryTimeoutRuntimeException;\n+import org.apache.iotdb.db.service.IService;\n+import org.apache.iotdb.db.service.ServiceType;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class is used to monitor the executing time of each query.\n+ * </p>\n+ * Once one is over the threshold, it will be killed and return the time out exception.\n+ */\n+public class QueryTimeManager implements IService {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(QueryTimeManager.class);\n+\n+  /**\n+   * the key of queryStartTimeMap is the query id and the value of queryStartTimeMap is the start\n+   * time and the sql of this query.\n+   */\n+  private Map<Long, Pair<Long, String>> queryInfoMap;", "originalCommit": "095281f968d153530ebd113efd648631e2d6e8e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1NDgyMw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r555054823", "bodyText": "Good suggestion~ I have packaged them.", "author": "Alima777", "createdAt": "2021-01-11T13:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwOTM0MQ=="}], "type": "inlineReview"}, {"oid": "f449e736c47fd75efbedf7f3e85df3307667eb65", "url": "https://github.com/apache/iotdb/commit/f449e736c47fd75efbedf7f3e85df3307667eb65", "message": "fix conflict", "committedDate": "2021-01-11T13:10:17Z", "type": "commit"}, {"oid": "ac38522b7038ee7a4c875e4bee655dd3bbbf68ab", "url": "https://github.com/apache/iotdb/commit/ac38522b7038ee7a4c875e4bee655dd3bbbf68ab", "message": "fix based on review comments", "committedDate": "2021-01-11T13:48:19Z", "type": "commit"}, {"oid": "65b73effead5adf2aaaf83a0005ae1e9ade5f582", "url": "https://github.com/apache/iotdb/commit/65b73effead5adf2aaaf83a0005ae1e9ade5f582", "message": "remove a blank line", "committedDate": "2021-01-12T01:37:36Z", "type": "commit"}, {"oid": "76e2249ddb32e016f680c45a0c2898b8ff452ca8", "url": "https://github.com/apache/iotdb/commit/76e2249ddb32e016f680c45a0c2898b8ff452ca8", "message": "fix conflicts", "committedDate": "2021-01-12T12:33:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIxMjUwNw==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r556212507", "bodyText": "Use DETAILED_FAILURE_QUERY_TRACE_LOGGER instead ?", "author": "SteveYurongSu", "createdAt": "2021-01-13T01:55:02Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -1573,7 +1604,10 @@ private TSStatus onQueryException(Exception e, String operation) {\n   }\n \n   private TSStatus tryCatchQueryException(Exception e) {\n-    if (e instanceof ParseCancellationException) {\n+    if (e instanceof QueryTimeoutRuntimeException && Thread.interrupted()) {\n+      // do nothing, just recover the state of thread here\n+      LOGGER.error(\"Recover the state of the thread interrupted\", e);", "originalCommit": "76e2249ddb32e016f680c45a0c2898b8ff452ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIyOTAzOA==", "url": "https://github.com/apache/iotdb/pull/2352#discussion_r556229038", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2021-01-13T02:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIxMjUwNw=="}], "type": "inlineReview"}, {"oid": "cddca310c65634e0b4e2b351e71bfe67f533fc49", "url": "https://github.com/apache/iotdb/commit/cddca310c65634e0b4e2b351e71bfe67f533fc49", "message": "rename logger", "committedDate": "2021-01-13T02:28:35Z", "type": "commit"}, {"oid": "4e50de6eb013b1ffe963f2a7f8285687d4812c9e", "url": "https://github.com/apache/iotdb/commit/4e50de6eb013b1ffe963f2a7f8285687d4812c9e", "message": "queryOverTime", "committedDate": "2021-01-13T02:56:38Z", "type": "commit"}, {"oid": "d3753e2f0b1de638661fa84fd6993d8432b9cf33", "url": "https://github.com/apache/iotdb/commit/d3753e2f0b1de638661fa84fd6993d8432b9cf33", "message": "error -> run", "committedDate": "2021-01-13T03:05:59Z", "type": "commit"}]}