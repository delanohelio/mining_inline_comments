{"pr_number": 1084, "pr_title": "[IOTDB-560] add TSRecordOutputFormat to write TsFile via Flink DataSet/DataStream API.", "pr_createdAt": "2020-04-21T13:07:22Z", "pr_url": "https://github.com/apache/iotdb/pull/1084", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDI2MA==", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415044260", "bodyText": "writing TsFile -\u300b writing to TsFile ?", "author": "sunjincheng121", "createdAt": "2020-04-25T11:34:56Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileBatchSink.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.DataSet;\n+import org.apache.flink.api.java.ExecutionEnvironment;\n+import org.apache.flink.api.java.tuple.Tuple7;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.types.Row;\n+import org.apache.iotdb.flink.tsfile.RowTSRecordConverter;\n+import org.apache.iotdb.flink.tsfile.TSRecordOutputFormat;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The example of writing TsFile via Flink DataSet API.", "originalCommit": "858341e56f87f3e6d9ae94adab4da2c994c898d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDYwMg==", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415044602", "bodyText": "writing TsFile -\u300b writing to TsFile ?", "author": "sunjincheng121", "createdAt": "2020-04-25T11:36:38Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileStreamSink.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.tuple.Tuple7;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.types.Row;\n+import org.apache.iotdb.flink.tsfile.RowTSRecordConverter;\n+import org.apache.iotdb.flink.tsfile.TSRecordOutputFormat;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The example of writing TsFile via Flink DataStream API.", "originalCommit": "858341e56f87f3e6d9ae94adab4da2c994c898d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTQ4NQ==", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415045485", "bodyText": "Would be better to add JDK Doc?", "author": "sunjincheng121", "createdAt": "2020-04-25T11:42:19Z", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.util.Collector;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+public interface TSRecordConverter<T> extends Serializable {", "originalCommit": "858341e56f87f3e6d9ae94adab4da2c994c898d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTc0MQ==", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415045741", "bodyText": "Add JDK Doc? Add semantic description of this method\u3002", "author": "sunjincheng121", "createdAt": "2020-04-25T11:43:49Z", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.util.Collector;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+public interface TSRecordConverter<T> extends Serializable {\n+\n+\tvoid open(Schema schema) throws IOException;\n+\n+\tvoid covertAndCollect(T input, Collector<TSRecord> collector) throws IOException;", "originalCommit": "858341e56f87f3e6d9ae94adab4da2c994c898d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NzU4Nw==", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415047587", "bodyText": "Regarding the method name covertAndCollect ,I think it again, It is not pretty clear for the semantic. I think in in TSRecordConverter the main goal of covertAndCollect  is covert the T to TSRecord. So, I would like to change the name from covertAndCollect  to convert which make the semantic more clearly. What do you think?\nBTW\uff1a typo covert -> convert", "author": "sunjincheng121", "createdAt": "2020-04-25T11:55:49Z", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordConverter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.util.Collector;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+public interface TSRecordConverter<T> extends Serializable {\n+\n+\tvoid open(Schema schema) throws IOException;\n+\n+\tvoid covertAndCollect(T input, Collector<TSRecord> collector) throws IOException;", "originalCommit": "858341e56f87f3e6d9ae94adab4da2c994c898d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0Nzg0MA==", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415047840", "bodyText": "Please add an empty row.", "author": "sunjincheng121", "createdAt": "2020-04-25T11:57:05Z", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TSRecordOutputFormat.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.util.Collector;\n+import org.apache.flink.util.FlinkRuntimeException;\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.exception.write.WriteProcessException;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Output format that writes TsFiles by {@link TSRecord}. Users need to provide a {@link TSRecordConverter} used to\n+ * convert the upstream data to {@link TSRecord}.\n+ *\n+ * @param <T> The input type of this output format.\n+ */\n+public class TSRecordOutputFormat<T> extends TsFileOutputFormat<T> {\n+\n+\tprivate final TSRecordConverter<T> converter;\n+\n+\tprivate transient TSRecordCollector tsRecordCollector = null;\n+\n+\tpublic TSRecordOutputFormat(String path, Schema schema, TSRecordConverter<T> converter) {\n+\t\tthis(path, schema, converter, null);\n+\t}\n+\n+\tpublic TSRecordOutputFormat(Schema schema, TSRecordConverter<T> converter) {\n+\t\tsuper(null, schema, null);\n+\t\tthis.converter = converter;\n+\t}\n+\n+\tpublic TSRecordOutputFormat(String path, Schema schema, TSRecordConverter<T> converter, TSFileConfig config) {\n+\t\tsuper(path, schema, config);\n+\t\tthis.converter = converter;\n+\t}\n+\n+\t@Override\n+\tpublic void open(int taskNumber, int numTasks) throws IOException {\n+\t\tsuper.open(taskNumber, numTasks);\n+\t\tconverter.open(schema);\n+\t\ttsRecordCollector = new TSRecordCollector();\n+\t}\n+\n+\t@Override\n+\tpublic void close() throws IOException {\n+\t\tconverter.close();\n+\t\tsuper.close();\n+\t}\n+\n+\t@Override\n+\tpublic void writeRecord(T t) throws IOException {\n+\t\ttry {\n+\t\t\tconverter.covertAndCollect(t, tsRecordCollector);\n+\t\t} catch (FlinkRuntimeException e) {\n+\t\t\tthrow new IOException(e.getCause());\n+\t\t}\n+\t}\n+\n+\tprivate class TSRecordCollector implements Collector<TSRecord> {\n+\n+\t\t@Override\n+\t\tpublic void collect(TSRecord tsRecord) {\n+\t\t\ttry {\n+\t\t\t\twriter.write(tsRecord);\n+\t\t\t} catch (IOException | WriteProcessException e) {\n+\t\t\t\tthrow new FlinkRuntimeException(e);\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() {\n+\n+\t\t}\n+\t}\n+\n+\tpublic TSRecordConverter<T> getConverter() {\n+\t\treturn converter;\n+\t}\n+}", "originalCommit": "858341e56f87f3e6d9ae94adab4da2c994c898d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0ODY4Ng==", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415048686", "bodyText": "Add JDK Doc", "author": "sunjincheng121", "createdAt": "2020-04-25T12:01:55Z", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/TsFileOutputFormat.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.api.common.io.FileOutputFormat;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.runtime.util.HadoopUtils;\n+import org.apache.flink.util.Preconditions;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iotdb.flink.tsfile.util.TSFileConfigUtil;\n+import org.apache.iotdb.hadoop.fileSystem.HDFSOutput;\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.write.TsFileWriter;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+import org.apache.iotdb.tsfile.write.writer.LocalTsFileOutput;\n+import org.apache.iotdb.tsfile.write.writer.TsFileOutput;\n+\n+import javax.annotation.Nullable;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+public abstract class TsFileOutputFormat<T> extends FileOutputFormat<T> {", "originalCommit": "858341e56f87f3e6d9ae94adab4da2c994c898d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzMzU3NA==", "url": "https://github.com/apache/iotdb/pull/1084#discussion_r415533574", "bodyText": "templateDataPoint.type could be used to switch the data type.", "author": "qiaojialin", "createdAt": "2020-04-27T06:04:17Z", "path": "flink-tsfile-connector/src/main/java/org/apache/iotdb/flink/tsfile/RowTSRecordConverter.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile;\n+\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.Collector;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+import org.apache.iotdb.tsfile.utils.Binary;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.record.datapoint.BooleanDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.DataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.DoubleDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.FloatDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.IntDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.LongDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.StringDataPoint;\n+import org.apache.iotdb.tsfile.write.schema.Schema;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The converter that convert a Row object to multiple TSRecord objects.\n+ */\n+public class RowTSRecordConverter implements TSRecordConverter<Row> {\n+\n+\tprivate RowTypeInfo rowTypeInfo;\n+\tprivate transient TSRecord[] outputTemplate;\n+\tprivate transient int timeIndex = -1;\n+\tprivate transient int[] tsRecordIndexMapping;\n+\tprivate transient int[] dataPointIndexMapping;\n+\tprivate transient TSRecord[] reuse;\n+\n+\tpublic RowTSRecordConverter(RowTypeInfo rowTypeInfo) {\n+\t\tthis.rowTypeInfo = rowTypeInfo;\n+\t}\n+\n+\t@Override\n+\tpublic void open(Schema schema) throws IOException {\n+\t\tthis.tsRecordIndexMapping = new int[rowTypeInfo.getArity()];\n+\t\tthis.dataPointIndexMapping = new int[rowTypeInfo.getArity()];\n+\t\tList<TSRecord> outputTemplateList = new ArrayList<>();\n+\n+\t\tfor (int i = 0; i < rowTypeInfo.getArity(); i++) {\n+\t\t\tString fieldName = rowTypeInfo.getFieldNames()[i];\n+\t\t\tif (QueryConstant.RESERVED_TIME.equals(fieldName)) {\n+\t\t\t\ttimeIndex = i;\n+\t\t\t\ttsRecordIndexMapping[i] = -1;\n+\t\t\t\tdataPointIndexMapping[i] = -1;\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tString deviceId = fieldName.substring(0, fieldName.lastIndexOf(\".\"));\n+\t\t\tString measurementId = fieldName.substring(fieldName.lastIndexOf(\".\") + 1);\n+\t\t\tint tsRecordIndex = outputTemplateList.stream()\n+\t\t\t\t.map(t -> t.deviceId).collect(Collectors.toList()).indexOf(deviceId);\n+\t\t\tif (tsRecordIndex < 0) {\n+\t\t\t\toutputTemplateList.add(new TSRecord(0, deviceId));\n+\t\t\t\ttsRecordIndex = outputTemplateList.size() - 1;\n+\t\t\t}\n+\t\t\ttsRecordIndexMapping[i] = tsRecordIndex;\n+\t\t\tTSRecord tsRecord = outputTemplateList.get(tsRecordIndex);\n+\t\t\tClass typeClass = rowTypeInfo.getFieldTypes()[i].getTypeClass();\n+\t\t\tif (typeClass == Boolean.class || typeClass == boolean.class) {\n+\t\t\t\ttsRecord.addTuple(new BooleanDataPoint(measurementId, false));\n+\t\t\t} else if (typeClass == Integer.class || typeClass == int.class) {\n+\t\t\t\ttsRecord.addTuple(new IntDataPoint(measurementId, 0));\n+\t\t\t} else if (typeClass == Long.class || typeClass == long.class) {\n+\t\t\t\ttsRecord.addTuple(new LongDataPoint(measurementId, 0));\n+\t\t\t} else if (typeClass == Float.class || typeClass == float.class) {\n+\t\t\t\ttsRecord.addTuple(new FloatDataPoint(measurementId, 0));\n+\t\t\t} else if (typeClass == Double.class || typeClass == double.class) {\n+\t\t\t\ttsRecord.addTuple(new DoubleDataPoint(measurementId, 0));\n+\t\t\t} else if (typeClass == String.class) {\n+\t\t\t\ttsRecord.addTuple(new StringDataPoint(measurementId, null));\n+\t\t\t} else {\n+\t\t\t\tthrow new UnSupportedDataTypeException(typeClass.toString());\n+\t\t\t}\n+\t\t\tdataPointIndexMapping[i] = tsRecord.dataPointList.size() - 1;\n+\t\t}\n+\t\toutputTemplate = outputTemplateList.toArray(new TSRecord[0]);\n+\n+\t\treuse = new TSRecord[outputTemplate.length];\n+\t\tfor (int i = 0; i < outputTemplate.length; i++) {\n+\t\t\treuse[i] = new TSRecord(0, outputTemplate[i].deviceId);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void covertAndCollect(Row input, Collector<TSRecord> collector) throws IOException {\n+\t\tlong timestamp = (long) input.getField(timeIndex);\n+\t\tfor (TSRecord tsRecord : reuse) {\n+\t\t\ttsRecord.dataPointList.clear();\n+\t\t}\n+\t\tfor (int i = 0; i < input.getArity(); i++) {\n+\t\t\tif (i == timeIndex) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tTSRecord templateRecord = outputTemplate[tsRecordIndexMapping[i]];\n+\t\t\tDataPoint templateDataPoint = templateRecord.dataPointList.get(dataPointIndexMapping[i]);\n+\t\t\tObject o = input.getField(i);\n+\t\t\tif (o != null) {\n+\t\t\t\tClass typeClass = o.getClass();", "originalCommit": "858341e56f87f3e6d9ae94adab4da2c994c898d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8368256f4872f962f5941a61e5b50c2918d794a5", "url": "https://github.com/apache/iotdb/commit/8368256f4872f962f5941a61e5b50c2918d794a5", "message": "address comments", "committedDate": "2020-04-29T12:29:25Z", "type": "forcePushed"}, {"oid": "4b0e226837c744030e9dac868de85c76d4026e91", "url": "https://github.com/apache/iotdb/commit/4b0e226837c744030e9dac868de85c76d4026e91", "message": "address comments", "committedDate": "2020-05-04T06:22:08Z", "type": "forcePushed"}, {"oid": "53e770dd6114d766c5e667bdc4952dd453af1608", "url": "https://github.com/apache/iotdb/commit/53e770dd6114d766c5e667bdc4952dd453af1608", "message": "[IOTDB-560] add TSRecordOutputFormat to write TsFile via Flink DataSet/DataStream API.", "committedDate": "2020-05-04T06:22:08Z", "type": "commit"}, {"oid": "31a3388562139729e161edb493318f4f8aaa1f50", "url": "https://github.com/apache/iotdb/commit/31a3388562139729e161edb493318f4f8aaa1f50", "message": "address comments", "committedDate": "2020-05-04T06:22:08Z", "type": "commit"}, {"oid": "1a518147b1dce1683c62b5029a0f24421be6d608", "url": "https://github.com/apache/iotdb/commit/1a518147b1dce1683c62b5029a0f24421be6d608", "message": "address comments", "committedDate": "2020-05-04T06:22:08Z", "type": "commit"}, {"oid": "4b0e226837c744030e9dac868de85c76d4026e91", "url": "https://github.com/apache/iotdb/commit/4b0e226837c744030e9dac868de85c76d4026e91", "message": "address comments", "committedDate": "2020-05-04T06:22:08Z", "type": "commit"}]}