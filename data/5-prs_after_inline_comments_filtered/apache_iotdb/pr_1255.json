{"pr_number": 1255, "pr_title": "[IOTDB-700]Feature/iotdb 700 add openid", "pr_createdAt": "2020-05-24T13:08:21Z", "pr_url": "https://github.com/apache/iotdb/pull/1255", "timeline": [{"oid": "c2e146e76583caa298665d47fb9fe84836b3436f", "url": "https://github.com/apache/iotdb/commit/c2e146e76583caa298665d47fb9fe84836b3436f", "message": "IOTBD-700 Initial test Implementation of OpenID Connect / JWT.", "committedDate": "2020-05-24T09:54:47Z", "type": "commit"}, {"oid": "93290f6dea2aecf2526dd8977c519e8ab4a46365", "url": "https://github.com/apache/iotdb/commit/93290f6dea2aecf2526dd8977c519e8ab4a46365", "message": "IOTBD-700 Implemented OpenID Connect integration in IoTDB.\n\nFurther Changes:\n- UserNames can now contain colon (\":\") and \"-\"\n- New Argument in IoTDB Config", "committedDate": "2020-05-24T13:06:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Mjc3Nw==", "url": "https://github.com/apache/iotdb/pull/1255#discussion_r429652777", "bodyText": "Let's remove empty comment here : )", "author": "xingtanzjr", "createdAt": "2020-05-24T16:24:14Z", "path": "server/src/main/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizer.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.apache.iotdb.db.auth.authorizer;\n+\n+import com.nimbusds.jose.JOSEException;\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.oauth2.sdk.ParseException;\n+import com.nimbusds.oauth2.sdk.util.JSONObjectUtils;\n+import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.JwtException;\n+import io.jsonwebtoken.Jwts;\n+import net.minidev.json.JSONArray;\n+import net.minidev.json.JSONObject;\n+import org.apache.iotdb.db.auth.AuthException;\n+import org.apache.iotdb.db.auth.entity.Role;\n+import org.apache.iotdb.db.auth.entity.User;\n+import org.apache.iotdb.db.auth.role.LocalFileRoleManager;\n+import org.apache.iotdb.db.auth.user.LocalFileUserManager;\n+import org.apache.iotdb.db.conf.IoTDBConfig;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.*;\n+\n+/**\n+ * Uses an OpenID Connect provider for Authorization / Authentication.\n+ */\n+public class OpenIdAuthorizer extends BasicAuthorizer {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(OpenIdAuthorizer.class);\n+    public static final String IOTDB_ADMIN_ROLE_NAME = \"iotdb_admin\";\n+\n+    private static IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n+\n+    private RSAPublicKey providerKey;\n+\n+    /** Stores all claims to the respective user */\n+    private Map<String, Claims> loggedClaims = new HashMap<>();\n+\n+    public OpenIdAuthorizer() throws AuthException, ParseException, IOException, URISyntaxException {\n+        this(config.getOpenIdProviderUrl());\n+    }\n+\n+    OpenIdAuthorizer(JSONObject jwk) throws AuthException, URISyntaxException, ParseException, IOException {\n+        super(new LocalFileUserManager(config.getSystemDir() + File.separator + \"users\"),\n+                new LocalFileRoleManager(config.getSystemDir() + File.separator + \"roles\"));\n+        try {\n+            providerKey = RSAKey.parse(jwk).toRSAPublicKey();\n+        } catch (java.text.ParseException | JOSEException e) {\n+            throw new AuthException(\"Unable to get OIDC Provider Key from JWK \" +  jwk.toString(), e);\n+        }\n+        logger.info(\"Initialized with providerKey: {}\", providerKey);\n+    }\n+\n+    OpenIdAuthorizer(String providerUrl) throws AuthException, URISyntaxException, ParseException, IOException {\n+        this(getJWKfromProvider(providerUrl));\n+    }\n+\n+    private static JSONObject getJWKfromProvider(String providerUrl) throws URISyntaxException, IOException, ParseException, AuthException {\n+        if (providerUrl == null) {\n+            throw new IllegalArgumentException(\"OpenID Connect Provider URI must be given!\");\n+        }\n+\n+        //", "originalCommit": "93290f6dea2aecf2526dd8977c519e8ab4a46365", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcxMjY3Nw==", "url": "https://github.com/apache/iotdb/pull/1255#discussion_r429712677", "bodyText": "welcome back @xingtanzjr", "author": "jixuan1989", "createdAt": "2020-05-25T02:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Mjc3Nw=="}], "type": "inlineReview"}, {"oid": "5b462c8a6a1b901705ea2b04fa8750a22f7ebe60", "url": "https://github.com/apache/iotdb/commit/5b462c8a6a1b901705ea2b04fa8750a22f7ebe60", "message": "add OpenIdAuthorizer into configuation file", "committedDate": "2020-05-25T08:56:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxOTI2MQ==", "url": "https://github.com/apache/iotdb/pull/1255#discussion_r429819261", "bodyText": "the unused \"import\" should be removed..", "author": "jixuan1989", "createdAt": "2020-05-25T08:59:50Z", "path": "server/src/main/java/org/apache/iotdb/db/auth/authorizer/LocalFileAuthorizer.java", "diffHunk": "@@ -19,44 +19,32 @@\n package org.apache.iotdb.db.auth.authorizer;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import com.nimbusds.oauth2.sdk.ParseException;", "originalCommit": "5b462c8a6a1b901705ea2b04fa8750a22f7ebe60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9566993e410f171604185d3d5c0bdea1c67055f6", "url": "https://github.com/apache/iotdb/commit/9566993e410f171604185d3d5c0bdea1c67055f6", "message": "remove unused imports", "committedDate": "2020-05-25T09:17:49Z", "type": "commit"}, {"oid": "d823470f85297f05c4ccf0586534dcae49b04ec3", "url": "https://github.com/apache/iotdb/commit/d823470f85297f05c4ccf0586534dcae49b04ec3", "message": "fix error when replacing isAdmin() method", "committedDate": "2020-05-26T06:43:38Z", "type": "commit"}, {"oid": "0c8fa2f3bf4d7653794bddfaa879a550ffd1bfe1", "url": "https://github.com/apache/iotdb/commit/0c8fa2f3bf4d7653794bddfaa879a550ffd1bfe1", "message": "merge with master", "committedDate": "2020-05-26T07:42:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxODAyMg==", "url": "https://github.com/apache/iotdb/pull/1255#discussion_r430418022", "bodyText": "has to consider how to write the Test.\nEither use a Mock or use a stable OpenID server.", "author": "jixuan1989", "createdAt": "2020-05-26T13:37:40Z", "path": "server/src/test/java/org/apache/iotdb/db/auth/authorizer/OpenIdAuthorizerTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.apache.iotdb.db.auth.authorizer;\n+\n+import com.nimbusds.oauth2.sdk.ParseException;\n+import com.nimbusds.oauth2.sdk.util.JSONObjectUtils;\n+import org.apache.iotdb.db.auth.AuthException;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class OpenIdAuthorizerTest {\n+\n+    private static final String OPEN_ID_PUBLIC_JWK = \"{\\\"kty\\\":\\\"RSA\\\",\\\"x5t#S256\\\":\\\"TZFbbj6HsRU28HYvrcVnDs03KreV3DE24-Cxb9EPdS4\\\",\\\"e\\\":\\\"AQAB\\\",\\\"use\\\":\\\"sig\\\",\\\"x5t\\\":\\\"l_N2UlC_a624iu5eYFypnB1Wr20\\\",\\\"kid\\\":\\\"q1-Wm0ozQ5O0mQH8-SJap2ZcN4MmucWwnQWKYxZJ4ow\\\",\\\"x5c\\\":[\\\"MIICmTCCAYECBgFyRdXW2DANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVJb1REQjAeFw0yMDA1MjQwODM3MjJaFw0zMDA1MjQwODM5MDJaMBAxDjAMBgNVBAMMBUlvVERCMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAozDCZTVc9946VvhZ6E\\\\/OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT\\\\/P1b\\\\/zvQK52qA1xj6tBVg64xl3+LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg\\\\/FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw+bfghYp5097Gkl\\\\/Dp4sixVjIWLTh5l9diy4D\\\\/XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD+qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a\\\\/E6oL24QnP\\\\/j2e9coseDtGNywaADQdO8PaJadH\\\\/BV4aPCwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBX4rsWPIAwgSK6BEZmtEkh\\\\/FMfZtkvCFANpwkCX5Pph8yuk\\\\/8xrvx30yb4fIgqsxxQk6H+Q1qptm1cXs0tNu1yft+t+B2VuVjrWtkCkV0hAy6eZcdW411Pt523pHoOTxg6ehQd5DsvCIlsvWo83ePTKME+092vfs3irfQcRzc5xINdpopSvZlZuQ83tNEJY8gWvspQZr+uj8AP2x6w0BOrPJIiLlV+peNJuD3UgJKlSfOueKbKeM1kIVOG\\\\/a2AoEkBgqktnaIWzkXbk475\\\\/0xfGegsSZrxGR3\\\\/SA3jegS0sHFCY7\\\\/Ie\\\\/UvDgqMjd207oT64jxEGrd4mObxOx7aS0tp\\\"],\\\"alg\\\":\\\"RS256\\\",\\\"n\\\":\\\"ozDCZTVc9946VvhZ6E_OP8Yx6tJe0i9GR2Q9jR9S3jQoo0haT_P1b_zvQK52qA1xj6tBVg64xl3-LUxtCvh3HfAM5Q3PeSa0e2MkZaKCt335lKnKCSuaQGYoHULmg_FDOgCA0wJYOonGGJkgWmkzSAzdnHmBATosTl0XkBXHTdFOq5HaKw-bfghYp5097Gkl_Dp4sixVjIWLTh5l9diy4D_XKxadGumPCmTOS5E7y92jiHE64XFe1Q7v1qD-qKJKFvamAMIFPGBKegIajt42IcOIcIaJZnM1lBZApq1a_E6oL24QnP_j2e9coseDtGNywaADQdO8PaJadH_BV4aPCw\\\"}\";\n+\n+    @Test\n+    public void loginWithJWT() throws AuthException, ParseException, IOException, URISyntaxException {\n+        String jwt = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJxMS1XbTBvelE1TzBtUUg4LVNKYXAyWmNONE1tdWNXd25RV0tZeFpKNG93In0.eyJleHAiOjE1OTAzMTcxNzYsImlhdCI6MTU5MDMxNjg3NiwianRpIjoiY2MyNWQ3MDAtYjc5NC00OTA4LTg0OGUtOTRhNzYzNmM5YzQxIiwiaXNzIjoiaHR0cDovL2F1dGguZGVtby5wcmFnbWF0aWNpbmR1c3RyaWVzLmRlL2F1dGgvcmVhbG1zL0lvVERCIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6Ijg2YWRmNGIzLWE4ZTUtNDc1NC1iNWEwLTQ4OGI0OWY0M2VkMiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlvdGRiIiwic2Vzc2lvbl9zdGF0ZSI6Ijk0ZmI5NGZjLTg3YTMtNDg4Ny04M2Q3LWE5MmQ1MzMzOTMzMCIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImNsaWVudEhvc3QiOiIxOTIuMTY4LjE2OS4yMSIsImNsaWVudElkIjoiaW90ZGIiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1pb3RkYiIsImNsaWVudEFkZHJlc3MiOiIxOTIuMTY4LjE2OS4yMSJ9.GxQFltm1PrZzVL7rR6K-GpQINFLymjqAxxoDt_DGfQEMt61M6ebmx2oHiP_3G0HDSl7sbamajQbbRrfyTg--emBC2wfhdZ7v_7O0qWC60Yd8cWZ9qxwqwTFKYb8a0Z6_TeH9-vUmsy6kp2BfJZXq3mSy0My21VGUAXRmWTbghiM4RFoHKjAZVhsPHWelFmtLftYPdOGxv-7c9iUOVh_W-nOcCNRJpYY7BEjUYN24TsjvCEwWDQWD9E29LMYfA6LNeG0KdL9Jvqad4bc2FTJn9TaCnJMCiAJ7wEEiotqhXn70uEBWYxGXIVlm3vn3MDe3pTKA2TZy7U5xcrE7S8aGMg\";\n+\n+        OpenIdAuthorizer authorizer = new OpenIdAuthorizer(JSONObjectUtils.parse(OPEN_ID_PUBLIC_JWK));\n+        boolean login = authorizer.login(jwt, null);", "originalCommit": "0c8fa2f3bf4d7653794bddfaa879a550ffd1bfe1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5424f2a852772ea3f4617a8f4c933220ee487918", "url": "https://github.com/apache/iotdb/commit/5424f2a852772ea3f4617a8f4c933220ee487918", "message": "Fixed code smells / Sonar Issues.", "committedDate": "2020-05-26T15:48:21Z", "type": "commit"}, {"oid": "52a64c65422b05dbb8e4763ad2152d39b6efbb6a", "url": "https://github.com/apache/iotdb/commit/52a64c65422b05dbb8e4763ad2152d39b6efbb6a", "message": "IOTDB-700 Added some user documentation about OpenID Connect Auth.", "committedDate": "2020-05-26T15:55:51Z", "type": "commit"}, {"oid": "5ddb676be51bb244a6ac69fb2a4c1b74e44ecd06", "url": "https://github.com/apache/iotdb/commit/5ddb676be51bb244a6ac69fb2a4c1b74e44ecd06", "message": "IOTBD-700 OpenID Connect User are now prefixed with \"openid-\" not \"openid:\" as this leads to an issue on windows fs (is part of username).", "committedDate": "2020-05-27T07:38:55Z", "type": "commit"}, {"oid": "b6c191fec47fe0f7366d3c533e93faacd5e7f12c", "url": "https://github.com/apache/iotdb/commit/b6c191fec47fe0f7366d3c533e93faacd5e7f12c", "message": "add Chinese doc for OIDC", "committedDate": "2020-05-27T10:34:23Z", "type": "commit"}]}