{"pr_number": 947, "pr_title": "[IOTDB-560] add TsFileInputFormat for reading TsFiles on flink.", "pr_createdAt": "2020-03-27T02:03:51Z", "pr_url": "https://github.com/apache/iotdb/pull/947", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTM2Mw==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399629363", "bodyText": "Could you please add some Java DOC for the class?", "author": "sunjincheng121", "createdAt": "2020-03-28T06:59:30Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileBatchSource.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.DataSet;\n+import org.apache.flink.api.java.ExecutionEnvironment;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.types.Row;\n+import org.apache.iotdb.flink.tsfile.RowRowRecordParser;\n+import org.apache.iotdb.flink.tsfile.TsFileInputFormat;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.expression.QueryExpression;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class FlinkTsFileBatchSource {", "originalCommit": "e0cb73105c1972c7a2a80534ccf8a73f27c088fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTM3OA==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399629378", "bodyText": "Could you please add some Java DOC for the class?", "author": "sunjincheng121", "createdAt": "2020-03-28T06:59:39Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileStreamSource.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamUtils;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.types.Row;\n+import org.apache.iotdb.flink.tsfile.RowRowRecordParser;\n+import org.apache.iotdb.flink.tsfile.TsFileInputFormat;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.expression.QueryExpression;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class FlinkTsFileStreamSource {", "originalCommit": "e0cb73105c1972c7a2a80534ccf8a73f27c088fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTQyNQ==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399629425", "bodyText": "TsFlieUtils?", "author": "sunjincheng121", "createdAt": "2020-03-28T07:00:22Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/Utils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\n+import org.apache.iotdb.tsfile.write.TsFileWriter;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.record.datapoint.DataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.LongDataPoint;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+import java.io.File;\n+\n+public class Utils {", "originalCommit": "e0cb73105c1972c7a2a80534ccf8a73f27c088fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTc3OA==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399629778", "bodyText": "How are the responsibilities of Utils and TSFileConfigUtil different? Merge it into a utils or specify the name of Utils? And could you please add some Java DOC for the class?", "author": "sunjincheng121", "createdAt": "2020-03-28T07:05:39Z", "path": "flink-tsfile/src/main/java/org/apache/iotdb/flink/tsfile/util/TSFileConfigUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile.util;\n+\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n+public class TSFileConfigUtil {", "originalCommit": "e0cb73105c1972c7a2a80534ccf8a73f27c088fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc1OTc2Nw==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399759767", "bodyText": "The Utils is a helper class for the examples of the TsFile Flink connectors, and the TSFileConfigUtil is used to set the user config as global TSFileConfig while opening a FileInputSplit in Flink Runtime.", "author": "WeiZhong94", "createdAt": "2020-03-29T07:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTkzNA==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399629934", "bodyText": "I'm confused about your naming of utils and tools. How do you define a class as utils or tool?\nIf this class is a example, I think we can add a method in some utils class? What do you think?", "author": "sunjincheng121", "createdAt": "2020-03-28T07:08:02Z", "path": "flink-tsfile/src/test/java/org/apache/iotdb/flink/tool/TsFileWriteTool.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tool;\n+\n+import java.io.File;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.apache.iotdb.tsfile.write.TsFileWriter;\n+import org.apache.iotdb.tsfile.write.record.TSRecord;\n+import org.apache.iotdb.tsfile.write.record.datapoint.DataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.FloatDataPoint;\n+import org.apache.iotdb.tsfile.write.record.datapoint.IntDataPoint;\n+import org.apache.iotdb.tsfile.write.schema.MeasurementSchema;\n+\n+/**\n+ * An example of writing data to TsFile\n+ */\n+public class TsFileWriteTool {", "originalCommit": "e0cb73105c1972c7a2a80534ccf8a73f27c088fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2MDA5OA==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399760098", "bodyText": "This class is a util used to prepare the test TsFiles. I'll make its name and doc more clearly.", "author": "WeiZhong94", "createdAt": "2020-03-29T07:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyOTkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMDA0NA==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399630044", "bodyText": "This is a base interface +1 for this change. Just double check: Is there any concerns on this @jixuan1989 :)", "author": "sunjincheng121", "createdAt": "2020-03-28T07:09:26Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/expression/IExpression.java", "diffHunk": "@@ -18,7 +18,9 @@\n  */\n package org.apache.iotdb.tsfile.read.expression;\n \n-public interface IExpression{\n+import java.io.Serializable;\n+\n+public interface IExpression extends Serializable {", "originalCommit": "e0cb73105c1972c7a2a80534ccf8a73f27c088fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2ODY2MQ==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r403468661", "bodyText": "I have no more opinions.", "author": "jixuan1989", "createdAt": "2020-04-04T13:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMDA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NzE4MQ==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r399787181", "bodyText": "Hi, this may be hard to maintain... how about let the user directly use TSFileConfig as follows if they want to change some configuration:\nTSFileConfig config = TsFileDescriptor.getInstance().getConfig();\nconfig.setXXX();", "author": "qiaojialin", "createdAt": "2020-03-29T11:57:21Z", "path": "flink-tsfile/src/main/java/org/apache/iotdb/flink/tsfile/util/TSFileConfigUtil.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.flink.tsfile.util;\n+\n+import org.apache.iotdb.tsfile.common.conf.TSFileConfig;\n+import org.apache.iotdb.tsfile.common.conf.TSFileDescriptor;\n+\n+/**\n+ * Utils of setting global TSFileConfig.\n+ */\n+public class TSFileConfigUtil {\n+\t\n+\tpublic static void setGlobalTSFileConfig(TSFileConfig config) {\n+\t\tTSFileConfig globalConfig = TSFileDescriptor.getInstance().getConfig();", "originalCommit": "6eb077b9631f1c425adb119afce7aeb6d8d25a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNTQ0NQ==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r401335445", "bodyText": "Yes this seems not a good solution.. But users could not set the TSFileConfig of TsFile flink connector directly because the connector is running on flink cluster, which may be on other machines. So in our design the connector object (i.e. TsFileInputFormat) could store a TSFileConfig object, which will be serialized and upload to remote flink cluster and set as the global TSFileConfig when the connector is initializing on the remote flink cluster.\nWe certainly have other solutions, e.g. expose a setter on TsFileDescriptor or just using reflection. I think this needs to be discussed so keep the original implementation when creating this PR.", "author": "WeiZhong94", "createdAt": "2020-04-01T03:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NzEwMw==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r405247103", "bodyText": "I know, thank you!", "author": "qiaojialin", "createdAt": "2020-04-08T04:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NzE4MQ=="}], "type": "inlineReview"}, {"oid": "6f1e7c7e1d4ccbbc5f42d704ce55a0c78ff2fc83", "url": "https://github.com/apache/iotdb/commit/6f1e7c7e1d4ccbbc5f42d704ce55a0c78ff2fc83", "message": "address comments and push to test travis changes.", "committedDate": "2020-04-01T09:08:47Z", "type": "forcePushed"}, {"oid": "ff003821d1c73bb21e604b658396e92dff855667", "url": "https://github.com/apache/iotdb/commit/ff003821d1c73bb21e604b658396e92dff855667", "message": "add TsFileInputFormat for reading TsFiles in flink.", "committedDate": "2020-04-08T01:48:01Z", "type": "commit"}, {"oid": "b19f9206af809cc723310fe5744b7b262365c02a", "url": "https://github.com/apache/iotdb/commit/b19f9206af809cc723310fe5744b7b262365c02a", "message": "try to fix windows test", "committedDate": "2020-04-08T01:48:01Z", "type": "commit"}, {"oid": "41faebc2872a79d454b2e9d2a59b9ab0aa4cad76", "url": "https://github.com/apache/iotdb/commit/41faebc2872a79d454b2e9d2a59b9ab0aa4cad76", "message": "add docs and rename util classes.", "committedDate": "2020-04-08T01:48:01Z", "type": "commit"}, {"oid": "612c5618cf9d61076edf1a8dd10f279ac31fcd49", "url": "https://github.com/apache/iotdb/commit/612c5618cf9d61076edf1a8dd10f279ac31fcd49", "message": "fix compile error caused by rebase", "committedDate": "2020-04-08T01:51:15Z", "type": "forcePushed"}, {"oid": "fc7f4f87220b18a15902cea8bb512d2288608a1c", "url": "https://github.com/apache/iotdb/commit/fc7f4f87220b18a15902cea8bb512d2288608a1c", "message": "address comments and push to test travis changes.", "committedDate": "2020-04-08T01:51:15Z", "type": "commit"}, {"oid": "612c5618cf9d61076edf1a8dd10f279ac31fcd49", "url": "https://github.com/apache/iotdb/commit/612c5618cf9d61076edf1a8dd10f279ac31fcd49", "message": "fix compile error caused by rebase", "committedDate": "2020-04-08T01:51:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NjA4Ng==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r405246086", "bodyText": "Hi, I wonder if the QueryExpression could be inferred automatically based on the RowTypeInfo in the InputFormat? If so, users do not have to maintain this and ensure the consistency of queried paths and RowTypeInfo. We also don't have to check whether they match.", "author": "qiaojialin", "createdAt": "2020-04-08T04:05:48Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkTsFileStreamSource.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.streaming.api.datastream.DataStream;\n+import org.apache.flink.streaming.api.datastream.DataStreamUtils;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.types.Row;\n+import org.apache.iotdb.flink.tsfile.RowRowRecordParser;\n+import org.apache.iotdb.flink.tsfile.TsFileInputFormat;\n+import org.apache.iotdb.tsfile.common.constant.QueryConstant;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.expression.QueryExpression;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The example of reading TsFile via Flink DataStream API.\n+ */\n+public class FlinkTsFileStreamSource {\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tString path = \"test.tsfile\";\n+\t\tTsFlieUtils.writeTsFile(path);\n+\t\tnew File(path).deleteOnExit();\n+\t\tString[] filedNames = {\n+\t\t\tQueryConstant.RESERVED_TIME,\n+\t\t\t\"device_1.sensor_1\",\n+\t\t\t\"device_1.sensor_2\",\n+\t\t\t\"device_1.sensor_3\",\n+\t\t\t\"device_2.sensor_1\",\n+\t\t\t\"device_2.sensor_2\",\n+\t\t\t\"device_2.sensor_3\"\n+\t\t};\n+\t\tTypeInformation[] typeInformations = new TypeInformation[] {\n+\t\t\tTypes.LONG,\n+\t\t\tTypes.LONG,\n+\t\t\tTypes.LONG,\n+\t\t\tTypes.LONG,\n+\t\t\tTypes.LONG,\n+\t\t\tTypes.LONG,\n+\t\t\tTypes.LONG\n+\t\t};\n+\t\tList<Path> paths = Arrays.stream(filedNames)\n+\t\t\t.filter(s -> !s.equals(QueryConstant.RESERVED_TIME))\n+\t\t\t.map(Path::new)\n+\t\t\t.collect(Collectors.toList());\n+\t\tRowTypeInfo rowTypeInfo = new RowTypeInfo(typeInformations, filedNames);\n+\t\tQueryExpression queryExpression = QueryExpression.create(paths, null);", "originalCommit": "612c5618cf9d61076edf1a8dd10f279ac31fcd49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4OTU2Mw==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r405289563", "bodyText": "If TsFileInputFormat only accepts the RowRowRecordParser(default implementation of RowRecordParser which parses the RowRecord to Row) then the answer is \"yes\". But the TsFileInputFormat is designed to accept any RowRecordParser, which may be implemented by users or 3rd parities. If the output type of RowRecordParser is not a Row, this approach may not work.", "author": "WeiZhong94", "createdAt": "2020-04-08T06:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NjA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4MzcyOQ==", "url": "https://github.com/apache/iotdb/pull/947#discussion_r405483729", "bodyText": "I see, thanks!", "author": "qiaojialin", "createdAt": "2020-04-08T12:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0NjA4Ng=="}], "type": "inlineReview"}, {"oid": "729cd433353c50bf8808b82e84af45374dce3e96", "url": "https://github.com/apache/iotdb/commit/729cd433353c50bf8808b82e84af45374dce3e96", "message": "fix compile error caused by rebase and add a new test to help maintain the TSFileConfigUtil.", "committedDate": "2020-04-08T06:39:25Z", "type": "commit"}]}