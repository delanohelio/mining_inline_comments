{"pr_number": 1914, "pr_title": "[IOTDB-937] change jdbc into session and don't need to create metadata", "pr_createdAt": "2020-11-02T07:58:40Z", "pr_url": "https://github.com/apache/iotdb/pull/1914", "timeline": [{"oid": "a6c562d05efb115559000c41ad6bed7bd15e6458", "url": "https://github.com/apache/iotdb/commit/a6c562d05efb115559000c41ad6bed7bd15e6458", "message": "change jdbc to csv", "committedDate": "2020-11-01T15:11:34Z", "type": "commit"}, {"oid": "9396db716841f1b89a2277cc91f72b7fe6b8229e", "url": "https://github.com/apache/iotdb/commit/9396db716841f1b89a2277cc91f72b7fe6b8229e", "message": "change session to jdbc", "committedDate": "2020-11-02T05:38:09Z", "type": "commit"}, {"oid": "d81c2131ed84b999ac3e63c83f4f784bbd848891", "url": "https://github.com/apache/iotdb/commit/d81c2131ed84b999ac3e63c83f4f784bbd848891", "message": "insert", "committedDate": "2020-11-02T06:22:56Z", "type": "commit"}, {"oid": "6f9e44b9fe6a1000904cbc171d464dfad9ddf10c", "url": "https://github.com/apache/iotdb/commit/6f9e44b9fe6a1000904cbc171d464dfad9ddf10c", "message": "change doc", "committedDate": "2020-11-02T07:53:41Z", "type": "commit"}, {"oid": "14139f8495d93e56be57350851342d463e5dd9fa", "url": "https://github.com/apache/iotdb/commit/14139f8495d93e56be57350851342d463e5dd9fa", "message": "import null and export null", "committedDate": "2020-11-03T08:14:08Z", "type": "commit"}, {"oid": "ad3a04504c4c3e5377e12efcdf7ffc6585dc0982", "url": "https://github.com/apache/iotdb/commit/ad3a04504c4c3e5377e12efcdf7ffc6585dc0982", "message": "Merge branch 'master' into change_jdbc_to_session_in_csv", "committedDate": "2020-11-04T03:23:18Z", "type": "commit"}, {"oid": "33d4ed184ea942555dd13b9c0476e42c9c069e7d", "url": "https://github.com/apache/iotdb/commit/33d4ed184ea942555dd13b9c0476e42c9c069e7d", "message": "Merge branch 'master' into change_jdbc_to_session_in_csv", "committedDate": "2020-11-04T03:55:30Z", "type": "commit"}, {"oid": "95c471a4a26acc2071eff32f45b0959abfc9af55", "url": "https://github.com/apache/iotdb/commit/95c471a4a26acc2071eff32f45b0959abfc9af55", "message": "Update AbstractCli.java", "committedDate": "2020-11-04T04:00:31Z", "type": "commit"}, {"oid": "26ef910c35dd391facc84cd7b0b58bf9386492eb", "url": "https://github.com/apache/iotdb/commit/26ef910c35dd391facc84cd7b0b58bf9386492eb", "message": "fix bug", "committedDate": "2020-11-04T05:56:04Z", "type": "commit"}, {"oid": "1a4b59dd070c25926062dbb0aa99419fd14e4bf9", "url": "https://github.com/apache/iotdb/commit/1a4b59dd070c25926062dbb0aa99419fd14e4bf9", "message": "fix according to sonnar", "committedDate": "2020-11-04T06:01:40Z", "type": "commit"}, {"oid": "7e2a4fdb6b569b40ba3269a19b57aaacdaeacf0e", "url": "https://github.com/apache/iotdb/commit/7e2a4fdb6b569b40ba3269a19b57aaacdaeacf0e", "message": "fix bug", "committedDate": "2020-11-04T07:08:01Z", "type": "commit"}, {"oid": "34e58d96c8081c824db75b244c8188d4c289813f", "url": "https://github.com/apache/iotdb/commit/34e58d96c8081c824db75b244c8188d4c289813f", "message": "Update AbstractScript.java", "committedDate": "2020-11-04T08:29:38Z", "type": "commit"}, {"oid": "e34f69b3aacfb7455778b2118280a12868de6bf1", "url": "https://github.com/apache/iotdb/commit/e34f69b3aacfb7455778b2118280a12868de6bf1", "message": "Revert \"Update AbstractScript.java\"\n\nThis reverts commit 34e58d96c8081c824db75b244c8188d4c289813f.", "committedDate": "2020-11-04T09:19:15Z", "type": "commit"}, {"oid": "417d01388993195fb061cdebffcfb6883c907646", "url": "https://github.com/apache/iotdb/commit/417d01388993195fb061cdebffcfb6883c907646", "message": "try to fix travis", "committedDate": "2020-11-04T09:39:11Z", "type": "commit"}, {"oid": "c934dde5dd74fd06e52e6ac0f2b80861f2d7ccc8", "url": "https://github.com/apache/iotdb/commit/c934dde5dd74fd06e52e6ac0f2b80861f2d7ccc8", "message": "try to fix travis", "committedDate": "2020-11-04T11:00:51Z", "type": "commit"}, {"oid": "f720fa107f660855596af1dbba4b866d9e36e80f", "url": "https://github.com/apache/iotdb/commit/f720fa107f660855596af1dbba4b866d9e36e80f", "message": "update readme", "committedDate": "2020-11-05T03:52:12Z", "type": "commit"}, {"oid": "8b38c0c631cc9f6c33b36c059a4b314e808777fd", "url": "https://github.com/apache/iotdb/commit/8b38c0c631cc9f6c33b36c059a4b314e808777fd", "message": "change split", "committedDate": "2020-11-05T08:45:43Z", "type": "commit"}, {"oid": "fec5ab376d5ee3ee4291788e0d2b0a6f4084df55", "url": "https://github.com/apache/iotdb/commit/fec5ab376d5ee3ee4291788e0d2b0a6f4084df55", "message": "update readme", "committedDate": "2020-11-05T09:28:08Z", "type": "commit"}, {"oid": "53ba547df187a95a388a5f729a34d65e809364bd", "url": "https://github.com/apache/iotdb/commit/53ba547df187a95a388a5f729a34d65e809364bd", "message": "fix according to sonnar", "committedDate": "2020-11-06T07:18:35Z", "type": "commit"}, {"oid": "6052e64c974dd338358b037d87788900aca42457", "url": "https://github.com/apache/iotdb/commit/6052e64c974dd338358b037d87788900aca42457", "message": "fix according to sonnar", "committedDate": "2020-11-06T08:54:21Z", "type": "commit"}, {"oid": "49ba8ca5b9f72669798d31bd5d265de52c75d6c8", "url": "https://github.com/apache/iotdb/commit/49ba8ca5b9f72669798d31bd5d265de52c75d6c8", "message": "Update README.md\n\nCo-authored-by: Steve Yurong Su <steveyurongsu@outlook.com>", "committedDate": "2020-11-09T01:00:04Z", "type": "commit"}, {"oid": "9b736d1c5a32cefe21a9467a5a04897bb1f461cc", "url": "https://github.com/apache/iotdb/commit/9b736d1c5a32cefe21a9467a5a04897bb1f461cc", "message": "Update README.md\n\nCo-authored-by: Steve Yurong Su <steveyurongsu@outlook.com>", "committedDate": "2020-11-09T01:00:13Z", "type": "commit"}, {"oid": "d852a664b27654b25a760fcf4de06798de64d982", "url": "https://github.com/apache/iotdb/commit/d852a664b27654b25a760fcf4de06798de64d982", "message": "Update README_ZH.md\n\nCo-authored-by: Steve Yurong Su <steveyurongsu@outlook.com>", "committedDate": "2020-11-09T01:05:56Z", "type": "commit"}, {"oid": "c075d9acfdbffa04fd33e71ee83e6b51da38dd68", "url": "https://github.com/apache/iotdb/commit/c075d9acfdbffa04fd33e71ee83e6b51da38dd68", "message": "Update README.md", "committedDate": "2020-11-09T02:27:05Z", "type": "commit"}, {"oid": "6d9a2e211d2da1c6074ca1155485bf6cd1ff5818", "url": "https://github.com/apache/iotdb/commit/6d9a2e211d2da1c6074ca1155485bf6cd1ff5818", "message": "Merge branch 'master' into change_jdbc_to_session_in_csv", "committedDate": "2020-11-09T06:48:21Z", "type": "commit"}, {"oid": "a46621c3038337c2cff10bcc34a00f46d8ab10e7", "url": "https://github.com/apache/iotdb/commit/a46621c3038337c2cff10bcc34a00f46d8ab10e7", "message": "Merge branch 'master' into change_jdbc_to_session_in_csv", "committedDate": "2020-11-10T05:11:05Z", "type": "commit"}, {"oid": "abb15f7d005a722fe45e038bf4dd520f8b903a90", "url": "https://github.com/apache/iotdb/commit/abb15f7d005a722fe45e038bf4dd520f8b903a90", "message": "Update README_ZH.md", "committedDate": "2020-11-10T05:26:29Z", "type": "commit"}, {"oid": "6d66566aea568448d40a54949e6a1f1bf8a54a3c", "url": "https://github.com/apache/iotdb/commit/6d66566aea568448d40a54949e6a1f1bf8a54a3c", "message": "fix accoding to sonnar", "committedDate": "2020-11-10T05:49:41Z", "type": "commit"}, {"oid": "1cb14938571cd92bd8a97dcbd009ba1c6caec719", "url": "https://github.com/apache/iotdb/commit/1cb14938571cd92bd8a97dcbd009ba1c6caec719", "message": "add test", "committedDate": "2020-11-16T05:20:05Z", "type": "commit"}, {"oid": "d516d0b4aaf3bebb94a5d6933b2f3dee5a18a763", "url": "https://github.com/apache/iotdb/commit/d516d0b4aaf3bebb94a5d6933b2f3dee5a18a763", "message": "Merge branch 'master' into change_jdbc_to_session_in_csv", "committedDate": "2020-11-16T05:20:30Z", "type": "commit"}, {"oid": "9bd36bb0f836df63255ba65b0d6e2622041739cd", "url": "https://github.com/apache/iotdb/commit/9bd36bb0f836df63255ba65b0d6e2622041739cd", "message": "fix export test in windows.", "committedDate": "2020-11-16T05:32:16Z", "type": "commit"}, {"oid": "74b229ccba7633d887ebe01cde11f0946534879c", "url": "https://github.com/apache/iotdb/commit/74b229ccba7633d887ebe01cde11f0946534879c", "message": "Update ExportCsvTestIT.java", "committedDate": "2020-11-16T05:55:19Z", "type": "commit"}, {"oid": "40b45a0fa86717ee53aac4e72e01996c34825fc5", "url": "https://github.com/apache/iotdb/commit/40b45a0fa86717ee53aac4e72e01996c34825fc5", "message": "Merge branch 'change_jdbc_to_session_in_csv' of https://github.com/apache/iotdb into change_jdbc_to_session_in_csv", "committedDate": "2020-11-16T06:08:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxNzIxMg==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r525217212", "bodyText": "Please indicate in the document that \"\" is also a special character...", "author": "SteveYurongSu", "createdAt": "2020-11-17T14:54:46Z", "path": "cli/src/test/java/org/apache/iotdb/tool/CsvLineSplitTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.tool;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class CsvLineSplitTest {\n+\n+  @Test\n+  public void testSplit() {\n+    Assert.assertArrayEquals(new String[]{\"\", \"a\", \"b\", \"c\", \"\\\\\\\"\"}, ImportCsv.splitCsvLine(\",a,b,c,\\\"\\\\\\\"\\\"\"));", "originalCommit": "40b45a0fa86717ee53aac4e72e01996c34825fc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0ODQxNA==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r525648414", "bodyText": "update", "author": "Genius-pig", "createdAt": "2020-11-18T02:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxNzIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzNjk0Nw==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r525236947", "bodyText": "I think there may be a problem when importing millions of records at a time...", "author": "SteveYurongSu", "createdAt": "2020-11-17T15:18:17Z", "path": "cli/src/main/java/org/apache/iotdb/tool/ImportCsv.java", "diffHunk": "@@ -119,296 +88,78 @@ private static Options createOptions() {\n   /**\n    * Data from csv To tsfile.\n    */\n-  private static void loadDataFromCSV(File file, int index) {\n-    statement = null;\n+  private static void loadDataFromCSV(File file) {\n     int fileLine;\n     try {\n       fileLine = getFileLineCount(file);\n     } catch (IOException e) {\n       System.out.println(\"Failed to import file: \" + file.getName());\n       return;\n     }\n-    File errorFile = new File(errorInsertInfo + index);\n-    if (!errorFile.exists()) {\n-      try {\n-        errorFile.createNewFile();\n-      } catch (IOException e) {\n-        System.out.println(\"Cannot create a errorFile because: \" + e.getMessage());\n-        return;\n-      }\n-    }\n     System.out.println(\"Start to import data from: \" + file.getName());\n-    errorFlag = true;\n     try(BufferedReader br = new BufferedReader(new FileReader(file));\n-        BufferedWriter bw = new BufferedWriter(new FileWriter(errorFile));\n         ProgressBar pb = new ProgressBar(\"Import from: \" + file.getName(), fileLine)) {\n       pb.setExtraMessage(\"Importing...\");\n       String header = br.readLine();\n-\n-      bw.write(\"From \" + file.getAbsolutePath());\n-      bw.newLine();\n-      bw.newLine();\n-      bw.write(header);\n-      bw.newLine();\n-      bw.newLine();\n-\n-      // storage csv table head info\n-      Map<String, ArrayList<Integer>> deviceToColumn = new HashMap<>();\n-      // storage csv table head info\n-      List<String> colInfo = new ArrayList<>();\n-      // storage csv device sensor info, corresponding csv table head\n-      List<String> headInfo = new ArrayList<>();\n-\n-      String[] strHeadInfo = header.split(\",\");\n-      if (strHeadInfo.length <= 1) {\n+      String[] cols = splitCsvLine(header);\n+      if (cols.length <= 1) {\n         System.out.println(\"The CSV file \"+ file.getName() +\" illegal, please check first line\");\n         return;\n       }\n \n-      long startTime = System.currentTimeMillis();\n-      Map<String, String> timeseriesDataType = new HashMap<>();\n+      List<String> devices = new ArrayList<>();\n+      List<Long> times = new ArrayList<>();\n+      List<List<String>> measurementsList = new ArrayList<>();\n+      List<List<String>> valuesList = new ArrayList<>();\n+      Map<String, Map<String, Integer>> devicesToMeasurementsAndPositions = new HashMap<>();\n \n-      boolean success = queryDatabaseMeta(strHeadInfo, file, bw, timeseriesDataType, headInfo,\n-          deviceToColumn, colInfo);\n-      if (!success) {\n-        errorFlag = false;\n-        return;\n+      for(int i = 1; i < cols.length; i++) {\n+        splitColToDeviceAndMeasurement(cols[i], devicesToMeasurementsAndPositions, i);\n       }\n \n-      statement = connection.createStatement();\n-\n-\n-      List<String> tmp = new ArrayList<>();\n-      success = readAndGenSqls(br, timeseriesDataType, deviceToColumn, colInfo, headInfo,\n-          bw, tmp, pb);\n-      if (!success) {\n-        return;\n+      String line;\n+      while((line = br.readLine()) != null) {\n+        cols = splitCsvLine(line);\n+        for(Entry<String, Map<String, Integer>> deviceToMeasurementsAndPositions: devicesToMeasurementsAndPositions.entrySet()) {\n+          devices.add(deviceToMeasurementsAndPositions.getKey());\n+          times.add(Long.parseLong(cols[0]));\n+          Map<String, Integer> measurementsAndPositions = deviceToMeasurementsAndPositions.getValue();\n+          List<String> measurements = new ArrayList<>();\n+          List<String> values = new ArrayList<>();\n+          for(Entry<String, Integer> measurementAndPosition : measurementsAndPositions.entrySet()) {\n+            measurements.add(measurementAndPosition.getKey());\n+            if(cols[measurementAndPosition.getValue()].equals(\"\") && cols[measurementAndPosition.getValue()].equals(\"null\")) {\n+              values.add(null);\n+            } else {\n+              values.add(cols[measurementAndPosition.getValue()]);\n+            }\n+          }\n+          measurementsList.add(measurements);\n+          valuesList.add(values);\n+        }\n       }\n-\n-      executeSqls(bw, tmp, startTime, file);\n+      session.insertRecords(devices, times, measurementsList, valuesList);", "originalCommit": "40b45a0fa86717ee53aac4e72e01996c34825fc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a16ab54431dc1809950144f79098fef1e7e13186", "url": "https://github.com/apache/iotdb/commit/a16ab54431dc1809950144f79098fef1e7e13186", "message": "Update README.md\n\nCo-authored-by: Steve Yurong Su <steveyurongsu@outlook.com>", "committedDate": "2020-11-18T01:57:49Z", "type": "commit"}, {"oid": "8d43b33796e1398e2e5f986a05fad3f0f300068e", "url": "https://github.com/apache/iotdb/commit/8d43b33796e1398e2e5f986a05fad3f0f300068e", "message": "Update README_ZH.md\n\nCo-authored-by: Steve Yurong Su <steveyurongsu@outlook.com>", "committedDate": "2020-11-18T01:58:04Z", "type": "commit"}, {"oid": "68b425812cb84e565618a5c6f6f32253f404e445", "url": "https://github.com/apache/iotdb/commit/68b425812cb84e565618a5c6f6f32253f404e445", "message": "add doc", "committedDate": "2020-11-18T02:08:30Z", "type": "commit"}, {"oid": "e66e3925806fc0b89ceec8250281f2a4831bb83c", "url": "https://github.com/apache/iotdb/commit/e66e3925806fc0b89ceec8250281f2a4831bb83c", "message": "add test according to review", "committedDate": "2020-11-18T06:07:03Z", "type": "commit"}, {"oid": "003eab1d53985c48d7de04401c2d42c96fdab48c", "url": "https://github.com/apache/iotdb/commit/003eab1d53985c48d7de04401c2d42c96fdab48c", "message": "update test.", "committedDate": "2020-11-18T10:04:18Z", "type": "commit"}, {"oid": "756ee0d3c9cac348680c167f4da64c9fe417a2f3", "url": "https://github.com/apache/iotdb/commit/756ee0d3c9cac348680c167f4da64c9fe417a2f3", "message": "update doc", "committedDate": "2020-11-19T02:59:05Z", "type": "commit"}, {"oid": "d14501338224cf02f1bd4ecec430d6ab91b830fe", "url": "https://github.com/apache/iotdb/commit/d14501338224cf02f1bd4ecec430d6ab91b830fe", "message": "optimize insert", "committedDate": "2020-11-19T10:15:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NzEzNg==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526757136", "bodyText": "Tests about '?", "author": "SteveYurongSu", "createdAt": "2020-11-19T10:35:50Z", "path": "cross-tests/src/test/java/org/apache/iotdb/cross/tests/tools/importCsv/ExportCsvTestIT.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.cross.tests.tools.importCsv;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.iotdb.db.utils.EnvironmentUtils;\n+import org.apache.iotdb.rpc.IoTDBConnectionException;\n+import org.apache.iotdb.rpc.StatementExecutionException;\n+import org.apache.iotdb.session.Session;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExportCsvTestIT extends AbstractScript{\n+\n+  private final String SQL_FILE = \"target\" + File.separator + \"sql.txt\";\n+\n+  private final String EXPORT_FILE = \"target\" + File.separator + \"dump0.csv\";\n+\n+  @Before\n+  public void setUp() {\n+    EnvironmentUtils.closeStatMonitor();\n+    EnvironmentUtils.envSetUp();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    EnvironmentUtils.cleanEnv();\n+  }\n+\n+  @Override\n+  protected void testOnWindows() throws IOException {\n+    final String[] output = {\n+            \"------------------------------------------\",\n+            \"Starting IoTDB Client Export Script\",\n+            \"------------------------------------------\",\n+            \"Start to export data from sql statement\",\n+            \"successfully\",\n+    };\n+    String dir = getCliPath();\n+    ProcessBuilder builder = new ProcessBuilder(\"cmd.exe\", \"/c\",\n+        dir + File.separator + \"tools\" + File.separator + \"export-csv.bat\",\n+        \"-h\", \"127.0.0.1\", \"-p\", \"6667\", \"-u\", \"root\", \"-pw\", \"root\", \"-td\", \"./target\",\n+        \"-s\", SQL_FILE);\n+    testOutput(builder, output);\n+  }\n+\n+  @Override\n+  protected void testOnUnix() throws IOException {\n+    final String[] output = {\n+        \"------------------------------------------\",\n+        \"Starting IoTDB Client Export Script\",\n+        \"------------------------------------------\",\n+        \"Start to export data from sql statement\",\n+        \"successfully\",\n+    };\n+    String dir = getCliPath();\n+    ProcessBuilder builder = new ProcessBuilder(\"sh\",\n+        dir + File.separator + \"tools\" + File.separator + \"export-csv.sh\",\n+        \"-h\", \"127.0.0.1\", \"-p\", \"6667\", \"-u\", \"root\", \"-pw\", \"root\", \"-td\", \"./target\",\n+        \"-s\", SQL_FILE);\n+    testOutput(builder, output);\n+  }\n+\n+  private boolean generateSQLFile(String[] sql) {\n+    BufferedWriter writer;\n+    try {\n+      writer = new BufferedWriter(new FileWriter(SQL_FILE));\n+      writer.write(\"\");\n+      for (String s : sql) {\n+        writer.write(s);\n+        writer.newLine();\n+      }\n+      writer.flush();\n+      writer.close();\n+      return true;\n+    } catch (IOException e) {\n+      System.out.println(\"failed to create test csv\");\n+    }\n+    return false;\n+  }\n+\n+  @Test\n+  public void testRawDataQuery() throws IOException, StatementExecutionException, IoTDBConnectionException {\n+    final String[] expectCsv = new String[]{\"Time,root.sg1.d1.s1,root.sg1.d1.s2\",\n+        \"1.0,'abc\\\",aa'\"};\n+    prepareData();\n+    String os = System.getProperty(\"os.name\").toLowerCase();\n+    String[] sql = {\"select * from root\"};\n+    assertTrue(generateSQLFile(sql));\n+    if (os.startsWith(\"windows\")) {\n+      testOnWindows();\n+    } else {\n+      testOnUnix();\n+    }\n+    FileReader fileReader = new FileReader(EXPORT_FILE);\n+    BufferedReader br = new BufferedReader(fileReader);\n+    String line = br.readLine();\n+    int i = 0;\n+    while(line != null) {\n+      if(i == 0) {\n+        assertEquals(expectCsv[i], line);\n+      } else {\n+        String lineWithoutTime = line.substring(line.indexOf(',') + 1);\n+        assertEquals(expectCsv[i], lineWithoutTime);\n+      }\n+      i++;\n+      line = br.readLine();\n+    }\n+    File file = new File(EXPORT_FILE);\n+    if (file.exists()) {\n+      file.delete();\n+    }\n+  }\n+\n+  @Test\n+  public void testAggregationQuery() throws StatementExecutionException, IoTDBConnectionException, IOException {\n+    final String[] expectCsv = new String[]{\"Time,count(root.sg1.d1.s1),count(root.sg1.d1.s2)\",\n+            \"1,1\"};\n+    prepareData();\n+    String os = System.getProperty(\"os.name\").toLowerCase();\n+    String[] sql = {\"select count(*) from root\"};\n+    generateSQLFile(sql);\n+    if (os.startsWith(\"windows\")) {\n+      testOnWindows();\n+    } else {\n+      testOnUnix();\n+    }\n+    FileReader fileReader = new FileReader(EXPORT_FILE);\n+    BufferedReader br = new BufferedReader(fileReader);\n+    String line = br.readLine();\n+    int i = 0;\n+    while(line != null) {\n+      if(i == 0) {\n+        assertEquals(expectCsv[i], line);\n+      } else {\n+        String lineWithoutTime = line.substring(line.indexOf(',') + 1);\n+        assertEquals(expectCsv[i], lineWithoutTime);\n+      }\n+      i++;\n+      line = br.readLine();\n+    }\n+    File file = new File(EXPORT_FILE);\n+    if (file.exists()) {\n+      file.delete();\n+    }\n+  }\n+\n+  private void prepareData() throws IoTDBConnectionException, StatementExecutionException {\n+    Session session = new Session(\"127.0.0.1\", 6667, \"root\", \"root\");\n+    session.open();\n+\n+    String deviceId = \"root.sg1.d1\";\n+    List<String> measurements = new ArrayList<>();\n+    measurements.add(\"s1\");\n+    measurements.add(\"s2\");\n+\n+    List<String> values = new ArrayList<>();\n+    values.add(\"1.0\");\n+    values.add(\"abc\\\",aa\");", "originalCommit": "756ee0d3c9cac348680c167f4da64c9fe417a2f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzNjEyNw==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526936127", "bodyText": "add", "author": "Genius-pig", "createdAt": "2020-11-19T14:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NzEzNg=="}], "type": "inlineReview"}, {"oid": "c2a25ad3780895e000e9d4feab50caee33f0ccd5", "url": "https://github.com/apache/iotdb/commit/c2a25ad3780895e000e9d4feab50caee33f0ccd5", "message": "optimize insert", "committedDate": "2020-11-19T10:47:57Z", "type": "commit"}, {"oid": "fac00b7abb398a1f9b4de8dd91876cbbbbda4b1b", "url": "https://github.com/apache/iotdb/commit/fac00b7abb398a1f9b4de8dd91876cbbbbda4b1b", "message": "update doc", "committedDate": "2020-11-19T11:17:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg0OTQyMQ==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526849421", "bodyText": "Note that location may equals to 0, which will cause Exception...", "author": "SteveYurongSu", "createdAt": "2020-11-19T12:40:15Z", "path": "cli/src/main/java/org/apache/iotdb/tool/ExportCsv.java", "diffHunk": "@@ -263,112 +228,123 @@ private static void dumpResult(String sql, int index)\n         return;\n       }\n     } catch (IOException e) {\n-      System.out.println(\"Cannot create dump file \" + path + \"because: \" + e.getMessage());\n+      System.out.println(\"Cannot create dump file \" + path + \" \" + \"because: \" + e.getMessage());\n       return;\n     }\n     System.out.println(\"Start to export data from sql statement: \" + sql);\n-    try (Statement statement = connection.createStatement();\n-        ResultSet rs = statement.executeQuery(sql);\n-        BufferedWriter bw = new BufferedWriter(new FileWriter(tf))) {\n-      ResultSetMetaData metadata = rs.getMetaData();\n+    try (BufferedWriter bw = new BufferedWriter(new FileWriter(tf))) {\n+      SessionDataSet sessionDataSet = session.executeQueryStatement(sql);\n       long startTime = System.currentTimeMillis();\n-\n-      int count = metadata.getColumnCount();\n       // write data in csv file\n-      writeMetadata(bw, count, metadata);\n+      writeMetadata(bw, sessionDataSet.getColumnNames());\n \n-      int line = writeResultSet(rs, bw, count);\n+      int line = writeResultSet(sessionDataSet, bw);\n       System.out\n-          .println(String.format(\"Statement [%s] has dumped to file %s successfully! It costs \"\n-                  + \"%dms to export %d lines.\", sql, path, System.currentTimeMillis() - startTime,\n-              line));\n-    } catch (IOException e) {\n+          .printf(\"Statement [%s] has dumped to file %s successfully! It costs \"\n+                  + \"%dms to export %d lines.%n\", sql, path, System.currentTimeMillis() - startTime,\n+              line);\n+    } catch (IOException | StatementExecutionException | IoTDBConnectionException e) {\n       System.out.println(\"Cannot dump result because: \" + e.getMessage());\n     }\n   }\n \n-  private static void writeMetadata(BufferedWriter bw, int count, ResultSetMetaData metadata)\n-      throws SQLException, IOException {\n-    for (int i = 1; i <= count; i++) {\n-      if (i < count) {\n-        bw.write(metadata.getColumnLabel(i) + \",\");\n-      } else {\n-        bw.write(metadata.getColumnLabel(i) + \"\\n\");\n-      }\n-      typeList.add(metadata.getColumnType(i));\n+  private static void writeMetadata(BufferedWriter bw, List<String> columnNames)\n+      throws IOException {\n+    if (!columnNames.get(0).equals(\"Time\")) {\n+      bw.write(\"Time\" + \",\");\n+    }\n+    for (int i = 0; i < columnNames.size() - 1; i++) {\n+      bw.write(columnNames.get(i) + \",\");\n     }\n+    bw.write(columnNames.get(columnNames.size() - 1) + \"\\n\");\n   }\n \n-  private static int writeResultSet(ResultSet rs, BufferedWriter bw, int count)\n-      throws SQLException, IOException {\n+  private static int writeResultSet(SessionDataSet rs, BufferedWriter bw)\n+      throws IOException, StatementExecutionException, IoTDBConnectionException {\n     int line = 0;\n     long timestamp = System.currentTimeMillis();\n-    while (rs.next()) {\n-      if (rs.getString(1) == null ||\n-          \"null\".equalsIgnoreCase(rs.getString(1))) {\n-        bw.write(\",\");\n-      } else {\n-        writeTime(rs, bw);\n-        writeValue(rs, count, bw);\n-      }\n+    while (rs.hasNext()) {\n+      RowRecord rowRecord = rs.next();\n+      List<Field> fields = rowRecord.getFields();\n+      writeTime(rowRecord.getTimestamp(), bw);\n+      writeValue(fields, bw);\n       line++;\n       if (line % EXPORT_PER_LINE_COUNT == 0) {\n         long tmp = System.currentTimeMillis();\n-        System.out.println(\n-            String.format(\"%d lines have been exported, it takes %dms\", line, (tmp - timestamp)));\n+        System.out.printf(\"%d lines have been exported, it takes %dms%n\", line, (tmp - timestamp));\n         timestamp = tmp;\n       }\n     }\n     return line;\n   }\n \n-  private static void writeTime(ResultSet rs, BufferedWriter bw) throws SQLException, IOException {\n+  private static void writeTime(Long time, BufferedWriter bw) throws IOException {\n     ZonedDateTime dateTime;\n+    String timestampPrecision = \"ms\";\n     switch (timeFormat) {\n       case \"default\":\n-        long timestamp = rs.getLong(1);\n         String str = AbstractCli\n-            .parseLongToDateWithPrecision(DateTimeFormatter.ISO_OFFSET_DATE_TIME, timestamp, zoneId,\n-                TIMESTAMP_PRECISION);\n+            .parseLongToDateWithPrecision(DateTimeFormatter.ISO_OFFSET_DATE_TIME, time, zoneId,\n+                timestampPrecision);\n         bw.write(str + \",\");\n         break;\n       case \"timestamp\":\n       case \"long\":\n       case \"nubmer\":\n-        bw.write(rs.getLong(1) + \",\");\n+        bw.write(time + \",\");\n         break;\n       default:\n-        dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(rs.getLong(1)),\n+        dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(time),\n             zoneId);\n         bw.write(dateTime.format(DateTimeFormatter.ofPattern(timeFormat)) + \",\");\n         break;\n     }\n   }\n \n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n-  private static void writeValue(ResultSet rs, int count, BufferedWriter bw)\n-      throws SQLException, IOException {\n-    for (int j = 2; j <= count; j++) {\n-      if (j < count) {\n-        if (\"null\".equals(rs.getString(j))) {\n-          bw.write(\",\");\n-        } else {\n-          if(typeList.get(j-1) == Types.VARCHAR) {\n-            bw.write(\"\\'\" + rs.getString(j) + \"\\'\"+ \",\");\n+  private static void writeValue(List<Field> fields, BufferedWriter bw) throws IOException {\n+    for (int j = 0; j < fields.size() - 1; j++) {\n+      String value = fields.get(j).getStringValue();\n+      if (\"null\".equalsIgnoreCase(value)) {\n+        bw.write(\",\");\n+      } else {\n+        if (fields.get(j).getDataType() == TSDataType.TEXT) {\n+          int location = value.indexOf(\"\\\"\");\n+          if (location > -1) {\n+            if (value.charAt(location - 1) != '\\\\') {", "originalCommit": "fac00b7abb398a1f9b4de8dd91876cbbbbda4b1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1ODExNg==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526858116", "bodyText": "And why we need this judgement?", "author": "SteveYurongSu", "createdAt": "2020-11-19T12:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg0OTQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwNTg1OA==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526905858", "bodyText": "because we need to know before  \", whether has a \"\".", "author": "Genius-pig", "createdAt": "2020-11-19T13:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg0OTQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1MDI0Nw==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526850247", "bodyText": "Note that location may equals to 0, which will cause Exception...", "author": "SteveYurongSu", "createdAt": "2020-11-19T12:41:41Z", "path": "cli/src/main/java/org/apache/iotdb/tool/ExportCsv.java", "diffHunk": "@@ -263,112 +228,123 @@ private static void dumpResult(String sql, int index)\n         return;\n       }\n     } catch (IOException e) {\n-      System.out.println(\"Cannot create dump file \" + path + \"because: \" + e.getMessage());\n+      System.out.println(\"Cannot create dump file \" + path + \" \" + \"because: \" + e.getMessage());\n       return;\n     }\n     System.out.println(\"Start to export data from sql statement: \" + sql);\n-    try (Statement statement = connection.createStatement();\n-        ResultSet rs = statement.executeQuery(sql);\n-        BufferedWriter bw = new BufferedWriter(new FileWriter(tf))) {\n-      ResultSetMetaData metadata = rs.getMetaData();\n+    try (BufferedWriter bw = new BufferedWriter(new FileWriter(tf))) {\n+      SessionDataSet sessionDataSet = session.executeQueryStatement(sql);\n       long startTime = System.currentTimeMillis();\n-\n-      int count = metadata.getColumnCount();\n       // write data in csv file\n-      writeMetadata(bw, count, metadata);\n+      writeMetadata(bw, sessionDataSet.getColumnNames());\n \n-      int line = writeResultSet(rs, bw, count);\n+      int line = writeResultSet(sessionDataSet, bw);\n       System.out\n-          .println(String.format(\"Statement [%s] has dumped to file %s successfully! It costs \"\n-                  + \"%dms to export %d lines.\", sql, path, System.currentTimeMillis() - startTime,\n-              line));\n-    } catch (IOException e) {\n+          .printf(\"Statement [%s] has dumped to file %s successfully! It costs \"\n+                  + \"%dms to export %d lines.%n\", sql, path, System.currentTimeMillis() - startTime,\n+              line);\n+    } catch (IOException | StatementExecutionException | IoTDBConnectionException e) {\n       System.out.println(\"Cannot dump result because: \" + e.getMessage());\n     }\n   }\n \n-  private static void writeMetadata(BufferedWriter bw, int count, ResultSetMetaData metadata)\n-      throws SQLException, IOException {\n-    for (int i = 1; i <= count; i++) {\n-      if (i < count) {\n-        bw.write(metadata.getColumnLabel(i) + \",\");\n-      } else {\n-        bw.write(metadata.getColumnLabel(i) + \"\\n\");\n-      }\n-      typeList.add(metadata.getColumnType(i));\n+  private static void writeMetadata(BufferedWriter bw, List<String> columnNames)\n+      throws IOException {\n+    if (!columnNames.get(0).equals(\"Time\")) {\n+      bw.write(\"Time\" + \",\");\n+    }\n+    for (int i = 0; i < columnNames.size() - 1; i++) {\n+      bw.write(columnNames.get(i) + \",\");\n     }\n+    bw.write(columnNames.get(columnNames.size() - 1) + \"\\n\");\n   }\n \n-  private static int writeResultSet(ResultSet rs, BufferedWriter bw, int count)\n-      throws SQLException, IOException {\n+  private static int writeResultSet(SessionDataSet rs, BufferedWriter bw)\n+      throws IOException, StatementExecutionException, IoTDBConnectionException {\n     int line = 0;\n     long timestamp = System.currentTimeMillis();\n-    while (rs.next()) {\n-      if (rs.getString(1) == null ||\n-          \"null\".equalsIgnoreCase(rs.getString(1))) {\n-        bw.write(\",\");\n-      } else {\n-        writeTime(rs, bw);\n-        writeValue(rs, count, bw);\n-      }\n+    while (rs.hasNext()) {\n+      RowRecord rowRecord = rs.next();\n+      List<Field> fields = rowRecord.getFields();\n+      writeTime(rowRecord.getTimestamp(), bw);\n+      writeValue(fields, bw);\n       line++;\n       if (line % EXPORT_PER_LINE_COUNT == 0) {\n         long tmp = System.currentTimeMillis();\n-        System.out.println(\n-            String.format(\"%d lines have been exported, it takes %dms\", line, (tmp - timestamp)));\n+        System.out.printf(\"%d lines have been exported, it takes %dms%n\", line, (tmp - timestamp));\n         timestamp = tmp;\n       }\n     }\n     return line;\n   }\n \n-  private static void writeTime(ResultSet rs, BufferedWriter bw) throws SQLException, IOException {\n+  private static void writeTime(Long time, BufferedWriter bw) throws IOException {\n     ZonedDateTime dateTime;\n+    String timestampPrecision = \"ms\";\n     switch (timeFormat) {\n       case \"default\":\n-        long timestamp = rs.getLong(1);\n         String str = AbstractCli\n-            .parseLongToDateWithPrecision(DateTimeFormatter.ISO_OFFSET_DATE_TIME, timestamp, zoneId,\n-                TIMESTAMP_PRECISION);\n+            .parseLongToDateWithPrecision(DateTimeFormatter.ISO_OFFSET_DATE_TIME, time, zoneId,\n+                timestampPrecision);\n         bw.write(str + \",\");\n         break;\n       case \"timestamp\":\n       case \"long\":\n       case \"nubmer\":\n-        bw.write(rs.getLong(1) + \",\");\n+        bw.write(time + \",\");\n         break;\n       default:\n-        dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(rs.getLong(1)),\n+        dateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(time),\n             zoneId);\n         bw.write(dateTime.format(DateTimeFormatter.ofPattern(timeFormat)) + \",\");\n         break;\n     }\n   }\n \n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n-  private static void writeValue(ResultSet rs, int count, BufferedWriter bw)\n-      throws SQLException, IOException {\n-    for (int j = 2; j <= count; j++) {\n-      if (j < count) {\n-        if (\"null\".equals(rs.getString(j))) {\n-          bw.write(\",\");\n-        } else {\n-          if(typeList.get(j-1) == Types.VARCHAR) {\n-            bw.write(\"\\'\" + rs.getString(j) + \"\\'\"+ \",\");\n+  private static void writeValue(List<Field> fields, BufferedWriter bw) throws IOException {\n+    for (int j = 0; j < fields.size() - 1; j++) {\n+      String value = fields.get(j).getStringValue();\n+      if (\"null\".equalsIgnoreCase(value)) {\n+        bw.write(\",\");\n+      } else {\n+        if (fields.get(j).getDataType() == TSDataType.TEXT) {\n+          int location = value.indexOf(\"\\\"\");\n+          if (location > -1) {\n+            if (value.charAt(location - 1) != '\\\\') {\n+              bw.write(\"\\\"\" + value.replace(\"\\\"\", \"\\\\\\\"\") + \"\\\",\");\n+            } else {\n+              bw.write(\"\\\"\" + value + \"\\\",\");\n+            }\n+          } else if (value.contains(\",\")) {\n+            bw.write(\"\\\"\" + value + \"\\\",\");\n           } else {\n-            bw.write(rs.getString(j) + \",\");\n+            bw.write(value + \",\");\n           }\n-        }\n-      } else {\n-        if (\"null\".equals(rs.getString(j))) {\n-          bw.write(\"\\n\");\n         } else {\n-          if(typeList.get(j-1) == Types.VARCHAR) {\n-            bw.write(\"\\'\" + rs.getString(j) + \"\\'\"+ \"\\n\");\n+          bw.write(value + \",\");\n+        }\n+      }\n+    }\n+    String lastValue = fields.get(fields.size() - 1).getStringValue();\n+    if (\"null\".equalsIgnoreCase(lastValue)) {\n+      bw.write(\"\\n\");\n+    } else {\n+      if (fields.get(fields.size() - 1).getDataType() == TSDataType.TEXT) {\n+        int location = lastValue.indexOf(\"\\\"\");\n+        if (location > -1) {\n+          if (lastValue.charAt(location - 1) != '\\\\') {", "originalCommit": "fac00b7abb398a1f9b4de8dd91876cbbbbda4b1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1NzgxNw==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526857817", "bodyText": "And why we need this judgement?", "author": "SteveYurongSu", "createdAt": "2020-11-19T12:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg1MDI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2NjgyNw==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526866827", "bodyText": "This equation is always false and ...\nDoes \"\" represent null?", "author": "SteveYurongSu", "createdAt": "2020-11-19T13:09:03Z", "path": "cli/src/main/java/org/apache/iotdb/tool/ImportCsv.java", "diffHunk": "@@ -119,296 +89,90 @@ private static Options createOptions() {\n   /**\n    * Data from csv To tsfile.\n    */\n-  private static void loadDataFromCSV(File file, int index) {\n-    statement = null;\n+  private static void loadDataFromCSV(File file) {\n     int fileLine;\n     try {\n       fileLine = getFileLineCount(file);\n     } catch (IOException e) {\n       System.out.println(\"Failed to import file: \" + file.getName());\n       return;\n     }\n-    File errorFile = new File(errorInsertInfo + index);\n-    if (!errorFile.exists()) {\n-      try {\n-        errorFile.createNewFile();\n-      } catch (IOException e) {\n-        System.out.println(\"Cannot create a errorFile because: \" + e.getMessage());\n-        return;\n-      }\n-    }\n     System.out.println(\"Start to import data from: \" + file.getName());\n-    errorFlag = true;\n-    try(BufferedReader br = new BufferedReader(new FileReader(file));\n-        BufferedWriter bw = new BufferedWriter(new FileWriter(errorFile));\n+    try (BufferedReader br = new BufferedReader(new FileReader(file));\n         ProgressBar pb = new ProgressBar(\"Import from: \" + file.getName(), fileLine)) {\n       pb.setExtraMessage(\"Importing...\");\n       String header = br.readLine();\n-\n-      bw.write(\"From \" + file.getAbsolutePath());\n-      bw.newLine();\n-      bw.newLine();\n-      bw.write(header);\n-      bw.newLine();\n-      bw.newLine();\n-\n-      // storage csv table head info\n-      Map<String, ArrayList<Integer>> deviceToColumn = new HashMap<>();\n-      // storage csv table head info\n-      List<String> colInfo = new ArrayList<>();\n-      // storage csv device sensor info, corresponding csv table head\n-      List<String> headInfo = new ArrayList<>();\n-\n-      String[] strHeadInfo = header.split(\",\");\n-      if (strHeadInfo.length <= 1) {\n-        System.out.println(\"The CSV file \"+ file.getName() +\" illegal, please check first line\");\n+      String[] cols = splitCsvLine(header);\n+      if (cols.length <= 1) {\n+        System.out.println(\"The CSV file \" + file.getName() + \" illegal, please check first line\");\n         return;\n       }\n \n-      long startTime = System.currentTimeMillis();\n-      Map<String, String> timeseriesDataType = new HashMap<>();\n+      List<String> devices = new ArrayList<>();\n+      List<Long> times = new ArrayList<>();\n+      List<List<String>> measurementsList = new ArrayList<>();\n+      List<List<String>> valuesList = new ArrayList<>();\n+      Map<String, List<Integer>> devicesToPositions = new HashMap<>();\n+      Map<String, List<String>> devicesToMeasurements = new HashMap<>();\n \n-      boolean success = queryDatabaseMeta(strHeadInfo, file, bw, timeseriesDataType, headInfo,\n-          deviceToColumn, colInfo);\n-      if (!success) {\n-        errorFlag = false;\n-        return;\n+      for (int i = 1; i < cols.length; i++) {\n+        splitColToDeviceAndMeasurement(cols[i], devicesToPositions, devicesToMeasurements, i);\n       }\n \n-      statement = connection.createStatement();\n-\n+      int lineNumber = 0;\n+      String line;\n+      while ((line = br.readLine()) != null) {\n+        cols = splitCsvLine(line);\n+        lineNumber++;\n+        for (Entry<String, List<Integer>> deviceToPositions : devicesToPositions\n+            .entrySet()) {\n+          String device = deviceToPositions.getKey();\n+          devices.add(device);\n+\n+          times.add(Long.parseLong(cols[0]));\n+\n+          List<String> values = new ArrayList<>();\n+          for (int position : deviceToPositions.getValue()) {\n+            if (cols[position].equals(\"\") && cols[position].equals(\"null\")) {", "originalCommit": "fac00b7abb398a1f9b4de8dd91876cbbbbda4b1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzNjQ0NA==", "url": "https://github.com/apache/iotdb/pull/1914#discussion_r526936444", "bodyText": "remove, \"\" represent \"\";", "author": "Genius-pig", "createdAt": "2020-11-19T14:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2NjgyNw=="}], "type": "inlineReview"}, {"oid": "a2f74df54a2ad68e9d3aaebc3ca7dd52b475b67c", "url": "https://github.com/apache/iotdb/commit/a2f74df54a2ad68e9d3aaebc3ca7dd52b475b67c", "message": "update according to review", "committedDate": "2020-11-19T14:12:18Z", "type": "commit"}, {"oid": "f31b68744111d00b6c0f92b20b348f0160030e78", "url": "https://github.com/apache/iotdb/commit/f31b68744111d00b6c0f92b20b348f0160030e78", "message": "Update ExportCsvTestIT.java\n\nadd test", "committedDate": "2020-11-19T14:25:46Z", "type": "commit"}, {"oid": "ba37ca15c72d342e5ebca15cdafed273bc57ed20", "url": "https://github.com/apache/iotdb/commit/ba37ca15c72d342e5ebca15cdafed273bc57ed20", "message": "update test.", "committedDate": "2020-11-19T14:35:51Z", "type": "commit"}, {"oid": "b40809f915f9fcf892874e3d1336cd4e14834c2c", "url": "https://github.com/apache/iotdb/commit/b40809f915f9fcf892874e3d1336cd4e14834c2c", "message": "update readme", "committedDate": "2020-11-20T08:54:44Z", "type": "commit"}, {"oid": "678ec85494bb01763284cbe3cbaca513c4db4b06", "url": "https://github.com/apache/iotdb/commit/678ec85494bb01763284cbe3cbaca513c4db4b06", "message": "Merge branch 'change_jdbc_to_session_in_csv' of https://github.com/apache/iotdb into change_jdbc_to_session_in_csv", "committedDate": "2020-11-20T08:54:48Z", "type": "commit"}, {"oid": "9ab64acfe848a03ab2de475f552812659ff59fff", "url": "https://github.com/apache/iotdb/commit/9ab64acfe848a03ab2de475f552812659ff59fff", "message": "Update ExportCsv.java", "committedDate": "2020-11-20T08:56:07Z", "type": "commit"}, {"oid": "e982d112f18980bf7edd3aa4a94af3fa22a04634", "url": "https://github.com/apache/iotdb/commit/e982d112f18980bf7edd3aa4a94af3fa22a04634", "message": "improve doc", "committedDate": "2020-11-20T09:18:28Z", "type": "commit"}]}