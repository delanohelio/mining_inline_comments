{"pr_number": 764, "pr_title": "Clear the relation of SeriesReaders", "pr_createdAt": "2020-02-04T03:11:10Z", "pr_url": "https://github.com/apache/iotdb/pull/764", "timeline": [{"oid": "30594f9959b5ac22877498ab4fb68c231b78d41d", "url": "https://github.com/apache/iotdb/commit/30594f9959b5ac22877498ab4fb68c231b78d41d", "message": "add some readers", "committedDate": "2020-02-04T03:09:55Z", "type": "commit"}, {"oid": "e53f5ed21dc6d4565584d9fb04ef1b8dba8219ed", "url": "https://github.com/apache/iotdb/commit/e53f5ed21dc6d4565584d9fb04ef1b8dba8219ed", "message": "add asfHeader", "committedDate": "2020-02-04T03:24:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NjA3NA==", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374456074", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private List<ManagedSeriesReader> seriesReaderWithoutValueFilterList;\n          \n          \n            \n              private List<ManagedSeriesReader> seriesReaderList;", "author": "qiaojialin", "createdAt": "2020-02-04T03:16:42Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/RawQueryDataSetWithoutValueFilter.java", "diffHunk": "@@ -105,7 +103,7 @@ public void run() {\n     }\n   }\n \n-  private List<SeriesReader> seriesReaderWithoutValueFilterList;\n+  private List<ManagedSeriesReader> seriesReaderWithoutValueFilterList;", "originalCommit": "30594f9959b5ac22877498ab4fb68c231b78d41d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODM2Ng==", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374458366", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RawDataReader implements IBatchReader, ManagedSeriesReader {\n          \n          \n            \n            public class RawDataBatchReader implements IBatchReader, ManagedSeriesReader {", "author": "qiaojialin", "createdAt": "2020-02-04T03:28:47Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/RawDataReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.reader.ManagedSeriesReader;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n+\n+\n+public class RawDataReader implements IBatchReader, ManagedSeriesReader {", "originalCommit": "e53f5ed21dc6d4565584d9fb04ef1b8dba8219ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODY0OQ==", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374458649", "bodyText": "do not extend, consistent with others", "author": "qiaojialin", "createdAt": "2020-02-04T03:30:27Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/AggregateReader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+\n+\n+public class AggregateReader extends SeriesReader implements IAggregateReader {", "originalCommit": "e53f5ed21dc6d4565584d9fb04ef1b8dba8219ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f125323855c754299b613b981bf6b37256dc4b5f", "url": "https://github.com/apache/iotdb/commit/f125323855c754299b613b981bf6b37256dc4b5f", "message": "rename", "committedDate": "2020-02-04T04:03:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NzY1Nw==", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374467657", "bodyText": "remove", "author": "qiaojialin", "createdAt": "2020-02-04T04:19:53Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/AggregateReader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+\n+\n+public class AggregateReader implements IAggregateReader {\n+\n+  private final SeriesReader seriesReader;\n+\n+  public AggregateReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n+    this.seriesReader = new SeriesReader(seriesPath, dataType, context, dataSource, timeFilter,\n+        valueFilter);\n+  }\n+\n+  @Override\n+  public boolean hasNextChunk() throws IOException {\n+    return seriesReader.hasNextChunk();\n+  }\n+\n+  /**\n+   * only be used for aggregate without value filter\n+   *\n+   * @return", "originalCommit": "f125323855c754299b613b981bf6b37256dc4b5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NzkwMw==", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374467903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean satisfyTimeFilter(Statistics statistics) {\n          \n          \n            \n              private boolean coveredByTimeFilter(Statistics statistics) {", "author": "qiaojialin", "createdAt": "2020-02-04T04:21:10Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/AggregateReader.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.statistics.Statistics;\n+import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+\n+\n+public class AggregateReader implements IAggregateReader {\n+\n+  private final SeriesReader seriesReader;\n+\n+  public AggregateReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n+    this.seriesReader = new SeriesReader(seriesPath, dataType, context, dataSource, timeFilter,\n+        valueFilter);\n+  }\n+\n+  @Override\n+  public boolean hasNextChunk() throws IOException {\n+    return seriesReader.hasNextChunk();\n+  }\n+\n+  /**\n+   * only be used for aggregate without value filter\n+   *\n+   * @return\n+   */\n+  @Override\n+  public boolean canUseCurrentChunkStatistics() {\n+    Statistics chunkStatistics = currentChunkStatistics();\n+    return !seriesReader.isChunkOverlapped() && satisfyTimeFilter(chunkStatistics);\n+  }\n+\n+  @Override\n+  public Statistics currentChunkStatistics() {\n+    return seriesReader.currentChunkStatistics();\n+  }\n+\n+  @Override\n+  public void skipCurrentChunk() throws IOException {\n+    seriesReader.skipCurrentChunk();\n+  }\n+\n+  @Override\n+  public boolean hasNextPage() throws IOException {\n+    return seriesReader.hasNextPage();\n+  }\n+\n+\n+  @Override\n+  public boolean canUseCurrentPageStatistics() throws IOException {\n+    Statistics currentPageStatistics = currentPageStatistics();\n+    return !seriesReader.isPageOverlapped() && satisfyTimeFilter(currentPageStatistics);\n+  }\n+\n+  @Override\n+  public Statistics currentPageStatistics() throws IOException {\n+    return seriesReader.currentPageStatistics();\n+  }\n+\n+  @Override\n+  public void skipCurrentPage() {\n+    seriesReader.skipCurrentPage();\n+  }\n+\n+  @Override\n+  public boolean hasNextOverlappedPage() throws IOException {\n+    return seriesReader.hasNextOverlappedPage();\n+  }\n+\n+  @Override\n+  public BatchData nextOverlappedPage() throws IOException {\n+    return seriesReader.nextOverlappedPage();\n+  }\n+\n+\n+  private boolean satisfyTimeFilter(Statistics statistics) {", "originalCommit": "f125323855c754299b613b981bf6b37256dc4b5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2ODIxMQ==", "url": "https://github.com/apache/iotdb/pull/764#discussion_r374468211", "bodyText": "put this in the front", "author": "qiaojialin", "createdAt": "2020-02-04T04:22:59Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/seriesRelated/RawDataBatchReader.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.reader.seriesRelated;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iotdb.db.engine.querycontext.QueryDataSource;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.db.query.context.QueryContext;\n+import org.apache.iotdb.db.query.reader.ManagedSeriesReader;\n+import org.apache.iotdb.db.utils.TestOnly;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.BatchData;\n+import org.apache.iotdb.tsfile.read.common.Path;\n+import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n+import org.apache.iotdb.tsfile.read.reader.IBatchReader;\n+\n+\n+public class RawDataBatchReader implements IBatchReader, ManagedSeriesReader {\n+\n+  private final SeriesReader seriesReader;\n+  private boolean hasRemaining;\n+  private boolean managedByQueryManager;\n+\n+  public RawDataBatchReader(SeriesReader seriesReader) {\n+    this.seriesReader = seriesReader;\n+  }\n+\n+  public RawDataBatchReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      QueryDataSource dataSource, Filter timeFilter, Filter valueFilter) {\n+    this.seriesReader = new SeriesReader(seriesPath, dataType, context, dataSource, timeFilter,\n+        valueFilter);\n+  }\n+\n+  @TestOnly\n+  public RawDataBatchReader(Path seriesPath, TSDataType dataType, QueryContext context,\n+      List<TsFileResource> seqFileResource, List<TsFileResource> unseqFileResource,\n+      Filter timeFilter, Filter valueFilter) {\n+    this.seriesReader = new SeriesReader(seriesPath, dataType, context, seqFileResource,\n+        unseqFileResource, timeFilter, valueFilter);\n+  }\n+\n+  private BatchData batchData;\n+  private boolean hasCachedBatchData = false;", "originalCommit": "f125323855c754299b613b981bf6b37256dc4b5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf793648104481d5d42b1c540f936cf79ac945a8", "url": "https://github.com/apache/iotdb/commit/bf793648104481d5d42b1c540f936cf79ac945a8", "message": "modify method name", "committedDate": "2020-02-04T04:31:29Z", "type": "commit"}]}