{"pr_number": 2016, "pr_title": "fix grafana bug", "pr_createdAt": "2020-11-11T07:26:34Z", "pr_url": "https://github.com/apache/iotdb/pull/2016", "timeline": [{"oid": "c5975ce3fa8cffee8c0555c1ed6a07b744663c2d", "url": "https://github.com/apache/iotdb/commit/c5975ce3fa8cffee8c0555c1ed6a07b744663c2d", "message": "fix grafana bugs", "committedDate": "2020-11-11T05:54:07Z", "type": "commit"}, {"oid": "a7843c6a162c5eaaba74c1a03efb4be8ec2a0508", "url": "https://github.com/apache/iotdb/commit/a7843c6a162c5eaaba74c1a03efb4be8ec2a0508", "message": "add tests", "committedDate": "2020-11-11T07:05:25Z", "type": "commit"}, {"oid": "ab27a7f907f1c2e31ddc4d470e8124a07b018b5c", "url": "https://github.com/apache/iotdb/commit/ab27a7f907f1c2e31ddc4d470e8124a07b018b5c", "message": "add licenses", "committedDate": "2020-11-11T08:37:41Z", "type": "commit"}, {"oid": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7", "url": "https://github.com/apache/iotdb/commit/6a8511e4ef531e1143cdc15aa571202a9dd0bfd7", "message": "Merge branch 'master' of github.com:apache/iotdb", "committedDate": "2020-11-12T01:11:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODI0Nw==", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r522578247", "bodyText": "this looks reasonable, is this a bug before?", "author": "qiaojialin", "createdAt": "2020-11-13T02:51:36Z", "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/controller/DatabaseConnectController.java", "diffHunk": "@@ -165,7 +165,7 @@ private void setJsonTable(JsonObject obj, String target,\n     for (TimeValues tv : timeValues) {\n       JsonArray value = new JsonArray();\n       value.add(tv.getTime());\n-      values.add(GSON.toJsonTree(tv.getValue()));\n+      value.add(GSON.toJsonTree(tv.getValue()));", "originalCommit": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODgwMQ==", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r522578801", "bodyText": "interval?", "author": "qiaojialin", "createdAt": "2020-11-13T02:53:44Z", "path": "grafana/src/main/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImpl.java", "diffHunk": "@@ -133,31 +133,44 @@ public static void setTimestampRadioX(String timestampPrecision) {\n   }\n \n   public List<TimeValues> querySeriesInternal(String s, Pair<ZonedDateTime, ZonedDateTime> timeRange, String function) {\n-      Long from = zonedCovertToLong(timeRange.left);\n+    Long from = zonedCovertToLong(timeRange.left);\n     Long to = zonedCovertToLong(timeRange.right);\n     final long hours = Duration.between(timeRange.left, timeRange.right).toHours();\n+\n     String sql = String.format(\"SELECT %s FROM root.%s WHERE time > %d and time < %d\",\n         s.substring(s.lastIndexOf('.') + 1), s.substring(0, s.lastIndexOf('.')),\n         from * timestampRadioX, to * timestampRadioX);\n     String columnName = \"root.\" + s;\n-    if (isDownSampling && (hours > 1)) {\n-      if (hours < 30 * 24 && hours > 24) {\n-        interval = \"1h\";\n-      } else if (hours > 30 * 24) {\n-        interval = \"1d\";\n-      }\n+\n+    String internalLocal = getInternal(hours);", "originalCommit": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MDIwMg==", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r525870202", "bodyText": "The value of internal is global in the past version", "author": "w169q169", "createdAt": "2020-11-18T07:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcwNDIwNw==", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r527704207", "bodyText": "should the internal be interval?\nInterval means a time range, do you mean  an internal interval...?", "author": "qiaojialin", "createdAt": "2020-11-20T13:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ0NzY0MA==", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r528447640", "bodyText": "already fixed.", "author": "w169q169", "createdAt": "2020-11-23T02:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3ODgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4MDcyOQ==", "url": "https://github.com/apache/iotdb/pull/2016#discussion_r522580729", "bodyText": "please remove the print", "author": "qiaojialin", "createdAt": "2020-11-13T03:00:42Z", "path": "grafana/src/test/java/org/apache/iotdb/web/grafana/dao/impl/BasicDaoImplTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.web.grafana.dao.impl;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import static org.junit.Assert.*;\n+\n+public class BasicDaoImplTest {\n+\n+\n+    @Before\n+    public void setUp() throws Exception {\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+    }\n+\n+    @Test\n+    public void getInternal() {\n+        BasicDaoImpl impl = new BasicDaoImpl(null);\n+        ReflectionTestUtils.setField(impl, \"isDownSampling\", true);\n+        ReflectionTestUtils.setField(impl, \"interval\", \"1m\");\n+\n+        String internal1 = impl.getInternal(0);\n+        assert internal1.equals(\"\");\n+\n+        String internal2 = impl.getInternal(3);\n+        System.out.println(\"123\");", "originalCommit": "6a8511e4ef531e1143cdc15aa571202a9dd0bfd7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6165093a2bb49933557e1051957837820786ae5d", "url": "https://github.com/apache/iotdb/commit/6165093a2bb49933557e1051957837820786ae5d", "message": "Merge branch 'master' of github.com:apache/iotdb", "committedDate": "2020-11-18T07:37:49Z", "type": "commit"}, {"oid": "32575c97d6945fac342b67bc9b4f0bbc8176710b", "url": "https://github.com/apache/iotdb/commit/32575c97d6945fac342b67bc9b4f0bbc8176710b", "message": "remove print", "committedDate": "2020-11-18T07:39:37Z", "type": "commit"}, {"oid": "6ea26e82e37c3a50044cb8c54ca541b87c827e63", "url": "https://github.com/apache/iotdb/commit/6ea26e82e37c3a50044cb8c54ca541b87c827e63", "message": "Merge branch 'master' of github.com:apache/iotdb", "committedDate": "2020-11-20T01:21:45Z", "type": "commit"}, {"oid": "018526679acceb3b33767267735cb2e78e7f695c", "url": "https://github.com/apache/iotdb/commit/018526679acceb3b33767267735cb2e78e7f695c", "message": "fix spelling errors", "committedDate": "2020-11-23T01:45:50Z", "type": "commit"}, {"oid": "9b2a775d9219cab0064051efccfc21ea224358aa", "url": "https://github.com/apache/iotdb/commit/9b2a775d9219cab0064051efccfc21ea224358aa", "message": "fix ci error", "committedDate": "2020-11-23T01:59:43Z", "type": "commit"}]}