{"pr_number": 1731, "pr_title": "[IOTDB-870] change tags and attributes output to two columns with json values", "pr_createdAt": "2020-09-14T13:02:13Z", "pr_url": "https://github.com/apache/iotdb/pull/1731", "timeline": [{"oid": "130cef83fdf1f4ff33ab31a361e65ab41ae97c6d", "url": "https://github.com/apache/iotdb/commit/130cef83fdf1f4ff33ab31a361e65ab41ae97c6d", "message": "server/src/assembly/resources/conf/logback.xml", "committedDate": "2020-08-05T01:15:27Z", "type": "commit"}, {"oid": "a5c1684947a562dbbbd667c7046a1d13956d6334", "url": "https://github.com/apache/iotdb/commit/a5c1684947a562dbbbd667c7046a1d13956d6334", "message": "fix loginfo appender ref to FILEINFO", "committedDate": "2020-08-05T03:30:31Z", "type": "commit"}, {"oid": "6c1f8c407e85f3f88537d18a72ba49234b16171e", "url": "https://github.com/apache/iotdb/commit/6c1f8c407e85f3f88537d18a72ba49234b16171e", "message": "[IOTDB-870] tags and attributes output", "committedDate": "2020-09-14T13:00:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5NDQ2NA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r488594464", "bodyText": "tags and attributes are better", "author": "qiaojialin", "createdAt": "2020-09-15T11:34:13Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeSeriesResult.java", "diffHunk": "@@ -35,17 +35,19 @@\n   private String dataType;\n   private String encoding;\n   private String compressor;\n-  private Map<String, String> tagAndAttribute;\n+  private Map<String, String> tag;\n+  private Map<String, String> attribute;", "originalCommit": "6c1f8c407e85f3f88537d18a72ba49234b16171e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5ODU3Nw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r488598577", "bodyText": "tags and attributes?", "author": "qiaojialin", "createdAt": "2020-09-15T11:41:23Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConstant.java", "diffHunk": "@@ -70,6 +70,8 @@ private IoTDBConstant() {\n   public static final String COLUMN_DEVICES = \"devices\";\n   public static final String COLUMN_COLUMN = \"column\";\n   public static final String COLUMN_COUNT = \"count\";\n+  public static final String COLUMN_TAG = \"tag\";\n+  public static final String COLUMN_ATTRIBUTE = \"attribute\";", "originalCommit": "6c1f8c407e85f3f88537d18a72ba49234b16171e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "24ce7f1a9ac976552a2e844efbc5cdcc5cf0a4f8", "url": "https://github.com/apache/iotdb/commit/24ce7f1a9ac976552a2e844efbc5cdcc5cf0a4f8", "message": "modified tags attributes names", "committedDate": "2020-09-16T11:29:43Z", "type": "commit"}, {"oid": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "url": "https://github.com/apache/iotdb/commit/478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "message": "modified tags attributes names", "committedDate": "2020-09-18T01:27:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5Njk5OQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490696999", "bodyText": "how about:\n  Pair<Map<String, String>, Map<String, String>> pair = new Pair(Collections.emptyMap(),Collections.emptyMap());\n\n  if(tagFileOffset >= 0){\n     pair = tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\n  }\n\n  res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2], pair.left, pair.right);", "author": "liutaohua", "createdAt": "2020-09-18T04:36:27Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -994,14 +993,13 @@ private boolean match(PartialPath fullPath, String[] prefixNodes) {\n           if (tagFileOffset < 0) {\n             // no tags/attributes\n             res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2],\n-                ansString.right[3], ansString.right[4], Collections.emptyMap()));\n+                ansString.right[3], ansString.right[4], Collections.emptyMap(), Collections.emptyMap()));\n           } else {\n             // has tags/attributes\n             Pair<Map<String, String>, Map<String, String>> pair =\n                 tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\n-            pair.left.putAll(pair.right);\n             res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2],\n-                ansString.right[3], ansString.right[4], pair.left));\n+                ansString.right[3], ansString.right[4], pair.left, pair.right));", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2NDI3MA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490764270", "bodyText": "edited. thank you :)", "author": "haimeiguo", "createdAt": "2020-09-18T07:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5Njk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwMTE3MA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490701170", "bodyText": "tags and attr are duplicate code, how about:\nprivate void writeNullable(Map<String,String> param, OutputStream out){\n   \n    ReadWriteIOUtils.write(param != null, outputStream);\n    if (param != null) {\n      ReadWriteIOUtils.write(tags.size(), outputStream);\n      for (Entry<String, String> entry : param.entrySet()) {\n        ReadWriteIOUtils.write(entry.getKey(), outputStream);\n        ReadWriteIOUtils.write(entry.getValue(), outputStream);\n      }\n    }\n}", "author": "liutaohua", "createdAt": "2020-09-18T04:53:43Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeSeriesResult.java", "diffHunk": "@@ -113,10 +119,21 @@ public void serialize(OutputStream outputStream) throws IOException {\n     ReadWriteIOUtils.write(encoding, outputStream);\n     ReadWriteIOUtils.write(compressor, outputStream);\n \n-    ReadWriteIOUtils.write(tagAndAttribute != null, outputStream); //flag\n-    if (tagAndAttribute != null) {\n-      ReadWriteIOUtils.write(tagAndAttribute.size(), outputStream);\n-      for (Entry<String, String> stringStringEntry : tagAndAttribute.entrySet()) {\n+    //flag for tag\n+    ReadWriteIOUtils.write(tags != null, outputStream);\n+    if (tags != null) {\n+      ReadWriteIOUtils.write(tags.size(), outputStream);\n+      for (Entry<String, String> stringStringEntry : tags.entrySet()) {\n+        ReadWriteIOUtils.write(stringStringEntry.getKey(), outputStream);\n+        ReadWriteIOUtils.write(stringStringEntry.getValue(), outputStream);\n+      }\n+    }\n+\n+    //flag for attribute\n+    ReadWriteIOUtils.write(attributes != null, outputStream);", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwMzE1Nw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490703157", "bodyText": "we have the enums of these strings, I suggest that we use the enums to serialize, u can find it in :\npackage org.apache.iotdb.tsfile.file.metadata.enums;", "author": "liutaohua", "createdAt": "2020-09-18T05:01:01Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeSeriesResult.java", "diffHunk": "@@ -134,13 +151,25 @@ public static ShowTimeSeriesResult deserialize(ByteBuffer buffer) {\n     result.encoding = ReadWriteIOUtils.readString(buffer);\n     result.compressor = ReadWriteIOUtils.readString(buffer);", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwNjQ0Mg==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490706442", "bodyText": "duplicate code, how about:\n  private static PartialPath[] resourcePaths = new PartialPath[]{new PartialPath(COLUMN_TIMESERIES, false), .....};\n  private static TSDataType[] resourceTypes = new TSDataType[]{TSDataType.TEXT, .....};\n\n  public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDataType> dataTypes, List<ShowTimeSeriesResult> timeseriesList) {\n    Collections.addAll(paths,resourcePaths);\n    Collections.addAll(dataTypes,resourceTypes);\n    ......\n  }", "author": "liutaohua", "createdAt": "2020-09-18T05:13:54Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -127,12 +128,27 @@ public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDat\n     paths.add(new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false));\n     dataTypes.add(TSDataType.TEXT);", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxMjM1Ng==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490712356", "bodyText": "I don't think there's any need to check,  it's ok to show null || spaces, like :\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\n|    timeseries|alias|storage group|dataType|encoding|compression|tags|attributes|\n+--------------+-----+-------------+--------+--------+-----------+----+----------+\n|root.sg1.d1.s1| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n|root.sg1.d1.s2| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n|root.sg1.d1.s3| null|     root.sg1|   INT64|     RLE|     SNAPPY|null|      null|\n+--------------+-----+-------------+--------+--------+-----------+----+----------+", "author": "liutaohua", "createdAt": "2020-09-18T05:35:06Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -127,12 +128,27 @@ public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDat\n     paths.add(new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false));\n     dataTypes.add(TSDataType.TEXT);\n \n-    Set<String> tagAndAttributeName = new TreeSet<>();\n+    //check if timeseries result has tag or attribute\n+    boolean hasTag = false;\n+    boolean hasAttribute = false;\n     for (ShowTimeSeriesResult result : timeseriesList) {", "originalCommit": "478a6dd7534cdd8d268a60639bc61d5c93b4bc43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fefd2ddc9af6928f75c9aae8675d1936de513c4", "url": "https://github.com/apache/iotdb/commit/6fefd2ddc9af6928f75c9aae8675d1936de513c4", "message": "removed redundant code", "committedDate": "2020-09-18T07:45:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMDc0MQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490810741", "bodyText": "i think that too many type cast , how about used only in serialize/deserialize.", "author": "liutaohua", "createdAt": "2020-09-18T09:10:31Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -152,10 +142,11 @@ public static QueryDataSet getQueryDataSet(List<ShowTimeSeriesResult> timeseries\n       updateRecord(record, result.getName());\n       updateRecord(record, result.getAlias());\n       updateRecord(record, result.getSgName());\n-      updateRecord(record, result.getDataType());\n-      updateRecord(record, result.getEncoding());\n-      updateRecord(record, result.getCompressor());\n-      updateRecord(record, result.getTagAndAttribute(), paths);\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());", "originalCommit": "6fefd2ddc9af6928f75c9aae8675d1936de513c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMjA5MQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490812091", "bodyText": "same", "author": "liutaohua", "createdAt": "2020-09-18T09:13:10Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -166,26 +157,28 @@ public static QueryDataSet getQueryDataSet(List<ShowTimeSeriesResult> timeseries\n     List<RowRecord> records = new ArrayList<>();\n     List<PartialPath> paths = new ArrayList<>();\n     List<TSDataType> dataTypes = new ArrayList<>();\n-    constructPathAndDataTypes(paths, dataTypes, timeseriesList);\n+    constructPathAndDataTypes(paths, dataTypes);\n     for (ShowTimeSeriesResult result : timeseriesList) {\n       RowRecord record = new RowRecord(0);\n       updateRecord(record, result.getName());\n       updateRecord(record, result.getAlias());\n       updateRecord(record, result.getSgName());\n-      updateRecord(record, result.getDataType());\n-      updateRecord(record, result.getEncoding());\n-      updateRecord(record, result.getCompressor());\n-      updateRecord(record, result.getTagAndAttribute(), paths);\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());", "originalCommit": "6fefd2ddc9af6928f75c9aae8675d1936de513c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNDc2NQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r490814765", "bodyText": "I think that constructPath and updateRecord behavior belongs to Dataset, how about move it to ShowTimeseriesDataSet  class?\nand next line ,  the showTimeSeriesPlan already exists in dataset...\n@qiaojialin  what do you think?", "author": "liutaohua", "createdAt": "2020-09-18T09:17:23Z", "path": "server/src/main/java/org/apache/iotdb/db/utils/QueryUtils.java", "diffHunk": "@@ -112,36 +122,16 @@ public static void filterQueryDataSource(QueryDataSource queryDataSource,\n     unseqResources.removeIf(fileFilter::fileNotSatisfy);\n   }\n \n-  public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      List<ShowTimeSeriesResult> timeseriesList) {\n-    paths.add(new PartialPath(COLUMN_TIMESERIES, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_TIMESERIES_ALIAS, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_STORAGE_GROUP, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_TIMESERIES_DATATYPE, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_TIMESERIES_ENCODING, false));\n-    dataTypes.add(TSDataType.TEXT);\n-    paths.add(new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false));\n-    dataTypes.add(TSDataType.TEXT);\n-\n-    Set<String> tagAndAttributeName = new TreeSet<>();\n-    for (ShowTimeSeriesResult result : timeseriesList) {\n-      tagAndAttributeName.addAll(result.getTagAndAttribute().keySet());\n-    }\n-    for (String key : tagAndAttributeName) {\n-      paths.add(new PartialPath(key, false));\n-      dataTypes.add(TSDataType.TEXT);\n-    }\n+  public static void constructPathAndDataTypes(List<PartialPath> paths, List<TSDataType> dataTypes) {\n+    Collections.addAll(paths, resourcePaths);\n+    Collections.addAll(dataTypes, resourceTypes);\n   }\n \n   public static QueryDataSet getQueryDataSet(List<ShowTimeSeriesResult> timeseriesList,\n       ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n     List<PartialPath> paths = new ArrayList<>();\n     List<TSDataType> dataTypes = new ArrayList<>();\n-    constructPathAndDataTypes(paths, dataTypes, timeseriesList);\n+    constructPathAndDataTypes(paths, dataTypes);", "originalCommit": "6fefd2ddc9af6928f75c9aae8675d1936de513c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI5MzE2NA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r491293164", "bodyText": "It seems that the constructPathAndDataTypes is only used for ShowTimeseries, so moving it to ShowTimeseriesDataSet is ok.", "author": "qiaojialin", "createdAt": "2020-09-19T06:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNDc2NQ=="}], "type": "inlineReview"}, {"oid": "7adc3a1e9a438bdd6c0f25cbb9799300ddb3e349", "url": "https://github.com/apache/iotdb/commit/7adc3a1e9a438bdd6c0f25cbb9799300ddb3e349", "message": "[IOTDB-870] tags and attributes output", "committedDate": "2020-09-18T12:56:48Z", "type": "commit"}, {"oid": "308390042c293ff82c1db959fcb8885409a80839", "url": "https://github.com/apache/iotdb/commit/308390042c293ff82c1db959fcb8885409a80839", "message": "modified tags attributes names", "committedDate": "2020-09-18T12:56:49Z", "type": "commit"}, {"oid": "03af9e1b76e607e636983c38f0a057aad2dc4a60", "url": "https://github.com/apache/iotdb/commit/03af9e1b76e607e636983c38f0a057aad2dc4a60", "message": "modified tags attributes names", "committedDate": "2020-09-18T12:56:49Z", "type": "commit"}, {"oid": "9741ae2c09d1d5e9fbe82b1b16376577dc52ae73", "url": "https://github.com/apache/iotdb/commit/9741ae2c09d1d5e9fbe82b1b16376577dc52ae73", "message": "removed redundant code", "committedDate": "2020-09-18T12:56:50Z", "type": "commit"}, {"oid": "786d8fe1cf58cbcfbfeee0e47ce4d3017eb673a9", "url": "https://github.com/apache/iotdb/commit/786d8fe1cf58cbcfbfeee0e47ce4d3017eb673a9", "message": "Merge branch 'master' of github.com:kelggu/incubator-iotdb into master_output_format_tags_attributes", "committedDate": "2020-09-21T02:15:49Z", "type": "commit"}, {"oid": "3b90764f69a8f94c27268faa2d80a351ff80cf8c", "url": "https://github.com/apache/iotdb/commit/3b90764f69a8f94c27268faa2d80a351ff80cf8c", "message": "Merge branch 'master_output_format_tags_attributes' of github.com:kelggu/incubator-iotdb into master_output_format_tags_attributes", "committedDate": "2020-09-21T02:16:58Z", "type": "commit"}, {"oid": "39926f0b2ab736514c0594eba674db0d78953de7", "url": "https://github.com/apache/iotdb/commit/39926f0b2ab736514c0594eba674db0d78953de7", "message": "moved constructPathAndDataTypes to ShowTimeseriesDataSet", "committedDate": "2020-09-21T06:30:43Z", "type": "commit"}, {"oid": "6c1f8c407e85f3f88537d18a72ba49234b16171e", "url": "https://github.com/apache/iotdb/commit/6c1f8c407e85f3f88537d18a72ba49234b16171e", "message": "[IOTDB-870] tags and attributes output", "committedDate": "2020-09-14T13:00:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MDgzMw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r491860833", "bodyText": "ShowTimeseriesData should play as a query processor.\nIt accepts a query plan and generates results.", "author": "qiaojialin", "createdAt": "2020-09-21T08:13:11Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -566,7 +567,8 @@ private QueryDataSet processShowStorageGroup(ShowStorageGroupPlan showStorageGro\n   private QueryDataSet processShowTimeseries(ShowTimeSeriesPlan showTimeSeriesPlan,\n       QueryContext context) throws MetadataException {\n     List<ShowTimeSeriesResult> timeseriesList = showTimeseries(showTimeSeriesPlan, context);\n-    return QueryUtils.getQueryDataSet(timeseriesList, showTimeSeriesPlan, context);\n+    ShowTimeseriesDataSet showTimeSeriesDataSet = new ShowTimeseriesDataSet(showTimeSeriesPlan, context);\n+    return showTimeSeriesDataSet.getQueryDataSet(timeseriesList);", "originalCommit": "39926f0b2ab736514c0594eba674db0d78953de7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5793bc75705e532dde7ec3fabceafb339d6887a3", "url": "https://github.com/apache/iotdb/commit/5793bc75705e532dde7ec3fabceafb339d6887a3", "message": "edit", "committedDate": "2020-09-21T08:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NDMwNg==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r492644306", "bodyText": "Change to a more meaningful name, like tagAndAttributePair", "author": "liutaohua", "createdAt": "2020-09-22T10:56:18Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -937,12 +937,11 @@ public int getNodesCountInGivenLevel(PartialPath prefixPath, int level) throws M\n           try {\n             Pair<Map<String, String>, Map<String, String>> pair =", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NTk1OQ==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r492645959", "bodyText": "same", "author": "liutaohua", "createdAt": "2020-09-22T10:59:33Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1003,18 +1002,13 @@ private boolean match(PartialPath fullPath, String[] prefixNodes) {\n       for (Pair<PartialPath, String[]> ansString : ans) {\n         long tagFileOffset = Long.parseLong(ansString.right[5]);\n         try {\n-          if (tagFileOffset < 0) {\n-            // no tags/attributes\n-            res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2],\n-                ansString.right[3], ansString.right[4], Collections.emptyMap()));\n-          } else {\n-            // has tags/attributes\n-            Pair<Map<String, String>, Map<String, String>> pair =\n-                tagLogFile.read(config.getTagAttributeTotalSize(), tagFileOffset);\n-            pair.left.putAll(pair.right);\n-            res.add(new ShowTimeSeriesResult(ansString.left.getFullPath(), ansString.right[0], ansString.right[1], ansString.right[2],\n-                ansString.right[3], ansString.right[4], pair.left));\n+          Pair<Map<String, String>, Map<String, String>> pair = new Pair<>(Collections.emptyMap(),Collections.emptyMap());", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NDYzNg==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r492654636", "bodyText": "I think this method can be removed, or move it to ShowTimeseriesDataSet", "author": "liutaohua", "createdAt": "2020-09-22T11:17:33Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -566,7 +567,7 @@ private QueryDataSet processShowStorageGroup(ShowStorageGroupPlan showStorageGro\n   private QueryDataSet processShowTimeseries(ShowTimeSeriesPlan showTimeSeriesPlan,\n       QueryContext context) throws MetadataException {\n     List<ShowTimeSeriesResult> timeseriesList = showTimeseries(showTimeSeriesPlan, context);\n-    return QueryUtils.getQueryDataSet(timeseriesList, showTimeSeriesPlan, context);\n+    return new ShowTimeseriesDataSet(showTimeSeriesPlan, context, timeseriesList);\n   }\n \n   protected List<ShowTimeSeriesResult> showTimeseries(ShowTimeSeriesPlan plan, QueryContext context)", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE1MDkxMw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493150913", "bodyText": "i think that  it can be initialized in the constructor", "author": "liutaohua", "createdAt": "2020-09-23T02:09:37Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeseriesDataSet.java", "diffHunk": "@@ -19,44 +19,123 @@\n \n package org.apache.iotdb.db.query.dataset;\n \n-import static org.apache.iotdb.db.utils.QueryUtils.transferShowTimeSeriesResultToRecordList;\n-\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_ATTRIBUTE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_STORAGE_GROUP;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TAG;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ALIAS;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_COMPRESSION;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_DATATYPE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ENCODING;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.metadata.PartialPath;\n import org.apache.iotdb.db.qp.physical.sys.ShowTimeSeriesPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ShowTimeseriesDataSet extends QueryDataSet {\n \n   private static final Logger logger = LoggerFactory.getLogger(ShowTimeseriesDataSet.class);\n \n-\n   private final ShowTimeSeriesPlan plan;\n   private List<RowRecord> result = new ArrayList<>();\n   private int index = 0;\n   private QueryContext context;\n+  private List<ShowTimeSeriesResult> timeseriesList;\n+  private boolean hasSetRecord;\n \n   public boolean hasLimit = true;\n \n-  public ShowTimeseriesDataSet(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n-    super(new ArrayList<>(paths), dataTypes);\n+  private static Path[] resourcePaths = {new PartialPath(COLUMN_TIMESERIES, false),\n+      new PartialPath(COLUMN_TIMESERIES_ALIAS, false), new PartialPath(COLUMN_STORAGE_GROUP, false),\n+      new PartialPath(COLUMN_TIMESERIES_DATATYPE, false), new PartialPath(COLUMN_TIMESERIES_ENCODING, false),\n+      new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false), new PartialPath(COLUMN_TAG, false),\n+      new PartialPath(COLUMN_ATTRIBUTE, false)};\n+  private static TSDataType[] resourceTypes = {TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT,\n+      TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT};\n+\n+  public ShowTimeseriesDataSet(ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context,\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    super(Arrays.asList(resourcePaths), Arrays.asList(resourceTypes));\n     this.plan = showTimeSeriesPlan;\n     this.context = context;\n+    this.timeseriesList = timeseriesList;\n+    this.hasSetRecord = false;\n+  }\n+\n+  public QueryDataSet getQueryDataSet() {\n+    hasLimit = plan.hasLimit();", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE1MzU3MA==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493153570", "bodyText": "duplicate code, transferShowTimeSeriesResultToRecordList and getQueryDataSet", "author": "liutaohua", "createdAt": "2020-09-23T02:14:05Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeseriesDataSet.java", "diffHunk": "@@ -19,44 +19,123 @@\n \n package org.apache.iotdb.db.query.dataset;\n \n-import static org.apache.iotdb.db.utils.QueryUtils.transferShowTimeSeriesResultToRecordList;\n-\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_ATTRIBUTE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_STORAGE_GROUP;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TAG;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ALIAS;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_COMPRESSION;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_DATATYPE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ENCODING;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.metadata.PartialPath;\n import org.apache.iotdb.db.qp.physical.sys.ShowTimeSeriesPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ShowTimeseriesDataSet extends QueryDataSet {\n \n   private static final Logger logger = LoggerFactory.getLogger(ShowTimeseriesDataSet.class);\n \n-\n   private final ShowTimeSeriesPlan plan;\n   private List<RowRecord> result = new ArrayList<>();\n   private int index = 0;\n   private QueryContext context;\n+  private List<ShowTimeSeriesResult> timeseriesList;\n+  private boolean hasSetRecord;\n \n   public boolean hasLimit = true;\n \n-  public ShowTimeseriesDataSet(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n-    super(new ArrayList<>(paths), dataTypes);\n+  private static Path[] resourcePaths = {new PartialPath(COLUMN_TIMESERIES, false),\n+      new PartialPath(COLUMN_TIMESERIES_ALIAS, false), new PartialPath(COLUMN_STORAGE_GROUP, false),\n+      new PartialPath(COLUMN_TIMESERIES_DATATYPE, false), new PartialPath(COLUMN_TIMESERIES_ENCODING, false),\n+      new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false), new PartialPath(COLUMN_TAG, false),\n+      new PartialPath(COLUMN_ATTRIBUTE, false)};\n+  private static TSDataType[] resourceTypes = {TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT,\n+      TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT};\n+\n+  public ShowTimeseriesDataSet(ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context,\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    super(Arrays.asList(resourcePaths), Arrays.asList(resourceTypes));\n     this.plan = showTimeSeriesPlan;\n     this.context = context;\n+    this.timeseriesList = timeseriesList;\n+    this.hasSetRecord = false;\n+  }\n+\n+  public QueryDataSet getQueryDataSet() {\n+    hasLimit = plan.hasLimit();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3MDMzMw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493170333", "bodyText": "i think that this code can be optimizing:\n\nTake the data directly from the MManager and initialize it in the constructor\nif the total amount of data is less than the fetchSize, which means there is no more data, reducing the access to the MManager.\n\n\nwhen hasLimit = false, limit was means fetchSize\n\n\nif index == result.size()== fetchSize, get data from MManager again.", "author": "liutaohua", "createdAt": "2020-09-23T03:08:18Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeseriesDataSet.java", "diffHunk": "@@ -19,44 +19,123 @@\n \n package org.apache.iotdb.db.query.dataset;\n \n-import static org.apache.iotdb.db.utils.QueryUtils.transferShowTimeSeriesResultToRecordList;\n-\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_ATTRIBUTE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_STORAGE_GROUP;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TAG;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ALIAS;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_COMPRESSION;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_DATATYPE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ENCODING;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.metadata.PartialPath;\n import org.apache.iotdb.db.qp.physical.sys.ShowTimeSeriesPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ShowTimeseriesDataSet extends QueryDataSet {\n \n   private static final Logger logger = LoggerFactory.getLogger(ShowTimeseriesDataSet.class);\n \n-\n   private final ShowTimeSeriesPlan plan;\n   private List<RowRecord> result = new ArrayList<>();\n   private int index = 0;\n   private QueryContext context;\n+  private List<ShowTimeSeriesResult> timeseriesList;\n+  private boolean hasSetRecord;\n \n   public boolean hasLimit = true;\n \n-  public ShowTimeseriesDataSet(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n-    super(new ArrayList<>(paths), dataTypes);\n+  private static Path[] resourcePaths = {new PartialPath(COLUMN_TIMESERIES, false),\n+      new PartialPath(COLUMN_TIMESERIES_ALIAS, false), new PartialPath(COLUMN_STORAGE_GROUP, false),\n+      new PartialPath(COLUMN_TIMESERIES_DATATYPE, false), new PartialPath(COLUMN_TIMESERIES_ENCODING, false),\n+      new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false), new PartialPath(COLUMN_TAG, false),\n+      new PartialPath(COLUMN_ATTRIBUTE, false)};\n+  private static TSDataType[] resourceTypes = {TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT,\n+      TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT};\n+\n+  public ShowTimeseriesDataSet(ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context,\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    super(Arrays.asList(resourcePaths), Arrays.asList(resourceTypes));\n     this.plan = showTimeSeriesPlan;\n     this.context = context;\n+    this.timeseriesList = timeseriesList;\n+    this.hasSetRecord = false;\n+  }\n+\n+  public QueryDataSet getQueryDataSet() {\n+    hasLimit = plan.hasLimit();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);\n+      updateRecord(record, result.getName());\n+      updateRecord(record, result.getAlias());\n+      updateRecord(record, result.getSgName());\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());\n+      updateRecord(record, result.getTag());\n+      updateRecord(record, result.getAttribute());\n+      putRecord(record);\n+    }\n+    return this;\n+  }\n+\n+  public List<RowRecord> transferShowTimeSeriesResultToRecordList(\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    List<RowRecord> records = new ArrayList<>();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);\n+      updateRecord(record, result.getName());\n+      updateRecord(record, result.getAlias());\n+      updateRecord(record, result.getSgName());\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());\n+      updateRecord(record, result.getTag());\n+      updateRecord(record, result.getAttribute());\n+      records.add(record);\n+    }\n+    return records;\n+  }\n+\n+  private void updateRecord(RowRecord record, Map<String, String> map) {\n+    String text = map.entrySet().stream()\n+        .map(e -> \"\\\"\" + e.getKey() + \"\\\"\" + \":\" + \"\\\"\" + e.getValue() + \"\\\"\")\n+        .collect(Collectors.joining(\",\"));\n+\n+    updateRecord(record, text.length() == 0 ? null : \"{\" + text + \"}\");\n+  }\n+\n+  private void updateRecord(RowRecord record, String s) {\n+    if (s == null) {\n+      record.addField(null);\n+      return;\n+    }\n+    Field field = new Field(TSDataType.TEXT);\n+    field.setBinaryV(new Binary(s));\n+    record.addField(field);\n   }\n \n   @Override\n   protected boolean hasNextWithoutConstraint() throws IOException {\n+    if (!hasSetRecord) {", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE3MDg1Mw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493170853", "bodyText": "putRecord method should also be modified to private", "author": "liutaohua", "createdAt": "2020-09-23T03:10:36Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeseriesDataSet.java", "diffHunk": "@@ -19,44 +19,123 @@\n \n package org.apache.iotdb.db.query.dataset;\n \n-import static org.apache.iotdb.db.utils.QueryUtils.transferShowTimeSeriesResultToRecordList;\n-\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_ATTRIBUTE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_STORAGE_GROUP;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TAG;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ALIAS;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_COMPRESSION;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_DATATYPE;\n+import static org.apache.iotdb.db.conf.IoTDBConstant.COLUMN_TIMESERIES_ENCODING;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.iotdb.db.exception.metadata.MetadataException;\n import org.apache.iotdb.db.metadata.MManager;\n import org.apache.iotdb.db.metadata.PartialPath;\n import org.apache.iotdb.db.qp.physical.sys.ShowTimeSeriesPlan;\n import org.apache.iotdb.db.query.context.QueryContext;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n+import org.apache.iotdb.tsfile.utils.Binary;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ShowTimeseriesDataSet extends QueryDataSet {\n \n   private static final Logger logger = LoggerFactory.getLogger(ShowTimeseriesDataSet.class);\n \n-\n   private final ShowTimeSeriesPlan plan;\n   private List<RowRecord> result = new ArrayList<>();\n   private int index = 0;\n   private QueryContext context;\n+  private List<ShowTimeSeriesResult> timeseriesList;\n+  private boolean hasSetRecord;\n \n   public boolean hasLimit = true;\n \n-  public ShowTimeseriesDataSet(List<PartialPath> paths, List<TSDataType> dataTypes,\n-      ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context) {\n-    super(new ArrayList<>(paths), dataTypes);\n+  private static Path[] resourcePaths = {new PartialPath(COLUMN_TIMESERIES, false),\n+      new PartialPath(COLUMN_TIMESERIES_ALIAS, false), new PartialPath(COLUMN_STORAGE_GROUP, false),\n+      new PartialPath(COLUMN_TIMESERIES_DATATYPE, false), new PartialPath(COLUMN_TIMESERIES_ENCODING, false),\n+      new PartialPath(COLUMN_TIMESERIES_COMPRESSION, false), new PartialPath(COLUMN_TAG, false),\n+      new PartialPath(COLUMN_ATTRIBUTE, false)};\n+  private static TSDataType[] resourceTypes = {TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT,\n+      TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT, TSDataType.TEXT};\n+\n+  public ShowTimeseriesDataSet(ShowTimeSeriesPlan showTimeSeriesPlan, QueryContext context,\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    super(Arrays.asList(resourcePaths), Arrays.asList(resourceTypes));\n     this.plan = showTimeSeriesPlan;\n     this.context = context;\n+    this.timeseriesList = timeseriesList;\n+    this.hasSetRecord = false;\n+  }\n+\n+  public QueryDataSet getQueryDataSet() {\n+    hasLimit = plan.hasLimit();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);\n+      updateRecord(record, result.getName());\n+      updateRecord(record, result.getAlias());\n+      updateRecord(record, result.getSgName());\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());\n+      updateRecord(record, result.getTag());\n+      updateRecord(record, result.getAttribute());\n+      putRecord(record);\n+    }\n+    return this;\n+  }\n+\n+  public List<RowRecord> transferShowTimeSeriesResultToRecordList(\n+      List<ShowTimeSeriesResult> timeseriesList) {\n+    List<RowRecord> records = new ArrayList<>();\n+    for (ShowTimeSeriesResult result : timeseriesList) {\n+      RowRecord record = new RowRecord(0);\n+      updateRecord(record, result.getName());\n+      updateRecord(record, result.getAlias());\n+      updateRecord(record, result.getSgName());\n+      updateRecord(record, result.getDataType().toString());\n+      updateRecord(record, result.getEncoding().toString());\n+      updateRecord(record, result.getCompressor().toString());\n+      updateRecord(record, result.getTag());\n+      updateRecord(record, result.getAttribute());\n+      records.add(record);\n+    }\n+    return records;\n+  }\n+\n+  private void updateRecord(RowRecord record, Map<String, String> map) {\n+    String text = map.entrySet().stream()\n+        .map(e -> \"\\\"\" + e.getKey() + \"\\\"\" + \":\" + \"\\\"\" + e.getValue() + \"\\\"\")\n+        .collect(Collectors.joining(\",\"));\n+\n+    updateRecord(record, text.length() == 0 ? null : \"{\" + text + \"}\");\n+  }\n+\n+  private void updateRecord(RowRecord record, String s) {", "originalCommit": "5793bc75705e532dde7ec3fabceafb339d6887a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "567eb58998773ed2818cd6cea72827a3c612b105", "url": "https://github.com/apache/iotdb/commit/567eb58998773ed2818cd6cea72827a3c612b105", "message": "edit", "committedDate": "2020-09-23T06:21:46Z", "type": "commit"}, {"oid": "e5e8948b3a2439f5ad33aedfcc0ceb3d58ad1125", "url": "https://github.com/apache/iotdb/commit/e5e8948b3a2439f5ad33aedfcc0ceb3d58ad1125", "message": "move to ShowTimeseriesDataSet", "committedDate": "2020-09-23T07:46:50Z", "type": "forcePushed"}, {"oid": "7309a50567eba7f009c1b858899af4cf2e6479d1", "url": "https://github.com/apache/iotdb/commit/7309a50567eba7f009c1b858899af4cf2e6479d1", "message": "move to ShowTimeseriesDataSet", "committedDate": "2020-09-23T07:49:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyMzU0Mw==", "url": "https://github.com/apache/iotdb/pull/1731#discussion_r493323543", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String COLUMN_TAG = \"tags\";\n          \n          \n            \n              public static final String COLUMN_ATTRIBUTE = \"attributes\";\n          \n          \n            \n              public static final String COLUMN_TAGS = \"tags\";\n          \n          \n            \n              public static final String COLUMN_ATTRIBUTES = \"attributes\";", "author": "HTHou", "createdAt": "2020-09-23T08:45:05Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConstant.java", "diffHunk": "@@ -70,6 +70,8 @@ private IoTDBConstant() {\n   public static final String COLUMN_DEVICES = \"devices\";\n   public static final String COLUMN_COLUMN = \"column\";\n   public static final String COLUMN_COUNT = \"count\";\n+  public static final String COLUMN_TAG = \"tags\";\n+  public static final String COLUMN_ATTRIBUTE = \"attributes\";", "originalCommit": "7309a50567eba7f009c1b858899af4cf2e6479d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f7d3f85dc1dd9133566d36a275c2fad93c8b4ca", "url": "https://github.com/apache/iotdb/commit/1f7d3f85dc1dd9133566d36a275c2fad93c8b4ca", "message": "move to ShowTimeseriesDataSet, changed name", "committedDate": "2020-09-23T09:11:28Z", "type": "commit"}, {"oid": "1f7d3f85dc1dd9133566d36a275c2fad93c8b4ca", "url": "https://github.com/apache/iotdb/commit/1f7d3f85dc1dd9133566d36a275c2fad93c8b4ca", "message": "move to ShowTimeseriesDataSet, changed name", "committedDate": "2020-09-23T09:11:28Z", "type": "forcePushed"}, {"oid": "2688e3cc814f62f7f8a05985c146c2cad9468b85", "url": "https://github.com/apache/iotdb/commit/2688e3cc814f62f7f8a05985c146c2cad9468b85", "message": "Merge branch 'master' into master_output_format_tags_attributes", "committedDate": "2020-09-24T08:29:26Z", "type": "commit"}]}