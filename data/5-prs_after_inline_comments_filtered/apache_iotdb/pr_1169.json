{"pr_number": 1169, "pr_title": "Premerge for the distributed version", "pr_createdAt": "2020-05-08T04:29:03Z", "pr_url": "https://github.com/apache/iotdb/pull/1169", "timeline": [{"oid": "9410ce29f84ad6ffb3923979783294e389384717", "url": "https://github.com/apache/iotdb/commit/9410ce29f84ad6ffb3923979783294e389384717", "message": "premerge for the distributed version", "committedDate": "2020-05-08T04:27:47Z", "type": "commit"}, {"oid": "380874c7f27c90b9ae0ead44a6a3ae164413dd91", "url": "https://github.com/apache/iotdb/commit/380874c7f27c90b9ae0ead44a6a3ae164413dd91", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "committedDate": "2020-05-08T08:11:34Z", "type": "commit"}, {"oid": "ba7e7632234937baea8fb3e1a5a25c569150e64d", "url": "https://github.com/apache/iotdb/commit/ba7e7632234937baea8fb3e1a5a25c569150e64d", "message": "Merge branch 'master' into cluster_premerge", "committedDate": "2020-05-08T11:18:23Z", "type": "commit"}, {"oid": "cb8cef7fe2ccd34f104f213b5c6c8b83b85f8e6c", "url": "https://github.com/apache/iotdb/commit/cb8cef7fe2ccd34f104f213b5c6c8b83b85f8e6c", "message": "fix align", "committedDate": "2020-05-08T11:30:55Z", "type": "commit"}, {"oid": "b674ea3b96b85796f6c24ee2cc692a01c885f296", "url": "https://github.com/apache/iotdb/commit/b674ea3b96b85796f6c24ee2cc692a01c885f296", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "committedDate": "2020-05-09T01:59:02Z", "type": "commit"}, {"oid": "01f59248c21200bdec8d9ed4e3241aa739646644", "url": "https://github.com/apache/iotdb/commit/01f59248c21200bdec8d9ed4e3241aa739646644", "message": "Merge branch 'master' into cluster_premerge", "committedDate": "2020-05-11T01:06:36Z", "type": "commit"}, {"oid": "c688dffe23c5429f17a8208f4f52764bc0b87a5a", "url": "https://github.com/apache/iotdb/commit/c688dffe23c5429f17a8208f4f52764bc0b87a5a", "message": "Merge branch 'master' into cluster_premerge", "committedDate": "2020-05-12T01:44:10Z", "type": "commit"}, {"oid": "0e884f7641b81b156068160b456f82f9bcfbb520", "url": "https://github.com/apache/iotdb/commit/0e884f7641b81b156068160b456f82f9bcfbb520", "message": "fix sonar issues", "committedDate": "2020-05-12T02:02:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0OTM4Mg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r424249382", "bodyText": "why set it as true?", "author": "jixuan1989", "createdAt": "2020-05-13T08:06:16Z", "path": "jdbc/src/main/java/org/apache/iotdb/jdbc/Config.java", "diffHunk": "@@ -52,6 +52,6 @@ private Config(){}\n \n   public static final String JDBC_DRIVER_NAME = \"org.apache.iotdb.jdbc.IoTDBDriver\";\n \n-  public static boolean rpcThriftCompressionEnable = false;\n+  public static boolean rpcThriftCompressionEnable = true;", "originalCommit": "0e884f7641b81b156068160b456f82f9bcfbb520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMDQxOA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r424830418", "bodyText": "It is said in thrift that when the thrift structures are large and sent frequently, it will be overall better to enable compression, so I made the default compression true.", "author": "jt2594838", "createdAt": "2020-05-14T02:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0OTM4Mg=="}], "type": "inlineReview"}, {"oid": "76acdd59ee12c227464659f142056028167a988e", "url": "https://github.com/apache/iotdb/commit/76acdd59ee12c227464659f142056028167a988e", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tsession/src/main/java/org/apache/iotdb/session/Session.java", "committedDate": "2020-05-14T02:10:18Z", "type": "commit"}, {"oid": "448c5b80f3bba7a521c8700b98073488c14399b8", "url": "https://github.com/apache/iotdb/commit/448c5b80f3bba7a521c8700b98073488c14399b8", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/engine/upgrade/UpgradeTask.java\n#\tserver/src/main/java/org/apache/iotdb/db/engine/version/SimpleFileVersionController.java", "committedDate": "2020-05-18T02:42:06Z", "type": "commit"}, {"oid": "425ec9dabebeda7ec9e0960ac5975dbbfb21d6de", "url": "https://github.com/apache/iotdb/commit/425ec9dabebeda7ec9e0960ac5975dbbfb21d6de", "message": "fix sonar isssues", "committedDate": "2020-05-18T03:57:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzODA0OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426338048", "bodyText": "Should we change rpcThriftCompressionEnable and other changed configs in server/src/assembly/resources/conf/iotdb-engine.property as well?", "author": "HTHou", "createdAt": "2020-05-18T02:08:33Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -96,7 +96,7 @@\n   /**\n    * whether to use thrift compression.\n    */\n-  private boolean rpcThriftCompressionEnable = false;\n+  private boolean rpcThriftCompressionEnable = true;", "originalCommit": "76acdd59ee12c227464659f142056028167a988e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NDQwMQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426994401", "bodyText": "Someone questioned this change so I am waiting for further experimental reports. And I think it is okay as long as the config files and config classes are consistent separately.", "author": "jt2594838", "createdAt": "2020-05-19T02:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzODA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0MTMzNw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426441337", "bodyText": "It will be better if you update the docs/UserGuide/4-Client/7-Status Codes.md file as well.", "author": "HTHou", "createdAt": "2020-05-18T08:08:27Z", "path": "service-rpc/src/main/java/org/apache/iotdb/rpc/TSStatusCode.java", "diffHunk": "@@ -63,10 +63,18 @@\n   READ_ONLY_SYSTEM_ERROR(502),\n   DISK_SPACE_INSUFFICIENT_ERROR(503),\n   START_UP_ERROR(504),\n+\n   WRONG_LOGIN_PASSWORD_ERROR(600),\n   NOT_LOGIN_ERROR(601),\n   NO_PERMISSION_ERROR(602),\n   UNINITIALIZED_AUTH_ERROR(603),\n+\n+  PARTITION_NOT_READY(700),\n+  TIME_OUT(701),\n+  NO_LEADER(702),\n+  UNSUPPORTED_OPERATION(703),\n+  NODE_READ_ONLY(704),\n+", "originalCommit": "425ec9dabebeda7ec9e0960ac5975dbbfb21d6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NTkyNA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426995924", "bodyText": "The same as above: this will be added when the distributed version is fully ready.", "author": "jt2594838", "createdAt": "2020-05-19T02:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0MTMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0ODI3Nw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426448277", "bodyText": "There are some number conflicts.", "author": "HTHou", "createdAt": "2020-05-18T08:20:02Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/constant/SQLConstant.java", "diffHunk": "@@ -138,6 +138,8 @@ private SQLConstant() {\n   public static final int TOK_COUNT_TIMESERIES = 77;\n   public static final int TOK_COUNT_NODE_TIMESERIES = 78;\n   public static final int TOK_COUNT_NODES = 79;\n+  public static final int TOK_LOAD_CONFIGURATION_GLOBAL = 80;\n+  public static final int TOK_LOAD_CONFIGURATION_LOCAL = 81;\n \n   public static final int TOK_METADATA_ALTER = 80;\n ", "originalCommit": "425ec9dabebeda7ec9e0960ac5975dbbfb21d6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NjY4OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426996688", "bodyText": "fixed", "author": "jt2594838", "createdAt": "2020-05-19T02:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0ODI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1MTc0Mg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426451742", "bodyText": "There are a lot of format changes in this file. I don't think it's necessary.", "author": "HTHou", "createdAt": "2020-05-18T08:25:42Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -163,7 +165,7 @@ public PlanExecutor() throws QueryProcessException {\n \n   @Override\n   public QueryDataSet processQuery(PhysicalPlan queryPlan, QueryContext context)\n-      throws IOException, StorageEngineException, QueryFilterOptimizationException,\n+          throws IOException, StorageEngineException, QueryFilterOptimizationException,", "originalCommit": "425ec9dabebeda7ec9e0960ac5975dbbfb21d6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NjkxMw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426996913", "bodyText": "Reformated.", "author": "jt2594838", "createdAt": "2020-05-19T02:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1MTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDc2MQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426454761", "bodyText": "Format\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  queryDataSource = QueryResourceManager.getInstance()\n          \n          \n            \n                      .getQueryDataSource(path, context, timeFilter);\n          \n          \n            \n                queryDataSource = QueryResourceManager.getInstance()\n          \n          \n            \n                    .getQueryDataSource(path, context, timeFilter);", "author": "HTHou", "createdAt": "2020-05-18T08:30:13Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/groupby/LocalGroupByExecutor.java", "diffHunk": "@@ -49,11 +49,13 @@\n   private List<AggregateResult> results = new ArrayList<>();\n   private TimeRange timeRange;\n \n+  private QueryDataSource queryDataSource;\n+\n   public LocalGroupByExecutor(Path path, Set<String> allSensors, TSDataType dataType,\n       QueryContext context, Filter timeFilter, TsFileFilter fileFilter)\n       throws StorageEngineException, QueryProcessException {\n-    QueryDataSource queryDataSource =\n-        QueryResourceManager.getInstance().getQueryDataSource(path, context, timeFilter);\n+      queryDataSource = QueryResourceManager.getInstance()\n+          .getQueryDataSource(path, context, timeFilter);", "originalCommit": "425ec9dabebeda7ec9e0960ac5975dbbfb21d6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NzAzMA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426997030", "bodyText": "Reformated.", "author": "jt2594838", "createdAt": "2020-05-19T02:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDc2MQ=="}], "type": "inlineReview"}, {"oid": "780b426c1c16d61bf33c217face4b2a98ea15c0e", "url": "https://github.com/apache/iotdb/commit/780b426c1c16d61bf33c217face4b2a98ea15c0e", "message": "fix sonar issues", "committedDate": "2020-05-18T09:48:12Z", "type": "commit"}, {"oid": "898cede0b7ba6f2a103ce70f6c94d9a70d0c4f09", "url": "https://github.com/apache/iotdb/commit/898cede0b7ba6f2a103ce70f6c94d9a70d0c4f09", "message": "Update service-rpc/src/main/thrift/cluster.thrift\n\nCo-authored-by: Haonan <hhaonan@outlook.com>", "committedDate": "2020-05-19T02:33:41Z", "type": "commit"}, {"oid": "135b8450ed5a5ec113f3d60bead389f8ad0d56b9", "url": "https://github.com/apache/iotdb/commit/135b8450ed5a5ec113f3d60bead389f8ad0d56b9", "message": "Update service-rpc/src/main/thrift/cluster.thrift\n\nCo-authored-by: Haonan <hhaonan@outlook.com>", "committedDate": "2020-05-19T02:33:58Z", "type": "commit"}, {"oid": "207b2790d5bf7b722957291023333f2fda11ca39", "url": "https://github.com/apache/iotdb/commit/207b2790d5bf7b722957291023333f2fda11ca39", "message": "Update service-rpc/src/main/thrift/cluster.thrift\n\nCo-authored-by: Haonan <hhaonan@outlook.com>", "committedDate": "2020-05-19T02:34:07Z", "type": "commit"}, {"oid": "12b7aece1f98dce538c404cb692fd6d168555db2", "url": "https://github.com/apache/iotdb/commit/12b7aece1f98dce538c404cb692fd6d168555db2", "message": "Update service-rpc/src/main/thrift/cluster.thrift\n\nCo-authored-by: Haonan <hhaonan@outlook.com>", "committedDate": "2020-05-19T02:34:21Z", "type": "commit"}, {"oid": "a22c3b5006063b946a6fda95e21b2d469888295f", "url": "https://github.com/apache/iotdb/commit/a22c3b5006063b946a6fda95e21b2d469888295f", "message": "fix by review", "committedDate": "2020-05-19T02:40:02Z", "type": "commit"}, {"oid": "3892e24a979d931359ffc3869674130e152e8ac1", "url": "https://github.com/apache/iotdb/commit/3892e24a979d931359ffc3869674130e152e8ac1", "message": "Merge branch 'cluster_premerge' of https://github.com/apache/incubator-iotdb into cluster_premerge", "committedDate": "2020-05-19T02:40:45Z", "type": "commit"}, {"oid": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "url": "https://github.com/apache/iotdb/commit/495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/qp/constant/SQLConstant.java", "committedDate": "2020-05-19T02:41:53Z", "type": "commit"}, {"oid": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "url": "https://github.com/apache/iotdb/commit/126a946cbaa220f108894020eb5ccdcc1c0698a7", "message": "Merge branch 'master' into cluster_premerge", "committedDate": "2020-05-20T02:25:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NjYxOA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426386618", "bodyText": "there is a field enableRPCCompression, better to change it to true", "author": "qiaojialin", "createdAt": "2020-05-18T06:04:55Z", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -105,7 +107,7 @@ public Session(String host, int port, String username, String password, int fetc\n   }\n \n   public synchronized void open() throws IoTDBConnectionException {\n-    open(false, Config.DEFAULT_TIMEOUT_MS);\n+    open(true, Config.DEFAULT_TIMEOUT_MS);", "originalCommit": "425ec9dabebeda7ec9e0960ac5975dbbfb21d6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDkzOQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427944939", "bodyText": "changed", "author": "jt2594838", "createdAt": "2020-05-20T11:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NjYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MjUwMQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427372501", "bodyText": "in other methods the lock is used, but here synchronized this object, is there a concurrent error when using accessor?", "author": "qiaojialin", "createdAt": "2020-05-19T15:00:14Z", "path": "server/src/main/java/org/apache/iotdb/db/auth/role/BasicRoleManager.java", "diffHunk": "@@ -167,4 +168,21 @@ public void reset() {\n     rtlist.sort(null);\n     return rtlist;\n   }\n+\n+  @Override\n+  public void replaceAllRoles(Map<String, Role> roles) throws AuthException {\n+    synchronized (this) {", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NzM3OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427947378", "bodyText": "No, when the function is called, the node will not serve other requests temporarily. This is only for the concurrent safety of calling the two methods.\nAnd, the lock used in other places is a HashLock and not applicable in this situation.", "author": "jt2594838", "createdAt": "2020-05-20T11:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MjUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3Mjg5NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427372894", "bodyText": "the same with BasicRoleManager", "author": "qiaojialin", "createdAt": "2020-05-19T15:00:43Z", "path": "server/src/main/java/org/apache/iotdb/db/auth/user/BasicUserManager.java", "diffHunk": "@@ -310,4 +311,23 @@ public void setUserUseWaterMark(String username, boolean useWaterMark) throws Au\n       throw new AuthException(e);\n     }\n   }\n+\n+\n+  @Override\n+  public void replaceAllUsers(Map<String, User> users) throws AuthException {\n+    synchronized (this) {", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NzQ4NQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427947485", "bodyText": "See above.", "author": "jt2594838", "createdAt": "2020-05-20T11:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3Mjg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4Mzc2Mg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427683762", "bodyText": "retry?", "author": "qiaojialin", "createdAt": "2020-05-20T01:01:05Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/modification/ModificationFile.java", "diffHunk": "@@ -125,4 +133,34 @@ public void remove() throws IOException {\n     FSFactoryProducer.getFSFactory().getFile(filePath).delete();\n   }\n \n+  public boolean exists() {\n+    return new File(filePath).exists();\n+  }\n+\n+  /**\n+   * Create a hardlink for the modification file.\n+   * The hardlink with have a suffix like \".{sysTime}_{randomLong}\"\n+   * @return a new ModificationFile with its path changed to the hardlink, or null if the origin\n+   * file does not exist or the hardlink cannot be created.\n+   */\n+  public ModificationFile createHardlink() {\n+    if (!exists()) {\n+      return null;\n+    }\n+\n+    while (true) {\n+      String hardlinkSuffix = \".\" + System.currentTimeMillis() + \"_\" + random.nextLong();\n+      File hardlink = new File(filePath + hardlinkSuffix);\n+\n+      try {\n+        Files.createLink(Paths.get(hardlink.getAbsolutePath()), Paths.get(filePath));\n+        return new ModificationFile(hardlink.getAbsolutePath());\n+      } catch (FileAlreadyExistsException e) {\n+        // retry a different name if the file is already created", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODA4Mw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427948083", "bodyText": "The name is generated randomly, so continuing is a retry.", "author": "jt2594838", "createdAt": "2020-05-20T11:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4Mzc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NzA1OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427697058", "bodyText": "how do we handle if trylock failed? ignore?", "author": "qiaojialin", "createdAt": "2020-05-20T01:51:43Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1875,35 +1918,52 @@ public void removeFullyOverlapFiles(TsFileResource resource) {\n     closeQueryLock.writeLock().lock();\n     try {\n       Iterator<TsFileResource> iterator = sequenceFileTreeSet.iterator();\n-      removeFullyOverlapFiles(resource, iterator);\n+      removeFullyOverlapFiles(resource, iterator, true);\n \n       iterator = unSequenceFileList.iterator();\n-      removeFullyOverlapFiles(resource, iterator);\n+      removeFullyOverlapFiles(resource, iterator, false);\n     } finally {\n       closeQueryLock.writeLock().unlock();\n       writeUnlock();\n     }\n   }\n \n-  private void removeFullyOverlapFiles(TsFileResource resource, Iterator<TsFileResource> iterator) {\n+  private void removeFullyOverlapFiles(TsFileResource newTsFile, Iterator<TsFileResource> iterator\n+      , boolean isSeq) {\n     while (iterator.hasNext()) {\n-      TsFileResource seqFile = iterator.next();\n-      if (resource.getHistoricalVersions().containsAll(seqFile.getHistoricalVersions())\n-          && !resource.getHistoricalVersions().equals(seqFile.getHistoricalVersions())\n-          && seqFile.getWriteQueryLock().writeLock().tryLock()) {\n+      TsFileResource existingTsFile = iterator.next();\n+      if (newTsFile.getHistoricalVersions().containsAll(existingTsFile.getHistoricalVersions())\n+          && !newTsFile.getHistoricalVersions().equals(existingTsFile.getHistoricalVersions())\n+          && existingTsFile.tryWriteLock()) {", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODYxMA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427948610", "bodyText": "Yes, and we will leave this for merge.", "author": "jt2594838", "createdAt": "2020-05-20T11:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NzA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcxNjMwMw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r429716303", "bodyText": "where to leave the message?", "author": "jixuan1989", "createdAt": "2020-05-25T03:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NzA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0MTk3Ng==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r430141976", "bodyText": "comment added", "author": "jt2594838", "createdAt": "2020-05-26T03:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NzA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NzQ3Ng==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427697476", "bodyText": "this may take a long time, better add javadoc", "author": "qiaojialin", "createdAt": "2020-05-20T01:53:22Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1875,35 +1918,52 @@ public void removeFullyOverlapFiles(TsFileResource resource) {\n     closeQueryLock.writeLock().lock();\n     try {\n       Iterator<TsFileResource> iterator = sequenceFileTreeSet.iterator();\n-      removeFullyOverlapFiles(resource, iterator);\n+      removeFullyOverlapFiles(resource, iterator, true);\n \n       iterator = unSequenceFileList.iterator();\n-      removeFullyOverlapFiles(resource, iterator);\n+      removeFullyOverlapFiles(resource, iterator, false);\n     } finally {\n       closeQueryLock.writeLock().unlock();\n       writeUnlock();\n     }\n   }\n \n-  private void removeFullyOverlapFiles(TsFileResource resource, Iterator<TsFileResource> iterator) {\n+  private void removeFullyOverlapFiles(TsFileResource newTsFile, Iterator<TsFileResource> iterator\n+      , boolean isSeq) {\n     while (iterator.hasNext()) {\n-      TsFileResource seqFile = iterator.next();\n-      if (resource.getHistoricalVersions().containsAll(seqFile.getHistoricalVersions())\n-          && !resource.getHistoricalVersions().equals(seqFile.getHistoricalVersions())\n-          && seqFile.getWriteQueryLock().writeLock().tryLock()) {\n+      TsFileResource existingTsFile = iterator.next();\n+      if (newTsFile.getHistoricalVersions().containsAll(existingTsFile.getHistoricalVersions())\n+          && !newTsFile.getHistoricalVersions().equals(existingTsFile.getHistoricalVersions())\n+          && existingTsFile.tryWriteLock()) {\n         try {\n-          iterator.remove();\n-          seqFile.remove();\n+          removeFullyOverlapFile(existingTsFile, iterator, isSeq);\n         } catch (Exception e) {\n           logger.error(\"Something gets wrong while removing FullyOverlapFiles \", e);\n           throw e;\n         } finally {\n-          seqFile.getWriteQueryLock().writeLock().unlock();\n+          existingTsFile.writeUnlock();\n         }\n       }\n     }\n   }\n \n+  private void removeFullyOverlapFile(TsFileResource tsFileResource, Iterator<TsFileResource> iterator\n+      , boolean isSeq) {\n+    if (!tsFileResource.isClosed()) {\n+      // also remove the TsFileProcessor if the overlapped file is not closed\n+      long timePartition = tsFileResource.getTimePartition();\n+      Map<Long, TsFileProcessor> fileProcessorMap = isSeq ? workSequenceTsFileProcessors :\n+          workUnsequenceTsFileProcessors;\n+      TsFileProcessor tsFileProcessor = fileProcessorMap.get(timePartition);\n+      if (tsFileProcessor != null && tsFileProcessor.getTsFileResource() == tsFileResource) {\n+        tsFileProcessor.syncClose();", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0OTU4NQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427949585", "bodyText": "The process itself is a long-term process, so I do not see the point.", "author": "jt2594838", "createdAt": "2020-05-20T11:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NzQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcxODM3MA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r429718370", "bodyText": "added", "author": "jixuan1989", "createdAt": "2020-05-25T03:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NzQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzQ0MA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427727440", "bodyText": "it is obviously used...", "author": "qiaojialin", "createdAt": "2020-05-20T03:57:39Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -322,7 +323,13 @@ protected QueryDataSet processDataQuery(QueryPlan queryPlan, QueryContext contex\n     return queryDataSet;\n   }\n \n-  private QueryDataSet processShowQuery(ShowPlan showPlan)\n+  @SuppressWarnings(\"unused\")\n+  protected AlignByDeviceDataSet getAlignByDeviceDataSet(AlignByDevicePlan plan,", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MDQ2NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427950464", "bodyText": "It is because one of the arguments is not used.", "author": "jt2594838", "createdAt": "2020-05-20T11:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyNzQ0MA=="}], "type": "inlineReview"}, {"oid": "3fa666caabef2aaa9c8583fae74b871369d19b75", "url": "https://github.com/apache/iotdb/commit/3fa666caabef2aaa9c8583fae74b871369d19b75", "message": "fix by review", "committedDate": "2020-05-20T11:58:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTAyOQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426999029", "bodyText": "use the lock field of this class. (writeLock)", "author": "jixuan1989", "createdAt": "2020-05-19T02:47:24Z", "path": "server/src/main/java/org/apache/iotdb/db/auth/user/BasicUserManager.java", "diffHunk": "@@ -310,4 +311,23 @@ public void setUserUseWaterMark(String username, boolean useWaterMark) throws Au\n       throw new AuthException(e);\n     }\n   }\n+\n+\n+  @Override\n+  public void replaceAllUsers(Map<String, User> users) throws AuthException {\n+    synchronized (this) {", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTA5Ng==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426999096", "bodyText": "@neuyilan", "author": "jixuan1989", "createdAt": "2020-05-19T02:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNjAyMA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428406020", "bodyText": "That is a partitioned lock, which only applies to a certain key, not for the total replacement. See the explanation above I have made to qiaojialin, please.", "author": "jt2594838", "createdAt": "2020-05-21T02:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTQ1OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r426999458", "bodyText": "Not sure whether users having \"root\" user.\nIf it has, then initAdmin() in reset() is meaningless.\nIf it does not have, then you have to initAdmin() after this replacement.", "author": "jixuan1989", "createdAt": "2020-05-19T02:49:01Z", "path": "server/src/main/java/org/apache/iotdb/db/auth/user/BasicUserManager.java", "diffHunk": "@@ -310,4 +311,23 @@ public void setUserUseWaterMark(String username, boolean useWaterMark) throws Au\n       throw new AuthException(e);\n     }\n   }\n+\n+\n+  @Override\n+  public void replaceAllUsers(Map<String, User> users) throws AuthException {\n+    synchronized (this) {\n+      reset();\n+      userMap = users;", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNjM3NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428406374", "bodyText": "It does not matter at all. The entire users shall be replaced with the new users, no matter what it used to be or the what the new users are.", "author": "jt2594838", "createdAt": "2020-05-21T02:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5OTQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMjExNw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427012117", "bodyText": "The same to userManager.", "author": "jixuan1989", "createdAt": "2020-05-19T03:40:27Z", "path": "server/src/main/java/org/apache/iotdb/db/auth/role/BasicRoleManager.java", "diffHunk": "@@ -167,4 +168,21 @@ public void reset() {\n     rtlist.sort(null);\n     return rtlist;\n   }\n+\n+  @Override\n+  public void replaceAllRoles(Map<String, Role> roles) throws AuthException {\n+    synchronized (this) {", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNjUyMg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428406522", "bodyText": "See above.", "author": "jt2594838", "createdAt": "2020-05-21T02:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxMjExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Mjk0NQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427472945", "bodyText": "why check null here? is there a bug before?", "author": "jixuan1989", "createdAt": "2020-05-19T17:25:33Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -809,9 +808,10 @@ public void tryToUpdateInsertLastCache(InsertPlan plan, Long latestFlushedTime)\n       for (int i = 0; i < measurementList.length; i++) {\n         // Update cached last value with high priority\n         MNode measurementNode = node.getChild(measurementList[i]);\n-\n-        ((LeafMNode) measurementNode)\n-            .updateCachedLast(plan.composeTimeValuePair(i), true, latestFlushedTime);\n+        if (measurementNode != null) {", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNjc2MQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428406761", "bodyText": "It is because we do not always have MNodes and data on the same node together in the distributed version.", "author": "jt2594838", "createdAt": "2020-05-21T02:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Mjk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NTE5OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427475198", "bodyText": "Long partition, Long version", "author": "jixuan1989", "createdAt": "2020-05-19T17:28:57Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1776,6 +1803,22 @@ public void loadNewTsFile(TsFileResource newTsFileResource) throws LoadFileExcep\n     }\n   }\n \n+  /**\n+   * Set the version in \"partition\" to \"version\" if \"version\" is larger than the current version.\n+   * @param partition\n+   * @param version\n+   */\n+  public void setPartitionFileVersionToMax(long partition, long version) {", "originalCommit": "495685e5bda7386e6f3551e3eba2d11a06c6ee6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNzAzOA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428407038", "bodyText": "I do not see the point.", "author": "jt2594838", "createdAt": "2020-05-21T02:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NTE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkzMTM5NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427931394", "bodyText": "hard to understand the javadoc.\nA tsFileResource is attached to a tsFile,  what is the meaning of \"when IOTDB has the same close file policy as the local one\".", "author": "jixuan1989", "createdAt": "2020-05-20T11:19:16Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -2215,9 +2275,41 @@ public String getStorageGroupName() {\n     return storageGroupName;\n   }\n \n+  /**\n+   * Check if the data of \"tsFileResource\" all exist locally by comparing the historical versions\n+   * in the partition of \"partitionNumber\". This is available only when the IoTDB which generated\n+   * \"tsFileResource\" has the same close file policy as the local one.\n+   * If one of the version in \"tsFileResource\" equals to a version of a working file, false is\n+   * also returned because \"tsFileResource\" may have unwritten data of that file.", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNzc4Mg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428407782", "bodyText": "Please do not ignore the clause \"which generated 'tsFileResource' \".\nA TsFile is not always generated by the local IoTDB instance, and it may be generated by another IoTDB and is sent by the sync module or catch-up in the distributed version.", "author": "jt2594838", "createdAt": "2020-05-21T02:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkzMTM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTYzMw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427945633", "bodyText": "I think we can mark this function as ForCluster, then the parameter tsFileResource  can be called remoteTsFileResource, and then the logic will be much easier to be understood.", "author": "jixuan1989", "createdAt": "2020-05-20T11:47:51Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -2215,9 +2275,41 @@ public String getStorageGroupName() {\n     return storageGroupName;\n   }\n \n+  /**\n+   * Check if the data of \"tsFileResource\" all exist locally by comparing the historical versions\n+   * in the partition of \"partitionNumber\". This is available only when the IoTDB which generated\n+   * \"tsFileResource\" has the same close file policy as the local one.\n+   * If one of the version in \"tsFileResource\" equals to a version of a working file, false is\n+   * also returned because \"tsFileResource\" may have unwritten data of that file.\n+   * @param tsFileResource\n+   * @param partitionNum\n+   * @return true if the historicalVersions of \"tsFileResource\" is a subset of\n+   * partitionDirectFileVersions, or false if it is not a subset and it does not contain any\n+   * version of a working file\n+   */\n   public boolean isFileAlreadyExist(TsFileResource tsFileResource, long partitionNum) {", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwOTg3OQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428409879", "bodyText": "That is its current usage indeed, but it does not mean what it is capable of.\nThe real functionality of this method is to check the existence of a TsFile under the consistency of the versions, and it just happened to serve the distributed module, which does not mean it is constrained only to that use.\nFor example, if we have an apple that is only for eating currently, we do not rename it to \"AppleThatIsOnlyForEating\", because we know that an apple is an apple and it may also be used to make apple juice or something different.", "author": "jt2594838", "createdAt": "2020-05-21T02:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NzQ1OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427947458", "bodyText": "IMPORTANT.\ndon't use the absolute path in a tsfileResource. Otherwise it will be very hard to help users solving online problems.", "author": "jixuan1989", "createdAt": "2020-05-20T11:51:25Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileResource.java", "diffHunk": "@@ -241,6 +244,10 @@ public void serialize() throws IOException {\n           ReadWriteIOUtils.write(historicalVersion, outputStream);\n         }\n       }\n+\n+      if (modFile != null && modFile.exists()) {\n+        ReadWriteIOUtils.write(modFile.getFilePath(), outputStream);", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMDg2OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428410868", "bodyText": "Changed to relative path.", "author": "jt2594838", "createdAt": "2020-05-21T02:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NzQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcxOTY2OQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r429719669", "bodyText": "have you submit your new codes?", "author": "jixuan1989", "createdAt": "2020-05-25T03:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NzQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0Nzc1NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427947754", "bodyText": "will have", "author": "jixuan1989", "createdAt": "2020-05-20T11:52:03Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileResource.java", "diffHunk": "@@ -571,4 +603,56 @@ public long getTimePartitionWithCheck() throws PartitionViolationException {\n     }\n     return partitionId;\n   }\n+\n+  /**\n+   * Create a hardlink for the TsFile and modification file (if exists)\n+   * The hardlink with have a suffix like \".{sysTime}_{randomLong}\"", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTI3OQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428411279", "bodyText": "Fixed.", "author": "jt2594838", "createdAt": "2020-05-21T02:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0Nzc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODIwNg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427948206", "bodyText": "My another concern is, will the historicalVersion set be very large?", "author": "jixuan1989", "createdAt": "2020-05-20T11:52:51Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/TsFileResource.java", "diffHunk": "@@ -571,4 +603,56 @@ public long getTimePartitionWithCheck() throws PartitionViolationException {\n     }\n     return partitionId;\n   }\n+\n+  /**\n+   * Create a hardlink for the TsFile and modification file (if exists)\n+   * The hardlink with have a suffix like \".{sysTime}_{randomLong}\"\n+   * @return a new TsFileResource with its file changed to the hardlink or null the hardlink\n+   * cannot be created.\n+   */\n+  public TsFileResource createHardlink() {\n+    if (!file.exists()) {\n+      return null;\n+    }\n+\n+    TsFileResource newResource;\n+    try {\n+      newResource = new TsFileResource(this);\n+    } catch (IOException e) {\n+      logger.error(\"Cannot create hardlink for {}\", file, e);\n+      return null;\n+    }\n+\n+    while (true) {\n+      String hardlinkSuffix = \".\" + System.currentTimeMillis() + \"_\" + random.nextLong();\n+      File hardlink = new File(file.getAbsolutePath() + hardlinkSuffix);\n+\n+      try {\n+        Files.createLink(Paths.get(hardlink.getAbsolutePath()), Paths.get(file.getAbsolutePath()));\n+        newResource.setFile(hardlink);\n+        if (modFile != null && modFile.exists()) {\n+          newResource.setModFile(modFile.createHardlink());\n+        }\n+        break;\n+      } catch (FileAlreadyExistsException e) {\n+        // retry a different name if the file is already created\n+      } catch (IOException e) {\n+        logger.error(\"Cannot create hardlink for {}\", file, e);\n+        return null;\n+      }\n+    }\n+    return newResource;\n+  }\n+\n+  public synchronized void setModFile(ModificationFile modFile) {\n+    this.modFile = modFile;\n+  }\n+\n+  public long getMaxVersion() {\n+    long maxVersion = 0;\n+    if (historicalVersions != null) {\n+      maxVersion = Collections.max(historicalVersions);", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTk3NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428411974", "bodyText": "How large could it be? A file of several hundred MBs will only have one version, which only takes 8 bytes. Even if several such files are merged into one file of several GBs, the version will not take more than 1 KB.", "author": "jt2594838", "createdAt": "2020-05-21T02:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMDQ1MQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r429720451", "bodyText": "comment left in the source code.", "author": "jixuan1989", "createdAt": "2020-05-25T03:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MjQwNA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427952404", "bodyText": "How about if mRemoteSchemaCache  has no the path?", "author": "jixuan1989", "createdAt": "2020-05-20T12:00:43Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -565,6 +605,14 @@ public TSDataType getSeriesType(String path) throws MetadataException {\n       if (path.equals(SQLConstant.RESERVED_TIME)) {\n         return TSDataType.INT64;\n       }\n+\n+      try {\n+        MeasurementSchema schema = mRemoteSchemaCache.get(path);", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjI2Mg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428412262", "bodyText": "Then the path simply does not exist.", "author": "jt2594838", "createdAt": "2020-05-21T02:32:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTE0OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r429721148", "bodyText": "The correct explanation should be added in the catch code block:\n        // if the mRemoteSchemaCache has no such a path, an IOException will be thrown.\n        // we ignore it to get the type from the local mtree.", "author": "jixuan1989", "createdAt": "2020-05-25T03:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTkxNw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r429721917", "bodyText": "By the way, why not check the local MTree before you check the remote?", "author": "jixuan1989", "createdAt": "2020-05-25T03:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0NzA1Nw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r429747057", "bodyText": "It is okay, but I think it just repeats the code.\nGenerally, the chance that the schema is in the cache is much higher than that it is in the MTree because every node only stores a small part of the schemas, and checking the cache is much cheaper than searching the tree. I wonder where your suggestion comes from.", "author": "jt2594838", "createdAt": "2020-05-25T06:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0OTk4Ng==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r429749986", "bodyText": "I think maybe we need to set the exception type as PathNotExist or PathNotFound in the mRemoteCache.. rather than IOException..", "author": "jixuan1989", "createdAt": "2020-05-25T06:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MjQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MzEyNw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427953127", "bodyText": "why retry?", "author": "jixuan1989", "createdAt": "2020-05-20T12:02:08Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -813,12 +861,33 @@ private boolean match(String fullPath, String[] prefixNodes) {\n     }\n   }\n \n-  public MeasurementSchema getSeriesSchema(String device, String measuremnet)\n+  public MeasurementSchema getSeriesSchema(String device, String measurement)\n       throws MetadataException {\n     lock.readLock().lock();\n     try {\n       InternalMNode node = (InternalMNode) mtree.getNodeByPath(device);\n-      return ((LeafMNode) node.getChild(measuremnet)).getSchema();\n+      MNode leaf = node.getChild(measurement);\n+      if (leaf != null) {\n+        return ((LeafMNode) leaf).getSchema();\n+      } else {\n+        return mRemoteSchemaCache\n+            .get(device + IoTDBConstant.PATH_SEPARATOR + measurement);\n+      }\n+    } catch (PathNotExistException e) {\n+      try {\n+        MeasurementSchema measurementSchema = mRemoteSchemaCache", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjUxOA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428412518", "bodyText": "Because a PathNotExistException could raise when the device node is not found.", "author": "jt2594838", "createdAt": "2020-05-21T02:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MzEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NDg1OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427954858", "bodyText": "hard to understand...", "author": "jixuan1989", "createdAt": "2020-05-20T12:05:33Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -1405,4 +1501,17 @@ public void collectSeries(String startingPath, List<MeasurementSchema> timeserie\n       lock.readLock().unlock();\n     }\n   }\n+\n+  public void cacheSchema(String path, MeasurementSchema schema) {", "originalCommit": "126a946cbaa220f108894020eb5ccdcc1c0698a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjkxOA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428412918", "bodyText": "I think this is very straight forward: you cache the schema of the path into the MManager, just as the name tells you, nothing more nothing less.", "author": "jt2594838", "createdAt": "2020-05-21T02:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1NDg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MTA0MQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427961041", "bodyText": "What is the difference between showTimeseries and showTimeseriesWithIndex ?", "author": "jixuan1989", "createdAt": "2020-05-20T12:16:18Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -523,6 +533,16 @@ private QueryDataSet getQueryDataSet(List<ShowTimeSeriesResult> timeseriesList)\n     return listDataSet;\n   }\n \n+  protected List<ShowTimeSeriesResult> showTimeseries(ShowTimeSeriesPlan plan)\n+      throws MetadataException {\n+    return MManager.getInstance().showTimeseries(plan);\n+  }\n+\n+  protected List<ShowTimeSeriesResult> showTimeseriesWithIndex(ShowTimeSeriesPlan plan)", "originalCommit": "3fa666caabef2aaa9c8583fae74b871369d19b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMzU5NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428413594", "bodyText": "Sorry, I may have rearranged these codes or changed the method privacy, but I am not the person who named this method.", "author": "jt2594838", "createdAt": "2020-05-21T02:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2NDUxMg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427964512", "bodyText": "why create such a method??\nwhy not let the user call lock and unlock method explicitly. @JackieTien97", "author": "jixuan1989", "createdAt": "2020-05-20T12:21:49Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -864,43 +888,78 @@ public void delete(Path path, long timestamp) throws QueryProcessException {\n \n   @Override\n   public void insert(InsertPlan insertPlan) throws QueryProcessException {\n-    MNode node = null;\n     try {\n       String[] measurementList = insertPlan.getMeasurements();\n       String deviceId = insertPlan.getDeviceId();\n-      node = mManager.getDeviceNodeWithAutoCreateAndReadLock(deviceId);\n       String[] strValues = insertPlan.getValues();\n-      MeasurementSchema[] schemas = new MeasurementSchema[measurementList.length];\n-\n-      for (int i = 0; i < measurementList.length; i++) {\n-        String measurement = measurementList[i];\n-        if (!node.hasChild(measurement)) {\n-          if (!IoTDBDescriptor.getInstance().getConfig().isAutoCreateSchemaEnabled()) {\n-            throw new PathNotExistException(deviceId + PATH_SEPARATOR + measurement);\n-          }\n-          TSDataType dataType = TypeInferenceUtils.getPredictedDataType(strValues[i]);\n-          Path path = new Path(deviceId, measurement);\n-          internalCreateTimeseries(path.toString(), dataType);\n-        }\n-        LeafMNode measurementNode = (LeafMNode) node.getChild(measurement);\n-        schemas[i] = measurementNode.getSchema();\n-        // reset measurement to common name instead of alias\n-        measurementList[i] = measurementNode.getName();\n-      }\n-\n-      insertPlan.setMeasurements(measurementList);\n+      MeasurementSchema[] schemas = getSeriesSchemas(measurementList, deviceId, strValues);\n       insertPlan.setSchemas(schemas);\n       StorageEngine.getInstance().insert(insertPlan);\n     } catch (StorageEngineException | MetadataException e) {\n       throw new QueryProcessException(e);\n+    }\n+  }\n+\n+  protected MeasurementSchema[] getSeriesSchemas(String[] measurementList, String deviceId,\n+      String[] strValues) throws MetadataException {\n+    MeasurementSchema[] schemas = new MeasurementSchema[measurementList.length];\n+\n+    MNode node = null;\n+    try {\n+      node = mManager.getDeviceNodeWithAutoCreateAndReadLock(deviceId);", "originalCommit": "3fa666caabef2aaa9c8583fae74b871369d19b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2NTMxNw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r427965317", "bodyText": "For example, if this try-catch throws some RuntimeException (which PathNotExistException can not catch), then the lock is not released..", "author": "jixuan1989", "createdAt": "2020-05-20T12:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2NDUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNDI2NQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428414265", "bodyText": "This is not introduced in this PR and I only rearranged the codes to reduce the complexity.\nI suggest you discuss with him directly or start an issue, but it is really not the concern of this PR.", "author": "jt2594838", "createdAt": "2020-05-21T02:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2NDUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzc5OQ==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428127799", "bodyText": "if transformOperatorTypeToAuthorType is only used by setAuthorType(AuthorType.values()[transformOperatorTypeToAuthorType(operatorType)]);, why not set the returned type as AuthorType directly?", "author": "jixuan1989", "createdAt": "2020-05-20T15:59:54Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/AuthorPlan.java", "diffHunk": "@@ -125,6 +130,58 @@ public AuthorPlan(AuthorOperator.AuthorType authorType, String userName, String\n     }\n   }\n \n+  public AuthorPlan(OperatorType operatorType) throws IOException {\n+    super(false, operatorType);\n+    setAuthorType(AuthorType.values()[transformOperatorTypeToAuthorType(operatorType)]);\n+  }\n+\n+  private int transformOperatorTypeToAuthorType(OperatorType operatorType)", "originalCommit": "3fa666caabef2aaa9c8583fae74b871369d19b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNDkxMw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428414913", "bodyText": "I do not think this makes any difference.", "author": "jt2594838", "createdAt": "2020-05-21T02:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyOTM4NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428129384", "bodyText": "format the code", "author": "jixuan1989", "createdAt": "2020-05-20T16:02:06Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -201,7 +202,12 @@ public void enterRemoveFile(RemoveFileContext ctx) {\n   @Override\n   public void enterLoadConfigurationStatement(LoadConfigurationStatementContext ctx) {\n     super.enterLoadConfigurationStatement(ctx);\n-    initializedOperator = new LoadConfigurationOperator();\n+    if(ctx.GLOBAL()!=null){", "originalCommit": "3fa666caabef2aaa9c8583fae74b871369d19b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNTA3OA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428415078", "bodyText": "Formated.", "author": "jt2594838", "createdAt": "2020-05-21T02:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyOTM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMDQ3Nw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428130477", "bodyText": "== true?", "author": "jixuan1989", "createdAt": "2020-05-20T16:03:41Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/ShowTimeSeriesResult.java", "diffHunk": "@@ -68,4 +79,70 @@ public String getCompressor() {\n   public Map<String, String> getTagAndAttribute() {\n     return tagAndAttribute;\n   }\n+\n+  @Override\n+  public int compareTo(ShowTimeSeriesResult o) {\n+    return this.name.compareTo(o.name);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    ShowTimeSeriesResult result = (ShowTimeSeriesResult) o;\n+    return Objects.equals(name, result.name);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(name);\n+  }\n+\n+  public void serialize(OutputStream outputStream) throws IOException {\n+    ReadWriteIOUtils.write(name, outputStream);\n+    ReadWriteIOUtils.write(alias != null, outputStream);\n+    if (alias != null) {\n+      ReadWriteIOUtils.write(alias, outputStream);\n+    }\n+    ReadWriteIOUtils.write(sgName, outputStream);\n+    ReadWriteIOUtils.write(dataType, outputStream);\n+    ReadWriteIOUtils.write(encoding, outputStream);\n+    ReadWriteIOUtils.write(compressor, outputStream);\n+\n+    ReadWriteIOUtils.write(tagAndAttribute != null, outputStream);\n+    if (tagAndAttribute != null) {\n+      ReadWriteIOUtils.write(tagAndAttribute.size(), outputStream);\n+      for (Entry<String, String> stringStringEntry : tagAndAttribute.entrySet()) {\n+        ReadWriteIOUtils.write(stringStringEntry.getKey(), outputStream);\n+        ReadWriteIOUtils.write(stringStringEntry.getValue(), outputStream);\n+      }\n+    }\n+  }\n+\n+  public static ShowTimeSeriesResult deserialize(ByteBuffer buffer) {\n+    ShowTimeSeriesResult result = new ShowTimeSeriesResult();\n+    result.name = ReadWriteIOUtils.readString(buffer);\n+    if (buffer.get() == 1) {\n+      result.alias = ReadWriteIOUtils.readString(buffer);\n+    }\n+    result.sgName = ReadWriteIOUtils.readString(buffer);\n+    result.dataType = ReadWriteIOUtils.readString(buffer);\n+    result.encoding = ReadWriteIOUtils.readString(buffer);\n+    result.compressor = ReadWriteIOUtils.readString(buffer);\n+\n+    if (buffer.get() == 1) {", "originalCommit": "3fa666caabef2aaa9c8583fae74b871369d19b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNTU1Mg==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428415552", "bodyText": "This is not C or C++, so integers are not comparable with booleans. Besides, there is no getBoolean in ByteBuffer.", "author": "jt2594838", "createdAt": "2020-05-21T02:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMDQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMjgxNA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428132814", "bodyText": "what for? maybe we need to separate the time_out between the single node and cluster.", "author": "jixuan1989", "createdAt": "2020-05-20T16:07:09Z", "path": "service-rpc/src/main/java/org/apache/iotdb/rpc/TSStatusCode.java", "diffHunk": "@@ -63,10 +63,19 @@\n   READ_ONLY_SYSTEM_ERROR(502),\n   DISK_SPACE_INSUFFICIENT_ERROR(503),\n   START_UP_ERROR(504),\n+\n   WRONG_LOGIN_PASSWORD_ERROR(600),\n   NOT_LOGIN_ERROR(601),\n   NO_PERMISSION_ERROR(602),\n   UNINITIALIZED_AUTH_ERROR(603),\n+\n+  // TODO-Cluster: update docs when ready to merge\n+  PARTITION_NOT_READY(700),\n+  TIME_OUT(701),", "originalCommit": "3fa666caabef2aaa9c8583fae74b871369d19b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjE1NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428416154", "bodyText": "What \"what for\"? These are error codes for the distributed version, and certainly, you will not have a node's communication time out with another node in the stand-alone version because there is only one node.", "author": "jt2594838", "createdAt": "2020-05-21T02:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMjgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNDc0NA==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428134744", "bodyText": "How about merge this class and SerializeUtils.java", "author": "jixuan1989", "createdAt": "2020-05-20T16:10:05Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/utils/ReadWriteIOUtils.java", "diffHunk": "@@ -326,6 +326,15 @@ public static int write(ByteBuffer byteBuffer, OutputStream outputStream) throws\n     return len;\n   }\n \n+  /**", "originalCommit": "3fa666caabef2aaa9c8583fae74b871369d19b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjY2Mw==", "url": "https://github.com/apache/iotdb/pull/1169#discussion_r428416663", "bodyText": "Not necessary and burdensome. This one is mainly for primitive types or java built-in classes, and SerializeUtils is mainly for our customized classes.", "author": "jt2594838", "createdAt": "2020-05-21T02:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNDc0NA=="}], "type": "inlineReview"}, {"oid": "cf7d6a54d365e34d3b4507a342f25c39f3bc68a0", "url": "https://github.com/apache/iotdb/commit/cf7d6a54d365e34d3b4507a342f25c39f3bc68a0", "message": "fix by review", "committedDate": "2020-05-21T02:51:32Z", "type": "commit"}, {"oid": "32beaa0c2f4b3d16dd405c3df74c3affd3eea5e1", "url": "https://github.com/apache/iotdb/commit/32beaa0c2f4b3d16dd405c3df74c3affd3eea5e1", "message": "change return type of transformOperatorTypeToAuthorType", "committedDate": "2020-05-21T05:38:42Z", "type": "commit"}, {"oid": "b16379dce6c7f2941ca590ba31e6e3d5c2061694", "url": "https://github.com/apache/iotdb/commit/b16379dce6c7f2941ca590ba31e6e3d5c2061694", "message": "add comments for replace users and roles", "committedDate": "2020-05-21T06:01:04Z", "type": "commit"}, {"oid": "54f3de44ad78e68daaf8f35b6275740b9966452e", "url": "https://github.com/apache/iotdb/commit/54f3de44ad78e68daaf8f35b6275740b9966452e", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/engine/StorageEngine.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n#\tserver/src/test/java/org/apache/iotdb/db/qp/plan/PhysicalPlanTest.java\n#\tsession/src/main/java/org/apache/iotdb/session/Session.java", "committedDate": "2020-05-25T03:48:33Z", "type": "commit"}, {"oid": "3fa3907f0d1053e4573d3282a7847a986c627553", "url": "https://github.com/apache/iotdb/commit/3fa3907f0d1053e4573d3282a7847a986c627553", "message": "add comments", "committedDate": "2020-05-25T05:07:28Z", "type": "commit"}, {"oid": "9aa51cc2deb22453fd3688b02861c6ca8af765b4", "url": "https://github.com/apache/iotdb/commit/9aa51cc2deb22453fd3688b02861c6ca8af765b4", "message": "Merge branch 'cluster_premerge' of github.com:apache/incubator-iotdb into cluster_premerge", "committedDate": "2020-05-25T05:07:46Z", "type": "commit"}, {"oid": "e78fabc23e873ccc1cc68d6c1a60f78930aea609", "url": "https://github.com/apache/iotdb/commit/e78fabc23e873ccc1cc68d6c1a60f78930aea609", "message": "use relative path in mod file serialization", "committedDate": "2020-05-25T06:31:39Z", "type": "commit"}, {"oid": "598718e3ded0ebcb4f0c18211d7d3c0955148658", "url": "https://github.com/apache/iotdb/commit/598718e3ded0ebcb4f0c18211d7d3c0955148658", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/test/java/org/apache/iotdb/db/qp/plan/PhysicalPlanTest.java", "committedDate": "2020-05-26T03:48:50Z", "type": "commit"}, {"oid": "57f1cbf422505b62fdfbe854e21500c6254c9dcf", "url": "https://github.com/apache/iotdb/commit/57f1cbf422505b62fdfbe854e21500c6254c9dcf", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/antlr4/org/apache/iotdb/db/qp/strategy/SqlBase.g4\n#\tserver/src/main/java/org/apache/iotdb/db/auth/authorizer/BasicAuthorizer.java\n#\tserver/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/physical/crud/InsertPlan.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java\n#\tserver/src/test/java/org/apache/iotdb/db/qp/plan/PhysicalPlanTest.java\n#\tserver/src/test/java/org/apache/iotdb/db/tools/WalCheckerTest.java", "committedDate": "2020-06-03T02:43:55Z", "type": "commit"}, {"oid": "998e97efa8ccc29eeabd1dc83fa11eec74ee0628", "url": "https://github.com/apache/iotdb/commit/998e97efa8ccc29eeabd1dc83fa11eec74ee0628", "message": "fix wal checker", "committedDate": "2020-06-03T02:48:23Z", "type": "commit"}, {"oid": "ae777e618c6bdf5cfccae20ccf707a09f3b94674", "url": "https://github.com/apache/iotdb/commit/ae777e618c6bdf5cfccae20ccf707a09f3b94674", "message": "fix WalCheckerTest", "committedDate": "2020-06-03T03:06:34Z", "type": "commit"}, {"oid": "8b39ef93d67c03de98556b16b00b5ec533a0a424", "url": "https://github.com/apache/iotdb/commit/8b39ef93d67c03de98556b16b00b5ec533a0a424", "message": "disable Thrift compression by default", "committedDate": "2020-06-03T03:26:16Z", "type": "commit"}, {"oid": "ea5d72a277fa89f78c0288b26e9d80ee77e485d0", "url": "https://github.com/apache/iotdb/commit/ea5d72a277fa89f78c0288b26e9d80ee77e485d0", "message": "disable thrift compression in onfig", "committedDate": "2020-06-03T03:27:55Z", "type": "commit"}, {"oid": "2d9e103ec851aca1563534908d7cdf7e0e299caa", "url": "https://github.com/apache/iotdb/commit/2d9e103ec851aca1563534908d7cdf7e0e299caa", "message": "remove exception in remote cache", "committedDate": "2020-06-03T03:37:43Z", "type": "commit"}, {"oid": "be02cba64c5cdaee6e65cd7e8157c299d5f59e19", "url": "https://github.com/apache/iotdb/commit/be02cba64c5cdaee6e65cd7e8157c299d5f59e19", "message": "disable compression in session pool", "committedDate": "2020-06-03T04:06:20Z", "type": "commit"}, {"oid": "a39afecc7413d9c5b923b3537614f3b9d65f6c66", "url": "https://github.com/apache/iotdb/commit/a39afecc7413d9c5b923b3537614f3b9d65f6c66", "message": "fix SessionPoolTest", "committedDate": "2020-06-03T04:27:17Z", "type": "commit"}, {"oid": "9b9821f6ca4e3a77dce82158b939f7fd7c2206b2", "url": "https://github.com/apache/iotdb/commit/9b9821f6ca4e3a77dce82158b939f7fd7c2206b2", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "committedDate": "2020-06-04T02:27:09Z", "type": "commit"}, {"oid": "d3b1d434ba257ea795e67de79ac3419c4be3ff3e", "url": "https://github.com/apache/iotdb/commit/d3b1d434ba257ea795e67de79ac3419c4be3ff3e", "message": "remove while", "committedDate": "2020-06-04T03:23:09Z", "type": "commit"}, {"oid": "e259a2f5f34ef73d710aa55b41cb2c1bee561068", "url": "https://github.com/apache/iotdb/commit/e259a2f5f34ef73d710aa55b41cb2c1bee561068", "message": "fix when schema is null", "committedDate": "2020-06-04T03:26:57Z", "type": "commit"}, {"oid": "51c2ade26c3bd9b757bc1b7ccbb7db1e34c1bc0f", "url": "https://github.com/apache/iotdb/commit/51c2ade26c3bd9b757bc1b7ccbb7db1e34c1bc0f", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java\n#\tserver/src/main/java/org/apache/iotdb/db/metadata/MManager.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "committedDate": "2020-06-05T02:41:51Z", "type": "commit"}, {"oid": "a9b865063d164454b167556521576dd0888763e6", "url": "https://github.com/apache/iotdb/commit/a9b865063d164454b167556521576dd0888763e6", "message": "Merge branch 'master' into cluster_premerge\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java\n#\tserver/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "committedDate": "2020-06-08T02:25:14Z", "type": "commit"}, {"oid": "47047a3d827bc7a2286c8d33b1dedc0a17876ec9", "url": "https://github.com/apache/iotdb/commit/47047a3d827bc7a2286c8d33b1dedc0a17876ec9", "message": "fix test", "committedDate": "2020-06-08T02:45:44Z", "type": "commit"}]}