{"pr_number": 1088, "pr_title": "[IOTDB-125] Potential Concurrency bug while deleting and inserting happen together", "pr_createdAt": "2020-04-22T10:49:45Z", "pr_url": "https://github.com/apache/iotdb/pull/1088", "timeline": [{"oid": "acb1b249bfe359c87cb7cb7688b4993919f73f5f", "url": "https://github.com/apache/iotdb/commit/acb1b249bfe359c87cb7cb7688b4993919f73f5f", "message": "init", "committedDate": "2020-04-22T02:24:06Z", "type": "commit"}, {"oid": "e7f41226778cd030a45ee3ca9727bc0d3560a091", "url": "https://github.com/apache/iotdb/commit/e7f41226778cd030a45ee3ca9727bc0d3560a091", "message": "Merge remote-tracking branch 'origin' into DeleteInsertBug", "committedDate": "2020-04-22T02:24:10Z", "type": "commit"}, {"oid": "34eac9a9cda9333a596b9a93386b6311107bc752", "url": "https://github.com/apache/iotdb/commit/34eac9a9cda9333a596b9a93386b6311107bc752", "message": "add a lock in each MNode", "committedDate": "2020-04-22T10:45:31Z", "type": "commit"}, {"oid": "bd21e5f1133cc3c13ecfa55eb5924b1b9cb0fe0e", "url": "https://github.com/apache/iotdb/commit/bd21e5f1133cc3c13ecfa55eb5924b1b9cb0fe0e", "message": "delete duplicated finally block and retain the reconnect() method", "committedDate": "2020-04-22T12:52:38Z", "type": "commit"}, {"oid": "aa01ce07bd310f5f37649b19e7f44b992959ddf5", "url": "https://github.com/apache/iotdb/commit/aa01ce07bd310f5f37649b19e7f44b992959ddf5", "message": "add try catch in TSServiceImpl", "committedDate": "2020-04-22T15:05:18Z", "type": "commit"}, {"oid": "3eae0e949030d5a1fa557921fac3ce214c0890e9", "url": "https://github.com/apache/iotdb/commit/3eae0e949030d5a1fa557921fac3ce214c0890e9", "message": "some typos", "committedDate": "2020-04-23T01:02:50Z", "type": "commit"}, {"oid": "55526cce04e8323dabe22e01ad0e965b29dbb929", "url": "https://github.com/apache/iotdb/commit/55526cce04e8323dabe22e01ad0e965b29dbb929", "message": "resolve conflict", "committedDate": "2020-04-25T02:57:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTM4Ng==", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961386", "bodyText": "Move this readLock to the PlanExecutor, put it to readUnlock together.", "author": "qiaojialin", "createdAt": "2020-04-25T02:59:40Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -857,40 +863,54 @@ public StorageGroupMNode getStorageGroupNode(String path) throws MetadataExcepti\n   /**\n    * get device node, if the storage group is not set, create it when autoCreateSchema is true\n    *\n+   * !!!!!!Attention!!!!!\n+   * must call the return node's readUnlock() if you call this method.\n    * @param path path\n    */\n   public MNode getDeviceNodeWithAutoCreateStorageGroup(String path, boolean autoCreateSchema,\n       int sgLevel) throws MetadataException {\n     lock.readLock().lock();\n     MNode node = null;\n-    boolean shouldSetStorageGroup = false;\n+    boolean shouldSetStorageGroup;\n     try {\n       node = mNodeCache.get(path);\n+      return node;\n     } catch (CacheException e) {\n       if (!autoCreateSchema) {\n         throw new PathNotExistException(path);\n-      } else {\n-        shouldSetStorageGroup = e.getCause() instanceof StorageGroupNotSetException;\n       }\n     } finally {\n+      if (node != null) {\n+        node.readLock();\n+      }", "originalCommit": "55526cce04e8323dabe22e01ad0e965b29dbb929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTQ0Nw==", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961447", "bodyText": "move the readlock to caller, then remove this", "author": "qiaojialin", "createdAt": "2020-04-25T03:00:05Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MManager.java", "diffHunk": "@@ -857,40 +863,54 @@ public StorageGroupMNode getStorageGroupNode(String path) throws MetadataExcepti\n   /**\n    * get device node, if the storage group is not set, create it when autoCreateSchema is true\n    *\n+   * !!!!!!Attention!!!!!\n+   * must call the return node's readUnlock() if you call this method.", "originalCommit": "55526cce04e8323dabe22e01ad0e965b29dbb929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTU3NA==", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961574", "bodyText": "add java doc.\nIf delete a leafNode, lock its parent, if delete an InternalNode, lock this node", "author": "qiaojialin", "createdAt": "2020-04-25T03:00:56Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/InternalMNode.java", "diffHunk": "@@ -46,13 +51,34 @@ public void addChild(String name, MNode child) {\n \n \n   @Override\n-  public void deleteChild(String name) {\n-    children.remove(name);\n-  }\n+  public void deleteChild(String name) throws DeleteFailedException {", "originalCommit": "55526cce04e8323dabe22e01ad0e965b29dbb929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTcxNQ==", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961715", "bodyText": "move this to InternalMNode", "author": "qiaojialin", "createdAt": "2020-04-25T03:01:26Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -43,6 +46,8 @@\n    */\n   protected String fullPath;\n \n+  protected ReadWriteLock lock = new ReentrantReadWriteLock();", "originalCommit": "55526cce04e8323dabe22e01ad0e965b29dbb929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTczNg==", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961736", "bodyText": "move to InternalMNode", "author": "qiaojialin", "createdAt": "2020-04-25T03:01:38Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/mnode/MNode.java", "diffHunk": "@@ -121,4 +126,20 @@ public String getName() {\n   public void setName(String name) {\n     this.name = name;\n   }\n+\n+  public void readLock() {\n+    MNode node = this;\n+    while (node != null) {\n+      node.lock.readLock().lock();\n+      node = node.parent;\n+    }\n+  }\n+\n+  public void readUnlock() {\n+    MNode node = this;\n+    while (node != null) {\n+      node.lock.readLock().unlock();\n+      node = node.parent;\n+    }\n+  }", "originalCommit": "55526cce04e8323dabe22e01ad0e965b29dbb929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTc5Mg==", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961792", "bodyText": "lock node here", "author": "qiaojialin", "createdAt": "2020-04-25T03:01:55Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -619,24 +622,31 @@ private void createSchemaAutomatically(\n     Set<Path> registeredSeries = new HashSet<>();\n     for (ChunkGroupMetadata chunkGroupMetadata : chunkGroupMetadataList) {\n       String device = chunkGroupMetadata.getDevice();\n-      MNode node = mManager.getDeviceNodeWithAutoCreateStorageGroup(device, true, sgLevel);\n-      for (ChunkMetadata chunkMetadata : chunkGroupMetadata.getChunkMetadataList()) {\n-        Path series = new Path(chunkGroupMetadata.getDevice(), chunkMetadata.getMeasurementUid());\n-        if (!registeredSeries.contains(series)) {\n-          registeredSeries.add(series);\n-          MeasurementSchema schema = knownSchemas.get(series);\n-          if (schema == null) {\n-            throw new MetadataException(String.format(\"Can not get the schema of measurement [%s]\",\n-                    chunkMetadata.getMeasurementUid()));\n-          }\n-          if (!node.hasChild(chunkMetadata.getMeasurementUid())) {\n-            mManager.createTimeseries(series.getFullPath(), schema.getType(),\n-                schema.getEncodingType(), schema.getCompressor(), Collections.emptyMap());\n-          } else if (node.getChild(chunkMetadata.getMeasurementUid()) instanceof InternalMNode) {\n-            throw new QueryProcessException(\n-                String.format(\"Current Path is not leaf node. %s\", series));\n+      MNode node = null;\n+      try {\n+        node = mManager.getDeviceNodeWithAutoCreateStorageGroup(device, true, sgLevel);\n+        for (ChunkMetadata chunkMetadata : chunkGroupMetadata.getChunkMetadataList()) {", "originalCommit": "55526cce04e8323dabe22e01ad0e965b29dbb929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2MTgwNA==", "url": "https://github.com/apache/iotdb/pull/1088#discussion_r414961804", "bodyText": "lock here", "author": "qiaojialin", "createdAt": "2020-04-25T03:02:01Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -705,10 +715,11 @@ public void delete(Path path, long timestamp) throws QueryProcessException {\n \n   @Override\n   public void insert(InsertPlan insertPlan) throws QueryProcessException {\n+    MNode node = null;\n     try {\n       String[] measurementList = insertPlan.getMeasurements();\n       String deviceId = insertPlan.getDeviceId();\n-      MNode node = mManager.getDeviceNodeWithAutoCreateStorageGroup(deviceId);\n+      node = mManager.getDeviceNodeWithAutoCreateStorageGroup(deviceId);", "originalCommit": "55526cce04e8323dabe22e01ad0e965b29dbb929", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9142d833c6353cebe203d6b68d2fe3bbc7e65a7", "url": "https://github.com/apache/iotdb/commit/d9142d833c6353cebe203d6b68d2fe3bbc7e65a7", "message": "for QIAO", "committedDate": "2020-04-25T03:44:31Z", "type": "commit"}, {"oid": "b008a4894ba7ae772537400e899a2736b245b2e5", "url": "https://github.com/apache/iotdb/commit/b008a4894ba7ae772537400e899a2736b245b2e5", "message": "Merge branch 'DeleteInsertBug' of https://github.com/apache/incubator-iotdb into DeleteInsertBug", "committedDate": "2020-04-25T03:44:54Z", "type": "commit"}, {"oid": "ca960903663ec76ff4b8f3b88836f65da70c78c3", "url": "https://github.com/apache/iotdb/commit/ca960903663ec76ff4b8f3b88836f65da70c78c3", "message": "fix compilation error", "committedDate": "2020-04-25T05:33:12Z", "type": "commit"}, {"oid": "2c17fb6f265185710110415ec3c6ea37a7e43a13", "url": "https://github.com/apache/iotdb/commit/2c17fb6f265185710110415ec3c6ea37a7e43a13", "message": "add read unlock", "committedDate": "2020-04-25T05:51:28Z", "type": "commit"}]}