{"pr_number": 5975, "pr_title": "Add a couple more blocks to deco phase", "pr_createdAt": "2020-10-22T20:47:53Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/5975", "timeline": [{"oid": "f6c4cd614c31755a72e2fba6e2ebc38d057bf887", "url": "https://github.com/ldtteam/minecolonies/commit/f6c4cd614c31755a72e2fba6e2ebc38d057bf887", "message": "Add a couple more blocks to deco phase", "committedDate": "2020-10-22T20:46:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5NjQ0NQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r510696445", "bodyText": "Yeah no, this is now officially way to much OR-InstanceOf combos.\nAdd a config entry todo this, or add a simple list based registry in the api, regardless this is not a great maintainable approach anymore.", "author": "OrionDevelopment", "createdAt": "2020-10-23T07:45:09Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIStructure.java", "diffHunk": "@@ -238,6 +238,14 @@ public boolean walkToConstructionSite(final BlockPos currentBlock)\n         return worker.isWorkerAtSiteWithMove(workFrom, STANDARD_WORKING_RANGE) || MathUtils.twoDimDistance(worker.getPosition(), workFrom) < MIN_WORKING_RANGE;\n     }\n \n+    /**\n+     * Checks for blocks that need to be treated as deco\n+     */\n+    protected boolean isDecoItem(Block block)\n+    {\n+        return block instanceof CoralBlock || block instanceof LanternBlock || block instanceof BannerBlock || block instanceof WallSignBlock;", "originalCommit": "f6c4cd614c31755a72e2fba6e2ebc38d057bf887", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5NjYwOA==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r510696608", "bodyText": "Or add a Tag?\nThat would probably be the best approach.", "author": "OrionDevelopment", "createdAt": "2020-10-23T07:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5NjQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcwMDAwNw==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r510700007", "bodyText": "Yeah, a tag is probably the best thing.", "author": "Raycoms", "createdAt": "2020-10-23T07:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5NjQ0NQ=="}], "type": "inlineReview"}, {"oid": "bbab25aa800af6f52a0913ea40deb49e204cd646", "url": "https://github.com/ldtteam/minecolonies/commit/bbab25aa800af6f52a0913ea40deb49e204cd646", "message": "Switch to tags", "committedDate": "2020-10-23T15:53:00Z", "type": "commit"}, {"oid": "e90449112130ff6a7d5f40144f59cf221eb28f01", "url": "https://github.com/ldtteam/minecolonies/commit/e90449112130ff6a7d5f40144f59cf221eb28f01", "message": "move tag file appropriately", "committedDate": "2020-10-23T15:54:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA2MDQxOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511060419", "bodyText": "This is not the way to do tags.", "author": "OrionDevelopment", "createdAt": "2020-10-23T18:19:56Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIStructure.java", "diffHunk": "@@ -147,6 +160,8 @@ protected AbstractEntityAIStructure(@NotNull final J job)\n            */\n           new AITarget(COMPLETE_BUILD, this::completeBuild, STANDARD_DELAY)\n         );\n+\n+        decoItems = BlockTags.getCollection().getOrCreate(new ResourceLocation(MOD_ID, DECOBLOCK_TAG));", "originalCommit": "e90449112130ff6a7d5f40144f59cf221eb28f01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0NDg2NQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511144865", "bodyText": "Ok, I've updated this to static, to use a better pattern for the caching of this. Given that this is the way all of our tags access is in 1.15, I think it should stay consistent here and be updated to be 'right' in 1.16 using the TagUtils class.", "author": "Mekle001", "createdAt": "2020-10-23T20:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA2MDQxOQ=="}], "type": "inlineReview"}, {"oid": "0b1c44c8acd596414b8e31d7d3d92dc103c4c01f", "url": "https://github.com/ldtteam/minecolonies/commit/0b1c44c8acd596414b8e31d7d3d92dc103c4c01f", "message": "Switch to static", "committedDate": "2020-10-23T20:37:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NTg3Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511495877", "bodyText": "No. As discussed moved the actual tag instance to a dedicated class in the API which will group all of these.", "author": "OrionDevelopment", "createdAt": "2020-10-24T17:39:04Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIStructure.java", "diffHunk": "@@ -80,6 +83,16 @@\n         RECALC\n     }\n \n+    /**\n+     * Tagname for decoration blocks\n+     */\n+    private static String DECOBLOCK_TAG = \"decoblocks\";\n+\n+    /**\n+     * Tag of all the blocks that need to be in the deco phase of the builder\n+     */\n+    protected static Tag<Block> decoItems;", "originalCommit": "0b1c44c8acd596414b8e31d7d3d92dc103c4c01f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NjA5Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511496096", "bodyText": "Yeah, but that's the way we do this in 1.15 everywhere (also in several PR that were approved from you in the past). In the 1.16 port of this PR we can move this there", "author": "Raycoms", "createdAt": "2020-10-24T17:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYxODI3MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511618271", "bodyText": "I think we all are now on the same page around what you're asking for Orion, with something like a ModTags module.\nI've been thinking about it overnight, and I realized we CAN NOT simply cache these returns, as they could be redefined at any time by a /reload command reloading a new datapack.\nThis means that the proposed ModTags module isn't really following the rest of our Mod* pattern.\nThe \"best\" way I can currently see is a module with getters that lazy init the instances, and a dummy reload listener that clears the caches, with a complete sweep of the codebase to update to use it. Is that really a change we want to take in 1.15, or should it be done in 1.16 as a cleanup item?", "author": "Mekle001", "createdAt": "2020-10-25T16:25:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYzMzEzMg==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511633132", "bodyText": "There is an event to do that. So we can add an event listener to that ModTags class that handles that.", "author": "Raycoms", "createdAt": "2020-10-25T18:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5NTg3Nw=="}], "type": "inlineReview"}, {"oid": "4daa639109b123010bf7072d2e2b9d50bf6fbef7", "url": "https://github.com/ldtteam/minecolonies/commit/4daa639109b123010bf7072d2e2b9d50bf6fbef7", "message": "Merge branch 'version/1.15' into moredeco", "committedDate": "2020-10-25T14:32:57Z", "type": "commit"}, {"oid": "bb50f5d8ef920efe0f8e279d6488ecd88377cc04", "url": "https://github.com/ldtteam/minecolonies/commit/bb50f5d8ef920efe0f8e279d6488ecd88377cc04", "message": "Central tag implementation, and update to use", "committedDate": "2020-10-26T03:36:37Z", "type": "commit"}, {"oid": "24f4c96a854ab3c3bfc85e8ee3579b8dab28d1bd", "url": "https://github.com/ldtteam/minecolonies/commit/24f4c96a854ab3c3bfc85e8ee3579b8dab28d1bd", "message": "clean up imports", "committedDate": "2020-10-26T03:37:28Z", "type": "commit"}, {"oid": "5a1acf73d5351f2d79548ac53a954b51f223eaa1", "url": "https://github.com/ldtteam/minecolonies/commit/5a1acf73d5351f2d79548ac53a954b51f223eaa1", "message": "Merge branch 'version/1.15' into moredeco", "committedDate": "2020-10-26T04:39:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MTI5Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511941292", "bodyText": "Initialize this straight up as a final hashmap.", "author": "OrionDevelopment", "createdAt": "2020-10-26T13:01:55Z", "path": "src/api/java/com/minecolonies/api/items/ModTags.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.minecolonies.api.items;\n+\n+import java.util.Map;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.item.Item;\n+import net.minecraft.tags.Tag;\n+\n+public class ModTags\n+{\n+    public static Tag<Block>    decorationItems;\n+    public static Tag<Item>     concretePowder;\n+    public static Tag<Block>    concreteBlock;\n+    public static Tag<Block>    pathingBlocks;\n+\n+    public static Map<String, Tag<Item>> crafterProduct;", "originalCommit": "5a1acf73d5351f2d79548ac53a954b51f223eaa1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MTQ3NQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511941475", "bodyText": "Not needed.\nWe use named tags as such we do not need this.", "author": "OrionDevelopment", "createdAt": "2020-10-26T13:02:16Z", "path": "src/main/java/com/minecolonies/apiimp/initializer/ModTagsInitializer.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.apiimp.initializer;\n+\n+import com.minecolonies.api.items.ModTags;\n+import com.minecolonies.api.util.constant.Constants;\n+import net.minecraft.block.Block;\n+import net.minecraft.item.Item;\n+import net.minecraft.tags.BlockTags;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tags.Tag;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.event.TagsUpdatedEvent;\n+import net.minecraftforge.eventbus.api.SubscribeEvent;\n+import net.minecraftforge.fml.common.Mod;\n+import net.minecraftforge.registries.ObjectHolder;\n+import static com.minecolonies.api.util.constant.Constants.MOD_ID;\n+import java.util.HashMap;\n+\n+@ObjectHolder(Constants.MOD_ID)\n+@Mod.EventBusSubscriber(modid = Constants.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)\n+public class ModTagsInitializer\n+{\n+    /**\n+     * The name of the tag (crafter) for improving recipes\n+     */\n+    private static final String REDUCEABLE = \"reduceable\";\n+\n+    /**\n+     * Tag specifier for Products to Include\n+     */\n+    private static final String PRODUCT = \"_product\";\n+\n+    /**\n+     * Tag specifier for Products to Exclude\n+     */\n+    private static final String PRODUCT_EXCLUDED = \"_product_excluded\";\n+\n+    /**\n+     * Tag specifier for Ingredients to include\n+     */\n+    private static final String INGREDIENT = \"_ingredient\";\n+\n+    /**\n+     * Tag specifier for Ingredients to exclude\n+     */\n+    private static final String INGREDIENT_EXCLUDED = \"_ingredient_excluded\";\n+\n+    private static final ResourceLocation DECORATION_ITEMS = new ResourceLocation(MOD_ID, \"decoblocks\");\n+    private static final ResourceLocation CONCRETE_POWDER = new ResourceLocation(MOD_ID, \"concrete_powder\");\n+    private static final ResourceLocation CONCRETE_BLOCK  = new ResourceLocation(MOD_ID, \"concrete\");\n+    private static final ResourceLocation PATHING_BLOCKS = new ResourceLocation(MOD_ID, \"pathblocks\");\n+\n+\n+    @SubscribeEvent\n+    public static void tagsUpdated(TagsUpdatedEvent event)\n+    {\n+        ModTagsInitializer.init();", "originalCommit": "5a1acf73d5351f2d79548ac53a954b51f223eaa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MDU0OA==", "url": "https://github.com/ldtteam/minecolonies/pull/5975#discussion_r511960548", "bodyText": "Apparently a static initializer is enough here.", "author": "Raycoms", "createdAt": "2020-10-26T13:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MTQ3NQ=="}], "type": "inlineReview"}, {"oid": "646244016ff0dfdc77c6c5e8b6a4a1a6f282e9ae", "url": "https://github.com/ldtteam/minecolonies/commit/646244016ff0dfdc77c6c5e8b6a4a1a6f282e9ae", "message": "Update Initialization", "committedDate": "2020-10-26T20:07:05Z", "type": "commit"}]}