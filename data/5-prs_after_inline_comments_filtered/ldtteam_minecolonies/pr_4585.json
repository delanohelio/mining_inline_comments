{"pr_number": 4585, "pr_title": "Feature/school", "pr_createdAt": "2020-04-06T17:16:22Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/4585", "timeline": [{"oid": "105404c5ddb3f025fe58009f30ac5c07a29d9392", "url": "https://github.com/ldtteam/minecolonies/commit/105404c5ddb3f025fe58009f30ac5c07a29d9392", "message": "Initital block, building and job setup", "committedDate": "2020-04-05T13:17:08Z", "type": "commit"}, {"oid": "756ea8e58f4c92ad030919712e0f7b5f14e5d78e", "url": "https://github.com/ldtteam/minecolonies/commit/756ea8e58f4c92ad030919712e0f7b5f14e5d78e", "message": "Merge remote-tracking branch 'origin/version/1.15' into feature/school", "committedDate": "2020-04-05T13:17:11Z", "type": "commit"}, {"oid": "5d29739dd06d20360a4440ad1755db1191197de8", "url": "https://github.com/ldtteam/minecolonies/commit/5d29739dd06d20360a4440ad1755db1191197de8", "message": "Add block model and schematic", "committedDate": "2020-04-05T13:49:09Z", "type": "commit"}, {"oid": "aadcb1eb205e7e368ae49c7a843f829b00e28faa", "url": "https://github.com/ldtteam/minecolonies/commit/aadcb1eb205e7e368ae49c7a843f829b00e28faa", "message": "Add teacher model", "committedDate": "2020-04-05T15:52:26Z", "type": "commit"}, {"oid": "51fae285bb710a9abb258c78f6cb44caa38edf1d", "url": "https://github.com/ldtteam/minecolonies/commit/51fae285bb710a9abb258c78f6cb44caa38edf1d", "message": "Finish school and AIs", "committedDate": "2020-04-06T16:18:20Z", "type": "commit"}, {"oid": "8fc20cb83181ceed4209496c0edd77bfaef4f506", "url": "https://github.com/ldtteam/minecolonies/commit/8fc20cb83181ceed4209496c0edd77bfaef4f506", "message": "constant noon", "committedDate": "2020-04-06T16:22:22Z", "type": "commit"}, {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104", "url": "https://github.com/ldtteam/minecolonies/commit/0b5bbf379cee1734f33957d40e8903679ae4d104", "message": "fix school break, add recipe, add loottable", "committedDate": "2020-04-06T17:12:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjc2NQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404316765", "bodyText": "so our  childs are patients?", "author": "someaddons", "createdAt": "2020-04-06T18:55:41Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingSchool.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.ICitizenDataView;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.client.gui.WindowHutSchool;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.CarpetBlock;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Creates a new building for the school.\n+ */\n+public class BuildingSchool extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String SCHOOL = \"school\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * NBT value to store the carpet pos.\n+     */\n+    private static final String TAG_CARPET  = \"carpet\";\n+\n+    /**\n+     * If the school has a teacher.\n+     */\n+    private boolean hasTeacher = false;\n+\n+    /**\n+     * Map from beds to patients, 0 is empty.", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzAyMg==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404347022", "bodyText": "hrm", "author": "Raycoms", "createdAt": "2020-04-06T19:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzMwNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404317306", "bodyText": "do we \"reserve\" a slot for a teacher?", "author": "someaddons", "createdAt": "2020-04-06T18:56:38Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingSchool.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.ICitizenDataView;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.client.gui.WindowHutSchool;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.CarpetBlock;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Creates a new building for the school.\n+ */\n+public class BuildingSchool extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String SCHOOL = \"school\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * NBT value to store the carpet pos.\n+     */\n+    private static final String TAG_CARPET  = \"carpet\";\n+\n+    /**\n+     * If the school has a teacher.\n+     */\n+    private boolean hasTeacher = false;\n+\n+    /**\n+     * Map from beds to patients, 0 is empty.\n+     */\n+    @NotNull\n+    private final List<BlockPos> carpet = new ArrayList<>();\n+\n+    /**\n+     * Random obj for random calc.\n+     */\n+    private final Random random = new Random();\n+\n+    /**\n+     * Instantiates the building.\n+     * @param c the colony.\n+     * @param l the location.\n+     */\n+    public BuildingSchool(final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return SCHOOL;\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return MAX_BUILDING_LEVEL;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return \"com.minecolonies.coremod.job.pupil\";\n+    }\n+\n+    @Override\n+    public boolean canWorkDuringTheRain()\n+    {\n+        return true;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Knowledge;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getSecondarySkill()\n+    {\n+        return Skill.Mana;\n+    }\n+\n+    @Override\n+    public int getMaxInhabitants()\n+    {\n+        return 1 + 2 * getBuildingLevel();\n+    }\n+\n+    @Override\n+    public boolean assignCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild() || citizen.getJob() instanceof JobPupil)", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0ODExOA==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404348118", "bodyText": "Good idea.", "author": "Raycoms", "createdAt": "2020-04-06T19:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzg4Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404317886", "bodyText": "bedTagList?^^", "author": "someaddons", "createdAt": "2020-04-06T18:57:38Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingSchool.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.ICitizenDataView;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.client.gui.WindowHutSchool;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.CarpetBlock;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Creates a new building for the school.\n+ */\n+public class BuildingSchool extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String SCHOOL = \"school\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * NBT value to store the carpet pos.\n+     */\n+    private static final String TAG_CARPET  = \"carpet\";\n+\n+    /**\n+     * If the school has a teacher.\n+     */\n+    private boolean hasTeacher = false;\n+\n+    /**\n+     * Map from beds to patients, 0 is empty.\n+     */\n+    @NotNull\n+    private final List<BlockPos> carpet = new ArrayList<>();\n+\n+    /**\n+     * Random obj for random calc.\n+     */\n+    private final Random random = new Random();\n+\n+    /**\n+     * Instantiates the building.\n+     * @param c the colony.\n+     * @param l the location.\n+     */\n+    public BuildingSchool(final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return SCHOOL;\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return MAX_BUILDING_LEVEL;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return \"com.minecolonies.coremod.job.pupil\";\n+    }\n+\n+    @Override\n+    public boolean canWorkDuringTheRain()\n+    {\n+        return true;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Knowledge;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getSecondarySkill()\n+    {\n+        return Skill.Mana;\n+    }\n+\n+    @Override\n+    public int getMaxInhabitants()\n+    {\n+        return 1 + 2 * getBuildingLevel();\n+    }\n+\n+    @Override\n+    public boolean assignCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild() || citizen.getJob() instanceof JobPupil)\n+        {\n+            return super.assignCitizen(citizen);\n+        }\n+        else if (hasTeacher)\n+        {\n+            return false;\n+        }\n+\n+        if (super.assignCitizen(citizen))\n+        {\n+            markDirty();\n+            return hasTeacher = true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void removeCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.getJob() instanceof JobTeacher)\n+        {\n+            hasTeacher = false;\n+            markDirty();\n+        }\n+        super.removeCitizen(citizen);\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild())\n+        {\n+            return new JobPupil(citizen);\n+        }\n+        return new JobTeacher(citizen);\n+    }\n+\n+    @Override\n+    public void registerBlockPosition(@NotNull final Block block, @NotNull final BlockPos pos, @NotNull final World world)\n+    {\n+        super.registerBlockPosition(block, pos, world);\n+        if (block instanceof CarpetBlock)\n+        {\n+            carpet.add(pos);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void deserializeNBT(final CompoundNBT compound)\n+    {\n+        super.deserializeNBT(compound);\n+        final ListNBT carpetTagList = compound.getList(TAG_CARPET, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < carpetTagList.size(); ++i)\n+        {\n+            final CompoundNBT bedCompound = carpetTagList.getCompound(i);\n+            final BlockPos pos = BlockPosUtil.read(bedCompound, TAG_POS);\n+            if (!carpet.contains(pos))\n+            {\n+                carpet.add(pos);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompoundNBT serializeNBT()\n+    {\n+        final CompoundNBT compound = super.serializeNBT();\n+        if (!carpet.isEmpty())\n+        {\n+            @NotNull final ListNBT bedTagList = new ListNBT();", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxODIwMA==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404318200", "bodyText": "bedcompound", "author": "someaddons", "createdAt": "2020-04-06T18:58:08Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingSchool.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.ICitizenDataView;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.client.gui.WindowHutSchool;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.CarpetBlock;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Creates a new building for the school.\n+ */\n+public class BuildingSchool extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String SCHOOL = \"school\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * NBT value to store the carpet pos.\n+     */\n+    private static final String TAG_CARPET  = \"carpet\";\n+\n+    /**\n+     * If the school has a teacher.\n+     */\n+    private boolean hasTeacher = false;\n+\n+    /**\n+     * Map from beds to patients, 0 is empty.\n+     */\n+    @NotNull\n+    private final List<BlockPos> carpet = new ArrayList<>();\n+\n+    /**\n+     * Random obj for random calc.\n+     */\n+    private final Random random = new Random();\n+\n+    /**\n+     * Instantiates the building.\n+     * @param c the colony.\n+     * @param l the location.\n+     */\n+    public BuildingSchool(final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return SCHOOL;\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return MAX_BUILDING_LEVEL;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return \"com.minecolonies.coremod.job.pupil\";\n+    }\n+\n+    @Override\n+    public boolean canWorkDuringTheRain()\n+    {\n+        return true;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Knowledge;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getSecondarySkill()\n+    {\n+        return Skill.Mana;\n+    }\n+\n+    @Override\n+    public int getMaxInhabitants()\n+    {\n+        return 1 + 2 * getBuildingLevel();\n+    }\n+\n+    @Override\n+    public boolean assignCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild() || citizen.getJob() instanceof JobPupil)\n+        {\n+            return super.assignCitizen(citizen);\n+        }\n+        else if (hasTeacher)\n+        {\n+            return false;\n+        }\n+\n+        if (super.assignCitizen(citizen))\n+        {\n+            markDirty();\n+            return hasTeacher = true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void removeCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.getJob() instanceof JobTeacher)\n+        {\n+            hasTeacher = false;\n+            markDirty();\n+        }\n+        super.removeCitizen(citizen);\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild())\n+        {\n+            return new JobPupil(citizen);\n+        }\n+        return new JobTeacher(citizen);\n+    }\n+\n+    @Override\n+    public void registerBlockPosition(@NotNull final Block block, @NotNull final BlockPos pos, @NotNull final World world)\n+    {\n+        super.registerBlockPosition(block, pos, world);\n+        if (block instanceof CarpetBlock)\n+        {\n+            carpet.add(pos);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void deserializeNBT(final CompoundNBT compound)\n+    {\n+        super.deserializeNBT(compound);\n+        final ListNBT carpetTagList = compound.getList(TAG_CARPET, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < carpetTagList.size(); ++i)\n+        {\n+            final CompoundNBT bedCompound = carpetTagList.getCompound(i);\n+            final BlockPos pos = BlockPosUtil.read(bedCompound, TAG_POS);\n+            if (!carpet.contains(pos))\n+            {\n+                carpet.add(pos);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompoundNBT serializeNBT()\n+    {\n+        final CompoundNBT compound = super.serializeNBT();\n+        if (!carpet.isEmpty())\n+        {\n+            @NotNull final ListNBT bedTagList = new ListNBT();\n+            for (@NotNull final BlockPos pos : carpet)\n+            {\n+                final CompoundNBT bedCompound = new CompoundNBT();", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTE3MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404319170", "bodyText": "from the teacher you mean? else this is in the wrong AI I think", "author": "someaddons", "createdAt": "2020-04-06T18:59:48Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkPupil.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.interactionhandling.ChatPriority;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.interactionhandling.StandardInteractionResponseHandler;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import com.minecolonies.coremod.entity.citizen.EntityCitizen;\n+import com.minecolonies.coremod.network.messages.CircleParticleEffectMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.TranslationConstants.PUPIL_NO_CARPET;\n+\n+public class EntityAIWorkPupil extends AbstractEntityAIInteract<JobPupil>\n+{\n+    /**\n+     * How often the kid studies for one recess.\n+     */\n+    private static final int STUDY_TO_RECESS_RATIO = 10;\n+\n+    /**\n+     * To be requested by the teacher.", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTQzNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404319434", "bodyText": "jdoc", "author": "someaddons", "createdAt": "2020-04-06T19:00:19Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkPupil.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.interactionhandling.ChatPriority;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.interactionhandling.StandardInteractionResponseHandler;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import com.minecolonies.coremod.entity.citizen.EntityCitizen;\n+import com.minecolonies.coremod.network.messages.CircleParticleEffectMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.TranslationConstants.PUPIL_NO_CARPET;\n+\n+public class EntityAIWorkPupil extends AbstractEntityAIInteract<JobPupil>\n+{\n+    /**\n+     * How often the kid studies for one recess.\n+     */\n+    private static final int STUDY_TO_RECESS_RATIO = 10;\n+\n+    /**\n+     * To be requested by the teacher.\n+     */\n+    private final Predicate<ItemStack> PAPER = stack -> stack.getItem() == Items.PAPER;\n+\n+    /**\n+     * The max time to sit.\n+     */\n+    private int maxSittingTicks = 0;\n+\n+    /**\n+     * The current sitting time.\n+     */\n+    private int sittingTicks = 0;\n+\n+    /**\n+     * The pos to study at.\n+     */\n+    private BlockPos studyPos;\n+\n+    /**\n+     * Next recess pos to run to.\n+     */\n+    private BlockPos recessPos;\n+\n+    /**\n+     * Constructor for the AI\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkPupil(@NotNull final JobPupil job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(DECIDE, this::decide, TICKS_SECOND),\n+          new AITarget(STUDY, this::study, TICKS_SECOND),\n+          new AITarget(RECESS, this::recess, TICKS_SECOND)\n+        );\n+        worker.setCanPickUpLoot(true);\n+    }\n+\n+    private IAIState decide()", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTUyOA==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404319528", "bodyText": "jdoc", "author": "someaddons", "createdAt": "2020-04-06T19:00:28Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkPupil.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.interactionhandling.ChatPriority;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.interactionhandling.StandardInteractionResponseHandler;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import com.minecolonies.coremod.entity.citizen.EntityCitizen;\n+import com.minecolonies.coremod.network.messages.CircleParticleEffectMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.TranslationConstants.PUPIL_NO_CARPET;\n+\n+public class EntityAIWorkPupil extends AbstractEntityAIInteract<JobPupil>\n+{\n+    /**\n+     * How often the kid studies for one recess.\n+     */\n+    private static final int STUDY_TO_RECESS_RATIO = 10;\n+\n+    /**\n+     * To be requested by the teacher.\n+     */\n+    private final Predicate<ItemStack> PAPER = stack -> stack.getItem() == Items.PAPER;\n+\n+    /**\n+     * The max time to sit.\n+     */\n+    private int maxSittingTicks = 0;\n+\n+    /**\n+     * The current sitting time.\n+     */\n+    private int sittingTicks = 0;\n+\n+    /**\n+     * The pos to study at.\n+     */\n+    private BlockPos studyPos;\n+\n+    /**\n+     * Next recess pos to run to.\n+     */\n+    private BlockPos recessPos;\n+\n+    /**\n+     * Constructor for the AI\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkPupil(@NotNull final JobPupil job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(DECIDE, this::decide, TICKS_SECOND),\n+          new AITarget(STUDY, this::study, TICKS_SECOND),\n+          new AITarget(RECESS, this::recess, TICKS_SECOND)\n+        );\n+        worker.setCanPickUpLoot(true);\n+    }\n+\n+    private IAIState decide()\n+    {\n+        if (worker.getRandom().nextInt(STUDY_TO_RECESS_RATIO) < 1)\n+        {\n+            recessPos = BlockPosUtil.getRandomPosition(world, recessPos == null ? BlockPos.ZERO : recessPos, worker.getPosition(), 10);\n+            return RECESS;\n+        }\n+\n+        final BuildingSchool school = getOwnBuilding();\n+        final BlockPos pos = school.getRandomPlaceToSit();\n+        if (pos == null)\n+        {\n+            worker.getCitizenData().triggerInteraction(new StandardInteractionResponseHandler(new TranslationTextComponent(PUPIL_NO_CARPET), ChatPriority.BLOCKING));\n+            return DECIDE;\n+        }\n+\n+        studyPos = pos;\n+        return STUDY;\n+    }\n+\n+    private IAIState recess()", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzMzU0Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404333547", "bodyText": "jdoc", "author": "someaddons", "createdAt": "2020-04-06T19:25:45Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkTeacher.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.requestsystem.requestable.Stack;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+\n+public class EntityAIWorkTeacher extends AbstractEntityAIInteract<JobTeacher>\n+{\n+    /**\n+     * Qty of paper to request.\n+     */\n+    private static final int PAPER_TO_REQUEST = 16;\n+\n+    /**\n+     * To be requested by the teacher.\n+     */\n+    private final Predicate<ItemStack> PAPER = stack -> stack.getItem() == Items.PAPER;\n+\n+    /**\n+     * Area the worker targets.\n+     */\n+    private AxisAlignedBB targetArea = null;\n+\n+    /**\n+     * The next pupil to teach.\n+     */\n+    private AbstractEntityCitizen pupilToTeach;\n+\n+    /**\n+     * The max time to sit.\n+     */\n+    private int maxSittingTicks = 0;\n+\n+    /**\n+     * The current sitting time.\n+     */\n+    private int sittingTicks = 0;\n+\n+    /**\n+     * Constructor for the AI\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkTeacher(@NotNull final JobTeacher job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(DECIDE, this::decide, TICKS_SECOND),\n+          new AITarget(TEACH, this::teach, TICKS_SECOND)\n+        );\n+        worker.setCanPickUpLoot(true);\n+    }\n+\n+    /**\n+     * Decide what to do next.\n+     * @return the next state to go to.\n+     */\n+    private IAIState decide()\n+    {\n+        final int paperInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), PAPER);\n+        final int paperInInv = InventoryUtils.getItemCountInItemHandler((worker.getInventoryCitizen()), PAPER);\n+        if (paperInBuilding + paperInInv <= 0)\n+        {\n+            requestPaper();\n+        }\n+\n+        if (paperInInv == 0 && paperInBuilding > 0)\n+        {\n+            needsCurrently = PAPER;\n+            return GATHERING_REQUIRED_MATERIALS;\n+        }\n+\n+        final List<? extends AbstractEntityCitizen> pupils = world.getEntitiesWithinAABB(ModEntities.CITIZEN, getTargetableArea(), cit -> cit.isChild() && cit.ridingEntity != null && cit.getCitizenJobHandler().getColonyJob() instanceof JobPupil);\n+        if (pupils.size() > 0)\n+        {\n+            pupilToTeach = pupils.get(worker.getRandom().nextInt(pupils.size()));\n+            return TEACH;\n+        }\n+\n+        return START_WORKING;\n+    }\n+\n+\n+    private IAIState teach()", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNDI4Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404334286", "bodyText": "how much is 1 Intelligence xp per second over a half day of school in int levels? not sure if its enough", "author": "someaddons", "createdAt": "2020-04-06T19:27:10Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkTeacher.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.requestsystem.requestable.Stack;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+\n+public class EntityAIWorkTeacher extends AbstractEntityAIInteract<JobTeacher>\n+{\n+    /**\n+     * Qty of paper to request.\n+     */\n+    private static final int PAPER_TO_REQUEST = 16;\n+\n+    /**\n+     * To be requested by the teacher.\n+     */\n+    private final Predicate<ItemStack> PAPER = stack -> stack.getItem() == Items.PAPER;\n+\n+    /**\n+     * Area the worker targets.\n+     */\n+    private AxisAlignedBB targetArea = null;\n+\n+    /**\n+     * The next pupil to teach.\n+     */\n+    private AbstractEntityCitizen pupilToTeach;\n+\n+    /**\n+     * The max time to sit.\n+     */\n+    private int maxSittingTicks = 0;\n+\n+    /**\n+     * The current sitting time.\n+     */\n+    private int sittingTicks = 0;\n+\n+    /**\n+     * Constructor for the AI\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkTeacher(@NotNull final JobTeacher job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(DECIDE, this::decide, TICKS_SECOND),\n+          new AITarget(TEACH, this::teach, TICKS_SECOND)\n+        );\n+        worker.setCanPickUpLoot(true);\n+    }\n+\n+    /**\n+     * Decide what to do next.\n+     * @return the next state to go to.\n+     */\n+    private IAIState decide()\n+    {\n+        final int paperInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), PAPER);\n+        final int paperInInv = InventoryUtils.getItemCountInItemHandler((worker.getInventoryCitizen()), PAPER);\n+        if (paperInBuilding + paperInInv <= 0)\n+        {\n+            requestPaper();\n+        }\n+\n+        if (paperInInv == 0 && paperInBuilding > 0)\n+        {\n+            needsCurrently = PAPER;\n+            return GATHERING_REQUIRED_MATERIALS;\n+        }\n+\n+        final List<? extends AbstractEntityCitizen> pupils = world.getEntitiesWithinAABB(ModEntities.CITIZEN, getTargetableArea(), cit -> cit.isChild() && cit.ridingEntity != null && cit.getCitizenJobHandler().getColonyJob() instanceof JobPupil);\n+        if (pupils.size() > 0)\n+        {\n+            pupilToTeach = pupils.get(worker.getRandom().nextInt(pupils.size()));\n+            return TEACH;\n+        }\n+\n+        return START_WORKING;\n+    }\n+\n+\n+    private IAIState teach()\n+    {\n+        if (pupilToTeach == null || pupilToTeach.ridingEntity == null)\n+        {\n+            return START_WORKING;\n+        }\n+\n+        if (walkToBlock(pupilToTeach.getPosition()))\n+        {\n+            return getState();\n+        }\n+\n+        if (maxSittingTicks == 0 || worker.ridingEntity == null)\n+        {\n+            // Sit for 2-100 seconds.\n+            final int jobModifier = 100 / worker.getCitizenData().getJobModifier();\n+            maxSittingTicks = worker.getRandom().nextInt(jobModifier / 2) + jobModifier / 2;\n+\n+            final SittingEntity entity = (SittingEntity) ModEntities.SITTINGENTITY.create(world);\n+            entity.setPosition(worker.posX, worker.posY - 1f, worker.posZ);\n+            entity.setMaxLifeTime(maxSittingTicks * 20);\n+            world.addEntity(entity);\n+            worker.startRiding(entity);\n+            worker.getNavigator().clearPath();\n+        }\n+\n+        sittingTicks++;\n+        if (sittingTicks < maxSittingTicks)\n+        {\n+            return getState();\n+        }\n+\n+        if (worker.ridingEntity != null)\n+        {\n+            worker.stopRiding();\n+            worker.setPosition(worker.posX, worker.posY + 1, worker.posZ);\n+        }\n+\n+        final int slot = InventoryUtils.findFirstSlotInItemHandlerWith(worker.getInventoryCitizen(), PAPER);\n+        if (slot != -1)\n+        {\n+            InventoryUtils.transferXOfFirstSlotInItemHandlerWithIntoNextFreeSlotInItemHandler(\n+              worker.getInventoryCitizen(),\n+              PAPER,\n+              1, pupilToTeach.getInventoryCitizen()\n+            );\n+        }\n+\n+        pupilToTeach.getCitizenData().getCitizenSkillHandler().addXpToSkill(Skill.Intelligence, 1, pupilToTeach.getCitizenData());", "originalCommit": "0b5bbf379cee1734f33957d40e8903679ae4d104", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MDA2Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404350066", "bodyText": "added the bonus to the wrong one. (Paper consumption gives big bonus too)", "author": "Raycoms", "createdAt": "2020-04-06T19:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNDI4Ng=="}], "type": "inlineReview"}, {"oid": "dacd0c853123d8c096b0ef28cb04393b5e714e80", "url": "https://github.com/ldtteam/minecolonies/commit/dacd0c853123d8c096b0ef28cb04393b5e714e80", "message": "fix jdoc", "committedDate": "2020-04-06T19:56:33Z", "type": "commit"}, {"oid": "de8d451ad8efd0d1b0b1d9fd6ed63a1edddc523c", "url": "https://github.com/ldtteam/minecolonies/commit/de8d451ad8efd0d1b0b1d9fd6ed63a1edddc523c", "message": "fix limit to employ teacher too", "committedDate": "2020-04-06T20:07:48Z", "type": "commit"}]}