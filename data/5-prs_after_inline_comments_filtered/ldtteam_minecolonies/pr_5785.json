{"pr_number": 5785, "pr_title": "Rework the baker to be a real smeltercrafter", "pr_createdAt": "2020-09-16T05:18:19Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/5785", "timeline": [{"oid": "0b15eb5461558253d15e09912ed60a019e3dd5df", "url": "https://github.com/ldtteam/minecolonies/commit/0b15eb5461558253d15e09912ed60a019e3dd5df", "message": "Improve NBT support for recipes", "committedDate": "2020-09-16T05:04:53Z", "type": "commit"}, {"oid": "371d49be8776dc5803a212e683a330e2343f4388", "url": "https://github.com/ldtteam/minecolonies/commit/371d49be8776dc5803a212e683a330e2343f4388", "message": "rework SmelterCrafter fueling", "committedDate": "2020-09-16T05:07:15Z", "type": "commit"}, {"oid": "0e9435f4d3c82d7e0710111210c3a0495e0a91b9", "url": "https://github.com/ldtteam/minecolonies/commit/0e9435f4d3c82d7e0710111210c3a0495e0a91b9", "message": "Rework the baker to be a real smeltercrafter", "committedDate": "2020-09-16T05:08:20Z", "type": "commit"}, {"oid": "085a0f0aab87c53abb5a9ccb3a241ff28047cdf4", "url": "https://github.com/ldtteam/minecolonies/commit/085a0f0aab87c53abb5a9ccb3a241ff28047cdf4", "message": "Add new items and recipes", "committedDate": "2020-09-16T05:08:51Z", "type": "commit"}, {"oid": "8d19e2abfe832d33d9a712560104cd3f35d76003", "url": "https://github.com/ldtteam/minecolonies/commit/8d19e2abfe832d33d9a712560104cd3f35d76003", "message": "Add Update handler for baker", "committedDate": "2020-09-16T05:11:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4NjkyNw==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489486927", "bodyText": "commented out?", "author": "someaddons", "createdAt": "2020-09-16T14:34:46Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBaker.java", "diffHunk": "@@ -197,61 +175,55 @@ public void deserializeNBT(final CompoundNBT compound)\n                 final CompoundNBT productCompound = taskTagList.getCompound(i);\n                 final BakingProduct bakingProduct = BakingProduct.createFromNBT(productCompound);\n                 bakingProducts.add(bakingProduct);\n+                if(state != ProductState.UNCRAFTED)\n+                {\n+                    InventoryUtils.addItemStackToProvider(this, bakingProduct.getEndProduct());\n+                }\n             }\n-\n-            tasks.put(state, bakingProducts);\n-        }\n-\n-        final ListNBT furnaceTagList = compound.getList(TAG_FURNACES, Constants.NBT.TAG_COMPOUND);\n-        for (int i = 0; i < furnaceTagList.size(); ++i)\n-        {\n-            final CompoundNBT furnaceCompound = furnaceTagList.getCompound(i);\n-            final BlockPos pos = BlockPosUtil.read(furnaceCompound, TAG_FURNACE_POS);\n-            final BakingProduct bakingProduct = BakingProduct.createFromNBT(furnaceCompound);\n-            furnaces.put(pos, bakingProduct);\n         }\n     }\n \n     @Override\n-    public CompoundNBT serializeNBT()\n+    public ImmutableCollection<IRequestResolver<?>> createResolvers()\n     {\n-        final CompoundNBT compound = super.serializeNBT();\n+        final Collection<IRequestResolver<?>> supers =\n+          super.createResolvers().stream()\n+            .filter(r -> !(r instanceof PrivateWorkerCraftingProductionResolver || r instanceof PrivateWorkerCraftingRequestResolver))\n+            .collect(Collectors.toList());\n+        final ImmutableList.Builder<IRequestResolver<?>> builder = ImmutableList.builder();\n+\n+        builder.addAll(supers);\n+/*        builder.add(new BuildingRequestResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN))); */", "originalCommit": "8d19e2abfe832d33d9a712560104cd3f35d76003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5OTgwOA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489599808", "bodyText": "Oh, missed that. I'll clean it up. That should be there as part of the supers.", "author": "Mekle001", "createdAt": "2020-09-16T17:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4NjkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NjIxMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489596211", "bodyText": "should we check if it returns an empty air item here?  And log an error when parsing fails, also for the tags maybe.", "author": "someaddons", "createdAt": "2020-09-16T17:14:57Z", "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipe.java", "diffHunk": "@@ -142,40 +144,59 @@\n      */\n     private int maxBldgLevel = 5;\n \n-\n     /**\n      * This class can only be created by the parse static\n      */\n     private CustomRecipe()\n     {\n+    }\n \n+    private static ItemStack idToItemStack(String itemId)\n+    {\n+        final int tagIndex = itemId.indexOf(\"{\");\n+        final String tag = tagIndex > 0 ? itemId.substring(tagIndex) : null;\n+        itemId = tagIndex > 0 ? itemId.substring(0, tagIndex) : itemId;\n+        final String[] split = itemId.split(\":\");\n+        final Item item = ForgeRegistries.ITEMS.getValue(new ResourceLocation(split[0], split[1]));", "originalCommit": "8d19e2abfe832d33d9a712560104cd3f35d76003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMjMzOA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489612338", "bodyText": "I'll log a warning for air/empty, and errors for parse failures. I'm not going to refer them back to us, since this is likely to be modpack author issues.", "author": "Mekle001", "createdAt": "2020-09-16T17:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NjIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxNTk5Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489615993", "bodyText": "ye thats fine, just nice to have for the ppl modifying it to see if sth went wrong", "author": "someaddons", "createdAt": "2020-09-16T17:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NjIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5ODEzNQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489598135", "bodyText": "old log", "author": "someaddons", "createdAt": "2020-09-16T17:18:19Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,142 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()\n+    {\n+        final List<ItemStack> possibleFuels = getOwnBuilding().getAllowedFuel();\n+        if (possibleFuels.isEmpty())\n+        {\n+            if (worker.getCitizenData() != null)\n+            {\n+                worker.getCitizenData().triggerInteraction(new StandardInteraction(new TranslationTextComponent(FURNACE_USER_NO_FUEL), ChatPriority.IMPORTANT));\n+            }\n+            return ImmutableList.of();\n+        }\n+\n+        if(currentRecipeStorage != null)\n+        {\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getPrimaryOutput()));\n+            // There is always only one input.\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getCleanedInput().get(0).getItemStack()));\n+        }\n+        return possibleFuels;\n+    }\n+\n+    private boolean isFuelNeeded()\n+    {\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check Fuel levels in the furnace\n+     */\n+    private IAIState checkFurnaceFuel()\n+    {\n+        final World world = getOwnBuilding().getColony().getWorld();\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding + amountOfFuelInInv <= 0 && !getOwnBuilding().hasWorkerOpenRequestsOfType(worker.getCitizenData(), TypeToken.of(StackList.class)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE)\n+        {\n+            worker.getCitizenData().createRequestAsync(new StackList(possibleFuels, COM_MINECOLONIES_REQUESTS_BURNABLE, STACKSIZE, 1));\n+            return getState();\n+        }\n+\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                if (entity instanceof FurnaceTileEntity)\n+                {\n+                    final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                    if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                    {\n+                        Log.getLogger().info(\"Need to fuel the furnaces!\");\n+                        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)\n+                        {\n+                            needsCurrently = new Tuple<>(item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)), STACKSIZE);\n+                            return GATHERING_REQUIRED_MATERIALS;\n+                        }\n+\n+                        fuelPos = pos;\n+                        if(preFuelState == null)\n+                        {\n+                            preFuelState = getState();\n+                        }\n+                        return ADD_FUEL_TO_FURNACE;\n+                    }\n+                }\n+            }\n+        }\n+        return getState();\n+    }\n+\n+    /**\n+     * Add furnace fuel when necessary\n+     * @return\n+     */\n+    private IAIState addFuelToFurnace()\n+    {\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)\n+        {\n+            needsCurrently = new Tuple<>(item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)), STACKSIZE);\n+            return GATHERING_REQUIRED_MATERIALS;\n+        }\n+\n+        if (fuelPos == null || walkToBlock(fuelPos))\n+        {\n+            return getState();\n+        }\n+\n+        if (WorldUtil.isBlockLoaded(world, fuelPos))\n+        {\n+            final TileEntity entity = world.getTileEntity(fuelPos);\n+            if (entity instanceof FurnaceTileEntity)\n+            {\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                //Stoke the furnaces\n+                if (InventoryUtils.hasItemInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, item)))\n+                        && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)))\n+                {\n+                    InventoryUtils.transferXOfFirstSlotInItemHandlerWithIntoInItemHandler(\n+                        worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, item)), STACKSIZE,\n+                        new InvWrapper(furnace), FUEL_SLOT);\n+                    if(preFuelState != null && preFuelState != ADD_FUEL_TO_FURNACE)\n+                    {\n+                        IAIState returnState = preFuelState;\n+                        preFuelState = null;\n+                        fuelPos = null;\n+                        return returnState;\n+                    } \n+                }\n+            }\n+        }\n+\n+        Log.getLogger().info(\"fueling confused!\");", "originalCommit": "8d19e2abfe832d33d9a712560104cd3f35d76003", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDIzNQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489600235", "bodyText": "copy paste error/ also for the other items", "author": "someaddons", "createdAt": "2020-09-16T17:22:04Z", "path": "src/main/java/com/minecolonies/coremod/items/ItemBreadDough.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.minecolonies.api.creativetab.ModCreativeTabs;\n+\n+import static com.minecolonies.api.util.constant.Constants.STACKSIZE;\n+\n+/**\n+ * Class handling the Santa hat.", "originalCommit": "8d19e2abfe832d33d9a712560104cd3f35d76003", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDM5NA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489600394", "bodyText": "Yup. Will clean up.", "author": "Mekle001", "createdAt": "2020-09-16T17:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDIzNQ=="}], "type": "inlineReview"}, {"oid": "093472321cbe1bbbbeff9c4e06ae0993e67b580d", "url": "https://github.com/ldtteam/minecolonies/commit/093472321cbe1bbbbeff9c4e06ae0993e67b580d", "message": "PR Feedback Cleanup", "committedDate": "2020-09-16T17:27:20Z", "type": "commit"}, {"oid": "b5161c72cf84715f510419b24d2daa1f834bd30e", "url": "https://github.com/ldtteam/minecolonies/commit/b5161c72cf84715f510419b24d2daa1f834bd30e", "message": "Logging for ItemDefinition parsing", "committedDate": "2020-09-16T17:48:25Z", "type": "commit"}, {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6", "url": "https://github.com/ldtteam/minecolonies/commit/e91ccfb4a52bce8965806a38f0405d7d34492ee6", "message": "Add support for reading old baker furnace lists", "committedDate": "2020-09-17T02:24:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4NjQ2NQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490086465", "bodyText": "final?", "author": "Raycoms", "createdAt": "2020-09-17T09:01:50Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java", "diffHunk": "@@ -207,7 +207,9 @@ private void updateResourcePane()\n         neededLabel.setLabelText(resource.getAvailable() + \" / \" + resource.getAmount());\n         findPaneOfTypeByID(RESOURCE_QUANTITY_MISSING, Label.class).setLabelText(Integer.toString(resource.getAmount() - resource.getAvailable()));\n \n-        findPaneOfTypeByID(RESOURCE_ICON, ItemIcon.class).setItem(new ItemStack(resource.getItem(), 1));\n+        ItemStack image = new ItemStack(resource.getItem(), 1);", "originalCommit": "e91ccfb4a52bce8965806a38f0405d7d34492ee6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4ODA5Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490088097", "bodyText": "jdoc", "author": "Raycoms", "createdAt": "2020-09-17T09:04:34Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,140 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()", "originalCommit": "e91ccfb4a52bce8965806a38f0405d7d34492ee6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTI2Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490089263", "bodyText": "Not sure it's worth it. But for performance reasons we could always first check the inventory and if it doesn't then we check the building (building count can be fairly expensive). Potentially also just check for hasInInv instead of count here?", "author": "Raycoms", "createdAt": "2020-09-17T09:06:18Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,140 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()\n+    {\n+        final List<ItemStack> possibleFuels = getOwnBuilding().getAllowedFuel();\n+        if (possibleFuels.isEmpty())\n+        {\n+            if (worker.getCitizenData() != null)\n+            {\n+                worker.getCitizenData().triggerInteraction(new StandardInteraction(new TranslationTextComponent(FURNACE_USER_NO_FUEL), ChatPriority.IMPORTANT));\n+            }\n+            return ImmutableList.of();\n+        }\n+\n+        if(currentRecipeStorage != null)\n+        {\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getPrimaryOutput()));\n+            // There is always only one input.\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getCleanedInput().get(0).getItemStack()));\n+        }\n+        return possibleFuels;\n+    }\n+\n+    private boolean isFuelNeeded()\n+    {\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check Fuel levels in the furnace\n+     */\n+    private IAIState checkFurnaceFuel()\n+    {\n+        final World world = getOwnBuilding().getColony().getWorld();\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding + amountOfFuelInInv <= 0 && !getOwnBuilding().hasWorkerOpenRequestsOfType(worker.getCitizenData(), TypeToken.of(StackList.class)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE)", "originalCommit": "e91ccfb4a52bce8965806a38f0405d7d34492ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzM1Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490283353", "bodyText": "I agree that it's probably not worth it. Especially with the addition of the isFuelNeeded predicate for the state machine. This cuts down on how often we do the actual inventory checks significantly.", "author": "Mekle001", "createdAt": "2020-09-17T14:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5Mzc4MA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490293780", "bodyText": "how often is this called?", "author": "Raycoms", "createdAt": "2020-09-17T14:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NjgwNA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490296804", "bodyText": "new AIEventTarget(AIBlockingEventType.STATE_BLOCKING, this::isFuelNeeded, this::checkFurnaceFuel, TICKS_SECOND),\n\nSo, isFuelNeeded is called once a second. Only if it returns true is checkFurnaceFuel called, generally about 3 times for each furnace that needs fueling in the SpaceWars baker, during the walk to fuel it.", "author": "Mekle001", "createdAt": "2020-09-17T14:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTgxNA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490089814", "bodyText": "if amountOfFuelInInv == 0, then fuelInBuilding > 0 is trivially true", "author": "Raycoms", "createdAt": "2020-09-17T09:07:17Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,140 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()\n+    {\n+        final List<ItemStack> possibleFuels = getOwnBuilding().getAllowedFuel();\n+        if (possibleFuels.isEmpty())\n+        {\n+            if (worker.getCitizenData() != null)\n+            {\n+                worker.getCitizenData().triggerInteraction(new StandardInteraction(new TranslationTextComponent(FURNACE_USER_NO_FUEL), ChatPriority.IMPORTANT));\n+            }\n+            return ImmutableList.of();\n+        }\n+\n+        if(currentRecipeStorage != null)\n+        {\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getPrimaryOutput()));\n+            // There is always only one input.\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getCleanedInput().get(0).getItemStack()));\n+        }\n+        return possibleFuels;\n+    }\n+\n+    private boolean isFuelNeeded()\n+    {\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check Fuel levels in the furnace\n+     */\n+    private IAIState checkFurnaceFuel()\n+    {\n+        final World world = getOwnBuilding().getColony().getWorld();\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding + amountOfFuelInInv <= 0 && !getOwnBuilding().hasWorkerOpenRequestsOfType(worker.getCitizenData(), TypeToken.of(StackList.class)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE)\n+        {\n+            worker.getCitizenData().createRequestAsync(new StackList(possibleFuels, COM_MINECOLONIES_REQUESTS_BURNABLE, STACKSIZE, 1));\n+            return getState();\n+        }\n+\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                if (entity instanceof FurnaceTileEntity)\n+                {\n+                    final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                    if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                    {\n+                        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)", "originalCommit": "e91ccfb4a52bce8965806a38f0405d7d34492ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTIwNg==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490285206", "bodyText": "Yup. This code got moved, from where it mattered to here, and I missed that.", "author": "Mekle001", "createdAt": "2020-09-17T14:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTA3MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490091071", "bodyText": "if both are 0, I could imagine this here being a problem", "author": "Raycoms", "createdAt": "2020-09-17T09:09:11Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,140 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()\n+    {\n+        final List<ItemStack> possibleFuels = getOwnBuilding().getAllowedFuel();\n+        if (possibleFuels.isEmpty())\n+        {\n+            if (worker.getCitizenData() != null)\n+            {\n+                worker.getCitizenData().triggerInteraction(new StandardInteraction(new TranslationTextComponent(FURNACE_USER_NO_FUEL), ChatPriority.IMPORTANT));\n+            }\n+            return ImmutableList.of();\n+        }\n+\n+        if(currentRecipeStorage != null)\n+        {\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getPrimaryOutput()));\n+            // There is always only one input.\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getCleanedInput().get(0).getItemStack()));\n+        }\n+        return possibleFuels;\n+    }\n+\n+    private boolean isFuelNeeded()\n+    {\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check Fuel levels in the furnace\n+     */\n+    private IAIState checkFurnaceFuel()\n+    {\n+        final World world = getOwnBuilding().getColony().getWorld();\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding + amountOfFuelInInv <= 0 && !getOwnBuilding().hasWorkerOpenRequestsOfType(worker.getCitizenData(), TypeToken.of(StackList.class)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE)\n+        {\n+            worker.getCitizenData().createRequestAsync(new StackList(possibleFuels, COM_MINECOLONIES_REQUESTS_BURNABLE, STACKSIZE, 1));\n+            return getState();\n+        }\n+\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                if (entity instanceof FurnaceTileEntity)\n+                {\n+                    final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                    if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                    {\n+                        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)\n+                        {\n+                            needsCurrently = new Tuple<>(item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)), STACKSIZE);\n+                            return GATHERING_REQUIRED_MATERIALS;\n+                        }\n+\n+                        fuelPos = pos;\n+                        if(preFuelState == null)\n+                        {\n+                            preFuelState = getState();\n+                        }\n+                        return ADD_FUEL_TO_FURNACE;\n+                    }\n+                }\n+            }\n+        }\n+        return getState();\n+    }\n+\n+    /**\n+     * Add furnace fuel when necessary\n+     * @return\n+     */\n+    private IAIState addFuelToFurnace()\n+    {\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)", "originalCommit": "e91ccfb4a52bce8965806a38f0405d7d34492ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTU5Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490091597", "bodyText": "Also I think we can optimize this (only check one if the other is x, etc).\nEspecially since we walk to the block, we definitely want to do the expensive count operations only after arriving. before we at most care \"are there any\"", "author": "Raycoms", "createdAt": "2020-09-17T09:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5Mzc0MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490293741", "bodyText": "The problem is that we don't want to want to walk to the block unless the counts are where we need them to be. At this point we should be sitting at the building, and only if we have the fuel to put in the furnace should we walk. If we do the gather materials, we'd be walking to the rack with the fuel.\nI can do the move of the building check to only happen if we have none in inventory, and make sure we don't get to the walkTo if we have no fuel in inventory.", "author": "Mekle001", "createdAt": "2020-09-17T14:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NTYyNA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490295624", "bodyText": "we can though just check for \"hasInInv\" instead of counting. And only count inBuilding if the fuelInInv is 0", "author": "Raycoms", "createdAt": "2020-09-17T14:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwMDY3Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490300672", "bodyText": "By \"hasInInv\" you mean InventoryUtils.hasItemIn<Provider/Handler>?", "author": "Mekle001", "createdAt": "2020-09-17T14:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwMjQ0Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490302447", "bodyText": "yes", "author": "Raycoms", "createdAt": "2020-09-17T14:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyMTAzNA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490321034", "bodyText": "Looking at all this again fresh, I'm not sure we actually need the count here.", "author": "Mekle001", "createdAt": "2020-09-17T14:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTA3MQ=="}], "type": "inlineReview"}, {"oid": "3813094bd4f0f46916a9973b2eacade17fcfdece", "url": "https://github.com/ldtteam/minecolonies/commit/3813094bd4f0f46916a9973b2eacade17fcfdece", "message": "Furtther PR cleanup", "committedDate": "2020-09-17T15:00:21Z", "type": "commit"}, {"oid": "36da99fe553a6da7084c863e6f17cc3a6d5b484e", "url": "https://github.com/ldtteam/minecolonies/commit/36da99fe553a6da7084c863e6f17cc3a6d5b484e", "message": "More optimization", "committedDate": "2020-09-17T15:08:23Z", "type": "commit"}, {"oid": "1221691e906e731d341ade8cee12778093f40293", "url": "https://github.com/ldtteam/minecolonies/commit/1221691e906e731d341ade8cee12778093f40293", "message": "Fix a few cases of containers comparison", "committedDate": "2020-09-18T15:47:26Z", "type": "commit"}, {"oid": "6b40ec00783c5ab95b6a4daf5e7d0a0ae8a73424", "url": "https://github.com/ldtteam/minecolonies/commit/6b40ec00783c5ab95b6a4daf5e7d0a0ae8a73424", "message": "Fix resource icon in building", "committedDate": "2020-09-18T15:47:57Z", "type": "commit"}, {"oid": "f11516b8be3fa6cbbe976f42a43fdd8a474ac111", "url": "https://github.com/ldtteam/minecolonies/commit/f11516b8be3fa6cbbe976f42a43fdd8a474ac111", "message": "Fix ItemStackRequest to return right displaystacks", "committedDate": "2020-09-18T15:48:40Z", "type": "commit"}, {"oid": "2224b958841e29c42cfdb581517162a1aff8b58b", "url": "https://github.com/ldtteam/minecolonies/commit/2224b958841e29c42cfdb581517162a1aff8b58b", "message": "Add texturesfor bread_dough and pumpkin_pie", "committedDate": "2020-09-18T15:49:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3Njc4MA==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r491476780", "bodyText": "Can we make this an if, it's getting kinda too complex for an inline if.", "author": "Raycoms", "createdAt": "2020-09-19T17:41:37Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAICrafting.java", "diffHunk": "@@ -168,7 +168,7 @@ protected IAIState getRecipe()\n         for (final ItemStorage inputStorage : input)\n         {\n             final ItemStack container = inputStorage.getItem().getContainerItem(inputStorage.getItemStack());\n-            final int remaining = !ItemStackUtils.isEmpty(container) ? inputStorage.getAmount() :inputStorage.getAmount() * remainingOpsCount ;\n+            final int remaining = ItemStackUtils.isEmpty(container) && ItemStackUtils.compareItemStacksIgnoreStackSize(inputStorage.getItemStack(), container , false, true) ? inputStorage.getAmount() * remainingOpsCount :inputStorage.getAmount();\n             if (InventoryUtils.getItemCountInProvider(getOwnBuilding(), itemStack -> itemStack.isItemEqual(inputStorage.getItemStack()))", "originalCommit": "2224b958841e29c42cfdb581517162a1aff8b58b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae64150f5680cc1fabc1f71d478b7b1c1fef5d00", "url": "https://github.com/ldtteam/minecolonies/commit/ae64150f5680cc1fabc1f71d478b7b1c1fef5d00", "message": "Merge branch 'version/1.15' into feature/newbaker", "committedDate": "2020-09-19T17:42:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3ODAzMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r491678031", "bodyText": "Empty line.", "author": "OrionDevelopment", "createdAt": "2020-09-20T10:37:27Z", "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/requests/StandardRequests.java", "diffHunk": "@@ -67,6 +67,13 @@ public ITextComponent getShortDisplayString()\n             combined.appendSibling(getRequest().getStack().getTextComponent());\n             return combined;\n         }\n+        @NotNull\n+", "originalCommit": "ae64150f5680cc1fabc1f71d478b7b1c1fef5d00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2afdfc33a5a10de713cea0c544895c20dba6427b", "url": "https://github.com/ldtteam/minecolonies/commit/2afdfc33a5a10de713cea0c544895c20dba6427b", "message": "PR Feedback", "committedDate": "2020-09-20T13:35:13Z", "type": "commit"}, {"oid": "c9f761890ba6da8325e5c35e3e8ae52aa218d309", "url": "https://github.com/ldtteam/minecolonies/commit/c9f761890ba6da8325e5c35e3e8ae52aa218d309", "message": "Merge branch 'version/1.15' into feature/newbaker", "committedDate": "2020-09-20T13:37:20Z", "type": "commit"}, {"oid": "9cce428e9f5b561829e9cd964757c5a0663935a4", "url": "https://github.com/ldtteam/minecolonies/commit/9cce428e9f5b561829e9cd964757c5a0663935a4", "message": "Fix NPE", "committedDate": "2020-09-20T14:44:25Z", "type": "commit"}, {"oid": "b7d9e5274fc9574d6cfd543508f1b0e5b7a6a720", "url": "https://github.com/ldtteam/minecolonies/commit/b7d9e5274fc9574d6cfd543508f1b0e5b7a6a720", "message": "Fix NPE", "committedDate": "2020-09-20T14:48:04Z", "type": "commit"}]}