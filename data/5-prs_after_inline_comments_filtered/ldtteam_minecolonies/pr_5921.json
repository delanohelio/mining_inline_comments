{"pr_number": 5921, "pr_title": "Delivery orders", "pr_createdAt": "2020-10-14T19:33:09Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/5921", "timeline": [{"oid": "abfdd5a2af02892f3c9b1eef2786378a123947cd", "url": "https://github.com/ldtteam/minecolonies/commit/abfdd5a2af02892f3c9b1eef2786378a123947cd", "message": "Improve some possible error for visitor spawn positions", "committedDate": "2020-10-10T14:07:59Z", "type": "commit"}, {"oid": "cf55e2a48d77d16b84ed46c61af652ef1364bc69", "url": "https://github.com/ldtteam/minecolonies/commit/cf55e2a48d77d16b84ed46c61af652ef1364bc69", "message": "Fix research citizen limit not allowing config limit to be reached", "committedDate": "2020-10-10T16:58:55Z", "type": "commit"}, {"oid": "f664ea1a4f3c49103d3ad383b7096c8eb4a2b4d7", "url": "https://github.com/ldtteam/minecolonies/commit/f664ea1a4f3c49103d3ad383b7096c8eb4a2b4d7", "message": "todo", "committedDate": "2020-10-10T17:07:31Z", "type": "commit"}, {"oid": "4cd1171774b0b195c3241b54d7216fa24d31d7db", "url": "https://github.com/ldtteam/minecolonies/commit/4cd1171774b0b195c3241b54d7216fa24d31d7db", "message": "Merge remote-tracking branch 'remotes/origin/version/1.15' into nextstuff", "committedDate": "2020-10-11T19:00:41Z", "type": "commit"}, {"oid": "09852b63666695536dbac510389629acda63d409", "url": "https://github.com/ldtteam/minecolonies/commit/09852b63666695536dbac510389629acda63d409", "message": "Fix raids spawning near buildings\nFix visitors sometimes getting to zero pos\nDeliveries are now beeing assigned most smartly to deliverymen, based on various factors", "committedDate": "2020-10-14T17:09:45Z", "type": "commit"}, {"oid": "88fd43983e9bbb134a921356c013d9fb174c936f", "url": "https://github.com/ldtteam/minecolonies/commit/88fd43983e9bbb134a921356c013d9fb174c936f", "message": "Merge remote-tracking branch 'remotes/origin/version/1.15' into nextstuff", "committedDate": "2020-10-14T17:10:27Z", "type": "commit"}, {"oid": "f674f76e83ff4d20e019d2395948a4ffa1d5034d", "url": "https://github.com/ldtteam/minecolonies/commit/f674f76e83ff4d20e019d2395948a4ffa1d5034d", "message": "search close warehouse for now", "committedDate": "2020-10-15T16:35:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODI4Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r505698287", "bodyText": "those all look like static utility methods?", "author": "Raycoms", "createdAt": "2020-10-15T16:58:50Z", "path": "src/main/java/com/minecolonies/coremod/colony/jobs/JobDeliveryman.java", "diffHunk": "@@ -460,6 +456,209 @@ private boolean haveTasksSameSourceAndDest(@NotNull final Delivery requestA, @No\n         return deliveryList;\n     }\n \n+    /**\n+     * Calculates a score an position for a delivery, the bigger the score the worse the request fits.\n+     *\n+     * @param newRequest to check\n+     * @return tuple of score and index to place at.\n+     */\n+    @NotNull\n+    public Tuple<Double, Integer> getScoreForDelivery(final IRequest<?> newRequest)\n+    {\n+        final List<IToken<?>> requestTokens = getTaskQueueFromDataStore();\n+\n+        double totalScore = 10000;\n+        int bestRequestIndex = Math.max(0, requestTokens.size());\n+\n+        if (requestTokens.isEmpty())\n+        {\n+            // No task, compare with dman to warehouse pos\n+            final IWareHouse wareHouse = findWareHouse();\n+            totalScore = getClosenessFactorTo(getSource(newRequest),\n+              getTarget(newRequest),\n+              wareHouse != null ? findWareHouse().getID() : getCitizen().getLastPosition(),\n+              getCitizen().getLastPosition());\n+        }\n+\n+        for (int i = 0; i < requestTokens.size(); i++)\n+        {\n+            final IRequest<?> compareRequest = getColony().getRequestManager().getRequestForToken(requestTokens.get(i));\n+            if (compareRequest == null)\n+            {\n+                continue;\n+            }\n+\n+            if (compareRequest.getRequest() instanceof AbstractDeliverymanRequestable)\n+            {\n+                double score = getScoreOfRequestComparedTo(newRequest, compareRequest, i);\n+\n+                if (score <= totalScore)\n+                {\n+                    bestRequestIndex = i + getPickupOrRequestOffset(newRequest, compareRequest);\n+                    totalScore = score;\n+                }\n+            }\n+        }\n+\n+        totalScore += bestRequestIndex;\n+\n+        return new Tuple<>(totalScore, bestRequestIndex);\n+    }\n+\n+    /**\n+     * Calculates a score between two requesting making them compareable in many aspects.\n+     *\n+     * @param source         source request\n+     * @param comparing      comparing request\n+     * @param comparingIndex index of the comparing request in our taskque. Use taskque size when comparing a request not on the que.\n+     * @return compare score of the two requests, lower is better.\n+     */\n+    public double getScoreOfRequestComparedTo(final IRequest<?> source, final IRequest<?> comparing, final int comparingIndex)\n+    {\n+        if (!(comparing != null && comparing.getRequest() instanceof AbstractDeliverymanRequestable && source != null\n+                && source.getRequest() instanceof AbstractDeliverymanRequestable))\n+        {\n+            return 100;\n+        }\n+\n+        // Closeness compared to the existing request\n+        double score = getClosenessFactorTo(getSource(source), getTarget(source), getSource(comparing), getTarget(comparing));\n+        // Priority of the existing request in diff to priority of the newly incomming one\n+        score += (((AbstractDeliverymanRequestable) comparing.getRequest()).getPriority() - ((AbstractDeliverymanRequestable) source.getRequest()).getPriority()) * 0.3;\n+\n+        // Additional score for alternating between pickup and delivery\n+        score += getPickUpRequestScore(source, comparing);\n+\n+        // Worse score the more requests we have to overtake\n+        score += (getTaskQueue().size() - comparingIndex) * 0.5;\n+\n+        return score;\n+    }\n+\n+    /**\n+     * Gets the right task insertion order for pickups, if a new request fitting an existing request is added and the existing is a pickup and the new is a delivery it should be\n+     * infront.\n+     *\n+     * @param newRequest the new request to add\n+     * @param existing   the existing request\n+     * @return 1 for inserting after existing, 0 for infront\n+     */\n+    private int getPickupOrRequestOffset(final IRequest<?> newRequest, final IRequest<?> existing)\n+    {\n+        if (newRequest.getRequest() instanceof Delivery && existing.getRequest() instanceof Pickup)", "originalCommit": "f674f76e83ff4d20e019d2395948a4ffa1d5034d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNDI3NQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r505704275", "bodyText": "true some don't require internal data", "author": "someaddons", "createdAt": "2020-10-15T17:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODI4Nw=="}], "type": "inlineReview"}, {"oid": "ef5934b5c3c013446e5df2077d24f1d74b4c46ee", "url": "https://github.com/ldtteam/minecolonies/commit/ef5934b5c3c013446e5df2077d24f1d74b4c46ee", "message": "add update handler", "committedDate": "2020-10-15T17:06:39Z", "type": "commit"}, {"oid": "132a6003c1edcfaa799666185ec4014dfb6e2b6e", "url": "https://github.com/ldtteam/minecolonies/commit/132a6003c1edcfaa799666185ec4014dfb6e2b6e", "message": "some statics", "committedDate": "2020-10-15T17:16:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMDg4OA==", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r506110888", "bodyText": "There is a method on the blockpos todo this.", "author": "OrionDevelopment", "createdAt": "2020-10-16T07:12:46Z", "path": "src/api/java/com/minecolonies/api/util/BlockPosUtil.java", "diffHunk": "@@ -352,6 +352,22 @@ public static int getMaxDistance2D(@NotNull final BlockPos block1, @NotNull fina\n         return Math.max(xDif, zDif);\n     }\n \n+    /**\n+     * Gets the actual distance in blocks between two positions\n+     *\n+     * @param pos1 Blockpos 1\n+     * @param pos2 Blockpos 2\n+     * @return distance in blocks.\n+     */\n+    public static double getDistance(final BlockPos pos1, final BlockPos pos2)", "originalCommit": "132a6003c1edcfaa799666185ec4014dfb6e2b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMzc1MA==", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r506233750", "bodyText": "I thought that aswell, but was and still am unable to find any :D I only see a square one", "author": "someaddons", "createdAt": "2020-10-16T09:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMDg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMzU3NA==", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r506113574", "bodyText": "This won't work.\nDeliveries are not requests solely by a warehouse, but can be requested by any worker.", "author": "OrionDevelopment", "createdAt": "2020-10-16T07:17:04Z", "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/DeliveryRequestResolver.java", "diffHunk": "@@ -47,159 +22,22 @@ public DeliveryRequestResolver(\n         super(location, token);\n     }\n \n-    @Override\n-    public TypeToken<? extends Delivery> getRequestType()\n-    {\n-        return TypeConstants.DELIVERY;\n-    }\n-\n     @Override\n     public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends Delivery> requestToCheck)\n     {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return false;\n-        }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-        final IWareHouse wareHouse = colony.getBuildingManager().getClosestWarehouseInColony(requestToCheck.getRequester().getLocation().getInDimensionLocation());\n-        if (wareHouse == null)\n+        final IWareHouse wareHouse = manager.getColony().getBuildingManager().getClosestWarehouseInColony(requestToCheck.getRequest().getStart().getInDimensionLocation());\n+        if (wareHouse == null || !wareHouse.getID().equals(getLocation().getInDimensionLocation()))", "originalCommit": "132a6003c1edcfaa799666185ec4014dfb6e2b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExNjQ4Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r506116487", "bodyText": "Ye, that just means that the warehouse closest to the delivery position in in charge for a delivery (in particular the deliveryman around that area)", "author": "Raycoms", "createdAt": "2020-10-16T07:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2NTcyMw==", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r506565723", "bodyText": "Arg it does getClosestWarehouse\u00b4\nOkey.", "author": "OrionDevelopment", "createdAt": "2020-10-16T15:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMzU3NA=="}], "type": "inlineReview"}, {"oid": "ed8162fa65435db7120f801290b8cecdc033ca91", "url": "https://github.com/ldtteam/minecolonies/commit/ed8162fa65435db7120f801290b8cecdc033ca91", "message": "Fix closest warehouse lookup to only loop the warehouses and not count warehouses with level zero", "committedDate": "2020-10-16T10:13:33Z", "type": "commit"}]}