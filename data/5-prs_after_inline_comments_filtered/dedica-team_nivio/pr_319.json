{"pr_number": 319, "pr_title": "WIP: 317 Removing interfaces", "pr_createdAt": "2020-10-11T17:12:07Z", "pr_url": "https://github.com/dedica-team/nivio/pull/319", "timeline": [{"oid": "afac05bc7fe99058c8ae7f65595771cf179db966", "url": "https://github.com/dedica-team/nivio/commit/afac05bc7fe99058c8ae7f65595771cf179db966", "message": "WIP: removing Interfaces from Description objects", "committedDate": "2020-10-10T18:19:16Z", "type": "commit"}, {"oid": "ef56c0b9b2f68739b6be1f588b585ab83fba14d4", "url": "https://github.com/dedica-team/nivio/commit/ef56c0b9b2f68739b6be1f588b585ab83fba14d4", "message": "WIP: removing interfaces also from impl objects. Compiling, 2 tests failing", "committedDate": "2020-10-11T17:06:53Z", "type": "commit"}, {"oid": "252e979ff4fdc424a10aa39aff23f8a3e5c2a775", "url": "https://github.com/dedica-team/nivio/commit/252e979ff4fdc424a10aa39aff23f8a3e5c2a775", "message": "WIP: deleted interfaces", "committedDate": "2020-10-11T17:11:26Z", "type": "commit"}, {"oid": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "url": "https://github.com/dedica-team/nivio/commit/a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "message": "renamed LandscapeImpl to Landscape", "committedDate": "2020-10-11T17:15:07Z", "type": "commit"}, {"oid": "c645a4132545e3480534287938d6e1ef59052988", "url": "https://github.com/dedica-team/nivio/commit/c645a4132545e3480534287938d6e1ef59052988", "message": "fixed constructor usage in ItemFactory and jackson-databind dependency", "committedDate": "2020-10-12T16:29:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0MzY2OQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r502943669", "bodyText": "\ud83d\udc4d might work, since we'd never process a landscape graph", "author": "bonndan", "createdAt": "2020-10-11T17:31:29Z", "path": "src/main/java/de/bonndan/nivio/ProcessingException.java", "diffHunk": "@@ -12,24 +11,24 @@\n  */\n public class ProcessingException extends RuntimeException {\n \n-    private final Landscape landscape;\n+    private final LandscapeDescription landscapeDescription;", "originalCommit": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0Mzk4NQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r502943985", "bodyText": "\ud83d\udc4d", "author": "bonndan", "createdAt": "2020-10-11T17:34:24Z", "path": "src/main/java/de/bonndan/nivio/model/Landscape.java", "diffHunk": "@@ -1,20 +1,247 @@\n package de.bonndan.nivio.model;\n \n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import de.bonndan.nivio.LandscapeConfig;\n+import de.bonndan.nivio.assessment.Assessable;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.input.ProcessLog;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.StringUtils;\n \n-import java.util.Map;\n+import javax.validation.constraints.Pattern;\n+import java.time.LocalDateTime;\n+import java.util.*;\n+import java.util.stream.Collectors;\n \n-public interface Landscape extends Component, Linked {\n+import static de.bonndan.nivio.model.Item.IDENTIFIER_VALIDATION;\n+\n+/**\n+ * Think of a group of servers and apps, like a \"project\", \"workspace\" or stage.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class Landscape implements Linked, Component, Labeled, Assessable {", "originalCommit": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDM2NQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r502944365", "bodyText": "\ud83d\udc4d the code is improving", "author": "bonndan", "createdAt": "2020-10-11T17:38:17Z", "path": "src/main/java/de/bonndan/nivio/output/map/RenderCache.java", "diffHunk": "@@ -67,9 +66,9 @@ private void createCacheEntry(LandscapeImpl landscape) {\n     @Override\n     public void onApplicationEvent(ProcessingFinishedEvent processingFinishedEvent) {\n         Landscape landscape = processingFinishedEvent.getLandscape();\n-        if (landscape instanceof LandscapeImpl) {\n+        if (landscape != null) {", "originalCommit": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NDY4NQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r502944685", "bodyText": "\ud83d\udc4d", "author": "bonndan", "createdAt": "2020-10-11T17:41:37Z", "path": "src/main/java/de/bonndan/nivio/input/IndexEventListener.java", "diffHunk": "@@ -22,7 +22,7 @@ public IndexEventListener(Indexer indexer) {\n \n     @Override\n     public void onApplicationEvent(IndexEvent event) {\n-        LandscapeDescription description = (LandscapeDescription) event.getLandscape();\n+        LandscapeDescription description = event.getLandscape();", "originalCommit": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b02c634365b9ceef860a49c6ea13f9f184bd40b8", "url": "https://github.com/dedica-team/nivio/commit/b02c634365b9ceef860a49c6ea13f9f184bd40b8", "message": "removed unneded factory method and fixed the test that used it", "committedDate": "2020-10-12T17:42:58Z", "type": "commit"}, {"oid": "b0ef2d615911bfecb325ab001e3c2cc4d8079baf", "url": "https://github.com/dedica-team/nivio/commit/b0ef2d615911bfecb325ab001e3c2cc4d8079baf", "message": "removed unneded pick(Item item) and fixed test to work with ItemDescription", "committedDate": "2020-10-12T17:51:09Z", "type": "commit"}, {"oid": "88108cdf9751e2b3d4dd4c5b97ba51bfb6144ce3", "url": "https://github.com/dedica-team/nivio/commit/88108cdf9751e2b3d4dd4c5b97ba51bfb6144ce3", "message": "removed unneded method in ItemMatcher", "committedDate": "2020-10-12T17:55:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyOTg1Mg==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503429852", "bodyText": "Do IndexEvents always work with the LandscapeDescriptions? Or do they also need to work with the Landscape objects?", "author": "mfbieber", "createdAt": "2020-10-12T17:14:36Z", "path": "src/main/java/de/bonndan/nivio/IndexEvent.java", "diffHunk": "@@ -1,39 +1,48 @@\n package de.bonndan.nivio;\n \n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.model.Landscape;\n+\n+import java.io.IOException;\n \n /**\n  * Event is fired to (re)index a landscape.\n- *\n- *\n- *\n  */\n public class IndexEvent extends ProcessingEvent {\n \n-    private final Landscape landscape;\n     private final String message;\n+    private final LandscapeDescription landscapeDescription;\n \n     /**\n      * @param source triggering class\n-     * @param landscape landscape description\n+     * @param landscapeDescription landscape description\n      * @param message message for the UI\n      */\n-    public IndexEvent(Object source, Landscape landscape, String message) {\n+    public IndexEvent(Object source, LandscapeDescription landscapeDescription, String message) {", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNDQ0OQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503724449", "bodyText": "Once #309 is implemented the description might become null, but imho it will never be a part of the graph.", "author": "bonndan", "createdAt": "2020-10-13T07:27:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyOTg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDI1Ng==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503430256", "bodyText": "Is this also correct, that this one works with the LandscapeDescription and not the Landscape object?", "author": "mfbieber", "createdAt": "2020-10-12T17:15:23Z", "path": "src/main/java/de/bonndan/nivio/ProcessingErrorEvent.java", "diffHunk": "@@ -20,9 +26,16 @@ public ProcessingException getException() {\n         return exception;\n     }\n \n-    @Override\n-    public Landscape getLandscape() {\n-        return exception.getLandscape();\n+    @JsonSerialize(using = PLS.class)\n+    public LandscapeDescription getLandscape() {", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMDkxOA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503730918", "bodyText": "It is currently implemented like that, but KPIFactory operates on Landscape and throws a ProcessingException, but does not know LandscapeDescription, so the exception and the resulting event do not have anything.\nThe proper solution here were to run the KPI \"init\" stuff earlier (this also makes sense, since it is about parsing the config) when LandscapeDescription is still available. I think we should open a new ticket for that.", "author": "bonndan", "createdAt": "2020-10-13T07:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2MDY0Mg==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505660642", "bodyText": "@bonndan: Agreed, can you open the ticket since you can probably describe the underlying mechanisms better than me in this case? :)", "author": "mfbieber", "createdAt": "2020-10-15T16:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODY5OQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505668699", "bodyText": "#321 has been created.", "author": "bonndan", "createdAt": "2020-10-15T16:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDYyNQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503430625", "bodyText": "This has been moved to the specific events, since some of them use the LandscapeDescription and others the Landscape object.", "author": "mfbieber", "createdAt": "2020-10-12T17:16:10Z", "path": "src/main/java/de/bonndan/nivio/ProcessingEvent.java", "diffHunk": "@@ -30,9 +22,6 @@ public ProcessingEvent(Object source) {\n         super(source);\n     }\n \n-    @JsonSerialize(using = PLS.class)\n-    public abstract Landscape getLandscape();\n-", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjk1NQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503732955", "bodyText": "We might solve this by referecing\na) a hateoas link and\nb) the FullyQualifiedIdentifier\ninstead of \"landscape\". We could also the rid of PLS.class this way.", "author": "bonndan", "createdAt": "2020-10-13T07:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2Mjg2NQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505662865", "bodyText": "I am happy to do that. Where should the HATEOAS link point at? And the FullyQualifiedIdentifier is the landscapeDescription.getIdentifier()?", "author": "mfbieber", "createdAt": "2020-10-15T16:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3MDA3Mg==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505670072", "bodyText": "It's xxxDescription.getFullyQualifiedIdentifier() ... the Compontent interface required that method. See LinkFactory for how links are created.", "author": "bonndan", "createdAt": "2020-10-15T16:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxMTg0NA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505711844", "bodyText": "We agreed to approach this issue at some other point.", "author": "mfbieber", "createdAt": "2020-10-15T17:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMTAxOQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503431019", "bodyText": "The ProcessingException (and the processing in general) work with the LandscapeDescription, correct?", "author": "mfbieber", "createdAt": "2020-10-12T17:17:01Z", "path": "src/main/java/de/bonndan/nivio/ProcessingException.java", "diffHunk": "@@ -12,24 +11,24 @@\n  */\n public class ProcessingException extends RuntimeException {\n \n-    private final Landscape landscape;\n+    private final LandscapeDescription landscapeDescription;\n \n-    public ProcessingException(Landscape landscape, String message) {\n+    public ProcessingException(LandscapeDescription landscapeDescription, String message) {", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzg2Mw==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503733863", "bodyText": "Yes, except for KPIFactory.init (see above, KPIFactory usage should be refactored).", "author": "bonndan", "createdAt": "2020-10-13T07:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMTAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMTQxOQ==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503431419", "bodyText": "The ProcessingFinishedEvent does not work with the LandscapeDescription, but with the Landscape object == the result of the processing operations. Is this correct?", "author": "mfbieber", "createdAt": "2020-10-12T17:17:55Z", "path": "src/main/java/de/bonndan/nivio/ProcessingFinishedEvent.java", "diffHunk": "@@ -22,11 +28,18 @@ public ProcessingFinishedEvent(LandscapeDescription source, Landscape landscape)\n         this.landscape = landscape;\n     }\n \n-    @Override\n+    @JsonSerialize(using = PLS.class)\n     public Landscape getLandscape() {\n         return landscape;\n     }\n ", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNjQ0Mg==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503736442", "bodyText": "Yes. We might refactor that, too. It uses both (in \"source\" and \"landscape\"). The landscape is needed by the ObserverRegistry at the moment to let it know which landscape is subject to change. However, it could be a mistake of thought and we might get the same behaviour with the LandscapeDescription using its FullyQualifiedIdentifier.", "author": "bonndan", "createdAt": "2020-10-13T07:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMTQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NDU0MA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505664540", "bodyText": "I'll have to visualize our observer/event mechanism to think about this. Should we open a separated issue?", "author": "mfbieber", "createdAt": "2020-10-15T16:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMTQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3MjIxNw==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505672217", "bodyText": "#322", "author": "bonndan", "createdAt": "2020-10-15T16:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMTQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMzc2OA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503433768", "bodyText": "The logic of creating the Item from the ItemDescription is in the added function, see below.", "author": "mfbieber", "createdAt": "2020-10-12T17:23:08Z", "path": "src/main/java/de/bonndan/nivio/input/DiffResolver.java", "diffHunk": "@@ -20,27 +20,26 @@ protected DiffResolver(ProcessLog processLog) {\n     }\n \n     @Override\n-    public void process(LandscapeDescription input, LandscapeImpl landscape) {\n+    public void process(LandscapeDescription input, Landscape landscape) {\n         Set<Item> existingItems = landscape.getItems().all();\n \n         //insert new ones\n-        List<LandscapeItem> newItems = added(input.getItemDescriptions().all(), existingItems);\n+        List<Item> newItems = added(input.getItemDescriptions().all(), existingItems, landscape);\n         Set<Item> inLandscape = new HashSet<>();\n         processLog.info(\"Adding \" + newItems.size() + \" items in env \" + landscape.getIdentifier());\n         newItems.forEach(\n-                serviceDescription -> {\n-                    processLog.info(\"Creating new service \" + serviceDescription.getIdentifier() + \" in env \" + input.getIdentifier());\n-                    Item created = ItemFactory.fromDescription(serviceDescription, landscape);\n-                    inLandscape.add(created);\n+                newItem -> {\n+                    processLog.info(\"Creating new service \" + newItem.getIdentifier() + \" in env \" + input.getIdentifier());\n+                    inLandscape.add(newItem);", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNTE0OA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503435148", "bodyText": "Here an Item object is generated from its ItemDescription. Before, it could have been an Item or an ItemDescription. It compared Item with ItemDescription, but now it only compares Item with Item.", "author": "mfbieber", "createdAt": "2020-10-12T17:26:08Z", "path": "src/main/java/de/bonndan/nivio/input/DiffResolver.java", "diffHunk": "@@ -79,36 +78,47 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             return new ArrayList<>();\n         }\n \n-        List<LandscapeItem> removed = removed(kept, all);\n+        List<Item> removed = removed(kept, all);\n         logger.info(\"Removing \" + removed.size() + \" sources in env \" + landscapeDescription.getIdentifier());\n         return removed;\n     }\n \n     /**\n-     * Returns all elements kept in the second list.\n+     * Returns all items that are also present in the new itemDescriptions\n      */\n-    static List<LandscapeItem> kept(Collection<? extends LandscapeItem> items1, Collection<? extends LandscapeItem> items2) {\n-        return items2.stream().filter(item -> exists(item, items1)).collect(Collectors.toList());\n+    static List<Item> kept(Collection<? extends ItemDescription> newItems, Collection<? extends Item> items, Landscape landscape) {\n+        return items.stream()\n+                .filter(item -> presentInNewItems(item, newItems, landscape))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n      * Returns all elements removed from the second list.\n      */\n-    static List<LandscapeItem> removed(Collection<? extends LandscapeItem> items1, Collection<? extends LandscapeItem> items2) {\n-        return items2.stream().filter(item -> !exists(item, items1)).collect(Collectors.toList());\n+    static List<Item> removed(Collection<? extends Item> items, Collection<? extends Item> itemDescriptions) {\n+        return itemDescriptions.stream()\n+                .filter(item -> doesNotExistAsItem(item, items))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n      * Returns all elements which are not in the second list\n      */\n-    static List<LandscapeItem> added(Collection<? extends LandscapeItem> items1, Collection<? extends LandscapeItem> existing) {\n-        return items1.stream()\n-                .filter(item -> !exists(item, existing))\n+    static List<Item> added(Collection<? extends ItemDescription> itemDescriptions, Collection<? extends Item> existingItems, Landscape landscape) {\n+        return itemDescriptions.stream()\n+                .map(itemDescription -> ItemFactory.fromDescription(itemDescription, landscape))\n+                .filter(newItem -> doesNotExistAsItem(newItem, existingItems))\n                 .collect(Collectors.toList());\n     }\n ", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczODAyOA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503738028", "bodyText": "Phew. Yes, should work. That's a complicated spot.", "author": "bonndan", "createdAt": "2020-10-13T07:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNTE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NDc3OA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505664778", "bodyText": "\ud83d\ude05", "author": "mfbieber", "createdAt": "2020-10-15T16:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MDE0Mw==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503440143", "bodyText": "I needed to have a method for !exists that compares two Item objects and exists for Item and ItemDescription. This makes the stream operations in kept simpler.", "author": "mfbieber", "createdAt": "2020-10-12T17:36:49Z", "path": "src/main/java/de/bonndan/nivio/input/DiffResolver.java", "diffHunk": "@@ -79,36 +78,47 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             return new ArrayList<>();\n         }\n \n-        List<LandscapeItem> removed = removed(kept, all);\n+        List<Item> removed = removed(kept, all);\n         logger.info(\"Removing \" + removed.size() + \" sources in env \" + landscapeDescription.getIdentifier());\n         return removed;\n     }\n \n     /**\n-     * Returns all elements kept in the second list.\n+     * Returns all items that are also present in the new itemDescriptions\n      */\n-    static List<LandscapeItem> kept(Collection<? extends LandscapeItem> items1, Collection<? extends LandscapeItem> items2) {\n-        return items2.stream().filter(item -> exists(item, items1)).collect(Collectors.toList());\n+    static List<Item> kept(Collection<? extends ItemDescription> newItems, Collection<? extends Item> items, Landscape landscape) {\n+        return items.stream()\n+                .filter(item -> presentInNewItems(item, newItems, landscape))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n      * Returns all elements removed from the second list.\n      */\n-    static List<LandscapeItem> removed(Collection<? extends LandscapeItem> items1, Collection<? extends LandscapeItem> items2) {\n-        return items2.stream().filter(item -> !exists(item, items1)).collect(Collectors.toList());\n+    static List<Item> removed(Collection<? extends Item> items, Collection<? extends Item> itemDescriptions) {\n+        return itemDescriptions.stream()\n+                .filter(item -> doesNotExistAsItem(item, items))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n      * Returns all elements which are not in the second list\n      */\n-    static List<LandscapeItem> added(Collection<? extends LandscapeItem> items1, Collection<? extends LandscapeItem> existing) {\n-        return items1.stream()\n-                .filter(item -> !exists(item, existing))\n+    static List<Item> added(Collection<? extends ItemDescription> itemDescriptions, Collection<? extends Item> existingItems, Landscape landscape) {\n+        return itemDescriptions.stream()\n+                .map(itemDescription -> ItemFactory.fromDescription(itemDescription, landscape))\n+                .filter(newItem -> doesNotExistAsItem(newItem, existingItems))\n                 .collect(Collectors.toList());\n     }\n \n-    private static boolean exists(LandscapeItem item, Collection<? extends LandscapeItem> items) {\n-        return items.stream().anyMatch(\n+    private static boolean presentInNewItems(Item item, Collection<? extends ItemDescription> newItems, Landscape landscape) {\n+        return newItems.stream()\n+                .map(newItem -> ItemFactory.fromDescription(newItem, landscape))\n+                .anyMatch(inList -> ItemMatcher.forTarget(item).isSimilarTo(inList));\n+    }\n+\n+    private static boolean doesNotExistAsItem(Item item, Collection<? extends Item> items) {\n+        return items.stream().noneMatch(\n                 inList -> ItemMatcher.forTarget(item).isSimilarTo(inList)\n         );", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MTMyMw==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503441323", "bodyText": "Here I needed to copy the factory method. Is this correct that we want to generate a LandscapeDescription also from an outdatedLandscape (Landscape object, e.g. in ObserverRegistry)? But also from an outdatedDescription (LandscapeDescription object)?", "author": "mfbieber", "createdAt": "2020-10-12T17:39:17Z", "path": "src/main/java/de/bonndan/nivio/input/LandscapeDescriptionFactory.java", "diffHunk": "@@ -37,16 +37,34 @@ public LandscapeDescriptionFactory(FileFetcher fileFetcher) {\n     /**\n      * Returns a {@link LandscapeDescription}s from config file url.\n      *\n-     * @param old an outdated landscape / description\n+     * @param outdatedLandscape an outdated landscape\n      * @return the description or null if the source is no URL\n      */\n     @Nullable\n-    public LandscapeDescription from(Landscape old) {\n+    public LandscapeDescription from(Landscape outdatedLandscape) {\n         try {\n-            URL url = new URL(old.getSource());\n+            URL url = new URL(outdatedLandscape.getSource());\n             return from(url);\n         } catch (MalformedURLException e) {\n-            String msg = \"Source in landscape \" + old.getIdentifier() + \" might be no url: \" + old.getSource();\n+            String msg = \"Source in landscape \" + outdatedLandscape.getIdentifier() + \" might be no url: \" + outdatedLandscape.getSource();\n+            LOGGER.info(msg);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Returns a {@link LandscapeDescription}s from config file url.\n+     *\n+     * @param outdatedDescription an outdated description\n+     * @return the description or null if the source is no URL\n+     */\n+    @Nullable\n+    public LandscapeDescription from(LandscapeDescription outdatedDescription) {\n+        try {\n+            URL url = new URL(outdatedDescription.getSource());\n+            return from(url);\n+        } catch (MalformedURLException e) {\n+            String msg = \"Source in landscape \" + outdatedDescription.getIdentifier() + \" might be no url: \" + outdatedDescription.getSource();\n             LOGGER.info(msg);\n             return null;\n         }", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MTg5Nw==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503441897", "bodyText": "The second one is only used in a test. I will fix this!", "author": "mfbieber", "createdAt": "2020-10-12T17:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MTMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0ODY0Nw==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503448647", "bodyText": "This is a code duplication I could not remove. We compare ItemDescriptions with this matcher in ItemDescriptions.findAll()", "author": "mfbieber", "createdAt": "2020-10-12T17:55:10Z", "path": "src/main/java/de/bonndan/nivio/model/ItemMatcher.java", "diffHunk": "@@ -134,6 +139,30 @@ public boolean isSimilarTo(LandscapeItem item) {\n         return equalsLandscape && equalsGroup && equalsItem;\n     }\n \n+    public boolean isSimilarTo(ItemDescription itemDescription) {\n+        FullyQualifiedIdentifier otherItemFQI = itemDescription.getFullyQualifiedIdentifier();\n+\n+        boolean equalsLandscape;\n+        if (StringUtils.isEmpty(landscape) || StringUtils.isEmpty(otherItemFQI.getLandscape()))\n+            equalsLandscape = true; //ignoring landscape because not set\n+        else\n+            equalsLandscape = landscape.equalsIgnoreCase(otherItemFQI.getLandscape());\n+\n+        boolean equalsGroup;\n+        if (StringUtils.isEmpty(group) || StringUtils.isEmpty(otherItemFQI.getGroup()))\n+            equalsGroup = true;\n+        else\n+            equalsGroup = this.group.equalsIgnoreCase(otherItemFQI.getGroup());\n+\n+        boolean equalsItem;\n+        if (StringUtils.isEmpty(this.item) || StringUtils.isEmpty(otherItemFQI.getItem()))\n+            equalsItem = true;\n+        else\n+            equalsItem = this.item.equalsIgnoreCase(otherItemFQI.getItem());\n+\n+        return equalsLandscape && equalsGroup && equalsItem;\n+    }\n+", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4NjczOA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503786738", "bodyText": "Perhaps we can use the code in FullyQualifiedIdentifier and remove the methods in ItemMatcher", "author": "bonndan", "createdAt": "2020-10-13T09:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0ODY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NDI1Mw==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503454253", "bodyText": "This is another duplication. These are only used in tests. Do we still need those? What are we testing with those that our code is not doing? Why are they deprecated?", "author": "mfbieber", "createdAt": "2020-10-12T18:04:56Z", "path": "src/main/java/de/bonndan/nivio/model/RelationType.java", "diffHunk": "@@ -31,7 +32,18 @@ public static RelationType from(String relationType) {\n      * @return filtered subset\n      */\n     @Deprecated\n-    public List<RelationItem> filter(Collection<? extends RelationItem> all) {\n-        return all.stream().filter(relationItem -> this.equals(relationItem.getType())).collect(Collectors.toList());\n+    public List<Relation> filter(Collection<? extends Relation> all) {\n+        return all.stream().filter(relation -> this.equals(relation.getType())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Filters a list of relations for equal type.\n+     *\n+     * @param all all relations\n+     * @return filtered subset\n+     */\n+    @Deprecated\n+    public List<RelationDescription> filterRelationDescription(Collection<? extends RelationDescription> all) {\n+        return all.stream().filter(relation -> this.equals(relation.getType())).collect(Collectors.toList());", "originalCommit": "c645a4132545e3480534287938d6e1ef59052988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NjkyOA==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r503796928", "bodyText": "In earlier versions the relation type had an effect on layouting, but that has been removed. Relation type filtering can be done using RelationType.equals(), so these methods can be removed.", "author": "bonndan", "createdAt": "2020-10-13T09:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NDI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NTQxMw==", "url": "https://github.com/dedica-team/nivio/pull/319#discussion_r505665413", "bodyText": "I will do that.", "author": "mfbieber", "createdAt": "2020-10-15T16:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NDI1Mw=="}], "type": "inlineReview"}, {"oid": "7fea5ef7fa532a248d88ab17ed992fc6128046ba", "url": "https://github.com/dedica-team/nivio/commit/7fea5ef7fa532a248d88ab17ed992fc6128046ba", "message": "removed deprecated filter methods in RelationType", "committedDate": "2020-10-15T16:40:40Z", "type": "commit"}, {"oid": "003875220785374afada6575cdbff7a14dbbdf9f", "url": "https://github.com/dedica-team/nivio/commit/003875220785374afada6575cdbff7a14dbbdf9f", "message": "removed one duplicated isSimilarTo method in ItemMatcher by using directly the FullyQualifiedIdentifier", "committedDate": "2020-10-15T16:54:45Z", "type": "commit"}]}