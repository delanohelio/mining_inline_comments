{"pr_number": 6917, "pr_title": "DocumentsStorageProvider: prevent opening stale file contents", "pr_createdAt": "2020-09-09T18:41:05Z", "pr_url": "https://github.com/nextcloud/android/pull/6917", "timeline": [{"oid": "e15f8fbc6c0251b82a7c4ec9af8fa5a5a9fcfdbf", "url": "https://github.com/nextcloud/android/commit/e15f8fbc6c0251b82a7c4ec9af8fa5a5a9fcfdbf", "message": "DocumentsStorageProvider: prevent opening stale file contents\nfix #6883\n\nSigned-off-by: Jens Mueller <tschenser@gmx.de>", "committedDate": "2020-09-09T18:27:46Z", "type": "commit"}, {"oid": "cae0e77267989d5177ede1624c0a217e70888658", "url": "https://github.com/nextcloud/android/commit/cae0e77267989d5177ede1624c0a217e70888658", "message": "fix codacy comments\n\nSigned-off-by: Jens Mueller <tschenser@gmx.de>", "committedDate": "2020-09-10T19:12:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5NjE0Mg==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486596142", "bodyText": "What if the result was not a success, but had a different error than this one? Are we just silently ignoring it?", "author": "grote", "createdAt": "2020-09-10T19:52:30Z", "path": "src/main/java/com/owncloud/android/providers/DocumentsStorageProvider.java", "diffHunk": "@@ -196,27 +198,32 @@ public ParcelFileDescriptor openDocument(String documentId, String mode, Cancell\n \n         OCFile ocFile = document.getFile();\n         Account account = document.getAccount();\n-        final User user = accountManager.getUser(account.name).orElseThrow(RuntimeException::new); // should exist\n \n-        if (ocFile.isDown()) {\n-            RemoteOperationResult result;\n-            try {\n-                result = new SynchronizeFileOperation(ocFile, null, user, true, context)\n-                    .execute(document.getClient(), document.getStorageManager());\n-            } catch (Exception e) {\n-                throw getFileNotFoundExceptionWithCause(\"Error synchronizing file: \" + ocFile.getFileName(), e);\n-            }\n-            if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n-                // TODO show a conflict notification with a pending intent that shows a ConflictResolveDialog\n-                Log_OC.w(TAG, \"Conflict found: \" + result);\n-            } else if (!result.isSuccess()) {\n+        int accessMode = ParcelFileDescriptor.parseMode(mode);\n+\n+        boolean needsDownload = accessMode != ParcelFileDescriptor.MODE_WRITE_ONLY;\n+        if (needsDownload && ocFile.isDown()) {\n+            RemoteOperationResult result = new ReadFileRemoteOperation(ocFile.getRemotePath())\n+                .execute(document.getClient());\n+            if (result.isSuccess()) {\n+                OCFile serverFile = FileStorageUtils.fillOCFile((RemoteFile) result.getData().get(0));\n+                boolean serverChanged = !serverFile.getEtag().equals(ocFile.getEtag());\n+                boolean localChanged = ocFile.getLocalModificationTimestamp() > ocFile.getLastSyncDateForData();\n+                if (localChanged && serverChanged) {\n+                    // TODO show a conflict notification with a pending intent that shows a ConflictResolveDialog\n+                    Log_OC.w(TAG, \"Conflict found: \" + result);\n+                    // open local version for now\n+                    needsDownload = false;\n+                } else {\n+                    needsDownload = serverChanged;\n+                }\n+            } else if (result.getCode() == RemoteOperationResult.ResultCode.FILE_NOT_FOUND) {", "originalCommit": "cae0e77267989d5177ede1624c0a217e70888658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NTE5OA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486865198", "bodyText": "We then should exit with any valid return code, 404?", "author": "tobiasKaminsky", "createdAt": "2020-09-11T08:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5NjE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNjI1NA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r487316254", "bodyText": "Did you run the integration tests I had added? (The CI is flaky unfortunately)\nYes\n\n\nWould maybe be nice to add another test to them that shows the improved behavior, aka not serving stale files anymore?\nDone", "author": "jmue", "createdAt": "2020-09-11T22:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5NjE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5Njg1OA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486596858", "bodyText": "Do we always need to do that? Is there another way to find out if the local file can be considered up-to-date?", "author": "grote", "createdAt": "2020-09-10T19:53:58Z", "path": "src/main/java/com/owncloud/android/providers/DocumentsStorageProvider.java", "diffHunk": "@@ -196,27 +198,32 @@ public ParcelFileDescriptor openDocument(String documentId, String mode, Cancell\n \n         OCFile ocFile = document.getFile();\n         Account account = document.getAccount();\n-        final User user = accountManager.getUser(account.name).orElseThrow(RuntimeException::new); // should exist\n \n-        if (ocFile.isDown()) {\n-            RemoteOperationResult result;\n-            try {\n-                result = new SynchronizeFileOperation(ocFile, null, user, true, context)\n-                    .execute(document.getClient(), document.getStorageManager());\n-            } catch (Exception e) {\n-                throw getFileNotFoundExceptionWithCause(\"Error synchronizing file: \" + ocFile.getFileName(), e);\n-            }\n-            if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n-                // TODO show a conflict notification with a pending intent that shows a ConflictResolveDialog\n-                Log_OC.w(TAG, \"Conflict found: \" + result);\n-            } else if (!result.isSuccess()) {\n+        int accessMode = ParcelFileDescriptor.parseMode(mode);\n+\n+        boolean needsDownload = accessMode != ParcelFileDescriptor.MODE_WRITE_ONLY;\n+        if (needsDownload && ocFile.isDown()) {\n+            RemoteOperationResult result = new ReadFileRemoteOperation(ocFile.getRemotePath())\n+                .execute(document.getClient());", "originalCommit": "cae0e77267989d5177ede1624c0a217e70888658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NDYyNA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486864624", "bodyText": "We could use https://github.com/nextcloud/android-library/blob/master/src/main/java/com/owncloud/android/lib/resources/files/CheckEtagRemoteOperation.java\nwhich only checks eTag, so this should be a lot faster.", "author": "tobiasKaminsky", "createdAt": "2020-09-11T08:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5Njg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMzQwMA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r487313400", "bodyText": "I've changed that.", "author": "jmue", "createdAt": "2020-09-11T22:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5Njg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5ODAxNg==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486598016", "bodyText": "This is a logic change. Before, we were always downloading the file when it was not down (available locally I guess). Now, we only do this when want to read the file which sounds plausible. I am just flagging this, because it changes the behavior.", "author": "grote", "createdAt": "2020-09-10T19:56:16Z", "path": "src/main/java/com/owncloud/android/providers/DocumentsStorageProvider.java", "diffHunk": "@@ -196,27 +198,32 @@ public ParcelFileDescriptor openDocument(String documentId, String mode, Cancell\n \n         OCFile ocFile = document.getFile();\n         Account account = document.getAccount();\n-        final User user = accountManager.getUser(account.name).orElseThrow(RuntimeException::new); // should exist\n \n-        if (ocFile.isDown()) {\n-            RemoteOperationResult result;\n-            try {\n-                result = new SynchronizeFileOperation(ocFile, null, user, true, context)\n-                    .execute(document.getClient(), document.getStorageManager());\n-            } catch (Exception e) {\n-                throw getFileNotFoundExceptionWithCause(\"Error synchronizing file: \" + ocFile.getFileName(), e);\n-            }\n-            if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n-                // TODO show a conflict notification with a pending intent that shows a ConflictResolveDialog\n-                Log_OC.w(TAG, \"Conflict found: \" + result);\n-            } else if (!result.isSuccess()) {\n+        int accessMode = ParcelFileDescriptor.parseMode(mode);\n+\n+        boolean needsDownload = accessMode != ParcelFileDescriptor.MODE_WRITE_ONLY;\n+        if (needsDownload && ocFile.isDown()) {\n+            RemoteOperationResult result = new ReadFileRemoteOperation(ocFile.getRemotePath())\n+                .execute(document.getClient());\n+            if (result.isSuccess()) {\n+                OCFile serverFile = FileStorageUtils.fillOCFile((RemoteFile) result.getData().get(0));\n+                boolean serverChanged = !serverFile.getEtag().equals(ocFile.getEtag());\n+                boolean localChanged = ocFile.getLocalModificationTimestamp() > ocFile.getLastSyncDateForData();\n+                if (localChanged && serverChanged) {\n+                    // TODO show a conflict notification with a pending intent that shows a ConflictResolveDialog\n+                    Log_OC.w(TAG, \"Conflict found: \" + result);\n+                    // open local version for now\n+                    needsDownload = false;\n+                } else {\n+                    needsDownload = serverChanged;\n+                }\n+            } else if (result.getCode() == RemoteOperationResult.ResultCode.FILE_NOT_FOUND) {\n                 Log_OC.e(TAG, result.toString());\n                 throw new FileNotFoundException(\"Error synchronizing file: \" + ocFile.getFileName());\n             }\n-            // TODO test if this needed here\n-            // block thread until file is saved\n-            FileStorageUtils.checkIfFileFinishedSaving(ocFile);\n-        } else {\n+        }\n+\n+        if (needsDownload) {\n             DownloadFileOperation downloadFileOperation = new DownloadFileOperation(account, ocFile, context);", "originalCommit": "cae0e77267989d5177ede1624c0a217e70888658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjExNQ==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486866115", "bodyText": "This is in openDocument() function.\nWhen / how is this called if not hen the user/app wants to read it?", "author": "tobiasKaminsky", "createdAt": "2020-09-11T08:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5ODAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5ODY1NQ==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486998655", "bodyText": "It is not super obvious, but consumers implicitly call this by doing ContentResolver#openInputStream() and ContentResolver#openOutputStream() like here https://github.com/nextcloud/android/blob/master/src/androidTest/java/com/owncloud/android/providers/DocumentsStorageProviderIT.kt#L135", "author": "grote", "createdAt": "2020-09-11T12:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5ODAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNTM5Mg==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r487315392", "bodyText": "This is in openDocument() function.\nWhen / how is this called if not hen the user/app wants to read it?\n\nopenDocument() is also used to write to a file.", "author": "jmue", "createdAt": "2020-09-11T22:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5ODAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5ODMyNw==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486598327", "bodyText": "Did you test/check/verify that this is not needed anymore when using the ReadFileRemoteOperation and FileStorageUtils.fillOCFile()?", "author": "grote", "createdAt": "2020-09-10T19:56:52Z", "path": "src/main/java/com/owncloud/android/providers/DocumentsStorageProvider.java", "diffHunk": "@@ -196,27 +198,32 @@ public ParcelFileDescriptor openDocument(String documentId, String mode, Cancell\n \n         OCFile ocFile = document.getFile();\n         Account account = document.getAccount();\n-        final User user = accountManager.getUser(account.name).orElseThrow(RuntimeException::new); // should exist\n \n-        if (ocFile.isDown()) {\n-            RemoteOperationResult result;\n-            try {\n-                result = new SynchronizeFileOperation(ocFile, null, user, true, context)\n-                    .execute(document.getClient(), document.getStorageManager());\n-            } catch (Exception e) {\n-                throw getFileNotFoundExceptionWithCause(\"Error synchronizing file: \" + ocFile.getFileName(), e);\n-            }\n-            if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n-                // TODO show a conflict notification with a pending intent that shows a ConflictResolveDialog\n-                Log_OC.w(TAG, \"Conflict found: \" + result);\n-            } else if (!result.isSuccess()) {\n+        int accessMode = ParcelFileDescriptor.parseMode(mode);\n+\n+        boolean needsDownload = accessMode != ParcelFileDescriptor.MODE_WRITE_ONLY;\n+        if (needsDownload && ocFile.isDown()) {\n+            RemoteOperationResult result = new ReadFileRemoteOperation(ocFile.getRemotePath())\n+                .execute(document.getClient());\n+            if (result.isSuccess()) {\n+                OCFile serverFile = FileStorageUtils.fillOCFile((RemoteFile) result.getData().get(0));\n+                boolean serverChanged = !serverFile.getEtag().equals(ocFile.getEtag());\n+                boolean localChanged = ocFile.getLocalModificationTimestamp() > ocFile.getLastSyncDateForData();\n+                if (localChanged && serverChanged) {\n+                    // TODO show a conflict notification with a pending intent that shows a ConflictResolveDialog\n+                    Log_OC.w(TAG, \"Conflict found: \" + result);\n+                    // open local version for now\n+                    needsDownload = false;\n+                } else {\n+                    needsDownload = serverChanged;\n+                }\n+            } else if (result.getCode() == RemoteOperationResult.ResultCode.FILE_NOT_FOUND) {\n                 Log_OC.e(TAG, result.toString());\n                 throw new FileNotFoundException(\"Error synchronizing file: \" + ocFile.getFileName());\n             }\n-            // TODO test if this needed here\n-            // block thread until file is saved\n-            FileStorageUtils.checkIfFileFinishedSaving(ocFile);", "originalCommit": "cae0e77267989d5177ede1624c0a217e70888658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNDUzNQ==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r487314535", "bodyText": "From my perspective this is a leftover of previous SFO use. The idea was to spin up a thread, let the SFO synchronize the file contents (asynchronously) und wait for cmpletion with that lines. Unfortunately that didn't work.", "author": "jmue", "createdAt": "2020-09-11T22:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5ODMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjgzMQ==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486866831", "bodyText": "If this is open with write_only and file is downloaded, then it should also be checked for changed content/eTag, or?", "author": "tobiasKaminsky", "createdAt": "2020-09-11T08:44:50Z", "path": "src/main/java/com/owncloud/android/providers/DocumentsStorageProvider.java", "diffHunk": "@@ -196,27 +198,32 @@ public ParcelFileDescriptor openDocument(String documentId, String mode, Cancell\n \n         OCFile ocFile = document.getFile();\n         Account account = document.getAccount();\n-        final User user = accountManager.getUser(account.name).orElseThrow(RuntimeException::new); // should exist\n \n-        if (ocFile.isDown()) {\n-            RemoteOperationResult result;\n-            try {\n-                result = new SynchronizeFileOperation(ocFile, null, user, true, context)\n-                    .execute(document.getClient(), document.getStorageManager());\n-            } catch (Exception e) {\n-                throw getFileNotFoundExceptionWithCause(\"Error synchronizing file: \" + ocFile.getFileName(), e);\n-            }\n-            if (result.getCode() == RemoteOperationResult.ResultCode.SYNC_CONFLICT) {\n-                // TODO show a conflict notification with a pending intent that shows a ConflictResolveDialog\n-                Log_OC.w(TAG, \"Conflict found: \" + result);\n-            } else if (!result.isSuccess()) {\n+        int accessMode = ParcelFileDescriptor.parseMode(mode);\n+\n+        boolean needsDownload = accessMode != ParcelFileDescriptor.MODE_WRITE_ONLY;", "originalCommit": "cae0e77267989d5177ede1624c0a217e70888658", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5OTE5Nw==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r486999197", "bodyText": "You mean in case the server version had changed in the meantime? One could argue that if we are writing to the file, we want whatever we are about to write to be the new content.", "author": "grote", "createdAt": "2020-09-11T12:03:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMDE5MA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r487900190", "bodyText": "Yes, this is why I ask\u2026We need to make sure that we do not overwrite new content of server.", "author": "tobiasKaminsky", "createdAt": "2020-09-14T13:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNDk0NQ==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r488134945", "bodyText": "Yes you're right here. We have always to sync the file metadata here, even if we open in write only mode. Otherwise we will get conflicts on upload if the server etag has changed. So I changed that for now to the old logic (download file content even if we open write only).", "author": "jmue", "createdAt": "2020-09-14T18:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTY5NA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r488139694", "bodyText": "For efficiency reanson we can think of doing a ReadFileRemoteOperation when we're within the needsDownload condition and are opening write only. So:\nif (needsDownload) {\n  if (writeOnly) {\n    <ReadFileRemoteOperation + storeMetadata>\n  } else {\n   <DownloadFileOperation  + storeMetadata + storeContents>\n  }\n}\n\n\nBut that would give us more clutter.", "author": "jmue", "createdAt": "2020-09-14T18:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMDg4NA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r488410884", "bodyText": "It is not only about metadata, but also about content.\nImagine that you have\n\na file with \"123\"\ndownload it to mobile\nchange it on server to \"1234\"\nopen it with writeOnly\nwithout download you would write 5 to 123, which then results in data loss\nas soon as etag has changed, we must download/sync (maybe even with conflict handling) the server content, so that adding 5 will then be the correct \"12345\".", "author": "tobiasKaminsky", "createdAt": "2020-09-15T06:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg4MjAwOA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r488882008", "bodyText": "Correct, I wasn't aware of opening write+append, I had only write+truncate in my mind. But as downloading in any case is done now, there is no further source code change necessary.", "author": "jmue", "createdAt": "2020-09-15T18:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2NjgzMQ=="}], "type": "inlineReview"}, {"oid": "c00e7b3dbb4c75e7183307073d5d2310d84635d1", "url": "https://github.com/nextcloud/android/commit/c00e7b3dbb4c75e7183307073d5d2310d84635d1", "message": "fix review comments\n\nSigned-off-by: Jens Mueller <tschenser@gmx.de>", "committedDate": "2020-09-11T22:02:49Z", "type": "commit"}, {"oid": "f9a82f9ed95ba83ff346f35812df54e5fe18608e", "url": "https://github.com/nextcloud/android/commit/f9a82f9ed95ba83ff346f35812df54e5fe18608e", "message": "add integration test\n\nSigned-off-by: Jens Mueller <tschenser@gmx.de>", "committedDate": "2020-09-11T22:09:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDIyNw==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r487850227", "bodyText": "We could also pass in the document here, since it has OCFile and Account.", "author": "grote", "createdAt": "2020-09-14T11:47:49Z", "path": "src/main/java/com/owncloud/android/providers/DocumentsStorageProvider.java", "diffHunk": "@@ -268,6 +249,22 @@ public ParcelFileDescriptor openDocument(String documentId, String mode, Cancell\n         }\n     }\n \n+    private boolean hasServerChange(OCFile ocFile, Account account) throws FileNotFoundException {", "originalCommit": "c00e7b3dbb4c75e7183307073d5d2310d84635d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMTM0OA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r488131348", "bodyText": "Changed.", "author": "jmue", "createdAt": "2020-09-14T18:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg1MDIyNw=="}], "type": "inlineReview"}, {"oid": "a4b0e29d80d05a3ff3051cfe19bdc68ed69759c5", "url": "https://github.com/nextcloud/android/commit/a4b0e29d80d05a3ff3051cfe19bdc68ed69759c5", "message": "fix review comments\n\nSigned-off-by: Jens Mueller <tschenser@gmx.de>", "committedDate": "2020-09-14T18:35:20Z", "type": "commit"}, {"oid": "a4b0e29d80d05a3ff3051cfe19bdc68ed69759c5", "url": "https://github.com/nextcloud/android/commit/a4b0e29d80d05a3ff3051cfe19bdc68ed69759c5", "message": "fix review comments\n\nSigned-off-by: Jens Mueller <tschenser@gmx.de>", "committedDate": "2020-09-14T18:35:20Z", "type": "forcePushed"}, {"oid": "69f3f804e29efe9fcb008ed96e54e13b2a6b09ee", "url": "https://github.com/nextcloud/android/commit/69f3f804e29efe9fcb008ed96e54e13b2a6b09ee", "message": "fix ktlint\n\nSigned-off-by: Jens Mueller <tschenser@gmx.de>", "committedDate": "2020-09-15T03:36:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTg2NA==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r488935864", "bodyText": "What happens if we read/write a file again that was not yet uploaded to the server. Does this return FILE_NOT_FOUND here and thus throws?\nDo all other tests from DocumentsStorageProviderIT still pass?", "author": "grote", "createdAt": "2020-09-15T19:54:55Z", "path": "src/main/java/com/owncloud/android/providers/DocumentsStorageProvider.java", "diffHunk": "@@ -263,6 +248,23 @@ public ParcelFileDescriptor openDocument(String documentId, String mode, Cancell\n         }\n     }\n \n+    private boolean hasServerChange(Document document) throws FileNotFoundException {\n+        Context context = getNonNullContext();\n+        OCFile ocFile = document.getFile();\n+        RemoteOperationResult result = new CheckEtagRemoteOperation(ocFile.getRemotePath(), ocFile.getEtag())\n+            .execute(document.getAccount(), context);\n+        switch (result.getCode()) {\n+            case ETAG_CHANGED:\n+                return true;\n+            case ETAG_UNCHANGED:\n+                return false;\n+            case FILE_NOT_FOUND:\n+            default:\n+                Log_OC.e(TAG, result.toString());\n+                throw new FileNotFoundException(\"Error synchronizing file: \" + ocFile.getFileName());", "originalCommit": "69f3f804e29efe9fcb008ed96e54e13b2a6b09ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE0NDE3Mw==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r489144173", "bodyText": "Good catch, so we want to return false for FILE_NOT_FOUND? This will solve that case.\nBut suppose we have:\n\nclient opens for write, upload file to server\nserver deletes file\nclient opens for write again\nWhat is our expectation here?\n\nYes, all other test pass on my side, same for the integration bot.", "author": "jmue", "createdAt": "2020-09-16T03:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzY5NQ==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r489277695", "bodyText": "in this case the client should retrieve file on server and sees that it not available and thus return file not found.", "author": "tobiasKaminsky", "createdAt": "2020-09-16T08:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2NTExNw==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r489365117", "bodyText": "Do you mean throw a FileNotFoundException and thus fail the write operation? As uploads are done async one after the other, it is probably a common scenario when using the DocumentsProvider programmatically, that the file hasn't been uploaded, yet, but is written to or read from again.\nI was asking about passing tests, because this happens here as well: https://github.com/nextcloud/android/blob/master/src/androidTest/java/com/owncloud/android/providers/DocumentsStorageProviderIT.kt#L135\nBut thinking about this again, creating and writing/reading are two separate operations, and creating happens synchronously, so we should not run into the case where FILE_NOT_FOUND is false.", "author": "grote", "createdAt": "2020-09-16T11:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyNTYxMg==", "url": "https://github.com/nextcloud/android/pull/6917#discussion_r497225612", "bodyText": "So no further change is necessary here.", "author": "jmue", "createdAt": "2020-09-30T03:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNTg2NA=="}], "type": "inlineReview"}]}