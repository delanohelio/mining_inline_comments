{"pr_number": 3506, "pr_title": " Add playlist tab to main page ", "pr_createdAt": "2020-04-30T21:47:45Z", "pr_url": "https://github.com/TeamNewPipe/NewPipe/pull/3506", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxODgwMQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r418518801", "bodyText": "Just do .subscribe(this::displayPlaylists, this::onError) (I didn't test that). You should also store the Disposable it returns and dispose it in onDestroy().", "author": "wb9688", "createdAt": "2020-05-01T12:18:51Z", "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.schabi.newpipe.settings;\n+\n+import android.app.Activity;\n+import android.content.DialogInterface;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n+import com.nostra13.universalimageloader.core.ImageLoader;\n+\n+import org.schabi.newpipe.NewPipeDatabase;\n+import org.schabi.newpipe.R;\n+import org.schabi.newpipe.database.AppDatabase;\n+import org.schabi.newpipe.database.LocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+import org.schabi.newpipe.local.playlist.LocalPlaylistManager;\n+import org.schabi.newpipe.local.playlist.RemotePlaylistManager;\n+import org.schabi.newpipe.report.ErrorActivity;\n+import org.schabi.newpipe.report.UserAction;\n+import org.schabi.newpipe.util.PlaylistItemsUtils;\n+\n+import java.util.List;\n+import java.util.Vector;\n+\n+import io.reactivex.Flowable;\n+import io.reactivex.Observer;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class SelectPlaylistFragment extends DialogFragment {\n+    /**\n+     * This contains the base display options for images.\n+     */\n+    private static final DisplayImageOptions DISPLAY_IMAGE_OPTIONS\n+            = new DisplayImageOptions.Builder().cacheInMemory(true).build();\n+\n+    private final ImageLoader imageLoader = ImageLoader.getInstance();\n+\n+    private OnSelectedLisener onSelectedLisener = null;\n+    private OnCancelListener onCancelListener = null;\n+\n+    private ProgressBar progressBar;\n+    private TextView emptyView;\n+    private RecyclerView recyclerView;\n+\n+    private List<PlaylistLocalItem> playlists = new Vector<>();\n+\n+    public void setOnSelectedLisener(final OnSelectedLisener listener) {\n+        onSelectedLisener = listener;\n+    }\n+\n+    public void setOnCancelListener(final OnCancelListener listener) {\n+        onCancelListener = listener;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Init\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    @Override\n+    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,\n+                             final Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.select_playlist_fragment, container, false);\n+        recyclerView = v.findViewById(R.id.items_list);\n+        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n+        SelectPlaylistAdapter playlistAdapter = new SelectPlaylistAdapter();\n+        recyclerView.setAdapter(playlistAdapter);\n+\n+        progressBar = v.findViewById(R.id.progressBar);\n+        emptyView = v.findViewById(R.id.empty_state_view);\n+        progressBar.setVisibility(View.VISIBLE);\n+        recyclerView.setVisibility(View.GONE);\n+        emptyView.setVisibility(View.GONE);\n+\n+        final AppDatabase database = NewPipeDatabase.getInstance(this.getContext());\n+        LocalPlaylistManager localPlaylistManager = new LocalPlaylistManager(database);\n+        RemotePlaylistManager remotePlaylistManager = new RemotePlaylistManager(database);\n+\n+        Flowable.combineLatest(localPlaylistManager.getPlaylists(),\n+                remotePlaylistManager.getPlaylists(), PlaylistItemsUtils::merge)\n+                .toObservable()\n+                .subscribeOn(Schedulers.io())\n+                .observeOn(AndroidSchedulers.mainThread())\n+                .subscribe(getPlaylistsObserver());", "originalCommit": "c998d4eb352813d366e8bdac00b93a4969ba0cee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxOTU5Mw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r418519593", "bodyText": "There's a typo here (and in other places), it should be OnSelectedListener", "author": "wb9688", "createdAt": "2020-05-01T12:21:49Z", "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.schabi.newpipe.settings;\n+\n+import android.app.Activity;\n+import android.content.DialogInterface;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n+import com.nostra13.universalimageloader.core.ImageLoader;\n+\n+import org.schabi.newpipe.NewPipeDatabase;\n+import org.schabi.newpipe.R;\n+import org.schabi.newpipe.database.AppDatabase;\n+import org.schabi.newpipe.database.LocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+import org.schabi.newpipe.local.playlist.LocalPlaylistManager;\n+import org.schabi.newpipe.local.playlist.RemotePlaylistManager;\n+import org.schabi.newpipe.report.ErrorActivity;\n+import org.schabi.newpipe.report.UserAction;\n+import org.schabi.newpipe.util.PlaylistItemsUtils;\n+\n+import java.util.List;\n+import java.util.Vector;\n+\n+import io.reactivex.Flowable;\n+import io.reactivex.Observer;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class SelectPlaylistFragment extends DialogFragment {\n+    /**\n+     * This contains the base display options for images.\n+     */\n+    private static final DisplayImageOptions DISPLAY_IMAGE_OPTIONS\n+            = new DisplayImageOptions.Builder().cacheInMemory(true).build();\n+\n+    private final ImageLoader imageLoader = ImageLoader.getInstance();\n+\n+    private OnSelectedLisener onSelectedLisener = null;\n+    private OnCancelListener onCancelListener = null;\n+\n+    private ProgressBar progressBar;\n+    private TextView emptyView;\n+    private RecyclerView recyclerView;\n+\n+    private List<PlaylistLocalItem> playlists = new Vector<>();\n+\n+    public void setOnSelectedLisener(final OnSelectedLisener listener) {\n+        onSelectedLisener = listener;\n+    }\n+\n+    public void setOnCancelListener(final OnCancelListener listener) {\n+        onCancelListener = listener;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Init\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    @Override\n+    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,\n+                             final Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.select_playlist_fragment, container, false);\n+        recyclerView = v.findViewById(R.id.items_list);\n+        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n+        SelectPlaylistAdapter playlistAdapter = new SelectPlaylistAdapter();\n+        recyclerView.setAdapter(playlistAdapter);\n+\n+        progressBar = v.findViewById(R.id.progressBar);\n+        emptyView = v.findViewById(R.id.empty_state_view);\n+        progressBar.setVisibility(View.VISIBLE);\n+        recyclerView.setVisibility(View.GONE);\n+        emptyView.setVisibility(View.GONE);\n+\n+        final AppDatabase database = NewPipeDatabase.getInstance(this.getContext());\n+        LocalPlaylistManager localPlaylistManager = new LocalPlaylistManager(database);\n+        RemotePlaylistManager remotePlaylistManager = new RemotePlaylistManager(database);\n+\n+        Flowable.combineLatest(localPlaylistManager.getPlaylists(),\n+                remotePlaylistManager.getPlaylists(), PlaylistItemsUtils::merge)\n+                .toObservable()\n+                .subscribeOn(Schedulers.io())\n+                .observeOn(AndroidSchedulers.mainThread())\n+                .subscribe(getPlaylistsObserver());\n+\n+        return v;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Handle actions\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    @Override\n+    public void onCancel(final DialogInterface dialogInterface) {\n+        super.onCancel(dialogInterface);\n+        if (onCancelListener != null) {\n+            onCancelListener.onCancel();\n+        }\n+    }\n+\n+    private void clickedItem(final int position) {\n+        if (onSelectedLisener != null) {\n+            LocalItem selectedItem = playlists.get(position);\n+\n+            if (selectedItem instanceof PlaylistMetadataEntry) {\n+                final PlaylistMetadataEntry entry = ((PlaylistMetadataEntry) selectedItem);\n+                onSelectedLisener\n+                        .onLocalPlaylistSelected(entry.uid, entry.name);\n+\n+            } else if (selectedItem instanceof PlaylistRemoteEntity) {\n+                final PlaylistRemoteEntity entry = ((PlaylistRemoteEntity) selectedItem);\n+                onSelectedLisener.onRemotePlaylistSelected(\n+                        entry.getServiceId(), entry.getUrl(), entry.getName());\n+            }\n+        }\n+        dismiss();\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Item handling\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    private void displayPlaylists(final List<PlaylistLocalItem> newPlaylists) {\n+        this.playlists = newPlaylists;\n+        progressBar.setVisibility(View.GONE);\n+        if (newPlaylists.isEmpty()) {\n+            emptyView.setVisibility(View.VISIBLE);\n+            return;\n+        }\n+        recyclerView.setVisibility(View.VISIBLE);\n+\n+    }\n+\n+    private Observer<List<PlaylistLocalItem>> getPlaylistsObserver() {\n+        return new Observer<List<PlaylistLocalItem>>() {\n+            @Override\n+            public void onSubscribe(final Disposable d) { }\n+\n+            @Override\n+            public void onNext(final List<PlaylistLocalItem> newPlaylists) {\n+                displayPlaylists(newPlaylists);\n+            }\n+\n+            @Override\n+            public void onError(final Throwable exception) {\n+                SelectPlaylistFragment.this.onError(exception);\n+            }\n+\n+            @Override\n+            public void onComplete() { }\n+        };\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Error\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    protected void onError(final Throwable e) {\n+        final Activity activity = getActivity();\n+        ErrorActivity.reportError(activity, e, activity.getClass(), null, ErrorActivity.ErrorInfo\n+                .make(UserAction.UI_ERROR, \"none\", \"\", R.string.app_ui_crash));\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Interfaces\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    public interface OnSelectedLisener {", "originalCommit": "c998d4eb352813d366e8bdac00b93a4969ba0cee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0Nzg3OQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419647879", "bodyText": "You should use a string resource here, maybe other languages use different signatures than \"S/P\" to express \"playlist P comes from service S\"", "author": "Stypox", "createdAt": "2020-05-04T18:42:29Z", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java", "diffHunk": "@@ -392,6 +415,13 @@ void bind(final int position, final TabViewHolder holder) {\n                         tabName = NewPipe.getNameOfService(((Tab.ChannelTab) tab)\n                                 .getChannelServiceId()) + \"/\" + tab.getTabName(requireContext());\n                         break;\n+                    case PLAYLIST:\n+                        final int serviceId = ((Tab.PlaylistTab) tab).getPlaylistServiceId();\n+                        final String serviceName = serviceId == -1\n+                                ? getString(R.string.local)\n+                                : NewPipe.getNameOfService(serviceId);\n+                        tabName = serviceName + \"/\" + tab.getTabName(requireContext());", "originalCommit": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2Mzg3NA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419663874", "bodyText": "Also, is there really a need to show the service name? This is not being done with channels afaik", "author": "Stypox", "createdAt": "2020-05-04T19:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0Nzg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3OTkxMA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419679910", "bodyText": "@Stypox: It's actually done the same way for channels, so this is OK here. See https://github.com/Royosef/NewPipe/blob/8f99a3b7b583a9cee2bc8e7cb9839dec251885c9/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java#L416", "author": "wb9688", "createdAt": "2020-05-04T19:37:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0Nzg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0OTQyMg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419649422", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.playlistName = \"<no-name>\";\n          \n          \n            \n                        this.playlistId = -1;\n          \n          \n            \n                        this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n          \n          \n            \n                        this.playlistServiceId = -1;\n          \n          \n            \n                        this.playlistUrl = \"<no-url>\";\n          \n          \n            \n                        this(-1, \"<no-name>\")", "author": "Stypox", "createdAt": "2020-05-04T18:45:09Z", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "diffHunk": "@@ -482,4 +489,134 @@ private String getDefaultKioskId(final Context context) {\n             return kioskId;\n         }\n     }\n+\n+    public static class PlaylistTab extends Tab {\n+        public static final int ID = 8;\n+        private static final String JSON_PLAYLIST_SERVICE_ID_KEY = \"playlist_service_id\";\n+        private static final String JSON_PLAYLIST_URL_KEY = \"playlist_url\";\n+        private static final String JSON_PLAYLIST_NAME_KEY = \"playlist_name\";\n+        private static final String JSON_PLAYLIST_ID_KEY = \"playlist_id\";\n+        private static final String JSON_PLAYLIST_TYPE_KEY = \"playlist_type\";\n+        private int playlistServiceId;\n+        private String playlistUrl;\n+        private String playlistName;\n+        private long playlistId;\n+        private LocalItemType playlistType;\n+\n+        private PlaylistTab() {\n+            this.playlistName = \"<no-name>\";\n+            this.playlistId = -1;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";", "originalCommit": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MDczOQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419650739", "bodyText": "If it is possible that the playlist name is null, then add @Nullable to its declaration, otherwise remove this check (also below)", "author": "Stypox", "createdAt": "2020-05-04T18:47:26Z", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "diffHunk": "@@ -482,4 +489,134 @@ private String getDefaultKioskId(final Context context) {\n             return kioskId;\n         }\n     }\n+\n+    public static class PlaylistTab extends Tab {\n+        public static final int ID = 8;\n+        private static final String JSON_PLAYLIST_SERVICE_ID_KEY = \"playlist_service_id\";\n+        private static final String JSON_PLAYLIST_URL_KEY = \"playlist_url\";\n+        private static final String JSON_PLAYLIST_NAME_KEY = \"playlist_name\";\n+        private static final String JSON_PLAYLIST_ID_KEY = \"playlist_id\";\n+        private static final String JSON_PLAYLIST_TYPE_KEY = \"playlist_type\";\n+        private int playlistServiceId;\n+        private String playlistUrl;\n+        private String playlistName;\n+        private long playlistId;\n+        private LocalItemType playlistType;\n+\n+        private PlaylistTab() {\n+            this.playlistName = \"<no-name>\";\n+            this.playlistId = -1;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";\n+        }\n+\n+        public PlaylistTab(final long playlistId, final String playlistName) {\n+            this.playlistName = playlistName;\n+            this.playlistId = playlistId;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";\n+        }\n+\n+        public PlaylistTab(final int playlistServiceId, final String playlistUrl,\n+                           final String playlistName) {\n+            this.playlistServiceId = playlistServiceId;\n+            this.playlistUrl = playlistUrl;\n+            this.playlistName = playlistName;\n+            this.playlistType = LocalItemType.PLAYLIST_REMOTE_ITEM;\n+            this.playlistId = -1;\n+        }\n+\n+        public PlaylistTab(final JsonObject jsonObject) {\n+            super(jsonObject);\n+        }\n+\n+        @Override\n+        public int getTabId() {\n+            return ID;\n+        }\n+\n+        @Override\n+        public String getTabName(final Context context) {\n+            return playlistName;\n+        }\n+\n+        @DrawableRes\n+        @Override\n+        public int getTabIconRes(final Context context) {\n+            return ThemeHelper.resolveResourceIdFromAttr(context, R.attr.ic_bookmark);\n+        }\n+\n+        @Override\n+        public Fragment getFragment(final Context context) {\n+            if (playlistType == LocalItemType.PLAYLIST_LOCAL_ITEM) {\n+                return LocalPlaylistFragment.getInstance(playlistId,\n+                        playlistName == null ? \"\" : playlistName);", "originalCommit": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace", "url": "https://github.com/TeamNewPipe/NewPipe/commit/13f66b076d73ea7f126adab4a6c4bb8b213b6ace", "message": "fix(PR-review)", "committedDate": "2020-06-28T13:21:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTE3MA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446651170", "bodyText": "This doesn't seem to be called anywhere (same for the other Select*Fragments I think)", "author": "wb9688", "createdAt": "2020-06-28T13:28:26Z", "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package org.schabi.newpipe.settings;\n+\n+import android.app.Activity;\n+import android.content.DialogInterface;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n+import com.nostra13.universalimageloader.core.ImageLoader;\n+\n+import org.schabi.newpipe.NewPipeDatabase;\n+import org.schabi.newpipe.R;\n+import org.schabi.newpipe.database.AppDatabase;\n+import org.schabi.newpipe.database.LocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+import org.schabi.newpipe.local.playlist.LocalPlaylistManager;\n+import org.schabi.newpipe.local.playlist.RemotePlaylistManager;\n+import org.schabi.newpipe.report.ErrorActivity;\n+import org.schabi.newpipe.report.UserAction;\n+import org.schabi.newpipe.util.PlaylistItemsUtils;\n+\n+import java.util.List;\n+import java.util.Vector;\n+\n+import io.reactivex.Flowable;\n+import io.reactivex.disposables.Disposable;\n+\n+public class SelectPlaylistFragment extends DialogFragment {\n+    /**\n+     * This contains the base display options for images.\n+     */\n+    private static final DisplayImageOptions DISPLAY_IMAGE_OPTIONS\n+            = new DisplayImageOptions.Builder().cacheInMemory(true).build();\n+\n+    private final ImageLoader imageLoader = ImageLoader.getInstance();\n+\n+    private OnSelectedListener onSelectedListener = null;\n+    private OnCancelListener onCancelListener = null;\n+\n+    private ProgressBar progressBar;\n+    private TextView emptyView;\n+    private RecyclerView recyclerView;\n+    private Disposable playlistsSubscriber;\n+\n+    private List<PlaylistLocalItem> playlists = new Vector<>();\n+\n+    public void setOnSelectedListener(final OnSelectedListener listener) {\n+        onSelectedListener = listener;\n+    }\n+\n+    public void setOnCancelListener(final OnCancelListener listener) {", "originalCommit": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NjMzNA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r449756334", "bodyText": "Let's keep this here for now. Both settings and tabs need a full refactor anyway", "author": "Stypox", "createdAt": "2020-07-04T09:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTU1Nw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446651557", "bodyText": "In general I'm not a fan of creating a util class for just one function. I don't have a better place though.", "author": "wb9688", "createdAt": "2020-06-28T13:32:00Z", "path": "app/src/main/java/org/schabi/newpipe/util/PlaylistItemsUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.schabi.newpipe.util;\n+\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class PlaylistItemsUtils {", "originalCommit": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NjI0NQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r449756245", "bodyText": "I think a static function in PlaylistLocalItem would be a good solution (that now is a 10 lines file, i.e. an interface, so it makes sense to add another function that takes care of implementers of that interface)", "author": "Stypox", "createdAt": "2020-07-04T09:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MTc3Mg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446691772", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final boolean baseEquals = super.equals(obj)\n          \n          \n            \n                                && Objects.equals(playlistType, ((PlaylistTab) obj).playlistType)\n          \n          \n            \n                                && Objects.equals(playlistName, ((PlaylistTab) obj).playlistName);\n          \n          \n            \n            \n          \n          \n            \n                        if (!baseEquals) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!(super.equals(obj)\n          \n          \n            \n                                && Objects.equals(playlistType, ((PlaylistTab) obj).playlistType)\n          \n          \n            \n                                && Objects.equals(playlistName, ((PlaylistTab) obj).playlistName))) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }", "author": "Stypox", "createdAt": "2020-06-28T20:01:46Z", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "diffHunk": "@@ -482,4 +489,128 @@ private String getDefaultKioskId(final Context context) {\n             return kioskId;\n         }\n     }\n+\n+    public static class PlaylistTab extends Tab {\n+        public static final int ID = 8;\n+        private static final String JSON_PLAYLIST_SERVICE_ID_KEY = \"playlist_service_id\";\n+        private static final String JSON_PLAYLIST_URL_KEY = \"playlist_url\";\n+        private static final String JSON_PLAYLIST_NAME_KEY = \"playlist_name\";\n+        private static final String JSON_PLAYLIST_ID_KEY = \"playlist_id\";\n+        private static final String JSON_PLAYLIST_TYPE_KEY = \"playlist_type\";\n+        private int playlistServiceId;\n+        private String playlistUrl;\n+        private String playlistName;\n+        private long playlistId;\n+        private LocalItemType playlistType;\n+\n+        private PlaylistTab() {\n+            this(-1, \"<no-name>\");\n+        }\n+\n+        public PlaylistTab(final long playlistId, final String playlistName) {\n+            this.playlistName = playlistName;\n+            this.playlistId = playlistId;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";\n+        }\n+\n+        public PlaylistTab(final int playlistServiceId, final String playlistUrl,\n+                           final String playlistName) {\n+            this.playlistServiceId = playlistServiceId;\n+            this.playlistUrl = playlistUrl;\n+            this.playlistName = playlistName;\n+            this.playlistType = LocalItemType.PLAYLIST_REMOTE_ITEM;\n+            this.playlistId = -1;\n+        }\n+\n+        public PlaylistTab(final JsonObject jsonObject) {\n+            super(jsonObject);\n+        }\n+\n+        @Override\n+        public int getTabId() {\n+            return ID;\n+        }\n+\n+        @Override\n+        public String getTabName(final Context context) {\n+            return playlistName;\n+        }\n+\n+        @DrawableRes\n+        @Override\n+        public int getTabIconRes(final Context context) {\n+            return ThemeHelper.resolveResourceIdFromAttr(context, R.attr.ic_bookmark);\n+        }\n+\n+        @Override\n+        public Fragment getFragment(final Context context) {\n+            if (playlistType == LocalItemType.PLAYLIST_LOCAL_ITEM) {\n+                return LocalPlaylistFragment.getInstance(playlistId, playlistName);\n+\n+            } else { // playlistType == LocalItemType.PLAYLIST_REMOTE_ITEM\n+                return PlaylistFragment.getInstance(playlistServiceId, playlistUrl, playlistName);\n+            }\n+        }\n+\n+        @Override\n+        protected void writeDataToJson(final JsonSink writerSink) {\n+            writerSink.value(JSON_PLAYLIST_SERVICE_ID_KEY, playlistServiceId)\n+                    .value(JSON_PLAYLIST_URL_KEY, playlistUrl)\n+                    .value(JSON_PLAYLIST_NAME_KEY, playlistName)\n+                    .value(JSON_PLAYLIST_ID_KEY, playlistId)\n+                    .value(JSON_PLAYLIST_TYPE_KEY, playlistType.toString());\n+        }\n+\n+        @Override\n+        protected void readDataFromJson(final JsonObject jsonObject) {\n+            playlistServiceId = jsonObject.getInt(JSON_PLAYLIST_SERVICE_ID_KEY, -1);\n+            playlistUrl = jsonObject.getString(JSON_PLAYLIST_URL_KEY, \"<no-url>\");\n+            playlistName = jsonObject.getString(JSON_PLAYLIST_NAME_KEY, \"<no-name>\");\n+            playlistId = jsonObject.getInt(JSON_PLAYLIST_ID_KEY, -1);\n+            playlistType = LocalItemType.valueOf(\n+                    jsonObject.getString(JSON_PLAYLIST_TYPE_KEY,\n+                            LocalItemType.PLAYLIST_LOCAL_ITEM.toString())\n+            );\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+            final boolean baseEquals = super.equals(obj)\n+                    && Objects.equals(playlistType, ((PlaylistTab) obj).playlistType)\n+                    && Objects.equals(playlistName, ((PlaylistTab) obj).playlistName);\n+\n+            if (!baseEquals) {\n+                return false;\n+            }", "originalCommit": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MTg5OQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446691899", "bodyText": "This allows the remotePlaylistEquals part to not be calculated when localPlaylistEquals is true and also looks better imo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final boolean localPlaylistEquals = playlistId == ((PlaylistTab) obj).playlistId;\n          \n          \n            \n                        final boolean remotePlaylistEquals =\n          \n          \n            \n                                playlistServiceId == ((PlaylistTab) obj).playlistServiceId\n          \n          \n            \n                                        && Objects.equals(playlistUrl, ((PlaylistTab) obj).playlistUrl);\n          \n          \n            \n            \n          \n          \n            \n                        return localPlaylistEquals || remotePlaylistEquals;\n          \n          \n            \n                        return playlistId == ((PlaylistTab) obj).playlistId                               // local\n          \n          \n            \n                                || (playlistServiceId == ((PlaylistTab) obj).playlistServiceId            // remote\n          \n          \n            \n                                        && Objects.equals(playlistUrl, ((PlaylistTab) obj).playlistUrl));", "author": "Stypox", "createdAt": "2020-06-28T20:02:57Z", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "diffHunk": "@@ -482,4 +489,128 @@ private String getDefaultKioskId(final Context context) {\n             return kioskId;\n         }\n     }\n+\n+    public static class PlaylistTab extends Tab {\n+        public static final int ID = 8;\n+        private static final String JSON_PLAYLIST_SERVICE_ID_KEY = \"playlist_service_id\";\n+        private static final String JSON_PLAYLIST_URL_KEY = \"playlist_url\";\n+        private static final String JSON_PLAYLIST_NAME_KEY = \"playlist_name\";\n+        private static final String JSON_PLAYLIST_ID_KEY = \"playlist_id\";\n+        private static final String JSON_PLAYLIST_TYPE_KEY = \"playlist_type\";\n+        private int playlistServiceId;\n+        private String playlistUrl;\n+        private String playlistName;\n+        private long playlistId;\n+        private LocalItemType playlistType;\n+\n+        private PlaylistTab() {\n+            this(-1, \"<no-name>\");\n+        }\n+\n+        public PlaylistTab(final long playlistId, final String playlistName) {\n+            this.playlistName = playlistName;\n+            this.playlistId = playlistId;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";\n+        }\n+\n+        public PlaylistTab(final int playlistServiceId, final String playlistUrl,\n+                           final String playlistName) {\n+            this.playlistServiceId = playlistServiceId;\n+            this.playlistUrl = playlistUrl;\n+            this.playlistName = playlistName;\n+            this.playlistType = LocalItemType.PLAYLIST_REMOTE_ITEM;\n+            this.playlistId = -1;\n+        }\n+\n+        public PlaylistTab(final JsonObject jsonObject) {\n+            super(jsonObject);\n+        }\n+\n+        @Override\n+        public int getTabId() {\n+            return ID;\n+        }\n+\n+        @Override\n+        public String getTabName(final Context context) {\n+            return playlistName;\n+        }\n+\n+        @DrawableRes\n+        @Override\n+        public int getTabIconRes(final Context context) {\n+            return ThemeHelper.resolveResourceIdFromAttr(context, R.attr.ic_bookmark);\n+        }\n+\n+        @Override\n+        public Fragment getFragment(final Context context) {\n+            if (playlistType == LocalItemType.PLAYLIST_LOCAL_ITEM) {\n+                return LocalPlaylistFragment.getInstance(playlistId, playlistName);\n+\n+            } else { // playlistType == LocalItemType.PLAYLIST_REMOTE_ITEM\n+                return PlaylistFragment.getInstance(playlistServiceId, playlistUrl, playlistName);\n+            }\n+        }\n+\n+        @Override\n+        protected void writeDataToJson(final JsonSink writerSink) {\n+            writerSink.value(JSON_PLAYLIST_SERVICE_ID_KEY, playlistServiceId)\n+                    .value(JSON_PLAYLIST_URL_KEY, playlistUrl)\n+                    .value(JSON_PLAYLIST_NAME_KEY, playlistName)\n+                    .value(JSON_PLAYLIST_ID_KEY, playlistId)\n+                    .value(JSON_PLAYLIST_TYPE_KEY, playlistType.toString());\n+        }\n+\n+        @Override\n+        protected void readDataFromJson(final JsonObject jsonObject) {\n+            playlistServiceId = jsonObject.getInt(JSON_PLAYLIST_SERVICE_ID_KEY, -1);\n+            playlistUrl = jsonObject.getString(JSON_PLAYLIST_URL_KEY, \"<no-url>\");\n+            playlistName = jsonObject.getString(JSON_PLAYLIST_NAME_KEY, \"<no-name>\");\n+            playlistId = jsonObject.getInt(JSON_PLAYLIST_ID_KEY, -1);\n+            playlistType = LocalItemType.valueOf(\n+                    jsonObject.getString(JSON_PLAYLIST_TYPE_KEY,\n+                            LocalItemType.PLAYLIST_LOCAL_ITEM.toString())\n+            );\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+            final boolean baseEquals = super.equals(obj)\n+                    && Objects.equals(playlistType, ((PlaylistTab) obj).playlistType)\n+                    && Objects.equals(playlistName, ((PlaylistTab) obj).playlistName);\n+\n+            if (!baseEquals) {\n+                return false;\n+            }\n+\n+            final boolean localPlaylistEquals = playlistId == ((PlaylistTab) obj).playlistId;\n+            final boolean remotePlaylistEquals =\n+                    playlistServiceId == ((PlaylistTab) obj).playlistServiceId\n+                            && Objects.equals(playlistUrl, ((PlaylistTab) obj).playlistUrl);\n+\n+            return localPlaylistEquals || remotePlaylistEquals;", "originalCommit": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dfc27b2480ae8b267ca7882ad001230619cb4534", "url": "https://github.com/TeamNewPipe/NewPipe/commit/dfc27b2480ae8b267ca7882ad001230619cb4534", "message": "Add playlist tab to main page\n\nAdd bookmarked playlist as tab in the main page (by Settings > Content > Content of main page)", "committedDate": "2020-07-04T09:35:45Z", "type": "commit"}, {"oid": "13c0fdef082e2205b1e7345e856ecdde23d664a0", "url": "https://github.com/TeamNewPipe/NewPipe/commit/13c0fdef082e2205b1e7345e856ecdde23d664a0", "message": "Final declarations, naming & redundant code\n\n* add final declarations where missing\n* fix typo \"onSelectedLisener\" to \"onSelectedListener\"\n* rename \"baseEqual\" to \"baseEquals\"\n* replace getPlaylistsObserver code with functions pointers\n* remove duplicate code in constructors\n* remove useless null checks", "committedDate": "2020-07-04T09:37:38Z", "type": "commit"}, {"oid": "248212588dfe6ad14814a92f8e17516a427635cc", "url": "https://github.com/TeamNewPipe/NewPipe/commit/248212588dfe6ad14814a92f8e17516a427635cc", "message": "Fix style issues", "committedDate": "2020-07-04T09:38:22Z", "type": "commit"}, {"oid": "8cc21920b75c0744f31cb8f09d1d97e69c6c80bd", "url": "https://github.com/TeamNewPipe/NewPipe/commit/8cc21920b75c0744f31cb8f09d1d97e69c6c80bd", "message": "Move local/remote playlist merge() to PlaylistLocalItem class\n\nIn order not to have a utils class just for one function", "committedDate": "2020-07-04T09:38:22Z", "type": "commit"}, {"oid": "8cc21920b75c0744f31cb8f09d1d97e69c6c80bd", "url": "https://github.com/TeamNewPipe/NewPipe/commit/8cc21920b75c0744f31cb8f09d1d97e69c6c80bd", "message": "Move local/remote playlist merge() to PlaylistLocalItem class\n\nIn order not to have a utils class just for one function", "committedDate": "2020-07-04T09:38:22Z", "type": "forcePushed"}]}