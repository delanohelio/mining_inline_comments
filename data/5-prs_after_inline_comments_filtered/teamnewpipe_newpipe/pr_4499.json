{"pr_number": 4499, "pr_title": "Use RxJava instead of AsyncTask.", "pr_createdAt": "2020-10-12T07:19:06Z", "pr_url": "https://github.com/TeamNewPipe/NewPipe/pull/4499", "timeline": [{"oid": "4535cb0ff58372329d22dd320aad98ba2699d626", "url": "https://github.com/TeamNewPipe/NewPipe/commit/4535cb0ff58372329d22dd320aad98ba2699d626", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-10-12T07:27:39Z", "type": "forcePushed"}, {"oid": "5e2c67d88317aeb4220edbeaa3eafd42da31f7b2", "url": "https://github.com/TeamNewPipe/NewPipe/commit/5e2c67d88317aeb4220edbeaa3eafd42da31f7b2", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-10-12T07:40:51Z", "type": "forcePushed"}, {"oid": "d3c8ac3c1880a6f006a85ab48552cac163b7680f", "url": "https://github.com/TeamNewPipe/NewPipe/commit/d3c8ac3c1880a6f006a85ab48552cac163b7680f", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-10-13T01:09:49Z", "type": "forcePushed"}, {"oid": "a341899b98dd09af61c3899ab5bd448a25031bf4", "url": "https://github.com/TeamNewPipe/NewPipe/commit/a341899b98dd09af61c3899ab5bd448a25031bf4", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-10-24T09:48:52Z", "type": "forcePushed"}, {"oid": "38ec28857134b707370dc1222cd925d14c50af0e", "url": "https://github.com/TeamNewPipe/NewPipe/commit/38ec28857134b707370dc1222cd925d14c50af0e", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-10-25T15:33:21Z", "type": "forcePushed"}, {"oid": "f08ac8a45387eaa105e10c202c194dcf78ba99bc", "url": "https://github.com/TeamNewPipe/NewPipe/commit/f08ac8a45387eaa105e10c202c194dcf78ba99bc", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-10-25T23:35:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NTAxMA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4499#discussion_r512175010", "bodyText": "Why this?", "author": "Stypox", "createdAt": "2020-10-26T18:20:58Z", "path": "app/src/main/java/org/schabi/newpipe/CheckForNewAppVersion.java", "diffHunk": "@@ -118,104 +122,110 @@ private static String byte2HexFormatted(final byte[] arr) {\n         return str.toString();\n     }\n \n-    public static boolean isGithubApk() {\n-        return getCertificateSHA1Fingerprint().equals(GITHUB_APK_SHA1);\n-    }\n-\n-    @Override\n-    protected void onPreExecute() {\n-        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(APP);\n-\n-        // Check if user has enabled/disabled update checking\n-        // and if the current apk is a github one or not.\n-        if (!prefs.getBoolean(APP.getString(R.string.update_app_key), true) || !isGithubApk()) {\n-            this.cancel(true);\n-        }\n-    }\n-\n-    @Override\n-    protected String doInBackground(final Void... voids) {\n-        if (isCancelled() || !isConnected()) {\n-            return null;\n-        }\n-\n-        // Make a network request to get latest NewPipe data.\n-        try {\n-            return DownloaderImpl.getInstance().get(NEWPIPE_API_URL).responseBody();\n-        } catch (IOException | ReCaptchaException e) {\n-            // connectivity problems, do not alarm user and fail silently\n-            if (DEBUG) {\n-                Log.w(TAG, Log.getStackTraceString(e));\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    @Override\n-    protected void onPostExecute(final String response) {\n-        // Parse the json from the response.\n-        if (response != null) {\n-\n-            try {\n-                final JsonObject githubStableObject = JsonParser.object().from(response)\n-                        .getObject(\"flavors\").getObject(\"github\").getObject(\"stable\");\n-\n-                final String versionName = githubStableObject.getString(\"version\");\n-                final int versionCode = githubStableObject.getInt(\"version_code\");\n-                final String apkLocationUrl = githubStableObject.getString(\"apk\");\n-\n-                compareAppVersionAndShowNotification(versionName, apkLocationUrl, versionCode);\n-\n-            } catch (final JsonParserException e) {\n-                // connectivity problems, do not alarm user and fail silently\n-                if (DEBUG) {\n-                    Log.w(TAG, Log.getStackTraceString(e));\n-                }\n-            }\n-        }\n-    }\n-\n     /**\n      * Method to compare the current and latest available app version.\n      * If a newer version is available, we show the update notification.\n      *\n+     * @param application    The application\n      * @param versionName    Name of new version\n      * @param apkLocationUrl Url with the new apk\n      * @param versionCode    Code of new version\n      */\n-    private void compareAppVersionAndShowNotification(final String versionName,\n-                                                      final String apkLocationUrl,\n-                                                      final int versionCode) {\n+    private static void compareAppVersionAndShowNotification(@NonNull final Application application,\n+                                                             final String versionName,\n+                                                             final String apkLocationUrl,\n+                                                             final int versionCode) {\n         final int notificationId = 2000;\n \n         if (BuildConfig.VERSION_CODE < versionCode) {\n-\n             // A pending intent to open the apk location url in the browser.\n             final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(apkLocationUrl));\n             final PendingIntent pendingIntent\n-                    = PendingIntent.getActivity(APP, 0, intent, 0);\n+                    = PendingIntent.getActivity(application, 0, intent, 0);\n \n-            final NotificationCompat.Builder notificationBuilder = new NotificationCompat\n-                    .Builder(APP, APP.getString(R.string.app_update_notification_channel_id))\n+            final String channelId = application\n+                    .getString(R.string.app_update_notification_channel_id);\n+            final NotificationCompat.Builder notificationBuilder\n+                    = new NotificationCompat.Builder(application, channelId)\n                     .setSmallIcon(R.drawable.ic_newpipe_update)\n                     .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                     .setContentIntent(pendingIntent)\n                     .setAutoCancel(true)\n-                    .setContentTitle(APP.getString(R.string.app_update_notification_content_title))\n-                    .setContentText(APP.getString(R.string.app_update_notification_content_text)\n+                    .setContentTitle(application\n+                            .getString(R.string.app_update_notification_content_title))\n+                    .setContentText(application\n+                            .getString(R.string.app_update_notification_content_text)\n                             + \" \" + versionName);\n \n             final NotificationManagerCompat notificationManager\n-                    = NotificationManagerCompat.from(APP);\n+                    = NotificationManagerCompat.from(application);\n             notificationManager.notify(notificationId, notificationBuilder.build());\n         }\n     }\n \n-    private boolean isConnected() {\n-        final ConnectivityManager cm = ContextCompat.getSystemService(APP,\n+    private static boolean isConnected(@NonNull final App app) {\n+        final ConnectivityManager cm = ContextCompat.getSystemService(app,\n                 ConnectivityManager.class);\n         return cm.getActiveNetworkInfo() != null\n                 && cm.getActiveNetworkInfo().isConnected();\n     }\n+\n+    public static boolean isGithubApk(@NonNull final App app) {\n+        return getCertificateSHA1Fingerprint(app).equals(GITHUB_APK_SHA1);\n+    }\n+\n+    public static void checkNewVersion(@NonNull final App app) {\n+        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(app);\n+\n+        // Check if user has enabled/disabled update checking\n+        // and if the current apk is a github one or not.\n+        if (!prefs.getBoolean(app.getString(R.string.update_app_key), true)\n+                || !isGithubApk(app)) {\n+            if (disposable != null) {\n+                disposable.dispose();\n+            }", "originalCommit": "f08ac8a45387eaa105e10c202c194dcf78ba99bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NDc1Mw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4499#discussion_r513084753", "bodyText": "I was trying to keep it as close to the original code as possible.", "author": "Isira-Seneviratne", "createdAt": "2020-10-27T23:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NTAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NjUxNg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4499#discussion_r512176516", "bodyText": "Instead of saving the disposable to a static variable, which would actually create a leak, return it and, in the App class save it as a field to be dispose()d in the App's onDestroy()", "author": "Stypox", "createdAt": "2020-10-26T18:23:24Z", "path": "app/src/main/java/org/schabi/newpipe/CheckForNewAppVersion.java", "diffHunk": "@@ -118,104 +122,110 @@ private static String byte2HexFormatted(final byte[] arr) {\n         return str.toString();\n     }\n \n-    public static boolean isGithubApk() {\n-        return getCertificateSHA1Fingerprint().equals(GITHUB_APK_SHA1);\n-    }\n-\n-    @Override\n-    protected void onPreExecute() {\n-        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(APP);\n-\n-        // Check if user has enabled/disabled update checking\n-        // and if the current apk is a github one or not.\n-        if (!prefs.getBoolean(APP.getString(R.string.update_app_key), true) || !isGithubApk()) {\n-            this.cancel(true);\n-        }\n-    }\n-\n-    @Override\n-    protected String doInBackground(final Void... voids) {\n-        if (isCancelled() || !isConnected()) {\n-            return null;\n-        }\n-\n-        // Make a network request to get latest NewPipe data.\n-        try {\n-            return DownloaderImpl.getInstance().get(NEWPIPE_API_URL).responseBody();\n-        } catch (IOException | ReCaptchaException e) {\n-            // connectivity problems, do not alarm user and fail silently\n-            if (DEBUG) {\n-                Log.w(TAG, Log.getStackTraceString(e));\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    @Override\n-    protected void onPostExecute(final String response) {\n-        // Parse the json from the response.\n-        if (response != null) {\n-\n-            try {\n-                final JsonObject githubStableObject = JsonParser.object().from(response)\n-                        .getObject(\"flavors\").getObject(\"github\").getObject(\"stable\");\n-\n-                final String versionName = githubStableObject.getString(\"version\");\n-                final int versionCode = githubStableObject.getInt(\"version_code\");\n-                final String apkLocationUrl = githubStableObject.getString(\"apk\");\n-\n-                compareAppVersionAndShowNotification(versionName, apkLocationUrl, versionCode);\n-\n-            } catch (final JsonParserException e) {\n-                // connectivity problems, do not alarm user and fail silently\n-                if (DEBUG) {\n-                    Log.w(TAG, Log.getStackTraceString(e));\n-                }\n-            }\n-        }\n-    }\n-\n     /**\n      * Method to compare the current and latest available app version.\n      * If a newer version is available, we show the update notification.\n      *\n+     * @param application    The application\n      * @param versionName    Name of new version\n      * @param apkLocationUrl Url with the new apk\n      * @param versionCode    Code of new version\n      */\n-    private void compareAppVersionAndShowNotification(final String versionName,\n-                                                      final String apkLocationUrl,\n-                                                      final int versionCode) {\n+    private static void compareAppVersionAndShowNotification(@NonNull final Application application,\n+                                                             final String versionName,\n+                                                             final String apkLocationUrl,\n+                                                             final int versionCode) {\n         final int notificationId = 2000;\n \n         if (BuildConfig.VERSION_CODE < versionCode) {\n-\n             // A pending intent to open the apk location url in the browser.\n             final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(apkLocationUrl));\n             final PendingIntent pendingIntent\n-                    = PendingIntent.getActivity(APP, 0, intent, 0);\n+                    = PendingIntent.getActivity(application, 0, intent, 0);\n \n-            final NotificationCompat.Builder notificationBuilder = new NotificationCompat\n-                    .Builder(APP, APP.getString(R.string.app_update_notification_channel_id))\n+            final String channelId = application\n+                    .getString(R.string.app_update_notification_channel_id);\n+            final NotificationCompat.Builder notificationBuilder\n+                    = new NotificationCompat.Builder(application, channelId)\n                     .setSmallIcon(R.drawable.ic_newpipe_update)\n                     .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                     .setContentIntent(pendingIntent)\n                     .setAutoCancel(true)\n-                    .setContentTitle(APP.getString(R.string.app_update_notification_content_title))\n-                    .setContentText(APP.getString(R.string.app_update_notification_content_text)\n+                    .setContentTitle(application\n+                            .getString(R.string.app_update_notification_content_title))\n+                    .setContentText(application\n+                            .getString(R.string.app_update_notification_content_text)\n                             + \" \" + versionName);\n \n             final NotificationManagerCompat notificationManager\n-                    = NotificationManagerCompat.from(APP);\n+                    = NotificationManagerCompat.from(application);\n             notificationManager.notify(notificationId, notificationBuilder.build());\n         }\n     }\n \n-    private boolean isConnected() {\n-        final ConnectivityManager cm = ContextCompat.getSystemService(APP,\n+    private static boolean isConnected(@NonNull final App app) {\n+        final ConnectivityManager cm = ContextCompat.getSystemService(app,\n                 ConnectivityManager.class);\n         return cm.getActiveNetworkInfo() != null\n                 && cm.getActiveNetworkInfo().isConnected();\n     }\n+\n+    public static boolean isGithubApk(@NonNull final App app) {\n+        return getCertificateSHA1Fingerprint(app).equals(GITHUB_APK_SHA1);\n+    }\n+\n+    public static void checkNewVersion(@NonNull final App app) {\n+        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(app);\n+\n+        // Check if user has enabled/disabled update checking\n+        // and if the current apk is a github one or not.\n+        if (!prefs.getBoolean(app.getString(R.string.update_app_key), true)\n+                || !isGithubApk(app)) {\n+            if (disposable != null) {\n+                disposable.dispose();\n+            }\n+            return;\n+        }\n+\n+        disposable = Observable.fromCallable(() -> {", "originalCommit": "f08ac8a45387eaa105e10c202c194dcf78ba99bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4MzEzOA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4499#discussion_r513083138", "bodyText": "Right, my bad. Thanks!", "author": "Isira-Seneviratne", "createdAt": "2020-10-27T23:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NjUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3ODI0NA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4499#discussion_r512178244", "bodyText": "This also needs to be saved somewhere and be disposed on close", "author": "Stypox", "createdAt": "2020-10-26T18:26:14Z", "path": "app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java", "diffHunk": "@@ -676,7 +675,27 @@ private boolean handlePopupItem(@NonNull ViewHolderItem h, @NonNull MenuItem opt\n                 return true;\n             case R.id.md5:\n             case R.id.sha1:\n-                new ChecksumTask(mContext).execute(h.item.mission.storage, ALGORITHMS.get(id));\n+                ProgressDialog progressDialog = null;\n+                if (mContext != null) {\n+                    // Create dialog\n+                    progressDialog = new ProgressDialog(mContext);\n+                    progressDialog.setCancelable(false);\n+                    progressDialog.setMessage(mContext.getString(R.string.msg_wait));\n+                    progressDialog.show();\n+                }\n+                final ProgressDialog finalProgressDialog = progressDialog;\n+                final StoredFileHelper storage = h.item.mission.storage;\n+                Observable.fromCallable(() -> Utility.checksum(storage, ALGORITHMS.get(id)))", "originalCommit": "f08ac8a45387eaa105e10c202c194dcf78ba99bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a75041bbbe07f65278c1c1e3f4bb168dc0bc9ac9", "url": "https://github.com/TeamNewPipe/NewPipe/commit/a75041bbbe07f65278c1c1e3f4bb168dc0bc9ac9", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-10-28T01:22:30Z", "type": "forcePushed"}, {"oid": "b55a57ef3c161d2d0b7fb4e60e111985b29610a6", "url": "https://github.com/TeamNewPipe/NewPipe/commit/b55a57ef3c161d2d0b7fb4e60e111985b29610a6", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-10-28T11:42:15Z", "type": "forcePushed"}, {"oid": "eb629ca0c47da3fffbdc2f9999016a2930cd46c5", "url": "https://github.com/TeamNewPipe/NewPipe/commit/eb629ca0c47da3fffbdc2f9999016a2930cd46c5", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-11-02T02:11:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NTc5MQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4499#discussion_r515855791", "bodyText": "Make private Disposable disposable = null and add a null check here, just to be sure.", "author": "Stypox", "createdAt": "2020-11-02T09:55:02Z", "path": "app/src/main/java/org/schabi/newpipe/App.java", "diffHunk": "@@ -100,7 +104,13 @@ public void onCreate() {\n         configureRxJavaErrorHandler();\n \n         // Check for new version\n-        new CheckForNewAppVersionTask().execute();\n+        disposable = CheckForNewAppVersion.checkNewVersion(App.getApp());\n+    }\n+\n+    @Override\n+    public void onTerminate() {\n+        disposable.dispose();", "originalCommit": "eb629ca0c47da3fffbdc2f9999016a2930cd46c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NjM1Mg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4499#discussion_r515856352", "bodyText": "Please also return this as a Disposable and add a CompositeDisposable in LicenseFragment", "author": "Stypox", "createdAt": "2020-11-02T09:55:56Z", "path": "app/src/main/java/org/schabi/newpipe/about/LicenseFragmentHelper.java", "diffHunk": "@@ -84,45 +80,31 @@ private static String getLicenseStylesheet(final Context context) {\n      * @param color   the color number from R.color\n      * @return a six characters long String with hexadecimal RGB values\n      */\n-    private static String getHexRGBColor(final Context context, final int color) {\n+    private static String getHexRGBColor(@NonNull final Context context, final int color) {\n         return context.getResources().getString(color).substring(3);\n     }\n \n-    @Nullable\n-    private Activity getActivity() {\n-        final Activity activity = weakReference.get();\n-\n-        if (activity != null && activity.isFinishing()) {\n-            return null;\n-        } else {\n-            return activity;\n-        }\n-    }\n-\n-    @Override\n-    protected Integer doInBackground(final Object... objects) {\n-        license = (License) objects[0];\n-        return 1;\n-    }\n-\n-    @Override\n-    protected void onPostExecute(final Integer result) {\n-        final Activity activity = getActivity();\n-        if (activity == null) {\n+    static void showLicense(@Nullable final Context context, @NonNull final License license) {\n+        if (context == null) {\n             return;\n         }\n \n-        final String webViewData = Base64.encodeToString(getFormattedLicense(activity, license)\n-                .getBytes(StandardCharsets.UTF_8), Base64.NO_PADDING);\n-        final WebView webView = new WebView(activity);\n-        webView.loadData(webViewData, \"text/html; charset=UTF-8\", \"base64\");\n-\n-        final AlertDialog.Builder alert = new AlertDialog.Builder(activity);\n-        alert.setTitle(license.getName());\n-        alert.setView(webView);\n-        assureCorrectAppLanguage(activity);\n-        alert.setNegativeButton(activity.getString(R.string.finish),\n-                (dialog, which) -> dialog.dismiss());\n-        alert.show();\n+        Observable.fromCallable(() -> getFormattedLicense(context, license))", "originalCommit": "eb629ca0c47da3fffbdc2f9999016a2930cd46c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34c24f9534f0301f0a461a2ce68a79309bd7d975", "url": "https://github.com/TeamNewPipe/NewPipe/commit/34c24f9534f0301f0a461a2ce68a79309bd7d975", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-11-02T23:36:32Z", "type": "forcePushed"}, {"oid": "ef5084036cf2a21dfdfdb2f18b655900292ba51c", "url": "https://github.com/TeamNewPipe/NewPipe/commit/ef5084036cf2a21dfdfdb2f18b655900292ba51c", "message": "Use RxJava instead of AsyncTask to check for new app versions.", "committedDate": "2020-11-05T05:36:50Z", "type": "commit"}, {"oid": "8ec55ef39450ee214e3bd1eb21d3663aa72a0d57", "url": "https://github.com/TeamNewPipe/NewPipe/commit/8ec55ef39450ee214e3bd1eb21d3663aa72a0d57", "message": "Use RxJava instead of AsyncTask in LicenseFragmentHelper.", "committedDate": "2020-11-05T05:36:51Z", "type": "commit"}, {"oid": "3b69e0dd2551a1760fd0d6cfb9cdf89e857f23c4", "url": "https://github.com/TeamNewPipe/NewPipe/commit/3b69e0dd2551a1760fd0d6cfb9cdf89e857f23c4", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-11-05T05:36:51Z", "type": "commit"}, {"oid": "3b69e0dd2551a1760fd0d6cfb9cdf89e857f23c4", "url": "https://github.com/TeamNewPipe/NewPipe/commit/3b69e0dd2551a1760fd0d6cfb9cdf89e857f23c4", "message": "Use RxJava instead of AsyncTask in MissionAdapter.", "committedDate": "2020-11-05T05:36:51Z", "type": "forcePushed"}]}