{"pr_number": 3546, "pr_title": "Allow choosing which types of search suggestions to show", "pr_createdAt": "2020-05-06T20:08:25Z", "pr_url": "https://github.com/TeamNewPipe/NewPipe/pull/3546", "timeline": [{"oid": "add872b77563aa7b2be0682ee3af513abb39d081", "url": "https://github.com/TeamNewPipe/NewPipe/commit/add872b77563aa7b2be0682ee3af513abb39d081", "message": "Allow choosing which types of search suggestions to show\n\nlocal, remote, both, none\nReplacing the old on-off setting", "committedDate": "2020-06-28T13:52:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5Mzk3Mw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3546#discussion_r448593973", "bodyText": "I think we should do the migration process a little different. First of all, it is good to store the last used/started NewPipe version (or better version code). That should also help us when creating a welcome tour and showing changelogs in future versions, too.\nDepending on the last used version, we could do something like this:\nint lastStartedVersionCode = preferences.getInt(context.getString(R.string.last_started_newpipe_version_code), -1);\nif (lastStartedVersionCode < 951) { // version code for 0.19.6\n    // do migration here or call a method\n}\n// register later migrations here\nThe only thing we should figure out is how to differentiate between a new installation and a user updating. Both have not set last_started_newpipe_version_code, but a new installation does not need to run migrations. @wb9688 @B0pol @Stypox Any thoughts on this or suggestions for a different structure of the migration process?\nWe should update the last used version code if necessary at the end of \n  \n    \n      NewPipe/app/src/main/java/org/schabi/newpipe/App.java\n    \n    \n         Line 85\n      in\n      049c8f7\n    \n    \n    \n    \n\n        \n          \n           public void onCreate() {", "author": "TobiGr", "createdAt": "2020-07-01T20:17:03Z", "path": "app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java", "diffHunk": "@@ -50,6 +55,32 @@ public static void initSettings(final Context context) {\n         getAudioDownloadFolder(context);\n     }\n \n+    /**\n+     * Backward-compatibility: convert boolean search suggestions value to new multi-select list.\n+     * @param context the context to use to get shared preferences\n+     */\n+    private static void migrateSearchSuggestionsIfNeeded(final Context context) {", "originalCommit": "add872b77563aa7b2be0682ee3af513abb39d081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e8e45b66c1e36c03410d871933c3f66743743cb", "url": "https://github.com/TeamNewPipe/NewPipe/commit/1e8e45b66c1e36c03410d871933c3f66743743cb", "message": "Allow choosing which types of search suggestions to show\n\nlocal, remote, both, none\nReplacing the old on-off setting", "committedDate": "2020-10-04T19:55:04Z", "type": "forcePushed"}, {"oid": "91b371428658417ffdf6bbdc01fcc21c057b921b", "url": "https://github.com/TeamNewPipe/NewPipe/commit/91b371428658417ffdf6bbdc01fcc21c057b921b", "message": "Allow choosing which types of search suggestions to show\n\nlocal, remote, both, none\nReplacing the old on-off setting", "committedDate": "2020-10-04T20:14:35Z", "type": "forcePushed"}, {"oid": "28429b08e361ee2ea1d629e29c4a82f53478de13", "url": "https://github.com/TeamNewPipe/NewPipe/commit/28429b08e361ee2ea1d629e29c4a82f53478de13", "message": "Allow choosing which types of search suggestions to show\n\nlocal, remote, both, none\nReplacing the old on-off setting", "committedDate": "2020-11-01T10:03:11Z", "type": "forcePushed"}, {"oid": "1f3619775cdd5e5b5be173564d9b3d463f0d0d8f", "url": "https://github.com/TeamNewPipe/NewPipe/commit/1f3619775cdd5e5b5be173564d9b3d463f0d0d8f", "message": "Allow choosing which types of search suggestions to show\n\nlocal, remote, both, none\nReplacing the old on-off setting", "committedDate": "2020-11-01T16:02:02Z", "type": "forcePushed"}, {"oid": "8ec6461f53b6a76390799247782426fa45803240", "url": "https://github.com/TeamNewPipe/NewPipe/commit/8ec6461f53b6a76390799247782426fa45803240", "message": "Allow choosing which types of search suggestions to show\n\nlocal, remote, both, none\nReplacing the old on-off setting", "committedDate": "2021-03-17T19:56:19Z", "type": "forcePushed"}, {"oid": "0e039ac869b2445ee0a9ef5fa2598ee5ef195a36", "url": "https://github.com/TeamNewPipe/NewPipe/commit/0e039ac869b2445ee0a9ef5fa2598ee5ef195a36", "message": "Do not show suggestions error snackbar for interrupted I/O", "committedDate": "2021-03-17T20:57:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM3Njg1NA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3546#discussion_r596376854", "bodyText": "For better readability:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    return Observable.zip(getLocalSuggestionsObservable(query, 3),\n          \n          \n            \n                                            getRemoteSuggestionsObservable(query),\n          \n          \n            \n                                    return Observable.zip(\n          \n          \n            \n                                            getLocalSuggestionsObservable(query, 3),\n          \n          \n            \n                                            getRemoteSuggestionsObservable(query),", "author": "TobiGr", "createdAt": "2021-03-17T20:57:23Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java", "diffHunk": "@@ -723,69 +745,44 @@ private void initSuggestionObserver() {\n \n         suggestionDisposable = suggestionPublisher\n                 .debounce(SUGGESTIONS_DEBOUNCE, TimeUnit.MILLISECONDS)\n-                .startWithItem(searchString != null\n-                        ? searchString\n-                        : \"\")\n-                .filter(ss -> isSuggestionsEnabled)\n+                .startWithItem(searchString == null ? \"\" : searchString)\n                 .switchMap(query -> {\n-                    final Flowable<List<SearchHistoryEntry>> flowable = historyRecordManager\n-                            .getRelatedSearches(query, 3, 25);\n-                    final Observable<List<SuggestionItem>> local = flowable.toObservable()\n-                            .map(searchHistoryEntries -> {\n-                                final List<SuggestionItem> result = new ArrayList<>();\n-                                for (final SearchHistoryEntry entry : searchHistoryEntries) {\n-                                    result.add(new SuggestionItem(true, entry.getSearch()));\n-                                }\n-                                return result;\n-                            });\n-\n-                    if (query.length() < THRESHOLD_NETWORK_SUGGESTION) {\n-                        // Only pass through if the query length\n-                        // is equal or greater than THRESHOLD_NETWORK_SUGGESTION\n-                        return local.materialize();\n+                    // Only show remote suggestions if they are enabled in settings and\n+                    // the query length is at least THRESHOLD_NETWORK_SUGGESTION\n+                    final boolean shallShowRemoteSuggestionsNow = showRemoteSuggestions\n+                            && query.length() >= THRESHOLD_NETWORK_SUGGESTION;\n+\n+                    if (showLocalSuggestions && shallShowRemoteSuggestionsNow) {\n+                        return Observable.zip(getLocalSuggestionsObservable(query, 3),\n+                                getRemoteSuggestionsObservable(query),", "originalCommit": "464d29e16f730933c63f0c99c5c31868fa43a8bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM4MDAyMw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3546#discussion_r596380023", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                } else if (listNotification.isOnError() && listNotification.getError() != null\n          \n          \n            \n                                        && !ExceptionUtils.isInterruptedCaused(listNotification.getError())) {\n          \n          \n            \n                                } else if (listNotification.isOnError()\n          \n          \n            \n                                        && listNotification.getError() != null\n          \n          \n            \n                                        && !ExceptionUtils.isInterruptedCaused(listNotification.getError())) {", "author": "TobiGr", "createdAt": "2021-03-17T21:02:28Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java", "diffHunk": "@@ -723,70 +745,45 @@ private void initSuggestionObserver() {\n \n         suggestionDisposable = suggestionPublisher\n                 .debounce(SUGGESTIONS_DEBOUNCE, TimeUnit.MILLISECONDS)\n-                .startWithItem(searchString != null\n-                        ? searchString\n-                        : \"\")\n-                .filter(ss -> isSuggestionsEnabled)\n+                .startWithItem(searchString == null ? \"\" : searchString)\n                 .switchMap(query -> {\n-                    final Flowable<List<SearchHistoryEntry>> flowable = historyRecordManager\n-                            .getRelatedSearches(query, 3, 25);\n-                    final Observable<List<SuggestionItem>> local = flowable.toObservable()\n-                            .map(searchHistoryEntries -> {\n-                                final List<SuggestionItem> result = new ArrayList<>();\n-                                for (final SearchHistoryEntry entry : searchHistoryEntries) {\n-                                    result.add(new SuggestionItem(true, entry.getSearch()));\n-                                }\n-                                return result;\n-                            });\n-\n-                    if (query.length() < THRESHOLD_NETWORK_SUGGESTION) {\n-                        // Only pass through if the query length\n-                        // is equal or greater than THRESHOLD_NETWORK_SUGGESTION\n-                        return local.materialize();\n+                    // Only show remote suggestions if they are enabled in settings and\n+                    // the query length is at least THRESHOLD_NETWORK_SUGGESTION\n+                    final boolean shallShowRemoteSuggestionsNow = showRemoteSuggestions\n+                            && query.length() >= THRESHOLD_NETWORK_SUGGESTION;\n+\n+                    if (showLocalSuggestions && shallShowRemoteSuggestionsNow) {\n+                        return Observable.zip(getLocalSuggestionsObservable(query, 3),\n+                                getRemoteSuggestionsObservable(query),\n+                                (local, remote) -> {\n+                                    remote.removeIf(remoteItem -> local.stream().anyMatch(\n+                                            localItem -> localItem.equals(remoteItem)));\n+                                    local.addAll(remote);\n+                                    return local;\n+                                })\n+                                .materialize();\n+                    } else if (showLocalSuggestions) {\n+                        return getLocalSuggestionsObservable(query, 25)\n+                                .materialize();\n+                    } else if (shallShowRemoteSuggestionsNow) {\n+                        return getRemoteSuggestionsObservable(query)\n+                                .materialize();\n+                    } else {\n+                        return Single.fromCallable(Collections::<SuggestionItem>emptyList)\n+                                .toObservable()\n+                                .materialize();\n                     }\n-\n-                    final Observable<List<SuggestionItem>> network = ExtractorHelper\n-                            .suggestionsFor(serviceId, query)\n-                            .onErrorReturn(throwable -> {\n-                                if (!ExceptionUtils.isNetworkRelated(throwable)) {\n-                                    showSnackBarError(new ErrorInfo(throwable,\n-                                            UserAction.GET_SUGGESTIONS, searchString, serviceId));\n-                                }\n-                                return new ArrayList<>();\n-                            })\n-                            .toObservable()\n-                            .map(strings -> {\n-                                final List<SuggestionItem> result = new ArrayList<>();\n-                                for (final String entry : strings) {\n-                                    result.add(new SuggestionItem(false, entry));\n-                                }\n-                                return result;\n-                            });\n-\n-                    return Observable.zip(local, network, (localResult, networkResult) -> {\n-                        final List<SuggestionItem> result = new ArrayList<>();\n-                        if (localResult.size() > 0) {\n-                            result.addAll(localResult);\n-                        }\n-\n-                        // Remove duplicates\n-                        networkResult.removeIf(networkItem ->\n-                                localResult.stream().anyMatch(localItem ->\n-                                        localItem.query.equals(networkItem.query)));\n-\n-                        if (networkResult.size() > 0) {\n-                            result.addAll(networkResult);\n-                        }\n-                        return result;\n-                    }).materialize();\n                 })\n                 .subscribeOn(Schedulers.io())\n                 .observeOn(AndroidSchedulers.mainThread())\n                 .subscribe(listNotification -> {\n                     if (listNotification.isOnNext()) {\n-                        handleSuggestions(listNotification.getValue());\n-                    } else if (listNotification.isOnError()) {\n-                        showError(new ErrorInfo(listNotification.getError(),\n+                        if (listNotification.getValue() != null) {\n+                            handleSuggestions(listNotification.getValue());\n+                        }\n+                    } else if (listNotification.isOnError() && listNotification.getError() != null\n+                            && !ExceptionUtils.isInterruptedCaused(listNotification.getError())) {", "originalCommit": "0e039ac869b2445ee0a9ef5fa2598ee5ef195a36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a9a11f99ddda4e764000348ab8d31e0b16ed5b1c", "url": "https://github.com/TeamNewPipe/NewPipe/commit/a9a11f99ddda4e764000348ab8d31e0b16ed5b1c", "message": "Do not show suggestions error snackbar for interrupted I/O\n\nFix formatting", "committedDate": "2021-03-17T21:10:15Z", "type": "forcePushed"}, {"oid": "e4bec24c5276fcffd6fb59315f37aed487eb5d95", "url": "https://github.com/TeamNewPipe/NewPipe/commit/e4bec24c5276fcffd6fb59315f37aed487eb5d95", "message": "Do not show suggestions error snackbar for interrupted I/O\n\nFix formatting", "committedDate": "2021-06-15T20:29:12Z", "type": "forcePushed"}, {"oid": "1d33e7ab49a239d49f79a2c049699df5806a61a5", "url": "https://github.com/TeamNewPipe/NewPipe/commit/1d33e7ab49a239d49f79a2c049699df5806a61a5", "message": "Allow choosing which types of search suggestions to show\n\nlocal, remote, both, none\nReplacing the old on-off setting", "committedDate": "2021-08-24T16:16:16Z", "type": "commit"}, {"oid": "d37ee1e0dc011e01c8a7c8508d182774b95f5720", "url": "https://github.com/TeamNewPipe/NewPipe/commit/d37ee1e0dc011e01c8a7c8508d182774b95f5720", "message": "First run migrations, then setDefaultValues, since the latter requires the correct types", "committedDate": "2021-08-24T16:16:17Z", "type": "commit"}, {"oid": "87e7d959668d5f4f6dacb49be5ea06ee4eb64b92", "url": "https://github.com/TeamNewPipe/NewPipe/commit/87e7d959668d5f4f6dacb49be5ea06ee4eb64b92", "message": "Do not show suggestions error snackbar for interrupted I/O\n\nFix formatting", "committedDate": "2021-08-24T16:16:17Z", "type": "commit"}, {"oid": "87e7d959668d5f4f6dacb49be5ea06ee4eb64b92", "url": "https://github.com/TeamNewPipe/NewPipe/commit/87e7d959668d5f4f6dacb49be5ea06ee4eb64b92", "message": "Do not show suggestions error snackbar for interrupted I/O\n\nFix formatting", "committedDate": "2021-08-24T16:16:17Z", "type": "forcePushed"}]}