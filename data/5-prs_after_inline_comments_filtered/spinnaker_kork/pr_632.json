{"pr_number": 632, "pr_title": "feat(plugins): Add SpinnakerExtensionPoint and default getExtensionClass implementation", "pr_createdAt": "2020-05-04T00:12:53Z", "pr_url": "https://github.com/spinnaker/kork/pull/632", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE3ODU1NQ==", "url": "https://github.com/spinnaker/kork/pull/632#discussion_r419178555", "bodyText": "This is package-private - there should be no reason to make this public I think.", "author": "jonsie", "createdAt": "2020-05-04T00:13:34Z", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/internal/ExtensionClassProvider.java", "diffHunk": "@@ -12,23 +12,22 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n+ *\n  */\n \n-package com.netflix.spinnaker.kork.plugins.proxy\n+package com.netflix.spinnaker.kork.plugins.api.internal;\n \n-import java.lang.reflect.Proxy\n-import org.pf4j.ExtensionPoint\n+import java.lang.reflect.Proxy;\n \n-/**\n- * For use in service code to determine the proxied target extension class.\n- */\n-object ExtensionClassProvider {\n-  @JvmStatic\n-  fun getExtensionClass(extensionPoint: ExtensionPoint): Class<*> {\n-    if (Proxy.isProxyClass(extensionPoint.javaClass)) {\n-      val extensionInvocationProxy = Proxy.getInvocationHandler(extensionPoint) as ExtensionInvocationProxy\n-      return extensionInvocationProxy.getTargetClass()\n+class ExtensionClassProvider {", "originalCommit": "3d819283e883bd9a0b2aed007b815b5cc0e71d7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e6b80ece8000f98c2c88a8f0adc33df5beb30f9b", "url": "https://github.com/spinnaker/kork/commit/e6b80ece8000f98c2c88a8f0adc33df5beb30f9b", "message": "feat(plugins): Add SpinnakerExtensionPoint and default getExtensionClass implementation", "committedDate": "2020-05-04T00:21:16Z", "type": "commit"}, {"oid": "e6b80ece8000f98c2c88a8f0adc33df5beb30f9b", "url": "https://github.com/spinnaker/kork/commit/e6b80ece8000f98c2c88a8f0adc33df5beb30f9b", "message": "feat(plugins): Add SpinnakerExtensionPoint and default getExtensionClass implementation", "committedDate": "2020-05-04T00:21:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NjAzNw==", "url": "https://github.com/spinnaker/kork/pull/632#discussion_r419566037", "bodyText": "It would be worth throwing some javadoc on here, it took me a few minutes (and looking at the orca PR) to grok that this exists as the public API to things that generically want to deal with extension points and need access to the underyling class (for a minute I thought this was only needed to wire up all the proxy magic properly)", "author": "cfieber", "createdAt": "2020-05-04T16:31:11Z", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/internal/SpinnakerExtensionPoint.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.api.internal;\n+\n+import org.pf4j.ExtensionPoint;\n+\n+public interface SpinnakerExtensionPoint extends ExtensionPoint {", "originalCommit": "e6b80ece8000f98c2c88a8f0adc33df5beb30f9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4MDUzOA==", "url": "https://github.com/spinnaker/kork/pull/632#discussion_r419580538", "bodyText": "Oh duh, this would be a pretty important thing to document.  I'll do that.", "author": "jonsie", "createdAt": "2020-05-04T16:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NjAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NDc0MQ==", "url": "https://github.com/spinnaker/kork/pull/632#discussion_r419594741", "bodyText": "Docs on all interfaces and their methods.", "author": "robzienert", "createdAt": "2020-05-04T17:15:43Z", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/internal/ExtensionInvocationHandler.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.api.internal;\n+\n+import java.lang.reflect.InvocationHandler;\n+\n+public interface ExtensionInvocationHandler extends InvocationHandler {", "originalCommit": "e6b80ece8000f98c2c88a8f0adc33df5beb30f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b3d27f88384dcbbfc5f857e240f6fbb5ae6e64fd", "url": "https://github.com/spinnaker/kork/commit/b3d27f88384dcbbfc5f857e240f6fbb5ae6e64fd", "message": "Merge branch 'master' into spinnaker-extension-point", "committedDate": "2020-05-04T17:55:35Z", "type": "commit"}, {"oid": "229fabf0fd1c4d20a5367a8836dc32360ede505b", "url": "https://github.com/spinnaker/kork/commit/229fabf0fd1c4d20a5367a8836dc32360ede505b", "message": "fix(plugins): Docs and spotless", "committedDate": "2020-05-04T18:40:19Z", "type": "commit"}]}