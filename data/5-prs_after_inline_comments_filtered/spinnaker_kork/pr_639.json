{"pr_number": 639, "pr_title": "fix(misc): allow pluggable client providers", "pr_createdAt": "2020-05-07T02:06:20Z", "pr_url": "https://github.com/spinnaker/kork/pull/639", "timeline": [{"oid": "2374018b3fe94c6a1755e524691081d273d966de", "url": "https://github.com/spinnaker/kork/commit/2374018b3fe94c6a1755e524691081d273d966de", "message": "fix(misc): allow pluggable client providers", "committedDate": "2020-05-07T01:59:10Z", "type": "commit"}, {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64", "url": "https://github.com/spinnaker/kork/commit/9ee7147afc1b8b268227d3b4011bbef607cf0b64", "message": "fix(misc): Fix provider impls to work with new builder api", "committedDate": "2020-05-07T06:20:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MDY5MA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421260690", "bodyText": "nit ... isn't [baseUrl] incorrect syntax for javadoc in java (vs. kotlin)?", "author": "ajordens", "createdAt": "2020-05-07T06:09:48Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient.Builder builder;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.builder = okHttpClient.newBuilder();\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /** Returns whether or not the provider supports the provided [baseUrl]. */", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTM2MQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421265361", "bodyText": "Naming convention Q ... historically we've used OkHttpClient3 to distinguish.\nIs it more or less confusing not to do that here?", "author": "ajordens", "createdAt": "2020-05-07T06:22:35Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTg3MA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421935870", "bodyText": "I moved all the impls to okhttp3 package.", "author": "srekapalli", "createdAt": "2020-05-08T04:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTY5Nw==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421265697", "bodyText": "Any reason why provider.create() couldn't take endPointUrl and setup the host name verifier? Why does it need to be separately invoked?", "author": "ajordens", "createdAt": "2020-05-07T06:23:28Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n+    }\n+\n+    provider.create();", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODEyMQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421668121", "bodyText": "Good point. I think we can overload that method and leave the existing impl for backward compatibility.  Trying to fit in all the abstractions , the interface is not looking clean.", "author": "srekapalli", "createdAt": "2020-05-07T17:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMjE2NA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421812164", "bodyText": "@ajordens :  Made some changes to take in url as arg.", "author": "srekapalli", "createdAt": "2020-05-07T21:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTk0MQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421265941", "bodyText": "provider.build() vs provider.getBuilder().build()?\nMight be irrelevant.", "author": "ajordens", "createdAt": "2020-05-07T06:24:04Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n+    }\n+\n+    provider.create();\n+    provider.applyHostNameVerifier(endPointUrl);\n+\n+    return provider.getBuilder().build();", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjE3OA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421266178", "bodyText": "What's the impact on returning null here ... we're throwing an exception above if we cannot find a provider.", "author": "ajordens", "createdAt": "2020-05-07T06:24:42Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n+    }\n+\n+    provider.create();\n+    provider.applyHostNameVerifier(endPointUrl);\n+\n+    return provider.getBuilder().build();\n+  }\n+\n+  /**\n+   * Get normalized URL as decided by the provider that can serve the presented Url.\n+   *\n+   * @param endPointUrl\n+   * @return\n+   */\n+  String getNormalizedUrl(String endPointUrl) {\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    return (provider != null) ? provider.getNormalizedUrl(endPointUrl) : null;", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNjE3NQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421806175", "bodyText": "Fixed now.", "author": "srekapalli", "createdAt": "2020-05-07T21:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjM5MQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421266391", "bodyText": "nit URL vs Url when it should just be url.", "author": "ajordens", "createdAt": "2020-05-07T06:25:14Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n+    }\n+\n+    provider.create();\n+    provider.applyHostNameVerifier(endPointUrl);\n+\n+    return provider.getBuilder().build();\n+  }\n+\n+  /**\n+   * Get normalized URL as decided by the provider that can serve the presented Url.", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2ODEyNg==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421268126", "bodyText": "Javadoc could potentially be improved.\n/**\n * Default {@link OkHttpClient} that is correctly configured for service-to-service communication.\n */\n\n^^ can likely be further improved (if we actually want/need javadoc on @Bean's).", "author": "ajordens", "createdAt": "2020-05-07T06:29:53Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/RawOkHttpClientConfiguration.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import okhttp3.OkHttpClient;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(OkHttpClientConfigurationProperties.class)\n+class RawOkHttpClientConfiguration {\n+\n+  /** OkHttpClient instance to be reused it for all HTTP calls. */", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2ODcwMg==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421268702", "bodyText": "nit javadoc needs some spacing ... at least move (eg: ... onto a separate line.\nNot sure what \"upstream\" means in this context. I think we mean something along the lines of subsequently customized depending on destination?", "author": "ajordens", "createdAt": "2020-05-07T06:31:25Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/RawOkHttpClientFactory.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import java.util.concurrent.TimeUnit;\n+import okhttp3.ConnectionPool;\n+import okhttp3.Dispatcher;\n+import okhttp3.OkHttpClient;\n+\n+public class RawOkHttpClientFactory {\n+\n+  /**\n+   * Returns a basic client which can be further customized for other needs upstream.(eg: SSL setup,", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTQwOQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421269409", "bodyText": "Mentioned in an earlier comment but this may not be necessary.", "author": "ajordens", "createdAt": "2020-05-07T06:33:23Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient.Builder builder;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.builder = okHttpClient.newBuilder();\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /** Returns whether or not the provider supports the provided [baseUrl]. */\n+  public abstract Boolean supports(String baseUrl);\n+\n+  /** Allows custom implementations to adjust the url before making a call. */\n+  public String getNormalizedUrl(String baseUrl) {\n+    return baseUrl;\n+  }\n+\n+  /** Apply host name verifier for the provided [baseUrl] if any */\n+  public OkHttpClient.Builder applyHostNameVerifier(String baseUrl) {", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjMxMA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421936310", "bodyText": "Removed this method completely , we will do this as part of ssl builder.", "author": "srekapalli", "createdAt": "2020-05-08T04:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTQwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTY3Ng==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421269676", "bodyText": "Is there anything here that would stop this from actually being an interface rather than abstract class?", "author": "ajordens", "createdAt": "2020-05-07T06:34:05Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MjY5Nw==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421682697", "bodyText": "+1 this definitely looks like it should be an interface. I'd also like to see docs on the interface itself.", "author": "robzienert", "createdAt": "2020-05-07T17:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NTQyMw==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421695423", "bodyText": "Wanted to provide constructor with the dependencies that need to get autowired. And also want to carry the state in the base impl.", "author": "srekapalli", "createdAt": "2020-05-07T18:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjM5Mw==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421936393", "bodyText": "Ok. Converted to interface.", "author": "srekapalli", "createdAt": "2020-05-08T04:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MDAxMg==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421270012", "bodyText": "Having two methods that return an OkHttpClient.Builder might be confusing?", "author": "ajordens", "createdAt": "2020-05-07T06:34:56Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient.Builder builder;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.builder = okHttpClient.newBuilder();\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /** Returns whether or not the provider supports the provided [baseUrl]. */\n+  public abstract Boolean supports(String baseUrl);\n+\n+  /** Allows custom implementations to adjust the url before making a call. */\n+  public String getNormalizedUrl(String baseUrl) {\n+    return baseUrl;\n+  }\n+\n+  /** Apply host name verifier for the provided [baseUrl] if any */\n+  public OkHttpClient.Builder applyHostNameVerifier(String baseUrl) {\n+    // Concrete impls will override.\n+    return this.builder;\n+  }\n+\n+  /**\n+   * Creates an [OkHttpClient] Builder. The generated client builder is not set to talk to any\n+   * endpoint and it just constructs a bare minimum client\n+   */\n+  public abstract OkHttpClient.Builder create();\n+\n+  public OkHttpClient.Builder getBuilder() {", "originalCommit": "2374018b3fe94c6a1755e524691081d273d966de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjQ2Mg==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421936462", "bodyText": "Cleaned up the interface.", "author": "srekapalli", "createdAt": "2020-05-08T04:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MDAxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3Mzc0MQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421273741", "bodyText": "Confusing to have a method that returns OkHttpClient.Builder and another that returns a full blown OkHttpClient?", "author": "ajordens", "createdAt": "2020-05-07T06:44:13Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -50,8 +50,8 @@ public String getNormalizedUrl(String baseUrl) {\n    */\n   public abstract OkHttpClient.Builder create();\n \n-  public OkHttpClient.Builder getBuilder() {\n-    return this.builder;\n+  public OkHttpClient getClient() {\n+    return this.okHttpClient;", "originalCommit": "9ee7147afc1b8b268227d3b4011bbef607cf0b64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MzE2NA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421683164", "bodyText": "Agreed. I would not expose OkHttpClient at all.", "author": "robzienert", "createdAt": "2020-05-07T17:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3Mzc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNjA1OA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421736058", "bodyText": "Removed.", "author": "srekapalli", "createdAt": "2020-05-07T19:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3Mzc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3NjIxOQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421276219", "bodyText": "More generically could this be a collection of interceptors rather than this specific one?", "author": "ajordens", "createdAt": "2020-05-07T06:50:12Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/RawOkHttpClientConfiguration.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import okhttp3.OkHttpClient;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(OkHttpClientConfigurationProperties.class)\n+class RawOkHttpClientConfiguration {\n+\n+  /** OkHttpClient instance to be reused it for all HTTP calls. */\n+  @Bean\n+  OkHttpClient okHttpClient(\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties,\n+      OkHttp3MetricsInterceptor okHttp3MetricsInterceptor) {", "originalCommit": "9ee7147afc1b8b268227d3b4011bbef607cf0b64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNjU5OA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421806598", "bodyText": "Accepts list of interceptors.", "author": "srekapalli", "createdAt": "2020-05-07T21:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3NjIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MTUwMA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421681500", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n          \n          \n            \n                  throw new SystemException(format(\"Failed to create HTTP client: No provider found for endpoint '%s'\", endPointUrl));", "author": "robzienert", "createdAt": "2020-05-07T17:44:23Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));", "originalCommit": "9ee7147afc1b8b268227d3b4011bbef607cf0b64", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca434e6f590cd482627450658ee2da0a78316bff", "url": "https://github.com/spinnaker/kork/commit/ca434e6f590cd482627450658ee2da0a78316bff", "message": "Merge branch 'master' into client_prov", "committedDate": "2020-05-07T20:14:59Z", "type": "commit"}, {"oid": "8b6514d589198e75ef48096d53c2d9a52b9f81d6", "url": "https://github.com/spinnaker/kork/commit/8b6514d589198e75ef48096d53c2d9a52b9f81d6", "message": "fix(misc): fix provider interface", "committedDate": "2020-05-07T20:54:28Z", "type": "commit"}, {"oid": "a94c6056b10fbbe596171480a4563f6d88a5fe22", "url": "https://github.com/spinnaker/kork/commit/a94c6056b10fbbe596171480a4563f6d88a5fe22", "message": "fix(misc): java doc and accept interceptors", "committedDate": "2020-05-07T21:10:17Z", "type": "commit"}, {"oid": "f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772", "url": "https://github.com/spinnaker/kork/commit/f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772", "message": "fix(misc):pass in interceptor list", "committedDate": "2020-05-07T21:22:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMDI4NQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421810285", "bodyText": "nit: I suggest renaming these to get as it's more idiomatic on a provider.  It's always a bit strange to call create on a builder provider, and then call create again on the builder.", "author": "jonsie", "createdAt": "2020-05-07T21:39:23Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient okHttpClient;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.okHttpClient = okHttpClient;\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /**\n+   * Returns whether or not the provider supports the provided url.\n+   *\n+   * @param baseUrl url\n+   * @return true if supports the url given\n+   */\n+  public abstract Boolean supports(String baseUrl);\n+\n+  /** Allows custom implementations to adjust the url before making a call. */\n+  public String getNormalizedUrl(String baseUrl) {\n+    return baseUrl;\n+  }\n+\n+  /**\n+   * Apply host name verifier for the provided url\n+   *\n+   * @param builder builder to operate on\n+   * @param baseUrl url\n+   * @return the builder.\n+   */\n+  public OkHttpClient.Builder applyHostNameVerifier(OkHttpClient.Builder builder, String baseUrl) {\n+    // Concrete impls will override.\n+    return builder;\n+  }\n+\n+  /**\n+   * Creates a new OkHttpClient Builder from the client. The generated client builder is not set to\n+   * talk to any endpoint and it just constructs a bare minimum client\n+   */\n+  public OkHttpClient.Builder create() {", "originalCommit": "f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMDM4OQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421810389", "bodyText": "Same comment as above.", "author": "jonsie", "createdAt": "2020-05-07T21:39:36Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient okHttpClient;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.okHttpClient = okHttpClient;\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /**\n+   * Returns whether or not the provider supports the provided url.\n+   *\n+   * @param baseUrl url\n+   * @return true if supports the url given\n+   */\n+  public abstract Boolean supports(String baseUrl);\n+\n+  /** Allows custom implementations to adjust the url before making a call. */\n+  public String getNormalizedUrl(String baseUrl) {\n+    return baseUrl;\n+  }\n+\n+  /**\n+   * Apply host name verifier for the provided url\n+   *\n+   * @param builder builder to operate on\n+   * @param baseUrl url\n+   * @return the builder.\n+   */\n+  public OkHttpClient.Builder applyHostNameVerifier(OkHttpClient.Builder builder, String baseUrl) {\n+    // Concrete impls will override.\n+    return builder;\n+  }\n+\n+  /**\n+   * Creates a new OkHttpClient Builder from the client. The generated client builder is not set to\n+   * talk to any endpoint and it just constructs a bare minimum client\n+   */\n+  public OkHttpClient.Builder create() {\n+    return okHttpClient.newBuilder();\n+  }\n+\n+  public OkHttpClient.Builder create(String url) {", "originalCommit": "f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "305fdceec04ac5ed30289025d5c0648a492a9a49", "url": "https://github.com/spinnaker/kork/commit/305fdceec04ac5ed30289025d5c0648a492a9a49", "message": "fix(misc):pass in interceptor list", "committedDate": "2020-05-07T21:41:22Z", "type": "commit"}, {"oid": "038d272928431c544e2b6a6a274feb0e0ce26213", "url": "https://github.com/spinnaker/kork/commit/038d272928431c544e2b6a6a274feb0e0ce26213", "message": "feat(misc): rename the default impl for client provider", "committedDate": "2020-05-08T04:34:27Z", "type": "commit"}, {"oid": "68e671da9b356a59d0eecd36c7760b6a95a1a419", "url": "https://github.com/spinnaker/kork/commit/68e671da9b356a59d0eecd36c7760b6a95a1a419", "message": "feat(misc): rename the default impl for client provider", "committedDate": "2020-05-08T04:44:20Z", "type": "commit"}, {"oid": "159fda6c6510495d41959e1f80cd72a822a36b72", "url": "https://github.com/spinnaker/kork/commit/159fda6c6510495d41959e1f80cd72a822a36b72", "message": "Merge branch 'master' into client_prov", "committedDate": "2020-05-08T05:00:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDQ0Nw==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r422224447", "bodyText": "would it be worth grabbing something like the Service object from gate, and making that the thing passed to this builder?\nIt feels like as it stands if you wanted some sort of switching behavior based on the URL you would need to encode the configuration of that into the URL itself (which is why we then have to normalize it back to the actual URL).\nMaybe the config could just come along in a dedicated object?", "author": "cfieber", "createdAt": "2020-05-08T15:57:08Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import okhttp3.OkHttpClient;\n+\n+public interface OkHttpClientBuilderProvider {", "originalCommit": "159fda6c6510495d41959e1f80cd72a822a36b72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5MTIyNA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r422291224", "bodyText": "Yes. Didn't feel good to pass along URL to switch behavior and kind of influenced by what's out there currently :(.", "author": "srekapalli", "createdAt": "2020-05-08T18:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTA0MA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423225040", "bodyText": "Would like to see docs on all interfaces. Purpose, usage, etc.", "author": "robzienert", "createdAt": "2020-05-11T18:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDQ0Nw=="}], "type": "inlineReview"}, {"oid": "7d5c1cbf8686e56ecdef8470fbbcf5f5eef3e702", "url": "https://github.com/spinnaker/kork/commit/7d5c1cbf8686e56ecdef8470fbbcf5f5eef3e702", "message": "fix(misc): Add a concrete definition for a service that we pass around during client construction (similar to what we have in gate today)", "committedDate": "2020-05-08T22:31:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxNDA1NA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r422414054", "bodyText": "I'm not totally sure we should lift this entire structure out of gate - there is a lot of stuff in here that seems overly specific and that we won't use generically in all the services.\nMaybe just a Service interface but not the opinion on how to map that class from configuration (at least to start with)\nAnd maybe all the Service interface has to supply out of the box is a getUrl method.\nFor our internal needs we can extend that to something that includes additional configuration.", "author": "cfieber", "createdAt": "2020-05-08T23:08:27Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/ServiceConfigurationProperties.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties\n+public class ServiceConfigurationProperties {", "originalCommit": "7d5c1cbf8686e56ecdef8470fbbcf5f5eef3e702", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NTUzNQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r422445535", "bodyText": "Agree, some config around sharding etc felt too specific and some configs like healthCheckableSerivces etc felt like we can reuse across all so thought will bring it in as is.\nAlso, thought we can make the service config consistent across all  services if we use a common construct like gate. (may be a trimmed down version)\nFor now, I will keep the configuration aspects out of this and see whether we can easily put the usage of Service object in places where we construct clients.", "author": "srekapalli", "createdAt": "2020-05-09T02:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxNDA1NA=="}], "type": "inlineReview"}, {"oid": "dec7093b3e62fe9033540862062a40e790cfbe00", "url": "https://github.com/spinnaker/kork/commit/dec7093b3e62fe9033540862062a40e790cfbe00", "message": "fix(misc): Remove Service configuration obj and use value obj to describe a service endpoint", "committedDate": "2020-05-09T04:24:59Z", "type": "commit"}, {"oid": "ba44b5087cd88a6d9bfffe764999e1b5d0fa3dce", "url": "https://github.com/spinnaker/kork/commit/ba44b5087cd88a6d9bfffe764999e1b5d0fa3dce", "message": "fix(misc): clean up interface", "committedDate": "2020-05-09T18:53:45Z", "type": "commit"}, {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b", "url": "https://github.com/spinnaker/kork/commit/c297dfa7ff1809184098ab86d3541da1ec94551b", "message": "fix(misc): java doc", "committedDate": "2020-05-09T19:19:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTU3NA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423225574", "bodyText": "We could use the spring @ordered annotation on instances of these providers in which case the list of providers here comes in priority order", "author": "cfieber", "createdAt": "2020-05-11T18:10:40Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import okhttp3.OkHttpClient;\n+\n+public interface OkHttpClientBuilderProvider {\n+\n+  /**\n+   * Returns whether or not the provider supports the provided service endpoint.\n+   *\n+   * @param service service configuration\n+   * @return true if supports the url given\n+   */\n+  default Boolean supports(ServiceEndpoint service) {\n+    return service.getBaseUrl().startsWith(\"http://\")\n+        || service.getBaseUrl().startsWith(\"https://\");\n+  }\n+\n+  /**\n+   * Creates a new and customized {@link OkHttpClient.Builder} for the provided service.\n+   *\n+   * @param service service config\n+   * @return the builder\n+   */\n+  OkHttpClient.Builder get(ServiceEndpoint service);\n+\n+  /**\n+   * Decides the order in which this provider is consulted.\n+   *\n+   * @return the assigned priority\n+   */\n+  Integer priority();", "originalCommit": "c297dfa7ff1809184098ab86d3541da1ec94551b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMzQ5Nw==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423223497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Represents an service endpoint URL and name. */\n          \n          \n            \n            /** Represents a service endpoint URL and name. */", "author": "robzienert", "createdAt": "2020-05-11T18:06:57Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+/** Represents an service endpoint URL and name. */", "originalCommit": "c297dfa7ff1809184098ab86d3541da1ec94551b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMzY1Ng==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423223656", "bodyText": "Docs on interface. What is this for? How is it used?", "author": "robzienert", "createdAt": "2020-05-11T18:07:12Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/ServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+public interface ServiceEndpoint {", "originalCommit": "c297dfa7ff1809184098ab86d3541da1ec94551b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTk4MQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423225981", "bodyText": "Are these methods actually returning nullable types? If not, @Nonnull. Same goes for all of other interfaces: Flag non-null method arguments and return types with @Nonnull where applicable.", "author": "robzienert", "createdAt": "2020-05-11T18:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMzY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNDg2Ng==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423224866", "bodyText": "Shouldn't this be an int? I see the code doesn't handle nullability. Would a default value also be useful?", "author": "robzienert", "createdAt": "2020-05-11T18:09:19Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import okhttp3.OkHttpClient;\n+\n+public interface OkHttpClientBuilderProvider {\n+\n+  /**\n+   * Returns whether or not the provider supports the provided service endpoint.\n+   *\n+   * @param service service configuration\n+   * @return true if supports the url given\n+   */\n+  default Boolean supports(ServiceEndpoint service) {\n+    return service.getBaseUrl().startsWith(\"http://\")\n+        || service.getBaseUrl().startsWith(\"https://\");\n+  }\n+\n+  /**\n+   * Creates a new and customized {@link OkHttpClient.Builder} for the provided service.\n+   *\n+   * @param service service config\n+   * @return the builder\n+   */\n+  OkHttpClient.Builder get(ServiceEndpoint service);\n+\n+  /**\n+   * Decides the order in which this provider is consulted.\n+   *\n+   * @return the assigned priority\n+   */\n+  Integer priority();", "originalCommit": "c297dfa7ff1809184098ab86d3541da1ec94551b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNjUyMQ==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423226521", "bodyText": "What's the purpose of this method? Seems leaky to me.", "author": "robzienert", "createdAt": "2020-05-11T18:12:20Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/DefaultOkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import okhttp3.CipherSuite;\n+import okhttp3.ConnectionSpec;\n+import okhttp3.OkHttpClient;\n+import okhttp3.TlsVersion;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DefaultOkHttpClientBuilderProvider implements OkHttpClientBuilderProvider {\n+\n+  private static final Logger log =\n+      LoggerFactory.getLogger(DefaultOkHttpClientBuilderProvider.class);\n+\n+  private final OkHttpClient okHttpClient;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  @Autowired\n+  public DefaultOkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.okHttpClient = okHttpClient;\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  @Override\n+  public OkHttpClient.Builder get(ServiceEndpoint service) {\n+    OkHttpClient.Builder builder = okHttpClient.newBuilder();\n+    setSSLSocketFactory(builder, service);\n+    applyConnectionSpecs(builder);\n+    return builder;\n+  }\n+\n+  @Override\n+  public Integer priority() {\n+    return 0;\n+  }\n+\n+  protected OkHttpClient.Builder setSSLSocketFactory(\n+      OkHttpClient.Builder builder, ServiceEndpoint service) {\n+\n+    if (okHttpClientConfigurationProperties.getKeyStore() == null\n+        && okHttpClientConfigurationProperties.getTrustStore() == null) {\n+      return builder;\n+    }\n+\n+    try {\n+      KeyManagerFactory keyManagerFactory =\n+          KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      KeyStore ks = KeyStore.getInstance(okHttpClientConfigurationProperties.getKeyStoreType());\n+      ks.load(\n+          new FileInputStream(okHttpClientConfigurationProperties.getKeyStore()),\n+          okHttpClientConfigurationProperties.getKeyStorePassword().toCharArray());\n+      keyManagerFactory.init(\n+          ks, okHttpClientConfigurationProperties.getKeyStorePassword().toCharArray());\n+\n+      TrustManagerFactory trustManagerFactory =\n+          TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+      KeyStore ts = KeyStore.getInstance(okHttpClientConfigurationProperties.getTrustStoreType());\n+      ts.load(\n+          new FileInputStream(okHttpClientConfigurationProperties.getTrustStore()),\n+          okHttpClientConfigurationProperties.getTrustStorePassword().toCharArray());\n+      trustManagerFactory.init(ts);\n+\n+      SecureRandom secureRandom =\n+          SecureRandom.getInstance(\n+              okHttpClientConfigurationProperties.getSecureRandomInstanceType());\n+      SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+      sslContext.init(\n+          keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), secureRandom);\n+      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+      checkState(\n+          trustManagers.length == 1, \"Found multiple trust managers; don't know which one to use\");\n+      checkState(\n+          trustManagers[0] instanceof X509TrustManager,\n+          \"Configured TrustManager is a %s, not an X509TrustManager; don't know how to configure it\",\n+          trustManagers[0].getClass().getSimpleName());\n+      builder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0]);\n+    } catch (Exception e) {\n+      log.error(\"Unable to set ssl socket factory for {}\", service.getBaseUrl(), e);\n+      throw new SystemException(\n+          format(\"Unable to set ssl socket factory for (%s)\", service.getBaseUrl()), e);\n+    }\n+\n+    return builder;\n+  }\n+\n+  protected OkHttpClient.Builder applyConnectionSpecs(OkHttpClient.Builder builder) {\n+\n+    ConnectionSpec.Builder connectionSpecBuilder =\n+        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS);\n+    if (okHttpClientConfigurationProperties.getCipherSuites() != null) {\n+      connectionSpecBuilder.cipherSuites(\n+          okHttpClientConfigurationProperties.getCipherSuites().toArray(new String[0]));\n+    } else {\n+      connectionSpecBuilder.cipherSuites(\n+          Objects.requireNonNull(ConnectionSpec.MODERN_TLS.cipherSuites()).stream()\n+              .map(CipherSuite::javaName)\n+              .toArray(String[]::new));\n+    }\n+\n+    if (okHttpClientConfigurationProperties.getTlsVersions() != null) {\n+      connectionSpecBuilder.tlsVersions(\n+          okHttpClientConfigurationProperties.getTlsVersions().toArray(new String[0]));\n+    } else {\n+      connectionSpecBuilder.tlsVersions(\n+          Objects.requireNonNull(ConnectionSpec.MODERN_TLS.tlsVersions()).stream()\n+              .map(TlsVersion::javaName)\n+              .toArray(String[]::new));\n+    }\n+\n+    ConnectionSpec connectionSpec = connectionSpecBuilder.build();\n+\n+    return builder.connectionSpecs(Arrays.asList(connectionSpec, ConnectionSpec.CLEARTEXT));\n+  }\n+\n+  public OkHttpClient getOkHttpClient() {\n+    return okHttpClient;\n+  }", "originalCommit": "c297dfa7ff1809184098ab86d3541da1ec94551b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1MzU0Nw==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423253547", "bodyText": "Removed. Not needed.", "author": "srekapalli", "createdAt": "2020-05-11T19:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNjUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNzA0Ng==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423227046", "bodyText": "nit: This can be shortened to .orElseThrow(() -> new SystemException(\"...\"));", "author": "robzienert", "createdAt": "2020-05-11T18:13:17Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import java.util.Comparator;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * Consults the provider impls to decide which provider class can build a client for the given\n+   * service config and delegates to that provider to build a client.\n+   *\n+   * @param service service configuration\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(DefaultServiceEndpoint service) {\n+    OkHttpClientBuilderProvider provider = findProvider(service);\n+    return provider.get(service).build();\n+  }\n+\n+  private OkHttpClientBuilderProvider findProvider(DefaultServiceEndpoint service) {\n+    OkHttpClientBuilderProvider providerImpl =\n+        providers.stream()\n+            .sorted(Comparator.comparingInt(OkHttpClientBuilderProvider::priority).reversed())\n+            .filter(provider -> provider.supports(service))\n+            .findFirst()\n+            .orElse(null);\n+\n+    if (providerImpl == null) {\n+      throw new SystemException(\n+          format(\"No client provider found for url (%s)\", service.getBaseUrl()));\n+    }", "originalCommit": "c297dfa7ff1809184098ab86d3541da1ec94551b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNzY1NA==", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423227654", "bodyText": "If this is truly \"default\" should this factory method include @ConditionalOnMissingBean(OkHttpClient.class)?", "author": "robzienert", "createdAt": "2020-05-11T18:14:27Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/RawOkHttpClientConfiguration.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import java.util.List;\n+import okhttp3.Interceptor;\n+import okhttp3.OkHttpClient;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(OkHttpClientConfigurationProperties.class)\n+class RawOkHttpClientConfiguration {\n+\n+  /**\n+   * Default {@link OkHttpClient} that is correctly configured for service-to-service communication.\n+   */\n+  @Bean\n+  OkHttpClient okHttpClient(", "originalCommit": "c297dfa7ff1809184098ab86d3541da1ec94551b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c89cc60530e4aad7f9d554665e7506fc88f6bf17", "url": "https://github.com/spinnaker/kork/commit/c89cc60530e4aad7f9d554665e7506fc88f6bf17", "message": "fix(misc): Order the providers", "committedDate": "2020-05-11T18:22:57Z", "type": "commit"}, {"oid": "d7b313e892a270795b9aee2646ca73834ce74c04", "url": "https://github.com/spinnaker/kork/commit/d7b313e892a270795b9aee2646ca73834ce74c04", "message": "fix(misc): Order the providers", "committedDate": "2020-05-11T19:00:25Z", "type": "commit"}, {"oid": "a3c8e5fad1e0367aff7700ed786e23f067c03062", "url": "https://github.com/spinnaker/kork/commit/a3c8e5fad1e0367aff7700ed786e23f067c03062", "message": "fix(misc): Java doc", "committedDate": "2020-05-11T19:48:41Z", "type": "commit"}]}