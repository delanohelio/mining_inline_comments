{"pr_number": 518, "pr_title": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface", "pr_createdAt": "2020-02-18T03:04:28Z", "pr_url": "https://github.com/spinnaker/kork/pull/518", "timeline": [{"oid": "d91d96ae40e76e29bd7319fac10fe93cf49586a6", "url": "https://github.com/spinnaker/kork/commit/d91d96ae40e76e29bd7319fac10fe93cf49586a6", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin.", "committedDate": "2020-02-18T03:08:01Z", "type": "forcePushed"}, {"oid": "ac233e74e260e4f7db06b15ac555dc028035d90b", "url": "https://github.com/spinnaker/kork/commit/ac233e74e260e4f7db06b15ac555dc028035d90b", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin.", "committedDate": "2020-02-18T03:14:31Z", "type": "forcePushed"}, {"oid": "6eb96cbf8d4501e44de58e2b01ba32fec958393b", "url": "https://github.com/spinnaker/kork/commit/6eb96cbf8d4501e44de58e2b01ba32fec958393b", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin.", "committedDate": "2020-02-18T03:19:42Z", "type": "forcePushed"}, {"oid": "22396d664e5476ce75bbb510a16d96cc1b2128b1", "url": "https://github.com/spinnaker/kork/commit/22396d664e5476ce75bbb510a16d96cc1b2128b1", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin.", "committedDate": "2020-02-18T03:26:03Z", "type": "commit"}, {"oid": "22396d664e5476ce75bbb510a16d96cc1b2128b1", "url": "https://github.com/spinnaker/kork/commit/22396d664e5476ce75bbb510a16d96cc1b2128b1", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin.", "committedDate": "2020-02-18T03:26:03Z", "type": "forcePushed"}, {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684", "url": "https://github.com/spinnaker/kork/commit/8ee6e7db931b371ac42dcc63de216d18f4b33684", "message": "fix(plugins): Clarify constructor integration exception message", "committedDate": "2020-02-18T07:40:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMDk2NQ==", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380830965", "bodyText": "Let's add some docs on what the the value actually is supposed to be. There's currently no indicator that this value is supposed to be the configuration key (path?)", "author": "robzienert", "createdAt": "2020-02-18T17:42:22Z", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/ExtensionConfiguration.java", "diffHunk": "@@ -22,20 +22,23 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-import org.pf4j.Extension;\n+import javax.annotation.Nonnull;\n \n /**\n- * The primary marker annotation for extensions within Spinnaker.\n+ * Denotes that a class provides extension configuration. For example:\n  *\n- * <p>This annotation must be used in lieu of {@link org.pf4j.Extension} as this annotation is used\n- * for critical loading capabilities.\n+ * <pre>{@code\n+ * &#064;ExtensionConfiguration(\"my-extension\")\n+ * public class MyExtensionConfiguration {\n+ *   private String someProperty;\n+ * }\n+ * }</pre>\n  */\n @Alpha\n-@Extension\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.TYPE)\n @Documented\n-public @interface SpinnakerExtension {\n-  /** The unique canonical id of the extension. */\n-  String id();\n+public @interface ExtensionConfiguration {\n+  @Nonnull\n+  String value();", "originalCommit": "8ee6e7db931b371ac42dcc63de216d18f4b33684", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "020610d3e1bef2ce3bc2af2befa481883f25c7bb", "url": "https://github.com/spinnaker/kork/commit/020610d3e1bef2ce3bc2af2befa481883f25c7bb", "message": "fix(plugins): Add annotation field docs", "committedDate": "2020-02-18T19:13:26Z", "type": "commit"}, {"oid": "05281372887ced84b929d275dbd7baf4274a78c6", "url": "https://github.com/spinnaker/kork/commit/05281372887ced84b929d275dbd7baf4274a78c6", "message": "Merge branch 'master' into feat-extension-configuration", "committedDate": "2020-02-18T19:14:29Z", "type": "commit"}]}