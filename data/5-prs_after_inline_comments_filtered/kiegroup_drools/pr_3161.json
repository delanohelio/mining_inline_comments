{"pr_number": 3161, "pr_title": "[DROOLS-5720] make PMML to work without mvel", "pr_createdAt": "2020-10-12T17:46:29Z", "pr_url": "https://github.com/kiegroup/drools/pull/3161", "timeline": [{"oid": "a48623d421f451a4e64788ec911af3c51e7daf9c", "url": "https://github.com/kiegroup/drools/commit/a48623d421f451a4e64788ec911af3c51e7daf9c", "message": "[DROOLS-5720] make PMML to work without mvel", "committedDate": "2020-10-12T17:45:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4MjAxNQ==", "url": "https://github.com/kiegroup/drools/pull/3161#discussion_r503682015", "bodyText": "@mariofusco\nWhat's the need for that ?", "author": "gitgabrio", "createdAt": "2020-10-13T05:50:29Z", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactory.java", "diffHunk": "@@ -57,13 +60,27 @@ public static PMMLRuntime getPMMLRuntime(String kbaseName, File pmmlFile, Releas\n     private static PMMLRuntime getPMMLRuntime(String kbaseName, File pmmlFile, KnowledgeBuilderImpl kbuilderImpl) {\n         FileSystemResource fileSystemResource = new FileSystemResource(pmmlFile);\n         new PMMLAssemblerService().addResource(kbuilderImpl, fileSystemResource, ResourceType.PMML, null);\n-        InternalKnowledgeBase kieBase = KnowledgeBaseFactory.newKnowledgeBase(kbaseName, new RuleBaseConfiguration());\n-        kieBase.addPackages( kbuilderImpl.getKnowledgePackages() );\n+        KieBase kieBase = createKieBase( kbuilderImpl );\n         return getPMMLRuntime(kieBase);\n     }\n \n     private static PMMLRuntime getPMMLRuntime(KieBase kieBase) {\n         final KieRuntimeFactory kieRuntimeFactory = KieRuntimeFactory.of(kieBase);\n         return kieRuntimeFactory.get(PMMLRuntime.class);\n     }\n+\n+    private static KieBase createKieBase( KnowledgeBuilderImpl kbuilderImpl ) {\n+        KieHelper kieHelper = new KieHelper();\n+        kbuilderImpl.getPackageNames().stream().flatMap( name -> kbuilderImpl.getPackageDescrs( name ).stream() )\n+                .forEach( pDescr -> kieHelper.addResource( createDescrResource(pDescr) ) );\n+        KieBase kieBase = kieHelper.build(ExecutableModelProject.class);\n+        (( InternalKnowledgeBase ) kieBase).addPackages( kbuilderImpl.getKnowledgePackages() );\n+        return kieBase;\n+    }\n+\n+    private static DescrResource createDescrResource( PackageDescr pDescr ) {", "originalCommit": "a48623d421f451a4e64788ec911af3c51e7daf9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5MDMzNg==", "url": "https://github.com/kiegroup/drools/pull/3161#discussion_r503790336", "bodyText": "@gitgabrio When you add a resource to be compiled the resource has to have a path in the virtual file system that drools create internally. SInce I'm creating an artificial resource (not one taken from the file system) I'm also giving it an artificial name. I guess this is a leaky abstraction that we could avoid, but for now this is necessary.", "author": "mariofusco", "createdAt": "2020-10-13T09:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4MjAxNQ=="}], "type": "inlineReview"}, {"oid": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "url": "https://github.com/kiegroup/drools/commit/31bf55b4e1c36feeea67d8323d58716ab2a44b85", "message": "wip", "committedDate": "2020-10-13T09:02:32Z", "type": "commit"}, {"oid": "2cd62767a0eee684a06b1ea7e0005ef99b733dc6", "url": "https://github.com/kiegroup/drools/commit/2cd62767a0eee684a06b1ea7e0005ef99b733dc6", "message": "wip", "committedDate": "2020-10-13T17:17:36Z", "type": "commit"}, {"oid": "c8a9fcf636d5a6317fab8e2bffcfaf896ee946c9", "url": "https://github.com/kiegroup/drools/commit/c8a9fcf636d5a6317fab8e2bffcfaf896ee946c9", "message": "wip", "committedDate": "2020-10-14T06:46:51Z", "type": "commit"}]}