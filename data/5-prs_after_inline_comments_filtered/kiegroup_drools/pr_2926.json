{"pr_number": 2926, "pr_title": "[DROOLS-5324] refactor building of non-native resources from the exec\u2026", "pr_createdAt": "2020-06-01T11:00:14Z", "pr_url": "https://github.com/kiegroup/drools/pull/2926", "timeline": [{"oid": "190514480ca9887acef7e6a47541c00b17a8b118", "url": "https://github.com/kiegroup/drools/commit/190514480ca9887acef7e6a47541c00b17a8b118", "message": "[DROOLS-5324] refactor building of non-native resources from the executable model", "committedDate": "2020-06-01T10:58:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4MzkzMA==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r433183930", "bodyText": "Is it possible to remove this workaround too hardcoded on ResourceType.PMML and use the generic new isNative condition?", "author": "danielezonca", "createdAt": "2020-06-01T11:34:31Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -205,30 +213,26 @@ public InternalKnowledgeBase createKieBase(KieBaseModelImpl kBaseModel, KieProje\n         checkStreamMode(kBaseModel, conf, kpkgs.getKiePackages());\n         InternalKnowledgeBase kieBase = new KieBaseBuilder(kBaseModel, kBaseConf).createKieBase(kpkgs);\n \n-        if (hasNonModelResources(kBaseModel, kieProject)) {\n-            KnowledgePackagesBuildResult knowledgePackagesBuildResult = ((AbstractKieModule) internalKieModule).buildKnowledgePackages(kBaseModel, kieProject, messages);\n-            if (knowledgePackagesBuildResult.hasErrors()) {\n-                return null;\n-            }\n-            Collection<KiePackage> pkgs = knowledgePackagesBuildResult.getPkgs();\n-            for (KiePackage pk : pkgs) {\n+        buildNonNativeResources( kBaseModel, kieProject, messages, kieBase );\n+        return kieBase;\n+    }\n+\n+    private void buildNonNativeResources( KieBaseModelImpl kBaseModel, KieProject kieProject, ResultsImpl messages, InternalKnowledgeBase kieBase ) {\n+        (( AbstractKieProject ) kieProject).setBuildFilter( BUILD_NON_NATIVE );\n+        KnowledgeBuilder kbuilder = kieProject.buildKnowledgePackages(kBaseModel, messages);\n+        if ( !kbuilder.hasErrors() ) {\n+            for (KiePackage pk : kbuilder.getKnowledgePackages()) {\n                 // Workaround to \"mark\" already compiled packages (as found inside the kjar and retrieved by createKiePackages(kieProject, kBaseModel, messages, kBaseConf))\n                 // as \"PMML\" packages\n                 boolean isInternalKnowldgePackage = pk instanceof InternalKnowledgePackage;\n-                final InternalKnowledgePackage originalPackage = kieBase.getPackage(pk.getName());\n-                if (originalPackage != null && isInternalKnowldgePackage && ((InternalKnowledgePackage) pk).getResourceTypePackages().get(ResourceType.PMML) != null) {\n-                    originalPackage.getResourceTypePackages().put(ResourceType.PMML, ((InternalKnowledgePackage) pk).getResourceTypePackages().get(ResourceType.PMML));\n-                } else if (originalPackage == null) {\n-                    kieBase.addPackages(pkgs);\n+                final InternalKnowledgePackage originalPackage = kieBase.getPackage( pk.getName() );\n+                if ( originalPackage != null && isInternalKnowldgePackage && (( InternalKnowledgePackage ) pk).getResourceTypePackages().get( ResourceType.PMML ) != null ) {\n+                    originalPackage.getResourceTypePackages().put( ResourceType.PMML, (( InternalKnowledgePackage ) pk).getResourceTypePackages().get( ResourceType.PMML ) );\n+                } else if ( originalPackage == null ) {\n+                    kieBase.addPackage( pk );", "originalCommit": "190514480ca9887acef7e6a47541c00b17a8b118", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NjI2OQ==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r433186269", "bodyText": "After this change this additional build will be always invoked even if there are no DMN/PMML resources to build.\nInternally it will become a no-op build in this case but I guess if we are adding visible overhead or not.", "author": "danielezonca", "createdAt": "2020-06-01T11:40:51Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -205,30 +213,26 @@ public InternalKnowledgeBase createKieBase(KieBaseModelImpl kBaseModel, KieProje\n         checkStreamMode(kBaseModel, conf, kpkgs.getKiePackages());\n         InternalKnowledgeBase kieBase = new KieBaseBuilder(kBaseModel, kBaseConf).createKieBase(kpkgs);\n \n-        if (hasNonModelResources(kBaseModel, kieProject)) {\n-            KnowledgePackagesBuildResult knowledgePackagesBuildResult = ((AbstractKieModule) internalKieModule).buildKnowledgePackages(kBaseModel, kieProject, messages);\n-            if (knowledgePackagesBuildResult.hasErrors()) {\n-                return null;\n-            }\n-            Collection<KiePackage> pkgs = knowledgePackagesBuildResult.getPkgs();\n-            for (KiePackage pk : pkgs) {\n+        buildNonNativeResources( kBaseModel, kieProject, messages, kieBase );", "originalCommit": "190514480ca9887acef7e6a47541c00b17a8b118", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5MTcwOQ==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434391709", "bodyText": "Before the if condition traversed all the files in the project and if there was any dmn or pmml file it launched the build. Now the build is lunched regardless, it internally collects the dmn and pmml files to be built and if there isn't any it returns immediately, so I believe that the performances of the 2 implementations are very similar and this second one is more readable.", "author": "mariofusco", "createdAt": "2020-06-03T08:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NjI2OQ=="}], "type": "inlineReview"}, {"oid": "8019174def549d5966dbe18072b42d7b4d7a18c1", "url": "https://github.com/kiegroup/drools/commit/8019174def549d5966dbe18072b42d7b4d7a18c1", "message": "[DROOLS-5324] refactor building of non-native resources from the executable model", "committedDate": "2020-06-01T14:20:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MTY1NA==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434361654", "bodyText": "Why this is required only when we are in BUILD_ALL execution?", "author": "danielezonca", "createdAt": "2020-06-03T07:26:30Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieProject.java", "diffHunk": "@@ -234,30 +240,35 @@ public KnowledgeBuilder buildKnowledgePackages( KieBaseModelImpl kBaseModel,\n                 continue;\n             }\n             if (compileIncludedKieBases()) {\n-                addFiles( assets, getKieBaseModel( include ), includeModule, useFolders );\n+                addFiles( buildFilter, assets, getKieBaseModel( include ), includeModule, useFolders );\n             }\n         }\n \n         if (!allIncludesAreValid) {\n             return null;\n         }\n \n-        addFiles( assets, kBaseModel, kModule, useFolders );\n+        addFiles( buildFilter, assets, kBaseModel, kModule, useFolders );\n \n         CompositeKnowledgeBuilder ckbuilder = kbuilder.batch();\n \n+        // cache KnowledgeBuilder and results\n+        if (buildFilter == BUILD_ALL) {\n+            kModule.cacheKnowledgeBuilderForKieBase( kBaseModel.getName(), kbuilder );\n+            kModule.cacheResultsForKieBase( kBaseModel.getName(), messages );\n+        }", "originalCommit": "8019174def549d5966dbe18072b42d7b4d7a18c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5OTEyMQ==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434399121", "bodyText": "You want to cache and reuse the kbuilder (that's necessary for incremental compilation) only if you did a complete build.", "author": "mariofusco", "createdAt": "2020-06-03T08:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwODQwOQ==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434408409", "bodyText": "Yes but if I have understood correctly, this doesn't really mean \"complete\" because then an additional build for not canonical model resources is needed. Am I right?", "author": "danielezonca", "createdAt": "2020-06-03T08:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MTY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2MzE0MA==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434363140", "bodyText": "I think BUILD_ALL is misleading as name because if I have understood correctly, this means build all (only) canonical model related resources. Am I right?", "author": "danielezonca", "createdAt": "2020-06-03T07:29:05Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieProject.java", "diffHunk": "@@ -58,6 +59,8 @@\n \n     private final Map<String, KieSessionModel>   kSessionModels             = new HashMap<>();\n \n+    private static final Predicate<String> BUILD_ALL = s -> true;", "originalCommit": "8019174def549d5966dbe18072b42d7b4d7a18c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NjkwOQ==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434396909", "bodyText": "@mariofusco\nWould not be easier to just list PMML and DMN here ?", "author": "gitgabrio", "createdAt": "2020-06-03T08:28:33Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -93,7 +93,14 @@\n     public static final String MODEL_FILE_DIRECTORY = \"META-INF/kie/\";\n     public static final String MODEL_FILE_NAME = \"drools-model\";\n     public static final String MODEL_VERSION = \"Drools-Model-Version:\";\n+\n     private static final String PROJECT_MODEL_RESOURCE_CLASS = PROJECT_MODEL_CLASS.replace('.', '/') + \".class\";\n+\n+    private static final Predicate<String> NON_MODEL_RESOURCES = res -> {", "originalCommit": "8019174def549d5966dbe18072b42d7b4d7a18c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNjE4OQ==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434406189", "bodyText": "@gitgabrio I don't think so, because at that point you will have another condition buried in our implementation (which is exactly the thing that we wanted to avoid) instead of being visible in the resource type to be built. What will happen when somebody else will add a third resource with same characteristic of pmml and dmn?", "author": "mariofusco", "createdAt": "2020-06-03T08:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NjkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQxNzI2NQ==", "url": "https://github.com/kiegroup/drools/pull/2926#discussion_r434417265", "bodyText": "@mariofusco\nTBH I've the impression this PR does not really address the main issue.\nThe flow (as I can understand) is:\nCanonicalKieModule.createKieBase ->\n\nbuild CanonicalKiePackages out of \"drl\" resources\ninvoke CanonicalKieModule.buildNonNativeResources (that currently build DMN and PMML)\n\nCanonicalKieModule.buildNonNativeResources invokes AbstractKieProject.buildKnowledgePackages (line 217) with the Predicate as last parameter.\nBut that same method is also invoked by AbstractKieProject.buildKnowledgePackages (line 213) with a BUILD_ALL predicate.\nSo on one side it seems to be possible to invoke AbstractKieProject.buildKnowledgePackages just once, to build all the resources, and on the other side we are keeping this separated inside the CanonicalKieModule.\nAll this is very confusing IMO. For example, inside PMML I've a lot of different \"models\" - some of them are built as drools, some not - but this is decided by the implementation.\nSo, I think that CanonicalKieModule should just ask AbstractKieProject to build every resource it finds, invoking the appropriate builder, and let the latter manage how  the package is built and what it is put inside.", "author": "gitgabrio", "createdAt": "2020-06-03T09:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NjkwOQ=="}], "type": "inlineReview"}]}