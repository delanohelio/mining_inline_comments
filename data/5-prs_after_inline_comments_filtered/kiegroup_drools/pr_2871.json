{"pr_number": 2871, "pr_title": "DROOLS-5277 DMN codegen inner composite, recursion, Any fix", "pr_createdAt": "2020-04-27T11:32:01Z", "pr_url": "https://github.com/kiegroup/drools/pull/2871", "timeline": [{"oid": "f5adf967a2889dc3a6d8f59d9279ce96f2cc725f", "url": "https://github.com/kiegroup/drools/commit/f5adf967a2889dc3a6d8f59d9279ce96f2cc725f", "message": "WIP", "committedDate": "2020-04-23T17:28:23Z", "type": "commit"}, {"oid": "76672411320577af661ed970a592dbee34ac5fc1", "url": "https://github.com/kiegroup/drools/commit/76672411320577af661ed970a592dbee34ac5fc1", "message": "With inner composite", "committedDate": "2020-04-24T07:35:18Z", "type": "commit"}, {"oid": "5b0ba6d2ec31992a80968256e4246017c230e29d", "url": "https://github.com/kiegroup/drools/commit/5b0ba6d2ec31992a80968256e4246017c230e29d", "message": "a first implementation for feel:Any", "committedDate": "2020-04-24T17:28:34Z", "type": "commit"}, {"oid": "93ab17782af7e353d268dbf91c42f8a7746d7f73", "url": "https://github.com/kiegroup/drools/commit/93ab17782af7e353d268dbf91c42f8a7746d7f73", "message": "inner composite fix and recursion fix", "committedDate": "2020-04-24T19:50:51Z", "type": "commit"}, {"oid": "b10b75a84c55555374da1dc7466e4aadf39939ab", "url": "https://github.com/kiegroup/drools/commit/b10b75a84c55555374da1dc7466e4aadf39939ab", "message": "TO BE REVERTED: use type safe in every test\n\n\nTO BE REVERTED: use type safe in every test\n\nx\n\nConflicts:\n\tkie-dmn/kie-dmn-validation/src/test/java/org/kie/dmn/validation/ValidatorImportTest.java\n\nTO BE REVERTED 2: use typesafe in every test\n\nConflicts:\n\tkie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/v1_3/DMNTypeSafeTest.java\n\tkie-dmn/kie-dmn-validation/src/test/java/org/kie/dmn/validation/ValidatorImportTest.java\n\nx\nfix test evaluation non type safe\n\nReverted evaluation\n\nConflicts:\n\tkie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/BaseVariantTest.java\n\nx\nfixing test structures\nx\nx\nx", "committedDate": "2020-04-27T10:46:29Z", "type": "commit"}, {"oid": "6a2119c0865161f3d77ed5b8cd6b8dc1515f9fc5", "url": "https://github.com/kiegroup/drools/commit/6a2119c0865161f3d77ed5b8cd6b8dc1515f9fc5", "message": "Revert \"TO BE REVERTED: use type safe in every test\"\n\nThis reverts commit b10b75a84c55555374da1dc7466e4aadf39939ab.", "committedDate": "2020-04-27T10:48:36Z", "type": "commit"}, {"oid": "ad6630ddda18d9e2260f8fc059f76e2bac727070", "url": "https://github.com/kiegroup/drools/commit/ad6630ddda18d9e2260f8fc059f76e2bac727070", "message": "finalizing refactors\nx\nx", "committedDate": "2020-04-27T11:28:19Z", "type": "commit"}, {"oid": "d09f0892cc35ff440007a20adcde5bfb94b67cb0", "url": "https://github.com/kiegroup/drools/commit/d09f0892cc35ff440007a20adcde5bfb94b67cb0", "message": ".", "committedDate": "2020-04-27T11:31:29Z", "type": "commit"}, {"oid": "95770c222601deda482984c04f9670467f59c762", "url": "https://github.com/kiegroup/drools/commit/95770c222601deda482984c04f9670467f59c762", "message": ".", "committedDate": "2020-04-27T11:34:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDk4Mw==", "url": "https://github.com/kiegroup/drools/pull/2871#discussion_r415774983", "bodyText": "typo conver", "author": "lucamolteni", "createdAt": "2020-04-27T12:36:58Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNAllTypesIndex.java", "diffHunk": "@@ -39,19 +47,90 @@ public DMNAllTypesIndex(DMNTypeSafePackageName.Factory packageName, DMNModel...\n         }\n     }\n \n-    public DMNAllTypesIndex(List<DMNModel> allModels, DMNTypeSafePackageName.Factory packageName) {\n-        this(packageName, allModels.toArray(new DMNModel[0]));\n-    }\n-\n     public List<DMNType> allTypesToGenerate() {\n         return indexedTypes;\n     }\n \n+    @Deprecated\n     public Optional<DMNTypeSafePackageName> namespaceOfClass(String typeName) {\n-        return Optional.ofNullable(mapNamespaceIndex.get(typeName)).map(DMNModelTypesIndex.IndexValue::getPackageName);\n+        return mapNamespaceIndex.entrySet().stream()\n+                                .filter(kv -> kv.getKey().getName().equals(typeName))\n+                                .findFirst()\n+                                .map(Entry::getValue)\n+                                .map(DMNModelTypesIndex.IndexValue::getPackageName);\n     }\n \n+    @Deprecated\n     public boolean isIndexedClass(String typeName) {\n         return namespaceOfClass(typeName).isPresent();\n     }\n+\n+    public String asJava(DMNType fieldDMNType) {\n+        String converted = converDMNTypeAsJava(fieldDMNType);\n+        return converted;\n+    }\n+\n+    public String converDMNTypeAsJava(DMNType dmnType) {\n+        if (mapNamespaceIndex.containsKey(IndexKey.from(dmnType))) {\n+            String simpleName = DMNDeclaredType.asJavaSimpleName(dmnType);\n+            return mapNamespaceIndex.get(IndexKey.from(dmnType)).getPackageName().appendPackage(simpleName);\n+        }\n+        if (DMNTypeUtils.isFEELBuiltInType(dmnType)) {\n+            return convertBuiltin(dmnType);\n+        }\n+        if (dmnType.getBaseType() == null) {\n+            throw new IllegalStateException();\n+        }\n+        String baseConverted = converDMNTypeAsJava(dmnType.getBaseType());", "originalCommit": "95770c222601deda482984c04f9670467f59c762", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NTQ2OA==", "url": "https://github.com/kiegroup/drools/pull/2871#discussion_r415775468", "bodyText": "inline", "author": "lucamolteni", "createdAt": "2020-04-27T12:37:41Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNAllTypesIndex.java", "diffHunk": "@@ -39,19 +47,90 @@ public DMNAllTypesIndex(DMNTypeSafePackageName.Factory packageName, DMNModel...\n         }\n     }\n \n-    public DMNAllTypesIndex(List<DMNModel> allModels, DMNTypeSafePackageName.Factory packageName) {\n-        this(packageName, allModels.toArray(new DMNModel[0]));\n-    }\n-\n     public List<DMNType> allTypesToGenerate() {\n         return indexedTypes;\n     }\n \n+    @Deprecated\n     public Optional<DMNTypeSafePackageName> namespaceOfClass(String typeName) {\n-        return Optional.ofNullable(mapNamespaceIndex.get(typeName)).map(DMNModelTypesIndex.IndexValue::getPackageName);\n+        return mapNamespaceIndex.entrySet().stream()\n+                                .filter(kv -> kv.getKey().getName().equals(typeName))\n+                                .findFirst()\n+                                .map(Entry::getValue)\n+                                .map(DMNModelTypesIndex.IndexValue::getPackageName);\n     }\n \n+    @Deprecated\n     public boolean isIndexedClass(String typeName) {\n         return namespaceOfClass(typeName).isPresent();\n     }\n+\n+    public String asJava(DMNType fieldDMNType) {\n+        String converted = converDMNTypeAsJava(fieldDMNType);", "originalCommit": "95770c222601deda482984c04f9670467f59c762", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NjA4Mg==", "url": "https://github.com/kiegroup/drools/pull/2871#discussion_r415776082", "bodyText": ".containsKey + get is a double lookup, can this be done wth one statement?", "author": "lucamolteni", "createdAt": "2020-04-27T12:38:34Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNAllTypesIndex.java", "diffHunk": "@@ -39,19 +47,90 @@ public DMNAllTypesIndex(DMNTypeSafePackageName.Factory packageName, DMNModel...\n         }\n     }\n \n-    public DMNAllTypesIndex(List<DMNModel> allModels, DMNTypeSafePackageName.Factory packageName) {\n-        this(packageName, allModels.toArray(new DMNModel[0]));\n-    }\n-\n     public List<DMNType> allTypesToGenerate() {\n         return indexedTypes;\n     }\n \n+    @Deprecated\n     public Optional<DMNTypeSafePackageName> namespaceOfClass(String typeName) {\n-        return Optional.ofNullable(mapNamespaceIndex.get(typeName)).map(DMNModelTypesIndex.IndexValue::getPackageName);\n+        return mapNamespaceIndex.entrySet().stream()\n+                                .filter(kv -> kv.getKey().getName().equals(typeName))\n+                                .findFirst()\n+                                .map(Entry::getValue)\n+                                .map(DMNModelTypesIndex.IndexValue::getPackageName);\n     }\n \n+    @Deprecated\n     public boolean isIndexedClass(String typeName) {\n         return namespaceOfClass(typeName).isPresent();\n     }\n+\n+    public String asJava(DMNType fieldDMNType) {\n+        String converted = converDMNTypeAsJava(fieldDMNType);\n+        return converted;\n+    }\n+\n+    public String converDMNTypeAsJava(DMNType dmnType) {\n+        if (mapNamespaceIndex.containsKey(IndexKey.from(dmnType))) {", "originalCommit": "95770c222601deda482984c04f9670467f59c762", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NjgwMA==", "url": "https://github.com/kiegroup/drools/pull/2871#discussion_r415776800", "bodyText": "here we rather\n\ninline the whole statement\nsplit into significant different statements (index.asJava and fieldDMNType.getBaseType)", "author": "lucamolteni", "createdAt": "2020-04-27T12:39:39Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNDeclaredField.java", "diffHunk": "@@ -66,89 +60,16 @@ public String getOriginalMapKey() {\n \n     @Override\n     public String getObjectType() {\n-        if (fieldDMNType.isCollection()) {\n-            String typeName = getBaseType(fieldDMNType);\n-            String typeNameWithPackage = withPackage(typeName);\n-            String convertedType = convertType(typeNameWithPackage);\n-            return String.format(\"java.util.Collection<%s>\", convertedType);\n-        } else {\n-            return fieldTypeWithPackage();\n-        }\n-    }\n-\n-    private String fieldTypeWithPackage() {\n-        String fieldNameWithAnyCheck = getRecursiveBaseType(fieldDMNType)\n-                .map(this::getFieldNameWithAnyCheck)\n-                .orElse(Object.class.getCanonicalName());\n-        String withPackage = withPackage(fieldNameWithAnyCheck);\n-        return convertType(withPackage);\n-    }\n-\n-    private String getFieldNameWithAnyCheck(DMNType fieldDMNType) {\n-        String name = fieldDMNType.getName();\n-        if (\"Any\".equals(name)) {\n-            return OBJECT_TYPE;\n-        } else {\n-            return CodegenStringUtil.escapeIdentifier(name);\n-        }\n+        return index.asJava(fieldDMNType);\n     }\n \n     // This returns the generic type i.e. when Collection<String> then String\n     private String fieldTypeUnwrapped() {\n         if (fieldDMNType.isCollection()) {\n-            String typeName = getBaseType(fieldDMNType);\n-            return withPackage(typeName);\n+            String typeName = index.asJava(fieldDMNType.getBaseType());", "originalCommit": "95770c222601deda482984c04f9670467f59c762", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NzMxMg==", "url": "https://github.com/kiegroup/drools/pull/2871#discussion_r415777312", "bodyText": "rename to isNotObjectType", "author": "lucamolteni", "createdAt": "2020-04-27T12:40:29Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNDeclaredField.java", "diffHunk": "@@ -204,7 +127,11 @@ private boolean fieldIsBasic() {\n     }\n \n     private boolean fieldIsDifferentThanObject() {\n-        return !fieldTypeUnwrapped().equals(OBJECT_TYPE);\n+        if (DMNTypeUtils.isFEELAny(fieldDMNType)) {\n+            return false;\n+        }\n+        boolean isOtherObject = fieldDMNType.isCollection() ? fieldTypeUnwrapped().equals(OBJECT_TYPE) : getObjectType().equals(OBJECT_TYPE);", "originalCommit": "95770c222601deda482984c04f9670467f59c762", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzMDEzNA==", "url": "https://github.com/kiegroup/drools/pull/2871#discussion_r415830134", "bodyText": "? this statement represent if it IS an OBJECT_TYPE.\nline 134 returns the negated.", "author": "tarilabs", "createdAt": "2020-04-27T13:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NzMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3ODA1OA==", "url": "https://github.com/kiegroup/drools/pull/2871#discussion_r415778058", "bodyText": "extract dmnType.getNamespace()", "author": "lucamolteni", "createdAt": "2020-04-27T12:41:34Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/DMNTypeUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.typesafe;\n+\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.core.impl.BaseDMNTypeImpl;\n+import org.kie.dmn.feel.lang.Type;\n+import org.kie.dmn.feel.lang.types.BuiltInType;\n+\n+/**\n+ * Internal utility class\n+ */\n+public class DMNTypeUtils {\n+\n+    private DMNTypeUtils() {\n+        // only static method in this class.\n+    }\n+\n+    public static boolean isFEELBuiltInType(DMNType dmnType) {\n+        return dmnType.getNamespace().equals(org.kie.dmn.model.v1_1.KieDMNModelInstrumentedBase.URI_FEEL) ||", "originalCommit": "95770c222601deda482984c04f9670467f59c762", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgyNjk1OQ==", "url": "https://github.com/kiegroup/drools/pull/2871#discussion_r415826959", "bodyText": "of all the comments, this one I don't see the benefit, that is I don't see the benefit to extract a method which invokes a getter.", "author": "tarilabs", "createdAt": "2020-04-27T13:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3ODA1OA=="}], "type": "inlineReview"}, {"oid": "42c7ded6b015b8de2cbda75ea1fa607a36579585", "url": "https://github.com/kiegroup/drools/commit/42c7ded6b015b8de2cbda75ea1fa607a36579585", "message": "refactoring as requested by code review", "committedDate": "2020-04-27T13:52:36Z", "type": "commit"}]}