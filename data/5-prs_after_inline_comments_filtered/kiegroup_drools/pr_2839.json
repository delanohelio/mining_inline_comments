{"pr_number": 2839, "pr_title": "[DROOLS-4562] DMN validation semantic rules for DMNDI", "pr_createdAt": "2020-04-03T12:32:04Z", "pr_url": "https://github.com/kiegroup/drools/pull/2839", "timeline": [{"oid": "dd5420bbec6d598535459b2b1353421956f6ec90", "url": "https://github.com/kiegroup/drools/commit/dd5420bbec6d598535459b2b1353421956f6ec90", "message": "[DROOLS-4562] DMN validation semantic rules for DMNDI", "committedDate": "2020-04-03T12:29:35Z", "type": "commit"}, {"oid": "cf4eece5940aa2f2a77c34b2db4a5d392f388096", "url": "https://github.com/kiegroup/drools/commit/cf4eece5940aa2f2a77c34b2db4a5d392f388096", "message": "- cleanup", "committedDate": "2020-04-06T02:27:37Z", "type": "commit"}, {"oid": "6ecf2881dcade34db8b01d70ab4b2cd33d2a31db", "url": "https://github.com/kiegroup/drools/commit/6ecf2881dcade34db8b01d70ab4b2cd33d2a31db", "message": "- suppress WARNING for no DMNDI case and trisotech dynamicDecisionService case", "committedDate": "2020-04-07T05:32:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1OTAwMg==", "url": "https://github.com/kiegroup/drools/pull/2839#discussion_r404759002", "bodyText": "I believe the same modifications will be needed as well for the same class in the v1.3 package\norg.kie.dmn.backend.marshalling.v1_3.xstream. MarshallingUtils", "author": "tarilabs", "createdAt": "2020-04-07T12:11:49Z", "path": "kie-dmn/kie-dmn-backend/src/main/java/org/kie/dmn/backend/marshalling/v1_2/xstream/MarshallingUtils.java", "diffHunk": "@@ -58,6 +60,8 @@ public static String formatQName(QName qname, DMNModelInstrumentedBase parent) {\n             String nsForPrefix = parent.getNamespaceURI(qname.getPrefix());\n             if (parent.getURIFEEL().equals(nsForPrefix)) {\n                 return qname.getLocalPart(); // DMN v1.2 feel comes without a prefix.\n+            } else if (parent instanceof DMNShape || parent instanceof DMNEdge) {", "originalCommit": "6ecf2881dcade34db8b01d70ab4b2cd33d2a31db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNTc2NA==", "url": "https://github.com/kiegroup/drools/pull/2839#discussion_r405235764", "bodyText": "Thank you for pointing that out! Fixed and updated.", "author": "tkobayas", "createdAt": "2020-04-08T03:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1OTAwMg=="}], "type": "inlineReview"}, {"oid": "e3dc4ff270c6d3e79c0e11387c2468d4a8d65f8f", "url": "https://github.com/kiegroup/drools/commit/e3dc4ff270c6d3e79c0e11387c2468d4a8d65f8f", "message": "- fixed v1_3 MarshallingUtils", "committedDate": "2020-04-08T02:33:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5ODI4NA==", "url": "https://github.com/kiegroup/drools/pull/2839#discussion_r405998284", "bodyText": "For a next iteration, we could think how to go beyond the need of this function.\nI understand the need of it currently, and why it's invoked in an eval().\nI am wondering IF we had an utility method on all the model's object which returned their parent Definitions if that would have solved.\nWhat do you think?", "author": "tarilabs", "createdAt": "2020-04-09T07:07:41Z", "path": "kie-dmn/kie-dmn-validation/src/main/java/org/kie/dmn/validation/ValidatorUtil.java", "diffHunk": "@@ -45,6 +50,19 @@ public static String formatMessages(final List<DMNMessage> messages) {\n         return messages.stream().map(Object::toString).collect( Collectors.joining( System.lineSeparator() ) );\n     }\n \n+    public static boolean doesDefinitionsContainIdForDMNEdge(Definitions definitions, String id) {", "originalCommit": "e3dc4ff270c6d3e79c0e11387c2468d4a8d65f8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzMzE5NQ==", "url": "https://github.com/kiegroup/drools/pull/2839#discussion_r406033195", "bodyText": "Thank you for pointing this out. The problem was that ksession has only Definitions object from \"DMNImports\" entry-point. The rule wants to evaluate all InformationRequirement, KnowledgeRequirement etc. objects inside the Definitions. I wasn't able to write a nice rule with nested \"from\" so I ended up to write the function. So rather than\n\nan utility method on all the model's object which returned their parent Definitions\n\n, inversely,\n\nan utility method on Definitions to return all descendant model objects.\n\nwould help to write the rule easier, I think.", "author": "tkobayas", "createdAt": "2020-04-09T08:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5ODI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1OTI4NQ==", "url": "https://github.com/kiegroup/drools/pull/2839#discussion_r406559285", "bodyText": "@tarilabs  Shall I file a JIRA for the improvement? Or you meant that it can be improved during this PR work?", "author": "tkobayas", "createdAt": "2020-04-10T01:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5ODI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzczMw==", "url": "https://github.com/kiegroup/drools/pull/2839#discussion_r406633733", "bodyText": "let's file for improvement in another JIRA, imho.\nAnother viable alternative, is a static function which does as you say, would take as input an Definitions and will produce as output all children. This way, it can be used a source in a from node in the DRL rule. What do you think? :)", "author": "tarilabs", "createdAt": "2020-04-10T07:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5ODI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0MzUxMQ==", "url": "https://github.com/kiegroup/drools/pull/2839#discussion_r406643511", "bodyText": "Thanks, yes, it sounds good. I filed a JIRA for that https://issues.redhat.com/browse/DROOLS-5232", "author": "tkobayas", "createdAt": "2020-04-10T07:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5ODI4NA=="}], "type": "inlineReview"}]}