{"pr_number": 3245, "pr_title": "[DROOLS-5833] executable-model doesn't provide line number of DRL par\u2026", "pr_createdAt": "2020-11-18T04:01:56Z", "pr_url": "https://github.com/kiegroup/drools/pull/3245", "timeline": [{"oid": "0f25e2960489b3a389819e016991ff11a0d9ce07", "url": "https://github.com/kiegroup/drools/commit/0f25e2960489b3a389819e016991ff11a0d9ce07", "message": "[DROOLS-5833] executable-model doesn't provide line number of DRL parse error", "committedDate": "2020-11-18T03:52:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgwOTk5Mw==", "url": "https://github.com/kiegroup/drools/pull/3245#discussion_r525809993", "bodyText": "Actually, we can provide other Descr than RuleDescr to give a better line number. But at the moment, I follow the same approach as standard_drl (so use line number from RuleDescr) in order to have the same assertion value.", "author": "tkobayas", "createdAt": "2020-11-18T04:50:43Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "diffHunk": "@@ -455,7 +455,7 @@ private boolean isCollectFunction(AccumulateFunction accumulateFunction) {\n     }\n \n     private void addNonExistingFunctionError(RuleContext context, AccumulateDescr.AccumulateFunctionCallDescr function) {\n-        context.addCompilationError(new InvalidExpressionErrorResult(String.format(\"Unknown accumulate function: '%s' on rule '%s'.\", function.getFunction(), context.getRuleDescr().getName())));\n+        context.addCompilationError(new InvalidExpressionErrorResult(String.format(\"Unknown accumulate function: '%s' on rule '%s'.\", function.getFunction(), context.getRuleDescr().getName()), Optional.of(context.getRuleDescr())));", "originalCommit": "0f25e2960489b3a389819e016991ff11a0d9ce07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxMjIzOQ==", "url": "https://github.com/kiegroup/drools/pull/3245#discussion_r525812239", "bodyText": "In order to convey the Descr which is being processed during drlxParse(), I enhanced RuleContext here.", "author": "tkobayas", "createdAt": "2020-11-18T04:53:09Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/PatternDSL.java", "diffHunk": "@@ -133,7 +133,13 @@ private void generatePatternIdentifierIfMissing() {\n \n             ConstraintExpression constraintExpression = ConstraintExpression.createConstraintExpression(patternType, constraint, isPositional);\n \n-            DrlxParseResult drlxParseResult = constraintParser.drlxParse(patternType, patternIdentifier, constraintExpression, isPositional);\n+            DrlxParseResult drlxParseResult;\n+            try {\n+                context.setCurrentConstraintDescr(Optional.of(constraint));\n+                drlxParseResult = constraintParser.drlxParse(patternType, patternIdentifier, constraintExpression, isPositional);\n+            } finally {\n+                context.resetCurrentConstraintDescr();\n+            }", "originalCommit": "0f25e2960489b3a389819e016991ff11a0d9ce07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMDc2Mg==", "url": "https://github.com/kiegroup/drools/pull/3245#discussion_r525900762", "bodyText": "So the RuleContext.currentConstraintDescr is used as a global variable right?\nI'm not sure about this type, maybe we could use a Map with the constraintId as a string and the Descr as a value, WDYT?\nIn that way we don't have way to reset the global.\nP.S. I know there are already some global fields in the Context such as RuleDescr but I'd like to remove them eventually", "author": "lucamolteni", "createdAt": "2020-11-18T08:34:17Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/PatternDSL.java", "diffHunk": "@@ -133,7 +133,13 @@ private void generatePatternIdentifierIfMissing() {\n \n             ConstraintExpression constraintExpression = ConstraintExpression.createConstraintExpression(patternType, constraint, isPositional);\n \n-            DrlxParseResult drlxParseResult = constraintParser.drlxParse(patternType, patternIdentifier, constraintExpression, isPositional);\n+            DrlxParseResult drlxParseResult;\n+            try {\n+                context.setCurrentConstraintDescr(Optional.of(constraint));", "originalCommit": "0f25e2960489b3a389819e016991ff11a0d9ce07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5MDU1NQ==", "url": "https://github.com/kiegroup/drools/pull/3245#discussion_r525990555", "bodyText": "Thank you for the suggestion, @lucamolteni\nHmm, I can add a Map<String constraintId, BaseDescr descr> but at the place where an ErrorResult is created,\ne.g. https://github.com/kiegroup/drools/blob/master/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expressiontyper/ExpressionTyper.java#L972\nwe don't know the constraintId. Do you mean that we will convey constraintId as a method parameter inside drlxParse() process? Sorry if I'm missing your point. (The reason why I introduced currentConstraintDescr as \"current context\" was to avoid changing method signatures. But of course, I'm open for discussion)", "author": "tkobayas", "createdAt": "2020-11-18T10:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMDc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE1MTY4OA==", "url": "https://github.com/kiegroup/drools/pull/3245#discussion_r526151688", "bodyText": "Sometime we generate an id with the exprId (sorry for mixing up the terms, they're really similar)\n\n  \n    \n      drools/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/RuleContext.java\n    \n    \n         Line 368\n      in\n      277ef61\n    \n    \n    \n    \n\n        \n          \n           return idGenerator.getExprId(patternType, drlConstraint); \n        \n    \n  \n\n\nTake a look at it, anyway even in the current form it's fine by me", "author": "lucamolteni", "createdAt": "2020-11-18T14:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMDc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU2OTA1Nw==", "url": "https://github.com/kiegroup/drools/pull/3245#discussion_r526569057", "bodyText": "Thanks @lucamolteni  for pointing that.\nIIUC, we can put the Descr with exprId (patternType+drlConstraintString hash) in a Map. Then we can get the Descr later with the exprId if we know the patternType and the drlConstraintString.\nFor example, in CompilationFailuresTest.testUseNotExistingEnum(),\nwhen we put the Descr at https://github.com/kiegroup/drools/blob/master/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/PatternDSL.java#L134\nconstraintExpression.getExpression() is valueType == Field.INT || == Field.DOUBLE\nbut when we get the Descr at https://github.com/kiegroup/drools/blob/master/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expressiontyper/ExpressionTyper.java#L972 ,\nn.toString() is valueType == Field.INT || valueType == Field.DOUBLE\nSo we don't have access to the original drlConstraintString at the point.\nThis may be resolved by some tweaks (e.g. enhance ExpressionTyper to hold original drlConstraintString) but if you are fine with the currentConstraintDescr approach, I hope I can keep it for this PR. Thanks.", "author": "tkobayas", "createdAt": "2020-11-19T03:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMDc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY2MTM1NA==", "url": "https://github.com/kiegroup/drools/pull/3245#discussion_r526661354", "bodyText": "yes thanks for checking out @tkobayas let's keep the original variable", "author": "lucamolteni", "createdAt": "2020-11-19T08:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwMDc2Mg=="}], "type": "inlineReview"}]}