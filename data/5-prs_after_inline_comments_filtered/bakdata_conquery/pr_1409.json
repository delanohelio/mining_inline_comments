{"pr_number": 1409, "pr_title": "Feature/use user group mapping provided from oidc provider", "pr_createdAt": "2020-10-23T19:08:14Z", "pr_url": "https://github.com/bakdata/conquery/pull/1409", "timeline": [{"oid": "b9acaeb059ac8ff7e37835dd4ae5ce9ac146ef9e", "url": "https://github.com/bakdata/conquery/commit/b9acaeb059ac8ff7e37835dd4ae5ce9ac146ef9e", "message": "add group mappings to keycloak authenticated users", "committedDate": "2020-11-06T12:37:18Z", "type": "commit"}, {"oid": "4f9193737f6753d45d8f804e22526139cf99be0c", "url": "https://github.com/bakdata/conquery/commit/4f9193737f6753d45d8f804e22526139cf99be0c", "message": "improve validation helper", "committedDate": "2020-11-06T12:37:20Z", "type": "commit"}, {"oid": "183bdd64a2d785769b5bf4101c7818de08018aa1", "url": "https://github.com/bakdata/conquery/commit/183bdd64a2d785769b5bf4101c7818de08018aa1", "message": "remove unused code", "committedDate": "2020-11-06T12:37:20Z", "type": "commit"}, {"oid": "87728fc98f148becb2f14803c97f7292999e6009", "url": "https://github.com/bakdata/conquery/commit/87728fc98f148becb2f14803c97f7292999e6009", "message": "also support null values for leafs in violation", "committedDate": "2020-11-06T12:37:21Z", "type": "commit"}, {"oid": "dcdc2610701ab1ee1f675b294d1b7c4107599439", "url": "https://github.com/bakdata/conquery/commit/dcdc2610701ab1ee1f675b294d1b7c4107599439", "message": "adds comments", "committedDate": "2020-11-06T12:37:21Z", "type": "commit"}, {"oid": "d24dfc2e443b13e7ffdbe46e8bc8268cb0e73776", "url": "https://github.com/bakdata/conquery/commit/d24dfc2e443b13e7ffdbe46e8bc8268cb0e73776", "message": "adds validation to OIDCResourceOwnerPasswordCredentialRealmFactory", "committedDate": "2020-11-06T12:38:36Z", "type": "commit"}, {"oid": "12921364d492ca58f04ff09ecbdfb0d26a4d2d19", "url": "https://github.com/bakdata/conquery/commit/12921364d492ca58f04ff09ecbdfb0d26a4d2d19", "message": "adds test for realm", "committedDate": "2020-11-06T12:42:08Z", "type": "commit"}, {"oid": "19b75bed35dfee28423f48b83c3cc31e9f5a0349", "url": "https://github.com/bakdata/conquery/commit/19b75bed35dfee28423f48b83c3cc31e9f5a0349", "message": "cleans up test, does not use mock lib for storage", "committedDate": "2020-11-06T12:42:09Z", "type": "commit"}, {"oid": "411a4e707eab82fac6d4bb7d6b2d47ef743c5587", "url": "https://github.com/bakdata/conquery/commit/411a4e707eab82fac6d4bb7d6b2d47ef743c5587", "message": "automatic update to docs", "committedDate": "2020-11-06T12:42:10Z", "type": "commit"}, {"oid": "7443c399b05ca9d3c47ded3806e120fd23bc156c", "url": "https://github.com/bakdata/conquery/commit/7443c399b05ca9d3c47ded3806e120fd23bc156c", "message": "use Ids instead of concrete Object because their hash stays constant", "committedDate": "2020-11-06T12:42:10Z", "type": "commit"}, {"oid": "1bd03e5ccb9d88dd931048196a4174527e08ae29", "url": "https://github.com/bakdata/conquery/commit/1bd03e5ccb9d88dd931048196a4174527e08ae29", "message": "marks explicitly roles as a json property", "committedDate": "2020-11-06T12:42:11Z", "type": "commit"}, {"oid": "d32779682a3270724f4d4a754049af553af0351d", "url": "https://github.com/bakdata/conquery/commit/d32779682a3270724f4d4a754049af553af0351d", "message": "further fixes from change to id", "committedDate": "2020-11-06T12:42:11Z", "type": "commit"}, {"oid": "3a7ffa63315c92b6e33afba8ef00c1caa18f7ff9", "url": "https://github.com/bakdata/conquery/commit/3a7ffa63315c92b6e33afba8ef00c1caa18f7ff9", "message": "fix secret extraction", "committedDate": "2020-11-06T13:23:19Z", "type": "commit"}, {"oid": "3a7ffa63315c92b6e33afba8ef00c1caa18f7ff9", "url": "https://github.com/bakdata/conquery/commit/3a7ffa63315c92b6e33afba8ef00c1caa18f7ff9", "message": "fix secret extraction", "committedDate": "2020-11-06T13:23:19Z", "type": "forcePushed"}, {"oid": "ef79cd1ef662d80846c81f95eaf0b2594ed9a836", "url": "https://github.com/bakdata/conquery/commit/ef79cd1ef662d80846c81f95eaf0b2594ed9a836", "message": "automatic update to docs", "committedDate": "2020-11-06T13:25:52Z", "type": "commit"}, {"oid": "db28e093eb8af9fffad87d92fb695fd63c52d5a0", "url": "https://github.com/bakdata/conquery/commit/db28e093eb8af9fffad87d92fb695fd63c52d5a0", "message": "Merge branch 'develop' into feature/Auth-resolve-mapped-groups", "committedDate": "2020-11-13T10:17:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQwOTg0Nw==", "url": "https://github.com/bakdata/conquery/pull/1409#discussion_r529409847", "bodyText": "Kannst du hier nicht einfach ne MultiException draus machen?", "author": "awildturtok", "createdAt": "2020-11-24T10:20:57Z", "path": "backend/src/main/java/com/bakdata/conquery/models/exceptions/ValidatorHelper.java", "diffHunk": "@@ -1,46 +1,63 @@\n package com.bakdata.conquery.models.exceptions;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n import javax.validation.ConstraintViolation;\n-import javax.ws.rs.core.Request;\n+import javax.validation.ValidationException;\n \n-import io.dropwizard.jersey.validation.ConstraintMessage;\n+import io.dropwizard.logback.shaded.guava.base.Optional;\n import lombok.experimental.UtilityClass;\n-import org.glassfish.jersey.process.Inflector;\n-import org.glassfish.jersey.server.model.Invocable;\n import org.slf4j.Logger;\n \n @UtilityClass\n public final class ValidatorHelper {\n+\t\n+\tprivate static final String VERTICAL_DIVIDER = \"------------------------------------\\n\";\n \n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) throws JSONException {\n+\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) {\n \t\tfailOnError(log, violations, null);\n \t}\n \t\n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations, String context) throws JSONException {\n-\t\tList<String> violationMessages = violations\n-\t\t\t\t.stream()\n-\t\t\t\t.map( v->\n-\t\t\t\t\tConstraintMessage.getMessage(v,Invocable.create((Inflector<Request, Void>) data -> null)))\n-\t\t\t\t.collect(Collectors.toList());\n+\tpublic static <V extends ConstraintViolation<?>> void failOnError(Logger log, Set<V> violations, String context) {\n+\t\t\n+\t\t// Wrap grouper in Optional to also catch null values.\n+\t\tMap<Optional<Object>, List<V>> mapByLeaf = violations.stream().collect(Collectors.groupingBy(v -> Optional.of(v.getLeafBean())));\n \t\t\n-\t\tfailOnError(log, violationMessages, context);\n+\t\t// Combine all leaf fail reports into a single exception.\n+\t\tif(!mapByLeaf.isEmpty()) {", "originalCommit": "db28e093eb8af9fffad87d92fb695fd63c52d5a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwNzU3MA==", "url": "https://github.com/bakdata/conquery/pull/1409#discussion_r530507570", "bodyText": "Ich w\u00fcrde hier keine MultiException werfen, weil alle Exeptions vom selben Typ sind", "author": "thoniTUB", "createdAt": "2020-11-25T16:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQwOTg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxMTQ3MQ==", "url": "https://github.com/bakdata/conquery/pull/1409#discussion_r529411471", "bodyText": "Das ist ganz sch\u00f6n ausf\u00fchrlich, hast du daf\u00fcr eine Beispiel Message rumliegen?", "author": "awildturtok", "createdAt": "2020-11-24T10:22:20Z", "path": "backend/src/main/java/com/bakdata/conquery/models/exceptions/ValidatorHelper.java", "diffHunk": "@@ -1,46 +1,63 @@\n package com.bakdata.conquery.models.exceptions;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n import javax.validation.ConstraintViolation;\n-import javax.ws.rs.core.Request;\n+import javax.validation.ValidationException;\n \n-import io.dropwizard.jersey.validation.ConstraintMessage;\n+import io.dropwizard.logback.shaded.guava.base.Optional;\n import lombok.experimental.UtilityClass;\n-import org.glassfish.jersey.process.Inflector;\n-import org.glassfish.jersey.server.model.Invocable;\n import org.slf4j.Logger;\n \n @UtilityClass\n public final class ValidatorHelper {\n+\t\n+\tprivate static final String VERTICAL_DIVIDER = \"------------------------------------\\n\";\n \n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) throws JSONException {\n+\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations) {\n \t\tfailOnError(log, violations, null);\n \t}\n \t\n-\tpublic static void failOnError(Logger log, Set<? extends ConstraintViolation<?>> violations, String context) throws JSONException {\n-\t\tList<String> violationMessages = violations\n-\t\t\t\t.stream()\n-\t\t\t\t.map( v->\n-\t\t\t\t\tConstraintMessage.getMessage(v,Invocable.create((Inflector<Request, Void>) data -> null)))\n-\t\t\t\t.collect(Collectors.toList());\n+\tpublic static <V extends ConstraintViolation<?>> void failOnError(Logger log, Set<V> violations, String context) {\n+\t\t\n+\t\t// Wrap grouper in Optional to also catch null values.\n+\t\tMap<Optional<Object>, List<V>> mapByLeaf = violations.stream().collect(Collectors.groupingBy(v -> Optional.of(v.getLeafBean())));\n \t\t\n-\t\tfailOnError(log, violationMessages, context);\n+\t\t// Combine all leaf fail reports into a single exception.\n+\t\tif(!mapByLeaf.isEmpty()) {\n+\t\t\tthrow new ValidationException(mapByLeaf.entrySet().stream().map(ValidatorHelper::createViolationString).collect(Collectors.joining(VERTICAL_DIVIDER)));\t\t\t\n+\t\t}\n \t}\n \t\n-\tpublic static void failOnError(Logger log, List<String> violations, String context) throws JSONException {\n-\t\tif(violations.size()>0) {\n-\t\t\tfor(String v:violations) {\n-\t\t\t\tlog.error(v);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(context!=null) {\n-\t\t\t\tthrow new JSONException(\"Failed with \"+violations.size()+\" errors in \"+context+\".\");\n-\t\t\t}\n-\t\t\tthrow new JSONException(\"Failed with \"+violations.size()+\" errors.\");\n+\t/**\n+\t * Combines all violations for a given leaf object and gives the path to the root object if possible.\n+\t */\n+\tprivate static <V extends ConstraintViolation<?>> String createViolationString(Map.Entry<Optional<Object>, List<V>> objectToViolation) {", "originalCommit": "db28e093eb8af9fffad87d92fb695fd63c52d5a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5NzYyNg==", "url": "https://github.com/bakdata/conquery/pull/1409#discussion_r530197626", "bodyText": "Das sieht dann z.B. so aus:\njavax.validation.ValidationException: \nValidation failed on: class com.bakdata.conquery.models.config.ConqueryConfig\n\t\t- cluster.port: muss zwischen 1 und 65535 sein\n\t\t- csv.encoding: darf nicht null sein\n\t\t- preprocessor.nThreads: muss gr\u00f6\u00dfer-gleich 1 sein\n\t\t- preprocessor.faultyLineThreshold: muss kleiner-gleich 1 sein\n\tat com.bakdata.conquery.models.exceptions.ValidatorHelper.failOnError(ValidatorHelper.java:49)\n\tat com.bakdata.conquery.models.exceptions.ValidatorHelper.failOnError(ValidatorHelper.java:24)\n\tat com.bakdata.conquery.io.ValidationTest.test(ValidationTest.java:22)\n\nHabs nochmal \u00fcberarbeitet und eine ausf\u00fchrlichere Nachricht geschrieben, wenn trace aktiviert ist.", "author": "thoniTUB", "createdAt": "2020-11-25T08:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxMTQ3MQ=="}], "type": "inlineReview"}, {"oid": "d79cd608658fe779d4da2304c4a49e80750c848e", "url": "https://github.com/bakdata/conquery/commit/d79cd608658fe779d4da2304c4a49e80750c848e", "message": "slim validator fail output", "committedDate": "2020-11-26T08:21:31Z", "type": "commit"}, {"oid": "73db84aaa67e6e496e933fb8622806d6622267e3", "url": "https://github.com/bakdata/conquery/commit/73db84aaa67e6e496e933fb8622806d6622267e3", "message": "Merge branch 'develop' into feature/Auth-resolve-mapped-groups", "committedDate": "2020-11-26T11:45:33Z", "type": "commit"}]}