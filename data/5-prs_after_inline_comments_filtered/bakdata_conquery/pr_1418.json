{"pr_number": 1418, "pr_title": "feature/preprocess fast-fail option", "pr_createdAt": "2020-11-03T15:00:45Z", "pr_url": "https://github.com/bakdata/conquery/pull/1418", "timeline": [{"oid": "849de22b613d73f9e0b283f12151429673d1fcd9", "url": "https://github.com/bakdata/conquery/commit/849de22b613d73f9e0b283f12151429673d1fcd9", "message": "adds fast-fail flag to preprocessor command and silently skips starting preprocessing if source files do not exist", "committedDate": "2020-11-03T14:59:36Z", "type": "commit"}, {"oid": "9f014a92b096d175741858609cbcebef7c081926", "url": "https://github.com/bakdata/conquery/commit/9f014a92b096d175741858609cbcebef7c081926", "message": "fixes incorret status of skipped imports", "committedDate": "2020-11-03T16:09:35Z", "type": "commit"}, {"oid": "0e36d3fd308573f6480c713afdb5f1f3f331d3a9", "url": "https://github.com/bakdata/conquery/commit/0e36d3fd308573f6480c713afdb5f1f3f331d3a9", "message": "remove testcommand wrapper", "committedDate": "2020-11-03T17:01:36Z", "type": "commit"}, {"oid": "40794f68f031d2beed6fb15e8b7d33ce132467c8", "url": "https://github.com/bakdata/conquery/commit/40794f68f031d2beed6fb15e8b7d33ce132467c8", "message": "workaround null values", "committedDate": "2020-11-04T07:57:39Z", "type": "commit"}, {"oid": "40794f68f031d2beed6fb15e8b7d33ce132467c8", "url": "https://github.com/bakdata/conquery/commit/40794f68f031d2beed6fb15e8b7d33ce132467c8", "message": "workaround null values", "committedDate": "2020-11-04T07:57:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyNzEwMg==", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520427102", "bodyText": ":(", "author": "awildturtok", "createdAt": "2020-11-10T09:48:50Z", "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "diffHunk": "@@ -155,7 +178,7 @@ protected void run(Environment environment, Namespace namespace, ConqueryConfig\n \t\tif (!failed.isEmpty()) {\n \t\t\tlog.error(\"Failed {} Preprocessing Jobs:\", failed.size());\n \t\t\tfailed.forEach(desc -> log.error(\"\\tFailed Preprocessing for {}\", desc));\n-\t\t\tSystem.exit(Math.min(failed.size(), 100)); // Inspired by: https://www.gnu.org/software/parallel/man.html#EXIT-STATUS\n+\t\t\tSystem.exit(1); ", "originalCommit": "40794f68f031d2beed6fb15e8b7d33ce132467c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MTM0MQ==", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520471341", "bodyText": "@awildturtok Das hat einen praktischen Grund ;) die CI ist sonst nicht gefailed wenn es ein problem gab", "author": "thoniTUB", "createdAt": "2020-11-10T10:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyNzEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTI5Ng==", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520449296", "bodyText": "Hier w\u00fcrde ein String.format doch auch reichen? du hast hier ja noch kein Performance-Bottleneck", "author": "awildturtok", "createdAt": "2020-11-10T10:21:23Z", "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "diffHunk": "@@ -171,24 +194,41 @@ protected void run(Environment environment, Namespace namespace, ConqueryConfig\n \n \t\t\tfor (File descriptionFile : files) {\n \n-\t\t\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n-\t\t\t\ttry {\n-\t\t\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n-\t\t\t\t\tdescr.setInputFile(file);\n-\n-\t\t\t\t\t// Override name to tag if present\n-\t\t\t\t\tif (!Strings.isNullOrEmpty(tag)) {\n-\t\t\t\t\t\tdescr.setName(tag);\n-\t\t\t\t\t}\n+\t\t\t\ttryExtractDescriptor(validator, tag, description, descriptionFile).ifPresent(out::add);\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n+\t}\n \n-\t\t\t\t\tout.add(descr);\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\tlog.error(\"Failed to process \" + LogUtil.printPath(descriptionFile), e);\n-\t\t\t\t\tfailed.add(file.getDescriptionFile().toString());\n+\tprivate Optional<TableImportDescriptor> tryExtractDescriptor(Validator validator, String tag, PreprocessingDirectories description, File descriptionFile) throws IOException {\n+\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n+\t\ttry {\n+\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n+\t\t\t\n+\t\t\tfor(TableInputDescriptor inputs : descr.getInputs()) {\n+\t\t\t\tif(!inputs.getSourceFile().exists()) {\n+\t\t\t\t\tlog.trace(\"Skipping import {} because source file {} does not exists.\", descriptionFile, inputs.getSourceFile());\n+\t\t\t\t\tskipped.add(new StringBuilder().append(descriptionFile).append(\" with tag \").append(tag).toString());", "originalCommit": "40794f68f031d2beed6fb15e8b7d33ce132467c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2Njc4Mg==", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520566782", "bodyText": "Ja das stimmt, das w\u00e4re hier nicht so tragisch", "author": "thoniTUB", "createdAt": "2020-11-10T13:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTI5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0OTY5NQ==", "url": "https://github.com/bakdata/conquery/pull/1418#discussion_r520449695", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\t// Test if all Inputs exist", "author": "awildturtok", "createdAt": "2020-11-10T10:22:00Z", "path": "backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java", "diffHunk": "@@ -171,24 +194,41 @@ protected void run(Environment environment, Namespace namespace, ConqueryConfig\n \n \t\t\tfor (File descriptionFile : files) {\n \n-\t\t\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n-\t\t\t\ttry {\n-\t\t\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n-\t\t\t\t\tdescr.setInputFile(file);\n-\n-\t\t\t\t\t// Override name to tag if present\n-\t\t\t\t\tif (!Strings.isNullOrEmpty(tag)) {\n-\t\t\t\t\t\tdescr.setName(tag);\n-\t\t\t\t\t}\n+\t\t\t\ttryExtractDescriptor(validator, tag, description, descriptionFile).ifPresent(out::add);\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n+\t}\n \n-\t\t\t\t\tout.add(descr);\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\tlog.error(\"Failed to process \" + LogUtil.printPath(descriptionFile), e);\n-\t\t\t\t\tfailed.add(file.getDescriptionFile().toString());\n+\tprivate Optional<TableImportDescriptor> tryExtractDescriptor(Validator validator, String tag, PreprocessingDirectories description, File descriptionFile) throws IOException {\n+\t\tInputFile file = InputFile.fromDescriptionFile(descriptionFile, description, tag);\n+\t\ttry {\n+\t\t\tTableImportDescriptor descr = file.readDescriptor(validator, tag);\n+\t\t\t", "originalCommit": "40794f68f031d2beed6fb15e8b7d33ce132467c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd3d3b29e4d392a52b9e7549ce30b74a0a185920", "url": "https://github.com/bakdata/conquery/commit/fd3d3b29e4d392a52b9e7549ce30b74a0a185920", "message": "Update backend/src/main/java/com/bakdata/conquery/commands/PreprocessorCommand.java\n\nCo-authored-by: awildturtok <1553491+awildturtok@users.noreply.github.com>", "committedDate": "2020-11-10T10:56:08Z", "type": "commit"}]}