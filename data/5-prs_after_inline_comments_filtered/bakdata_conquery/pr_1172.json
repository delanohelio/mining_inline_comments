{"pr_number": 1172, "pr_title": "Feature/separate date column for concept connector", "pr_createdAt": "2020-04-29T11:03:12Z", "pr_url": "https://github.com/bakdata/conquery/pull/1172", "timeline": [{"oid": "33b697c4e42a577901a724b2898458d58628f108", "url": "https://github.com/bakdata/conquery/commit/33b697c4e42a577901a724b2898458d58628f108", "message": "adds eventdate select/aggregator", "committedDate": "2020-04-29T11:03:37Z", "type": "commit"}, {"oid": "c23e3ebb31fd3ff8f949048a7ad429bfc63286bd", "url": "https://github.com/bakdata/conquery/commit/c23e3ebb31fd3ff8f949048a7ad429bfc63286bd", "message": "adds tests", "committedDate": "2020-04-29T11:03:37Z", "type": "commit"}, {"oid": "df4256e2b7c5ddb3393dd71d2035fa4e4295692c", "url": "https://github.com/bakdata/conquery/commit/df4256e2b7c5ddb3393dd71d2035fa4e4295692c", "message": "adds event date to concept and connectors by default", "committedDate": "2020-04-29T11:03:38Z", "type": "commit"}, {"oid": "67580843f545bca36b75ce715e0fc81c226d2982", "url": "https://github.com/bakdata/conquery/commit/67580843f545bca36b75ce715e0fc81c226d2982", "message": "sets select holders for select", "committedDate": "2020-04-29T11:03:38Z", "type": "commit"}, {"oid": "8f259d83ec7d58379269205761f9fdde7ad32f82", "url": "https://github.com/bakdata/conquery/commit/8f259d83ec7d58379269205761f9fdde7ad32f82", "message": "sets label and name to satisfy the validator", "committedDate": "2020-04-29T11:03:38Z", "type": "commit"}, {"oid": "c37dd3014854689271059ba24c466f301f1596e3", "url": "https://github.com/bakdata/conquery/commit/c37dd3014854689271059ba24c466f301f1596e3", "message": "also retrains daterestriction", "committedDate": "2020-04-29T11:03:38Z", "type": "commit"}, {"oid": "3fcf5bff913544fcf2953471adf859b54f9c63f6", "url": "https://github.com/bakdata/conquery/commit/3fcf5bff913544fcf2953471adf859b54f9c63f6", "message": "adds more test and validation", "committedDate": "2020-04-29T11:03:39Z", "type": "commit"}, {"oid": "3c7732b6870bf096f88e4efe7ac5b065579eed46", "url": "https://github.com/bakdata/conquery/commit/3c7732b6870bf096f88e4efe7ac5b065579eed46", "message": "adds comments", "committedDate": "2020-04-29T11:03:41Z", "type": "commit"}, {"oid": "3c7732b6870bf096f88e4efe7ac5b065579eed46", "url": "https://github.com/bakdata/conquery/commit/3c7732b6870bf096f88e4efe7ac5b065579eed46", "message": "adds comments", "committedDate": "2020-04-29T11:03:41Z", "type": "forcePushed"}, {"oid": "8d588dc2b4f1ae9bfb3177891286bdee509d62c5", "url": "https://github.com/bakdata/conquery/commit/8d588dc2b4f1ae9bfb3177891286bdee509d62c5", "message": "Merge 3c7732b6870bf096f88e4efe7ac5b065579eed46 into d80368c1e0fa3665f5b044a84fd7406cf815c0d5", "committedDate": "2020-04-29T11:04:03Z", "type": "commit"}, {"oid": "f5b27a669e4b74f957669c7de85b0eb549c39938", "url": "https://github.com/bakdata/conquery/commit/f5b27a669e4b74f957669c7de85b0eb549c39938", "message": "automatic update to docs", "committedDate": "2020-04-29T11:05:55Z", "type": "commit"}, {"oid": "f611b61720bb7a412065bb4c192e28083bf7033f", "url": "https://github.com/bakdata/conquery/commit/f611b61720bb7a412065bb4c192e28083bf7033f", "message": "Merge branch 'develop' into feature/separate-date-column-for-concept-connector", "committedDate": "2020-05-04T07:19:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTAyMQ==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r417855021", "bodyText": "Ich wei\u00df nicht ob ich das mag, ich hab schon verstanden warum du das machst aber es w\u00e4re mir lieber wenn das \u00fcber die json l\u00e4uft weil es dann wirklich nur eine wahrheit gibt", "author": "awildturtok", "createdAt": "2020-04-30T08:49:42Z", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/Concept.java", "diffHunk": "@@ -46,6 +47,7 @@ public CONNECTOR getConnectorByName(String connector) {\n \t}\n \n \tpublic abstract List<? extends Select> getSelects();\n+\tpublic abstract void addSelect(Select select);", "originalCommit": "f5b27a669e4b74f957669c7de85b0eb549c39938", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxOTg1Nw==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r420819857", "bodyText": "Okay, dann war das zu test Zwecken ;)", "author": "thoniTUB", "createdAt": "2020-05-06T14:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTkwMw==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r417855903", "bodyText": "der ist jetzt nur auf dem Master Node registriert, wie \u00fcbertr\u00e4gstt du das an die slaves?", "author": "awildturtok", "createdAt": "2020-04-30T08:51:13Z", "path": "backend/src/main/java/com/bakdata/conquery/models/concepts/tree/TreeConcept.java", "diffHunk": "@@ -219,4 +221,14 @@ public int countElements() {\n \t\tint mostSpecific = ids[ids.length-1];\n \t\treturn localIdMap.get(mostSpecific);\n \t}\n+\n+\t@Override\n+\tpublic void addSelect(Select select) {", "originalCommit": "f5b27a669e4b74f957669c7de85b0eb549c39938", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMDM2MA==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r420820360", "bodyText": "Ich nehme die Funktionalit\u00e4t wieder raus", "author": "thoniTUB", "createdAt": "2020-05-06T14:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NzEwMw==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r417857103", "bodyText": "ich glaube du musst hier trotzdem schauen, ob du ne validitydatecol hast", "author": "awildturtok", "createdAt": "2020-04-30T08:53:09Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific part of a query.\n+ * Eventually the set of collected dates is tailored to the provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String>{\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\t\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\t\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = ctx.getValidityDateColumn();", "originalCommit": "f5b27a669e4b74f957669c7de85b0eb549c39938", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDI1MQ==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419964251", "bodyText": "das geht nicht, die dateRestriction ist variabel.", "author": "awildturtok", "createdAt": "2020-05-05T09:04:29Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific part of a query.\n+ * Eventually the set of collected dates is tailored to the provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String>{\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\t\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\t\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = ctx.getValidityDateColumn();\n+\t\tdateRestriction = ctx.getDateRestriction();\n+\t\tAggregator.super.nextTable(ctx, currentTable);\n+\t}\n+\n+\t@Override\n+\tpublic Aggregator<String> doClone(CloneContext ctx) {\n+\t\treturn new EventDateUnionAggregator(requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic String getAggregationResult() {\n+\t\tset.retainAll(dateRestriction);", "originalCommit": "f611b61720bb7a412065bb4c192e28083bf7033f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDM2OA==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419964368", "bodyText": "musst du in aggregateEvent machen", "author": "awildturtok", "createdAt": "2020-05-05T09:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg2NDU2Mg==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r420864562", "bodyText": "Okay, habe es angepasst", "author": "thoniTUB", "createdAt": "2020-05-06T15:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDc4OA==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419964788", "bodyText": "hast du eigentlich \u00fcberpr\u00fcft ob das auch so bei den slaves ankommt, oder ob die das dann sogar doppelt haben?", "author": "awildturtok", "createdAt": "2020-05-05T09:05:31Z", "path": "backend/src/main/java/com/bakdata/conquery/resources/admin/rest/AdminProcessor.java", "diffHunk": "@@ -128,7 +130,18 @@ else if (!table.getDataset().equals(dataset)) {\n \t}\n \n \tpublic void addConcept(Dataset dataset, Concept<?> c) {\n+\t\t// Add the standard EventDateUnionSelect to every added Concept", "originalCommit": "f611b61720bb7a412065bb4c192e28083bf7033f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NTA1Ng==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r419965056", "bodyText": "Bin ehrlich gesagt kein Fan von, mir w\u00e4re es lieber wir w\u00fcrden die Konzepte anpassen. Aber Ist halt auch arbeit :/", "author": "awildturtok", "createdAt": "2020-05-05T09:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxODEwOA==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r420818108", "bodyText": "Ich w\u00fcsste nicht wie es nicht bei den Slaves ankommen k\u00f6nnte, da die selects hinzugef\u00fcgt werden bevor sie in Master und Slaves registriert werden.", "author": "thoniTUB", "createdAt": "2020-05-06T14:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4NDE3MQ==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r421284171", "bodyText": "Aber gut, habe ich entfernt", "author": "thoniTUB", "createdAt": "2020-05-07T07:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NDc4OA=="}], "type": "inlineReview"}, {"oid": "5cd6aa3d1627c44f0a8f95ca8fcfac807f09db36", "url": "https://github.com/bakdata/conquery/commit/5cd6aa3d1627c44f0a8f95ca8fcfac807f09db36", "message": "retrains date restriction on aggregateEvent", "committedDate": "2020-05-06T15:03:31Z", "type": "commit"}, {"oid": "023bd8c132eeb726be060581091df39dec03f19c", "url": "https://github.com/bakdata/conquery/commit/023bd8c132eeb726be060581091df39dec03f19c", "message": "adds type check", "committedDate": "2020-05-06T15:16:04Z", "type": "commit"}, {"oid": "5c3dfbef8ad32e540c6635ff9171a93d6ad3c559", "url": "https://github.com/bakdata/conquery/commit/5c3dfbef8ad32e540c6635ff9171a93d6ad3c559", "message": "removes default adding of event  date union select", "committedDate": "2020-05-06T15:16:55Z", "type": "commit"}, {"oid": "b1047b208769d49c266f3b2e15be90e5f4db8d6d", "url": "https://github.com/bakdata/conquery/commit/b1047b208769d49c266f3b2e15be90e5f4db8d6d", "message": "fixes tests", "committedDate": "2020-05-07T06:44:22Z", "type": "commit"}, {"oid": "a452b66b5e3e4bb83f430061b6a110a518417c0a", "url": "https://github.com/bakdata/conquery/commit/a452b66b5e3e4bb83f430061b6a110a518417c0a", "message": "Merge b1047b208769d49c266f3b2e15be90e5f4db8d6d into 31d898012f5a9421a54f86b574ad7b022bfca148", "committedDate": "2020-05-07T06:44:33Z", "type": "commit"}, {"oid": "dea03a63e49e8581280e9ff05f0cc0ba0242e040", "url": "https://github.com/bakdata/conquery/commit/dea03a63e49e8581280e9ff05f0cc0ba0242e040", "message": "automatic update to docs", "committedDate": "2020-05-07T06:46:33Z", "type": "commit"}, {"oid": "3933e6a1df361b7da2496aba49be37eb55527a05", "url": "https://github.com/bakdata/conquery/commit/3933e6a1df361b7da2496aba49be37eb55527a05", "message": "renames most tables", "committedDate": "2020-05-07T06:54:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjY4OQ==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r421316689", "bodyText": "da w\u00fcrde ich mich ehrlich gesagt eher drauf verlassen als das jedes mal zu pr\u00fcfen.", "author": "awildturtok", "createdAt": "2020-05-07T08:06:28Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific\n+ * part of a query. Eventually the set of collected dates is tailored to the\n+ * provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String> {\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = Objects.requireNonNull(ctx.getValidityDateColumn());\n+\t\tif (!validityDateColumn.getType().isDateCompatible()) {", "originalCommit": "3933e6a1df361b7da2496aba49be37eb55527a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2MTMxOQ==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r422861319", "bodyText": "Ich hatte das in einem anderen Aggregator gesehen.", "author": "thoniTUB", "createdAt": "2020-05-11T08:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzAyNg==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r421317026", "bodyText": "Wir geben in der Regel das Objekt selber raus und nicht den toString. Damit kann man aggregatoren wieder verwenden", "author": "awildturtok", "createdAt": "2020-05-07T08:07:07Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/aggregators/specific/EventDateUnionAggregator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan.aggregators.specific;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import com.bakdata.conquery.models.common.CDateSet;\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.externalservice.ResultType;\n+import com.bakdata.conquery.models.identifiable.ids.specific.TableId;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.aggregators.Aggregator;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import lombok.RequiredArgsConstructor;\n+\n+/**\n+ * Collects the event dates of all events that are applicable to the specific\n+ * part of a query. Eventually the set of collected dates is tailored to the\n+ * provided date restriction.\n+ *\n+ */\n+@RequiredArgsConstructor\n+public class EventDateUnionAggregator implements Aggregator<String> {\n+\n+\tprivate final Set<TableId> requiredTables;\n+\tprivate Column validityDateColumn;\n+\tprivate CDateSet set = CDateSet.create();\n+\tprivate CDateSet dateRestriction;\n+\n+\t@Override\n+\tpublic void collectRequiredTables(Set<TableId> requiredTables) {\n+\t\trequiredTables.addAll(this.requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic void nextTable(QueryExecutionContext ctx, Table currentTable) {\n+\t\tvalidityDateColumn = Objects.requireNonNull(ctx.getValidityDateColumn());\n+\t\tif (!validityDateColumn.getType().isDateCompatible()) {\n+\t\t\tthrow new IllegalStateException(\"The validityDateColumn \" + validityDateColumn + \" is not a DATE TYPE\");\n+\t\t}\n+\t\t\n+\t\tdateRestriction = ctx.getDateRestriction();\n+\t\tAggregator.super.nextTable(ctx, currentTable);\n+\t}\n+\n+\t@Override\n+\tpublic Aggregator<String> doClone(CloneContext ctx) {\n+\t\treturn new EventDateUnionAggregator(requiredTables);\n+\t}\n+\n+\t@Override\n+\tpublic String getAggregationResult() {\n+\t\treturn set.toString();", "originalCommit": "3933e6a1df361b7da2496aba49be37eb55527a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2MjE0MQ==", "url": "https://github.com/bakdata/conquery/pull/1172#discussion_r422862141", "bodyText": "Der DateUnionAggregator macht das so, ich dachte, das hat einen Grund.", "author": "thoniTUB", "createdAt": "2020-05-11T08:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzAyNg=="}], "type": "inlineReview"}, {"oid": "959e9c1c565af6b9adcdc1e36017f25d9d6f7428", "url": "https://github.com/bakdata/conquery/commit/959e9c1c565af6b9adcdc1e36017f25d9d6f7428", "message": "Merge branch 'develop' into feature/separate-date-column-for-concept-connector", "committedDate": "2020-05-12T16:05:59Z", "type": "commit"}]}