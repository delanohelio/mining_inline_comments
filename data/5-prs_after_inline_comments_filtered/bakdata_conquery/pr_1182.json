{"pr_number": 1182, "pr_title": "Feature/auth system improvements", "pr_createdAt": "2020-05-11T07:23:03Z", "pr_url": "https://github.com/bakdata/conquery/pull/1182", "timeline": [{"oid": "13a55ade41766b1f42621dbd5a2871ccb2e3586d", "url": "https://github.com/bakdata/conquery/commit/13a55ade41766b1f42621dbd5a2871ccb2e3586d", "message": "adds a central authentication realm for self issued tokens that can be requested from everywhere in the application", "committedDate": "2020-05-04T15:26:09Z", "type": "commit"}, {"oid": "41c4f60af40b4b242ccc53ea86a11fb050ae33e4", "url": "https://github.com/bakdata/conquery/commit/41c4f60af40b4b242ccc53ea86a11fb050ae33e4", "message": "removes token authentication from local authentication realm", "committedDate": "2020-05-04T15:26:11Z", "type": "commit"}, {"oid": "8294931fe2947c2794cbc09ff3b6c6afcd5e99a1", "url": "https://github.com/bakdata/conquery/commit/8294931fe2947c2794cbc09ff3b6c6afcd5e99a1", "message": "Merge branch 'feature/unified-result-output-generation' into feature/auth-system-improvements", "committedDate": "2020-05-06T06:27:22Z", "type": "commit"}, {"oid": "a5da1703f8ee36543c2fec2c660562cc8832adb4", "url": "https://github.com/bakdata/conquery/commit/a5da1703f8ee36543c2fec2c660562cc8832adb4", "message": "adds missing credentials matcher and registered token type", "committedDate": "2020-05-06T07:32:30Z", "type": "commit"}, {"oid": "90a769cb26d480cd0e128069d0d0afdb4db88d66", "url": "https://github.com/bakdata/conquery/commit/90a769cb26d480cd0e128069d0d0afdb4db88d66", "message": "Merge branch 'feature/unified-result-output-generation' into feature/auth-system-improvements", "committedDate": "2020-05-06T11:02:37Z", "type": "commit"}, {"oid": "dcec62f40e7863964a69102feb5f44dd396c732b", "url": "https://github.com/bakdata/conquery/commit/dcec62f40e7863964a69102feb5f44dd396c732b", "message": "Merge branch 'feature/unified-result-output-generation' into feature/auth-system-improvements", "committedDate": "2020-05-06T14:09:30Z", "type": "commit"}, {"oid": "da82e6dc7b8aa09b64524fa2da040ea778a9ef1e", "url": "https://github.com/bakdata/conquery/commit/da82e6dc7b8aa09b64524fa2da040ea778a9ef1e", "message": "Merge branch 'feature/unified-result-output-generation' into feature/auth-system-improvements\n\n# Conflicts:\n#\tbackend/src/main/java/com/bakdata/conquery/io/cps/CPSTypeIdResolver.java", "committedDate": "2020-05-11T07:19:45Z", "type": "commit"}, {"oid": "3d5c907966e729c9d54da63ebf60b74f2936a57f", "url": "https://github.com/bakdata/conquery/commit/3d5c907966e729c9d54da63ebf60b74f2936a57f", "message": "Fixes local auth realm test", "committedDate": "2020-05-11T07:35:18Z", "type": "commit"}, {"oid": "ee99bb6e637006986239a7ec87c0195f3d1825a4", "url": "https://github.com/bakdata/conquery/commit/ee99bb6e637006986239a7ec87c0195f3d1825a4", "message": "removes unused class", "committedDate": "2020-05-11T08:00:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg0NzI0NQ==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r422847245", "bodyText": "das ist eine coole funktion, sowas habe ich schon l\u00e4nger mir gew\u00fcnscht", "author": "awildturtok", "createdAt": "2020-05-11T07:47:28Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/forms/Form.java", "diffHunk": "@@ -25,6 +27,11 @@\n  * API representation of a form query.\n  */\n public interface Form extends QueryDescription {\n+\t\n+\t@JsonIgnore\n+\tdefault String getFormType() {", "originalCommit": "3d5c907966e729c9d54da63ebf60b74f2936a57f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1MDEzNw==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r422850137", "bodyText": "Ich wei\u00df leider nicht genug von Secure Random aber sollte man die nicht wiederverwenden? Ich k\u00f6nnte mir vorstellen, dass es schnell den entropie pool verschwendet", "author": "awildturtok", "createdAt": "2020-05-11T07:52:42Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/basic/TokenHandler.java", "diffHunk": "@@ -116,6 +118,16 @@ private static String extractTokenFromQuery(ContainerRequestContext request) {\n \t\t}\n \t\treturn null;\n \t}\n+\t\n+\t/**\n+\t * Generate a random secret.\n+\t */\n+\tpublic static String generateTokenSecret() {\n+\t\tRandom rand = new SecureRandom();", "originalCommit": "3d5c907966e729c9d54da63ebf60b74f2936a57f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MDgxMQ==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r422890811", "bodyText": "Wof\u00fcr ist der Setter wenn du oben keine setzt?", "author": "awildturtok", "createdAt": "2020-05-11T09:00:48Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/conquerytoken/ConqueryTokenRealm.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.bakdata.conquery.models.auth.conquerytoken;\n+\n+import javax.validation.constraints.Min;\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.auth0.jwt.JWT;\n+import com.auth0.jwt.JWTVerifier;\n+import com.auth0.jwt.algorithms.Algorithm;\n+import com.auth0.jwt.exceptions.InvalidClaimException;\n+import com.auth0.jwt.exceptions.JWTVerificationException;\n+import com.auth0.jwt.exceptions.SignatureVerificationException;\n+import com.auth0.jwt.exceptions.TokenExpiredException;\n+import com.auth0.jwt.interfaces.DecodedJWT;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AccessLevel;\n+import lombok.Data;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.ExpiredCredentialsException;\n+import org.apache.shiro.authc.IncorrectCredentialsException;\n+\n+@Slf4j\n+public class ConqueryTokenRealm extends ConqueryAuthenticationRealm {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\n+\tprivate MasterMetaStorage storage;\n+\t\n+\t@Setter(value = AccessLevel.PRIVATE)", "originalCommit": "ee99bb6e637006986239a7ec87c0195f3d1825a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MTI4MA==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r422891280", "bodyText": "der construtor k\u00f6nnte doch schon mit defaults ind er klasse besetzt werden?", "author": "awildturtok", "createdAt": "2020-05-11T09:01:34Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/conquerytoken/ConqueryTokenRealm.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.bakdata.conquery.models.auth.conquerytoken;\n+\n+import javax.validation.constraints.Min;\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.auth0.jwt.JWT;\n+import com.auth0.jwt.JWTVerifier;\n+import com.auth0.jwt.algorithms.Algorithm;\n+import com.auth0.jwt.exceptions.InvalidClaimException;\n+import com.auth0.jwt.exceptions.JWTVerificationException;\n+import com.auth0.jwt.exceptions.SignatureVerificationException;\n+import com.auth0.jwt.exceptions.TokenExpiredException;\n+import com.auth0.jwt.interfaces.DecodedJWT;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AccessLevel;\n+import lombok.Data;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.ExpiredCredentialsException;\n+import org.apache.shiro.authc.IncorrectCredentialsException;\n+\n+@Slf4j\n+public class ConqueryTokenRealm extends ConqueryAuthenticationRealm {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\n+\tprivate MasterMetaStorage storage;\n+\t\n+\t@Setter(value = AccessLevel.PRIVATE)\n+\tprivate JWTConfig jwtConfig;\n+\t\n+\t@JsonIgnore\n+\tprivate JWTVerifier oauthTokenVerifier;\n+\t\n+\t\n+\tpublic ConqueryTokenRealm(MasterMetaStorage storage) {", "originalCommit": "ee99bb6e637006986239a7ec87c0195f3d1825a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MjQxNw==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r422892417", "bodyText": "Dropwizard hat ne Duration Klasse die sich nice schreiben/lesen l\u00e4sst", "author": "awildturtok", "createdAt": "2020-05-11T09:03:29Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/conquerytoken/ConqueryTokenRealm.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.bakdata.conquery.models.auth.conquerytoken;\n+\n+import javax.validation.constraints.Min;\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.auth0.jwt.JWT;\n+import com.auth0.jwt.JWTVerifier;\n+import com.auth0.jwt.algorithms.Algorithm;\n+import com.auth0.jwt.exceptions.InvalidClaimException;\n+import com.auth0.jwt.exceptions.JWTVerificationException;\n+import com.auth0.jwt.exceptions.SignatureVerificationException;\n+import com.auth0.jwt.exceptions.TokenExpiredException;\n+import com.auth0.jwt.interfaces.DecodedJWT;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.AccessLevel;\n+import lombok.Data;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.ExpiredCredentialsException;\n+import org.apache.shiro.authc.IncorrectCredentialsException;\n+\n+@Slf4j\n+public class ConqueryTokenRealm extends ConqueryAuthenticationRealm {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\n+\tprivate MasterMetaStorage storage;\n+\t\n+\t@Setter(value = AccessLevel.PRIVATE)\n+\tprivate JWTConfig jwtConfig;\n+\t\n+\t@JsonIgnore\n+\tprivate JWTVerifier oauthTokenVerifier;\n+\t\n+\t\n+\tpublic ConqueryTokenRealm(MasterMetaStorage storage) {\n+\t\tthis.storage = storage;\n+\t\tsetAuthenticationTokenClass(TOKEN_CLASS);\n+\t\tsetCredentialsMatcher(new SkippingCredentialsMatcher());\n+\t\tupdateJWTConfig(new JWTConfig());\n+\t}\n+\t\n+\tpublic void updateJWTConfig(JWTConfig jwtConfig){\n+\t\tthis.jwtConfig = jwtConfig;\n+\t\toauthTokenVerifier = JWT.require(jwtConfig.getTokenSignAlgorithm()).withIssuer(getName()).build();\n+\t}\n+\n+\t@Override\n+\tprotected ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+\t\tif (!(TOKEN_CLASS.isAssignableFrom(token.getClass()))) {\n+\t\t\t// Incompatible token\n+\t\t\treturn null;\n+\t\t}\n+\t\tDecodedJWT decodedToken = null;\n+\t\ttry {\n+\t\t\tdecodedToken = oauthTokenVerifier.verify((String) token.getCredentials());\n+\t\t}\n+\t\tcatch (TokenExpiredException e) {\n+\t\t\tlog.trace(\"The provided token is expired.\");\n+\t\t\tthrow new ExpiredCredentialsException(e);\n+\t\t}\n+\t\tcatch (SignatureVerificationException | InvalidClaimException e) {\n+\t\t\tlog.trace(\"The provided token was not successfully verified against its signature or claims.\");\n+\t\t\tthrow new IncorrectCredentialsException(e);\n+\t\t}\n+\t\tcatch (JWTVerificationException e) {\n+\t\t\tlog.trace(\"The provided token could not be verified.\");\n+\t\t\tthrow new AuthenticationException(e);\n+\t\t}\n+\n+\t\tString username = decodedToken.getSubject();\n+\n+\t\tUserId userId = UserId.Parser.INSTANCE.parse(username);\n+\t\tUser user = storage.getUser(userId);\n+\t\t// try to construct a new User if none could be found in the storage\n+\t\tif (user == null) {\n+\t\t\tlog.warn(\n+\t\t\t\t\"Provided credentials were valid, but a corresponding user was not found in the System. You need to add a user to the system with the id: {}\",\n+\t\t\t\tuserId);\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn new ConqueryAuthenticationInfo(userId, token, this);\n+\t}\n+\t\n+\n+\t\n+\tpublic String createTokenForUser(UserId userId) {\n+\t\tif(storage.getUser(userId) == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Cannot create a JWT for unknown user with id: \" + userId);\n+\t\t}\n+\t\treturn TokenHandler.createToken(userId.toString(), jwtConfig.getJwtDuration(), getName(), jwtConfig.getTokenSignAlgorithm());\n+\t}\n+\t\n+\t@Data\n+\tpublic static class JWTConfig{\n+\t\t@Min(1)\n+\t\tprivate int jwtDuration = 8; // Hours", "originalCommit": "ee99bb6e637006986239a7ec87c0195f3d1825a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d86cd6106be28c9719370df14006e0975dcd2e02", "url": "https://github.com/bakdata/conquery/commit/d86cd6106be28c9719370df14006e0975dcd2e02", "message": "review changes", "committedDate": "2020-05-11T14:27:24Z", "type": "commit"}, {"oid": "3d6d40c8092f07646a0b839b1dfcc4b95ad211df", "url": "https://github.com/bakdata/conquery/commit/3d6d40c8092f07646a0b839b1dfcc4b95ad211df", "message": "fixes wrong getter usage", "committedDate": "2020-05-11T14:35:33Z", "type": "commit"}, {"oid": "4934410ca8a2472b0b5c542b7a1b4a6b463878aa", "url": "https://github.com/bakdata/conquery/commit/4934410ca8a2472b0b5c542b7a1b4a6b463878aa", "message": "further review changes", "committedDate": "2020-05-11T16:39:12Z", "type": "commit"}, {"oid": "aacb2d5bd4993d9646ce376a7d342156926f0462", "url": "https://github.com/bakdata/conquery/commit/aacb2d5bd4993d9646ce376a7d342156926f0462", "message": "adds catch for any exception and log messages", "committedDate": "2020-05-11T16:58:32Z", "type": "commit"}, {"oid": "495b625e0348d40a5e537f9e74c6666ece93dc73", "url": "https://github.com/bakdata/conquery/commit/495b625e0348d40a5e537f9e74c6666ece93dc73", "message": "Merge branch 'release/2.0.0' into feature/auth-system-improvements", "committedDate": "2020-05-12T06:37:09Z", "type": "commit"}, {"oid": "176439b5737f46d05f5cf55869c5b227d0aa27c7", "url": "https://github.com/bakdata/conquery/commit/176439b5737f46d05f5cf55869c5b227d0aa27c7", "message": "fixes import", "committedDate": "2020-05-12T06:47:07Z", "type": "commit"}, {"oid": "fcbef3e2aaeba6ce7944130df20b8ad4152dac4b", "url": "https://github.com/bakdata/conquery/commit/fcbef3e2aaeba6ce7944130df20b8ad4152dac4b", "message": "uses util function to create random secret string", "committedDate": "2020-05-12T07:34:39Z", "type": "commit"}, {"oid": "68dbc4a3efc5231bfbf6973412259e7200be525c", "url": "https://github.com/bakdata/conquery/commit/68dbc4a3efc5231bfbf6973412259e7200be525c", "message": "adds validation to proto users", "committedDate": "2020-05-12T07:39:58Z", "type": "commit"}, {"oid": "aef007d1a9755ad45d625fb3890ed22e7acadf56", "url": "https://github.com/bakdata/conquery/commit/aef007d1a9755ad45d625fb3890ed22e7acadf56", "message": "Merge 68dbc4a3efc5231bfbf6973412259e7200be525c into 6cd41643d2b02b0b7d54456ce3b976e1f4e29090", "committedDate": "2020-05-12T07:40:25Z", "type": "commit"}, {"oid": "91088cbdcc02ff15cbc0ef67fbdc720b053cf1db", "url": "https://github.com/bakdata/conquery/commit/91088cbdcc02ff15cbc0ef67fbdc720b053cf1db", "message": "automatic update to docs", "committedDate": "2020-05-12T07:42:19Z", "type": "commit"}, {"oid": "b129d798e7a0d7bdb9c0fea797b62cf6a224be20", "url": "https://github.com/bakdata/conquery/commit/b129d798e7a0d7bdb9c0fea797b62cf6a224be20", "message": "Merge branch 'feature/unified-result-output-generation' into feature/auth-system-improvements", "committedDate": "2020-05-12T07:55:35Z", "type": "commit"}, {"oid": "7137596c1e0f7a89d7d3e54225d6b527bbb8d567", "url": "https://github.com/bakdata/conquery/commit/7137596c1e0f7a89d7d3e54225d6b527bbb8d567", "message": "Merge branch 'feature/unified-result-output-generation' into feature/auth-system-improvements", "committedDate": "2020-05-13T12:11:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MDQyOA==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r424470428", "bodyText": "wenn der mehrfach initialisiert wird, leakt doch ein singleton oder?", "author": "awildturtok", "createdAt": "2020-05-13T14:12:55Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/AuthorizationController.java", "diffHunk": "@@ -53,7 +57,21 @@\n \tprivate List<Realm> realms = new ArrayList<>();\n \t\n \tpublic void init() {\n-\t\tinitializeRealms(storage, authenticationConfigs, authenticationRealms, realms);\n+\t\t// Init authentication realms provided by with the config.\n+\t\tfor (AuthenticationConfig authenticationConf : authenticationConfigs) {\n+\t\t\tConqueryAuthenticationRealm realm = authenticationConf.createRealm(storage);\n+\t\t\tauthenticationRealms.add(realm);\n+\t\t\trealms.add(realm);\n+\t\t}\n+\t\t\n+\t\t// Add the central authentication realm\n+\t\tCENTRAL_TOKEN_REALM = new ConqueryTokenRealm(storage);", "originalCommit": "7137596c1e0f7a89d7d3e54225d6b527bbb8d567", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3OTk2OQ==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r424479969", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tlog.trace(\"Token has expected format.\", TOKEN_CLASS, token.getClass());\n          \n          \n            \n            \t\tlog.trace(\"Token has expected format.<span class=\"x x-first x-last\">{} - {}</span>\", TOKEN_CLASS, token.getClass());", "author": "awildturtok", "createdAt": "2020-05-13T14:25:27Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/conquerytoken/ConqueryTokenRealm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.bakdata.conquery.models.auth.conquerytoken;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.auth0.jwt.JWT;\n+import com.auth0.jwt.JWTVerifier;\n+import com.auth0.jwt.algorithms.Algorithm;\n+import com.auth0.jwt.exceptions.InvalidClaimException;\n+import com.auth0.jwt.exceptions.JWTVerificationException;\n+import com.auth0.jwt.exceptions.SignatureVerificationException;\n+import com.auth0.jwt.exceptions.TokenExpiredException;\n+import com.auth0.jwt.interfaces.DecodedJWT;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.dropwizard.util.Duration;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.ExpiredCredentialsException;\n+import org.apache.shiro.authc.IncorrectCredentialsException;\n+\n+@Slf4j\n+public class ConqueryTokenRealm extends ConqueryAuthenticationRealm {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\n+\tprivate final MasterMetaStorage storage;\n+\t\n+\t@Setter\n+\tprivate JWTConfig jwtConfig = new JWTConfig();\n+\t\n+\t\n+\tpublic ConqueryTokenRealm(MasterMetaStorage storage) {\n+\t\tthis.storage = storage;\n+\t\tsetAuthenticationTokenClass(TOKEN_CLASS);\n+\t\tsetCredentialsMatcher(new SkippingCredentialsMatcher());\n+\t}\n+\n+\t@Override\n+\tprotected ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+\t\tif (!(TOKEN_CLASS.isAssignableFrom(token.getClass()))) {\n+\t\t\tlog.trace(\"Incompatible token. Expected {}, got {}\", TOKEN_CLASS, token.getClass());\n+\t\t\treturn null;\n+\t\t}\n+\t\tlog.trace(\"Token has expected format.\", TOKEN_CLASS, token.getClass());", "originalCommit": "7137596c1e0f7a89d7d3e54225d6b527bbb8d567", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5NTk5OA==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r424495998", "bodyText": "die Duration w\u00fcrde ich hier in eine Java Duration umwandeln, das ist nur ne coole klasse f\u00fcr parsing", "author": "awildturtok", "createdAt": "2020-05-13T14:45:52Z", "path": "backend/src/main/java/com/bakdata/conquery/models/auth/conquerytoken/ConqueryTokenRealm.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.bakdata.conquery.models.auth.conquerytoken;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+\n+import com.auth0.jwt.JWT;\n+import com.auth0.jwt.JWTVerifier;\n+import com.auth0.jwt.algorithms.Algorithm;\n+import com.auth0.jwt.exceptions.InvalidClaimException;\n+import com.auth0.jwt.exceptions.JWTVerificationException;\n+import com.auth0.jwt.exceptions.SignatureVerificationException;\n+import com.auth0.jwt.exceptions.TokenExpiredException;\n+import com.auth0.jwt.interfaces.DecodedJWT;\n+import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationInfo;\n+import com.bakdata.conquery.models.auth.ConqueryAuthenticationRealm;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler;\n+import com.bakdata.conquery.models.auth.basic.TokenHandler.JwtToken;\n+import com.bakdata.conquery.models.auth.entities.User;\n+import com.bakdata.conquery.models.auth.util.SkippingCredentialsMatcher;\n+import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.dropwizard.util.Duration;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.ExpiredCredentialsException;\n+import org.apache.shiro.authc.IncorrectCredentialsException;\n+\n+@Slf4j\n+public class ConqueryTokenRealm extends ConqueryAuthenticationRealm {\n+\n+\tprivate static final Class<? extends AuthenticationToken> TOKEN_CLASS = JwtToken.class;\n+\n+\tprivate final MasterMetaStorage storage;\n+\t\n+\t@Setter\n+\tprivate JWTConfig jwtConfig = new JWTConfig();\n+\t\n+\t\n+\tpublic ConqueryTokenRealm(MasterMetaStorage storage) {\n+\t\tthis.storage = storage;\n+\t\tsetAuthenticationTokenClass(TOKEN_CLASS);\n+\t\tsetCredentialsMatcher(new SkippingCredentialsMatcher());\n+\t}\n+\n+\t@Override\n+\tprotected ConqueryAuthenticationInfo doGetConqueryAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n+\t\tif (!(TOKEN_CLASS.isAssignableFrom(token.getClass()))) {\n+\t\t\tlog.trace(\"Incompatible token. Expected {}, got {}\", TOKEN_CLASS, token.getClass());\n+\t\t\treturn null;\n+\t\t}\n+\t\tlog.trace(\"Token has expected format.\", TOKEN_CLASS, token.getClass());\n+\t\tDecodedJWT decodedToken = null;\n+\t\ttry {\n+\t\t\tdecodedToken = jwtConfig.getTokenVerifier(this).verify((String) token.getCredentials());\n+\t\t}\n+\t\tcatch (TokenExpiredException e) {\n+\t\t\tlog.trace(\"The provided token is expired.\");\n+\t\t\tthrow new ExpiredCredentialsException(e);\n+\t\t}\n+\t\tcatch (SignatureVerificationException | InvalidClaimException e) {\n+\t\t\tlog.trace(\"The provided token was not successfully verified against its signature or claims.\");\n+\t\t\tthrow new IncorrectCredentialsException(e);\n+\t\t}\n+\t\tcatch (JWTVerificationException e) {\n+\t\t\tlog.trace(\"The provided token could not be verified.\");\n+\t\t\tthrow new AuthenticationException(e);\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tlog.trace(\"Unable to decode token\", e);\n+\t\t\tthrow new AuthenticationException(e);\n+\t\t}\n+\t\tlog.trace(\"Received valid token.\");\n+\n+\t\tString username = decodedToken.getSubject();\n+\n+\t\tUserId userId = UserId.Parser.INSTANCE.parse(username);\n+\t\tUser user = storage.getUser(userId);\n+\t\t// try to construct a new User if none could be found in the storage\n+\t\tif (user == null) {\n+\t\t\tlog.warn(\n+\t\t\t\t\"Provided credentials were valid, but a corresponding user was not found in the System. You need to add a user to the system with the id: {}\",\n+\t\t\t\tuserId);\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn new ConqueryAuthenticationInfo(userId, token, this);\n+\t}\n+\t\n+\n+\t\n+\tpublic String createTokenForUser(UserId userId) {\n+\t\tif(storage.getUser(userId) == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Cannot create a JWT for unknown user with id: \" + userId);\n+\t\t}\n+\t\treturn TokenHandler.createToken(userId.toString(), jwtConfig.getJwtDuration(), getName(), jwtConfig.getTokenSignAlgorithm());", "originalCommit": "7137596c1e0f7a89d7d3e54225d6b527bbb8d567", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5NzI2NA==", "url": "https://github.com/bakdata/conquery/pull/1182#discussion_r424497264", "bodyText": "wenn du eh auf die map synchronisierst musst du da drin keine Atomics benutzen", "author": "awildturtok", "createdAt": "2020-05-13T14:47:26Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/resultinfo/ResultInfo.java", "diffHunk": "@@ -43,8 +43,7 @@ public final String getUniqueName(PrintSettings settings) {\n \t\t}\n \t\tsynchronized (ocurrenceCounter) {\n \t\t\tif(postfix == UNSET_PREFIX) {\n-\t\t\t\tAtomicInteger occurence = ocurrenceCounter.computeIfAbsent(name, str -> new AtomicInteger(0));\n-\t\t\t\tpostfix = occurence.getAndIncrement();\n+\t\t\t\tpostfix = ocurrenceCounter.computeIfAbsent(name, str -> new AtomicInteger(0)).getAndIncrement();", "originalCommit": "7137596c1e0f7a89d7d3e54225d6b527bbb8d567", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0e744af3d59512e6e04c6d335093ae9571a59b12", "url": "https://github.com/bakdata/conquery/commit/0e744af3d59512e6e04c6d335093ae9571a59b12", "message": "Merge branch 'feature/unified-result-output-generation' into feature/auth-system-improvements", "committedDate": "2020-05-15T10:40:40Z", "type": "commit"}, {"oid": "26b6fd5d2ac5cee1d3865d6429e281b706d3dfd3", "url": "https://github.com/bakdata/conquery/commit/26b6fd5d2ac5cee1d3865d6429e281b706d3dfd3", "message": "remove atomic integer from result info", "committedDate": "2020-05-15T12:09:50Z", "type": "commit"}, {"oid": "b51ea45e007855ee92dad4e873f41dda7c47b5f8", "url": "https://github.com/bakdata/conquery/commit/b51ea45e007855ee92dad4e873f41dda7c47b5f8", "message": "clean up auth controller", "committedDate": "2020-05-15T12:10:08Z", "type": "commit"}]}