{"pr_number": 1074, "pr_title": "query by secondary id", "pr_createdAt": "2020-03-11T13:41:35Z", "pr_url": "https://github.com/bakdata/conquery/pull/1074", "timeline": [{"oid": "f4c1c77e414bdc1ea7a66d9f61b31801c305ab02", "url": "https://github.com/bakdata/conquery/commit/f4c1c77e414bdc1ea7a66d9f61b31801c305ab02", "message": "started working on secondary id based queries", "committedDate": "2020-03-06T09:43:29Z", "type": "commit"}, {"oid": "8946c2686187b2b42fc1ebe0d2423a3723c98584", "url": "https://github.com/bakdata/conquery/commit/8946c2686187b2b42fc1ebe0d2423a3723c98584", "message": "Merge branch 'develop' into feature/secondary_ids", "committedDate": "2020-03-06T11:52:06Z", "type": "commit"}, {"oid": "f4d75ec0563384fd923f4fa52ebca6189cedfb75", "url": "https://github.com/bakdata/conquery/commit/f4d75ec0563384fd923f4fa52ebca6189cedfb75", "message": "increased number of result types", "committedDate": "2020-03-06T15:26:05Z", "type": "commit"}, {"oid": "c03153f8bb016a87a8a381d0b813470a10117660", "url": "https://github.com/bakdata/conquery/commit/c03153f8bb016a87a8a381d0b813470a10117660", "message": "finished implementation of SecondaryIdQueries", "committedDate": "2020-03-11T13:40:34Z", "type": "commit"}, {"oid": "c41071c1abe97dd41a2d4ce096816267dbff27de", "url": "https://github.com/bakdata/conquery/commit/c41071c1abe97dd41a2d4ce096816267dbff27de", "message": "Merge branch 'develop' into feature/secondary_ids", "committedDate": "2020-03-11T13:40:53Z", "type": "commit"}, {"oid": "cbfd89041218cd015637330ee1ce78480706f0c6", "url": "https://github.com/bakdata/conquery/commit/cbfd89041218cd015637330ee1ce78480706f0c6", "message": "Merge c41071c1abe97dd41a2d4ce096816267dbff27de into fecc58fde79fb95535dd0adfb8d572ea4ecc1812", "committedDate": "2020-03-11T13:41:49Z", "type": "commit"}, {"oid": "014a8fd029794fd10b77a007e687b9e7023f52c7", "url": "https://github.com/bakdata/conquery/commit/014a8fd029794fd10b77a007e687b9e7023f52c7", "message": "automatic update to docs", "committedDate": "2020-03-11T13:43:29Z", "type": "commit"}, {"oid": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "url": "https://github.com/bakdata/conquery/commit/96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "message": "Merge branch 'develop' into feature/secondary_ids", "committedDate": "2020-03-11T13:48:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzNjYxNg==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395136616", "bodyText": "W\u00e4re es nicht Sinnvoll das sogar \u00fcber's id system laufen zu lassen?", "author": "awildturtok", "createdAt": "2020-03-19T15:59:12Z", "path": "backend/src/main/java/com/bakdata/conquery/models/datasets/Column.java", "diffHunk": "@@ -36,6 +36,11 @@\n \t * if it is of type string, instead of its own dictionary\n \t */\n \tprivate String sharedDictionary;\n+\t/**\n+\t * if this is set this column counts as the secondary id of the given name for this\n+\t * table\n+\t */\n+\tprivate String secondaryId;", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzODk1MA==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395138950", "bodyText": "bitte kein var", "author": "awildturtok", "createdAt": "2020-03-19T16:02:26Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {\n+\n+\tprivate final ConceptQueryPlan query;\n+\tprivate final String secondaryId;\n+\tprivate Column currentSecondaryIdColumn;\n+\tprivate Map<String, ConceptQueryPlan> childPerKey = new HashMap<>();\n+\t\n+\tprivate Column findSecondaryIdColumn(Table table) {\n+\t\tfor(var col:table.getColumns()) {\n+\t\t\tif(secondaryId.equals(col.getSecondaryId())) {\n+\t\t\t\treturn col;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tthrow new IllegalStateException(\"Table \"+table+\" should not appear in a query about secondary id \"+secondaryId);\n+\t}\n+\n+\tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n+\t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n+\t\tplan.init(query.getEntity());\n+\t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getTable());\n+\t\tplan.isOfInterest(currentBucket);\n+\t\tplan.nextBlock(currentBucket);\n+\t\treturn plan;\n+\t}\n+\t\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.checkRequiredTables(ctx.getStorage());\n+\t\tquery.init(entity);\n+\t\tif (query.getRequiredTables().isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\tfor(Table currentTable : query.getRequiredTables()) {\n+\t\t\tcurrentSecondaryIdColumn = findSecondaryIdColumn(currentTable);\n+\t\t\tquery.nextTable(ctx, currentTable);\n+\t\t\tfor(Bucket bucket : entity.getBucket(currentTable.getId())) {\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n+\t\t\t\tvar secondaryIdType = (AStringType<?>)currentSecondaryIdColumn.getTypeFor(bucket);", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzOTM2MA==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395139360", "bodyText": "Kann es sein dass du vergessen hast die zu l\u00f6schen?", "author": "awildturtok", "createdAt": "2020-03-19T16:02:57Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/QPSwitchNode.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import lombok.Setter;\n+\n+@NoArgsConstructor\n+@Getter @Setter\n+public abstract class QPSwitchNode<KEY> extends QPChainNode {", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2NTk3NQ==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397965975", "bodyText": "jupp", "author": "manuel-hegner", "createdAt": "2020-03-25T15:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzOTM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MTEzNQ==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395141135", "bodyText": "Kannst du die Klasse bitte etwas dokumentieren? Der Code ist relativ offensichtlich aber wenn gar nicht klar ist was du machst bzw wof\u00fcr das ist, ist das sehr komischer code.", "author": "awildturtok", "createdAt": "2020-03-19T16:05:30Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjI1Mg==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395142252", "bodyText": "vorher checken ob das hier \u00fcberhaupt ein element hat.", "author": "awildturtok", "createdAt": "2020-03-19T16:07:04Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {\n+\n+\tprivate final ConceptQueryPlan query;\n+\tprivate final String secondaryId;\n+\tprivate Column currentSecondaryIdColumn;\n+\tprivate Map<String, ConceptQueryPlan> childPerKey = new HashMap<>();\n+\t\n+\tprivate Column findSecondaryIdColumn(Table table) {\n+\t\tfor(var col:table.getColumns()) {\n+\t\t\tif(secondaryId.equals(col.getSecondaryId())) {\n+\t\t\t\treturn col;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tthrow new IllegalStateException(\"Table \"+table+\" should not appear in a query about secondary id \"+secondaryId);\n+\t}\n+\n+\tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n+\t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n+\t\tplan.init(query.getEntity());\n+\t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getTable());\n+\t\tplan.isOfInterest(currentBucket);\n+\t\tplan.nextBlock(currentBucket);\n+\t\treturn plan;\n+\t}\n+\t\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.checkRequiredTables(ctx.getStorage());\n+\t\tquery.init(entity);\n+\t\tif (query.getRequiredTables().isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\tfor(Table currentTable : query.getRequiredTables()) {\n+\t\t\tcurrentSecondaryIdColumn = findSecondaryIdColumn(currentTable);\n+\t\t\tquery.nextTable(ctx, currentTable);\n+\t\t\tfor(Bucket bucket : entity.getBucket(currentTable.getId())) {\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n+\t\t\t\tvar secondaryIdType = (AStringType<?>)currentSecondaryIdColumn.getTypeFor(bucket);\n+\t\t\t\tquery.nextBlock(bucket);\n+\t\t\t\tif(bucket.containsLocalEntity(localEntity)) {\n+\t\t\t\t\tif(query.isOfInterest(bucket)) {\n+\t\t\t\t\t\tint start = bucket.getFirstEventOfLocal(localEntity);\n+\t\t\t\t\t\tint end = bucket.getLastEventOfLocal(localEntity);\n+\t\t\t\t\t\tfor(int event = start; event < end ; event++) {\n+\t\t\t\t\t\t\tString key = secondaryIdType.getElement(bucket.getString(event, currentSecondaryIdColumn));", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjYyOQ==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395142629", "bodyText": "Fehlermeldung", "author": "awildturtok", "createdAt": "2020-03-19T16:07:33Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/FailedEntityResult.java", "diffHunk": "@@ -33,4 +33,9 @@ public boolean isFailed() {\n \tpublic FailedEntityResult asFailed() {\n \t\treturn this;\n \t}\n+\t\n+\t@Override @JsonIgnore\n+\tpublic Object[] getValues() {\n+\t\tthrow new IllegalStateException();", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjgzMQ==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r395142831", "bodyText": "Fehlermeldung", "author": "awildturtok", "createdAt": "2020-03-19T16:07:50Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/results/NotContainedEntityResult.java", "diffHunk": "@@ -15,4 +16,9 @@ public String toString() {\n \tpublic boolean isContained() {\n \t\treturn false;\n \t}\n+\n+\t@Override @JsonIgnore\n+\tpublic Object[] getValues() {\n+\t\tthrow new IllegalStateException();", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NzY0MQ==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397187641", "bodyText": "Sieht aus als kann der Import raus", "author": "thoniTUB", "createdAt": "2020-03-24T14:18:59Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/ConceptQuery.java", "diffHunk": "@@ -14,20 +14,23 @@\n import com.bakdata.conquery.models.query.QueryResolveContext;\n import com.bakdata.conquery.models.query.Visitable;\n import com.bakdata.conquery.models.query.queryplan.ConceptQueryPlan;\n+import com.bakdata.conquery.models.query.queryplan.SecondaryIdQueryPlan;", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjEzNQ==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397216135", "bodyText": "Muss f\u00fcr die schon kreierten ChildPerKeyPlans nicht auch immer wieder ConceptQueryPlan::nextBlock(), ConceptQueryPlan::nextTable() aufgerufen werden?", "author": "thoniTUB", "createdAt": "2020-03-24T14:54:42Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/queryplan/SecondaryIdQueryPlan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.bakdata.conquery.models.query.queryplan;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+import com.bakdata.conquery.models.datasets.Column;\n+import com.bakdata.conquery.models.datasets.Table;\n+import com.bakdata.conquery.models.events.Bucket;\n+import com.bakdata.conquery.models.query.QueryExecutionContext;\n+import com.bakdata.conquery.models.query.QueryPlanContext;\n+import com.bakdata.conquery.models.query.entity.Entity;\n+import com.bakdata.conquery.models.query.queryplan.clone.CloneContext;\n+import com.bakdata.conquery.models.query.results.EntityResult;\n+import com.bakdata.conquery.models.query.results.SinglelineEntityResult;\n+import com.bakdata.conquery.models.types.specific.AStringType;\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n+\n+@RequiredArgsConstructor\n+@Getter @Setter\n+public class SecondaryIdQueryPlan implements QueryPlan {\n+\n+\tprivate final ConceptQueryPlan query;\n+\tprivate final String secondaryId;\n+\tprivate Column currentSecondaryIdColumn;\n+\tprivate Map<String, ConceptQueryPlan> childPerKey = new HashMap<>();\n+\t\n+\tprivate Column findSecondaryIdColumn(Table table) {\n+\t\tfor(var col:table.getColumns()) {\n+\t\t\tif(secondaryId.equals(col.getSecondaryId())) {\n+\t\t\t\treturn col;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tthrow new IllegalStateException(\"Table \"+table+\" should not appear in a query about secondary id \"+secondaryId);\n+\t}\n+\n+\tprivate ConceptQueryPlan createChild(Object key, QueryExecutionContext currentContext, Bucket currentBucket) {\n+\t\tConceptQueryPlan plan = query.clone(new CloneContext(currentContext.getStorage()));\n+\t\tplan.init(query.getEntity());\n+\t\tplan.nextTable(currentContext, currentSecondaryIdColumn.getTable());\n+\t\tplan.isOfInterest(currentBucket);\n+\t\tplan.nextBlock(currentBucket);\n+\t\treturn plan;\n+\t}\n+\t\n+\t@Override\n+\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+\t\tquery.checkRequiredTables(ctx.getStorage());\n+\t\tquery.init(entity);\n+\t\tif (query.getRequiredTables().isEmpty()) {\n+\t\t\treturn EntityResult.notContained();\n+\t\t}\n+\n+\t\tfor(Table currentTable : query.getRequiredTables()) {\n+\t\t\tcurrentSecondaryIdColumn = findSecondaryIdColumn(currentTable);\n+\t\t\tquery.nextTable(ctx, currentTable);\n+\t\t\tfor(Bucket bucket : entity.getBucket(currentTable.getId())) {\n+\t\t\t\tint localEntity = bucket.toLocal(entity.getId());\n+\t\t\t\tvar secondaryIdType = (AStringType<?>)currentSecondaryIdColumn.getTypeFor(bucket);\n+\t\t\t\tquery.nextBlock(bucket);\n+\t\t\t\tif(bucket.containsLocalEntity(localEntity)) {\n+\t\t\t\t\tif(query.isOfInterest(bucket)) {\n+\t\t\t\t\t\tint start = bucket.getFirstEventOfLocal(localEntity);\n+\t\t\t\t\t\tint end = bucket.getLastEventOfLocal(localEntity);\n+\t\t\t\t\t\tfor(int event = start; event < end ; event++) {\n+\t\t\t\t\t\t\tString key = secondaryIdType.getElement(bucket.getString(event, currentSecondaryIdColumn));\n+\t\t\t\t\t\t\tchildPerKey\n+\t\t\t\t\t\t\t\t.computeIfAbsent(key, k->this.createChild(k, ctx, bucket))\n+\t\t\t\t\t\t\t\t.nextEvent(bucket, event);", "originalCommit": "96035e9dc64d0b23bbfe8be3109fc8c2556b53f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NjMyNA==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r397976324", "bodyText": "du hast v\u00f6llig recht", "author": "manuel-hegner", "createdAt": "2020-03-25T16:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNjEzNQ=="}], "type": "inlineReview"}, {"oid": "b29913c10ad74d7b89836a83e222f3bb57969556", "url": "https://github.com/bakdata/conquery/commit/b29913c10ad74d7b89836a83e222f3bb57969556", "message": "made PR requested changes and fixes", "committedDate": "2020-03-25T16:27:36Z", "type": "commit"}, {"oid": "9451b8545a29d2c5bfa5b032f12829149f0d6099", "url": "https://github.com/bakdata/conquery/commit/9451b8545a29d2c5bfa5b032f12829149f0d6099", "message": "merged develop", "committedDate": "2020-03-25T16:33:01Z", "type": "commit"}, {"oid": "9b8d0e5e2709243397306c009c11756815d5da6c", "url": "https://github.com/bakdata/conquery/commit/9b8d0e5e2709243397306c009c11756815d5da6c", "message": "Merge 9451b8545a29d2c5bfa5b032f12829149f0d6099 into 907f9e180c0ec2ddf5a0d39f7b0ab345a663f9ed", "committedDate": "2020-03-25T16:33:18Z", "type": "commit"}, {"oid": "503b42f421354aa13de33b0df958db63dec22ad1", "url": "https://github.com/bakdata/conquery/commit/503b42f421354aa13de33b0df958db63dec22ad1", "message": "automatic update to docs", "committedDate": "2020-03-25T16:35:09Z", "type": "commit"}, {"oid": "75c7eb5dc0d428fb87b926b8dfff220fa8279588", "url": "https://github.com/bakdata/conquery/commit/75c7eb5dc0d428fb87b926b8dfff220fa8279588", "message": "fixed error in IdDeserialization: prefix was even applied to non NamespecedIds", "committedDate": "2020-03-25T17:08:42Z", "type": "commit"}, {"oid": "fa146011dd936894fd32fde2f901eb7f1777bbb0", "url": "https://github.com/bakdata/conquery/commit/fa146011dd936894fd32fde2f901eb7f1777bbb0", "message": "Merge branch 'develop' into feature/secondary_ids", "committedDate": "2020-03-25T17:17:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5OTg5Mg==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r398399892", "bodyText": "K\u00f6nntest du den Check den du unten machst nicht einfach hier reinziehen oder ist dir das zu langsam?", "author": "awildturtok", "createdAt": "2020-03-26T08:43:36Z", "path": "backend/src/main/java/com/bakdata/conquery/io/jackson/serializer/IdDeserializer.java", "diffHunk": "@@ -25,21 +26,22 @@\n \n \tprivate Class<ID> idClass;\n \tprivate Parser<ID> idParser;\n+\tprivate boolean checkForInjectedPrefix;\n \t\n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic ID deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n \t\tif(parser.getCurrentToken()==JsonToken.VALUE_STRING) {\n \t\t\tString text = parser.getText();\n \t\t\ttry {\n-\t\t\t\t//check if there was a dataset injected and if it is already a prefix\n-\t\t\t\tDataset dataset = (Dataset) ctxt.findInjectableValue(Dataset.class.getName(), null, null);\n-\t\t\t\tif(dataset != null) {\n-\t\t\t\t\treturn idParser.parsePrefixed(dataset.getName(), text);\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\treturn idParser.parse(text);\n+\t\t\t\tif(checkForInjectedPrefix) {", "originalCommit": "fa146011dd936894fd32fde2f901eb7f1777bbb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg0NTg4Mw==", "url": "https://github.com/bakdata/conquery/pull/1074#discussion_r399845883", "bodyText": "Ich finde es unsauber wenn f\u00fcr IDs die gar nichts mit Datasets zu tun haben trotzdem nach einem injizierten Dataset geguckt wird.", "author": "manuel-hegner", "createdAt": "2020-03-29T20:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM5OTg5Mg=="}], "type": "inlineReview"}, {"oid": "4bd9c82231b051a39f874039ea9bd284289be4b4", "url": "https://github.com/bakdata/conquery/commit/4bd9c82231b051a39f874039ea9bd284289be4b4", "message": "Merge branch 'develop' into feature/secondary_ids", "committedDate": "2020-03-29T23:58:27Z", "type": "commit"}, {"oid": "e770efb20c14f2840affdb01d64d4d1e96fdfc81", "url": "https://github.com/bakdata/conquery/commit/e770efb20c14f2840affdb01d64d4d1e96fdfc81", "message": "Merge branch 'develop' into feature/secondary_ids", "committedDate": "2020-04-02T13:03:09Z", "type": "commit"}, {"oid": "b5d1c1c30d5416d89082fec5fef08cbb6bc1f0af", "url": "https://github.com/bakdata/conquery/commit/b5d1c1c30d5416d89082fec5fef08cbb6bc1f0af", "message": "Merge branch 'develop' into feature/secondary_ids", "committedDate": "2020-04-06T07:53:09Z", "type": "commit"}]}