{"pr_number": 548, "pr_title": "Eager expression node", "pr_createdAt": "2020-11-24T21:57:38Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/548", "timeline": [{"oid": "6789fbc32cb9aef508425b4d016ed84f1b58595c", "url": "https://github.com/HubSpot/jinjava/commit/6789fbc32cb9aef508425b4d016ed84f1b58595c", "message": "Implement EagerExpressionStrategy", "committedDate": "2020-11-24T20:47:12Z", "type": "commit"}, {"oid": "b30c25c3bab383683cda7acca6e76553080f82bd", "url": "https://github.com/HubSpot/jinjava/commit/b30c25c3bab383683cda7acca6e76553080f82bd", "message": "Use the getHideInterpreterErrors flag to hide errors", "committedDate": "2020-11-24T20:47:43Z", "type": "commit"}, {"oid": "94f9e29528a19d6ab17c5397860fd09a98c67b05", "url": "https://github.com/HubSpot/jinjava/commit/94f9e29528a19d6ab17c5397860fd09a98c67b05", "message": "Unignore some passing tests", "committedDate": "2020-11-24T20:51:01Z", "type": "commit"}, {"oid": "156a1395ec88026c18d0f0038827323ac23f151a", "url": "https://github.com/HubSpot/jinjava/commit/156a1395ec88026c18d0f0038827323ac23f151a", "message": "Merge branch 'eager-tag-decorator-full' of github.com:HubSpot/jinjava into eager-expression-node", "committedDate": "2020-11-24T21:15:03Z", "type": "commit"}, {"oid": "a3d6c599c081a98db4c537a3844317b75801e7d7", "url": "https://github.com/HubSpot/jinjava/commit/a3d6c599c081a98db4c537a3844317b75801e7d7", "message": "Working on unit tests", "committedDate": "2020-11-24T22:34:18Z", "type": "commit"}, {"oid": "eac319fef25c74ff2ee7c7fbd7fc99b5c0c740ff", "url": "https://github.com/HubSpot/jinjava/commit/eac319fef25c74ff2ee7c7fbd7fc99b5c0c740ff", "message": "Reconstruct set tag for variables that will get deferred", "committedDate": "2020-11-30T16:46:03Z", "type": "commit"}, {"oid": "e5e865c87ccf0732bd3cd8b39768637629d1639b", "url": "https://github.com/HubSpot/jinjava/commit/e5e865c87ccf0732bd3cd8b39768637629d1639b", "message": "Only reconstruct set tag before deferring outside of protected mode", "committedDate": "2020-11-30T17:19:18Z", "type": "commit"}, {"oid": "6902404d8132751e34f18d19ce5d156288ad7524", "url": "https://github.com/HubSpot/jinjava/commit/6902404d8132751e34f18d19ce5d156288ad7524", "message": "Add more EagerTagDecorator tests", "committedDate": "2020-11-30T17:32:03Z", "type": "commit"}, {"oid": "f164aff6d29f70ddda1b78a7ce7a19706a261a1b", "url": "https://github.com/HubSpot/jinjava/commit/f164aff6d29f70ddda1b78a7ce7a19706a261a1b", "message": "Call wrapper method", "committedDate": "2020-11-30T17:35:44Z", "type": "commit"}, {"oid": "856c532eeea333bcdae3a29fa01abe08b0c13e8e", "url": "https://github.com/HubSpot/jinjava/commit/856c532eeea333bcdae3a29fa01abe08b0c13e8e", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-expression-node", "committedDate": "2020-11-30T20:42:59Z", "type": "commit"}, {"oid": "e07ecccb578523316f4334c0156b7595b8668a74", "url": "https://github.com/HubSpot/jinjava/commit/e07ecccb578523316f4334c0156b7595b8668a74", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-expression-node", "committedDate": "2020-12-03T19:33:59Z", "type": "commit"}, {"oid": "b98a632cca6987b1e6862728e790492b8cbb9cf0", "url": "https://github.com/HubSpot/jinjava/commit/b98a632cca6987b1e6862728e790492b8cbb9cf0", "message": "Add missing import", "committedDate": "2020-12-03T19:37:41Z", "type": "commit"}, {"oid": "2b709c8ea520c4da063983e17ee5cd6fb9b7724e", "url": "https://github.com/HubSpot/jinjava/commit/2b709c8ea520c4da063983e17ee5cd6fb9b7724e", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-expression-node", "committedDate": "2020-12-03T21:50:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwNzk5OQ==", "url": "https://github.com/HubSpot/jinjava/pull/548#discussion_r537607999", "bodyText": "Might want to a create a variable for interpreter.getConfig() to shorten up these lines.", "author": "boulter", "createdAt": "2020-12-07T15:43:12Z", "path": "src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java", "diffHunk": "@@ -11,6 +21,113 @@ public RenderedOutputNode interpretOutput(\n     ExpressionToken master,\n     JinjavaInterpreter interpreter\n   ) {\n-    return new DefaultExpressionStrategy().interpretOutput(master, interpreter); // TODO replace with actual functionality\n+    EagerStringResult eagerStringResult = eagerResolveExpression(master, interpreter);\n+    return new RenderedOutputNode(\n+      eagerStringResult.getPrefixToPreserveState() + eagerStringResult.getResult()\n+    );\n+  }\n+\n+  private EagerStringResult eagerResolveExpression(\n+    ExpressionToken master,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    ChunkResolver chunkResolver = new ChunkResolver(\n+      master.getExpr(),\n+      master,\n+      interpreter\n+    );\n+    EagerStringResult resolvedExpression = EagerTagDecorator.executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringBuilder prefixToPreserveState = new StringBuilder(\n+      interpreter.getContext().isProtectedMode()\n+        ? resolvedExpression.getPrefixToPreserveState()\n+        : \"\"\n+    );\n+    if (chunkResolver.getDeferredWords().isEmpty()) {\n+      String result = WhitespaceUtils.unquote(resolvedExpression.getResult());\n+      if (\n+        !StringUtils.equals(result, master.getImage()) &&\n+        (\n+          StringUtils.contains(result, master.getSymbols().getExpressionStart()) ||\n+          StringUtils.contains(result, master.getSymbols().getExpressionStartWithTag())\n+        )\n+      ) {\n+        if (interpreter.getConfig().isNestedInterpretationEnabled()) {\n+          try {\n+            result = interpreter.renderFlat(result);\n+          } catch (Exception e) {\n+            Logging.ENGINE_LOG.warn(\"Error rendering variable node result\", e);\n+          }\n+        } else {\n+          // Possible macro/set tag in front of this one. Includes result\n+          result = wrapInRawOrExpressionIfNeeded(result, interpreter);\n+        }\n+      }\n+\n+      if (interpreter.getContext().isAutoEscape()) {\n+        result = EscapeFilter.escapeHtmlEntities(result);\n+      }\n+      return new EagerStringResult(result, prefixToPreserveState.toString());\n+    }\n+    prefixToPreserveState.append(\n+      EagerTagDecorator.reconstructFromContextBeforeDeferring(\n+        chunkResolver.getDeferredWords(),\n+        interpreter\n+      )\n+    );\n+    String helpers = wrapInExpression(resolvedExpression.getResult(), interpreter);\n+    interpreter\n+      .getContext()\n+      .handleEagerToken(\n+        new EagerToken(\n+          new TagToken(\n+            helpers,\n+            master.getLineNumber(),\n+            master.getStartPosition(),\n+            master.getSymbols()\n+          ),\n+          chunkResolver.getDeferredWords()\n+        )\n+      );\n+    // There is no result because it couldn't be entirely evaluated.\n+    return new EagerStringResult(\n+      \"\",\n+      EagerTagDecorator.wrapInAutoEscapeIfNeeded(\n+        prefixToPreserveState.toString() + helpers,\n+        interpreter\n+      )\n+    );\n+  }\n+\n+  private static String wrapInRawOrExpressionIfNeeded(\n+    String output,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    if (\n+      interpreter.getConfig().getExecutionMode().isPreserveRawTags() &&", "originalCommit": "2b709c8ea520c4da063983e17ee5cd6fb9b7724e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1dc986879bf98e36539324e0cb4c75afcac4eeb2", "url": "https://github.com/HubSpot/jinjava/commit/1dc986879bf98e36539324e0cb4c75afcac4eeb2", "message": "Make eager expression tests inline", "committedDate": "2020-12-07T20:04:42Z", "type": "commit"}, {"oid": "4a3e3766ba256d9b2f893908aeebcd41cf968ab0", "url": "https://github.com/HubSpot/jinjava/commit/4a3e3766ba256d9b2f893908aeebcd41cf968ab0", "message": "Shorten multiple calls to interpreter.getConfig()", "committedDate": "2020-12-09T17:25:46Z", "type": "commit"}]}