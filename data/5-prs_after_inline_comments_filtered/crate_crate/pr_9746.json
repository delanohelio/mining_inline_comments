{"pr_number": 9746, "pr_title": "Use bundled JDK instead of host system JDK.", "pr_createdAt": "2020-03-06T13:50:36Z", "pr_url": "https://github.com/crate/crate/pull/9746", "timeline": [{"oid": "16671602761bba13daaa0e480064e2c7b8f186d3", "url": "https://github.com/crate/crate/commit/16671602761bba13daaa0e480064e2c7b8f186d3", "message": "Use bundled JDK instead of host system JDK.\n\nThis change makes it possible to configure a CrateDB JDK\nbundle via the jdks extension of the `jdk-download` Gradle\nplugin. See the JdkDownloadPlugin javadoc for the further\nusage instructions.\n\nThe JDK bundle is used for compilation, tests and packaged\nwith the CrateDB tarball.\n\nThe JDK version, vendor and platform are provided\nas properties. Conveniently, you can pass the properties\nas system properties for Gradle tasks, e.g.\n\n  ./gradlew test distTar  \\\n      -Dbundled_jdk_version=13.0.2+8 \\\n      -Dbundled_jdk_vendor=adoptopenjdk \\\n      -Dbundled_jdk_platform=linux", "committedDate": "2020-03-06T13:51:49Z", "type": "forcePushed"}, {"oid": "6d76e89821f25b9be604a8313e3d3c8fe952ff1b", "url": "https://github.com/crate/crate/commit/6d76e89821f25b9be604a8313e3d3c8fe952ff1b", "message": "Use bundled JDK instead of host system JDK.\n\nThis change makes it possible to configure a CrateDB JDK\nbundle via the jdks extension of the `jdk-download` Gradle\nplugin. See the JdkDownloadPlugin javadoc for the further\nusage instructions.\n\nThe JDK bundle is used for compilation, tests and packaged\nwith the CrateDB tarball.\n\nThe JDK version, vendor and platform are provided\nas properties. Conveniently, you can pass the properties\nas system properties for Gradle tasks, e.g.\n\n  ./gradlew test distTar  \\\n      -Dbundled_jdk_version=13.0.2+8 \\\n      -Dbundled_jdk_vendor=adoptopenjdk \\\n      -Dbundled_jdk_platform=linux", "committedDate": "2020-03-06T13:59:12Z", "type": "forcePushed"}, {"oid": "4fc9ea77fae51677ca45401d7f4719c83ff575df", "url": "https://github.com/crate/crate/commit/4fc9ea77fae51677ca45401d7f4719c83ff575df", "message": "Use bundled JDK instead of host system JDK.\n\nThis change makes it possible to configure a CrateDB JDK\nbundle via the jdks extension of the `jdk-download` Gradle\nplugin. See the JdkDownloadPlugin javadoc for the further\nusage instructions.\n\nThe JDK bundle is used for compilation, tests and packaged\nwith the CrateDB tarball.\n\nThe JDK version, vendor and platform are provided\nas properties. Conveniently, you can pass the properties\nas system properties for Gradle tasks, e.g.\n\n  ./gradlew test distTar  \\\n      -Dbundled_jdk_version=13.0.2+8 \\\n      -Dbundled_jdk_vendor=adoptopenjdk \\\n      -Dbundled_jdk_platform=linux", "committedDate": "2020-03-06T14:03:25Z", "type": "forcePushed"}, {"oid": "30ca3acb05d90d303093327132b3ce8321f34bfa", "url": "https://github.com/crate/crate/commit/30ca3acb05d90d303093327132b3ce8321f34bfa", "message": "Use bundled JDK instead of host system JDK.\n\nThis change makes it possible to configure a CrateDB JDK\nbundle via the jdks extension of the `jdk-download` Gradle\nplugin. See the JdkDownloadPlugin javadoc for the further\nusage instructions.\n\nThe JDK bundle is used for compilation, tests and packaged\nwith the CrateDB tarball.\n\nThe JDK version, vendor and platform are provided\nas properties. Conveniently, you can pass the properties\nas system properties for Gradle tasks, e.g.\n\n  ./gradlew test distTar  \\\n      -Dbundled_jdk_version=13.0.2+8 \\\n      -Dbundled_jdk_vendor=adoptopenjdk \\\n      -Dbundled_jdk_platform=linux", "committedDate": "2020-03-06T14:10:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzNzM3OA==", "url": "https://github.com/crate/crate/pull/9746#discussion_r388937378", "bodyText": "taken from es code base without any amendments", "author": "kovrus", "createdAt": "2020-03-06T14:36:20Z", "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/SymbolicLinkPreservingUntarTask.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.gradle.plugins.jdk;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.DirectoryProperty;\n+import org.gradle.api.file.RegularFileProperty;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.tasks.InputFile;\n+import org.gradle.api.tasks.Internal;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import javax.inject.Inject;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+/**\n+ * A custom task that explodes a tar archive that preserves symbolic links.\n+ *\n+ * This task is necessary because the built-in task {@link org.gradle.api.internal.file.archive.TarFileTree} does not preserve symbolic\n+ * links.\n+ */\n+public class SymbolicLinkPreservingUntarTask extends DefaultTask {", "originalCommit": "6df69c3f292c80578197c9493ae00e3f7896afd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da80ed12a318ff4f2ab57732ec3b358e7e4818d3", "url": "https://github.com/crate/crate/commit/da80ed12a318ff4f2ab57732ec3b358e7e4818d3", "message": "Use bundled JDK instead of host system JDK.\n\nThis change makes it possible to configure a CrateDB JDK\nbundle via the jdks extension of the `jdk-download` Gradle\nplugin. See the JdkDownloadPlugin javadoc for the further\nusage instructions.\n\nThe JDK bundle is used for compilation, tests and packaged\nwith the CrateDB tarball.\n\nThe JDK version, vendor and platform are provided\nas properties. Conveniently, you can pass the properties\nas system properties for Gradle tasks, e.g.\n\n  ./gradlew test distTar  \\\n      -Dbundled_jdk_version=13.0.2+8 \\\n      -Dbundled_jdk_vendor=adoptopenjdk \\\n      -Dbundled_jdk_platform=linux", "committedDate": "2020-03-08T14:55:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NjM5NQ==", "url": "https://github.com/crate/crate/pull/9746#discussion_r389556395", "bodyText": "Is this some gradle specific thing that this can't return a String directly?", "author": "mfussenegger", "createdAt": "2020-03-09T09:52:58Z", "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/Jdk.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.gradle.plugins.jdk;\n+\n+import org.gradle.api.Buildable;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.provider.Property;\n+import org.gradle.api.tasks.TaskDependency;\n+\n+import java.io.File;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class Jdk implements Buildable, Iterable<File> {\n+\n+    private static final List<String> ALLOWED_VENDORS = List.of(\"adoptopenjdk\");\n+    private static final List<String> ALLOWED_PLATFORMS = List.of(\"linux\", \"windows\", \"mac\");\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\n+        \"(\\\\d+)(\\\\.\\\\d+\\\\.\\\\d+)?\\\\+(\\\\d+(?:\\\\.\\\\d+)?)(@([a-f0-9]{32}))?\");\n+\n+    private final String name;\n+    private final Configuration configuration;\n+\n+    private final Property<String> vendor;\n+    private final Property<String> version;\n+    private final Property<String> platform;\n+    private String baseVersion;\n+    private String major;\n+    private String build;\n+    private String hash;\n+\n+    Jdk(String name, Configuration configuration, ObjectFactory objectFactory) {\n+        this.name = name;\n+        this.configuration = configuration;\n+        this.vendor = objectFactory.property(String.class);\n+        this.version = objectFactory.property(String.class);\n+        this.platform = objectFactory.property(String.class);\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String vendor() {\n+        return vendor.get();\n+    }\n+\n+    public void setVendor(final String vendor) {\n+        if (!ALLOWED_VENDORS.contains(vendor)) {\n+            throw new IllegalArgumentException(\n+                \"unknown vendor [\" + vendor + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_VENDORS);\n+        }\n+        this.vendor.set(vendor);\n+    }\n+\n+    public String version() {\n+        return version.get();\n+    }\n+\n+    public void setVersion(String version) {\n+        var versionMatcher = VERSION_PATTERN.matcher(version);\n+        if (!versionMatcher.matches()) {\n+            throw new IllegalArgumentException(\"malformed version [\" + version + \"] for jdk [\" + name + \"]\");\n+        }\n+        baseVersion = versionMatcher.group(1) + versionMatcher.group(2);\n+        major = versionMatcher.group(1);\n+        build = versionMatcher.group(3);\n+        hash = versionMatcher.group(5);\n+        this.version.set(version);\n+    }\n+\n+    public String platform() {\n+        return platform.get();\n+    }\n+\n+    public void setPlatform(String platform) {\n+        if (!ALLOWED_PLATFORMS.contains(platform)) {\n+            throw new IllegalArgumentException(\n+                \"unknown platform [\" + platform + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_PLATFORMS\n+            );\n+        }\n+        this.platform.set(platform);\n+    }\n+\n+    public String baseVersion() {\n+        return baseVersion;\n+    }\n+\n+    public String major() {\n+        return major;\n+    }\n+\n+    public String build() {\n+        return build;\n+    }\n+\n+    public String hash() {\n+        return hash;\n+    }\n+\n+    public String path() {\n+        return configuration.getSingleFile().toString();\n+    }\n+\n+    public Configuration configuration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return path();\n+    }\n+\n+    @Override\n+    public TaskDependency getBuildDependencies() {\n+        return configuration.getBuildDependencies();\n+    }\n+\n+    public Object getBinJavaPath() {", "originalCommit": "da80ed12a318ff4f2ab57732ec3b358e7e4818d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5MTE2Nw==", "url": "https://github.com/crate/crate/pull/9746#discussion_r389691167", "bodyText": "It doesn't work for some gradle reason. Seems like gradle relies on the toString call, e.g. https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#getVersion-- But String also has toString, i am not sure, have to look a bit why it is the case.", "author": "kovrus", "createdAt": "2020-03-09T13:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NjM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1Njc4Mw==", "url": "https://github.com/crate/crate/pull/9746#discussion_r389556783", "bodyText": "Might re-use getJavaHome here", "author": "mfussenegger", "createdAt": "2020-03-09T09:53:43Z", "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/Jdk.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.gradle.plugins.jdk;\n+\n+import org.gradle.api.Buildable;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.provider.Property;\n+import org.gradle.api.tasks.TaskDependency;\n+\n+import java.io.File;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class Jdk implements Buildable, Iterable<File> {\n+\n+    private static final List<String> ALLOWED_VENDORS = List.of(\"adoptopenjdk\");\n+    private static final List<String> ALLOWED_PLATFORMS = List.of(\"linux\", \"windows\", \"mac\");\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\n+        \"(\\\\d+)(\\\\.\\\\d+\\\\.\\\\d+)?\\\\+(\\\\d+(?:\\\\.\\\\d+)?)(@([a-f0-9]{32}))?\");\n+\n+    private final String name;\n+    private final Configuration configuration;\n+\n+    private final Property<String> vendor;\n+    private final Property<String> version;\n+    private final Property<String> platform;\n+    private String baseVersion;\n+    private String major;\n+    private String build;\n+    private String hash;\n+\n+    Jdk(String name, Configuration configuration, ObjectFactory objectFactory) {\n+        this.name = name;\n+        this.configuration = configuration;\n+        this.vendor = objectFactory.property(String.class);\n+        this.version = objectFactory.property(String.class);\n+        this.platform = objectFactory.property(String.class);\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String vendor() {\n+        return vendor.get();\n+    }\n+\n+    public void setVendor(final String vendor) {\n+        if (!ALLOWED_VENDORS.contains(vendor)) {\n+            throw new IllegalArgumentException(\n+                \"unknown vendor [\" + vendor + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_VENDORS);\n+        }\n+        this.vendor.set(vendor);\n+    }\n+\n+    public String version() {\n+        return version.get();\n+    }\n+\n+    public void setVersion(String version) {\n+        var versionMatcher = VERSION_PATTERN.matcher(version);\n+        if (!versionMatcher.matches()) {\n+            throw new IllegalArgumentException(\"malformed version [\" + version + \"] for jdk [\" + name + \"]\");\n+        }\n+        baseVersion = versionMatcher.group(1) + versionMatcher.group(2);\n+        major = versionMatcher.group(1);\n+        build = versionMatcher.group(3);\n+        hash = versionMatcher.group(5);\n+        this.version.set(version);\n+    }\n+\n+    public String platform() {\n+        return platform.get();\n+    }\n+\n+    public void setPlatform(String platform) {\n+        if (!ALLOWED_PLATFORMS.contains(platform)) {\n+            throw new IllegalArgumentException(\n+                \"unknown platform [\" + platform + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_PLATFORMS\n+            );\n+        }\n+        this.platform.set(platform);\n+    }\n+\n+    public String baseVersion() {\n+        return baseVersion;\n+    }\n+\n+    public String major() {\n+        return major;\n+    }\n+\n+    public String build() {\n+        return build;\n+    }\n+\n+    public String hash() {\n+        return hash;\n+    }\n+\n+    public String path() {\n+        return configuration.getSingleFile().toString();\n+    }\n+\n+    public Configuration configuration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return path();\n+    }\n+\n+    @Override\n+    public TaskDependency getBuildDependencies() {\n+        return configuration.getBuildDependencies();\n+    }\n+\n+    public Object getBinJavaPath() {\n+        return new Object() {\n+            @Override\n+            public String toString() {\n+                return path() + (\"mac\".equals(platform()) ? \"/Contents/Home\" : \"\") + \"/bin/java\";", "originalCommit": "da80ed12a318ff4f2ab57732ec3b358e7e4818d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5a1673fa6f061334d0a61620d7facbaa8136845d", "url": "https://github.com/crate/crate/commit/5a1673fa6f061334d0a61620d7facbaa8136845d", "message": "fixup! fixup! Use bundled JDK instead of host system JDK.", "committedDate": "2020-03-11T11:50:30Z", "type": "forcePushed"}, {"oid": "cb071ea1e42c7eeee2ee7081eebffda3805dd01b", "url": "https://github.com/crate/crate/commit/cb071ea1e42c7eeee2ee7081eebffda3805dd01b", "message": "fixup! fixup! Use bundled JDK instead of host system JDK.", "committedDate": "2020-03-11T12:01:23Z", "type": "forcePushed"}, {"oid": "4a72d5a5e930e6b2b99b33e940057040be728421", "url": "https://github.com/crate/crate/commit/4a72d5a5e930e6b2b99b33e940057040be728421", "message": "Use bundled JDK instead of host system JDK.\n\nThis change makes it possible to configure a CrateDB JDK\nbundle via the jdks extension of the `jdk-download` Gradle\nplugin. See the JdkDownloadPlugin javadoc for the further\nusage instructions.\n\nThe JDK bundle is used for compilation, tests and packaged\nwith the CrateDB tarball.\n\nThe JDK version, vendor and platform are provided\nas properties. Conveniently, you can pass the properties\nas system properties for Gradle tasks, e.g.\n\n  ./gradlew test distTar  \\\n      -Dbundled_jdk_version=13.0.2+8 \\\n      -Dbundled_jdk_vendor=adoptopenjdk \\\n      -Dbundled_jdk_platform=linux", "committedDate": "2020-03-11T12:10:35Z", "type": "commit"}, {"oid": "4a72d5a5e930e6b2b99b33e940057040be728421", "url": "https://github.com/crate/crate/commit/4a72d5a5e930e6b2b99b33e940057040be728421", "message": "Use bundled JDK instead of host system JDK.\n\nThis change makes it possible to configure a CrateDB JDK\nbundle via the jdks extension of the `jdk-download` Gradle\nplugin. See the JdkDownloadPlugin javadoc for the further\nusage instructions.\n\nThe JDK bundle is used for compilation, tests and packaged\nwith the CrateDB tarball.\n\nThe JDK version, vendor and platform are provided\nas properties. Conveniently, you can pass the properties\nas system properties for Gradle tasks, e.g.\n\n  ./gradlew test distTar  \\\n      -Dbundled_jdk_version=13.0.2+8 \\\n      -Dbundled_jdk_vendor=adoptopenjdk \\\n      -Dbundled_jdk_platform=linux", "committedDate": "2020-03-11T12:10:35Z", "type": "forcePushed"}]}