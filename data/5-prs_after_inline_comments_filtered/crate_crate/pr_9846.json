{"pr_number": 9846, "pr_title": "Refactor some of aggregation functions to use the new function registry. ", "pr_createdAt": "2020-04-02T14:21:34Z", "pr_url": "https://github.com/crate/crate/pull/9846", "timeline": [{"oid": "9b834a0d537dc996a9bd6b27b345f5020fd87c18", "url": "https://github.com/crate/crate/commit/9b834a0d537dc996a9bd6b27b345f5020fd87c18", "message": "Refactor hyperloglog_distinct function to use new function registry.", "committedDate": "2020-04-02T14:37:44Z", "type": "forcePushed"}, {"oid": "68f6078f518d1df5272f8b041be840c9f4557ef6", "url": "https://github.com/crate/crate/commit/68f6078f518d1df5272f8b041be840c9f4557ef6", "message": "Refactor hyperloglog_distinct function to use new function registry.", "committedDate": "2020-04-03T09:25:54Z", "type": "forcePushed"}, {"oid": "877afd13e2d0e54063339e51210a2d35a0e81cd6", "url": "https://github.com/crate/crate/commit/877afd13e2d0e54063339e51210a2d35a0e81cd6", "message": "Refactor hyperloglog_distinct function to use new function registry.", "committedDate": "2020-04-03T09:47:01Z", "type": "forcePushed"}, {"oid": "0d6ea4ecf61c5eec39d13307b1a10d67fe5f01fa", "url": "https://github.com/crate/crate/commit/0d6ea4ecf61c5eec39d13307b1a10d67fe5f01fa", "message": "Refactor hyperloglog_distinct function to use new function registry.", "committedDate": "2020-04-14T08:35:34Z", "type": "forcePushed"}, {"oid": "0c0d714752c290a2a95946fe33f8799777bd79d2", "url": "https://github.com/crate/crate/commit/0c0d714752c290a2a95946fe33f8799777bd79d2", "message": "Refactor hyperloglog_distinct function to use new function registry.", "committedDate": "2020-04-14T19:38:55Z", "type": "forcePushed"}, {"oid": "2627a9b4941164c8d21deb036c0ffb61a61fe46c", "url": "https://github.com/crate/crate/commit/2627a9b4941164c8d21deb036c0ffb61a61fe46c", "message": "Refactor hyperloglog_distinct function to use new function registry.", "committedDate": "2020-04-15T07:47:29Z", "type": "forcePushed"}, {"oid": "73a9acc849d6280503792f8ced4a236df94f989a", "url": "https://github.com/crate/crate/commit/73a9acc849d6280503792f8ced4a236df94f989a", "message": "Refactor sum agg function to use new function registry.", "committedDate": "2020-04-14T19:38:55Z", "type": "forcePushed"}, {"oid": "16b65d9cabfe1939558024903f11458158af3599", "url": "https://github.com/crate/crate/commit/16b65d9cabfe1939558024903f11458158af3599", "message": "Refactor sum agg function to use new function registry.", "committedDate": "2020-04-15T10:13:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5MjE4NQ==", "url": "https://github.com/crate/crate/pull/9846#discussion_r411192185", "bodyText": "minor: We could decide this outside of the factory method to avoid \"on-call/on-demand\" instanceof checks", "author": "seut", "createdAt": "2020-04-20T08:30:31Z", "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/MaximumAggregation.java", "diffHunk": "@@ -45,15 +45,26 @@\n     private final FunctionInfo info;\n \n     public static void register(AggregationImplModule mod) {\n-        for (final DataType dataType : DataTypes.PRIMITIVE_TYPES) {\n-            FunctionInfo functionInfo = new FunctionInfo(\n-                new FunctionIdent(NAME, ImmutableList.of(dataType)), dataType, FunctionInfo.Type.AGGREGATE);\n-\n-            if (dataType instanceof FixedWidthType) {\n-                mod.register(new FixedMaximumAggregation(functionInfo));\n-            } else {\n-                mod.register(new VariableMaximumAggregation(functionInfo));\n-            }\n+        for (var supportedType : DataTypes.PRIMITIVE_TYPES) {\n+            mod.register(\n+                Signature.aggregate(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature()),\n+                args -> {\n+                    var arg = args.get(0); // f(x) -> x\n+                    var info = new FunctionInfo(\n+                        new FunctionIdent(NAME, args),\n+                        arg,\n+                        FunctionInfo.Type.AGGREGATE\n+                    );\n+                    if (arg instanceof FixedWidthType) {\n+                        return new FixedMaximumAggregation(info);\n+                    } else {\n+                        return new VariableMaximumAggregation(info);", "originalCommit": "16b65d9cabfe1939558024903f11458158af3599", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5MjYyOA==", "url": "https://github.com/crate/crate/pull/9846#discussion_r411192628", "bodyText": "same here: could be decided outside of the factory", "author": "seut", "createdAt": "2020-04-20T08:31:08Z", "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/MinimumAggregation.java", "diffHunk": "@@ -45,15 +45,26 @@\n     private final FunctionInfo info;\n \n     public static void register(AggregationImplModule mod) {\n-        for (final DataType dataType : DataTypes.PRIMITIVE_TYPES) {\n-            FunctionInfo functionInfo = new FunctionInfo(new FunctionIdent(NAME, ImmutableList.of(dataType)),\n-                dataType, FunctionInfo.Type.AGGREGATE);\n-\n-            if (dataType instanceof FixedWidthType) {\n-                mod.register(new FixedMinimumAggregation(functionInfo));\n-            } else {\n-                mod.register(new VariableMinimumAggregation(functionInfo));\n-            }\n+        for (var supportedType : DataTypes.PRIMITIVE_TYPES) {\n+            mod.register(\n+                Signature.aggregate(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature()),\n+                args -> {\n+                    var arg = args.get(0); // f(x) -> x\n+                    var info = new FunctionInfo(\n+                        new FunctionIdent(NAME, args),\n+                        arg,\n+                        FunctionInfo.Type.AGGREGATE\n+                    );\n+                    if (arg instanceof FixedWidthType) {\n+                        return new FixedMinimumAggregation(info);\n+                    } else {\n+                        return new VariableMinimumAggregation(info);", "originalCommit": "16b65d9cabfe1939558024903f11458158af3599", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NTk2Mw==", "url": "https://github.com/crate/crate/pull/9846#discussion_r411195963", "bodyText": "The return type is always LONG", "author": "seut", "createdAt": "2020-04-20T08:36:07Z", "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/SumAggregation.java", "diffHunk": "@@ -28,29 +28,49 @@\n import io.crate.memory.MemoryManager;\n import io.crate.metadata.FunctionIdent;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n import io.crate.types.DataTypes;\n import org.elasticsearch.Version;\n import org.elasticsearch.common.breaker.CircuitBreakingException;\n \n import javax.annotation.Nullable;\n import java.util.Collections;\n+import java.util.List;\n import java.util.function.BinaryOperator;\n \n public class SumAggregation<T extends Number> extends AggregationFunction<T, T> {\n \n     public static final String NAME = \"sum\";\n \n     public static void register(AggregationImplModule mod) {\n-        final BinaryOperator<Long> add = Math::addExact;\n-        final BinaryOperator<Long> substract = Math::subtractExact;\n-\n-        mod.register(new SumAggregation<Float>(DataTypes.FLOAT, (n1, n2) -> n1 + n2, (n1, n2) -> n1 - n2));\n-        mod.register(new SumAggregation<Double>(DataTypes.DOUBLE, (n1, n2) -> n1 + n2, (n1, n2) -> n1 - n2));\n-        mod.register(new SumAggregation<>(DataTypes.BYTE, DataTypes.LONG, add, substract));\n-        mod.register(new SumAggregation<>(DataTypes.SHORT, DataTypes.LONG, add, substract));\n-        mod.register(new SumAggregation<>(DataTypes.INTEGER, DataTypes.LONG, add, substract));\n-        mod.register(new SumAggregation<>(DataTypes.LONG, add, substract));\n+        BinaryOperator<Long> add = Math::addExact;\n+        BinaryOperator<Long> sub = Math::subtractExact;\n+\n+        mod.register(\n+            Signature.aggregate(\n+                NAME,\n+                DataTypes.FLOAT.getTypeSignature(),\n+                DataTypes.FLOAT.getTypeSignature()),\n+            args -> new SumAggregation<>(DataTypes.FLOAT, Float::sum, (n1, n2) -> n1 - n2)\n+        );\n+        mod.register(\n+            Signature.aggregate(\n+                NAME,\n+                DataTypes.DOUBLE.getTypeSignature(),\n+                DataTypes.DOUBLE.getTypeSignature()),\n+            args -> new SumAggregation<>(DataTypes.DOUBLE, Double::sum, (n1, n2) -> n1 - n2)\n+        );\n+\n+        for (var supportedType : List.of(DataTypes.BYTE, DataTypes.SHORT, DataTypes.INTEGER, DataTypes.LONG)) {\n+            mod.register(\n+                Signature.aggregate(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature()),", "originalCommit": "16b65d9cabfe1939558024903f11458158af3599", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a697c562e5b71cafa80560334c2b70e6a1f5e76a", "url": "https://github.com/crate/crate/commit/a697c562e5b71cafa80560334c2b70e6a1f5e76a", "message": "Refactor arbitraty agg function to use new function registry.", "committedDate": "2020-04-20T08:41:52Z", "type": "commit"}, {"oid": "20a84f5c7008480eaf2427a3cdd3622868ac0f26", "url": "https://github.com/crate/crate/commit/20a84f5c7008480eaf2427a3cdd3622868ac0f26", "message": "fixup! Refactor sum agg function to use new function registry.", "committedDate": "2020-04-20T08:54:02Z", "type": "forcePushed"}, {"oid": "5ac9d6fa95f840cbd215e8f5d5daf6d33e6a3973", "url": "https://github.com/crate/crate/commit/5ac9d6fa95f840cbd215e8f5d5daf6d33e6a3973", "message": "Refactor min/max agg functions to use new function registry.", "committedDate": "2020-04-20T09:49:36Z", "type": "commit"}, {"oid": "5572b79a8ebbe0bb89d0f95aa8091586f8ce520b", "url": "https://github.com/crate/crate/commit/5572b79a8ebbe0bb89d0f95aa8091586f8ce520b", "message": "Refactor percentile agg function to use new function registry.", "committedDate": "2020-04-20T09:49:36Z", "type": "commit"}, {"oid": "6d910460f0a289fce0563d265d29c1e718dcdea7", "url": "https://github.com/crate/crate/commit/6d910460f0a289fce0563d265d29c1e718dcdea7", "message": "Refactor collect_set agg function to use new function registry.", "committedDate": "2020-04-20T09:49:36Z", "type": "commit"}, {"oid": "daf2e2bc51727aa935699354c35702fd71bb53bd", "url": "https://github.com/crate/crate/commit/daf2e2bc51727aa935699354c35702fd71bb53bd", "message": "Refactor statistics functions to use new function registry.\n\n- variance\n- geometric_mean\n- sdv\n- mean/avg", "committedDate": "2020-04-20T09:49:36Z", "type": "commit"}, {"oid": "f9330b7c6863ff235693ba63cf0b9509d205ab02", "url": "https://github.com/crate/crate/commit/f9330b7c6863ff235693ba63cf0b9509d205ab02", "message": "Refactor sum agg function to use new function registry.", "committedDate": "2020-04-20T09:49:36Z", "type": "commit"}, {"oid": "f9330b7c6863ff235693ba63cf0b9509d205ab02", "url": "https://github.com/crate/crate/commit/f9330b7c6863ff235693ba63cf0b9509d205ab02", "message": "Refactor sum agg function to use new function registry.", "committedDate": "2020-04-20T09:49:36Z", "type": "forcePushed"}]}