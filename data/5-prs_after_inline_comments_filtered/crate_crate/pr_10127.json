{"pr_number": 10127, "pr_title": "Fix ORDER BY handling on table functions", "pr_createdAt": "2020-06-24T09:52:43Z", "pr_url": "https://github.com/crate/crate/pull/10127", "timeline": [{"oid": "ce7171896a446f8366797f6442a55d3a0f09a837", "url": "https://github.com/crate/crate/commit/ce7171896a446f8366797f6442a55d3a0f09a837", "message": "Fix ORDER BY handling on table functions\n\nFixes https://github.com/crate/crate/issues/10122\n\nThis got already fixed in master with the changes to how the operator\ntree is built.\n\nIn 4.1 the standalone outputs contained the table-function un-evaluated\n(which is an `Iterable<Row>` value - for which there is no type and no\nsize estimator, which led to a runtime exception)", "committedDate": "2020-06-24T09:43:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTE3MQ==", "url": "https://github.com/crate/crate/pull/10127#discussion_r444781171", "bodyText": "Do you think it makes sense to port this change back to master as well? I think the column-pruning optimization \"fixes\" this in master.", "author": "mfussenegger", "createdAt": "2020-06-24T09:55:35Z", "path": "sql/src/main/java/io/crate/planner/operators/ProjectSet.java", "diffHunk": "@@ -57,15 +58,9 @@\n             allUsedColumns.addAll(columnsUsedInTableFunctions);\n             LogicalPlan sourcePlan = source.build(tableStats, hints, allUsedColumns, params);\n \n-            // Use sourcePlan.outputs() as standalone to simply pass along all source outputs as well;\n-            // Parent operators will discard them if not required\n-            // The reason to do this is that we've no good way to detect what is required. E.g.\n-            // select tableFunction(agg), agg, x\n-            //  -> agg is used as argument in tableFunction, but is also standalone,\n-            //     so we can't simply discard any source outputs that are used as arguments for the table functions.\n-            //  -> x might be converted to _fetch by the Collect operator,\n-            //       so we don't necessarily \"get\" the outputs we would expect based on the select list.\n-            return new ProjectSet(sourcePlan, tableFunctions, sourcePlan.outputs());\n+            ArrayList<Symbol> standalone = new ArrayList<>(sourcePlan.outputs());\n+            standalone.removeAll(tableFunctions);\n+            return new ProjectSet(sourcePlan, tableFunctions, standalone);", "originalCommit": "ce7171896a446f8366797f6442a55d3a0f09a837", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNjE2NA==", "url": "https://github.com/crate/crate/pull/10127#discussion_r444806164", "bodyText": "Yes makes sense.", "author": "seut", "createdAt": "2020-06-24T10:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzNTY4MA==", "url": "https://github.com/crate/crate/pull/10127#discussion_r444835680", "bodyText": "Had a look, it's not the column pruning but also that we build the operators differently. sourcePlan.outputs() will never contain the table functions in the first place.", "author": "mfussenegger", "createdAt": "2020-06-24T11:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTE3MQ=="}], "type": "inlineReview"}]}