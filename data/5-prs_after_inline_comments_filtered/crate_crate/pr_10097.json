{"pr_number": 10097, "pr_title": "Limit line_numbers to 50 in the presence of errors when using  COPY FROM RETURN SUMMARY", "pr_createdAt": "2020-06-18T09:51:24Z", "pr_url": "https://github.com/crate/crate/pull/10097", "timeline": [{"oid": "4574473719ebcafea98c88eba144d268ca115aff", "url": "https://github.com/crate/crate/commit/4574473719ebcafea98c88eba144d268ca115aff", "message": "Add test", "committedDate": "2020-06-18T13:52:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2Njk5MQ==", "url": "https://github.com/crate/crate/pull/10097#discussion_r442266991", "bodyText": "Using assertThat is prefered over assertEquals as it returns nicer errors messages. Also the API has clearer definitions of which argument is expected  and which given.\nLooks like using it would also highlight current test failure in a better way ;-)", "author": "seut", "createdAt": "2020-06-18T14:25:19Z", "path": "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java", "diffHunk": "@@ -705,6 +705,42 @@ public void testCopyWithGeneratedPartitionColumnThatIsPartOfPrimaryKey() throws\n         assertThat(response.rowCount(), is(2L));\n     }\n \n+    @Test\n+    public void test_copy_from_return_summary_with_failed_rows_line_numers_limitted_to_50() throws Exception {\n+\n+        execute(\"create table tmp_t1 (v integer)\");\n+        Path tmpDir = newTempDir(LifecycleScope.TEST);\n+        Path target = Files.createDirectories(tmpDir.resolve(\"target\"));\n+        String fileName = \"uzulo.json\";\n+\n+        // two correct inserts\n+        tmpFileWithLines(Arrays.asList(\n+            \"{\\\"v\\\": 100}\",\n+            \"{\\\"v\\\": 200}\"\n+        ), fileName, target);\n+\n+        int numBrokenInserts = 60;\n+        String [] brokenInserts = new String[numBrokenInserts];\n+        for (int i=0; i < numBrokenInserts; i++) {\n+            brokenInserts[i] = String.format(\"{ \\\"v\\\": %d, \\\"bob\\\": 42\", i); // bob is unexpected\n+        }\n+        tmpFileWithLines(Arrays.asList(brokenInserts), fileName, target);\n+\n+        execute(\"copy tmp_t1 from ? return summary\", new Object[]{target.toUri().toString() + \"*\"});\n+\n+        assertThat(printedTable(response.rows()),\n+                   containsString(\"mapping set to strict, dynamic introduction of [bob] within [default] is not allowed\"));\n+\n+        assertEquals(response.rows()[1].length, 5);", "originalCommit": "a8adafd1268f734c2e76b596991ac923952d84f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI3MDA5NQ==", "url": "https://github.com/crate/crate/pull/10097#discussion_r442270095", "bodyText": "nitpick: the following assertion would already fail if it is missing.", "author": "seut", "createdAt": "2020-06-18T14:29:24Z", "path": "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java", "diffHunk": "@@ -705,6 +705,42 @@ public void testCopyWithGeneratedPartitionColumnThatIsPartOfPrimaryKey() throws\n         assertThat(response.rowCount(), is(2L));\n     }\n \n+    @Test\n+    public void test_copy_from_return_summary_with_failed_rows_line_numers_limitted_to_50() throws Exception {\n+\n+        execute(\"create table tmp_t1 (v integer)\");\n+        Path tmpDir = newTempDir(LifecycleScope.TEST);\n+        Path target = Files.createDirectories(tmpDir.resolve(\"target\"));\n+        String fileName = \"uzulo.json\";\n+\n+        // two correct inserts\n+        tmpFileWithLines(Arrays.asList(\n+            \"{\\\"v\\\": 100}\",\n+            \"{\\\"v\\\": 200}\"\n+        ), fileName, target);\n+\n+        int numBrokenInserts = 60;\n+        String [] brokenInserts = new String[numBrokenInserts];\n+        for (int i=0; i < numBrokenInserts; i++) {\n+            brokenInserts[i] = String.format(\"{ \\\"v\\\": %d, \\\"bob\\\": 42\", i); // bob is unexpected\n+        }\n+        tmpFileWithLines(Arrays.asList(brokenInserts), fileName, target);\n+\n+        execute(\"copy tmp_t1 from ? return summary\", new Object[]{target.toUri().toString() + \"*\"});\n+\n+        assertThat(printedTable(response.rows()),\n+                   containsString(\"mapping set to strict, dynamic introduction of [bob] within [default] is not allowed\"));\n+\n+        assertEquals(response.rows()[1].length, 5);\n+        for (Map<String, Object> mappingError: ((Map<String, Map<String, Object>>) response.rows()[1][4]).values()) {\n+            assertTrue(mappingError.containsKey(\"count\"));", "originalCommit": "a8adafd1268f734c2e76b596991ac923952d84f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI3MTIwNw==", "url": "https://github.com/crate/crate/pull/10097#discussion_r442271207", "bodyText": "Same nitpick here, I think this is unnecessary.", "author": "seut", "createdAt": "2020-06-18T14:30:43Z", "path": "server/src/test/java/io/crate/integrationtests/CopyIntegrationTest.java", "diffHunk": "@@ -705,6 +705,42 @@ public void testCopyWithGeneratedPartitionColumnThatIsPartOfPrimaryKey() throws\n         assertThat(response.rowCount(), is(2L));\n     }\n \n+    @Test\n+    public void test_copy_from_return_summary_with_failed_rows_line_numers_limitted_to_50() throws Exception {\n+\n+        execute(\"create table tmp_t1 (v integer)\");\n+        Path tmpDir = newTempDir(LifecycleScope.TEST);\n+        Path target = Files.createDirectories(tmpDir.resolve(\"target\"));\n+        String fileName = \"uzulo.json\";\n+\n+        // two correct inserts\n+        tmpFileWithLines(Arrays.asList(\n+            \"{\\\"v\\\": 100}\",\n+            \"{\\\"v\\\": 200}\"\n+        ), fileName, target);\n+\n+        int numBrokenInserts = 60;\n+        String [] brokenInserts = new String[numBrokenInserts];\n+        for (int i=0; i < numBrokenInserts; i++) {\n+            brokenInserts[i] = String.format(\"{ \\\"v\\\": %d, \\\"bob\\\": 42\", i); // bob is unexpected\n+        }\n+        tmpFileWithLines(Arrays.asList(brokenInserts), fileName, target);\n+\n+        execute(\"copy tmp_t1 from ? return summary\", new Object[]{target.toUri().toString() + \"*\"});\n+\n+        assertThat(printedTable(response.rows()),\n+                   containsString(\"mapping set to strict, dynamic introduction of [bob] within [default] is not allowed\"));\n+\n+        assertEquals(response.rows()[1].length, 5);\n+        for (Map<String, Object> mappingError: ((Map<String, Map<String, Object>>) response.rows()[1][4]).values()) {\n+            assertTrue(mappingError.containsKey(\"count\"));\n+            assertEquals(mappingError.get(\"count\"), (long) numBrokenInserts);\n+            assertTrue(mappingError.containsKey(\"line_numbers\"));", "originalCommit": "a8adafd1268f734c2e76b596991ac923952d84f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c41a99336cb8c5a14e74f81d6c802211a59788a8", "url": "https://github.com/crate/crate/commit/c41a99336cb8c5a14e74f81d6c802211a59788a8", "message": "Limit the number of returned 'line_numbers' to 50 (COPY FROM RETURN SUMMARY)\n\nHaving thousands of line numbers is not helpful and puts a lot of pressure\non the client.", "committedDate": "2020-06-18T19:01:17Z", "type": "commit"}, {"oid": "c41a99336cb8c5a14e74f81d6c802211a59788a8", "url": "https://github.com/crate/crate/commit/c41a99336cb8c5a14e74f81d6c802211a59788a8", "message": "Limit the number of returned 'line_numbers' to 50 (COPY FROM RETURN SUMMARY)\n\nHaving thousands of line numbers is not helpful and puts a lot of pressure\non the client.", "committedDate": "2020-06-18T19:01:17Z", "type": "forcePushed"}]}