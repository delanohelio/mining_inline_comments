{"pr_number": 9640, "pr_title": "Add ``mod`` alias for the ``modulus`` scalar function", "pr_createdAt": "2020-02-10T14:38:40Z", "pr_url": "https://github.com/crate/crate/pull/9640", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwOTQzNg==", "url": "https://github.com/crate/crate/pull/9640#discussion_r377209436", "bodyText": "lgtm\njust a side note, this function is also registered for interval and timestamp types. not sure if it makes sense.", "author": "kovrus", "createdAt": "2020-02-10T17:32:02Z", "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/ArithmeticFunctions.java", "diffHunk": "@@ -109,15 +110,20 @@ public static void register(ScalarFunctionModule module) {\n             (arg0, arg1) -> arg0 / arg1,\n             (arg0, arg1) -> arg0 / arg1\n         ));\n-        module.register(Names.MODULUS, new ArithmeticFunctionResolver(\n-            Names.MODULUS,\n-            \"%\",\n-            FunctionInfo.DETERMINISTIC_ONLY,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1\n-        ));\n+\n+        java.util.function.Function<String, ArithmeticFunctionResolver> modFunctionResolverFactory =\n+            name -> new ArithmeticFunctionResolver(\n+                name,\n+                \"%\",\n+                FunctionInfo.DETERMINISTIC_ONLY,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1\n+            );\n+\n+        module.register(Names.MODULUS, modFunctionResolverFactory.apply(Names.MODULUS));", "originalCommit": "c6b50bd4a43e6f011db78bc4f10de729c36655a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NDM5Mg==", "url": "https://github.com/crate/crate/pull/9640#discussion_r377564392", "bodyText": "Yes good point, also even if not making sense it won't brake. We could remove that support later on if you think we should.", "author": "seut", "createdAt": "2020-02-11T10:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwOTQzNg=="}], "type": "inlineReview"}, {"oid": "6d7bacfb5d399c6188364941505893dc7d751c1c", "url": "https://github.com/crate/crate/commit/6d7bacfb5d399c6188364941505893dc7d751c1c", "message": "Add missing documentation and tests for the ``modulus`` scalar.", "committedDate": "2020-02-11T12:30:34Z", "type": "commit"}, {"oid": "6e3e785320f347a0b82287f60331b66c323b3890", "url": "https://github.com/crate/crate/commit/6e3e785320f347a0b82287f60331b66c323b3890", "message": "Add ``mod`` alias for the ``modulus`` scalar function", "committedDate": "2020-02-11T12:30:59Z", "type": "commit"}, {"oid": "6e3e785320f347a0b82287f60331b66c323b3890", "url": "https://github.com/crate/crate/commit/6e3e785320f347a0b82287f60331b66c323b3890", "message": "Add ``mod`` alias for the ``modulus`` scalar function", "committedDate": "2020-02-11T12:30:59Z", "type": "forcePushed"}]}