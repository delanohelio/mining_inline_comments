{"pr_number": 9481, "pr_title": "Add returning clause to update-by-id usecase to the storage engine", "pr_createdAt": "2020-01-06T11:34:50Z", "pr_url": "https://github.com/crate/crate/pull/9481", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI1OTIzMw==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363259233", "bodyText": "AnalyzedRelation and AnalyzedUpdateStatement and also later AnalyzedInsertStatement could share an interface marking these 3 classes that they have outputfields to simplify the code here. Something like\ninterface OutputFieldStatement { Fields fields(); }", "author": "mkleen", "createdAt": "2020-01-06T11:36:56Z", "path": "sql/src/main/java/io/crate/action/sql/Session.java", "diffHunk": "@@ -314,6 +316,8 @@ public DescribeResult describe(char type, String portalOrStatement) {\n                 AnalyzedStatement analyzedStmt = portal.boundOrUnboundStatement();\n                 if (analyzedStmt instanceof AnalyzedRelation) {\n                     return new DescribeResult(((AnalyzedRelation) analyzedStmt).fields());\n+                } else if (analyzedStmt instanceof AnalyzedUpdateStatement) {", "originalCommit": "4d89916897b5ec229885efc5612ed240a0d24173", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMzQyNA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363313424", "bodyText": "Sounds reasonable, I think ResultSetStatement  describes the iface better (maybe we can come up with an even better name?).", "author": "seut", "createdAt": "2020-01-06T14:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI1OTIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI1OTczMA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363259730", "bodyText": "The serialization can be optimized here, since the types of the rows are already known. Also the version needs to taking into account for backward compatibility.", "author": "mkleen", "createdAt": "2020-01-06T11:38:42Z", "path": "sql/src/main/java/io/crate/execution/dml/ShardResponse.java", "diffHunk": "@@ -160,6 +177,15 @@ public void writeTo(StreamOutput out) throws IOException {\n         } else {\n             out.writeBoolean(false);\n         }\n+\n+        if (values != null) {", "originalCommit": "4d89916897b5ec229885efc5612ed240a0d24173", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6c1ab554597ffcbe21509bdc28e966bf5e263c8c", "url": "https://github.com/crate/crate/commit/6c1ab554597ffcbe21509bdc28e966bf5e263c8c", "message": "Remove uneeded import", "committedDate": "2020-01-06T12:28:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI4NTExMA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363285110", "bodyText": "ShardUpsertRequest contains already the information for a lot of use cases. It would make sense to split this eventually up as @mfussenegger already suggested.", "author": "mkleen", "createdAt": "2020-01-06T13:05:44Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/ShardUpsertRequest.java", "diffHunk": "@@ -73,13 +73,20 @@\n     @Nullable\n     private Streamer[] insertValuesStreamer;\n \n+    /**", "originalCommit": "6c1ab554597ffcbe21509bdc28e966bf5e263c8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NTMwOA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r365185308", "bodyText": "I would probably tackle this later.", "author": "mkleen", "createdAt": "2020-01-10T11:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI4NTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwMjE0Ng==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363302146", "bodyText": "Would it make sense to split this class into 2 separate executors one for counting, one to retrieve return values ? Or maybe expose the possibility to handle ActionListener to the caller and leave the way the return values are handled to the outside of this class ?", "author": "mkleen", "createdAt": "2020-01-06T13:55:18Z", "path": "sql/src/main/java/io/crate/execution/dml/ShardRequestExecutor.java", "diffHunk": "@@ -98,16 +101,21 @@ public ShardRequestExecutor(ClusterService clusterService,\n     }\n \n     public void execute(RowConsumer consumer, Row parameters, SubQueryResults subQueryResults) {", "originalCommit": "5357a375736e70784994ba92fe561dc5fcf4e744", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMzMDg4MA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363330880", "bodyText": "Another option would be to leave conversion helper methods here (they can be all static afaik) and built the MultiActionListener at the caller (or using static methods which may stay here). I think most of the stuff here is already very generic so splitting this up into 2 implementations just for wrangling the results sounds a bit too much to me.", "author": "seut", "createdAt": "2020-01-06T15:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwMjE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NTQwMw==", "url": "https://github.com/crate/crate/pull/9481#discussion_r365185403", "bodyText": "Would the current state be sufficient ?", "author": "mkleen", "createdAt": "2020-01-10T11:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMwMjE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxNDY0Ng==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363314646", "bodyText": "Multiple rows may returned here.", "author": "seut", "createdAt": "2020-01-06T14:26:53Z", "path": "sql/src/main/java/io/crate/execution/dml/ShardRequestExecutor.java", "diffHunk": "@@ -183,7 +191,35 @@ private static ShardId getShardId(ClusterService clusterService,\n         ).shardId();\n     }\n \n-    private static void updateRowCountOrFail(long[] rowCount, ShardResponse response) {\n+    private ActionListener<ShardResponse> rowCountListener(RowConsumer consumer, int numberResponse) {\n+        return new MultiActionListener<>(\n+            numberResponse,\n+            () -> new long[]{0},\n+            this::countRows,\n+            rowCount -> new Row1(rowCount[0]),\n+            new OneRowActionListener<>(consumer, Function.identity())\n+        );\n+    }\n+\n+    private ActionListener<ShardResponse> collectValuesListener(RowConsumer consumer, int numberResponse) {\n+        return new MultiActionListener<>(\n+            numberResponse,\n+            ArrayList::new,\n+            this::collectValues,\n+            result -> result.isEmpty() ? Row.EMPTY : new RowN(result.toArray()),\n+            new OneRowActionListener<>(consumer, Function.identity())", "originalCommit": "b5b9a2a8795b7a6aae51cee82e5bdf9f2dd96dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY0ODkyMQ==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363648921", "bodyText": "Yes, good point, this is not correct. This is the wrong type here. My guess is that the result type should be List<Row> and not a Row, there is also a deduplication step missing I assume. I will come back to this.", "author": "mkleen", "createdAt": "2020-01-07T09:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxNDY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxNDk5Mw==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363314993", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ActionListener<ShardResponse> collectValuesListener(RowConsumer consumer, int numberResponse) {\n          \n          \n            \n                private ActionListener<ShardResponse> resultSetListener(RowConsumer consumer, int numberResponse) {", "author": "seut", "createdAt": "2020-01-06T14:27:44Z", "path": "sql/src/main/java/io/crate/execution/dml/ShardRequestExecutor.java", "diffHunk": "@@ -183,7 +191,35 @@ private static ShardId getShardId(ClusterService clusterService,\n         ).shardId();\n     }\n \n-    private static void updateRowCountOrFail(long[] rowCount, ShardResponse response) {\n+    private ActionListener<ShardResponse> rowCountListener(RowConsumer consumer, int numberResponse) {\n+        return new MultiActionListener<>(\n+            numberResponse,\n+            () -> new long[]{0},\n+            this::countRows,\n+            rowCount -> new Row1(rowCount[0]),\n+            new OneRowActionListener<>(consumer, Function.identity())\n+        );\n+    }\n+\n+    private ActionListener<ShardResponse> collectValuesListener(RowConsumer consumer, int numberResponse) {", "originalCommit": "b5b9a2a8795b7a6aae51cee82e5bdf9f2dd96dae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyMzg5Mw==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363323893", "bodyText": "Looks like an Object[] could be used directly as the length is known", "author": "seut", "createdAt": "2020-01-06T14:48:42Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/ReturnValueGen.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml.upsert;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.BaseImplementationSymbolVisitor;\n+import io.crate.expression.reference.Doc;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.Reference;\n+import io.crate.metadata.TransactionContext;\n+\n+import java.util.ArrayList;\n+\n+final class ReturnValueGen {\n+\n+    private final ReturnEvaluator returnEval;\n+\n+    ReturnValueGen(TransactionContext txnCtx, Functions functions) {\n+        this.returnEval = new ReturnEvaluator(functions, txnCtx);\n+    }\n+\n+    Object[] generateReturnValues(Doc doc, Symbol[] returnValues) {\n+        ArrayList<Object> result = new ArrayList<>();", "originalCommit": "b5b9a2a8795b7a6aae51cee82e5bdf9f2dd96dae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17f078765296b0659610be73f38e57c352d89ca9", "url": "https://github.com/crate/crate/commit/17f078765296b0659610be73f38e57c352d89ca9", "message": "Introduce ResultSetStatement to mark Statements with Resultsets", "committedDate": "2020-01-06T14:58:10Z", "type": "forcePushed"}, {"oid": "e3e0c2eaa557e74e6a5c25d98e18a94d72377acd", "url": "https://github.com/crate/crate/commit/e3e0c2eaa557e74e6a5c25d98e18a94d72377acd", "message": "Make systemcolumns available as return values", "committedDate": "2020-01-07T07:48:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1MjcxNQ==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363652715", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ResultSetStatement update = (ResultSetStatement) analyzedStatement;\n          \n          \n            \n                        ResultSetStatement statement = (ResultSetStatement) analyzedStatement;\n          \n      \n    \n    \n  \n\nupdate in this context is too specific, this can be any kind of statement.\nPersonally I'd also remove the local result variable and return directly (so you don't have to backtrack to see what has been assigned to result), but that's a personal preference so feel free to ignore.", "author": "mfussenegger", "createdAt": "2020-01-07T09:13:17Z", "path": "sql/src/main/java/io/crate/action/sql/Session.java", "diffHunk": "@@ -588,13 +589,17 @@ private static void emitRowCountsToResultReceivers(UUID jobId,\n \n     @Nullable\n     public List<? extends DataType> getOutputTypes(String portalName) {\n+        List<DataType> result = null;\n         Portal portal = getSafePortal(portalName);\n         AnalyzedStatement analyzedStatement = portal.boundOrUnboundStatement();\n-        if (analyzedStatement instanceof AnalyzedRelation) {\n-            return Symbols.typeView(((AnalyzedRelation) analyzedStatement).fields());\n-        } else {\n-            return null;\n+        if (analyzedStatement instanceof ResultSetStatement) {\n+            ResultSetStatement update = (ResultSetStatement) analyzedStatement;", "originalCommit": "c9969fd619e3b7c9fc4f536584198d729cdb6bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1MzU0MA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363653540", "bodyText": "This could probably go into the constructor? Maybe even change the dependencies to List<Field> (\"don't be greedy\"). Maybe also add a short javadoc explaining that fields/returnValues are for the RETURNING clause.\nAlso: What's the difference between the returnValues and the fields? Both are symbols.", "author": "mfussenegger", "createdAt": "2020-01-07T09:15:15Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedUpdateStatement.java", "diffHunk": "@@ -59,8 +69,14 @@ public Symbol query() {\n         return query;\n     }\n \n-    public Multimap<String, Symbol> returningClause() {\n-        return returningClause;\n+    @Nullable\n+    public List<Field> fields() {\n+        return fields == null ? null : fields.asList();", "originalCommit": "c9969fd619e3b7c9fc4f536584198d729cdb6bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1NDQ4Mg==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363654482", "bodyText": "I think this should not be nullable. This seems to be the case only because in the UPDATE case RETURNING is optional. Which makes me wonder if having a separate interface/doing instance of checks on it is the right approach.\nMaybe AnalyzedStatement generally has nullable fields?", "author": "mfussenegger", "createdAt": "2020-01-07T09:17:47Z", "path": "sql/src/main/java/io/crate/analyze/ResultSetStatement.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.analyze;\n+\n+import io.crate.expression.symbol.Field;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+public interface ResultSetStatement extends AnalyzedStatement {\n+\n+    @Nullable", "originalCommit": "c9969fd619e3b7c9fc4f536584198d729cdb6bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1NTU1NA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363655554", "bodyText": "Maybe we could be a bit more verbose here. values is a bit generic and doesn't contain any information about the format and what kind of values. Are these the columns, or the rows?", "author": "mfussenegger", "createdAt": "2020-01-07T09:20:27Z", "path": "sql/src/main/java/io/crate/execution/dml/ShardResponse.java", "diffHunk": "@@ -91,6 +91,8 @@ public String toString() {\n \n     private IntArrayList locations = new IntArrayList();\n     private List<Failure> failures = new ArrayList<>();\n+    private List<Object> values = new ArrayList<>();", "originalCommit": "c9969fd619e3b7c9fc4f536584198d729cdb6bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1NjYxMQ==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363656611", "bodyText": "Could we use the existing InputFactory.ctxForRefs .. stuff instead? Seems like a slightly different variant to accomplish the same as we generally use the inputs for.", "author": "mfussenegger", "createdAt": "2020-01-07T09:22:54Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/ReturnValueGen.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml.upsert;\n+\n+import io.crate.data.Input;\n+import io.crate.execution.engine.collect.CollectExpression;\n+import io.crate.expression.BaseImplementationSymbolVisitor;\n+import io.crate.expression.reference.Doc;\n+import io.crate.expression.reference.DocRefResolver;\n+import io.crate.expression.reference.ReferenceResolver;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.Reference;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.doc.DocTableInfo;\n+\n+import java.util.ArrayList;\n+\n+final class ReturnValueGen {\n+\n+    private final ReturnEvaluator returnEval;\n+\n+    ReturnValueGen(Functions functions, TransactionContext txnCtx, DocTableInfo table) {\n+        DocRefResolver refResolver = new DocRefResolver(table.partitionedBy());\n+        this.returnEval = new ReturnEvaluator(functions, txnCtx, refResolver);\n+    }\n+\n+    Object[] generateReturnValues(Doc doc, Symbol[] returnValues) {\n+        ArrayList<Object> result = new ArrayList<>();\n+        for (int i = 0; i < returnValues.length; i++) {\n+            Symbol returnValue = returnValues[i];\n+            Input<?> accept = returnValue.accept(returnEval, doc);\n+            Object value = accept.value();\n+            if (value != null) {\n+                result.add(value);\n+            }\n+        }\n+        return result.toArray();\n+    }\n+\n+    private static class ReturnEvaluator extends BaseImplementationSymbolVisitor<Doc> {", "originalCommit": "c9969fd619e3b7c9fc4f536584198d729cdb6bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1ODk4Ng==", "url": "https://github.com/crate/crate/pull/9481#discussion_r363658986", "bodyText": "Could some of the tests be converted to unit tests, or do all of these have to be on a integration test level?", "author": "mfussenegger", "createdAt": "2020-01-07T09:28:23Z", "path": "sql/src/test/java/io/crate/integrationtests/UpdateIntegrationTest.java", "diffHunk": "@@ -892,4 +892,150 @@ public void testUpdateByIdWithSubQuery() throws Exception {\n         assertThat(printedTable(response.rows()), is(\"1| Slartibartfast\\n\" +\n                                                      \"2| Trillian\\n\"));\n     }\n+\n+    @Test\n+    public void test_update_by_id_returning_id() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where id = 1 returning id\");\n+\n+        assertThat(printedTable(response.rows()), is(\"1\\n\" ));\n+        refresh();\n+    }\n+\n+    @Test\n+    public void test_update_by_id_returning_function() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where id = 1 returning id + 1\");\n+\n+        assertThat(printedTable(response.rows()), is(\"2\\n\" ));\n+        refresh();\n+    }\n+\n+    @Test\n+    public void test_update_by_id_returning_id_with_outputname() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='msg' where id = 1 returning id as renamed\");\n+\n+        assertThat((response.cols()[0]), is(\"renamed\" ));\n+        refresh();\n+    }\n+\n+    @Test\n+    public void test_update_by_id_returning_function_with_outputname() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where id = 1 returning id + 1 as foo\");\n+\n+        assertThat((response.cols()[0]), is(\"foo\" ));\n+        assertThat(response.rows()[0][0], is(2));\n+\n+        refresh();\n+    }\n+\n+    @Test\n+    public void test_update_by_id_returning_multiple_fields() throws Exception {", "originalCommit": "c9969fd619e3b7c9fc4f536584198d729cdb6bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d75bad40cd448bdd90316e10ac76ef053783b4e7", "url": "https://github.com/crate/crate/commit/d75bad40cd448bdd90316e10ac76ef053783b4e7", "message": "Add versioning for BwC to ShardRequest/Response", "committedDate": "2020-01-08T11:12:23Z", "type": "forcePushed"}, {"oid": "1e7ffb0867e4dc1107fcfb3bd7dc60258f64a7f5", "url": "https://github.com/crate/crate/commit/1e7ffb0867e4dc1107fcfb3bd7dc60258f64a7f5", "message": "Migrate ReturnValueGen to InputFactory", "committedDate": "2020-01-09T12:04:04Z", "type": "forcePushed"}, {"oid": "f214ae69c3c0a6ca6f18be8d29ea1dc420369cc2", "url": "https://github.com/crate/crate/commit/f214ae69c3c0a6ca6f18be8d29ea1dc420369cc2", "message": "Migrate ReturnValueGen to InputFactory", "committedDate": "2020-01-09T12:54:14Z", "type": "forcePushed"}, {"oid": "02a28fa65bc55aa7f24a1ebcff1b57ae5e98ff9d", "url": "https://github.com/crate/crate/commit/02a28fa65bc55aa7f24a1ebcff1b57ae5e98ff9d", "message": "Migrate ReturnValueGen to InputFactory", "committedDate": "2020-01-09T12:59:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMzU2Ng==", "url": "https://github.com/crate/crate/pull/9481#discussion_r364823566", "bodyText": "I still don't feel good about the Nullable here + ResultSetStatement solution.\nThe interface doesn't mark fields() as Nullable, so whoever uses a resultSetStatement might assume that it is not-null, but then we've specific implementations like this where fields is nullable.\nThis is rather trappy imho and a NPE waiting to happen.\nIn https://github.com/crate/crate/pull/9481/files#diff-8df7e31e8934a6bebea6f7bf4532b50cR596-R599 it is taking care of it, but still.\nHow about we move fields() to AnalyzedStatement, make it Nullable and get rid of the ResultSetStatement  interface? If the fields are there, it is a statement with result set, if it is not there, it isn't.", "author": "mfussenegger", "createdAt": "2020-01-09T16:04:31Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedUpdateStatement.java", "diffHunk": "@@ -59,8 +75,14 @@ public Symbol query() {\n         return query;\n     }\n \n-    public Multimap<String, Symbol> returningClause() {\n-        return returningClause;\n+    @Nullable", "originalCommit": "a813e2e45a07c857074e5f4ff7f709a6cac98b45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwMDQyOQ==", "url": "https://github.com/crate/crate/pull/9481#discussion_r365100429", "bodyText": "Sounds simple and pragmatic \ud83d\udc4d", "author": "mkleen", "createdAt": "2020-01-10T07:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMzU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNTQxOQ==", "url": "https://github.com/crate/crate/pull/9481#discussion_r364825419", "bodyText": "Usually we build the fields inside the statements constructor, and the relation that they point to is this. See for example the QueriedSelectRelation.\nI think we should also do that in the update case, as it makes it harder to build a \"invalid\" AnalyzedUpdateStatement instance.", "author": "mfussenegger", "createdAt": "2020-01-09T16:07:57Z", "path": "sql/src/main/java/io/crate/analyze/UpdateAnalyzer.java", "diffHunk": "@@ -121,12 +125,29 @@ public AnalyzedUpdateStatement analyze(Update update, ParamTypeHints typeHints,\n \n         Symbol normalizedQuery = normalizer.normalize(query, txnCtx);\n \n-        SelectAnalysis selectAnalysis = SelectAnalyzer.analyzeSelectItems(update.returningClause(),\n-                                                                          relCtx.sources(),\n-                                                                          sourceExprAnalyzer,\n-                                                                          exprCtx);\n+        List<Symbol> outputSymbol = null;\n+        Fields outputFields = null;\n+\n+        if (!update.returningClause().isEmpty()) {\n+            SelectAnalysis selectAnalysis = SelectAnalyzer.analyzeSelectItems(update.returningClause(),\n+                                                                              relCtx.sources(),\n+                                                                              sourceExprAnalyzer,\n+                                                                              exprCtx);\n+\n+            outputSymbol = Lists2.map(selectAnalysis.outputSymbols(), x -> normalizer.normalize(x, txnCtx));\n+\n+            outputFields = new Fields(selectAnalysis.outputNames().size());\n+            Iterator<Symbol> outputsIterator = outputSymbol.iterator();\n+            for (ColumnIdent path : selectAnalysis.outputNames()) {\n+                outputFields.add(new Field(relation, path, outputsIterator.next()));\n+            }", "originalCommit": "a813e2e45a07c857074e5f4ff7f709a6cac98b45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNjk3Mg==", "url": "https://github.com/crate/crate/pull/9481#discussion_r364826972", "bodyText": "Would it make sense to keep these only in local scope and derive them from the resultColumns as needed? Would make the relation-ship between resultColumns and resultRowStreamers clearer (that one is derived from the other)\nThere is also a Symbols.streamerArray function which can be used to do so.", "author": "mfussenegger", "createdAt": "2020-01-09T16:10:45Z", "path": "sql/src/main/java/io/crate/execution/dml/ShardResponse.java", "diffHunk": "@@ -91,10 +95,43 @@ public String toString() {\n \n     private IntArrayList locations = new IntArrayList();\n     private List<Failure> failures = new ArrayList<>();\n+\n+    /**\n+     * Result rows are used to return values from updated rows.\n+     */\n+    @Nullable\n+    private List<Object[]> resultRows;\n+\n+    /**\n+     * Result columns describe the types of the result rows.\n+     */\n+    @Nullable\n+    private Symbol[] resultColumns;\n+\n+    /**\n+     * Streamers to stream return values from updated rows.\n+     */\n+    @Nullable\n+    private Streamer[] resultRowStreamers;", "originalCommit": "a813e2e45a07c857074e5f4ff7f709a6cac98b45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyOTY1Nw==", "url": "https://github.com/crate/crate/pull/9481#discussion_r364829657", "bodyText": "How about something like:\nif (ctx.topLevelInputs.isEmpty()) {\n    return null;\n}\nObject[] result = new Object[ctx.topLevelInputs().size()];\nfor (int i = 0; i < result.length; i++) {\n    result[i] = ctx.topLevelInputs().get(i).value();\n}\nreturn result;\n\nWould avoid some indirections.\nMaybe also pre-assign the topLevelInputs + expressions to an attribute in the CTOR and don't keep a reference to the context itself. Allows to GC InputFactory.Context earlier which pulls in some other objects.", "author": "mfussenegger", "createdAt": "2020-01-09T16:15:32Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/ReturnValueGen.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml.upsert;\n+\n+import io.crate.data.Input;\n+import io.crate.execution.engine.collect.CollectExpression;\n+import io.crate.expression.InputFactory;\n+import io.crate.expression.reference.Doc;\n+import io.crate.expression.reference.DocRefResolver;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.doc.DocTableInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+import static io.crate.common.collections.Lists2.map;\n+\n+final class ReturnValueGen {\n+\n+    private final InputFactory.Context<CollectExpression<Doc, ?>> cntx;\n+\n+    ReturnValueGen(Functions functions, TransactionContext txnCtx, DocTableInfo table, Symbol[] returnValues) {\n+        InputFactory.Context<CollectExpression<Doc, ?>> cntx = new InputFactory(functions).ctxForRefs(\n+            txnCtx, new DocRefResolver(table.partitionedBy()));\n+        cntx.add(List.of(returnValues));\n+        this.cntx = cntx;\n+    }\n+\n+    @Nullable\n+    Object[] generateReturnValues(Doc doc) {\n+        cntx.expressions().forEach(x -> x.setNextRow(doc));\n+        List<Object> result = map(cntx.topLevelInputs(), Input::value);\n+\n+        return result.isEmpty() ? null : result.toArray();", "originalCommit": "a813e2e45a07c857074e5f4ff7f709a6cac98b45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTExMzgwNA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r365113804", "bodyText": "\ud83d\udc4d", "author": "mkleen", "createdAt": "2020-01-10T08:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyOTY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMTk0NQ==", "url": "https://github.com/crate/crate/pull/9481#discussion_r364831945", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    refresh();", "author": "mfussenegger", "createdAt": "2020-01-09T16:19:47Z", "path": "sql/src/test/java/io/crate/integrationtests/UpdateIntegrationTest.java", "diffHunk": "@@ -892,4 +892,44 @@ public void testUpdateByIdWithSubQuery() throws Exception {\n         assertThat(printedTable(response.rows()), is(\"1| Slartibartfast\\n\" +\n                                                      \"2| Trillian\\n\"));\n     }\n+\n+    @Test\n+    public void test_update_by_id_returning_id_with_outputname() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='msg' where id = 1 returning id as renamed\");\n+\n+        assertThat((response.cols()[0]), is(\"renamed\" ));\n+        refresh();\n+    }\n+\n+    @Test\n+    public void test_update_by_id_with_subquery_returning_id() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where id = (select 1) returning id\");\n+\n+        assertThat(printedTable(response.rows()), is(\"1\\n\" ));\n+        refresh();", "originalCommit": "a813e2e45a07c857074e5f4ff7f709a6cac98b45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjAzNg==", "url": "https://github.com/crate/crate/pull/9481#discussion_r364832036", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    refresh();", "author": "mfussenegger", "createdAt": "2020-01-09T16:19:57Z", "path": "sql/src/test/java/io/crate/integrationtests/UpdateIntegrationTest.java", "diffHunk": "@@ -892,4 +892,44 @@ public void testUpdateByIdWithSubQuery() throws Exception {\n         assertThat(printedTable(response.rows()), is(\"1| Slartibartfast\\n\" +\n                                                      \"2| Trillian\\n\"));\n     }\n+\n+    @Test\n+    public void test_update_by_id_returning_id_with_outputname() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='msg' where id = 1 returning id as renamed\");\n+\n+        assertThat((response.cols()[0]), is(\"renamed\" ));\n+        refresh();", "originalCommit": "a813e2e45a07c857074e5f4ff7f709a6cac98b45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjEzMA==", "url": "https://github.com/crate/crate/pull/9481#discussion_r364832130", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    refresh();", "author": "mfussenegger", "createdAt": "2020-01-09T16:20:09Z", "path": "sql/src/test/java/io/crate/integrationtests/UpdateIntegrationTest.java", "diffHunk": "@@ -892,4 +892,44 @@ public void testUpdateByIdWithSubQuery() throws Exception {\n         assertThat(printedTable(response.rows()), is(\"1| Slartibartfast\\n\" +\n                                                      \"2| Trillian\\n\"));\n     }\n+\n+    @Test\n+    public void test_update_by_id_returning_id_with_outputname() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='msg' where id = 1 returning id as renamed\");\n+\n+        assertThat((response.cols()[0]), is(\"renamed\" ));\n+        refresh();\n+    }\n+\n+    @Test\n+    public void test_update_by_id_with_subquery_returning_id() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where id = (select 1) returning id\");\n+\n+        assertThat(printedTable(response.rows()), is(\"1\\n\" ));\n+        refresh();\n+    }\n+\n+    @Test\n+    public void test_update_by_id_where_no_row_is_matching() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where id = 99 returning id\");\n+\n+        assertThat(response.cols()[0], is(\"id\"));\n+        assertThat(response.rowCount(), is(0L));\n+        refresh();", "originalCommit": "a813e2e45a07c857074e5f4ff7f709a6cac98b45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzMjM4Mg==", "url": "https://github.com/crate/crate/pull/9481#discussion_r364832382", "bodyText": "Could we also assert the right output in the result set here?", "author": "mfussenegger", "createdAt": "2020-01-09T16:20:37Z", "path": "sql/src/test/java/io/crate/integrationtests/UpdateIntegrationTest.java", "diffHunk": "@@ -892,4 +892,44 @@ public void testUpdateByIdWithSubQuery() throws Exception {\n         assertThat(printedTable(response.rows()), is(\"1| Slartibartfast\\n\" +\n                                                      \"2| Trillian\\n\"));\n     }\n+\n+    @Test\n+    public void test_update_by_id_returning_id_with_outputname() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='msg' where id = 1 returning id as renamed\");\n+\n+        assertThat((response.cols()[0]), is(\"renamed\" ));\n+        refresh();", "originalCommit": "a813e2e45a07c857074e5f4ff7f709a6cac98b45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7c7acfd9bf3a560bc51c143d70e3d557cd696231", "url": "https://github.com/crate/crate/commit/7c7acfd9bf3a560bc51c143d70e3d557cd696231", "message": "Streamline ReturnValueGen", "committedDate": "2020-01-10T08:29:09Z", "type": "forcePushed"}, {"oid": "84afa343230bb06e29a8923c89e7a7afe5b1f567", "url": "https://github.com/crate/crate/commit/84afa343230bb06e29a8923c89e7a7afe5b1f567", "message": "Improve tests", "committedDate": "2020-01-10T11:31:48Z", "type": "forcePushed"}, {"oid": "4e13fcb33bcc389787c11429e960cf53f75919fa", "url": "https://github.com/crate/crate/commit/4e13fcb33bcc389787c11429e960cf53f75919fa", "message": "Add returning clause implementation for update-by-id usecase to storage engine", "committedDate": "2020-01-10T13:05:16Z", "type": "forcePushed"}, {"oid": "84f8ee5b374dad3ab2506914de983bb3773361bc", "url": "https://github.com/crate/crate/commit/84f8ee5b374dad3ab2506914de983bb3773361bc", "message": "Add implementation for update-by-id usecase to storage engine", "committedDate": "2020-01-10T13:21:45Z", "type": "commit"}, {"oid": "84f8ee5b374dad3ab2506914de983bb3773361bc", "url": "https://github.com/crate/crate/commit/84f8ee5b374dad3ab2506914de983bb3773361bc", "message": "Add implementation for update-by-id usecase to storage engine", "committedDate": "2020-01-10T13:21:45Z", "type": "forcePushed"}]}