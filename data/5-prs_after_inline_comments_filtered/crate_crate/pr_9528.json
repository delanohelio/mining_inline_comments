{"pr_number": 9528, "pr_title": "Allow more lenient column type validation in VALUES.", "pr_createdAt": "2020-01-17T10:31:04Z", "pr_url": "https://github.com/crate/crate/pull/9528", "timeline": [{"oid": "48ee733cc38614e1707bdf371b642231f38ce5d5", "url": "https://github.com/crate/crate/commit/48ee733cc38614e1707bdf371b642231f38ce5d5", "message": "Allow more lenient column type validation in VALUES.\n\nCurrently, the column types in VALUES have to be an exact\nmatch which prevents using expressions that can be implicitly\ncasted and `null` literals.", "committedDate": "2020-01-17T10:41:34Z", "type": "forcePushed"}, {"oid": "c9727b9a2a1bc69b1fd426bd42b204bb8b535315", "url": "https://github.com/crate/crate/commit/c9727b9a2a1bc69b1fd426bd42b204bb8b535315", "message": "Allow more lenient column type validation in VALUES.\n\nCurrently, the column types in VALUES have to be an exact\nmatch which prevents using expressions that can be implicitly\ncasted and `null` literals.", "committedDate": "2020-01-17T11:10:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzNDczMA==", "url": "https://github.com/crate/crate/pull/9528#discussion_r367934730", "bodyText": "Which type will this end up using? Couldn't this lead to ClassCastExceptions due to a mixture of types?\nIn the other branch we've type precedence logic integrated. See https://github.com/crate/crate/pull/9465/files#diff-bf12c5e61f9b0fe950aa518b1ed601abR807", "author": "mfussenegger", "createdAt": "2020-01-17T13:29:24Z", "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -750,7 +750,8 @@ public AnalyzedRelation visitValues(Values values, StatementAnalysisContext cont\n                 for (int i = 0; i < firstRow.size(); i++) {\n                     var typeOfFirstRowAtPos = firstRow.get(i).valueType();\n                     var typeOfCurrentRowAtPos = columns.get(i).valueType();\n-                    if (!typeOfCurrentRowAtPos.equals(typeOfFirstRowAtPos)) {\n+                    if (!typeOfFirstRowAtPos.isConvertableTo(typeOfCurrentRowAtPos)", "originalCommit": "c9727b9a2a1bc69b1fd426bd42b204bb8b535315", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2081f3adc017284649c96693a648d048c50d089", "url": "https://github.com/crate/crate/commit/a2081f3adc017284649c96693a648d048c50d089", "message": "fixup! Allow more lenient column type validation in VALUES.", "committedDate": "2020-01-20T08:44:25Z", "type": "forcePushed"}, {"oid": "78325ee267569db1369c501794588828b936876a", "url": "https://github.com/crate/crate/commit/78325ee267569db1369c501794588828b936876a", "message": "Allow more lenient column type validation in VALUES.\n\nCurrently, the column types in VALUES have to be an exact\nmatch which prevents using expressions that can be implicitly\ncasted and `null` literals.", "committedDate": "2020-01-20T09:15:13Z", "type": "commit"}, {"oid": "78325ee267569db1369c501794588828b936876a", "url": "https://github.com/crate/crate/commit/78325ee267569db1369c501794588828b936876a", "message": "Allow more lenient column type validation in VALUES.\n\nCurrently, the column types in VALUES have to be an exact\nmatch which prevents using expressions that can be implicitly\ncasted and `null` literals.", "committedDate": "2020-01-20T09:15:13Z", "type": "forcePushed"}]}