{"pr_number": 10536, "pr_title": "Account for memory used and adapt size in insert-from-query operations", "pr_createdAt": "2020-09-15T10:20:23Z", "pr_url": "https://github.com/crate/crate/pull/10536", "timeline": [{"oid": "211bfa0aab194e4b872c258ad4b5ac60f70580ce", "url": "https://github.com/crate/crate/commit/211bfa0aab194e4b872c258ad4b5ac60f70580ce", "message": "Account for memory used and adapt size in insert-from-query operations\n\nThis changes the insert-from-query logic to take the free memory of the\nquery circuit breaker into consideration when computing the\nbytes-per-bulk-requests size.\n\nIt also accounts for the max-bytes up-front before it starts reading the\ndata into memory. That should protect against cases where many\nconcurrent insert-from-query operations would try to load data into\nmemory that cannot possibly fit - leading to high GC pressure and maybe\neven an OOM error.", "committedDate": "2020-09-15T14:09:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NjQ1NQ==", "url": "https://github.com/crate/crate/pull/10536#discussion_r489246455", "bodyText": "\ud83d\udc4d I think doing the free mem accounting not on every batch iterator was also some issue to come into play or?", "author": "seut", "createdAt": "2020-09-16T08:10:03Z", "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "diffHunk": "@@ -252,6 +254,7 @@ private boolean shouldPauseOnPartitionCreation(ShardedRequests<ShardUpsertReques\n \n     @Override\n     public CompletableFuture<? extends Iterable<Row>> apply(BatchIterator<Row> batchIterator) {\n+        var isUsedBytesOverThreshold = new IsUsedBytesOverThreshold(queryCircuitBreaker);", "originalCommit": "211bfa0aab194e4b872c258ad4b5ac60f70580ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1MzM2OA==", "url": "https://github.com/crate/crate/pull/10536#discussion_r489253368", "bodyText": "If I'm not mistaken apply is only called once per ShardingUpsertExecutor instance.\nThe main motivation for moving it is to reduce the window between retrieving the free memory from the circuit breaker and accounting for the memory.\nI'm actually wondering if the logic now may lead to too many circuit breaker exceptions. If it ends up using the free memory from the circuit breaker because it's lower than the limit * 0.30, then with concurrent operations it may be likely that accounting for the free bytes would trip the breaker.\nShould we extend the circuitBreaker and have some functionality that allows us to say \"I want to reserve X bytes, if that's not available, reserve as much as possible and tell me how much I can use\"?", "author": "mfussenegger", "createdAt": "2020-09-16T08:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5MTE3MA==", "url": "https://github.com/crate/crate/pull/10536#discussion_r489291170", "bodyText": "I'm not sure if I get you right.\n\nShould we extend the circuitBreaker and have some functionality that allows us to say \"I want to reserve X bytes, if that's not available, reserve as much as possible and tell me how much I can use\"?\n\nIsn't this exactly what the code is doing by using the free available mem  (limit - used) if the desired one (limit * 0.3) is not available?\nAs the CircuitBreaker's accounting is protected against concurrent issues, how could concurrent operations get wrong free memory and thus result more frequently in breaker exceptions?", "author": "seut", "createdAt": "2020-09-16T09:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NTQ4Nw==", "url": "https://github.com/crate/crate/pull/10536#discussion_r489295487", "bodyText": "Getting the free memory via limit - used and then calling addEstimateBytesAndMaybeBreak is not atomic. In-between the amount of free memory can change. The circuitBreakers concurrency gurantee's are only for the individual calls.", "author": "mfussenegger", "createdAt": "2020-09-16T09:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5ODI2Mg==", "url": "https://github.com/crate/crate/pull/10536#discussion_r489298262", "bodyText": "I ok now I got it, +1 for moving this into the circuit breaker to make that atomic. I understood this wrong as I interpreted it that the suggestion would result in a different logic.", "author": "seut", "createdAt": "2020-09-16T09:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyMTA5NA==", "url": "https://github.com/crate/crate/pull/10536#discussion_r489421094", "bodyText": "@seut pushed a fixup to make it atomic.", "author": "mfussenegger", "createdAt": "2020-09-16T13:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NjQ1NQ=="}], "type": "inlineReview"}, {"oid": "988dc7a37c8e33762f45ec9923040a02282632e7", "url": "https://github.com/crate/crate/commit/988dc7a37c8e33762f45ec9923040a02282632e7", "message": "fixup! Account for memory used and adapt size in insert-from-query operations", "committedDate": "2020-09-16T13:05:28Z", "type": "forcePushed"}, {"oid": "d88fcab909895a7399f304248d531948a0d0761f", "url": "https://github.com/crate/crate/commit/d88fcab909895a7399f304248d531948a0d0761f", "message": "Account for memory used and adapt size in insert-from-query operations\n\nThis changes the insert-from-query logic to take the free memory of the\nquery circuit breaker into consideration when computing the\nbytes-per-bulk-requests size.\n\nIt also accounts for the max-bytes up-front before it starts reading the\ndata into memory. That should protect against cases where many\nconcurrent insert-from-query operations would try to load data into\nmemory that cannot possibly fit - leading to high GC pressure and maybe\neven an OOM error.", "committedDate": "2020-09-16T13:18:41Z", "type": "commit"}, {"oid": "d88fcab909895a7399f304248d531948a0d0761f", "url": "https://github.com/crate/crate/commit/d88fcab909895a7399f304248d531948a0d0761f", "message": "Account for memory used and adapt size in insert-from-query operations\n\nThis changes the insert-from-query logic to take the free memory of the\nquery circuit breaker into consideration when computing the\nbytes-per-bulk-requests size.\n\nIt also accounts for the max-bytes up-front before it starts reading the\ndata into memory. That should protect against cases where many\nconcurrent insert-from-query operations would try to load data into\nmemory that cannot possibly fit - leading to high GC pressure and maybe\neven an OOM error.", "committedDate": "2020-09-16T13:18:41Z", "type": "forcePushed"}]}