{"pr_number": 713, "pr_title": "chore(ilp): optimisation around socket usage and method invocation", "pr_createdAt": "2020-11-30T12:44:59Z", "pr_url": "https://github.com/questdb/questdb/pull/713", "timeline": [{"oid": "25cb5ee7351d2faa2155f9a5f0655e73c98aef27", "url": "https://github.com/questdb/questdb/commit/25cb5ee7351d2faa2155f9a5f0655e73c98aef27", "message": "chore(cutlass): performance improvements, wip", "committedDate": "2020-11-27T18:48:40Z", "type": "commit"}, {"oid": "5092727923ef34c60d212de3cfc072123de57545", "url": "https://github.com/questdb/questdb/commit/5092727923ef34c60d212de3cfc072123de57545", "message": "chore(cutlass): optimized TCP ILP", "committedDate": "2020-11-29T15:38:24Z", "type": "commit"}, {"oid": "d87ecf1d4b7e1913991edc26216abdb700035732", "url": "https://github.com/questdb/questdb/commit/d87ecf1d4b7e1913991edc26216abdb700035732", "message": "chore(ilp): added comments, refactored cache usage", "committedDate": "2020-11-30T12:44:04Z", "type": "commit"}, {"oid": "8a297c1546e7ebf7d47c84fa8877960efb56c780", "url": "https://github.com/questdb/questdb/commit/8a297c1546e7ebf7d47c84fa8877960efb56c780", "message": "Merge branch 'master' into ilp_speedup", "committedDate": "2020-11-30T12:45:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3MTgzMg==", "url": "https://github.com/questdb/questdb/pull/713#discussion_r532571832", "bodyText": "// owner when \"old\" owner is fully done. This is a volatile variable on the event, used by both threads", "author": "patrickSpaceSurfer", "createdAt": "2020-11-30T12:48:20Z", "path": "core/src/main/java/io/questdb/cutlass/line/tcp/LineTcpMeasurementScheduler.java", "diffHunk": "@@ -552,41 +563,51 @@ private boolean drainQueue() {\n                         eventProcessed = true;\n                     }\n                 }\n+\n+                // by not releasing cursor we force the sequence to return us the same value over and over\n+                // until cursor value is released\n                 if (eventProcessed) {\n                     sequence.done(cursor);\n                 }\n             }\n         }\n \n-        private void handleEventException(LineTcpMeasurementEvent event, Parser parser, CairoException ex) {\n-            LOG.error()\n-                    .$(\"could not create parser, measurement will be skipped [jobName=\").$(jobName)\n-                    .$(\", table=\").$(event.getTableName())\n-                    .$(\", ex=\").$(ex.getFlyweightMessage())\n-                    .$(\", errno=\").$(ex.getErrno())\n-                    .$(']').$();\n-            Misc.free(parser);\n-            parserCache.remove(event.getTableName());\n-        }\n-\n         private void processNextEvent(LineTcpMeasurementEvent event) {\n-            Parser parser = parserCache.get(event.getTableName());\n+            final int index = parserCache.keyIndex(event.getTableName());\n+            Parser parser = null;\n             try {\n-                if (null != parser) {\n+                if (index < 0) {\n+                    parser = parserCache.valueAt(index);\n                     parser.processEvent(event);\n                 } else {\n                     parser = new Parser();\n                     parser.processFirstEvent(engine, securityContext, event);\n                     LOG.info().$(\"created parser [jobName=\").$(jobName).$(\" table=\").$(event.getTableName()).$(']').$();\n-                    parserCache.put(Chars.toString(event.getTableName()), parser);\n+                    parserCache.putAt(index, Chars.toString(event.getTableName()), parser);\n                 }\n             } catch (CairoException ex) {\n-                handleEventException(event, parser, ex);\n+                LOG.error()\n+                        .$(\"could not create parser, measurement will be skipped [jobName=\").$(jobName)\n+                        .$(\", table=\").$(event.getTableName())\n+                        .$(\", ex=\").$(ex.getFlyweightMessage())\n+                        .$(\", errno=\").$(ex.getErrno())\n+                        .$(']').$();\n+\n+                Misc.free(parser);\n+\n+                if (index < 0) {\n+                    parserCache.removeAt(index);\n+                }\n             }\n         }\n \n         private boolean processRebalance(LineTcpMeasurementEvent event) {\n             if (event.rebalanceToThreadId == id) {\n+                // This thread is now a declared owner of the table, but it can only become actual\n+                // owner when \"old\" over is fully done. This is a volatile variable on the event, used by both threads", "originalCommit": "8a297c1546e7ebf7d47c84fa8877960efb56c780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3MjA2NA==", "url": "https://github.com/questdb/questdb/pull/713#discussion_r532572064", "bodyText": "// to handover the table. The starting point is \"false\" and the \"old\" owner thread will eventually set this", "author": "patrickSpaceSurfer", "createdAt": "2020-11-30T12:48:46Z", "path": "core/src/main/java/io/questdb/cutlass/line/tcp/LineTcpMeasurementScheduler.java", "diffHunk": "@@ -552,41 +563,51 @@ private boolean drainQueue() {\n                         eventProcessed = true;\n                     }\n                 }\n+\n+                // by not releasing cursor we force the sequence to return us the same value over and over\n+                // until cursor value is released\n                 if (eventProcessed) {\n                     sequence.done(cursor);\n                 }\n             }\n         }\n \n-        private void handleEventException(LineTcpMeasurementEvent event, Parser parser, CairoException ex) {\n-            LOG.error()\n-                    .$(\"could not create parser, measurement will be skipped [jobName=\").$(jobName)\n-                    .$(\", table=\").$(event.getTableName())\n-                    .$(\", ex=\").$(ex.getFlyweightMessage())\n-                    .$(\", errno=\").$(ex.getErrno())\n-                    .$(']').$();\n-            Misc.free(parser);\n-            parserCache.remove(event.getTableName());\n-        }\n-\n         private void processNextEvent(LineTcpMeasurementEvent event) {\n-            Parser parser = parserCache.get(event.getTableName());\n+            final int index = parserCache.keyIndex(event.getTableName());\n+            Parser parser = null;\n             try {\n-                if (null != parser) {\n+                if (index < 0) {\n+                    parser = parserCache.valueAt(index);\n                     parser.processEvent(event);\n                 } else {\n                     parser = new Parser();\n                     parser.processFirstEvent(engine, securityContext, event);\n                     LOG.info().$(\"created parser [jobName=\").$(jobName).$(\" table=\").$(event.getTableName()).$(']').$();\n-                    parserCache.put(Chars.toString(event.getTableName()), parser);\n+                    parserCache.putAt(index, Chars.toString(event.getTableName()), parser);\n                 }\n             } catch (CairoException ex) {\n-                handleEventException(event, parser, ex);\n+                LOG.error()\n+                        .$(\"could not create parser, measurement will be skipped [jobName=\").$(jobName)\n+                        .$(\", table=\").$(event.getTableName())\n+                        .$(\", ex=\").$(ex.getFlyweightMessage())\n+                        .$(\", errno=\").$(ex.getErrno())\n+                        .$(']').$();\n+\n+                Misc.free(parser);\n+\n+                if (index < 0) {\n+                    parserCache.removeAt(index);\n+                }\n             }\n         }\n \n         private boolean processRebalance(LineTcpMeasurementEvent event) {\n             if (event.rebalanceToThreadId == id) {\n+                // This thread is now a declared owner of the table, but it can only become actual\n+                // owner when \"old\" over is fully done. This is a volatile variable on the event, used by both threads\n+                // to handover the table. The starting point is \"false\" and the \"old\" over thread will eventually set this", "originalCommit": "8a297c1546e7ebf7d47c84fa8877960efb56c780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c6f4d3385e1c83f854e4c55ba259b4e6eb0deda", "url": "https://github.com/questdb/questdb/commit/2c6f4d3385e1c83f854e4c55ba259b4e6eb0deda", "message": "chore(ilp): comment spelling fixes", "committedDate": "2020-11-30T12:51:07Z", "type": "commit"}]}