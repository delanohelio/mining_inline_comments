{"pr_number": 2040, "pr_title": "SOLR-14965 add overseer queue size metrics", "pr_createdAt": "2020-10-27T22:47:04Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2040", "timeline": [{"oid": "a5863ca33ce1a48b60a6947d0e74156820aab4c3", "url": "https://github.com/apache/lucene-solr/commit/a5863ca33ce1a48b60a6947d0e74156820aab4c3", "message": "add overseer queue size metrics", "committedDate": "2020-10-27T20:49:36Z", "type": "commit"}, {"oid": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "url": "https://github.com/apache/lucene-solr/commit/c5c6eaacda382095a5ca99f524f6c54afca8e85d", "message": "updated solr-ref-guide with overseer registry info", "committedDate": "2020-10-27T22:46:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2OTU1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513469553", "bodyText": "You should never create instances of SolrMetricManager in your components. Always use the single instance constructed in CoreContainer.getMetricManager().\nThe only reason it kind of worked for you was that you made it a shared registry, which is created once per JVM - but as I explain below in this case a shared registry is incorrect and should not be used.", "author": "sigram", "createdAt": "2020-10-28T14:04:40Z", "path": "solr/core/src/java/org/apache/solr/cloud/Overseer.java", "diffHunk": "@@ -173,6 +175,9 @@\n \n     private final Stats zkStats;\n \n+    private final SolrMetricManager metricManager = new SolrMetricManager();", "originalCommit": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3OTA1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513479053", "bodyText": "You should create a SolrMetricsContext in Overseer, and create a child context here, and then pass it as the first argument to registerGauge. This helps to properly unregister old gauges from the registry (because a new instance of ClusterStateUpdater is created each time this Overseer instance becomes the leader, and then it registers a new instance of gauge with the same name). Using a static string \"overseer\" defeats this mechanism, because it falsely indicates that the life-cycle of ClusterStateUpdater is the same as its parent object Overseer.\nThen in the ClusterStateUpdater.close() method you should unregister this gauge using the value of solrMetricsContext.getTag(). This prevents obscure reference leaks in the metrics registry.", "author": "sigram", "createdAt": "2020-10-28T14:16:33Z", "path": "solr/core/src/java/org/apache/solr/cloud/Overseer.java", "diffHunk": "@@ -185,6 +190,9 @@ public ClusterStateUpdater(final ZkStateReader reader, final String myId, Stats\n       this.completedMap = getCompletedMap(zkClient);\n       this.myId = myId;\n       this.reader = reader;\n+\n+      registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.overseer);\n+      metricManager.registerGauge(null, registryName, () -> stateUpdateQueue.getZkStats().getQueueLength(), \"overseer\", true, \"stateUpdateQueueSize\", \"queue\");", "originalCommit": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMjk3MA==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513612970", "bodyText": "Thanks for the feedback, will update accordingly.", "author": "saatchibhalla", "createdAt": "2020-10-28T17:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3OTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMjY4Mg==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513632682", "bodyText": "@sigram Thanks for the feedback! Is there documentation around adding metrics that covers things like this?", "author": "megancarey", "createdAt": "2020-10-28T17:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3OTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyOTkxNw==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513729917", "bodyText": "@sigram Updated the PR with those proposed changes. Whenever you're free to take another look I'd appreciate it!", "author": "saatchibhalla", "createdAt": "2020-10-28T20:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3OTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQxMzkwMg==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r535413902", "bodyText": "@megancarey unfortunately, there's not much documentation apart from the javadocs and user-level info in the RefGuide. We should create a doc in solr/dev-docs/metrics.", "author": "sigram", "createdAt": "2020-12-03T17:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3OTA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4MDU5MQ==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513480591", "bodyText": "Please use the context tag value here.", "author": "sigram", "createdAt": "2020-10-28T14:18:36Z", "path": "solr/core/src/java/org/apache/solr/cloud/Overseer.java", "diffHunk": "@@ -544,6 +552,7 @@ private LeaderStatus amILeader() {\n     @Override\n       public void close() {\n         this.isClosed = true;\n+        metricManager.unregisterGauges(registryName, \"overseer\");", "originalCommit": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4MDgwMw==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513480803", "bodyText": "See above - this should never be done.", "author": "sigram", "createdAt": "2020-10-28T14:18:54Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -94,6 +96,8 @@\n   private boolean isClosed;\n \n   private volatile Stats stats;\n+  private final SolrMetricManager metricManager = new SolrMetricManager();", "originalCommit": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4MzI4MA==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513483280", "bodyText": "See above comments - you should create a child context here (from the one created in Overseer) and use it in this call, and then unregister this gauge using this context's tag value.", "author": "sigram", "createdAt": "2020-10-28T14:21:54Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -154,6 +158,9 @@ public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n     this.runningTasks = ConcurrentHashMap.newKeySet();\n     this.completedTasks = new ConcurrentHashMap<>();\n     thisNode = Utils.getMDCNode();\n+\n+    registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.overseer);\n+    metricManager.registerGauge(null, registryName, () -> workQueue.getZkStats().getQueueLength(), \"overseer\", true, \"collectionWorkQueueSize\", \"queue\");", "originalCommit": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4MzQ3Nw==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513483477", "bodyText": "See above - use the tag value from the context.", "author": "sigram", "createdAt": "2020-10-28T14:22:10Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -386,6 +393,7 @@ private void cleanUpWorkQueue() throws KeeperException, InterruptedException {\n \n   public void close() {\n     isClosed = true;\n+    metricManager.unregisterGauges(registryName, \"overseer\");", "originalCommit": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4NTUxNA==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513485514", "bodyText": "Overseer registry CANNOT be a shared registry because it's possible to have multiple Overseers in a single JVM, especially in unit tests. This should be a regular per-CoreContainer registry, which is created within the scope of the instance available from CC.getMetricManager().", "author": "sigram", "createdAt": "2020-10-28T14:24:35Z", "path": "solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java", "diffHunk": "@@ -423,13 +429,13 @@ public boolean hasRegistry(String name) {\n   /**\n    * Check for predefined shared registry names. This compares the input name\n    * with normalized names of predefined shared registries -\n-   * {@link #JVM_REGISTRY} and {@link #JETTY_REGISTRY}.\n+   * {@link #JVM_REGISTRY}, {@link #JETTY_REGISTRY}, and {@link #OVERSEER_REGISTRY}", "originalCommit": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ4NTgzNw==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513485837", "bodyText": "See above - this can't be a shared registry.", "author": "sigram", "createdAt": "2020-10-28T14:24:56Z", "path": "solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java", "diffHunk": "@@ -423,13 +429,13 @@ public boolean hasRegistry(String name) {\n   /**\n    * Check for predefined shared registry names. This compares the input name\n    * with normalized names of predefined shared registries -\n-   * {@link #JVM_REGISTRY} and {@link #JETTY_REGISTRY}.\n+   * {@link #JVM_REGISTRY}, {@link #JETTY_REGISTRY}, and {@link #OVERSEER_REGISTRY}\n    *\n    * @param registry already normalized name\n    * @return true if the name matches one of shared registries\n    */\n   private static boolean isSharedRegistry(String registry) {\n-    return JETTY_REGISTRY.equals(registry) || JVM_REGISTRY.equals(registry);\n+    return JETTY_REGISTRY.equals(registry) || JVM_REGISTRY.equals(registry) || OVERSEER_REGISTRY.equals(registry);", "originalCommit": "c5c6eaacda382095a5ca99f524f6c54afca8e85d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c6010531bb2a795e340c88cd8e188b9cc635b38", "url": "https://github.com/apache/lucene-solr/commit/0c6010531bb2a795e340c88cd8e188b9cc635b38", "message": "updated metrics to be added via CoreContainer metricsManager and registered to an Overseer solrMetricsContext", "committedDate": "2020-10-28T19:41:06Z", "type": "commit"}, {"oid": "3125c45db659dd93b895555696b8e56cb4fb8cdf", "url": "https://github.com/apache/lucene-solr/commit/3125c45db659dd93b895555696b8e56cb4fb8cdf", "message": "removing unused imports", "committedDate": "2020-10-28T20:32:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc0NDE0MQ==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513744141", "bodyText": "Are there any tests that instantiate OverseerCollectionConfigSetProcessor? (Just want to make sure this is the only time this method is used, since we changed the signature)", "author": "megancarey", "createdAt": "2020-10-28T20:36:49Z", "path": "solr/core/src/java/org/apache/solr/cloud/Overseer.java", "diffHunk": "@@ -636,7 +650,7 @@ public synchronized void start(String id) {\n     ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n \n     OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory());\n-    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n+    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer, solrMetricsContext);", "originalCommit": "3125c45db659dd93b895555696b8e56cb4fb8cdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc3MjM0Mg==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513772342", "bodyText": "Updated the one test that calls this thanks for the catch!", "author": "saatchibhalla", "createdAt": "2020-10-28T21:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc0NDE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc0NDY4NQ==", "url": "https://github.com/apache/lucene-solr/pull/2040#discussion_r513744685", "bodyText": "Same question here - would be good to double-check that this is the only place we instantiate OverseerTaskProcessor", "author": "megancarey", "createdAt": "2020-10-28T20:37:59Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -134,13 +136,14 @@ public String toString() {\n   private String thisNode;\n \n   public OverseerTaskProcessor(ZkStateReader zkStateReader, String myId,\n-                                        Stats stats,\n-                                        OverseerMessageHandlerSelector selector,\n-                                        OverseerNodePrioritizer prioritizer,\n-                                        OverseerTaskQueue workQueue,\n-                                        DistributedMap runningMap,\n-                                        DistributedMap completedMap,\n-                                        DistributedMap failureMap) {\n+                               Stats stats,\n+                               OverseerMessageHandlerSelector selector,\n+                               OverseerNodePrioritizer prioritizer,\n+                               OverseerTaskQueue workQueue,\n+                               DistributedMap runningMap,\n+                               DistributedMap completedMap,\n+                               DistributedMap failureMap,\n+                               SolrMetricsContext solrMetricsContext) {", "originalCommit": "3125c45db659dd93b895555696b8e56cb4fb8cdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "29479ab004e349ae3957eab9f705411c9be2c16e", "url": "https://github.com/apache/lucene-solr/commit/29479ab004e349ae3957eab9f705411c9be2c16e", "message": "updated constructor in test", "committedDate": "2020-10-28T21:26:09Z", "type": "commit"}, {"oid": "2222635caa60e3fef1b6eb08a32a05f744a2645f", "url": "https://github.com/apache/lucene-solr/commit/2222635caa60e3fef1b6eb08a32a05f744a2645f", "message": "fixing TFs by mocking out CoreContainer.metricManager", "committedDate": "2020-11-02T15:49:34Z", "type": "commit"}, {"oid": "fe2eeb245680335a97b1d628a66a4959adb58327", "url": "https://github.com/apache/lucene-solr/commit/fe2eeb245680335a97b1d628a66a4959adb58327", "message": "fixing error with exporting metric on non overseer nodes", "committedDate": "2020-11-20T15:12:53Z", "type": "commit"}, {"oid": "b192b9e24acfc4ada3e2eaa47d203873cdc38dc5", "url": "https://github.com/apache/lucene-solr/commit/b192b9e24acfc4ada3e2eaa47d203873cdc38dc5", "message": "separate overseer queue metrics", "committedDate": "2020-12-03T16:17:24Z", "type": "commit"}, {"oid": "8e53b751942364f535f5f53fba21cd206e956e28", "url": "https://github.com/apache/lucene-solr/commit/8e53b751942364f535f5f53fba21cd206e956e28", "message": "Merge branch 'master' into jira/SOLR-14965", "committedDate": "2020-12-04T21:42:23Z", "type": "commit"}, {"oid": "8cd02f31f735c31518f9f7fff97d8322c530d592", "url": "https://github.com/apache/lucene-solr/commit/8cd02f31f735c31518f9f7fff97d8322c530d592", "message": "CHANGES.txt", "committedDate": "2020-12-04T21:45:05Z", "type": "commit"}]}