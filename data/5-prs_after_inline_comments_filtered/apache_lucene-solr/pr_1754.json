{"pr_number": 1754, "pr_title": "SOLR-14700: avoid NPEs in TupleStream.getShards() when streamContext \u2026 \u2026is null.", "pr_createdAt": "2020-08-14T16:32:25Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1754", "timeline": [{"oid": "062a40ce53f5f56acb1de5af5589a00878d0e005", "url": "https://github.com/apache/lucene-solr/commit/062a40ce53f5f56acb1de5af5589a00878d0e005", "message": "SOLR-14700: add StreamingTest.testCloudSolrStreamWithoutStreamContext() test", "committedDate": "2020-08-14T16:17:46Z", "type": "commit"}, {"oid": "cd8b57df49a555d80166675c87c1669d8697c059", "url": "https://github.com/apache/lucene-solr/commit/cd8b57df49a555d80166675c87c1669d8697c059", "message": "SOLR-14700: avoid NPEs in TupleStream.getShards() when streamContext is null.", "committedDate": "2020-08-14T16:22:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDE2MQ==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471054161", "bodyText": "There's a lot of complexity in this line, can we make it an if/else without wrapping and unwrapping an Optional? We are already doing a check on streamContext != null 6 lines up.", "author": "madrob", "createdAt": "2020-08-16T02:06:04Z", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream.java", "diffHunk": "@@ -141,19 +141,30 @@ public UUID getStreamNodeId(){\n       shards = shardsMap.get(collection);\n     } else {\n       //SolrCloud Sharding\n-      CloudSolrClient cloudSolrClient =\n-          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);\n+      SolrClientCache solrClientCache = (streamContext != null ? streamContext.getSolrClientCache() : null);\n+      final SolrClientCache localSolrClientCache;\n+      if (solrClientCache == null) {\n+        solrClientCache = localSolrClientCache = new SolrClientCache();\n+      } else {\n+        localSolrClientCache = null;\n+      }\n+      CloudSolrClient cloudSolrClient = solrClientCache.getCloudSolrClient(zkHost);\n       ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n       ClusterState clusterState = zkStateReader.getClusterState();\n       Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);\n       Set<String> liveNodes = clusterState.getLiveNodes();\n \n \n-      ModifiableSolrParams solrParams = new ModifiableSolrParams(streamContext.getRequestParams());\n+      final ModifiableSolrParams solrParams;\n+      if (streamContext != null) {\n+        solrParams = new ModifiableSolrParams(streamContext.getRequestParams());\n+      } else {\n+        solrParams = new ModifiableSolrParams();\n+      }\n       solrParams.add(requestParams);\n \n       RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator =\n-          Optional.ofNullable(streamContext.getRequestReplicaListTransformerGenerator()).orElseGet(RequestReplicaListTransformerGenerator::new);\n+          Optional.ofNullable(streamContext != null ? streamContext.getRequestReplicaListTransformerGenerator() : null).orElseGet(RequestReplicaListTransformerGenerator::new);", "originalCommit": "cd8b57df49a555d80166675c87c1669d8697c059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3MDIzNw==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471370237", "bodyText": "Good question. I just tried to fold the logic into the streamContext != null above but then the unit tests failed and (rightly so) identified that streamContext.getRequestReplicaListTransformerGenerator() can return null. We could still remove use of the Optional of course but it would require an additional if (requestReplicaListTransformerGenerator == null) block then. Thought?", "author": "cpoerschke", "createdAt": "2020-08-17T09:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NjQyNQ==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471546425", "bodyText": "Yea, I think an extra null check is going to be more clear than the use of Optional here.", "author": "madrob", "createdAt": "2020-08-17T15:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDE5Mw==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471054193", "bodyText": "This is clever, add a comment that we're saving localCache because we need to close it later. :)", "author": "madrob", "createdAt": "2020-08-16T02:06:36Z", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream.java", "diffHunk": "@@ -141,19 +141,30 @@ public UUID getStreamNodeId(){\n       shards = shardsMap.get(collection);\n     } else {\n       //SolrCloud Sharding\n-      CloudSolrClient cloudSolrClient =\n-          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);\n+      SolrClientCache solrClientCache = (streamContext != null ? streamContext.getSolrClientCache() : null);\n+      final SolrClientCache localSolrClientCache;\n+      if (solrClientCache == null) {\n+        solrClientCache = localSolrClientCache = new SolrClientCache();", "originalCommit": "cd8b57df49a555d80166675c87c1669d8697c059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM2NjcwNw==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471366707", "bodyText": "Good idea, will do.", "author": "cpoerschke", "createdAt": "2020-08-17T09:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDQ1NQ==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471054455", "bodyText": "I think this ternary folds into the conditional that we have:\n      SolrClientCache scc, lscc;\n      if (streamContext != null) {\n        scc = streamContext.getSolrClientCache();\n      } else {\n        scc = lscc = new SolrClientCache();\n      }", "author": "madrob", "createdAt": "2020-08-16T02:11:01Z", "path": "solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream.java", "diffHunk": "@@ -141,19 +141,30 @@ public UUID getStreamNodeId(){\n       shards = shardsMap.get(collection);\n     } else {\n       //SolrCloud Sharding\n-      CloudSolrClient cloudSolrClient =\n-          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);\n+      SolrClientCache solrClientCache = (streamContext != null ? streamContext.getSolrClientCache() : null);", "originalCommit": "cd8b57df49a555d80166675c87c1669d8697c059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM2NjM1MA==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471366350", "bodyText": "It's possible for streamContext.getSolrClientCache() to return null and in that case combining the ternary and the conditional would give a different result. Would it help to have a comment re: that subtlety perhaps?", "author": "cpoerschke", "createdAt": "2020-08-17T09:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0NjkyOA==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471546928", "bodyText": "Yea, add a comment. I definitely missed that subtlety.", "author": "madrob", "createdAt": "2020-08-17T15:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1NDQ5Nw==", "url": "https://github.com/apache/lucene-solr/pull/1754#discussion_r471054497", "bodyText": "I really like how simple this test is.", "author": "madrob", "createdAt": "2020-08-16T02:11:44Z", "path": "solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java", "diffHunk": "@@ -2716,4 +2716,11 @@ private ParallelStream parallelStream(TupleStream stream, FieldComparator compar\n     return pstream;\n   }\n \n+  public void testCloudSolrStreamWithoutStreamContext() throws Exception {\n+    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"id asc\");\n+    try (CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n+      stream.open();", "originalCommit": "cd8b57df49a555d80166675c87c1669d8697c059", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7486486d04f173476e681216082e888416cfbe03", "url": "https://github.com/apache/lucene-solr/commit/7486486d04f173476e681216082e888416cfbe03", "message": "code review feedback: comment for localSolrClientCache", "committedDate": "2020-08-17T09:57:21Z", "type": "commit"}, {"oid": "87134d3fd27e599c31f106964a2cfbdb80396db7", "url": "https://github.com/apache/lucene-solr/commit/87134d3fd27e599c31f106964a2cfbdb80396db7", "message": "code review feedback: comment for null-ness subtlety, replace complex Optional use", "committedDate": "2020-08-17T15:34:39Z", "type": "commit"}, {"oid": "5f7b0bc67c35dccfe21081cfaef4a74f18192c30", "url": "https://github.com/apache/lucene-solr/commit/5f7b0bc67c35dccfe21081cfaef4a74f18192c30", "message": "Merge remote-tracking branch 'origin/master' into master-solr-14700", "committedDate": "2020-08-24T11:32:06Z", "type": "commit"}, {"oid": "59116441d948b43d0d63a4014a21724eb1aa80c2", "url": "https://github.com/apache/lucene-solr/commit/59116441d948b43d0d63a4014a21724eb1aa80c2", "message": "add solr/CHANGES.txt entry", "committedDate": "2020-08-24T11:36:55Z", "type": "commit"}]}