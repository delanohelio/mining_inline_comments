{"pr_number": 1434, "pr_title": "LUCENE-9324: Add an ID to SegmentCommitInfo", "pr_createdAt": "2020-04-16T13:11:34Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1434", "timeline": [{"oid": "6cfe308cd7f2f62a51ab13c8193fae8cd199a8e0", "url": "https://github.com/apache/lucene-solr/commit/6cfe308cd7f2f62a51ab13c8193fae8cd199a8e0", "message": "LUCENE-9324: Add an ID to SegmentCommitInfo", "committedDate": "2020-04-16T10:07:55Z", "type": "commit"}, {"oid": "e2421ecc2060c12b045dc51c510b5029b54f5a3b", "url": "https://github.com/apache/lucene-solr/commit/e2421ecc2060c12b045dc51c510b5029b54f5a3b", "message": "Add missing files", "committedDate": "2020-04-16T10:10:02Z", "type": "commit"}, {"oid": "9da9d88f48348bb3c204183e09c94501d0184776", "url": "https://github.com/apache/lucene-solr/commit/9da9d88f48348bb3c204183e09c94501d0184776", "message": "add more tests", "committedDate": "2020-04-16T13:10:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1MzA3Ng==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409553076", "bodyText": "This happens during IndexWriter.addIndexes(Directory[]) right?  I wonder whether we should give a new id instead of reusing the old one?  E.g. the segment (likely) now has a new name, and is in a different Directory, and is copied/forked from a prior segment, so maybe it should get a new id?", "author": "mikemccand", "createdAt": "2020-04-16T13:25:12Z", "path": "lucene/core/src/java/org/apache/lucene/index/IndexWriter.java", "diffHunk": "@@ -3081,7 +3081,7 @@ private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName\n                                           info.info.getUseCompoundFile(), info.info.getCodec(), \n                                           info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n     SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getSoftDelCount(), info.getDelGen(),\n-                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n+                                                               info.getFieldInfosGen(), info.getDocValuesGen(), info.getId());", "originalCommit": "9da9d88f48348bb3c204183e09c94501d0184776", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3ODQyOA==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409578428", "bodyText": "we do share the info.info.getId() here as well so I think we should be consistent?", "author": "s1monw", "createdAt": "2020-04-16T13:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1MzA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MzkxMQ==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410273911", "bodyText": "ok", "author": "mikemccand", "createdAt": "2020-04-17T14:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1MzA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NDMwMQ==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409554301", "bodyText": "Do we need some thread safety here?", "author": "mikemccand", "createdAt": "2020-04-16T13:26:58Z", "path": "lucene/core/src/java/org/apache/lucene/index/SegmentCommitInfo.java", "diffHunk": "@@ -388,4 +399,17 @@ public SegmentCommitInfo clone() {\n   final int getDelCount(boolean includeSoftDeletes) {\n     return includeSoftDeletes ? getDelCount() + getSoftDelCount() : getDelCount();\n   }\n+\n+  private void generationAdvanced() {\n+    sizeInBytes = -1;\n+    id = null;\n+  }\n+\n+  public byte[] getId() {\n+    if (id == null) {\n+      // we advanced a generation - need to generate a new ID\n+      id = StringHelper.randomId();", "originalCommit": "9da9d88f48348bb3c204183e09c94501d0184776", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NTk1NQ==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409575955", "bodyText": "yeah good question, as far as I can tell we never read or write any of the member vars on this class unless we hold a lock that protects it. But it's a mess so I guess we should. Yet, if we do that we should make every method on this class synced no?", "author": "s1monw", "createdAt": "2020-04-16T13:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MzY3MQ==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410273671", "bodyText": "I agree it's messy.  It's just that this sounds like a simple getter w/o side effect, yet, it does have an important and surprising side effect of setting the id.  It would be bad if two threads called it at once and got two different ids back.\nIf we really believe all callers are already sync'd (by IW's monitor lock), can we 1) add a comment stating this assumption, and 2) fix the assignment to do something like this instead:\n  byte[] newID = StringHelper.randomId();\n  assert id == null;\n  id = newID;\n\n?\nThat is still best effort, but might catch us in tests if we have cases where two threads really are invoking getId at once.\nOr, maybe we can change this to assign the id at the same time as the SCI was changed (e.g. delGen increased), instead of at get time?", "author": "mikemccand", "createdAt": "2020-04-17T14:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MjI2NQ==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410382265", "bodyText": "I changed this to roll over to a new ID each time the generation is incremented. I don't really like that we call StringHelper.randomId() over and over again. I wonder if it would be better to set a new ID from the outside just before we clone in order to commit instead of doing it inside SegmentCommitInfo. This would make things more explicit IMO", "author": "s1monw", "createdAt": "2020-04-17T17:57:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NDMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409556321", "bodyText": "Good question ... maybe we could use info.getId()?   Then it'd be unique across SCI, but, shared across SI which is also weird.", "author": "mikemccand", "createdAt": "2020-04-16T13:29:51Z", "path": "lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java", "diffHunk": "@@ -374,7 +376,15 @@ public static final SegmentInfos readCommit(Directory directory, ChecksumIndexIn\n       if (softDelCount + delCount > info.maxDoc()) {\n         throw new CorruptIndexException(\"invalid deletion count: \" + softDelCount + delCount + \" vs maxDoc=\" + info.maxDoc(), input);\n       }\n-      SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, softDelCount, delGen, fieldInfosGen, dvGen);\n+      final byte[] sciId;\n+      if (format > VERSION_74) {\n+        sciId = new byte[StringHelper.ID_LENGTH];\n+        input.readBytes(sciId, 0, sciId.length);\n+      } else {\n+        sciId = infos.id;\n+        // NOCOMMIT can we do this? it would at least give us consistent BWC but we can't identify the same SCI in different commits", "originalCommit": "9da9d88f48348bb3c204183e09c94501d0184776", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NzgwNA==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409577804", "bodyText": "I don't think we should use info.getId() since that would mean that the same SegmentInfo instances are treated the same even if two IW made changes to it and it's generations. The way we have it now it's only considered the same if the overall commit is the same which is good i guess?", "author": "s1monw", "createdAt": "2020-04-16T13:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNDI3Mg==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409804272", "bodyText": "When we introduced SegmentInfos#getId, we returned null as an ID for older segments. This is probably a safer option here as well, as callers can fall back to whatever behavior makes sense for them such as using a strong hash of the commit files as an ID, or re-downloading all files of the commit all the time and giving up incrementality?", "author": "jpountz", "createdAt": "2020-04-16T19:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxMjc5Ng==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409812796", "bodyText": "I think this case is a bit more complicated due to the changing nature of this ID. For each change (DV, llive docs, fields) we need to move to a new ID. Should we then just accept null and create a new ID once it changes or should we stick with null on these segments until they are written first time? Introducing null requires quite some changes in how we handle this which we can do, for sure. I still wonder if we can get away with stealing the parent ID and have a smooth upgrade path.", "author": "s1monw", "createdAt": "2020-04-16T19:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzOTE1NA==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409839154", "bodyText": "I pushed a new commit f0a72f8 to address this.", "author": "s1monw", "createdAt": "2020-04-16T20:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NDA0Ng==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409844046", "bodyText": "I don't understand the idea of stealing the parent ID, wouldn't it cause Lucene to consider commits equal when they are not, which would be a much worse problem than considering commits different when they are equal?", "author": "jpountz", "createdAt": "2020-04-16T20:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1MTUyMQ==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409851521", "bodyText": "I don't understand the idea of stealing the parent ID, wouldn't it cause Lucene to consider commits equal when they are not, which would be a much worse problem than considering commits different when they are equal?\n\nthe idea was to use the SegmentInfos ID which is different for every commit as a default. It would not cause Lucene to consider commits equal when they are not. I just moved to using null instead, it was an idea that has downsides too we can just go with null. The real question is when do we assign an ID then? Once we write the SCI again even if it didn't change? I think we should but that would then bring back the same problem with the fallback.", "author": "s1monw", "createdAt": "2020-04-16T21:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2NjQ2Mg==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409866462", "bodyText": "Ah sorry I got confused because I thought that \"parent\" was referring to SegmentInfo (no s) instead of SegmentInfos, but I agree that SegmentInfos is not great either.", "author": "jpountz", "createdAt": "2020-04-16T21:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NjU3MA==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410266570", "bodyText": "+1 for null and have caller deal with the BWC.  Stealing the id from another place (either \"parent\" SegmentInfos or the corresponding SegmentInfo) seems too dangerous.", "author": "mikemccand", "createdAt": "2020-04-17T14:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NTQ5OA==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r409795498", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *  @param info\n          \n          \n            \n               * @param info", "author": "jpountz", "createdAt": "2020-04-16T19:24:51Z", "path": "lucene/core/src/java/org/apache/lucene/index/SegmentCommitInfo.java", "diffHunk": "@@ -79,8 +85,7 @@\n \n   /**\n    * Sole constructor.\n-   * \n-   * @param info\n+   *  @param info", "originalCommit": "9da9d88f48348bb3c204183e09c94501d0184776", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f0a72f82bb17bd2582799aa25514ef764e012570", "url": "https://github.com/apache/lucene-solr/commit/f0a72f82bb17bd2582799aa25514ef764e012570", "message": "move to null as an indicator that the segment has no ID", "committedDate": "2020-04-16T20:48:03Z", "type": "commit"}, {"oid": "3260f855602ec70765c2936be429c9444ae85291", "url": "https://github.com/apache/lucene-solr/commit/3260f855602ec70765c2936be429c9444ae85291", "message": "Merge branch 'master' into LUCENE-9324", "committedDate": "2020-04-17T10:41:47Z", "type": "commit"}, {"oid": "ac9f0ea45659a25234df6ca4fc6a4bda506c1b57", "url": "https://github.com/apache/lucene-solr/commit/ac9f0ea45659a25234df6ca4fc6a4bda506c1b57", "message": "fix imports", "committedDate": "2020-04-17T10:47:54Z", "type": "commit"}, {"oid": "bbe3648bbf4086b804705b71c7750f46e9414dc2", "url": "https://github.com/apache/lucene-solr/commit/bbe3648bbf4086b804705b71c7750f46e9414dc2", "message": "add move tests on the bwc end", "committedDate": "2020-04-17T11:02:23Z", "type": "commit"}, {"oid": "3224de64404f139c8f0a84345bec7a00803676ce", "url": "https://github.com/apache/lucene-solr/commit/3224de64404f139c8f0a84345bec7a00803676ce", "message": "preserve null ID until the SCI actually changes", "committedDate": "2020-04-17T12:08:01Z", "type": "commit"}, {"oid": "9f160c8b211e8cfad156d3fe122083fa7985bf62", "url": "https://github.com/apache/lucene-solr/commit/9f160c8b211e8cfad156d3fe122083fa7985bf62", "message": "fix luke", "committedDate": "2020-04-17T12:24:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NDk4Nw==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410184987", "bodyText": "nit: turn it in such a way that it would return a non-null SCI to make it easier to debug in case it fails? E.g.\nassertNull(\"none of the segments should have been upgraded\", si.asList().stream().filter(sci -> sci.getId() != null).findAny().orElse(null));", "author": "jpountz", "createdAt": "2020-04-17T12:20:00Z", "path": "lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java", "diffHunk": "@@ -830,8 +829,9 @@ public void testAddOldIndexes() throws IOException {\n       IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n       w.addIndexes(oldDir);\n       w.close();\n-      targetDir.close();\n \n+      SegmentInfos si = SegmentInfos.readLatestCommit(targetDir);\n+      assertEquals(\"none of the segments should have been upgraded\", 0, si.asList().stream().filter(sci -> sci.getId() != null).count());", "originalCommit": "3224de64404f139c8f0a84345bec7a00803676ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NTAzNA==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410185034", "bodyText": "here too?", "author": "jpountz", "createdAt": "2020-04-17T12:20:07Z", "path": "lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java", "diffHunk": "@@ -862,7 +862,8 @@ public void testAddOldIndexesReader() throws IOException {\n       TestUtil.addIndexesSlowly(w, reader);\n       w.close();\n       reader.close();\n-            \n+      SegmentInfos si = SegmentInfos.readLatestCommit(targetDir);\n+      assertEquals(\"all SCIs should have an id now\", 0, si.asList().stream().filter(sci -> sci.getId() == null).count());", "originalCommit": "3224de64404f139c8f0a84345bec7a00803676ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4Njg1Ng==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410186856", "bodyText": "we need to make this assert depend on the version to be future-proof? Ie.\nif (info.info.getVersion().onOrAfter(Version.LUCENE_8_6_0)) {\n  assertNotNull(info.toString(), info.getId());\n} else {\n  assertNull(info.toString(), info.getId());\n}\n\n?", "author": "jpountz", "createdAt": "2020-04-17T12:23:53Z", "path": "lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java", "diffHunk": "@@ -1367,6 +1368,16 @@ public void testIndexCreatedVersion() throws IOException {\n     }\n   }\n \n+  public void testSegmentCommitInfoId() throws IOException {\n+    for (String name : oldNames) {\n+      Directory dir = oldIndexDirs.get(name);\n+      SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n+      for (SegmentCommitInfo info : infos) {\n+        assertNull(info.getId());", "originalCommit": "3224de64404f139c8f0a84345bec7a00803676ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MDc1NA==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410370754", "bodyText": "\ud83d\udc4d", "author": "s1monw", "createdAt": "2020-04-17T17:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4Njg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4OTMyNw==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410189327", "bodyText": "can you be stricter and throw a CorruptIndexException if the byte is neither 0 nor 1?", "author": "jpountz", "createdAt": "2020-04-17T12:29:03Z", "path": "lucene/core/src/java/org/apache/lucene/index/SegmentInfos.java", "diffHunk": "@@ -374,7 +376,18 @@ public static final SegmentInfos readCommit(Directory directory, ChecksumIndexIn\n       if (softDelCount + delCount > info.maxDoc()) {\n         throw new CorruptIndexException(\"invalid deletion count: \" + softDelCount + delCount + \" vs maxDoc=\" + info.maxDoc(), input);\n       }\n-      SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, softDelCount, delGen, fieldInfosGen, dvGen);\n+      final byte[] sciId;\n+      if (format > VERSION_74 ) {\n+        if (input.readByte() == 1) {", "originalCommit": "3224de64404f139c8f0a84345bec7a00803676ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MDg0OQ==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410370849", "bodyText": "\ud83d\udc4d", "author": "s1monw", "createdAt": "2020-04-17T17:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4OTMyNw=="}], "type": "inlineReview"}, {"oid": "a392c740269e0a85fd553a57b819bb0f6513a583", "url": "https://github.com/apache/lucene-solr/commit/a392c740269e0a85fd553a57b819bb0f6513a583", "message": "apply feedback", "committedDate": "2020-04-17T17:40:14Z", "type": "commit"}, {"oid": "5af4896cfdc491ea645c24f0392f6739303e654f", "url": "https://github.com/apache/lucene-solr/commit/5af4896cfdc491ea645c24f0392f6739303e654f", "message": "fix assertion", "committedDate": "2020-04-17T17:55:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4Nzc5Mw==", "url": "https://github.com/apache/lucene-solr/pull/1434#discussion_r410387793", "bodyText": "We can remove this now?", "author": "mikemccand", "createdAt": "2020-04-17T18:08:06Z", "path": "lucene/core/src/java/org/apache/lucene/index/SegmentCommitInfo.java", "diffHunk": "@@ -77,9 +83,11 @@\n   // this is never written to/read from the Directory\n   private long bufferedDeletesGen = -1;\n \n+  // is set once any of the generations has been advanced.\n+  private boolean hasAdvanced;", "originalCommit": "5af4896cfdc491ea645c24f0392f6739303e654f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f211f9717881e876a404b9bb7236e6f469b2245d", "url": "https://github.com/apache/lucene-solr/commit/f211f9717881e876a404b9bb7236e6f469b2245d", "message": "remove leftover", "committedDate": "2020-04-17T18:13:19Z", "type": "commit"}, {"oid": "788df6796cf0b6c6aec9ae7e16ce71f613b525a7", "url": "https://github.com/apache/lucene-solr/commit/788df6796cf0b6c6aec9ae7e16ce71f613b525a7", "message": "add missing 8.6 version constant", "committedDate": "2020-04-17T21:15:23Z", "type": "commit"}, {"oid": "42a2b418f30d7df5587ea8cb13587f4f94c7a76d", "url": "https://github.com/apache/lucene-solr/commit/42a2b418f30d7df5587ea8cb13587f4f94c7a76d", "message": "Merge branch 'master' into LUCENE-9324", "committedDate": "2020-04-18T09:34:47Z", "type": "commit"}, {"oid": "383703c2bbf6c50fcd31627b13d8d8472fc68561", "url": "https://github.com/apache/lucene-solr/commit/383703c2bbf6c50fcd31627b13d8d8472fc68561", "message": "remove this", "committedDate": "2020-04-18T11:14:52Z", "type": "commit"}, {"oid": "b352f912c5236c87b615c1374bbae50bc78de07a", "url": "https://github.com/apache/lucene-solr/commit/b352f912c5236c87b615c1374bbae50bc78de07a", "message": "fix test", "committedDate": "2020-04-18T11:32:33Z", "type": "commit"}, {"oid": "9a41b2b33274fbc2551b33be16d0fe07d1e68e96", "url": "https://github.com/apache/lucene-solr/commit/9a41b2b33274fbc2551b33be16d0fe07d1e68e96", "message": "add changes entry", "committedDate": "2020-04-18T12:24:19Z", "type": "commit"}]}