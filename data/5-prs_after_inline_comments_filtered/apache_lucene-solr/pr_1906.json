{"pr_number": 1906, "pr_title": "SOLR-13528: Implement API Based Config For Rate Limiters", "pr_createdAt": "2020-09-22T07:51:26Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1906", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2ODc1Nw==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r492668757", "bodyText": "wouldn't you do set-ratelimters : null instead of set-ratelimters : {}", "author": "noblepaul", "createdAt": "2020-09-22T11:45:48Z", "path": "solr/core/src/java/org/apache/solr/handler/ClusterAPI.java", "diffHunk": "@@ -171,10 +172,30 @@ public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n         // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n         // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n         clusterProperties.setClusterProperties(\n-                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n+            Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n+        if (!unset) {\n+          clusterProperties.setClusterProperties(\n+              Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n+        }\n+\n+      } catch (Exception e) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n+      }\n+    }\n+\n+    @Command(name = \"set-ratelimiters\")\n+    public void setRateLimiters(PayloadObj<Map<String, Object>> obj) {\n+      Map<String, Object> rateLimiterConfig = obj.getDataMap();\n+      final boolean unset = rateLimiterConfig.isEmpty();", "originalCommit": "44b8d4d6074bb4b3f1802cee2ced25c61071c7c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIwNzQ4NA==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r493207484", "bodyText": "I actually prefer {}, seems cleaner", "author": "atris", "createdAt": "2020-09-23T05:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2ODc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2OTEzNA==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r492669134", "bodyText": "why plural? are there multiple rate limiters?", "author": "noblepaul", "createdAt": "2020-09-22T11:46:26Z", "path": "solr/core/src/java/org/apache/solr/handler/ClusterAPI.java", "diffHunk": "@@ -171,10 +172,30 @@ public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n         // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n         // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n         clusterProperties.setClusterProperties(\n-                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n+            Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n+        if (!unset) {\n+          clusterProperties.setClusterProperties(\n+              Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n+        }\n+\n+      } catch (Exception e) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n+      }\n+    }\n+\n+    @Command(name = \"set-ratelimiters\")", "originalCommit": "44b8d4d6074bb4b3f1802cee2ced25c61071c7c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3MDYxNQ==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r492670615", "bodyText": "why 2 write ops? Only one should be enough", "author": "noblepaul", "createdAt": "2020-09-22T11:49:17Z", "path": "solr/core/src/java/org/apache/solr/handler/ClusterAPI.java", "diffHunk": "@@ -171,10 +172,30 @@ public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n         // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n         // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n         clusterProperties.setClusterProperties(\n-                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n+            Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n+        if (!unset) {", "originalCommit": "44b8d4d6074bb4b3f1802cee2ced25c61071c7c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIxNDAxNQ==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r493214015", "bodyText": "I believe that if we dont set it to null before writing, the new properties will be appended to existing?", "author": "atris", "createdAt": "2020-09-23T05:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3MDYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2MjUwOQ==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r494062509", "bodyText": "clusterProperties.setClusterProperties() is a ZK write op. We are doing 2 operations here. We must avoid it", "author": "noblepaul", "createdAt": "2020-09-24T06:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3MDYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3MTE3Ng==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r492671176", "bodyText": "Why not have a strongly typed java object? why are you using a loose Map object", "author": "noblepaul", "createdAt": "2020-09-22T11:50:16Z", "path": "solr/core/src/java/org/apache/solr/handler/ClusterAPI.java", "diffHunk": "@@ -171,10 +172,30 @@ public void setPlacementPlugin(PayloadObj<Map<String, Object>> obj) {\n         // Need to reset to null first otherwise the mappings in placementPluginConfig are added to existing ones\n         // in /clusterprops.json rather than replacing them. If removing the config, that's all we do.\n         clusterProperties.setClusterProperties(\n-                Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n+            Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, null));\n+        if (!unset) {\n+          clusterProperties.setClusterProperties(\n+              Collections.singletonMap(PlacementPluginConfigImpl.PLACEMENT_PLUGIN_CONFIG_KEY, placementPluginConfig));\n+        }\n+\n+      } catch (Exception e) {\n+        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error in API\", e);\n+      }\n+    }\n+\n+    @Command(name = \"set-ratelimiters\")\n+    public void setRateLimiters(PayloadObj<Map<String, Object>> obj) {", "originalCommit": "44b8d4d6074bb4b3f1802cee2ced25c61071c7c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3NTE2Ng==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r492675166", "bodyText": "why is this in the o.a.s.servlet package? It's not a servlet/filter", "author": "noblepaul", "createdAt": "2020-09-22T11:57:43Z", "path": "solr/core/src/java/org/apache/solr/servlet/RateLimiterConfig.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.servlet;", "originalCommit": "44b8d4d6074bb4b3f1802cee2ced25c61071c7c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzODA4Mw==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r493238083", "bodyText": "RequestRateLimiter lives within this package -- and since they directly and only work with SDF, should they not belong here?", "author": "atris", "createdAt": "2020-09-23T06:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3NTE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA2Mjg0NQ==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r494062845", "bodyText": "I don't think it should belong here. only servlet filters etc are supposed to be there.", "author": "noblepaul", "createdAt": "2020-09-24T06:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3NTE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY3NjQyNA==", "url": "https://github.com/apache/lucene-solr/pull/1906#discussion_r492676424", "bodyText": "Why are you not using a POJO and jackson deserialization, like it's done elsewhere? why all these boilerplate code", "author": "noblepaul", "createdAt": "2020-09-22T12:00:03Z", "path": "solr/core/src/java/org/apache/solr/servlet/QueryRateLimiter.java", "diffHunk": "@@ -17,39 +17,82 @@\n \n package org.apache.solr.servlet;\n \n-import javax.servlet.FilterConfig;\n+import java.util.Map;\n \n import org.apache.solr.client.solrj.SolrRequest;\n+import org.apache.solr.common.cloud.SolrZkClient;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.Utils;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n \n-import static org.apache.solr.servlet.RateLimitManager.DEFAULT_CONCURRENT_REQUESTS;\n-import static org.apache.solr.servlet.RateLimitManager.DEFAULT_SLOT_ACQUISITION_TIMEOUT_MS;\n+import static org.apache.solr.servlet.RateLimiterConfig.RL_CONFIG_KEY;\n \n /** Implementation of RequestRateLimiter specific to query request types. Most of the actual work is delegated\n  *  to the parent class but specific configurations and parsing are handled by this class.\n  */\n public class QueryRateLimiter extends RequestRateLimiter {\n-  final static String IS_QUERY_RATE_LIMITER_ENABLED = \"isQueryRateLimiterEnabled\";\n-  final static String MAX_QUERY_REQUESTS = \"maxQueryRequests\";\n-  final static String QUERY_WAIT_FOR_SLOT_ALLOCATION_INMS = \"queryWaitForSlotAllocationInMS\";\n-  final static String QUERY_GUARANTEED_SLOTS = \"queryGuaranteedSlots\";\n-  final static String QUERY_ALLOW_SLOT_BORROWING = \"queryAllowSlotBorrowing\";\n-\n-  public QueryRateLimiter(FilterConfig filterConfig) {\n-    super(constructQueryRateLimiterConfig(filterConfig));\n+\n+  public QueryRateLimiter(SolrZkClient solrZkClient) {\n+    super(constructQueryRateLimiterConfig(solrZkClient));\n+  }\n+\n+  @SuppressWarnings({\"unchecked\"})\n+  public void processConfigChange(Map<String, Object> properties) {\n+    RateLimiterConfig rateLimiterConfig = getRateLimiterConfig();\n+    Map<String, Object> propertiesMap = (Map<String, Object>) properties.get(RL_CONFIG_KEY);\n+\n+    constructQueryRateLimiterConfigInternal(propertiesMap, rateLimiterConfig);\n+  }\n+\n+  // To be used in initialization\n+  @SuppressWarnings({\"unchecked\"})\n+  private static RateLimiterConfig constructQueryRateLimiterConfig(SolrZkClient zkClient) {\n+    try {\n+\n+      if (zkClient == null) {\n+        return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n+      }\n+\n+      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n+      Map<String, Object> propertiesMap = (Map<String, Object>) clusterPropsJson.get(RL_CONFIG_KEY);\n+      RateLimiterConfig rateLimiterConfig = new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n+\n+      constructQueryRateLimiterConfigInternal(propertiesMap, rateLimiterConfig);\n+\n+      return rateLimiterConfig;\n+    } catch (KeeperException.NoNodeException e) {\n+      return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n+    } catch (KeeperException | InterruptedException e) {\n+      throw new RuntimeException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n+    }\n   }\n \n-  protected static RequestRateLimiter.RateLimiterConfig constructQueryRateLimiterConfig(FilterConfig filterConfig) {\n-    RequestRateLimiter.RateLimiterConfig queryRateLimiterConfig = new RequestRateLimiter.RateLimiterConfig();\n+  private static void constructQueryRateLimiterConfigInternal(Map<String, Object> propertiesMap, RateLimiterConfig rateLimiterConfig) {", "originalCommit": "44b8d4d6074bb4b3f1802cee2ced25c61071c7c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fabfc022a1cb239144e243b08534ff2a6f4ce50e", "url": "https://github.com/apache/lucene-solr/commit/fabfc022a1cb239144e243b08534ff2a6f4ce50e", "message": "Remove Erratic Character", "committedDate": "2020-09-24T07:10:36Z", "type": "forcePushed"}, {"oid": "cb9c630bc589ec405556e789fbdc0f8c92ecec4a", "url": "https://github.com/apache/lucene-solr/commit/cb9c630bc589ec405556e789fbdc0f8c92ecec4a", "message": "First cut at ClusterProps config for rate limiters", "committedDate": "2020-09-24T07:35:45Z", "type": "commit"}, {"oid": "d3759aa50468174fe309157e733868abdffa16bc", "url": "https://github.com/apache/lucene-solr/commit/d3759aa50468174fe309157e733868abdffa16bc", "message": "More Updated to rate limiters config", "committedDate": "2020-09-24T07:41:31Z", "type": "commit"}, {"oid": "1f8396ea16ee06a72df7b16029c2c7d72a212648", "url": "https://github.com/apache/lucene-solr/commit/1f8396ea16ee06a72df7b16029c2c7d72a212648", "message": "More stuff", "committedDate": "2020-09-24T07:41:31Z", "type": "commit"}, {"oid": "14de50c9b63e449bfead48dfe6e1d4ed199d6187", "url": "https://github.com/apache/lucene-solr/commit/14de50c9b63e449bfead48dfe6e1d4ed199d6187", "message": "Clean up old code", "committedDate": "2020-09-24T07:41:31Z", "type": "commit"}, {"oid": "d7c2a0ded95e4b5267fe40d54db55a8d5f544874", "url": "https://github.com/apache/lucene-solr/commit/d7c2a0ded95e4b5267fe40d54db55a8d5f544874", "message": "More checks", "committedDate": "2020-09-24T07:41:31Z", "type": "commit"}, {"oid": "14cb623fe6ac758fcf656f4fe0dba301b677c0ec", "url": "https://github.com/apache/lucene-solr/commit/14cb623fe6ac758fcf656f4fe0dba301b677c0ec", "message": "Update docs", "committedDate": "2020-09-24T07:41:31Z", "type": "commit"}, {"oid": "2ea395cbd3525a95ca01658600c5ea5e0261afa2", "url": "https://github.com/apache/lucene-solr/commit/2ea395cbd3525a95ca01658600c5ea5e0261afa2", "message": "Remove redundant import", "committedDate": "2020-09-24T07:41:31Z", "type": "commit"}, {"oid": "646a668aad92148e683ac1ac1491351674bfbd4c", "url": "https://github.com/apache/lucene-solr/commit/646a668aad92148e683ac1ac1491351674bfbd4c", "message": "Update per comments", "committedDate": "2020-09-24T07:42:12Z", "type": "commit"}, {"oid": "4c7eed037602d9f3386e91d1a617eadf5d5d5439", "url": "https://github.com/apache/lucene-solr/commit/4c7eed037602d9f3386e91d1a617eadf5d5d5439", "message": "Update Resilience Checks", "committedDate": "2020-09-24T07:42:12Z", "type": "commit"}, {"oid": "740b6fe159253d4becf064f88db07754ef5fd833", "url": "https://github.com/apache/lucene-solr/commit/740b6fe159253d4becf064f88db07754ef5fd833", "message": "Remove Erratic Character", "committedDate": "2020-09-24T07:42:12Z", "type": "commit"}, {"oid": "aa785163e6e216339f25bfb5eaba4f3dde245d26", "url": "https://github.com/apache/lucene-solr/commit/aa785163e6e216339f25bfb5eaba4f3dde245d26", "message": "Move RateLimiterConfig to core", "committedDate": "2020-09-24T07:42:12Z", "type": "commit"}, {"oid": "26457bfe609e9c390c6537bf7c5d3b96877ee9da", "url": "https://github.com/apache/lucene-solr/commit/26457bfe609e9c390c6537bf7c5d3b96877ee9da", "message": "Fix Build", "committedDate": "2020-09-24T07:42:38Z", "type": "commit"}, {"oid": "64d8aa4cc02c473bcee62e415b3c5760805375aa", "url": "https://github.com/apache/lucene-solr/commit/64d8aa4cc02c473bcee62e415b3c5760805375aa", "message": "Update tests", "committedDate": "2020-09-24T07:42:38Z", "type": "commit"}, {"oid": "6f23b247aa492d8f4d97bfeec1cfae4cbbe4c26d", "url": "https://github.com/apache/lucene-solr/commit/6f23b247aa492d8f4d97bfeec1cfae4cbbe4c26d", "message": "Update to use a single ZK operation", "committedDate": "2020-09-24T07:57:01Z", "type": "commit"}, {"oid": "6f23b247aa492d8f4d97bfeec1cfae4cbbe4c26d", "url": "https://github.com/apache/lucene-solr/commit/6f23b247aa492d8f4d97bfeec1cfae4cbbe4c26d", "message": "Update to use a single ZK operation", "committedDate": "2020-09-24T07:57:01Z", "type": "forcePushed"}, {"oid": "6854f522b77f2e0355cf143ce973b14809285cf9", "url": "https://github.com/apache/lucene-solr/commit/6854f522b77f2e0355cf143ce973b14809285cf9", "message": "Erratic Character", "committedDate": "2020-09-24T08:03:43Z", "type": "commit"}, {"oid": "0b354d4445472973c92680798ed84fb5940800c0", "url": "https://github.com/apache/lucene-solr/commit/0b354d4445472973c92680798ed84fb5940800c0", "message": "Remove Redundant Import", "committedDate": "2020-09-24T09:02:34Z", "type": "commit"}, {"oid": "d533d308d5af5e9413e79523be4eaab469692fa9", "url": "https://github.com/apache/lucene-solr/commit/d533d308d5af5e9413e79523be4eaab469692fa9", "message": "Update Docs", "committedDate": "2020-09-24T09:08:02Z", "type": "commit"}, {"oid": "61e057a69ebed1316e702ac60b4ca6aae9016dc0", "url": "https://github.com/apache/lucene-solr/commit/61e057a69ebed1316e702ac60b4ca6aae9016dc0", "message": "More stuff", "committedDate": "2020-09-28T06:55:04Z", "type": "commit"}]}