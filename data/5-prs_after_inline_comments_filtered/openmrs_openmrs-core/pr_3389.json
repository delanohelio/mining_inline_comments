{"pr_number": 3389, "pr_title": "TRUNK-5862: Condition and Obs to implement FormRecordable.", "pr_createdAt": "2020-07-21T10:30:30Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3389", "timeline": [{"oid": "0b732dc0a1efeddd6f2b5474bf3bd2225016a946", "url": "https://github.com/openmrs/openmrs-core/commit/0b732dc0a1efeddd6f2b5474bf3bd2225016a946", "message": "TRUNK-5862 backport for 2.3", "committedDate": "2020-07-21T10:24:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwNTU0Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3389#discussion_r458005542", "bodyText": "That'd be 2.3.2.", "author": "mks-d", "createdAt": "2020-07-21T10:46:55Z", "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since 2.3.0", "originalCommit": "0b732dc0a1efeddd6f2b5474bf3bd2225016a946", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e53480dce0cfe3bb13edba5623bd43b0b38bb84d", "url": "https://github.com/openmrs/openmrs-core/commit/e53480dce0cfe3bb13edba5623bd43b0b38bb84d", "message": "Updated comment since 2.3.0 > since 2.3.2", "committedDate": "2020-07-21T10:49:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNjgyNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3389#discussion_r458036826", "bodyText": "Same here :-)", "author": "mks-d", "createdAt": "2020-07-21T11:49:50Z", "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+/**\n+ * Defines the methods to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since  2.3.0", "originalCommit": "e53480dce0cfe3bb13edba5623bd43b0b38bb84d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxNTA5NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3389#discussion_r458215095", "bodyText": "What about this if statement, didn't it get wiped through the changes?", "author": "mks-d", "createdAt": "2020-07-21T16:06:22Z", "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1175,93 +1169,15 @@ public void setDateCreated(Date dateCreated) {\n \t\tmarkAsDirty(getDateCreated(), dateCreated);\n \t\tsuper.setDateCreated(dateCreated);\n \t}\n-\t\n-\t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * @should return the namespace for a form field that has no path\n-\t * @should return the correct namespace for a form field with a path\n-\t * @should return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the path was specified\n-\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Gets the path for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the the form field path\n-\t * @since 1.11\n-\t * @should return the path for a form field that has no namespace\n-\t * @should return the correct path for a form field with a namespace\n-\t * @should return null if the path is not specified\n-\t */\n-\tpublic String getFormFieldPath() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the namespace was specified\n-\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n+\n \t/**\n-\t * Sets the namespace and path of the form field that was used to capture the obs details in the\n-\t * form.<br>\n-\t * <b>Note:</b> Namespace and formFieldPath together must not exceed 254 characters in length,\n-\t * form applications can subtract the length of their namespace from 254 to determine the\n-\t * maximum length they can use for a form field path.\n-\t * \n-\t * @param namespace the namespace of the form field\n-\t * @param formFieldPath the path of the form field\n-\t * @since 1.11\n-\t * @should set the underlying formNamespaceAndPath in the correct pattern\n-\t * @should reject a namepace containing the separator\n-\t * @should reject a path containing the separator\n-\t * @should reject a namepace and path combination longer than the max length\n-\t * @should not mark the obs as dirty when the value has not been changed\n-\t * @should mark the obs as dirty when the value has been changed\n-\t * @should mark the obs as dirty when the value is changed from a null to a non null value\n-\t * @should mark the obs as dirty when the value is changed from a non null to a null value\n+\t * @see org.openmrs.FormRecordable#setFormField(String, String)\n \t */\n+\t@Override\n \tpublic void setFormField(String namespace, String formFieldPath) {\n-\t\tif (namespace == null && formFieldPath == null) {\n-\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n-\t\t\tformNamespaceAndPath = null;\n-\t\t\treturn;\n-\t\t}", "originalCommit": "e53480dce0cfe3bb13edba5623bd43b0b38bb84d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyMzgwNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3389#discussion_r458223807", "bodyText": "This if statement, in on  BaseFormRecordableOpenmrsData.setFormField same as version 2.4", "author": "icrc-loliveira", "createdAt": "2020-07-21T16:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxNTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMTA3MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3389#discussion_r458231071", "bodyText": "But not that call:\nmarkAsDirty(formNamespaceAndPath, null);\nThis seems to have been removed through streamlining the code between the base class and Obs no?", "author": "mks-d", "createdAt": "2020-07-21T16:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxNTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNTc3MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3389#discussion_r458235770", "bodyText": "Maybe we can do a discuses this during the meeting tomorrow.\nBut markAsDirty will receive the oldValue and the new value. And I make sure that this still true by saving the oldValue before call the super.setFormField(namespace, formFieldPath) and call the markAsDirty at the end with the old value that I saved and the new one calculated in the setFormField.\nprivate void markAsDirty(Object oldValue, Object newValue) {", "author": "icrc-loliveira", "createdAt": "2020-07-21T16:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxNTA5NQ=="}], "type": "inlineReview"}, {"oid": "d3b53c966c172a9668d9146213ff82453bc27425", "url": "https://github.com/openmrs/openmrs-core/commit/d3b53c966c172a9668d9146213ff82453bc27425", "message": "Updated comment since 2.3.0 > since 2.3.2", "committedDate": "2020-07-21T16:15:33Z", "type": "commit"}, {"oid": "00203e22168cdc9edf7976b9054963fd8f54fce5", "url": "https://github.com/openmrs/openmrs-core/commit/00203e22168cdc9edf7976b9054963fd8f54fce5", "message": "Updated class comment.", "committedDate": "2020-07-23T10:14:27Z", "type": "commit"}]}