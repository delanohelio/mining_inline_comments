{"pr_number": 3357, "pr_title": "TRUNK-5862: Condition and Obs to implement FormRecordable.", "pr_createdAt": "2020-07-14T15:55:05Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3357", "timeline": [{"oid": "b8752f938988ef602e6daf46903943f1cb440dcd", "url": "https://github.com/openmrs/openmrs-core/commit/b8752f938988ef602e6daf46903943f1cb440dcd", "message": "Created abstract class to handle a bridge between an OpenMrsObject and is position in the form.\n\nExtended conditions and obs from this new class.\n\nupdated liquibase-update-to-latest-2.4.x.xml to add the new column form_namespace_path to the table conditions.", "committedDate": "2020-07-14T14:00:18Z", "type": "commit"}, {"oid": "40053f8d52556064ed52833e5dce1b4d32093ba0", "url": "https://github.com/openmrs/openmrs-core/commit/40053f8d52556064ed52833e5dce1b4d32093ba0", "message": "Updated changeset id.", "committedDate": "2020-07-14T14:03:22Z", "type": "commit"}, {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb", "url": "https://github.com/openmrs/openmrs-core/commit/a83975187495d8e438dc2cc74b4da2fc00838adb", "message": "Added unitary tests for Conditions.", "committedDate": "2020-07-14T15:53:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTg4OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454541888", "bodyText": "We need an interface FormRecordable. In the end you'll have something like:\n\nFormRecordable: an interface\nBaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable: a (maybe abstract) class that will be subclassed by Obs and Condition in a way that they share as much as possible from the original code that currently lives in Obs.\nObs extends BaseFormRecordableOpenmrsData\nCondition extends BaseFormRecordableOpenmrsData", "author": "mks-d", "createdAt": "2020-07-14T17:59:49Z", "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ */\n+@MappedSuperclass\n+public abstract class FormRecordable extends BaseChangeableOpenmrsData{", "originalCommit": "a83975187495d8e438dc2cc74b4da2fc00838adb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzkyNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454543925", "bodyText": "There's tons of Java string utils to generate strings of a certain length no?", "author": "mks-d", "createdAt": "2020-07-14T18:03:04Z", "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {\n+\t\t\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\t\n+\t/**\n+\t * @see Condition#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = FormRecordable.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(condition));\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"\", \"my path\");\n+\t\tassertNull(condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tassertEquals(ns, condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, null);\n+\t\tassertEquals(ns, condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"my ns\", \"\");\n+\t\tassertNull(condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tassertEquals(path, condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"\", path);\n+\t\tassertEquals(path, condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\t\tStringBuilder nsBuffer = new StringBuilder(125);\n+\t\tfor (int i = 0; i < 125; i++) {\n+\t\t\tnsBuffer.append(\"n\");\n+\t\t}\n+\t\tfor (int i = 0; i < 130; i++) {\n+\t\t\tnsBuffer.append(\"p\");\n+\t\t}", "originalCommit": "a83975187495d8e438dc2cc74b4da2fc00838adb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454544810", "bodyText": "Rather than all this I'd add a couple of test cases in ConditionServiceImplTest.", "author": "mks-d", "createdAt": "2020-07-14T18:04:38Z", "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {", "originalCommit": "a83975187495d8e438dc2cc74b4da2fc00838adb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3Mjk3Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454972973", "bodyText": "Hi @mks-d,\nI don't think that is the best approach. Since for that I will have to make changes in ConditionServiceImplTest to a test a code that is in another class.\nPoint can be made that I am not testing the correct class. So I made some search how o test an abstract class and find this and decide to try the 3.1. approach. Let me know your thoughts.", "author": "icrc-loliveira", "createdAt": "2020-07-15T11:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NTg4Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454985883", "bodyText": "@icrc-loliveira ConditionServiceImplTest would validate that all is ok with Spring + Hibernate. But the Liquibase changeset can only be tested at app runtime.", "author": "mks-d", "createdAt": "2020-07-15T11:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDY5OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455120699", "bodyText": "I updated the test saveCondition_shouldSaveNewCondition() in ConditionServiceImplTest  to test the formNamespaceAndPathfield.", "author": "icrc-loliveira", "createdAt": "2020-07-15T14:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA=="}], "type": "inlineReview"}, {"oid": "bad8cc2ea259b4f63c63518c8c238f12bf779632", "url": "https://github.com/openmrs/openmrs-core/commit/bad8cc2ea259b4f63c63518c8c238f12bf779632", "message": "Created interface FormRecordable.", "committedDate": "2020-07-15T07:41:33Z", "type": "commit"}, {"oid": "8df34f90d85607e12d8efc3588b8b29d8167f1c9", "url": "https://github.com/openmrs/openmrs-core/commit/8df34f90d85607e12d8efc3588b8b29d8167f1c9", "message": "Fix comment on changeSet to add the column form_namespace_path to the table conditions.", "committedDate": "2020-07-15T07:43:24Z", "type": "commit"}, {"oid": "1f63a9738a8be7c6aaa87857102e165917956aa0", "url": "https://github.com/openmrs/openmrs-core/commit/1f63a9738a8be7c6aaa87857102e165917956aa0", "message": "Optimize tests.", "committedDate": "2020-07-15T07:52:36Z", "type": "commit"}, {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "url": "https://github.com/openmrs/openmrs-core/commit/fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "message": "Organize BaseFormRecordableOpenmrsData tests.", "committedDate": "2020-07-15T11:04:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3ODk0NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454978944", "bodyText": "This will probably be the implementation for Obs, by this I mean when the setter that needs to call markAsDirty(..).\nThe base implementation will be the same, without the calls to markAsDirty(..).", "author": "mks-d", "createdAt": "2020-07-15T11:22:47Z", "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}", "originalCommit": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDE5NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455124194", "bodyText": "Removed the markAsDirty(..) from the BaseFormRecordableOpenmrsData and re-implemented the obs.setFormField as:\npublic void setFormField(String namespace, String formFieldPath) {\n\tString oldValue = formNamespaceAndPath;\n\tsuper.setFormField(namespace, formFieldPath);\n\tmarkAsDirty(oldValue, formNamespaceAndPath);\n}", "author": "icrc-loliveira", "createdAt": "2020-07-15T15:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3ODk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454979795", "bodyText": "In light of the above you'll be able to remove this. The reason being that from recordable OpenMRS data and dirty-able OpenMRS data are two different things, I don't think we should conflate them there. @dkayiwa, @ibacher thoughts?", "author": "mks-d", "createdAt": "2020-07-15T11:24:39Z", "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}\n+\n+\tprotected abstract void markAsDirty(Object oldValue, Object newValue);", "originalCommit": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMTU0Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455021543", "bodyText": "I agree. We don't really use this pattern outside of Obs, so it's hard to see why it would be a requirement for the formNamespaceAndPath functionality.", "author": "ibacher", "createdAt": "2020-07-15T12:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNTcxMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455025712", "bodyText": "I also agree!", "author": "dkayiwa", "createdAt": "2020-07-15T12:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDQ5NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455124494", "bodyText": "Removed.", "author": "icrc-loliveira", "createdAt": "2020-07-15T15:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDAyNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980024", "bodyText": "In light of the above, this will not be necessary either.", "author": "mks-d", "createdAt": "2020-07-15T11:25:08Z", "path": "api/src/main/java/org/openmrs/Condition.java", "diffHunk": "@@ -396,4 +396,10 @@ public boolean equals(Object o) {\n \t\t}\n \t\treturn Objects.equals(endReason, conditionToBeChecked.endReason);\n \t}\n+\t\n+\t@Override\n+\tprotected void markAsDirty(Object oldValue, Object newValue) {\n+\t\t// Do nothing\n+\t}", "originalCommit": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjY1NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455126655", "bodyText": "Removed.", "author": "icrc-loliveira", "createdAt": "2020-07-15T15:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDIxMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980211", "bodyText": "@since 2.4.0", "author": "mks-d", "createdAt": "2020-07-15T11:25:29Z", "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+/**\n+ * Defines the methods to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since 1.4", "originalCommit": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDg4Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455124887", "bodyText": "Done.", "author": "icrc-loliveira", "createdAt": "2020-07-15T15:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDQ3OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980478", "bodyText": "Same here, and same for other methods.", "author": "mks-d", "createdAt": "2020-07-15T11:26:01Z", "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+/**\n+ * Defines the methods to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since 1.4\n+ */\n+public interface FormRecordable {\n+\n+\t/**\n+\t * Gets the namespace for the form field that was used to capture the obs details in the form\n+\t *\n+\t * @return the namespace\n+\t * @since 1.11", "originalCommit": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454984420", "bodyText": "Why not just use an Obs? That'd be the more backward compatible approach.", "author": "mks-d", "createdAt": "2020-07-15T11:34:05Z", "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the BaseFormRecordableOpenmrsDataImpl java object this test class for BaseFormRecordableOpenmrsDataImpl\n+ *\n+ * @see BaseFormRecordableOpenmrsDataImpl\n+ */\n+public class BaseFormRecordableOpenmrsDataTest {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = BaseFormRecordableOpenmrsData.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(impl));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", \"my path\");\n+\t\tassertNull(impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, null);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"my ns\", \"\");\n+\t\tassertNull(impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\n+\t\tfinal String ns = StringUtils.repeat(\"x\", 255);\n+\t\tfinal String path = \"\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, path));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceContainingTheSeparator() throws Exception {\n+\t\tfinal String ns = \"my ns\" + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, \"\"));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectAPathContainingTheSeparator() throws Exception {\n+\t\tfinal String path = FORM_NAMESPACE_PATH_SEPARATOR + \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(\"\", path));\n+\t}\n+\n+\tpublic class BaseFormRecordableOpenmrsDataImpl extends BaseFormRecordableOpenmrsData {", "originalCommit": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjMwNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455126304", "bodyText": "I prefer create a test class for this  (since is not to complicated) in order to the test be more independent.", "author": "icrc-loliveira", "createdAt": "2020-07-15T15:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMTQ5Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456331493", "bodyText": "It feels safer doing tests for real existing classes. If independency is needed, then i would do such tests in addition to those that deal with the real existing classes, not minus. \ud83d\ude0a", "author": "dkayiwa", "createdAt": "2020-07-17T09:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMzQwMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456333402", "bodyText": "FWIW, i have ever had a case where a dummy test class masked a bug in a real class. \ud83d\ude0a", "author": "dkayiwa", "createdAt": "2020-07-17T09:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NDIwNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456494204", "bodyText": "@icrc-loliveira... you'll have to use Obs ;-)\nSee here:\n\n@mks-d i still have a problem with replacing obs with a dummy BaseFormRecordableOpenmrsDataImpl class in the tests.", "author": "mks-d", "createdAt": "2020-07-17T14:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}], "type": "inlineReview"}, {"oid": "338d72c2a09322c5e8d9ddf57351bdeb109e48cf", "url": "https://github.com/openmrs/openmrs-core/commit/338d72c2a09322c5e8d9ddf57351bdeb109e48cf", "message": "Added updated test saveCondition_shouldSaveNewCondition to test condition.getFormNamespaceAndPath.", "committedDate": "2020-07-15T14:49:14Z", "type": "commit"}, {"oid": "5166ad661423e9492d3d18129bf53552c343bd9f", "url": "https://github.com/openmrs/openmrs-core/commit/5166ad661423e9492d3d18129bf53552c343bd9f", "message": "Added updated test saveCondition_shouldSaveNewCondition to test condition.getFormNamespaceAndPath.", "committedDate": "2020-07-15T14:54:47Z", "type": "commit"}, {"oid": "ffb2b057c3daa5b5ac4f55079c0f29a1f039388a", "url": "https://github.com/openmrs/openmrs-core/commit/ffb2b057c3daa5b5ac4f55079c0f29a1f039388a", "message": "Updated method comments.", "committedDate": "2020-07-15T15:10:28Z", "type": "commit"}, {"oid": "331017cb26ec2c9a1359b2421135c4d0ed4cb124", "url": "https://github.com/openmrs/openmrs-core/commit/331017cb26ec2c9a1359b2421135c4d0ed4cb124", "message": "Change exception message to refer `BaseFormRecordableOpenmrsDatainsted` of `obs`.", "committedDate": "2020-07-15T15:15:08Z", "type": "commit"}, {"oid": "35bf446b52ec5dcfeef55bcc952894c45163610b", "url": "https://github.com/openmrs/openmrs-core/commit/35bf446b52ec5dcfeef55bcc952894c45163610b", "message": "Renamed form_namespace_path to form_namespace_and_path to be consistent with Obs old value.", "committedDate": "2020-07-15T16:00:40Z", "type": "commit"}, {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70", "url": "https://github.com/openmrs/openmrs-core/commit/f26fa6ec52b727928e886c5a8d969d23416dae70", "message": "Remove field formNamespaceAndPath.", "committedDate": "2020-07-15T16:01:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3ODIyNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455678227", "bodyText": "Are you sure it's 100% ok, unfortunately there is also this piece:\nif (namespace == null && formFieldPath == null) {\n  markAsDirty(formNamespaceAndPath, null);\n  formNamespaceAndPath = null;\n  return;\n}", "author": "mks-d", "createdAt": "2020-07-16T10:13:08Z", "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the path was specified\n-\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Gets the path for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the the form field path\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the path for a form field that has no namespace\n-\t * <strong>Should</strong> return the correct path for a form field with a namespace\n-\t * <strong>Should</strong> return null if the path is not specified\n-\t */\n-\tpublic String getFormFieldPath() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the namespace was specified\n-\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Sets the namespace and path of the form field that was used to capture the obs details in the\n-\t * form.<br>\n-\t * <b>Note:</b> Namespace and formFieldPath together must not exceed 254 characters in length,\n-\t * form applications can subtract the length of their namespace from 254 to determine the\n-\t * maximum length they can use for a form field path.\n-\t * \n-\t * @param namespace the namespace of the form field\n-\t * @param formFieldPath the path of the form field\n-\t * @since 1.11\n-\t * <strong>Should</strong> set the underlying formNamespaceAndPath in the correct pattern\n-\t * <strong>Should</strong> reject a namepace containing the separator\n-\t * <strong>Should</strong> reject a path containing the separator\n-\t * <strong>Should</strong> reject a namepace and path combination longer than the max length\n-\t * <strong>Should</strong> not mark the obs as dirty when the value has not been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value has been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a null to a non null value\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a non null to a null value\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n \t */\n+\t@Override\n \tpublic void setFormField(String namespace, String formFieldPath) {\n-\t\tif (namespace == null && formFieldPath == null) {\n-\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n-\t\t\tformNamespaceAndPath = null;\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tString nsAndPathTemp = \"\";\n-\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t} else if (StringUtils.isNotBlank(namespace)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n-\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t}\n-\t\t\n-\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n-\t\t}\n-\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n-\t\t}\n-\t\t\n-\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n-\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t\tString oldValue = formNamespaceAndPath;\n+\t\tsuper.setFormField(namespace, formFieldPath);\n+\t\tmarkAsDirty(oldValue, formNamespaceAndPath);", "originalCommit": "f26fa6ec52b727928e886c5a8d969d23416dae70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwNzk4Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456107986", "bodyText": "I think this new code still takes care of that use case properly... ie marking as dirty if the formNamespaceAndPath goes from something to null, if I'm understanding it correctly.", "author": "mogoodrich", "createdAt": "2020-07-16T22:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3ODIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwODM1Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456108352", "bodyText": "Minor point, but by convention we don't use wildcard imports.", "author": "mogoodrich", "createdAt": "2020-07-16T22:13:50Z", "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;", "originalCommit": "f26fa6ec52b727928e886c5a8d969d23416dae70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTU5MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109591", "bodyText": "Where is this being used?", "author": "mogoodrich", "createdAt": "2020-07-16T22:17:10Z", "path": "api/src/test/java/org/openmrs/ObsTest.java", "diffHunk": "@@ -35,6 +35,7 @@\n import java.util.Locale;\n import java.util.Set;\n \n+import liquibase.util.StringUtils;", "originalCommit": "f26fa6ec52b727928e886c5a8d969d23416dae70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTcyNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109727", "bodyText": "More wildcard imports.", "author": "mogoodrich", "createdAt": "2020-07-16T22:17:30Z", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -9,40 +9,32 @@\n  */\n package org.openmrs.api.impl;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n import java.util.List;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.CodedOrFreeText;\n-import org.openmrs.Condition;\n-import org.openmrs.ConditionClinicalStatus;\n-import org.openmrs.ConditionVerificationStatus;\n-import org.openmrs.Encounter;\n-import org.openmrs.Patient;\n+import org.openmrs.*;", "originalCommit": "f26fa6ec52b727928e886c5a8d969d23416dae70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTgwNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109805", "bodyText": "Another wildcard import", "author": "mogoodrich", "createdAt": "2020-07-16T22:17:39Z", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -9,40 +9,32 @@\n  */\n package org.openmrs.api.impl;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n import java.util.List;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.CodedOrFreeText;\n-import org.openmrs.Condition;\n-import org.openmrs.ConditionClinicalStatus;\n-import org.openmrs.ConditionVerificationStatus;\n-import org.openmrs.Encounter;\n-import org.openmrs.Patient;\n+import org.openmrs.*;\n import org.openmrs.api.ConditionService;\n import org.openmrs.api.PatientService;\n import org.openmrs.api.context.Context;\n import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n \n+import static org.junit.jupiter.api.Assertions.*;", "originalCommit": "f26fa6ec52b727928e886c5a8d969d23416dae70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "60011a60bc902800ddef16ce6105d70b390afd03", "url": "https://github.com/openmrs/openmrs-core/commit/60011a60bc902800ddef16ce6105d70b390afd03", "message": "Fixed imports with wildcard.", "committedDate": "2020-07-17T07:29:56Z", "type": "commit"}, {"oid": "6766e5380342f8335f97eae686e30c86653121e9", "url": "https://github.com/openmrs/openmrs-core/commit/6766e5380342f8335f97eae686e30c86653121e9", "message": "Merge branch 'master' of https://github.com/icrc-loliveira/openmrs-core into TRUNK-5862\n\n\u0001 Conflicts:\n\u0001\tapi/src/main/java/org/openmrs/Obs.java\n\u0001\tapi/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "committedDate": "2020-07-17T07:55:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456311831", "bodyText": "Instead of removing, shouldn't we deprecate these public methods? https://wiki.openmrs.org/display/docs/Java+Conventions#JavaConventions-Deprecation", "author": "dkayiwa", "createdAt": "2020-07-17T08:54:16Z", "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {", "originalCommit": "6766e5380342f8335f97eae686e30c86653121e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNDQzMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456314430", "bodyText": "@dkayiwa this method doesn't really get removed from Obs, it's now coming from a new superclass.", "author": "mks-d", "createdAt": "2020-07-17T08:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNTAyOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456315028", "bodyText": "Oh cool \ud83d\ude0a", "author": "dkayiwa", "createdAt": "2020-07-17T09:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNjE1Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456316153", "bodyText": "@dkayiwa here: https://github.com/openmrs/openmrs-core/pull/3357/files#diff-26312f3ab88527f26370de68fc508603R64", "author": "mks-d", "createdAt": "2020-07-17T09:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNjM4OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456316388", "bodyText": "Modifying an existing test to set the form field creates an impression that it is required field. If not, i would rather create a new test.", "author": "dkayiwa", "createdAt": "2020-07-17T09:03:04Z", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,21 +62,31 @@ public void setup (){\n \t */\n \t@Test\n \tpublic void saveCondition_shouldSaveNewCondition(){\n+\t\t\n+\t\t// Create Condition to test\n+\t\tString ns = \"my ns\";\n+\t\tString path = \"my path\";\n \t\tInteger patientId = 2;\n \t\tString uuid = \"08002000-4469-12q3-551f-0339000c9a76\";\n \t\tCodedOrFreeText codedOrFreeText = new CodedOrFreeText();\n \t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);", "originalCommit": "6766e5380342f8335f97eae686e30c86653121e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b6a3ac3d9580d14ec2045fbb74de412fea9b6d0d", "url": "https://github.com/openmrs/openmrs-core/commit/b6a3ac3d9580d14ec2045fbb74de412fea9b6d0d", "message": "Add a new test `saveCondition_shouldSaveNewCondition` instead of touching the existing one.", "committedDate": "2020-07-17T11:01:20Z", "type": "commit"}, {"oid": "378b95f4afce1125bd162cb1f9dc6cfe994e3a6c", "url": "https://github.com/openmrs/openmrs-core/commit/378b95f4afce1125bd162cb1f9dc6cfe994e3a6c", "message": "Incremented CHANGE_SET_COUNT_FOR_2_1_X", "committedDate": "2020-07-17T11:51:35Z", "type": "commit"}, {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a", "url": "https://github.com/openmrs/openmrs-core/commit/41d9c9f6486eb5fc6064eb38fe708d2692a21e7a", "message": "Replace dummy class BaseFormRecordableOpenmrsDataImpl by Obs", "committedDate": "2020-07-17T15:10:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzQ2Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r457133462", "bodyText": "Just minor comment here on the wording.\n'This is a super class to make a bridge between an OpenMrsObject and is position in the form.' -> 'This is a super class to make a bridge between an OpenMrsObject and its position in the form.'", "author": "samuelmale", "createdAt": "2020-07-20T07:34:04Z", "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * \n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.", "originalCommit": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5OTM0Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r458699347", "bodyText": "@icrc-loliveira this maybe?\n\nBase implementation of FormRecordable that bridges between a saved BaseChangeableOpenmrsData entity and the path in a form where it was recorded.", "author": "mks-d", "createdAt": "2020-07-22T10:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3MjQ3Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r458572476", "bodyText": "please replace the JUnit 4 assertions in this test import org.junit.Assert since we migrated to JUnit 5. JUnit 5 ones are in the Jupiter package https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html", "author": "teleivo", "createdAt": "2020-07-22T06:51:34Z", "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.Assert;", "originalCommit": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}