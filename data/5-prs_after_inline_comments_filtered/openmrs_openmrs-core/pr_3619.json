{"pr_number": 3619, "pr_title": "TRUNK-4830: Fix a potential StackOverflowError", "pr_createdAt": "2020-10-28T19:30:03Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3619", "timeline": [{"oid": "f61ef949fd96ae839b3eeb72f92803b634ae0fe3", "url": "https://github.com/openmrs/openmrs-core/commit/f61ef949fd96ae839b3eeb72f92803b634ae0fe3", "message": "TRUNK-4830: Fix a potential StackOverflowError", "committedDate": "2020-10-28T19:30:36Z", "type": "commit"}, {"oid": "f61ef949fd96ae839b3eeb72f92803b634ae0fe3", "url": "https://github.com/openmrs/openmrs-core/commit/f61ef949fd96ae839b3eeb72f92803b634ae0fe3", "message": "TRUNK-4830: Fix a potential StackOverflowError", "committedDate": "2020-10-28T19:30:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1Njc1OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514456758", "bodyText": "What is the purpose of this method pls? It indirectly calls DatabaseUpdater#executeChangelog(String changelog, ChangeSetExecutorCallback callback) with null as first parameter which then results in an IllegalArgumentException.", "author": "WolfSchlegel", "createdAt": "2020-10-29T17:55:11Z", "path": "api/src/main/java/org/openmrs/api/context/Context.java", "diffHunk": "@@ -1189,11 +1189,26 @@ private static void checkForDatabaseUpdates(Properties props) throws DatabaseUpd\n \t *\n \t * @param userInput (can be null) responses from the user about needed input\n \t * @throws DatabaseUpdateException if an error occurred while updating\n-\t * @throws InputRequiredException if user input is required\n \t * @since 1.5\n+\t * @deprecated as of 2.4; see {@link #updateDatabase()}\n+\t * \n+\t */\n+\t@Deprecated\n+\tpublic static void updateDatabase(Map<String, Object> userInput) throws DatabaseUpdateException {\n+\t\tDatabaseUpdater.executeChangelog();\n+\t}\n+\n+\t/**\n+\t * Updates the openmrs database to the latest. This is only needed if using the API alone. <br>\n+\t * <br>\n+\t * The typical use-case would be: Try to {@link #startup(String, String, String, Properties)},\n+\t * if that fails, call this method to get the database up to speed.\n+\t * \n+\t * @throws DatabaseUpdateException if an error occurred while updating\n+\t * @since 2.4\n \t */\n-\tpublic static void updateDatabase(Map<String, Object> userInput) throws DatabaseUpdateException, InputRequiredException {\n-\t\tDatabaseUpdater.executeChangelog(null, userInput);\n+\tpublic static void updateDatabase() throws DatabaseUpdateException {\n+\t\tDatabaseUpdater.executeChangelog();\n \t}\n ", "originalCommit": "f61ef949fd96ae839b3eeb72f92803b634ae0fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3MDYxNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514470614", "bodyText": "To be honest, I think this existed to run the database updates if either the initialization filter or update filter didn't get called. I really can't find any example of this actually being used anywhere. Good point on the illegal argument exception. I was mostly concerned with eliminating the endless recursion here. Maybe the thing to do is just remove these methods and see what breaks?", "author": "ibacher", "createdAt": "2020-10-29T18:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1Njc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3NTU0MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514475540", "bodyText": "public static void updateDatabase(Map<String, Object> userInput) existed before and is now deprecated which makes sense.\npublic static void updateDatabase() is new since 2.4 and I was wondering why it is added.\nDefinitely a +1 on getting rid of the the strange recursion.", "author": "WolfSchlegel", "createdAt": "2020-10-29T18:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1Njc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3NjQ1MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514476451", "bodyText": "Maybe the thing to do is just remove these methods and see what breaks?\n\n\nYes, but breaking it \"gently\" by throwing exceptions but still allowing any code using this method to compile.", "author": "WolfSchlegel", "createdAt": "2020-10-29T18:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1Njc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MDM0MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514480340", "bodyText": "Well, I missed the fact that this code would throw an exception, so the new method was really just intended to replace public static void updateDatabase(Map<String, Object> userInput) with a version with the arguments we actually use (none). Obviously, that's also a bad idea!", "author": "ibacher", "createdAt": "2020-10-29T18:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1Njc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514460015", "bodyText": "Calling the deprecated method results in an IllegalArgumentException. I wonder if an UnsupportedOperationException would be more appropriate, with a message pointing out that the method called had been deprecated.\nWhen overhauling the Liquibase setup it took some time to figure out all the places where things were broken by the change. I am not aware of situations where user input is used to set up the database but the only way to find out whether anyone is doing this is deprecating the method and breaking the respective builds (hopefully before they go live).", "author": "WolfSchlegel", "createdAt": "2020-10-29T18:00:16Z", "path": "api/src/main/java/org/openmrs/api/context/Context.java", "diffHunk": "@@ -1189,11 +1189,26 @@ private static void checkForDatabaseUpdates(Properties props) throws DatabaseUpd\n \t *\n \t * @param userInput (can be null) responses from the user about needed input\n \t * @throws DatabaseUpdateException if an error occurred while updating\n-\t * @throws InputRequiredException if user input is required\n \t * @since 1.5\n+\t * @deprecated as of 2.4; see {@link #updateDatabase()}\n+\t * \n+\t */\n+\t@Deprecated\n+\tpublic static void updateDatabase(Map<String, Object> userInput) throws DatabaseUpdateException {\n+\t\tDatabaseUpdater.executeChangelog();\n+\t}\n+", "originalCommit": "f61ef949fd96ae839b3eeb72f92803b634ae0fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MjE5MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514482190", "bodyText": "So, it looks like we call the DatabaseUpdater.executeChangelog(); here as part of the startup, so we'll likely need to fix that too.", "author": "ibacher", "createdAt": "2020-10-29T18:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNDQxOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514504419", "bodyText": "I've updated this method to just throw an UnsupportedOperationException. On the other hand, I've now got an actual implementation for DatabaseUpdater.executeChangelog(), which may or may not be the desirable thing to do.", "author": "ibacher", "createdAt": "2020-10-29T19:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDM0Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514530346", "bodyText": "For what it's worth, this method was being hit as part of the PIH EMR startup, but I didn't look into why...", "author": "mogoodrich", "createdAt": "2020-10-29T20:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMTM1MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r514531350", "bodyText": "Or, actually, the 2-parameter version of this method...", "author": "mogoodrich", "createdAt": "2020-10-29T20:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyOTMyNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r515329327", "bodyText": "The implementation of DatabaseUpdater.executeChangelog() looks good to me. I tried to test it by initialising the database with OpenMRS 2.3.x and then restarting OpenMRS based on this branch but could not reach DatabaseUpdater.executeChangelog().\nSo by looking at the code very hard we feel it is ok but there is a chance that it fails in the wild. To prepare for that it would be good to add logging to DatabaseUpdater.executeChangelog(), similar to org.openmrs.liquibase.ChangeLogDetective which borrows the log level from the org.openmrs.api package.\nThe log statement should inform us about the version and changeLogs variables.", "author": "WolfSchlegel", "createdAt": "2020-10-30T19:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NDM2NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r516074364", "bodyText": "@WolfSchlegel I've added logging to the latest commit", "author": "ibacher", "createdAt": "2020-11-02T16:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2Mzk2Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r516263967", "bodyText": "@ibacher thanks for nudging.\nAnything logged at debug level will be invisible, so if things go wrong in the wild we can only wish we had more logging...\nI would suggest one of two things:\n\nlog version and a limited number of un-run change logs at info level, regardless whether an exception is raised or not\nOR log these values in the exceptional case only\n\nPlease have a look here, implementing this approach in the ChangeLogDetective paid large dividends when we rolled out the Liquibase overhaul", "author": "WolfSchlegel", "createdAt": "2020-11-02T21:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgxMjA0Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r516812047", "bodyText": "Any thoughts on the log settings please?", "author": "WolfSchlegel", "createdAt": "2020-11-03T16:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NDUzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r517364535", "bodyText": "@WolfSchlegel So I modeled the logging I added on what happens in the UpdateFilter, since that seems the most similar to where this is used. In particular, since we're just using calls to changeLogDetective to get the unrun changes, etc. and then passing the call to executeChangelog() to the same function, we should already be getting the same levels of logging we get with Liquibase currently in the case that this method gets called (I'm a little fuzzy on how this works, but it looks like we get to this chain on runs after the openmrs-runtime.properties file exists).", "author": "ibacher", "createdAt": "2020-11-04T14:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMzOTQ1Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r518339456", "bodyText": "That makes sense, I had not thought about the implicit logging that happens in the ChangeLogDetective.\nThe one thing that is still missing for me is a scenario where the changed methods are actually run. I had tried to see them in action during the initialisation and restart of OpenMRS but without success.\n@ibacher and @mogoodrich are you aware of such a scenario? If so I am happy to run a few tests.\nApart from that, is there anything I can do for this pull request? This is the first time I am reviewing a PR for OpenMRS so I am not sure about the next steps.", "author": "WolfSchlegel", "createdAt": "2020-11-05T20:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM1MDk0Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r518350942", "bodyText": "So I think to actually hit that method you'd have to:\n\nCreate a new server built on the 2.3 series of the platform.\nUpgrade the platform to a version of the core with these changes.\nWait and definitely do not make any web requests to the server for a bit.\n\nEssentially, the only place that uses the executeChangelog() call is in Context#checkForDatabaseUpdates(), which is called during the start-up process, but is only executed if the prior call to DatabaseUpdater#updatesRequired() reports that there are unrun liquibase changes. So the idea is to cause there to be unrun liquibase changes and to not hit the update filter, which will also cause the changes to be run.\nI'm not 100% certain that's right, but it's an educated guess.\nYou don't really have to do much else, unless there are other changes you think this code needs. Mostly I was checking in with you because you are currently the person most familiar with our liquibase processes \ud83d\ude01.", "author": "ibacher", "createdAt": "2020-11-05T20:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5ODAxOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r521398019", "bodyText": "Ok, so having dug a little deeper, I figured out how to actually trigger the code in question. Basically, you need to have:\n\nUnrun liquibase changes\nThe auto_update_database runtime property set to true\n\nIt seems the default setup for the SDK has auto_update_database set to false, in which case, if you have unrun database changes, you're redirected to the UpdateFilter pathway. Setting it to true bypasses the update filter and directly calls executeChangelog().", "author": "ibacher", "createdAt": "2020-11-11T14:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3Nzk5NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r523777995", "bodyText": "This weekend I found some time to run another test:\n\nInitialise openmrs-core with 2.3.x\nset auto_update_database=true in ~/.OpenMRS/openmrs-runtime.properties\nBuild and restart openmrs-core from this branch in debug mode\n\norg.openmrs.util.DatabaseUpdater#executeChangelog() was executed and all went well.", "author": "WolfSchlegel", "createdAt": "2020-11-15T16:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyOTQyMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3619#discussion_r524429421", "bodyText": "Thanks @WolfSchlegel! That's what I've seen as well.", "author": "ibacher", "createdAt": "2020-11-16T17:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2MDAxNQ=="}], "type": "inlineReview"}, {"oid": "aa0493697046b7f6053448e75da8db69964a68cb", "url": "https://github.com/openmrs/openmrs-core/commit/aa0493697046b7f6053448e75da8db69964a68cb", "message": "TRUNK-4830: Allow executeChangelog() to update to latest changelogs", "committedDate": "2020-10-29T19:08:59Z", "type": "forcePushed"}, {"oid": "bb29872119865a9ab6334ccabceba93e1d76d31a", "url": "https://github.com/openmrs/openmrs-core/commit/bb29872119865a9ab6334ccabceba93e1d76d31a", "message": "TRUNK-4830: Allow executeChangelog() to update to latest changelogs", "committedDate": "2020-10-30T12:44:55Z", "type": "forcePushed"}, {"oid": "a1293af7c257105f0964b6cd29c615a0bc9dcdcf", "url": "https://github.com/openmrs/openmrs-core/commit/a1293af7c257105f0964b6cd29c615a0bc9dcdcf", "message": "TRUNK-4830: Allow executeChangelog() to update to latest changelogs", "committedDate": "2020-11-02T13:51:38Z", "type": "forcePushed"}, {"oid": "eac3aee53b604eeef7e6b96dd19f0d6b8a916466", "url": "https://github.com/openmrs/openmrs-core/commit/eac3aee53b604eeef7e6b96dd19f0d6b8a916466", "message": "TRUNK-4830: Allow executeChangelog() to update to latest changelogs", "committedDate": "2020-11-02T16:49:36Z", "type": "commit"}, {"oid": "eac3aee53b604eeef7e6b96dd19f0d6b8a916466", "url": "https://github.com/openmrs/openmrs-core/commit/eac3aee53b604eeef7e6b96dd19f0d6b8a916466", "message": "TRUNK-4830: Allow executeChangelog() to update to latest changelogs", "committedDate": "2020-11-02T16:49:36Z", "type": "forcePushed"}]}