{"pr_number": 22323, "pr_title": "Add support for xml constraint type", "pr_createdAt": "2020-03-30T20:26:05Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwODY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400808650", "bodyText": "Doesn't the chained constraints (like in the above case) apply for subtypes?", "author": "pubudu91", "createdAt": "2020-03-31T10:32:39Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -584,7 +586,20 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n-                return TypeTags.isXMLTypeTag(sourceType.getTag());\n+                if (sourceType.getTag() == TypeTags.XML_TAG) {\n+                    BXMLType target = ((BXMLType) targetType);\n+                    BType targetConstraint = target.constraint;\n+                    // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n+                    while (target.constraint.getTag() == TypeTags.XML_TAG) {\n+                        target = (BXMLType) target.constraint;\n+                        targetConstraint = target.constraint;\n+                    }\n+                    return checkIsType(((BXMLType) sourceType).constraint, targetConstraint,\n+                            unresolvedTypes);\n+                } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+                    return true;", "originalCommit": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3ODExOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401378118", "bodyText": "The constraints only apply for XML types.", "author": "irshadnilam", "createdAt": "2020-04-01T06:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwODY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTMyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400835327", "bodyText": "What's the use of this instanceof check? The xml type is not a mapping type.", "author": "pubudu91", "createdAt": "2020-03-31T11:22:58Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {", "originalCommit": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTk1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400835959", "bodyText": "Also, why check for the negation of equals()?", "author": "pubudu91", "createdAt": "2020-03-31T11:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzODY4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400838682", "bodyText": "What's the use of this instanceof check? The xml type is not a mapping type.\n\nThis is a typo. Fixed that.\nI have followed the implementation BMapType instance coz it already has support for constraint. (Hence the typo)\n\nAlso, why check for the negation of equals()?\n\nThe check returns false", "author": "irshadnilam", "createdAt": "2020-03-31T11:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNjYxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400836618", "bodyText": "Is it guaranteed that the types used as constraints have only 1 copy of that type?", "author": "pubudu91", "createdAt": "2020-03-31T11:25:26Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {\n+            return false;\n+        }\n+\n+        BXMLType other = (BXMLType) obj;\n+        if (constraint == other.constraint) {", "originalCommit": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MDEyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400840120", "bodyText": "It is not. This equals is mostly for the completion purpose. (Similar BMAPType where it is also NOT guaranteed that the types used as constraints have only 1 copy)\nThese constraints are checked in jvm TypeChecker.", "author": "irshadnilam", "createdAt": "2020-03-31T11:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNjYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400862225", "bodyText": "What about if the constraint type happens to be a finite type, which contains a set of XML values?", "author": "pubudu91", "createdAt": "2020-03-31T12:12:11Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1000,6 +1001,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {", "originalCommit": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3ODUzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401378539", "bodyText": "Can we pass xml values in a  finite type?  @rdhananjaya", "author": "irshadnilam", "createdAt": "2020-04-01T06:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MzY1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401393654", "bodyText": "@pubudu91 could you provide an example for this?\nconstraints here should be only union (1 member or up) of xml subtypes.", "author": "rdhananjaya", "createdAt": "2020-04-01T06:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NDk3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401394977", "bodyText": "I think what @pubudu91  meant is something like this.\ntype Foo \"bar\"|\"car\";\nbut for xml-values", "author": "irshadnilam", "createdAt": "2020-04-01T06:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTg3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402065875", "bodyText": "I don't see how it's possible in the current language, that's why I asked for an example.", "author": "rdhananjaya", "createdAt": "2020-04-02T05:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400878441", "bodyText": "Why is the XML type special cased? Also, shall we add these second conditions as nested if conditions? i.e., check if it's an ADD op once", "author": "pubudu91", "createdAt": "2020-03-31T12:37:40Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2366,8 +2372,22 @@ public void visit(BLangBinaryExpr binaryExpr) {\n         // Set error type as the actual type.\n         BType actualType = symTable.semanticError;\n \n-        // Look up operator symbol if both rhs and lhs types are error types\n-        if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n+        // Do not lookup operator symbol for xml sequence additions\n+        if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (lhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(rhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) lhsType).constraint, rhsType),\n+                    false,\n+                    null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (rhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(lhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) rhsType).constraint, lhsType),\n+                    false, null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&", "originalCommit": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5NjI2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400896269", "bodyText": "This was done to overcome an issue which was discussed in https://ballerina-platform.slack.com/archives/CAXS256RX/p1585205684025700", "author": "irshadnilam", "createdAt": "2020-03-31T13:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNjEyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401126121", "bodyText": "About nesting the ADD operation.\nWe still want to visit the else if section\nelse if (lhsType != symTable.semanticError && rhsType != symTable.semanticError)\nfollowing even for add operations witch are non-xml.\nIf we nest like u suggested, we will have to keep a separate boolean (xml special case is visited - setting its value under each condition) and then check the negation of that boolean on following section.\nI think it would make the code bit unclear. WDYT?", "author": "irshadnilam", "createdAt": "2020-03-31T18:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4OTQ5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402089498", "bodyText": "Don't we have to handle something like lhs=comment, rhs=procInstruction.\nAlso, shall we not change the order of lhsType and rhsType in if condition.\nWe can use a switch statement with fall through like:\n        //noinspection SwitchStatementWithTooFewBranches\n        switch (binaryExpr.opKind) {\n            // Do not lookup operator symbol for xml sequence additions\n            case ADD:\n                BType l = getXMLConstituents(lhsType);\n                BType r = getXMLConstituents(rhsType);\n\n                if (l != null && r != null) {\n                    actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, l, r), false, null);\n                    break;\n                }\n                // Fall through\n            default:\n                if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n                    // Look up operator symbol if both rhs and lhs types aren't error or xml types\n                    BSymbol opSymbol = symResolver.resolveBinaryOperator(binaryExpr.opKind, lhsType, rhsType);\n\n                    if (opSymbol == symTable.notFoundSymbol) {\n                        opSymbol = symResolver.getBinaryEqualityForTypeSets(binaryExpr.opKind, lhsType, rhsType, binaryExpr);\n                    }\n\n                    if (opSymbol == symTable.notFoundSymbol) {\n                        dlog.error(binaryExpr.pos, DiagnosticCode.BINARY_OP_INCOMPATIBLE_TYPES, binaryExpr.opKind,\n                                lhsType, rhsType);\n                    } else {\n                        if ((binaryExpr.opKind == OperatorKind.EQUAL || binaryExpr.opKind == OperatorKind.NOT_EQUAL) &&\n                                (couldHoldTableValues(lhsType, new ArrayList<>()) &&\n                                        couldHoldTableValues(rhsType, new ArrayList<>()))) {\n                            dlog.error(binaryExpr.pos, DiagnosticCode.EQUALITY_NOT_YET_SUPPORTED, TABLE_TNAME);\n                        }\n\n                        binaryExpr.opSymbol = (BOperatorSymbol) opSymbol;\n                        actualType = opSymbol.type.getReturnType();\n                    }\n                }\n        }\n    private BType getXMLConstituents(BType type) {\n        BType c = null;\n        if (type.tag == TypeTags.XML) {\n            c = ((BXMLType) type).constraint;\n        } else if (TypeTags.isXMLNonSequenceType(type.tag)) {\n            c = type;\n        }\n        return c;\n    }\nBut there is a catch to this kind of solutions, this may confuse someone who is not familiar with fallthrough.", "author": "rdhananjaya", "createdAt": "2020-04-02T06:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0OTA4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402249086", "bodyText": "+1 added your suggestion.\nI have also removed redundant xml operations from SymbolTable (for element + comment like scenarios) since this covers everything.", "author": "irshadnilam", "createdAt": "2020-04-02T11:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MzE3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400883174", "bodyText": "Since this method is called only after verifying that the source and target tags are XML, can't we change the method signature to accept XML types? This would get rid of redundant type tag checks such as this one", "author": "pubudu91", "createdAt": "2020-03-31T12:45:24Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -644,6 +655,25 @@ private boolean isErrorTypeAssignable(BErrorType source, BErrorType target, Set<\n                 isAssignable(source.detailType, target.detailType, unresolvedTypes);\n     }\n \n+    //TODO: recheck this.\n+    private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<TypePair> unresolvedTypes) {\n+        int sourceTag = sourceType.tag;\n+        int targetTag = targetType.tag;\n+\n+        if (targetTag == TypeTags.XML) {", "originalCommit": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyOTA5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401129097", "bodyText": "The sourceType and targetType can be either BXMLType or BXMLSubtype. The way we have implemented. BXMLSubtype does not extend BXMLType. Hence, there isn't a common class we can use as parameter.", "author": "irshadnilam", "createdAt": "2020-03-31T18:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MzE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzIyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400887222", "bodyText": "Do we need this new list? Can simply use 2 nested loops to achieve this right? The basic idea would be to use\ndefineBinaryOperator(OperatorKind.ADD, subType, subType, subType);\nfor when i == j and use\ndefineBinaryOperator(OperatorKind.ADD, subType, otherType, xmlType);\ndefineBinaryOperator(OperatorKind.ADD, otherType, subType, xmlType);\nwhen i != j", "author": "pubudu91", "createdAt": "2020-03-31T12:51:31Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -517,6 +519,35 @@ public void defineOperators() {\n \n     }\n \n+    private void defineXmlArithmaticOperations() {\n+        defineBinaryOperator(OperatorKind.ADD, xmlType, xmlType, xmlType);\n+        List<BType> xmlSubTypes = Arrays.asList(xmlElementType, xmlCommentType, xmlPIType, xmlTextType);\n+        for (int i = 0; i < xmlSubTypes.size(); i++) {\n+            BType subType = xmlSubTypes.get(i);\n+            defineBinaryOperator(OperatorKind.ADD, subType, subType, subType);\n+\n+            List<BType> others = new ArrayList<>(xmlSubTypes);\n+            others.remove(i);", "originalCommit": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNzE4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401127182", "bodyText": "+1 removed the list.", "author": "irshadnilam", "createdAt": "2020-03-31T18:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400887610", "bodyText": "What's the purpose of the default constraint?", "author": "pubudu91", "createdAt": "2020-03-31T12:52:05Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;", "originalCommit": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5NzQ5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400897498", "bodyText": "The purpose of this to minimize the verbose xml error message for default xml type without any constraint.\nPlease check toString() method of BXMLType.", "author": "irshadnilam", "createdAt": "2020-03-31T13:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4ODIyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401488227", "bodyText": "Can we remove defaultConstraint param from constructor (it's almost false) and check size == 4 in toString method.\nIf I'm not mistaken .toString will only be called when emitting diagnostics, slowness in .toString methods wouldn't affect much.", "author": "rdhananjaya", "createdAt": "2020-04-01T09:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDI5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220291", "bodyText": "+1 changed it to look for size.\nI am checking if constraint instance of BUnionType to avoid spotbugs warning eventhough we don't need it since we check typetags.", "author": "irshadnilam", "createdAt": "2020-04-02T10:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NjM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401466384", "bodyText": "Shall we rename this to something like checkIsLikeNonElementSingleton", "author": "rdhananjaya", "createdAt": "2020-04-01T09:09:56Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1188,7 +1203,12 @@ private static boolean checkIsLikeOnValue(Object sourceValue, BType sourceType,\n             case TypeTags.XML_PI_TAG:\n             case TypeTags.XML_TEXT_TAG:\n                 if (sourceType.getTag() == TypeTags.XML_TAG) {\n-                    return matchXMLType((XMLValue) sourceValue, targetType);\n+                    return matchXMLTypeNonSequence((XMLValue) sourceValue, targetType);", "originalCommit": "436b934430df197dd8fef90dd9558dcb1a52a807", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3OTg5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401479890", "bodyText": "Done", "author": "irshadnilam", "createdAt": "2020-04-01T09:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NjM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzQ0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401467441", "bodyText": "Shall we rename this to something like checkIsLikeXMLSequenceType", "author": "rdhananjaya", "createdAt": "2020-04-01T09:11:44Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1188,7 +1203,12 @@ private static boolean checkIsLikeOnValue(Object sourceValue, BType sourceType,\n             case TypeTags.XML_PI_TAG:\n             case TypeTags.XML_TEXT_TAG:\n                 if (sourceType.getTag() == TypeTags.XML_TAG) {\n-                    return matchXMLType((XMLValue) sourceValue, targetType);\n+                    return matchXMLTypeNonSequence((XMLValue) sourceValue, targetType);\n+                }\n+                return false;\n+            case TypeTags.XML_TAG:\n+                if (sourceType.getTag() == TypeTags.XML_TAG) {\n+                    return matchXMLTypeSequence((XMLValue) sourceValue, targetType);", "originalCommit": "436b934430df197dd8fef90dd9558dcb1a52a807", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3OTc4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401479789", "bodyText": "Done", "author": "irshadnilam", "createdAt": "2020-04-01T09:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MDczNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401470734", "bodyText": "Type equals methods are usually performance-critical in Ballerina due to runtime typechecks.\nShall we inline the object reference test (obj == this) and instanceof test (and remove super call)", "author": "rdhananjaya", "createdAt": "2020-04-01T09:17:12Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BXMLType)) {", "originalCommit": "436b934430df197dd8fef90dd9558dcb1a52a807", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4NjU1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401486553", "bodyText": "+1. This is refactored.", "author": "irshadnilam", "createdAt": "2020-04-01T09:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MDczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzAyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402063026", "bodyText": "Fix comment to xml", "author": "rdhananjaya", "createdAt": "2020-04-02T05:40:51Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1142,6 +1145,25 @@ private static void loadMapType(MethodVisitor mv, BMapType bType) {\n         mv.visitMethodInsn(INVOKESPECIAL, MAP_TYPE, \"<init>\", String.format(\"(L%s;)V\", BTYPE), false);\n     }\n \n+    /**\n+     * Generate code to load an instance of the given xml sequence type\n+     * to the top of the stack.\n+     *\n+     * @param mv    method visitor\n+     * @param bType xml type to load\n+     */\n+    private static void loadXmlType(MethodVisitor mv, BXMLType bType) {\n+        // Create an new map type", "originalCommit": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDQ0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220447", "bodyText": "Fixed.", "author": "irshadnilam", "createdAt": "2020-04-02T10:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTYxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402065615", "bodyText": "Shall we remove this and return the result then and there.\nDifficult to differentiate constrainedType and constraintType.", "author": "rdhananjaya", "createdAt": "2020-04-02T05:49:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;", "originalCommit": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDU4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220585", "bodyText": "Removed the method.", "author": "irshadnilam", "createdAt": "2020-04-02T10:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTk4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402065985", "bodyText": "This could go on a single line.", "author": "rdhananjaya", "createdAt": "2020-04-02T05:51:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,\n+                        symTable.xmlType, constraintType);", "originalCommit": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDcwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220708", "bodyText": "Fixed.", "author": "irshadnilam", "createdAt": "2020-04-02T10:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NjAyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402066026", "bodyText": "This could go on a single line.", "author": "rdhananjaya", "createdAt": "2020-04-02T05:51:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,\n+                        symTable.xmlType, constraintType);\n+            }\n+            constrainedType = new BXMLType(TypeTags.XML, constraintType, false, null);\n+        } else {\n+            checkUnionTypeForXMLSubTypes((BUnionType) constraintType, pos);\n+            constrainedType = new BXMLType(TypeTags.XML, constraintType, false, null);\n+        }\n+        return constrainedType;\n+    }\n+\n+    private void checkUnionTypeForXMLSubTypes(BUnionType constraintUnionType, DiagnosticPos pos) {\n+        for (BType memberType : constraintUnionType.getMemberTypes()) {\n+            if (memberType.tag == TypeTags.UNION) {\n+                checkUnionTypeForXMLSubTypes((BUnionType) memberType, pos);\n+            }\n+            if (!TypeTags.isXMLTypeTag(memberType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,", "originalCommit": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220659", "bodyText": "Fixed.", "author": "irshadnilam", "createdAt": "2020-04-02T10:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NjAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzE1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402077154", "bodyText": "First arg is alway XML tag, we don't need this, shall we remove it.", "author": "rdhananjaya", "createdAt": "2020-04-02T06:24:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;\n+\n     public BXMLType(int tag, BTypeSymbol tsymbol) {\n         super(tag, tsymbol);\n+        this.defaultConstraint = true;\n+    }\n+\n+    public BXMLType(int tag, BType constraint, boolean defaultConstraint, BTypeSymbol tsymbol) {", "originalCommit": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220829", "bodyText": "Removed.", "author": "irshadnilam", "createdAt": "2020-04-02T10:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNDc2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402124763", "bodyText": "I think we should move the XML logic to checkIsRecursiveType now and handle this similar to other constrained types.", "author": "MaryamZi", "createdAt": "2020-04-02T08:04:06Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -578,7 +580,20 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n-                return TypeTags.isXMLTypeTag(sourceType.getTag());\n+                BXMLType target = ((BXMLType) targetType);", "originalCommit": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDk3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220974", "bodyText": "Moved the logic to checkIsRecursiveType method.", "author": "irshadnilam", "createdAt": "2020-04-02T10:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNDc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MTM1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402291356", "bodyText": "Merge conflict?\nL491  is the same", "author": "rdhananjaya", "createdAt": "2020-04-02T12:57:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -480,22 +480,33 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n             return true;\n         }\n \n-        if (TypeTags.isXMLTypeTag(sourceTag) && targetTag == TypeTags.XML) {\n+        if (TypeTags.isXMLTypeTag(sourceTag) && TypeTags.isXMLTypeTag(targetTag)) {\n+            return isXMLTypeAssignable(source, target, unresolvedTypes);\n+        }\n+\n+        if (sourceTag == TypeTags.CHAR_STRING && targetTag == TypeTags.STRING) {", "originalCommit": "194bc1353d6e32eb248281c340c0dda9117f9a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NjUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402296508", "bodyText": "Yep, probably due to merge conflicts. Fixed.", "author": "irshadnilam", "createdAt": "2020-04-02T13:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MTM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NDEyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402294122", "bodyText": "Shall we rename to defineXmlStringConcatanationOperations", "author": "rdhananjaya", "createdAt": "2020-04-02T13:01:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -348,15 +351,13 @@ private void defineType(BType type, BTypeSymbol tSymbol) {\n     public void defineOperators() {\n         // Binary arithmetic operators\n         defineIntegerArithmeticOperations();\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, xmlType, xmlType);\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, stringType, xmlType);\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, charStringType, xmlType);\n+\n+        // XML arithmetic operators\n+        defineXmlArithmaticOperations();", "originalCommit": "194bc1353d6e32eb248281c340c0dda9117f9a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NjU3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402296575", "bodyText": "Renamed.", "author": "irshadnilam", "createdAt": "2020-04-02T13:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NDEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NTQ2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402295465", "bodyText": "Extra line?", "author": "rdhananjaya", "createdAt": "2020-04-02T13:03:35Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibXMLTest.java", "diffHunk": "@@ -43,16 +44,19 @@\n  */\n public class LangLibXMLTest {\n \n-    private CompileResult compileResult, negativeResult;\n+    private CompileResult compileResult, negativeResult, constrainedTest, constraintNegative;\n \n     @BeforeClass\n     public void setup() {\n         compileResult = BCompileUtil.compile(\"test-src/xmllib_test.bal\");\n+        constrainedTest = BCompileUtil.compile(\"test-src/xmllib_constrained_test.bal\");\n         negativeResult = BCompileUtil.compile(\"test-src/xmllib_test_negative.bal\");\n+        constraintNegative = BCompileUtil.compile(\"test-src/xmllib_constrained_negative_test.bal\");\n     }\n \n     @Test(dataProvider = \"XMLDataProvider\")\n     public void testLength(BValue val, long expectedLength) {\n+", "originalCommit": "194bc1353d6e32eb248281c340c0dda9117f9a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5ODEwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402298104", "bodyText": "Removed.", "author": "irshadnilam", "createdAt": "2020-04-02T13:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NTQ2NQ=="}], "type": "inlineReview"}, {"oid": "c6d2ea82cddab45eab1ebcf78c44053bb37edd77", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6d2ea82cddab45eab1ebcf78c44053bb37edd77", "message": "Add constraint type support for xml", "committedDate": "2020-04-06T07:25:50Z", "type": "commit"}, {"oid": "2d9d7ce854bcd0fd67a38a31ecf1c402adcc2ae7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d9d7ce854bcd0fd67a38a31ecf1c402adcc2ae7", "message": "Enable disabled xml tests", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}, {"oid": "cc445d5d8e4f1ec4abb62c13106268b82ca423b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc445d5d8e4f1ec4abb62c13106268b82ca423b6", "message": "Add support to declare named subtype with xml literals", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}, {"oid": "d480021e89e89f9f355b3aca5776c0b94ed04428", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d480021e89e89f9f355b3aca5776c0b94ed04428", "message": "Add xml constraint support for runtime", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}, {"oid": "185c039b9f4f2e75f227f175a8fb9bda2b818901", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/185c039b9f4f2e75f227f175a8fb9bda2b818901", "message": "Add unit tests for xml constraint type", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}, {"oid": "455a4558b039e9a63c39d63d232658000bf20190", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/455a4558b039e9a63c39d63d232658000bf20190", "message": "Change runtime tests xml-error message", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}, {"oid": "64cbf0c3c6b03ed58bd2f570a83193c53621fa24", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64cbf0c3c6b03ed58bd2f570a83193c53621fa24", "message": "Refactor xml constrain type implementation", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}, {"oid": "84b04d61e7e50fd78ef1d11b4ac603a103a5976e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/84b04d61e7e50fd78ef1d11b4ac603a103a5976e", "message": "Add more xml constraint tests", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}, {"oid": "df589363110638061ce888ceacaaff17d37b7f60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df589363110638061ce888ceacaaff17d37b7f60", "message": "Fix few xml typechecking issues", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}, {"oid": "97a205e4b6ee6c67ea60c1df5cf5a55a5a946b70", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97a205e4b6ee6c67ea60c1df5cf5a55a5a946b70", "message": "Disable failing codeaction test temporarily", "committedDate": "2020-04-06T07:25:51Z", "type": "commit"}]}