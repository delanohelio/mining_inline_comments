{"pr_number": 22316, "pr_title": "[master] Add support for record -> json assignment", "pr_createdAt": "2020-03-30T12:00:22Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316", "timeline": [{"oid": "22f2656aee3b63f51cb3132f177091ff5a83b945", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22f2656aee3b63f51cb3132f177091ff5a83b945", "message": "Add support for record -> json assignment", "committedDate": "2020-03-30T11:59:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400721505", "bodyText": "Not related to this PR, but returning true for isJSONObject if  typeTag == TypeTags.JSON_TAG is wrong right? And we need to check the map's constraint too assuming this is a generic method.", "author": "MaryamZi", "createdAt": "2020-03-31T08:11:12Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/JSONUtils.java", "diffHunk": "@@ -297,7 +297,8 @@ public static boolean isJSONObject(Object json) {\n         }\n \n         BType type = ((RefValue) json).getType();\n-        return type.getTag() == TypeTags.JSON_TAG || type.getTag() == TypeTags.MAP_TAG;\n+        int typeTag = type.getTag();\n+        return typeTag == TypeTags.JSON_TAG || typeTag == TypeTags.MAP_TAG || typeTag == TypeTags.RECORD_TYPE_TAG;", "originalCommit": "22f2656aee3b63f51cb3132f177091ff5a83b945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5NDEzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400794139", "bodyText": "Just checked this. It seems simple literals are in their original type, so it doesn't count as a JSON tag. For example, the following works as expected:\nimport ballerina/io;\n\npublic function main() {\n    json j1 = 10;\n    io:println(j1.name);\n}\nj1 is a Long when you check at this point.", "author": "pubudu91", "createdAt": "2020-03-31T10:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1MDM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400950398", "bodyText": "Yeah but typeTag == TypeTags.JSON_TAG will never be true right?", "author": "MaryamZi", "createdAt": "2020-03-31T14:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzNjMxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r401036313", "bodyText": "Ah just checked it.. yeah, you're right.. for JSON objects, it's map<json>.. I'll remove this condition and see..", "author": "pubudu91", "createdAt": "2020-03-31T16:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0NTI2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r401045264", "bodyText": "Removed it in 4b4eaea. The unit tests passed locally.", "author": "pubudu91", "createdAt": "2020-03-31T16:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMTUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODAyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400738024", "bodyText": "Shouldn't we just return false?", "author": "MaryamZi", "createdAt": "2020-03-31T08:37:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -618,17 +622,34 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n                 isArrayTypesAssignable(source, target, unresolvedTypes);\n     }\n \n-    private boolean isAssignableRecordType(BRecordType recordType, BMapType targetMapType) {\n+    private boolean isAssignableRecordType(BRecordType recordType, BType type) {\n+        BType targetType;\n+        switch (type.tag) {\n+            case TypeTags.MAP:\n+                targetType = ((BMapType) type).constraint;\n+                break;\n+            case TypeTags.JSON:\n+                targetType = type;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Incompatible target type: \" + type.toString());", "originalCommit": "22f2656aee3b63f51cb3132f177091ff5a83b945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4MjIzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400782238", "bodyText": "Added this default case since I changed the method signature to accept BType and wanted to ensure this method is used only in contexts with the supported types (map and json).", "author": "pubudu91", "createdAt": "2020-03-31T09:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODY1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400738657", "bodyText": "Shall we move this logic to recordFieldsAssignableToType. Rest fields are also record fields?", "author": "MaryamZi", "createdAt": "2020-03-31T08:38:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -618,17 +622,34 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n                 isArrayTypesAssignable(source, target, unresolvedTypes);\n     }\n \n-    private boolean isAssignableRecordType(BRecordType recordType, BMapType targetMapType) {\n+    private boolean isAssignableRecordType(BRecordType recordType, BType type) {\n+        BType targetType;\n+        switch (type.tag) {\n+            case TypeTags.MAP:\n+                targetType = ((BMapType) type).constraint;\n+                break;\n+            case TypeTags.JSON:\n+                targetType = type;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Incompatible target type: \" + type.toString());\n+        }\n+\n         if (recordType.sealed) {\n-            return recordFieldsAssignableToMap(recordType, targetMapType);\n+            return recordFieldsAssignableToType(recordType, targetType);\n         } else {\n-            return isAssignable(recordType.restFieldType, targetMapType.constraint)\n-                    && recordFieldsAssignableToMap(recordType, targetMapType);\n+            return recordFieldsAssignableToType(recordType, targetType) &&\n+                    isAssignable(recordType.restFieldType, targetType);", "originalCommit": "22f2656aee3b63f51cb3132f177091ff5a83b945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4MzE5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400783194", "bodyText": "+1.. That'd actually simplify things a bit", "author": "pubudu91", "createdAt": "2020-03-31T09:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODc0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22316#discussion_r400738742", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "MaryamZi", "createdAt": "2020-03-31T08:38:59Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/json/RecordToJSONTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ *   Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "22f2656aee3b63f51cb3132f177091ff5a83b945", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "804641c1e06678783c2934c3cd8e93b95c390290", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/804641c1e06678783c2934c3cd8e93b95c390290", "message": "Fix checkstyle issues", "committedDate": "2020-03-31T09:43:21Z", "type": "commit"}, {"oid": "10a0a381decb2cf76cab579f8d1c8754f75ae848", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10a0a381decb2cf76cab579f8d1c8754f75ae848", "message": "Update tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/json/RecordToJSONTest.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-31T09:52:41Z", "type": "commit"}, {"oid": "223bf6f27769209ba8c3b783fcbf6d81b7cb10cd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/223bf6f27769209ba8c3b783fcbf6d81b7cb10cd", "message": "Simplify the record field assignability check", "committedDate": "2020-03-31T10:15:39Z", "type": "commit"}, {"oid": "4b4eaeab6e39b5cf11c6e0dbd24855b4643cf582", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b4eaeab6e39b5cf11c6e0dbd24855b4643cf582", "message": "Remove unnecessary JSON type check in JSONUtils", "committedDate": "2020-03-31T16:20:12Z", "type": "commit"}]}