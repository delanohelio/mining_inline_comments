{"pr_number": 23397, "pr_title": "Add support for using variable references in extern functions' return types", "pr_createdAt": "2020-05-20T19:57:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397", "timeline": [{"oid": "3bb8ff5b4e4f0904adb902c3d4b5ffbe7ebf29fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bb8ff5b4e4f0904adb902c3d4b5ffbe7ebf29fc", "message": "Add test cases", "committedDate": "2020-05-26T07:45:58Z", "type": "forcePushed"}, {"oid": "7996afecbdb64e16d1c37ad0bdca144d07b096cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7996afecbdb64e16d1c37ad0bdca144d07b096cc", "message": "Add test cases", "committedDate": "2020-05-26T07:51:34Z", "type": "forcePushed"}, {"oid": "1b53e56e8f1a28cb5fab5444492b0f429b410ad7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b53e56e8f1a28cb5fab5444492b0f429b410ad7", "message": "Add negative test cases", "committedDate": "2020-05-27T12:50:41Z", "type": "forcePushed"}, {"oid": "468e7812d665683b5968773f19d30e5b44f7fb45", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/468e7812d665683b5968773f19d30e5b44f7fb45", "message": "Add negative test cases", "committedDate": "2020-05-27T15:04:36Z", "type": "forcePushed"}, {"oid": "a07b61f618239abd4a3141b1478f3047ce94d67d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a07b61f618239abd4a3141b1478f3047ce94d67d", "message": "Add negative test cases", "committedDate": "2020-05-27T19:36:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNDQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431704495", "bodyText": "Recheck this. Might have to return from here.", "author": "pubudu91", "createdAt": "2020-05-28T09:30:53Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1210,6 +1278,32 @@ public void visit(BLangUserDefinedType userDefinedTypeNode) {\n         resultType = symbol.type;\n     }\n \n+    private BType getTypedescParamValueType(List<BLangSimpleVariable> params, BSymbol varSym,\n+                                            DiagnosticPos retTypePos) {\n+        for (BLangSimpleVariable param : params) {\n+            if (param.name.value.equals(varSym.name.value)) {\n+                if (param.expr == null) {\n+                    return ((BTypedescType) varSym.type).constraint;\n+                }\n+\n+                if (param.expr.getKind() == NodeKind.TYPEDESC_EXPRESSION) {\n+                    return resolveTypeNode(((BLangTypedescExpr) param.expr).typeNode, this.env);\n+                }\n+\n+                if (param.expr.getKind() == NodeKind.SIMPLE_VARIABLE_REF) {\n+                    Name varName = names.fromIdNode(((BLangSimpleVarRef) param.expr).variableName);\n+                    BSymbol typeRefSym = lookupSymbolInMainSpace(this.env, varName);\n+                    return typeRefSym != symTable.notFoundSymbol ? typeRefSym.type : symTable.semanticError;\n+                }\n+\n+                dlog.error(param.pos, DiagnosticCode.INVALID_TYPEDESC_PARAM);", "originalCommit": "28ac1e0d6ff7aa8e058abc48638b499e17518827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4ODM1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432088352", "bodyText": "@KRVPerera good catch. It turned out that a return was required here.", "author": "pubudu91", "createdAt": "2020-05-28T19:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNDQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczMTkzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431731935", "bodyText": "Change to the name of the param", "author": "pubudu91", "createdAt": "2020-05-28T10:20:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BParameterizedType.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.semantics.model.TypeVisitor;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * Represents a parameterized type.\n+ */\n+public class BParameterizedType extends BType {\n+\n+    public BVarSymbol paramSymbol;\n+    public BType paramValueType;\n+\n+    public BParameterizedType(BType valueType, BVarSymbol paramSymbol, BTypeSymbol tSymbol, Name name) {\n+        super(TypeTags.PARAMETERIZED_TYPE, tSymbol);\n+        this.paramSymbol = paramSymbol;\n+        this.paramValueType = valueType;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public boolean isNullable() {\n+        // TODO: Check what the correct behaviour is for this\n+//        return this.paramSymbol.type.isNullable();\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"<T>\" + this.paramValueType.toString();", "originalCommit": "28ac1e0d6ff7aa8e058abc48638b499e17518827", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNDAxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431724013", "bodyText": "If the enclosingType already has PARAMETERIZED flag we don't need to set again. Can skip loop.", "author": "KRVPerera", "createdAt": "2020-05-28T10:05:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1358,6 +1456,28 @@ public BSymbol getBinaryEqualityForTypeSets(OperatorKind opKind, BType lhsType,\n         return symTable.notFoundSymbol;\n     }\n \n+    public boolean markParameterizedType(BType type, BType constituentType) {\n+        if (Symbols.isFlagOn(constituentType.flags, Flags.PARAMETERIZED)) {\n+            type.tsymbol.flags |= Flags.PARAMETERIZED;\n+            type.flags |= Flags.PARAMETERIZED;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void markParameterizedType(BType enclosingType, Collection<BType> constituentTypes) {", "originalCommit": "28ac1e0d6ff7aa8e058abc48638b499e17518827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5MTczNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432091736", "bodyText": "The enclosing type would not contain the flag since this method gets called right after the enclosing type gets created.", "author": "pubudu91", "createdAt": "2020-05-28T20:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNDAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNTk4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431725983", "bodyText": "we can just make this markParameterizedType(tupleType, memberTypes) and call markParameterizedType again when tupleTypeNode.restParamType != null with restParamType\nmarkParameterizedType(tupleType, tupleTypeNode.restParamType).\nWith caching on markParameterizedType we can avoid creating a new ArrayList completely.", "author": "KRVPerera", "createdAt": "2020-05-28T10:08:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1079,14 +1103,19 @@ public void visit(BLangTupleTypeNode tupleTypeNode) {\n         }\n \n         BTypeSymbol tupleTypeSymbol = Symbols.createTypeSymbol(SymTag.TUPLE_TYPE, Flags.asMask(EnumSet.of(Flag.PUBLIC)),\n-                Names.EMPTY, env.enclPkg.symbol.pkgID, null, env.scope.owner);\n+                                                               Names.EMPTY, env.enclPkg.symbol.pkgID, null,\n+                                                               env.scope.owner);\n \n+        List<BType> allMemTypes = new ArrayList<>(memberTypes);\n         BTupleType tupleType = new BTupleType(tupleTypeSymbol, memberTypes);\n         tupleTypeSymbol.type = tupleType;\n-        if (tupleTypeNode.restParamType !=  null) {\n+        if (tupleTypeNode.restParamType != null) {\n             tupleType.restType = resolveTypeNode(tupleTypeNode.restParamType, env);\n+            allMemTypes.add(tupleType.restType);\n         }\n \n+        markParameterizedType(tupleType, allMemTypes);", "originalCommit": "28ac1e0d6ff7aa8e058abc48638b499e17518827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5NDAzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432094030", "bodyText": "Ah if changing it like this, your previous suggestions to check if it's a parameterized type before looping makes sense. Will change", "author": "pubudu91", "createdAt": "2020-05-28T20:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNTk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyOTc2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431729769", "bodyText": "we can call markParameterizedType(streamType, constraintType) always and only call for error conditionally.\nif (error != null) {\n\tmarkParameterizedType(streamType, error);\n}", "author": "KRVPerera", "createdAt": "2020-05-28T10:15:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1023,7 +1038,14 @@ public void visit(BLangStreamType streamTypeNode) {\n         BType streamType = new BStreamType(TypeTags.STREAM, constraintType, error, null);\n         BTypeSymbol typeSymbol = type.tsymbol;\n         streamType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n-                typeSymbol.pkgID, streamType, typeSymbol.owner);\n+                                                      typeSymbol.pkgID, streamType, typeSymbol.owner);\n+\n+        if (error != null) {\n+            markParameterizedType(streamType, Arrays.asList(constraintType, error));", "originalCommit": "28ac1e0d6ff7aa8e058abc48638b499e17518827", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczNTI5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431735294", "bodyText": "we can call symResolver.markParameterizedType(recordType, recordType.fields.values()); always and call again for\nsymResolver.markParameterizedType(recordType, recordType.restFieldType); that way we don't need a new array list.", "author": "KRVPerera", "createdAt": "2020-05-28T10:26:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1138,7 +1139,14 @@ private void defineRecordTypeNode(BLangRecordTypeNode recordTypeNode, SymbolEnv\n             return;\n         }\n \n+        List<BType> fieldTypes = new ArrayList<>();\n+        for (BField field : recordType.fields.values()) {\n+            BType type = field.type;\n+            fieldTypes.add(type);\n+        }\n+", "originalCommit": "28ac1e0d6ff7aa8e058abc48638b499e17518827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5OTEwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432099101", "bodyText": "recordType.fields.values()\nreturns a collection of BField objects. What I need are the types of those BField objects.", "author": "pubudu91", "createdAt": "2020-05-28T20:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczNTI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczNjk4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431736983", "bodyText": "We can pre-allocate ArrayList with an initialCapacity if neeed.", "author": "KRVPerera", "createdAt": "2020-05-28T10:29:37Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1138,7 +1139,14 @@ private void defineRecordTypeNode(BLangRecordTypeNode recordTypeNode, SymbolEnv\n             return;\n         }\n \n+        List<BType> fieldTypes = new ArrayList<>();", "originalCommit": "28ac1e0d6ff7aa8e058abc48638b499e17518827", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyMjE5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432322199", "bodyText": "@MaryamZi Should I do the same check done a few lines below this (L1272) here as well when logging errors for user defined types?", "author": "pubudu91", "createdAt": "2020-05-29T08:06:17Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1190,8 +1231,35 @@ public void visit(BLangUserDefinedType userDefinedTypeNode) {\n         //    If the package alias is not empty or null, then find the package scope,\n         if (symbol == symTable.notFoundSymbol) {\n             BSymbol tempSymbol = lookupMainSpaceSymbolInPackage(userDefinedTypeNode.pos, env, pkgAlias, typeName);\n+\n             if ((tempSymbol.tag & SymTag.TYPE) == SymTag.TYPE) {\n                 symbol = tempSymbol;\n+            } else if (Symbols.isSymTagOn(tempSymbol, SymTag.VARIABLE) && env.node.getKind() == NodeKind.FUNCTION) {\n+                BLangFunction func = (BLangFunction) env.node;\n+\n+                if (func.returnTypeNode != null && func.hasBody() &&\n+                        func.body.getKind() == NodeKind.EXTERN_FUNCTION_BODY) {\n+                    BType paramValType = getTypedescParamValueType(func.requiredParams, tempSymbol,\n+                                                                   func.returnTypeNode.pos);\n+\n+                    if (paramValType == symTable.semanticError) {\n+                        this.resultType = symTable.semanticError;\n+                        return;\n+                    }\n+\n+                    BTypeSymbol tSymbol = new BTypeSymbol(SymTag.TYPE, Flags.PARAMETERIZED | tempSymbol.flags,\n+                                                          tempSymbol.name, tempSymbol.pkgID, null, func.symbol);\n+                    tSymbol.type = new BParameterizedType(paramValType, (BVarSymbol) tempSymbol,\n+                                                          tSymbol, tempSymbol.name);\n+\n+                    this.resultType = tSymbol.type;\n+                    this.resultType.flags |= Flags.PARAMETERIZED;\n+                    return;\n+                } else {\n+                    dlog.error(userDefinedTypeNode.pos, DiagnosticCode.INVALID_USE_OF_TYPEDESC_PARAM);", "originalCommit": "28ac1e0d6ff7aa8e058abc48638b499e17518827", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c4937c6da4ec6701b13ce942222ba67f77697874", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4937c6da4ec6701b13ce942222ba67f77697874", "message": "Improve error handling logic in symbol resolver and fix review suggestions", "committedDate": "2020-05-29T09:06:31Z", "type": "forcePushed"}, {"oid": "a5d7d604f936a76a71e2deea11f76884d34f0806", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5d7d604f936a76a71e2deea11f76884d34f0806", "message": "Improve error handling logic in symbol resolver and fix review suggestions", "committedDate": "2020-05-29T09:25:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r434196362", "bodyText": "Copyright year\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "dulajdilshan", "createdAt": "2020-06-02T21:52:49Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/functions/VariableReturnTypesBaloTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "61fa7ee13f433b13ce564d6728d4b277e6516bd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "35cc137fdb58ce3910a4cd59578c1c4672f5376f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/35cc137fdb58ce3910a4cd59578c1c4672f5376f", "message": "Fix syncing issues and refactor type builder name and APIs", "committedDate": "2020-06-08T19:09:40Z", "type": "forcePushed"}, {"oid": "2e78e4016875117ee390f4d863a85777d035328f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e78e4016875117ee390f4d863a85777d035328f", "message": "Fix syncing issues and refactor type builder name and APIs", "committedDate": "2020-06-08T19:13:11Z", "type": "forcePushed"}, {"oid": "dc84c4788069048f4fdb638ba9012dcd01d8a92e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dc84c4788069048f4fdb638ba9012dcd01d8a92e", "message": "Fix syncing issues and refactor type builder name and APIs", "committedDate": "2020-06-08T19:33:17Z", "type": "forcePushed"}, {"oid": "ccf89e97d0db99b6674af65a153eb9f00f1531d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccf89e97d0db99b6674af65a153eb9f00f1531d4", "message": "Reset parameterized flag for resolved types", "committedDate": "2020-06-11T12:08:28Z", "type": "forcePushed"}, {"oid": "6835b9b4c6f298e235a3229144ac4fd90a2c8b91", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6835b9b4c6f298e235a3229144ac4fd90a2c8b91", "message": "Fix compilation errors in tests due to init method name change", "committedDate": "2020-06-11T21:27:31Z", "type": "forcePushed"}, {"oid": "005e77e7e8adfe3174079d53d8ff8127b6e2ff5a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/005e77e7e8adfe3174079d53d8ff8127b6e2ff5a", "message": "Enable referencing typedesc params in return type for extern functions", "committedDate": "2020-06-12T05:27:33Z", "type": "commit"}, {"oid": "36f9bb3265ecf83d9f06ac12936f71f5c94eb4c2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36f9bb3265ecf83d9f06ac12936f71f5c94eb4c2", "message": "Add parameterized return type support for extern functions", "committedDate": "2020-06-12T05:27:33Z", "type": "commit"}, {"oid": "b2696fb9fb6b1409b24641ea2d146a97987102d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2696fb9fb6b1409b24641ea2d146a97987102d3", "message": "Add support for defaultable params", "committedDate": "2020-06-12T05:27:33Z", "type": "commit"}, {"oid": "47142cc6d658325891f6dedde522228410f25e06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47142cc6d658325891f6dedde522228410f25e06", "message": "Add PARAMETERIZED flag and support for parameterized record types", "committedDate": "2020-06-12T05:27:34Z", "type": "commit"}, {"oid": "a3325ac522b36e7a19d9981281f3e7efd7587c64", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3325ac522b36e7a19d9981281f3e7efd7587c64", "message": "Make use of the type builder when resolving ret type in codegen", "committedDate": "2020-06-12T05:27:34Z", "type": "commit"}, {"oid": "59d7b34c3768cdb155a5d2c8ce1fe97d66a8cabe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59d7b34c3768cdb155a5d2c8ce1fe97d66a8cabe", "message": "Add a cast to variable return-typed invocations", "committedDate": "2020-06-12T05:27:34Z", "type": "commit"}, {"oid": "60026bbf6865933fa57dd91b9acd8c5c4f0b8d79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60026bbf6865933fa57dd91b9acd8c5c4f0b8d79", "message": "Disallow non-type-references as default value in typedesc params", "committedDate": "2020-06-12T05:27:34Z", "type": "commit"}, {"oid": "c1159fb07af030a4344ce5fc28c29b574fb5581b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1159fb07af030a4344ce5fc28c29b574fb5581b", "message": "Improve typedesc param default value checking logic", "committedDate": "2020-06-12T05:27:34Z", "type": "commit"}, {"oid": "a937cd062899d264524790be77bf8d6653720d66", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a937cd062899d264524790be77bf8d6653720d66", "message": "Fix broken record type changes", "committedDate": "2020-06-12T05:27:34Z", "type": "commit"}, {"oid": "02665d2333167dfcb460659fa606dc3db88cad82", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02665d2333167dfcb460659fa606dc3db88cad82", "message": "Refactor builtType() API and fix cast issue for defaultable typedesc param", "committedDate": "2020-06-12T05:27:35Z", "type": "commit"}, {"oid": "5c2279b9a2049946ea1c7e1d8826676fc3255c01", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c2279b9a2049946ea1c7e1d8826676fc3255c01", "message": "Fix type issue in call expr which resulted in visitMaxs failure", "committedDate": "2020-06-12T05:27:35Z", "type": "commit"}, {"oid": "60c6662833f87f6d8f30c84436f537315e6bf91a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60c6662833f87f6d8f30c84436f537315e6bf91a", "message": "Fix incorrect array type build and handle semantic errors", "committedDate": "2020-06-12T05:27:35Z", "type": "commit"}, {"oid": "8668e61f60f52c11cbd39d0cc9c18a4604324591", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8668e61f60f52c11cbd39d0cc9c18a4604324591", "message": "Allow parameterized types in XML constraint", "committedDate": "2020-06-12T05:27:35Z", "type": "commit"}, {"oid": "72a0569c2cde80182ebd501d6ca8e8570bdccb52", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72a0569c2cde80182ebd501d6ca8e8570bdccb52", "message": "Add parameterized type support for tables", "committedDate": "2020-06-12T05:27:35Z", "type": "commit"}, {"oid": "fa1970d7fdb5cc9c46ce5a16a9ddcfba364744ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa1970d7fdb5cc9c46ce5a16a9ddcfba364744ae", "message": "Add test cases", "committedDate": "2020-06-12T05:27:35Z", "type": "commit"}, {"oid": "f70d3662b8a1737238e0ed5466a1809a45f379f7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f70d3662b8a1737238e0ed5466a1809a45f379f7", "message": "Change String usages to BString in tests", "committedDate": "2020-06-12T05:27:36Z", "type": "commit"}, {"oid": "000bfece57c3a5389216953b0a683fedbcfce577", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/000bfece57c3a5389216953b0a683fedbcfce577", "message": "Add support for reading parameterized types from BIR", "committedDate": "2020-06-12T05:27:36Z", "type": "commit"}, {"oid": "6ada1958a30ecf5d3ccafae4513d749f50ed9649", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ada1958a30ecf5d3ccafae4513d749f50ed9649", "message": "Add BIR test cases for parameterized types", "committedDate": "2020-06-12T05:27:36Z", "type": "commit"}, {"oid": "37677833b897b328dc9ba9a07ff9511a62170c34", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37677833b897b328dc9ba9a07ff9511a62170c34", "message": "Add negative test cases", "committedDate": "2020-06-12T05:27:36Z", "type": "commit"}, {"oid": "bdda007c2fc2107bc405e3a030183fdcba34257c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdda007c2fc2107bc405e3a030183fdcba34257c", "message": "Improve error handling for invalid typedesc param usage", "committedDate": "2020-06-12T05:27:36Z", "type": "commit"}, {"oid": "0528f9dd29e2bc0fdbf4426f2ecf5555f301a334", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0528f9dd29e2bc0fdbf4426f2ecf5555f301a334", "message": "Add negative test cases for newly added error messages", "committedDate": "2020-06-12T05:27:37Z", "type": "commit"}, {"oid": "4b5054cb824aac024535fa1f65ce9b9eaa33cc26", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b5054cb824aac024535fa1f65ce9b9eaa33cc26", "message": "Cleanup the code", "committedDate": "2020-06-12T05:27:37Z", "type": "commit"}, {"oid": "b8b5da4abbaf353365f9b97afae54ce2fcd37233", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8b5da4abbaf353365f9b97afae54ce2fcd37233", "message": "Improve error handling logic in symbol resolver and fix review suggestions", "committedDate": "2020-06-12T05:27:37Z", "type": "commit"}, {"oid": "c56638b5108896577e66ea6a9f4a6714916c0658", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c56638b5108896577e66ea6a9f4a6714916c0658", "message": "Fix error handling for non-typedesc param reference", "committedDate": "2020-06-12T05:27:37Z", "type": "commit"}, {"oid": "3c76781579f43b7cdbdbe24c816a5231b9b0c3a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c76781579f43b7cdbdbe24c816a5231b9b0c3a4", "message": "Add support for assigning variable return typed functions to vars", "committedDate": "2020-06-12T05:27:37Z", "type": "commit"}, {"oid": "eb4e1882033ea403e069911856a7052e51d855a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb4e1882033ea403e069911856a7052e51d855a7", "message": "Fix syncing issues and refactor type builder name and APIs", "committedDate": "2020-06-12T05:27:37Z", "type": "commit"}, {"oid": "0fec04827b6af361ebb70c9042c14b5f7b662538", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fec04827b6af361ebb70c9042c14b5f7b662538", "message": "Reset parameterized flag for resolved types", "committedDate": "2020-06-12T05:27:38Z", "type": "commit"}, {"oid": "f14cd4f8a0de3e71bb0ed129adbcd58cf81ff51b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f14cd4f8a0de3e71bb0ed129adbcd58cf81ff51b", "message": "Fix syncing issues", "committedDate": "2020-06-12T05:27:38Z", "type": "commit"}, {"oid": "92c63ac75c10c38555f763007c4eb0d4415863a5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92c63ac75c10c38555f763007c4eb0d4415863a5", "message": "Fix compilation errors in tests due to init method name change", "committedDate": "2020-06-12T05:27:38Z", "type": "commit"}, {"oid": "49514adceb4b01d80f6b2a145afa5332a277c253", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49514adceb4b01d80f6b2a145afa5332a277c253", "message": "Fix broken var return type test", "committedDate": "2020-06-12T05:27:38Z", "type": "commit"}, {"oid": "49514adceb4b01d80f6b2a145afa5332a277c253", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49514adceb4b01d80f6b2a145afa5332a277c253", "message": "Fix broken var return type test", "committedDate": "2020-06-12T05:27:38Z", "type": "forcePushed"}]}