{"pr_number": 20740, "pr_title": "Refactor the type def model for locally defined record types", "pr_createdAt": "2020-01-24T12:01:22Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740", "timeline": [{"oid": "a34b6c4816457b492249979a46ff050702542eaa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a34b6c4816457b492249979a46ff050702542eaa", "message": "Refactor desugar visit() for record and object types and fix checkstyle issues", "committedDate": "2020-01-24T16:57:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r375360563", "bodyText": "Can we change this to private method?", "author": "anupama-pathirage", "createdAt": "2020-02-05T16:22:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -460,6 +468,14 @@ void addBuiltInReferenceType(DiagnosticPos pos, Set<Whitespace> ws, String typeN\n         addType(refType);\n     }\n \n+    void startErrorType() {\n+        this.isInErrorType++;\n+    }\n+\n+    void endErrorType() {", "originalCommit": "de5312f3b5d20e3bd74e32ad46e1f7955a57d26d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc3OTI1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r375779255", "bodyText": "This is called from the BLangParserListener. So cannot make it private", "author": "pubudu91", "createdAt": "2020-02-06T11:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwODAzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r376208037", "bodyText": "I don't see any usage of endErrorType() from the BLangParserListener. Only the startErrorType() is used there.", "author": "anupama-pathirage", "createdAt": "2020-02-07T04:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI1MzI4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r376253280", "bodyText": "Sorry, my bad. Yes, you are correct, can make it private.", "author": "pubudu91", "createdAt": "2020-02-07T07:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDU2Mw=="}], "type": "inlineReview"}, {"oid": "d49e56392a2271f6773ffe7c92d4db3c8146db33", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d49e56392a2271f6773ffe7c92d4db3c8146db33", "message": "Add missing anonymous flag to anon record symbols", "committedDate": "2020-02-07T06:50:53Z", "type": "forcePushed"}, {"oid": "0ae668163ee4b480ac31a7af4bc40581b85eac69", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ae668163ee4b480ac31a7af4bc40581b85eac69", "message": "Skip creating a typedef and adding it as a top level node for local anon rec types", "committedDate": "2020-02-09T18:29:37Z", "type": "commit"}, {"oid": "72171c31050d48649c1561978ae45e72a385e1f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72171c31050d48649c1561978ae45e72a385e1f8", "message": "Add symbol defining logic for local anon record type nodes", "committedDate": "2020-02-09T18:29:41Z", "type": "commit"}, {"oid": "d3e0aad6b90174b3dab14dec694659a51794862f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3e0aad6b90174b3dab14dec694659a51794862f", "message": "Desugar typedef for locally defined record types", "committedDate": "2020-02-09T18:29:42Z", "type": "commit"}, {"oid": "2d012d1299f968e02c810c4fe3fe3267850dfcdc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d012d1299f968e02c810c4fe3fe3267850dfcdc", "message": "Refactor desugar visit() for record and object types and fix checkstyle issues", "committedDate": "2020-02-09T18:29:42Z", "type": "commit"}, {"oid": "79c4b54cce7d179484ce9acbee91b19fe8fac725", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79c4b54cce7d179484ce9acbee91b19fe8fac725", "message": "Add missing anonymous flag to anon record symbols", "committedDate": "2020-02-09T18:29:42Z", "type": "commit"}, {"oid": "48a26bf57b0b7174174545dc036ec516b48985e6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48a26bf57b0b7174174545dc036ec516b48985e6", "message": "Add formatting support for local anonymous records", "committedDate": "2020-02-09T18:30:53Z", "type": "commit"}, {"oid": "b7fb66eae6671ad278a154eb7710ada23714aa95", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7fb66eae6671ad278a154eb7710ada23714aa95", "message": "Skip creating a typedef and adding it as a top level node for local anon rec types", "committedDate": "2020-02-09T18:30:53Z", "type": "commit"}, {"oid": "0b3e9d2f33f24c50a05bc7e713cca817ad7e5b66", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b3e9d2f33f24c50a05bc7e713cca817ad7e5b66", "message": "Modify visibility of endErrorType() method", "committedDate": "2020-02-09T18:46:42Z", "type": "commit"}, {"oid": "0b3e9d2f33f24c50a05bc7e713cca817ad7e5b66", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b3e9d2f33f24c50a05bc7e713cca817ad7e5b66", "message": "Modify visibility of endErrorType() method", "committedDate": "2020-02-09T18:46:42Z", "type": "forcePushed"}, {"oid": "3f539f2535ae35fa990821fa95320d84937fe575", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f539f2535ae35fa990821fa95320d84937fe575", "message": "Remove duplicate var in package builder", "committedDate": "2020-02-09T18:50:12Z", "type": "commit"}, {"oid": "f700049d1280a53fdc0d6c5087c0d413f2582661", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f700049d1280a53fdc0d6c5087c0d413f2582661", "message": "Sync with master and resolve conflicts", "committedDate": "2020-02-17T16:59:35Z", "type": "commit"}, {"oid": "a8ce8c595bf85c59362d06e1b9ac7d1939e1121a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8ce8c595bf85c59362d06e1b9ac7d1939e1121a", "message": "Fix API changes in desugar", "committedDate": "2020-02-17T18:16:24Z", "type": "commit"}, {"oid": "c88ead47b42c40453cd0675c8bd0a14f86d01f3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c88ead47b42c40453cd0675c8bd0a14f86d01f3d", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-20729", "committedDate": "2020-02-20T07:51:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNTA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r383115043", "bodyText": "Please create an issue for this.", "author": "hasithaa", "createdAt": "2020-02-24T07:40:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -408,12 +410,18 @@ private BLangRecordTypeNode populateRecordTypeNode(DiagnosticPos pos, Set<Whites\n         recordTypeNode.pos = pos;\n         recordTypeNode.addWS(ws);\n         recordTypeNode.isAnonymous = isAnonymous;\n+        recordTypeNode.isLocal = isInLocalDefinition();\n         this.varListStack.pop().forEach(variableNode -> {\n             recordTypeNode.addField((SimpleVariableNode) variableNode);\n         });\n         return recordTypeNode;\n     }\n \n+    private boolean isInLocalDefinition() {\n+        // TODO: When supporting local defs for errors, need to get rid of the second condition\n+        return !this.blockNodeStack.isEmpty() && this.isInErrorType <= 0;", "originalCommit": "c88ead47b42c40453cd0675c8bd0a14f86d01f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzExNTU4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20740#discussion_r383115585", "bodyText": "Add the reason field as well.", "author": "hasithaa", "createdAt": "2020-02-24T07:42:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -719,9 +751,79 @@ public void visit(BLangRecordTypeNode recordTypeNode) {\n         // Add invocations for the initializers of each of the type referenced records. Here, the initializers of the\n         // referenced types are invoked on the current record type.\n \n+        if (recordTypeNode.isAnonymous && recordTypeNode.isLocal) {\n+            BLangUserDefinedType userDefinedType = desugarLocalAnonRecordTypeNode(recordTypeNode);\n+            TypeDefBuilderHelper.addTypeDefinition(recordTypeNode.type, recordTypeNode.type.tsymbol, recordTypeNode,\n+                                                   env);\n+            recordTypeNode.desugared = true;\n+            result = userDefinedType;\n+            return;\n+        }\n+\n         result = recordTypeNode;\n     }\n \n+    private BLangUserDefinedType desugarLocalAnonRecordTypeNode(BLangRecordTypeNode recordTypeNode) {\n+        return ASTBuilderUtil.createUserDefineTypeNode(recordTypeNode.symbol.name.value, recordTypeNode.type,\n+                                                       recordTypeNode.pos);\n+    }\n+\n+    @Override\n+    public void visit(BLangArrayType arrayType) {\n+        arrayType.elemtype = rewrite(arrayType.elemtype, env);\n+        result = arrayType;\n+    }\n+\n+    @Override\n+    public void visit(BLangConstrainedType constrainedType) {\n+        constrainedType.constraint = rewrite(constrainedType.constraint, env);\n+        result = constrainedType;\n+    }\n+\n+    @Override\n+    public void visit(BLangValueType valueType) {\n+        result = valueType;\n+    }\n+\n+    @Override\n+    public void visit(BLangUserDefinedType userDefinedType) {\n+        result = userDefinedType;\n+    }\n+\n+    @Override\n+    public void visit(BLangUnionTypeNode unionTypeNode) {\n+        List<BLangType> rewrittenMembers = new ArrayList<>();\n+        unionTypeNode.memberTypeNodes.forEach(typeNode -> rewrittenMembers.add(rewrite(typeNode, env)));\n+        unionTypeNode.memberTypeNodes = rewrittenMembers;\n+        result = unionTypeNode;\n+    }\n+\n+    @Override\n+    public void visit(BLangErrorType errorType) {\n+        errorType.detailType = rewrite(errorType.detailType, env);", "originalCommit": "c88ead47b42c40453cd0675c8bd0a14f86d01f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}