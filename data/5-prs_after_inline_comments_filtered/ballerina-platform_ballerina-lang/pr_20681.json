{"pr_number": 20681, "pr_title": "Fix an issue in top level variable definition", "pr_createdAt": "2020-01-21T05:00:19Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNjM1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r369426355", "bodyText": "I feel like if we move the complex logic to a function it would enhance readability. WDYT?", "author": "dulvinw", "createdAt": "2020-01-22T08:37:12Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -202,7 +202,7 @@ private boolean isDistinctSymbol(DiagnosticPos pos, BSymbol symbol, BSymbol foun\n         }\n \n         // Type names should be unique and cannot be shadowed\n-        if ((foundSym.tag & SymTag.TYPE) == SymTag.TYPE) {\n+        if ((foundSym.tag & SymTag.TYPE) == SymTag.TYPE && !((foundSym.tag & SymTag.CONSTANT) == SymTag.CONSTANT)) {", "originalCommit": "b5f5cb2376e8e5b5eaa4aa29345d2bd06bf3114c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyNzA1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r373827052", "bodyText": "It is not used anymore.", "author": "KavinduZoysa", "createdAt": "2020-02-02T08:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNjM1NQ=="}], "type": "inlineReview"}, {"oid": "297ef7be36d7ffc2b4d27301f526b976b6ac9ced", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/297ef7be36d7ffc2b4d27301f526b976b6ac9ced", "message": "Add the test cases", "committedDate": "2020-01-23T10:38:52Z", "type": "forcePushed"}, {"oid": "b5f5cb2376e8e5b5eaa4aa29345d2bd06bf3114c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5f5cb2376e8e5b5eaa4aa29345d2bd06bf3114c", "message": "Add a negative test case", "committedDate": "2020-01-21T04:58:56Z", "type": "forcePushed"}, {"oid": "d3d9f907cf4a618061233fb89ca6ec47a64207a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3d9f907cf4a618061233fb89ca6ec47a64207a7", "message": "Change lookup method", "committedDate": "2020-02-02T08:00:25Z", "type": "forcePushed"}, {"oid": "58f5d95fdbacdf2496ce108a05ddbf267baa5bbe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58f5d95fdbacdf2496ce108a05ddbf267baa5bbe", "message": "Change lookup method", "committedDate": "2020-02-02T08:06:15Z", "type": "forcePushed"}, {"oid": "3efbfb946ade60148c340b83963cdcb13dba7f20", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3efbfb946ade60148c340b83963cdcb13dba7f20", "message": "Change the SymTag", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "30f84aefe556302acf9367a75cde85d19f8aeb13", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30f84aefe556302acf9367a75cde85d19f8aeb13", "message": "Set the unknown error", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "deb63f0a602fefa7523eec067d7d783516568dc1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/deb63f0a602fefa7523eec067d7d783516568dc1", "message": "Add a negative test case", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "0a4b65073ef6e8307ca055c356c73ecf26db9992", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a4b65073ef6e8307ca055c356c73ecf26db9992", "message": "Add test cases", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "e385181e80305212de2536e12dade7cb0b4bdacb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e385181e80305212de2536e12dade7cb0b4bdacb", "message": "Add new scopes to SymTags", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "2ad2d2a7038ea28f507805ab8bb7dedcf24c5aec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ad2d2a7038ea28f507805ab8bb7dedcf24c5aec", "message": "Change lookup method", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "e3359d7032c2ec47d695635031f80ee481b0d636", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3359d7032c2ec47d695635031f80ee481b0d636", "message": "Remove unused imports", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "f5db13f2fbec192b2906644ff517d4abc0e5bb3f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5db13f2fbec192b2906644ff517d4abc0e5bb3f", "message": "Fix check style", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "91744733b6f2928c4470bd623243d951f2099360", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91744733b6f2928c4470bd623243d951f2099360", "message": "Add more test cases", "committedDate": "2020-02-03T04:52:20Z", "type": "commit"}, {"oid": "011bb583d2c9c55f68a3a7e3321235d0bab2e96b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/011bb583d2c9c55f68a3a7e3321235d0bab2e96b", "message": "Add new scope for CONSTRUCTOR", "committedDate": "2020-02-03T10:59:58Z", "type": "commit"}, {"oid": "011bb583d2c9c55f68a3a7e3321235d0bab2e96b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/011bb583d2c9c55f68a3a7e3321235d0bab2e96b", "message": "Add new scope for CONSTRUCTOR", "committedDate": "2020-02-03T10:59:58Z", "type": "forcePushed"}, {"oid": "3cb170194af02d9b897e5b1bc7fa155e2d9b229b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cb170194af02d9b897e5b1bc7fa155e2d9b229b", "message": "Refactor the SymTags", "committedDate": "2020-02-03T11:28:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzODMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r375138317", "bodyText": "is this todo still relevant? expSymTag seems to be removed", "author": "pubudu91", "createdAt": "2020-02-05T09:19:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -135,15 +135,31 @@ public SymbolResolver(CompilerContext context) {\n         this.types = Types.getInstance(context);\n     }\n \n-    public boolean checkForUniqueSymbol(DiagnosticPos pos, SymbolEnv env, BSymbol symbol, int expSymTag) {\n+    // TODO : Remove the 'expSymTag'", "originalCommit": "a01cc16ff5aa498ac0025f8fc110b53beac3b989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzOTY1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r375139652", "bodyText": "Yes, it is removed.", "author": "KavinduZoysa", "createdAt": "2020-02-05T09:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzODMxNw=="}], "type": "inlineReview"}, {"oid": "525b3c2d96d72216cde694a62eb072797f688d87", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/525b3c2d96d72216cde694a62eb072797f688d87", "message": "Add one more test case", "committedDate": "2020-02-05T09:20:54Z", "type": "commit"}, {"oid": "525b3c2d96d72216cde694a62eb072797f688d87", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/525b3c2d96d72216cde694a62eb072797f688d87", "message": "Add one more test case", "committedDate": "2020-02-05T09:20:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2OTkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376169928", "bodyText": "Shouldn't we verify the resolved symbol is a variable here? I think we should.", "author": "hasithaa", "createdAt": "2020-02-07T01:16:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1579,8 +1579,7 @@ private boolean workerExists(BType type, String workerName) {\n \n     // Asynchronous Send Statement\n     public void visit(BLangWorkerSend workerSendNode) {\n-        BSymbol receiver = symResolver.lookupSymbol(env,\n-                names.fromIdNode(workerSendNode.workerIdentifier), SymTag.VARIABLE);\n+        BSymbol receiver = symResolver.lookupMainSpaceSymbol(env, names.fromIdNode(workerSendNode.workerIdentifier));", "originalCommit": "525b3c2d96d72216cde694a62eb072797f688d87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc3MTM1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376771358", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-02-09T10:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2OTkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3MDExOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376170119", "bodyText": "Need to check for an Object symbol after this.", "author": "hasithaa", "createdAt": "2020-02-07T01:17:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CompilerPluginRunner.java", "diffHunk": "@@ -301,7 +301,7 @@ private void handleServiceTypeProcesses(CompilerPlugin plugin) {\n             BPackageSymbol symbol = this.packageCache.getSymbol(packageQName);\n             if (symbol != null) {\n                 SymbolEnv pkgEnv = symTable.pkgEnvMap.get(symbol);\n-                final BSymbol listenerSymbol = symResolver.lookupSymbol(pkgEnv, listenerName, SymTag.OBJECT);\n+                final BSymbol listenerSymbol = symResolver.lookupMainSpaceSymbol(pkgEnv, listenerName);", "originalCommit": "525b3c2d96d72216cde694a62eb072797f688d87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc3MTM3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376771377", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-02-09T10:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3MDExOQ=="}], "type": "inlineReview"}, {"oid": "8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "message": "Check the symtag", "committedDate": "2020-02-09T07:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MDA2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376940062", "bodyText": "We need to add SymTag validation here.", "author": "hasithaa", "createdAt": "2020-02-10T09:16:33Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -576,7 +576,7 @@ public void visit(BLangInvocation invocationExpr) {\n \n             // Todo: test lambdas and function arguments\n \n-            BSymbol dependsOnFunctionSym = symResolver.lookupSymbol(this.env, name, SymTag.FUNCTION);\n+            BSymbol dependsOnFunctionSym = symResolver.lookupMainSpaceSymbol(this.env, name);", "originalCommit": "8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMjM1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377032355", "bodyText": "Same comment as above. For phases after semantic analyzer, we don't need to validate the sym tag since it would already have been caught if the sym tag was invalid.", "author": "pubudu91", "createdAt": "2020-02-10T12:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MDA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MDQxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376940417", "bodyText": "We need to add SymTag validation here.", "author": "hasithaa", "createdAt": "2020-02-10T09:17:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1644,8 +1647,7 @@ private BType createAccumulatedErrorTypeForMatchingRecive(DiagnosticPos pos, BTy\n \n     @Override\n     public void visit(BLangWorkerSyncSendExpr syncSendExpr) {\n-        BSymbol receiver = symResolver.lookupSymbol(env,\n-                names.fromIdNode(syncSendExpr.workerIdentifier), SymTag.VARIABLE);\n+        BSymbol receiver = symResolver.lookupMainSpaceSymbol(env, names.fromIdNode(syncSendExpr.workerIdentifier));", "originalCommit": "8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxNTc2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377015763", "bodyText": "I think this is ok. By this time, the receiver seems to be validated to be a worker. For example,\nfunction process() returns string {\n    string ss = \":\";\n\n    worker w1 {\n        int a = 10;\n        a ->> ss;\n    }\n\n    worker w2 {\n        io:println(\"In w2\");\n    }\n\n    wait w1;\n\n    return \"done\";\n}\nThe above results in the following error:\nundefined worker 'ss'", "author": "pubudu91", "createdAt": "2020-02-10T11:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MDQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2NjcyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377466721", "bodyText": "Tested the above example with this change, and it throws above error", "author": "KavinduZoysa", "createdAt": "2020-02-11T06:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MDQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MDUxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376940512", "bodyText": "We need to add SymTag validation here.", "author": "hasithaa", "createdAt": "2020-02-10T09:17:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1672,8 +1674,7 @@ public void visit(BLangWorkerSyncSendExpr syncSendExpr) {\n     public void visit(BLangWorkerReceive workerReceiveNode) {\n         // Validate worker receive\n         validateActionParentNode(workerReceiveNode.pos, workerReceiveNode);\n-        BSymbol sender = symResolver.lookupSymbol(env,\n-                names.fromIdNode(workerReceiveNode.workerIdentifier), SymTag.VARIABLE);\n+        BSymbol sender = symResolver.lookupMainSpaceSymbol(env, names.fromIdNode(workerReceiveNode.workerIdentifier));", "originalCommit": "8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3Mzk4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377473983", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-02-11T07:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MDUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MjA5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376942093", "bodyText": "I think this validation is not needed. types are defined only in the main symbol space.", "author": "hasithaa", "createdAt": "2020-02-10T09:20:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DocumentationAnalyzer.java", "diffHunk": "@@ -323,11 +323,17 @@ private BSymbol resolveFullyQualifiedSymbol(DiagnosticPos pos, SymbolEnv env, St\n \n         // If there is no type in the reference we need to search in the package level and the current scope only.\n         if (typeName == Names.EMPTY) {\n-            return symResolver.lookupSymbolInPackage(pos, env, pkgName, identifierName, tag);\n+            if ((tag & SymTag.IMPORT) == SymTag.IMPORT) {\n+                return symResolver.lookupPrefixSpaceSymbolInPackage(pos, env, pkgName, identifierName);\n+            } else if ((tag & SymTag.ANNOTATION) == SymTag.ANNOTATION) {\n+                return symResolver.lookupAnnotationSpaceSymbolInPackage(pos, env, pkgName, identifierName);", "originalCommit": "8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2ODE4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377468187", "bodyText": "But according to this, SymTag can be ANNOTATION, or IMPORT. Therefore don't we need to validate the symbol.", "author": "KavinduZoysa", "createdAt": "2020-02-11T07:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MjA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MzA5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376943098", "bodyText": "Need to validate SymTag.CONSTANT", "author": "hasithaa", "createdAt": "2020-02-10T09:22:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -1419,8 +1419,8 @@ private boolean validateErrorReasonMatchPatternSyntax(BLangErrorVariable errorVa\n                 && errorVariable.reasonMatchConst == null\n                 && isReasonSpecified(errorVariable)) {\n \n-            BSymbol reasonConst = symResolver.lookupSymbol(\n-                    this.env.enclEnv, names.fromString(errorVariable.reason.name.value), SymTag.CONSTANT);\n+            BSymbol reasonConst = symResolver.lookupMainSpaceSymbol(this.env.enclEnv,", "originalCommit": "8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3MzA5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377473092", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-02-11T07:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0MzA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTYwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r375141601", "bodyText": "Shall we rephrase this method? Something like lookupSymbolInMainSpace?", "author": "pubudu91", "createdAt": "2020-02-05T09:25:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -546,6 +537,22 @@ public BSymbol lookupSymbol(SymbolEnv env, Name name, int expSymTag) {\n         return symTable.notFoundSymbol;\n     }\n \n+    public BSymbol lookupMainSpaceSymbol(SymbolEnv env, Name name) {", "originalCommit": "525b3c2d96d72216cde694a62eb072797f688d87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTc5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r375141794", "bodyText": "Same goes for the rest of the such methods as well", "author": "pubudu91", "createdAt": "2020-02-05T09:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMjYzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377032631", "bodyText": "Or lookupInMainSymbolSpace", "author": "pubudu91", "createdAt": "2020-02-10T12:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3MzYwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377473607", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-02-11T07:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0MTYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5OTQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r376999478", "bodyText": "This logic with the use of a temp var is unnecessary right? Since we are verifying that it is var sym tag, we can do the following:\nBSymbol receiver = symResolver.lookupMainSpaceSymbol(env, names.fromIdNode(workerSendNode.workerIdentifier));\nif ((receiver.tag & SymTag.VARIABLE) == SymTag.VARIABLE) {\n    receiver = symTable.notFoundSymbol;\n}", "author": "pubudu91", "createdAt": "2020-02-10T11:10:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1579,8 +1579,11 @@ private boolean workerExists(BType type, String workerName) {\n \n     // Asynchronous Send Statement\n     public void visit(BLangWorkerSend workerSendNode) {\n-        BSymbol receiver = symResolver.lookupSymbol(env,\n-                names.fromIdNode(workerSendNode.workerIdentifier), SymTag.VARIABLE);\n+        BSymbol receiver = symTable.notFoundSymbol;\n+        BSymbol tempSymbol = symResolver.lookupMainSpaceSymbol(env, names.fromIdNode(workerSendNode.workerIdentifier));\n+        if ((tempSymbol.tag & SymTag.VARIABLE) == SymTag.VARIABLE) {\n+            receiver = tempSymbol;\n+        }", "originalCommit": "8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3MzQ5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377473499", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-02-11T07:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5OTQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxOTE4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377019187", "bodyText": "Similar concern as above regarding the use of a temp var", "author": "pubudu91", "createdAt": "2020-02-10T11:56:55Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CompilerPluginRunner.java", "diffHunk": "@@ -301,8 +301,10 @@ private void handleServiceTypeProcesses(CompilerPlugin plugin) {\n             BPackageSymbol symbol = this.packageCache.getSymbol(packageQName);\n             if (symbol != null) {\n                 SymbolEnv pkgEnv = symTable.pkgEnvMap.get(symbol);\n-                final BSymbol listenerSymbol = symResolver.lookupSymbol(pkgEnv, listenerName, SymTag.OBJECT);\n-                if (listenerSymbol != symTable.notFoundSymbol) {\n+                BSymbol listenerSymbol;\n+                BSymbol tempListenerSymbol = symResolver.lookupMainSpaceSymbol(pkgEnv, listenerName);\n+                if ((tempListenerSymbol.tag & SymTag.OBJECT) == SymTag.OBJECT) {\n+                    listenerSymbol = tempListenerSymbol;", "originalCommit": "8aa4acbb4bcd233aeb9bd0f6478393f120c7411c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3MzU0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20681#discussion_r377473547", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-02-11T07:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAxOTE4Nw=="}], "type": "inlineReview"}, {"oid": "d2d1587f0422493c8e45a3ddc437d4fe2240b15e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2d1587f0422493c8e45a3ddc437d4fe2240b15e", "message": "Modify the method name and do the requested changes", "committedDate": "2020-02-11T07:46:28Z", "type": "commit"}, {"oid": "d2d1587f0422493c8e45a3ddc437d4fe2240b15e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2d1587f0422493c8e45a3ddc437d4fe2240b15e", "message": "Modify the method name and do the requested changes", "committedDate": "2020-02-11T07:46:28Z", "type": "forcePushed"}, {"oid": "27ddf75e0d91caadbdb5aba65d8d6d0423567ca2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27ddf75e0d91caadbdb5aba65d8d6d0423567ca2", "message": "Validate symtag in CodeAnalyzer", "committedDate": "2020-02-11T13:44:06Z", "type": "commit"}]}