{"pr_number": 26306, "pr_title": "Fix issue in BLangIsLikeExpr", "pr_createdAt": "2020-10-12T06:46:24Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306", "timeline": [{"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a2574f02b6ffd943813a987235f3439d0d9fe7c", "message": "Add tests", "committedDate": "2020-10-12T06:57:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2MzY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503163659", "bodyText": "Instead of doing this, how about just setting the bound size to the target type and then later, check the remainder of the source type members against the rest type?", "author": "pubudu91", "createdAt": "2020-10-12T09:30:30Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();\n+                for (int i = 0; i < targetTypeSize; i++) {\n+                    targetTypes.add(targetType.getRestType());\n+                }", "originalCommit": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTIzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503655233", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-13T04:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2MzY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2NzQzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503167439", "bodyText": "We can remove the else block and move this out?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            int targetTypeSize = source.size() - targetTypes.size();\n          \n          \n            \n                        }\n          \n          \n            \n                        \n          \n          \n            \n                        int targetTypeSize = source.size() - targetTypes.size();", "author": "MaryamZi", "createdAt": "2020-10-12T09:36:34Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();", "originalCommit": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTI1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503655250", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-13T04:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2NzQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2ODQ5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503168498", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        if (source.size() != targetType.getTupleTypes().size()) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    } else if (source.size() != targetType.getTupleTypes().size()) {\n          \n          \n            \n                        return false;            \n          \n          \n            \n                    }", "author": "MaryamZi", "createdAt": "2020-10-12T09:38:13Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();\n+                for (int i = 0; i < targetTypeSize; i++) {\n+                    targetTypes.add(targetType.getRestType());\n+                }\n+            }\n+        } else {\n+            if (source.size() != targetType.getTupleTypes().size()) {\n+                return false;\n+            }\n+        }", "originalCommit": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTI5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503655298", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-13T04:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2ODQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504545226", "bodyText": "We don't need a new list now, right?", "author": "MaryamZi", "createdAt": "2020-10-14T09:45:36Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());", "originalCommit": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTg2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504941863", "bodyText": "It is added, because targetType.getTupleTypes() is used several times in the method.", "author": "KavinduZoysa", "createdAt": "2020-10-14T20:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0ODEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505148125", "bodyText": "Yeah, but since we are not updating it now we can just do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n          \n          \n            \n                    List<BType> targetTypes = targetType.getTupleTypes();\n          \n      \n    \n    \n  \n\nright?", "author": "MaryamZi", "createdAt": "2020-10-15T03:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM0OTY2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505349664", "bodyText": "Yes, changed", "author": "KavinduZoysa", "createdAt": "2020-10-15T08:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODAwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504558004", "bodyText": "Why do we return false when sourceTypeSize == targetTypeSize ?", "author": "MaryamZi", "createdAt": "2020-10-14T10:06:32Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {", "originalCommit": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2ODE1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504568150", "bodyText": "The following shouldn't panic.\npublic function main() {\n    [anydata, anydata] x = [1, 2];\n    any a = x.cloneReadOnly();\n\n    if !(a is [int, int, int...]) {\n        panic error(\"didn't match\");\n    }\n}", "author": "MaryamZi", "createdAt": "2020-10-14T10:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504941827", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-10-14T20:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504572568", "bodyText": "Why do we have to use special methods checkTupleElementType and getArrayElementType here and in the next for loop?\nCan't (shouldn't) we directly call\ncheckIsLikeType(source.getRefValue(i), targetTypes.get(i), unresolvedValues, allowNumericConversion)?", "author": "MaryamZi", "createdAt": "2020-10-14T10:32:34Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {\n             return false;\n         }\n \n-        int bound = source.size();\n-        for (int i = 0; i < bound; i++) {\n-            BType elementType = getArrayElementType(source, i);\n-            if (BTypes.isValueType(elementType)) {\n-                if (!checkIsType(elementType, targetType.getTupleTypes().get(i), new ArrayList<>())) {\n-                    return false;\n-                }\n-            } else {\n-                if (!checkIsLikeType(source.getRefValue(i), targetType.getTupleTypes().get(i), unresolvedValues,\n-                        allowNumericConversion)) {\n-                    return false;\n-                }\n+        for (int i = 0; i < targetTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetTypes.get(i), source.getRefValue(i),", "originalCommit": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTc3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504941777", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-10-14T20:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3NDIwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504574207", "bodyText": "There's also an issue with this check that results in calling checkIsType.\nThe following panics even though it shouldn't because the immutable list [1, 2] belongs to [byte, byte].\npublic function main() {\n    [int, int] x = [1, 2];\n    any a = x.cloneReadOnly();\n\n    if !(a is [byte, byte]) {\n        panic error(\"didn't match\");\n    }\n}", "author": "MaryamZi", "createdAt": "2020-10-14T10:35:28Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {\n             return false;\n         }\n \n-        int bound = source.size();\n-        for (int i = 0; i < bound; i++) {\n-            BType elementType = getArrayElementType(source, i);\n-            if (BTypes.isValueType(elementType)) {\n-                if (!checkIsType(elementType, targetType.getTupleTypes().get(i), new ArrayList<>())) {\n-                    return false;\n-                }\n-            } else {\n-                if (!checkIsLikeType(source.getRefValue(i), targetType.getTupleTypes().get(i), unresolvedValues,\n-                        allowNumericConversion)) {\n-                    return false;\n-                }\n+        for (int i = 0; i < targetTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetTypes.get(i), source.getRefValue(i),\n+                    unresolvedValues, allowNumericConversion)) {\n+                return false;\n+            }\n+        }\n+\n+        for (int i = targetTypeSize; i < sourceTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetRestType, source.getRefValue(i),\n+                    unresolvedValues, allowNumericConversion)) {\n+                return false;\n             }\n         }\n         return true;\n+    }\n \n+    private static boolean checkTupleElementType(BType sourceElementType, BType targetElementType,\n+                                                 Object sourceRefValue, List<TypeValuePair> unresolvedValues,\n+                                                 boolean allowNumericConversion) {\n+        if (BTypes.isValueType(sourceElementType)) {", "originalCommit": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTcwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504941706", "bodyText": "Fixed.", "author": "KavinduZoysa", "createdAt": "2020-10-14T20:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3NDIwNw=="}], "type": "inlineReview"}, {"oid": "dfe4273b091f8f4cf709fc2e6aa9afa5a663f612", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfe4273b091f8f4cf709fc2e6aa9afa5a663f612", "message": "Check the tuple type", "committedDate": "2020-10-14T20:06:43Z", "type": "commit"}, {"oid": "9449ef2b5218f536374b02c885025a16b4b13be4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9449ef2b5218f536374b02c885025a16b4b13be4", "message": "Add tests", "committedDate": "2020-10-14T20:06:43Z", "type": "commit"}, {"oid": "b302f89eb391cd7369354e71bf1cd375aa0bfaf7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b302f89eb391cd7369354e71bf1cd375aa0bfaf7", "message": "Fix Suggestions", "committedDate": "2020-10-14T20:06:43Z", "type": "commit"}, {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "message": "Fix suggestions and added more tests", "committedDate": "2020-10-14T20:06:43Z", "type": "commit"}, {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "message": "Fix suggestions and added more tests", "committedDate": "2020-10-14T20:06:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTY5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505151699", "bodyText": "Isn't it definitely an error if sourceTypeSize < targetTypeSize irrespective of whether or not there is a rest descriptor? Shouldn't we check that and return false as the first check?", "author": "MaryamZi", "createdAt": "2020-10-15T04:06:03Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,41 +1982,29 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize < targetTypeSize) {\n             return false;\n         }", "originalCommit": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MjA3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505152074", "bodyText": "I guess we can then do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (targetRestType != null && sourceTypeSize < targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (sourceTypeSize < targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (targetRestType == null && sourceTypeSize > targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "author": "MaryamZi", "createdAt": "2020-10-15T04:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM0OTY5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505349699", "bodyText": "That is correct, changed.", "author": "KavinduZoysa", "createdAt": "2020-10-15T08:41:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTY5OQ=="}], "type": "inlineReview"}, {"oid": "650a114671e8d0fbb99dd6327e12461b60f9326d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/650a114671e8d0fbb99dd6327e12461b60f9326d", "message": "Add more tests", "committedDate": "2020-10-15T08:40:35Z", "type": "commit"}]}