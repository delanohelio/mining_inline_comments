{"pr_number": 26429, "pr_title": "Improve Error Recovery and Tests of Toml Parser", "pr_createdAt": "2020-10-20T11:43:43Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1MzA4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515753089", "bodyText": "Why do we need this method?\nSeems this method and leadingTriviaList is not used anywhere..", "author": "SupunS", "createdAt": "2020-11-02T05:55:23Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/AbstractLexer.java", "diffHunk": "@@ -117,4 +119,10 @@ protected STToken cloneWithDiagnostics(STToken toClone) {\n     protected void reportLexerError(DiagnosticCode diagnosticCode, Object... args) {\n         diagnostics.add(SyntaxErrors.createDiagnostic(diagnosticCode, args));\n     }\n+\n+    protected STNode getLeadingTrivia() {\n+        STNode trivia = STNodeFactory.createNodeList(this.leadingTriviaList);\n+        this.leadingTriviaList = new ArrayList<>(INITIAL_TRIVIA_CAPACITY);", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1MzM4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515753389", "bodyText": "Do we need this change?", "author": "SupunS", "createdAt": "2020-11-02T05:56:38Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/AbstractParser.java", "diffHunk": "@@ -103,20 +102,20 @@ private STToken consumeWithInvalidNodes() {\n         return token;\n     }\n \n-    protected Solution recover(STToken token, ParserRuleContext currentCtx, Object... args) {\n-        Solution sol = this.errorHandler.recover(currentCtx, token, args);\n+    protected AbstractParserErrorHandler.Solution recover(STToken token, ParserRuleContext currentCtx, Object... args) {\n+        AbstractParserErrorHandler.Solution sol = this.errorHandler.recover(currentCtx, token, args);\n         // If the action is to remove, then re-parse the same rule.\n-        if (sol.action == Action.REMOVE) {\n+        if (sol.action == AbstractParserErrorHandler.Action.REMOVE) {\n             addInvalidTokenToNextToken(sol.removedToken);\n-        } else if (sol.action == Action.INSERT) {\n+        } else if (sol.action == AbstractParserErrorHandler.Action.INSERT) {", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1MzY5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515753696", "bodyText": "Let's remove these commented out code, if they are no longer needed", "author": "SupunS", "createdAt": "2020-11-02T05:57:56Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/ParserRuleContext.java", "diffHunk": "@@ -44,50 +51,35 @@\n     ARRAY_TABLE_FIRST_END(\"]\"),\n     ARRAY_TABLE_SECOND_END(\"]\"),\n \n-//    STRING_LIST(\"string-list\"),\n-//    STRING_START(\"string-start\"),\n-//    STRING_LIST_START(\"(\"),\n-//    STRING_LIST_END(\")\"),\n-//    STRING_START_OR_STRING_LIST_END(\"string-start-or-string-list-end\"),\n-//    STRING_END(\"arg-end\"),\n-\n-    KEY_ENTRY(\"key-entry\"),\n-    KEYS_END(\"keys-entry\"),\n-\n-\n     // Syntax tokens\n     ASSIGN_OP(\"=\"),\n     COLON(\":\"),\n     COMMA(\",\"),\n     DOT(\".\"),\n-    OPEN_BRACKET(\"[\"),\n-    CLOSE_BRACKET(\"]\"),\n-    PLUS_TOKEN(\"+\"),\n-    MINUS_TOKEN(\"-\"),\n+    SIGN_TOKEN(\"sign-token\"),\n \n-    IDENTIFIER(\"identifier\"),\n+    IDENTIFIER_LITERAL(\"identifier\"),\n \n     // Expressions\n     BASIC_LITERAL(\"basic-literal\"),\n     DECIMAL_INTEGER_LITERAL(\"decimal-int-literal\"),\n-    STRING_LITERAL(\"string-literal\"),\n-    HEX_INTEGER_LITERAL(\"hex-integer-literal\"),\n+    STRING_CONTENT(\"string-content\"),\n     NIL_LITERAL(\"nil-literal\"),\n     DECIMAL_FLOATING_POINT_LITERAL(\"decimal-floating-point-literal\"),\n-    HEX_FLOATING_POINT_LITERAL(\"hex-floating-point-literal\"),\n+    BOOLEAN_LITERAL(\"boolean-literal\"),\n+    NUMERICAL_LITERAL(\"numerical-literal\"),\n \n     //TOML\n-    KEY(\"key-toml\"),\n-    KEY_LIST(\"key-list\"),\n+//    KEY(\"key-toml\"),\n     VALUE(\"value-toml\"),\n     START_SQUARE_BRACES(\"start-square-braces\"),\n     END_SQUARE_BRACES(\"end-square-braces\"),\n     KEY_VALUE_PAIR (\"key-value-pair\"),\n     TOML_TABLE(\"toml-table\"),\n     TOML_TABLE_ARRAY(\"toml-table-array\"),\n-    DOUBLE_OPEN_BRACKET(\"[[\"),\n-    DOUBLE_CLOSE_BRACKET(\"]]\"),\n-    TOML_ARRAY(\"toml-array-value\"),\n+//    TABLE_OF_ARRAYS_START(\"[[\"),\n+//    TABLE_OF_ARRAYS_CLOSE(\"]]\"),\n+//    TOML_ARRAY(\"toml-array-value\"),", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDY2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515754668", "bodyText": "Why do we need to special case first token?", "author": "SupunS", "createdAt": "2020-11-02T06:01:41Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -330,9 +341,11 @@ private void processSyntaxTrivia(List<STNode> triviaList, boolean isLeading) {\n                     break;\n                 case LexerTerminals.CARRIAGE_RETURN:\n                 case LexerTerminals.NEWLINE:\n-                    triviaList.add(processEndOfLine());\n-                    if (isLeading) {\n-                        break;\n+                    if (isInitialTrivia) {", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNTg5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515905893", "bodyText": "Let's discuss here,\n#26429 (comment)", "author": "xlight05", "createdAt": "2020-11-02T11:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NDY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NTU3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515755572", "bodyText": "can remove this", "author": "SupunS", "createdAt": "2020-11-02T06:05:25Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlParserErrorHandler.java", "diffHunk": "@@ -51,17 +51,37 @@\n public class TomlParserErrorHandler extends AbstractParserErrorHandler {\n \n     private static final ParserRuleContext[] TOP_LEVEL_NODE = {ParserRuleContext.EOF,\n-            ParserRuleContext.KEY_VALUE_PAIR, ParserRuleContext.TOML_TABLE, ParserRuleContext.TOML_TABLE_ARRAY};\n+            ParserRuleContext.NEW_LINE,\n+            ParserRuleContext.KEY_VALUE_PAIR,\n+            ParserRuleContext.TOML_TABLE,\n+            ParserRuleContext.TOML_TABLE_ARRAY\n+    };\n \n-    private static final ParserRuleContext[] VALUE_END = { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.COMMA };\n-\n-    private static final ParserRuleContext[] VALUE_START =\n-            { ParserRuleContext.VALUE, ParserRuleContext.TOML_ARRAY };\n+    private static final ParserRuleContext[] ARRAY_VALUE_END = {\n+            ParserRuleContext.COMMA,\n+            ParserRuleContext.ARRAY_VALUE_LIST_END}; //TODO does the order matter? why and how\n \n     private static final ParserRuleContext[] ARRAY_VALUE_START_OR_VALUE_LIST_END =\n             { ParserRuleContext.ARRAY_VALUE_LIST_END, ParserRuleContext.ARRAY_VALUE_START };\n \n+    private static final ParserRuleContext[] NUMERICAL_LITERAL = {ParserRuleContext.DECIMAL_INTEGER_LITERAL,\n+            ParserRuleContext.DECIMAL_FLOATING_POINT_LITERAL};\n+\n+    private static final ParserRuleContext[] VALUE = {ParserRuleContext.STRING_START,\n+            ParserRuleContext.SIGN_TOKEN, ParserRuleContext.NUMERICAL_LITERAL,\n+            ParserRuleContext.BOOLEAN_LITERAL,\n+//            ParserRuleContext.ARRAY_VALUE_LIST", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NjIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515756225", "bodyText": "Parser should use newline token(s) only to make parsing-decisions. It should not use these tokens when creating nodes. Newlines should come from the minutiae as before.", "author": "SupunS", "createdAt": "2020-11-02T06:08:03Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlParser.java", "diffHunk": "@@ -191,27 +202,35 @@ private STNode parseKeyValue() {\n         STNode identifier = parseKeys();\n         STNode equals = parseEquals();\n         STNode value = parseValue();\n+        STNode newLines = parseNewLines();", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwNTk5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515905996", "bodyText": "Let's discuss here,\n#26429 (comment)", "author": "xlight05", "createdAt": "2020-11-02T11:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NjIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NjUwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515756503", "bodyText": "Remove commented out codes in all places", "author": "SupunS", "createdAt": "2020-11-02T06:09:19Z", "path": "misc/toml-parser/src/test/java/toml/parser/test/TestToml.java", "diffHunk": "@@ -66,8 +70,22 @@ private static void testParser(String content) {\n     private static void testAPI(String path) throws IOException {\n         InputStream inputStream = new FileInputStream(path);\n         Toml read = Toml.read(inputStream);\n-        TomlBooleanValueNode key1 = read.get(\"key\");\n+\n+        List<TomlDiagnostic> diagnostics = read.getDiagnostics();\n+        for (TomlDiagnostic diagnostic: diagnostics) {\n+            OUT.println(diagnostic.location().lineRange());\n+            OUT.println(diagnostic.message());\n+        }\n+\n+        TomlStringValueNode key1 = read.get(\"key\");\n         OUT.println(key1.getValue());\n+//        TomlArrayValueNode key1 = read.get(\"key\");\n+//        OUT.println(key1.get(0));\n+\n+//        TomlLongValueNode key = read.getTable(\"key\").get(\"hello ooo\");\n+//        OUT.println(key);", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NjY5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515756697", "bodyText": "Let's create an issue to track these disabled tests", "author": "SupunS", "createdAt": "2020-11-02T06:09:58Z", "path": "misc/toml-parser/src/test/java/toml/parser/test/api/errors/KeyValuePairTest.java", "diffHunk": "@@ -106,22 +107,22 @@ public void testMultipleMissing() throws IOException {\n     public void testArrayMissingComma() throws IOException {\n \n         InputStream inputStream = Thread.currentThread().getContextClassLoader()\n-                .getResourceAsStream(\"validations/syntax/array-missing-comma.toml\");\n+                .getResourceAsStream(\"validations/syntax/key-value/array/array-missing-comma.toml\");\n         Toml read = Toml.read(inputStream);\n         List<TomlDiagnostic> diagnostics = read.getDiagnostics();\n \n-        LineRange expectedLineRange = ErrorTestUtils.toLineRange(17, 17, 10, 11);\n+        LineRange expectedLineRange = ErrorTestUtils.toLineRange(17, 17, 10, 10);\n         TomlDiagnostic actualDiag = diagnostics.get(0);\n \n         ErrorTestUtils\n-                .validateDiagnostic(actualDiag, expectedLineRange, \"invalid token '2'\", DiagnosticSeverity.ERROR);\n+                .validateDiagnostic(actualDiag, expectedLineRange, \"missing comma token\", DiagnosticSeverity.ERROR);\n     }\n \n-    @Test\n+    @Test(enabled = false) //due to getExpectedTokenKind issue", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3MTYwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521271602", "bodyText": "#26865 Done.", "author": "xlight05", "createdAt": "2020-11-11T10:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NjY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1NzE0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515757141", "bodyText": "Can call this AbstractTomlParserTest", "author": "SupunS", "createdAt": "2020-11-02T06:11:23Z", "path": "misc/toml-parser/src/test/java/toml/parser/test/tree/core/AbstractCoreTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package toml.parser.test.tree.core;\n+\n+import toml.parser.test.ParserTestUtils;\n+\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test util for testing toml.\n+ */\n+public abstract class AbstractCoreTest {", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1ODE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515758177", "bodyText": "We can have the test class package hierarchy as\ntoml.parser.test.syntax\n    |_ AbstractTomlParserTest\n    |_ KeyValueTest\n    |_ KeyValueNegativeTest\n    |_ TableTest\n    |_ TableNegativeTest", "author": "SupunS", "createdAt": "2020-11-02T06:15:02Z", "path": "misc/toml-parser/src/test/java/toml/parser/test/tree/core/KeyValueTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package toml.parser.test.tree.core;", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc1OTU2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r515759567", "bodyText": "Resource files hierarchy doesn't seems to be consistent.\nShall we go as:\nsrc/test/resources/\n    |_ syntax\n        |_tables\n        |   |_source1.bal\n        |   |_source2.bal\n        |   |_assert1.bal\n        |   |_assert2.bal\n        |   |_<both positive and negative tests goes here. Can be distinguish by adding a suffix (say 'negative') to the file name>\n        |_keyValue", "author": "SupunS", "createdAt": "2020-11-02T06:20:14Z", "path": "misc/toml-parser/src/test/java/toml/parser/test/tree/errors/AbstractErrorTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package toml.parser.test.tree.errors;\n+\n+import toml.parser.test.ParserTestUtils;\n+\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test util for testing toml.\n+ */\n+public abstract class AbstractErrorTest {\n+    void testFile(String path, String filePath) {\n+        ParserTestUtils.test(Paths.get(\"validations/syntax/\", path), Paths.get(\"validations/syntax/\", filePath));", "originalCommit": "3fa187aefb9546f01b633d222be1fd6c6716e64d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "61cdc6a8da8af93bb19ddb5a5a913a43343e8842", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61cdc6a8da8af93bb19ddb5a5a913a43343e8842", "message": "Address Review Comments", "committedDate": "2020-11-04T08:04:21Z", "type": "forcePushed"}, {"oid": "22a99e83b6f36f89ffb3d7c0bf3808396753254c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22a99e83b6f36f89ffb3d7c0bf3808396753254c", "message": "Address Review Comments", "committedDate": "2020-11-06T07:48:06Z", "type": "forcePushed"}, {"oid": "3ace3c3ca269f8054cde16c859926e708a50b21f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ace3c3ca269f8054cde16c859926e708a50b21f", "message": "Address Review Comments", "committedDate": "2020-11-06T07:57:04Z", "type": "forcePushed"}, {"oid": "3337c18a993ef38cb74a6d89e885aecdff9d5c97", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3337c18a993ef38cb74a6d89e885aecdff9d5c97", "message": "Address Review Comments", "committedDate": "2020-11-06T08:06:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyOTI2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r519529267", "bodyText": "Remove commented out lines", "author": "SupunS", "createdAt": "2020-11-09T03:04:13Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/ParserRuleContext.java", "diffHunk": "@@ -44,55 +51,35 @@\n     ARRAY_TABLE_FIRST_END(\"]\"),\n     ARRAY_TABLE_SECOND_END(\"]\"),\n \n-//    STRING_LIST(\"string-list\"),\n-//    STRING_START(\"string-start\"),\n-//    STRING_LIST_START(\"(\"),\n-//    STRING_LIST_END(\")\"),\n-//    STRING_START_OR_STRING_LIST_END(\"string-start-or-string-list-end\"),\n-//    STRING_END(\"arg-end\"),\n-\n-    KEY_ENTRY(\"key-entry\"),\n-    KEYS_END(\"keys-entry\"),\n-\n-\n     // Syntax tokens\n     ASSIGN_OP(\"=\"),\n     COLON(\":\"),\n     COMMA(\",\"),\n     DOT(\".\"),\n-    OPEN_BRACKET(\"[\"),\n-    CLOSE_BRACKET(\"]\"),\n-    PLUS_TOKEN(\"+\"),\n-    MINUS_TOKEN(\"-\"),\n-\n-    IDENTIFIER(\"identifier\"),\n+    SIGN_TOKEN(\"sign-token\"),\n+    IDENTIFIER_LITERAL(\"identifier\"),\n \n     // Expressions\n     BASIC_LITERAL(\"basic-literal\"),\n     DECIMAL_INTEGER_LITERAL(\"decimal-int-literal\"),\n-    STRING_LITERAL(\"string-literal\"),\n-    HEX_INTEGER_LITERAL(\"hex-integer-literal\"),\n+    STRING_CONTENT(\"string-content\"),\n     NIL_LITERAL(\"nil-literal\"),\n     DECIMAL_FLOATING_POINT_LITERAL(\"decimal-floating-point-literal\"),\n-    HEX_FLOATING_POINT_LITERAL(\"hex-floating-point-literal\"),\n+    BOOLEAN_LITERAL(\"boolean-literal\"),\n+    NUMERICAL_LITERAL(\"numerical-literal\"),\n \n     //TOML\n-    KEY(\"key-toml\"),\n-    KEY_LIST(\"key-list\"),\n+//    KEY(\"key-toml\"),", "originalCommit": "3337c18a993ef38cb74a6d89e885aecdff9d5c97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMDczMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r519530730", "bodyText": "Need to handle the carriage return properly.\nWe should emit only one newline token regardless whether it is \\n or \\r\\n", "author": "SupunS", "createdAt": "2020-11-09T03:10:42Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -383,14 +399,14 @@ private STNode processEndOfLine() {\n         char c = reader.peek();\n         switch (c) {\n             case LexerTerminals.NEWLINE:\n-                reader.advance();\n-                return STNodeFactory.createMinutiae(SyntaxKind.END_OF_LINE_MINUTIAE, getLexeme());\n+//                reader.advance();\n+                return STNodeFactory.createMinutiae(SyntaxKind.END_OF_LINE_MINUTIAE, \"\\n\");\n             case LexerTerminals.CARRIAGE_RETURN:\n-                reader.advance();\n-                if (reader.peek() == LexerTerminals.NEWLINE) {\n-                    reader.advance();\n-                }\n-                return STNodeFactory.createMinutiae(SyntaxKind.END_OF_LINE_MINUTIAE, getLexeme());\n+//                reader.advance();\n+//                if (reader.peek() == LexerTerminals.NEWLINE) {\n+//                    reader.advance();\n+//                }", "originalCommit": "3337c18a993ef38cb74a6d89e885aecdff9d5c97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3MjAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521272029", "bodyText": "Should be okay now.", "author": "xlight05", "createdAt": "2020-11-11T10:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMDczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUzMTUzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r519531534", "bodyText": "We could do this without this additional flag.", "author": "SupunS", "createdAt": "2020-11-09T03:14:29Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -259,31 +266,41 @@ private STToken readLiteralStringToken() {\n             }\n         }\n \n-        return getLiteral(SyntaxKind.STRING_LITERAL);\n+        return getUnquotedKey();\n     }\n \n-    private STToken getSyntaxToken(SyntaxKind kind) {\n+    private STToken getNewlineToken(SyntaxKind kind) {\n+        if (isNewLineAddedByTrailing) {\n+            this.leadingTriviaList = new ArrayList<>(INITIAL_TRIVIA_CAPACITY);\n+            isNewLineAddedByTrailing = false;", "originalCommit": "3337c18a993ef38cb74a6d89e885aecdff9d5c97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "95bc5cfa9b676abc8ce95895c2aa645fc4c93719", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95bc5cfa9b676abc8ce95895c2aa645fc4c93719", "message": "Fix New line mode", "committedDate": "2020-11-11T07:11:52Z", "type": "forcePushed"}, {"oid": "2c7b9990de4bb2917f1217a88a2e040dd60e2c9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c7b9990de4bb2917f1217a88a2e040dd60e2c9d", "message": "Fix New line mode", "committedDate": "2020-11-11T08:55:49Z", "type": "forcePushed"}, {"oid": "aec020fbcac38bd4acf6ba1bf65c19102a4c6bd2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aec020fbcac38bd4acf6ba1bf65c19102a4c6bd2", "message": "Fix New line mode", "committedDate": "2020-11-11T09:09:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5MTE3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521791173", "bodyText": "Here its good to check whether the next character is a newline\n\nIf so, send the newline token.\nOtherwise, go back to the default mode and send a normal token.", "author": "SupunS", "createdAt": "2020-11-12T03:13:28Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -200,6 +206,16 @@ private STToken readToken() {\n         return token;\n     }\n \n+    private STToken readNewlineToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }", "originalCommit": "aec020fbcac38bd4acf6ba1bf65c19102a4c6bd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3NTQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521875481", "bodyText": "I've done the same thing before submitting PR. It did not make any difference when I tested with different inputs as we are only starting the mode when processing newline. but yeah having the check is good for maintainability. I'll add it back.", "author": "xlight05", "createdAt": "2020-11-12T06:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5MTE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5NzM0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521797341", "bodyText": "Newline is a single word. Lets update in all places.", "author": "SupunS", "createdAt": "2020-11-12T03:24:25Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlParser.java", "diffHunk": "@@ -191,27 +211,46 @@ private STNode parseKeyValue() {\n         STNode identifier = parseKeys();\n         STNode equals = parseEquals();\n         STNode value = parseValue();\n+        STNode newLine = parseNewLines();\n+        if (newLine.hasDiagnostics()) {\n+            value = SyntaxErrors.addSyntaxDiagnostics(value, newLine.diagnostics());\n+        }\n         endContext();\n         return STNodeFactory.createKeyValueNode(identifier, equals, value);\n     }\n \n+    /**\n+     * Pares new lines.\n+     * New lines are appended to trivia from lexer. These tokens are only used for validations purposes.\n+     */\n+    private STNode parseNewLines() {", "originalCommit": "aec020fbcac38bd4acf6ba1bf65c19102a4c6bd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5ODUzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521798537", "bodyText": "Should be a single word NEWLINE", "author": "SupunS", "createdAt": "2020-11-12T03:26:06Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/syntax/tree/SyntaxKind.java", "diffHunk": "@@ -23,29 +23,20 @@\n  * @since 2.0.0\n  */\n public enum SyntaxKind {\n+    INITIAL_TRIVIA(200),\n+    NEW_LINE(201, \"\\n\"),", "originalCommit": "aec020fbcac38bd4acf6ba1bf65c19102a4c6bd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5ODk0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521798947", "bodyText": "INITIAL_TRIVIA is unused?", "author": "SupunS", "createdAt": "2020-11-12T03:26:42Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/syntax/tree/SyntaxKind.java", "diffHunk": "@@ -23,29 +23,20 @@\n  * @since 2.0.0\n  */\n public enum SyntaxKind {\n+    INITIAL_TRIVIA(200),", "originalCommit": "aec020fbcac38bd4acf6ba1bf65c19102a4c6bd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTg4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521799889", "bodyText": "Better to clean up and make the error code continuous within a group", "author": "SupunS", "createdAt": "2020-11-12T03:28:11Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/syntax/tree/SyntaxKind.java", "diffHunk": "@@ -23,29 +23,20 @@\n  * @since 2.0.0\n  */\n public enum SyntaxKind {\n+    INITIAL_TRIVIA(200),\n+    NEW_LINE(201, \"\\n\"),\n \n     MODULE_NAME(3014),\n \n     TRUE_KEYWORD(203, \"true\"),\n     FALSE_KEYWORD(204, \"false\"),\n \n     // Separators\n-    OPEN_BRACE_TOKEN(500, \"{\"),\n-    CLOSE_BRACE_TOKEN(501, \"}\"),\n-    OPEN_PAREN_TOKEN(502, \"(\"),\n-    CLOSE_PAREN_TOKEN(503, \")\"),", "originalCommit": "aec020fbcac38bd4acf6ba1bf65c19102a4c6bd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgwNTYzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26429#discussion_r521805633", "bodyText": "Shall we define System.lineSeparator() as a constant and use that?", "author": "SupunS", "createdAt": "2020-11-12T03:37:04Z", "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -383,14 +404,12 @@ private STNode processEndOfLine() {\n         char c = reader.peek();\n         switch (c) {\n             case LexerTerminals.NEWLINE:\n-                reader.advance();\n-                return STNodeFactory.createMinutiae(SyntaxKind.END_OF_LINE_MINUTIAE, getLexeme());\n+                return STNodeFactory.createMinutiae(SyntaxKind.END_OF_LINE_MINUTIAE, System.lineSeparator());\n             case LexerTerminals.CARRIAGE_RETURN:\n-                reader.advance();\n                 if (reader.peek() == LexerTerminals.NEWLINE) {\n                     reader.advance();\n                 }\n-                return STNodeFactory.createMinutiae(SyntaxKind.END_OF_LINE_MINUTIAE, getLexeme());\n+                return STNodeFactory.createMinutiae(SyntaxKind.END_OF_LINE_MINUTIAE, System.lineSeparator());", "originalCommit": "aec020fbcac38bd4acf6ba1bf65c19102a4c6bd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c7e744ae1693d89aec93b0c107f9df67b37f25f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c7e744ae1693d89aec93b0c107f9df67b37f25f", "message": "Rename properties files", "committedDate": "2020-11-16T04:14:00Z", "type": "forcePushed"}, {"oid": "a76d0b1f0ea35187ca3d596f0c40a4066f51ec5f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a76d0b1f0ea35187ca3d596f0c40a4066f51ec5f", "message": "Fix windows tests", "committedDate": "2020-11-16T09:52:15Z", "type": "forcePushed"}, {"oid": "009f96a4a62c6c273601097f92b6188256da3a41", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/009f96a4a62c6c273601097f92b6188256da3a41", "message": "Fix windows tests", "committedDate": "2020-11-16T11:16:51Z", "type": "forcePushed"}, {"oid": "69d8a124aa7355dae29a60ca382ccc5810737fa0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69d8a124aa7355dae29a60ca382ccc5810737fa0", "message": "Initial Toml tree tests impl", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "4694d38b5969b009b3ea558dbca7ae07970b1310", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4694d38b5969b009b3ea558dbca7ae07970b1310", "message": "Add Syntax Tree Tests", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "967d50144edae2bc18329bda8b9cbc6fc267843d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/967d50144edae2bc18329bda8b9cbc6fc267843d", "message": "Remove Unnecessary errors and messages", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "d5ce04516e057fb4a6f57c68e95a30813ab28730", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5ce04516e057fb4a6f57c68e95a30813ab28730", "message": "Add sign token for numerical node", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "f4f0471fe3df61fad51e543dd84e5978200e5d06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4f0471fe3df61fad51e543dd84e5978200e5d06", "message": "Remove InitialTriviaNode from ST", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "b5d279443e1333df6a5bbdb50a767af3ea3097ff", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5d279443e1333df6a5bbdb50a767af3ea3097ff", "message": "Address Review Comments", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "30a91e29888d72c6f8f75a56633b48bc4a071a36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30a91e29888d72c6f8f75a56633b48bc4a071a36", "message": "Fix New line mode", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "271a1bafbc4c083b4e07c7e46a2c822554baae47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/271a1bafbc4c083b4e07c7e46a2c822554baae47", "message": "Fix minor review changes", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "8a0bd412ee8a652f96d571a528530a8eca7e666e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a0bd412ee8a652f96d571a528530a8eca7e666e", "message": "Fix windows tests", "committedDate": "2020-11-16T14:37:54Z", "type": "commit"}, {"oid": "8a0bd412ee8a652f96d571a528530a8eca7e666e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a0bd412ee8a652f96d571a528530a8eca7e666e", "message": "Fix windows tests", "committedDate": "2020-11-16T14:37:54Z", "type": "forcePushed"}]}