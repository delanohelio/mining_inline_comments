{"pr_number": 26894, "pr_title": "Port docerina to syntax,semantic,project apis", "pr_createdAt": "2020-11-12T16:51:40Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNDc4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r522324789", "bodyText": "We should use ProjectConstants class. You can create a constant there if it is not present.", "author": "azinneera", "createdAt": "2020-11-12T18:29:43Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Task for generating docs using docerina.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateDocsTask implements Task {\n+\n+    private boolean excludeIndex;\n+    private final transient PrintStream out;\n+\n+    public CreateDocsTask(boolean excludeIndex, PrintStream out) {\n+        this.excludeIndex = excludeIndex;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        Path sourceRootPath = project.sourceRoot();\n+        Path targetDir = project.sourceRoot().resolve(ProjectDirConstants.TARGET_DIR_NAME);", "originalCommit": "5d60cda86a9f018bba3404f8b32eb71594947284", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNTc3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r522325775", "bodyText": "@hevayo should we use the Target model here?", "author": "azinneera", "createdAt": "2020-11-12T18:31:23Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Task for generating docs using docerina.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateDocsTask implements Task {\n+\n+    private boolean excludeIndex;\n+    private final transient PrintStream out;\n+\n+    public CreateDocsTask(boolean excludeIndex, PrintStream out) {\n+        this.excludeIndex = excludeIndex;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        Path sourceRootPath = project.sourceRoot();\n+        Path targetDir = project.sourceRoot().resolve(ProjectDirConstants.TARGET_DIR_NAME);\n+        Path outputPath = targetDir.resolve(ProjectDirConstants.TARGET_API_DOC_DIRECTORY);", "originalCommit": "5d60cda86a9f018bba3404f8b32eb71594947284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjY5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r522866690", "bodyText": "Yes better if we could do that", "author": "hevayo", "createdAt": "2020-11-13T10:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNTc3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MjMyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523382328", "bodyText": "Added the changes", "author": "shehan360", "createdAt": "2020-11-14T06:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNTc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjc1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r522326758", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw createLauncherException(\"Unable to generate API Documentation.\");\n          \n          \n            \n                        throw createLauncherException(\"Unable to generate API Documentation.\", e.getCause());", "author": "azinneera", "createdAt": "2020-11-12T18:32:49Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/CreateDocsTask.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Task for generating docs using docerina.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CreateDocsTask implements Task {\n+\n+    private boolean excludeIndex;\n+    private final transient PrintStream out;\n+\n+    public CreateDocsTask(boolean excludeIndex, PrintStream out) {\n+        this.excludeIndex = excludeIndex;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        Path sourceRootPath = project.sourceRoot();\n+        Path targetDir = project.sourceRoot().resolve(ProjectDirConstants.TARGET_DIR_NAME);\n+        Path outputPath = targetDir.resolve(ProjectDirConstants.TARGET_API_DOC_DIRECTORY);\n+        this.out.println(\"Generating API Documentation\");\n+        try {\n+            Files.createDirectories(outputPath);\n+            BallerinaDocGenerator.generateAPIDocs(project, outputPath.toString(), excludeIndex);\n+            this.out.println(\"\\t\" + sourceRootPath.relativize(outputPath).toString());\n+\n+        } catch (IOException e) {\n+            throw createLauncherException(\"Unable to generate API Documentation.\");", "originalCommit": "5d60cda86a9f018bba3404f8b32eb71594947284", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4021c6a077c243a423f3553664eb29750fd0eea6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4021c6a077c243a423f3553664eb29750fd0eea6", "message": "Docerina port to Project API", "committedDate": "2020-11-13T09:36:19Z", "type": "forcePushed"}, {"oid": "7d58a119f20315fe92d246ddd46e5e99e2126f77", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d58a119f20315fe92d246ddd46e5e99e2126f77", "message": "use Target Model", "committedDate": "2020-11-14T06:04:51Z", "type": "forcePushed"}, {"oid": "a1712a14b22fba66781bf4c360c8511b42373c8b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a1712a14b22fba66781bf4c360c8511b42373c8b", "message": "fix type category resolving", "committedDate": "2020-11-16T07:05:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NjQ0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523966441", "bodyText": "We dont support this flag now. The command should be run as ballerina doc [<project-path>]", "author": "azinneera", "createdAt": "2020-11-16T08:27:22Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.cli.TaskExecutor;\n+import io.ballerina.cli.task.CompileTask;\n+import io.ballerina.cli.task.CreateDocsTask;\n+import io.ballerina.cli.task.CreateTargetDirTask;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.DOC_COMMAND;\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * This class represents the \"ballerina doc\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = DOC_COMMAND, description = \"Ballerina doc - Generates API Documentation\")\n+public class DocCommand implements BLauncherCmd {\n+\n+    private final PrintStream outStream;\n+    private final PrintStream errStream;\n+    private Path projectPath;\n+    private boolean exitWhenFinish;\n+\n+    public DocCommand() {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = System.out;\n+        this.errStream = System.err;\n+        this.exitWhenFinish = true;\n+    }\n+\n+    public DocCommand(PrintStream outStream, PrintStream errStream, boolean exitWhenFinish) {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = outStream;\n+        this.errStream = errStream;\n+        this.exitWhenFinish = exitWhenFinish;\n+    }\n+\n+    @CommandLine.Option(names = {\"--sourceroot\"},", "originalCommit": "f4908fc78daecaad056b0307b429dba51e317f20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2OTQ1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523969450", "bodyText": "You can refer to the run command", "author": "azinneera", "createdAt": "2020-11-16T08:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NjQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NzE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523967176", "bodyText": "We dont need this validation", "author": "azinneera", "createdAt": "2020-11-16T08:28:42Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.cli.TaskExecutor;\n+import io.ballerina.cli.task.CompileTask;\n+import io.ballerina.cli.task.CreateDocsTask;\n+import io.ballerina.cli.task.CreateTargetDirTask;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.DOC_COMMAND;\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * This class represents the \"ballerina doc\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = DOC_COMMAND, description = \"Ballerina doc - Generates API Documentation\")\n+public class DocCommand implements BLauncherCmd {\n+\n+    private final PrintStream outStream;\n+    private final PrintStream errStream;\n+    private Path projectPath;\n+    private boolean exitWhenFinish;\n+\n+    public DocCommand() {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = System.out;\n+        this.errStream = System.err;\n+        this.exitWhenFinish = true;\n+    }\n+\n+    public DocCommand(PrintStream outStream, PrintStream errStream, boolean exitWhenFinish) {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = outStream;\n+        this.errStream = errStream;\n+        this.exitWhenFinish = exitWhenFinish;\n+    }\n+\n+    @CommandLine.Option(names = {\"--sourceroot\"},\n+            description = \"Path to the directory containing source files and modules.\")\n+    private String sourceRoot;\n+\n+    @CommandLine.Option(names = {\"--o\", \"-o\"}, description = \"Location to save API Docs.\")\n+    private String outputLoc;\n+\n+    @CommandLine.Option(names = {\"--excludeIndex\", \"-excludeIndex\"}, description = \"Prevents project index from \" +\n+            \"being generated.\")\n+    private boolean excludeIndex;\n+\n+    @CommandLine.Option(names = {\"--combine\", \"-combine\"}, description = \"Creates index using modules.\")\n+    private boolean combine;\n+\n+    @CommandLine.Option(names = {\"--offline\"}, description = \"Compiles offline without downloading \" +\n+            \"dependencies.\")\n+    private boolean offline;\n+\n+    @CommandLine.Option(names = \"--old-parser\", description = \"Enable old parser.\", hidden = true)\n+    private boolean useOldParser;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--exclude\", \"-e\"}, description = \"List of modules to be excluded.\")\n+    private String[] excludes;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"Enable experimental language features.\")\n+    private boolean experimentalFlag;\n+\n+    public void execute() {\n+        if (this.helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(DOC_COMMAND);\n+            this.errStream.println(commandUsageInfo);\n+            return;\n+        }\n+        // combine docs\n+        if (this.combine) {\n+            outStream.println(\"Combining Docs\");\n+            BallerinaDocGenerator.mergeApiDocs(this.projectPath.toString());\n+            if (this.exitWhenFinish) {\n+                Runtime.getRuntime().exit(0);\n+            }\n+        }\n+\n+        if (this.argList != null && this.argList.get(0).endsWith(ProjectConstants.BLANG_SOURCE_EXT)) {\n+            CommandUtil.printError(this.errStream,\n+                    \"generating API Documentation is not supported for a single Ballerina file.\",\n+                    null,\n+                    false);\n+            CommandUtil.exitError(true);\n+            return;\n+        }\n+\n+        // check if there are too many arguments.\n+        if (this.argList != null && this.argList.size() > 1) {\n+            CommandUtil.printError(this.errStream,\n+                    \"too many arguments.\",\n+                    \"ballerina doc [--sourceroot] [--offline]\\n\",\n+                    false);\n+            CommandUtil.exitError(true);\n+            return;\n+        }\n+\n+        // validation and decide source root and source full path\n+        this.projectPath = null != this.sourceRoot ?", "originalCommit": "f4908fc78daecaad056b0307b429dba51e317f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NzMyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26894#discussion_r523967325", "bodyText": "We can remove this validation as well", "author": "azinneera", "createdAt": "2020-11-16T08:29:00Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/DocCommand.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.cli.TaskExecutor;\n+import io.ballerina.cli.task.CompileTask;\n+import io.ballerina.cli.task.CreateDocsTask;\n+import io.ballerina.cli.task.CreateTargetDirTask;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.compiler.CompilerPhase;\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.CompilerOptions;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirs;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.DOC_COMMAND;\n+import static org.ballerinalang.compiler.CompilerOptionName.COMPILER_PHASE;\n+import static org.ballerinalang.compiler.CompilerOptionName.EXPERIMENTAL_FEATURES_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.LOCK_ENABLED;\n+import static org.ballerinalang.compiler.CompilerOptionName.OFFLINE;\n+import static org.ballerinalang.compiler.CompilerOptionName.PRESERVE_WHITESPACE;\n+import static org.ballerinalang.compiler.CompilerOptionName.SKIP_TESTS;\n+import static org.ballerinalang.compiler.CompilerOptionName.TEST_ENABLED;\n+\n+/**\n+ * This class represents the \"ballerina doc\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = DOC_COMMAND, description = \"Ballerina doc - Generates API Documentation\")\n+public class DocCommand implements BLauncherCmd {\n+\n+    private final PrintStream outStream;\n+    private final PrintStream errStream;\n+    private Path projectPath;\n+    private boolean exitWhenFinish;\n+\n+    public DocCommand() {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = System.out;\n+        this.errStream = System.err;\n+        this.exitWhenFinish = true;\n+    }\n+\n+    public DocCommand(PrintStream outStream, PrintStream errStream, boolean exitWhenFinish) {\n+        this.projectPath = Paths.get(System.getProperty(\"user.dir\"));\n+        this.outStream = outStream;\n+        this.errStream = errStream;\n+        this.exitWhenFinish = exitWhenFinish;\n+    }\n+\n+    @CommandLine.Option(names = {\"--sourceroot\"},\n+            description = \"Path to the directory containing source files and modules.\")\n+    private String sourceRoot;\n+\n+    @CommandLine.Option(names = {\"--o\", \"-o\"}, description = \"Location to save API Docs.\")\n+    private String outputLoc;\n+\n+    @CommandLine.Option(names = {\"--excludeIndex\", \"-excludeIndex\"}, description = \"Prevents project index from \" +\n+            \"being generated.\")\n+    private boolean excludeIndex;\n+\n+    @CommandLine.Option(names = {\"--combine\", \"-combine\"}, description = \"Creates index using modules.\")\n+    private boolean combine;\n+\n+    @CommandLine.Option(names = {\"--offline\"}, description = \"Compiles offline without downloading \" +\n+            \"dependencies.\")\n+    private boolean offline;\n+\n+    @CommandLine.Option(names = \"--old-parser\", description = \"Enable old parser.\", hidden = true)\n+    private boolean useOldParser;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--exclude\", \"-e\"}, description = \"List of modules to be excluded.\")\n+    private String[] excludes;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"Enable experimental language features.\")\n+    private boolean experimentalFlag;\n+\n+    public void execute() {\n+        if (this.helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(DOC_COMMAND);\n+            this.errStream.println(commandUsageInfo);\n+            return;\n+        }\n+        // combine docs\n+        if (this.combine) {\n+            outStream.println(\"Combining Docs\");\n+            BallerinaDocGenerator.mergeApiDocs(this.projectPath.toString());\n+            if (this.exitWhenFinish) {\n+                Runtime.getRuntime().exit(0);\n+            }\n+        }\n+\n+        if (this.argList != null && this.argList.get(0).endsWith(ProjectConstants.BLANG_SOURCE_EXT)) {\n+            CommandUtil.printError(this.errStream,\n+                    \"generating API Documentation is not supported for a single Ballerina file.\",\n+                    null,\n+                    false);\n+            CommandUtil.exitError(true);\n+            return;\n+        }\n+\n+        // check if there are too many arguments.\n+        if (this.argList != null && this.argList.size() > 1) {\n+            CommandUtil.printError(this.errStream,\n+                    \"too many arguments.\",\n+                    \"ballerina doc [--sourceroot] [--offline]\\n\",\n+                    false);\n+            CommandUtil.exitError(true);\n+            return;\n+        }\n+\n+        // validation and decide source root and source full path\n+        this.projectPath = null != this.sourceRoot ?\n+                Paths.get(this.sourceRoot).toAbsolutePath() : this.projectPath;\n+\n+        // validate and set source root path\n+        if (!ProjectDirs.isProject(this.projectPath)) {", "originalCommit": "f4908fc78daecaad056b0307b429dba51e317f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea0802356ac08fd3f1342805ce98d1b06e3f409d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea0802356ac08fd3f1342805ce98d1b06e3f409d", "message": "Add Package.md support", "committedDate": "2020-11-16T11:31:57Z", "type": "forcePushed"}, {"oid": "1bbe138e5677c71e6241d724d1577628a83eb312", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bbe138e5677c71e6241d724d1577628a83eb312", "message": "Add Package.md support", "committedDate": "2020-11-16T13:52:54Z", "type": "forcePushed"}, {"oid": "e72c8b595964b38ee7842b36b763327f7b52d8b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e72c8b595964b38ee7842b36b763327f7b52d8b6", "message": "Add Package.md support", "committedDate": "2020-11-16T19:06:10Z", "type": "forcePushed"}, {"oid": "e634ce30d10a8fd46dfd666f8ec6ae4da4652538", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e634ce30d10a8fd46dfd666f8ec6ae4da4652538", "message": "Port docerina to syntax,semantic,project apis", "committedDate": "2020-11-17T05:16:07Z", "type": "commit"}, {"oid": "e91147d9f143ee034b5d35aa572ff0f75490c637", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e91147d9f143ee034b5d35aa572ff0f75490c637", "message": "Docerina port to Project API", "committedDate": "2020-11-17T05:24:45Z", "type": "commit"}, {"oid": "f8fc813f04bbcc4cdaa69d9236aae1522ee290d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8fc813f04bbcc4cdaa69d9236aae1522ee290d1", "message": "use Target Model", "committedDate": "2020-11-17T05:24:45Z", "type": "commit"}, {"oid": "1a64ad2ebf13fc261c7e09c35b1949e2771ec379", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a64ad2ebf13fc261c7e09c35b1949e2771ec379", "message": "fix type category resolving", "committedDate": "2020-11-17T05:24:45Z", "type": "commit"}, {"oid": "0b05f303fa74443c2622d36429744548b09c35c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b05f303fa74443c2622d36429744548b09c35c5", "message": "fix qualifiednamereference category resolving", "committedDate": "2020-11-17T05:24:45Z", "type": "commit"}, {"oid": "835167a769de85a4e3470a5798b69c17fdffe0bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/835167a769de85a4e3470a5798b69c17fdffe0bc", "message": "Add intersection type\nRename unionTypes,finitetypes to BTypes", "committedDate": "2020-11-17T05:24:45Z", "type": "commit"}, {"oid": "b3ff48521cc36c6c920f9c5588e35ad0eee4a0bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3ff48521cc36c6c920f9c5588e35ad0eee4a0bb", "message": "Remove sourceroot flag\nFix -o output flag", "committedDate": "2020-11-17T05:24:45Z", "type": "commit"}, {"oid": "76cc613fd375f18e244b752911151a3a068c3f2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76cc613fd375f18e244b752911151a3a068c3f2b", "message": "Add Package.md support", "committedDate": "2020-11-17T05:24:45Z", "type": "commit"}, {"oid": "6a84cbd85c2e5cab2178fccfd1a4b12671fce592", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a84cbd85c2e5cab2178fccfd1a4b12671fce592", "message": "Update gradle scripts", "committedDate": "2020-11-17T05:41:49Z", "type": "commit"}, {"oid": "6a84cbd85c2e5cab2178fccfd1a4b12671fce592", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a84cbd85c2e5cab2178fccfd1a4b12671fce592", "message": "Update gradle scripts", "committedDate": "2020-11-17T05:41:49Z", "type": "forcePushed"}]}