{"pr_number": 22636, "pr_title": "Add initial functional constructor impl", "pr_createdAt": "2020-04-15T10:21:39Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636", "timeline": [{"oid": "415aee6c45b7d72de1fe72ddf0e897166c322f79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/415aee6c45b7d72de1fe72ddf0e897166c322f79", "message": "Add initial functional constructor impl", "committedDate": "2020-04-16T15:05:13Z", "type": "forcePushed"}, {"oid": "9fc70929f9823aefef90f84f074147e4d754d848", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fc70929f9823aefef90f84f074147e4d754d848", "message": "Add initial functional constructor impl", "committedDate": "2020-04-29T07:00:39Z", "type": "commit"}, {"oid": "9fc70929f9823aefef90f84f074147e4d754d848", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fc70929f9823aefef90f84f074147e4d754d848", "message": "Add initial functional constructor impl", "committedDate": "2020-04-29T07:00:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTQ0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419891446", "bodyText": "Is this a valid case, the XML module symbol being null? Shouldn't the XML lang lib always be available by this point? In which case, this is an invalid state", "author": "pubudu91", "createdAt": "2020-05-05T06:34:53Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1322,4 +1324,48 @@ private boolean isMemberAllowed(SymbolEnv env, BSymbol symbol) {\n                 && env.enclInvokable.symbol.receiverSymbol.type.tsymbol == symbol.owner\n                 || isMemberAllowed(env.enclEnv, symbol));\n     }\n+\n+    public void loadFunctionalConstructors() {\n+        BPackageSymbol xmlModuleSymbol = symTable.langXmlModuleSymbol;\n+        if (xmlModuleSymbol == null) {\n+            return;", "originalCommit": "9fc70929f9823aefef90f84f074147e4d754d848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NTk4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422485980", "bodyText": "This[1] is without this exit condition, couldn't figureout why it fails like this\n[1] - https://scans.gradle.com/s/c5uvl2bsschds", "author": "rdhananjaya", "createdAt": "2020-05-09T11:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMjExMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r424222111", "bodyText": "Hmm.. Could it be a Gradle dependency issue? I had a look at the log. createBStringBalo task doesn't seem to have run for the ballerina-lang:xml module. Could it be that?", "author": "pubudu91", "createdAt": "2020-05-13T07:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwNDc3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419904776", "bodyText": "Similar comment as above regarding this. Since this method seems to be called only once, will there be a case where the symbols are already defined?", "author": "pubudu91", "createdAt": "2020-05-05T07:09:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1322,4 +1324,48 @@ private boolean isMemberAllowed(SymbolEnv env, BSymbol symbol) {\n                 && env.enclInvokable.symbol.receiverSymbol.type.tsymbol == symbol.owner\n                 || isMemberAllowed(env.enclEnv, symbol));\n     }\n+\n+    public void loadFunctionalConstructors() {\n+        BPackageSymbol xmlModuleSymbol = symTable.langXmlModuleSymbol;\n+        if (xmlModuleSymbol == null) {\n+            return;\n+        }\n+\n+        ScopeEntry entry = xmlModuleSymbol.scope.lookup(names.fromString(\"Element\"));\n+        while (entry.symbol != null && entry.symbol != symTable.notFoundSymbol) {\n+            if (entry.symbol.tag == SymTag.CONSTRUCTOR) {\n+                return;\n+            }\n+            entry = entry.next;\n+        }", "originalCommit": "9fc70929f9823aefef90f84f074147e4d754d848", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxNzI5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419917299", "bodyText": "Need to fix the version", "author": "pubudu91", "createdAt": "2020-05-05T07:36:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/FunctionalConstructorBuilder.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.util;\n+\n+\n+import org.ballerinalang.model.symbols.SymbolKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.Scope;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BConstructorSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Build functional constructor symbol.\n+ *\n+ * @since 1.3.0", "originalCommit": "9fc70929f9823aefef90f84f074147e4d754d848", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMTU1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419921557", "bodyText": "This can never be null right? Just empty?", "author": "pubudu91", "createdAt": "2020-05-05T07:45:35Z", "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/CommentCtor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.internal;\n+\n+import org.ballerinalang.jvm.XMLFactory;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * XML Comment constructor function.\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.__internal\", functionName = \"commentCtor\",\n+        args = {\n+                @Argument(name = \"content\", type = TypeKind.STRING)\n+        },\n+        returnType = {@ReturnType(type = TypeKind.XML)}\n+)\n+public class CommentCtor {\n+\n+    public static XMLValue commentCtor(Strand strand, String content) {\n+        if (content == null) {", "originalCommit": "9fc70929f9823aefef90f84f074147e4d754d848", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMjA2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419922062", "bodyText": "Again, redundant null checks aren't they?", "author": "pubudu91", "createdAt": "2020-05-05T07:46:39Z", "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/ElementCtor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.internal;\n+\n+import org.ballerinalang.jvm.XMLFactory;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.XMLItem;\n+import org.ballerinalang.jvm.values.XMLQName;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * XML Element constructor function.\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.__internal\", functionName = \"elementCtor\",\n+        args = {\n+                @Argument(name = \"name\", type = TypeKind.STRING),\n+                @Argument(name = \"attributeMap\", type = TypeKind.MAP),\n+                @Argument(name = \"children\", type = TypeKind.XML)\n+        },\n+        returnType = {@ReturnType(type = TypeKind.XML)}\n+)\n+public class ElementCtor {\n+\n+    public static XMLValue elementCtor(Strand strand, String name, MapValue<String, String> attributeMap,\n+                                       XMLValue children) {\n+        XMLItem xmlElement = (XMLItem) XMLFactory.createXMLElement(new XMLQName(name), (String) null);\n+        if (children != null) {\n+            xmlElement.setChildren(children);\n+        }\n+        if (attributeMap != null) {\n+            xmlElement.setAttributes(attributeMap);\n+        }", "originalCommit": "9fc70929f9823aefef90f84f074147e4d754d848", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMjQxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r419922415", "bodyText": "Same comment as the above two", "author": "pubudu91", "createdAt": "2020-05-05T07:47:22Z", "path": "langlib/lang.__internal/src/main/java/org/ballerinalang/langlib/internal/ProcessingInstructionCtor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.internal;\n+\n+import org.ballerinalang.jvm.XMLFactory;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.XMLValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+/**\n+ * XML Processing Instruction constructor function.\n+ *\n+ * @since 1.3.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.__internal\", functionName = \"processingInstructionCtor\",\n+        args = {\n+                @Argument(name = \"target\", type = TypeKind.STRING),\n+                @Argument(name = \"content\", type = TypeKind.STRING)\n+        },\n+        returnType = {@ReturnType(type = TypeKind.XML)}\n+)\n+public class ProcessingInstructionCtor {\n+\n+    public static XMLValue processingInstructionCtor(Strand strand, String target, String content) {\n+        if (content == null) {\n+            content = \"\";\n+        }", "originalCommit": "9fc70929f9823aefef90f84f074147e4d754d848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NTgxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422485810", "bodyText": "Fixed all", "author": "rdhananjaya", "createdAt": "2020-05-09T11:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMjQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2NzQ1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r420967457", "bodyText": "Cant we avoid this extra string processing by having the same name for the ctor? Or at least reduce some of the processing. eg: Can we avoid \"Ctor\" part?", "author": "KRVPerera", "createdAt": "2020-05-06T17:32:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3555,6 +3556,13 @@ public void visit(BLangInvocation iExpr) {\n \n         if (iExpr.symbol != null && iExpr.symbol.kind == SymbolKind.ERROR_CONSTRUCTOR) {\n             result = rewriteErrorConstructor(iExpr);\n+        } else if (iExpr.symbol.kind == SymbolKind.FUNCTIONAL_CONSTRUCTOR) {\n+            String name = ((BConstructorSymbol) iExpr.symbol).name.value;\n+\n+            String internalMethodName = name.substring(0, 1).toLowerCase() + name.substring(1) + \"Ctor\";", "originalCommit": "9fc70929f9823aefef90f84f074147e4d754d848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODAxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422458014", "bodyText": "In my view having a clear name describing what it does far outweigh the cost of string concat/substring. Especially given that this is not in a hot path.", "author": "rdhananjaya", "createdAt": "2020-05-09T06:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2NzQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwMjA0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422002045", "bodyText": "Think we can provide initial capacity for array list size for new ArrayList<>(params.size())", "author": "KRVPerera", "createdAt": "2020-05-08T07:55:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/FunctionalConstructorBuilder.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.util;\n+\n+\n+import org.ballerinalang.model.symbols.SymbolKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.Scope;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BConstructorSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.SymTag;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Build functional constructor symbol.\n+ *\n+ * @since 1.3.0\n+ */\n+public class FunctionalConstructorBuilder {\n+    private ArrayList<BVarSymbol> params;\n+    private String name;\n+    private BPackageSymbol langlibPkg;\n+    private BType constructedType;\n+\n+    private FunctionalConstructorBuilder(String name, BPackageSymbol langlibPkg, BType constructedType) {\n+        this.name = name;\n+        this.langlibPkg = langlibPkg;\n+        this.constructedType = constructedType;\n+        this.params = new ArrayList<>();\n+    }\n+\n+    public static FunctionalConstructorBuilder newConstructor(String name,\n+                                                              BPackageSymbol langlibModule,\n+                                                              BType constructedType) {\n+        return new FunctionalConstructorBuilder(name, langlibModule, constructedType);\n+    }\n+\n+    private FunctionalConstructorBuilder addParam(String name, BType type, boolean isDefaultable) {\n+        BVarSymbol paramSymbol = new BVarSymbol(0, new Name(name), langlibPkg.pkgID, type, null);\n+        paramSymbol.defaultableParam = isDefaultable;\n+        params.add(paramSymbol);\n+        return this;\n+    }\n+\n+    public FunctionalConstructorBuilder addParam(String name, BType type) {\n+        return addParam(name, type, false);\n+    }\n+\n+    public FunctionalConstructorBuilder addDefaultableParam(String name, BType type) {\n+        return addParam(name, type, true);\n+    }\n+\n+    public BConstructorSymbol build() {\n+        List<BType> paramTypes = new ArrayList<>();", "originalCommit": "9fc70929f9823aefef90f84f074147e4d754d848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NTc5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22636#discussion_r422485792", "bodyText": "Done", "author": "rdhananjaya", "createdAt": "2020-05-09T11:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwMjA0NQ=="}], "type": "inlineReview"}, {"oid": "1bdc6324870b2a77da4f82de3cd49286212b1532", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bdc6324870b2a77da4f82de3cd49286212b1532", "message": "Apply review suggestions", "committedDate": "2020-05-09T11:35:28Z", "type": "commit"}, {"oid": "1bdc6324870b2a77da4f82de3cd49286212b1532", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bdc6324870b2a77da4f82de3cd49286212b1532", "message": "Apply review suggestions", "committedDate": "2020-05-09T11:35:28Z", "type": "forcePushed"}]}