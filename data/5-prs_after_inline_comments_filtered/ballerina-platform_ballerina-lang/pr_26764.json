{"pr_number": 26764, "pr_title": "Add test cases for Range Formatting", "pr_createdAt": "2020-11-05T05:27:52Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764", "timeline": [{"oid": "b04b0eff34e310f8830a82ef9a5eea8c38a6d475", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b04b0eff34e310f8830a82ef9a5eea8c38a6d475", "message": "Add range test for fixed range", "committedDate": "2020-11-04T12:22:39Z", "type": "commit"}, {"oid": "9d047f3b2d8a41fe90e62c433e669e8d78225e2e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d047f3b2d8a41fe90e62c433e669e8d78225e2e", "message": "Merge branch 'master' into range-formatting", "committedDate": "2020-11-05T05:24:54Z", "type": "commit"}, {"oid": "91298ec2643be5517a9aafa08ea90bd29ad807f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91298ec2643be5517a9aafa08ea90bd29ad807f5", "message": "Fix data provider issue in range formatter test case addition", "committedDate": "2020-11-15T22:35:06Z", "type": "commit"}, {"oid": "e66f9b9c082596accc9c32bd39e97dd00c5fc18b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e66f9b9c082596accc9c32bd39e97dd00c5fc18b", "message": "Merge branch 'master' into range-formatting", "committedDate": "2020-11-15T22:37:02Z", "type": "commit"}, {"oid": "238403a02a6734d2541fb9bdcbe71fc4044c6686", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/238403a02a6734d2541fb9bdcbe71fc4044c6686", "message": "Add support for multiple testing ranges in range formatting test case addition", "committedDate": "2020-11-16T11:17:25Z", "type": "commit"}, {"oid": "dcfa4f04ca028b4fc350f28ec6aec3deeeb310d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dcfa4f04ca028b4fc350f28ec6aec3deeeb310d4", "message": "Merge branch 'master' into range-formatting", "committedDate": "2020-11-17T04:57:31Z", "type": "commit"}, {"oid": "930d3baefaa659ebf840e27275f63d8db413b2e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/930d3baefaa659ebf840e27275f63d8db413b2e1", "message": "Add multiple fixed random ranges support in range formatting", "committedDate": "2020-11-20T09:41:20Z", "type": "commit"}, {"oid": "a7de036d9d594b19849a019844827926f53b2ce5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7de036d9d594b19849a019844827926f53b2ce5", "message": "Add more range test cases", "committedDate": "2020-11-22T09:49:27Z", "type": "commit"}, {"oid": "e77b2fbc488a15b0380440a6e78583c0ae83452e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e77b2fbc488a15b0380440a6e78583c0ae83452e", "message": "Reuse getTestResourceDir() to resolve range test file paths", "committedDate": "2020-11-23T14:25:45Z", "type": "commit"}, {"oid": "62056fcc3f2ed978c0ccc27942f1075173fd9827", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/62056fcc3f2ed978c0ccc27942f1075173fd9827", "message": "Merge remote-tracking branch 'upstream/master' into range-formatting", "committedDate": "2020-11-23T14:59:42Z", "type": "commit"}, {"oid": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61d8bc6af9de70108c5651c6044a3b7da4c1066d", "message": "Fix javadoc checkstyle issue in range formatting test classes", "committedDate": "2020-11-23T15:13:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MDE1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r528850159", "bodyText": "Maybe we can add the test suffix to the class name for better clarity", "author": "nadeeshaan", "createdAt": "2020-11-23T16:49:46Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10\n+ */\n+public abstract class RangeFormatter {", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0OTMxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529149319", "bodyText": "Indentations seems not correct", "author": "SupunS", "createdAt": "2020-11-24T02:23:00Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/misc/RangesTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core.misc;\n+\n+import org.ballerinalang.formatter.core.FormatterException;\n+import org.ballerinalang.formatter.core.RangeFormatter;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test range formatting functionality with manually added fixed ranges.\n+ *\n+ * @since 1.2.10\n+ */\n+public class RangesTest extends RangeFormatter {\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    @Override\n+    public void test(String source, int[][] positions) throws IOException, FormatterException {\n+\n+        super.test(source, positions);\n+    }\n+\n+    /**\n+     * Defines the data provider object for test execution.\n+     *\n+     * @return Data provider for tests\n+     */\n+    @DataProvider(name = \"test-file-provider\")\n+    @Override\n+    public Object[][] dataProvider() {\n+\n+        return new Object[][]{\n+                {\n+                        \"ranges_1.bal\", new int[][] {\n+                            new int[] {5, 30, 9, 34},\n+                            new int[] {12, 31, 16, 29},\n+                            new int[] {16, 20, 22, 38},\n+                            new int[] {24, 10, 31, 36},\n+                            new int[] {31, 53, 31, 88},\n+                            new int[] {37, 26, 37, 33},\n+                        }\n+                },", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE1MTA0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529151049", "bodyText": "IIRC we decided to specify these in a json?", "author": "SupunS", "createdAt": "2020-11-24T02:24:49Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/misc/RangesTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core.misc;\n+\n+import org.ballerinalang.formatter.core.FormatterException;\n+import org.ballerinalang.formatter.core.RangeFormatter;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test range formatting functionality with manually added fixed ranges.\n+ *\n+ * @since 1.2.10\n+ */\n+public class RangesTest extends RangeFormatter {\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    @Override\n+    public void test(String source, int[][] positions) throws IOException, FormatterException {\n+\n+        super.test(source, positions);\n+    }\n+\n+    /**\n+     * Defines the data provider object for test execution.\n+     *\n+     * @return Data provider for tests\n+     */\n+    @DataProvider(name = \"test-file-provider\")\n+    @Override\n+    public Object[][] dataProvider() {\n+\n+        return new Object[][]{\n+                {\n+                        \"ranges_1.bal\", new int[][] {\n+                            new int[] {5, 30, 9, 34},\n+                            new int[] {12, 31, 16, 29},\n+                            new int[] {16, 20, 22, 38},\n+                            new int[] {24, 10, 31, 36},\n+                            new int[] {31, 53, 31, 88},\n+                            new int[] {37, 26, 37, 33},\n+                        }\n+                },\n+                {\n+                        \"ranges_2.bal\", new int[][] {\n+                                new int[] {0, 1, 1, 0},\n+                                new int[] {2, 52, 14, 12},\n+                                new int[] {7, 22, 25, 8},\n+                                new int[] {27, 18, 27, 94},\n+                                new int[] {35, 12, 31, 88},\n+                                new int[] {32, 7, 32, 25},\n+                                new int[] {34, 12, 40, 7},\n+                        }\n+                },\n+                {\n+                        \"ranges_3.bal\", new int[][] {\n+                        new int[] {0, 6, 9, 16},\n+                        new int[] {5, 15, 27, 8},\n+                        new int[] {26, 37, 35, 30},\n+                        new int[] {45, 4, 48, 12},\n+                        new int[] {48, 4, 48, 44},\n+                        }\n+                },\n+                {\n+                        \"ranges_4.bal\", new int[][] {", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE1MTQxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529151416", "bodyText": "extra newline", "author": "SupunS", "createdAt": "2020-11-24T02:25:08Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/misc/RangesTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core.misc;\n+\n+import org.ballerinalang.formatter.core.FormatterException;\n+import org.ballerinalang.formatter.core.RangeFormatter;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test range formatting functionality with manually added fixed ranges.\n+ *\n+ * @since 1.2.10\n+ */\n+public class RangesTest extends RangeFormatter {\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    @Override\n+    public void test(String source, int[][] positions) throws IOException, FormatterException {\n+", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE1MzU2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529153565", "bodyText": "is this a test case or a utility function?", "author": "SupunS", "createdAt": "2020-11-24T02:27:28Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10\n+ */\n+public abstract class RangeFormatter {\n+    private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n+    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n+    private static final String ASSERT_DIR = \"assert\";\n+    private static final String SOURCE_DIR = \"source\";\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    public void test(String source, int[][] positions)\n+            throws IOException, FormatterException {\n+        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n+        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n+\n+        String content = getSourceText(sourceFilePath);\n+        TextDocument textDocument = TextDocuments.from(content);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());\n+        for (int[] position : positions) {\n+            LinePosition startPos = LinePosition.from(position[0], position[1]);\n+            LinePosition endPos = LinePosition.from(position[2], position[3]);\n+            LineRange lineRange = LineRange.from(null, startPos, endPos);\n+            syntaxTree = Formatter.format(syntaxTree, lineRange);\n+        }\n+        Assert.assertEquals(syntaxTree.toSourceCode(), getSourceText(assertFilePath));\n+    }\n+\n+    /**\n+     * Test the formatting functionality for parser test cases.\n+     *\n+     * @param sourcePath Source path of the parser test\n+     */\n+    public void testParserResources(String sourcePath) throws IOException, FormatterException {", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE1NTAwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529155000", "bodyText": "resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR part is common for each file in the provider.\nCan we pre-calculate it?", "author": "SupunS", "createdAt": "2020-11-24T02:28:56Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10\n+ */\n+public abstract class RangeFormatter {\n+    private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n+    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n+    private static final String ASSERT_DIR = \"assert\";\n+    private static final String SOURCE_DIR = \"source\";\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    public void test(String source, int[][] positions)\n+            throws IOException, FormatterException {\n+        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n+        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2Mzc4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529163781", "bodyText": "this method is never used anywhere", "author": "SupunS", "createdAt": "2020-11-24T02:41:53Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10\n+ */\n+public abstract class RangeFormatter {\n+    private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n+    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n+    private static final String ASSERT_DIR = \"assert\";\n+    private static final String SOURCE_DIR = \"source\";\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    public void test(String source, int[][] positions)\n+            throws IOException, FormatterException {\n+        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n+        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n+\n+        String content = getSourceText(sourceFilePath);\n+        TextDocument textDocument = TextDocuments.from(content);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());\n+        for (int[] position : positions) {\n+            LinePosition startPos = LinePosition.from(position[0], position[1]);\n+            LinePosition endPos = LinePosition.from(position[2], position[3]);\n+            LineRange lineRange = LineRange.from(null, startPos, endPos);\n+            syntaxTree = Formatter.format(syntaxTree, lineRange);\n+        }\n+        Assert.assertEquals(syntaxTree.toSourceCode(), getSourceText(assertFilePath));\n+    }\n+\n+    /**\n+     * Test the formatting functionality for parser test cases.\n+     *\n+     * @param sourcePath Source path of the parser test\n+     */\n+    public void testParserResources(String sourcePath) throws IOException, FormatterException {\n+        Path filePath = Paths.get(sourcePath);\n+        String content = getSourceText(filePath);\n+        TextDocument textDocument = TextDocuments.from(content);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument);\n+        if (!syntaxTree.hasDiagnostics()) {\n+            SyntaxTree newSyntaxTree = Formatter.format(syntaxTree);\n+            Assert.assertEquals(newSyntaxTree.toSourceCode(), getSourceText(filePath));\n+        }\n+    }\n+\n+    /**\n+     * Defines the data provider object for test execution.\n+     *\n+     * @return Data provider for tests\n+     */\n+    @DataProvider(name = \"test-file-provider\")\n+    public abstract Object[][] dataProvider();\n+\n+    /**\n+     * List of file names configured to be skipped during the test execution.\n+     *\n+     * @return Skipped test file list\n+     */\n+    public List<String> skipList() {\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Specify the file names to be tested during the test execution.\n+     *\n+     * @return Test scenarios for execution\n+     */\n+    public Object[][] testSubset() {\n+        return new Object[0][];\n+    }\n+\n+    /**\n+     * Returns the directory path inside resources which holds the test files.\n+     *\n+     * @return Directory path of test files\n+     */\n+    public abstract String getTestResourceDir();\n+\n+    protected Object[][] getConfigsList() {\n+        if (this.testSubset().length != 0) {\n+            return this.testSubset();\n+        }\n+        List<String> skippedTests = this.skipList();\n+        try {\n+            return Files.walk(this.resourceDirectory.resolve(this.getTestResourceDir()).resolve(ASSERT_DIR))\n+                    .filter(path -> {\n+                        File file = path.toFile();\n+                        return file.isFile() && file.getName().endsWith(\".bal\")\n+                                && !skippedTests.contains(file.getName());\n+                    })\n+                    .map(path -> new Object[]{path.toFile().getName(), this.getTestResourceDir()})\n+                    .toArray(size -> new Object[size][2]);\n+        } catch (IOException e) {\n+            return new Object[0][];\n+        }\n+    }", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NDE1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529164152", "bodyText": "should we rename this to getFileContent, since it reads both sources and asserts?", "author": "SupunS", "createdAt": "2020-11-24T02:42:59Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10\n+ */\n+public abstract class RangeFormatter {\n+    private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n+    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n+    private static final String ASSERT_DIR = \"assert\";\n+    private static final String SOURCE_DIR = \"source\";\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    public void test(String source, int[][] positions)\n+            throws IOException, FormatterException {\n+        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n+        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n+\n+        String content = getSourceText(sourceFilePath);\n+        TextDocument textDocument = TextDocuments.from(content);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());\n+        for (int[] position : positions) {\n+            LinePosition startPos = LinePosition.from(position[0], position[1]);\n+            LinePosition endPos = LinePosition.from(position[2], position[3]);\n+            LineRange lineRange = LineRange.from(null, startPos, endPos);\n+            syntaxTree = Formatter.format(syntaxTree, lineRange);\n+        }\n+        Assert.assertEquals(syntaxTree.toSourceCode(), getSourceText(assertFilePath));\n+    }\n+\n+    /**\n+     * Test the formatting functionality for parser test cases.\n+     *\n+     * @param sourcePath Source path of the parser test\n+     */\n+    public void testParserResources(String sourcePath) throws IOException, FormatterException {\n+        Path filePath = Paths.get(sourcePath);\n+        String content = getSourceText(filePath);\n+        TextDocument textDocument = TextDocuments.from(content);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument);\n+        if (!syntaxTree.hasDiagnostics()) {\n+            SyntaxTree newSyntaxTree = Formatter.format(syntaxTree);\n+            Assert.assertEquals(newSyntaxTree.toSourceCode(), getSourceText(filePath));\n+        }\n+    }\n+\n+    /**\n+     * Defines the data provider object for test execution.\n+     *\n+     * @return Data provider for tests\n+     */\n+    @DataProvider(name = \"test-file-provider\")\n+    public abstract Object[][] dataProvider();\n+\n+    /**\n+     * List of file names configured to be skipped during the test execution.\n+     *\n+     * @return Skipped test file list\n+     */\n+    public List<String> skipList() {\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Specify the file names to be tested during the test execution.\n+     *\n+     * @return Test scenarios for execution\n+     */\n+    public Object[][] testSubset() {\n+        return new Object[0][];\n+    }\n+\n+    /**\n+     * Returns the directory path inside resources which holds the test files.\n+     *\n+     * @return Directory path of test files\n+     */\n+    public abstract String getTestResourceDir();\n+\n+    protected Object[][] getConfigsList() {\n+        if (this.testSubset().length != 0) {\n+            return this.testSubset();\n+        }\n+        List<String> skippedTests = this.skipList();\n+        try {\n+            return Files.walk(this.resourceDirectory.resolve(this.getTestResourceDir()).resolve(ASSERT_DIR))\n+                    .filter(path -> {\n+                        File file = path.toFile();\n+                        return file.isFile() && file.getName().endsWith(\".bal\")\n+                                && !skippedTests.contains(file.getName());\n+                    })\n+                    .map(path -> new Object[]{path.toFile().getName(), this.getTestResourceDir()})\n+                    .toArray(size -> new Object[size][2]);\n+        } catch (IOException e) {\n+            return new Object[0][];\n+        }\n+    }\n+\n+    private String getSourceText(Path sourceFilePath) throws IOException {", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NDM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529164398", "bodyText": "wrong version", "author": "SupunS", "createdAt": "2020-11-24T02:43:52Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/misc/RangesTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core.misc;\n+\n+import org.ballerinalang.formatter.core.FormatterException;\n+import org.ballerinalang.formatter.core.RangeFormatter;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test range formatting functionality with manually added fixed ranges.\n+ *\n+ * @since 1.2.10", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NDQ2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529164460", "bodyText": "wrong version", "author": "SupunS", "createdAt": "2020-11-24T02:44:07Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NDY0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529164647", "bodyText": "buildDirectory is never used", "author": "SupunS", "createdAt": "2020-11-24T02:44:39Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10\n+ */\n+public abstract class RangeFormatter {\n+    private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n+    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NTMxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529165316", "bodyText": "this will make the tests to get skipped silently, if someone introduces changes to the file.\nShall we remove this check?", "author": "SupunS", "createdAt": "2020-11-24T02:46:31Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10\n+ */\n+public abstract class RangeFormatter {\n+    private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n+    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n+    private static final String ASSERT_DIR = \"assert\";\n+    private static final String SOURCE_DIR = \"source\";\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    public void test(String source, int[][] positions)\n+            throws IOException, FormatterException {\n+        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n+        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n+\n+        String content = getSourceText(sourceFilePath);\n+        TextDocument textDocument = TextDocuments.from(content);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());\n+        for (int[] position : positions) {\n+            LinePosition startPos = LinePosition.from(position[0], position[1]);\n+            LinePosition endPos = LinePosition.from(position[2], position[3]);\n+            LineRange lineRange = LineRange.from(null, startPos, endPos);\n+            syntaxTree = Formatter.format(syntaxTree, lineRange);\n+        }\n+        Assert.assertEquals(syntaxTree.toSourceCode(), getSourceText(assertFilePath));\n+    }\n+\n+    /**\n+     * Test the formatting functionality for parser test cases.\n+     *\n+     * @param sourcePath Source path of the parser test\n+     */\n+    public void testParserResources(String sourcePath) throws IOException, FormatterException {\n+        Path filePath = Paths.get(sourcePath);\n+        String content = getSourceText(filePath);\n+        TextDocument textDocument = TextDocuments.from(content);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument);\n+        if (!syntaxTree.hasDiagnostics()) {", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NjEzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26764#discussion_r529166134", "bodyText": "why are we passing null here?", "author": "SupunS", "createdAt": "2020-11-24T02:49:21Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/RangeFormatter.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.formatter.core;\n+\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.text.LinePosition;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The abstract class that is extended by all range formatting test classes.\n+ *\n+ * @since 1.2.10\n+ */\n+public abstract class RangeFormatter {\n+    private final Path resourceDirectory = Paths.get(\"src\").resolve(\"test\").resolve(\"resources\").toAbsolutePath();\n+    private Path buildDirectory = Paths.get(\"build\").toAbsolutePath().normalize();\n+    private static final String ASSERT_DIR = \"assert\";\n+    private static final String SOURCE_DIR = \"source\";\n+\n+    @Test(dataProvider = \"test-file-provider\")\n+    public void test(String source, int[][] positions)\n+            throws IOException, FormatterException {\n+        Path assertFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), ASSERT_DIR, source);\n+        Path sourceFilePath = Paths.get(resourceDirectory.toString(), this.getTestResourceDir(), SOURCE_DIR, source);\n+\n+        String content = getSourceText(sourceFilePath);\n+        TextDocument textDocument = TextDocuments.from(content);\n+        SyntaxTree syntaxTree = SyntaxTree.from(textDocument, sourceFilePath.toString());\n+        for (int[] position : positions) {\n+            LinePosition startPos = LinePosition.from(position[0], position[1]);\n+            LinePosition endPos = LinePosition.from(position[2], position[3]);\n+            LineRange lineRange = LineRange.from(null, startPos, endPos);", "originalCommit": "61d8bc6af9de70108c5651c6044a3b7da4c1066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}