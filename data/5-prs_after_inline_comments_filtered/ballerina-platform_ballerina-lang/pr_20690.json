{"pr_number": 20690, "pr_title": "Add observability (metrics and tracing) to RabbitMQ connector", "pr_createdAt": "2020-01-21T12:24:35Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690", "timeline": [{"oid": "50f84460247cc52e567151b8399e9f20bba2209b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50f84460247cc52e567151b8399e9f20bba2209b", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-21T12:27:00Z", "type": "forcePushed"}, {"oid": "eb10e57bed619180f2186f2236ea8617e7a9fc26", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb10e57bed619180f2186f2236ea8617e7a9fc26", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-21T12:28:44Z", "type": "forcePushed"}, {"oid": "c034cb2926de4d221744bfc63ecaa56ec56571ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c034cb2926de4d221744bfc63ecaa56ec56571ba", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-22T11:16:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyMTI2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r370521269", "bodyText": "Can make these two methods more simpler. It does the same thing and runtime.invokeMethodAsync() is called 4 times inside these two methods :) I think we can make it one. Except for the countdownLatch and the RabbitMQResourceCallback, everything else goes into the Object.. args parameter of the invokeMethodAsync() method. This should give you a start to refactoring.", "author": "aashikam", "createdAt": "2020-01-24T08:40:29Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/MessageDispatcher.java", "diffHunk": "@@ -221,17 +232,69 @@ private void handleError(byte[] message, long deliveryTag, AMQP.BasicProperties\n         ObjectValue messageObjectValue = getMessageObjectValue(message, deliveryTag, properties);\n         CountDownLatch countDownLatch = new CountDownLatch(1);\n         try {\n-            runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_ERROR,\n-                    new RabbitMQResourceCallback(countDownLatch), messageObjectValue, true, error, true);\n+            executeOnErrorResource(countDownLatch, messageObjectValue, error, properties);\n             countDownLatch.await();\n         } catch (InterruptedException e) {\n             Thread.currentThread().interrupt();\n+            RabbitMQMetricsUtil.reportError(channel, RabbitMQObservabilityConstants.ERROR_TYPE_CONSUME);\n             throw new RabbitMQConnectorException(RabbitMQConstants.THREAD_INTERRUPTED);\n         } catch (AlreadyClosedException | BallerinaConnectorException exception) {\n+            RabbitMQMetricsUtil.reportError(channel, RabbitMQObservabilityConstants.ERROR_TYPE_CONSUME);\n             throw new RabbitMQConnectorException(\"Error occurred in RabbitMQ service. \");\n         }\n     }\n \n+    private void executeResource(CountDownLatch countDownLatch, byte[] message, long deliveryTag,\n+                                 AMQP.BasicProperties properties) {\n+        if (ObserveUtils.isTracingEnabled()) {\n+            Map<String, Object> observerProperties = getNewObserverContextInProperties();\n+            runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_MESSAGE,\n+                                      new RabbitMQResourceCallback(countDownLatch, channel, queueName, message.length),\n+                                      observerProperties, getMessageObjectValue(message, deliveryTag, properties),\n+                                      true);\n+            return;\n+        }\n+        runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_MESSAGE,\n+                                  new RabbitMQResourceCallback(countDownLatch, channel, queueName, message.length),\n+                                  getMessageObjectValue(message, deliveryTag, properties), true);\n+    }\n+\n+    private void executeResource(CountDownLatch countDownLatch, byte[] message, ObjectValue messageObjectValue,\n+                                 Object forContent) {\n+        if (ObserveUtils.isTracingEnabled()) {\n+            Map<String, Object> observerProperties = getNewObserverContextInProperties();\n+            runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_MESSAGE,\n+                                      new RabbitMQResourceCallback(countDownLatch, channel, queueName, message.length),\n+                                      observerProperties, messageObjectValue, true, forContent, true);\n+            return;", "originalCommit": "c034cb2926de4d221744bfc63ecaa56ec56571ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c610cf93d1d51520a58df27eb16344a0293a1d9c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c610cf93d1d51520a58df27eb16344a0293a1d9c", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-27T06:38:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NjM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371076399", "bodyText": "I believe you meant to say channel_close here :)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String ERROR_TYPE_CHANNEL_CLOSE = \"create_channel\";\n          \n          \n            \n                public static final String ERROR_TYPE_CHANNEL_CLOSE = \"channel_close\";", "author": "chamil321", "createdAt": "2020-01-27T06:23:53Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/observability/RabbitMQObservabilityConstants.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.rabbitmq.observability;\n+\n+/**\n+ * Constants for RabbitMQ Observability.\n+ *\n+ * @since 1.2.0\n+ */\n+public class RabbitMQObservabilityConstants {\n+\n+    static final String CONNECTOR_NAME = \"rabbitmq\";\n+\n+    static final String[] METRIC_CONNECTIONS = {\"connections\", \"Number of currently active connections\"};\n+    static final String[] METRIC_CHANNELS = {\"channels\", \"Number of currently active channels\"};\n+    static final String[] METRIC_QUEUES = {\"queues\", \"Number of currently active queues\"};\n+    static final String[] METRIC_EXCHANGES = {\"exchanges\", \"Number of currently active exchanges\"};\n+    static final String[] METRIC_CONSUMERS = {\"consumers\", \"Number of currently active consumers\"};\n+    static final String[] METRIC_PUBLISHED = {\"published\", \"Number of messages published\"};\n+    static final String[] METRIC_PUBLISHED_SIZE = {\"published_size\", \"Total size in bytes of messages published\"};\n+    static final String[] METRIC_ERRORS = {\"errors\", \"Number of errors\"};\n+    static final String[] METRIC_SUBSCRIPTION = {\"subscriptions\", \"Number of subscriptions\"};\n+    static final String[] METRIC_CONSUMED = {\"consumed\", \"Number of messages consumed\"};\n+    static final String[] METRIC_CONSUMED_SIZE = {\"consumed_size\", \"Total size in bytes of messages consumed\"};\n+    static final String[] METRIC_ACK = {\"acknowledgements\", \"Total number of acknowledgements received\"};\n+\n+    static final String TAG_URL = \"url\";\n+    static final String TAG_ERROR_TYPE = \"error_type\";\n+    public static final String TAG_QUEUE = \"queue\";\n+    static final String TAG_CHANNEL = \"channel\";\n+    static final String TAG_EXCHANGE = \"exchange\";\n+    static final String TAG_ROUTING_KEY = \"routing_key\";\n+    static final String TAG_ACK_TYPE = \"ack_type\";\n+    static final String TAG_CONSUME_TYPE = \"consume_type\";\n+\n+    public static final String ERROR_TYPE_CONNECTION = \"connection\";\n+    public static final String ERROR_TYPE_CONNECTION_CLOSE = \"connection_close\";\n+    public static final String ERROR_TYPE_CONNECTION_ABORT = \"connection_abort\";\n+    public static final String ERROR_TYPE_PUBLISH = \"publish\";\n+    public static final String ERROR_TYPE_CONSUME = \"consume\";\n+    public static final String ERROR_TYPE_CHANNEL_CREATE = \"channel_create\";\n+    public static final String ERROR_TYPE_CHANNEL_CLOSE = \"create_channel\";", "originalCommit": "c034cb2926de4d221744bfc63ecaa56ec56571ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3NzA1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371077055", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The error resource call back implementation for RabbitMQ async consumer.\n          \n          \n            \n             * The error resource callback implementation for RabbitMQ async consumer.", "author": "chamil321", "createdAt": "2020-01-27T06:26:17Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/RabbitMQErrorResourceCallback.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.rabbitmq;\n+\n+import org.ballerinalang.jvm.services.ErrorHandlerUtils;\n+import org.ballerinalang.jvm.values.ErrorValue;\n+import org.ballerinalang.jvm.values.connector.CallableUnitCallback;\n+import org.ballerinalang.messaging.rabbitmq.observability.RabbitMQMetricsUtil;\n+import org.ballerinalang.messaging.rabbitmq.observability.RabbitMQObservabilityConstants;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * The error resource call back implementation for RabbitMQ async consumer.", "originalCommit": "c034cb2926de4d221744bfc63ecaa56ec56571ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3OTExMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371079112", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  new RabbitMQErrorResourceCallback(countDownLatch), observerProperties,\n          \n          \n            \n                                                  new RabbitMQErrorResourceCallback(countDownLatch), getNewObserverContextInProperties(),\n          \n      \n    \n    \n  \n\nAs the variable has no any other usages.", "author": "chamil321", "createdAt": "2020-01-27T06:30:46Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/MessageDispatcher.java", "diffHunk": "@@ -221,17 +232,69 @@ private void handleError(byte[] message, long deliveryTag, AMQP.BasicProperties\n         ObjectValue messageObjectValue = getMessageObjectValue(message, deliveryTag, properties);\n         CountDownLatch countDownLatch = new CountDownLatch(1);\n         try {\n-            runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_ERROR,\n-                    new RabbitMQResourceCallback(countDownLatch), messageObjectValue, true, error, true);\n+            executeOnErrorResource(countDownLatch, messageObjectValue, error, properties);\n             countDownLatch.await();\n         } catch (InterruptedException e) {\n             Thread.currentThread().interrupt();\n+            RabbitMQMetricsUtil.reportError(channel, RabbitMQObservabilityConstants.ERROR_TYPE_CONSUME);\n             throw new RabbitMQConnectorException(RabbitMQConstants.THREAD_INTERRUPTED);\n         } catch (AlreadyClosedException | BallerinaConnectorException exception) {\n+            RabbitMQMetricsUtil.reportError(channel, RabbitMQObservabilityConstants.ERROR_TYPE_CONSUME);\n             throw new RabbitMQConnectorException(\"Error occurred in RabbitMQ service. \");\n         }\n     }\n \n+    private void executeResource(CountDownLatch countDownLatch, byte[] message, long deliveryTag,\n+                                 AMQP.BasicProperties properties) {\n+        if (ObserveUtils.isTracingEnabled()) {\n+            Map<String, Object> observerProperties = getNewObserverContextInProperties();\n+            runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_MESSAGE,\n+                                      new RabbitMQResourceCallback(countDownLatch, channel, queueName, message.length),\n+                                      observerProperties, getMessageObjectValue(message, deliveryTag, properties),\n+                                      true);\n+            return;\n+        }\n+        runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_MESSAGE,\n+                                  new RabbitMQResourceCallback(countDownLatch, channel, queueName, message.length),\n+                                  getMessageObjectValue(message, deliveryTag, properties), true);\n+    }\n+\n+    private void executeResource(CountDownLatch countDownLatch, byte[] message, ObjectValue messageObjectValue,\n+                                 Object forContent) {\n+        if (ObserveUtils.isTracingEnabled()) {\n+            Map<String, Object> observerProperties = getNewObserverContextInProperties();\n+            runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_MESSAGE,\n+                                      new RabbitMQResourceCallback(countDownLatch, channel, queueName, message.length),\n+                                      observerProperties, messageObjectValue, true, forContent, true);\n+            return;\n+        }\n+        runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_MESSAGE,\n+                                  new RabbitMQResourceCallback(countDownLatch, channel, queueName, message.length),\n+                                  messageObjectValue, true, forContent, true);\n+    }\n+\n+    private void executeOnErrorResource(CountDownLatch countDownLatch, ObjectValue messageObjectValue, ErrorValue error,\n+                                        AMQP.BasicProperties properties) {\n+        if (ObserveUtils.isTracingEnabled()) {\n+            Map<String, Object> observerProperties = getNewObserverContextInProperties();\n+            runtime.invokeMethodAsync(service, RabbitMQConstants.FUNC_ON_ERROR,\n+                                      new RabbitMQErrorResourceCallback(countDownLatch), observerProperties,", "originalCommit": "c034cb2926de4d221744bfc63ecaa56ec56571ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MDMzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371080333", "bodyText": "Do we have any usage of this method? If not, let's remove it", "author": "chamil321", "createdAt": "2020-01-27T06:37:37Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/observability/RabbitMQObservabilityUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.rabbitmq.observability;\n+\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.messaging.rabbitmq.RabbitMQConstants;\n+\n+/**\n+ * Util class for Observability-related tasks for RabbitMQ.\n+ *\n+ * @since 1.2.0\n+ */\n+public class RabbitMQObservabilityUtil {\n+\n+    public static String getServerUrl(Connection connection) {\n+        return connection.toString();\n+    }\n+\n+    public static String getChannel(Channel channel) {", "originalCommit": "c034cb2926de4d221744bfc63ecaa56ec56571ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MTM1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371081359", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    setTags(observerContext, connection);\n          \n          \n            \n                    setTags(getObserverContext(), connection);\n          \n      \n    \n    \n  \n\nAs the variable has no any other usages", "author": "chamil321", "createdAt": "2020-01-27T06:43:03Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/observability/RabbitMQTracingUtil.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.rabbitmq.observability;\n+\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import org.ballerinalang.jvm.observability.ObserveUtils;\n+import org.ballerinalang.jvm.observability.ObserverContext;\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Providing tracing functionality to RabbitMQ.\n+ *\n+ * @since 1.2.0\n+ */\n+public class RabbitMQTracingUtil {\n+\n+    public static void traceResourceInvocation(Connection connection) {\n+        if (!ObserveUtils.isTracingEnabled()) {\n+            return;\n+        }\n+        ObserverContext observerContext = getObserverContext();\n+        setTags(observerContext, connection);", "originalCommit": "c610cf93d1d51520a58df27eb16344a0293a1d9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MTUwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371081507", "bodyText": "Fix similar occurrences", "author": "chamil321", "createdAt": "2020-01-27T06:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA4MTM1OQ=="}], "type": "inlineReview"}, {"oid": "554d512c69abfcedad5dc144cd58f556f8f2b210", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/554d512c69abfcedad5dc144cd58f556f8f2b210", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-27T07:43:59Z", "type": "forcePushed"}, {"oid": "ff224b2727c5ee299b8f927e2ae75633ba396961", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff224b2727c5ee299b8f927e2ae75633ba396961", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-27T07:55:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzcyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371607722", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "aashikam", "createdAt": "2020-01-28T04:40:43Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/RabbitMQErrorResourceCallback.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "ff224b2727c5ee299b8f927e2ae75633ba396961", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDEwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371610103", "bodyText": "Do we need this variable assignment? I think we can directly pass  new RabbitMQObserverContext(connection) into incrementGauge", "author": "aashikam", "createdAt": "2020-01-28T04:56:16Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/observability/RabbitMQMetricsUtil.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.rabbitmq.observability;\n+\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import org.ballerinalang.jvm.observability.ObserveUtils;\n+import org.ballerinalang.jvm.observability.metrics.DefaultMetricRegistry;\n+import org.ballerinalang.jvm.observability.metrics.MetricId;\n+import org.ballerinalang.jvm.observability.metrics.MetricRegistry;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.messaging.rabbitmq.RabbitMQConstants;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Providing metrics functionality to the RabbitMQ connector.\n+ *\n+ * @since 1.2.0\n+ */\n+public class RabbitMQMetricsUtil {\n+\n+    private static final MetricRegistry metricRegistry = DefaultMetricRegistry.getInstance();\n+\n+    /**\n+     * Reports a new connection.\n+     *\n+     * @param connection RabbitMQ connection.\n+     */\n+    public static void reportNewConnection(Connection connection) {\n+        if (!ObserveUtils.isMetricsEnabled()) {\n+            return;\n+        }\n+        RabbitMQObserverContext observerContext = new RabbitMQObserverContext(connection);", "originalCommit": "ff224b2727c5ee299b8f927e2ae75633ba396961", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDE4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371610183", "bodyText": "Can fix all the places with this.", "author": "aashikam", "createdAt": "2020-01-28T04:56:40Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/observability/RabbitMQMetricsUtil.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.rabbitmq.observability;\n+\n+import com.rabbitmq.client.Channel;\n+import com.rabbitmq.client.Connection;\n+import org.ballerinalang.jvm.observability.ObserveUtils;\n+import org.ballerinalang.jvm.observability.metrics.DefaultMetricRegistry;\n+import org.ballerinalang.jvm.observability.metrics.MetricId;\n+import org.ballerinalang.jvm.observability.metrics.MetricRegistry;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.messaging.rabbitmq.RabbitMQConstants;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Providing metrics functionality to the RabbitMQ connector.\n+ *\n+ * @since 1.2.0\n+ */\n+public class RabbitMQMetricsUtil {\n+\n+    private static final MetricRegistry metricRegistry = DefaultMetricRegistry.getInstance();\n+\n+    /**\n+     * Reports a new connection.\n+     *\n+     * @param connection RabbitMQ connection.\n+     */\n+    public static void reportNewConnection(Connection connection) {\n+        if (!ObserveUtils.isMetricsEnabled()) {\n+            return;\n+        }\n+        RabbitMQObserverContext observerContext = new RabbitMQObserverContext(connection);\n+        incrementGauge(observerContext, RabbitMQObservabilityConstants.METRIC_CONNECTIONS[0],\n+                       RabbitMQObservabilityConstants.METRIC_CONNECTIONS[1]);\n+    }\n+\n+    /**\n+     * Reports a connection closure.\n+     *\n+     * @param connection RabbitMQ connection.\n+     */\n+    public static void reportConnectionClose(Connection connection) {\n+        if (!ObserveUtils.isMetricsEnabled()) {\n+            return;\n+        }\n+        RabbitMQObserverContext observerContext = new RabbitMQObserverContext(connection);", "originalCommit": "ff224b2727c5ee299b8f927e2ae75633ba396961", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e5dc364fba2c2becd0e3e562969a90516c9fc895", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5dc364fba2c2becd0e3e562969a90516c9fc895", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-28T05:51:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMDAyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20690#discussion_r371700026", "bodyText": "Remove this line", "author": "kalaiyarasiganeshalingam", "createdAt": "2020-01-28T09:50:11Z", "path": "stdlib/messaging/rabbitmq/src/main/java/org/ballerinalang/messaging/rabbitmq/observability/RabbitMQObservabilityUtil.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.rabbitmq.observability;\n+\n+import com.rabbitmq.client.Connection;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.messaging.rabbitmq.RabbitMQConstants;\n+\n+/**\n+ * Util class for Observability-related tasks for RabbitMQ.\n+ *\n+ * @since 1.2.0\n+ */\n+public class RabbitMQObservabilityUtil {\n+\n+    public static String getServerUrl(Connection connection) {\n+        return connection.toString();\n+    }\n+\n+    public static String getQueueName(ObjectValue service) {\n+        return (String) service.getNativeData(RabbitMQConstants.QUEUE_NAME);\n+    }\n+}\n+", "originalCommit": "e5dc364fba2c2becd0e3e562969a90516c9fc895", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "77790aa5926161162c73073eb06a558efd07dde4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77790aa5926161162c73073eb06a558efd07dde4", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-29T04:33:56Z", "type": "commit"}, {"oid": "77790aa5926161162c73073eb06a558efd07dde4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77790aa5926161162c73073eb06a558efd07dde4", "message": "Add observability (metrics and tracing) to RabbitMQ connector", "committedDate": "2020-01-29T04:33:56Z", "type": "forcePushed"}]}