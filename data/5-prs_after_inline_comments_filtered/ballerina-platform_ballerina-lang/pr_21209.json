{"pr_number": 21209, "pr_title": "Add support for let expression", "pr_createdAt": "2020-02-24T06:19:19Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNTkzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r383715939", "bodyText": "The grammar seems to allow annotations, but are we handling them?\nhttps://github.com/ballerina-platform/ballerina-lang/pull/21209/files#diff-0e72b59e6b830c29e9c6161f3bb4177aR844\nThe following should fail since an annotation allowed only on const is being used with a let var, but doesn't.\nint globalVar = 5;\n\nconst annotation v1 on source const;\n\npublic function main() {\n    int b = let @v1 int x = 4 in 2 * x * globalVar;\n}", "author": "MaryamZi", "createdAt": "2020-02-25T08:14:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -1436,6 +1436,51 @@ public void exitListConstructorExpr(BallerinaParser.ListConstructorExprContext c\n         this.pkgBuilder.addListConstructorExpression(getCurrentPos(ctx), getWS(ctx), argsAvailable);\n     }\n \n+    @Override\n+    public void enterLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override\n+    public void enterLetExpr(BallerinaParser.LetExprContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override\n+    public void exitLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.addLetExpression(getCurrentPos(ctx));\n+    }\n+\n+    @Override\n+    public void exitLetVarDecl(BallerinaParser.LetVarDeclContext ctx) {", "originalCommit": "e926288f72286bbaf6a4b1a62a061d3d73e25dac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzUyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386107522", "bodyText": "This is fixed:\nThe above code should print the following error:\nannotation 'v1' is not allowed on var\nAlso added test cases to cover this. Please refer tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationAttachmentPointTest.java on this PR", "author": "irshadnilam", "createdAt": "2020-03-01T13:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNTkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNjc1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r383716752", "bodyText": "Shall we create an issue for these if we haven't already?", "author": "MaryamZi", "createdAt": "2020-02-25T08:16:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1343,6 +1344,20 @@ private void checkForExportableType(BTypeSymbol symbol, DiagnosticPos pos) {\n         }\n     }\n \n+    public void visit(BLangLetExpression letExpression) {\n+        int ownerSymTag = this.env.scope.owner.tag;\n+        if ((ownerSymTag & SymTag.RECORD) == SymTag.RECORD) {\n+            dlog.error(letExpression.pos, DiagnosticCode.LET_EXPRESSION_NOT_YET_SUPPORTED_RECORD_FIELD);", "originalCommit": "e926288f72286bbaf6a4b1a62a061d3d73e25dac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwODEzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386108135", "bodyText": "Please refer to the issue.\n#21382", "author": "irshadnilam", "createdAt": "2020-03-01T13:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxNjc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2ODczNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r383768734", "bodyText": "Shall we rename the temp variable from \"$temp_var_0$\" to \"$temp_var$\"(something like this)?", "author": "KavinduZoysa", "createdAt": "2020-02-25T09:50:33Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -987,6 +988,26 @@ public void visit(BLangSimpleVariable varNode) {\n         result = varNode;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {\n+        SymbolEnv prevEnv = this.env;\n+        this.env = letExpression.env;\n+        BLangExpression expr = letExpression.expr;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(letExpression.pos);\n+        for (BLangVariable var : letExpression.letVarDeclarations) {\n+            BLangSimpleVariableDef varDef = createVarDef(((BLangSimpleVariable) var).name.getValue(), var.type,\n+                    var.expr, var.pos);\n+            blockStmt.addStatement(varDef);\n+        }\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$temp_var_0$\", expr.type, expr, expr.pos);", "originalCommit": "e926288f72286bbaf6a4b1a62a061d3d73e25dac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386107660", "bodyText": "Renamed to \"$let_var_%d_$\" where d is let expression count.", "author": "irshadnilam", "createdAt": "2020-03-01T13:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2ODczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3ODE5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r384378190", "bodyText": "Shall we override the toString() method as well?", "author": "mohanvive", "createdAt": "2020-02-26T09:44:40Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangLetExpression.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.LetExpressionNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.SymbolEnv;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangLetVariable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This represents a let expression in ballerina.\n+ *\n+ * @since 1.2.0\n+ */\n+public class BLangLetExpression extends BLangExpression implements LetExpressionNode {\n+\n+    public List<BLangLetVariable> letVarDeclarations = new ArrayList<>();\n+    public BLangExpression expr;\n+    public SymbolEnv env;\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.LET_EXPR;\n+    }", "originalCommit": "e926288f72286bbaf6a4b1a62a061d3d73e25dac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNzcwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386107707", "bodyText": "Fixed.", "author": "irshadnilam", "createdAt": "2020-03-01T13:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3ODE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjQ5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386262496", "bodyText": "Do we need this method, I think enterLetExpression cover this parser event", "author": "rdhananjaya", "createdAt": "2020-03-02T08:55:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -1444,6 +1444,60 @@ public void exitListConstructorExpr(BallerinaParser.ListConstructorExprContext c\n         this.pkgBuilder.addListConstructorExpression(getCurrentPos(ctx), getWS(ctx), argsAvailable);\n     }\n \n+    @Override\n+    public void enterLetExpression(BallerinaParser.LetExpressionContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startLetVarList();\n+    }\n+\n+    @Override", "originalCommit": "132c1aeee6ac007614857dd55d3d25d0ad8e3af3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NTIzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386275234", "bodyText": "Fixed", "author": "irshadnilam", "createdAt": "2020-03-02T09:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MjQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzI5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386263291", "bodyText": "Please see cloneList method", "author": "rdhananjaya", "createdAt": "2020-03-02T08:57:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "diffHunk": "@@ -969,6 +970,14 @@ public void visit(BLangGroupExpr source) {\n         clone.typedescType = source.typedescType;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression source) {\n+        BLangLetExpression clone = new BLangLetExpression();\n+        source.cloneRef = clone;\n+        clone.letVarDeclarations = source.letVarDeclarations;", "originalCommit": "132c1aeee6ac007614857dd55d3d25d0ad8e3af3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NTE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386275180", "bodyText": "Seems like cloning letvarDeclarations is missed.\nCannot use cloneList since BLangLetVariable is not a Node,\nFixed with 98c1e00", "author": "irshadnilam", "createdAt": "2020-03-02T09:22:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MzI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg4NzQ5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386887496", "bodyText": "27?", "author": "rdhananjaya", "createdAt": "2020-03-03T09:18:53Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/SymTag.java", "diffHunk": "@@ -49,4 +49,5 @@\n     public static final int CONSTANT = 1 << 24 | VARIABLE_NAME | TYPE;\n     public static final int FUNCTION_TYPE = 1 << 25 | TYPE | VARIABLE_NAME;\n     public static final int CONSTRUCTOR = 1 << 26 | INVOKABLE;\n+    public static final int LET = 1 << 26 | CONSTRUCTOR;", "originalCommit": "518725bba2ce0b72f5bd33a3403eb479c5f12612", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxMjMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r386912300", "bodyText": "Shall we add a simple example?", "author": "MaryamZi", "createdAt": "2020-03-03T10:01:54Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/LetExpressionNode.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**", "originalCommit": "f292a1c5858e660df2659ee01eead2015d58f4c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODUzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387438539", "bodyText": "Added.", "author": "irshadnilam", "createdAt": "2020-03-04T04:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxMjMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNjQ3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387116474", "bodyText": "Not aligned?", "author": "MaryamZi", "createdAt": "2020-03-03T15:55:49Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1129,10 +1137,28 @@ void addSimpleVariableDefStatement(DiagnosticPos pos, Set<Whitespace> ws, String\n         addStmtToCurrentBlock(varDefNode);\n     }\n \n+    void addSimpleLetVariableDefStatement(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n+                                       DiagnosticPos identifierPos, boolean isExpressionAvailable,", "originalCommit": "49c6433b9df3860b6869de71044345b728ef5802", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODU2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387438560", "bodyText": "Aligned.", "author": "irshadnilam", "createdAt": "2020-03-04T04:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNjQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExOTI0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387119243", "bodyText": "Can't we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            BLangBlockStmt defBlock = (BLangBlockStmt) node;\n          \n          \n            \n                            for (BLangStatement stmt : defBlock.stmts) {\n          \n          \n            \n                                blockStmt.addStatement(stmt);\n          \n          \n            \n                            }\n          \n          \n            \n                            blockStmt.stmts.addAll(((BLangBlockStmt) node).stmts);\n          \n      \n    \n    \n  \n\ninstead?", "author": "MaryamZi", "createdAt": "2020-03-03T15:59:31Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1100,6 +1103,33 @@ public void visit(BLangSimpleVariable varNode) {\n         result = varNode;\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {\n+        SymbolEnv prevEnv = this.env;\n+        this.env = letExpression.env;\n+        BLangExpression expr = letExpression.expr;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(letExpression.pos);\n+        for (BLangLetVariable letVariable : letExpression.letVarDeclarations) {\n+            BLangNode node  = rewrite((BLangNode) letVariable.definitionNode, env);\n+            if (node.getKind() == NodeKind.BLOCK) {\n+                BLangBlockStmt defBlock = (BLangBlockStmt) node;\n+                for (BLangStatement stmt : defBlock.stmts) {\n+                    blockStmt.addStatement(stmt);\n+                }", "originalCommit": "49c6433b9df3860b6869de71044345b728ef5802", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODYwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387438601", "bodyText": "+1. fixed.", "author": "irshadnilam", "createdAt": "2020-03-04T04:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExOTI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNTg3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387425879", "bodyText": "Shouldn't this be implemented?\nDoes dataflow analysis happen, to identify i here is un-initialized?\npublic function main() {\n    int i;\n    int b = let int x = 4 + i in 2 * x * i;\n}", "author": "MaryamZi", "createdAt": "2020-03-04T03:04:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -302,6 +303,10 @@ public void visit(BLangBlockStmt blockNode) {\n         blockNode.stmts.forEach(statement -> analyzeNode(statement, blockEnv));\n     }\n \n+    @Override\n+    public void visit(BLangLetExpression letExpression) {", "originalCommit": "49c6433b9df3860b6869de71044345b728ef5802", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODczNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387438734", "bodyText": "+1. Fixed in ef33eef", "author": "irshadnilam", "createdAt": "2020-03-04T04:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNTg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NDY2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387444664", "bodyText": "Shall we add tests too?", "author": "MaryamZi", "createdAt": "2020-03-04T04:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNTg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MDk2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21209#discussion_r387460965", "bodyText": "Added.", "author": "irshadnilam", "createdAt": "2020-03-04T05:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNTg3OQ=="}], "type": "inlineReview"}, {"oid": "983a9c67dc5d255d46f344ad3892a7cbd14b72b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/983a9c67dc5d255d46f344ad3892a7cbd14b72b0", "message": "Change the parser to support let expression", "committedDate": "2020-03-04T04:14:34Z", "type": "commit"}, {"oid": "ed84007f958df8c9dd50899af5bd941a5a776aa9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed84007f958df8c9dd50899af5bd941a5a776aa9", "message": "Create relevant nodes for let expression", "committedDate": "2020-03-04T04:14:34Z", "type": "commit"}, {"oid": "f88119c35dac084710dbb8405d0b4c95c4600660", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f88119c35dac084710dbb8405d0b4c95c4600660", "message": "Implement the visit method in desugar", "committedDate": "2020-03-04T04:14:34Z", "type": "commit"}, {"oid": "dfc318eefdca68d6128b4027a62a60405938cb7e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfc318eefdca68d6128b4027a62a60405938cb7e", "message": "Add let expression tests", "committedDate": "2020-03-04T04:14:34Z", "type": "commit"}, {"oid": "f5be6fea201d3366a3553d781bda1d96521dfd09", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5be6fea201d3366a3553d781bda1d96521dfd09", "message": "Add a class to represent let variable declaration", "committedDate": "2020-03-04T04:14:34Z", "type": "commit"}, {"oid": "01d956121b3bce9b0f3e93244c1f26cbff95b414", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01d956121b3bce9b0f3e93244c1f26cbff95b414", "message": "Add an environment to let expression", "committedDate": "2020-03-04T04:14:35Z", "type": "commit"}, {"oid": "a3ad0942dd60b97ab8ccc21850b8bb24a7323b7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3ad0942dd60b97ab8ccc21850b8bb24a7323b7d", "message": "Resolve grammar file conflicts", "committedDate": "2020-03-04T04:14:35Z", "type": "commit"}, {"oid": "d7331703bc54792971ffd0f018d9721af824ebcb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7331703bc54792971ffd0f018d9721af824ebcb", "message": "Print error on unsupported let expression usages", "committedDate": "2020-03-04T04:14:35Z", "type": "commit"}, {"oid": "4c9c6c506951050a516d0ca50715bd7fbbb01604", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c9c6c506951050a516d0ca50715bd7fbbb01604", "message": "Add taint analysis checks for let expression", "committedDate": "2020-03-04T04:14:35Z", "type": "commit"}, {"oid": "87e91999a749b525156940609729e57575c3bd90", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87e91999a749b525156940609729e57575c3bd90", "message": "Add support for global let expressions", "committedDate": "2020-03-04T05:11:43Z", "type": "commit"}, {"oid": "af95974a405ed59b1907db4641914c85fa549381", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af95974a405ed59b1907db4641914c85fa549381", "message": "Add support for binding patterns in let expression", "committedDate": "2020-03-04T05:11:49Z", "type": "commit"}, {"oid": "2242b0de37de34e225b5249916fe85bc634f864d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2242b0de37de34e225b5249916fe85bc634f864d", "message": "Add annotation support for let declarations", "committedDate": "2020-03-04T05:11:49Z", "type": "commit"}, {"oid": "6913f388f0140d07d2477ea9809615b22ffbf6c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6913f388f0140d07d2477ea9809615b22ffbf6c5", "message": "Fix conflicts and reformat", "committedDate": "2020-03-04T05:37:54Z", "type": "commit"}, {"oid": "8f2a8c78a08c424a4fb0515fc590a282896bc7da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f2a8c78a08c424a4fb0515fc590a282896bc7da", "message": "Add taint propagation test for let expression", "committedDate": "2020-03-04T05:37:59Z", "type": "commit"}, {"oid": "0cce8e3eae6f1c38e2e238c14b84f3e806b9834e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cce8e3eae6f1c38e2e238c14b84f3e806b9834e", "message": "Add clone method for let expression", "committedDate": "2020-03-04T05:37:59Z", "type": "commit"}, {"oid": "230463ff61832ac63fbc5e99cfa52d8065b562cd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/230463ff61832ac63fbc5e99cfa52d8065b562cd", "message": "Fix grammar conflicts", "committedDate": "2020-03-04T05:37:59Z", "type": "commit"}, {"oid": "d1622eb78b1bacb9068ad7ceefd454baf1f174aa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1622eb78b1bacb9068ad7ceefd454baf1f174aa", "message": "Add data flow analyzer for let expression", "committedDate": "2020-03-04T05:37:59Z", "type": "commit"}, {"oid": "5745eab50126ed79bf4ae6820167a65c8093d4b8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5745eab50126ed79bf4ae6820167a65c8093d4b8", "message": "Add dataflow analysis tests", "committedDate": "2020-03-04T06:04:00Z", "type": "commit"}]}