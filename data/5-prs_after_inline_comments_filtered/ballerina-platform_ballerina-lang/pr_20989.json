{"pr_number": 20989, "pr_title": "Fix grpc map field serialization issue and optional field deserialization issue(master)", "pr_createdAt": "2020-02-11T11:16:48Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989", "timeline": [{"oid": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/171eb9d9ef3355cfe8a1adcb0f695902a849b3f3", "message": "Fix grpc map field serialization issue\nand optional field deserialization issue", "committedDate": "2020-02-11T10:56:57Z", "type": "commit"}, {"oid": "7643f94d85669726cfa1c3cd367d10941ed0261c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7643f94d85669726cfa1c3cd367d10941ed0261c", "message": "Reformat ballerina service and client code", "committedDate": "2020-02-12T07:24:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNjE1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r378826154", "bodyText": "What is the special reason to notify the error to callback and return error subsequently?\nIf the exception has occurred before the non-blocking call, then call back should not be called ideally. We can simply unblock strand[1] and return error. Problem is if we notify the callback when the non-blocking task is not processed, that can cause strand state issues.\n[1] https://github.com/ballerina-platform/ballerina-lang/blob/master/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java#L122", "author": "chamil321", "createdAt": "2020-02-13T12:19:36Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/nativeimpl/client/FunctionUtils.java", "diffHunk": "@@ -248,18 +248,22 @@ public static Object externBlockingExecute(ObjectValue clientEndpoint, String me\n                 requestMsg.setHeaders(headers);\n             }\n             BlockingStub blockingStub = (BlockingStub) connectionStub;\n+            DataContext dataContext = null;\n             try {\n                 MethodDescriptor.MethodType methodType = getMethodType(methodDescriptor);\n                 if (methodType.equals(MethodDescriptor.MethodType.UNARY)) {\n \n-                    DataContext dataContext = new DataContext(Scheduler.getStrand(),\n+                    dataContext = new DataContext(Scheduler.getStrand(),\n                             new NonBlockingCallback(Scheduler.getStrand()));\n                     blockingStub.executeUnary(requestMsg, methodDescriptors.get(methodName), dataContext);\n                 } else {\n                     return notifyErrorReply(INTERNAL, \"Error while executing the client call. Method type \" +\n                             methodType.name() + \" not supported\");\n                 }\n             } catch (Exception e) {\n+                if (dataContext != null) {\n+                    dataContext.getCallback().notifyFailure(MessageUtils.getConnectorError(e));", "originalCommit": "7643f94d85669726cfa1c3cd367d10941ed0261c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4NTExMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r379985110", "bodyText": "We need to release the strand when there is an error before doing the network call. Thanks for the suggestion", "author": "daneshk", "createdAt": "2020-02-17T04:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNjE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4NjUyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r379986522", "bodyText": "Fixed in 25dc241", "author": "daneshk", "createdAt": "2020-02-17T05:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNjE1NA=="}], "type": "inlineReview"}, {"oid": "25dc2415754273375f38c7f520185d2622af5300", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25dc2415754273375f38c7f520185d2622af5300", "message": "Add code review suggestion", "committedDate": "2020-02-17T05:00:07Z", "type": "commit"}]}