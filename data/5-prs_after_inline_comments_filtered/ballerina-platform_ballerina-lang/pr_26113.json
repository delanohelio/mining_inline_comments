{"pr_number": 26113, "pr_title": "Introduce the `@isolatedParam` annotation ", "pr_createdAt": "2020-09-25T17:43:39Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26113", "timeline": [{"oid": "ab213f09698ea0ec853603d0ee286497cf8c45fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab213f09698ea0ec853603d0ee286497cf8c45fc", "message": "Introduce the isolatedParam annotation", "committedDate": "2020-09-24T13:53:05Z", "type": "commit"}, {"oid": "ff5e6f7ca140558fe9a18beb3719eb18c728f6b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff5e6f7ca140558fe9a18beb3719eb18c728f6b6", "message": "Fix SymbolBIRTest", "committedDate": "2020-09-24T15:06:38Z", "type": "commit"}, {"oid": "24155aabf6ea834053cb9f74146facd384ef3ec5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24155aabf6ea834053cb9f74146facd384ef3ec5", "message": "Fix diagnostics and add tests", "committedDate": "2020-09-24T17:28:16Z", "type": "commit"}, {"oid": "c3ce8dfd3319623bad955b5d1c0b06fa2f46c271", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c3ce8dfd3319623bad955b5d1c0b06fa2f46c271", "message": "Fix isolatedParam analysis for arrow functions", "committedDate": "2020-09-25T16:29:17Z", "type": "commit"}, {"oid": "f37f7f224c7d370712a35afcf06af6d96da84959", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f37f7f224c7d370712a35afcf06af6d96da84959", "message": "Add isolatedParam tests for default values", "committedDate": "2020-09-25T17:40:50Z", "type": "commit"}, {"oid": "cf162f967ca84133e1a894943462589d0823d219", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cf162f967ca84133e1a894943462589d0823d219", "message": "Merge master", "committedDate": "2020-09-26T05:10:07Z", "type": "commit"}, {"oid": "265bfb9ae915fe1f3ee6007c3578631313c2b3f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/265bfb9ae915fe1f3ee6007c3578631313c2b3f4", "message": "Fix analysis for rest param args in vararg", "committedDate": "2020-09-26T06:53:48Z", "type": "commit"}, {"oid": "77f51593836147fc2db50d58cd8b75dd1671bde2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77f51593836147fc2db50d58cd8b75dd1671bde2", "message": "Fix error duplication", "committedDate": "2020-09-26T16:55:49Z", "type": "commit"}, {"oid": "72777b5838b9f673ae6523c5db6dd252726cf00a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72777b5838b9f673ae6523c5db6dd252726cf00a", "message": "Merge master", "committedDate": "2020-09-29T06:58:31Z", "type": "commit"}, {"oid": "2d3029a0ea97756efd46d74d18bb0ca735f10158", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d3029a0ea97756efd46d74d18bb0ca735f10158", "message": "Fix isolation analysis for test source", "committedDate": "2020-09-29T07:38:00Z", "type": "commit"}, {"oid": "6eabcec7c28e23257ac5d2c2af76cc583da008ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6eabcec7c28e23257ac5d2c2af76cc583da008ab", "message": "Fix annotation completion tests", "committedDate": "2020-09-29T10:48:33Z", "type": "commit"}, {"oid": "072fe0869cab287d88c4bf06fb3980c3e1b45018", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/072fe0869cab287d88c4bf06fb3980c3e1b45018", "message": "Resolve conflicts and merge branch 'master' of https://github.com/ballerina-lang/ballerina into add-isolated-rem", "committedDate": "2020-10-07T05:17:04Z", "type": "commit"}, {"oid": "e266674e65c720f7eb3aed281a15921aeab495ec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e266674e65c720f7eb3aed281a15921aeab495ec", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into add-isolated-rem", "committedDate": "2020-10-14T12:00:59Z", "type": "commit"}, {"oid": "3a835a7a6720c035a343db5ad08846e916a19c3b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a835a7a6720c035a343db5ad08846e916a19c3b", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into add-isolated-rem", "committedDate": "2020-10-20T15:18:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwOTk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26113#discussion_r508809976", "bodyText": "Can we break this logic into multiple methods?", "author": "hasithaa", "createdAt": "2020-10-20T20:14:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsolationAnalyzer.java", "diffHunk": "@@ -1372,11 +1412,333 @@ private void analyzeInvocation(BLangInvocation invocationExpr) {\n             }\n         }\n \n-        if (isObjectFieldDefaultValueRequiringIsolation(env)) {\n+        if (objectFieldDefaultValueRequiringIsolation) {\n             dlog.error(invocationExpr.pos, DiagnosticCode.INVALID_NON_ISOLATED_INVOCATION_AS_OBJECT_DEFAULT);\n         }\n     }\n \n+    private void analyzeArgs(List<BLangExpression> requiredArgs, List<BLangExpression> restArgs) {\n+        List<BLangExpression> args = new ArrayList<>(requiredArgs);\n+        args.addAll(restArgs);\n+        for (BLangExpression argExpr : args) {\n+            analyzeNode(argExpr, env);\n+        }\n+    }\n+\n+    private void analyzeAndSetArrowFuncFlagForIsolatedParamArg(BLangExpression arg) {\n+        if (arg.getKind() == NodeKind.REST_ARGS_EXPR) {\n+            BLangExpression expr = ((BLangRestArgsExpression) arg).expr;\n+            if (expr.getKind() != NodeKind.LIST_CONSTRUCTOR_EXPR) {\n+                analyzeNode(arg, env);\n+                return;\n+            }\n+\n+            for (BLangExpression expression : ((BLangListConstructorExpr) expr).exprs) {\n+                analyzeAndSetArrowFuncFlagForIsolatedParamArg(expression);\n+            }\n+            return;\n+        }\n+\n+        boolean namedArg = arg.getKind() == NodeKind.NAMED_ARGS_EXPR;\n+        BLangExpression argExpr = namedArg ? ((BLangNamedArgsExpression) arg).expr : arg;\n+\n+        if (argExpr.getKind() != NodeKind.ARROW_EXPR) {\n+            analyzeNode(argExpr, env);\n+            return;\n+        }\n+\n+        boolean prevInferredIsolatedness = this.inferredIsolated;\n+        this.inferredIsolated = true;\n+\n+        analyzeNode(argExpr, env);\n+\n+        if (this.inferredIsolated) {\n+            BInvokableType invokableType = (BInvokableType) argExpr.type;\n+            BInvokableTypeSymbol tsymbol = (BInvokableTypeSymbol) invokableType.tsymbol;\n+\n+            BInvokableTypeSymbol dupInvokableTypeSymbol = new BInvokableTypeSymbol(tsymbol.tag,\n+                                                                                   tsymbol.flags | Flags.ISOLATED,\n+                                                                                   tsymbol.pkgID, null, tsymbol.owner,\n+                                                                                   tsymbol.pos, tsymbol.origin);\n+            BInvokableType dupInvokableType = new BInvokableType(invokableType.paramTypes, invokableType.restType,\n+                                                                 invokableType.retType, dupInvokableTypeSymbol);\n+            dupInvokableType.flags |= Flags.ISOLATED;\n+            dupInvokableTypeSymbol.type = dupInvokableType;\n+            argExpr.type = dupInvokableType;\n+\n+            if (namedArg) {\n+                arg.type = dupInvokableType;\n+            }\n+        }\n+        this.inferredIsolated = prevInferredIsolatedness && this.inferredIsolated;\n+    }\n+\n+    private void analyzeArgIsolatedness(List<BLangExpression> requiredArgs, List<BLangExpression> restArgs,", "originalCommit": "3a835a7a6720c035a343db5ad08846e916a19c3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}