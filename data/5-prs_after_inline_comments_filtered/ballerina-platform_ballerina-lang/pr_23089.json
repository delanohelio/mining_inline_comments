{"pr_number": 23089, "pr_title": "Add let expression parsing", "pr_createdAt": "2020-05-04T17:07:57Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089", "timeline": [{"oid": "106763ade461b44d34518a5c89c9b44cfbd1e594", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/106763ade461b44d34518a5c89c9b44cfbd1e594", "message": "Add let expression support", "committedDate": "2020-05-04T08:03:59Z", "type": "commit"}, {"oid": "9b3a48b6ed99590a1a8b3016a60ab27b983700ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b3a48b6ed99590a1a8b3016a60ab27b983700ee", "message": "Add syntax validation tests", "committedDate": "2020-05-04T08:05:18Z", "type": "commit"}, {"oid": "d4abb2102ba1411d6184c47178f074c016c3ae88", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4abb2102ba1411d6184c47178f074c016c3ae88", "message": "Add error recovery", "committedDate": "2020-05-04T17:03:16Z", "type": "commit"}, {"oid": "e031d565607bc0c2570dfabaf00f67e8ed047b2e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e031d565607bc0c2570dfabaf00f67e8ed047b2e", "message": "Add recovery test cases", "committedDate": "2020-05-04T17:04:28Z", "type": "commit"}, {"oid": "45e8ca8d25e8fde8cdc4e6e62b0b0863007eb038", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/45e8ca8d25e8fde8cdc4e6e62b0b0863007eb038", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser", "committedDate": "2020-05-04T17:16:21Z", "type": "commit"}, {"oid": "9ab98298f752cf6443a6da6501d72f1966b4d315", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ab98298f752cf6443a6da6501d72f1966b4d315", "message": "Add generated internal and external nodes", "committedDate": "2020-05-05T04:35:03Z", "type": "commit"}, {"oid": "5256aaf65ed997403ac3998badf38f238215e2cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5256aaf65ed997403ac3998badf38f238215e2cf", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser", "committedDate": "2020-05-05T06:48:46Z", "type": "commit"}, {"oid": "a9f8fd3eebea4b7d1aa4da046c9c68b14b70c298", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a9f8fd3eebea4b7d1aa4da046c9c68b14b70c298", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/LexerTerminals.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/ParserRuleContext.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/ParserTestUtils.java\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "committedDate": "2020-05-06T04:21:05Z", "type": "commit"}, {"oid": "1da6919a33f9bf8fd1a530cd0a4f0c862a1ba485", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1da6919a33f9bf8fd1a530cd0a4f0c862a1ba485", "message": "Regenerate tree after merging", "committedDate": "2020-05-06T04:25:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MTk3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089#discussion_r420551970", "bodyText": "Should we return an empty list here?\nAnd context should be ended.", "author": "SupunS", "createdAt": "2020-05-06T05:26:20Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7301,4 +7309,102 @@ private STNode parseErrorKeyWord() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse let expression.\n+     * <p>\n+     * <code>\n+     * let-expr := let let-var-decl [, let-var-decl]* in expression\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLetExpression() {\n+        STNode letKeyword = parseLetKeyword();\n+        STNode letVarDeclarations = parseLetVarDeclarations();\n+        STNode inKeyword = parseInKeyword();\n+        STNode expression = parseExpression();\n+        return STNodeFactory.createLetExpressionNode(letKeyword, letVarDeclarations, inKeyword, expression);\n+    }\n+\n+    /**\n+     * Parse let-keyword.\n+     *\n+     * @return Let-keyword node\n+     */\n+    private STNode parseLetKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.LET_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.LET_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse let variable declarations.\n+     * <p>\n+     * <code>let-var-decl-list := let-var-decl [, let-var-decl]*</code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLetVarDeclarations() {\n+        startContext(ParserRuleContext.LET_VAR_DECL);\n+        List<STNode> varDecls = new ArrayList<>();\n+        STToken nextToken = peek();\n+\n+        // Make sure at least one let variable declaration is present\n+        if (isEndOfLetVarDeclarations(nextToken.kind)) {\n+            this.errorHandler.reportMissingTokenError(\"missing let variable declaration\");\n+            return STNodeFactory.createMissingToken(SyntaxKind.LET_VAR_DECL);", "originalCommit": "1da6919a33f9bf8fd1a530cd0a4f0c862a1ba485", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MzYxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089#discussion_r420553619", "bodyText": "yeah. the context should be ended. :)\nis it ok to return an empty list? there should be at least one let-var-decl.\nFollowing had been done in the parseListeners() method for expression-list := expression (, expression)*\n            endContext();\n            this.errorHandler.reportMissingTokenError(\"missing expression\");\n            return STNodeFactory.createMissingToken(SyntaxKind.IDENTIFIER_TOKEN);\n        }", "author": "lochana-chathura", "createdAt": "2020-05-06T05:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MTk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2Mjc0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089#discussion_r420662743", "bodyText": "Yeah, since we log the errors, that should be fine.", "author": "SupunS", "createdAt": "2020-05-06T09:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MTk3MA=="}], "type": "inlineReview"}, {"oid": "e1027ae5a110dbb4e18adb88c7ed09f78ea82314", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e1027ae5a110dbb4e18adb88c7ed09f78ea82314", "message": "Fix small issue in parseLetVarDeclarations method", "committedDate": "2020-05-06T09:52:46Z", "type": "commit"}]}