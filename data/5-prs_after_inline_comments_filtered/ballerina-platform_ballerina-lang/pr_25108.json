{"pr_number": 25108, "pr_title": "Improve support for sorting in query expression", "pr_createdAt": "2020-08-03T14:20:51Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108", "timeline": [{"oid": "c0ff1f539b9458a4d73bb504f0825f7b672a8e16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0ff1f539b9458a4d73bb504f0825f7b672a8e16", "message": "Change order by clause behavior", "committedDate": "2020-08-03T14:00:01Z", "type": "commit"}, {"oid": "0d1a10f4d8bedc4c9217606fd93b6833c878133d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0d1a10f4d8bedc4c9217606fd93b6833c878133d", "message": "Add more tests for order by clause", "committedDate": "2020-08-03T14:01:41Z", "type": "commit"}, {"oid": "56fd65d5e087154679e267df34c8da04f2417b9a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/56fd65d5e087154679e267df34c8da04f2417b9a", "message": "Add isNaN function", "committedDate": "2020-08-03T14:02:38Z", "type": "commit"}, {"oid": "7dd5840caf437dcc3aba3cc4c351176913e33b9a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dd5840caf437dcc3aba3cc4c351176913e33b9a", "message": "Fix Lang-Server tests", "committedDate": "2020-08-03T14:03:00Z", "type": "commit"}, {"oid": "2adc0eee74b120f8a5c029e11c3bb7449666a9f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2adc0eee74b120f8a5c029e11c3bb7449666a9f4", "message": "Add newline", "committedDate": "2020-08-03T14:06:59Z", "type": "commit"}, {"oid": "5f799def6fffca280a3d6bf18439e0071aaaae21", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f799def6fffca280a3d6bf18439e0071aaaae21", "message": "Change isNaN function name in query", "committedDate": "2020-08-03T15:32:20Z", "type": "commit"}, {"oid": "6840bafb1417fa1205d430f9f12a3c2b17e734a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6840bafb1417fa1205d430f9f12a3c2b17e734a7", "message": "Add comment", "committedDate": "2020-08-03T16:27:12Z", "type": "commit"}, {"oid": "868d3879c32cfe98fe6e09a99bb6989d67d3913e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/868d3879c32cfe98fe6e09a99bb6989d67d3913e", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-24751", "committedDate": "2020-08-04T05:58:51Z", "type": "commit"}, {"oid": "864bbd80ca8949200ebb1c4d04c58be426c216d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/864bbd80ca8949200ebb1c4d04c58be426c216d1", "message": "Fix lang-server tests", "committedDate": "2020-08-04T06:23:46Z", "type": "commit"}, {"oid": "34607eb1b5476846e2381be0324f5aadfa590e77", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34607eb1b5476846e2381be0324f5aadfa590e77", "message": "Add support for order by with string,xml", "committedDate": "2020-08-05T03:28:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MDM4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465480385", "bodyText": "Change the name to QUERY_SORT_STREAM_FUNCTION and the function name to sortStream, since it's not creating new objects.", "author": "grainier", "createdAt": "2020-08-05T05:24:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -194,6 +194,7 @@\n     private static final Name QUERY_CREATE_SELECT_FUNCTION = new Name(\"createSelectFunction\");\n     private static final Name QUERY_CREATE_DO_FUNCTION = new Name(\"createDoFunction\");\n     private static final Name QUERY_CREATE_LIMIT_FUNCTION = new Name(\"createLimitFunction\");\n+    private static final Name QUERY_CREATE_SORT_STREAM_FUNCTION = new Name(\"sortStreamFunction\");", "originalCommit": "34607eb1b5476846e2381be0324f5aadfa590e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MTc0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465481749", "bodyText": "I think both orderByClause and limitClause should be stacks. Please test whether it's working for inner queries with orderby or limit. i.e: from var p in (from var person in personList select person limit 2) select p;", "author": "grainier", "createdAt": "2020-08-05T05:29:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -205,6 +206,7 @@\n     private static final CompilerContext.Key<QueryDesugar> QUERY_DESUGAR_KEY = new CompilerContext.Key<>();\n     private BLangExpression onConflictExpr;\n     private BLangOrderByClause orderByClause;\n+    private BLangLimitClause limitClause;", "originalCommit": "34607eb1b5476846e2381be0324f5aadfa590e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MjMwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465482308", "bodyText": "This might lead to NPE with inner queries. Refer to the above comment.", "author": "grainier", "createdAt": "2020-08-05T05:31:15Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -247,11 +249,21 @@ BLangStatementExpression desugar(BLangQueryExpr queryExpr, SymbolEnv env) {\n         BLangVariableReference streamRef = buildStream(clauses, queryExpr.type, env, queryBlock);\n         BLangStatementExpression streamStmtExpr;\n         if (orderByClause != null) {\n-            // Type[] arr passed to order by helper\n+            // Type[] arr passed to stream ordering helper.\n             BLangArrayLiteral orderArr = (BLangArrayLiteral) TreeBuilder.createArrayLiteralExpressionNode();\n             orderArr.exprs = new ArrayList<>();\n             orderArr.type = new BArrayType(types.resolveExprType(queryExpr.type));\n-            streamRef = sortStream(queryBlock, orderByClause, streamRef, orderArr);\n+            if (limitClause != null) {\n+                // should limit after ordering the stream\n+                streamRef = getStreamFunctionVariableRef(queryBlock, QUERY_CREATE_SORT_STREAM_FUNCTION,\n+                        Lists.of(streamRef, orderArr, limitClause.expression), orderByClause.pos);\n+            } else {\n+                streamRef = getStreamFunctionVariableRef(queryBlock, QUERY_CREATE_SORT_STREAM_FUNCTION,\n+                        Lists.of(streamRef, orderArr, ASTBuilderUtil.createLiteral(orderByClause.pos, symTable.intType,\n+                                (long) 0)), orderByClause.pos);\n+            }\n+            orderByClause = null;", "originalCommit": "34607eb1b5476846e2381be0324f5aadfa590e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MzUzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465483537", "bodyText": "Can't we have an order-by and a limit together in a query? i.e. get first two events after ordering the stream.", "author": "grainier", "createdAt": "2020-08-05T05:35:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -364,8 +378,12 @@ BLangVariableReference buildStream(List<BLangNode> clauses, BType resultType, Sy\n                     addStreamFunction(block, initPipeline, doFunc);\n                     break;\n                 case LIMIT:\n-                    BLangVariableReference limitFunc = addLimitFunction(block, (BLangLimitClause) clause);\n-                    addStreamFunction(block, initPipeline, limitFunc);\n+                    limitClause = (BLangLimitClause) clause;\n+                    // limit the frames if order by clause is not given\n+                    if (orderByClause == null) {", "originalCommit": "34607eb1b5476846e2381be0324f5aadfa590e77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4NDMxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465584319", "bodyText": "This is handled in line no 257 to 266", "author": "lasinicl", "createdAt": "2020-08-05T09:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MzUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4ODM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465488398", "bodyText": "You can use createActionLambda method here.", "author": "grainier", "createdAt": "2020-08-05T05:50:33Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -575,42 +594,48 @@ BLangVariableReference addWhereFunction(BLangBlockStmt blockStmt, BLangWhereClau\n     }\n \n     /**\n-     * Desugar order by clause and return a reference to created order by function.\n+     * Desugar orderByClause to below and return a reference to created orderBy _StreamFunction.\n+     * _StreamFunction orderByFunc = createOrderByFunction(function(_Frame frame) {\n+     * _Frame frame = {\"orderKey\": frame[\"x2\"] + frame[\"y2\"], $orderDirection$: true + false\"};\n+     * });\n      *\n      * @param blockStmt parent block to write to.\n      * @param orderByClause  to be desugared.\n-     * @param streamRef reference to the stream output.\n-     * @return variableReference to created order by function.\n+     * @return variableReference to created orderBy _StreamFunction.\n      */\n-    BLangVariableReference sortStream(BLangBlockStmt blockStmt, BLangOrderByClause orderByClause,\n-                                                      BLangVariableReference streamRef, BLangArrayLiteral arr) {\n-\n+    BLangVariableReference addOrderByFunction(BLangBlockStmt blockStmt, BLangOrderByClause orderByClause) {\n         DiagnosticPos pos = orderByClause.pos;\n-\n-        // order by name descending, age ascending\n-        // sortFieldsArrayExpr keeps the ordering fields --> name, age\n-        // sortModesArrayExpr keeps the order direction --> false, true\n+        BLangLambdaFunction lambda = createLambdaFunction(pos, getNilTypeNode(), null, false);", "originalCommit": "34607eb1b5476846e2381be0324f5aadfa590e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4OTUwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465489506", "bodyText": "Shall we refactor this method name to isBasicType?", "author": "grainier", "createdAt": "2020-08-05T05:54:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -3468,14 +3468,15 @@ public BType resolveExprType(BType type) {\n     }\n \n     /**\n-     * Check whether a type is a basic type.\n+     * Check whether a order-key expression type is a basic type.\n      *\n-     * @param type type of the field.\n+     * @param type type of the order-key expression.\n      * @return boolean whether the type is basic type or not.\n      */\n     public boolean checkBasicType(BType type) {", "originalCommit": "34607eb1b5476846e2381be0324f5aadfa590e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5MjIwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465492206", "bodyText": "Add some tests for inner queries", "author": "grainier", "createdAt": "2020-08-05T06:02:24Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/OrderByClauseTest.java", "diffHunk": "@@ -126,19 +127,87 @@ public void testQueryExprWithOrderByClauseAndJoin() {\n         Assert.assertEquals(((BInteger) customer4.get(\"noOfItems\")).intValue(), 25);\n     }\n ", "originalCommit": "34607eb1b5476846e2381be0324f5aadfa590e77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5MzM5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25108#discussion_r465593397", "bodyText": "Added in commit 546393a", "author": "lasinicl", "createdAt": "2020-08-05T09:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5MjIwNg=="}], "type": "inlineReview"}, {"oid": "546393ac910e4a8dac77e4fbfc9b6adc87dcdfba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/546393ac910e4a8dac77e4fbfc9b6adc87dcdfba", "message": "Fix review suggestions", "committedDate": "2020-08-05T09:03:30Z", "type": "commit"}, {"oid": "d0b7c41b5ba08405a5b3e19e8d96f9195569a51b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d0b7c41b5ba08405a5b3e19e8d96f9195569a51b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-24751", "committedDate": "2020-08-05T09:47:50Z", "type": "commit"}, {"oid": "896ae921460803ddba02785ddcd5445092283a20", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/896ae921460803ddba02785ddcd5445092283a20", "message": "Fix lang-server tests", "committedDate": "2020-08-05T10:08:03Z", "type": "commit"}, {"oid": "5ab6661e6524598dc8b09ca701dd3fa156e176a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ab6661e6524598dc8b09ca701dd3fa156e176a4", "message": "Fix lang-server tests", "committedDate": "2020-08-05T10:08:33Z", "type": "commit"}, {"oid": "2f35133743b0d8e41a48dc6ad798eba949ba65bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f35133743b0d8e41a48dc6ad798eba949ba65bb", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-24751\n\n\u0001 Conflicts:\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/chainCompletion2.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/chainCompletion3.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/chainCompletion4.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/chainCompletion5.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/iterableOperation1.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/iterableOperation2.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/iterableOperation4.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/typeGuardSuggestions4.json\n\u0001\tlanguage-server/modules/langserver-core/src/test/resources/completion/function/variableBoundItemSuggestions2.json", "committedDate": "2020-08-07T13:10:58Z", "type": "commit"}, {"oid": "465dda3cba44f5fcee608308fde0b6b5cf49f33c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/465dda3cba44f5fcee608308fde0b6b5cf49f33c", "message": "Fix conflicts in LS tests", "committedDate": "2020-08-07T14:39:44Z", "type": "commit"}]}