{"pr_number": 25778, "pr_title": "Add parser changes for isolated objects", "pr_createdAt": "2020-09-14T13:26:30Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778", "timeline": [{"oid": "84b2020464ebe3a8da9c74f42c6bc501f9eac48a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/84b2020464ebe3a8da9c74f42c6bc501f9eac48a", "message": "Add parser changes for isolated objects", "committedDate": "2020-09-14T13:15:39Z", "type": "commit"}, {"oid": "946e71758a33c93b1b9f24a5dfc2829b6a847c1b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/946e71758a33c93b1b9f24a5dfc2829b6a847c1b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "committedDate": "2020-09-14T13:19:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNzkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r489217928", "bodyText": "Lets remove this, if its no longer needed.", "author": "SupunS", "createdAt": "2020-09-16T07:21:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1022,7 +1022,8 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addRedonlyQualifier(objFieldNode.readonlyKeyword(), objFieldNode.typeName(), simpleVar);\n+        // TODO: add changes for `final`\n+//        addRedonlyQualifier(objFieldNode.readonlyKeyword(), objFieldNode.typeName(), simpleVar);", "originalCommit": "946e71758a33c93b1b9f24a5dfc2829b6a847c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMDY3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r489220676", "bodyText": "@SupunS PR is not yet ready to be reviewed. Waiting for PR #25784 to be merged to clean up old commits from that PR. Also have to do small refactoring. Will let you knw once ready. :)", "author": "lochana-chathura", "createdAt": "2020-09-16T07:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNzkyOA=="}], "type": "inlineReview"}, {"oid": "0720ea62a256a9100968811ea1fe2b5e590c1bf0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0720ea62a256a9100968811ea1fe2b5e590c1bf0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "committedDate": "2020-09-16T13:32:07Z", "type": "commit"}, {"oid": "d215f5c708264d7f981f3e975cee7c668f7dace6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d215f5c708264d7f981f3e975cee7c668f7dace6", "message": "Fix conflicts with upstream changes and refactor code", "committedDate": "2020-09-16T16:05:48Z", "type": "commit"}, {"oid": "d215f5c708264d7f981f3e975cee7c668f7dace6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d215f5c708264d7f981f3e975cee7c668f7dace6", "message": "Fix conflicts with upstream changes and refactor code", "committedDate": "2020-09-16T16:05:48Z", "type": "forcePushed"}, {"oid": "8bdca1f6d7b4d068b6dc2cfedf8050640eeff622", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8bdca1f6d7b4d068b6dc2cfedf8050640eeff622", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects", "committedDate": "2020-09-16T16:39:56Z", "type": "commit"}, {"oid": "d6b5631614ea2901ecbb7a270f607d77b2abada3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6b5631614ea2901ecbb7a270f607d77b2abada3", "message": "Add few object type tests", "committedDate": "2020-09-18T05:07:40Z", "type": "commit"}, {"oid": "80df0c57ff42a75830e04382dccdcbeb0e425c73", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80df0c57ff42a75830e04382dccdcbeb0e425c73", "message": "Fix isolated object conflicts with isolated func upstream changes", "committedDate": "2020-09-22T13:58:50Z", "type": "commit"}, {"oid": "9f746d0bb62bab96caa0253aeed4992bfc3fa397", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f746d0bb62bab96caa0253aeed4992bfc3fa397", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects", "committedDate": "2020-09-22T13:59:19Z", "type": "commit"}, {"oid": "9f746d0bb62bab96caa0253aeed4992bfc3fa397", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f746d0bb62bab96caa0253aeed4992bfc3fa397", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects", "committedDate": "2020-09-22T13:59:19Z", "type": "forcePushed"}, {"oid": "ebb4f58b6ce5899f9fb7fbeb72b3e7d21014ea3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ebb4f58b6ce5899f9fb7fbeb72b3e7d21014ea3a", "message": "Temporary disable failing LS tests", "committedDate": "2020-09-23T04:04:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE4NTY4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r493185682", "bodyText": "Can we create an issue to track this test disabling?", "author": "nadeeshaan", "createdAt": "2020-09-23T04:11:33Z", "path": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/latest/ClassDefContextTest.java", "diffHunk": "@@ -41,6 +41,6 @@ public String getTestResourceDir() {\n \n     @Override\n     public List<String> skipList() {\n-        return Arrays.asList(\"config3.json\", \"config8.json\");\n+        return Arrays.asList(\"config3.json\", \"config8.json\", \"config12.json\", \"config13.json\");", "originalCommit": "ebb4f58b6ce5899f9fb7fbeb72b3e7d21014ea3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE4OTY3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r493189679", "bodyText": "Issue created #26017", "author": "lochana-chathura", "createdAt": "2020-09-23T04:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE4NTY4Mg=="}], "type": "inlineReview"}, {"oid": "83ba2ff80e90b45c9c3517358d4b88186c30ee98", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/83ba2ff80e90b45c9c3517358d4b88186c30ee98", "message": "Fix object_type_def_assert_24.json for EOF new line", "committedDate": "2020-09-23T04:27:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MjIzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r495672235", "bodyText": "Similar to the prev one, I think we don't need the parseObjectTypeQualifiers() method", "author": "SupunS", "createdAt": "2020-09-28T03:31:59Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4625,56 +4662,150 @@ private STNode parseObjectConstructorExpression(STNode annots) {\n \n     /**\n      * <p>\n-     * Parse object type qualifiers.\n+     * Parse object constructor qualifiers.\n      * </p>\n-     * <code>object-type-qualifiers := [client]</code>\n+     * <code>object-constructor-qualifier := [client]</code>\n      *\n      * @return Parsed node\n      */\n-    private STNode parseObjectTypeQualifiers() {\n+    private STNode parseObjectConstructorQualifiers() {\n+        STToken nextToken = peek();\n+        STToken firstQualifier;\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                firstQualifier = consume();\n+                break;\n+            case READONLY_KEYWORD:\n+            case ABSTRACT_KEYWORD:\n+            case ISOLATED_KEYWORD:\n+                // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`)\n+                // and then log an error\n+                firstQualifier = consume();\n+                addInvalidNodeToNextToken(firstQualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                        firstQualifier.text());\n+                return parseObjectConstructorQualifiers();\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR_QUALIFIER);\n+                return parseObjectConstructorQualifiers();\n+        }\n+\n+        return parseObjectConstructorNextQualifiers(firstQualifier);\n+    }\n+\n+    private STNode parseObjectConstructorNextQualifiers(STNode firstQualifier) {\n         List<STNode> qualifiers = new ArrayList<>();\n-        STNode qualifier;\n-        DiagnosticErrorCode errorCode = null;\n-        boolean hasClient = false;\n+        qualifiers.add(firstQualifier);\n \n-        // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`) and then log an error\n-        for (int i = 0; i < 3; i++) {\n+        // Parse remaining qualifiers\n+        for (int i = 0; i < 2; i++) {\n             STToken nextToken = peek();\n+            if (isNodeWithSyntaxKindInList(qualifiers, nextToken.kind)) {\n+                // Consume the nextToken\n+                nextToken = consume();\n+                updateLastNodeInListWithInvalidNode(qualifiers, nextToken,\n+                        DiagnosticErrorCode.ERROR_DUPLICATE_QUALIFIER, nextToken.text());\n+                continue;\n+            }\n+\n+            STToken nextQualifier;\n             switch (nextToken.kind) {\n                 case CLIENT_KEYWORD:\n-                    qualifier = consume();\n-                    if (hasClient) {\n-                        errorCode = DiagnosticErrorCode.ERROR_DUPLICATE_OBJECT_TYPE_QUALIFIER;\n-                    } else {\n-                        qualifiers.add(qualifier);\n-                        hasClient = true;\n-                    }\n-                    break;\n-                case ABSTRACT_KEYWORD:\n-                    qualifier = consume();\n-                    errorCode = DiagnosticErrorCode.ERROR_ABSTRACT_QUALIFIER_NOT_ALLOWED_IN_OBJECT;\n+                    nextQualifier = consume();\n                     break;\n                 case READONLY_KEYWORD:\n-                    qualifier = consume();\n-                    errorCode = DiagnosticErrorCode.ERROR_READONLY_QUALIFIER_NOT_ALLOWED_IN_OBJECT;\n-                    break;\n+                case ABSTRACT_KEYWORD:\n+                case ISOLATED_KEYWORD:\n+                    // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`)\n+                    // and then log an error\n+                    nextQualifier = consume();\n+                    updateLastNodeInListWithInvalidNode(qualifiers, nextQualifier,\n+                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, nextQualifier.text());\n+                    continue;\n                 case OBJECT_KEYWORD:\n                 default:\n                     return STNodeFactory.createNodeList(qualifiers);\n             }\n+            qualifiers.add(nextQualifier);\n+        }\n \n-            if (errorCode != null) {\n-                if (qualifiers.size() > 0) {\n-                    updateLastNodeInListWithInvalidNode(qualifiers, qualifier, errorCode);\n-                } else {\n-                    addInvalidNodeToNextToken(qualifier, errorCode);\n-                }\n-                errorCode = null;\n+        return STNodeFactory.createNodeList(qualifiers);\n+    }\n+\n+    /**\n+     * <p>\n+     * Parse object type descriptor qualifiers.\n+     * </p>\n+     * <code>object-type-descriptor-qualifiers := (client | isolated)*</code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectTypeQualifiers() {\n+        STToken nextToken = peek();\n+        STToken firstQualifier;\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+            case ISOLATED_KEYWORD:\n+                firstQualifier = consume();\n+                break;\n+            case READONLY_KEYWORD:\n+            case ABSTRACT_KEYWORD:\n+                // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`)\n+                // and then log an error\n+                firstQualifier = consume();\n+                addInvalidNodeToNextToken(firstQualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                        firstQualifier.text());\n+                return parseObjectTypeQualifiers();\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_TYPE_QUALIFIER);\n+                return parseObjectTypeQualifiers();\n+        }\n+\n+        return parseObjectTypeNextQualifiers(firstQualifier);\n+    }\n+\n+    private STNode parseObjectTypeNextQualifiers(STNode firstQualifier) {", "originalCommit": "83ba2ff80e90b45c9c3517358d4b88186c30ee98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MjI0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r495672246", "bodyText": "Do we need two methods?\nI think the one with the loop would be sufficient to handle all cases.", "author": "SupunS", "createdAt": "2020-09-28T03:32:04Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4625,56 +4662,150 @@ private STNode parseObjectConstructorExpression(STNode annots) {\n \n     /**\n      * <p>\n-     * Parse object type qualifiers.\n+     * Parse object constructor qualifiers.\n      * </p>\n-     * <code>object-type-qualifiers := [client]</code>\n+     * <code>object-constructor-qualifier := [client]</code>\n      *\n      * @return Parsed node\n      */\n-    private STNode parseObjectTypeQualifiers() {\n+    private STNode parseObjectConstructorQualifiers() {\n+        STToken nextToken = peek();\n+        STToken firstQualifier;\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                firstQualifier = consume();\n+                break;\n+            case READONLY_KEYWORD:\n+            case ABSTRACT_KEYWORD:\n+            case ISOLATED_KEYWORD:\n+                // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`)\n+                // and then log an error\n+                firstQualifier = consume();\n+                addInvalidNodeToNextToken(firstQualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                        firstQualifier.text());\n+                return parseObjectConstructorQualifiers();\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR_QUALIFIER);\n+                return parseObjectConstructorQualifiers();\n+        }\n+\n+        return parseObjectConstructorNextQualifiers(firstQualifier);\n+    }\n+\n+    private STNode parseObjectConstructorNextQualifiers(STNode firstQualifier) {", "originalCommit": "83ba2ff80e90b45c9c3517358d4b88186c30ee98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8a48d15cb7464207dd856127090397ed99e500a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8a48d15cb7464207dd856127090397ed99e500a", "message": "Revamp object and class qualifier parsing", "committedDate": "2020-09-28T07:19:31Z", "type": "forcePushed"}, {"oid": "9d51435f5f021e219ef0e366b9fb128e00c4f716", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d51435f5f021e219ef0e366b9fb128e00c4f716", "message": "Revamp object and class qualifier parsing", "committedDate": "2020-09-28T07:27:03Z", "type": "commit"}, {"oid": "9d51435f5f021e219ef0e366b9fb128e00c4f716", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d51435f5f021e219ef0e366b9fb128e00c4f716", "message": "Revamp object and class qualifier parsing", "committedDate": "2020-09-28T07:27:03Z", "type": "forcePushed"}]}