{"pr_number": 23075, "pr_title": "OpenAPI related fixes for generating ballerina client ", "pr_createdAt": "2020-05-04T11:05:43Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23075", "timeline": [{"oid": "3ab82dd0520386de50a575463ec1bd27b363d0ff", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ab82dd0520386de50a575463ec1bd27b363d0ff", "message": "improvements for openapi client generation", "committedDate": "2020-05-04T10:47:31Z", "type": "commit"}, {"oid": "1fa2eaa9c2442176695a203b2567a842ed7c6e27", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1fa2eaa9c2442176695a203b2567a842ed7c6e27", "message": "fix merge conflict", "committedDate": "2020-05-04T11:01:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyMzE1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23075#discussion_r419923155", "bodyText": "just a suggestion ... we can sum this up to a one-line I think. Someway like below...\nparameter.getIn() == null ? false : parameter.getIn().equals(\"path\")", "author": "NipunaMarcus", "createdAt": "2020-05-05T07:48:54Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -125,8 +125,51 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            \n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            \n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+    \n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     *\n+     * @param path The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream().anyMatch(parameter -> {\n+                if (null == parameter.getIn()) {\n+                    return false;\n+                }\n+                return parameter.getIn().equals(\"path\");\n+            });\n+        }\n+    \n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (null != operation.getParameters() && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream().anyMatch(parameter -> {\n+                        if (null == parameter.getIn()) {\n+                            return false;\n+                        }", "originalCommit": "1fa2eaa9c2442176695a203b2567a842ed7c6e27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}