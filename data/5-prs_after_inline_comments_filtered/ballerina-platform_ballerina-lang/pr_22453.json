{"pr_number": 22453, "pr_title": "Add binary-bitwise and logical expression support", "pr_createdAt": "2020-04-03T09:50:22Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22453", "timeline": [{"oid": "6cc5b5775fe55d629f6cda2e984526c42bac96b8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6cc5b5775fe55d629f6cda2e984526c42bac96b8", "message": "Add support for binary bitwise expressions", "committedDate": "2020-04-03T08:01:13Z", "type": "commit"}, {"oid": "8bad1bf019d697903a9d79a7e366d6425f5f30f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8bad1bf019d697903a9d79a7e366d6425f5f30f1", "message": "Add test cases", "committedDate": "2020-04-03T08:02:00Z", "type": "commit"}, {"oid": "550963a328386b42c6721ad7f76e3917304597a8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/550963a328386b42c6721ad7f76e3917304597a8", "message": "Add support for logical expressions", "committedDate": "2020-04-03T09:01:33Z", "type": "commit"}, {"oid": "68ab7c7f54d60b4da258434409e90636174a00be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/68ab7c7f54d60b4da258434409e90636174a00be", "message": "Add test cases", "committedDate": "2020-04-03T09:33:26Z", "type": "commit"}, {"oid": "bdf9b945e30cdba458926fff14fd1a84acceb115", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdf9b945e30cdba458926fff14fd1a84acceb115", "message": "Fix indentation for few JSON files", "committedDate": "2020-04-03T09:36:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MTI0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22453#discussion_r402891241", "bodyText": "sry. I had missed to change this in my previous PR", "author": "lochana-chathura", "createdAt": "2020-04-03T09:52:54Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2434,7 +2459,7 @@ private STNode parseTerminalExpression(SyntaxKind kind) {\n     }\n \n     private STNode parseExpressionRhs(STNode lhsExpr) {\n-        return parseExpressionRhs(OperatorPrecedence.BINARY_COMPARE, lhsExpr, false);\n+        return parseExpressionRhs(OperatorPrecedence.LOGICAL_OR, lhsExpr, false);", "originalCommit": "bdf9b945e30cdba458926fff14fd1a84acceb115", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5MTM2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22453#discussion_r402891364", "bodyText": "here also", "author": "lochana-chathura", "createdAt": "2020-04-03T09:53:09Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2443,7 +2468,7 @@ private STNode parseExpressionRhs(STNode lhsExpr) {\n      * @return Parsed node\n      */\n     private STNode parseExpressionRhs(STNode lhsExpr, boolean isAssignmentLhs) {\n-        return parseExpressionRhs(OperatorPrecedence.BINARY_COMPARE, lhsExpr, isAssignmentLhs);\n+        return parseExpressionRhs(OperatorPrecedence.LOGICAL_OR, lhsExpr, isAssignmentLhs);", "originalCommit": "bdf9b945e30cdba458926fff14fd1a84acceb115", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5ODMwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22453#discussion_r402898306", "bodyText": "| had been declared under Separators in LexerTermianls.java. So I added it into the same category here also.\nLet me knw if it should be moved to Arithmetic operators category.", "author": "lochana-chathura", "createdAt": "2020-04-03T10:05:22Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/ParserTestUtils.java", "diffHunk": "@@ -391,6 +399,8 @@ private static SyntaxKind getNodeKind(String kind) {\n                 return SyntaxKind.OPEN_BRACE_PIPE_TOKEN;\n             case \"CLOSE_BRACE_PIPE_TOKEN\":\n                 return SyntaxKind.CLOSE_BRACE_PIPE_TOKEN;\n+            case \"PIPE_TOKEN\":\n+                return SyntaxKind.PIPE_TOKEN;", "originalCommit": "bdf9b945e30cdba458926fff14fd1a84acceb115", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}