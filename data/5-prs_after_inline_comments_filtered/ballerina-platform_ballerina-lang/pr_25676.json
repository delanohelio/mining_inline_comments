{"pr_number": 25676, "pr_title": "Fix refactor the ballerina OpenAPI commands ", "pr_createdAt": "2020-09-09T06:10:28Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676", "timeline": [{"oid": "c3634f9baf4aae439247ffd581afb84430123770", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c3634f9baf4aae439247ffd581afb84430123770", "message": "Create new file for openapi command", "committedDate": "2020-08-16T13:11:39Z", "type": "commit"}, {"oid": "86e7e3c65d5c5c68181bcedb33cd1ea50644ab69", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86e7e3c65d5c5c68181bcedb33cd1ea50644ab69", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-08-18T17:05:44Z", "type": "commit"}, {"oid": "56a8539db923597e2530dfe416979a8bebcded7f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/56a8539db923597e2530dfe416979a8bebcded7f", "message": "Add execution path", "committedDate": "2020-08-19T09:56:34Z", "type": "commit"}, {"oid": "143cd04e908c21a0afe4fefbc9b6c901ddebd3c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/143cd04e908c21a0afe4fefbc9b6c901ddebd3c3", "message": "Add command to help file", "committedDate": "2020-08-20T11:30:00Z", "type": "commit"}, {"oid": "c37dda34e210d717a0cc203750caab3bc89b69e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c37dda34e210d717a0cc203750caab3bc89b69e0", "message": "Add service generation command", "committedDate": "2020-08-21T04:21:36Z", "type": "commit"}, {"oid": "a4b6a4e4e1f5f96a02b04b8e7f596d05947ee8d8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4b6a4e4e1f5f96a02b04b8e7f596d05947ee8d8", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-08-21T04:34:38Z", "type": "commit"}, {"oid": "00ccc4e8d8e3bfd7069d5a9408093eb1e0e95fa2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00ccc4e8d8e3bfd7069d5a9408093eb1e0e95fa2", "message": "Add toml change", "committedDate": "2020-08-21T04:36:05Z", "type": "commit"}, {"oid": "a602c3fefa40068067962a1c32506b99fb317fb3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a602c3fefa40068067962a1c32506b99fb317fb3", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-08-21T04:36:38Z", "type": "commit"}, {"oid": "1c53910ff59cac5de7481aebfd5917dd943ea066", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c53910ff59cac5de7481aebfd5917dd943ea066", "message": "Add client file generation", "committedDate": "2020-08-21T06:21:50Z", "type": "commit"}, {"oid": "8f5773326085e47b2f0242dac0b8415676920713", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f5773326085e47b2f0242dac0b8415676920713", "message": "Fix yaml file path in service file", "committedDate": "2020-08-24T05:06:17Z", "type": "commit"}, {"oid": "2afd0ca5e0569ccd1abf1ba647ca9f4b70c09609", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2afd0ca5e0569ccd1abf1ba647ca9f4b70c09609", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-08-24T05:07:56Z", "type": "commit"}, {"oid": "512c7f986a45ee7ece8ac980e975318161c2884e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/512c7f986a45ee7ece8ac980e975318161c2884e", "message": "Clean code", "committedDate": "2020-08-24T05:50:52Z", "type": "commit"}, {"oid": "804d6fa9c036e59495167233b3ca179a60e7ce0b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/804d6fa9c036e59495167233b3ca179a60e7ce0b", "message": "Add path resolver", "committedDate": "2020-08-24T08:59:27Z", "type": "commit"}, {"oid": "e047939d3f3da803bef89a583d2bfd66bd6158d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e047939d3f3da803bef89a583d2bfd66bd6158d9", "message": "Add path resolver", "committedDate": "2020-08-25T05:44:11Z", "type": "commit"}, {"oid": "44efe1bbd890eb97bce63ff05716a0198d4aa508", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44efe1bbd890eb97bce63ff05716a0198d4aa508", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-08-25T05:52:48Z", "type": "commit"}, {"oid": "3cd02a6a5c124bfec5ca567bc23224f1911a1691", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cd02a6a5c124bfec5ca567bc23224f1911a1691", "message": "Add target path fix", "committedDate": "2020-08-25T07:07:44Z", "type": "commit"}, {"oid": "daeebbd2c46629ea54dd472f0939fedc91c80b3b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/daeebbd2c46629ea54dd472f0939fedc91c80b3b", "message": "Add openApi contract generate function", "committedDate": "2020-08-26T04:26:40Z", "type": "commit"}, {"oid": "f6c9c5535a9ec86916f38401c928ea1b4b00f7d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6c9c5535a9ec86916f38401c928ea1b4b00f7d7", "message": "Fix openApi command tests", "committedDate": "2020-08-26T04:27:45Z", "type": "commit"}, {"oid": "92e5fe88c3a2d0d787d5ac23390e05f10197cfe2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92e5fe88c3a2d0d787d5ac23390e05f10197cfe2", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-08-26T04:29:37Z", "type": "commit"}, {"oid": "a67c07b6b4405038abbda9c0cfce6b5e657203fb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a67c07b6b4405038abbda9c0cfce6b5e657203fb", "message": "Fix relative path for service generation", "committedDate": "2020-08-26T11:06:11Z", "type": "commit"}, {"oid": "41e7280ca20634ecd45658a9c1a8e2e3b18affea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41e7280ca20634ecd45658a9c1a8e2e3b18affea", "message": "Add user input given for overwrite the exist file", "committedDate": "2020-08-27T09:34:42Z", "type": "commit"}, {"oid": "b95080677416a9d5a0e617b765ddfe924ce5e78f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b95080677416a9d5a0e617b765ddfe924ce5e78f", "message": "Add tag filter for command", "committedDate": "2020-08-27T11:33:24Z", "type": "commit"}, {"oid": "a7b1268a6174c38a606cdcecc01fca0d7b5ffeb9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7b1268a6174c38a606cdcecc01fca0d7b5ffeb9", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-08-27T11:33:53Z", "type": "commit"}, {"oid": "61efa8439ba744126dd239722bdc46705bd70759", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61efa8439ba744126dd239722bdc46705bd70759", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-08-28T05:47:49Z", "type": "commit"}, {"oid": "e8d7d71acc061b22f49e10fcc4fe42696d0802e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8d7d71acc061b22f49e10fcc4fe42696d0802e9", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-09-02T02:35:28Z", "type": "commit"}, {"oid": "e715f52449571ccf93db9ffa9ad8416f9029d7d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e715f52449571ccf93db9ffa9ad8416f9029d7d1", "message": "Add operation filter to command", "committedDate": "2020-09-02T05:33:03Z", "type": "commit"}, {"oid": "d80ea2a655ab77a3e916ede5023747d698cf1e93", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d80ea2a655ab77a3e916ede5023747d698cf1e93", "message": "Add filter values to langserver-core openApi tests", "committedDate": "2020-09-02T06:24:57Z", "type": "commit"}, {"oid": "244b000b1304549f5bced43e4059af0c763735ca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/244b000b1304549f5bced43e4059af0c763735ca", "message": "Add filter value to lang-server openapi tests", "committedDate": "2020-09-02T07:04:00Z", "type": "commit"}, {"oid": "4205a589cc41cdad8deb32d5ffddbcb388b53bb9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4205a589cc41cdad8deb32d5ffddbcb388b53bb9", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-09-03T03:58:45Z", "type": "commit"}, {"oid": "400e791261ba18f9982a3d87b007af4c00e4452f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/400e791261ba18f9982a3d87b007af4c00e4452f", "message": "Add tags and operations to openApi annotation", "committedDate": "2020-09-05T14:13:15Z", "type": "commit"}, {"oid": "0b543f3ae7ff65cb2b4e4cde489067fc544efad8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b543f3ae7ff65cb2b4e4cde489067fc544efad8", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-09-05T14:13:43Z", "type": "commit"}, {"oid": "df617582589451b5b4f22030560ad80b91e7064b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df617582589451b5b4f22030560ad80b91e7064b", "message": "Add generate openApi specification for multiple services in ballerina file", "committedDate": "2020-09-07T07:23:25Z", "type": "commit"}, {"oid": "74a1632dfab6f61912b0ca93b9ad24dd6f9287cd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74a1632dfab6f61912b0ca93b9ad24dd6f9287cd", "message": "Add tests for support quoted identifiers", "committedDate": "2020-09-07T07:32:07Z", "type": "commit"}, {"oid": "c2cb6b797935c2e920998a92e770d2866e9fd87c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c2cb6b797935c2e920998a92e770d2866e9fd87c", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-09-07T07:32:40Z", "type": "commit"}, {"oid": "28bc7a061500960022471c057f8099d48ed67f32", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28bc7a061500960022471c057f8099d48ed67f32", "message": "Add tests for support quoted identifiers", "committedDate": "2020-09-08T03:52:27Z", "type": "commit"}, {"oid": "279f626e706305b3092c4c47ee7d1314507f7a3e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/279f626e706305b3092c4c47ee7d1314507f7a3e", "message": "Add if condition to service template tag attribute", "committedDate": "2020-09-08T05:29:55Z", "type": "commit"}, {"oid": "a4f793192a89e50a05031ca0a7abeb98bea8b942", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4f793192a89e50a05031ca0a7abeb98bea8b942", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-09-08T05:30:18Z", "type": "commit"}, {"oid": "bd416ba3f048cc5f9f080ac6fc4a2a176137de9a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd416ba3f048cc5f9f080ac6fc4a2a176137de9a", "message": "Clean code", "committedDate": "2020-09-08T07:00:48Z", "type": "commit"}, {"oid": "2a0ed1b87eed9f6631d3abf01fefe4404ff08009", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a0ed1b87eed9f6631d3abf01fefe4404ff08009", "message": "Fix check-styles", "committedDate": "2020-09-09T03:55:35Z", "type": "commit"}, {"oid": "8c6f209d458e8bf122b379ccbc99f362bc0d8989", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c6f209d458e8bf122b379ccbc99f362bc0d8989", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-09-09T04:00:12Z", "type": "commit"}, {"oid": "47b6ceaeeb2e8808aa3b6e2bb515b862a5486f6e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47b6ceaeeb2e8808aa3b6e2bb515b862a5486f6e", "message": "Update openApi helper file", "committedDate": "2020-09-09T06:06:19Z", "type": "commit"}, {"oid": "4450e80525df5567c939b8bbc6d63c8c3ea2516a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4450e80525df5567c939b8bbc6d63c8c3ea2516a", "message": "Remove changes in package-lock.json", "committedDate": "2020-09-09T06:24:43Z", "type": "commit"}, {"oid": "c800af516e6eb75f7e5a3103aebdf58a7267f747", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c800af516e6eb75f7e5a3103aebdf58a7267f747", "message": "Remove changes in package-lock.json", "committedDate": "2020-09-09T06:32:10Z", "type": "commit"}, {"oid": "67ab24831d31c71f1418f767a37333b78a28d410", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67ab24831d31c71f1418f767a37333b78a28d410", "message": "Remove changes in package-lock.json", "committedDate": "2020-09-09T06:33:56Z", "type": "commit"}, {"oid": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa66d136c026620ee37a7edfcc1255d139fa39c3", "message": "Add new line", "committedDate": "2020-09-09T06:59:56Z", "type": "commit"}, {"oid": "41f86b7bc82dcf21bf3c6129042a7db4c529ed60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41f86b7bc82dcf21bf3c6129042a7db4c529ed60", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-09-09T07:59:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5Njg5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485496893", "bodyText": "Shall we remove these unnecessary comments?", "author": "azinneera", "createdAt": "2020-09-09T10:09:20Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/command/executors/openapi/openapitoballerina/CreateOpenApiServiceResourceMethodExecutor.java", "diffHunk": "@@ -267,7 +268,14 @@ static OpenAPI parseOpenAPIFile(String definitionURI) {\n             BallerinaOpenApiPath typePath = new BallerinaOpenApiPath();\n \n             typePath.setPath(pathName);\n-            typePath.setOperationsList(extractOpenApiOperations(pathObject.readOperationsMap(), pathName));\n+\n+            List<String> tag = new ArrayList<>();\n+            List<String> operation = new ArrayList<>();\n+//            List<String> tag = null;", "originalCommit": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMzc0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485503745", "bodyText": "This is not used anywhere. Shall we remove this?", "author": "suganyasuven", "createdAt": "2020-09-09T10:22:01Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/typemodel/BallerinaOpenApiType.java", "diffHunk": "@@ -37,6 +38,24 @@\n     private List<Tag> tags;\n     private List<BallerinaOpenApiPath> pathList;\n     private BallerinaOpenApiComponent component;\n+    private List<Tag> filteredTags;\n+    private List<Operation> operations;\n+\n+    public List<Operation> getOperations() {\n+        return operations;\n+    }\n+\n+    public void setOperations(List<Operation> operations) {\n+        this.operations = operations;\n+    }\n+\n+    public List<Tag> getFilteredTags() {", "originalCommit": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNzAyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485507025", "bodyText": "operatoins attribute I used for the future purpose of implementation. Need to have some clarification with team its further implementation.", "author": "lnash94", "createdAt": "2020-09-09T10:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMzc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNTY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485505659", "bodyText": "Shall we remove these commented lines?", "author": "suganyasuven", "createdAt": "2020-09-09T10:25:44Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/test/java/org/ballerinalang/openapi/cmd/OpenAPICmdTest.java", "diffHunk": "@@ -48,4 +66,77 @@ public void testOpenAPICmdHelpWithoutFlag() throws IOException {\n         String output = readOutput(true);\n         Assert.assertTrue(output.contains(\"NAME\\n       The Ballerina OpenAPI Tool\"));\n     }\n+\n+    @Test(description = \"Test openapi gen-service without openapi contract file\")\n+    public void testWithoutOpenApiContract() {\n+        String[] args = {\"--input\"};\n+        OpenApiCmd cmd = new OpenApiCmd(printStream);\n+        new CommandLine(cmd).parseArgs(args);\n+        String output = \"\";\n+        try {\n+            cmd.execute();\n+        } catch (BLauncherException e) {\n+            output = e.getDetailedMessages().get(0);\n+        }\n+        Assert.assertTrue(output.contains(\"An OpenApi definition file is required to generate the service.\"));\n+    }\n+\n+    @Test(description = \"Test openapi command with --input flag\", enabled = false)\n+    public void testOpenAPICmdInput() throws IOException {\n+        Path petstoreYaml = RES_DIR.resolve(Paths.get(\"petstore.yaml\"));\n+        String[] args = {\"--input\", petstoreYaml.toString()};\n+        OpenApiCmd openApiCommand = new OpenApiCmd(printStream);\n+        new CommandLine(openApiCommand).parseArgs(args);\n+        openApiCommand.execute();\n+\n+        String output = readOutput(true);\n+        Assert.assertTrue(output.contains(\"Following files were created.\"));\n+    }\n+\n+    @Test(description = \"Test openapi gen-service for successful service generation\", enabled = false)\n+    public void testSuccessfulServiceGeneration() throws IOException {\n+        Path petstoreYaml = RES_DIR.resolve(Paths.get(\"petstore.yaml\"));\n+        String[] args = {\"-i\", petstoreYaml.toString(), \"-o\", resourcePath.toString()};\n+        OpenApiCmd cmd = new OpenApiCmd(printStream);\n+        new CommandLine(cmd).parseArgs(args);\n+\n+        String output = \"\";\n+        try {\n+            cmd.execute();\n+        } catch (BLauncherException e) {\n+            output = e.getDetailedMessages().get(0);\n+        }\n+        Path expectedServiceFile = RES_DIR.resolve(Paths.get(\"expected_gen\", \"petstore_gen.bal\"));\n+        Path expectedSchemaFile = RES_DIR.resolve(Paths.get(\"expected_gen\", \"petstore_schema.bal\"));\n+\n+        Stream<String> expectedServiceLines = Files.lines(expectedServiceFile);\n+        String expectedServiceContent = expectedServiceLines.collect(Collectors.joining(\"\\n\"));\n+        expectedServiceLines.close();\n+\n+        Stream<String> expectedSchemaLines = Files.lines(expectedSchemaFile);\n+        String expectedSchemaContent = expectedSchemaLines.collect(Collectors.joining(\"\\n\"));\n+        expectedSchemaLines.close();\n+\n+        if (Files.exists(resourcePath.resolve(\"petstoreClient.bal\"))\n+                && Files.exists(resourcePath.resolve(\"petstoreService.bal\"))\n+                && Files.exists(resourcePath.resolve(\"schema.bal\"))) {\n+\n+//            Stream<String> serviceLines = Files.lines(resourcePath.resolve(\"petstoreService.bal\"));", "originalCommit": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwOTU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485509568", "bodyText": "Seems not used anywhere. Shall we remove this?", "author": "suganyasuven", "createdAt": "2020-09-09T10:33:15Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/cmd/Filter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.openapi.cmd;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This model use for storing the filter tags and operations details.\n+ */\n+public class Filter {\n+    private List<String> tags = new ArrayList<>();\n+    private List<String> operations = new ArrayList<>();\n+\n+    public Filter(List<String> tags, List<String> operations) {\n+        this.tags = tags;\n+        this.operations = operations;\n+    }\n+\n+    public List<String> getTags() {\n+        return tags;\n+    }\n+\n+    public void setTags(List<String> tags) {", "originalCommit": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMjQxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485512416", "bodyText": "What if resourcePath is null?", "author": "suganyasuven", "createdAt": "2020-09-09T10:38:46Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/cmd/OpenApiCmd.java", "diffHunk": "@@ -17,47 +17,300 @@\n  */\n package org.ballerinalang.openapi.cmd;\n \n+import org.ballerinalang.ballerina.openapi.convertor.OpenApiConverterException;\n+import org.ballerinalang.ballerina.openapi.convertor.service.OpenApiConverterUtils;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.openapi.CodeGenerator;\n+import org.ballerinalang.openapi.OpenApiMesseges;\n+import org.ballerinalang.openapi.exception.BallerinaOpenApiException;\n+import org.ballerinalang.openapi.utils.GeneratorConstants;\n import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n import picocli.CommandLine;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.ballerinalang.openapi.utils.GeneratorConstants.USER_DIR;\n \n /**\n- * Main class to implement \"openapi\" command for ballerina.\n- * This class will accept sub-commands and execute the relevant sub-command class as given to the sub-commands\n- * parameter.\n- *\n- * Command usage will change according to the sub-command.\n+ * Main class to implement \"openapi\" command for ballerina. Commands for Client Stub, Service file and OpenApi contract\n+ * generation.\n  */\n @CommandLine.Command(\n         name = \"openapi\",\n         description = \"Generates Ballerina service/client for OpenApi contract and OpenApi contract for Ballerina\" +\n-                \"Service.\",\n-        subcommands = {\n-                OpenApiGenContractCmd.class,\n-                OpenApiGenClientCmd.class,\n-                OpenApiGenServiceCmd.class\n-        }\n+                \"Service.\"\n )\n public class OpenApiCmd implements BLauncherCmd {\n     private static final String CMD_NAME = \"openapi\";\n     private PrintStream outStream;\n+    private Path executionPath = Paths.get(System.getProperty(USER_DIR));\n+    private Path targetOutputPath;\n \n     @CommandLine.Option(names = {\"-h\", \"--help\"}, hidden = true)\n     private boolean helpFlag;\n \n+    @CommandLine.Option(names = {\"-i\", \"--input\"}, description = \"Generating the client and service both files\")\n+    private boolean inputPath;\n+\n+    @CommandLine.Option(names = {\"-o\", \"--output\"}, description = \"Location of the generated Ballerina service, \" +\n+            \"client and model files.\")\n+    private String outputPath;\n+\n+    @CommandLine.Option(names = {\"--mode\"}, description = \"Generate only service file or client file according to the\" +\n+            \" given mode type\")\n+    private String mode;\n+\n+    @CommandLine.Option(names = {\"-s\", \"--service\"}, description = \"Service name that need to documented as openapi \" +\n+            \"contract\")\n+    private String service;\n+\n+    @CommandLine.Option(names = {\"-m\", \"--module\"}, description = \"Module name which service used to documented\")\n+    private  String module;\n+\n+    @CommandLine.Option(names = {\"--tags\"}, description = \"Tag that need to write service\")\n+    private String tags;\n+\n+    @CommandLine.Option(names = {\"--operations\"}, description = \"Operations that need to write service\")\n+    private String operations;\n+\n+    @CommandLine.Option(names = {\"--service-name\"}, description = \"Service name for generated files\")\n+    private String generatedServiceName;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n     public OpenApiCmd() {\n         this.outStream = System.err;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     public OpenApiCmd(PrintStream outStream) {\n         this.outStream = outStream;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     @Override\n     public void execute() {\n-        String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n-        outStream.println(commandUsageInfo);\n+        //User notification of using an experimental tool\n+        outStream.println(OpenApiMesseges.EXPERIMENTAL_FEATURE);\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+        //Check if cli input argument is present\n+        if (inputPath) {\n+            //Check if an OpenApi definition is provided\n+            if (argList == null) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+            // If given input is yaml contract, it generates service file and client stub\n+            // else if given ballerina service file it generates openapi contract file\n+            // else it generates error message to enter correct input file\n+            String fileName = argList.get(0);\n+            if (fileName.endsWith(\".yaml\")) {\n+                List<String> tag = new ArrayList<>();\n+                List<String> operation = new ArrayList<>();\n+                if (tags != null) {\n+                     tag.addAll(Arrays.asList(tags.split(\",\")));\n+                }\n+                if (operations != null) {\n+                    operation.addAll(Arrays.asList(operations.split(\",\")));\n+                }\n+                Filter filter = new Filter(tag, operation);\n+                openApiToBallerina(fileName, filter);\n+            } else if (fileName.endsWith(\".bal\")) {\n+                ballerinaToOpenApi(fileName);\n+            } else {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+        } else {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * This util method to generate openApi contract based on the given service ballerina file.\n+     * @param fileName  input resource file\n+     */\n+    private void ballerinaToOpenApi(String fileName) {\n+        final File balFile = new File(fileName);\n+        String serviceName = service;\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(balFile, this.targetOutputPath.toString());\n+        //ballerina openapi -i service.bal --serviceName serviceName --module exampleModul -o ./\n+        // Check service name it is mandatory\n+        if ((module != null) && (service != null)) {\n+            if (!checkModuleExist(module)) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_INVALID_MODULE);\n+            }\n+            try {\n+                OpenApiConverterUtils.generateOAS3DefinitionFromModule(module, serviceName,\n+                        targetOutputPath);\n+            } catch (Exception e) {\n+                throw LauncherUtils.createLauncherException(\"Error occurred when exporting openapi file. \" +\n+                        \"\\n\" + e.getMessage());\n+            }\n+        } else if (serviceName != null) {\n+            try {\n+                OpenApiConverterUtils.generateOAS3Definitions(resourcePath, targetOutputPath, serviceName);\n+            } catch (IOException | OpenApiConverterException e) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            }\n+        } else {\n+            try {\n+                OpenApiConverterUtils.generateOAS3DefinitionsAllService(resourcePath, targetOutputPath);\n+            } catch (IOException | OpenApiConverterException | CompilationFailedException e) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A util method for generating service and client stub using given contract file.\n+     * @param fileName input resource file\n+     */\n+    private void openApiToBallerina(String fileName, Filter filter) {\n+        CodeGenerator generator = new CodeGenerator();\n+        final File openApiFile = new File(fileName);\n+        String serviceName;\n+        if (generatedServiceName != null) {\n+            serviceName = generatedServiceName;\n+        } else {\n+            serviceName = openApiFile.getName().split(\"\\\\.\")[0];\n+        }\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(openApiFile, this.targetOutputPath.toString());\n+        if (mode != null) {\n+            switch (mode) {\n+                case \"service\":\n+                    generateServiceFile(generator, serviceName, resourcePath, filter);\n+                    break;\n+                case \"client\":\n+                    generatesClientFile(generator, serviceName, resourcePath, filter);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        } else {\n+            generateBothFiles(generator, serviceName, resourcePath, filter);\n+        }\n+    }\n+\n+    /**\n+     * A util to take the resource Path.\n+     * @param resourceFile      resource file path\n+     * @return path of given resource file\n+     */\n+    private Path getResourcePath(File resourceFile, String targetOutputPath) {\n+        Path resourcePath = null;\n+        Path relativePath = null;\n+        try {\n+            resourcePath = Paths.get(resourceFile.getCanonicalPath());\n+            relativePath =\n+                    Paths.get(new File(targetOutputPath).toURI().relativize(new File(resourcePath.toString()).toURI())\n+                            .getPath());\n+        } catch (IOException e) {\n+            throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+        }\n+        return relativePath;\n+    }\n+\n+    /**\n+     * A util to get the output Path.\n+     */\n+    private void getTargetOutputPath() {\n+        targetOutputPath = executionPath;\n+        if (this.outputPath != null) {\n+            if (Paths.get(outputPath).isAbsolute()) {\n+                targetOutputPath = Paths.get(outputPath);\n+            } else {\n+                targetOutputPath = Paths.get(targetOutputPath.toString(), outputPath);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A Util to Client generation.\n+     * @param generator         generator object\n+     * @param clientName        file name uses to name the generated file\n+     * @param resourcePath      resource Path\n+     */\n+    private void generatesClientFile(CodeGenerator generator, String clientName, Path resourcePath, Filter filter) {\n+\n+        try {\n+            generator.generateClient(executionPath.toString(), resourcePath.toString(), clientName,\n+                    targetOutputPath.toString(), filter);\n+        } catch (IOException | BallerinaOpenApiException e) {\n+            if (e.getLocalizedMessage() != null) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            } else {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.OPENAPI_CLIENT_EXCEPTION);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A util to generate service file.\n+     * @param generator     generator object\n+     * @param serviceName   service name uses for naming the generated file\n+     * @param resourcePath  resource Path\n+     */\n+    private void generateServiceFile(CodeGenerator generator, String serviceName, Path resourcePath, Filter filter) {\n+\n+        try {\n+            assert resourcePath != null;", "originalCommit": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxOTg4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485519887", "bodyText": "It will handle by an exception.", "author": "lnash94", "createdAt": "2020-09-09T10:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMjQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxNDg5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485514898", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param servicePath               resource path\n          \n          \n            \n            \n          \n          \n            \n                 * @param servicePath               resource path", "author": "azinneera", "createdAt": "2020-09-09T10:43:40Z", "path": "misc/openapi-ballerina/modules/ballerina-to-openapi-generator/src/main/java/org/ballerinalang/ballerina/openapi/convertor/service/OpenApiConverterUtils.java", "diffHunk": "@@ -385,9 +387,66 @@ public static void generateOAS3Definitions(Path servicePath, Path outPath, Strin\n         String openApiName = getOpenApiFileName(servicePath, serviceName);\n \n         String openApiSource = generateOAS3Definitions(balSource, serviceName);\n+        openApiName = checkDuplicateFiles(outPath, openApiName);\n         writeFile(outPath.resolve(openApiName), openApiSource);\n     }\n \n+    /**\n+     * This util for generating files when not available with specific service name.\n+     * @param servicePath               resource path", "originalCommit": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxODcyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485518728", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((module != null) && (service != null)) {\n          \n          \n            \n                    if (module != null && service != null) {", "author": "suganyasuven", "createdAt": "2020-09-09T10:51:15Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/cmd/OpenApiCmd.java", "diffHunk": "@@ -17,47 +17,300 @@\n  */\n package org.ballerinalang.openapi.cmd;\n \n+import org.ballerinalang.ballerina.openapi.convertor.OpenApiConverterException;\n+import org.ballerinalang.ballerina.openapi.convertor.service.OpenApiConverterUtils;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.openapi.CodeGenerator;\n+import org.ballerinalang.openapi.OpenApiMesseges;\n+import org.ballerinalang.openapi.exception.BallerinaOpenApiException;\n+import org.ballerinalang.openapi.utils.GeneratorConstants;\n import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n import picocli.CommandLine;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.ballerinalang.openapi.utils.GeneratorConstants.USER_DIR;\n \n /**\n- * Main class to implement \"openapi\" command for ballerina.\n- * This class will accept sub-commands and execute the relevant sub-command class as given to the sub-commands\n- * parameter.\n- *\n- * Command usage will change according to the sub-command.\n+ * Main class to implement \"openapi\" command for ballerina. Commands for Client Stub, Service file and OpenApi contract\n+ * generation.\n  */\n @CommandLine.Command(\n         name = \"openapi\",\n         description = \"Generates Ballerina service/client for OpenApi contract and OpenApi contract for Ballerina\" +\n-                \"Service.\",\n-        subcommands = {\n-                OpenApiGenContractCmd.class,\n-                OpenApiGenClientCmd.class,\n-                OpenApiGenServiceCmd.class\n-        }\n+                \"Service.\"\n )\n public class OpenApiCmd implements BLauncherCmd {\n     private static final String CMD_NAME = \"openapi\";\n     private PrintStream outStream;\n+    private Path executionPath = Paths.get(System.getProperty(USER_DIR));\n+    private Path targetOutputPath;\n \n     @CommandLine.Option(names = {\"-h\", \"--help\"}, hidden = true)\n     private boolean helpFlag;\n \n+    @CommandLine.Option(names = {\"-i\", \"--input\"}, description = \"Generating the client and service both files\")\n+    private boolean inputPath;\n+\n+    @CommandLine.Option(names = {\"-o\", \"--output\"}, description = \"Location of the generated Ballerina service, \" +\n+            \"client and model files.\")\n+    private String outputPath;\n+\n+    @CommandLine.Option(names = {\"--mode\"}, description = \"Generate only service file or client file according to the\" +\n+            \" given mode type\")\n+    private String mode;\n+\n+    @CommandLine.Option(names = {\"-s\", \"--service\"}, description = \"Service name that need to documented as openapi \" +\n+            \"contract\")\n+    private String service;\n+\n+    @CommandLine.Option(names = {\"-m\", \"--module\"}, description = \"Module name which service used to documented\")\n+    private  String module;\n+\n+    @CommandLine.Option(names = {\"--tags\"}, description = \"Tag that need to write service\")\n+    private String tags;\n+\n+    @CommandLine.Option(names = {\"--operations\"}, description = \"Operations that need to write service\")\n+    private String operations;\n+\n+    @CommandLine.Option(names = {\"--service-name\"}, description = \"Service name for generated files\")\n+    private String generatedServiceName;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n     public OpenApiCmd() {\n         this.outStream = System.err;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     public OpenApiCmd(PrintStream outStream) {\n         this.outStream = outStream;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     @Override\n     public void execute() {\n-        String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n-        outStream.println(commandUsageInfo);\n+        //User notification of using an experimental tool\n+        outStream.println(OpenApiMesseges.EXPERIMENTAL_FEATURE);\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+        //Check if cli input argument is present\n+        if (inputPath) {\n+            //Check if an OpenApi definition is provided\n+            if (argList == null) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+            // If given input is yaml contract, it generates service file and client stub\n+            // else if given ballerina service file it generates openapi contract file\n+            // else it generates error message to enter correct input file\n+            String fileName = argList.get(0);\n+            if (fileName.endsWith(\".yaml\")) {\n+                List<String> tag = new ArrayList<>();\n+                List<String> operation = new ArrayList<>();\n+                if (tags != null) {\n+                     tag.addAll(Arrays.asList(tags.split(\",\")));\n+                }\n+                if (operations != null) {\n+                    operation.addAll(Arrays.asList(operations.split(\",\")));\n+                }\n+                Filter filter = new Filter(tag, operation);\n+                openApiToBallerina(fileName, filter);\n+            } else if (fileName.endsWith(\".bal\")) {\n+                ballerinaToOpenApi(fileName);\n+            } else {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+        } else {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * This util method to generate openApi contract based on the given service ballerina file.\n+     * @param fileName  input resource file\n+     */\n+    private void ballerinaToOpenApi(String fileName) {\n+        final File balFile = new File(fileName);\n+        String serviceName = service;\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(balFile, this.targetOutputPath.toString());\n+        //ballerina openapi -i service.bal --serviceName serviceName --module exampleModul -o ./\n+        // Check service name it is mandatory\n+        if ((module != null) && (service != null)) {", "originalCommit": "aa66d136c026620ee37a7edfcc1255d139fa39c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b91d3c5e9ef8cc0f75254020f7ad4992b63c8588", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b91d3c5e9ef8cc0f75254020f7ad4992b63c8588", "message": "Update misc/openapi-ballerina/modules/ballerina-to-openapi-generator/src/main/java/org/ballerinalang/ballerina/openapi/convertor/service/OpenApiConverterUtils.java\n\nCo-authored-by: Asma Jabir <azinneera@gmail.com>", "committedDate": "2020-09-09T10:52:26Z", "type": "commit"}, {"oid": "3a2593ad6bff9dca5fac981dae4ee3b559e4a9c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a2593ad6bff9dca5fac981dae4ee3b559e4a9c1", "message": "Fix review suggestions", "committedDate": "2020-09-09T10:58:48Z", "type": "commit"}, {"oid": "316bd869a150c7d4477c034e24d0de718d95d7e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/316bd869a150c7d4477c034e24d0de718d95d7e9", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into openapi_commands", "committedDate": "2020-09-09T11:01:23Z", "type": "commit"}, {"oid": "f158d0f0c1281fa683ed6dd83f643d266d30edab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f158d0f0c1281fa683ed6dd83f643d266d30edab", "message": "Merge branch 'openapi_commands' of https://github.com/lnash94/ballerina-lang into openapi_commands", "committedDate": "2020-09-09T11:05:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMjM0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485532343", "bodyText": "Shall we consider using this regex as a constant, as I've noticed that this same pattern is duplicated in few other places as well. WDYT?", "author": "NipunaRanasinghe", "createdAt": "2020-09-09T11:17:36Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/utils/TypeExtractorUtil.java", "diffHunk": "@@ -396,8 +432,13 @@ public static String escapeIdentifier(String identifier) {\n             if (identifier.equals(\"error\")) {\n                 identifier = \"_error\";\n             } else {\n-                identifier = identifier.replaceAll(\"([\\\\\\\\?!<>*\\\\-=^+()_{}|.$])\", \"$1\");\n+                identifier = identifier.replaceAll(\"([\\\\[\\\\]\\\\\\\\?!<>@#&~`*\\\\-=^+();:\\\\_{}\\\\s|.$])\", \"\\\\\\\\$1\");", "originalCommit": "f158d0f0c1281fa683ed6dd83f643d266d30edab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzMzU4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25676#discussion_r485533586", "bodyText": "Shall we format these lines properly?", "author": "NipunaRanasinghe", "createdAt": "2020-09-09T11:20:04Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/cmd/OpenApiCmd.java", "diffHunk": "@@ -17,47 +17,300 @@\n  */\n package org.ballerinalang.openapi.cmd;\n \n+import org.ballerinalang.ballerina.openapi.convertor.OpenApiConverterException;\n+import org.ballerinalang.ballerina.openapi.convertor.service.OpenApiConverterUtils;\n+import org.ballerinalang.langserver.compiler.exception.CompilationFailedException;\n+import org.ballerinalang.openapi.CodeGenerator;\n+import org.ballerinalang.openapi.OpenApiMesseges;\n+import org.ballerinalang.openapi.exception.BallerinaOpenApiException;\n+import org.ballerinalang.openapi.utils.GeneratorConstants;\n import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n import picocli.CommandLine;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.ballerinalang.openapi.utils.GeneratorConstants.USER_DIR;\n \n /**\n- * Main class to implement \"openapi\" command for ballerina.\n- * This class will accept sub-commands and execute the relevant sub-command class as given to the sub-commands\n- * parameter.\n- *\n- * Command usage will change according to the sub-command.\n+ * Main class to implement \"openapi\" command for ballerina. Commands for Client Stub, Service file and OpenApi contract\n+ * generation.\n  */\n @CommandLine.Command(\n         name = \"openapi\",\n         description = \"Generates Ballerina service/client for OpenApi contract and OpenApi contract for Ballerina\" +\n-                \"Service.\",\n-        subcommands = {\n-                OpenApiGenContractCmd.class,\n-                OpenApiGenClientCmd.class,\n-                OpenApiGenServiceCmd.class\n-        }\n+                \"Service.\"\n )\n public class OpenApiCmd implements BLauncherCmd {\n     private static final String CMD_NAME = \"openapi\";\n     private PrintStream outStream;\n+    private Path executionPath = Paths.get(System.getProperty(USER_DIR));\n+    private Path targetOutputPath;\n \n     @CommandLine.Option(names = {\"-h\", \"--help\"}, hidden = true)\n     private boolean helpFlag;\n \n+    @CommandLine.Option(names = {\"-i\", \"--input\"}, description = \"Generating the client and service both files\")\n+    private boolean inputPath;\n+\n+    @CommandLine.Option(names = {\"-o\", \"--output\"}, description = \"Location of the generated Ballerina service, \" +\n+            \"client and model files.\")\n+    private String outputPath;\n+\n+    @CommandLine.Option(names = {\"--mode\"}, description = \"Generate only service file or client file according to the\" +\n+            \" given mode type\")\n+    private String mode;\n+\n+    @CommandLine.Option(names = {\"-s\", \"--service\"}, description = \"Service name that need to documented as openapi \" +\n+            \"contract\")\n+    private String service;\n+\n+    @CommandLine.Option(names = {\"-m\", \"--module\"}, description = \"Module name which service used to documented\")\n+    private  String module;\n+\n+    @CommandLine.Option(names = {\"--tags\"}, description = \"Tag that need to write service\")\n+    private String tags;\n+\n+    @CommandLine.Option(names = {\"--operations\"}, description = \"Operations that need to write service\")\n+    private String operations;\n+\n+    @CommandLine.Option(names = {\"--service-name\"}, description = \"Service name for generated files\")\n+    private String generatedServiceName;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n     public OpenApiCmd() {\n         this.outStream = System.err;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     public OpenApiCmd(PrintStream outStream) {\n         this.outStream = outStream;\n+        this.executionPath = Paths.get(System.getProperty(\"user.dir\"));\n     }\n \n     @Override\n     public void execute() {\n-        String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n-        outStream.println(commandUsageInfo);\n+        //User notification of using an experimental tool\n+        outStream.println(OpenApiMesseges.EXPERIMENTAL_FEATURE);\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+        //Check if cli input argument is present\n+        if (inputPath) {\n+            //Check if an OpenApi definition is provided\n+            if (argList == null) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+            // If given input is yaml contract, it generates service file and client stub\n+            // else if given ballerina service file it generates openapi contract file\n+            // else it generates error message to enter correct input file\n+            String fileName = argList.get(0);\n+            if (fileName.endsWith(\".yaml\")) {\n+                List<String> tag = new ArrayList<>();\n+                List<String> operation = new ArrayList<>();\n+                if (tags != null) {\n+                     tag.addAll(Arrays.asList(tags.split(\",\")));\n+                }\n+                if (operations != null) {\n+                    operation.addAll(Arrays.asList(operations.split(\",\")));\n+                }\n+                Filter filter = new Filter(tag, operation);\n+                openApiToBallerina(fileName, filter);\n+            } else if (fileName.endsWith(\".bal\")) {\n+                ballerinaToOpenApi(fileName);\n+            } else {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_MISSING_INPUT);\n+            }\n+        } else {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(getName());\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * This util method to generate openApi contract based on the given service ballerina file.\n+     * @param fileName  input resource file\n+     */\n+    private void ballerinaToOpenApi(String fileName) {\n+        final File balFile = new File(fileName);\n+        String serviceName = service;\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(balFile, this.targetOutputPath.toString());\n+        //ballerina openapi -i service.bal --serviceName serviceName --module exampleModul -o ./\n+        // Check service name it is mandatory\n+        if (module != null && service != null) {\n+            if (!checkModuleExist(module)) {\n+                throw LauncherUtils.createLauncherException(OpenApiMesseges.MESSAGE_FOR_INVALID_MODULE);\n+            }\n+            try {\n+                OpenApiConverterUtils.generateOAS3DefinitionFromModule(module, serviceName,\n+                        targetOutputPath);\n+            } catch (Exception e) {\n+                throw LauncherUtils.createLauncherException(\"Error occurred when exporting openapi file. \" +\n+                        \"\\n\" + e.getMessage());\n+            }\n+        } else if (serviceName != null) {\n+            try {\n+                OpenApiConverterUtils.generateOAS3Definitions(resourcePath, targetOutputPath, serviceName);\n+            } catch (IOException | OpenApiConverterException e) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            }\n+        } else {\n+            try {\n+                OpenApiConverterUtils.generateOAS3DefinitionsAllService(resourcePath, targetOutputPath);\n+            } catch (IOException | OpenApiConverterException | CompilationFailedException e) {\n+                throw LauncherUtils.createLauncherException(e.getLocalizedMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * A util method for generating service and client stub using given contract file.\n+     * @param fileName input resource file\n+     */\n+    private void openApiToBallerina(String fileName, Filter filter) {\n+        CodeGenerator generator = new CodeGenerator();\n+        final File openApiFile = new File(fileName);\n+        String serviceName;\n+        if (generatedServiceName != null) {\n+            serviceName = generatedServiceName;\n+        } else {\n+            serviceName = openApiFile.getName().split(\"\\\\.\")[0];\n+        }\n+        getTargetOutputPath();\n+        Path resourcePath = getResourcePath(openApiFile, this.targetOutputPath.toString());\n+        if (mode != null) {\n+            switch (mode) {\n+                case \"service\":\n+                    generateServiceFile(generator, serviceName, resourcePath, filter);\n+                    break;\n+                case \"client\":\n+                    generatesClientFile(generator, serviceName, resourcePath, filter);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        } else {\n+            generateBothFiles(generator, serviceName, resourcePath, filter);\n+        }\n+    }\n+\n+    /**\n+     * A util to take the resource Path.\n+     * @param resourceFile      resource file path\n+     * @return path of given resource file\n+     */\n+    private Path getResourcePath(File resourceFile, String targetOutputPath) {\n+        Path resourcePath = null;\n+        Path relativePath = null;\n+        try {\n+            resourcePath = Paths.get(resourceFile.getCanonicalPath());\n+            relativePath =\n+                    Paths.get(new File(targetOutputPath).toURI().relativize(new File(resourcePath.toString()).toURI())\n+                            .getPath());", "originalCommit": "f158d0f0c1281fa683ed6dd83f643d266d30edab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b0e058e0339010bfad44579a3952d333284411d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0e058e0339010bfad44579a3952d333284411d1", "message": "Fix review suggestions", "committedDate": "2020-09-09T11:40:07Z", "type": "commit"}, {"oid": "f63f0598accbb664552fd115580d1d710d83016d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f63f0598accbb664552fd115580d1d710d83016d", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:15:56Z", "type": "commit"}, {"oid": "8fc9dbe9a59c8032570dce8f3cef09bd8a0d1bf8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fc9dbe9a59c8032570dce8f3cef09bd8a0d1bf8", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:16:46Z", "type": "commit"}, {"oid": "81fe14e91a9a0264701a088923bf6338fee6edf2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81fe14e91a9a0264701a088923bf6338fee6edf2", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:17:28Z", "type": "commit"}, {"oid": "9c1d242dc01a14db87f0904b6ed14ac9a2144810", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c1d242dc01a14db87f0904b6ed14ac9a2144810", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:18:12Z", "type": "commit"}, {"oid": "af15c5cf3b8940c6dc03e6bcb1c773af1e58629f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af15c5cf3b8940c6dc03e6bcb1c773af1e58629f", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:18:59Z", "type": "commit"}, {"oid": "a08287b141bc48b32fc6ac6db6cdb9baaa45d549", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a08287b141bc48b32fc6ac6db6cdb9baaa45d549", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:19:40Z", "type": "commit"}, {"oid": "f6ef4636514fa9e4dc2d18d824987a123f82d6c2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6ef4636514fa9e4dc2d18d824987a123f82d6c2", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:21:15Z", "type": "commit"}, {"oid": "053131af602b3d385e9cbdedd3e75864ac87b2d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/053131af602b3d385e9cbdedd3e75864ac87b2d9", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:21:42Z", "type": "commit"}, {"oid": "5b61bd6dcd2202e66bf39a1ef6f5b35557a5b67c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b61bd6dcd2202e66bf39a1ef6f5b35557a5b67c", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:21:59Z", "type": "commit"}, {"oid": "2d6d5d34027d454f6689b9278320d137208e35ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d6d5d34027d454f6689b9278320d137208e35ab", "message": "Update cli/ballerina-tool/src/main/resources/cli-help/ballerina-openapi.help\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-09-09T12:22:18Z", "type": "commit"}, {"oid": "6cf7a149960e95d63e9baa4032f335a9eb04b4a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6cf7a149960e95d63e9baa4032f335a9eb04b4a1", "message": "Fix review suggestions", "committedDate": "2020-09-09T12:27:10Z", "type": "commit"}, {"oid": "20119b7a9703b8dca01bf20b62234e5cca1e2a4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20119b7a9703b8dca01bf20b62234e5cca1e2a4a", "message": "Fix resourcePath", "committedDate": "2020-09-10T05:29:32Z", "type": "commit"}, {"oid": "c638ebf80126264189cedc5a3fc80ca0bb14f346", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c638ebf80126264189cedc5a3fc80ca0bb14f346", "message": "Add Json file as input", "committedDate": "2020-09-10T12:11:10Z", "type": "commit"}]}