{"pr_number": 26386, "pr_title": "Fix path parameter URL in OpenAPI client generation", "pr_createdAt": "2020-10-16T10:53:28Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386", "timeline": [{"oid": "318f1670410848dd59236bbb336b405c4d1831df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/318f1670410848dd59236bbb336b405c4d1831df", "message": "Fix client generation path parameters", "committedDate": "2020-10-16T10:29:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NjAxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296011", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null != path.getParameters() && path.getParameters().size() > 0) {\n          \n          \n            \n                    if (path.getParameters() != null && path.getParameters().size() > 0) {", "author": "praveennadarajah", "createdAt": "2020-10-16T11:01:43Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {", "originalCommit": "318f1670410848dd59236bbb336b405c4d1831df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NjU1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296552", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n          \n          \n            \n                                .anyMatch(parameter -> parameter.getIn() != null) && parameter.getIn().equals(\"path\"));", "author": "praveennadarajah", "createdAt": "2020-10-16T11:02:27Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));", "originalCommit": "318f1670410848dd59236bbb336b405c4d1831df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5Njk2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506296963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (null != operation.getParameters() && operation.getParameters().size() > 0) {\n          \n          \n            \n                            if (operation.getParameters() != null && operation.getParameters().size() > 0) {", "author": "praveennadarajah", "createdAt": "2020-10-16T11:02:57Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (null != operation.getParameters() && operation.getParameters().size() > 0) {", "originalCommit": "318f1670410848dd59236bbb336b405c4d1831df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NzMyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506297327", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n          \n          \n            \n                                        .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "author": "praveennadarajah", "createdAt": "2020-10-16T11:03:25Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (null != path.getParameters() && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (null != operation.getParameters() && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream()\n+                            .anyMatch(parameter -> null != parameter.getIn() && parameter.getIn().equals(\"path\"));", "originalCommit": "318f1670410848dd59236bbb336b405c4d1831df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/054e9791b0ffd39a4c7f13fef74ddbf195d9ea70", "message": "Fix review suggestions", "committedDate": "2020-10-16T11:10:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyMzUyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506323527", "bodyText": "Shall we assign the string \"path\"  to private static final variable and use it here instead of hard coding the value directly?\nprivate static final String PATH = \"path\"", "author": "praveennadarajah", "createdAt": "2020-10-16T11:36:12Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "originalCommit": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyNDIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506324215", "bodyText": "Do the same change here as well.", "author": "praveennadarajah", "createdAt": "2020-10-16T11:37:02Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +127,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream()\n+                    .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream()\n+                            .anyMatch(parameter -> parameter.getIn() != null && parameter.getIn().equals(\"path\"));", "originalCommit": "054e9791b0ffd39a4c7f13fef74ddbf195d9ea70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9", "message": "Add path value as constant", "committedDate": "2020-10-16T12:08:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506362001", "bodyText": "IMO better to do an early return in here. WDYT?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (path.readOperations().size() > 0) {\n          \n          \n            \n                        return path.readOperations().stream().anyMatch(operation -> {\n          \n          \n            \n                            if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n          \n          \n            \n                                return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n          \n          \n            \n                                        parameter.getIn().equals(GeneratorConstants.PATH));\n          \n          \n            \n                            }\n          \n          \n            \n                            return false;\n          \n          \n            \n                        });\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    if (path.readOperations().isEmpty()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return path.readOperations().stream().anyMatch(operation -> {\n          \n          \n            \n                        if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n          \n          \n            \n                            return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n          \n          \n            \n                                    parameter.getIn().equals(GeneratorConstants.PATH));\n          \n          \n            \n                        }\n          \n          \n            \n                        return false;\n          \n          \n            \n                    });\n          \n          \n            \n                }", "author": "NipunaRanasinghe", "createdAt": "2020-10-16T12:26:36Z", "path": "misc/openapi-ballerina/modules/openapi-to-ballerina-generator/src/main/java/org/ballerinalang/openapi/model/BallerinaOpenApi.java", "diffHunk": "@@ -127,8 +128,37 @@ private void setPaths(OpenAPI openAPI) throws BallerinaOpenApiException {\n                     }\n                 });\n             }\n-            paths.add(new AbstractMap.SimpleEntry<>(path.getKey(), balPath));\n+            String resourcePath;\n+            // Use ballerina string templating if there are path params.\n+            if (hasPathParams(path.getValue())) {\n+                resourcePath = \"string `\" + path.getKey().replace(\"{\", \"${\") + \"`\";\n+            } else {\n+                resourcePath = \"\\\"\" + path.getKey() + \"\\\"\";\n+            }\n+            paths.add(new AbstractMap.SimpleEntry<>(resourcePath, balPath));\n+        }\n+    }\n+\n+    /**\n+     * Checks if there are any path parameters in the operations.\n+     * @param path  The path item in the OpenAPI spec.\n+     * @return True if there are path parameters, else false.\n+     */\n+    private boolean hasPathParams(PathItem path) {\n+        if (path.getParameters() != null && path.getParameters().size() > 0) {\n+            return path.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null && parameter.getIn()\n+                    .equals(GeneratorConstants.PATH));\n+        }\n+        if (path.readOperations().size() > 0) {\n+            return path.readOperations().stream().anyMatch(operation -> {\n+                if (operation.getParameters() != null && operation.getParameters().size() > 0) {\n+                    return operation.getParameters().stream().anyMatch(parameter -> parameter.getIn() != null &&\n+                            parameter.getIn().equals(GeneratorConstants.PATH));\n+                }\n+                return false;\n+            });\n         }\n+        return false;", "originalCommit": "a6ef2dad221fcbd0bacb842c59acd3ed7c685aa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MzAzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506363038", "bodyText": "Also, don't we need to validate whether path.readOperations() is null ?", "author": "NipunaRanasinghe", "createdAt": "2020-10-16T12:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwMTkwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26386#discussion_r506501905", "bodyText": "yeah we don't need to validate with null :) it return list", "author": "lnash94", "createdAt": "2020-10-16T14:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2MjAwMQ=="}], "type": "inlineReview"}, {"oid": "1e08ee8dcad4e1f29a3b473db9cd14b0a948b3d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e08ee8dcad4e1f29a3b473db9cd14b0a948b3d6", "message": "Fix review suggestions", "committedDate": "2020-10-16T14:42:41Z", "type": "commit"}]}