{"pr_number": 25082, "pr_title": "Support match-stmt for const-pattern and var capture-binding-pattern", "pr_createdAt": "2020-08-02T16:45:19Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082", "timeline": [{"oid": "c50f5abdfb07a552f3789dc4ecff0dba846bf790", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c50f5abdfb07a552f3789dc4ecff0dba846bf790", "message": "Fix checkstyle", "committedDate": "2020-08-04T05:07:11Z", "type": "forcePushed"}, {"oid": "8211723e4decb1cefa41565a0ff823e8ef84b0df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8211723e4decb1cefa41565a0ff823e8ef84b0df", "message": "Fix checkstyle", "committedDate": "2020-08-04T07:23:53Z", "type": "forcePushed"}, {"oid": "a34f66f820ecfb1785f6e8f9d3350f06de28f928", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a34f66f820ecfb1785f6e8f9d3350f06de28f928", "message": "Fix checkstyle", "committedDate": "2020-08-04T07:29:12Z", "type": "forcePushed"}, {"oid": "0ed700297b5a0d26e88423163ba329e76ba9efc9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ed700297b5a0d26e88423163ba329e76ba9efc9", "message": "Change the transformer", "committedDate": "2020-08-05T06:08:12Z", "type": "forcePushed"}, {"oid": "46be43c1a79d297035fbcb70fac2b3fee3788e29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46be43c1a79d297035fbcb70fac2b3fee3788e29", "message": "Handle NPE in match expr", "committedDate": "2020-08-06T11:37:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1ODk0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r466858945", "bodyText": "shall we remove the last part .available", "author": "rdhananjaya", "createdAt": "2020-08-07T07:02:08Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -395,6 +395,8 @@\n     MATCH_STMT_UNREACHABLE_PATTERN(\"match.stmt.unreachable.pattern\"),\n     MATCH_STMT_UNMATCHED_PATTERN(\"match.stmt.unmatched.pattern\"),\n     MATCH_STMT_PATTERN_ALWAYS_MATCHES(\"match.stmt.pattern.always.matches\"),\n+    MATCH_STMT_UNREACHABLE_PATTERN_AVAILABLE(\"match.stmt.unreachable.pattern.available\"),", "originalCommit": "a0b87714257a4e2b2eeac934c12e9d497fcb762c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3OTYwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r467679608", "bodyText": "changed", "author": "KavinduZoysa", "createdAt": "2020-08-10T04:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1ODk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDEzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r466860137", "bodyText": "can't we use the rewrite method used in line:452 here", "author": "rdhananjaya", "createdAt": "2020-08-07T07:05:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ConstantPropagation.java", "diffHunk": "@@ -440,6 +446,38 @@ public void visit(BLangCompoundAssignment compoundAssignNode) {\n         result = compoundAssignNode;\n     }\n \n+    @Override\n+    public void visit(BLangMatchStatement matchStatement) {\n+        matchStatement.expr = rewrite(matchStatement.expr);\n+        rewrite(matchStatement.matchClauses);\n+        result = matchStatement;\n+    }\n+\n+    @Override\n+    public void visit(BLangMatchClause matchClause) {\n+        for (BLangMatchPattern matchPattern : matchClause.matchPatterns) {", "originalCommit": "a0b87714257a4e2b2eeac934c12e9d497fcb762c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3OTkyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r467679924", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-08-10T04:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2MDEzNw=="}], "type": "inlineReview"}, {"oid": "b0316b554dc00646fb2930112c3a7759dedffb50", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0316b554dc00646fb2930112c3a7759dedffb50", "message": "Fix failure tests", "committedDate": "2020-08-10T04:08:41Z", "type": "forcePushed"}, {"oid": "af6731a8a5a833d8d13962e734f29ede020572f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af6731a8a5a833d8d13962e734f29ede020572f0", "message": "Fix failure tests", "committedDate": "2020-08-10T05:39:22Z", "type": "forcePushed"}, {"oid": "15f540aa01b336ac809c0e9e66cb1fdf7012c6d0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15f540aa01b336ac809c0e9e66cb1fdf7012c6d0", "message": "Test syntax errors", "committedDate": "2020-08-17T05:41:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4ODU5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r479888592", "bodyText": "Shall we use Swan Lake instead?", "author": "MaryamZi", "createdAt": "2020-08-31T05:00:52Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/clauses/MatchClauseNode.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.clauses;\n+\n+import org.ballerinalang.model.tree.Node;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.MatchGuard;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.statements.BlockStatementNode;\n+\n+import java.util.List;\n+\n+/**\n+ * The interface with the APIs to implement the match-clause.\n+ *\n+ * @since 2.0.0", "originalCommit": "15f540aa01b336ac809c0e9e66cb1fdf7012c6d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyMjE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r481622176", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-09-02T03:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4ODU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4OTQ3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r479889477", "bodyText": "If this method is usually called with true as the argument (that's what the name implies to me) shall we remove the param and have the implementation set true?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setLastClause(boolean isLastClause) {\n          \n          \n            \n                    this.isLastClause = isLastClause;\n          \n          \n            \n                }\n          \n          \n            \n                public void setLastClause() {\n          \n          \n            \n                    this.isLastClause = true;\n          \n          \n            \n                }", "author": "MaryamZi", "createdAt": "2020-08-31T05:04:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.clauses;\n+\n+import org.ballerinalang.model.clauses.MatchClauseNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.MatchGuard;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.statements.BlockStatementNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMatchGuard;\n+import org.wso2.ballerinalang.compiler.tree.matchpatterns.BLangMatchPattern;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBlockStmt;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since 2.0.0\n+ */\n+public class BLangMatchClause extends BLangNode implements MatchClauseNode {\n+\n+    public List<BLangMatchPattern> matchPatterns = new ArrayList<>();\n+    public BLangMatchGuard matchGuard;\n+    public BLangBlockStmt blockStmt;\n+    public boolean isLastClause;\n+    public BLangExpression expr; // This is used to keep the expression of match statement.\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.MATCH_CLAUSE;\n+    }\n+\n+    @Override\n+    public BLangMatchGuard getMatchGuard() {\n+        return matchGuard;\n+    }\n+\n+    @Override\n+    public void setMatchGuard(MatchGuard matchGuard) {\n+        this.matchGuard = (BLangMatchGuard) matchGuard;\n+    }\n+\n+    @Override\n+    public BlockStatementNode getBLockStatement() {\n+        return blockStmt;\n+    }\n+\n+    @Override\n+    public void setBlockStatement(BlockStatementNode blockStatement) {\n+        this.blockStmt = (BLangBlockStmt) blockStatement;\n+    }\n+\n+    @Override\n+    public List<? extends MatchPatternNode> getMatchPatterns() {\n+        return matchPatterns;\n+    }\n+\n+    @Override\n+    public void addMatchPattern(MatchPatternNode matchPattern) {\n+        matchPatterns.add((BLangMatchPattern) matchPattern);\n+    }\n+\n+    @Override\n+    public boolean isLastClause() {\n+        return isLastClause;\n+    }\n+\n+    @Override\n+    public void setLastClause(boolean isLastClause) {\n+        this.isLastClause = isLastClause;\n+    }", "originalCommit": "15f540aa01b336ac809c0e9e66cb1fdf7012c6d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyMzI4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r481623288", "bodyText": "Please check #25082 (comment)", "author": "KavinduZoysa", "createdAt": "2020-09-02T03:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4OTQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDQyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r479920427", "bodyText": "If this method is usually called with true as the argument shall we remove the param and have the implementation set true?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setLastClause(boolean isLastClause) {\n          \n          \n            \n                    this.isLastClause = isLastClause;\n          \n          \n            \n                }\n          \n          \n            \n                public void setLastClause() {\n          \n          \n            \n                    this.isLastClause = true;\n          \n          \n            \n                }", "author": "MaryamZi", "createdAt": "2020-08-31T06:30:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/clauses/BLangMatchClause.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.clauses;\n+\n+import org.ballerinalang.model.clauses.MatchClauseNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.MatchGuard;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.statements.BlockStatementNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangMatchGuard;\n+import org.wso2.ballerinalang.compiler.tree.matchpatterns.BLangMatchPattern;\n+import org.wso2.ballerinalang.compiler.tree.statements.BLangBlockStmt;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since 2.0.0\n+ */\n+public class BLangMatchClause extends BLangNode implements MatchClauseNode {\n+\n+    public List<BLangMatchPattern> matchPatterns = new ArrayList<>();\n+    public BLangMatchGuard matchGuard;\n+    public BLangBlockStmt blockStmt;\n+    public boolean isLastClause;\n+    public BLangExpression expr; // This is used to keep the expression of match statement.\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.MATCH_CLAUSE;\n+    }\n+\n+    @Override\n+    public BLangMatchGuard getMatchGuard() {\n+        return matchGuard;\n+    }\n+\n+    @Override\n+    public void setMatchGuard(MatchGuard matchGuard) {\n+        this.matchGuard = (BLangMatchGuard) matchGuard;\n+    }\n+\n+    @Override\n+    public BlockStatementNode getBLockStatement() {\n+        return blockStmt;\n+    }\n+\n+    @Override\n+    public void setBlockStatement(BlockStatementNode blockStatement) {\n+        this.blockStmt = (BLangBlockStmt) blockStatement;\n+    }\n+\n+    @Override\n+    public List<? extends MatchPatternNode> getMatchPatterns() {\n+        return matchPatterns;\n+    }\n+\n+    @Override\n+    public void addMatchPattern(MatchPatternNode matchPattern) {\n+        matchPatterns.add((BLangMatchPattern) matchPattern);\n+    }\n+\n+    @Override\n+    public boolean isLastClause() {\n+        return isLastClause;\n+    }\n+\n+    @Override\n+    public void setLastClause(boolean isLastClause) {\n+        this.isLastClause = isLastClause;\n+    }", "originalCommit": "15f540aa01b336ac809c0e9e66cb1fdf7012c6d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMDg4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r479930886", "bodyText": "Shall we replace the streams since we're updating this bit?", "author": "MaryamZi", "createdAt": "2020-08-31T06:52:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -850,23 +922,23 @@ private boolean analyzeStaticMatchPatterns(BLangMatch matchStmt) {\n             return false;\n         }\n         List<BLangMatchStaticBindingPatternClause> matchedPatterns = new ArrayList<>();\n-        for (BLangMatchStaticBindingPatternClause pattern : matchStmt.getStaticPatternClauses()) {\n-            analyzeNode(pattern, env);\n+        for (BLangMatchStaticBindingPatternClause patternClause : matchStmt.getStaticPatternClauses()) {\n+            analyzeNode(patternClause, env);\n \n             List<BType> matchedExpTypes = matchStmt.exprTypes\n                     .stream()\n-                    .filter(exprType -> isValidStaticMatchPattern(exprType, pattern.literal))\n+                    .filter(exprType -> isValidStaticMatchPattern(exprType, patternClause.literal))", "originalCommit": "15f540aa01b336ac809c0e9e66cb1fdf7012c6d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyMjA4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r481622087", "bodyText": "changed.", "author": "KavinduZoysa", "createdAt": "2020-09-02T03:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMDg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMjIxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r479932214", "bodyText": "Can we call analyze instead of directly calling accept?", "author": "MaryamZi", "createdAt": "2020-08-31T06:55:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2234,12 +2241,69 @@ public void visit(BLangMatch matchNode) {\n         matchNode.exprTypes = exprTypes;\n     }\n \n+    @Override\n+    public void visit(BLangMatchStatement matchStatement) {\n+        typeChecker.checkExpr(matchStatement.expr, env, symTable.noType);\n+        matchStatement.matchClauses.forEach(matchClause -> matchClause.accept(this));", "originalCommit": "15f540aa01b336ac809c0e9e66cb1fdf7012c6d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyMjAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r481622035", "bodyText": "changed.", "author": "KavinduZoysa", "createdAt": "2020-09-02T03:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMjIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMjg4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r479932880", "bodyText": "What do we mean by last pattern and what does it mean to say there is no last pattern present?", "author": "MaryamZi", "createdAt": "2020-08-31T06:57:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -525,6 +527,36 @@ public void visit(BLangIf ifNode) {\n         this.uninitializedVars = mergeUninitializedVars(ifResult.uninitializedVars, elseResult.uninitializedVars);\n     }\n \n+    @Override\n+    public void visit(BLangMatchStatement matchStatement) {\n+        analyzeNode(matchStatement.expr, env);\n+\n+        Map<BSymbol, InitStatus> unInitVars = new HashMap<>();\n+        BranchResult lastClauseResult = null;\n+        for (BLangMatchClause matchClause : matchStatement.matchClauses) {\n+            if (matchClause.isLastClause) {\n+                lastClauseResult = analyzeBranch(matchClause, env);\n+            } else {\n+                BranchResult result = analyzeBranch(matchClause, env);\n+                // If the flow was terminated within the block, then that branch should not be considered for\n+                // analyzing the data-flow for the downstream code.\n+                if (result.flowTerminated) {\n+                    continue;\n+                }\n+                unInitVars = mergeUninitializedVars(unInitVars, result.uninitializedVars);\n+            }\n+        }\n+\n+        if (lastClauseResult != null) {\n+            // only if last pattern is present, uninitializedVars should be updated", "originalCommit": "15f540aa01b336ac809c0e9e66cb1fdf7012c6d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyMjY2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r481622663", "bodyText": "This part is taken from the previous implementation since this is handled in a different way in the new implementation, this code is deleted.", "author": "KavinduZoysa", "createdAt": "2020-09-02T03:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMjg4MA=="}], "type": "inlineReview"}, {"oid": "5c19a4c82620c56edfd673791e43ca269b9053e4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c19a4c82620c56edfd673791e43ca269b9053e4", "message": "Fix suggestions", "committedDate": "2020-09-02T03:26:26Z", "type": "forcePushed"}, {"oid": "ae044361fc9c805bf9f1b3d5c993d4b8dc69e6e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae044361fc9c805bf9f1b3d5c993d4b8dc69e6e0", "message": "Fix suggestions", "committedDate": "2020-09-02T12:47:55Z", "type": "forcePushed"}, {"oid": "5b78a5aef48abd2837e13b2d8a43ed3544dcf42a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b78a5aef48abd2837e13b2d8a43ed3544dcf42a", "message": "Fix suggestions", "committedDate": "2020-09-02T13:08:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNDQ4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r485504486", "bodyText": "Do we have an issue for this?", "author": "MaryamZi", "createdAt": "2020-09-09T10:23:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/statements/BLangMatchStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.statements;\n+\n+import org.ballerinalang.model.clauses.MatchClauseNode;\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.statements.MatchStatementNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.clauses.BLangMatchClause;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangMatchStatement extends BLangStatement implements MatchStatementNode {\n+    public BLangExpression expr; // TODO : replace with new node `action|expression`", "originalCommit": "5b78a5aef48abd2837e13b2d8a43ed3544dcf42a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwOTQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25082#discussion_r485509495", "bodyText": "This is the related issue #24849", "author": "KavinduZoysa", "createdAt": "2020-09-09T10:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNDQ4Ng=="}], "type": "inlineReview"}, {"oid": "fab78a560ec373c11f590b5c0ca05eb822c7444c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fab78a560ec373c11f590b5c0ca05eb822c7444c", "message": "Fix suggestions", "committedDate": "2020-09-10T13:56:15Z", "type": "forcePushed"}, {"oid": "4488f00ce4972cedaebdb899a3b5e7475fdb2bcc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4488f00ce4972cedaebdb899a3b5e7475fdb2bcc", "message": "Fix build failure", "committedDate": "2020-09-10T14:26:34Z", "type": "forcePushed"}, {"oid": "a48a43d578e0fb7a13989f4413190dd8c7eca9c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a48a43d578e0fb7a13989f4413190dd8c7eca9c9", "message": "Fix build failure", "committedDate": "2020-09-11T19:02:56Z", "type": "forcePushed"}, {"oid": "e9a304d111fb5ec35e63fff9e494c2b731af62d8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9a304d111fb5ec35e63fff9e494c2b731af62d8", "message": "Fix build failure", "committedDate": "2020-09-11T19:42:23Z", "type": "forcePushed"}, {"oid": "ff0f894969b9f613cb1bb190f498bbded4fe55db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff0f894969b9f613cb1bb190f498bbded4fe55db", "message": "Fix import errors", "committedDate": "2020-09-12T03:45:22Z", "type": "forcePushed"}, {"oid": "f28f031c153701cae21a610391e705e0431a3406", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f28f031c153701cae21a610391e705e0431a3406", "message": "Fix import errors", "committedDate": "2020-09-14T04:50:07Z", "type": "forcePushed"}, {"oid": "ec543fe7cbe7fe7c91474821ae82605c3b0d585b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec543fe7cbe7fe7c91474821ae82605c3b0d585b", "message": "Create the AST", "committedDate": "2020-09-15T03:38:59Z", "type": "commit"}, {"oid": "b3128f68b608a55dc05c718f0b085e33ae6fccde", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3128f68b608a55dc05c718f0b085e33ae6fccde", "message": "Add the transformation", "committedDate": "2020-09-15T03:47:31Z", "type": "commit"}, {"oid": "8a0706d970036ef434b71d940ec5a3d8b47cde36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a0706d970036ef434b71d940ec5a3d8b47cde36", "message": "Change the compiler phases", "committedDate": "2020-09-15T03:59:11Z", "type": "commit"}, {"oid": "574e34294ce40316a06879c299eb77d27a409047", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/574e34294ce40316a06879c299eb77d27a409047", "message": "Handle the errors", "committedDate": "2020-09-15T03:59:11Z", "type": "commit"}, {"oid": "c63f5618722597f59e04f777fe15c08ea6c3467a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c63f5618722597f59e04f777fe15c08ea6c3467a", "message": "Add the tests", "committedDate": "2020-09-15T03:59:11Z", "type": "commit"}, {"oid": "72ca615b43bff902db919201077af19f349b1348", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72ca615b43bff902db919201077af19f349b1348", "message": "Add license headers", "committedDate": "2020-09-15T03:59:11Z", "type": "commit"}, {"oid": "42d74421896e089de79b87b80644c824e4093ad2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/42d74421896e089de79b87b80644c824e4093ad2", "message": "Fix checkstyle", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "93af60582061bbc5d1c6681efc5677a724a3f46c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93af60582061bbc5d1c6681efc5677a724a3f46c", "message": "Fix bugs", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "5440c99deba010c7f2f01201418085192e1c85ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5440c99deba010c7f2f01201418085192e1c85ed", "message": "Add missing docs", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "78bd96195c6cf9c9c1149a39ef13bc4613544cf0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78bd96195c6cf9c9c1149a39ef13bc4613544cf0", "message": "Change the transformer", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "d805c3e13abfa286abd7756ff40dbf5314dc59eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d805c3e13abfa286abd7756ff40dbf5314dc59eb", "message": "Change the Nodecloner", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "e9a2d0a0dfb3594af071ec4b3602967c19389d2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9a2d0a0dfb3594af071ec4b3602967c19389d2a", "message": "Disable lang server tests", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "8130601d3d24bdca5132f3a5f30bdb55f8cf8bd3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8130601d3d24bdca5132f3a5f30bdb55f8cf8bd3", "message": "Handle NPE in match expr", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "f24bb7deb09296c94c305d866e1dc947e73302d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f24bb7deb09296c94c305d866e1dc947e73302d1", "message": "Add nill literla support", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "b7ff4934ba022c79fdd963746742c8b4aee07201", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7ff4934ba022c79fdd963746742c8b4aee07201", "message": "Fix failure tests", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "864c6921360f521a4b7fcc6d4318b07b26e1af6e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/864c6921360f521a4b7fcc6d4318b07b26e1af6e", "message": "Test syntax errors", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "1fcada5f7d7de3f10b7a0f25363bbf9c3f93e374", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1fcada5f7d7de3f10b7a0f25363bbf9c3f93e374", "message": "Fix suggestions", "committedDate": "2020-09-15T04:02:30Z", "type": "commit"}, {"oid": "a3bfce4619761bc0f9e2bc7b9f5357d15e792cd4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3bfce4619761bc0f9e2bc7b9f5357d15e792cd4", "message": "Fix build failure", "committedDate": "2020-09-15T04:05:11Z", "type": "commit"}, {"oid": "d42b7d6233713dacecc3dedee9d3eb0dce278591", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d42b7d6233713dacecc3dedee9d3eb0dce278591", "message": "Fix import errors", "committedDate": "2020-09-15T04:05:11Z", "type": "commit"}, {"oid": "670af994a99f9980916c07c46b65cf60c09cba0b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/670af994a99f9980916c07c46b65cf60c09cba0b", "message": "Rebase with master", "committedDate": "2020-09-15T05:16:31Z", "type": "forcePushed"}, {"oid": "d58689d16b99307dd2d7790310f34af41ff9c52d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d58689d16b99307dd2d7790310f34af41ff9c52d", "message": "Rebase with master", "committedDate": "2020-09-15T05:30:17Z", "type": "commit"}, {"oid": "d58689d16b99307dd2d7790310f34af41ff9c52d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d58689d16b99307dd2d7790310f34af41ff9c52d", "message": "Rebase with master", "committedDate": "2020-09-15T05:30:17Z", "type": "forcePushed"}]}