{"pr_number": 22320, "pr_title": "Enable parallel run of strands where global locks arent shared inside locks", "pr_createdAt": "2020-03-30T15:46:44Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMjQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r400812497", "bodyText": "This formating looks weird. Can you check this?", "author": "hasithaa", "createdAt": "2020-03-31T10:39:31Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ *  *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "f3ea633c53d30822730b04dd30c3777533e25114", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMTYxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r400901613", "bodyText": "Will check and update", "author": "dulvinw", "createdAt": "2020-03-31T13:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMjQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxNTUwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r401015501", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-31T15:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMjQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMzM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r402823360", "bodyText": "lockName not used anymore", "author": "KRVPerera", "createdAt": "2020-04-03T08:20:26Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLockStore.java", "diffHunk": "@@ -50,12 +50,13 @@ public BLock getLockFromMap(String lockName) {\n     }\n \n     public void panicIfInLock(String lockName, Strand strand) {", "originalCommit": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3Nzc1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r402877759", "bodyText": "+1 will fix", "author": "dulvinw", "createdAt": "2020-04-03T09:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMzM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NzQzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r402877439", "bodyText": "should this be currentLockSetId instead of currentLockId  ?", "author": "KRVPerera", "createdAt": "2020-04-03T09:28:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize Locks.\n+ *\n+ * @since 1.2.1\n+ */\n+public class BIRLockOptimizer extends BIRVisitor {\n+\n+    private List<BIRTerminator.Lock> lockList = new ArrayList<>();\n+    private Map<BIRTerminator.Lock, Integer> lockToSetMap = new HashMap<>();\n+    private Map<Integer, List<BIRTerminator.Lock>> setToLockMap = new HashMap<>();\n+    private int setId = -1;\n+\n+    public void optimizeNode(BIRNode node) {\n+        // Collect lock nodes\n+        node.accept(this);\n+\n+        // Identify disjoint locks\n+        optimizeLocks();\n+    }\n+\n+    private void optimizeLocks() {\n+        analyzeLocks();\n+        propagateLocks();\n+    }\n+\n+    private void propagateLocks() {\n+        for (Map.Entry<Integer, List<BIRTerminator.Lock>> entry : setToLockMap.entrySet()) {\n+            Integer lockId = entry.getKey();\n+            for (BIRTerminator.Lock lock : entry.getValue()) {\n+                lock.lockId = lockId;\n+            }\n+        }\n+    }\n+\n+    private void analyzeLocks() {\n+        for (int lockListIndex = 0; lockListIndex < lockList.size(); lockListIndex++) {\n+            if (!lockToSetMap.containsKey(lockList.get(lockListIndex))) {\n+                analyzeUnvisitedLock(lockListIndex);\n+            } else {\n+                analyzeVisitedLock(lockListIndex);\n+            }\n+        }\n+    }\n+\n+    private void analyzeVisitedLock(int lockListIndex) {\n+        BIRTerminator.Lock currentLock = lockList.get(lockListIndex);\n+        int previousSetId = setId;\n+        Integer currentSetIdLocal = lockToSetMap.get(currentLock);\n+        List<BIRTerminator.Lock> currentSet = setToLockMap.get(currentSetIdLocal);\n+\n+        // Use the setId of the current one for the other shared locks\n+        setId = currentSetIdLocal;\n+        populateLockSet(currentSet, currentLock, lockListIndex);\n+        setId = previousSetId;\n+    }\n+\n+    private void analyzeUnvisitedLock(int lockListIndex) {\n+        BIRTerminator.Lock currentLock = lockList.get(lockListIndex);\n+        List<BIRTerminator.Lock> currentSet = new LinkedList<>();\n+\n+        // Add to the maps for the current unvisited lock.\n+        lockToSetMap.put(currentLock, ++setId);\n+\n+        // Compare with the rest of the locks.\n+        currentSet.add(currentLock);\n+\n+        populateLockSet(currentSet, currentLock, lockListIndex);\n+\n+        setToLockMap.put(setId, currentSet);\n+    }\n+\n+    private void populateLockSet(List<BIRTerminator.Lock> currentSet, BIRTerminator.Lock currentLock,\n+            int lockListIndex) {\n+        for (int i = (lockListIndex + 1); i < lockList.size(); i++) {\n+            BIRTerminator.Lock comparedLock = lockList.get(i);\n+            Set<BIRNode.BIRGlobalVariableDcl> globalVarSetOfComparedLock = comparedLock.lockVariables;\n+\n+            if (isSharedLock(currentLock, globalVarSetOfComparedLock)\n+                && isNotInSameSet(currentLock, comparedLock)) {\n+                populateLockSet(currentSet, comparedLock);\n+            }\n+        }\n+    }\n+\n+    private boolean isNotInSameSet(BIRTerminator.Lock currentLock, BIRTerminator.Lock comparedLock) {\n+        Integer currentLockId = lockToSetMap.get(currentLock);", "originalCommit": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMTM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r408931384", "bodyText": "I think its better. I'll change it", "author": "dulvinw", "createdAt": "2020-04-15T15:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NzQzOQ=="}], "type": "inlineReview"}, {"oid": "53e468132883a58fb15b8154434486778bd48054", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53e468132883a58fb15b8154434486778bd48054", "message": "Collect global variables depended in invokableSymbol", "committedDate": "2020-04-06T10:35:39Z", "type": "forcePushed"}, {"oid": "9149a4eb20ed49edb6e089b911b23bd3f5d52c33", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9149a4eb20ed49edb6e089b911b23bd3f5d52c33", "message": "Fix checkstyle and spotbugs", "committedDate": "2020-04-15T15:23:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDM0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r409290341", "bodyText": "Discuss a better approach", "author": "dulvinw", "createdAt": "2020-04-16T05:27:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1977,10 +1992,29 @@ public void visit(BLangLockStmt lockStmt) {\n         BIRBasicBlock lockedBB = new BIRBasicBlock(this.env.nextBBId(names));\n         addToTrapStack(lockedBB);\n         this.env.enclBasicBlocks.add(lockedBB);\n-        this.env.enclBB.terminator = new BIRTerminator.Lock(null, lockedBB);\n+        BIRTerminator.Lock lock = new BIRTerminator.Lock(null, lockedBB);\n+        this.env.enclBB.terminator = lock;\n+        lockStmtMap.put(lockStmt, lock); // Populate the cache.\n+        this.env.unlockVars.peek().addLock(lock);\n+        populateBirLockWithGlobalVars(lockStmt);\n         this.env.enclBB = lockedBB;\n \n-        this.env.unlockVars.peek().numLocks++;\n+    }\n+\n+    private void populateBirLockWithGlobalVars(BLangLockStmt lockStmt) {\n+        for (BVarSymbol globalVar : lockStmt.lockVariables) {\n+            BIRGlobalVariableDcl birGlobalVar = globalVarMap.get(globalVar);\n+\n+            // If null query the dummy map for dummy variables.\n+            if (birGlobalVar == null) {\n+                birGlobalVar = dummyGlobalVarMapForLocks.computeIfAbsent(globalVar, k ->\n+                        new BIRGlobalVariableDcl(null, globalVar.flags, globalVar.type, globalVar.pkgID,\n+                                globalVar.name, VarScope.GLOBAL, VarKind.GLOBAL, globalVar.name.value)\n+                );\n+            }\n+", "originalCommit": "051645da00d21c5bfcce038562e1438b4eb68fd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "846d1cfe90372855d571cf5e8776c7bd452fc634", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/846d1cfe90372855d571cf5e8776c7bd452fc634", "message": "Remove unwanted code form RefAnalyzer", "committedDate": "2020-04-17T09:13:29Z", "type": "forcePushed"}, {"oid": "86848716d825916328701083195a1a4db7356738", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86848716d825916328701083195a1a4db7356738", "message": "Catch global variables in lockstatment", "committedDate": "2020-04-20T07:08:38Z", "type": "commit"}, {"oid": "3ad2cfe9096f28fc7857c14797ab40c87035e7d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ad2cfe9096f28fc7857c14797ab40c87035e7d3", "message": "Add global vars to BIR Locks", "committedDate": "2020-04-20T07:08:38Z", "type": "commit"}, {"oid": "c6d085bab2f39650dd0f99797b9617cef9f456f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6d085bab2f39650dd0f99797b9617cef9f456f8", "message": "Add todo to fix the runtime exception", "committedDate": "2020-04-20T07:08:38Z", "type": "commit"}, {"oid": "41ff64c96f4b5de0e72815d779e1633f5b43ebe9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41ff64c96f4b5de0e72815d779e1633f5b43ebe9", "message": "Analyze Locks", "committedDate": "2020-04-20T07:08:38Z", "type": "commit"}, {"oid": "169458ea33d4a4a30f68b57ef2ac846b8868c77f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/169458ea33d4a4a30f68b57ef2ac846b8868c77f", "message": "Fix analyzing logic for LockOptimizer where incorrectly left an old set\nstay and adding the same lock twice to a group.", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "114c2d2f435143ee275f994b0b21753f962c6874", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/114c2d2f435143ee275f994b0b21753f962c6874", "message": "Propagate the set Id to the BIR Locknode", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "8229783505adae450d9b8c238b3b8f9e891cbd82", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8229783505adae450d9b8c238b3b8f9e891cbd82", "message": "Add backend changes to reflect lock improvmnet", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "95daf6ea9882f7ea0987787c31f37fdc0055a981", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95daf6ea9882f7ea0987787c31f37fdc0055a981", "message": "Improve lock optimizer to not populate if the shared sets are in same\nset Id.\nChanged the Lock store to panic scanning all locks.", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "7f5b06cb410ab615c2b06afd9a4343d58fe20aed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f5b06cb410ab615c2b06afd9a4343d58fe20aed", "message": "Add test case to check running in parallel", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "bb352fe2d131fecc6f82c2c561e23e6f7e3ec628", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bb352fe2d131fecc6f82c2c561e23e6f7e3ec628", "message": "Fix spotbugs and checkstyle", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "0eee017522c2cef755580b4e0d6d1b4777f8c98e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0eee017522c2cef755580b4e0d6d1b4777f8c98e", "message": "Fix Copyright formatting issue", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "13902b44d23214abcad9cb8b81beb0552a39b617", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13902b44d23214abcad9cb8b81beb0552a39b617", "message": "Collect global variables depended in invokableSymbol", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "4a6d74aab713b2471ad179b03afa845bf19e9a9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a6d74aab713b2471ad179b03afa845bf19e9a9d", "message": "Improve global variable collection.\nTODO : Need to change DFS logic", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "3ff518f0471e8c8f446048f190e1e9066587e0d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ff518f0471e8c8f446048f190e1e9066587e0d2", "message": "DFS to capture dependencies.\nCycle handling, if hit a cycle, capture the global variables from the\ncycle lead and add it as dependencies and assume the previous node as a\nleaf node.", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "08b5853632fe905ca7de21341a4af22ca8476500", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/08b5853632fe905ca7de21341a4af22ca8476500", "message": "Add dependency calculation in BLangLocks in DataFlowAnalyzer.\nPopulate dependencies for locks in BInvokableNodes", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "b57296b014297e54f806a18d87f903143c8bdad7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b57296b014297e54f806a18d87f903143c8bdad7", "message": "Add Testcases", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "7933e43dfdcb9856933c0b6f394f58f981df7700", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7933e43dfdcb9856933c0b6f394f58f981df7700", "message": "Fix checkstyle and spotbugs", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "37155338a9755580f013540ac2c445914fa333f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37155338a9755580f013540ac2c445914fa333f8", "message": "Fix review suggestions", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "fea02fee9b7db63f7107fc42e71f91a31c55c660", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fea02fee9b7db63f7107fc42e71f91a31c55c660", "message": "Add imported module global var support. Need to add a testcase", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "2b3a381d0e9772fa5da2fba4d9049fb98df7d655", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b3a381d0e9772fa5da2fba4d9049fb98df7d655", "message": "Add recursive tests.", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "0c6a3307b051adb3179187c33821fa7d2950a1b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c6a3307b051adb3179187c33821fa7d2950a1b1", "message": "Add import testcase", "committedDate": "2020-04-20T07:08:39Z", "type": "commit"}, {"oid": "c185d17a497f21a00d67f24cef628c005e1452c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c185d17a497f21a00d67f24cef628c005e1452c0", "message": "Remove unwanted code form RefAnalyzer", "committedDate": "2020-04-20T07:08:40Z", "type": "commit"}, {"oid": "4079f41a5a3315bda2f9e3d5b049e58e309bdf59", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4079f41a5a3315bda2f9e3d5b049e58e309bdf59", "message": "Add the test files for the import testcase", "committedDate": "2020-04-20T11:33:34Z", "type": "commit"}, {"oid": "4079f41a5a3315bda2f9e3d5b049e58e309bdf59", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4079f41a5a3315bda2f9e3d5b049e58e309bdf59", "message": "Add the test files for the import testcase", "committedDate": "2020-04-20T11:33:34Z", "type": "forcePushed"}]}