{"pr_number": 20753, "pr_title": "Implement  APIs  for  HTTP  persistent cookies", "pr_createdAt": "2020-01-28T04:28:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753", "timeline": [{"oid": "7bfacf09f22df749224bca66340625d5d06ddee3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bfacf09f22df749224bca66340625d5d06ddee3", "message": "Add persistent cookies", "committedDate": "2020-01-13T08:26:06Z", "type": "commit"}, {"oid": "186e1ad60e25367def93529d450362328da29986", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/186e1ad60e25367def93529d450362328da29986", "message": "Add more functions into Cookie-Store", "committedDate": "2020-01-13T08:38:53Z", "type": "commit"}, {"oid": "538f2d80bd352c9541660ec6d4c28cd6aa1541ec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/538f2d80bd352c9541660ec6d4c28cd6aa1541ec", "message": "Add limits on the number of cookies in cookie-store", "committedDate": "2020-01-13T08:56:42Z", "type": "commit"}, {"oid": "bd531e2ea345b44b811fa47c8e97d259000e5b38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd531e2ea345b44b811fa47c8e97d259000e5b38", "message": "Change cookie configuration", "committedDate": "2020-01-16T04:09:15Z", "type": "commit"}, {"oid": "ee2c275240a8824f49c96d7899f63fb7b28ab944", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee2c275240a8824f49c96d7899f63fb7b28ab944", "message": "Add validateFileExtension function", "committedDate": "2020-01-16T09:50:32Z", "type": "commit"}, {"oid": "f4c02b1b9792a8576e9a93682d06f04214be1d2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4c02b1b9792a8576e9a93682d06f04214be1d2a", "message": "Change variable names in cookie", "committedDate": "2020-01-22T10:57:05Z", "type": "commit"}, {"oid": "377a86a5c9a3a042725336eabdcd0cd79349a747", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/377a86a5c9a3a042725336eabdcd0cd79349a747", "message": "Change cookie store functions", "committedDate": "2020-01-22T10:59:23Z", "type": "commit"}, {"oid": "90bd156e50d6bfd37fc997980168a9c592f56bc5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90bd156e50d6bfd37fc997980168a9c592f56bc5", "message": "Change cookie configuration", "committedDate": "2020-01-22T11:00:31Z", "type": "commit"}, {"oid": "cca53b9ee14cbf4ae2fd31a2a8ec790acd4d832b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cca53b9ee14cbf4ae2fd31a2a8ec790acd4d832b", "message": "Add Integration Tests", "committedDate": "2020-01-22T11:02:11Z", "type": "commit"}, {"oid": "4c83b4c7275a9d8bd4301e0d89711db161cccd52", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c83b4c7275a9d8bd4301e0d89711db161cccd52", "message": "Add unit tests", "committedDate": "2020-01-22T11:03:01Z", "type": "commit"}, {"oid": "92129a0822a677c9cd7a04a25b99f3eca4bb97c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92129a0822a677c9cd7a04a25b99f3eca4bb97c8", "message": "Change variable names in addCookies function", "committedDate": "2020-01-22T11:03:55Z", "type": "commit"}, {"oid": "70a8d83a4576adf6a6385abfa4275a3e2a6f248d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70a8d83a4576adf6a6385abfa4275a3e2a6f248d", "message": "Add CookieHandlingError", "committedDate": "2020-01-23T08:15:47Z", "type": "commit"}, {"oid": "b3e3918357767d838faf6ad7131c27776e0c8054", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3e3918357767d838faf6ad7131c27776e0c8054", "message": "Add log-warning when using persistent cookies", "committedDate": "2020-01-24T05:50:22Z", "type": "commit"}, {"oid": "6167c6daf0d7607b129e4c7963f41c64582da848", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6167c6daf0d7607b129e4c7963f41c64582da848", "message": "Change csv persistent cookie handler", "committedDate": "2020-01-24T12:08:02Z", "type": "commit"}, {"oid": "1b0ba4db425bf37bcba28043315adb23cd6dfa3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b0ba4db425bf37bcba28043315adb23cd6dfa3a", "message": "Change csv persistent cookie handler", "committedDate": "2020-01-25T15:45:31Z", "type": "commit"}, {"oid": "bed1e0171b4f30291b25349cfb9fc82afd8260ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bed1e0171b4f30291b25349cfb9fc82afd8260ea", "message": "Change unit tests and integration tests", "committedDate": "2020-01-26T10:50:48Z", "type": "commit"}, {"oid": "aa6bd5b442ccb1847662805e4db18fff06680204", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa6bd5b442ccb1847662805e4db18fff06680204", "message": "Change language server unit tests", "committedDate": "2020-01-26T10:58:25Z", "type": "commit"}, {"oid": "3020a7e8db34f0cb0d0105cf59c2058edc6b069b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3020a7e8db34f0cb0d0105cf59c2058edc6b069b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into apis-with-persistent-cookies", "committedDate": "2020-01-26T10:59:25Z", "type": "commit"}, {"oid": "b114da78a34acb4e5d708ffffe21c9ddb9cdb411", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b114da78a34acb4e5d708ffffe21c9ddb9cdb411", "message": "Fix issue in csv persistent cookie handler", "committedDate": "2020-01-27T06:30:32Z", "type": "commit"}, {"oid": "c4dc661c6c194c4fb64aef48c5a501532bf12879", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4dc661c6c194c4fb64aef48c5a501532bf12879", "message": "Change tests", "committedDate": "2020-01-27T06:32:20Z", "type": "commit"}, {"oid": "3bf9fc28385034d16a8d24dc87e70f584b360154", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bf9fc28385034d16a8d24dc87e70f584b360154", "message": "Change language server unit tests", "committedDate": "2020-01-27T12:04:36Z", "type": "commit"}, {"oid": "f07ec9842660728b8b36973efc601351ebc50a00", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f07ec9842660728b8b36973efc601351ebc50a00", "message": "Change variable names in cookie file", "committedDate": "2020-01-27T16:06:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDY0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610646", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add a cookie with unmatched path to cookie store\")\n          \n          \n            \n                @Test(description = \"Test to add a cookie with an unmatched path to the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T04:59:31Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -47,7 +47,7 @@ public void testAddCookieWithUnmatchedDomain() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"add a cookie with unmatched path to cookie store\")\n+    @Test(description = \"Test add a cookie with unmatched path to cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDczNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove a specific cookie which is not in the cookie store when persistent cookie \" +\n          \n          \n            \n                @Test(description = \"Test to remove a specific cookie, which is not in the cookie store when it is a persistent cookie \" +", "author": "praneesha", "createdAt": "2020-01-28T05:00:00Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -115,7 +115,8 @@ public void testGetCookieToUnmatchedPath2() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove a specific cookie which is not in the cookie store\")\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store when persistent cookie \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDgzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n          \n          \n            \n                @Test(description = \"Test to add more cookies than the number in `maxTotalCookieCount` in the cookie configuration\")", "author": "praneesha", "createdAt": "2020-01-28T05:00:29Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDg3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610879", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n          \n          \n            \n                @Test(description = \"Test to add more cookies than the number in `maxCookiesPerDomain` in the cookie configuration\")", "author": "praneesha", "createdAt": "2020-01-28T05:00:47Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDk1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610959", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")\n          \n          \n            \n                @Test(description = \"Test to give an invalid file extension when creating a `CsvPersistentCookieHandler` object\")", "author": "praneesha", "createdAt": "2020-01-28T05:01:06Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n+    public void testCheckMaxCookiesPerDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxCookiesPerDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTAwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611006", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is a persistent \" +\n          \n          \n            \n                @Test(description = \"Test to remove a specific cookie, which is not in the cookie store when there is a persistent \" +", "author": "praneesha", "createdAt": "2020-01-28T05:01:21Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n+    public void testCheckMaxCookiesPerDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxCookiesPerDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")\n+    public void testAddPersistentCookieWithoutPersistentStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieWithoutPersistentStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is a persistent \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTA1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611058", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is no persistent \" +\n          \n          \n            \n                @Test(description = \"Test to remove a specific cookie, which is not in the cookie store when there is no persistent \" +", "author": "praneesha", "createdAt": "2020-01-28T05:01:33Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n+    public void testCheckMaxCookiesPerDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxCookiesPerDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")\n+    public void testAddPersistentCookieWithoutPersistentStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieWithoutPersistentStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is a persistent \" +\n+            \"cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore_1() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore_1\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the Return Values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is no persistent \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTA4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611082", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove all cookies when there is no persistent cookie store\")\n          \n          \n            \n                @Test(description = \"Test to remove all cookies when there is no persistent cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:01:41Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n+    public void testCheckMaxCookiesPerDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxCookiesPerDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")\n+    public void testAddPersistentCookieWithoutPersistentStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieWithoutPersistentStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is a persistent \" +\n+            \"cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore_1() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore_1\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the Return Values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is no persistent \" +\n+            \"cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore_2\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test remove all cookies when there is no persistent cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTExOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611119", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove all cookies from cookie store\")\n          \n          \n            \n                @Test(description = \"Test to remove all cookies from the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:01:55Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTE0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611144", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add persistent cookie into cookie store\")\n          \n          \n            \n                @Test(description = \"Test to add a persistent cookie into the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:02:07Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTE5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611197", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n          \n          \n            \n                @Test(description = \"Test to add a persistent cookie with a value below 69 for the year in which it expires attribute\")", "author": "praneesha", "createdAt": "2020-01-28T05:02:31Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTIxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611219", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n          \n          \n            \n                @Test(description = \"Test to get the relevant persistent cookie from the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:02:42Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTI0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove a specific persistent cookie from cookie store\")\n          \n          \n            \n                @Test(description = \"Test to remove a specific persistent cookie from the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:02:51Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n+    public void testGetPersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetPersistentCookieFromCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific persistent cookie from cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTMwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611301", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie name\")\n          \n          \n            \n                @Test(description = \"Test to get all cookies from the cookie store, which match the given cookie name\")", "author": "praneesha", "createdAt": "2020-01-28T05:03:12Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n+    public void testGetPersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetPersistentCookieFromCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific persistent cookie from cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie name\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611362", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +\n          \n          \n            \n                @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +\n          \n          \n            \n                @Test(description = \"Test to get all cookies from the cookie store, which match with the given cookie \" +", "author": "praneesha", "createdAt": "2020-01-28T05:03:37Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n+    public void testGetPersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetPersistentCookieFromCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific persistent cookie from cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie name\")\n+    public void testGetCookiesByName() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetCookiesByName\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTQ0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611448", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove all cookies from cookie store, which matched with the given name as the cookie \" +\n          \n          \n            \n                @Test(description = \"Test to remove all cookies from the cookie store, which match the given cookie \" +", "author": "praneesha", "createdAt": "2020-01-28T05:04:04Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n+    public void testGetPersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetPersistentCookieFromCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific persistent cookie from cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie name\")\n+    public void testGetCookiesByName() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetCookiesByName\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +\n+            \"domain\")\n+    public void testGetCookiesByDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetCookiesByDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove all cookies from cookie store, which matched with the given name as the cookie \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTcyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611722", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove persistent cookie by client\")\n          \n          \n            \n                @Test(description = \"Test to remove a persistent cookie by the client\")", "author": "praneesha", "createdAt": "2020-01-28T05:05:37Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTc2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n          \n          \n            \n                @Test(description = \"Test to send similar persistent cookies in the response by server. The old cookie is replaced by \" +", "author": "praneesha", "createdAt": "2020-01-28T05:05:53Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTgwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611806", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"new cookie in the cookie store\")\n          \n          \n            \n                        \"new cookie in the cookie store\")\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"new cookie in the cookie store\")\n          \n          \n            \n                        \"the new cookie in the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:06:01Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n          \n          \n            \n                @Test(description = \"Test to send a session cookie and a similar persistent cookie in the response by server. The old \" +", "author": "praneesha", "createdAt": "2020-01-28T05:06:19Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611879", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"session cookie is replaced by new persistent cookie in the cookie store\")\n          \n          \n            \n                        \"session cookie is replaced by the new persistent cookie in the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:06:29Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611951", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n          \n          \n            \n                @Test(description = \"Test to send a persistent cookie and a similar session cookie in the response by the server. The old \" +", "author": "praneesha", "createdAt": "2020-01-28T05:06:49Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTk3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611971", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"persistent cookie is replaced by new session cookie in the cookie store\")\n          \n          \n            \n                        \"persistent cookie is replaced by the new session cookie in the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:06:57Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n+            \"persistent cookie is replaced by new session cookie in the cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjAwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove persistent cookie by server\")\n          \n          \n            \n                @Test(description = \"Test to remove a persistent cookie by the server\")", "author": "praneesha", "createdAt": "2020-01-28T05:07:10Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n+            \"persistent cookie is replaced by new session cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_2() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_10.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by server\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjA1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test send persistent cookies when persistentCookieHandler is not configured\")\n          \n          \n            \n                @Test(description = \"Test to send persistent cookies when the persistentCookieHandler is not configured\")", "author": "praneesha", "createdAt": "2020-01-28T05:07:25Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n+            \"persistent cookie is replaced by new session cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_2() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_10.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by server\")\n+    public void testRemovePersistentCookieByServer() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_11.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send persistent cookies when persistentCookieHandler is not configured\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3ODA1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371678050", "bodyText": "Shall we rename the variable balFilepath to balFilePath?", "author": "suganyasuven", "createdAt": "2020-01-28T09:06:25Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n+            \"persistent cookie is replaced by new session cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_2() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_10.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by server\")\n+    public void testRemovePersistentCookieByServer() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "644da0f7bb4e0aa4d756d096274f3c273b9e55f2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/644da0f7bb4e0aa4d756d096274f3c273b9e55f2", "message": "Resolve language and formatting issues", "committedDate": "2020-01-29T05:31:39Z", "type": "commit"}, {"oid": "5904687a24dd1c4e9750f868f3c24f2c0fa82ec3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5904687a24dd1c4e9750f868f3c24f2c0fa82ec3", "message": "Change cookie store and csv persistent cookie handler", "committedDate": "2020-01-29T08:38:09Z", "type": "commit"}, {"oid": "2dc1c20a942b24e9df35743d38a80b9f5632cc10", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dc1c20a942b24e9df35743d38a80b9f5632cc10", "message": "Add InvalidCookieError", "committedDate": "2020-01-29T18:01:49Z", "type": "commit"}, {"oid": "dde5c1622d23eff1e427e98dfecc565d4801ee81", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dde5c1622d23eff1e427e98dfecc565d4801ee81", "message": "Change language server unit tests", "committedDate": "2020-01-30T04:55:32Z", "type": "commit"}, {"oid": "dde5c1622d23eff1e427e98dfecc565d4801ee81", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dde5c1622d23eff1e427e98dfecc565d4801ee81", "message": "Change language server unit tests", "committedDate": "2020-01-30T04:55:32Z", "type": "forcePushed"}, {"oid": "ddda14f9127bb432140fcf8267888c42668f3d3e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ddda14f9127bb432140fcf8267888c42668f3d3e", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into apis-with-persistent-cookies", "committedDate": "2020-01-30T05:32:31Z", "type": "commit"}, {"oid": "e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "message": "Change completionWithinTransaction file", "committedDate": "2020-01-30T06:20:58Z", "type": "commit"}, {"oid": "d3560997e8da6602240e2e42ae42f8e6bc7f4ecc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3560997e8da6602240e2e42ae42f8e6bc7f4ecc", "message": "Change cookie store and tests", "committedDate": "2020-01-30T16:15:35Z", "type": "commit"}]}