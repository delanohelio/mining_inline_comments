{"pr_number": 21024, "pr_title": "Improve the grpc command to only create essentials in client and service modes", "pr_createdAt": "2020-02-12T09:59:34Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378207798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean messageExists(String messageName) {\n          \n          \n            \n                public boolean isMessageExist(String messageName) {", "author": "chamil321", "createdAt": "2020-02-12T11:59:38Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.net.grpc.builder.components;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * Holds the abstract features of the stubs which are common to service and client stubs.\n+ */\n+public abstract class AbstractStub {\n+    private List<Message> messageList = new ArrayList<>();\n+    private List<EnumMessage> enumList = new ArrayList<>();\n+    private String rootDescriptor;\n+    private Set<Descriptor> descriptors = new TreeSet<>((descriptor1, descriptor2) -> {\n+        if (descriptor1.getKey().equalsIgnoreCase(descriptor2.getKey())) {\n+            return 0;\n+        }\n+        return 1;\n+    });\n+    public void addMessage(Message message) {\n+        messageList.add(message);\n+    }\n+\n+    public boolean messageExists(String messageName) {", "originalCommit": "841c474d2d9cf8a72a838465cd02a2005fd23730", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzODI4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378238284", "bodyText": "Fixed in 2d72836", "author": "BuddhiWathsala", "createdAt": "2020-02-12T13:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzk1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378207958", "bodyText": "Shall we leave a new line here?", "author": "chamil321", "createdAt": "2020-02-12T11:59:58Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.net.grpc.builder.components;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * Holds the abstract features of the stubs which are common to service and client stubs.\n+ */\n+public abstract class AbstractStub {\n+    private List<Message> messageList = new ArrayList<>();\n+    private List<EnumMessage> enumList = new ArrayList<>();\n+    private String rootDescriptor;\n+    private Set<Descriptor> descriptors = new TreeSet<>((descriptor1, descriptor2) -> {\n+        if (descriptor1.getKey().equalsIgnoreCase(descriptor2.getKey())) {\n+            return 0;\n+        }\n+        return 1;\n+    });\n+    public void addMessage(Message message) {", "originalCommit": "841c474d2d9cf8a72a838465cd02a2005fd23730", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzODM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r378238362", "bodyText": "Fixed in 2d72836", "author": "BuddhiWathsala", "createdAt": "2020-02-12T13:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzOTU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381039563", "bodyText": "Shall we compile the generated file and check whether there is any compilation error. and check whether message types and descriptor also there.\nCompileResult compileResult = BCompileUtil.compile(sampleServiceFile.toString());\nassertEquals(compileResult.getDiagnostics().length, 0);\nassertEquals(((BLangPackage) compileResult.getAST()).constants.size(), 1,\n                \"Expected constants not found in compile results.\");\nassertEquals(((BLangPackage) compileResult.getAST()).globalVars.size(), 1,\n                \"Expected global variables not found in compile results.\");", "author": "daneshk", "createdAt": "2020-02-19T02:02:01Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "diffHunk": "@@ -333,6 +334,27 @@ public void testOneofFieldRecordGeneration() throws IllegalAccessException, Clas\n                 \"Expected imports not found in compile results.\");\n     }\n \n+    @Test(description = \"Test case checks creation of only the service file, in the service mode, with single service\")\n+    public void testServiceFileGenWithoutStub() throws IllegalAccessException, ClassNotFoundException,\n+            InstantiationException {\n+        Class<?> grpcCmd = Class.forName(\"org.ballerinalang.protobuf.cmd.GrpcCmd\");\n+        GrpcCmd grpcCommand = (GrpcCmd) grpcCmd.newInstance();\n+        Path tempDirPath = outputDirPath.resolve(\"service\");\n+        Path protoPath = Paths.get(\"helloWorld.proto\");\n+        Path protoRoot = resourceDir.resolve(protoPath);\n+        grpcCommand.setBalOutPath(tempDirPath.toAbsolutePath().toString());\n+        grpcCommand.setProtoPath(protoRoot.toAbsolutePath().toString());\n+        grpcCommand.setMode(\"service\");\n+        grpcCommand.execute();\n+        Path sampleServiceFile = Paths.get(TMP_DIRECTORY_PATH, \"grpc\", \"service\", \"helloWorld_sample_service.bal\");\n+\n+        // This file should not be created when --mode service enabled with one service\n+        Path sampleStubFile = Paths.get(TMP_DIRECTORY_PATH, \"grpc\", \"service\", \"helloWorld_pb.bal\");\n+\n+        assertTrue(Files.exists(sampleServiceFile));\n+        assertFalse(Files.exists(sampleStubFile));", "originalCommit": "6eb2b30005242ae9a98901fa04bafc64bfb377d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MzI4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381143286", "bodyText": "Fixed in 355d18b", "author": "BuddhiWathsala", "createdAt": "2020-02-19T08:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAzOTU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTQ4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381045489", "bodyText": "Shall we create a new service stub template file with the only message types and descriptors?\nand generate that stub file when it is service mode. Because we don't need stub functions in service mode.", "author": "daneshk", "createdAt": "2020-02-19T02:26:10Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/BallerinaFileBuilder.java", "diffHunk": "@@ -174,32 +198,43 @@ private void computeSourceContent(byte[] descriptor, String mode) throws CodeBui\n                 }\n                 serviceStubBuilder.setType(ServiceStub.StubType.NONBLOCKING);\n                 stubFileObject.addServiceStub(serviceStubBuilder.build());\n-                if (GRPC_CLIENT.equals(mode)) {\n-                    String clientFilePath = generateOutputFile(this.balOutPath, serviceDescriptor.getName() +\n-                            SAMPLE_FILE_PREFIX);\n-                    writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains), DEFAULT_SAMPLE_DIR,\n-                            SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n-                }\n+\n                 if (GRPC_SERVICE.equals(mode)) {\n+                    serviceFile = sampleServiceBuilder.build();\n+                    if (!needStubFile) {\n+                        serviceFile.setMessageList(messageList);\n+                        serviceFile.setEnumList(enumList);\n+                        serviceFile.setDescriptors(descriptors);\n+                        if (!stubRootDescriptor.isEmpty()) {\n+                            serviceFile.setRootDescriptor(stubRootDescriptor);\n+                        }\n+                    }\n                     String servicePath = generateOutputFile(this.balOutPath, serviceDescriptor.getName() +\n                             SAMPLE_SERVICE_FILE_PREFIX);\n-                    writeOutputFile(sampleServiceBuilder.build(), DEFAULT_SAMPLE_DIR, SAMPLE_SERVICE_TEMPLATE_NAME,\n+                    writeOutputFile(serviceFile, DEFAULT_SAMPLE_DIR, SAMPLE_SERVICE_TEMPLATE_NAME,\n                             servicePath);\n+                } else if (GRPC_CLIENT.equals(mode)) {\n+                    String clientFilePath = generateOutputFile(\n+                            this.balOutPath,\n+                            serviceDescriptor.getName() + SAMPLE_FILE_PREFIX\n+                    );\n+                    writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains),\n+                            DEFAULT_SAMPLE_DIR,\n+                            SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n+\n                 }\n             }\n-            // read message types.\n-            for (DescriptorProtos.DescriptorProto descriptorProto : messageTypeList) {\n-                Message message = Message.newBuilder(descriptorProto).build();\n-                stubFileObject.addMessage(message);\n-            }\n-            // read enum types.\n-            for (DescriptorProtos.EnumDescriptorProto descriptorProto : enumDescriptorProtos) {\n-                EnumMessage enumMessage = EnumMessage.newBuilder(descriptorProto).build();\n-                stubFileObject.addEnumMessage(enumMessage);\n-            }\n \n-            String stubFilePath = generateOutputFile(this.balOutPath, filename + STUB_FILE_PREFIX);\n-            writeOutputFile(stubFileObject, DEFAULT_SKELETON_DIR, SKELETON_TEMPLATE_NAME, stubFilePath);\n+            if (!GRPC_SERVICE.equals(mode) || needStubFile) {\n+                stubFileObject.setMessageList(messageList);\n+                stubFileObject.setEnumList(enumList);\n+                stubFileObject.setDescriptors(descriptors);\n+                if (!stubRootDescriptor.isEmpty()) {\n+                    stubFileObject.setRootDescriptor(stubRootDescriptor);\n+                }\n+                String stubFilePath = generateOutputFile(this.balOutPath, filename + STUB_FILE_PREFIX);\n+                writeOutputFile(stubFileObject, DEFAULT_SKELETON_DIR, SKELETON_TEMPLATE_NAME, stubFilePath);", "originalCommit": "6eb2b30005242ae9a98901fa04bafc64bfb377d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0MzA2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21024#discussion_r381143069", "bodyText": "Fixed in f18fc70", "author": "BuddhiWathsala", "createdAt": "2020-02-19T08:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTQ4OQ=="}], "type": "inlineReview"}, {"oid": "5e1a98ab0b3366e47a7703c2e35cd3289d1aadaf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e1a98ab0b3366e47a7703c2e35cd3289d1aadaf", "message": "Improve the grpc command to only create essentials client and service modes", "committedDate": "2020-02-24T18:14:22Z", "type": "commit"}, {"oid": "4f958c4171b8d970cccba7a54a6777c0fea95b73", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f958c4171b8d970cccba7a54a6777c0fea95b73", "message": "Rename messageExists and refactor the code", "committedDate": "2020-02-24T18:14:22Z", "type": "commit"}, {"oid": "7ac891ca32120f5400e74cf79a867804038b2e08", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ac891ca32120f5400e74cf79a867804038b2e08", "message": "Create pb file when there are more than one service in proto file", "committedDate": "2020-02-24T18:14:23Z", "type": "commit"}, {"oid": "e1488ec91c59246804ea06ff34c3e12c0a15b7fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e1488ec91c59246804ea06ff34c3e12c0a15b7fa", "message": "add test to check only the service creation without stub", "committedDate": "2020-02-24T18:14:23Z", "type": "commit"}, {"oid": "ea08735f88651ff0146d3400a43b331810098356", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea08735f88651ff0146d3400a43b331810098356", "message": "create allocated stub file only for service generation", "committedDate": "2020-02-24T18:14:23Z", "type": "commit"}, {"oid": "5f04f54d9c3988b26ddb90dc2232ebadebc63c60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f04f54d9c3988b26ddb90dc2232ebadebc63c60", "message": "add compilation step to the testServiceFileGenWithoutStub testcase", "committedDate": "2020-02-24T18:14:23Z", "type": "commit"}, {"oid": "5d67759bd477a851d5aa31fd2f6e6478c24b968f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d67759bd477a851d5aa31fd2f6e6478c24b968f", "message": "make test compile only", "committedDate": "2020-02-24T18:14:23Z", "type": "commit"}]}