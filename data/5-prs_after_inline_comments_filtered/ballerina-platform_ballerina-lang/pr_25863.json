{"pr_number": 25863, "pr_title": "Support for list-match-pattern", "pr_createdAt": "2020-09-17T05:40:45Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863", "timeline": [{"oid": "9ce4af433ffeffb53096286980e4fb3d45344425", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ce4af433ffeffb53096286980e4fb3d45344425", "message": "Update the isolationAnalyser", "committedDate": "2020-09-17T06:01:07Z", "type": "forcePushed"}, {"oid": "5c746748937082132c45902e03d0b21a9d3b8e8d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c746748937082132c45902e03d0b21a9d3b8e8d", "message": "Add version", "committedDate": "2020-09-17T10:27:22Z", "type": "forcePushed"}, {"oid": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fa975590234666d2012d8d404b72c3e7e8dea6d", "message": "Enable tests", "committedDate": "2020-10-06T10:44:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5OTU0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500199540", "bodyText": "Shouldn't we set a clone of the source rest match pattern?", "author": "MaryamZi", "createdAt": "2020-10-06T11:26:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "diffHunk": "@@ -732,6 +734,25 @@ public void visit(BLangVarBindingPatternMatchPattern source) {\n         clone.isLastPattern = source.isLastPattern;\n     }\n \n+    @Override\n+    public void visit(BLangListMatchPattern source) {\n+        BLangListMatchPattern clone = new BLangListMatchPattern();\n+        source.cloneRef = clone;\n+        clone.matchExpr = source.matchExpr;\n+        clone.setRestMatchPattern(source.getRestMatchPattern());", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTY0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191641", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5OTU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDQwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500200408", "bodyText": "Shall we add a small description?", "author": "MaryamZi", "createdAt": "2020-10-06T11:28:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangListMatchPattern.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.ListMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPattern;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191621", "bodyText": "Added.", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDczMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500200733", "bodyText": "const-pattern?", "author": "MaryamZi", "createdAt": "2020-10-06T11:28:37Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTYwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191604", "bodyText": "This name is given by the spec.", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTE5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500201193", "bodyText": "Can't we directly check\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int i = -1;\n          \n          \n            \n                    BAssertUtil.validateError(restMatchPatternResult, ++i, \"rest match pattern is not supported\", 19, 13);\n          \n          \n            \n                    BAssertUtil.validateError(restMatchPatternResult, 0, \"rest match pattern is not supported\", 19, 13);\n          \n      \n    \n    \n  \n\nfor now?", "author": "MaryamZi", "createdAt": "2020-10-06T11:29:32Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = {\"disableOnOldParser\"})\n+public class MatchStmtListMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, restMatchPatternResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern.bal\");\n+        restMatchPatternResult = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-with-rest\" +\n+                \"-match-pattern.bal\");\n+        resultNegative = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern1() {\n+        BRunUtil.invoke(result, \"testListMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern2() {\n+        BRunUtil.invoke(result, \"testListMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern3() {\n+        BRunUtil.invoke(result, \"testListMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern4() {\n+        BRunUtil.invoke(result, \"testListMatchPattern4\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern5() {\n+        BRunUtil.invoke(result, \"testListMatchPattern5\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern6() {\n+        BRunUtil.invoke(result, \"testListMatchPattern6\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern7() {\n+        BRunUtil.invoke(result, \"testListMatchPattern7\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern8() {\n+        BRunUtil.invoke(result, \"testListMatchPattern8\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern9() {\n+        BRunUtil.invoke(result, \"testListMatchPattern9\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern10() {\n+        BRunUtil.invoke(result, \"testListMatchPattern10\");\n+    }\n+\n+    @Test\n+    public void testListMatchPatter11() {\n+        BRunUtil.invoke(result, \"testListMatchPattern11\");\n+    }\n+\n+    @Test\n+    public void testRestMatchPattern() {\n+        Assert.assertEquals(restMatchPatternResult.getErrorCount(), 1);\n+\n+        int i = -1;\n+        BAssertUtil.validateError(restMatchPatternResult, ++i, \"rest match pattern is not supported\", 19, 13);", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191597", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTQ1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500201456", "bodyText": "Shall we make these constants?", "author": "MaryamZi", "createdAt": "2020-10-06T11:29:58Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtListMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the const-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = {\"disableOnOldParser\"})\n+public class MatchStmtListMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, restMatchPatternResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern.bal\");\n+        restMatchPatternResult = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-with-rest\" +\n+                \"-match-pattern.bal\");\n+        resultNegative = BCompileUtil.compile(\"test-src/statements/matchstmt/list-match-pattern-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern1() {\n+        BRunUtil.invoke(result, \"testListMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern2() {\n+        BRunUtil.invoke(result, \"testListMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern3() {\n+        BRunUtil.invoke(result, \"testListMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern4() {\n+        BRunUtil.invoke(result, \"testListMatchPattern4\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern5() {\n+        BRunUtil.invoke(result, \"testListMatchPattern5\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern6() {\n+        BRunUtil.invoke(result, \"testListMatchPattern6\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern7() {\n+        BRunUtil.invoke(result, \"testListMatchPattern7\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern8() {\n+        BRunUtil.invoke(result, \"testListMatchPattern8\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern9() {\n+        BRunUtil.invoke(result, \"testListMatchPattern9\");\n+    }\n+\n+    @Test\n+    public void testListMatchPattern10() {\n+        BRunUtil.invoke(result, \"testListMatchPattern10\");\n+    }\n+\n+    @Test\n+    public void testListMatchPatter11() {\n+        BRunUtil.invoke(result, \"testListMatchPattern11\");\n+    }\n+\n+    @Test\n+    public void testRestMatchPattern() {\n+        Assert.assertEquals(restMatchPatternResult.getErrorCount(), 1);\n+\n+        int i = -1;\n+        BAssertUtil.validateError(restMatchPatternResult, ++i, \"rest match pattern is not supported\", 19, 13);\n+    }\n+\n+    @Test(description = \"invalid match patterns\")\n+    public void testListMatchPatternNegative() {\n+        Assert.assertEquals(resultNegative.getErrorCount(), 12);\n+\n+        int i = -1;\n+        String patternNotMatched = \"pattern will not be matched\";\n+        String unreachablePattern = \"unreachable pattern\";\n+        String unreachableCode = \"unreachable code\";", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191592", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMTQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIyNDk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500224976", "bodyText": "Do we need declaredVars here? Aren't these declared vars always part of a var binding-pattern as a match-pattern? If so we can access that from matchPatterns right?", "author": "MaryamZi", "createdAt": "2020-10-06T12:12:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangListMatchPattern.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.ListMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPattern;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangListMatchPattern extends BLangMatchPattern implements ListMatchPatternNode {\n+    public List<BLangMatchPattern> matchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    public Map<String, BVarSymbol> declaredVars = new HashMap<>();", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTU2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191565", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIyNDk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzI0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500333243", "bodyText": "I'm not sure if just these two checks will be enough. Shouldn't we consider intersections?\nShouldn't the following be allowed?\npublic function main() {\n    [any, any] m = [1, 2];\n    int|error a;\n    int|error b;\n\n    match m {\n        [a, b] => {\n            \n        }\n    }\n}\nCurrently fails with\n$ ballerina run zxa.bal Compiling source\n        zxa.bal\nerror: .::zxa.bal:7:9: pattern will not be matched", "author": "MaryamZi", "createdAt": "2020-10-06T14:28:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -285,6 +286,18 @@ public boolean isSubTypeOfList(BType type) {\n         return ((BUnionType) type).getMemberTypes().stream().allMatch(this::isSubTypeOfList);\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BType matchExprType, BType listMatchPatternType,\n+                                                 BLangListMatchPattern listMatchPattern) {\n+\n+        if (isAssignable(listMatchPatternType, matchExprType)) {\n+            return listMatchPatternType;\n+        }\n+        if (isAssignable(matchExprType, listMatchPatternType)) {\n+            return matchExprType;\n+        }", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzkwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500333909", "bodyText": "Can't we use org.wso2.ballerinalang.compiler.semantics.analyzer.Types#getTypeIntersection if that is the case?", "author": "MaryamZi", "createdAt": "2020-10-06T14:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191497", "bodyText": "Added getTypeIntersection function. Above example is not supported according to spec, because the var ref should be declared a module-level const. Anyway, the error message is incorrect and it is fixed.", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODkwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r503658900", "bodyText": "Ah, yes. Tested with the current changes and the errors also seem to be correct.\nerror: .::xyz.bal:7:10: variable 'a' should be declared as constant\nerror: .::xyz.bal:7:13: variable 'b' should be declared as constant", "author": "MaryamZi", "createdAt": "2020-10-13T04:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNDc1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500334754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            BLangConstPattern constPattern = (BLangConstPattern) matchPattern;\n          \n          \n            \n                            return constPattern.type;\n          \n          \n            \n                            return ((BLangConstPattern) matchPattern).type;", "author": "MaryamZi", "createdAt": "2020-10-06T14:29:58Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2360,11 +2413,51 @@ public void visit(BLangMatchStaticBindingPatternClause patternClause) {\n         analyzeStmt(patternClause.body, this.env);\n     }\n \n-    @Override\n-    public void visit(BLangCaptureBindingPattern captureBindingPattern) {\n-        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPattern.getIdentifier().getValue()),\n-                env.enclPkg.packageID, symTable.anyType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+    private void defineSymbolForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                      BType identifierType) {\n+\n+        String captureBindingPatternIdentifier = captureBindingPattern.getIdentifier().getValue();\n+\n+        if (this.declaredVarsInMatchPattern.containsKey(captureBindingPatternIdentifier)) {\n+            dlog.error(captureBindingPattern.pos, DiagnosticCode.REDECLARED_SYMBOL, captureBindingPatternIdentifier);\n+            return;\n+        }\n+\n+        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPatternIdentifier),\n+                env.enclPkg.packageID, identifierType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+\n+        declaredVarsInMatchPattern.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+\n+        if (this.declaredVarsInMatchClause.containsKey(captureBindingPatternIdentifier)) {\n+            return;\n+        }\n         symbolEnter.defineSymbol(captureBindingPattern.pos, captureBindingPattern.symbol, env);\n+        declaredVarsInMatchClause.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+    }\n+\n+    private BType getMatchPatternType(BLangMatchPattern matchPattern) {\n+\n+        NodeKind matchPatternKind = matchPattern.getKind();\n+        switch (matchPatternKind) {\n+            case WILDCARD_MATCH_PATTERN:\n+                return symTable.anyType;\n+            case REST_MATCH_PATTERN:\n+            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n+                return symTable.anyOrErrorType;\n+            case CONST_MATCH_PATTERN:\n+                BLangConstPattern constPattern = (BLangConstPattern) matchPattern;\n+                return constPattern.type;", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTUxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191513", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNDc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNTA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r500335056", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                BType memberMatchPatternType = getMatchPatternType(memberMatchPattern);\n          \n          \n            \n                                results.add(memberMatchPatternType);\n          \n          \n            \n                                results.add(getMatchPatternType(memberMatchPattern));", "author": "MaryamZi", "createdAt": "2020-10-06T14:30:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2360,11 +2413,51 @@ public void visit(BLangMatchStaticBindingPatternClause patternClause) {\n         analyzeStmt(patternClause.body, this.env);\n     }\n \n-    @Override\n-    public void visit(BLangCaptureBindingPattern captureBindingPattern) {\n-        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPattern.getIdentifier().getValue()),\n-                env.enclPkg.packageID, symTable.anyType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+    private void defineSymbolForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                      BType identifierType) {\n+\n+        String captureBindingPatternIdentifier = captureBindingPattern.getIdentifier().getValue();\n+\n+        if (this.declaredVarsInMatchPattern.containsKey(captureBindingPatternIdentifier)) {\n+            dlog.error(captureBindingPattern.pos, DiagnosticCode.REDECLARED_SYMBOL, captureBindingPatternIdentifier);\n+            return;\n+        }\n+\n+        captureBindingPattern.symbol = new BVarSymbol(0, new Name(captureBindingPatternIdentifier),\n+                env.enclPkg.packageID, identifierType, env.scope.owner, captureBindingPattern.pos, SOURCE);\n+\n+        declaredVarsInMatchPattern.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+\n+        if (this.declaredVarsInMatchClause.containsKey(captureBindingPatternIdentifier)) {\n+            return;\n+        }\n         symbolEnter.defineSymbol(captureBindingPattern.pos, captureBindingPattern.symbol, env);\n+        declaredVarsInMatchClause.put(captureBindingPatternIdentifier, captureBindingPattern.symbol);\n+    }\n+\n+    private BType getMatchPatternType(BLangMatchPattern matchPattern) {\n+\n+        NodeKind matchPatternKind = matchPattern.getKind();\n+        switch (matchPatternKind) {\n+            case WILDCARD_MATCH_PATTERN:\n+                return symTable.anyType;\n+            case REST_MATCH_PATTERN:\n+            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n+                return symTable.anyOrErrorType;\n+            case CONST_MATCH_PATTERN:\n+                BLangConstPattern constPattern = (BLangConstPattern) matchPattern;\n+                return constPattern.type;\n+            case LIST_MATCH_PATTERN:\n+                List<BType> results = new ArrayList<>();\n+\n+                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n+                for (BLangMatchPattern memberMatchPattern : listMatchPattern.matchPatterns) {\n+                    BType memberMatchPatternType = getMatchPatternType(memberMatchPattern);\n+                    results.add(memberMatchPatternType);", "originalCommit": "4fa975590234666d2012d8d404b72c3e7e8dea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTUzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r502191530", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-10-09T05:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNTA1Ng=="}], "type": "inlineReview"}, {"oid": "4d26f4b67e42d78942436b7eaea118904da1c38e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d26f4b67e42d78942436b7eaea118904da1c38e", "message": "Fix the suggestions", "committedDate": "2020-10-09T05:06:13Z", "type": "forcePushed"}, {"oid": "d47c4b95bcf92a730e29afc87b293cf4f9990f1e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d47c4b95bcf92a730e29afc87b293cf4f9990f1e", "message": "Fix the suggestions", "committedDate": "2020-10-09T05:10:12Z", "type": "forcePushed"}, {"oid": "8fbaac0bfa9ff25739d37adebda3afa77a112d5c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fbaac0bfa9ff25739d37adebda3afa77a112d5c", "message": "Remove unused imports", "committedDate": "2020-10-09T05:47:42Z", "type": "forcePushed"}, {"oid": "4d7a29863790a7d4dfc492a8b495379074801f22", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d7a29863790a7d4dfc492a8b495379074801f22", "message": "Fix failure tests", "committedDate": "2020-10-09T09:08:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNTQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r505515401", "bodyText": "Let's use 2.0.0", "author": "hasithaa", "createdAt": "2020-10-15T12:51:56Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/ListMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import java.util.List;\n+\n+/**\n+ * The interface with the APIs to implement the list-match-pattern.\n+ *\n+ * @since Swan Lake", "originalCommit": "4d7a29863790a7d4dfc492a8b495379074801f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU1NDAwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25863#discussion_r505554002", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-10-15T13:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNTQwMQ=="}], "type": "inlineReview"}, {"oid": "fe70176a95b50064586fb4274e27540247ff519b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe70176a95b50064586fb4274e27540247ff519b", "message": "Refactor code", "committedDate": "2020-10-15T13:42:52Z", "type": "forcePushed"}, {"oid": "71058ab42df9e800b07cdcfa6e95664aebf24c07", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71058ab42df9e800b07cdcfa6e95664aebf24c07", "message": "Refactor code", "committedDate": "2020-10-15T13:53:43Z", "type": "forcePushed"}, {"oid": "30213b08cf7a8df32ad3d96efc579048f35aec4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30213b08cf7a8df32ad3d96efc579048f35aec4a", "message": "Refactor code", "committedDate": "2020-10-15T14:36:58Z", "type": "forcePushed"}, {"oid": "7b23dc2059d39136af5f14366132ac957425c97a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b23dc2059d39136af5f14366132ac957425c97a", "message": "Added more tests", "committedDate": "2020-10-15T18:01:28Z", "type": "forcePushed"}, {"oid": "297f61297360fba2b56caaae563b7c6f692563d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/297f61297360fba2b56caaae563b7c6f692563d7", "message": "Support for rest-match-pattern", "committedDate": "2020-10-19T06:41:57Z", "type": "forcePushed"}, {"oid": "7de2148c61a6ba548af3c441544286b02105dd63", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7de2148c61a6ba548af3c441544286b02105dd63", "message": "Support for rest-match-pattern", "committedDate": "2020-10-20T19:18:37Z", "type": "forcePushed"}, {"oid": "b985921778bc4da6a3d646b388f641bae63a31ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b985921778bc4da6a3d646b388f641bae63a31ba", "message": "Change langserver-tests", "committedDate": "2020-10-21T06:50:04Z", "type": "forcePushed"}, {"oid": "6a39e9fa546d7815db4953fca86f48729cbdf3e8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a39e9fa546d7815db4953fca86f48729cbdf3e8", "message": "Improve unreachable pattern error", "committedDate": "2020-10-21T17:46:07Z", "type": "forcePushed"}, {"oid": "a4f18ff1343cf4708d05b4df3d1b0f25f11fc899", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4f18ff1343cf4708d05b4df3d1b0f25f11fc899", "message": "Add more tests", "committedDate": "2020-10-28T17:53:11Z", "type": "forcePushed"}, {"oid": "a49c9dbaf005d6829a1470dd4c9dd0a807fa0a03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a49c9dbaf005d6829a1470dd4c9dd0a807fa0a03", "message": "Add more tests", "committedDate": "2020-10-29T03:30:19Z", "type": "forcePushed"}, {"oid": "302b3de49e55d0815673507d1e6cf8a84aba50b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/302b3de49e55d0815673507d1e6cf8a84aba50b1", "message": "Add more tests", "committedDate": "2020-10-29T03:38:21Z", "type": "forcePushed"}, {"oid": "538d5bbbe66301e0e1ce05777dee329a2666aea0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/538d5bbbe66301e0e1ce05777dee329a2666aea0", "message": "Support for list-match-pattern", "committedDate": "2020-10-30T14:58:23Z", "type": "commit"}, {"oid": "509c65adf0275c8688c7a45a417f5550b49e2074", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/509c65adf0275c8688c7a45a417f5550b49e2074", "message": "Add nodes", "committedDate": "2020-10-30T14:58:23Z", "type": "commit"}, {"oid": "95e35cf1a6eb29658cc0c7e224429b88f76759e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95e35cf1a6eb29658cc0c7e224429b88f76759e1", "message": "Add tests", "committedDate": "2020-10-30T14:58:23Z", "type": "commit"}, {"oid": "0ed6cf6e0a71135f1b2285190464e498d62a0a53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ed6cf6e0a71135f1b2285190464e498d62a0a53", "message": "Update the isolationAnalyser", "committedDate": "2020-10-30T14:58:23Z", "type": "commit"}, {"oid": "339c5881580b10e37a2cea85f888bde982baf0d8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/339c5881580b10e37a2cea85f888bde982baf0d8", "message": "Fix check styles", "committedDate": "2020-10-30T14:58:23Z", "type": "commit"}, {"oid": "4720a9b99aa9a3aed38ae3e61c031e25b7d942ec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4720a9b99aa9a3aed38ae3e61c031e25b7d942ec", "message": "Add version", "committedDate": "2020-10-30T14:58:23Z", "type": "commit"}, {"oid": "0cd987dc47758c06ad85e0249d16b090b2644b58", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cd987dc47758c06ad85e0249d16b090b2644b58", "message": "Enable tests", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "e8df21043b525d5ff18af84a36268356f1c6bed6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8df21043b525d5ff18af84a36268356f1c6bed6", "message": "Add tests", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "5ce9ddc857b166cd451690d978df0b269369b0b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ce9ddc857b166cd451690d978df0b269369b0b0", "message": "Add doc comment", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "3ae9db472e2bfcfb44c489c716e2e8fb815786cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ae9db472e2bfcfb44c489c716e2e8fb815786cc", "message": "Fix the suggestions", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "eb4f744e28a9c9308795235b0de76990206361ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb4f744e28a9c9308795235b0de76990206361ba", "message": "Remove unused imports", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "6de07eaaa56ce5d410a483c7a8b1f22f4d4634bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6de07eaaa56ce5d410a483c7a8b1f22f4d4634bb", "message": "Fix failure tests", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "64f8ad1cd4d11ac44ce497a171b34746c2728840", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64f8ad1cd4d11ac44ce497a171b34746c2728840", "message": "Refactor code", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "f5cab08195979e88f049730207ff1b03e76440df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5cab08195979e88f049730207ff1b03e76440df", "message": "Added more tests", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "b02d845863178e1fc7046c26f50ea650a7ff590f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b02d845863178e1fc7046c26f50ea650a7ff590f", "message": "Support for rest-match-pattern", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "8f4b38622c5fdc486b8f7c4857223863b5bf1514", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f4b38622c5fdc486b8f7c4857223863b5bf1514", "message": "Change langserver-tests", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "5341841119a32d13ff3b7c059b4be1b1bdae46ad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5341841119a32d13ff3b7c059b4be1b1bdae46ad", "message": "Improve unreachable pattern error", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "dcfa941eb8aa6bbe021be545a6b0a65b10a08e47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dcfa941eb8aa6bbe021be545a6b0a65b10a08e47", "message": "Change the rest-match-pattern logic", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "9ab38bdad6cb36377dd44b31d1da84f2582ad1c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ab38bdad6cb36377dd44b31d1da84f2582ad1c5", "message": "Add more tests", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "a4c09473a34d4c7f39e25903b3a1357a261b8eb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4c09473a34d4c7f39e25903b3a1357a261b8eb0", "message": "Add more negative tests", "committedDate": "2020-10-30T14:59:44Z", "type": "commit"}, {"oid": "a4c09473a34d4c7f39e25903b3a1357a261b8eb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4c09473a34d4c7f39e25903b3a1357a261b8eb0", "message": "Add more negative tests", "committedDate": "2020-10-30T14:59:44Z", "type": "forcePushed"}]}