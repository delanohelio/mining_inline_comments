{"pr_number": 24747, "pr_title": "Implement Module function mocking", "pr_createdAt": "2020-07-15T07:43:01Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747", "timeline": [{"oid": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "message": "Implement Module function mocking", "committedDate": "2020-07-15T07:56:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNzA1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454937055", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String packageName = functionName.substring(functionName.indexOf(\"/\") + 1, functionName.indexOf(\":\"));\n          \n          \n            \n                        String packageName = functionName.substring(functionName.indexOf('/') + 1, functionName.indexOf(':'));\n          \n      \n    \n    \n  \n\nFaster indexOf method by using char", "author": "pramodya1994", "createdAt": "2020-07-15T10:01:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -102,15 +96,33 @@ public void generateMockFunctions(BLangPackage pkgNode) {\n         Set<String> mockFunctionSet = mockFunctionMap.keySet();\n \n         for (String function: mockFunctionSet) {\n-            if (!function.contains(\"#\")) { // Check added to skip desugaring for previous implementation mock functions\n-                pkgNode.getTestablePkg().functions.add(generateMockFunction(function));\n-            }\n+            pkgNode.getTestablePkg().functions.add(generateMockFunction(function));\n         }\n     }\n \n     private BLangFunction generateMockFunction(String functionName) {\n-        // Get the orginal function from the pkgNode function list for reference\n-        this.originalFunction = getOriginalFunction(functionName);\n+        // Set the current mock object\n+        this.mockFnObjectName = this.bLangPackage.getTestablePkg().getMockFunctionNamesMap().get(functionName);\n+\n+        // Reset both import and original functions\n+        this.importFunction = null;\n+        this.originalFunction = null;\n+\n+        // Function name is going to be 'ballerina/math:1.0.0 # absInt'\n+        String currentPackageId = this.bLangPackage.packageID.toString();\n+\n+\n+        // We need to identify if the function is part of the current package or imported package\n+        if (functionName.contains(currentPackageId)) {\n+            // Simply extract the name only and set it to function name\n+            functionName = functionName.substring(functionName.indexOf(MOCK_ANNOTATION_DELIMITER) + 1);\n+            this.originalFunction = getOriginalFunction(functionName);\n+        } else {\n+            // Extract the name and the package details\n+            String packageName = functionName.substring(functionName.indexOf(\"/\") + 1, functionName.indexOf(\":\"));", "originalCommit": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NDAxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454954017", "bodyText": "Switched to using char instead of String for indexOf", "author": "Ibaqu", "createdAt": "2020-07-15T10:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzNzA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzODYzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454938639", "bodyText": "importFunction hides the field declared at L68, Shall we use another name for this?\nAlso, initializer null is redundant.", "author": "pramodya1994", "createdAt": "2020-07-15T10:03:53Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -136,16 +149,96 @@ private BLangFunction getOriginalFunction(String functionName) {\n         return null;\n     }\n \n+    private BInvokableSymbol getImportFunction(String functionName, String packageName) {\n+        BInvokableSymbol importFunction = null;", "originalCommit": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NDE3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454954175", "bodyText": "Changed the name for the BInvokableSymbol", "author": "Ibaqu", "createdAt": "2020-07-15T10:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzODYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzOTE0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454939142", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<BLangSimpleVariable> requiredParams = null;\n          \n          \n            \n                    List<BLangSimpleVariable> requiredParams;", "author": "pramodya1994", "createdAt": "2020-07-15T10:04:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -136,16 +149,96 @@ private BLangFunction getOriginalFunction(String functionName) {\n         return null;\n     }\n \n+    private BInvokableSymbol getImportFunction(String functionName, String packageName) {\n+        BInvokableSymbol importFunction = null;\n+        importFunction = getInvokableSymbol(functionName, packageName, this.bLangPackage.getImports());\n+\n+        if (importFunction == null) {\n+            importFunction =\n+                    getInvokableSymbol(functionName, packageName,  this.bLangPackage.getTestablePkg().getImports());\n+        }\n+\n+        return importFunction;\n+    }\n+\n+    private BInvokableSymbol getInvokableSymbol(String functionName,\n+                                                String packageName,\n+                                                List<BLangImportPackage> importList) {\n+        // Loop through each BLangImportPackage\n+        for (BLangImportPackage importPkg : importList) {\n+            // If the import package name matches\n+            if (importPkg.alias.getValue().equals(packageName)) {\n+                // return the function name defined in the package entry map\n+                return (BInvokableSymbol) importPkg.symbol.scope.entries.get(new Name(functionName)).symbol;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n     private List<BLangSimpleVariable> generateRequiredParams() {\n-        List<BLangSimpleVariable> requiredParams = this.originalFunction.requiredParams;\n+        List<BLangSimpleVariable> requiredParams = null;", "originalCommit": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NDQzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454954436", "bodyText": "Removed all unnecessary nulls", "author": "Ibaqu", "createdAt": "2020-07-15T10:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzOTE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzOTQzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454939436", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BLangType returnTypeNode = null;\n          \n          \n            \n                    BLangType returnTypeNode;", "author": "pramodya1994", "createdAt": "2020-07-15T10:05:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -136,16 +149,96 @@ private BLangFunction getOriginalFunction(String functionName) {\n         return null;\n     }\n \n+    private BInvokableSymbol getImportFunction(String functionName, String packageName) {\n+        BInvokableSymbol importFunction = null;\n+        importFunction = getInvokableSymbol(functionName, packageName, this.bLangPackage.getImports());\n+\n+        if (importFunction == null) {\n+            importFunction =\n+                    getInvokableSymbol(functionName, packageName,  this.bLangPackage.getTestablePkg().getImports());\n+        }\n+\n+        return importFunction;\n+    }\n+\n+    private BInvokableSymbol getInvokableSymbol(String functionName,\n+                                                String packageName,\n+                                                List<BLangImportPackage> importList) {\n+        // Loop through each BLangImportPackage\n+        for (BLangImportPackage importPkg : importList) {\n+            // If the import package name matches\n+            if (importPkg.alias.getValue().equals(packageName)) {\n+                // return the function name defined in the package entry map\n+                return (BInvokableSymbol) importPkg.symbol.scope.entries.get(new Name(functionName)).symbol;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n     private List<BLangSimpleVariable> generateRequiredParams() {\n-        List<BLangSimpleVariable> requiredParams = this.originalFunction.requiredParams;\n+        List<BLangSimpleVariable> requiredParams = null;\n+\n+        if (this.originalFunction == null) {\n+            requiredParams = generateImportRequiredParams();\n+        } else {\n+            requiredParams = this.originalFunction.requiredParams;\n+        }\n+\n         return requiredParams;\n     }\n \n+    private List<BLangSimpleVariable> generateImportRequiredParams() {\n+        List<BLangSimpleVariable> bLangSimpleVariables = new ArrayList<>();\n+\n+        // Iterate through the params and generate the BLangSimpleVariable\n+        for (BVarSymbol bVarSymbol : this.importFunction.params) {\n+            BLangSimpleVariable bLangSimpleVariable =\n+                    ASTBuilderUtil.createVariable(bLangPackage.pos, bVarSymbol.name.getValue(),\n+                            bVarSymbol.type, null, bVarSymbol);\n+            bLangSimpleVariables.add(bLangSimpleVariable);\n+        }\n+\n+        return bLangSimpleVariables;\n+    }\n+\n+    private BLangSimpleVariable generateRestParam() {\n+        BLangSimpleVariable bLangSimpleVariable = null;\n+\n+        if (this.importFunction != null) {\n+            BVarSymbol restParam = this.importFunction.restParam;\n+\n+            if (this.importFunction.restParam != null) {\n+                bLangSimpleVariable = ASTBuilderUtil.createVariable(bLangPackage.pos, restParam.name.getValue(),\n+                        restParam.type, null, restParam);\n+                bLangSimpleVariable.typeNode = ASTBuilderUtil.createTypeNode(restParam.type);\n+            }\n+        }\n+\n+        return bLangSimpleVariable;\n+    }\n+\n     private BLangType generateReturnTypeNode() {\n-        BLangType returnTypeNode = this.originalFunction.returnTypeNode;\n+        BLangType returnTypeNode = null;", "originalCommit": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzOTc5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454939797", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BInvokableType bInvokableType = null;\n          \n          \n            \n                    BInvokableType bInvokableType;", "author": "pramodya1994", "createdAt": "2020-07-15T10:05:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -160,13 +253,14 @@ private BInvokableSymbol generateSymbol(String functionName) {\n     }\n \n     private BInvokableType generateSymbolInvokableType() {\n-        BInvokableType bInvokableType = (BInvokableType) this.originalFunction.symbol.type;\n-        return bInvokableType;\n-    }\n+        BInvokableType bInvokableType = null;", "originalCommit": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0MDczOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454940739", "bodyText": "Isn't it redundant?", "author": "pramodya1994", "createdAt": "2020-07-15T10:07:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -208,10 +323,9 @@ private BLangFieldBasedAccess generateFieldBasedAccess() {\n     }\n \n     // = (functionToMock)\n-    private BLangLiteral generateRHSExpr() {\n+    private BLangLiteral generateRHSExpr(String val) {\n         BType type = symTable.stringType;\n-        Object value = this.originalFunction.name.value;\n-\n+        Object value = val;", "originalCommit": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0MTAxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454941013", "bodyText": "You can directly pass val to ASTBuilderUtil.createLiteral method", "author": "pramodya1994", "createdAt": "2020-07-15T10:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0MDczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0NDgwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454944808", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<BLangSimpleVarRef> argVariables = null;\n          \n          \n            \n                    List<BLangSimpleVarRef> argVariables;", "author": "pramodya1994", "createdAt": "2020-07-15T10:15:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -266,21 +380,25 @@ private BInvokableSymbol getMockHandlerInvokableSymbol() {\n     }\n \n     private BLangSimpleVarRef getMockFunctionReference() {\n-        String mockObjName =\n-                bLangPackage.getTestablePkg().getMockFunctionNamesMap().get(originalFunction.getName().toString());\n         BVarSymbol mockObjectSymbol =\n-                (BVarSymbol) bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(mockObjName)).symbol;\n-\n+                (BVarSymbol) bLangPackage.getTestablePkg().symbol.scope.lookup(new Name(this.mockFnObjectName)).symbol;\n         BLangSimpleVarRef bLangSimpleVarRef = ASTBuilderUtil.createVariableRef(bLangPackage.pos, mockObjectSymbol);\n-\n         return bLangSimpleVarRef;\n     }\n \n     private BLangListConstructorExpr generateMockHandlerArgs() {\n         BLangListConstructorExpr argsList =\n                 ASTBuilderUtil.createEmptyArrayLiteral(bLangPackage.pos, symTable.arrayAnydataType);\n-        List<BLangSimpleVarRef> argVariables =\n-                ASTBuilderUtil.createVariableRefList(bLangPackage.pos, originalFunction.requiredParams);\n+\n+        List<BLangSimpleVarRef> argVariables = null;", "originalCommit": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk0NjE0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454946141", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BType type = null;\n          \n          \n            \n                    BType type;", "author": "pramodya1994", "createdAt": "2020-07-15T10:18:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -296,4 +414,16 @@ private static IdentifierNode createIdentifier(String value) {\n         }\n         return node;\n     }\n+\n+    private BType generateType() {\n+        BType type = null;", "originalCommit": "b4dc4da31baf5164cfd88dca4ae5a6c35dfcf992", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1NzU1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454957554", "bodyText": "This is never used", "author": "pramodya1994", "createdAt": "2020-07-15T10:39:30Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -78,14 +74,12 @@\n     private static final String VALUE_SET_ANNOTATION_NAME = \"dataProvider\";\n     private static final String TEST_ENABLE_ANNOTATION_NAME = \"enable\";\n     private static final String MOCK_ANNOTATION_DELIMITER = \"#\";\n-    private static final String MOCK_FN = \"Mock\";\n+    private static final String MOCK_FN = \"MockFn\"; //Remove this", "originalCommit": "51259c72b66598e38db2a6db79b60c10de1b60e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1ODMyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454958320", "bodyText": "It's better if we can divide this method since its complexity is high and long.", "author": "pramodya1994", "createdAt": "2020-07-15T10:40:58Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -314,23 +238,30 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n     // Extract mock function information\n     @Override\n     public void process(SimpleVariableNode simpleVariableNode, List<AnnotationAttachmentNode> annotations) {", "originalCommit": "51259c72b66598e38db2a6db79b60c10de1b60e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA3MDcwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r455070700", "bodyText": "Further divided the method for better understandability", "author": "Ibaqu", "createdAt": "2020-07-15T13:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1ODMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1ODU0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454958543", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                annotationValues[0] = packageName; // Set default value of the annotation as the current pacakge\n          \n          \n            \n                                annotationValues[0] = packageName; // Set default value of the annotation as the current package", "author": "pramodya1994", "createdAt": "2020-07-15T10:41:26Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -314,23 +238,30 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n     // Extract mock function information\n     @Override\n     public void process(SimpleVariableNode simpleVariableNode, List<AnnotationAttachmentNode> annotations) {\n-        annotations = annotations.stream().distinct().collect(Collectors.toList());\n+        parent = (BLangPackage) ((BLangSimpleVariable) simpleVariableNode).parent;\n+        String packageName = getPackageName(parent);\n \n+        annotations = annotations.stream().distinct().collect(Collectors.toList());\n+        // Iterate through all the annotations\n         for (AnnotationAttachmentNode attachmentNode : annotations) {\n             String annotationName = attachmentNode.getAnnotationName().getValue();\n-            // Check if the annotation name is Mock\n-            if (MOCK_ANNOTATION_NAME.equals(annotationName)) {\n-                String type = ((BLangUserDefinedType) ((BLangSimpleVariable) simpleVariableNode).typeNode)\n-                        .typeName.getValue();\n \n+            if (MOCK_ANNOTATION_NAME.equals(annotationName)) {\n+                String type = ((BLangUserDefinedType) ((BLangSimpleVariable) simpleVariableNode).typeNode).\n+                        typeName.getValue();\n+                // Check if the simpleVariableNode that the annotation is attached to is in fact the MockFunction object\n                 if (type.equals(\"MockFunction\")) {\n-                    String[] vals = new String[2];\n-                    // Extract function to mock name\n+                    String mockFnObjectName = simpleVariableNode.getName().getValue();\n+                    String[] annotationValues = new String[2]; // [0] - moduleName, [1] - functionName\n+                    annotationValues[0] = packageName; // Set default value of the annotation as the current pacakge", "originalCommit": "51259c72b66598e38db2a6db79b60c10de1b60e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MTU3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454971573", "bodyText": "Corrected", "author": "Ibaqu", "createdAt": "2020-07-15T11:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1ODU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTA3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454959079", "bodyText": "variableNode is never used", "author": "pramodya1994", "createdAt": "2020-07-15T10:42:33Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -429,34 +343,27 @@ private String formatPackageName(String value) {\n \n     /**\n      * Validates the function name provided in the annotation.\n-     * @param functionName Function to mock\n+     * @param functionName Name of the function to mock\n      * @param variableNode  MockFunction object variable node\n      * @param attachmentNode  MockFunction object attachment node\n      */\n-    private void validateFunctionName(String functionName, SimpleVariableNode variableNode,\n+    private void validateFunctionName(String functionName, PackageID functionToMockID, SimpleVariableNode variableNode,", "originalCommit": "51259c72b66598e38db2a6db79b60c10de1b60e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MTQ4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454971485", "bodyText": "Removed variableNode", "author": "Ibaqu", "createdAt": "2020-07-15T11:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTgzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454959830", "bodyText": "functionToMockID is nullable. NPE can be thrown.", "author": "pramodya1994", "createdAt": "2020-07-15T10:44:03Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java", "diffHunk": "@@ -465,7 +372,8 @@ private void validateFunctionName(String functionName, SimpleVariableNode variab\n \n             // If it reaches this part, then the function has'nt been found in both packages\n             diagnosticLog.logDiagnostic(Diagnostic.Kind.ERROR, attachmentNode.getPosition(),\n-                    \"Function \\'\" + functionName + \"\\' cannot be found in the current package\");\n+                    \"Function \\'\" + functionName + \"\\' cannot be found in the package \\'\"\n+                            + functionToMockID.toString());", "originalCommit": "51259c72b66598e38db2a6db79b60c10de1b60e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NzQzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454987433", "bodyText": "There is a null check for functionToMockID before which throws an error. Woudlnt that be enough or should the NPE be handled here as well.", "author": "Ibaqu", "createdAt": "2020-07-15T11:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMDcyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r455000724", "bodyText": "Is it line 351, Is yes, That's not enough because there is no else part for that condition and still NPE can be thrown right?", "author": "pramodya1994", "createdAt": "2020-07-15T12:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzMzE2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r455033167", "bodyText": "I added a check for the functionToMockID. If it doesnt exist, then it will show up as a compile-time error", "author": "Ibaqu", "createdAt": "2020-07-15T13:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2MDk2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454960965", "bodyText": "Seems thenReturn and mockHandler methods never used. Pls remove them if it is not used.", "author": "pramodya1994", "createdAt": "2020-07-15T10:46:12Z", "path": "misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/natives/test/FunctionMock.java", "diffHunk": "@@ -43,14 +43,18 @@ public static ErrorValue thenReturn(ObjectValue caseObj) {\n \n     public static Object mockHandler(ObjectValue mockFuncObj, ArrayValue args) {", "originalCommit": "51259c72b66598e38db2a6db79b60c10de1b60e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDk3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454970973", "bodyText": "In this case, thenReturn and mockHandler are being used by the java interop in mock.bal. These are required for the functionality to work.", "author": "Ibaqu", "createdAt": "2020-07-15T11:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2MDk2NQ=="}], "type": "inlineReview"}, {"oid": "19be154c1766990b6e0f4e40a8ddee2e357ef604", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/19be154c1766990b6e0f4e40a8ddee2e357ef604", "message": "Fix PR suggestions", "committedDate": "2020-07-15T11:05:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTEyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454995129", "bodyText": "Is \"this.importFunction\" nullable? Should we add a null check for that as well?", "author": "Dilhasha", "createdAt": "2020-07-15T11:55:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -160,13 +253,14 @@ private BInvokableSymbol generateSymbol(String functionName) {\n     }\n \n     private BInvokableType generateSymbolInvokableType() {\n-        BInvokableType bInvokableType = (BInvokableType) this.originalFunction.symbol.type;\n-        return bInvokableType;\n-    }\n+        BInvokableType bInvokableType;\n \n-    private BType generateType() {\n-        BType type = ((BInvokableType) this.originalFunction.type).retType;\n-        return type;\n+        if (this.originalFunction == null) {\n+            bInvokableType = (BInvokableType) this.importFunction.type;", "originalCommit": "19be154c1766990b6e0f4e40a8ddee2e357ef604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r455046819", "bodyText": "I added a null check for both import function and original function. In this case, one of the two has to be null. If both arent then the function will not go through the desugaring process and throws an error instead.", "author": "Ibaqu", "createdAt": "2020-07-15T13:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTY5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24747#discussion_r454995694", "bodyText": "Is \"this.importFunction\" nullable? Should we add a null check for that as well?", "author": "Dilhasha", "createdAt": "2020-07-15T11:56:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/MockDesugar.java", "diffHunk": "@@ -177,24 +271,45 @@ private BLangFunctionBody generateBody() {\n \n     private List<BLangStatement> generateStatements() {\n         // <MockFunctionObj>.functionToMock = (functionToMock);\n-        BLangAssignment bLangAssignment =\n-                ASTBuilderUtil.createAssignmentStmt(bLangPackage.pos, generateFieldBasedAccess(), generateRHSExpr());\n+        String functionToMockVal = (this.originalFunction == null) ?\n+                this.importFunction.name.toString() : this.originalFunction.name.toString();", "originalCommit": "19be154c1766990b6e0f4e40a8ddee2e357ef604", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "958b83a01bf986dd5e6ea5e4b0d751d7131743e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/958b83a01bf986dd5e6ea5e4b0d751d7131743e2", "message": "Fix PR suggestions", "committedDate": "2020-07-15T13:01:13Z", "type": "forcePushed"}, {"oid": "b75f7956b17f77b1322b8992c50f45b3090cce4e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b75f7956b17f77b1322b8992c50f45b3090cce4e", "message": "Fix PR suggestions", "committedDate": "2020-07-15T13:21:24Z", "type": "forcePushed"}, {"oid": "272b67f1ad340a1efaa41f5fbdcd29d29cab9033", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/272b67f1ad340a1efaa41f5fbdcd29d29cab9033", "message": "Fix PR suggestions", "committedDate": "2020-07-15T13:53:11Z", "type": "forcePushed"}, {"oid": "8114a939b082e04626a0bdb0ee2c408a78ed74f7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8114a939b082e04626a0bdb0ee2c408a78ed74f7", "message": "Add previous mock function implementation", "committedDate": "2020-07-16T06:32:17Z", "type": "forcePushed"}, {"oid": "eca9c3612e8a68463ba8f5a64aee094a520ed5ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eca9c3612e8a68463ba8f5a64aee094a520ed5ba", "message": "Add previous mock function implementation", "committedDate": "2020-07-16T07:37:17Z", "type": "forcePushed"}, {"oid": "557110ac068a9a565d372c4deb7db6a91b3bf99e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/557110ac068a9a565d372c4deb7db6a91b3bf99e", "message": "Implement Module function mocking", "committedDate": "2020-07-16T10:11:33Z", "type": "commit"}, {"oid": "67ec9708ea73d03bc540454e8bf055b9649bf6f2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67ec9708ea73d03bc540454e8bf055b9649bf6f2", "message": "Fix PR suggestions", "committedDate": "2020-07-16T10:11:33Z", "type": "commit"}, {"oid": "5af79b9d4bf4184f482d5f6c834fb084dfdf85ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5af79b9d4bf4184f482d5f6c834fb084dfdf85ac", "message": "Add previous mock function implementation", "committedDate": "2020-07-16T11:05:49Z", "type": "forcePushed"}, {"oid": "1ecafca2acd3651b48ba27daf79c849398400e8a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ecafca2acd3651b48ba27daf79c849398400e8a", "message": "Add previous mock function implementation", "committedDate": "2020-07-16T13:05:31Z", "type": "commit"}, {"oid": "1ecafca2acd3651b48ba27daf79c849398400e8a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ecafca2acd3651b48ba27daf79c849398400e8a", "message": "Add previous mock function implementation", "committedDate": "2020-07-16T13:05:31Z", "type": "forcePushed"}]}