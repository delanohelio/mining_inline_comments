{"pr_number": 25763, "pr_title": "Add isolated support to function type and anon func exper", "pr_createdAt": "2020-09-14T05:24:45Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763", "timeline": [{"oid": "3b3a61da13b8ba65853b913577d90708776f124f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b3a61da13b8ba65853b913577d90708776f124f", "message": "Merge branch 'add-isolated-funcs' of https://github.com/MaryamZi/ballerina into add-isolated", "committedDate": "2020-09-07T04:09:55Z", "type": "commit"}, {"oid": "8b0d0d954624f69dac966811030c840949706fbf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8b0d0d954624f69dac966811030c840949706fbf", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into add-isolated", "committedDate": "2020-09-09T03:44:30Z", "type": "commit"}, {"oid": "2423ebc4271be6a91297657d43c94ccb4226049d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2423ebc4271be6a91297657d43c94ccb4226049d", "message": "Parser changes for func type and anon func.\nParsing logic isolate support for function type desc and anonymous function expression.", "committedDate": "2020-09-09T09:31:21Z", "type": "commit"}, {"oid": "9d6936547bfa4d15fcdf474316171b030cc1291b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d6936547bfa4d15fcdf474316171b030cc1291b", "message": "Error handler changes.", "committedDate": "2020-09-09T09:33:09Z", "type": "commit"}, {"oid": "e3ae85945ae94b5a054d0ac87b2ccfa824a52614", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3ae85945ae94b5a054d0ac87b2ccfa824a52614", "message": "Fix checkstyle issue.", "committedDate": "2020-09-09T10:07:12Z", "type": "commit"}, {"oid": "b93f060624ef2b632d483655ec292da4dfe0e523", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b93f060624ef2b632d483655ec292da4dfe0e523", "message": "Fix wrong use of context in error handler.", "committedDate": "2020-09-09T10:37:18Z", "type": "commit"}, {"oid": "664809b07e832b379af795d04b556b237f295f92", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/664809b07e832b379af795d04b556b237f295f92", "message": "Update assert files.", "committedDate": "2020-09-09T10:55:50Z", "type": "commit"}, {"oid": "3eee697a8dd621810815f94e4702033a121cc26a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3eee697a8dd621810815f94e4702033a121cc26a", "message": "Add test cases\nAdd test cases for isolated function type and isolated anon func expr.", "committedDate": "2020-09-10T05:50:07Z", "type": "commit"}, {"oid": "bd33bc54879ca2ee974411f1219a224011cd7f6d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd33bc54879ca2ee974411f1219a224011cd7f6d", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into add-isolated", "committedDate": "2020-09-10T05:51:14Z", "type": "commit"}, {"oid": "7e957b3cb8b44ab9f1a1e9b5d40c9662485f1773", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e957b3cb8b44ab9f1a1e9b5d40c9662485f1773", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into add-isolated", "committedDate": "2020-09-10T09:05:40Z", "type": "commit"}, {"oid": "6d2fc6402a664c6605bc48bb4a848a31d4013232", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d2fc6402a664c6605bc48bb4a848a31d4013232", "message": "Merge branch 'add-isolated-funcs' of https://github.com/MaryamZi/ballerina into add-isolated", "committedDate": "2020-09-10T09:20:49Z", "type": "commit"}, {"oid": "fc4925a4645ffc7cb5227c7fc2179fa12628b3cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc4925a4645ffc7cb5227c7fc2179fa12628b3cf", "message": "Merge branch 'add-isolated-funcs' of https://github.com/MaryamZi/ballerina into add-isolated", "committedDate": "2020-09-10T09:46:18Z", "type": "commit"}, {"oid": "2c12928d4903e49a1c0c84a24ed09057b0004ce4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c12928d4903e49a1c0c84a24ed09057b0004ce4", "message": "Remove isolated implicit anon functions.", "committedDate": "2020-09-11T06:16:05Z", "type": "commit"}, {"oid": "59d52972d313f0d9273f28ab7f3bff7e8b7bbf7e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59d52972d313f0d9273f28ab7f3bff7e8b7bbf7e", "message": "Update assert files.", "committedDate": "2020-09-11T06:29:00Z", "type": "commit"}, {"oid": "5d1e6f72e5c795280c2854cefe6f3f58a0c26c8f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d1e6f72e5c795280c2854cefe6f3f58a0c26c8f", "message": "Refactor code.", "committedDate": "2020-09-11T06:32:19Z", "type": "commit"}, {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "message": "Merge branch 'add-isolated-funcs' of https://github.com/MaryamZi/ballerina into add-isolated\nResolve conflicts", "committedDate": "2020-09-14T05:14:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MjQ4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487672483", "bodyText": "Seems this block is repeated in 3 places. Shall we extract it to a separate method?", "author": "lochana-chathura", "createdAt": "2020-09-14T06:13:45Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8828,34 +8839,61 @@ private STNode parseKeyTypeConstraint(STNode keyKeywordToken) {\n     /**\n      * Parse function type descriptor.\n      * <p>\n-     * <code>function-type-descriptor := function function-signature</code>\n+     * <code>function-type-descriptor := [isolated] function function-signature</code>\n      *\n      * @return Function type descriptor node\n      */\n     private STNode parseFunctionTypeDesc() {\n         startContext(ParserRuleContext.FUNC_TYPE_DESC);\n+        List<STNode> qualifiers = new ArrayList<>();\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case ISOLATED_KEYWORD:\n+                qualifiers.add(consume());\n+                break;\n+            case FUNCTION_KEYWORD:\n+                break;\n+            default:\n+                recover(peek(), ParserRuleContext.FUNC_TYPE_DESC_START);\n+                return parseFunctionTypeDesc();\n+        }", "originalCommit": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5Njk1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487696955", "bodyText": "moved to parseFunctionQualifiers method", "author": "rdulmina", "createdAt": "2020-09-14T07:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MjQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MjUzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487672533", "bodyText": "extra line?", "author": "lochana-chathura", "createdAt": "2020-09-14T06:13:56Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type\n         STNodeList qualifierList = (STNodeList) qualifiers;\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n-        // qualifiers are not allowed except for object filed\n+        List<STNode> validatedQualifierList = new ArrayList<>();\n+        // qualifiers are only allowed in the following cases for func type desc.\n+        // isolated qualifier allowed.\n+        // public or private qualifier allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n+            if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                validatedQualifierList.add(qualifier);\n+            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n                 visibilityQualifier = qualifier;\n             } else {\n-                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                functionKeyword = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(functionKeyword, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+", "originalCommit": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MzIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487673213", "bodyText": "Can end the context in parseReturnTypeDescRhs and come here.", "author": "lochana-chathura", "createdAt": "2020-09-14T06:15:55Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type", "originalCommit": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MTYzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487671639", "bodyText": "I think we don't need this check. parseComplexTypeDescriptor does the same check indirectly.", "author": "SupunS", "createdAt": "2020-09-14T06:11:11Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type\n         STNodeList qualifierList = (STNodeList) qualifiers;\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n-        // qualifiers are not allowed except for object filed\n+        List<STNode> validatedQualifierList = new ArrayList<>();\n+        // qualifiers are only allowed in the following cases for func type desc.\n+        // isolated qualifier allowed.\n+        // public or private qualifier allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n+            if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                validatedQualifierList.add(qualifier);\n+            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n                 visibilityQualifier = qualifier;\n             } else {\n-                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                functionKeyword = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(functionKeyword, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+\n             }\n         }\n \n+        qualifiers = STNodeFactory.createNodeList(validatedQualifierList);\n+        STNode typeDesc = STNodeFactory.createFunctionTypeDescriptorNode(qualifiers, functionKeyword,\n+                funcSignature);\n+\n+        // Check if it is a complex type desc starting with function type\n+        if (isValidTypeContinuationToken(peek())) {", "originalCommit": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5ODE5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487698198", "bodyText": "I c thax ayye will change.", "author": "rdulmina", "createdAt": "2020-09-14T07:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MTYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MzgyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487673822", "bodyText": "These two also can start with isolated keyword?", "author": "SupunS", "createdAt": "2020-09-14T06:17:42Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2222,9 +2233,11 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n                 return ParserRuleContext.TOP_LEVEL_NODE;\n             case FUNC_DEF:\n             case FUNC_DEF_OR_FUNC_TYPE:", "originalCommit": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3c207e61428b9c496971b58137edb5a579541584", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c207e61428b9c496971b58137edb5a579541584", "message": "Use parseFunctionQualifiers method to parse func type desc and anon funcs.", "committedDate": "2020-09-14T07:12:44Z", "type": "commit"}, {"oid": "36a88e589236f11599e1ed38694e0b7edf4ea1a9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36a88e589236f11599e1ed38694e0b7edf4ea1a9", "message": "Remove unwanted if condition.", "committedDate": "2020-09-14T09:40:13Z", "type": "commit"}, {"oid": "b8be4a0bbef12b68a62f815f78075d634eca0407", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8be4a0bbef12b68a62f815f78075d634eca0407", "message": "Add isolated recovery support for top level functions and func type desc.", "committedDate": "2020-09-14T11:08:11Z", "type": "commit"}]}