{"pr_number": 22791, "pr_title": "Add types with a type-parameter", "pr_createdAt": "2020-04-20T14:30:09Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791", "timeline": [{"oid": "705cb88a2e7f0d4883e21190866054cff26ecd44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/705cb88a2e7f0d4883e21190866054cff26ecd44", "message": "Map type descriptor parser rule.", "committedDate": "2020-04-20T07:11:59Z", "type": "commit"}, {"oid": "3a3d78c272bac860b1d45b4886ea1aaaa5265283", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a3d78c272bac860b1d45b4886ea1aaaa5265283", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc", "committedDate": "2020-04-20T07:12:47Z", "type": "commit"}, {"oid": "d5ff496a5919395cb27653b99b54467736735cd5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5ff496a5919395cb27653b99b54467736735cd5", "message": "Map type descriptor support.", "committedDate": "2020-04-20T07:26:26Z", "type": "commit"}, {"oid": "5e17cc4dbefbe947a39b28f7a59690f08c71c609", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e17cc4dbefbe947a39b28f7a59690f08c71c609", "message": "Recovery logic for map type descriptor", "committedDate": "2020-04-20T08:03:30Z", "type": "commit"}, {"oid": "adb0197d349686ee4cca115bbf266cb5760fcedb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/adb0197d349686ee4cca115bbf266cb5760fcedb", "message": "Test cases for map type descriptor", "committedDate": "2020-04-20T13:35:22Z", "type": "commit"}, {"oid": "1e4290d0fc1e10a19bc4071e646e22ef2ff6d003", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e4290d0fc1e10a19bc4071e646e22ef2ff6d003", "message": "Added missing files", "committedDate": "2020-04-20T13:37:34Z", "type": "commit"}, {"oid": "6f48ca16ffb5a7d9d6cd0d38af159fb2d71092de", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f48ca16ffb5a7d9d6cd0d38af159fb2d71092de", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc", "committedDate": "2020-04-20T14:09:19Z", "type": "commit"}, {"oid": "1928b33813a5ad95a2251c7a7f27279157d30b1b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1928b33813a5ad95a2251c7a7f27279157d30b1b", "message": "Merge branch 'incremental-parser' of https://github.com/rdulmina/ballerina-lang into map-typedesc", "committedDate": "2020-04-21T17:17:30Z", "type": "commit"}, {"oid": "4d8ae5b5172a5c7bbb2eed3222cedc8746f3ae5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d8ae5b5172a5c7bbb2eed3222cedc8746f3ae5e", "message": "Modified and added new test cases to map type desc.", "committedDate": "2020-04-21T17:18:30Z", "type": "commit"}, {"oid": "0cea38f2af62d621dc1cfe21e68cc75503241214", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cea38f2af62d621dc1cfe21e68cc75503241214", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc", "committedDate": "2020-04-21T17:24:50Z", "type": "commit"}, {"oid": "4f449d890e0a3fecabdef81c410d746863c69df8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f449d890e0a3fecabdef81c410d746863c69df8", "message": "Uncommented test cases.\n\nAdded missing new line and Uncommented some mistakenly commented test cases of array type and optional type.", "committedDate": "2020-04-21T17:34:09Z", "type": "commit"}, {"oid": "2ed88887e9ed65e00e1a3ebf5ce03da7d244f396", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ed88887e9ed65e00e1a3ebf5ce03da7d244f396", "message": "Added map type desc to TYPE_DESCRIPTORS list.", "committedDate": "2020-04-22T08:51:57Z", "type": "commit"}, {"oid": "90fa45d07dac74a783abfe87aa0dcd28f5619556", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90fa45d07dac74a783abfe87aa0dcd28f5619556", "message": "Modified the recovery logic of array and optional type descriptor.", "committedDate": "2020-04-22T10:12:05Z", "type": "commit"}, {"oid": "f4c23c6fbf380aa0f814c7d8cf6537b7cd8d6325", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4c23c6fbf380aa0f814c7d8cf6537b7cd8d6325", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc", "committedDate": "2020-04-22T11:12:38Z", "type": "commit"}, {"oid": "cd9b6d3b3e3cb40693d791c1ee1c0d32f04ddcf7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd9b6d3b3e3cb40693d791c1ee1c0d32f04ddcf7", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc", "committedDate": "2020-04-23T04:35:30Z", "type": "commit"}, {"oid": "64f47625c7356dc3bb2e137d4e88e30611adf068", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64f47625c7356dc3bb2e137d4e88e30611adf068", "message": "Future and typedesc type descriptor support to new parser with test cases and recovery logic.", "committedDate": "2020-04-23T10:16:10Z", "type": "commit"}, {"oid": "13599d4db2fff690a63661dfe3c8b156ef4a8287", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13599d4db2fff690a63661dfe3c8b156ef4a8287", "message": "Undo change test1.bal", "committedDate": "2020-04-23T10:25:50Z", "type": "commit"}, {"oid": "05c2f60887960f22119a18537f8fc68bb8b6ea6b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/05c2f60887960f22119a18537f8fc68bb8b6ea6b", "message": "Removed extra new line", "committedDate": "2020-04-23T10:28:42Z", "type": "commit"}, {"oid": "b2631ba91abf42ddf5e83845f8ade748b66fde0c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2631ba91abf42ddf5e83845f8ade748b66fde0c", "message": "Removed unwanted if cases.", "committedDate": "2020-04-23T11:34:27Z", "type": "commit"}, {"oid": "27cd8d59d7f7d94a8c5db1c10ee666af25d73225", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27cd8d59d7f7d94a8c5db1c10ee666af25d73225", "message": "Changed the recovery logic of parameterized type desc.", "committedDate": "2020-04-23T17:27:12Z", "type": "commit"}, {"oid": "b88fd1c57e5491723338abe4e706b711e68a1fb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b88fd1c57e5491723338abe4e706b711e68a1fb4", "message": "Removed context type parameterized-type-desc.", "committedDate": "2020-04-23T17:32:52Z", "type": "commit"}, {"oid": "f495ea53bf081a936049d81dc6f8647d9abafe47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f495ea53bf081a936049d81dc6f8647d9abafe47", "message": "Added missing cases to resumeParsing.", "committedDate": "2020-04-23T17:39:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5OTU5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r414499597", "bodyText": "unwanted/wrong doc comment", "author": "SupunS", "createdAt": "2020-04-24T11:22:44Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5871,6 +5898,76 @@ private boolean isValidLHSExpression(SyntaxKind tokenKind) {\n     }\n \n     /**\n+     * Parse parameterized type descriptor.\n+     * parameterized-type-descriptor := map type-parameter | future type-parameter | typedesc type-parameter\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseParameterizedTypeDescriptor() {\n+        STNode parameterizedTypeKeyword;\n+        STToken nextToken = peek();\n+\n+        switch(nextToken.kind) {\n+            case MAP_KEYWORD: // map type desc\n+                startContext(ParserRuleContext.MAP_TYPE_DESCRIPTOR);\n+                parameterizedTypeKeyword = consume();\n+                break;\n+            case FUTURE_KEYWORD: // future type desc\n+                startContext(ParserRuleContext.FUTURE_TYPE_DESCRIPTOR);\n+                parameterizedTypeKeyword = consume();\n+                break;\n+            default:// typedesc type desc\n+                startContext(ParserRuleContext.TYPEDESC_TYPE_DESCRIPTOR);\n+                if (nextToken.kind == SyntaxKind.TYPEDESC_KEYWORD) {\n+                    parameterizedTypeKeyword = consume();\n+                } else {\n+                    Solution sol = recover(nextToken, ParserRuleContext.TYPEDESC_KEYWORD);\n+                    parameterizedTypeKeyword =  sol.recoveredNode;\n+                }\n+        }\n+\n+        STNode ltToken = parseLTToken();\n+        STNode typeNode = parseTypeDescriptor();\n+        STNode gtToken = parseGTToken();\n+\n+        endContext();\n+        return STNodeFactory.createParameterizedTypeDescriptorNode(parameterizedTypeKeyword, ltToken, typeNode,\n+                gtToken);\n+    }\n+\n+\n+    /**\n+     * Parse <code> < </code> token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseGTToken() {\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.GT_TOKEN) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(nextToken, ParserRuleContext.GT);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse <code> > </code> token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLTToken() {\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.LT_TOKEN) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(nextToken, ParserRuleContext.LT);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse null-keyword.", "originalCommit": "f495ea53bf081a936049d81dc6f8647d9abafe47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwMzQzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r415603436", "bodyText": "removed", "author": "rdulmina", "createdAt": "2020-04-27T08:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5OTU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUwMTA0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r414501040", "bodyText": "Can we live with one context?", "author": "SupunS", "createdAt": "2020-04-24T11:25:18Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5871,6 +5898,76 @@ private boolean isValidLHSExpression(SyntaxKind tokenKind) {\n     }\n \n     /**\n+     * Parse parameterized type descriptor.\n+     * parameterized-type-descriptor := map type-parameter | future type-parameter | typedesc type-parameter\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseParameterizedTypeDescriptor() {\n+        STNode parameterizedTypeKeyword;\n+        STToken nextToken = peek();\n+\n+        switch(nextToken.kind) {\n+            case MAP_KEYWORD: // map type desc\n+                startContext(ParserRuleContext.MAP_TYPE_DESCRIPTOR);\n+                parameterizedTypeKeyword = consume();\n+                break;\n+            case FUTURE_KEYWORD: // future type desc\n+                startContext(ParserRuleContext.FUTURE_TYPE_DESCRIPTOR);\n+                parameterizedTypeKeyword = consume();\n+                break;\n+            default:// typedesc type desc\n+                startContext(ParserRuleContext.TYPEDESC_TYPE_DESCRIPTOR);", "originalCommit": "f495ea53bf081a936049d81dc6f8647d9abafe47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NzkxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r414767918", "bodyText": "I'll look into that", "author": "rdulmina", "createdAt": "2020-04-24T18:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUwMTA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUwMzU3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r414503572", "bodyText": "Can we live with one list?\nSo the issue here is the left-recursion?\nOne way to handle the left-recursion is, TYPE_DESCRIPTORS list only has non-recursive ones. But when we reach the end of type-desc (eg: getNextRuleForTypeDesc()), we have three alternative paths:\n\nNext rule for type desc, just like what we have now (lets say this is X).\nOptional type desc path, next rule is ?.\nArray type desc path. Next rule is [.\n\nThen we can check on the alternative paths [X, ?, [ ], like any other alternative path search.", "author": "SupunS", "createdAt": "2020-04-24T11:29:53Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -122,7 +122,16 @@\n     // TODO: add other type descriptors\n     private static final ParserRuleContext[] TYPE_DESCRIPTORS =\n             { ParserRuleContext.SIMPLE_TYPE_DESCRIPTOR, ParserRuleContext.OBJECT_TYPE_DESCRIPTOR,\n-                    ParserRuleContext.RECORD_TYPE_DESCRIPTOR, ParserRuleContext.NIL_TYPE_DESCRIPTOR };\n+                    ParserRuleContext.RECORD_TYPE_DESCRIPTOR, ParserRuleContext.NIL_TYPE_DESCRIPTOR,\n+                    ParserRuleContext.MAP_TYPE_DESCRIPTOR, ParserRuleContext.FUTURE_TYPE_DESCRIPTOR,\n+                    ParserRuleContext.TYPEDESC_TYPE_DESCRIPTOR, ParserRuleContext.ARRAY_TYPE_DESCRIPTOR,\n+                    ParserRuleContext.OPTIONAL_TYPE_DESCRIPTOR};\n+\n+    private static final ParserRuleContext[] TYPE_DESCRIPTORS_WITHOUT_COMPLEX =", "originalCommit": "f495ea53bf081a936049d81dc6f8647d9abafe47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Nzk4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r414767986", "bodyText": "I'll look into that", "author": "rdulmina", "createdAt": "2020-04-24T18:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUwMzU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwMjc2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r415602765", "bodyText": "Changes done", "author": "rdulmina", "createdAt": "2020-04-27T08:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUwMzU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxNTIyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r414515228", "bodyText": "we should not switch contexts other than in the getNextRule() method's switch case.", "author": "SupunS", "createdAt": "2020-04-24T11:50:47Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2388,21 +2450,22 @@ private ParserRuleContext getNextRuleForDot() {\n      *\n      * @return Next parser context\n      */\n-    private ParserRuleContext getNextRuleForQuestionMark() {\n+    private ParserRuleContext getNextRuleForQuestionMark(int nextLookahead) {\n         ParserRuleContext parentCtx = getParentContext();\n         switch (parentCtx) {\n             case OPTIONAL_TYPE_DESCRIPTOR:\n-                endContext();\n-                parentCtx = getParentContext();\n-                switch (parentCtx) {\n-                    case MODULE_TYPE_DEFINITION:\n-                        return ParserRuleContext.SEMICOLON;\n-                    case RETURN_TYPE_DESCRIPTOR:\n-                        return ParserRuleContext.FUNC_BODY;\n-                    default:\n-                        return ParserRuleContext.VARIABLE_NAME;\n+                STToken nextToken = this.tokenReader.peek(nextLookahead);\n+                //int?[] scenario\n+                if (nextToken.kind == SyntaxKind.OPEN_BRACKET_TOKEN) {\n+                    switchContext(ParserRuleContext.ARRAY_TYPE_DESCRIPTOR);", "originalCommit": "f495ea53bf081a936049d81dc6f8647d9abafe47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwMjc4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22791#discussion_r415602783", "bodyText": "Resloved.", "author": "rdulmina", "createdAt": "2020-04-27T08:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxNTIyOA=="}], "type": "inlineReview"}, {"oid": "b045aed8400ad542b4ce9b0f6f3a830602c161bd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b045aed8400ad542b4ce9b0f6f3a830602c161bd", "message": "Used single context to parameterized type descriptors.", "committedDate": "2020-04-24T18:07:22Z", "type": "commit"}, {"oid": "c5bc057c10e3cf60fc4aff29cd6e885430d6588d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5bc057c10e3cf60fc4aff29cd6e885430d6588d", "message": "Changed the recovery logic of array and optional type descriptor.\n\nUsed one list for type descriptors without recursive types. Added three alternative paths after a type descriptor. New ParserRuleContext for non recursive types.", "committedDate": "2020-04-27T06:55:51Z", "type": "commit"}, {"oid": "178e9088248670049d11b86090fbfee80f31dc09", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/178e9088248670049d11b86090fbfee80f31dc09", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc\n\nAdded extra test case to parameterized type desc\n# Conflicts:\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/LexerTerminals.java\n#\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java", "committedDate": "2020-04-27T08:08:48Z", "type": "commit"}, {"oid": "5c1f3eb7d4a8abf2d5e22570b1c7fc5a1b4cacf6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c1f3eb7d4a8abf2d5e22570b1c7fc5a1b4cacf6", "message": "Changed the base of ParameterizedTypeDescriptorNode.", "committedDate": "2020-04-27T08:16:10Z", "type": "commit"}, {"oid": "33792f09fa228d940a9ec26c152cd6f3545c47eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33792f09fa228d940a9ec26c152cd6f3545c47eb", "message": "Removed extra new lines", "committedDate": "2020-04-27T08:21:08Z", "type": "commit"}, {"oid": "39bedfc2411ad87e19e6a8e5b0f0226cffe49364", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39bedfc2411ad87e19e6a8e5b0f0226cffe49364", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc", "committedDate": "2020-04-27T11:18:01Z", "type": "commit"}, {"oid": "9ac5f487e41002fa40fe9d32e45db34ca62795bd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ac5f487e41002fa40fe9d32e45db34ca62795bd", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc", "committedDate": "2020-04-27T11:18:20Z", "type": "commit"}, {"oid": "816f4d99f9a2af39d4e0f67bcdf233614b1b3760", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/816f4d99f9a2af39d4e0f67bcdf233614b1b3760", "message": "Changed the order of TYPE_OR_VAR_NAME list in errorhandler.", "committedDate": "2020-04-27T14:50:48Z", "type": "commit"}, {"oid": "ee3f475d20f6e4c34cf1ac4da23d7291488bf4f7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee3f475d20f6e4c34cf1ac4da23d7291488bf4f7", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into map-typedesc", "committedDate": "2020-04-27T15:39:35Z", "type": "commit"}, {"oid": "e048300a338cbbb9cf67bf82e58c64f0566890b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e048300a338cbbb9cf67bf82e58c64f0566890b0", "message": "Changed a wrong comment.", "committedDate": "2020-04-27T15:47:57Z", "type": "commit"}]}