{"pr_number": 26339, "pr_title": "[Formatter] Implement some methods in NewFormattingTreeModifier", "pr_createdAt": "2020-10-13T20:38:49Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339", "timeline": [{"oid": "5ec0f3fb949b4787327278e2ce43c875894cc0d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ec0f3fb949b4787327278e2ce43c875894cc0d7", "message": "Implement NamedWorkerDeclarationNode for new formatter", "committedDate": "2020-10-06T09:16:30Z", "type": "commit"}, {"oid": "2590ec153a89c51f7ef5f3f0ecb71375232d8825", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2590ec153a89c51f7ef5f3f0ecb71375232d8825", "message": "Implement basics of ArrayTypeDescriptorNode in new formatting tree modifier", "committedDate": "2020-10-08T08:42:17Z", "type": "commit"}, {"oid": "ccc3747da412fab5281fdda55be602675e15e6a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ccc3747da412fab5281fdda55be602675e15e6a7", "message": "Fix ArrayTypeDescriptorNode formatting issue", "committedDate": "2020-10-08T09:23:55Z", "type": "commit"}, {"oid": "4aceedb35a1ae3bfa756cec1f18bf80028547130", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4aceedb35a1ae3bfa756cec1f18bf80028547130", "message": "Implement XML element, XML start tag, and XML end tag in new formatting tree modifier", "committedDate": "2020-10-13T08:38:04Z", "type": "commit"}, {"oid": "52966bd7bc53baeec37dfce4a947d5a6cad3eb2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52966bd7bc53baeec37dfce4a947d5a6cad3eb2b", "message": "Merge branch 'formatter-change' of https://github.com/ballerina-platform/ballerina-lang into formatter-change", "committedDate": "2020-10-13T08:42:58Z", "type": "commit"}, {"oid": "da5b81fd54230777ee070434f45a2a636290fa44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da5b81fd54230777ee070434f45a2a636290fa44", "message": "Fix method re-declaration error in new formatting tree modifier", "committedDate": "2020-10-13T09:20:39Z", "type": "commit"}, {"oid": "d76343895ed3878532637ceef33dff5391bfa1f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d76343895ed3878532637ceef33dff5391bfa1f0", "message": "Implement XmlAttribute and XmlAttributeValue methods in NewFormattingTreeModifier", "committedDate": "2020-10-13T20:26:00Z", "type": "commit"}, {"oid": "0faab39515042600f7df951e3d919fe86a1c1fba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0faab39515042600f7df951e3d919fe86a1c1fba", "message": "Merge remote-tracking branch 'upstream/formatter-change' into formatter-change", "committedDate": "2020-10-13T20:27:31Z", "type": "commit"}, {"oid": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "message": "Reformat code", "committedDate": "2020-10-13T20:44:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NDgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504374819", "bodyText": "Don't we need a newline after the workers?", "author": "SupunS", "createdAt": "2020-10-14T03:13:44Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -389,6 +389,13 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 0);", "originalCommit": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDE0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580140", "bodyText": "Fixed", "author": "sanjana", "createdAt": "2020-10-14T10:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NDgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTMyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504375323", "bodyText": "Last child in all nodes (i.e: in all  the transform methods), should take the trailing WS/NL from the global variable.\nYou can refer to the existing methods..", "author": "SupunS", "createdAt": "2020-10-14T03:15:38Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);", "originalCommit": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MjIwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504582202", "bodyText": "Fixed", "author": "sanjana", "createdAt": "2020-10-14T10:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODY2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504378663", "bodyText": "Shouldn't there be a newline after each annotation? please refer to the other places on how the annotations are formatted", "author": "SupunS", "createdAt": "2020-10-14T03:27:50Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);", "originalCommit": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDI5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580298", "bodyText": "Fixed.", "author": "sanjana", "createdAt": "2020-10-14T10:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODY2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODk4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504378985", "bodyText": "Need a WS after the return type-desc", "author": "SupunS", "createdAt": "2020-10-14T03:29:07Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);", "originalCommit": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MjQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504582411", "bodyText": "Fixed.", "author": "sanjana", "createdAt": "2020-10-14T10:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTUwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504379500", "bodyText": "This is in the wrong order. Close bracket is visited before the array-length.", "author": "SupunS", "createdAt": "2020-10-14T03:30:53Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);", "originalCommit": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580384", "bodyText": "Corrected.", "author": "sanjana", "createdAt": "2020-10-14T10:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTU5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504379594", "bodyText": "since isPresent() check is done, you can directly call arrayLength().get()", "author": "SupunS", "createdAt": "2020-10-14T03:31:21Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);", "originalCommit": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MjAwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504582002", "bodyText": "Fixed", "author": "sanjana", "createdAt": "2020-10-14T10:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTU5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDIxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504380218", "bodyText": "Last child in all nodes (i.e: in all the transform methods), should take the trailing WS/NL from the global variable.\nLets fix that in all places", "author": "SupunS", "createdAt": "2020-10-14T03:33:46Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), 0, 0);", "originalCommit": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580520", "bodyText": "Fixed.", "author": "sanjana", "createdAt": "2020-10-14T10:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDY3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504380673", "bodyText": "use get() instead of orElse(null)", "author": "SupunS", "createdAt": "2020-10-14T03:35:27Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -2969,6 +2929,134 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 0, 0, 0);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 0, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), 0, 1);\n+        \n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().orElse(null), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), 0, 0);\n+\n+        return xMLElementNode.modify()\n+                .withStartTag(startTagNode)\n+                .withContent(content)\n+                .withEndTag(endTagNode)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLStartTagNode transform(XMLStartTagNode xMLStartTagNode) {\n+        Token ltToken = formatToken(xMLStartTagNode.ltToken(), 0, 0);\n+        int nameTrailingWS = xMLStartTagNode.attributes().isEmpty() ? 0 : 1;\n+        XMLNameNode name = formatNode(xMLStartTagNode.name(), nameTrailingWS, 0);\n+        NodeList<XMLAttributeNode> attributes = formatNodeList(xMLStartTagNode.attributes(), 1, 0, 0, 0);\n+        Token getToken = formatToken(xMLStartTagNode.getToken(), 0, 0);\n+\n+        return xMLStartTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withName(name)\n+                .withAttributes(attributes)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLEndTagNode transform(XMLEndTagNode xMLEndTagNode) {\n+        Token ltToken = formatToken(xMLEndTagNode.ltToken(), 0, 0);\n+        Token slashToken = formatToken(xMLEndTagNode.slashToken(), 0, 0);\n+        XMLNameNode name = formatNode(xMLEndTagNode.name(), 0,0);\n+        Token getToken = formatToken(xMLEndTagNode.getToken(), 0,0);\n+\n+        return xMLEndTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withSlashToken(slashToken)\n+                .withName(name)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XmlTypeDescriptorNode transform(XmlTypeDescriptorNode xmlTypeDescriptorNode) {\n+        Token xmlKeywordToken = formatToken(xmlTypeDescriptorNode.xmlKeywordToken(), 1, 0);\n+        if (xmlTypeDescriptorNode.xmlTypeParamsNode().isPresent()) {\n+            TypeParameterNode xmlTypeParamsNode = formatNode(xmlTypeDescriptorNode.xmlTypeParamsNode().orElse(null),", "originalCommit": "d65ca74e6dd60b6d938b09084cd2ddef7cfc2b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4MDY1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504580655", "bodyText": "Completed.", "author": "sanjana", "createdAt": "2020-10-14T10:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MDY3Mw=="}], "type": "inlineReview"}, {"oid": "6862d4d552e5cf4e5f2c9961e225fa034c506a7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6862d4d552e5cf4e5f2c9961e225fa034c506a7d", "message": "Add blank newline after named worker declarations", "committedDate": "2020-10-14T05:57:01Z", "type": "commit"}, {"oid": "a5168abfc264e530d909576dac4ca03f19f4d581", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5168abfc264e530d909576dac4ca03f19f4d581", "message": "Add newlines after annotations of named worker declaration", "committedDate": "2020-10-14T09:54:07Z", "type": "commit"}, {"oid": "204e9739f833a7439a326f1cde54291886a57e6c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/204e9739f833a7439a326f1cde54291886a57e6c", "message": "Add whitespace after return type-desc of workers", "committedDate": "2020-10-14T10:02:45Z", "type": "commit"}, {"oid": "4d912466f4d53ae7d3f5f861e8954ae3dc558d29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d912466f4d53ae7d3f5f861e8954ae3dc558d29", "message": "Improve code suggestions", "committedDate": "2020-10-14T10:41:07Z", "type": "commit"}, {"oid": "07a4874a84e4a488b70ba5dab37bece581b46427", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07a4874a84e4a488b70ba5dab37bece581b46427", "message": "Get trailing WS/NL from global variable for last child of each node", "committedDate": "2020-10-14T10:42:44Z", "type": "commit"}, {"oid": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdaa37b9f498322489b9241c3cdbd1d03b3376b6", "message": "Merge remote-tracking branch 'upstream/formatter-change' into formatter-change", "committedDate": "2020-10-14T10:44:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504598597", "bodyText": "Shall we keep a single trailing newline here?", "author": "IrushiL", "createdAt": "2020-10-14T11:21:26Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -387,6 +388,14 @@ public FunctionBodyBlockNode transform(FunctionBodyBlockNode functionBodyBlockNo\n         Token openBrace = formatToken(functionBodyBlockNode.openBraceToken(), 0, 1);\n         indent(); // increase indentation for the statements to follow.\n         NodeList<StatementNode> statements = formatNodeList(functionBodyBlockNode.statements(), 0, 1, 0, 1, true);\n+        if (functionBodyBlockNode.namedWorkerDeclarator().isPresent()) {\n+            NamedWorkerDeclarator namedWorkerDeclarator = formatNode(functionBodyBlockNode.namedWorkerDeclarator().get(),\n+                    0, 2);", "originalCommit": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMTY4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504601686", "bodyText": "It was suggested by @SupunS to keep a newline between workers.\n#26339 (comment)", "author": "sanjana", "createdAt": "2020-10-14T11:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMjg5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504602893", "bodyText": "I think he must have meant a single newline, let's get this clarified from @SupunS.", "author": "IrushiL", "createdAt": "2020-10-14T11:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxNTUwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504615500", "bodyText": "I was initially thinking of a single newline.\nBut on a second thought, I think we should go by the same rules as for the statements. That is, a minimum of a single newline, and a maximum of two newlines. WDYT?\nbtw, have we implemented the transform(NamedWorkerDeclarator namedWorkerDeclarator) method? We will have the same concern there as well?", "author": "SupunS", "createdAt": "2020-10-14T11:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxOTU0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504619545", "bodyText": "We should implement the transform(NamedWorkerDeclarator namedWorkerDeclarator) method in the new formatting tree modifier as well.\nShould we go with a single newline for worker blocks?\nOtherwise there will be an extra newline at the end of the last worker block as suggested by @IrushiL", "author": "sanjana", "createdAt": "2020-10-14T12:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyODM0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504628348", "bodyText": "@sanjana Let's go in the same approach as in statements. It handles those cases as well.", "author": "SupunS", "createdAt": "2020-10-14T12:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzNjQwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504636408", "bodyText": "@SupunS Yeah, it's better to preserve an empty new line if the user has explicitly kept new lines.", "author": "IrushiL", "createdAt": "2020-10-14T12:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2MTMwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504661305", "bodyText": "okay, I've fixed it.", "author": "sanjana", "createdAt": "2020-10-14T13:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5ODU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxOTg3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504619875", "bodyText": "Can we simplify this logic to something like [1]?\n[1] \n  \n    \n      ballerina-lang/misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java\n    \n    \n         Line 348\n      in\n      bdaa37b\n    \n    \n    \n    \n\n        \n          \n           Token closePara;", "author": "IrushiL", "createdAt": "2020-10-14T12:01:18Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -3315,6 +3277,136 @@ public BreakStatementNode transform(BreakStatementNode breakStatementNode) {\n                 .apply();\n     }\n \n+    @Override\n+    public NamedWorkerDeclarationNode transform(NamedWorkerDeclarationNode namedWorkerDeclarationNode) {\n+        NodeList<AnnotationNode> annotations = formatNodeList(namedWorkerDeclarationNode.annotations(), 0, 1, 0, 1);\n+        Token workerKeyword = formatToken(namedWorkerDeclarationNode.workerKeyword(), 1, 0);\n+        IdentifierToken workerName = formatToken(namedWorkerDeclarationNode.workerName(), 1, 0);\n+        if (namedWorkerDeclarationNode.returnTypeDesc().isPresent()) {\n+            Node returnTypeDesc = formatNode(namedWorkerDeclarationNode.returnTypeDesc().get(), 1, 0);\n+            namedWorkerDeclarationNode = namedWorkerDeclarationNode.modify()\n+                    .withReturnTypeDesc(returnTypeDesc)\n+                    .apply();\n+        }\n+\n+        BlockStatementNode workerBody = formatNode(namedWorkerDeclarationNode.workerBody(), this.trailingWS, this.trailingNL);\n+\n+        return namedWorkerDeclarationNode.modify()\n+                .withAnnotations(annotations)\n+                .withWorkerKeyword(workerKeyword)\n+                .withWorkerName(workerName)\n+                .withWorkerBody(workerBody)\n+                .apply();\n+    }\n+\n+    @Override\n+    public ArrayTypeDescriptorNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n+        TypeDescriptorNode memberTypeDesc = formatNode(arrayTypeDescriptorNode.memberTypeDesc(), 0, 0);\n+        Token openBracket = formatToken(arrayTypeDescriptorNode.openBracket(), 0, 0);\n+        if (arrayTypeDescriptorNode.arrayLength().isPresent()) {\n+            Node arrayLength = formatNode(arrayTypeDescriptorNode.arrayLength().get(), 0, 0);\n+            arrayTypeDescriptorNode = arrayTypeDescriptorNode.modify()\n+                    .withArrayLength(arrayLength)\n+                    .apply();\n+        }\n+\n+        Token closeBracket = formatToken(arrayTypeDescriptorNode.closeBracket(), this.trailingWS, this.trailingNL);\n+        return arrayTypeDescriptorNode.modify()\n+                .withOpenBracket(openBracket)\n+                .withCloseBracket(closeBracket)\n+                .withMemberTypeDesc(memberTypeDesc)\n+                .apply();\n+\n+    }\n+\n+    @Override\n+    public XMLElementNode transform(XMLElementNode xMLElementNode) {\n+        XMLStartTagNode startTagNode = formatNode(xMLElementNode.startTag(), 0, 0);\n+        NodeList<XMLItemNode> content = formatNodeList(xMLElementNode.content(), 0, 0, 0, 0);\n+        XMLEndTagNode endTagNode = formatNode(xMLElementNode.endTag(), this.trailingWS, this.trailingNL);\n+\n+        return xMLElementNode.modify()\n+                .withStartTag(startTagNode)\n+                .withContent(content)\n+                .withEndTag(endTagNode)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLStartTagNode transform(XMLStartTagNode xMLStartTagNode) {\n+        Token ltToken = formatToken(xMLStartTagNode.ltToken(), 0, 0);\n+        int nameTrailingWS = xMLStartTagNode.attributes().isEmpty() ? 0 : 1;\n+        XMLNameNode name = formatNode(xMLStartTagNode.name(), nameTrailingWS, 0);\n+        NodeList<XMLAttributeNode> attributes = formatNodeList(xMLStartTagNode.attributes(), 1, 0, 0, 0);\n+        Token getToken = formatToken(xMLStartTagNode.getToken(), this.trailingWS, this.trailingNL);\n+\n+        return xMLStartTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withName(name)\n+                .withAttributes(attributes)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XMLEndTagNode transform(XMLEndTagNode xMLEndTagNode) {\n+        Token ltToken = formatToken(xMLEndTagNode.ltToken(), 0, 0);\n+        Token slashToken = formatToken(xMLEndTagNode.slashToken(), 0, 0);\n+        XMLNameNode name = formatNode(xMLEndTagNode.name(), 0,0);\n+        Token getToken = formatToken(xMLEndTagNode.getToken(), this.trailingWS,this.trailingNL);\n+\n+        return xMLEndTagNode.modify()\n+                .withLtToken(ltToken)\n+                .withSlashToken(slashToken)\n+                .withName(name)\n+                .withGetToken(getToken)\n+                .apply();\n+    }\n+\n+    @Override\n+    public XmlTypeDescriptorNode transform(XmlTypeDescriptorNode xmlTypeDescriptorNode) {\n+        int trailingWS = xmlTypeDescriptorNode.xmlTypeParamsNode().isEmpty() ? this.trailingWS : 0;\n+        int trailingNL = xmlTypeDescriptorNode.xmlTypeParamsNode().isEmpty() ? this.trailingNL : 0;\n+        Token xmlKeywordToken = formatToken(xmlTypeDescriptorNode.xmlKeywordToken(), trailingWS, trailingNL);\n+        if (xmlTypeDescriptorNode.xmlTypeParamsNode().isPresent()) {\n+            TypeParameterNode xmlTypeParamsNode = formatNode(xmlTypeDescriptorNode.xmlTypeParamsNode().get(),\n+                    this.trailingWS, this.trailingNL);\n+            xmlTypeDescriptorNode = xmlTypeDescriptorNode.modify()\n+                    .withXmlTypeParamsNode(xmlTypeParamsNode)\n+                    .apply();\n+        }", "originalCommit": "bdaa37b9f498322489b9241c3cdbd1d03b3376b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2Njg1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26339#discussion_r504666853", "bodyText": "Done.", "author": "sanjana", "createdAt": "2020-10-14T13:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxOTg3NQ=="}], "type": "inlineReview"}, {"oid": "7cc633b7a36557aa6f54fd6a65556c873b9a432b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cc633b7a36557aa6f54fd6a65556c873b9a432b", "message": "Fix review suggestions", "committedDate": "2020-10-14T12:50:46Z", "type": "commit"}, {"oid": "7a192125b1cb27ccf79350fe28771cd26d0ccee6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a192125b1cb27ccf79350fe28771cd26d0ccee6", "message": "Merge remote-tracking branch 'upstream/formatter-change' into formatter-change", "committedDate": "2020-10-14T12:55:56Z", "type": "commit"}, {"oid": "ac6a25b2ae60275833f1219f772dcd015fe4cf19", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac6a25b2ae60275833f1219f772dcd015fe4cf19", "message": "Refactor code and resolve conflicts", "committedDate": "2020-10-14T13:04:45Z", "type": "commit"}]}