{"pr_number": 25354, "pr_title": "Add expression evaluation integration tests", "pr_createdAt": "2020-08-20T10:07:28Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354", "timeline": [{"oid": "27236fb38d7bf9cdf53557741fb02c49d12acd58", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27236fb38d7bf9cdf53557741fb02c49d12acd58", "message": "Add debugger test framework support for expression evaluation tests", "committedDate": "2020-08-09T10:29:19Z", "type": "commit"}, {"oid": "45dfcc54b097b9d5824cbb2e40546a8511d959ec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/45dfcc54b097b9d5824cbb2e40546a8511d959ec", "message": "Fix issue when evaluating nill variables", "committedDate": "2020-08-19T10:02:26Z", "type": "commit"}, {"oid": "e99b95ab34996fb8aba987858722296df255e2cd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e99b95ab34996fb8aba987858722296df255e2cd", "message": "Add variable evaluation and arithmetic operation evaluation tests", "committedDate": "2020-08-16T10:29:19Z", "type": "commit"}, {"oid": "32853e0fd7c3fa9f54ab62af88f880892c3b88cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32853e0fd7c3fa9f54ab62af88f880892c3b88cf", "message": "Add negative test scenarios", "committedDate": "2020-08-20T09:36:02Z", "type": "commit"}, {"oid": "f7d61c409a984f11112766ce4a1a1b695be36236", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7d61c409a984f11112766ce4a1a1b695be36236", "message": "Add minor improvements", "committedDate": "2020-08-20T10:05:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NDg1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354#discussion_r473854851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new BallerinaTestException(\"Connection error is occurred when trying to fet information from the \" +\n          \n          \n            \n                        throw new BallerinaTestException(\"Connection error occurred when trying to get information from the \" +", "author": "praveennadarajah", "createdAt": "2020-08-20T10:21:06Z", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/DebugAdapterBaseTestCase.java", "diffHunk": "@@ -403,6 +405,78 @@ protected void assertVariable(Variable variable, String variableName, String var\n         Assert.assertEquals(variable.getType(), variableType);\n     }\n \n+    /**\n+     * Can be used to assert any expression evaluation result.\n+     *\n+     * @param context     suspended context.\n+     * @param expression  expression.\n+     * @param resultValue result value.\n+     * @param resultType  result type.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    protected void assertExpression(StoppedEventArguments context, String expression, String resultValue,\n+                                    String resultType) throws BallerinaTestException {\n+        Variable result = evaluateExpression(context, expression);\n+        Assert.assertEquals(result.getValue(), resultValue);\n+        Assert.assertEquals(result.getType(), resultType);\n+    }\n+\n+    /**\n+     * Can be used to evaluate any given evaluation failure, against its expected error message.\n+     *\n+     * @param context    suspended context.\n+     * @param expression expression.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    protected void assertEvaluationError(StoppedEventArguments context, String expression, String errorMessage)\n+            throws BallerinaTestException {\n+        Variable result = evaluateExpression(context, expression);\n+        Assert.assertEquals(result.getValue(), errorMessage);\n+        Assert.assertEquals(result.getType(), \"string\");\n+    }\n+\n+    /**\n+     * Can be used to evaluate any given expression, when a debug hit is occurred.\n+     *\n+     * @param args debug stopped event arguments.\n+     * @return the evaluation result as a variable.\n+     * @throws BallerinaTestException if an error occurs when evaluating the expression.\n+     */\n+    private Variable evaluateExpression(StoppedEventArguments args, String expr) throws BallerinaTestException {\n+        if (!DebugHitListener.connector.isConnected()) {\n+            throw new BallerinaTestException(\"Connection error is occurred when trying to fet information from the \" +", "originalCommit": "f7d61c409a984f11112766ce4a1a1b695be36236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NzQ3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354#discussion_r473877471", "bodyText": "Fixed", "author": "NipunaRanasinghe", "createdAt": "2020-08-20T10:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NDg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg2OTI5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354#discussion_r473869299", "bodyText": "Shall we change the above lines to use Paths.get since File.sperator is a pre-1.7 JDK way?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;\n          \n          \n            \n                    testProjectPath = Paths.get(testProjectBaseDir.toString(), testProjectName).toString();", "author": "praveennadarajah", "createdAt": "2020-08-20T10:39:16Z", "path": "tests/jballerina-debugger-integration-test/src/test/java/org/ballerinalang/debugger/test/adapter/evaluation/ExpressionEvaluationTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.debugger.test.adapter.evaluation;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.ballerinalang.debugger.test.DebugAdapterBaseTestCase;\n+import org.ballerinalang.debugger.test.utils.BallerinaTestDebugPoint;\n+import org.ballerinalang.debugger.test.utils.DebugUtils;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.eclipse.lsp4j.debug.StoppedEventArguments;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Test implementation for debug expression evaluation scenarios.\n+ */\n+public class ExpressionEvaluationTest extends DebugAdapterBaseTestCase {\n+\n+    private StoppedEventArguments context;\n+\n+    private static final String nilVar = \"v01_varVariable\";\n+    private static final String booleanVar = \"v02_booleanVar\";\n+    private static final String intVar = \"v03_intVar\";\n+    private static final String floatVar = \"v04_floatVar\";\n+    private static final String decimalVar = \"v05_decimalVar\";\n+    private static final String stringVar = \"v06_stringVar\";\n+    private static final String xmlVar = \"v07_xmlVar\";\n+    private static final String arrayVar = \"v08_arrayVar\";\n+    private static final String tupleVar = \"v09_tupleVar\";\n+    private static final String mapVar = \"v10_mapVar\";\n+    private static final String recordVar = \"v11_john\";\n+    private static final String anonRecordVar = \"v12_anonRecord\";\n+    private static final String errorVar = \"v13_errorVar\";\n+    private static final String anonFunctionVar = \"v14_anonFunctionVar\";\n+    private static final String futureVar = \"v15_futureVar\";\n+    private static final String objectVar = \"v16_objectVar\";\n+    private static final String anonObjectVar = \"v17_anonObjectVar\";\n+    private static final String typeDescVar = \"v18_typedescVar\";\n+    private static final String unionVar = \"v19_unionVar\";\n+    private static final String optionalVar = \"v20_optionalVar\";\n+    private static final String anyVar = \"v21_anyVar\";\n+    private static final String anydataVar = \"v22_anydataVar\";\n+    private static final String byteVar = \"v23_byteVar\";\n+    private static final String jsonVar = \"v24_jsonVar\";\n+    private static final String tableVar = \"v25_tableVar\";\n+    private static final String streamVar = \"v26_oddNumberStream\";\n+    private static final String neverVar = \"v27_neverVar\";\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        testProjectName = \"basic-project\";\n+        testModuleName = \"advanced\";\n+        testModuleFileName = \"main.bal\";\n+        testProjectPath = testProjectBaseDir.toString() + File.separator + testProjectName;", "originalCommit": "f7d61c409a984f11112766ce4a1a1b695be36236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NzM1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25354#discussion_r473877355", "bodyText": "+1, Changed.", "author": "NipunaRanasinghe", "createdAt": "2020-08-20T10:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg2OTI5OQ=="}], "type": "inlineReview"}, {"oid": "c7ffedb0b1ce27985c4bb37d6076cfe8ce63f805", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c7ffedb0b1ce27985c4bb37d6076cfe8ce63f805", "message": "Add review suggestions", "committedDate": "2020-08-20T10:49:10Z", "type": "commit"}, {"oid": "4aab4d3d4e8cbc5a01188a8318666912e8256643", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4aab4d3d4e8cbc5a01188a8318666912e8256643", "message": "Sync with master branch", "committedDate": "2020-08-21T07:12:29Z", "type": "commit"}]}