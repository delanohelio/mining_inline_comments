{"pr_number": 21839, "pr_title": "Fix un-prefixed xml import bad-sad error", "pr_createdAt": "2020-03-16T18:58:50Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839", "timeline": [{"oid": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d", "message": "Fix un-prefixed xml import bad-sad error", "committedDate": "2020-03-16T18:50:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2NTUyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393265523", "bodyText": "Can invert this condition right?", "author": "pubudu91", "createdAt": "2020-03-16T19:34:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {", "originalCommit": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2Nzg1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393267850", "bodyText": "I'm assuming the above logic is for constants of the form \"{http://www.w3.org/XML/1998/namespace}space\"? If so, is it a possibility to have multiple braces within such a string? In that case, would the result produced by this logic still be correct?", "author": "pubudu91", "createdAt": "2020-03-16T19:39:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);\n+                resultType = symTable.semanticError;\n+                return null;\n+            } else {\n+                String constVal = (String) constantSymbol.value.value;\n+                int s = constVal.indexOf('{');\n+                int e = constVal.lastIndexOf('}');\n+                if (e > s) {", "originalCommit": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzNDg4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393334889", "bodyText": "Yey, it's URI, not an HTTP URL", "author": "rdhananjaya", "createdAt": "2020-03-16T22:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2Nzg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNTY3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393315672", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n          \n          \n            \n                                    symTable.stringType, constantSymbol.literalType);\n          \n          \n            \n                            dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES, symTable.stringType, constantSymbol.literalType);", "author": "MaryamZi", "createdAt": "2020-03-16T21:17:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);", "originalCommit": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNzA4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393317086", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n          \n          \n            \n                        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n          \n          \n            \n                        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        resultType = symTable.semanticError;\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (xmlnsSymbol == null || xmlnsSymbol.getKind() != SymbolKind.XMLNS) {\n          \n          \n            \n                        resultType = symTable.semanticError;\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    BXMLNSSymbol symbol = (BXMLNSSymbol) xmlnsSymbol;\n          \n          \n            \n                    bLangXMLQName.namespaceURI = symbol.namespaceURI;\n          \n          \n            \n                    bLangXMLQName.nsSymbol = symbol;", "author": "MaryamZi", "createdAt": "2020-03-16T21:21:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }", "originalCommit": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxOTgzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393319837", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                xmlnsSymbol = new BXMLNSSymbol(names.fromString(constVal.substring(e)), nsURI,\n          \n          \n            \n                                        constantSymbol.pkgID, constantSymbol.owner);\n          \n          \n            \n                                pkgSymbol.isUsed = true;\n          \n          \n            \n                                return xmlnsSymbol;\n          \n          \n            \n                                pkgSymbol.isUsed = true;\n          \n          \n            \n                                return new BXMLNSSymbol(names.fromString(constVal.substring(e)), nsURI,\n          \n          \n            \n                                                        constantSymbol.pkgID, constantSymbol.owner);", "author": "MaryamZi", "createdAt": "2020-03-16T21:27:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);\n+                resultType = symTable.semanticError;\n+                return null;\n+            } else {\n+                String constVal = (String) constantSymbol.value.value;\n+                int s = constVal.indexOf('{');\n+                int e = constVal.lastIndexOf('}');\n+                if (e > s) {\n+                    String nsURI = constVal.substring(s + 1, e);\n+                    xmlnsSymbol = new BXMLNSSymbol(names.fromString(constVal.substring(e)), nsURI,\n+                            constantSymbol.pkgID, constantSymbol.owner);\n+                    pkgSymbol.isUsed = true;\n+                    return xmlnsSymbol;", "originalCommit": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyMDEzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21839#discussion_r393320133", "bodyText": "Do we need to set resultType here? Ideally should be done where called right?", "author": "MaryamZi", "createdAt": "2020-03-16T21:28:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2592,8 +2592,51 @@ public void visit(BLangXMLQName bLangXMLQName) {\n             bLangXMLQName.type = symTable.semanticError;\n             return;\n         }\n-        bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n-        bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+\n+        if (xmlnsSymbol.getKind() == SymbolKind.PACKAGE) {\n+            xmlnsSymbol = getXmlNsSymbolFromPkgSymbol(bLangXMLQName.localname.value, bLangXMLQName.prefix.value,\n+                    xmlnsSymbol, bLangXMLQName.pos);\n+        }\n+        if (xmlnsSymbol != null && xmlnsSymbol.getKind() == SymbolKind.XMLNS) {\n+            bLangXMLQName.namespaceURI = ((BXMLNSSymbol) xmlnsSymbol).namespaceURI;\n+            bLangXMLQName.nsSymbol = (BXMLNSSymbol) xmlnsSymbol;\n+        } else {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private BSymbol getXmlNsSymbolFromPkgSymbol(String localname, String prefix, BSymbol xmlnsSymbol, DiagnosticPos pos) {\n+        BPackageSymbol pkgSymbol = (BPackageSymbol) xmlnsSymbol;\n+        BSymbol constSymbol = symResolver.lookupMemberSymbol(pos, pkgSymbol.scope, env,\n+                names.fromString(localname), SymTag.CONSTANT);\n+        if (constSymbol != symTable.notFoundSymbol) {\n+            BConstantSymbol constantSymbol = (BConstantSymbol) constSymbol;\n+            if (constantSymbol.literalType.tag != TypeTags.STRING) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPES,\n+                        symTable.stringType, constantSymbol.literalType);\n+                resultType = symTable.semanticError;\n+                return null;\n+            } else {\n+                String constVal = (String) constantSymbol.value.value;\n+                int s = constVal.indexOf('{');\n+                int e = constVal.lastIndexOf('}');\n+                if (e > s) {\n+                    String nsURI = constVal.substring(s + 1, e);\n+                    xmlnsSymbol = new BXMLNSSymbol(names.fromString(constVal.substring(e)), nsURI,\n+                            constantSymbol.pkgID, constantSymbol.owner);\n+                    pkgSymbol.isUsed = true;\n+                    return xmlnsSymbol;\n+                }\n+                dlog.error(pos, DiagnosticCode.INVALID_ATTRIBUTE_REFERENCE, prefix + \":\" + localname);\n+                resultType = symTable.semanticError;", "originalCommit": "0cc2a59cce86e1b230db3ae2f9767fbe8a8f0b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "369e84584d00e195703fb214747060d5b41ae461", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/369e84584d00e195703fb214747060d5b41ae461", "message": " Apply review suggestions", "committedDate": "2020-03-16T22:19:02Z", "type": "commit"}, {"oid": "554f13caa691cc15d5e172b16f9ec1aa916dd372", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/554f13caa691cc15d5e172b16f9ec1aa916dd372", "message": "Merge branch 'stage' of github.com:ballerina-platform/ballerina-lang into xml-fix-unable-to-import-xml-module-unprefixed\n\n\u0001 Conflicts:\n\u0001\ttests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-attribute-access-lax-behavior.bal", "committedDate": "2020-03-17T02:23:21Z", "type": "commit"}, {"oid": "87010786ada5e5c56606860e10bd37964acace06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87010786ada5e5c56606860e10bd37964acace06", "message": "Fix test failure", "committedDate": "2020-03-17T02:39:32Z", "type": "commit"}]}