{"pr_number": 23672, "pr_title": "Add transformer method for annotation declaration node", "pr_createdAt": "2020-06-02T11:18:28Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672", "timeline": [{"oid": "625bb05cadefcc7ffcdd70f72b0481d59f88ce2f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/625bb05cadefcc7ffcdd70f72b0481d59f88ce2f", "message": "Transform method for annotation declaration.", "committedDate": "2020-06-02T10:55:59Z", "type": "commit"}, {"oid": "be63b893f6cfae9bd01d1620c59b9ca973cd4d1e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be63b893f6cfae9bd01d1620c59b9ca973cd4d1e", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into remote-method", "committedDate": "2020-06-02T11:00:17Z", "type": "commit"}, {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac17a9d86e3a22a12521d76b933f46d9d8cbe980", "message": "Fix checkstyle violations.", "committedDate": "2020-06-02T11:43:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTAyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433839024", "bodyText": "can we use kind instead a string?", "author": "manuranga", "createdAt": "2020-06-02T12:32:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            String firstIndent = attachPoint.firstIdent().text().toLowerCase();\n+            if (firstIndent == \"object\") {\n+                switch (attachPoint.secondIdent().text().toLowerCase()) {", "originalCommit": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMzcwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434403702", "bodyText": "Used enum", "author": "rdulmina", "createdAt": "2020-06-03T08:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjI0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433846247", "bodyText": "I have updated this method to handle missing nodes (Identifiers). PR is yet to be merged (#23669), but better to sync with it, if it got merged before this.", "author": "SupunS", "createdAt": "2020-06-02T12:45:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());", "originalCommit": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwOTE1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434409159", "bodyText": "Noted", "author": "rdulmina", "createdAt": "2020-06-03T08:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTI1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434431250", "bodyText": "Should use createIdentifier which accept a STNode instead of String as the second param.", "author": "SupunS", "createdAt": "2020-06-03T09:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MDMzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433850332", "bodyText": "Can use a switch case for the outer if-else as well.", "author": "SupunS", "createdAt": "2020-06-02T12:51:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            String firstIndent = attachPoint.firstIdent().text().toLowerCase();\n+            if (firstIndent == \"object\") {\n+                switch (attachPoint.secondIdent().text().toLowerCase()) {\n+                    case \"function\" :\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfunction\", source);\n+                        break;\n+                    case \"field\" :\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfield\", source);\n+                        break;\n+                    default:\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objecttype\", source);\n+                }\n+            } else if (firstIndent == \"resource\") {\n+                bLAttachPoint = AttachPoint.getAttachmentPoint(\"resourcefunction\", source);\n+            } else if (firstIndent == \"record\") {\n+                bLAttachPoint = AttachPoint.getAttachmentPoint(\"recordfield\", source);\n+            } else {", "originalCommit": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNDE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434404177", "bodyText": "Done", "author": "rdulmina", "createdAt": "2020-06-03T08:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MDMzMg=="}], "type": "inlineReview"}, {"oid": "2c0c29a87a7ae8bae0ae2f4349ed47fee520c860", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c0c29a87a7ae8bae0ae2f4349ed47fee520c860", "message": "Use enum for switch case.\nUsed enum for switch case and reformat assert files.", "committedDate": "2020-06-03T08:38:55Z", "type": "commit"}, {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/489472ebb17e7cc88b74f02ae59540836d3d2b85", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into remote-method", "committedDate": "2020-06-03T08:42:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTMyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434425320", "bodyText": "Can't we use the attachPoint.firstIdent().kind?\nEach ident you get here would be a keyword token, so token kind should be unique.", "author": "SupunS", "createdAt": "2020-06-03T09:15:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());", "originalCommit": "489472ebb17e7cc88b74f02ae59540836d3d2b85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyODgwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434428805", "bodyText": "Something like:\nswitch (attachPoint.firstIdent().kind) {\n    case OBJECT_KEYWROD:\n    ...\n    case RESOURCE_KEYWROD:\n    ...\n}", "author": "SupunS", "createdAt": "2020-06-03T09:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1Mzk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434453951", "bodyText": "Done", "author": "rdulmina", "createdAt": "2020-06-03T10:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTU4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434425584", "bodyText": "can we replace the string using org.ballerinalang.model.elements.AttachPoint value ?", "author": "manuranga", "createdAt": "2020-06-03T09:15:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());\n+            switch (firstIndent) {\n+                case OBJECT:\n+                    AttachPoint.Point secondIdent =\n+                            AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());\n+                    switch (secondIdent) {\n+                        case FUNCTION:\n+                            bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfunction\", source);", "originalCommit": "489472ebb17e7cc88b74f02ae59540836d3d2b85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1NDAxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434454019", "bodyText": "Done", "author": "rdulmina", "createdAt": "2020-06-03T10:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTU4NA=="}], "type": "inlineReview"}, {"oid": "c1c36bb2bf0294e641e07587ba0b8231a0e89d0f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1c36bb2bf0294e641e07587ba0b8231a0e89d0f", "message": "Used syntax kind in switch cases\nUsed syntax kind in switch cases, removed fromString method.", "committedDate": "2020-06-03T10:02:32Z", "type": "commit"}, {"oid": "e9b04914be89141e9a2fafe59e9793cfa58e8e4e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9b04914be89141e9a2fafe59e9793cfa58e8e4e", "message": "Removed extra new line.", "committedDate": "2020-06-03T10:04:13Z", "type": "commit"}]}