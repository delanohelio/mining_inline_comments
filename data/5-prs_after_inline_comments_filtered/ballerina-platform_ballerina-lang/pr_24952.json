{"pr_number": 24952, "pr_title": "Add support for Quoted Identifiers", "pr_createdAt": "2020-07-27T07:19:26Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952", "timeline": [{"oid": "be54c492801109571e8d7784737fee1369748467", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be54c492801109571e8d7784737fee1369748467", "message": "Add EOF line", "committedDate": "2020-07-27T07:23:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NDM2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460794361", "bodyText": "Incorrect year?", "author": "anupama-pathirage", "createdAt": "2020-07-27T10:25:40Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/identifier/IdentifierLiteralTestCase.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "be54c492801109571e8d7784737fee1369748467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNzk4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460827983", "bodyText": "modified in last commit", "author": "HindujaB", "createdAt": "2020-07-27T11:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NDM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNTM3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460805374", "bodyText": "Can we simplify the above two return statements?\ni.e. return !isUnicodePrivateUseChar(c) && !isUnicodePatternWhiteSpaceChar(c);", "author": "anupama-pathirage", "createdAt": "2020-07-27T10:47:53Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -1075,8 +1075,57 @@ private boolean isIdentifierInitialChar(int c) {\n             return true;\n         }\n \n-        // TODO: if (UnicodeIdentifierChar) return false;\n-        return false;\n+        return isUnicodeIdentifierChar(c);\n+    }\n+\n+    /**\n+     * <p>\n+     * Check whether a given char is a unicode identifier char.\n+     * </p>\n+     * <code> UnicodeIdentifierChar := ^ ( AsciiChar | UnicodeNonIdentifierChar ) </code>\n+     *\n+     * @param c character to check\n+     * @return <code>true</code>, if the character is a unicode identifier char. <code>false</code> otherwise.\n+     */\n+    private boolean isUnicodeIdentifierChar(int c) {\n+        //check Ascii char range\n+        if (0x0000 <= c && c <= 0x007F) {\n+            return false;\n+        }\n+\n+        //check unicode private use char\n+        if (isUnicodePrivateUseChar(c) || isUnicodePatternWhiteSpaceChar(c)) {\n+            return false;\n+        }\n+\n+        //TODO: if (UnicodePatternSyntaxChar) return false\n+        return true;", "originalCommit": "be54c492801109571e8d7784737fee1369748467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzMDk4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460830984", "bodyText": "I thought these checks are a bit more clear to compare with the specs in this way. And I referred the implementations of similar logics. [1]", "author": "HindujaB", "createdAt": "2020-07-27T11:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNTM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNjE5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460806195", "bodyText": "Can simplify this to assertTrue", "author": "anupama-pathirage", "createdAt": "2020-07-27T10:49:43Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/identifier/IdentifierLiteralTestCase.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.identifier;\n+\n+import org.ballerinalang.model.util.JsonParser;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.BaseTest;\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BServerInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.ballerinalang.test.context.Utils;\n+import org.ballerinalang.test.util.HttpClientRequest;\n+import org.ballerinalang.test.util.HttpResponse;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Test case for the ballerina supporting quoted identifiers.\n+ */\n+public class IdentifierLiteralTestCase extends BaseTest {\n+\n+    private static BServerInstance serverInstance;\n+    private static final String testFileLocation = Paths.get(\"src\", \"test\", \"resources\", \"identifier\")\n+            .toAbsolutePath().toString();\n+    private static final String identifierPositiveTestFileName = \"identifier_literal_positive.bal\";\n+    private static final String invalidILSpecialCharactersFileName = \"invalid_IL_special_char.bal\";\n+    private static final String invalidILEscapeCharactersFileName = \"invalid_IL_escape_char.bal\";\n+    private static final String invalidILUnicodeCharactersFileName = \"invalid_IL_unicode_char.bal\";\n+    private static final String testProjectEntryPoint = \"TestProject\";\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void setup() throws BallerinaTestException {\n+        int[] requiredPorts = new int[]{9090};\n+        Utils.checkPortsAvailability(requiredPorts);\n+        String balFilePath =\n+                new File(testFileLocation + File.separator + \"identifier_literal_service.bal\").getAbsolutePath();\n+        serverInstance = new BServerInstance(balServer);\n+        serverInstance.startServer(balFilePath, requiredPorts);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    private void cleanup() throws Exception {\n+        serverInstance.removeAllLeechers();\n+        serverInstance.shutdownServer();\n+    }\n+\n+    @Test(description = \"Tests quoted identifier literal with allowed characters\")\n+    public void testILpositive() throws BallerinaTestException {\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String[] args = new String[]{identifierPositiveTestFileName};\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", args, new HashMap<>(), testFileLocation, true);\n+        String[] logLines = output.split(\"\\n\");\n+\n+        assertEquals(logLines.length, 3);\n+        assertEquals(logLines[0], \"Compiling source\");\n+        assertEquals(logLines[1], \"\\tidentifier_literal_positive.bal\");\n+        assertEquals(logLines[2], \"Running executables\");\n+    }\n+\n+    @Test(description = \"Tests quoted identifier literal containing invalid special characters\")\n+    public void testInvalidILSpecialChar() throws BallerinaTestException {\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String[] args = new String[]{invalidILSpecialCharactersFileName};\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", args, new HashMap<>(), testFileLocation, true);\n+        String[] logLines = output.split(\"\\n\");\n+        String expectedError = \"Compiling source\\n\" +\n+                \"\\tinvalid_IL_special_char.bal\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:14: missing semicolon token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:14: missing type desc\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:33: missing equal token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:38: missing plus token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:38: missing double quote\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:19:1: missing semicolon token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:19:15: missing double quote\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:20:1: missing semicolon token\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:5: no new variables on left side\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:14: invalid intersection type \" +\n+                \"'$missingNode$0 & *%_var = ': no intersection\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:18:33: undefined symbol 'value'\\n\" +\n+                \"error: .::invalid_IL_special_char.bal:19:12: underscore is not allowed here\";\n+        assertErrorLines(logLines, expectedError);\n+    }\n+\n+    @Test(description = \"Tests quoted identifier literal containing invalid escape characters\")\n+    public void testInvalidILEscapeChar() throws BallerinaTestException {\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String[] args = new String[]{invalidILEscapeCharactersFileName};\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", args, new HashMap<>(), testFileLocation, true);\n+        String[] logLines = output.split(\"\\n\");\n+        String expectedError = \"Compiling source\\n\" +\n+                \"\\tinvalid_IL_escape_char.bal\\n\" +\n+                \"error: .::invalid_IL_escape_char.bal:19:12: undefined symbol ''\";\n+\n+        assertErrorLines(logLines, expectedError);\n+    }\n+\n+    @Test(description = \"Tests quoted identifier literal containing invalid unicode characters\")\n+    public void testInvalidILUnicodeChar() throws BallerinaTestException {\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String[] args = new String[]{invalidILUnicodeCharactersFileName};\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", args, new HashMap<>(), testFileLocation, true);\n+        String[] logLines = output.split(\"\\n\");\n+        String expectedError = \"Compiling source\\n\" +\n+                \"\\tinvalid_IL_unicode_char.bal\\n\" +\n+                \"error: .::invalid_IL_unicode_char.bal:18:28: invalid token 'whiteSpace'\\n\" +\n+                \"error: .::invalid_IL_unicode_char.bal:19:17: missing plus token\\n\" +\n+                \"error: .::invalid_IL_unicode_char.bal:19:12: undefined symbol ''\\n\" +\n+                \"error: .::invalid_IL_unicode_char.bal:19:17: undefined symbol 'whiteSpace'\";\n+\n+        assertErrorLines(logLines, expectedError);\n+    }\n+\n+    @Test(description = \"Test using identifier literals in service and resource names\")\n+    public void testUsingIdentifierLiteralsInServiceAndResourceNames() throws IOException {\n+        HttpResponse response = HttpClientRequest.doGet(serverInstance.getServiceURLHttp(9090, \"identifierLiteral\" +\n+                \"/resource1\"));\n+        Assert.assertNotNull(response);\n+        Assert.assertEquals(response.getResponseCode(), 200, \"Response code mismatched\");\n+\n+        BValue bJson = JsonParser.parse(response.getData());\n+        Assert.assertTrue(bJson instanceof BMap);\n+        Assert.assertEquals(((BMap<String, BValue>) bJson).get(\"key\").stringValue(), \"keyVal\");\n+        Assert.assertEquals(((BMap<String, BValue>) bJson).get(\"value\").stringValue(), \"valueOfTheString\");\n+    }\n+\n+    @Test(description = \"Test identifier literals in payload\")\n+    public void testIdentifierLiteralsInPayload() throws IOException {\n+\n+        Map<String, String> headers = new HashMap<>();\n+        HttpResponse response = HttpClientRequest.doGet(serverInstance.getServiceURLHttp(9090, \"identifierLiteral\" +\n+                \"/resource2\"), headers);\n+        Assert.assertNotNull(response);\n+        Assert.assertEquals(response.getResponseCode(), 200, \"Response code mismatched\");\n+        Assert.assertEquals(response.getData(), \"hello\");\n+    }\n+\n+    @Test(description = \"Test accessing variable in other packages defined with identifier literal\")\n+    public void testAccessingVarsInOtherPackage() throws BallerinaTestException {\n+        Path projectPath = Paths.get(testFileLocation, \"TestProject\")\n+                .toAbsolutePath();\n+        String runLog = \"Values returned successfully\";\n+        LogLeecher runLeecher = new LogLeecher(runLog);\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        bMainInstance.runMain(projectPath.toString(), \"pkg.main\", new LogLeecher[]{runLeecher});\n+        Assert.assertEquals(runLeecher.isTextFound(), true);", "originalCommit": "be54c492801109571e8d7784737fee1369748467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyODIyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r460828223", "bodyText": "modified in last commit", "author": "HindujaB", "createdAt": "2020-07-27T11:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNjE5NQ=="}], "type": "inlineReview"}, {"oid": "1599989086728ff2ca02bc169848cacc4c41ea16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1599989086728ff2ca02bc169848cacc4c41ea16", "message": "modify inverted check", "committedDate": "2020-07-27T11:34:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1OTk2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r461459966", "bodyText": "Can remove escapeQuotedIdentifier() method as well", "author": "SupunS", "createdAt": "2020-07-28T09:50:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3930,9 +3930,6 @@ private BLangIdentifier createIdentifier(DiagnosticPos pos, String value, Set<Wh\n         }\n \n         if (value.startsWith(IDENTIFIER_LITERAL_PREFIX)) {\n-            if (!escapeQuotedIdentifier(value).matches(\"^[0-9a-zA-Z.]*$\")) {\n-                dlog.error(pos, DiagnosticCode.IDENTIFIER_LITERAL_ONLY_SUPPORTS_ALPHANUMERICS);\n-            }", "originalCommit": "1599989086728ff2ca02bc169848cacc4c41ea16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3MjkyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24952#discussion_r461472925", "bodyText": "removed in the last commit", "author": "HindujaB", "createdAt": "2020-07-28T10:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1OTk2Ng=="}], "type": "inlineReview"}, {"oid": "f3be13f5bfaeeff91d7c0b4b7a5bb4913bc14488", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f3be13f5bfaeeff91d7c0b4b7a5bb4913bc14488", "message": "Remove unnecessary methods", "committedDate": "2020-07-28T10:12:40Z", "type": "forcePushed"}, {"oid": "61c71e2e1beb190ab854e1aba70df93337886124", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61c71e2e1beb190ab854e1aba70df93337886124", "message": "Remove variable name passing null for Identifier literals", "committedDate": "2020-07-29T09:53:33Z", "type": "forcePushed"}, {"oid": "cc295336df4fcd92872988e6e853a993dd233e4f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc295336df4fcd92872988e6e853a993dd233e4f", "message": "Add parser tests and fix checkstyle errors", "committedDate": "2020-08-04T14:07:33Z", "type": "forcePushed"}, {"oid": "80da0dce784c13700947461129632591df2f5af5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80da0dce784c13700947461129632591df2f5af5", "message": "Add support for unicode IL", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "b02890d5e72671c4900e932d5a9fb7a1f904442b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b02890d5e72671c4900e932d5a9fb7a1f904442b", "message": "Add and improve tests", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "a7fd052fbdc8b80d267e6e117ce3bd62b45e409a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7fd052fbdc8b80d267e6e117ce3bd62b45e409a", "message": "Add EOF line", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "a5f55d126f618a3f3967b6ed2903ad18dd64d602", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5f55d126f618a3f3967b6ed2903ad18dd64d602", "message": "Fix Character max value error", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "802f153bddfa3bc86d5e0c5f8e01cce1ba369c09", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/802f153bddfa3bc86d5e0c5f8e01cce1ba369c09", "message": "modify inverted check", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "12bf2785a2e1dbcaa7a1c2f41881ad3567abbd84", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/12bf2785a2e1dbcaa7a1c2f41881ad3567abbd84", "message": "Remove unnecessary methods", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "160169b9df8bdc27fd955d505ffa8933b81350f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/160169b9df8bdc27fd955d505ffa8933b81350f5", "message": "Remove variable name passing null for Identifier literals", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "89399ec0c76d9f4b487cb8090af5648eef91aaa0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89399ec0c76d9f4b487cb8090af5648eef91aaa0", "message": "Add parser tests and fix checkstyle errors", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "ba6e68b1f247e5673ad6e7112c4cf3e689f7da0e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba6e68b1f247e5673ad6e7112c4cf3e689f7da0e", "message": "Fix worker interaction, unicode codepoints", "committedDate": "2020-08-12T11:35:26Z", "type": "commit"}, {"oid": "ba6e68b1f247e5673ad6e7112c4cf3e689f7da0e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba6e68b1f247e5673ad6e7112c4cf3e689f7da0e", "message": "Fix worker interaction, unicode codepoints", "committedDate": "2020-08-12T11:35:26Z", "type": "forcePushed"}, {"oid": "8f6e25e8ca58963af86710fc36ecc83b38fac5b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f6e25e8ca58963af86710fc36ecc83b38fac5b0", "message": "Add EOF lines", "committedDate": "2020-08-12T11:51:01Z", "type": "commit"}, {"oid": "491041c48d42c85786e040b8d34feae929a4d3b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/491041c48d42c85786e040b8d34feae929a4d3b5", "message": "Modify parser tests", "committedDate": "2020-08-12T12:31:43Z", "type": "commit"}]}