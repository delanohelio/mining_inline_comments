{"pr_number": 23473, "pr_title": "Restrict annotation value to true, map<anydata|readonly> , map<anydata|readonly>[]", "pr_createdAt": "2020-05-25T07:56:42Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473", "timeline": [{"oid": "b68491475f24a56319c800b1c18f36d76b3bb3b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b68491475f24a56319c800b1c18f36d76b3bb3b0", "message": "Fix : Code refactoring", "committedDate": "2020-05-26T08:46:22Z", "type": "forcePushed"}, {"oid": "2b34010bf0b733ad8bb4722d29a86d127b3338f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b34010bf0b733ad8bb4722d29a86d127b3338f8", "message": "Fix Code Test", "committedDate": "2020-05-28T08:13:23Z", "type": "forcePushed"}, {"oid": "1f473c82dc2e7174a1518ba7e4cf7ee8ea16eb67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f473c82dc2e7174a1518ba7e4cf7ee8ea16eb67", "message": "Fix test cases", "committedDate": "2020-05-29T07:51:49Z", "type": "forcePushed"}, {"oid": "5b8052b17660788751890de9c2a3acdd617a9825", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b8052b17660788751890de9c2a3acdd617a9825", "message": "add new test for annotation value", "committedDate": "2020-05-31T13:16:46Z", "type": "forcePushed"}, {"oid": "59a927a8e0b4e2a73c32013939f62ceab789a135", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59a927a8e0b4e2a73c32013939f62ceab789a135", "message": "add new test for annotation value", "committedDate": "2020-05-31T13:18:22Z", "type": "forcePushed"}, {"oid": "5ed037f4fbb667607dcd2b544331a24953f9fb62", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ed037f4fbb667607dcd2b544331a24953f9fb62", "message": "Fix existing test cases", "committedDate": "2020-06-02T07:14:21Z", "type": "forcePushed"}, {"oid": "8d8614e211b3ad91d86c7b930f06cd20bd2d570e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d8614e211b3ad91d86c7b930f06cd20bd2d570e", "message": "Fix existing test cases", "committedDate": "2020-06-03T08:34:48Z", "type": "forcePushed"}, {"oid": "9c5e8f833bd5be337cc65afd763ad52e3b0e3f3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9c5e8f833bd5be337cc65afd763ad52e3b0e3f3a", "message": "Fix existing test cases", "committedDate": "2020-06-03T08:52:35Z", "type": "forcePushed"}, {"oid": "5a22d1c582b9400e364113f82573f05734273230", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a22d1c582b9400e364113f82573f05734273230", "message": "Fix bir generation of new annotation value changes", "committedDate": "2020-06-08T17:15:00Z", "type": "forcePushed"}, {"oid": "1a1ab9438bafa887182e724e0f3ed98e572b281c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a1ab9438bafa887182e724e0f3ed98e572b281c", "message": "Final annotation changes\n\n[ci skip]", "committedDate": "2020-06-10T19:19:46Z", "type": "forcePushed"}, {"oid": "940baac759383a56d570b6fdd33a8833624687a8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/940baac759383a56d570b6fdd33a8833624687a8", "message": "Fix http tests : annotation value restriction", "committedDate": "2020-06-11T09:46:55Z", "type": "forcePushed"}, {"oid": "0491081d704d1728e35358cb03119e837beed98d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0491081d704d1728e35358cb03119e837beed98d", "message": "Fix http tests : annotation value restriction", "committedDate": "2020-06-11T14:42:12Z", "type": "forcePushed"}, {"oid": "c3904f5d578e65294f881b7f35320830cafcd74f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c3904f5d578e65294f881b7f35320830cafcd74f", "message": "Fix http tests : annotation value restriction", "committedDate": "2020-06-12T08:57:46Z", "type": "forcePushed"}, {"oid": "cc4d5f61e72ab4cfaa4d501bd93f68e15eadd191", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc4d5f61e72ab4cfaa4d501bd93f68e15eadd191", "message": "Fix http tests : annotation value restriction", "committedDate": "2020-06-12T11:52:37Z", "type": "forcePushed"}, {"oid": "8d150744fd52caf925bbbee5ad3fd631b408025e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d150744fd52caf925bbbee5ad3fd631b408025e", "message": "Fix http tests : annotation value restriction", "committedDate": "2020-06-13T04:13:08Z", "type": "forcePushed"}, {"oid": "3172e254c474d923d79c621ccee570f60084d544", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3172e254c474d923d79c621ccee570f60084d544", "message": "Fix http tests : annotation value restriction", "committedDate": "2020-06-14T09:47:08Z", "type": "forcePushed"}, {"oid": "f0b55bc22d96a317adfd2718f4677a083e1aa862", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0b55bc22d96a317adfd2718f4677a083e1aa862", "message": "Fix duplication of functions for immutable types", "committedDate": "2020-06-14T16:04:06Z", "type": "forcePushed"}, {"oid": "750b4a6f66f048c1fb6310a406b8404976b471f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/750b4a6f66f048c1fb6310a406b8404976b471f5", "message": "Fix duplication of functions for immutable types", "committedDate": "2020-06-14T17:36:04Z", "type": "forcePushed"}, {"oid": "426ca093091bb78b978b892c5b6ce8d02353ec59", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/426ca093091bb78b978b892c5b6ce8d02353ec59", "message": "Fix: websub auth annotation fix", "committedDate": "2020-06-15T02:56:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzMjY5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439932694", "bodyText": "Tracking issue: #24131", "author": "KRVPerera", "createdAt": "2020-06-15T05:08:57Z", "path": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/annotations/AnnotationAttachmentsCompletionTest.java", "diffHunk": "@@ -47,12 +47,12 @@ public void loadAnnotationCache() {\n //                {\"annotationAccessExpression4.json\", \"annotation\"},\n                 {\"annotationAccessExpression5.json\", \"annotation\"},\n                 {\"annotationAccessExpression6.json\", \"annotation\"},\n-                {\"annotationBodyCompletion1.json\", \"annotation\"},\n-                {\"annotationBodyCompletion2.json\", \"annotation\"},\n+//                {\"annotationBodyCompletion1.json\", \"annotation\"},", "originalCommit": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNjU5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439936597", "bodyText": "Shouldn't we pass (BLangInvocation) expr itself to isCompileTimeAnnotationValue and add a case there to check the return type?", "author": "MaryamZi", "createdAt": "2020-06-15T05:26:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -608,11 +608,12 @@ public void visit(BLangAnnotationAttachment astAnnotAttach) {\n     }\n \n     private boolean isCompileTimeAnnotationValue(BLangExpression expr) {\n-        // TODO Compile time literal constants\n         switch (expr.getKind()) {\n             case LITERAL:\n             case NUMERIC_LITERAL:\n                 return true;\n+            case INVOCATION:\n+                return isCompileTimeAnnotationValue(((BLangInvocation) expr).expr);", "originalCommit": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439937146", "bodyText": "Isn't this method only called for constants? What kind of invocations do we get here for? I assume the return type has to be a constant?", "author": "MaryamZi", "createdAt": "2020-06-15T05:28:24Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -668,6 +669,8 @@ private BIRAnnotationValue createAnnotationValue(BLangExpression expr) {\n                 return createAnnotationValue(((BLangTypeConversionExpr) expr).expr);\n             case STATEMENT_EXPRESSION:\n                 return createAnnotationRecordValue((BLangStatementExpression) expr);\n+            case INVOCATION:", "originalCommit": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzODQzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439938435", "bodyText": "Here also, I'm not sure if working with ((BLangInvocation) expr).expr is the correct approach.", "author": "MaryamZi", "createdAt": "2020-06-15T05:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MTE4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439951182", "bodyText": "This happens due to desugar changes invocation is cloneReadOnly", "author": "KRVPerera", "createdAt": "2020-06-15T06:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2Njg2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439966867", "bodyText": "I am trying to go through to actual expression we wrap by cloneReadOnly. I think it is safe to say that INVOCATION is not supported.", "author": "KRVPerera", "createdAt": "2020-06-15T07:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNDY4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440404682", "bodyText": "I think here and in isCompileTimeAnnotationValue we should specifically check if the invocation name is cloneReadOnly and do what you've done only if that is the case.", "author": "MaryamZi", "createdAt": "2020-06-15T19:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3NDkxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440574912", "bodyText": "Shall we track this by an issue.. ?", "author": "KRVPerera", "createdAt": "2020-06-16T04:10:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4ODk3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440588970", "bodyText": "Fixing here\n#24179", "author": "KRVPerera", "createdAt": "2020-06-16T05:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzODE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439938180", "bodyText": "Instead, should we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (elementType.tag == TypeTags.MAP || elementType.tag == TypeTags.RECORD) {\n          \n          \n            \n                                return types.isAssignable(elementType, symTable.anydataOrReadOnlyMapType);\n          \n          \n            \n                            }\n          \n          \n            \n                            return false;\n          \n          \n            \n                            return isValidAnnotationType(elementType);", "author": "MaryamZi", "createdAt": "2020-06-15T05:32:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1329,17 +1329,15 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n-            case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n             case TypeTags.MAP:\n-//                return types.isAnydata(((BMapType) type).constraint);\n-                return true;\n+            case TypeTags.RECORD:\n+                return types.isAssignable(type, symTable.anydataOrReadOnlyMapType);\n             case TypeTags.ARRAY:\n                 BType elementType = ((BArrayType) type).eType;\n-                return (elementType.tag == TypeTags.MAP || elementType.tag == TypeTags.RECORD) &&\n-                        isValidAnnotationType(elementType);\n+                if (elementType.tag == TypeTags.MAP || elementType.tag == TypeTags.RECORD) {\n+                    return types.isAssignable(elementType, symTable.anydataOrReadOnlyMapType);\n+                }\n+                return false;", "originalCommit": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDEzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439944139", "bodyText": "We can assert these also in Ballerina itself, we can maybe change these later.\nSee \n  \n    \n      ballerina-lang/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal\n    \n    \n         Line 149\n      in\n      02b2ec6\n    \n    \n    \n    \n\n        \n          \n           var fn = function() {", "author": "MaryamZi", "createdAt": "2020-06-15T05:55:53Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationRuntimeTest.java", "diffHunk": "@@ -174,4 +179,25 @@ public void testAnnotAvailabilty() {\n         Assert.assertEquals(mapValue.get(StringUtils.fromString(\"q\")).toString(), \"hello\");\n         Assert.assertEquals(mapValue.get(StringUtils.fromString(\"r\")).toString(), \"world\");\n     }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +\n+                  \"of record field: modification not allowed on readonly value.*\")\n+    public void testRecordTypeAnnotationReadonlyValueEdit() {\n+        BRunUtil.invoke(resultAccessNegative, \"testRecordTypeAnnotationReadonlyValueEdit\");\n+    }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +\n+                  \"of record field: modification not allowed on readonly value.*\")\n+    public void testAnnotationOnObjectTypeReadonlyValueEdit() {\n+        BRunUtil.invoke(resultAccessNegative, \"testAnnotationOnObjectTypeReadonlyValueEdit\");\n+    }\n+\n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp = \"^error: \\\\{.*\\\\}InvalidUpdate message=Invalid update \" +", "originalCommit": "b2cb66cc6c86bb605433dc2ecb0f2aeb76b8e272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NTUxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r439955512", "bodyText": "shall we do this later after error ctor changes as well?", "author": "KRVPerera", "createdAt": "2020-06-15T06:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4Nzc0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r441287745", "bodyText": "Please create an issue for this too?", "author": "MaryamZi", "createdAt": "2020-06-17T05:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0NDEzOQ=="}], "type": "inlineReview"}, {"oid": "854162b2417e26675b25fa0478f38b5271e6ddce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/854162b2417e26675b25fa0478f38b5271e6ddce", "message": "Fix integration test fails", "committedDate": "2020-06-15T06:54:46Z", "type": "forcePushed"}, {"oid": "705b004050b20538eb2da17913f1a9bc86d866c2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/705b004050b20538eb2da17913f1a9bc86d866c2", "message": "Fix Code review suggestions\n\nUniformity for `readonly & T` and `T & readonly`. Chose `readonly & T`.\nRefactor java code logic. Instead of making fields readonly for\nimplementations of abstract objects, whole object is made readonly.", "committedDate": "2020-06-15T06:41:08Z", "type": "forcePushed"}, {"oid": "79af477e24f54a78260cce8d197d9941b3d99499", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79af477e24f54a78260cce8d197d9941b3d99499", "message": "Remove object readonly check for annotation values", "committedDate": "2020-06-15T10:56:36Z", "type": "forcePushed"}, {"oid": "0a3bd2063e923ee6ca4119a43155179e22340025", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a3bd2063e923ee6ca4119a43155179e22340025", "message": "Remove object readonly check for annotation values", "committedDate": "2020-06-15T11:31:15Z", "type": "forcePushed"}, {"oid": "c5a06c202122cd9c40d2df9bf896cc6bfb166df0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5a06c202122cd9c40d2df9bf896cc6bfb166df0", "message": "Remove object readonly check for annotation values", "committedDate": "2020-06-15T15:50:49Z", "type": "forcePushed"}, {"oid": "af10c7462af8001a90a9dfdc0abf90fd1d8c651b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af10c7462af8001a90a9dfdc0abf90fd1d8c651b", "message": "Test case fixes", "committedDate": "2020-06-15T18:44:56Z", "type": "forcePushed"}, {"oid": "c8b5d57010c43161a0d32f4cac0ab4fd0485b374", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8b5d57010c43161a0d32f4cac0ab4fd0485b374", "message": "Fix newly added testcases for correct AST", "committedDate": "2020-06-16T03:29:41Z", "type": "forcePushed"}, {"oid": "184e8887b8b035991aa84750ec3a9e123bac78be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/184e8887b8b035991aa84750ec3a9e123bac78be", "message": "Fix newly added testcases for correct AST", "committedDate": "2020-06-16T03:50:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MTI4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440571280", "bodyText": "Updated new test cases. Need a helper function later to get the exact expression value.", "author": "KRVPerera", "createdAt": "2020-06-16T03:53:54Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/IconAnnotationTest.java", "diffHunk": "@@ -51,19 +55,22 @@ public void setup() {\n     public void testIconOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(annot.expr.toString(), \" {path: /fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n+                \"/fooIconPath.icon}\");\n     }\n \n     @Test\n     public void testIconOnObjectAndMemberFunction() {\n         TypeDefinition objType = result.getAST().getTypeDefinitions().get(0);\n         List<? extends AnnotationAttachmentNode> objAnnot = objType.getAnnotationAttachments();\n         Assert.assertEquals(objAnnot.size(), 1);\n-        Assert.assertEquals(objAnnot.get(0).getExpression().toString(), \" {path: /barIconPath.icon}\");\n+        Assert.assertEquals(objAnnot.get(0).getExpression().toString(), \" {path: /barIconPath.icon}.cloneReadOnly()\");", "originalCommit": "184e8887b8b035991aa84750ec3a9e123bac78be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MTY5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440591698", "bodyText": "Shall we create an issue to track fixing std lib deviations and add back the object validation to annotations?", "author": "MaryamZi", "createdAt": "2020-06-16T05:18:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1360,22 +1363,81 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n+            case TypeTags.MAP:\n+                BType constraintType = ((BMapType) type).constraint;\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(constraintType);\n             case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n+                BRecordType recordType = (BRecordType) type;\n+                for (BField field : recordType.fields.values()) {\n+                    if (!isAnyDataOrReadOnlyTypeSkippingObjectType(field.type)) {\n+                        return false;\n+                    }\n+                }\n+\n+                BType recordRestType = recordType.restFieldType;\n+                if (recordRestType == null || recordRestType == symTable.noType) {\n+                    return true;\n+                }\n+\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(recordRestType);\n+            case TypeTags.ARRAY:\n+                return isValidAnnotationType(((BArrayType) type).eType);\n+        }\n+\n+        return types.isAssignable(type, symTable.trueType);\n+    }\n+\n+    private boolean isAnyDataOrReadOnlyTypeSkippingObjectType(BType type) {", "originalCommit": "184e8887b8b035991aa84750ec3a9e123bac78be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MTIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440961215", "bodyText": "Issue #24217", "author": "KRVPerera", "createdAt": "2020-06-16T15:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MTY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NDE0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r441294145", "bodyText": "Created an issue to do language changes after StandardLib changes: #24246", "author": "KRVPerera", "createdAt": "2020-06-17T05:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MTY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NTA2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440595065", "bodyText": "We need to keep the part of the original check where we first check if the member type is a map or a record (https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java#L1372) or we will be allowing an array of true also.\nWe should ideally have a negative test for the same.", "author": "MaryamZi", "createdAt": "2020-06-16T05:30:58Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1360,22 +1363,81 @@ private boolean isValidAnnotationType(BType type) {\n         }\n \n         switch (type.tag) {\n+            case TypeTags.MAP:\n+                BType constraintType = ((BMapType) type).constraint;\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(constraintType);\n             case TypeTags.RECORD:\n-//                BRecordType recordType = (BRecordType) type;\n-//                return recordType.fields.stream().allMatch(field -> types.isAnydata(field.type)) &&\n-//                        (recordType.sealed || types.isAnydata(recordType.restFieldType));\n+                BRecordType recordType = (BRecordType) type;\n+                for (BField field : recordType.fields.values()) {\n+                    if (!isAnyDataOrReadOnlyTypeSkippingObjectType(field.type)) {\n+                        return false;\n+                    }\n+                }\n+\n+                BType recordRestType = recordType.restFieldType;\n+                if (recordRestType == null || recordRestType == symTable.noType) {\n+                    return true;\n+                }\n+\n+                return isAnyDataOrReadOnlyTypeSkippingObjectType(recordRestType);\n+            case TypeTags.ARRAY:\n+                return isValidAnnotationType(((BArrayType) type).eType);", "originalCommit": "184e8887b8b035991aa84750ec3a9e123bac78be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0Nzc2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r440647769", "bodyText": "Fixed : 0d31fb6", "author": "KRVPerera", "createdAt": "2020-06-16T07:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NTA2NQ=="}], "type": "inlineReview"}, {"oid": "16a41d82c30fd64105903b056ed10c1d62434c29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16a41d82c30fd64105903b056ed10c1d62434c29", "message": "Support `cloneReadOnly` for immutable types", "committedDate": "2020-06-16T11:37:45Z", "type": "forcePushed"}, {"oid": "e0d6967295f62ef5a1b80d8a1c797943151e382a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0d6967295f62ef5a1b80d8a1c797943151e382a", "message": "Support `cloneReadOnly` for immutable types", "committedDate": "2020-06-16T15:11:02Z", "type": "forcePushed"}, {"oid": "0dc82d1147bdb7efb4b38756b63956ed56aeef67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0dc82d1147bdb7efb4b38756b63956ed56aeef67", "message": "Remove object readonly check for annotation values", "committedDate": "2020-06-16T18:31:53Z", "type": "forcePushed"}, {"oid": "10fa6d107bec695d3e004c0966ebd0ba350adf0e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10fa6d107bec695d3e004c0966ebd0ba350adf0e", "message": "Remove object readonly check for annotation values", "committedDate": "2020-06-16T20:28:41Z", "type": "forcePushed"}, {"oid": "41858aeb1766c597a149e7af2ca6bf855e19fd7a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41858aeb1766c597a149e7af2ca6bf855e19fd7a", "message": "Remove object readonly check for annotation values", "committedDate": "2020-06-16T22:30:14Z", "type": "forcePushed"}, {"oid": "57d457d1bd5efa90e71fd82587d94b1de085e37d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/57d457d1bd5efa90e71fd82587d94b1de085e37d", "message": "Restrict annotation value type\n\nAnnotation value is restricted to true, map<anydata|readonly> or\nmap<anydata|readonly>[] value. Changes will also make sure that\nannotation value is a read only clone of the given value. Therefore user\n cannot change annotation value via annotation access.", "committedDate": "2020-06-17T04:06:58Z", "type": "commit"}, {"oid": "b43010f157e27d52278fac3d54f68efe7456923b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b43010f157e27d52278fac3d54f68efe7456923b", "message": "Fix grpc tests for annotation value restriction", "committedDate": "2020-06-17T04:06:58Z", "type": "commit"}, {"oid": "c3a2b4d382fd5b2134f7194f03a74a8176fda357", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c3a2b4d382fd5b2134f7194f03a74a8176fda357", "message": "Fix rabbitmq tests : annotation value restriction", "committedDate": "2020-06-17T04:06:58Z", "type": "commit"}, {"oid": "dc0845bfbaedf1ed558042a5f2e1a9137e39138d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dc0845bfbaedf1ed558042a5f2e1a9137e39138d", "message": "Disable language completion tests", "committedDate": "2020-06-17T04:06:58Z", "type": "commit"}, {"oid": "a77cbf6b8cc09cfb33ffa53ecff3f26755a8883a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a77cbf6b8cc09cfb33ffa53ecff3f26755a8883a", "message": "Fix Code review suggestions\n\nUniformity for `readonly & T` and `T & readonly`. Chose `readonly & T`.\nRefactor java code logic. Instead of making fields readonly for\nimplementations of abstract objects, whole object is made readonly.", "committedDate": "2020-06-17T04:06:59Z", "type": "commit"}, {"oid": "9bc0ad817db762a9e64ae2f52dfd1c14d85c978f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9bc0ad817db762a9e64ae2f52dfd1c14d85c978f", "message": "Fix newly added testcases for correct AST", "committedDate": "2020-06-17T04:06:59Z", "type": "commit"}, {"oid": "dac5286854caca942469043f652ee6fbc47540bf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dac5286854caca942469043f652ee6fbc47540bf", "message": "Restrict annotation only for cloneReadOnly wrap", "committedDate": "2020-06-17T04:06:59Z", "type": "commit"}, {"oid": "3e8b157b525f161da46846e49a3dc873b6257600", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e8b157b525f161da46846e49a3dc873b6257600", "message": "Fix a bug accepting `true[]` for annotation value", "committedDate": "2020-06-17T04:06:59Z", "type": "commit"}, {"oid": "93e74cabe1d4eedcbd7c76612793e285fa1e1b89", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93e74cabe1d4eedcbd7c76612793e285fa1e1b89", "message": "Support `cloneReadOnly` for immutable types", "committedDate": "2020-06-17T04:06:59Z", "type": "commit"}, {"oid": "5342dcdc002525b51852ed31769b91ecfe2aa658", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5342dcdc002525b51852ed31769b91ecfe2aa658", "message": "Remove object readonly check for annotation values", "committedDate": "2020-06-17T04:06:59Z", "type": "commit"}, {"oid": "5342dcdc002525b51852ed31769b91ecfe2aa658", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5342dcdc002525b51852ed31769b91ecfe2aa658", "message": "Remove object readonly check for annotation values", "committedDate": "2020-06-17T04:06:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NzAwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r441287005", "bodyText": "Please create an issue to track verifying these changes with @irshadnilam's changes.", "author": "MaryamZi", "createdAt": "2020-06-17T05:22:35Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TypedescValueImpl.java", "diffHunk": "@@ -107,6 +107,11 @@ public Object copy(Map<Object, Object> refs) {\n         return this;\n     }\n \n+    @Override\n+    public void freezeDirect() {", "originalCommit": "5342dcdc002525b51852ed31769b91ecfe2aa658", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4ODA2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23473#discussion_r441288061", "bodyText": "Can go on one line.", "author": "MaryamZi", "createdAt": "2020-06-17T05:26:22Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/AnnotationRuntimeTest.java", "diffHunk": "@@ -66,6 +68,9 @@ public void setup() {\n \n         resultFour = BCompileUtil.compile(\"test-src/annotations/annot_availability.bal\");\n         Assert.assertEquals(resultFour.getErrorCount(), 0);\n+\n+        resultAccessNegative = BCompileUtil.compile(\"test-src/annotations/annotation_access_negative\" +\n+                                                                          \".bal\");", "originalCommit": "5342dcdc002525b51852ed31769b91ecfe2aa658", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}