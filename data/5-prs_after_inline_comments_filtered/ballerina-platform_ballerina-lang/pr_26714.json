{"pr_number": 26714, "pr_title": "Support for list-binding-pattern as match-stmt", "pr_createdAt": "2020-11-03T09:57:05Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714", "timeline": [{"oid": "f8d45bcdc6e98563dc779927997bcc318c91474b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8d45bcdc6e98563dc779927997bcc318c91474b", "message": "Fix checkstyle", "committedDate": "2020-11-03T11:33:46Z", "type": "forcePushed"}, {"oid": "5b15eb104aea4cbaf234850db4067eafa47b7d31", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b15eb104aea4cbaf234850db4067eafa47b7d31", "message": "Fix checkstyle", "committedDate": "2020-11-04T14:46:44Z", "type": "forcePushed"}, {"oid": "eb84717420eafd17b5d608440605ba43b1693046", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb84717420eafd17b5d608440605ba43b1693046", "message": "Create env for matchPattern", "committedDate": "2020-11-09T04:13:16Z", "type": "forcePushed"}, {"oid": "d6b0baa24ad07c2eec6fdf9305d8c4ab1b87eac1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6b0baa24ad07c2eec6fdf9305d8c4ab1b87eac1", "message": "Sync with master", "committedDate": "2020-11-20T10:14:07Z", "type": "forcePushed"}, {"oid": "6d43062dfe660da744b9f7f45ab41d2215f723a6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d43062dfe660da744b9f7f45ab41d2215f723a6", "message": "Sync with master", "committedDate": "2020-11-23T03:33:15Z", "type": "forcePushed"}, {"oid": "135f31b39a777f7c915b7422ec51621b870ea4da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/135f31b39a777f7c915b7422ec51621b870ea4da", "message": "Sync with master", "committedDate": "2020-11-23T03:45:52Z", "type": "forcePushed"}, {"oid": "1761b2ac9d598cc805013947eacc4fc6dfa23932", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1761b2ac9d598cc805013947eacc4fc6dfa23932", "message": "Sync with master", "committedDate": "2020-11-23T04:03:54Z", "type": "forcePushed"}, {"oid": "4baf3ff94ae79eec09989722d821e5ff61711135", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4baf3ff94ae79eec09989722d821e5ff61711135", "message": "Sync with master", "committedDate": "2020-11-23T06:32:56Z", "type": "forcePushed"}, {"oid": "d313e3bd41bb66cdc3177abb407945b0456f5240", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d313e3bd41bb66cdc3177abb407945b0456f5240", "message": "Sync with master", "committedDate": "2020-12-18T10:56:14Z", "type": "forcePushed"}, {"oid": "2e6a7be00929bae86368f5f3ae0dd4a6b208b02f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e6a7be00929bae86368f5f3ae0dd4a6b208b02f", "message": "Sync with master", "committedDate": "2021-01-04T04:50:03Z", "type": "forcePushed"}, {"oid": "982fb3a95eb70374e3cb83ae0ca8b4f9cc7de655", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/982fb3a95eb70374e3cb83ae0ca8b4f9cc7de655", "message": "Sync with master", "committedDate": "2021-01-12T14:38:43Z", "type": "forcePushed"}, {"oid": "7fed54e205a3e5936b15ad80b2540c12e1fb041f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7fed54e205a3e5936b15ad80b2540c12e1fb041f", "message": "Sync with master", "committedDate": "2021-01-14T03:47:30Z", "type": "forcePushed"}, {"oid": "f9f0b047e90b1e76abba57e4b0bab2a689b270b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9f0b047e90b1e76abba57e4b0bab2a689b270b1", "message": "Sync with master", "committedDate": "2021-01-14T07:33:28Z", "type": "forcePushed"}, {"oid": "b2d012e9e7a8ddcaeb97050559bc05ae89a263cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2d012e9e7a8ddcaeb97050559bc05ae89a263cc", "message": "Sync with master", "committedDate": "2021-01-15T09:18:58Z", "type": "forcePushed"}, {"oid": "cc148b816707c3e119f04ce49f253d5392859a09", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc148b816707c3e119f04ce49f253d5392859a09", "message": "Add nodes", "committedDate": "2021-01-20T05:17:40Z", "type": "commit"}, {"oid": "a4594b2094deed0b3f1726a0a322973a2b0e794e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4594b2094deed0b3f1726a0a322973a2b0e794e", "message": "Transform the node", "committedDate": "2021-01-20T05:22:06Z", "type": "commit"}, {"oid": "fd9982d2127c8c191067d0f44b671201a328db21", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd9982d2127c8c191067d0f44b671201a328db21", "message": "Change the compiler phases", "committedDate": "2021-01-20T05:30:14Z", "type": "commit"}, {"oid": "f1471e87bf793283f71f2f3d0fce14e3f13a7606", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1471e87bf793283f71f2f3d0fce14e3f13a7606", "message": "Change the test cases", "committedDate": "2021-01-20T05:30:14Z", "type": "commit"}, {"oid": "98b724c65ab2829b3bf08624156655f3a5bf940d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/98b724c65ab2829b3bf08624156655f3a5bf940d", "message": "Sync with master and refactor", "committedDate": "2021-01-20T05:33:21Z", "type": "commit"}, {"oid": "197700e7f2fcf776c33a30290b15fa535070ce62", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/197700e7f2fcf776c33a30290b15fa535070ce62", "message": "Fix checkstyle", "committedDate": "2021-01-20T05:34:23Z", "type": "commit"}, {"oid": "c598e81fcad21afd0be494e20e17ed4a0c79af91", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c598e81fcad21afd0be494e20e17ed4a0c79af91", "message": "Create env for matchPattern", "committedDate": "2021-01-20T05:37:22Z", "type": "commit"}, {"oid": "b133a6a11634102d8dffa445419c2cdb228cb82b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b133a6a11634102d8dffa445419c2cdb228cb82b", "message": "Sync with master", "committedDate": "2021-01-20T05:37:22Z", "type": "commit"}, {"oid": "3691971706024fcebd8e3ce0a5b1339228bdaf06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3691971706024fcebd8e3ce0a5b1339228bdaf06", "message": "Sync with master", "committedDate": "2021-01-20T05:37:22Z", "type": "commit"}, {"oid": "5975d0e7b59074d21d041c09afe98fc33ebf7b44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5975d0e7b59074d21d041c09afe98fc33ebf7b44", "message": "Sync with master", "committedDate": "2021-01-20T05:37:22Z", "type": "commit"}, {"oid": "27e7a0cf43ecc557269c492f6c0f99143ab6f8b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27e7a0cf43ecc557269c492f6c0f99143ab6f8b7", "message": "Sync with master", "committedDate": "2021-01-20T05:37:22Z", "type": "commit"}, {"oid": "c2ead5e6a19d90d18fae7e6c4e102862cc3d8fdf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c2ead5e6a19d90d18fae7e6c4e102862cc3d8fdf", "message": "Sync with master", "committedDate": "2021-01-20T05:38:45Z", "type": "forcePushed"}, {"oid": "095531e0ba078dc0b656d6c8790d059d62cf38ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/095531e0ba078dc0b656d6c8790d059d62cf38ce", "message": "Sync with master", "committedDate": "2021-01-20T06:04:43Z", "type": "commit"}, {"oid": "095531e0ba078dc0b656d6c8790d059d62cf38ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/095531e0ba078dc0b656d6c8790d059d62cf38ce", "message": "Sync with master", "committedDate": "2021-01-20T06:04:43Z", "type": "forcePushed"}, {"oid": "e3c347919a978ed7c774d143ab6303a856fd6035", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3c347919a978ed7c774d143ab6303a856fd6035", "message": "Rename files", "committedDate": "2021-01-20T06:17:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MTYyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560741620", "bodyText": "2021?", "author": "Kishanthan", "createdAt": "2021-01-20T07:52:28Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/bindingpattern/RestBindingPatternNode.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "e3c347919a978ed7c774d143ab6303a856fd6035", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MTc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560741798", "bodyText": "Missing license header", "author": "Kishanthan", "createdAt": "2021-01-20T07:52:52Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/bindingpattern/WildCardBindingPatternNode.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.ballerinalang.model.tree.bindingpattern;", "originalCommit": "e3c347919a978ed7c774d143ab6303a856fd6035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU5OTg5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r561599890", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2021-01-21T04:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MTc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MjQ3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560742479", "bodyText": "Can this cause NPE at any time?", "author": "Kishanthan", "createdAt": "2021-01-20T07:54:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3398,20 +3399,188 @@ private BLangExpression createConditionForConstMatchPattern(BLangConstPattern co\n         return createBinaryExpression(constPattern.pos, matchExprVarRef, constPattern.expr);\n     }\n \n+    private BLangExpression createConditionForWildCardBindingPattern(boolean matchesAll, Location pos) {\n+        return ASTBuilderUtil.createLiteral(pos, symTable.booleanType, matchesAll);\n+    }\n+\n+    private BLangExpression createConditionForCaptureBindingPattern(BLangCaptureBindingPattern captureBindingPattern,\n+                                                                    BLangSimpleVarRef matchExprVarRef) {\n+        Location pos = captureBindingPattern.pos;\n+        BLangSimpleVarRef captureBindingPatternVarRef =\n+                declaredVarDef.get(captureBindingPattern.getIdentifier().getValue());\n+        matchStmtsForPattern.add(ASTBuilderUtil.createAssignmentStmt(pos,\n+                captureBindingPatternVarRef, matchExprVarRef));\n+        return ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+    }\n+\n+    private BLangExpression createConditionForListBindingPattern(BLangListBindingPattern listBindingPattern,\n+                                                                 BLangSimpleVarRef matchExprVarRef) {\n+        Location pos = listBindingPattern.pos;\n+        BType bindingPatternType = listBindingPattern.type;\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listBindingPatternResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n+\n+        BLangExpression typeCheckCondition = createIsLikeExpression(listBindingPattern.pos, matchExprVarRef,\n+                bindingPatternType);\n+\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, bindingPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", bindingPatternType,\n+                typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos,\n+                tempCastVarDef.var.symbol);\n+\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        List<BLangBindingPattern> bindingPatterns = listBindingPattern.bindingPatterns;\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);;\n+\n+        for (int i = 0; i < bindingPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i, bindingPatterns.get(i),\n+                    tempCastVarDef, ifBlock, bindingPatterns.get(i).type, pos);\n+            if (memberPatternCondition.getKind() == NodeKind.LITERAL) {\n+                if ((Boolean) ((BLangLiteral) memberPatternCondition).value) {\n+                    continue;\n+                }\n+            }\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (listBindingPattern.restBindingPattern != null) {\n+            BLangRestBindingPattern restBindingPattern = listBindingPattern.restBindingPattern;\n+            BLangSimpleVarRef restBindingPatternVarRef = declaredVarDef.get(restBindingPattern.variableName.value);\n+            matchStmtsForPattern.add(ASTBuilderUtil.createAssignmentStmt(pos, restBindingPatternVarRef,\n+                    createLangLibInvocationNode(\"slice\", tempCastVarRef,\n+                            new ArrayList<>(Arrays.asList(new BLangLiteral((long) bindingPatterns.size(),\n+                                    symTable.intType))), null, pos)));\n+        }\n+\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createConditionForListMemberPattern(int index, BLangBindingPattern bindingPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt, BType type,\n+                                                                Location pos) {\n+        BLangExpression indexExpr = createIndexBasedAccessExpr(type, pos, new BLangLiteral((long) index,\n+                symTable.intType), tempCastVarDef.var.symbol, null);\n+\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", type, indexExpr,\n+                bindingPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+\n+        return createVarCheckCondition(bindingPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangBindingPattern bindingPattern, BLangSimpleVarRef varRef) {\n+        NodeKind bindingPatternKind = bindingPattern.getKind();\n+        switch (bindingPatternKind) {\n+            case WILDCARD_BINDING_PATTERN:\n+                return createConditionForWildCardBindingPattern(true, bindingPattern.pos);\n+            case CAPTURE_BINDING_PATTERN:\n+                return createConditionForCaptureBindingPattern((BLangCaptureBindingPattern) bindingPattern, varRef);\n+            case LIST_BINDING_PATTERN:\n+                return createVarCheckConditionForListBindingPattern((BLangListBindingPattern) bindingPattern, varRef);\n+            default:\n+                // If some patterns are not implemented, those should be detected before this phase\n+                // TODO : Remove this after all patterns are implemented\n+                return null;", "originalCommit": "e3c347919a978ed7c774d143ab6303a856fd6035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU5OTg3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r561599871", "bodyText": "We can remove that after all patterns are merged. (Will remove it in last one)", "author": "KavinduZoysa", "createdAt": "2021-01-21T04:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MjQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzM2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560743369", "bodyText": "What about the default case? Don't we need to handle?", "author": "Kishanthan", "createdAt": "2021-01-20T07:56:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2952,6 +2986,55 @@ private void checkForSimilarVars(Map<String, BVarSymbol> declaredVars, Map<Strin\n         }\n     }\n \n+    private void assignTypesToMemberPatterns(BLangBindingPattern bindingPattern, BType bindingPatternType) {\n+        NodeKind patternKind = bindingPattern.getKind();\n+        switch (patternKind) {", "originalCommit": "e3c347919a978ed7c774d143ab6303a856fd6035", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzU2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560743567", "bodyText": "2021?", "author": "Kishanthan", "createdAt": "2021-01-20T07:56:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/bindingpatterns/BLangRestBindingPattern.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "e3c347919a978ed7c774d143ab6303a856fd6035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgyMTg2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560821861", "bodyText": "We decided to go with 2020 since this file is created in that year.", "author": "hasithaa", "createdAt": "2021-01-20T09:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzczMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r560743730", "bodyText": "Missing license", "author": "Kishanthan", "createdAt": "2021-01-20T07:56:51Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/bindingpatterns/BLangWildCardBindingPattern.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.wso2.ballerinalang.compiler.tree.bindingpatterns;", "originalCommit": "e3c347919a978ed7c774d143ab6303a856fd6035", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU5OTgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26714#discussion_r561599827", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2021-01-21T04:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0MzczMA=="}], "type": "inlineReview"}, {"oid": "047093f93289da566558edea9b4dc3926fdede03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/047093f93289da566558edea9b4dc3926fdede03", "message": "Fix suggestions", "committedDate": "2021-01-21T04:59:00Z", "type": "commit"}, {"oid": "047093f93289da566558edea9b4dc3926fdede03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/047093f93289da566558edea9b4dc3926fdede03", "message": "Fix suggestions", "committedDate": "2021-01-21T04:59:00Z", "type": "forcePushed"}]}