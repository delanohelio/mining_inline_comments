{"pr_number": 21007, "pr_title": "Migrate JvmTerminatorGen and fix compilation errors", "pr_createdAt": "2020-02-12T05:58:00Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21007", "timeline": [{"oid": "6088c3e84c6e4f89569a7d33e4ebde6514b64159", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6088c3e84c6e4f89569a7d33e4ebde6514b64159", "message": "Migrate JvmTerminatorGen and fix compilation errors", "committedDate": "2020-02-12T05:56:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1ODgwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21007#discussion_r378058807", "bodyText": "correct to return", "author": "manuranga", "createdAt": "2020-02-12T06:22:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1028,49 +1030,52 @@ static void genYieldCheck(MethodVisitor mv, LabelGenerator labelGen, BIRBasicBlo\n         mv.visitJumpInsn(GOTO, gotoLabel);\n     }\n \n-    static void generateLambdaMethod(Map.Entry<AsyncCall, FPLoad> ins, ClassWriter cw, String lambdaName) {\n+    static void generateLambdaMethod(BIRInstruction ins, ClassWriter cw, String lambdaName) {\n         @Nilable BType lhsType;\n         String orgName;\n         String moduleName;\n         String funcName;\n         int paramIndex = 1;\n         boolean isVirtual = false;\n-        AsyncCall asyncIns = ins.getKey();\n-        FPLoad fpIns = ins.getValue();\n-        if (ins.getKey() != null) {\n+        InstructionKind kind = ins.getKind();\n+        if (kind == InstructionKind.ASYNC_CALL) {\n+            AsyncCall asyncIns = (AsyncCall) ins;\n             isVirtual = asyncIns.isVirtual;\n             lhsType = asyncIns.lhsOp != null ? asyncIns.lhsOp.variableDcl.type : null;\n             orgName = asyncIns.calleePkg.orgName.value;\n             moduleName = asyncIns.calleePkg.name.value;\n             funcName = asyncIns.name.getValue();\n-        } else {\n+        } else if (kind == InstructionKind.FP_LOAD) {\n+            FPLoad fpIns = (FPLoad) ins;\n             lhsType = fpIns.lhsOp.variableDcl.type;\n             orgName = fpIns.pkgId.orgName.value;\n             moduleName = fpIns.pkgId.name.value;\n             funcName = fpIns.funcName.getValue();\n+        } else {\n+            throw new BLangCompilerException(\"JVM lambda method generation is not supported for instruction \" +\n+                    String.format(\"%s\", ins));\n         }\n \n         boolean isExternFunction = isExternStaticFunctionCall(ins);\n         boolean isBuiltinModule = isBallerinaBuiltinModule(orgName, moduleName);\n \n         BType returnType = new BNilType();\n         if (lhsType.tag == TypeTags.FUTURE) {\n-            returnType = lhsType.returnType;\n+            returnType = lhsType;", "originalCommit": "6088c3e84c6e4f89569a7d33e4ebde6514b64159", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "21d338facc9a1dafbf7fe7fb39dc4315ab92f9e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21d338facc9a1dafbf7fe7fb39dc4315ab92f9e0", "message": "Use correct BFutureType", "committedDate": "2020-02-12T06:25:50Z", "type": "commit"}]}