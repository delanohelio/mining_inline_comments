{"pr_number": 27401, "pr_title": "Implement foldingRange capability for language server", "pr_createdAt": "2020-12-09T05:59:41Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401", "timeline": [{"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6cdcf6054974d4b87c15e8e1754e559a311cdcd3", "message": "Implement foldingRange capability for language server\n\nAdd code folding capability for Ballerina.\nRelated issue:  https://github.com/ballerina-platform/plugin-vscode/issues/70", "committedDate": "2020-12-09T08:41:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMjA1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539812059", "bodyText": "Let's remove this variable and when we need to return an empty list, use Collections.emptyList() API", "author": "nadeeshaan", "createdAt": "2020-12-10T03:12:27Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();", "originalCommit": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NDkxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540184914", "bodyText": "Updated.", "author": "prabushi", "createdAt": "2020-12-10T13:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMjA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMjM4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539812386", "bodyText": "With the new project API based implementation changes we don't need isCachedExternalSource check", "author": "nadeeshaan", "createdAt": "2020-12-10T03:13:24Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();\n+            String fileUri = params.getTextDocument().getUri();\n+            Optional<Path> filePath = CommonUtil.getPathFromURI(fileUri);\n+            if (filePath.isEmpty() || CommonUtil.isCachedExternalSource(fileUri)) {", "originalCommit": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NDk5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540184993", "bodyText": "Updated.", "author": "prabushi", "createdAt": "2020-12-10T13:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMjM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMzIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539813215", "bodyText": "Without accessing the document at this point, let's create a context and pass the context to FoldingRangeProvider.getFoldingRange API. then all the calculations can be carry out within the API", "author": "nadeeshaan", "createdAt": "2020-12-10T03:15:51Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();\n+            String fileUri = params.getTextDocument().getUri();\n+            Optional<Path> filePath = CommonUtil.getPathFromURI(fileUri);\n+            if (filePath.isEmpty() || CommonUtil.isCachedExternalSource(fileUri)) {\n+                return emptyFoldingRangeList;\n+            }\n+            try {\n+                Optional<Document> document = workspaceManager.document(filePath.get());", "originalCommit": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NTA1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540185058", "bodyText": "Updated.", "author": "prabushi", "createdAt": "2020-12-10T13:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMzIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODc3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539818771", "bodyText": "shall we try to handle the imports within the FoldingRangeFinder? Otherwise we have to expose the createFoldingRange utility method as well as a part of the syntax tree visiting is disconnected", "author": "nadeeshaan", "createdAt": "2020-12-10T03:32:00Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/foldingrange/FoldingRangeProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.foldingrange;\n+\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+import io.ballerina.compiler.syntax.tree.ModulePartNode;\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import org.eclipse.lsp4j.FoldingRange;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provider class of folding ranges.\n+ */\n+public class FoldingRangeProvider {\n+\n+    /**\n+     * Returns the list of folding ranges for the given syntax tree.\n+     *\n+     * @param syntaxTree Syntax tree representation\n+     * @return The list of folding ranges\n+     */\n+    public static List<FoldingRange> getFoldingRange(SyntaxTree syntaxTree) {\n+\n+        ModulePartNode modulePartNode = syntaxTree.rootNode();\n+        FoldingRangeFinder foldingRangeFinder = new FoldingRangeFinder();\n+        List<FoldingRange> foldingRangeList = new ArrayList<>(foldingRangeFinder.getFoldingRange(modulePartNode));\n+\n+        List<ImportDeclarationNode> imports = modulePartNode.imports().stream().collect(Collectors.toList());", "originalCommit": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NTE3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540185170", "bodyText": "Updated.", "author": "prabushi", "createdAt": "2020-12-10T13:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODk4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539818982", "bodyText": "Shall we add @since annotation as well?", "author": "nadeeshaan", "createdAt": "2020-12-10T03:32:31Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/foldingrange/FoldingRangeProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.foldingrange;\n+\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+import io.ballerina.compiler.syntax.tree.ModulePartNode;\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import org.eclipse.lsp4j.FoldingRange;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provider class of folding ranges.", "originalCommit": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NTI0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540185246", "bodyText": "Updated.", "author": "prabushi", "createdAt": "2020-12-10T13:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODk4Mg=="}], "type": "inlineReview"}, {"oid": "f868b73f431b80a27be712957817e762edd0602d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f868b73f431b80a27be712957817e762edd0602d", "message": "Implement foldingRange capability for language server\n\nAdd code folding capability for Ballerina.\nRelated issue: https://github.com/ballerina-platform/plugin-vscode/issues/70", "committedDate": "2020-12-10T11:23:21Z", "type": "forcePushed"}, {"oid": "470935775a6b78611c5419ccd95a8dc8cb05cbff", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/470935775a6b78611c5419ccd95a8dc8cb05cbff", "message": "Implement foldingRange capability for language server\n\nAdd code folding capability for Ballerina.\nRelated issue: https://github.com/ballerina-platform/plugin-vscode/issues/70", "committedDate": "2020-12-10T11:27:30Z", "type": "forcePushed"}, {"oid": "0d8137f601b728b19ca961c8352d38098d00cae4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0d8137f601b728b19ca961c8352d38098d00cae4", "message": "Implement foldingRange capability for language server\n\nAdd code folding capability for Ballerina.\nRelated issue: https://github.com/ballerina-platform/plugin-vscode/issues/70", "committedDate": "2020-12-10T15:47:37Z", "type": "commit"}, {"oid": "7b5e21bc595292e9dfda2ede3cf6b0f2267f8a9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b5e21bc595292e9dfda2ede3cf6b0f2267f8a9d", "message": "Test cases for foldingRange feature\n\nAdd testcases for lineFoldingOnly case of foldingRange feature.", "committedDate": "2020-12-10T20:22:47Z", "type": "commit"}, {"oid": "7b5e21bc595292e9dfda2ede3cf6b0f2267f8a9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b5e21bc595292e9dfda2ede3cf6b0f2267f8a9d", "message": "Test cases for foldingRange feature\n\nAdd testcases for lineFoldingOnly case of foldingRange feature.", "committedDate": "2020-12-10T20:22:47Z", "type": "forcePushed"}]}