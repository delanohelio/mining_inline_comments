{"pr_number": 27428, "pr_title": "Improve `configurable` variable support for basic types", "pr_createdAt": "2020-12-10T06:41:59Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2OTU3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#discussion_r541069570", "bodyText": "As explained by Hinduja, this is a duplication of the following class.\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/io/ballerina/projects/TomlDocument.java\n    \n    \n         Line 36\n      in\n      6aa2190\n    \n    \n    \n    \n\n        \n          \n           public abstract class TomlDocument { \n        \n    \n  \n\n\n@HindujaB Can you please create an issue to fix this? We need to bring this class to some other module.", "author": "sameerajayasoma", "createdAt": "2020-12-11T16:28:15Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigToml.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.toml.semantic.ast.TomlTableNode;\n+import io.ballerina.toml.semantic.ast.TomlTransformer;\n+import io.ballerina.toml.syntax.tree.DocumentNode;\n+import io.ballerina.toml.syntax.tree.SyntaxTree;\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.text.LineRange;\n+import io.ballerina.tools.text.TextDocument;\n+import io.ballerina.tools.text.TextDocuments;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+\n+/**\n+ * Represents configuration TOML document for `configurable` variables.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ConfigToml {", "originalCommit": "0b52d6119257f73af7131914b0571be5dbd21550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA4MTY3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#discussion_r542081678", "bodyText": "Created issue #27475", "author": "HindujaB", "createdAt": "2020-12-14T03:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2OTU3MA=="}], "type": "inlineReview"}, {"oid": "f560fd4751f71d24799cee56e4b923b0f49e26a9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f560fd4751f71d24799cee56e4b923b0f49e26a9", "message": "Remove toml dependency", "committedDate": "2020-12-12T15:07:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyMjY4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27428#discussion_r543122684", "bodyText": "can we replace with\ncreateArray.<TomlType.BOOLEAN>(...)\n...\npublic static <T> ListInitialValueEntry.ExpressionEntry[] createArray(....) {\n        T rv = (T)o;\n}", "author": "manuranga", "createdAt": "2020-12-15T07:57:10Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -47,88 +64,171 @@\n \n     static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n \n-    private static Toml getConfigurationData() throws TomlException {\n+    private TomlParser() {\n+    }\n+\n+    private static TomlTableNode getConfigurationData() throws TomlException {\n         if (!Files.exists(CONFIG_FILE_PATH)) {\n             throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n         }\n-        try {\n-            return new Toml().read(CONFIG_FILE_PATH.toFile());\n-        } catch (RuntimeException exception) {\n-            throw new TomlException(INVALID_TOML_FILE + exception.getCause().getMessage());\n-        }\n+        ConfigToml configToml = new ConfigToml(CONFIG_FILE_PATH);\n+        return configToml.tomlAstNode();\n     }\n \n     public static void populateConfigMap(Map<Module, VariableKey[]> configurationData) throws TomlException {\n         if (configurationData.isEmpty()) {\n             return;\n         }\n-        Toml toml = getConfigurationData();\n-        if (toml.isEmpty()) {\n+        TomlTableNode tomlNode = getConfigurationData();\n+        if (tomlNode.entries().isEmpty()) {\n             //No values provided at toml file\n             return;\n         }\n         for (Map.Entry<Module, VariableKey[]> moduleEntry : configurationData.entrySet()) {\n             String orgName = moduleEntry.getKey().getOrg();\n             String moduleName = moduleEntry.getKey().getName();\n-            Toml orgToml = orgName.equals(ANON_ORG) ? toml : extractOrganizationTable(toml, orgName);\n-            Toml moduleToml = moduleName.equals(DEFAULT_MODULE) ? orgToml : extractModuleTable(orgToml, moduleName);\n+            TomlTableNode orgNode = orgName.equals(ANON_ORG) ? tomlNode : extractOrganizationNode(tomlNode, orgName);\n+            TomlTableNode moduleNode = moduleName.equals(DEFAULT_MODULE) ? orgNode : extractModuleNode(orgNode,\n+                    moduleName);\n             for (VariableKey key : moduleEntry.getValue()) {\n-                if (!moduleToml.contains(key.variable)) {\n+                if (!moduleNode.entries().containsKey(key.variable)) {\n                     //It is an optional configurable variable\n-                    break;\n+                    continue;\n                 }\n-                Object value = validateAndExtractValue(key, moduleToml);\n+                Object value = validateNodeAndExtractValue(key, moduleNode.entries());\n                 ConfigurableMap.put(key, value);\n             }\n         }\n     }\n \n-    private static Object validateAndExtractValue(VariableKey key, Toml moduleToml) throws TomlException {\n+    private static Object validateNodeAndExtractValue(VariableKey key, Map<String, TopLevelNode> valueMap) {\n         String variableName = key.variable;\n+        TomlValueNode tomlValue = ((TomlKeyValueNode) valueMap.get(variableName)).value();\n         Type type = key.type;\n         Object value;\n         try {\n             switch (type.getTag()) {\n                 case TypeTags.INT_TAG:\n-                    value = moduleToml.getLong(variableName);\n+                    checkTypeAndthrowError(TomlType.INTEGER,  tomlValue.kind(), variableName, type);\n+                    value = ((TomlLongValueNode) tomlValue).getValue();\n                     break;\n                 case TypeTags.BOOLEAN_TAG:\n-                    value = moduleToml.getBoolean(variableName);\n+                    checkTypeAndthrowError(TomlType.BOOLEAN,  tomlValue.kind(), variableName, type);\n+                    value = ((TomlBooleanValueNode) tomlValue).getValue();\n                     break;\n                 case TypeTags.FLOAT_TAG:\n-                    value = moduleToml.getDouble(variableName);\n+                    checkTypeAndthrowError(TomlType.DOUBLE,  tomlValue.kind(), variableName, type);\n+                    value = ((TomlDoubleValueNodeNode) tomlValue).getValue();\n                     break;\n                 case TypeTags.STRING_TAG:\n-                    value = StringUtils.fromString(moduleToml.getString(variableName));\n+                    checkTypeAndthrowError(TomlType.STRING,  tomlValue.kind(), variableName, type);\n+                    value = StringUtils.fromString(((TomlStringValueNode) tomlValue).getValue());\n+                    break;\n+                case TypeTags.DECIMAL_TAG:\n+                    checkTypeAndthrowError(TomlType.DOUBLE,  tomlValue.kind(), variableName, type);\n+                    value =\n+                            ValueCreator.createDecimalValue(\n+                                    BigDecimal.valueOf(((TomlDoubleValueNodeNode) tomlValue).getValue()));\n+                    break;\n+                case TypeTags.INTERSECTION_TAG:\n+                    Type effectiveType = ((BIntersectionType) type).getEffectiveType();\n+                    if (effectiveType.getTag() != TypeTags.ARRAY_TAG) {\n+                        throw new TomlException(String.format(CONFIGURATION_NOT_SUPPORTED, effectiveType.toString()));\n+                    }\n+                    checkTypeAndthrowError(TomlType.ARRAY,  tomlValue.kind(), variableName, effectiveType);\n+                    value = retrieveArrayValues((TomlArrayValueNode) tomlValue, variableName,\n+                            (ArrayType) effectiveType);\n                     break;\n                 default:\n-                    throw new TomlException(String.format(\"Configurable feature is yet to be supported for type '%s'\",\n-                            type.toString()));\n+                    throw new TomlException(String.format(CONFIGURATION_NOT_SUPPORTED, type.toString()));\n             }\n         } catch (ClassCastException e) {\n-            throw new TomlException(INVALID_TOML_FILE + String.format(INVALID_VARIABLE_TYPE, variableName,\n-                    type.toString()));\n+            throw new TomlException(INVALID_TOML_FILE, e);\n         }\n         return value;\n     }\n \n-    private static Toml extractModuleTable(Toml modules, String module) {\n-        Toml moduleToml = modules;\n-        int subModuleIndex = module.indexOf(SUBMODULE_DELIMITER);\n+    private static Object retrieveArrayValues(TomlArrayValueNode arrayNode, String variableName,\n+                                              ArrayType effectiveType) {\n+        Type elementType = effectiveType.getElementType();\n+        List<TomlValueNode> arrayList = arrayNode.elements();\n+        int arraySize = arrayList.size();\n+        ListInitialValueEntry.ExpressionEntry[] arrayEntries =\n+                new ListInitialValueEntry.ExpressionEntry[arraySize];\n+        TomlType retrievedType = arrayList.get(0).kind();\n+        try {\n+            switch (elementType.getTag()) {\n+                case TypeTags.INT_TAG:\n+                    checkTypeAndthrowError(TomlType.INTEGER, retrievedType, variableName, elementType);\n+                    for (int i = 0; i < arraySize; i++) {\n+                        arrayEntries[i] = new ListInitialValueEntry.ExpressionEntry(\n+                                ((TomlLongValueNode) arrayList.get(i)).getValue());\n+                    }\n+                    break;\n+                case TypeTags.BOOLEAN_TAG:\n+                    checkTypeAndthrowError(TomlType.BOOLEAN, retrievedType, variableName, elementType);", "originalCommit": "f560fd4751f71d24799cee56e4b923b0f49e26a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5abfee62d9a7089f848c3ae7b573080a7c45dbcc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5abfee62d9a7089f848c3ae7b573080a7c45dbcc", "message": "Migrate to native toml-parser", "committedDate": "2020-12-16T03:30:34Z", "type": "commit"}, {"oid": "1ebcc4aae4aed38b2d4ae3b74f3d1680f8b94c03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ebcc4aae4aed38b2d4ae3b74f3d1680f8b94c03", "message": "Improve error message", "committedDate": "2020-12-16T03:30:34Z", "type": "commit"}, {"oid": "1a35651fc968a75f4f5754271a48089bd43aa75c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a35651fc968a75f4f5754271a48089bd43aa75c", "message": "Add `configurable` support for other basic types", "committedDate": "2020-12-16T03:30:34Z", "type": "commit"}, {"oid": "e09cd4bc503519f42295adbb3bf1b432cfd0eaec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e09cd4bc503519f42295adbb3bf1b432cfd0eaec", "message": "Fix checkstyle errors", "committedDate": "2020-12-16T03:30:34Z", "type": "commit"}, {"oid": "3b33017f5ea78479605dac54f7d7c66fd9d16d3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b33017f5ea78479605dac54f7d7c66fd9d16d3d", "message": "Remove toml dependency", "committedDate": "2020-12-16T03:30:34Z", "type": "commit"}, {"oid": "458d187e9fd87f63aa1aac63f09e5afb3908fafb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/458d187e9fd87f63aa1aac63f09e5afb3908fafb", "message": "Remove duplicating logic using generic methods", "committedDate": "2020-12-16T03:30:34Z", "type": "commit"}, {"oid": "458d187e9fd87f63aa1aac63f09e5afb3908fafb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/458d187e9fd87f63aa1aac63f09e5afb3908fafb", "message": "Remove duplicating logic using generic methods", "committedDate": "2020-12-16T03:30:34Z", "type": "forcePushed"}]}