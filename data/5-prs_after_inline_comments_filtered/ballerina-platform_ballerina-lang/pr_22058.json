{"pr_number": 22058, "pr_title": "Introduce annotations for Path/Query/Databinding params", "pr_createdAt": "2020-03-22T14:50:31Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058", "timeline": [{"oid": "f99c9fc08b56c290f5686de9801eaa8222adc0e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f99c9fc08b56c290f5686de9801eaa8222adc0e2", "message": "Add parameter annotation", "committedDate": "2020-03-07T07:05:52Z", "type": "commit"}, {"oid": "3b3f50849580662eba47dfcd0aed79ec1bcf9487", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b3f50849580662eba47dfcd0aed79ec1bcf9487", "message": "Add signature param processing logic", "committedDate": "2020-03-13T08:22:34Z", "type": "commit"}, {"oid": "9fc421aed72d02001134a232312f6cd01c61c224", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fc421aed72d02001134a232312f6cd01c61c224", "message": "Add runtime param assignment", "committedDate": "2020-03-13T08:24:43Z", "type": "commit"}, {"oid": "de9adcb9d7709c04392bea5c368853748140a9c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/de9adcb9d7709c04392bea5c368853748140a9c9", "message": "Structure dispatcher code", "committedDate": "2020-03-18T06:27:46Z", "type": "commit"}, {"oid": "5f20d252e484a67ea727f41252173286f3cc39dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f20d252e484a67ea727f41252173286f3cc39dc", "message": "Add compiler validation", "committedDate": "2020-03-20T11:23:18Z", "type": "commit"}, {"oid": "66d979c4f074476201c80984fcfde3d3a169f81a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66d979c4f074476201c80984fcfde3d3a169f81a", "message": "Add compiler validation and refactor others", "committedDate": "2020-03-22T12:42:57Z", "type": "commit"}, {"oid": "e4b68bb954cc19cbee26498b7b9213a3a4cc0dea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4b68bb954cc19cbee26498b7b9213a3a4cc0dea", "message": "Remove desurgered pathParamOrderConfig", "committedDate": "2020-03-22T13:51:36Z", "type": "commit"}, {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "message": "Fix spotbugs issues and refactor code", "committedDate": "2020-03-22T14:54:24Z", "type": "commit"}, {"oid": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "message": "Fix spotbugs issues and refactor code", "committedDate": "2020-03-22T14:54:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxNzk4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396217986", "bodyText": "Convert this to a loop. We don't use streams in the runtime since it has a performance impact.", "author": "pubudu91", "createdAt": "2020-03-23T05:19:26Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BFunctionType.java", "diffHunk": "@@ -119,4 +121,9 @@ public String toString() {\n     public String getAnnotationKey() {\n         return this.typeName;\n     }\n+\n+    public List<String> getParamAnnotationKeys() {\n+        return Arrays.stream(this.annotations.getKeys()).filter(key -> key.startsWith(\"$param$\")).collect(", "originalCommit": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxOTMxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396219314", "bodyText": "Do we really need this check? This method is called for resource functions only.", "author": "pubudu91", "createdAt": "2020-03-23T05:25:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ServiceDesugar.java", "diffHunk": "@@ -201,7 +201,8 @@ void engageCustomServiceDesugar(BLangService service, SymbolEnv env) {\n     }\n \n     private void engageCustomResourceDesugar(BLangFunction functionNode, SymbolEnv env) {\n-        httpFiltersDesugar.addHttpFilterStatementsToResource(functionNode, env);\n-        httpFiltersDesugar.addCustomAnnotationToResource(functionNode, env);\n+        if (HttpFiltersDesugar.isHttpResource(functionNode)) {", "originalCommit": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxOTYzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396519634", "bodyText": "Yes, but this is called for both HTTP and WebSocket resource functions. Since the service typing support is not available yet, this method is used to check the first function parameter to distinguish it.", "author": "chamil321", "createdAt": "2020-03-23T15:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxOTMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396224360", "bodyText": "Shall we change this to the same format as the standard incompatible types error message?\ndlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible query param type: expected 'string|string[]', found '\" + param.type + \"'\";\nAlso, the expected type can be stated as string|string[] right? Also, how would the user know what type(s) to use for query params?\nAnother point, in error messages, we use ' around type names, not `", "author": "pubudu91", "createdAt": "2020-03-23T05:47:58Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/compiler/ResourceValidator.java", "diffHunk": "@@ -2,68 +2,172 @@\n \n import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n import org.ballerinalang.model.tree.FunctionNode;\n-import org.ballerinalang.model.tree.SimpleVariableNode;\n import org.ballerinalang.model.tree.expressions.LiteralNode;\n import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n import org.ballerinalang.util.diagnostic.Diagnostic;\n import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.util.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.ballerinalang.net.http.HttpConstants.ANN_CONFIG_ATTR_WEBSOCKET_UPGRADE;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_BODY_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_PATH_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_QUERY_PARAM;\n import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_RESOURCE_CONFIG;\n-import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_BODY;\n import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_PATH;\n import static org.ballerinalang.net.http.HttpConstants.ANN_WEBSOCKET_ATTR_UPGRADE_PATH;\n import static org.ballerinalang.net.http.HttpConstants.CALLER;\n import static org.ballerinalang.net.http.HttpConstants.HTTP_LISTENER_ENDPOINT;\n+import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_PACKAGE_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.REQUEST;\n \n /**\n- * A utility class for validating an HTTP resource signature at compile time.\n+ * A utility class for validating an HTTP resource signature, c at compile time.\n  *\n  * @since 0.965.0\n  */\n-public class ResourceSignatureValidator {\n+public class ResourceValidator {\n \n     public static final int COMPULSORY_PARAM_COUNT = 2;\n \n     private static final String ENDPOINT_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + HTTP_LISTENER_ENDPOINT;\n     private static final String CALLER_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + CALLER;\n     private static final String HTTP_REQUEST_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + REQUEST;\n+    private static final String HTTP_ANNOTATION = \"@\" + PROTOCOL_HTTP + \":\";\n \n-    public static void validate(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos) {\n+    static void validateSignature(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos,\n+                                  List<String> pathSegments) {\n         final int nParams = signatureParams.size();\n \n         if (nParams < COMPULSORY_PARAM_COUNT) {\n             dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"resource signature parameter count should be >= 2\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type \" + CALLER_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type `\" + CALLER_TYPE + \"`\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type \" + HTTP_REQUEST_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type `\" +\n+                    HTTP_REQUEST_TYPE + \"`\");\n+            return;\n+        }\n+\n+        if (nParams == COMPULSORY_PARAM_COUNT) {\n+            return;\n+        }\n+\n+        int bodyParamCount = 0;\n+        for (int index = 2; index < nParams; index++) {\n+\n+            BLangSimpleVariable param = signatureParams.get(index);\n+            String annotationName = getCompatibleAnnotation(param);\n+            if (annotationName == null) {\n+                dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"missing annotation of parameter `\" +\n+                        param.name.value + \"`: expected `\" + HTTP_ANNOTATION + ANN_NAME_PATH_PARAM + \"`, `\" +\n+                        HTTP_ANNOTATION + ANN_NAME_QUERY_PARAM + \"`, `\" + HTTP_ANNOTATION + ANN_NAME_BODY_PARAM + \"`\");\n+                continue;\n+            }\n+            switch (annotationName) {\n+                case ANN_NAME_PATH_PARAM:\n+                    validatePathParam(param, pathSegments, dlog);\n+                    break;\n+                case ANN_NAME_QUERY_PARAM:\n+                    validateQueryParam(param, dlog);\n+                    break;\n+                case ANN_NAME_BODY_PARAM:\n+                    if (bodyParamCount++ == 0) {\n+                        validateBodyParam(param, dlog);\n+                        continue;\n+                    }\n+                    dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid multiple `\" + HTTP_ANNOTATION +\n+                            ANN_NAME_BODY_PARAM + \"` annotations: cannot specify > 1 entity-body params\");\n+                    break;\n+                default:\n+                    // do not execute\n+            }\n+        }\n+    }\n+\n+    private static boolean isInvalidResourceParam(BLangSimpleVariable param, String expectedType) {\n+        return !expectedType.equals(param.type.toString());\n+    }\n+\n+    private static String getCompatibleAnnotation(BLangSimpleVariable param) {\n+        for (BLangAnnotationAttachment annotationAttachment : param.annAttachments) {\n+            BAnnotationSymbol annotationSymbol = annotationAttachment.annotationSymbol;\n+            if (!PROTOCOL_HTTP.equals(annotationSymbol.pkgID.name.value)) {\n+                continue;\n+            }\n+            String annotationName = annotationSymbol.name.value;\n+            if (ANN_NAME_PATH_PARAM.equals(annotationName) || ANN_NAME_QUERY_PARAM.equals(annotationName) ||\n+                    ANN_NAME_BODY_PARAM.equals(annotationName)) {\n+                return annotationName;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void validatePathParam(BLangSimpleVariable param, List<String> pathSegments, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && varTag != TypeTags.INT && varTag != TypeTags.BOOLEAN &&\n+                varTag != TypeTags.FLOAT) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible path param type: `\" + param.type +\n+                    \"`, expected `string`, `int`, `boolean`, `float`\");\n+            return;\n+        }\n+        if (!pathSegments.contains(param.name.value)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid path param: `\" + param.toString() +\n+                    \"`, missing segment `{\" + param.name.value + \"}` in the path config of the resource annotation\");\n+        }\n+    }\n+\n+    private static void validateQueryParam(BLangSimpleVariable param, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && (varTag != TypeTags.ARRAY ||\n+                ((BArrayType) paramType).getElementType().tag != TypeTags.STRING)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible query param type: `\" + param.type +\n+                    \"`, expected `string`, `string[]`\");", "originalCommit": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NTg0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396575843", "bodyText": "Changed the error as suggested.\nIf we stated the type as string|string[], user can misinterpret is as a union type as ballerina has similar syntax.\nThe types of each param are mentioned in the module.md. Also, we can add it to the annotation docs if suitable", "author": "chamil321", "createdAt": "2020-03-23T16:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5ODA3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396598077", "bodyText": "Yeah assuming we only allow either string or string[] I also think string|string[] could be misleading.\nHow about\n\"incompatible query param: expected a param of type 'string' or 'string[]', found '\" + param.type + \"'\"\nOn  a separate note, does \"query parameter\" sound odd? QueryParam for the annotation is OK, but I was wondering if we should use \"parameter\" for the error message.", "author": "MaryamZi", "createdAt": "2020-03-23T16:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxNTA1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396615055", "bodyText": "Changed the error as suggested", "author": "chamil321", "createdAt": "2020-03-23T17:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNDU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396224568", "bodyText": "Same comment as above here, regarding error message format, use of unions and formatting", "author": "pubudu91", "createdAt": "2020-03-23T05:48:49Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/compiler/ResourceValidator.java", "diffHunk": "@@ -2,68 +2,172 @@\n \n import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n import org.ballerinalang.model.tree.FunctionNode;\n-import org.ballerinalang.model.tree.SimpleVariableNode;\n import org.ballerinalang.model.tree.expressions.LiteralNode;\n import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n import org.ballerinalang.util.diagnostic.Diagnostic;\n import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.util.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.ballerinalang.net.http.HttpConstants.ANN_CONFIG_ATTR_WEBSOCKET_UPGRADE;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_BODY_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_PATH_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_QUERY_PARAM;\n import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_RESOURCE_CONFIG;\n-import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_BODY;\n import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_PATH;\n import static org.ballerinalang.net.http.HttpConstants.ANN_WEBSOCKET_ATTR_UPGRADE_PATH;\n import static org.ballerinalang.net.http.HttpConstants.CALLER;\n import static org.ballerinalang.net.http.HttpConstants.HTTP_LISTENER_ENDPOINT;\n+import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_PACKAGE_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.REQUEST;\n \n /**\n- * A utility class for validating an HTTP resource signature at compile time.\n+ * A utility class for validating an HTTP resource signature, c at compile time.\n  *\n  * @since 0.965.0\n  */\n-public class ResourceSignatureValidator {\n+public class ResourceValidator {\n \n     public static final int COMPULSORY_PARAM_COUNT = 2;\n \n     private static final String ENDPOINT_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + HTTP_LISTENER_ENDPOINT;\n     private static final String CALLER_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + CALLER;\n     private static final String HTTP_REQUEST_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + REQUEST;\n+    private static final String HTTP_ANNOTATION = \"@\" + PROTOCOL_HTTP + \":\";\n \n-    public static void validate(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos) {\n+    static void validateSignature(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos,\n+                                  List<String> pathSegments) {\n         final int nParams = signatureParams.size();\n \n         if (nParams < COMPULSORY_PARAM_COUNT) {\n             dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"resource signature parameter count should be >= 2\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type \" + CALLER_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type `\" + CALLER_TYPE + \"`\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type \" + HTTP_REQUEST_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type `\" +\n+                    HTTP_REQUEST_TYPE + \"`\");\n+            return;\n+        }\n+\n+        if (nParams == COMPULSORY_PARAM_COUNT) {\n+            return;\n+        }\n+\n+        int bodyParamCount = 0;\n+        for (int index = 2; index < nParams; index++) {\n+\n+            BLangSimpleVariable param = signatureParams.get(index);\n+            String annotationName = getCompatibleAnnotation(param);\n+            if (annotationName == null) {\n+                dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"missing annotation of parameter `\" +\n+                        param.name.value + \"`: expected `\" + HTTP_ANNOTATION + ANN_NAME_PATH_PARAM + \"`, `\" +\n+                        HTTP_ANNOTATION + ANN_NAME_QUERY_PARAM + \"`, `\" + HTTP_ANNOTATION + ANN_NAME_BODY_PARAM + \"`\");\n+                continue;\n+            }\n+            switch (annotationName) {\n+                case ANN_NAME_PATH_PARAM:\n+                    validatePathParam(param, pathSegments, dlog);\n+                    break;\n+                case ANN_NAME_QUERY_PARAM:\n+                    validateQueryParam(param, dlog);\n+                    break;\n+                case ANN_NAME_BODY_PARAM:\n+                    if (bodyParamCount++ == 0) {\n+                        validateBodyParam(param, dlog);\n+                        continue;\n+                    }\n+                    dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid multiple `\" + HTTP_ANNOTATION +\n+                            ANN_NAME_BODY_PARAM + \"` annotations: cannot specify > 1 entity-body params\");\n+                    break;\n+                default:\n+                    // do not execute\n+            }\n+        }\n+    }\n+\n+    private static boolean isInvalidResourceParam(BLangSimpleVariable param, String expectedType) {\n+        return !expectedType.equals(param.type.toString());\n+    }\n+\n+    private static String getCompatibleAnnotation(BLangSimpleVariable param) {\n+        for (BLangAnnotationAttachment annotationAttachment : param.annAttachments) {\n+            BAnnotationSymbol annotationSymbol = annotationAttachment.annotationSymbol;\n+            if (!PROTOCOL_HTTP.equals(annotationSymbol.pkgID.name.value)) {\n+                continue;\n+            }\n+            String annotationName = annotationSymbol.name.value;\n+            if (ANN_NAME_PATH_PARAM.equals(annotationName) || ANN_NAME_QUERY_PARAM.equals(annotationName) ||\n+                    ANN_NAME_BODY_PARAM.equals(annotationName)) {\n+                return annotationName;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void validatePathParam(BLangSimpleVariable param, List<String> pathSegments, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && varTag != TypeTags.INT && varTag != TypeTags.BOOLEAN &&\n+                varTag != TypeTags.FLOAT) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible path param type: `\" + param.type +\n+                    \"`, expected `string`, `int`, `boolean`, `float`\");\n+            return;\n+        }\n+        if (!pathSegments.contains(param.name.value)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid path param: `\" + param.toString() +\n+                    \"`, missing segment `{\" + param.name.value + \"}` in the path config of the resource annotation\");\n+        }\n+    }\n+\n+    private static void validateQueryParam(BLangSimpleVariable param, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && (varTag != TypeTags.ARRAY ||\n+                ((BArrayType) paramType).getElementType().tag != TypeTags.STRING)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible query param type: `\" + param.type +\n+                    \"`, expected `string`, `string[]`\");\n+        }\n+    }\n+\n+    private static void validateBodyParam(BLangSimpleVariable param, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int type = paramType.tag;\n+\n+        if (type != TypeTags.RECORD && type != TypeTags.JSON && type != TypeTags.XML &&\n+                type != TypeTags.STRING && (type != TypeTags.ARRAY || !validArrayType(paramType))) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible entity-body param type: `\"\n+                    + param.type + \"`, expected `string`, `json`, `xml`, `byte[]`, `{}`, `{}[]`\");", "originalCommit": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTUzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396225533", "bodyText": "Check https://github.com/ballerina-platform/ballerina-lang/pull/22058/files#r396224360", "author": "pubudu91", "createdAt": "2020-03-23T05:53:10Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/compiler/ResourceValidator.java", "diffHunk": "@@ -2,68 +2,172 @@\n \n import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n import org.ballerinalang.model.tree.FunctionNode;\n-import org.ballerinalang.model.tree.SimpleVariableNode;\n import org.ballerinalang.model.tree.expressions.LiteralNode;\n import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n import org.ballerinalang.util.diagnostic.Diagnostic;\n import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.util.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.ballerinalang.net.http.HttpConstants.ANN_CONFIG_ATTR_WEBSOCKET_UPGRADE;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_BODY_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_PATH_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_QUERY_PARAM;\n import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_RESOURCE_CONFIG;\n-import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_BODY;\n import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_PATH;\n import static org.ballerinalang.net.http.HttpConstants.ANN_WEBSOCKET_ATTR_UPGRADE_PATH;\n import static org.ballerinalang.net.http.HttpConstants.CALLER;\n import static org.ballerinalang.net.http.HttpConstants.HTTP_LISTENER_ENDPOINT;\n+import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_PACKAGE_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.REQUEST;\n \n /**\n- * A utility class for validating an HTTP resource signature at compile time.\n+ * A utility class for validating an HTTP resource signature, c at compile time.\n  *\n  * @since 0.965.0\n  */\n-public class ResourceSignatureValidator {\n+public class ResourceValidator {\n \n     public static final int COMPULSORY_PARAM_COUNT = 2;\n \n     private static final String ENDPOINT_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + HTTP_LISTENER_ENDPOINT;\n     private static final String CALLER_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + CALLER;\n     private static final String HTTP_REQUEST_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + REQUEST;\n+    private static final String HTTP_ANNOTATION = \"@\" + PROTOCOL_HTTP + \":\";\n \n-    public static void validate(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos) {\n+    static void validateSignature(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos,\n+                                  List<String> pathSegments) {\n         final int nParams = signatureParams.size();\n \n         if (nParams < COMPULSORY_PARAM_COUNT) {\n             dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"resource signature parameter count should be >= 2\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type \" + CALLER_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type `\" + CALLER_TYPE + \"`\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type \" + HTTP_REQUEST_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type `\" +\n+                    HTTP_REQUEST_TYPE + \"`\");\n+            return;\n+        }\n+\n+        if (nParams == COMPULSORY_PARAM_COUNT) {\n+            return;\n+        }\n+\n+        int bodyParamCount = 0;\n+        for (int index = 2; index < nParams; index++) {\n+\n+            BLangSimpleVariable param = signatureParams.get(index);\n+            String annotationName = getCompatibleAnnotation(param);\n+            if (annotationName == null) {\n+                dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"missing annotation of parameter `\" +\n+                        param.name.value + \"`: expected `\" + HTTP_ANNOTATION + ANN_NAME_PATH_PARAM + \"`, `\" +\n+                        HTTP_ANNOTATION + ANN_NAME_QUERY_PARAM + \"`, `\" + HTTP_ANNOTATION + ANN_NAME_BODY_PARAM + \"`\");\n+                continue;\n+            }\n+            switch (annotationName) {\n+                case ANN_NAME_PATH_PARAM:\n+                    validatePathParam(param, pathSegments, dlog);\n+                    break;\n+                case ANN_NAME_QUERY_PARAM:\n+                    validateQueryParam(param, dlog);\n+                    break;\n+                case ANN_NAME_BODY_PARAM:\n+                    if (bodyParamCount++ == 0) {\n+                        validateBodyParam(param, dlog);\n+                        continue;\n+                    }\n+                    dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"invalid multiple `\" + HTTP_ANNOTATION +\n+                            ANN_NAME_BODY_PARAM + \"` annotations: cannot specify > 1 entity-body params\");\n+                    break;\n+                default:\n+                    // do not execute\n+            }\n+        }\n+    }\n+\n+    private static boolean isInvalidResourceParam(BLangSimpleVariable param, String expectedType) {\n+        return !expectedType.equals(param.type.toString());\n+    }\n+\n+    private static String getCompatibleAnnotation(BLangSimpleVariable param) {\n+        for (BLangAnnotationAttachment annotationAttachment : param.annAttachments) {\n+            BAnnotationSymbol annotationSymbol = annotationAttachment.annotationSymbol;\n+            if (!PROTOCOL_HTTP.equals(annotationSymbol.pkgID.name.value)) {\n+                continue;\n+            }\n+            String annotationName = annotationSymbol.name.value;\n+            if (ANN_NAME_PATH_PARAM.equals(annotationName) || ANN_NAME_QUERY_PARAM.equals(annotationName) ||\n+                    ANN_NAME_BODY_PARAM.equals(annotationName)) {\n+                return annotationName;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void validatePathParam(BLangSimpleVariable param, List<String> pathSegments, DiagnosticLog dlog) {\n+        BType paramType = param.type;\n+        int varTag = paramType.tag;\n+\n+        if (varTag != TypeTags.STRING && varTag != TypeTags.INT && varTag != TypeTags.BOOLEAN &&\n+                varTag != TypeTags.FLOAT) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, param.pos, \"incompatible path param type: `\" + param.type +", "originalCommit": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTkyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396225923", "bodyText": "Use ' instead of ` to quote types", "author": "pubudu91", "createdAt": "2020-03-23T05:54:33Z", "path": "stdlib/http/src/main/java/org/ballerinalang/net/http/compiler/ResourceValidator.java", "diffHunk": "@@ -2,68 +2,172 @@\n \n import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n import org.ballerinalang.model.tree.FunctionNode;\n-import org.ballerinalang.model.tree.SimpleVariableNode;\n import org.ballerinalang.model.tree.expressions.LiteralNode;\n import org.ballerinalang.model.tree.expressions.RecordLiteralNode;\n import org.ballerinalang.util.diagnostic.Diagnostic;\n import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangRecordLiteral;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangSimpleVarRef;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.util.Lists;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.ballerinalang.net.http.HttpConstants.ANN_CONFIG_ATTR_WEBSOCKET_UPGRADE;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_BODY_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_PATH_PARAM;\n+import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_QUERY_PARAM;\n import static org.ballerinalang.net.http.HttpConstants.ANN_NAME_RESOURCE_CONFIG;\n-import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_BODY;\n import static org.ballerinalang.net.http.HttpConstants.ANN_RESOURCE_ATTR_PATH;\n import static org.ballerinalang.net.http.HttpConstants.ANN_WEBSOCKET_ATTR_UPGRADE_PATH;\n import static org.ballerinalang.net.http.HttpConstants.CALLER;\n import static org.ballerinalang.net.http.HttpConstants.HTTP_LISTENER_ENDPOINT;\n+import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.PROTOCOL_PACKAGE_HTTP;\n import static org.ballerinalang.net.http.HttpConstants.REQUEST;\n \n /**\n- * A utility class for validating an HTTP resource signature at compile time.\n+ * A utility class for validating an HTTP resource signature, c at compile time.\n  *\n  * @since 0.965.0\n  */\n-public class ResourceSignatureValidator {\n+public class ResourceValidator {\n \n     public static final int COMPULSORY_PARAM_COUNT = 2;\n \n     private static final String ENDPOINT_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + HTTP_LISTENER_ENDPOINT;\n     private static final String CALLER_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + CALLER;\n     private static final String HTTP_REQUEST_TYPE = PROTOCOL_PACKAGE_HTTP + \":\" + REQUEST;\n+    private static final String HTTP_ANNOTATION = \"@\" + PROTOCOL_HTTP + \":\";\n \n-    public static void validate(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos) {\n+    static void validateSignature(List<BLangSimpleVariable> signatureParams, DiagnosticLog dlog, DiagnosticPos pos,\n+                                  List<String> pathSegments) {\n         final int nParams = signatureParams.size();\n \n         if (nParams < COMPULSORY_PARAM_COUNT) {\n             dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"resource signature parameter count should be >= 2\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type \" + CALLER_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(0), CALLER_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"first parameter should be of type `\" + CALLER_TYPE + \"`\");\n             return;\n         }\n \n-        if (!isValidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n-            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type \" + HTTP_REQUEST_TYPE);\n+        if (isInvalidResourceParam(signatureParams.get(1), HTTP_REQUEST_TYPE)) {\n+            dlog.logDiagnostic(Diagnostic.Kind.ERROR, pos, \"second parameter should be of type `\" +", "originalCommit": "467e77b1fcb0108a4891f7e4db9f68dc1e1ee924", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNjAxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22058#discussion_r396226011", "bodyText": "Check in other places as well", "author": "pubudu91", "createdAt": "2020-03-23T05:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTkyMw=="}], "type": "inlineReview"}, {"oid": "d7161412792d8d1c9c0b723f4d4762851e9339ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7161412792d8d1c9c0b723f4d4762851e9339ba", "message": "Resolve review suggestions", "committedDate": "2020-03-23T17:34:38Z", "type": "commit"}, {"oid": "dd82f603ef8fbeeb31e9ee767a14a88c32755091", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd82f603ef8fbeeb31e9ee767a14a88c32755091", "message": "Merge branch 'http-v2' of https://github.com/ballerina-platform/ballerina-lang into param-api-change\n\n# Conflicts:\n#\tstdlib/http/src/main/java/org/ballerinalang/net/uri/URIUtil.java\n#\tstdlib/http/src/test/resources/test-src/services/dispatching/data-binding-test.bal", "committedDate": "2020-04-05T18:22:43Z", "type": "commit"}, {"oid": "3ddf465332f94d266c5473c7ebf14fd38146c737", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ddf465332f94d266c5473c7ebf14fd38146c737", "message": "Merge branch 'http-v2' of https://github.com/ballerina-platform/ballerina-lang into param-api-change", "committedDate": "2020-04-06T04:39:06Z", "type": "commit"}, {"oid": "b28c004812cc629159cdd1b39f2231ad1a1eedaa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b28c004812cc629159cdd1b39f2231ad1a1eedaa", "message": "Add unused path segment warning", "committedDate": "2020-04-06T15:33:45Z", "type": "commit"}]}