{"pr_number": 22609, "pr_title": "Add is expression support", "pr_createdAt": "2020-04-14T17:46:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609", "timeline": [{"oid": "cc6793cf3e2ea2c6db99423fcb8c43e250914635", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc6793cf3e2ea2c6db99423fcb8c43e250914635", "message": "Add is expression support", "committedDate": "2020-04-10T08:11:59Z", "type": "commit"}, {"oid": "531bfe51021e511a43ee8a8cec21becf42cf9ab3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/531bfe51021e511a43ee8a8cec21becf42cf9ab3", "message": "Add test cases", "committedDate": "2020-04-10T08:13:17Z", "type": "commit"}, {"oid": "00eae0a7eb9a5f3c0b3fdd761f9bc7bba0822512", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00eae0a7eb9a5f3c0b3fdd761f9bc7bba0822512", "message": "Add error recovery", "committedDate": "2020-04-13T17:18:14Z", "type": "commit"}, {"oid": "d328f7ad77eea4074305f4b0503399cc07d94e80", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d328f7ad77eea4074305f4b0503399cc07d94e80", "message": "Fix TypeDescriptor Recovery for EOF TOKEN", "committedDate": "2020-04-14T13:47:48Z", "type": "commit"}, {"oid": "246d9377d33851301e7f0d8175a7d3b672e67cfa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/246d9377d33851301e7f0d8175a7d3b672e67cfa", "message": "Fix test cases", "committedDate": "2020-04-14T13:50:07Z", "type": "commit"}, {"oid": "29268fe43c9d64ff27a34720495741e58d7c8337", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29268fe43c9d64ff27a34720495741e58d7c8337", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java", "committedDate": "2020-04-14T14:14:37Z", "type": "commit"}, {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "message": "Fix public node after merging", "committedDate": "2020-04-14T18:37:35Z", "type": "commit"}, {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "message": "Fix public node after merging", "committedDate": "2020-04-14T18:37:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408540495", "bodyText": "Why do we need to special case is keyword here?", "author": "SupunS", "createdAt": "2020-04-15T02:13:40Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2699,6 +2707,8 @@ private STNode parseExpressionRhs(OperatorPrecedence currentPrecedenceLevel, Syn\n                 // that matches to the current operator precedence level, and continue.\n                 SyntaxKind binaryOpKind = getOperatorKindToInsert(currentPrecedenceLevel);\n                 return parseExpressionRhs(currentPrecedenceLevel, binaryOpKind, lhsExpr, isAssignmentLhs);\n+            } else if (solution.ctx == ParserRuleContext.IS_KEYWORD) {\n+                return parseExpressionRhs(currentPrecedenceLevel, SyntaxKind.IS_KEYWORD, lhsExpr, isAssignmentLhs);", "originalCommit": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408540870", "bodyText": "Does these two lines needs to be switched?", "author": "SupunS", "createdAt": "2020-04-15T02:15:12Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4702,5 +4716,37 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Parse is expression.\n+     * <code>\n+     * is-expr := expression is type-descriptor\n+     * </code>\n+     *\n+     * @param lhsExpr Preceding expression of the is expression\n+     * @return Is expression node\n+     */\n+    private STNode parseIsExpression(STNode lhsExpr) {\n+        STNode isKeyword = parseIsKeyword();\n+        startContext(ParserRuleContext.IS_EXPRESSION);", "originalCommit": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NDI3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408544275", "bodyText": "Do we need to start a context at all?", "author": "SupunS", "createdAt": "2020-04-15T02:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408588505", "bodyText": "Without starting a context,  getNextRuleForSimpleTypeDesc() looks for a VARIABLE_NAME. But for is_expression we need to have expression_rhs as the next rule right?", "author": "lochana-chathura", "createdAt": "2020-04-15T05:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MDExOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408590119", "bodyText": "ack.", "author": "SupunS", "createdAt": "2020-04-15T05:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408549252", "bodyText": "ParserErrorHandle should handle this IMO", "author": "SupunS", "createdAt": "2020-04-15T02:47:03Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1421,7 +1423,12 @@ private STNode parseTypeDescriptor(SyntaxKind tokenKind) {\n                 return parseNilTypeDescriptor();\n             default:\n                 STToken token = peek();\n-                Solution solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                Solution solution;\n+                if (token.kind == SyntaxKind.EOF_TOKEN) {\n+                    solution = recover(token, ParserRuleContext.SIMPLE_TYPE_DESCRIPTOR);\n+                } else {\n+                    solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                }", "originalCommit": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4Njg1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408586855", "bodyText": "Without above modification test(\"3 is\", \"is-expr/is_expr_assert_04.json\"); fails.\nIn error recovery for EOF, we directly insert current ctx. For TYPE_DESCRIPTOR ctx, getExpectedTokenKind(currentCtx); returns a NONE syntax kind.\nSo I ended up getting a java.lang.StackOverflowError as return parseTypeDescriptor(solution.tokenKind); line calls repeatedly.\ntest(\"3 is ;\", \"is-expr/is_expr_assert_04.json\"); Passes as there's a semicolon next to 'is' keyword", "author": "lochana-chathura", "createdAt": "2020-04-15T05:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODI2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408588265", "bodyText": "I see..\nWhat if we update the getExpectedTokenKind() method to return a SIMPLE_TYPE, for TYPE_DESCRIPTOR context?", "author": "SupunS", "createdAt": "2020-04-15T05:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MDI0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408590242", "bodyText": "yeah. it works. let's do that way.", "author": "lochana-chathura", "createdAt": "2020-04-15T05:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408550033", "bodyText": "Can't we handle this in a similar way to the binary expression?", "author": "SupunS", "createdAt": "2020-04-15T02:49:54Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -824,6 +824,11 @@ private Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curren\n                 case UNARY_OPERATOR:\n                     hasMatch = isUnaryOperator(nextToken);\n                     break;\n+                case IS_KEYWORD:\n+                    hasMatch = nextToken.kind == SyntaxKind.IS_KEYWORD;\n+                    break;\n+                case IS_EXPRESSION:\n+                    return seekInIsExpression(currentCtx, lookahead, currentDepth, matchingRulesCount);", "originalCommit": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4OTA3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408589074", "bodyText": "that means we don't need IS_EXPRESSION in ParserRuleContext[] EXPRESSIONS array?", "author": "lochana-chathura", "createdAt": "2020-04-15T05:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MDc1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408590752", "bodyText": "I was mimicking ACCESS_EXPRESSION there btw", "author": "lochana-chathura", "createdAt": "2020-04-15T05:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5ODczMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408598733", "bodyText": "I see. Ok, let's keep this for now.\nI think we will have to refactor both of these to be aligned with the binary expression. Can you please create an issue?", "author": "SupunS", "createdAt": "2020-04-15T06:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTQwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408599407", "bodyText": "sure.", "author": "lochana-chathura", "createdAt": "2020-04-15T06:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDUxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408550514", "bodyText": "startContext() is only called at one place currently. Can we stick to that?", "author": "SupunS", "createdAt": "2020-04-15T02:51:54Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1520,6 +1527,9 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                 return ParserRuleContext.UNARY_OPERATOR;\n             case UNARY_OPERATOR:\n                 return ParserRuleContext.EXPRESSION;\n+            case IS_KEYWORD:\n+                startContext(ParserRuleContext.IS_EXPRESSION);", "originalCommit": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9fd152cb706e6a80c5e2fe4634daa269fc5a2c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9fd152cb706e6a80c5e2fe4634daa269fc5a2c3", "message": "Fix error recovery issues", "committedDate": "2020-04-15T06:30:49Z", "type": "commit"}, {"oid": "e0c2acf271cb4b7ec3a8a4aecfd267b058fd82ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0c2acf271cb4b7ec3a8a4aecfd267b058fd82ea", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser", "committedDate": "2020-04-15T06:31:26Z", "type": "commit"}, {"oid": "d94e2ace467bcf709be5e35e59f2b86d157d1a4e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d94e2ace467bcf709be5e35e59f2b86d157d1a4e", "message": "Generate public nodes from treegen", "committedDate": "2020-04-15T06:53:22Z", "type": "commit"}, {"oid": "1f7f4749737658a2be7dd48d94ab3209a84e534e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f7f4749737658a2be7dd48d94ab3209a84e534e", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/ParserRuleContext.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/ParserTestUtils.java\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "committedDate": "2020-04-15T11:34:50Z", "type": "commit"}, {"oid": "40f166f840153439b5784d213318851761990aa2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40f166f840153439b5784d213318851761990aa2", "message": "Regenerate Tree with new changes", "committedDate": "2020-04-15T11:52:36Z", "type": "commit"}, {"oid": "6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d", "message": "Fix functionality after merging", "committedDate": "2020-04-15T12:51:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwOTU1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r409409552", "bodyText": "Incorrect indentation.\nI'l merge this PR anyway. Please fix it in the next PR.", "author": "SupunS", "createdAt": "2020-04-16T09:21:25Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1353,10 +1359,10 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                     endContext(); // end parameter-list\n                 }\n                 if (parentCtx == ParserRuleContext.NIL_TYPE_DESCRIPTOR) {\n-                    endContext();\n-                    // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n-                    return getNextRuleForTypeDescriptor();\n-                }\n+                endContext();\n+                // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n+                return getNextRuleForTypeDescriptor();\n+            }", "originalCommit": "6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyODY2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r409428662", "bodyText": "sure", "author": "lochana-chathura", "createdAt": "2020-04-16T09:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwOTU1Mg=="}], "type": "inlineReview"}]}