{"pr_number": 26647, "pr_title": "Fix issue in expression string value created for value with cycles", "pr_createdAt": "2020-10-28T06:48:07Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647", "timeline": [{"oid": "e8c9a77114de66b2e27f7ff065cf844e02d725f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8c9a77114de66b2e27f7ff065cf844e02d725f8", "message": "Fix issue in expression string value created for value with cycles", "committedDate": "2020-10-28T06:43:44Z", "type": "commit"}, {"oid": "6d6e72b027b89cade474735e79adb0121144e386", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d6e72b027b89cade474735e79adb0121144e386", "message": "Undo index change", "committedDate": "2020-10-28T06:51:08Z", "type": "commit"}, {"oid": "999821a41629f1d5d7e87cb2ed47288489cee5a6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/999821a41629f1d5d7e87cb2ed47288489cee5a6", "message": "Remove index from BLink", "committedDate": "2020-10-28T06:53:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNzQ3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647#discussion_r513227470", "bodyText": "shall we put a comment what this \"2\" means?", "author": "gimantha", "createdAt": "2020-10-28T07:26:57Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/BalStringUtils.java", "diffHunk": "@@ -168,12 +195,12 @@ public static Object parseMapExpressionStringValue(String exprValue) {\n      * @param exprValue Ballerina expression syntax of the array\n      * @return table value\n      */\n-    public static Object parseTableExpressionStringValue(String exprValue) {\n+    public static Object parseTableExpressionStringValue(String exprValue, BLink parent) {\n         String[] keys = exprValue.substring\n                 (exprValue.indexOf('(') + 1, exprValue.indexOf(')')).split(\",\");\n         ArrayValue fieldNames = (ArrayValue) ValueCreator.createArrayValue(StringUtils.fromStringArray(keys));\n         ArrayValueImpl data = (ArrayValueImpl) StringUtils.parseExpressionStringValue(exprValue.substring\n-                (exprValue.indexOf(')') + 2));\n+                (exprValue.indexOf(')') + 2), parent);", "originalCommit": "999821a41629f1d5d7e87cb2ed47288489cee5a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fffb2d9abcf80ceed526cc9d3827ac78bf8d5f28", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fffb2d9abcf80ceed526cc9d3827ac78bf8d5f28", "message": "Add suggested changes", "committedDate": "2020-10-28T13:43:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5ODQ0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647#discussion_r542298444", "bodyText": "Have this after the returning check. No need to initialize if you return", "author": "pcnfernando", "createdAt": "2020-12-14T11:04:54Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/BalStringUtils.java", "diffHunk": "@@ -36,46 +38,60 @@\n import io.ballerina.runtime.types.BUnionType;\n import io.ballerina.runtime.values.ArrayValue;\n import io.ballerina.runtime.values.ArrayValueImpl;\n-import io.ballerina.runtime.values.MappingInitialValueEntry;\n+import io.ballerina.runtime.values.MapValueImpl;\n import io.ballerina.runtime.values.TableValueImpl;\n import io.ballerina.runtime.values.TupleValueImpl;\n import io.ballerina.runtime.values.XMLSequence;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import static io.ballerina.runtime.api.PredefinedTypes.TYPE_ANYDATA;\n+import static io.ballerina.runtime.api.PredefinedTypes.TYPE_ERROR;\n+\n /**\n  * Common utility methods used for Ballerina expression syntax manipulation.\n  *\n  * @since 2.0.0\n  */\n public class BalStringUtils {\n+    private static final UnionType bUnionType = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_ERROR));\n+    private static boolean hasCycles = false;\n \n     /**\n      * Create an array from string literal.\n      *\n      * @param exprValue Ballerina expression syntax of the array\n      * @return array value\n      */\n-    public static Object parseArrayExpressionStringValue(String exprValue) {\n+    public static Object parseArrayExpressionStringValue(String exprValue, BLink parent) {\n         List<String> list = getElements(exprValue);\n-        Object[] arrayElements = new Object[list.size()];\n+        ArrayValueImpl arr = new ArrayValueImpl(new BArrayType(bUnionType));\n+        CycleUtils.Node node = new CycleUtils.Node(arr, parent);\n         Set<Type> typeSet = new HashSet<>();\n         for (int i = 0; i < list.size(); i++) {\n             String e = list.get(i);\n-            Object val = StringUtils.parseExpressionStringValue(e);\n+            Object val = StringUtils.parseExpressionStringValue(e, node);\n             Type type = TypeChecker.getType(val);\n             typeSet.add(type);\n-            arrayElements[i] = val;\n+            arr.add(i, val);\n+        }\n+        int size = arr.size();", "originalCommit": "fffb2d9abcf80ceed526cc9d3827ac78bf8d5f28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}