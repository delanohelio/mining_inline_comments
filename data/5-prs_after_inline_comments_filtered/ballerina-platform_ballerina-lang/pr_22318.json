{"pr_number": 22318, "pr_title": "Issue an error on stack and queue method calls on fixed-length lists", "pr_createdAt": "2020-03-30T12:20:09Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318", "timeline": [{"oid": "6c9e90c22600a6b393134a38fd0728dc7d8d3508", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c9e90c22600a6b393134a38fd0728dc7d8d3508", "message": "Issue error on push/pop call on fixed-length lists\n\nPush/Pop functions do not natively support annotation or a way to\ndeclare that they will change the length of the list. This is not\nallowed in fixed-length arrays.\n\n`push` and `pop` names are hardcoded and checked against invocations on\nfixed-length arrays and tuples without rest parameters to identify the\ninvalid calls on compile time.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-03-30T12:24:57Z", "type": "forcePushed"}, {"oid": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "message": "Add shift/unshift for modifier method list\n\nNow these method will give error when called on fixed-length lists\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-03-30T20:05:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzU3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401153571", "bodyText": "Unnecessary change?", "author": "MaryamZi", "createdAt": "2020-03-31T19:15:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -124,7 +124,6 @@ public static Types getInstance(CompilerContext context) {\n         if (types == null) {\n             types = new Types(context);\n         }\n-", "originalCommit": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NDM3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401354375", "bodyText": "Can we call this something like initModifierFunctions() instead?", "author": "MaryamZi", "createdAt": "2020-04-01T04:50:11Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -229,6 +231,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        init();\n+    }\n+\n+    private void init() {", "originalCommit": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NTc0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401355747", "bodyText": "Unused? Can we also make this private?", "author": "MaryamZi", "createdAt": "2020-04-01T04:55:54Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Push.java", "diffHunk": "@@ -43,6 +43,8 @@\n )\n public class Push {\n \n+    public static final String FUNCTION_SIGNATURE = \"push()\";", "originalCommit": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NTgwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401355807", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String FUNCTION_SIGNATURE = \"pop()\";\n          \n          \n            \n                private static final String FUNCTION_SIGNATURE = \"pop()\";", "author": "MaryamZi", "createdAt": "2020-04-01T04:56:11Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Pop.java", "diffHunk": "@@ -40,8 +40,10 @@\n )\n public class Pop {\n \n+    public static final String FUNCTION_SIGNATURE = \"pop()\";", "originalCommit": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NzkxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r401357913", "bodyText": "What about unions of arrays, tuples, and combinations of arrays and tuples?", "author": "MaryamZi", "createdAt": "2020-04-01T05:05:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1769,6 +1779,26 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        if (varRefType.tag == TypeTags.ARRAY) {", "originalCommit": "f2dc8b9a3197cbd7b8ca9b07e3bd17e70c6f3dc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f0da7f798e436d99f824ecedf9d992d8765d0749", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0da7f798e436d99f824ecedf9d992d8765d0749", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T16:23:35Z", "type": "forcePushed"}, {"oid": "8f9752b7f5b5bb6d3636100378d6752da55611a5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f9752b7f5b5bb6d3636100378d6752da55611a5", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T18:10:53Z", "type": "forcePushed"}, {"oid": "61e62b4399ba0f2bc1c54ea191e96e2ce58ed1ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61e62b4399ba0f2bc1c54ea191e96e2ce58ed1ab", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T19:04:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzMzk5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402333992", "bodyText": "Can we call these function something like isFixedLengthList?\nWe don't use the term sealed anymore.", "author": "MaryamZi", "createdAt": "2020-04-02T13:57:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {", "originalCommit": "a15e66fa25085007377745fbfd4977196bb90844", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNTE5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402335192", "bodyText": "We don't use streams due to potential performance impacts, we can use an ordinary foreach loop maybe.", "author": "MaryamZi", "createdAt": "2020-04-02T13:59:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));", "originalCommit": "a15e66fa25085007377745fbfd4977196bb90844", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNTc2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402335764", "bodyText": "We don't need separate functions for these right? These are just one line single condition checks.", "author": "MaryamZi", "createdAt": "2020-04-02T13:59:57Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));", "originalCommit": "a15e66fa25085007377745fbfd4977196bb90844", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzNjgyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402336822", "bodyText": "Shall we extract iExpr.name.getValue() out to a variable? We seem to be reusing it at L1747 (at times).", "author": "MaryamZi", "createdAt": "2020-04-02T14:01:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,44 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isPureSealed(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return isPureSealed((BArrayType) type);\n+            case TypeTags.TUPLE:\n+                return isPureSealed((BTupleType) type);\n+            case TypeTags.UNION:\n+                return isPureSealed((BUnionType) type);\n+        }\n+        return false;\n+    }\n+\n+    private boolean isPureSealed(BArrayType arrayType) {\n+        return (arrayType.state == BArrayState.CLOSED_SEALED);\n+    }\n+\n+    private boolean isPureSealed(BTupleType tupleType) {\n+        return (tupleType.restType == null);\n+    }\n+\n+    private boolean isPureSealed(BUnionType unionType) {\n+        return unionType.getMemberTypes().stream().allMatch(type -> isPureSealed(type));\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        if (!modifierFunctions.contains(iExpr.name.getValue())) {", "originalCommit": "a15e66fa25085007377745fbfd4977196bb90844", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1NjU3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402756570", "bodyText": "When we reach this point the state of inferred array types is always set as CLOSED_SEALED right? Or we'll have to check\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (((BArrayType) type).state == BArrayState.CLOSED_SEALED);\n          \n          \n            \n                            return (((BArrayType) type).state != BArrayState.UNSEALED);", "author": "MaryamZi", "createdAt": "2020-04-03T06:12:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1698,6 +1708,40 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state == BArrayState.CLOSED_SEALED);", "originalCommit": "d157249c7e44fa709b32e93629ddc88fbf04cb61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402765684", "bodyText": "Have a small doubt regarding shift() on a tuple, created a spec issue - ballerina-platform/ballerina-spec#474.", "author": "MaryamZi", "createdAt": "2020-04-03T06:39:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +229,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {\n+        this.modifierFunctions.add(\"push\");\n+        this.modifierFunctions.add(\"pop\");\n+        this.modifierFunctions.add(\"shift\");", "originalCommit": "d157249c7e44fa709b32e93629ddc88fbf04cb61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3ODA0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402778042", "bodyText": "I think that is just a extention of this. Spec says known to be fixed length we should error out. The example given we cannot properly define right ?", "author": "KRVPerera", "createdAt": "2020-04-03T07:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MjA4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r402972081", "bodyText": "I think we can improve this based on the spec discussion.\nCan you also check the runtime behaviour?\nUpdate: let's create an issue if there are issues in the runtime implementation.", "author": "MaryamZi", "createdAt": "2020-04-03T12:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyNDA5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403024093", "bodyText": "added case I :  by 714edb4", "author": "KRVPerera", "createdAt": "2020-04-03T13:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwMDIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403100225", "bodyText": "Improved for case I 714edb4.\nWill check run time behavior.", "author": "KRVPerera", "createdAt": "2020-04-03T15:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NDcyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403044729", "bodyText": "We could initialize this in a static block.", "author": "rdhananjaya", "createdAt": "2020-04-03T14:27:37Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -227,6 +233,14 @@ public TypeChecker(CompilerContext context) {\n         this.typeParamAnalyzer = TypeParamAnalyzer.getInstance(context);\n         this.anonymousModelHelper = BLangAnonymousModelHelper.getInstance(context);\n         this.semanticAnalyzer = SemanticAnalyzer.getInstance(context);\n+        initModifierFunctions();\n+    }\n+\n+    private void initModifierFunctions() {", "originalCommit": "714edb48df99b7d411f8100bd5df60c0b2e2b05b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1NjEzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403156136", "bodyText": "fixed by d9d1222", "author": "KRVPerera", "createdAt": "2020-04-03T17:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NDcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NTAzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403045036", "bodyText": "This could be a static variable", "author": "rdhananjaya", "createdAt": "2020-04-03T14:28:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -194,6 +198,8 @@\n     private BLangAnonymousModelHelper anonymousModelHelper;\n     private SemanticAnalyzer semanticAnalyzer;\n     private boolean nonErrorLoggingCheck = false;\n+    private Set<String> modifierFunctions = new HashSet<>();", "originalCommit": "714edb48df99b7d411f8100bd5df60c0b2e2b05b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1NjAwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r403156005", "bodyText": "fixed by d9d1222", "author": "KRVPerera", "createdAt": "2020-04-03T17:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0NTAzNg=="}], "type": "inlineReview"}, {"oid": "d9d1222ebd2f15e8eb8cc80333d36825d92b488a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9d1222ebd2f15e8eb8cc80333d36825d92b488a", "message": "Refactor TypeChecker modifier functions set\n\nFunction set will be changed to static and initialized in a static block\nin the TypeChecker.java\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-03T16:41:04Z", "type": "forcePushed"}, {"oid": "2d11d6d4aed88ee4dcc0d822a168ccd28dee6c11", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d11d6d4aed88ee4dcc0d822a168ccd28dee6c11", "message": "Resolve conflicts of compiler.properties\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-03T20:41:55Z", "type": "forcePushed"}, {"oid": "d9d1222ebd2f15e8eb8cc80333d36825d92b488a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9d1222ebd2f15e8eb8cc80333d36825d92b488a", "message": "Refactor TypeChecker modifier functions set\n\nFunction set will be changed to static and initialized in a static block\nin the TypeChecker.java\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-03T16:41:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODgyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r408588822", "bodyText": "Shall we follow a FUNCTION_NAME_XXX format instead?", "author": "MaryamZi", "createdAt": "2020-04-15T05:27:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -176,9 +176,14 @@\n  */\n public class TypeChecker extends BLangNodeVisitor {\n \n-    private static final CompilerContext.Key<TypeChecker> TYPE_CHECKER_KEY =\n-            new CompilerContext.Key<>();\n+    private static final CompilerContext.Key<TypeChecker> TYPE_CHECKER_KEY = new CompilerContext.Key<>();\n+    private static Set<String> modifierFunctions = new HashSet<>();\n+\n     private static final String TABLE_TNAME = \"table\";\n+    private static final String FUNCTION_PUSH_NAME = \"push\";\n+    private static final String FUNCTION_POP_NAME = \"pop\";\n+    private static final String FUNCTION_SHIFT_NAME = \"shift\";\n+    private static final String FUNCTION_UNSHIFT_NAME = \"unshift\";", "originalCommit": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzNDg4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r409434886", "bodyText": "Done\nad71378", "author": "KRVPerera", "createdAt": "2020-04-16T10:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTQ5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r408599492", "bodyText": "What about unions of tuples?\nThis should be an error for tuple unions which will always fail too?", "author": "MaryamZi", "createdAt": "2020-04-15T06:02:37Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1695,7 +1707,60 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION, iExpr.name.value);\n             resultType = symTable.semanticError;\n+            return;\n         }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.TUPLE) && hasDifferentTypeThanRest((BTupleType) varRefType) &&", "originalCommit": "b037cf2c3301b8e5d08faa7767aefd127e5b1ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzNDU4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r409434583", "bodyText": "Done\n2fe86c1", "author": "KRVPerera", "createdAt": "2020-04-16T10:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTQ5Mg=="}], "type": "inlineReview"}, {"oid": "2fe86c1ae95def6e356be4f14ba27b2d3a8301f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2fe86c1ae95def6e356be4f14ba27b2d3a8301f1", "message": "Add error for changing shape of fixed tuple unions", "committedDate": "2020-04-16T09:59:56Z", "type": "forcePushed"}, {"oid": "86be9102cd78bca1e8bead51e0395c9b9b3239bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86be9102cd78bca1e8bead51e0395c9b9b3239bc", "message": "Fix code style in TypeChecker.java", "committedDate": "2020-04-16T18:57:50Z", "type": "forcePushed"}, {"oid": "0433251a82a49da2ebef19951554b1b0b6f536c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0433251a82a49da2ebef19951554b1b0b6f536c0", "message": "Add error for changing shape of fixed tuple unions", "committedDate": "2020-04-17T07:02:46Z", "type": "forcePushed"}, {"oid": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e95bc3fbf88647bfc777e30df44d9b8b64abca2", "message": "Add error for changing shape of fixed tuple unions", "committedDate": "2020-04-17T19:53:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0MDQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r410640401", "bodyText": "We can return here right?", "author": "MaryamZi", "createdAt": "2020-04-18T05:35:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1710,7 +1722,80 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;", "originalCommit": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0ODIxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r410648212", "bodyText": "Shall we extract this tuple check logic to a function like isShiftOnIncompatibleTuples and handle both individual tuples and unions?\nThen we can do\nif (isShiftOnIncompatibleTuples(varRefType, invocationName)) {\n      dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n                 varRefType);\n      resultType = symTable.semanticError;\n}", "author": "MaryamZi", "createdAt": "2020-04-18T05:55:33Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1710,7 +1722,80 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.TUPLE) && hasDifferentTypeThanRest((BTupleType) varRefType) &&\n+                (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                       varRefType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.UNION) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            BUnionType unionVarRef = (BUnionType) varRefType;\n+            boolean allTuplesHasFixedShape = true;\n+            for (BType member : unionVarRef.getMemberTypes()) {\n+                if (member.tag != TypeTags.TUPLE) {\n+                    break;\n+                }\n+                if (!hasDifferentTypeThanRest((BTupleType) varRefType)) {\n+                    allTuplesHasFixedShape = false;\n+                    break;\n+                }\n+            }\n+            if (allTuplesHasFixedShape) {\n+                dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                           varRefType);\n+                resultType = symTable.semanticError;\n+            }\n+        }", "originalCommit": "9e95bc3fbf88647bfc777e30df44d9b8b64abca2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9e9f08590b770d14cff0845da915b13867bdfa01", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e9f08590b770d14cff0845da915b13867bdfa01", "message": "Issue error on push/pop call on fixed-length lists\n\nPush/Pop functions do not natively support annotation or a way to\ndeclare that they will change the length of the list. This is not\nallowed in fixed-length arrays.\n\n`push` and `pop` names are hardcoded and checked against invocations on\nfixed-length arrays and tuples without rest parameters to identify the\ninvalid calls on compile time.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "ef87f0db2c0a80a4317017001306abb3f8c6c95e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef87f0db2c0a80a4317017001306abb3f8c6c95e", "message": "Add shift/unshift for modifier method list\n\nNow these method will give error when called on fixed-length lists\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "10706424670875f22b3905952eb4bfb4dedcfd78", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10706424670875f22b3905952eb4bfb4dedcfd78", "message": "Revert unnecessary changes", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "8d0fd607d645e99eb1fa76411f10a5097d74a2e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d0fd607d645e99eb1fa76411f10a5097d74a2e3", "message": "Make public function signature field private\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "5668263f5a4a00ccfc7338cd80d38b05c14fde62", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5668263f5a4a00ccfc7338cd80d38b05c14fde62", "message": "Change error \"ILLEGAL_FUNCTION_CHANGE_LIST_SIZE\"\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "3da3adf88714298dba98ec4bdcdf9c66b7d9c423", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3da3adf88714298dba98ec4bdcdf9c66b7d9c423", "message": "Add inferred fixed-length array tests\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "2989572a46d30933c85b80312519a6f40f421621", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2989572a46d30933c85b80312519a6f40f421621", "message": "Add union type handling logic\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "4fb08e775dc0bbd858aad23020b2f37c5a2914d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fb08e775dc0bbd858aad23020b2f37c5a2914d3", "message": "Fix code style\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "c6dc5e5fbc026ed11a1a970bc2bd55273833a6fb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6dc5e5fbc026ed11a1a970bc2bd55273833a6fb", "message": "Update arraylib_test_negative.bal add space around\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "6ce1c663c09e85bf2f275f222cfc9d9251f56bc6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ce1c663c09e85bf2f275f222cfc9d9251f56bc6", "message": "Update arraylib_test_negative.bal add space around |\r\n\r\n[ci skip]\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-04-20T10:11:30Z", "type": "commit"}, {"oid": "579d3f7587232152ba237072848e21fd3a2e9caf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/579d3f7587232152ba237072848e21fd3a2e9caf", "message": "Add code review suggestions\n\nReplace java stream with for loops. Rename isPureSealedType function to\nisFixedLengthList function.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "04c966c4ed266a25c2da3b5fa9702ddfb2dc48ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04c966c4ed266a25c2da3b5fa9702ddfb2dc48ab", "message": "Update compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\r\n\r\nChange check for CLOSED_SEALED to (!= UNSEALED)\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "c1aeea819bf20e7eb208ef9f4fa92737f9a2f95b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1aeea819bf20e7eb208ef9f4fa92737f9a2f95b", "message": "Add license header for arraylib_test_negative.bal\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "04c40dae3e554d44ecb809363e6e46f1d2db0d85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04c40dae3e554d44ecb809363e6e46f1d2db0d85", "message": "Fix test case line numbers after license header\n[ci skip]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "ab4ed601a92a823def5321c790e61e3a07784e93", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab4ed601a92a823def5321c790e61e3a07784e93", "message": "Add compiler time checks for `shift` call on tuple\n\nCheck if the shift operation change the inherent shape of the tuple. If\nthe shape is changed it will definitely give a panic at run time. Some\nof these cases we can capture at compile time.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "c64c4a0385aff8354ae5fb1e9bc3b6851bdda3cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c64c4a0385aff8354ae5fb1e9bc3b6851bdda3cf", "message": "Refactor TypeChecker modifier functions set\n\nFunction set will be changed to static and initialized in a static block\nin the TypeChecker.java\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "134e3668df4cc74a3d89a4f68b1b2cc70732e607", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/134e3668df4cc74a3d89a4f68b1b2cc70732e607", "message": "Remove unused error message\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "7e80ccc1c265e5de3a0c7c3bd8bbdfb94ac821c7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e80ccc1c265e5de3a0c7c3bd8bbdfb94ac821c7", "message": "Change static constants format -> FUNCTION_NAME_*", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "620f9397e61a93cbe5727a40ea7e507e9ce54c45", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/620f9397e61a93cbe5727a40ea7e507e9ce54c45", "message": "Change message : illegal.function.change.tuple.shape\r\n\r\n\"cannot violate inherent type\"\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "e20e73d75bd9f5b596b4c88bf0ba999d66d3060a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e20e73d75bd9f5b596b4c88bf0ba999d66d3060a", "message": "Add error for changing shape of fixed tuple unions", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "58fa0c5dc5f71d0ea7b2834ce52000faf4489f2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58fa0c5dc5f71d0ea7b2834ce52000faf4489f2b", "message": "Change error message\r\n\r\nChange cannot violate inherent type error message\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "4da63e51e58ee96e914b5dc4cff0289d196f8f0f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4da63e51e58ee96e914b5dc4cff0289d196f8f0f", "message": "Fix code quality\n\nAdded return statements in `checkIllegalStorageSizeChangeMethodCall`\nwhen the logic have decided that the expression has semantic errors", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "3ade9d24a2368c9d2e49c8e4ac481b428f278e70", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ade9d24a2368c9d2e49c8e4ac481b428f278e70", "message": "Refactor checkIllegalStorageSizeChangeMethodCall\n\nExtract a function to check 'shift' call on tuples. Some tuples has a\nfixed shape. It is illegal call shift which will change their shape.", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "3effed939914d320cbde65fa49bee7b554307dd1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3effed939914d320cbde65fa49bee7b554307dd1", "message": "Fix test cases according to new error message", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "da19a8303c441c14d3a3bcbfdf30a169b75ae649", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da19a8303c441c14d3a3bcbfdf30a169b75ae649", "message": "Fix bad logic in isShiftOnIncompatibleTuples", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "e11389a44fff652021235ea9f10b38c64ba5ed71", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e11389a44fff652021235ea9f10b38c64ba5ed71", "message": "Add test cases for `shift` call on unions of lists", "committedDate": "2020-04-20T10:11:31Z", "type": "commit"}, {"oid": "e11389a44fff652021235ea9f10b38c64ba5ed71", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e11389a44fff652021235ea9f10b38c64ba5ed71", "message": "Add test cases for `shift` call on unions of lists", "committedDate": "2020-04-20T10:11:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTE3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22318#discussion_r411511179", "bodyText": "When we are fixing #22771, I think we should refactor checkIllegalStorageSizeChangeMethodCall and this method a bit.\nAt L1873 if the invocationName is shift we can call something like\nprivate boolean isShiftValidOnLists(BType varRefType) {\n     int tag = varRefType.tag;\n\n     if (tag == TypeTags.ARRAY) {\n         return !isFixedLengthList(varRefType);\n     }\n\n     if (tag == TypeTags.TUPLE) {\n         return !hasDifferentTypeThanRest((BTupleType) member);\n     }\n\n     // Union type here.\n    BUnionType unionVarRef = (BUnionType) varRefType;\n    for (BType member : unionVarRef.getMemberTypes()) {\n        if (!isShiftValidOnLists(member)) {\n            return false;\n        }\n    }\n    return true;\n}", "author": "MaryamZi", "createdAt": "2020-04-20T16:18:15Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1821,7 +1833,86 @@ private void checkInLangLib(BLangInvocation iExpr, BType varRefType) {\n         if (!langLibMethodExists) {\n             dlog.error(iExpr.name.pos, DiagnosticCode.UNDEFINED_FUNCTION_IN_TYPE, iExpr.name.value, iExpr.expr.type);\n             resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        checkIllegalStorageSizeChangeMethodCall(iExpr, varRefType);\n+    }\n+\n+    private boolean isFixedLengthList(BType type) {\n+        switch(type.tag) {\n+            case TypeTags.ARRAY:\n+                return (((BArrayType) type).state != BArrayState.UNSEALED);\n+            case TypeTags.TUPLE:\n+                return (((BTupleType) type).restType == null);\n+            case TypeTags.UNION:\n+                BUnionType unionType = (BUnionType) type;\n+                for (BType member : unionType.getMemberTypes()) {\n+                    if (!isFixedLengthList(member)) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private void checkIllegalStorageSizeChangeMethodCall(BLangInvocation iExpr, BType varRefType) {\n+        String invocationName = iExpr.name.getValue();\n+        if (!modifierFunctions.contains(invocationName)) {\n+            return;\n+        }\n+\n+        if (isFixedLengthList(varRefType)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_LIST_SIZE, invocationName, varRefType);\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+\n+        if (isShiftOnIncompatibleTuples(varRefType, invocationName)) {\n+            dlog.error(iExpr.name.pos, DiagnosticCode.ILLEGAL_FUNCTION_CHANGE_TUPLE_SHAPE, invocationName,\n+                       varRefType);\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    private boolean isShiftOnIncompatibleTuples(BType varRefType, String invocationName) {\n+        if ((varRefType.tag == TypeTags.TUPLE) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0) &&\n+                hasDifferentTypeThanRest((BTupleType) varRefType)) {\n+            return true;\n+        }\n+\n+        if ((varRefType.tag == TypeTags.UNION) && (invocationName.compareTo(FUNCTION_NAME_SHIFT) == 0)) {\n+            BUnionType unionVarRef = (BUnionType) varRefType;\n+            boolean allMemberAreFixedShapeTuples = true;\n+            for (BType member : unionVarRef.getMemberTypes()) {\n+                if (member.tag != TypeTags.TUPLE) {", "originalCommit": "e11389a44fff652021235ea9f10b38c64ba5ed71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}