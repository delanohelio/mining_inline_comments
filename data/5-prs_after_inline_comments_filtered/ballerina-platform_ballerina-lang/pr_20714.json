{"pr_number": 20714, "pr_title": "Fix the spec deviation in Unicode", "pr_createdAt": "2020-01-23T10:52:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MzAzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r370473030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class UniCodeTest {\n          \n          \n            \n            public class UnicodeTest {\n          \n      \n    \n    \n  \n\nShall we fix wherever applicable?", "author": "MaryamZi", "createdAt": "2020-01-24T04:51:11Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/string/UniCodeTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.test.types.string;\n+\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Negative test class to check the Unicode patterns.\n+ */\n+public class UniCodeTest {", "originalCommit": "b76906d713684ecad0b9d7ba12abb7c8fe984197", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4OTI0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r370489246", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-01-24T06:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3MzAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3OTEzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r370479139", "bodyText": "do we need [{] and [}] instead we should be able to use \\\\{ and \\\\}", "author": "rdhananjaya", "createdAt": "2020-01-24T05:31:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/Constants.java", "diffHunk": "@@ -40,4 +40,5 @@ private Constants() {\n \n     public static final int INIT_METHOD_SPLIT_SIZE = 50;\n \n+    public static final String UNICODE_REGEX = \"\\\\\\\\u[{]([a-fA-F0-9]*)[}]\";", "originalCommit": "b76906d713684ecad0b9d7ba12abb7c8fe984197", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3OTczOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r370479738", "bodyText": "And please check what happens if an empty string is matched here and too large number matches here.\nI think it will be a number format exception when parsing the int.\nShall we therefore use something like \\\\\\\\u\\\\{([a-fA-F0-9]{1,6})\\\\}", "author": "rdhananjaya", "createdAt": "2020-01-24T05:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3OTEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4OTIxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r370489218", "bodyText": "do we need [{] and [}] instead we should be able to use \\\\{ and \\\\}\n\n+1", "author": "KavinduZoysa", "createdAt": "2020-01-24T06:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3OTEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MDY2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r371740666", "bodyText": "And please check what happens if an empty string is matched here and too large number matches here.\nI think it will be a number format exception when parsing the int.\nShall we therefore use something like \\\\\\\\u\\\\{([a-fA-F0-9]{1,6})\\\\}\n\nAccording to the spec, there should be at least one hex value. So if the user enters an empty string, parse throws an error. Also, the Unicodes which are out of range(greater than 0x10FFFF) are handled here, because we need to throw a compile error.", "author": "KavinduZoysa", "createdAt": "2020-01-28T11:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3OTEzOQ=="}], "type": "inlineReview"}, {"oid": "528c5ccfb28c2d2ee4c41c1be7fd59cf27f49af0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/528c5ccfb28c2d2ee4c41c1be7fd59cf27f49af0", "message": "Change the error message", "committedDate": "2020-01-24T06:09:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwNDkxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r370504917", "bodyText": "Instead of discarding the previous match data and starting from the beginning we can start from the previous matchers end index.\nint idx = 0;\nwhile (matcher.find(idx)) {\n    ....\n    text = matcher.replaceFirst(\"\\\\\\\\u\" + hexStringVal);\n    idx = matcher.end() - 2;  // 2 assuming we remove two characters only by the replace\n    matcher = pattern.matcher(text);\n}", "author": "KRVPerera", "createdAt": "2020-01-24T07:44:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -2648,6 +2651,22 @@ public void exitSimpleLiteral(BallerinaParser.SimpleLiteralContext ctx) {\n         } else if ((node = ctx.QuotedStringLiteral()) != null) {\n             String text = node.getText();\n             text = text.substring(1, text.length() - 1);\n+            String originalText = text; // to log the errors\n+            Pattern pattern = Pattern.compile(Constants.UNICODE_REGEX);\n+            Matcher matcher = pattern.matcher(text);\n+            while (matcher.find()) {\n+                String hexStringVal = matcher.group(1);\n+                int hexDecimalVal = Integer.parseInt(hexStringVal, 16);\n+                if ((hexDecimalVal >= 0xD800 && hexDecimalVal <= 0xDFFF) || hexDecimalVal > 0x10FFFF) {\n+                    String hexStringWithBraces = matcher.group(0);\n+                    int offset = originalText.indexOf(hexStringWithBraces) + 1;\n+                    dlog.error(new DiagnosticPos(diagnosticSrc, pos.sLine, pos.eLine, pos.sCol + offset,\n+                                    pos.sCol + offset + hexStringWithBraces.length()),\n+                            DiagnosticCode.INVALID_UNICODE, hexStringWithBraces);\n+                }\n+                text = matcher.replaceFirst(\"\\\\\\\\u\" + hexStringVal);\n+                matcher = pattern.matcher(text);\n+            }", "originalCommit": "2a9f024b68c862452609ede02c27bf75d9a95096", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczODM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r371738395", "bodyText": "+1 and done", "author": "KavinduZoysa", "createdAt": "2020-01-28T11:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwNDkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MDQwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r372170408", "bodyText": "Since this will be called more than once (in a general scenario when compiling a Ballerina program), I think it is better to compile this Regex once (declare as a top level variable) to reduce the overhead. WDYT?", "author": "Shan1024", "createdAt": "2020-01-29T03:12:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -2648,6 +2651,24 @@ public void exitSimpleLiteral(BallerinaParser.SimpleLiteralContext ctx) {\n         } else if ((node = ctx.QuotedStringLiteral()) != null) {\n             String text = node.getText();\n             text = text.substring(1, text.length() - 1);\n+            String originalText = text; // to log the errors\n+            Pattern pattern = Pattern.compile(Constants.UNICODE_REGEX);", "originalCommit": "50a59fbcca28b86c9fb0404840ee4edb698307b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NTQ3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r373845474", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-02-02T13:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MDQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MjIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r372172213", "bodyText": "Lexer rule is defined as HexDigit+. But here, the regex is defined as [a-fA-F0-9]*. I think this can be changed to [a-fA-F0-9]+. WDYT?", "author": "Shan1024", "createdAt": "2020-01-29T03:22:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/Constants.java", "diffHunk": "@@ -40,4 +40,5 @@ private Constants() {\n \n     public static final int INIT_METHOD_SPLIT_SIZE = 50;\n \n+    public static final String UNICODE_REGEX = \"\\\\\\\\u\\\\{([a-fA-F0-9]*)\\\\}\";", "originalCommit": "50a59fbcca28b86c9fb0404840ee4edb698307b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NTQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r373845478", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-02-02T13:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MjIxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MjY3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r372172670", "bodyText": "I think it is better to merge these two lines in this PR as well -\nString text = node.getText().substring(1, text.length() - 1);", "author": "Shan1024", "createdAt": "2020-01-29T03:24:39Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -2648,6 +2651,24 @@ public void exitSimpleLiteral(BallerinaParser.SimpleLiteralContext ctx) {\n         } else if ((node = ctx.QuotedStringLiteral()) != null) {\n             String text = node.getText();\n             text = text.substring(1, text.length() - 1);", "originalCommit": "50a59fbcca28b86c9fb0404840ee4edb698307b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NTQ5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r373845493", "bodyText": "We cannot do that because we need to get text.length()", "author": "KavinduZoysa", "createdAt": "2020-02-02T13:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MjY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4MjA1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r372182052", "bodyText": "Better to move these values to constants.", "author": "hasithaa", "createdAt": "2020-01-29T04:21:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -2648,6 +2651,24 @@ public void exitSimpleLiteral(BallerinaParser.SimpleLiteralContext ctx) {\n         } else if ((node = ctx.QuotedStringLiteral()) != null) {\n             String text = node.getText();\n             text = text.substring(1, text.length() - 1);\n+            String originalText = text; // to log the errors\n+            Pattern pattern = Pattern.compile(Constants.UNICODE_REGEX);\n+            Matcher matcher = pattern.matcher(text);\n+            int position = 0;\n+            while (matcher.find(position)) {\n+                String hexStringVal = matcher.group(1);\n+                int hexDecimalVal = Integer.parseInt(hexStringVal, 16);\n+                if ((hexDecimalVal >= 0xD800 && hexDecimalVal <= 0xDFFF) || hexDecimalVal > 0x10FFFF) {", "originalCommit": "50a59fbcca28b86c9fb0404840ee4edb698307b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NTQ5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r373845496", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-02-02T13:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4MjA1Mg=="}], "type": "inlineReview"}, {"oid": "d62c58afd9ab8974fa2eccb1ca7a5bd4c43b6cd7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d62c58afd9ab8974fa2eccb1ca7a5bd4c43b6cd7", "message": "resolve conflicts", "committedDate": "2020-02-05T10:07:05Z", "type": "forcePushed"}, {"oid": "36d78788a8e7af78cefecb0918052020b7bde60d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36d78788a8e7af78cefecb0918052020b7bde60d", "message": "Add the curly braces to unicode", "committedDate": "2020-02-05T11:43:48Z", "type": "commit"}, {"oid": "34285728bbb1f1f5c7946e39c1d14717dea9ca38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34285728bbb1f1f5c7946e39c1d14717dea9ca38", "message": "Handle errors", "committedDate": "2020-02-05T11:43:48Z", "type": "commit"}, {"oid": "a6081dd93291f2e2a35ffb98d9916ecb3eb13c4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6081dd93291f2e2a35ffb98d9916ecb3eb13c4a", "message": "Add the test cases", "committedDate": "2020-02-05T11:43:48Z", "type": "commit"}, {"oid": "0ac4d170f26c6c4c92b30bc3aaba45c27f8a04ca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ac4d170f26c6c4c92b30bc3aaba45c27f8a04ca", "message": "Add the doc comments", "committedDate": "2020-02-05T11:43:48Z", "type": "commit"}, {"oid": "c5bb17903bf17bb329bbd081cec77931df43ed02", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5bb17903bf17bb329bbd081cec77931df43ed02", "message": "Change the error message", "committedDate": "2020-02-05T11:43:48Z", "type": "commit"}, {"oid": "1c723e6a78620088a3a1a7fc95e2a42aff9b3d2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c723e6a78620088a3a1a7fc95e2a42aff9b3d2b", "message": "Change the REGEX", "committedDate": "2020-02-05T11:43:48Z", "type": "commit"}, {"oid": "75c9e64c95d08ea8b7e1085fd31eb8610a676bd9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/75c9e64c95d08ea8b7e1085fd31eb8610a676bd9", "message": "Change the way of matching", "committedDate": "2020-02-05T11:43:48Z", "type": "commit"}, {"oid": "25198bc700b354b5b9c65975f09208d1c5e7fd9a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25198bc700b354b5b9c65975f09208d1c5e7fd9a", "message": "Fixed the suggested changes", "committedDate": "2020-02-05T11:43:48Z", "type": "commit"}, {"oid": "fd1c7b86f176474685296fafdae195e8836cd7ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd1c7b86f176474685296fafdae195e8836cd7ea", "message": "resolve conflicts", "committedDate": "2020-02-05T11:57:19Z", "type": "commit"}, {"oid": "fd1c7b86f176474685296fafdae195e8836cd7ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd1c7b86f176474685296fafdae195e8836cd7ea", "message": "resolve conflicts", "committedDate": "2020-02-05T11:57:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI1NjI2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r376256269", "bodyText": "Shall we generate the parser from compiler/ballerina-lang/src/main/resources/grammar/ directory\nNavigate to grammar directory:\njava -jar ~/Downloads/antlr-4.5.3-complete.jar *.g4 -package org.wso2.ballerinalang.compiler.parser.antlr4 -o ../../java/org/wso2/ballerinalang/compiler/parser/antlr4/", "author": "rdhananjaya", "createdAt": "2020-02-07T07:59:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaLexer.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaLexer.g4 by ANTLR 4.5.3\n+// Generated from /home/kavindu/WSO2-GIT/test/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaLexer.g4 by ANTLR 4.5.3", "originalCommit": "fd1c7b86f176474685296fafdae195e8836cd7ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNDQwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r376304403", "bodyText": "This will get fixed, Once I combine All PRs. But it is a good practice to generate parser as @rdhananjaya mentioned.", "author": "hasithaa", "createdAt": "2020-02-07T09:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI1NjI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNzI1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20714#discussion_r376307259", "bodyText": "ACK.", "author": "KavinduZoysa", "createdAt": "2020-02-07T10:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI1NjI2OQ=="}], "type": "inlineReview"}]}