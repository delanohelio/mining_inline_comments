{"pr_number": 22268, "pr_title": "Migrate types unit tests for BString", "pr_createdAt": "2020-03-27T10:13:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268", "timeline": [{"oid": "b13272f97fc4630a5cf5275ac6dfa51526a4f1e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b13272f97fc4630a5cf5275ac6dfa51526a4f1e9", "message": "Migrate bytedata type unit tests for BString", "committedDate": "2020-03-30T07:44:06Z", "type": "forcePushed"}, {"oid": "2ba3dad298dc82d27ab1c56f1c3277b02732e2ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ba3dad298dc82d27ab1c56f1c3277b02732e2ef", "message": "Migrate bytedata type unit tests for BString", "committedDate": "2020-03-30T07:55:43Z", "type": "forcePushed"}, {"oid": "23a026831eb71ad340f3c93b3a2dab02ab6c47cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23a026831eb71ad340f3c93b3a2dab02ab6c47cb", "message": "Migrate bytedata type unit tests for BString", "committedDate": "2020-03-30T11:54:35Z", "type": "forcePushed"}, {"oid": "ec6555530ddb377921f8db9aab54d9b7fa2812cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec6555530ddb377921f8db9aab54d9b7fa2812cb", "message": "Migrate bytedata type unit tests for BString", "committedDate": "2020-03-30T12:53:26Z", "type": "forcePushed"}, {"oid": "21a607ce518959d44ef5962e2f08632ca44048bd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21a607ce518959d44ef5962e2f08632ca44048bd", "message": "Migrate constant type unit tests for BString", "committedDate": "2020-03-31T11:31:48Z", "type": "forcePushed"}, {"oid": "d23f5c041399893565a5f1723a2950264aa47cf8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d23f5c041399893565a5f1723a2950264aa47cf8", "message": "Migrate decimal type unit tests for BString", "committedDate": "2020-03-31T12:57:59Z", "type": "forcePushed"}, {"oid": "6102fa5980be711116f72fa0b823dd9f51d3a480", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6102fa5980be711116f72fa0b823dd9f51d3a480", "message": "Update tests for table removal change", "committedDate": "2020-04-01T08:11:23Z", "type": "forcePushed"}, {"oid": "6abceb73758e9b1c83707f582721226086850691", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6abceb73758e9b1c83707f582721226086850691", "message": "Migrate finite types tests for BString", "committedDate": "2020-04-01T08:39:04Z", "type": "forcePushed"}, {"oid": "af29da5dc4e3df159b536d126fffdbe445074d3e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af29da5dc4e3df159b536d126fffdbe445074d3e", "message": "Migrate json, integer, handle types tests for BString", "committedDate": "2020-04-02T09:38:59Z", "type": "forcePushed"}, {"oid": "820c3abd30efa9e54d4d512315d5afad1438f89c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/820c3abd30efa9e54d4d512315d5afad1438f89c", "message": "Migrate map type tests for BString", "committedDate": "2020-04-03T14:03:21Z", "type": "forcePushed"}, {"oid": "621580522feefcaacfcc159e47be52739a1eaade", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/621580522feefcaacfcc159e47be52739a1eaade", "message": "Migrate tuple, typedesc, union and var type tests for BString", "committedDate": "2020-04-06T10:52:44Z", "type": "forcePushed"}, {"oid": "bc14140fc5423f7e760f6bff238c840859df192d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc14140fc5423f7e760f6bff238c840859df192d", "message": "Migrate tuple, typedesc, union and var type tests for BString", "committedDate": "2020-04-06T12:07:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MTkyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405581926", "bodyText": "inverse if condition here", "author": "Kishanthan", "createdAt": "2020-04-08T14:47:34Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/AnnotationUtils.java", "diffHunk": "@@ -62,11 +63,40 @@ public static void processAnnotations(MapValue globalAnnotMap, BType bType) {\n         }\n     }\n \n+    /**\n+     * Method to retrieve annotations of the type from the global annotation map and set it to the type.\n+     *\n+     * @param globalAnnotMap The global annotation map\n+     * @param bType          The type for which annotations need to be set\n+     */\n+    public static void processAnnotations_bstring(MapValue globalAnnotMap, BType bType) {\n+        if (!(bType instanceof AnnotatableType)) {\n+            return;\n+        }\n+\n+        AnnotatableType type = (AnnotatableType) bType;\n+        BString annotationKey = StringUtils.fromString(type.getAnnotationKey());\n+        if (globalAnnotMap.containsKey(annotationKey)) {\n+            type.setAnnotations_bstring((MapValue<BString, Object>) globalAnnotMap.get(annotationKey));\n+        }\n+\n+        if (type.getTag() == TypeTags.OBJECT_TYPE_TAG) {", "originalCommit": "bc14140fc5423f7e760f6bff238c840859df192d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzMzMyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405633321", "bodyText": "What do you mean by inverse? Am I to use != check?\nThis is a copy of the previous function to make it work with bstring", "author": "riyafa", "createdAt": "2020-04-08T15:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MTkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NzQ5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405957493", "bodyText": "Can we write like the below ? Will it be more readable with less indentation?\nif (type.getTag() != TypeTags.OBJECT_TYPE_TAG) { \n    return;\n}\n\nBObjectType objectType = (BObjectType) type;\nfor (AttachedFunction attachedFunction : objectType.getAttachedFunctions()) {\n    annotationKey = StringUtils.fromString(attachedFunction.getAnnotationKey());\n    if (!globalAnnotMap.containsKey(annotationKey)) {\n        continue;\n    }\n    attachedFunction.setAnnotations_bstring((MapValue<BString, Object>)\n            globalAnnotMap.get(annotationKey));\n    }\n}", "author": "Kishanthan", "createdAt": "2020-04-09T05:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MTkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MjM2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405582365", "bodyText": "inverse if condition here", "author": "Kishanthan", "createdAt": "2020-04-08T14:48:07Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeConverter.java", "diffHunk": "@@ -262,6 +331,57 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean isConvertibleToRecordType_bstring(Object sourceValue, BRecordType targetType,\n+                                                             List<TypeValuePair> unresolvedValues) {\n+        if (!(sourceValue instanceof MapValueImpl)) {\n+            return false;\n+        }\n+\n+        TypeValuePair typeValuePair = new TypeValuePair(sourceValue, targetType);\n+        if (unresolvedValues.contains(typeValuePair)) {\n+            return true;\n+        }\n+        unresolvedValues.add(typeValuePair);\n+\n+        Map<String, BType> targetFieldTypes = new HashMap<>();\n+        BType restFieldType = targetType.restFieldType;\n+\n+        for (BField field : targetType.getFields().values()) {\n+            targetFieldTypes.put(field.getFieldName(), field.type);\n+        }\n+\n+        MapValueImpl sourceMapValueImpl = (MapValueImpl) sourceValue;\n+        for (Map.Entry targetTypeEntry : targetFieldTypes.entrySet()) {\n+            String fieldName = targetTypeEntry.getKey().toString();\n+\n+            if (!sourceMapValueImpl.containsKey(StringUtils.fromString(fieldName))) {", "originalCommit": "bc14140fc5423f7e760f6bff238c840859df192d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzODIwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405638203", "bodyText": "I inverted the condition, but this is also a copy of an existing function for bstring changes", "author": "riyafa", "createdAt": "2020-04-08T16:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MjM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1ODE2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405958160", "bodyText": "ack", "author": "Kishanthan", "createdAt": "2020-04-09T05:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MjM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MjgxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405582812", "bodyText": "these two conditions can be merged", "author": "Kishanthan", "createdAt": "2020-04-08T14:48:45Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeConverter.java", "diffHunk": "@@ -262,6 +331,57 @@ static boolean isConvertibleToFloatingPointTypes(Object value) {\n         return convertibleTypes;\n     }\n \n+    private static boolean isConvertibleToRecordType_bstring(Object sourceValue, BRecordType targetType,\n+                                                             List<TypeValuePair> unresolvedValues) {\n+        if (!(sourceValue instanceof MapValueImpl)) {\n+            return false;\n+        }\n+\n+        TypeValuePair typeValuePair = new TypeValuePair(sourceValue, targetType);\n+        if (unresolvedValues.contains(typeValuePair)) {\n+            return true;\n+        }\n+        unresolvedValues.add(typeValuePair);\n+\n+        Map<String, BType> targetFieldTypes = new HashMap<>();\n+        BType restFieldType = targetType.restFieldType;\n+\n+        for (BField field : targetType.getFields().values()) {\n+            targetFieldTypes.put(field.getFieldName(), field.type);\n+        }\n+\n+        MapValueImpl sourceMapValueImpl = (MapValueImpl) sourceValue;\n+        for (Map.Entry targetTypeEntry : targetFieldTypes.entrySet()) {\n+            String fieldName = targetTypeEntry.getKey().toString();\n+\n+            if (!sourceMapValueImpl.containsKey(StringUtils.fromString(fieldName))) {\n+                BField targetField = targetType.getFields().get(fieldName);\n+                if (Flags.isFlagOn(targetField.flags, Flags.REQUIRED)) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        for (Object object : sourceMapValueImpl.entrySet()) {\n+            Map.Entry valueEntry = (Map.Entry) object;\n+            String fieldName = valueEntry.getKey().toString();\n+\n+            if (targetFieldTypes.containsKey(fieldName)) {\n+                if (getConvertibleTypes(valueEntry.getValue(), targetFieldTypes.get(fieldName),\n+                                        unresolvedValues).size() != 1) {\n+                    return false;\n+                }\n+            } else if (!targetType.sealed) {\n+                if (getConvertibleTypes(valueEntry.getValue(), restFieldType, unresolvedValues).size() != 1) {", "originalCommit": "bc14140fc5423f7e760f6bff238c840859df192d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNjQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405636488", "bodyText": "I don't think they can be merged because of the else statement for\nif (!targetType.sealed) {\nNote this is also a copy of the previous existing function for bstring changes", "author": "riyafa", "createdAt": "2020-04-08T16:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MjgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NzcxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22268#discussion_r405957710", "bodyText": "ack", "author": "Kishanthan", "createdAt": "2020-04-09T05:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4MjgxMg=="}], "type": "inlineReview"}, {"oid": "cda5f04ef10736fd519f20d45387335ff2be0c0e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cda5f04ef10736fd519f20d45387335ff2be0c0e", "message": "Migrate annotation to execution tests", "committedDate": "2020-04-08T15:11:19Z", "type": "forcePushed"}, {"oid": "b82297a14d25b08d3cab9a9210dbdca536289696", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b82297a14d25b08d3cab9a9210dbdca536289696", "message": "Migrate annotation to execution tests", "committedDate": "2020-04-08T16:02:49Z", "type": "forcePushed"}, {"oid": "2db5df9e4caf2c43d699082e505ecb68c4e43573", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2db5df9e4caf2c43d699082e505ecb68c4e43573", "message": "Migrate anydata type unit tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "e1db1741b2134aa510a73ef435283fa18ebd056e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e1db1741b2134aa510a73ef435283fa18ebd056e", "message": "Migrate bytedata type unit tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "49216d989bc2a2028554e3bf8b7f9d32bee9aac5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49216d989bc2a2028554e3bf8b7f9d32bee9aac5", "message": "Migrate constant type unit tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "ce45e145294f218ca49cf547f470497e55a5a4bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce45e145294f218ca49cf547f470497e55a5a4bb", "message": "Migrate decimal type unit tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "8ec68a24a3f0673d045a197b29a3f358a131a5ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ec68a24a3f0673d045a197b29a3f358a131a5ee", "message": "Update tests for table removal change", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "2d01298d1c626349b9102da706d171c40a45514e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d01298d1c626349b9102da706d171c40a45514e", "message": "Migrate error type unit tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "f842bf07c48c70ee8c06c47f972a28ccee49dd27", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f842bf07c48c70ee8c06c47f972a28ccee49dd27", "message": "Migrate final types tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "23cc97f8d235df1ba8140ce6e6838a721a10da85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23cc97f8d235df1ba8140ce6e6838a721a10da85", "message": "Migrate finite types tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "5f3d84ce130467ded32ff9b046c6b3f7ff3ffabc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f3d84ce130467ded32ff9b046c6b3f7ff3ffabc", "message": "Migrate float types tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "cbc59288f9bbbac3da462c8e7eede786f961675b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbc59288f9bbbac3da462c8e7eede786f961675b", "message": "Migrate json, integer, handle types tests for BString", "committedDate": "2020-04-10T06:36:38Z", "type": "commit"}, {"oid": "cd890424cc8dba3b17585a036909294c66fe0b9e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd890424cc8dba3b17585a036909294c66fe0b9e", "message": "Migrate map type tests for BString", "committedDate": "2020-04-10T06:36:39Z", "type": "commit"}, {"oid": "5032e426e849d6cb13a7efa8adb172efc0ccb4e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5032e426e849d6cb13a7efa8adb172efc0ccb4e0", "message": "Migrate tuple, typedesc, union and var type tests for BString", "committedDate": "2020-04-10T06:36:39Z", "type": "commit"}, {"oid": "3007165da7f0c2cb8a2da8c8cf83817d5db6daa8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3007165da7f0c2cb8a2da8c8cf83817d5db6daa8", "message": "Migrate annotation to execution tests", "committedDate": "2020-04-10T06:36:39Z", "type": "commit"}, {"oid": "e8ad87cc9c315cd9892905ecd5eacf49018efb4c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8ad87cc9c315cd9892905ecd5eacf49018efb4c", "message": "Migrate most of the expressions tests\n\nMigrate the tests excluding the stdlib tests.", "committedDate": "2020-04-10T15:55:42Z", "type": "commit"}, {"oid": "e8ad87cc9c315cd9892905ecd5eacf49018efb4c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8ad87cc9c315cd9892905ecd5eacf49018efb4c", "message": "Migrate most of the expressions tests\n\nMigrate the tests excluding the stdlib tests.", "committedDate": "2020-04-10T15:55:42Z", "type": "forcePushed"}]}