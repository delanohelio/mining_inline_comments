{"pr_number": 1853, "pr_title": "Replace our polygon code with the JTS implementation", "pr_createdAt": "2020-01-17T13:34:01Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/1853", "timeline": [{"oid": "0478dc268b344141b8fd9acdc14178fc24351015", "url": "https://github.com/graphhopper/graphhopper/commit/0478dc268b344141b8fd9acdc14178fc24351015", "message": "add block area to measurement", "committedDate": "2020-01-14T11:53:14Z", "type": "commit"}, {"oid": "33b693d3ab4d35bef0d0f91b3815aa82391f5206", "url": "https://github.com/graphhopper/graphhopper/commit/33b693d3ab4d35bef0d0f91b3815aa82391f5206", "message": "allow caching LineString when converting from PointList", "committedDate": "2020-01-14T11:55:02Z", "type": "commit"}, {"oid": "d6beef0643bdde852ed8755c99b1eaedd3d06b12", "url": "https://github.com/graphhopper/graphhopper/commit/d6beef0643bdde852ed8755c99b1eaedd3d06b12", "message": "replaced custom Polygon implementation with JTS", "committedDate": "2020-01-14T14:09:49Z", "type": "commit"}, {"oid": "f405d77065e564d45595cde0dbd89055320a5d7a", "url": "https://github.com/graphhopper/graphhopper/commit/f405d77065e564d45595cde0dbd89055320a5d7a", "message": "measurement: use block_area in bayern/bavaria (block_area for small map) and add to LM (block_area for big map)", "committedDate": "2020-01-14T21:13:49Z", "type": "commit"}, {"oid": "0b02a5df04c1e6dc33a82e4547c5a0805f3141da", "url": "https://github.com/graphhopper/graphhopper/commit/0b02a5df04c1e6dc33a82e4547c5a0805f3141da", "message": "fixing int. tests", "committedDate": "2020-01-14T23:34:40Z", "type": "commit"}, {"oid": "7a730cfcd163346c59520aed8afbc59ead35696a", "url": "https://github.com/graphhopper/graphhopper/commit/7a730cfcd163346c59520aed8afbc59ead35696a", "message": "much better precision without big slow down", "committedDate": "2020-01-16T22:06:14Z", "type": "commit"}, {"oid": "f69f127434e2bc18a273284d4c9b8985de88353c", "url": "https://github.com/graphhopper/graphhopper/commit/f69f127434e2bc18a273284d4c9b8985de88353c", "message": "merged master", "committedDate": "2020-01-17T13:44:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NzA1MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r367957051", "bodyText": "Wouldn't it be better to create a factory for 2D and 3D each and keep them?", "author": "otbutz", "createdAt": "2020-01-17T14:18:37Z", "path": "api/src/main/java/com/graphhopper/util/PointList.java", "diffHunk": "@@ -399,7 +404,10 @@ public static PointList fromLineString(LineString lineString) {\n     }\n \n     public LineString toLineString(boolean includeElevation) {\n-        GeometryFactory gf = new GeometryFactory();\n+        return toLineString(new GeometryFactory(), includeElevation);", "originalCommit": "7a730cfcd163346c59520aed8afbc59ead35696a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1MTM4Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368151382", "bodyText": "Have done this (one static factory). Or why would we want 2?", "author": "karussell", "createdAt": "2020-01-17T21:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1MDU2MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368450561", "bodyText": "GeometryFactory FAC_2D = new GeometryFactory(new PackedCoordinateSequenceFactory(DOUBLE, 2));\nGeometryFactory FAC_3D = new GeometryFactory(new PackedCoordinateSequenceFactory(DOUBLE, 3));\nincludeElevation would just toggle which one of the two is being passed to the function. No need to create new objects here.", "author": "otbutz", "createdAt": "2020-01-20T09:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2ODg0OA==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368568848", "bodyText": "Have adapted the current code (via a single factory). Or will there be something different with your proposed change?", "author": "karussell", "createdAt": "2020-01-20T14:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3NTk3NA==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368575974", "bodyText": "You can drop all new PackedCoordinateSequence(...) calls:\n2D_FAC.createPolygon(coordinates);", "author": "otbutz", "createdAt": "2020-01-20T14:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4OTMwMA==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368589300", "bodyText": "Hmmh, maybe you mean something else? There is just one call and it is:\nreturn factory.createLineString(new PackedCoordinateSequence.Double(coordinates, includeElevation ? 3 : 2));", "author": "karussell", "createdAt": "2020-01-20T14:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NzA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTYwNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r367961605", "bodyText": "We could check the envelope first.", "author": "otbutz", "createdAt": "2020-01-17T14:27:33Z", "path": "api/src/main/java/com/graphhopper/util/shapes/Polygon.java", "diffHunk": "@@ -17,117 +17,72 @@\n  */\n package com.graphhopper.util.shapes;\n \n+import com.graphhopper.util.PointList;\n+import org.locationtech.jts.geom.Coordinate;\n+import org.locationtech.jts.geom.Envelope;\n+import org.locationtech.jts.geom.GeometryFactory;\n+import org.locationtech.jts.geom.Point;\n+import org.locationtech.jts.geom.impl.PackedCoordinateSequence;\n+import org.locationtech.jts.geom.prep.PreparedGeometry;\n+import org.locationtech.jts.geom.prep.PreparedPolygon;\n+\n+import java.util.Arrays;\n+\n /**\n  * This class represents a polygon that is defined by a set of points.\n  * Every point i is connected to point i-1 and i+1.\n- * <p>\n- * TODO: Howto design inner rings in the polygon?\n  *\n  * @author Robin Boldt\n  */\n public class Polygon implements Shape {\n \n-    private final double[] lat;\n-    private final double[] lon;\n+    private final GeometryFactory factory = new GeometryFactory();\n+    private final PreparedGeometry polygon;\n+    private final Envelope envelope;\n \n-    private double minLat;\n-    private double minLon;\n-    private double maxLat;\n-    private double maxLon;\n+    public Polygon(PreparedGeometry polygon) {\n+        this.polygon = polygon;\n+        this.envelope = polygon.getGeometry().getEnvelopeInternal();\n+    }\n \n-    private final double epsilon;\n+    public Polygon(double[] lats, double[] lons) {\n+        if (lats.length != lons.length)\n+            throw new IllegalArgumentException(\"Points must be of equal length but was \" + lats.length + \" vs. \" + lons.length);\n \n-    public Polygon(double[] lat, double[] lon, double growFactor) {\n-        if (lat.length != lon.length) {\n-            throw new IllegalArgumentException(\"Points must be of equal length but was \" + lat.length + \" vs. \" + lon.length);\n-        }\n-        if (lat.length == 0) {\n+        if (lats.length == 0)\n             throw new IllegalArgumentException(\"Points must not be empty\");\n-        }\n-        this.lat = lat;\n-        this.lon = lon;\n-\n-        for (int i = 0; i < lat.length; i++) {\n-            if (i == 0) {\n-                minLat = lat[i];\n-                maxLat = lat[i];\n-                minLon = lon[i];\n-                maxLon = lon[i];\n-            } else {\n-                if (lat[i] < minLat) {\n-                    minLat = lat[i];\n-                } else if (lat[i] > maxLat) {\n-                    maxLat = lat[i];\n-                }\n-                if (lon[i] < minLon) {\n-                    minLon = lon[i];\n-                } else if (lon[i] > maxLon) {\n-                    maxLon = lon[i];\n-                }\n-            }\n-        }\n \n-        minLat -= growFactor;\n-        minLon -= growFactor;\n-        maxLat += growFactor;\n-        maxLon += growFactor;\n-\n-        epsilon = (maxLat - minLat) / 10;\n-    }\n-\n-    public Polygon(double[] lat, double[] lon) {\n-        this(lat, lon, 0);\n-    }\n-\n-    /**\n-     * Lossy conversion to a GraphHopper Polygon.\n-     */\n-    public static Polygon create(org.locationtech.jts.geom.Polygon polygon) {\n-        double[] lats = new double[polygon.getNumPoints()];\n-        double[] lons = new double[polygon.getNumPoints()];\n-        for (int i = 0; i < polygon.getNumPoints(); i++) {\n-            lats[i] = polygon.getCoordinates()[i].y;\n-            lons[i] = polygon.getCoordinates()[i].x;\n+        Coordinate[] coordinates = new Coordinate[lats.length + 1];\n+        for (int i = 0; i < lats.length; i++) {\n+            coordinates[i] = new Coordinate(lons[i], lats[i]);\n         }\n-        return new Polygon(lats, lons);\n+        coordinates[lats.length] = coordinates[0];\n+        this.polygon = new PreparedPolygon(factory.createPolygon(new PackedCoordinateSequence.Double(coordinates, 2)));\n+        this.envelope = polygon.getGeometry().getEnvelopeInternal();\n     }\n \n-    /**\n-     * Wrapper method for {@link Polygon#contains(double, double)}.\n-     */\n-    public boolean contains(GHPoint point) {\n-        return contains(point.lat, point.lon);\n+    public static Polygon create(org.locationtech.jts.geom.Polygon polygon) {\n+        return new Polygon(new PreparedPolygon(polygon));\n     }\n \n     @Override\n     public boolean intersects(Shape o) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+        throw new IllegalArgumentException(\"Polygon.intersects: shape not supported\");\n+    }\n+\n+    public boolean intersects(PointList pointList) {\n+        return polygon.intersects(pointList.getCachedLineString(factory, false));\n     }\n \n     /**\n-     * Implements the ray casting algorithm\n-     * Code is inspired from here: http://stackoverflow.com/a/218081/1548788\n+     * Does the point in polygon check.\n      *\n      * @param lat Latitude of the point to be checked\n      * @param lon Longitude of the point to be checked\n      * @return true if point is inside polygon\n      */\n     public boolean contains(double lat, double lon) {\n-        if (lat < minLat || lat > maxLat || lon < minLon || lon > maxLon) {\n-            return false;\n-        }\n-\n-        double rayStartLat = maxLat - (minLat / 2);\n-        double rayStartLon = minLon - epsilon;\n-\n-        boolean inside = false;\n-        int len = this.lat.length;\n-        for (int i = 0; i < len; i++) {\n-            if (edgesAreIntersecting(rayStartLon, rayStartLat, lon, lat, this.lon[i], this.lat[i], this.lon[(i + 1) % len], this.lat[(i + 1) % len]))\n-                inside = !inside;\n-        }\n-        return inside;\n-\n+        return polygon.contains(factory.createPoint(new Coordinate(lon, lat)));", "originalCommit": "7a730cfcd163346c59520aed8afbc59ead35696a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1MTkxOA==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368151918", "bodyText": "This should be done from JTS.", "author": "karussell", "createdAt": "2020-01-17T21:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1MjY0MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368452640", "bodyText": "Ah, i missed that polygon is already a PreparedGeometry. I would recommend to rename it accordingly e.g prepPolygon", "author": "otbutz", "createdAt": "2020-01-20T09:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2Nzg2NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368567865", "bodyText": "Done", "author": "karussell", "createdAt": "2020-01-20T14:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MjM0Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r367962342", "bodyText": "The number of holes would probably be interesting, too", "author": "otbutz", "createdAt": "2020-01-17T14:29:03Z", "path": "api/src/main/java/com/graphhopper/util/shapes/Polygon.java", "diffHunk": "@@ -137,115 +92,55 @@ public boolean contains(Shape s) {\n \n     @Override\n     public BBox getBounds() {\n-        return new BBox(minLon, maxLon, minLat, maxLat);\n+        return new BBox(envelope.getMinX(), envelope.getMaxX(), envelope.getMinY(), envelope.getMaxY());\n     }\n \n     @Override\n     public GHPoint getCenter() {\n-        return new GHPoint((maxLat + minLat) / 2, (maxLon + minLon) / 2);\n+        Point centroid = polygon.getGeometry().getCentroid();\n+        return new GHPoint(centroid.getY(), centroid.getX());\n     }\n \n     @Override\n     public double calculateArea() {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n-    }\n-\n-    private boolean edgesAreIntersecting(\n-            double v1x1, double v1y1, double v1x2, double v1y2,\n-            double v2x1, double v2y1, double v2x2, double v2y2\n-    ) {\n-\n-\n-        double d1, d2;\n-        double a1, a2, b1, b2, c1, c2;\n-\n-        // Convert vector 1 to a line (line 1) of infinite length.\n-        // We want the line in linear equation standard form: A*x + B*y + C = 0\n-        // See: http://en.wikipedia.org/wiki/Linear_equation\n-        a1 = v1y2 - v1y1;\n-        b1 = v1x1 - v1x2;\n-        c1 = (v1x2 * v1y1) - (v1x1 * v1y2);\n-\n-        // Every point (x,y), that solves the equation above, is on the line,\n-        // every point that does not solve it, is not. The equation will have a\n-        // positive result if it is on one side of the line and a negative one\n-        // if is on the other side of it. We insert (x1,y1) and (x2,y2) of vector\n-        // 2 into the equation above.\n-        d1 = (a1 * v2x1) + (b1 * v2y1) + c1;\n-        d2 = (a1 * v2x2) + (b1 * v2y2) + c1;\n-\n-        // If d1 and d2 both have the same sign, they are both on the same side\n-        // of our line 1 and in that case no intersection is possible. Careful,\n-        // 0 is a special case, that's why we don't test \">=\" and \"<=\",\n-        // but \"<\" and \">\".\n-        if (d1 > 0 && d2 > 0) return false;\n-        if (d1 < 0 && d2 < 0) return false;\n-\n-        // The fact that vector 2 intersected the infinite line 1 above doesn't\n-        // mean it also intersects the vector 1. Vector 1 is only a subset of that\n-        // infinite line 1, so it may have intersected that line before the vector\n-        // started or after it ended. To know for sure, we have to repeat the\n-        // the same test the other way round. We start by calculating the\n-        // infinite line 2 in linear equation standard form.\n-        a2 = v2y2 - v2y1;\n-        b2 = v2x1 - v2x2;\n-        c2 = (v2x2 * v2y1) - (v2x1 * v2y2);\n-\n-        // Calculate d1 and d2 again, this time using points of vector 1.\n-        d1 = (a2 * v1x1) + (b2 * v1y1) + c2;\n-        d2 = (a2 * v1x2) + (b2 * v1y2) + c2;\n-\n-        // Again, if both have the same sign (and neither one is 0),\n-        // no intersection is possible.\n-        if (d1 > 0 && d2 > 0) return false;\n-        if (d1 < 0 && d2 < 0) return false;\n-\n-        // If we get here, only two possibilities are left. Either the two\n-        // vectors intersect in exactly one point or they are collinear, which\n-        // means they intersect in any number of points from zero to infinite.\n-        if ((a1 * b2) - (a2 * b1) == 0) return false;\n-\n-        // If they are not collinear, they must intersect in exactly one point.\n-        return true;\n+        // for estimation use bounding box as reference:\n+        return getBounds().calculateArea() * envelope.getArea() / polygon.getGeometry().getArea();\n     }\n \n     public double getMinLat() {\n-        return minLat;\n+        return envelope.getMinY();\n     }\n \n     public double getMinLon() {\n-        return minLon;\n+        return envelope.getMinX();\n     }\n \n     public double getMaxLat() {\n-        return maxLat;\n+        return envelope.getMaxY();\n     }\n \n     public double getMaxLon() {\n-        return maxLon;\n+        return envelope.getMaxX();\n     }\n \n     @Override\n     public String toString() {\n-        return \"polygon (\" + lat.length + \" points)\";\n+        return \"polygon (\" + polygon.getGeometry().getNumPoints() + \" points)\";", "originalCommit": "7a730cfcd163346c59520aed8afbc59ead35696a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "314fe5c0728d4cc18cf0970a9a140bd5cbd5b2ef", "url": "https://github.com/graphhopper/graphhopper/commit/314fe5c0728d4cc18cf0970a9a140bd5cbd5b2ef", "message": "avoid factory creation", "committedDate": "2020-01-17T21:51:44Z", "type": "commit"}, {"oid": "dc1f44d155667a712076050f94b1b90e6a9a49fe", "url": "https://github.com/graphhopper/graphhopper/commit/dc1f44d155667a712076050f94b1b90e6a9a49fe", "message": "more information into toString", "committedDate": "2020-01-17T21:53:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MjY3Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368492676", "bodyText": "I think this will fail when this method is called after this object was updated with update(). BBox is mutable, so I think we can't cache the RectangleLineIntersector.", "author": "michaz", "createdAt": "2020-01-20T11:11:48Z", "path": "api/src/main/java/com/graphhopper/util/shapes/BBox.java", "diffHunk": "@@ -161,6 +164,36 @@ public boolean contains(Shape s) {\n         throw new UnsupportedOperationException(\"unsupported shape\");\n     }\n \n+    private RectangleLineIntersector cachedIntersector;\n+\n+    RectangleLineIntersector getCachedRectangleLineIntersector() {\n+        if (cachedIntersector == null)\n+            cachedIntersector = new RectangleLineIntersector(toEnvelope(this));\n+        return cachedIntersector;\n+    }\n+\n+    @Override\n+    public boolean intersects(PointList pointList) {\n+        int len = pointList.getSize();\n+        if (len == 0)\n+            throw new IllegalArgumentException(\"PointList must not be empty\");\n+\n+        double lat = pointList.getLatitude(0);\n+        double lon = pointList.getLongitude(0);\n+        if (len == 1)\n+            return contains(lat, lon);\n+\n+        Coordinate coords = new Coordinate(lon, lat);\n+        RectangleLineIntersector intersector = getCachedRectangleLineIntersector();", "originalCommit": "dc1f44d155667a712076050f94b1b90e6a9a49fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2NjY3Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368566672", "bodyText": "Yeah, will see if this is critical for speed and if there is a different possibility.", "author": "karussell", "createdAt": "2020-01-20T14:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MjY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4ODE5NA==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368588194", "bodyText": "Oh, without it is 50% slower. (just this operation not the whole routing)", "author": "karussell", "createdAt": "2020-01-20T14:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MjY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg1NDQ5Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368854492", "bodyText": "Have moved the cached RectangleLineIntersector upwards to GraphEdgeIdFinder.parseBlockArea", "author": "karussell", "createdAt": "2020-01-21T08:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MjY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NjE4MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368496180", "bodyText": "Do you think we could just remove this method, and its definition from Shape? It isn't used generically anywhere in the code, so we could easily avoid giving an \"approximate\" or fudged implementation here.", "author": "michaz", "createdAt": "2020-01-20T11:20:50Z", "path": "api/src/main/java/com/graphhopper/util/shapes/Polygon.java", "diffHunk": "@@ -137,115 +92,55 @@ public boolean contains(Shape s) {\n \n     @Override\n     public BBox getBounds() {\n-        return new BBox(minLon, maxLon, minLat, maxLat);\n+        return new BBox(envelope.getMinX(), envelope.getMaxX(), envelope.getMinY(), envelope.getMaxY());\n     }\n \n     @Override\n     public GHPoint getCenter() {\n-        return new GHPoint((maxLat + minLat) / 2, (maxLon + minLon) / 2);\n+        Point centroid = polygon.getGeometry().getCentroid();\n+        return new GHPoint(centroid.getY(), centroid.getX());\n     }\n \n     @Override\n     public double calculateArea() {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n-    }\n-\n-    private boolean edgesAreIntersecting(\n-            double v1x1, double v1y1, double v1x2, double v1y2,\n-            double v2x1, double v2y1, double v2x2, double v2y2\n-    ) {\n-\n-\n-        double d1, d2;\n-        double a1, a2, b1, b2, c1, c2;\n-\n-        // Convert vector 1 to a line (line 1) of infinite length.\n-        // We want the line in linear equation standard form: A*x + B*y + C = 0\n-        // See: http://en.wikipedia.org/wiki/Linear_equation\n-        a1 = v1y2 - v1y1;\n-        b1 = v1x1 - v1x2;\n-        c1 = (v1x2 * v1y1) - (v1x1 * v1y2);\n-\n-        // Every point (x,y), that solves the equation above, is on the line,\n-        // every point that does not solve it, is not. The equation will have a\n-        // positive result if it is on one side of the line and a negative one\n-        // if is on the other side of it. We insert (x1,y1) and (x2,y2) of vector\n-        // 2 into the equation above.\n-        d1 = (a1 * v2x1) + (b1 * v2y1) + c1;\n-        d2 = (a1 * v2x2) + (b1 * v2y2) + c1;\n-\n-        // If d1 and d2 both have the same sign, they are both on the same side\n-        // of our line 1 and in that case no intersection is possible. Careful,\n-        // 0 is a special case, that's why we don't test \">=\" and \"<=\",\n-        // but \"<\" and \">\".\n-        if (d1 > 0 && d2 > 0) return false;\n-        if (d1 < 0 && d2 < 0) return false;\n-\n-        // The fact that vector 2 intersected the infinite line 1 above doesn't\n-        // mean it also intersects the vector 1. Vector 1 is only a subset of that\n-        // infinite line 1, so it may have intersected that line before the vector\n-        // started or after it ended. To know for sure, we have to repeat the\n-        // the same test the other way round. We start by calculating the\n-        // infinite line 2 in linear equation standard form.\n-        a2 = v2y2 - v2y1;\n-        b2 = v2x1 - v2x2;\n-        c2 = (v2x2 * v2y1) - (v2x1 * v2y2);\n-\n-        // Calculate d1 and d2 again, this time using points of vector 1.\n-        d1 = (a2 * v1x1) + (b2 * v1y1) + c2;\n-        d2 = (a2 * v1x2) + (b2 * v1y2) + c2;\n-\n-        // Again, if both have the same sign (and neither one is 0),\n-        // no intersection is possible.\n-        if (d1 > 0 && d2 > 0) return false;\n-        if (d1 < 0 && d2 < 0) return false;\n-\n-        // If we get here, only two possibilities are left. Either the two\n-        // vectors intersect in exactly one point or they are collinear, which\n-        // means they intersect in any number of points from zero to infinite.\n-        if ((a1 * b2) - (a2 * b1) == 0) return false;\n-\n-        // If they are not collinear, they must intersect in exactly one point.\n-        return true;\n+        // for estimation use bounding box as reference:\n+        return getBounds().calculateArea() * envelope.getArea() / polygon.getGeometry().getArea();", "originalCommit": "dc1f44d155667a712076050f94b1b90e6a9a49fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2NjI1Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368566253", "bodyText": "Unfortunately it is used in GraphEdgeIdFinder.parseBlockArea", "author": "karussell", "createdAt": "2020-01-20T14:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg1Mzk0Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r368853946", "bodyText": "Ok, wasn't used before (seems like a bug), but is now :)\nI.e. for smaller polygons edgeIds should be used and for bigger polygons we expect that the edgeId lookup is slower than calling the polygon.intersect for every edge of the traversed graph.", "author": "karussell", "createdAt": "2020-01-21T08:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NjE4MA=="}], "type": "inlineReview"}, {"oid": "09e3adceb5cfca022a28b6c1f868e700e9574bdf", "url": "https://github.com/graphhopper/graphhopper/commit/09e3adceb5cfca022a28b6c1f868e700e9574bdf", "message": "minor renaming", "committedDate": "2020-01-20T14:29:52Z", "type": "commit"}, {"oid": "6920beed2e55b21ab3f1566f08102bc720a24e28", "url": "https://github.com/graphhopper/graphhopper/commit/6920beed2e55b21ab3f1566f08102bc720a24e28", "message": "Merge branch 'master' into replace_polygon", "committedDate": "2020-01-20T15:03:41Z", "type": "commit"}, {"oid": "f1f6df149fd3741f5ca62c27d93e9ac20d6b6f0c", "url": "https://github.com/graphhopper/graphhopper/commit/f1f6df149fd3741f5ca62c27d93e9ac20d6b6f0c", "message": "avoid BBox.getCachedRectangleLineIntersector. Use polygon.calculateArea", "committedDate": "2020-01-20T21:22:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1MzQ5OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1853#discussion_r369653499", "bodyText": "I think it's great that we can remove this method! This was always a bit of a headache factor for me!", "author": "boldtrn", "createdAt": "2020-01-22T16:08:48Z", "path": "api/src/main/java/com/graphhopper/util/shapes/Polygon.java", "diffHunk": "@@ -137,115 +92,55 @@ public boolean contains(Shape s) {\n \n     @Override\n     public BBox getBounds() {\n-        return new BBox(minLon, maxLon, minLat, maxLat);\n+        return new BBox(envelope.getMinX(), envelope.getMaxX(), envelope.getMinY(), envelope.getMaxY());\n     }\n \n     @Override\n     public GHPoint getCenter() {\n-        return new GHPoint((maxLat + minLat) / 2, (maxLon + minLon) / 2);\n+        Point centroid = prepPolygon.getGeometry().getCentroid();\n+        return new GHPoint(centroid.getY(), centroid.getX());\n     }\n \n     @Override\n     public double calculateArea() {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n-    }\n-\n-    private boolean edgesAreIntersecting(", "originalCommit": "f1f6df149fd3741f5ca62c27d93e9ac20d6b6f0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f29165467870aa56550027c258ccf5957cf78bea", "url": "https://github.com/graphhopper/graphhopper/commit/f29165467870aa56550027c258ccf5957cf78bea", "message": "merged master", "committedDate": "2020-01-28T11:33:22Z", "type": "commit"}]}