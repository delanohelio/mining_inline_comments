{"pr_number": 2091, "pr_title": "Improve tag extraction", "pr_createdAt": "2020-07-21T15:28:28Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/2091", "timeline": [{"oid": "7386ce0fd47b86542934a12287c2346f30f696a7", "url": "https://github.com/graphhopper/graphhopper/commit/7386ce0fd47b86542934a12287c2346f30f696a7", "message": "Use the same Delta for all tests", "committedDate": "2020-07-22T09:36:35Z", "type": "forcePushed"}, {"oid": "5e10c292e74c34a3fe3c238d80dc18fb31a4d62c", "url": "https://github.com/graphhopper/graphhopper/commit/5e10c292e74c34a3fe3c238d80dc18fb31a4d62c", "message": "Use the same Delta for all tests", "committedDate": "2020-07-22T10:02:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc5Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r459900793", "bodyText": "is this separate method necessary because of getMaxSpeed? If we do this breaking change shouldn't we refactor everything to use NaN instead of negative values? ... ah, but it can still happen that a speed value is set or mapped 0 ... hmmh", "author": "karussell", "createdAt": "2020-07-24T07:47:31Z", "path": "core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java", "diffHunk": "@@ -222,20 +223,35 @@ public double getMaxSpeed() {\n     }\n \n     /**\n-     * @return -1 if no maxspeed found\n+     * @return {@link Double#NaN} if no maxspeed found\n      */\n     protected double getMaxSpeed(ReaderWay way) {\n-        double maxSpeed = parseSpeed(way.getTag(\"maxspeed\"));\n-        double fwdSpeed = parseSpeed(way.getTag(\"maxspeed:forward\"));\n-        if (fwdSpeed >= 0 && (maxSpeed < 0 || fwdSpeed < maxSpeed))\n+        double maxSpeed = OSMValueExtractor.stringToKmh(way.getTag(\"maxspeed\"));\n+        double fwdSpeed = OSMValueExtractor.stringToKmh(way.getTag(\"maxspeed:forward\"));\n+        if (isValidSpeed(fwdSpeed) && (!isValidSpeed(maxSpeed) || fwdSpeed < maxSpeed))\n             maxSpeed = fwdSpeed;\n \n-        double backSpeed = parseSpeed(way.getTag(\"maxspeed:backward\"));\n-        if (backSpeed >= 0 && (maxSpeed < 0 || backSpeed < maxSpeed))\n+        double backSpeed = OSMValueExtractor.stringToKmh(way.getTag(\"maxspeed:backward\"));\n+        if (isValidSpeed(backSpeed) && (!isValidSpeed(maxSpeed) || backSpeed < maxSpeed))\n             maxSpeed = backSpeed;\n \n         return maxSpeed;\n     }\n+    \n+    /**\n+     * @return <i>true</i> if the given speed is not {@link Double#NaN} or negative\n+     */\n+    protected boolean isValidSpeed(double speed) {\n+        return !Double.isNaN(speed) && speed >= 0;\n+    }\n+\n+    /**\n+     * @return <i>true</i> if the given speed is not {@link Double#NaN} and is\n+     *         bigger than zero\n+     */\n+    protected boolean isPositiveSpeed(double speed) {\n+        return !Double.isNaN(speed) && speed > 0;\n+    }", "originalCommit": "5e10c292e74c34a3fe3c238d80dc18fb31a4d62c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxNzQyNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r461417425", "bodyText": "Yeah i was thinking about the same. Wouldn't it be better to ignore 0 speeds completely?\nhttps://overpass-turbo.eu/s/WwG\nMost of those ways have accompanying access tags which already prohibit routing.", "author": "otbutz", "createdAt": "2020-07-28T08:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2ODQzOQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r461468439", "bodyText": "Yes, your overpass query is convincing, seems to be a good idea to exclude those ways and assume this is a tagging problem. Or is it used for other purposes (e.g. for other speed tags) too?", "author": "karussell", "createdAt": "2020-07-28T10:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4OTI3MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r461489271", "bodyText": "I couldn't find any reasonable uses of speed 0 for maxspeed:forward, maxspeed:backward and maxspeed:motorcycle. It should be safe to ignore it as a tagging error.\nRelated: #367", "author": "otbutz", "createdAt": "2020-07-28T10:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc5Mw=="}], "type": "inlineReview"}, {"oid": "c2b9191823e0e251d3d33865f9ec97f3b86cd605", "url": "https://github.com/graphhopper/graphhopper/commit/c2b9191823e0e251d3d33865f9ec97f3b86cd605", "message": "Add tag extractor test utility", "committedDate": "2020-07-28T08:26:49Z", "type": "forcePushed"}, {"oid": "ab9b6461c4a34368f6833bad9318a5d135d839bf", "url": "https://github.com/graphhopper/graphhopper/commit/ab9b6461c4a34368f6833bad9318a5d135d839bf", "message": "Ignore speeds below the storeable minimum", "committedDate": "2020-07-29T15:04:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxODk3NA==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r464918974", "bodyText": "This is not that easy and dependent on how the EncodedValue for the speed is configured. So we could easily store 0.1km/h with enough bits...", "author": "karussell", "createdAt": "2020-08-04T09:23:15Z", "path": "core/src/main/java/com/graphhopper/routing/ev/MaxSpeed.java", "diffHunk": "@@ -33,6 +33,10 @@\n      * The speed value used for road sections without known speed limit.\n      */\n     public static final double UNSET_SPEED = Double.POSITIVE_INFINITY;\n+    /**\n+     * The lowest speed value which can be stored.\n+     */\n+    public static final double MINIMUM_STOREABLE_SPEED = 5;", "originalCommit": "ab9b6461c4a34368f6833bad9318a5d135d839bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3OTE4Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r464979186", "bodyText": "I'm not sure how (or if?) we should deal with unstoreable values. If we know that we can't store a certain value, we could use alternative tags or fallback values.", "author": "otbutz", "createdAt": "2020-08-04T11:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxODk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NjY3Nw==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r465076677", "bodyText": "The tag extraction methods shouldn't care about it and always return precise numbers. Instead this issue can be handled in OSMMaxSpeedParser dependent on the configuration of the EncodedValue. As this is an important issue it is worth a separate issue.", "author": "karussell", "createdAt": "2020-08-04T14:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxODk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMDI5MA==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r464920290", "bodyText": "I would not do this and instead ignore all these soft tags. IMO tagging a height with such a value is a tagging issue and we should not use it or even convert it into an explicit max height.", "author": "karussell", "createdAt": "2020-08-04T09:25:25Z", "path": "core/src/main/java/com/graphhopper/routing/util/parsers/helpers/OSMValueExtractor.java", "diffHunk": "@@ -80,6 +86,12 @@ public static double stringToMeter(String value) {\n         value = FEET_PATTERN.matcher(value).replaceAll(\"ft\");\n         if (isInvalidValue(value))\n             return Double.NaN;\n+        \n+        // only used for maxheight\n+        if (\"below_default\".equals(value)) {\n+            return 2; // assume that cars are able to pass\n+        }", "originalCommit": "ab9b6461c4a34368f6833bad9318a5d135d839bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyOTAyOA==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r464929028", "bodyText": "below_default is an accepted and documented value. Projects like StreetComplete make use of it: https://github.com/westnordost/StreetComplete/blob/ed6ab1426f5c26dc4779c2c84118483a4a84a6eb/app/src/main/java/de/westnordost/streetcomplete/quests/max_height/AddMaxHeight.kt#L68-L77", "author": "otbutz", "createdAt": "2020-08-04T09:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMDI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MzkzMg==", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r465073932", "bodyText": "Ok, yes. I can see it in the wiki. It is not really useful IMO and seems to be mostly used by German mappers. My problem with this approach is for GraphHopper itself: if we would do this then some limits have not the meaning they have in real world. So I would keep this for another issue.", "author": "karussell", "createdAt": "2020-08-04T14:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMDI5MA=="}], "type": "inlineReview"}, {"oid": "0b5900929bc44e1856f29c9df178a9deee873d4f", "url": "https://github.com/graphhopper/graphhopper/commit/0b5900929bc44e1856f29c9df178a9deee873d4f", "message": "Add support for parsing short tons", "committedDate": "2020-08-11T13:09:41Z", "type": "commit"}, {"oid": "7e50e9c9795fe73c3e476bfdb0e56f71dd76c28e", "url": "https://github.com/graphhopper/graphhopper/commit/7e50e9c9795fe73c3e476bfdb0e56f71dd76c28e", "message": "Extend unittest to check for short ton conversion", "committedDate": "2020-08-11T13:09:41Z", "type": "commit"}, {"oid": "ce38b7968fc35b62d0f4496d12dfbaee6c8f3293", "url": "https://github.com/graphhopper/graphhopper/commit/ce38b7968fc35b62d0f4496d12dfbaee6c8f3293", "message": "Move speed parser logic into OSMValueExtractor", "committedDate": "2020-08-11T13:09:41Z", "type": "commit"}, {"oid": "8352840608a509afe0282f58b4273a0f929e284f", "url": "https://github.com/graphhopper/graphhopper/commit/8352840608a509afe0282f58b4273a0f929e284f", "message": "Use Double.NaN for unparseable speed values", "committedDate": "2020-08-11T13:09:42Z", "type": "commit"}, {"oid": "e55b755ca6d62143f1f47330c30a6745b30e9f0f", "url": "https://github.com/graphhopper/graphhopper/commit/e55b755ca6d62143f1f47330c30a6745b30e9f0f", "message": "Add a test for speedlimit \"none\"", "committedDate": "2020-08-11T13:09:42Z", "type": "commit"}, {"oid": "7427d0c6cd58ec9b00fde82f9d738387eb8e35b2", "url": "https://github.com/graphhopper/graphhopper/commit/7427d0c6cd58ec9b00fde82f9d738387eb8e35b2", "message": "Use the same Delta for all tests", "committedDate": "2020-08-11T13:09:42Z", "type": "commit"}, {"oid": "bc92a04812f9b278f015ddcd413d0ec338d67530", "url": "https://github.com/graphhopper/graphhopper/commit/bc92a04812f9b278f015ddcd413d0ec338d67530", "message": "Add tag extractor test utility", "committedDate": "2020-08-11T13:09:42Z", "type": "commit"}, {"oid": "c3b1b8cf700f260de1858d042ef4e8531aa6d0b9", "url": "https://github.com/graphhopper/graphhopper/commit/c3b1b8cf700f260de1858d042ef4e8531aa6d0b9", "message": "Ignore non-positive speed values", "committedDate": "2020-08-11T13:09:42Z", "type": "commit"}, {"oid": "c3b1b8cf700f260de1858d042ef4e8531aa6d0b9", "url": "https://github.com/graphhopper/graphhopper/commit/c3b1b8cf700f260de1858d042ef4e8531aa6d0b9", "message": "Ignore non-positive speed values", "committedDate": "2020-08-11T13:09:42Z", "type": "forcePushed"}, {"oid": "28f5478d5df9edd73090c408e396add428c3987d", "url": "https://github.com/graphhopper/graphhopper/commit/28f5478d5df9edd73090c408e396add428c3987d", "message": "Merge branch 'master' into extractor", "committedDate": "2020-09-23T08:31:29Z", "type": "commit"}]}