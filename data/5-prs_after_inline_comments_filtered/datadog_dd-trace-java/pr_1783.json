{"pr_number": 1783, "pr_title": "CI-App: JUnit5 Instrumentation", "pr_createdAt": "2020-08-19T08:37:15Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1783", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMTI5Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r472931293", "bodyText": "This must be quite high cardinality?", "author": "richardstartin", "createdAt": "2020-08-19T10:36:27Z", "path": "dd-java-agent/instrumentation/junit-5.3.2/src/main/java/datadog/trace/instrumentation/junit5/JUnit5Decorator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package datadog.trace.instrumentation.junit5;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+\n+@Slf4j\n+public class JUnit5Decorator extends TestDecorator {\n+\n+  public static final JUnit5Decorator DECORATE = new JUnit5Decorator();\n+\n+  @Override\n+  public String testFramework() {\n+    return \"junit5\";\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"junit\", \"junit-5\"};\n+  }\n+\n+  @Override\n+  public String component() {\n+    return \"junit\";\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final MethodSource methodSource) {\n+    onTestStart(span, methodSource.getClassName(), methodSource.getMethodName());\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final String testSuite, final String testName) {\n+    span.setTag(DDTags.RESOURCE_NAME, testSuite + \".\" + testName);", "originalCommit": "5413f45e5c59d1d07e181a1cf1eedb3f5f76e1f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNzgxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r473007811", "bodyText": "It could be as we'd like to trace every single test.\nE.g: We used to report more than 200k tests if we tested our previous tool (Scope) in the Guava project.", "author": "drodriguezhdez", "createdAt": "2020-08-19T12:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMTI5Mw=="}], "type": "inlineReview"}, {"oid": "d52a3cc6d6907a225cc632235c807ebbc6904cad", "url": "https://github.com/DataDog/dd-trace-java/commit/d52a3cc6d6907a225cc632235c807ebbc6904cad", "message": "Rename module to junit-5.3.2", "committedDate": "2020-08-24T09:27:18Z", "type": "forcePushed"}, {"oid": "acbf9073867b8b062d216df7b167cd449c458353", "url": "https://github.com/DataDog/dd-trace-java/commit/acbf9073867b8b062d216df7b167cd449c458353", "message": "Adjust JUnit4 and TestNG tests", "committedDate": "2020-08-26T08:10:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzNDY5Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r478434693", "bodyText": "Since you only have one instrumentation class is this necessary? What happens without this?", "author": "tylerbenson", "createdAt": "2020-08-27T13:51:01Z", "path": "dd-java-agent/instrumentation/junit-5.3.0/src/main/java/datadog/trace/instrumentation/junit5/JUnit5Instrumentation.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package datadog.trace.instrumentation.junit5;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService;\n+import org.junit.platform.launcher.Launcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JUnit5Instrumentation extends Instrumenter.Default {\n+\n+  public JUnit5Instrumentation() {\n+    super(\"junit\", \"junit-5\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.junit.platform.launcher.Launcher\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return hasClassesNamed(\"org.junit.platform.launcher.Launcher\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".JUnit5Decorator\", packageName + \".TracingListener\"};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isConstructor(), JUnit5Instrumentation.class.getName() + \"$JUnit5Advice\");\n+  }\n+\n+  @Override\n+  protected boolean defaultEnabled() {\n+    return false;\n+  }\n+\n+  public static class JUnit5Advice {\n+\n+    @Advice.OnMethodExit\n+    public static void addTracingListener(@Advice.This final Launcher launcher) {\n+      final TracingListener listener = new TracingListener();\n+      launcher.registerTestExecutionListeners(listener);\n+    }\n+\n+    // JUnit 5.3.0 and above\n+    public static void muzzleCheck(final SameThreadHierarchicalTestExecutorService service) {\n+      service.invokeAll(null);\n+    }", "originalCommit": "acbf9073867b8b062d216df7b167cd449c458353", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f260be96d3335c8cabb663d841498c0b06d735e4", "url": "https://github.com/DataDog/dd-trace-java/commit/f260be96d3335c8cabb663d841498c0b06d735e4", "message": "Added JUnit5 instrumentation.", "committedDate": "2020-08-27T14:20:36Z", "type": "commit"}, {"oid": "ff9884a87dd52bdf792f7af412dec603ed27cf7b", "url": "https://github.com/DataDog/dd-trace-java/commit/ff9884a87dd52bdf792f7af412dec603ed27cf7b", "message": "Added JUnit5 instrumentation.", "committedDate": "2020-08-27T14:20:36Z", "type": "commit"}, {"oid": "b6b147cf1c5d46c248b655b0501fb31b0ebf37cc", "url": "https://github.com/DataDog/dd-trace-java/commit/b6b147cf1c5d46c248b655b0501fb31b0ebf37cc", "message": "Rename module to junit-5.3.2", "committedDate": "2020-08-27T14:20:36Z", "type": "commit"}, {"oid": "4d2624b19ef7f9e81fec69c08470ac7a8a7d147f", "url": "https://github.com/DataDog/dd-trace-java/commit/4d2624b19ef7f9e81fec69c08470ac7a8a7d147f", "message": "Avoid setting byte code version compatibility in gradle file.", "committedDate": "2020-08-27T14:20:36Z", "type": "commit"}, {"oid": "9f780db02f29598515494ebcda374358be3a030c", "url": "https://github.com/DataDog/dd-trace-java/commit/9f780db02f29598515494ebcda374358be3a030c", "message": "Added additional test cases", "committedDate": "2020-08-27T14:20:36Z", "type": "commit"}, {"oid": "ebd9e2d2ee1b76e008aefd40efc0d6dfdbfe709c", "url": "https://github.com/DataDog/dd-trace-java/commit/ebd9e2d2ee1b76e008aefd40efc0d6dfdbfe709c", "message": "Adjust JUnit4 and TestNG tests", "committedDate": "2020-08-27T14:20:36Z", "type": "commit"}, {"oid": "ebd9e2d2ee1b76e008aefd40efc0d6dfdbfe709c", "url": "https://github.com/DataDog/dd-trace-java/commit/ebd9e2d2ee1b76e008aefd40efc0d6dfdbfe709c", "message": "Adjust JUnit4 and TestNG tests", "committedDate": "2020-08-27T14:20:36Z", "type": "forcePushed"}, {"oid": "f5a8bd8c187b9805fb0dc561009ea57cbb9401e7", "url": "https://github.com/DataDog/dd-trace-java/commit/f5a8bd8c187b9805fb0dc561009ea57cbb9401e7", "message": "Applying suggestions from feedback review", "committedDate": "2020-08-27T14:26:12Z", "type": "commit"}]}