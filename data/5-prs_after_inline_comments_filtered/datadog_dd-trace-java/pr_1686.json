{"pr_number": 1686, "pr_title": "alternative context extraction", "pr_createdAt": "2020-07-15T17:22:01Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1686", "timeline": [{"oid": "0f70d0bee89c3044714d628f32a55dc7f1331c0a", "url": "https://github.com/DataDog/dd-trace-java/commit/0f70d0bee89c3044714d628f32a55dc7f1331c0a", "message": "an alternative approach to context propagation which avoids accidentally quadratic loops", "committedDate": "2020-07-15T15:45:38Z", "type": "commit"}, {"oid": "15bf393879341d2f6bef5f65d825b13c36ed4413", "url": "https://github.com/DataDog/dd-trace-java/commit/15bf393879341d2f6bef5f65d825b13c36ed4413", "message": "rebase revapi", "committedDate": "2020-07-15T15:45:38Z", "type": "commit"}, {"oid": "0fdff968b002b3daecc7fa6c2d7f46d6d45ff7cc", "url": "https://github.com/DataDog/dd-trace-java/commit/0fdff968b002b3daecc7fa6c2d7f46d6d45ff7cc", "message": "use TreeMap everywhere for now", "committedDate": "2020-07-16T10:03:10Z", "type": "commit"}, {"oid": "0c978d2a53bcfcbc5623015c656853b6e6ec6bfe", "url": "https://github.com/DataDog/dd-trace-java/commit/0c978d2a53bcfcbc5623015c656853b6e6ec6bfe", "message": "merge KeyValueConsumer and KeyClassifier interfaces", "committedDate": "2020-07-16T10:32:46Z", "type": "commit"}, {"oid": "7cb5235c6a630f0aa6076e733a871c2bfbc208f5", "url": "https://github.com/DataDog/dd-trace-java/commit/7cb5235c6a630f0aa6076e733a871c2bfbc208f5", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting", "committedDate": "2020-07-16T13:06:27Z", "type": "forcePushed"}, {"oid": "4796e94a769d9d85783d0683d0202f95bc7a441d", "url": "https://github.com/DataDog/dd-trace-java/commit/4796e94a769d9d85783d0683d0202f95bc7a441d", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting", "committedDate": "2020-07-16T13:45:47Z", "type": "forcePushed"}, {"oid": "c39c8f7fc6a89313bbf29ace721862299440a992", "url": "https://github.com/DataDog/dd-trace-java/commit/c39c8f7fc6a89313bbf29ace721862299440a992", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting", "committedDate": "2020-07-16T14:19:37Z", "type": "forcePushed"}, {"oid": "8267ddcfe721e81be4c7f8a4bcb60c8bc7d953ab", "url": "https://github.com/DataDog/dd-trace-java/commit/8267ddcfe721e81be4c7f8a4bcb60c8bc7d953ab", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting", "committedDate": "2020-07-16T14:47:56Z", "type": "forcePushed"}, {"oid": "4dae1e458ca3f08187c9e577c03848ff27a610dc", "url": "https://github.com/DataDog/dd-trace-java/commit/4dae1e458ca3f08187c9e577c03848ff27a610dc", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting", "committedDate": "2020-07-16T15:10:16Z", "type": "commit"}, {"oid": "4dae1e458ca3f08187c9e577c03848ff27a610dc", "url": "https://github.com/DataDog/dd-trace-java/commit/4dae1e458ca3f08187c9e577c03848ff27a610dc", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting", "committedDate": "2020-07-16T15:10:16Z", "type": "forcePushed"}, {"oid": "0e3ec2ddd776fa8651a6abee74b0e95f4798d9b2", "url": "https://github.com/DataDog/dd-trace-java/commit/0e3ec2ddd776fa8651a6abee74b0e95f4798d9b2", "message": "port FixedSizeCacheTest into dd-trace-core", "committedDate": "2020-07-16T15:42:06Z", "type": "commit"}, {"oid": "4a2d8ad1d56421d6029e99345ac3f53dd40aea3d", "url": "https://github.com/DataDog/dd-trace-java/commit/4a2d8ad1d56421d6029e99345ac3f53dd40aea3d", "message": "add test for more coverage", "committedDate": "2020-07-16T17:08:19Z", "type": "commit"}, {"oid": "4a2d8ad1d56421d6029e99345ac3f53dd40aea3d", "url": "https://github.com/DataDog/dd-trace-java/commit/4a2d8ad1d56421d6029e99345ac3f53dd40aea3d", "message": "add test for more coverage", "committedDate": "2020-07-16T17:08:19Z", "type": "forcePushed"}, {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "url": "https://github.com/DataDog/dd-trace-java/commit/0bcf00e0ba9788f9643418f500b85d8c8871c431", "message": "Merge branch 'master' into rgs/context-propagation", "committedDate": "2020-07-17T14:04:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MDcxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457450717", "bodyText": "We need to call this out in the release notes.  Please update the PR description with verbiage.", "author": "tylerbenson", "createdAt": "2020-07-20T14:41:44Z", "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "diffHunk": "@@ -10,11 +10,9 @@\n \n   public static final MessageInjectAdapter SETTER = new MessageInjectAdapter();\n \n-  static final String DASH = \"__dash__\";\n-\n   @Override\n   public void set(final Message carrier, final String key, final String value) {\n-    final String propName = key.replace(\"-\", DASH);\n+    final String propName = key.replace('-', '$');", "originalCommit": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MzI0OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457453249", "bodyText": "Maybe this was intentional, but I think this is a useful comment.", "author": "tylerbenson", "createdAt": "2020-07-20T14:44:46Z", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -97,15 +97,12 @@ private OtelGetter(final HttpTextFormat.Getter<C> getter) {\n     }\n \n     @Override\n-    public Iterable<String> keys(final C carrier) {\n-      // TODO: Otel doesn't expose the keys, so we have to rely on hard coded keys.\n-      // https://github.com/open-telemetry/opentelemetry-specification/issues/433", "originalCommit": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1OTc3Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457459776", "bodyText": "I assume the attributes below should replace/overwrite the values from the headers, but what happens if this is hit?  Perhaps this should be a break instead of return?  Either way, it could probably use a comment clarifying the intention. (Previous comment was removed.)", "author": "tylerbenson", "createdAt": "2020-07-20T14:51:39Z", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.\n-     */\n-    final Object attribute = carrier.getAttribute(key);\n-    if (attribute instanceof String) {\n-      return (String) attribute;\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();\n+    while (headerNames.hasMoreElements()) {\n+      String header = headerNames.nextElement();\n+      if (!classifier.accept(header, carrier.getHeader(header))) {\n+        return;", "originalCommit": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMzQxOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457503419", "bodyText": "We should keep a comment to this effect, but it should be updated to reference ServletRequestSetter since that seems to be the new name.", "author": "tylerbenson", "createdAt": "2020-07-20T15:38:11Z", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.", "originalCommit": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d35efad6cc54ff5d42104f9b6799859f73677d17", "url": "https://github.com/DataDog/dd-trace-java/commit/d35efad6cc54ff5d42104f9b6799859f73677d17", "message": "address review comments", "committedDate": "2020-07-20T16:05:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457464588", "bodyText": "Why is datadog.trace.bootstrap.instrumentation.api.FixedSizeCache duplicated here?", "author": "randomanderson", "createdAt": "2020-07-20T14:56:42Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * This is a fixed size cache that only has one operation <code>computeIfAbsent</code>, that is used\n+ * to retrieve, or store and compute the cached value.\n+ *\n+ * <p>If there is a hash collision, the cache uses double hashing two more times to try to find a\n+ * match or an unused slot.\n+ *\n+ * <p>The cache is thread safe, and assumes that the <code>Creator</code> passed into <code>\n+ * computeIfAbsent</code> is idempotent or otherwise you might not get back the value you expect\n+ * from a cache lookup.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class FixedSizeCache<K, V> {", "originalCommit": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NDMyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457544326", "bodyText": "To not depend on the agent-bootstrap module.", "author": "richardstartin", "createdAt": "2020-07-20T16:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NTk0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457545942", "bodyText": "Consider commenting in each copy that the code is a duplicate elsewhere with a TODO to consolidate.", "author": "tylerbenson", "createdAt": "2020-07-20T16:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDc2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457550761", "bodyText": "I don't want to seem defensive but I feel the same way when I encounter duplicated code. In fact making these changes I encountered a lot of duplication, whether it's open tracing or servlet or play or the N implementations we had for getting values out of a Map by key. Perhaps we should track the causes of duplication, what is it about the structure of this project which seems to encourage it?", "author": "richardstartin", "createdAt": "2020-07-20T16:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1ODQxMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457558413", "bodyText": "I'm fine with a comment.  I think we need to have a larger discussion about project structure before we proliferate more of container-utils, test-utils, thread-utils, and internal-api", "author": "randomanderson", "createdAt": "2020-07-20T16:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NjQxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457566414", "bodyText": "Done.", "author": "richardstartin", "createdAt": "2020-07-20T17:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNjY1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457526659", "bodyText": "This swaps the precedence.  In the previous version of the code, the attribute is considered before the header.  Also applies to servlet2/HttpServletRequestExtractAdapter", "author": "randomanderson", "createdAt": "2020-07-20T16:08:10Z", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.\n-     */\n-    final Object attribute = carrier.getAttribute(key);\n-    if (attribute instanceof String) {\n-      return (String) attribute;\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();\n+    while (headerNames.hasMoreElements()) {\n+      String header = headerNames.nextElement();\n+      if (!classifier.accept(header, carrier.getHeader(header))) {\n+        return;\n+      }\n+    }\n+    // TODO collapse these into one method with a lambda when JDK7 is dropped\n+    Enumeration<String> attributeNames = carrier.getAttributeNames();\n+    while (attributeNames.hasMoreElements()) {\n+      String name = attributeNames.nextElement();\n+      Object attribute = carrier.getAttribute(name);\n+      if (attribute instanceof String && !classifier.accept(name, (String) attribute)) {\n+        return;\n+      }\n     }\n-    return carrier.getHeader(key);", "originalCommit": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MzkyNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457543925", "bodyText": "No, the last one takes precedence here. So the attribute, as opposed to the header, if present, just as before.", "author": "richardstartin", "createdAt": "2020-07-20T16:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNjY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTI2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457539266", "bodyText": "This breaks JMS propagation to save ~70 bytes per message.  I'm not sure if its worth it.  There will be a flood of support requests as users upgrade producers before consumers.\nMy suggestion is to move this change into a separate pull request.  That way there can be proper discussion about how to go about this change: feature flags, supporting both versions, isolation of the performance difference, etc.", "author": "randomanderson", "createdAt": "2020-07-20T16:27:59Z", "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "diffHunk": "@@ -10,11 +10,9 @@\n \n   public static final MessageInjectAdapter SETTER = new MessageInjectAdapter();\n \n-  static final String DASH = \"__dash__\";\n-\n   @Override\n   public void set(final Message carrier, final String key, final String value) {\n-    final String propName = key.replace(\"-\", DASH);\n+    final String propName = key.replace('-', '$');", "originalCommit": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NTI0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457545245", "bodyText": "I agree that this should be addressed another way, but it should be addressed. I will remove the change from this PR, but leave the check for '$' in, to make it more likely that a consumer has upgraded by the time the publisher change is made.", "author": "richardstartin", "createdAt": "2020-07-20T16:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MzMyMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457553323", "bodyText": "The change has been removed from the publisher in the last commit.", "author": "richardstartin", "createdAt": "2020-07-20T16:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTI2Ng=="}], "type": "inlineReview"}, {"oid": "90d5e16f7bf43080e8a4150c34402cb2abb4f328", "url": "https://github.com/DataDog/dd-trace-java/commit/90d5e16f7bf43080e8a4150c34402cb2abb4f328", "message": "review comments, rollback JMS context key injection change", "committedDate": "2020-07-20T16:43:06Z", "type": "commit"}, {"oid": "9cf040bf7bb9af7d2816b91f990ceaa1abf88d68", "url": "https://github.com/DataDog/dd-trace-java/commit/9cf040bf7bb9af7d2816b91f990ceaa1abf88d68", "message": "add comment to explain duplication of FixedSizeCache", "committedDate": "2020-07-20T17:22:31Z", "type": "commit"}, {"oid": "9cf040bf7bb9af7d2816b91f990ceaa1abf88d68", "url": "https://github.com/DataDog/dd-trace-java/commit/9cf040bf7bb9af7d2816b91f990ceaa1abf88d68", "message": "add comment to explain duplication of FixedSizeCache", "committedDate": "2020-07-20T17:22:31Z", "type": "forcePushed"}]}