{"pr_number": 2072, "pr_title": "Add toHexStringPadded to DDId", "pr_createdAt": "2020-11-13T07:16:09Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2072", "timeline": [{"oid": "3a1e07231666a356e1582bf7e3fc9467f6c24784", "url": "https://github.com/DataDog/dd-trace-java/commit/3a1e07231666a356e1582bf7e3fc9467f6c24784", "message": "Add toHexStringPadded to DDId", "committedDate": "2020-11-13T07:18:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3ODQ4Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522778483", "bodyText": "If you make this a byte[] it would work better on newer JDKs", "author": "richardstartin", "createdAt": "2020-11-13T08:16:59Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/DDId.java", "diffHunk": "@@ -208,6 +209,36 @@ public String toHexString() {\n     return Long.toHexString(this.id);\n   }\n \n+  private static final char[] HEX_DIGITS = {\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n+  };\n+\n+  /**\n+   * Returns the zero padded hex representation, in lower case, of the unsigned 64 bit id. The size\n+   * will be rounded up to 16 or 32 characters. The hex {@code String} will NOT be cached.\n+   *\n+   * @param size the size in characters of the 0 padded String (rounded up to 16 or 32)\n+   * @return zero padded hex String\n+   */\n+  public String toHexStringPadded(int size) {\n+    if (size > 16) {\n+      size = 32;\n+    } else if (size < 16) {\n+      size = 16;\n+    }\n+    char[] chars = new char[size];", "originalCommit": "3a1e07231666a356e1582bf7e3fc9467f6c24784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4Mjk5NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522782994", "bodyText": "And tell the String the bytes are US_ASCII", "author": "richardstartin", "createdAt": "2020-11-13T08:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3ODQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5MzY5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522793690", "bodyText": "Thanks, I'll do that", "author": "bantonsson", "createdAt": "2020-11-13T08:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3ODQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc5NTg4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522795880", "bodyText": "Actually I just saw you can skip the negatives check if you claim they are ISO_8859_1 (which they are)", "author": "richardstartin", "createdAt": "2020-11-13T08:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3ODQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwMTA0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522801040", "bodyText": "Even better", "author": "bantonsson", "createdAt": "2020-11-13T08:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3ODQ4Mw=="}], "type": "inlineReview"}, {"oid": "6b4d223242e7f944c8fb96490152220e7b89662e", "url": "https://github.com/DataDog/dd-trace-java/commit/6b4d223242e7f944c8fb96490152220e7b89662e", "message": "Add toHexStringPadded to DDId", "committedDate": "2020-11-13T08:48:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxMDAxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522810017", "bodyText": "for maximum efficiency you could turn this in to a counted loop by counting the number of leading zeros and dividing it by 4.", "author": "richardstartin", "createdAt": "2020-11-13T08:54:09Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/DDId.java", "diffHunk": "@@ -208,6 +210,36 @@ public String toHexString() {\n     return Long.toHexString(this.id);\n   }\n \n+  private static final byte[] HEX_DIGITS = {\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n+  };\n+\n+  /**\n+   * Returns the zero padded hex representation, in lower case, of the unsigned 64 bit id. The size\n+   * will be rounded up to 16 or 32 characters. The hex {@code String} will NOT be cached.\n+   *\n+   * @param size the size in characters of the 0 padded String (rounded up to 16 or 32)\n+   * @return zero padded hex String\n+   */\n+  public String toHexStringPadded(int size) {\n+    if (size > 16) {\n+      size = 32;\n+    } else if (size < 16) {\n+      size = 16;\n+    }\n+    byte[] bytes = new byte[size];\n+    Arrays.fill(bytes, (byte) '0');\n+    int pos = bytes.length - 1;\n+    long remaining = this.id;\n+    while (remaining != 0 && pos >= 0) {", "originalCommit": "6b4d223242e7f944c8fb96490152220e7b89662e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgyOTg5NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522829895", "bodyText": "Just checked and it seems to make no difference \ud83d\udc4d", "author": "richardstartin", "createdAt": "2020-11-13T09:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxMDAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzMTc2Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522831762", "bodyText": "Maybe it would be even faster if the code was for (int i = 0; i < 16 - nibbleCount; i++) which also produce the correct result \ud83d\ude09", "author": "bantonsson", "createdAt": "2020-11-13T09:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxMDAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgzOTY4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522839684", "bodyText": "I did run some tests and found some errors, but found no performance improvements. Sorry if I led you down this path.", "author": "richardstartin", "createdAt": "2020-11-13T09:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxMDAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0MDI0Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2072#discussion_r522840247", "bodyText": "No worries.", "author": "bantonsson", "createdAt": "2020-11-13T09:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxMDAxNw=="}], "type": "inlineReview"}, {"oid": "68b51bf7add478c736ec3181c9d56caedbe60bd5", "url": "https://github.com/DataDog/dd-trace-java/commit/68b51bf7add478c736ec3181c9d56caedbe60bd5", "message": "Add toHexStringPadded to DDId", "committedDate": "2020-11-13T09:35:32Z", "type": "forcePushed"}, {"oid": "3b4f93f8403f2624d663c126cb693aaed8e9e29d", "url": "https://github.com/DataDog/dd-trace-java/commit/3b4f93f8403f2624d663c126cb693aaed8e9e29d", "message": "Add toHexStringPadded to DDId", "committedDate": "2020-11-13T09:51:30Z", "type": "commit"}, {"oid": "3b4f93f8403f2624d663c126cb693aaed8e9e29d", "url": "https://github.com/DataDog/dd-trace-java/commit/3b4f93f8403f2624d663c126cb693aaed8e9e29d", "message": "Add toHexStringPadded to DDId", "committedDate": "2020-11-13T09:51:30Z", "type": "forcePushed"}]}