{"pr_number": 1358, "pr_title": "PROF-1037: Capture thread CPU time elapsed in scope", "pr_createdAt": "2020-04-09T17:30:31Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1358", "timeline": [{"oid": "4d0d36e29ebd063b6938b8ae41b025f7a82f9da8", "url": "https://github.com/DataDog/dd-trace-java/commit/4d0d36e29ebd063b6938b8ae41b025f7a82f9da8", "message": "Initial implementation of thread cpu time per scope", "committedDate": "2020-04-09T17:16:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MDU1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r406370556", "bodyText": "nit this should either be before end, or startCpuTime should be before begin", "author": "mar-kolya", "createdAt": "2020-04-09T17:43:47Z", "path": "dd-trace-ot/jfr-openjdk/src/main/java/datadog/opentracing/jfr/openjdk/ScopeEvent.java", "diffHunk": "@@ -46,12 +53,16 @@\n   public void start() {\n     if (isEnabled()) {\n       begin();\n+      startCpuTime = ThreadCpuTime.get();\n     }\n   }\n \n   @Override\n   public void finish() {\n     end();\n+    if (startCpuTime > 0) {", "originalCommit": "4d0d36e29ebd063b6938b8ae41b025f7a82f9da8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTIwNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r406375204", "bodyText": "\ud83d\udc4d", "author": "jbachorik", "createdAt": "2020-04-09T17:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MDU1Ng=="}], "type": "inlineReview"}, {"oid": "9bd8d1499b048f8e5dc9b34068e261406f670f9f", "url": "https://github.com/DataDog/dd-trace-java/commit/9bd8d1499b048f8e5dc9b34068e261406f670f9f", "message": "Play nicely also with JVMs eagerly resolving constant pool symbols", "committedDate": "2020-04-09T18:55:21Z", "type": "commit"}, {"oid": "c9dad48a893bb758e9f6feb8535d76e42aa35611", "url": "https://github.com/DataDog/dd-trace-java/commit/c9dad48a893bb758e9f6feb8535d76e42aa35611", "message": "Do not include the time spent in handling ThreadCpuTime in event duration", "committedDate": "2020-04-14T12:16:50Z", "type": "commit"}, {"oid": "1511296fec73d5d367dcd6ad0ea13af25e63db90", "url": "https://github.com/DataDog/dd-trace-java/commit/1511296fec73d5d367dcd6ad0ea13af25e63db90", "message": "Do not use extra field in event", "committedDate": "2020-04-14T12:45:44Z", "type": "commit"}, {"oid": "7597450f8a740d1da45b6806fd365530ae23e951", "url": "https://github.com/DataDog/dd-trace-java/commit/7597450f8a740d1da45b6806fd365530ae23e951", "message": "Fix formatting", "committedDate": "2020-04-14T13:39:41Z", "type": "commit"}, {"oid": "551e3319817ce8e7e5a2ffdf8de26bfe14a89ec6", "url": "https://github.com/DataDog/dd-trace-java/commit/551e3319817ce8e7e5a2ffdf8de26bfe14a89ec6", "message": "Formatting", "committedDate": "2020-04-15T16:35:38Z", "type": "commit"}, {"oid": "d283b3ed7e748caad9f1346b9426f61c49608d90", "url": "https://github.com/DataDog/dd-trace-java/commit/d283b3ed7e748caad9f1346b9426f61c49608d90", "message": "Capture thread CPU time diff only when the event is about to commit", "committedDate": "2020-04-15T16:36:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4MTI1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409081256", "bodyText": "My impression is that scopes are locked to given thread - is there any point in this being volatile?", "author": "mar-kolya", "createdAt": "2020-04-15T19:26:31Z", "path": "dd-trace-ot/jfr-openjdk/src/main/java/datadog/opentracing/jfr/openjdk/ScopeEvent.java", "diffHunk": "@@ -38,13 +39,18 @@\n   @Label(\"Operation Name\")\n   private String operationName;\n \n+  @Label(\"Thread CPU Time\")\n+  @Timespan\n+  private volatile long cpuTime = 0L;", "originalCommit": "d283b3ed7e748caad9f1346b9426f61c49608d90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1ODM0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409358345", "bodyText": "If it is guaranteed that the event is created and committed from the same thread then this does not need to be volatile. I just wasn't sure there was such a guarantee.", "author": "jbachorik", "createdAt": "2020-04-16T08:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4MTI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4MzM4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409083388", "bodyText": "Please move this code into separate package/class like we have for jmx, profiling and the agent - or maybe reuse something existing.\nIn fact maybe this whole thing can go into initialize method.\nThis class is already way overloaded and no need for odd jmx interactions here", "author": "mar-kolya", "createdAt": "2020-04-15T19:30:25Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -262,6 +265,36 @@ private static synchronized void installDatadogTracer() {\n     }\n   }\n \n+  private static synchronized void initializeScopeThreadCpuTime() {\n+    if (AGENT_CLASSLOADER == null) {\n+      throw new IllegalStateException(\"Datadog agent should have been started already\");\n+    }\n+    try {\n+      final Class<?> threadCpuTimeClass =\n+          AGENT_CLASSLOADER.loadClass(\"datadog.trace.agent.ot.jfr.openjdk.ThreadCpuTime\");\n+      final Method initializeMethod =\n+          threadCpuTimeClass.getDeclaredMethod(\"initialize\", Callable.class);\n+      final ThreadMXBean mxBean = ManagementFactory.getThreadMXBean();\n+      initializeMethod.setAccessible(true);\n+      initializeMethod.invoke(\n+          null,\n+          new Callable<Long>() {\n+            @Override\n+            public Long call() throws Exception {\n+              return mxBean.getCurrentThreadCpuTime();\n+            }\n+          });", "originalCommit": "d283b3ed7e748caad9f1346b9426f61c49608d90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MDg0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409390843", "bodyText": "We (me and you) were discussing the class resolution rules in JVM and came to the conclusion that JLS does not forbid eagerly resolving all classes from the runtime constant pool - which would include JMX classes in ThreadCpuTime in this case - although it is quite improbable and none of the widely used JVM implementations are doing that.\nAnd since such resolution might cause JMX initialization at a wrong moment I came up with all this 'trampoline-like' stuff to be able to inject JMX code only when we are sure it is safe to do so. So, in short, this code can not go to ThreadCpuTime.initialize()\nNot sure what would be gained by putting this into a different package/class. The reflection code would be as complex as it is now - we would only add one level of indirection there.", "author": "jbachorik", "createdAt": "2020-04-16T08:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4MzM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MTkxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409671915", "bodyText": "This is now solved slightly differently. It is ok for ThreadCpuTime to stay in Java 7 source set.", "author": "jbachorik", "createdAt": "2020-04-16T16:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4MzM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4Mzk0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409083940", "bodyText": "Please add tests for this, especially considering that we already have ScopeEventTest", "author": "mar-kolya", "createdAt": "2020-04-15T19:31:29Z", "path": "dd-trace-ot/jfr-openjdk/src/main/java/datadog/opentracing/jfr/openjdk/ScopeEvent.java", "diffHunk": "@@ -53,6 +59,9 @@ public void start() {\n   public void finish() {\n     end();\n     if (shouldCommit()) {\n+      if (cpuTime > 0) {\n+        cpuTime = ThreadCpuTime.get() - cpuTime;\n+      }", "originalCommit": "d283b3ed7e748caad9f1346b9426f61c49608d90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MTUwOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409671509", "bodyText": "Added", "author": "jbachorik", "createdAt": "2020-04-16T16:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4Mzk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NDE1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409084153", "bodyText": "This class should be unit-tested", "author": "mar-kolya", "createdAt": "2020-04-15T19:31:52Z", "path": "dd-trace-ot/jfr-openjdk/src/main/java/datadog/opentracing/jfr/openjdk/ThreadCpuTime.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package datadog.opentracing.jfr.openjdk;\n+\n+import java.util.concurrent.Callable;\n+\n+public class ThreadCpuTime {\n+  private static volatile Callable<Long> CPU_TIME_PROVIDER =\n+      new Callable<Long>() {\n+        @Override\n+        public Long call() throws Exception {\n+          return Long.MIN_VALUE;\n+        }\n+      };\n+\n+  // must use Callable here since initialization is invoked from Agent which needs to be Java 7\n+  // compatible\n+  static void initialize(Callable<Long> provider) {\n+    CPU_TIME_PROVIDER = provider;\n+  }\n+\n+  static long get() {\n+    try {\n+      return CPU_TIME_PROVIDER.call();\n+    } catch (Exception ignored) {\n+    }\n+    return Long.MIN_VALUE;\n+  }\n+}", "originalCommit": "d283b3ed7e748caad9f1346b9426f61c49608d90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MTQxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409671417", "bodyText": "Done", "author": "jbachorik", "createdAt": "2020-04-16T16:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NDE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NTc3Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409085776", "bodyText": "nit: I think convention is to use ALL_CAPS only for constants.", "author": "mar-kolya", "createdAt": "2020-04-15T19:34:52Z", "path": "dd-trace-ot/jfr-openjdk/src/main/java/datadog/opentracing/jfr/openjdk/ThreadCpuTime.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package datadog.opentracing.jfr.openjdk;\n+\n+import java.util.concurrent.Callable;\n+\n+public class ThreadCpuTime {\n+  private static volatile Callable<Long> CPU_TIME_PROVIDER =", "originalCommit": "d283b3ed7e748caad9f1346b9426f61c49608d90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MDQ4Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409360487", "bodyText": "\ud83d\udc46", "author": "jbachorik", "createdAt": "2020-04-16T08:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NTc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MDU3Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409090573", "bodyText": "The whole datadog.trace.agent.ot.jfr.openjdk is compiled for java8 - so this will throw some form of ClassFormatError on java7 - please consider catching it separately like we do for profiling startup to provide more specific error message.\nAlternatively you could move whole datadog.trace.agent.ot.jfr.openjdk.ThreadCpuTime into java7 compatible module since it in of itself doesn't need java8.", "author": "mar-kolya", "createdAt": "2020-04-15T19:43:51Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -262,6 +265,36 @@ private static synchronized void installDatadogTracer() {\n     }\n   }\n \n+  private static synchronized void initializeScopeThreadCpuTime() {\n+    if (AGENT_CLASSLOADER == null) {\n+      throw new IllegalStateException(\"Datadog agent should have been started already\");\n+    }\n+    try {\n+      final Class<?> threadCpuTimeClass =\n+          AGENT_CLASSLOADER.loadClass(\"datadog.trace.agent.ot.jfr.openjdk.ThreadCpuTime\");\n+      final Method initializeMethod =\n+          threadCpuTimeClass.getDeclaredMethod(\"initialize\", Callable.class);\n+      final ThreadMXBean mxBean = ManagementFactory.getThreadMXBean();\n+      initializeMethod.setAccessible(true);\n+      initializeMethod.invoke(\n+          null,\n+          new Callable<Long>() {\n+            @Override\n+            public Long call() throws Exception {\n+              return mxBean.getCurrentThreadCpuTime();\n+            }\n+          });\n+      log.debug(\"Thread CPU time provider enabled\");\n+    } catch (final Throwable ex) {", "originalCommit": "d283b3ed7e748caad9f1346b9426f61c49608d90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1OTY1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409359652", "bodyText": "Let me think about the best place to put this. I was trying to find a good place without introducing new dependencies (which usually result in more transitive dependencies being pulled in and end up with something breaking compatibility ...).", "author": "jbachorik", "createdAt": "2020-04-16T08:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MDU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MjIyOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409672228", "bodyText": "I think I found the place. This is already outdated.", "author": "jbachorik", "createdAt": "2020-04-16T16:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MDU3Mw=="}], "type": "inlineReview"}, {"oid": "d579738a7704af951a9305649ba025870029dea6", "url": "https://github.com/DataDog/dd-trace-java/commit/d579738a7704af951a9305649ba025870029dea6", "message": "cpuTime field does not need to be volatile", "committedDate": "2020-04-16T08:30:27Z", "type": "commit"}, {"oid": "91a4146ab6fea04cd8b34608a5506d2be515d85b", "url": "https://github.com/DataDog/dd-trace-java/commit/91a4146ab6fea04cd8b34608a5506d2be515d85b", "message": "Improve test coverage", "committedDate": "2020-04-16T08:36:24Z", "type": "commit"}, {"oid": "f59cf0e53bf5358eed041da53abe4e39db15cf4c", "url": "https://github.com/DataDog/dd-trace-java/commit/f59cf0e53bf5358eed041da53abe4e39db15cf4c", "message": "Move ThreadCpuTime to Java 7 only location", "committedDate": "2020-04-16T09:02:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5OTMzMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409499330", "bodyText": "If we are not expecting something happening here all the time maybe we should consider logging it on debug level?", "author": "mar-kolya", "createdAt": "2020-04-16T11:59:30Z", "path": "dd-trace-ot/jfr-openjdk/src/main/java/datadog/opentracing/jfr/openjdk/ThreadCpuTime.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package datadog.opentracing.jfr.openjdk;\n+\n+import java.util.concurrent.Callable;\n+\n+public class ThreadCpuTime {\n+  private static volatile Callable<Long> CPU_TIME_PROVIDER =\n+      new Callable<Long>() {\n+        @Override\n+        public Long call() throws Exception {\n+          return Long.MIN_VALUE;\n+        }\n+      };\n+\n+  // must use Callable here since initialization is invoked from Agent which needs to be Java 7\n+  // compatible\n+  static void initialize(Callable<Long> provider) {\n+    CPU_TIME_PROVIDER = provider;\n+  }\n+\n+  static long get() {\n+    try {\n+      return CPU_TIME_PROVIDER.call();\n+    } catch (Exception ignored) {", "originalCommit": "d283b3ed7e748caad9f1346b9426f61c49608d90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2OTU4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r409669584", "bodyText": "This is gone now ...", "author": "jbachorik", "createdAt": "2020-04-16T15:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5OTMzMA=="}], "type": "inlineReview"}, {"oid": "e1350c25e23b81f32138a23ad9f2c78c6570934a", "url": "https://github.com/DataDog/dd-trace-java/commit/e1350c25e23b81f32138a23ad9f2c78c6570934a", "message": "Modify the mode of the CPU time provider initialization", "committedDate": "2020-04-16T14:32:21Z", "type": "commit"}, {"oid": "e41bafc32c7f6774db434e176dfc7d43d1d45ffa", "url": "https://github.com/DataDog/dd-trace-java/commit/e41bafc32c7f6774db434e176dfc7d43d1d45ffa", "message": "Do not initialize the thread if profiling is not enabled", "committedDate": "2020-04-16T14:52:52Z", "type": "commit"}, {"oid": "e43088e5bd10adf737873bd1d64252296a0c6f87", "url": "https://github.com/DataDog/dd-trace-java/commit/e43088e5bd10adf737873bd1d64252296a0c6f87", "message": "Make the cpu time assertion more lenient - some events might not have cpu time at all", "committedDate": "2020-04-16T14:58:07Z", "type": "commit"}, {"oid": "a992b167d053c565066d79a13be176b2c2e1795f", "url": "https://github.com/DataDog/dd-trace-java/commit/a992b167d053c565066d79a13be176b2c2e1795f", "message": "Allow more predictable cpu time check in the integration test", "committedDate": "2020-04-16T17:23:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE3MTE4MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410171181", "bodyText": "We do not use Config here - and IIRC there are awkward implications for doing that. Could you please move this check into datadog.trace.common.util.ThreadCpuTimeAccess#enableJmx?", "author": "mar-kolya", "createdAt": "2020-04-17T11:49:11Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -262,6 +263,33 @@ private static synchronized void installDatadogTracer() {\n     }\n   }\n \n+  private static synchronized void startJmx(final URL bootstrapURL) {\n+    startJmxFetch(bootstrapURL);\n+    /*\n+     * Initialize the thread cpu time provider only if profiling is enabled.\n+     * ATTENTION! If ever is the thread cpu time provider used outside of profiler this check should be revisited.\n+     */\n+    if (Config.get().isProfilingEnabled()) {", "originalCommit": "a992b167d053c565066d79a13be176b2c2e1795f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE3MzM0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410173345", "bodyText": "Well, I thought the idea was to avoid loading that class at all :)", "author": "jbachorik", "createdAt": "2020-04-17T11:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE3MTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5NDkyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410194924", "bodyText": "Nit: you do not really need instance there, instead you can call constructor here", "author": "mar-kolya", "createdAt": "2020-04-17T12:40:13Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/util/ThreadCpuTimeAccess.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package datadog.trace.common.util;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Thread CPU time accessor.<br>\n+ * This class abstracts away the actual method used to get the current thread CPU time.\n+ */\n+@Slf4j\n+public final class ThreadCpuTimeAccess {\n+  private static volatile ThreadCpuTimeProvider cpuTimeProvider = ThreadCpuTimeProvider.DEFAULT;\n+\n+  /**\n+   * Disable JMX based thread CPU time. Will flip back to the {@linkplain\n+   * ThreadCpuTimeProvider#DEFAULT} implementation.\n+   */\n+  public static void disableJmx() {\n+    log.debug(\"Disabling JMX thread CPU time provider\");\n+    cpuTimeProvider = ThreadCpuTimeProvider.DEFAULT;\n+  }\n+\n+  /** Enable JMX based thread CPU time */\n+  public static void enableJmx() {\n+    try {\n+      log.debug(\"Enabling JMX thread CPU time provider\");\n+      /*\n+       * Can not use direct class reference to JmxThreadCpuTimeProvider since on some rare JVM implementations\n+       * using eager class resolution that class could be resolved at the moment when ThreadCpuTime is being loaded,\n+       * potentially triggering j.u.l initialization which is potentially dangerous and can be done only at certain\n+       * point in time.\n+       * Using reflection should alleviate this problem - no class constant to resolve during class load. The JMX\n+       * thread cpu time provider will be loaded at exact moment when the reflection code is executed. Then it is up\n+       * to the caller to ensure that it is safe to use JMX.\n+       */\n+      cpuTimeProvider =\n+          (ThreadCpuTimeProvider)\n+              Class.forName(\"datadog.trace.common.util.JmxThreadCpuTimeProvider\")\n+                  .getField(\"INSTANCE\")\n+                  .get(null);", "originalCommit": "a992b167d053c565066d79a13be176b2c2e1795f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzNTc1NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410235755", "bodyText": "I don't want to create multiple instances if enableJmx() is called more times.", "author": "jbachorik", "createdAt": "2020-04-17T13:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5NDkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0NTEwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410245108", "bodyText": "\ud83e\udd37", "author": "mar-kolya", "createdAt": "2020-04-17T14:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5NDkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5NTY4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410195688", "bodyText": "You are creating instance of an abstract class: I think it is not so abstract then... I think this abstract can be dropped.", "author": "mar-kolya", "createdAt": "2020-04-17T12:41:38Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/util/ThreadCpuTimeProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package datadog.trace.common.util;\n+\n+/**\n+ * A pluggable thread CPU time provider used by {@linkplain ThreadCpuTimeAccess}. {@linkplain\n+ * ThreadCpuTimeAccess} may not use JMX classes (even via transitive dependencies) due to potential\n+ * race in j.u.l initialization. Therefore it uses an abstract {@linkplain ThreadCpuTimeProvider}\n+ * type to hold the actual implementation which may be switched between the {@linkplain\n+ * ThreadCpuTimeProvider#DEFAULT} and {@linkplain JmxThreadCpuTimeProvider} on-the-fly once JMX is\n+ * safe to use.\n+ */\n+abstract class ThreadCpuTimeProvider {", "originalCommit": "a992b167d053c565066d79a13be176b2c2e1795f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17c01c64b76a644bb9c41fdb6f9b08bacf986362", "url": "https://github.com/DataDog/dd-trace-java/commit/17c01c64b76a644bb9c41fdb6f9b08bacf986362", "message": "Address review comments", "committedDate": "2020-04-17T14:02:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MDg0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410260844", "bodyText": "Let's do this on debug level, please - this seems irrelevant for clients that have profiling disabled.", "author": "mar-kolya", "createdAt": "2020-04-17T14:29:03Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/util/ThreadCpuTimeAccess.java", "diffHunk": "@@ -8,19 +9,23 @@\n  */\n @Slf4j\n public final class ThreadCpuTimeAccess {\n-  private static volatile ThreadCpuTimeProvider cpuTimeProvider = ThreadCpuTimeProvider.DEFAULT;\n+  private static volatile ThreadCpuTimeProvider cpuTimeProvider = ThreadCpuTimeProvider.NONE;\n \n   /**\n    * Disable JMX based thread CPU time. Will flip back to the {@linkplain\n-   * ThreadCpuTimeProvider#DEFAULT} implementation.\n+   * ThreadCpuTimeProvider#NONE} implementation.\n    */\n   public static void disableJmx() {\n     log.debug(\"Disabling JMX thread CPU time provider\");\n-    cpuTimeProvider = ThreadCpuTimeProvider.DEFAULT;\n+    cpuTimeProvider = ThreadCpuTimeProvider.NONE;\n   }\n \n   /** Enable JMX based thread CPU time */\n   public static void enableJmx() {\n+    if (!Config.get().isProfilingEnabled()) {\n+      log.info(\"Will not enable thread CPU time access. Profiling is disabled.\");", "originalCommit": "17c01c64b76a644bb9c41fdb6f9b08bacf986362", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "25155204fa5fddbeac5d1d60c7d59a4f2cfadedf", "url": "https://github.com/DataDog/dd-trace-java/commit/25155204fa5fddbeac5d1d60c7d59a4f2cfadedf", "message": "Change log level", "committedDate": "2020-04-17T15:01:15Z", "type": "commit"}, {"oid": "ac70cad2041d8e545302e1b242165801ee625ed1", "url": "https://github.com/DataDog/dd-trace-java/commit/ac70cad2041d8e545302e1b242165801ee625ed1", "message": "Simplification in the integration smoke test", "committedDate": "2020-04-17T15:01:35Z", "type": "commit"}, {"oid": "ea821f0e763db75c72907fd00ba3f54e2399cb2d", "url": "https://github.com/DataDog/dd-trace-java/commit/ea821f0e763db75c72907fd00ba3f54e2399cb2d", "message": "Fix failing tests", "committedDate": "2020-04-17T15:54:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyODUxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410328514", "bodyText": "Any risk of finish() being called more than once?", "author": "tylerbenson", "createdAt": "2020-04-17T16:17:36Z", "path": "dd-trace-ot/jfr-openjdk/src/main/java/datadog/opentracing/jfr/openjdk/ScopeEvent.java", "diffHunk": "@@ -53,6 +61,9 @@ public void start() {\n   public void finish() {\n     end();\n     if (shouldCommit()) {\n+      if (cpuTime > 0) {\n+        cpuTime = ThreadCpuTimeAccess.getCurrentThreadCpuTime() - cpuTime;", "originalCommit": "ea821f0e763db75c72907fd00ba3f54e2399cb2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNDQ3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410334474", "bodyText": "It is called solely from ContinuableScope.close() so as long as that scope is not closed multiple times we are fine.", "author": "jbachorik", "createdAt": "2020-04-17T16:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyODUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2OTg0Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1358#discussion_r410369846", "bodyText": "I'd say that if this happens things will not blow up but data we produce would be off. But arguably this is the best we can do in this situation anyway.", "author": "mar-kolya", "createdAt": "2020-04-17T17:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyODUxNA=="}], "type": "inlineReview"}]}