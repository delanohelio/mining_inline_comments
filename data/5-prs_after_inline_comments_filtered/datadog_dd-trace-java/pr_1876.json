{"pr_number": 1876, "pr_title": "Port Reactor fixes from OTel", "pr_createdAt": "2020-09-16T15:00:59Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1876", "timeline": [{"oid": "3e85a2f53ed0a45cfc043333cb644d40e556677e", "url": "https://github.com/DataDog/dd-trace-java/commit/3e85a2f53ed0a45cfc043333cb644d40e556677e", "message": "Finish the port", "committedDate": "2020-09-16T19:23:35Z", "type": "forcePushed"}, {"oid": "9a4d875d184c7f4dcf452e46ae2e29593b032a09", "url": "https://github.com/DataDog/dd-trace-java/commit/9a4d875d184c7f4dcf452e46ae2e29593b032a09", "message": "not sure why java 8 requires this.....", "committedDate": "2020-09-23T19:19:46Z", "type": "forcePushed"}, {"oid": "5fd7700299d28d9e807d097fe3ec268e5cd7e04f", "url": "https://github.com/DataDog/dd-trace-java/commit/5fd7700299d28d9e807d097fe3ec268e5cd7e04f", "message": "not sure why java 8 requires this.....", "committedDate": "2020-09-23T19:36:51Z", "type": "forcePushed"}, {"oid": "d622b6555febd89940259ebfed947af07f3648bb", "url": "https://github.com/DataDog/dd-trace-java/commit/d622b6555febd89940259ebfed947af07f3648bb", "message": "Test won't work", "committedDate": "2020-09-24T13:45:19Z", "type": "forcePushed"}, {"oid": "400da2d065d60eea3fc79dc386bc66c7bcc826d7", "url": "https://github.com/DataDog/dd-trace-java/commit/400da2d065d60eea3fc79dc386bc66c7bcc826d7", "message": "hmmmmmm", "committedDate": "2020-09-29T19:23:37Z", "type": "forcePushed"}, {"oid": "d5c344d68007435a06f3470e007b3ee2d5a6e5da", "url": "https://github.com/DataDog/dd-trace-java/commit/d5c344d68007435a06f3470e007b3ee2d5a6e5da", "message": "Fix merge/rebase", "committedDate": "2020-10-01T15:41:50Z", "type": "forcePushed"}, {"oid": "d04013407b67ceb7bd01ac9b0629445d0e36b41c", "url": "https://github.com/DataDog/dd-trace-java/commit/d04013407b67ceb7bd01ac9b0629445d0e36b41c", "message": "Start from no continuations. Fix other things from here", "committedDate": "2020-10-06T15:04:02Z", "type": "forcePushed"}, {"oid": "baf105de8223d306f621214d1a414f4bbf2dff7b", "url": "https://github.com/DataDog/dd-trace-java/commit/baf105de8223d306f621214d1a414f4bbf2dff7b", "message": "Start from no continuations. Fix other things from here", "committedDate": "2020-10-06T15:16:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NTYyOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508755628", "bodyText": "Reverting changes here. Auto-formatter changed this when I was adding debug logging", "author": "devinsba", "createdAt": "2020-10-20T18:40:35Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -40,7 +40,7 @@\n     private final CoreTracer tracer;", "originalCommit": "a796b7192d04f15b678629faf62629b858ca834e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NTc3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508755779", "bodyText": "Reverting changes here. Auto-formatter changed this when I was adding debug logging", "author": "devinsba", "createdAt": "2020-10-20T18:40:43Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -79,7 +79,7 @@ public AgentScope activate(final AgentSpan span, final ScopeSource source) {\n ", "originalCommit": "a796b7192d04f15b678629faf62629b858ca834e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5750d3b3836d8bab290ec2dc1174f8f165fb6043", "url": "https://github.com/DataDog/dd-trace-java/commit/5750d3b3836d8bab290ec2dc1174f8f165fb6043", "message": "Put test back", "committedDate": "2020-10-20T18:52:19Z", "type": "forcePushed"}, {"oid": "cd7aa317a736c468b4877e3d12bc7dd3875084b9", "url": "https://github.com/DataDog/dd-trace-java/commit/cd7aa317a736c468b4877e3d12bc7dd3875084b9", "message": "unused var", "committedDate": "2020-10-21T14:06:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NDIyNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509384227", "bodyText": "Can we put REDIS_QUERY back in as the span name here?", "author": "richardstartin", "createdAt": "2020-10-21T15:26:05Z", "path": "dd-java-agent/instrumentation/lettuce-5/src/main/java8/datadog/trace/instrumentation/lettuce5/rx/LettuceMonoDualConsumer.java", "diffHunk": "@@ -17,20 +19,32 @@\n   private AgentSpan span = null;\n   private final RedisCommand command;\n   private final boolean finishSpanOnClose;\n+  private final AgentSpan parentSpan;\n \n   public LettuceMonoDualConsumer(final RedisCommand command, final boolean finishSpanOnClose) {\n     this.command = command;\n     this.finishSpanOnClose = finishSpanOnClose;\n+    parentSpan = activeSpan();\n   }\n \n   @Override\n   public void accept(final R r) {\n-    span = startSpan(REDIS_QUERY);\n-    DECORATE.afterStart(span);\n-    DECORATE.onCommand(span, command);\n-    if (finishSpanOnClose) {\n-      DECORATE.beforeFinish(span);\n-      span.finish();\n+    TraceScope parentScope = null;\n+    try {\n+      if (parentSpan != null) {\n+        parentScope = activateSpan(parentSpan);\n+      }\n+      span = startSpan(\"redis.query\");", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NjcwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509386706", "bodyText": "Since this will happen a lot with few distinct inputs can we wrap this string comparison in a ClassValue?", "author": "richardstartin", "createdAt": "2020-10-21T15:29:14Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingOperator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {\n+\n+  /**\n+   * Registers a hook that applies to every operator, propagating {@link Context} to downstream\n+   * callbacks to ensure spans in the {@link Context} are available throughout the lifetime of a\n+   * reactive stream. This should generally be called in a static initializer block in your\n+   * application.\n+   */\n+  public static void registerOnEachOperator() {\n+    Hooks.onEachOperator(TracingSubscriber.class.getName(), tracingLift());\n+  }\n+\n+  private static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingLift() {\n+    return Operators.lift(new Lifter<>());\n+  }\n+\n+  public static class Lifter<T>\n+      implements BiFunction<Scannable, CoreSubscriber<? super T>, CoreSubscriber<? super T>> {\n+\n+    @Override\n+    public CoreSubscriber<? super T> apply(\n+        final Scannable publisher, final CoreSubscriber<? super T> sub) {\n+      // if Flux/Mono #just, #empty, #error\n+      if (publisher instanceof Fuseable.ScalarCallable\n+          || publisher.getClass().getName().startsWith(\"reactor.core.Scannable$Attr$\")) {", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIxNjE4Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r510216182", "bodyText": "\ud83d\udc4d", "author": "devinsba", "createdAt": "2020-10-22T14:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NjcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5MjczNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509392736", "bodyText": "Can we change the span names back to the way they were - this improves serialisation performance.", "author": "richardstartin", "createdAt": "2020-10-21T15:37:07Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -2,77 +2,67 @@\n \n import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n-import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n-import static datadog.trace.instrumentation.springwebflux.client.HttpHeadersInjectAdapter.SETTER;\n import static datadog.trace.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n-import static datadog.trace.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.HTTP_REQUEST;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n-import datadog.trace.bootstrap.instrumentation.api.InstrumentationTags;\n-import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.util.List;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import reactor.core.CoreSubscriber;\n import reactor.core.publisher.Mono;\n \n+/**\n+ * Based on Spring Sleuth's Reactor instrumentation.\n+ * https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientBeanPostProcessor.java\n+ */\n public class WebClientTracingFilter implements ExchangeFilterFunction {\n-  private static final WebClientTracingFilter INSTANCE = new WebClientTracingFilter();\n-\n   public static void addFilter(final List<ExchangeFilterFunction> exchangeFilterFunctions) {\n     // Since the builder where we instrument the build function can be reused, we need\n     // to only add the filter once\n-    int index = exchangeFilterFunctions.indexOf(INSTANCE);\n-    if (index == 0) {\n-      return;\n-    }\n-    if (index > 0) {\n-      exchangeFilterFunctions.remove(index);\n-    }\n-    exchangeFilterFunctions.add(0, INSTANCE);\n+    exchangeFilterFunctions.removeIf(\n+        filterFunction -> filterFunction instanceof WebClientTracingFilter);\n+    exchangeFilterFunctions.add(0, new WebClientTracingFilter());\n   }\n \n   @Override\n   public Mono<ClientResponse> filter(final ClientRequest request, final ExchangeFunction next) {\n-    final AgentSpan span;\n-    if (activeSpan() != null) {\n-      span = startSpan(HTTP_REQUEST, activeSpan().context());\n-    } else {\n-      span = startSpan(HTTP_REQUEST);\n-    }\n-    span.setTag(Tags.SPAN_KIND, Tags.SPAN_KIND_CLIENT);\n-    span.setTag(InstrumentationTags.DD_MEASURED, true);\n-    DECORATE.afterStart(span);\n+    return new MonoWebClientTrace(request, next);\n+  }\n+\n+  public static final class MonoWebClientTrace extends Mono<ClientResponse> {\n+    final ExchangeFunction next;\n+    final ClientRequest request;\n \n-    try (final AgentScope scope = activateSpan(span)) {\n-      scope.setAsyncPropagation(true);\n-      final ClientRequest mutatedRequest =\n-          ClientRequest.from(request)\n-              .attribute(AgentSpan.class.getName(), span)\n-              .headers(httpHeaders -> propagate().inject(span, httpHeaders, SETTER))\n-              .build();\n-      DECORATE.onRequest(span, mutatedRequest);\n+    public MonoWebClientTrace(final ClientRequest request, final ExchangeFunction next) {\n+      this.next = next;\n+      this.request = request;\n+    }\n \n-      return next.exchange(mutatedRequest)\n-          .doOnSuccessOrError(\n-              (clientResponse, throwable) -> {\n-                if (throwable != null) {\n-                  DECORATE.onError(span, throwable);\n-                } else {\n-                  DECORATE.onResponse(span, clientResponse);\n-                }\n-                DECORATE.beforeFinish(span);\n-                span.finish();\n-              })\n-          .doOnCancel(\n-              () -> {\n-                DECORATE.onCancel(span);\n-                DECORATE.beforeFinish(span);\n-                span.finish();\n-              });\n+    @Override\n+    public void subscribe(final CoreSubscriber<? super ClientResponse> subscriber) {\n+      final AgentSpan span;\n+      if (activeSpan() != null) {\n+        span = startSpan(\"http.request\", activeSpan().context());", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ec6105e6743995dd0a42687ec84e4632cb8693dd", "url": "https://github.com/DataDog/dd-trace-java/commit/ec6105e6743995dd0a42687ec84e4632cb8693dd", "message": "Port reactor instrumentation updates from OTel", "committedDate": "2020-10-23T13:49:25Z", "type": "commit"}, {"oid": "ec6105e6743995dd0a42687ec84e4632cb8693dd", "url": "https://github.com/DataDog/dd-trace-java/commit/ec6105e6743995dd0a42687ec84e4632cb8693dd", "message": "Port reactor instrumentation updates from OTel", "committedDate": "2020-10-23T13:49:25Z", "type": "forcePushed"}]}