{"pr_number": 1960, "pr_title": "refactor FieldBackedProvider", "pr_createdAt": "2020-10-07T20:28:01Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1960", "timeline": [{"oid": "a9ef5930ee4af2ddb4f522b18de7241d83c6e681", "url": "https://github.com/DataDog/dd-trace-java/commit/a9ef5930ee4af2ddb4f522b18de7241d83c6e681", "message": "refactor FieldBackedProvider", "committedDate": "2020-10-07T20:30:16Z", "type": "forcePushed"}, {"oid": "cb1d772c5053e63fc26b15303eb2862b8f22e3e7", "url": "https://github.com/DataDog/dd-trace-java/commit/cb1d772c5053e63fc26b15303eb2862b8f22e3e7", "message": "refactor FieldBackedProvider", "committedDate": "2020-10-07T21:09:54Z", "type": "forcePushed"}, {"oid": "fc01a446939b0c5094662744edb1d47361acbed6", "url": "https://github.com/DataDog/dd-trace-java/commit/fc01a446939b0c5094662744edb1d47361acbed6", "message": "refactor FieldBackedProvider", "committedDate": "2020-10-07T21:46:10Z", "type": "commit"}, {"oid": "fc01a446939b0c5094662744edb1d47361acbed6", "url": "https://github.com/DataDog/dd-trace-java/commit/fc01a446939b0c5094662744edb1d47361acbed6", "message": "refactor FieldBackedProvider", "committedDate": "2020-10-07T21:46:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5Mjg2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1960#discussion_r501492866", "bodyText": "Sneaky...", "author": "bantonsson", "createdAt": "2020-10-08T07:07:26Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.BOOTSTRAP_CLASSLOADER;\n+\n+import datadog.trace.agent.tooling.HelperInjector;\n+import datadog.trace.agent.tooling.Utils;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.asm.AsmVisitorWrapper;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.dynamic.DynamicType;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.utility.JavaModule;\n+\n+final class ContextStoreUtils {\n+\n+  static AgentBuilder.Transformer wrapVisitor(final AsmVisitorWrapper visitor) {\n+    return new AgentBuilder.Transformer() {\n+      @Override\n+      public DynamicType.Builder<?> transform(\n+          final DynamicType.Builder<?> builder,\n+          final TypeDescription typeDescription,\n+          final ClassLoader classLoader,\n+          final JavaModule module) {\n+        return builder.visit(visitor);\n+      }\n+    };\n+  }\n+\n+  static Map<String, String> unpackContextStore(\n+      Map<ElementMatcher<ClassLoader>, Map<String, String>> matchedContextStores) {\n+    if (matchedContextStores.isEmpty()) {\n+      return Collections.emptyMap();\n+    } else if (matchedContextStores.size() == 1) {\n+      return matchedContextStores.entrySet().iterator().next().getValue();\n+    } else {\n+      Map<String, String> contextStore = new HashMap<>();\n+      for (Map.Entry<ElementMatcher<ClassLoader>, Map<String, String>> matcherAndStores :\n+          matchedContextStores.entrySet()) {\n+        contextStore.putAll(matcherAndStores.getValue());\n+      }\n+      return contextStore;\n+    }\n+  }\n+\n+  /** Get transformer that forces helper injection onto bootstrap classloader. */\n+  static AgentBuilder.Transformer bootstrapHelperInjector(\n+      final Collection<DynamicType.Unloaded<?>> types) {\n+    // TODO: Better to pass through the context of the Instrumenter\n+    return new AgentBuilder.Transformer() {\n+      // historical quirk - this used to be an anonymous class\n+      // in FieldBackedProvider and was called with getClass().getSimpleName()\n+      // which (unintentionally?) evaluated to an empty string - maintain this\n+      // behaviour", "originalCommit": "fc01a446939b0c5094662744edb1d47361acbed6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}