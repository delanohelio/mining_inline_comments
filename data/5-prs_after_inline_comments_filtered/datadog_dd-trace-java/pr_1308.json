{"pr_number": 1308, "pr_title": "Fix projectreactor instrumentation to keep span context connected", "pr_createdAt": "2020-03-11T17:13:41Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1308", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTY3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391171674", "bodyText": "These methods should be in a separate class... Advice classes should only be used for instrumentation.", "author": "tylerbenson", "createdAt": "2020-03-11T18:17:06Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/ReactorHooksAdvice.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopTraceScope;\n+import datadog.trace.context.TraceScope;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.asm.Advice;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+import reactor.util.context.Context;\n+\n+public class ReactorHooksAdvice {\n+  @Advice.OnMethodExit(suppress = Throwable.class)\n+  public static void postInit() {\n+    Hooks.onEachOperator(ReactorHooksAdvice.class.getName(), tracingOperator());\n+  }\n+\n+  public static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingOperator() {", "originalCommit": "cac7d215ee33faa0149aa178683a29f249019a0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzODM0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391838344", "bodyText": "Done, pushing up now", "author": "devinsba", "createdAt": "2020-03-12T19:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMzU5MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391303591", "bodyText": "This should prob be extendsClass now.", "author": "tylerbenson", "createdAt": "2020-03-11T22:20:19Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -42,21 +35,19 @@ public DefaultWebClientInstrumentation() {\n       \"datadog.trace.agent.decorator.HttpClientDecorator\",\n       packageName + \".SpringWebfluxHttpClientDecorator\",\n       packageName + \".HttpHeadersInjectAdapter\",\n-      packageName + \".TracingClientResponseSubscriber\",\n-      packageName + \".TracingClientResponseSubscriber$1\",\n-      packageName + \".TracingClientResponseMono\",\n+      packageName + \".WebClientTracingFilter\",\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(", "originalCommit": "f662c795fc19ccc7ccd17a580cf22df31eada5cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNDQ2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391304468", "bodyText": "Try to avoid safeHasSuperType now... only use it if you don't know whether the argument is a class or an interface.", "author": "tylerbenson", "createdAt": "2020-03-11T22:22:44Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/ReactorHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.springwebflux.client;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n+  public ReactorHttpClientInstrumentation() {\n+    super(\"spring-webflux\", \"spring-webflux-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"reactor.ipc.netty.http.client.HttpClient\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".ReactorHttpClientAdvice$Handler\"};\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"reactor.ipc.netty.http.client.HttpClient\"));", "originalCommit": "f662c795fc19ccc7ccd17a580cf22df31eada5cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5095a5204dfeb1b1f3d6cfa7e3867d0035634e13", "url": "https://github.com/DataDog/dd-trace-java/commit/5095a5204dfeb1b1f3d6cfa7e3867d0035634e13", "message": "Hmm, redis doesn't have the behavior I see from webclient", "committedDate": "2020-03-24T18:19:30Z", "type": "forcePushed"}, {"oid": "9da6500575acf88d9a719f7cbcd05cdcc48448cc", "url": "https://github.com/DataDog/dd-trace-java/commit/9da6500575acf88d9a719f7cbcd05cdcc48448cc", "message": "More self review", "committedDate": "2020-04-23T15:43:49Z", "type": "forcePushed"}, {"oid": "90c0e7269f93be9ceca98b8cd2e1a0b4ad3b307f", "url": "https://github.com/DataDog/dd-trace-java/commit/90c0e7269f93be9ceca98b8cd2e1a0b4ad3b307f", "message": "Ignore flaky tests", "committedDate": "2020-04-24T18:55:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMjU2OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414812569", "bodyText": "class names like this remind me that the way I feel about reactive, other people feel about java in general.", "author": "tylerbenson", "createdAt": "2020-04-24T19:29:37Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java/datadog/trace/instrumentation/reactor/core/ReactorHooksInstrumentation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHooksInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHooksInstrumentation() {\n+    super(\"reactor-core\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.core.publisher.Hooks\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingPublishers\",\n+      packageName + \".TracingPublishers$MonoTracingPublisher\",\n+      packageName + \".TracingPublishers$ParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$ConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$GroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableMonoTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableGroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableFluxTracingPublisher\",\n+      packageName + \".TracingSubscriber\",\n+      packageName + \".TracingSubscriber$UnifiedScope\",", "originalCommit": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNDY0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414814645", "bodyText": "nice.... isTypeInitializer()!  I've never used that one.", "author": "tylerbenson", "createdAt": "2020-04-24T19:33:33Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java/datadog/trace/instrumentation/reactor/core/ReactorHooksInstrumentation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHooksInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHooksInstrumentation() {\n+    super(\"reactor-core\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.core.publisher.Hooks\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingPublishers\",\n+      packageName + \".TracingPublishers$MonoTracingPublisher\",\n+      packageName + \".TracingPublishers$ParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$ConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$GroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableMonoTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableGroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableFluxTracingPublisher\",\n+      packageName + \".TracingSubscriber\",\n+      packageName + \".TracingSubscriber$UnifiedScope\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(isTypeInitializer(), packageName + \".ReactorHooksAdvice\");", "originalCommit": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNTI5NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414815295", "bodyText": "Nice comment!", "author": "tylerbenson", "createdAt": "2020-04-24T19:34:46Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */", "originalCommit": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNTQ4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414815484", "bodyText": "How noisy will this be when we have debug enabled?", "author": "tylerbenson", "createdAt": "2020-04-24T19:35:11Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */\n+  public static <T> Publisher<T> wrap(final Publisher<T> delegate) {\n+    AgentSpan span = activeSpan();\n+    if (span == null) {\n+      span = noopSpan();\n+    }\n+    log.debug(\"Lifting {} - {}\", delegate.getClass().getName(), delegate.toString());", "originalCommit": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzMDY0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415830648", "bodyText": "Ah, I missed this one when I went through and removed log statements. This one isn't actually that noisy", "author": "devinsba", "createdAt": "2020-04-27T13:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODY0Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414818647", "bodyText": "suggestion:  change this to a wrapSubscriber that does the instanceof check and returns either a newly or already wrapped instance.", "author": "tylerbenson", "createdAt": "2020-04-24T19:40:56Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */\n+  public static <T> Publisher<T> wrap(final Publisher<T> delegate) {\n+    AgentSpan span = activeSpan();\n+    if (span == null) {\n+      span = noopSpan();\n+    }\n+    log.debug(\"Lifting {} - {}\", delegate.getClass().getName(), delegate.toString());\n+\n+    // based on Operators.LiftFunction.apply in reactor 3.3.4\n+    if (delegate instanceof Fuseable) {\n+      if (delegate instanceof Mono) {\n+        return new FuseableMonoTracingPublisher<>(span, (Mono<T>) delegate);\n+      }\n+      if (delegate instanceof ParallelFlux) {\n+        return new FuseableParallelFluxTracingPublisher<>(span, (ParallelFlux<T>) delegate);\n+      }\n+      if (delegate instanceof ConnectableFlux) {\n+        return new FuseableConnectableFluxTracingPublisher<>(span, (ConnectableFlux<T>) delegate);\n+      }\n+      if (delegate instanceof GroupedFlux) {\n+        return new FuseableGroupedFluxTracingPublisher<>(span, (GroupedFlux<?, T>) delegate);\n+      }\n+      return new FuseableFluxTracingPublisher<>(span, (Flux<T>) delegate);\n+    } else {\n+      if (delegate instanceof Mono) {\n+        return new MonoTracingPublisher<>(span, (Mono<T>) delegate);\n+      }\n+      if (delegate instanceof ParallelFlux) {\n+        return new ParallelFluxTracingPublisher<>(span, (ParallelFlux<T>) delegate);\n+      }\n+      if (delegate instanceof ConnectableFlux) {\n+        return new ConnectableFluxTracingPublisher<>(span, (ConnectableFlux<T>) delegate);\n+      }\n+      if (delegate instanceof GroupedFlux) {\n+        return new GroupedFluxTracingPublisher<>(span, (GroupedFlux<?, T>) delegate);\n+      }\n+      return new FluxTracingPublisher<>(span, (Flux<T>) delegate);\n+    }\n+  }\n+\n+  static <T> boolean shouldWrapSubscriber(final CoreSubscriber<? super T> actual) {\n+    return !(actual instanceof TracingSubscriber);\n+  }", "originalCommit": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMDkyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414830924", "bodyText": "I assume there's no way to construct without the builder that might bypass the instrumentation?", "author": "tylerbenson", "createdAt": "2020-04-24T20:03:45Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -16,44 +15,36 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class DefaultWebClientInstrumentation extends Instrumenter.Default {\n+public class WebClientFilterInstrumentation extends Instrumenter.Default {\n \n-  public DefaultWebClientInstrumentation() {\n+  public WebClientFilterInstrumentation() {\n     super(\"spring-webflux\", \"spring-webflux-client\");\n   }\n \n   @Override\n   public ElementMatcher<ClassLoader> classLoaderMatcher() {\n     // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.reactive.function.client.ExchangeFunction\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(\n-        named(\"org.springframework.web.reactive.function.client.ExchangeFunction\"));\n+    return hasClassesNamed(\"org.springframework.web.reactive.function.client.WebClient\");\n   }\n \n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n       packageName + \".SpringWebfluxHttpClientDecorator\",\n       packageName + \".HttpHeadersInjectAdapter\",\n-      packageName + \".TracingClientResponseSubscriber\",\n-      packageName + \".TracingClientResponseSubscriber$1\",\n-      packageName + \".TracingClientResponseMono\",\n+      packageName + \".WebClientTracingFilter\",\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return extendsClass(\n+        named(\"org.springframework.web.reactive.function.client.WebClient$Builder\"));", "originalCommit": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNjAzNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415836036", "bodyText": "The constructor of the concrete implementation is package-private and takes the builder as an argument, and that constructor is called from build inside the concrete implementation of the builder. I guess to be more sure we would wrap it I could make this a method exit advice on the builder constructor. Though Spring has hidden these classes so it would be extremely unusual for someone to do this without the builder", "author": "devinsba", "createdAt": "2020-04-27T13:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMDkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1NDc5OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415854799", "bodyText": "So there isn't a way to set filters on a WebClient except through the builder so I'd say this is as safe as we can get", "author": "devinsba", "createdAt": "2020-04-27T14:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMDkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMjcxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414832714", "bodyText": "lifted \ud83e\udd41", "author": "tylerbenson", "createdAt": "2020-04-24T20:07:07Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "diffHunk": "@@ -29,21 +38,103 @@ public static String parseOperationName(final Object handler) {\n     return operationName;\n   }\n \n+  public static <T> Mono<T> setPublisherSpan(final Mono<T> mono, final AgentSpan span) {\n+    return mono.<T>transform(finishSpanNextOrError(span));\n+  }\n+\n+  /**\n+   * Idea for this has been lifted from https://github.com/reactor/reactor-core/issues/947. Newer", "originalCommit": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMzg1NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414833854", "bodyText": "Do we need to put anything back into scope here?  Maybe the span's parent?", "author": "tylerbenson", "createdAt": "2020-04-24T20:09:22Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "diffHunk": "@@ -29,21 +38,103 @@ public static String parseOperationName(final Object handler) {\n     return operationName;\n   }\n \n+  public static <T> Mono<T> setPublisherSpan(final Mono<T> mono, final AgentSpan span) {\n+    return mono.<T>transform(finishSpanNextOrError(span));\n+  }\n+\n+  /**\n+   * Idea for this has been lifted from https://github.com/reactor/reactor-core/issues/947. Newer\n+   * versions of reactor-core have easier way to access context but we want to support older\n+   * versions.\n+   */\n+  public static <T> Function<? super Publisher<T>, ? extends Publisher<T>> finishSpanNextOrError(\n+      final AgentSpan span) {\n+    return Operators.lift(\n+        (scannable, subscriber) -> new SpanFinishingSubscriber<>(subscriber, span));\n+  }\n+\n   public static void finishSpanIfPresent(\n       final ServerWebExchange exchange, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) exchange.getAttributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (exchange != null) {\n+      finishSpanIfPresentInAttributes(exchange.getAttributes(), throwable);\n+    }\n   }\n \n   public static void finishSpanIfPresent(\n       final ServerRequest serverRequest, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) serverRequest.attributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (serverRequest != null) {\n+      finishSpanIfPresentInAttributes(serverRequest.attributes(), throwable);\n+    }\n   }\n \n   public static void finishSpanIfPresent(\n       final ClientRequest clientRequest, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) clientRequest.attributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (clientRequest != null) {\n+      finishSpanIfPresentInAttributes(clientRequest.attributes(), throwable);\n+    }\n+  }\n+\n+  private static void finishSpanIfPresentInAttributes(\n+      final Map<String, Object> attributes, final Throwable throwable) {\n+\n+    final AgentSpan span = (AgentSpan) attributes.remove(SPAN_ATTRIBUTE);\n+    finishSpanIfPresent(span, throwable);\n+  }\n+\n+  static void finishSpanIfPresent(final AgentSpan span, final Throwable throwable) {\n+    if (span != null) {\n+      if (throwable != null) {\n+        span.setError(true);\n+        span.addThrowable(throwable);\n+      }\n+      span.finish();\n+    }\n+  }\n+\n+  public static class SpanFinishingSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+    private final AgentSpan span;\n+    private final Context context;\n+\n+    public SpanFinishingSubscriber(\n+        final CoreSubscriber<? super T> subscriber, final AgentSpan span) {\n+      this.subscriber = subscriber;\n+      this.span = span;\n+      context = subscriber.currentContext().put(AgentSpan.class, span);\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription s) {\n+      try (final AgentScope scope = activateSpan(span, false)) {\n+        scope.setAsyncPropagation(true);\n+        subscriber.onSubscribe(s);\n+      }\n+    }\n+\n+    @Override\n+    public void onNext(final T t) {\n+      try (final AgentScope scope = activateSpan(span, false)) {\n+        scope.setAsyncPropagation(true);\n+        subscriber.onNext(t);\n+      }\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+      finishSpanIfPresent(span, t);\n+      subscriber.onError(t);\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+      finishSpanIfPresent(span, null);\n+      subscriber.onComplete();\n+    }", "originalCommit": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MzA0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415863048", "bodyText": "This code already existed, I just moved it. I feel like it should be working as expected since the onComplete() will very likely just be calling a TracingSubscriber instance which will change the scope", "author": "devinsba", "createdAt": "2020-04-27T14:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMzg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxODA4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416618088", "bodyText": "I suspect this might be causing the netty client test failure but I'm not sure why", "author": "devinsba", "createdAt": "2020-04-28T13:35:54Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java", "diffHunk": "@@ -85,7 +86,7 @@ public TraceScope activeScope() {\n     if (scope instanceof TraceScope) {\n       return (TraceScope) scope;\n     } else {\n-      return null;\n+      return AgentTracer.noopTraceScope();", "originalCommit": "64127a6542dd05398fd788561d83a38aaf8289f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2289cae23bb46efb515ad537e52dd4ffc6626d0", "url": "https://github.com/DataDog/dd-trace-java/commit/a2289cae23bb46efb515ad537e52dd4ffc6626d0", "message": "Reactor fixes", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "5800ee7545d9c14e7a9a399e6d3a2a7d2ee33b6d", "url": "https://github.com/DataDog/dd-trace-java/commit/5800ee7545d9c14e7a9a399e6d3a2a7d2ee33b6d", "message": "Lettuce fixes", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "7cad41113a9f52feda9755c8fb02461a874223cf", "url": "https://github.com/DataDog/dd-trace-java/commit/7cad41113a9f52feda9755c8fb02461a874223cf", "message": "Webflux fixes", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "b5aa19ad07f753540ba4b8d316fda92cc394753f", "url": "https://github.com/DataDog/dd-trace-java/commit/b5aa19ad07f753540ba4b8d316fda92cc394753f", "message": "Ignore flaky tests", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "b6e691792f8b6823201996a9619d6227d58a746f", "url": "https://github.com/DataDog/dd-trace-java/commit/b6e691792f8b6823201996a9619d6227d58a746f", "message": "Most of the code review fixes. Just need to fix the test", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "8444432bb7b0b1e9b8dbabcb7546bb014f4bea2b", "url": "https://github.com/DataDog/dd-trace-java/commit/8444432bb7b0b1e9b8dbabcb7546bb014f4bea2b", "message": "Fix callback test in http client", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "a28c4828400a029246f38cecad5d893d015030b8", "url": "https://github.com/DataDog/dd-trace-java/commit/a28c4828400a029246f38cecad5d893d015030b8", "message": "Make test less flaky and fix build on java 7", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "da4700983f73ccc98574c3512991e29a0f3699a4", "url": "https://github.com/DataDog/dd-trace-java/commit/da4700983f73ccc98574c3512991e29a0f3699a4", "message": "I can't believe how long it took me to find a single line issue...", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "436c2937f03422c0a61fcb94eccbe1933c4eeefc", "url": "https://github.com/DataDog/dd-trace-java/commit/436c2937f03422c0a61fcb94eccbe1933c4eeefc", "message": "Verify spans finish in the right order", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "e73a50916f912b85dfcdb71258818969978b9a8e", "url": "https://github.com/DataDog/dd-trace-java/commit/e73a50916f912b85dfcdb71258818969978b9a8e", "message": "Assertion doesn't work on some http clients", "committedDate": "2020-04-28T15:21:54Z", "type": "commit"}, {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc", "url": "https://github.com/DataDog/dd-trace-java/commit/d206d3be83e1fb4041798736aca3b279f19417bc", "message": "Attempt to fix the netty 4.0 and 4.1 client tests fixed", "committedDate": "2020-04-28T15:21:54Z", "type": "forcePushed"}, {"oid": "915b5f6ad38bf07eb0cadb6ff88d19f3f3ac76e2", "url": "https://github.com/DataDog/dd-trace-java/commit/915b5f6ad38bf07eb0cadb6ff88d19f3f3ac76e2", "message": "Attempt to fix the netty 4.0 and 4.1 client tests fixed", "committedDate": "2020-04-28T18:22:12Z", "type": "commit"}, {"oid": "915b5f6ad38bf07eb0cadb6ff88d19f3f3ac76e2", "url": "https://github.com/DataDog/dd-trace-java/commit/915b5f6ad38bf07eb0cadb6ff88d19f3f3ac76e2", "message": "Attempt to fix the netty 4.0 and 4.1 client tests fixed", "committedDate": "2020-04-28T18:22:12Z", "type": "forcePushed"}, {"oid": "8a9d7d95dc61132d7c72e0534d5efe0e0d984d89", "url": "https://github.com/DataDog/dd-trace-java/commit/8a9d7d95dc61132d7c72e0534d5efe0e0d984d89", "message": "Result of over the shoulder with Tyler and some nice long todo messages", "committedDate": "2020-04-29T16:27:58Z", "type": "commit"}]}