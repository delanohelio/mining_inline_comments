{"pr_number": 1927, "pr_title": "Field inject sql into PreparedStatement, avoid WeakMap in JDBCMaps", "pr_createdAt": "2020-09-29T11:29:03Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1927", "timeline": [{"oid": "3949b29451c9146e142d72f9c5b6f5ee1a2989e8", "url": "https://github.com/DataDog/dd-trace-java/commit/3949b29451c9146e142d72f9c5b6f5ee1a2989e8", "message": "bounded cache for UTF-8 sql, move connection weakmap cleanup inline", "committedDate": "2020-09-29T10:29:32Z", "type": "commit"}, {"oid": "432faed553d152f557215d720c7c265eca57755c", "url": "https://github.com/DataDog/dd-trace-java/commit/432faed553d152f557215d720c7c265eca57755c", "message": "use field injection to store sql in preparedstatement, which avoids an unbounded collection and background cleanup", "committedDate": "2020-09-29T11:30:45Z", "type": "forcePushed"}, {"oid": "712525a93ef614f8f27c863a9a654181e1456b69", "url": "https://github.com/DataDog/dd-trace-java/commit/712525a93ef614f8f27c863a9a654181e1456b69", "message": "avoid lookup and reinjection if prepared statement is reused", "committedDate": "2020-09-29T11:58:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY1OTUzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1927#discussion_r496659533", "bodyText": "\ud83d\udc4d", "author": "bantonsson", "createdAt": "2020-09-29T12:01:17Z", "path": "dd-java-agent/instrumentation/jdbc/src/main/java/datadog/trace/instrumentation/jdbc/ConnectionInstrumentation.java", "diffHunk": "@@ -58,11 +59,14 @@ public ConnectionInstrumentation() {\n     @Advice.OnMethodExit(suppress = Throwable.class)\n     public static void addDBInfo(\n         @Advice.Argument(0) final String sql, @Advice.Return final PreparedStatement statement) {\n-      // Sometimes the prepared statement is not reused, but the underlying String is reused, so\n-      // check if we have seen this String before\n-      UTF8BytesString utf8Sql = JDBCMaps.preparedStatementsSql.computeIfAbsent(sql, UTF8_ENCODE);\n-      InstrumentationContext.get(PreparedStatement.class, UTF8BytesString.class)\n-          .put(statement, utf8Sql);\n+      ContextStore<PreparedStatement, UTF8BytesString> contextStore =\n+          InstrumentationContext.get(PreparedStatement.class, UTF8BytesString.class);\n+      if (null == contextStore.get(statement)) {", "originalCommit": "712525a93ef614f8f27c863a9a654181e1456b69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "39a14eba6b7e3e1034fd0b126cd75e363fb898f7", "url": "https://github.com/DataDog/dd-trace-java/commit/39a14eba6b7e3e1034fd0b126cd75e363fb898f7", "message": "use field injection to store sql in preparedstatement, which avoids an unbounded collection and background cleanup", "committedDate": "2020-09-29T12:23:17Z", "type": "commit"}, {"oid": "1bbaef815e0c41bc63cc1e0a184b22015ac98926", "url": "https://github.com/DataDog/dd-trace-java/commit/1bbaef815e0c41bc63cc1e0a184b22015ac98926", "message": "avoid lookup and reinjection if prepared statement is reused", "committedDate": "2020-09-29T12:23:17Z", "type": "commit"}, {"oid": "1bbaef815e0c41bc63cc1e0a184b22015ac98926", "url": "https://github.com/DataDog/dd-trace-java/commit/1bbaef815e0c41bc63cc1e0a184b22015ac98926", "message": "avoid lookup and reinjection if prepared statement is reused", "committedDate": "2020-09-29T12:23:17Z", "type": "forcePushed"}, {"oid": "3baf8b84b0a60b26c618d56954939cfb2ae9ace5", "url": "https://github.com/DataDog/dd-trace-java/commit/3baf8b84b0a60b26c618d56954939cfb2ae9ace5", "message": "move JDBCMaps into JDBCDecorator to save a class load", "committedDate": "2020-09-29T12:31:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NjA1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1927#discussion_r496756059", "bodyText": "Should we add a computeIfAbsent to contextStore instead?", "author": "tylerbenson", "createdAt": "2020-09-29T14:18:33Z", "path": "dd-java-agent/instrumentation/jdbc/src/main/java/datadog/trace/instrumentation/jdbc/ConnectionInstrumentation.java", "diffHunk": "@@ -57,14 +60,14 @@ public ConnectionInstrumentation() {\n     @Advice.OnMethodExit(suppress = Throwable.class)\n     public static void addDBInfo(\n         @Advice.Argument(0) final String sql, @Advice.Return final PreparedStatement statement) {\n-      // Sometimes the prepared statement is not reused, but the underlying String is reused, so\n-      // check if we have seen this String before\n-      UTF8BytesString utf8Sql = JDBCMaps.preparedStatementsSql.get(sql);\n-      if (utf8Sql == null) {\n-        utf8Sql = UTF8BytesString.createWeak(sql);\n-        JDBCMaps.preparedStatementsSql.put(sql, utf8Sql);\n+      ContextStore<PreparedStatement, UTF8BytesString> contextStore =\n+          InstrumentationContext.get(PreparedStatement.class, UTF8BytesString.class);\n+      if (null == contextStore.get(statement)) {\n+        // Sometimes the prepared statement is not reused, but the underlying String is reused, so\n+        // check if we have seen this String before\n+        UTF8BytesString utf8Sql = PREPARED_STATEMENTS_SQL.computeIfAbsent(sql, UTF8_ENCODE);\n+        contextStore.putIfAbsent(statement, utf8Sql);", "originalCommit": "3baf8b84b0a60b26c618d56954939cfb2ae9ace5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3NDI1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1927#discussion_r496774253", "bodyText": "Yes I think that's a good idea. We should also look at the way the synchronization works there because we could improve it.", "author": "richardstartin", "createdAt": "2020-09-29T14:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NjA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3Nzk1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1927#discussion_r496777953", "bodyText": "Yeah, I think that the field version could do away with synchronized and use atomics instead.", "author": "bantonsson", "createdAt": "2020-09-29T14:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NjA1OQ=="}], "type": "inlineReview"}]}