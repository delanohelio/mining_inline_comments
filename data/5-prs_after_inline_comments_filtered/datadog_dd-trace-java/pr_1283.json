{"pr_number": 1283, "pr_title": "Add Classloader precheck to expensive matchers.", "pr_createdAt": "2020-03-03T18:30:13Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1283", "timeline": [{"oid": "7702b0585b8c98b08a489b40d9f2de4a68186a4a", "url": "https://github.com/DataDog/dd-trace-java/commit/7702b0585b8c98b08a489b40d9f2de4a68186a4a", "message": "Add Classloader precheck to expensive matchers.\n\nBenchmark results:\n```\nBenchmark                                                             Mode  Cnt   Score   Error  Units\nClassRetransformingBenchmark.WithAgent.testTracedRetransform          avgt       21.933          ms/op\nClassRetransformingBenchmark.WithAgent.testUntracedRetransform        avgt        6.171          ms/op\nClassRetransformingBenchmark.WithAgentMaster.testTracedRetransform    avgt       22.129          ms/op\nClassRetransformingBenchmark.WithAgentMaster.testUntracedRetransform  avgt        6.517          ms/op\nClassRetransformingBenchmark.testTracedRetransform                    avgt        0.876          ms/op\nClassRetransformingBenchmark.testUntracedRetransform                  avgt        0.867          ms/op\n```\n\nI also saw a small improvement in application startup time.", "committedDate": "2020-03-03T18:29:10Z", "type": "commit"}, {"oid": "042f49d800b4ea60ad8c27ae43925e1ac218f41d", "url": "https://github.com/DataDog/dd-trace-java/commit/042f49d800b4ea60ad8c27ae43925e1ac218f41d", "message": "fix muzzle and retry tests", "committedDate": "2020-03-03T19:03:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNzYzNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1283#discussion_r387407636", "bodyText": "The double negative is a bit hard to read.  I think a utility method would help clarity greatly.", "author": "dougqh", "createdAt": "2020-03-04T01:55:45Z", "path": "dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/RequestInstrumentation.java", "diffHunk": "@@ -25,6 +27,12 @@ public RequestInstrumentation() {\n     super(\"aws-sdk\");\n   }\n \n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return not(classLoaderHasNoResources(\"com/amazonaws/AmazonWebServiceRequest.class\"));", "originalCommit": "042f49d800b4ea60ad8c27ae43925e1ac218f41d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwODEzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1283#discussion_r387408133", "bodyText": "One observation from the field injection optimization.  Often our classLoaderMatchers are really more aim at matching a library or an API, but we don't really have that as a concept in the code.\nI think this change also suggest that we should have some notion of a Library go which Instrumenters refer.", "author": "dougqh", "createdAt": "2020-03-04T01:57:56Z", "path": "dd-java-agent/instrumentation/hibernate/core-4.3/src/main/java/datadog/trace/instrumentation/hibernate/core/v4_3/ProcedureCallInstrumentation.java", "diffHunk": "@@ -43,6 +45,12 @@ public ProcedureCallInstrumentation() {\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return not(classLoaderHasNoResources(\"org/hibernate/Session.class\"));", "originalCommit": "042f49d800b4ea60ad8c27ae43925e1ac218f41d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwODQ1OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1283#discussion_r387408458", "bodyText": "I think this speaks to the fact that we should make a classLoaderHasResources.  Then this could be a single matcher.", "author": "dougqh", "createdAt": "2020-03-04T01:59:27Z", "path": "dd-java-agent/instrumentation/jedis-1.4/src/main/java/datadog/trace/instrumentation/jedis/JedisInstrumentation.java", "diffHunk": "@@ -33,7 +34,9 @@ public JedisInstrumentation() {\n \n   @Override\n   public ElementMatcher<ClassLoader> classLoaderMatcher() {\n-    return classLoaderHasNoResources(\"redis/clients/jedis/commands/ProtocolCommand.class\");\n+    return classLoaderHasNoResources(\"redis/clients/jedis/commands/ProtocolCommand.class\")", "originalCommit": "042f49d800b4ea60ad8c27ae43925e1ac218f41d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNzkyMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1283#discussion_r387637921", "bodyText": "Yeah, it would be nice to have a comment here explaining what's going on", "author": "mar-kolya", "createdAt": "2020-03-04T12:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwODQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzNjc0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1283#discussion_r387636740", "bodyText": "Double negatives are somewhat hard to read", "author": "mar-kolya", "createdAt": "2020-03-04T12:33:31Z", "path": "dd-java-agent/instrumentation/apache-httpasyncclient-4/src/main/java/datadog/trace/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientInstrumentation.java", "diffHunk": "@@ -38,6 +40,12 @@ public ApacheHttpAsyncClientInstrumentation() {\n     super(\"httpasyncclient\", \"apache-httpasyncclient\");\n   }\n \n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return not(classLoaderHasNoResources(\"org/apache/http/nio/client/HttpAsyncClient.class\"));", "originalCommit": "042f49d800b4ea60ad8c27ae43925e1ac218f41d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}