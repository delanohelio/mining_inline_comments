{"pr_number": 1497, "pr_title": "avoid hashing tags when they can't be in the table", "pr_createdAt": "2020-05-27T08:26:59Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1497", "timeline": [{"oid": "eeed6661a3d234bdafdcf023e7f2d71128fe967a", "url": "https://github.com/DataDog/dd-trace-java/commit/eeed6661a3d234bdafdcf023e7f2d71128fe967a", "message": "avoid hashing tags when they can't be in the table", "committedDate": "2020-05-26T11:09:30Z", "type": "commit"}, {"oid": "58fdde92ee3527f0f75be883d042fb668883d177", "url": "https://github.com/DataDog/dd-trace-java/commit/58fdde92ee3527f0f75be883d042fb668883d177", "message": "Merge branch 'master' into richardstartin/avoid-hashing-tags", "committedDate": "2020-05-27T08:54:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MDA1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431050052", "bodyText": "I can't find where this is used", "author": "bantonsson", "createdAt": "2020-05-27T11:35:14Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -13,6 +13,7 @@\n import java.nio.charset.Charset;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Set;", "originalCommit": "58fdde92ee3527f0f75be883d042fb668883d177", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MzAyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431053024", "bodyText": "maxKeyLength takes a set as a parameter.", "author": "richardstartin", "createdAt": "2020-05-27T11:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3MTgxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431071817", "bodyText": "Doh!  I blame dizziness from new glasses \ud83d\ude09", "author": "bantonsson", "createdAt": "2020-05-27T12:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MDA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MDI1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431050259", "bodyText": "Nice. Interning the empty String.", "author": "bantonsson", "createdAt": "2020-05-27T11:35:46Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -34,39 +35,72 @@\n   // startup\n   private static final Map<String, byte[]> UTF8_INTERN_KEYS_TABLE = new HashMap<>(256);\n   private static final Map<String, byte[]> UTF8_INTERN_TAGS_TABLE = new HashMap<>(256);\n+  private static final int MAX_TAGS_LENGTH;\n+  private static final long[] TAGS_FIRST_CHAR_IS_PRESENT = new long[4];\n \n   static {\n-    internConstantsUTF8(Tags.class, UTF8_INTERN_KEYS_TABLE);\n-    internConstantsUTF8(InstrumentationTags.class, UTF8_INTERN_KEYS_TABLE);\n-    internConstantsUTF8(DDSpanTypes.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(DDComponents.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(DDSpanNames.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(CommonTagValues.class, UTF8_INTERN_TAGS_TABLE);\n+    internConstantsUTF8(Tags.class, UTF8_INTERN_KEYS_TABLE, null);\n+    internConstantsUTF8(InstrumentationTags.class, UTF8_INTERN_KEYS_TABLE, null);\n+    internConstantsUTF8(DDSpanTypes.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(DDComponents.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(DDSpanNames.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(CommonTagValues.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    UTF8_INTERN_TAGS_TABLE.put(\"\", new byte[0]);", "originalCommit": "58fdde92ee3527f0f75be883d042fb668883d177", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MTQwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431051408", "bodyText": "Maybe it would be easier to read if the empty tag always returned true here?", "author": "bantonsson", "createdAt": "2020-05-27T11:38:15Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -34,39 +35,72 @@\n   // startup\n   private static final Map<String, byte[]> UTF8_INTERN_KEYS_TABLE = new HashMap<>(256);\n   private static final Map<String, byte[]> UTF8_INTERN_TAGS_TABLE = new HashMap<>(256);\n+  private static final int MAX_TAGS_LENGTH;\n+  private static final long[] TAGS_FIRST_CHAR_IS_PRESENT = new long[4];\n \n   static {\n-    internConstantsUTF8(Tags.class, UTF8_INTERN_KEYS_TABLE);\n-    internConstantsUTF8(InstrumentationTags.class, UTF8_INTERN_KEYS_TABLE);\n-    internConstantsUTF8(DDSpanTypes.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(DDComponents.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(DDSpanNames.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(CommonTagValues.class, UTF8_INTERN_TAGS_TABLE);\n+    internConstantsUTF8(Tags.class, UTF8_INTERN_KEYS_TABLE, null);\n+    internConstantsUTF8(InstrumentationTags.class, UTF8_INTERN_KEYS_TABLE, null);\n+    internConstantsUTF8(DDSpanTypes.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(DDComponents.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(DDSpanNames.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(CommonTagValues.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    UTF8_INTERN_TAGS_TABLE.put(\"\", new byte[0]);\n+    MAX_TAGS_LENGTH = maxKeyLength(UTF8_INTERN_TAGS_TABLE.keySet());\n   }\n \n   public static byte[] getKeyBytesUTF8(String value) {\n     return UTF8_INTERN_KEYS_TABLE.get(value);\n   }\n \n   public static byte[] getTagBytesUTF8(String value) {\n-    return UTF8_INTERN_TAGS_TABLE.get(value);\n+    return tagMaybeInterned(value) ? UTF8_INTERN_TAGS_TABLE.get(value) : null;\n   }\n \n-  private static void internConstantsUTF8(Class<?> clazz, Map<String, byte[]> map) {\n+  private static void internConstantsUTF8(\n+      Class<?> clazz, Map<String, byte[]> map, long[] firstByteBitmap) {\n     for (Field field : clazz.getDeclaredFields()) {\n       if (Modifier.isStatic(field.getModifiers())\n           && Modifier.isPublic(field.getModifiers())\n           && field.getType() == String.class) {\n         try {\n-          intern(map, (String) field.get(null), UTF_8);\n+          intern(map, (String) field.get(null), UTF_8, firstByteBitmap);\n         } catch (IllegalAccessException e) {\n           // won't happen\n         }\n       }\n     }\n   }\n \n-  private static void intern(Map<String, byte[]> table, String value, Charset encoding) {\n-    table.put(value, value.getBytes(encoding));\n+  private static void intern(\n+      Map<String, byte[]> table, String value, Charset encoding, long[] firstByteBitmap) {\n+    byte[] bytes = value.getBytes(encoding);\n+    if (null != firstByteBitmap && bytes.length > 0) {\n+      int bit = bytes[0] & 0xFF;\n+      firstByteBitmap[bit >>> 6] |= 1L << bit;\n+    }\n+    table.put(value, bytes);\n+  }\n+\n+  private static boolean tagMaybeInterned(final String tag) {\n+    if (null == tag || tag.length() > MAX_TAGS_LENGTH) {\n+      return false;\n+    }\n+    if (!tag.isEmpty()) {", "originalCommit": "58fdde92ee3527f0f75be883d042fb668883d177", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1NTU0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431055545", "bodyText": "you might be right.", "author": "richardstartin", "createdAt": "2020-05-27T11:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MTQwOA=="}], "type": "inlineReview"}]}