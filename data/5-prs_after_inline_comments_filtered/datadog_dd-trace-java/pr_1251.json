{"pr_number": 1251, "pr_title": "Fail fast in the matcher, let the debug outputs use the cache", "pr_createdAt": "2020-02-24T17:22:46Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1251", "timeline": [{"oid": "e65177a143bc75e1015cdf6f241465a6679fe4b4", "url": "https://github.com/DataDog/dd-trace-java/commit/e65177a143bc75e1015cdf6f241465a6679fe4b4", "message": "Fail fast in the matcher, let the debug outputs use the cache", "committedDate": "2020-02-24T19:39:17Z", "type": "commit"}, {"oid": "75af71584c5abf2ddca9139d52083f862bc2b1d9", "url": "https://github.com/DataDog/dd-trace-java/commit/75af71584c5abf2ddca9139d52083f862bc2b1d9", "message": "Refactor an agent usage, and fix logic issue", "committedDate": "2020-02-24T19:39:17Z", "type": "commit"}, {"oid": "af67dfa72034ed4b4f4daa605380be5654e534e2", "url": "https://github.com/DataDog/dd-trace-java/commit/af67dfa72034ed4b4f4daa605380be5654e534e2", "message": "Need to cache the boolean. The list can be taken later as debug is expected to be slower", "committedDate": "2020-02-24T19:39:17Z", "type": "commit"}, {"oid": "af67dfa72034ed4b4f4daa605380be5654e534e2", "url": "https://github.com/DataDog/dd-trace-java/commit/af67dfa72034ed4b4f4daa605380be5654e534e2", "message": "Need to cache the boolean. The list can be taken later as debug is expected to be slower", "committedDate": "2020-02-24T19:39:17Z", "type": "forcePushed"}, {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca", "url": "https://github.com/DataDog/dd-trace-java/commit/5ebc13cafa89038fb3d7bf388124d98ceff133ca", "message": "Increase performance on java 8", "committedDate": "2020-02-24T22:10:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTEyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r383909124", "bodyText": "I know this was pre-existing and I'm being nit-picky, but I'd prefer isEmpty.\nFor some collections, size is actually O(n).  For lazily filtered collection, isEmpty might also be O(n) but isEmpty is never worse.\nThat said since it was pre-existing, I don't really mind if we leave this as is.", "author": "dougqh", "createdAt": "2020-02-25T14:23:43Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -42,14 +41,40 @@ public ReferenceMatcher(final String[] helperClassNames, final Reference[] refer\n   }\n \n   /**\n+   * Matcher used by ByteBuddy. Fails fast and only caches empty results, or complete results\n+   *\n    * @param loader Classloader to validate against (or null for bootstrap)\n    * @return true if all references match the classpath of loader\n    */\n-  public boolean matches(final ClassLoader loader) {\n-    return getMismatchedReferenceSources(loader).isEmpty();\n+  public boolean matches(ClassLoader loader) {\n+    if (loader == BOOTSTRAP_LOADER) {\n+      loader = Utils.getBootstrapProxy();\n+    }\n+\n+    return mismatchCache.computeIfAbsent(loader, this);\n+  }\n+\n+  @Override\n+  public Boolean get(final ClassLoader loader) {\n+    final List<Mismatch> mismatches = new ArrayList<>();\n+\n+    for (final Reference reference : references) {\n+      if (mismatches.size() > 0) {", "originalCommit": "5ebc13cafa89038fb3d7bf388124d98ceff133ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTc2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r383909761", "bodyText": "My original thought was that we'd short-circuit here as well; however...\nWe seem like we're already reaching a point of diminishing returns here and that will definitely make the code more complicated.", "author": "dougqh", "createdAt": "2020-02-25T14:24:46Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -42,14 +41,40 @@ public ReferenceMatcher(final String[] helperClassNames, final Reference[] refer\n   }\n \n   /**\n+   * Matcher used by ByteBuddy. Fails fast and only caches empty results, or complete results\n+   *\n    * @param loader Classloader to validate against (or null for bootstrap)\n    * @return true if all references match the classpath of loader\n    */\n-  public boolean matches(final ClassLoader loader) {\n-    return getMismatchedReferenceSources(loader).isEmpty();\n+  public boolean matches(ClassLoader loader) {\n+    if (loader == BOOTSTRAP_LOADER) {\n+      loader = Utils.getBootstrapProxy();\n+    }\n+\n+    return mismatchCache.computeIfAbsent(loader, this);\n+  }\n+\n+  @Override\n+  public Boolean get(final ClassLoader loader) {\n+    final List<Mismatch> mismatches = new ArrayList<>();\n+\n+    for (final Reference reference : references) {\n+      if (mismatches.size() > 0) {\n+        return false;\n+      }\n+      // Don't reference-check helper classes.\n+      // They will be injected by the instrumentation's HelperInjector.\n+      if (!helperClassNames.contains(reference.getClassName())) {\n+        mismatches.addAll(checkMatch(reference, loader));\n+      }", "originalCommit": "5ebc13cafa89038fb3d7bf388124d98ceff133ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxMTExNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r383911114", "bodyText": "That's a good point, now that I switched the cache to boolean, there's really no need to collect all the mismatches", "author": "devinsba", "createdAt": "2020-02-25T14:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTc2MQ=="}], "type": "inlineReview"}, {"oid": "3b78d4593fbf559b50369a360f078bd0cebfa8fa", "url": "https://github.com/DataDog/dd-trace-java/commit/3b78d4593fbf559b50369a360f078bd0cebfa8fa", "message": "Don't need to collect mismatches in the critical path", "committedDate": "2020-02-25T14:36:00Z", "type": "commit"}, {"oid": "2441ca3332cf856d69599642c1decb85811bb49b", "url": "https://github.com/DataDog/dd-trace-java/commit/2441ca3332cf856d69599642c1decb85811bb49b", "message": "No more arraylist(0)", "committedDate": "2020-02-25T15:02:53Z", "type": "commit"}, {"oid": "815bd0e9f65e5ddc7a3c4acfb2f9f11f85bc159c", "url": "https://github.com/DataDog/dd-trace-java/commit/815bd0e9f65e5ddc7a3c4acfb2f9f11f85bc159c", "message": "Fix comment", "committedDate": "2020-02-25T15:31:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNDY1MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384134650", "bodyText": "final", "author": "lpriima", "createdAt": "2020-02-25T21:24:20Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {", "originalCommit": "2441ca3332cf856d69599642c1decb85811bb49b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNzE5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384517192", "bodyText": "\ud83d\udc4d", "author": "devinsba", "createdAt": "2020-02-26T14:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNDY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNzA4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384137084", "bodyText": "isn't this field always empty set ? where do we add elements to it ?", "author": "lpriima", "createdAt": "2020-02-25T21:29:21Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n+  private final WeakMap<ClassLoader, Boolean> mismatchCache = newWeakMap();\n   private final Reference[] references;\n   private final Set<String> helperClassNames;", "originalCommit": "2441ca3332cf856d69599642c1decb85811bb49b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MDI4MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384170281", "bodyText": "Given that it is final, it must be assigned in the constructor.", "author": "dougqh", "createdAt": "2020-02-25T22:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNzA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNDYwMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384514602", "bodyText": "It is set to a list of the args in the constructor(s)", "author": "devinsba", "createdAt": "2020-02-26T14:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNzA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzODc0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384138740", "bodyText": "private ?", "author": "lpriima", "createdAt": "2020-02-25T21:32:46Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -82,11 +99,12 @@ public boolean matches(final ClassLoader loader) {\n    * @param loader\n    * @return A list of mismatched sources. A list of size 0 means the reference matches the class.\n    */\n-  public static List<Reference.Mismatch> checkMatch(Reference reference, ClassLoader loader) {\n+  public static List<Reference.Mismatch> checkMatch(", "originalCommit": "2441ca3332cf856d69599642c1decb85811bb49b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNjkzMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384516930", "bodyText": "Sure", "author": "devinsba", "createdAt": "2020-02-26T14:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzODc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzgxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r385433811", "bodyText": "still not private?", "author": "lpriima", "createdAt": "2020-02-27T23:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzODc0MA=="}], "type": "inlineReview"}, {"oid": "30e1d56023dc49634a6e3eb664922d66713801d0", "url": "https://github.com/DataDog/dd-trace-java/commit/30e1d56023dc49634a6e3eb664922d66713801d0", "message": "Address comments", "committedDate": "2020-02-26T14:14:49Z", "type": "commit"}]}