{"pr_number": 1365, "pr_title": "Grizzly-http and grizzly-client instrumentation", "pr_createdAt": "2020-04-13T16:03:24Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1365", "timeline": [{"oid": "2c3202299d504d2cdd2cd0e27252bf7acd89a1a2", "url": "https://github.com/DataDog/dd-trace-java/commit/2c3202299d504d2cdd2cd0e27252bf7acd89a1a2", "message": "generalize client instrumentation and remove references to mule classes", "committedDate": "2020-04-14T22:02:11Z", "type": "forcePushed"}, {"oid": "a12c5e0dede087767c00c01a026fa88ce18dfc42", "url": "https://github.com/DataDog/dd-trace-java/commit/a12c5e0dede087767c00c01a026fa88ce18dfc42", "message": "generalize client instrumentation and remove references to mule classes", "committedDate": "2020-04-14T23:19:40Z", "type": "forcePushed"}, {"oid": "bb0824605821a5b188aed2a5586737ccb6e83b7a", "url": "https://github.com/DataDog/dd-trace-java/commit/bb0824605821a5b188aed2a5586737ccb6e83b7a", "message": "generalize client instrumentation and remove references to mule classes", "committedDate": "2020-04-14T23:24:42Z", "type": "forcePushed"}, {"oid": "0898b097d7674546bc956a2408e6065d9b76d608", "url": "https://github.com/DataDog/dd-trace-java/commit/0898b097d7674546bc956a2408e6065d9b76d608", "message": "add initial tests for client and server instrumentation", "committedDate": "2020-04-16T19:59:48Z", "type": "forcePushed"}, {"oid": "87e0e1fc46d8929b557246e3dd4f4d1c30c2a363", "url": "https://github.com/DataDog/dd-trace-java/commit/87e0e1fc46d8929b557246e3dd4f4d1c30c2a363", "message": "create inject and extract adapter, and close server span after response is sent to client", "committedDate": "2020-04-17T00:50:14Z", "type": "forcePushed"}, {"oid": "5e26ea10b0cb174a6475ace2a06c0807805e6d0d", "url": "https://github.com/DataDog/dd-trace-java/commit/5e26ea10b0cb174a6475ace2a06c0807805e6d0d", "message": "update client instrumentation and tests", "committedDate": "2020-04-19T19:30:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNjYwNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r411416605", "bodyText": "Executor instrumentation was skipped for these four executors. FixedThreadPool, specifically, is instantiated by GrizzlyExecutorService after HttpServerFilter receives a request. QueueLimitedThreadPool is created if a FixedThreadPool cannot be created. Fixed, QueueLimited, and Sync all extend AbstractThreadPool. Would it make more sense to just add AbstractThreadPool to the whitelist?", "author": "heathkd", "createdAt": "2020-04-20T14:19:05Z", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java", "diffHunk": "@@ -81,7 +81,11 @@ public AbstractExecutorInstrumentation(final String... additionalNames) {\n         \"kotlinx.coroutines.scheduling.CoroutineScheduler\",\n         \"org.eclipse.jetty.util.thread.QueuedThreadPool\",\n         \"org.eclipse.jetty.util.thread.ReservedThreadExecutor\",\n+        \"org.glassfish.grizzly.threadpool.AbstractThreadPool\",\n+        \"org.glassfish.grizzly.threadpool.FixedThreadPool\",\n         \"org.glassfish.grizzly.threadpool.GrizzlyExecutorService\",\n+        \"org.glassfish.grizzly.threadpool.QueueLimitedThreadPool\",\n+        \"org.glassfish.grizzly.threadpool.SyncThreadPool\",", "originalCommit": "2bc66578607b14b082cae9cdffd49622ac4f4a5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNzIzNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r411427234", "bodyText": "These executors were added to the whitelist to help resolve this issue: when a request is made to the server that then triggers a network request from the client, two traces are created instead of a single trace with the server span as the parent and the client span as the child. However, the problem still persists. Do I need to check that no executors related to the client have been skipped?", "author": "heathkd", "createdAt": "2020-04-20T14:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNjYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxODIzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r411418232", "bodyText": "Does the span need to be activated here? Should a scope be created considering it will be closed at the end of the function.", "author": "heathkd", "createdAt": "2020-04-20T14:21:09Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/client/ClientRequestAdvice.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package datadog.trace.instrumentation.mulehttpconnector.client;\n+\n+import com.ning.http.client.AsyncCompletionHandler;\n+import com.ning.http.client.AsyncHandler;\n+import com.ning.http.client.FluentCaseInsensitiveStringsMap;\n+import com.ning.http.client.Request;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.mulehttpconnector.client.ClientDecorator.DECORATE;\n+import static datadog.trace.instrumentation.mulehttpconnector.client.InjectAdapter.SETTER;\n+\n+public class ClientRequestAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This final Object source,\n+      @Advice.Argument(0) final Request request,\n+      @Advice.Argument(1) final AsyncHandler<?> handler) {\n+    final AgentSpan span = startSpan(\"http.request\");\n+    final AgentScope scope = activateSpan(span, false);\n+\n+    DECORATE.afterStart(span);\n+    DECORATE.onRequest(span, request);\n+    propagate().inject(span, request, SETTER);\n+\n+    InstrumentationContext.get(AsyncCompletionHandler.class, AgentSpan.class)\n+        .put((AsyncCompletionHandler) handler, span);\n+    scope.close();", "originalCommit": "2bc66578607b14b082cae9cdffd49622ac4f4a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxOTUxNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r411419516", "bodyText": "This is in-line with the comment in ClientRequestAdvice. Should the span be reactivated here?", "author": "heathkd", "createdAt": "2020-04-20T14:22:41Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/client/ClientResponseAdvice.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package datadog.trace.instrumentation.mulehttpconnector.client;\n+\n+import com.ning.http.client.AsyncCompletionHandler;\n+import com.ning.http.client.Response;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.instrumentation.mulehttpconnector.client.ClientDecorator.DECORATE;\n+\n+public class ClientResponseAdvice {\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void onExit(\n+      @Advice.This final AsyncCompletionHandler handler,\n+      @Advice.Argument(0) final Response response,\n+      @Advice.Thrown final Throwable throwable) {\n+\n+    final ContextStore<AsyncCompletionHandler, AgentSpan> contextStore =\n+        InstrumentationContext.get(AsyncCompletionHandler.class, AgentSpan.class);\n+    final AgentSpan span = contextStore.get(handler);\n+    final AgentScope scope = activateSpan(span, true);", "originalCommit": "2bc66578607b14b082cae9cdffd49622ac4f4a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjQ3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r411422470", "bodyText": "Classes in the \"clientV2\" package can be ignored during review. Please review the classes in the \"client\" package instead. I was experimenting with slightly different instrumentation for the client.", "author": "heathkd", "createdAt": "2020-04-20T14:26:22Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/clientV2/ClientV2Advice.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package datadog.trace.instrumentation.mulehttpconnector.clientV2;", "originalCommit": "2bc66578607b14b082cae9cdffd49622ac4f4a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjU4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r411422580", "bodyText": "Classes in the \"clientV2\" package can be ignored during review. Please review the classes in the \"client\" package instead. I was experimenting with slightly different instrumentation for the client.", "author": "heathkd", "createdAt": "2020-04-20T14:26:30Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/clientV2/ClientV2Decorator.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package datadog.trace.instrumentation.mulehttpconnector.clientV2;", "originalCommit": "2bc66578607b14b082cae9cdffd49622ac4f4a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMjczOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r411422739", "bodyText": "Classes in the \"clientV2\" package can be ignored during review. Please review the classes in the \"client\" package instead. I was experimenting with slightly different instrumentation for the client.", "author": "heathkd", "createdAt": "2020-04-20T14:26:41Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/clientV2/ClientV2Instrumentation.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package datadog.trace.instrumentation.mulehttpconnector.clientV2;", "originalCommit": "2bc66578607b14b082cae9cdffd49622ac4f4a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyOTY5NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r411429694", "bodyText": "When a request is made to the server that then triggers a network request from the client, two traces are created instead of a single trace with the server span as the parent and the client span as the child. I have set asyncPropagation to true, but I have also closed the scope. Would that result in the disconnected server and client spans?", "author": "heathkd", "createdAt": "2020-04-20T14:35:33Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/server/ServerAdvice.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package datadog.trace.instrumentation.mulehttpconnector.server;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+import org.glassfish.grizzly.filterchain.FilterChainContext;\n+import org.glassfish.grizzly.http.HttpContent;\n+import org.glassfish.grizzly.http.HttpHeader;\n+import org.glassfish.grizzly.http.HttpRequestPacket;\n+import org.glassfish.grizzly.http.HttpResponsePacket;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.mulehttpconnector.server.ExtractAdapter.GETTER;\n+import static datadog.trace.instrumentation.mulehttpconnector.server.ServerDecorator.DECORATE;\n+import static datadog.trace.instrumentation.mulehttpconnector.server.TraceCompletionListener.LISTENER;\n+\n+public class ServerAdvice {\n+  @Advice.OnMethodExit(suppress = Throwable.class)\n+  public static void onExit(\n+      @Advice.This final Object source, @Advice.Argument(0) final FilterChainContext ctx) {\n+\n+    if (!(ctx.getMessage() instanceof HttpContent)) {\n+      return;\n+    }\n+\n+    final HttpContent httpContent = ctx.getMessage();\n+    final HttpHeader httpHeader = httpContent.getHttpHeader();\n+\n+    if (httpHeader instanceof HttpRequestPacket) {\n+      final HttpRequestPacket httpRequest = (HttpRequestPacket) httpHeader;\n+      final HttpResponsePacket httpResponse = httpRequest.getResponse();\n+\n+      final AgentSpan.Context parentContext = propagate().extract(httpRequest, GETTER);\n+      final AgentSpan span = startSpan(\"mule.http.server\", parentContext);\n+\n+      final AgentScope scope = activateSpan(span, false);\n+      scope.setAsyncPropagation(true);", "originalCommit": "2bc66578607b14b082cae9cdffd49622ac4f4a5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "858f717374acb6221fa04bd66ce8223fc7c2485c", "url": "https://github.com/DataDog/dd-trace-java/commit/858f717374acb6221fa04bd66ce8223fc7c2485c", "message": "change component name of client instrumentation to include grizzly", "committedDate": "2020-04-21T14:09:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzQ0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r414197444", "bodyText": "The span is activated and the scope is explicitly closed. However, the logs point to an error where the tracer is attempting to close a specific scope while the current scope is \"null\". This code may be the cause for that error.", "author": "heathkd", "createdAt": "2020-04-23T23:47:00Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/filterchain/FilterchainAdvice.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package datadog.trace.instrumentation.mulehttpconnector.filterchain;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+import org.glassfish.grizzly.filterchain.FilterChainContext;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.instrumentation.mulehttpconnector.ContextAttributes.SPAN;\n+\n+public class FilterchainAdvice {\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(@Advice.Argument(0) final FilterChainContext ctx) {\n+\n+    if (ctx.getAttributes().getAttribute(SPAN) == null || activeScope() != null) {\n+      return null;\n+    }\n+\n+    final AgentScope scope =\n+        activateSpan((AgentSpan) ctx.getAttributes().getAttribute(SPAN), false);", "originalCommit": "6b16f0536ad3f6393b688d393e08a32304a175e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32928ecd2f4162a4fbb97cf5749dd7bf663f030d", "url": "https://github.com/DataDog/dd-trace-java/commit/32928ecd2f4162a4fbb97cf5749dd7bf663f030d", "message": "set-up instrumentation module", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "b940c76810ef0be348aa298f21febf71e8ce1737", "url": "https://github.com/DataDog/dd-trace-java/commit/b940c76810ef0be348aa298f21febf71e8ce1737", "message": "update decorate with request and response objects", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "104148463cf9d24bbf943f849d44986ad87decc2", "url": "https://github.com/DataDog/dd-trace-java/commit/104148463cf9d24bbf943f849d44986ad87decc2", "message": "initial HttpListener instrumentation", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "c08b1cc64e611f6d8d44e802f1c03572f17e9457", "url": "https://github.com/DataDog/dd-trace-java/commit/c08b1cc64e611f6d8d44e802f1c03572f17e9457", "message": "initial HttpRequester instrumentation", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "6860ad0579382f51ce747c2f26ed69fa6454a475", "url": "https://github.com/DataDog/dd-trace-java/commit/6860ad0579382f51ce747c2f26ed69fa6454a475", "message": "create client span from mule http client", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "75e2c47f9c1198ad271f705dd554945005090940", "url": "https://github.com/DataDog/dd-trace-java/commit/75e2c47f9c1198ad271f705dd554945005090940", "message": "remove http listener instrumentation - this will be handled in server span", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "40f4c0fcd4a896c29052ff8a82a0c6954e86e99b", "url": "https://github.com/DataDog/dd-trace-java/commit/40f4c0fcd4a896c29052ff8a82a0c6954e86e99b", "message": "reorganize and rename client instrumentation classes", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "0a4ad739efd9cf0135650147471f6a217076ffa6", "url": "https://github.com/DataDog/dd-trace-java/commit/0a4ad739efd9cf0135650147471f6a217076ffa6", "message": "add server span instrumentation", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "86b83ec03ce4c0978f16932ab0aa3cb30c42ea98", "url": "https://github.com/DataDog/dd-trace-java/commit/86b83ec03ce4c0978f16932ab0aa3cb30c42ea98", "message": "change class to instrument to HttpServerFilter\n\nThis class finishes processing ctx.message into an HttpContent object from which the request and response can be accessed.", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "544a7c6198b9fc7fe30b10c27c53abb991ab1bda", "url": "https://github.com/DataDog/dd-trace-java/commit/544a7c6198b9fc7fe30b10c27c53abb991ab1bda", "message": "experiment with creating the client span from HttpClientFilter", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "d2991d068304b5dbd975777ccf438718d540ad2e", "url": "https://github.com/DataDog/dd-trace-java/commit/d2991d068304b5dbd975777ccf438718d540ad2e", "message": "generalize client instrumentation and remove references to mule classes", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "641b1be94919f3415f1b6d8db3cd4ce21f94234c", "url": "https://github.com/DataDog/dd-trace-java/commit/641b1be94919f3415f1b6d8db3cd4ce21f94234c", "message": "add initial tests for client and server instrumentation", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "2cbdbc58e47cdb917da310dc797d774ca4fc5dae", "url": "https://github.com/DataDog/dd-trace-java/commit/2cbdbc58e47cdb917da310dc797d774ca4fc5dae", "message": "create inject and extract adapter, and close server span after response is sent to client", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "069694359dd9837a42a804cfa29795009daa1ba6", "url": "https://github.com/DataDog/dd-trace-java/commit/069694359dd9837a42a804cfa29795009daa1ba6", "message": "update client instrumentation and tests", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "820964841c1fd0e1a498dbda29d09f075208883b", "url": "https://github.com/DataDog/dd-trace-java/commit/820964841c1fd0e1a498dbda29d09f075208883b", "message": "update instrumentation and add executors to whitelist", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "29d70a1bbf037e1c931e58a9f68afb02a23ba843", "url": "https://github.com/DataDog/dd-trace-java/commit/29d70a1bbf037e1c931e58a9f68afb02a23ba843", "message": "change naming of server spans and update server tests", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "4de6394534068b3f77838e1088c17b04444d276c", "url": "https://github.com/DataDog/dd-trace-java/commit/4de6394534068b3f77838e1088c17b04444d276c", "message": "change component name of client instrumentation to include grizzly", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "fdd622979b8060033642988f59a2897a69f6ceb5", "url": "https://github.com/DataDog/dd-trace-java/commit/fdd622979b8060033642988f59a2897a69f6ceb5", "message": "instrument HttpCodecFilter instead of HttpServerFilter for server instrumentation and instrument handleRead in all BaseFilter classes", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "970835f4b7527376f1ed4a5d711726ef73148db9", "url": "https://github.com/DataDog/dd-trace-java/commit/970835f4b7527376f1ed4a5d711726ef73148db9", "message": "remove unneeded executors from whitelist", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "e116368b18dc668be55d8a0addf4bfe1a6ec94e2", "url": "https://github.com/DataDog/dd-trace-java/commit/e116368b18dc668be55d8a0addf4bfe1a6ec94e2", "message": "rename test classes to reflect the grizzly components they are testing", "committedDate": "2020-04-24T15:50:46Z", "type": "commit"}, {"oid": "e116368b18dc668be55d8a0addf4bfe1a6ec94e2", "url": "https://github.com/DataDog/dd-trace-java/commit/e116368b18dc668be55d8a0addf4bfe1a6ec94e2", "message": "rename test classes to reflect the grizzly components they are testing", "committedDate": "2020-04-24T15:50:46Z", "type": "forcePushed"}, {"oid": "63ad066b257f6080ea09e7499561bac23c861760", "url": "https://github.com/DataDog/dd-trace-java/commit/63ad066b257f6080ea09e7499561bac23c861760", "message": "apply google java format", "committedDate": "2020-04-27T12:45:48Z", "type": "commit"}, {"oid": "1e37c56f4a748eda3427020e89b9ebaa95c94d34", "url": "https://github.com/DataDog/dd-trace-java/commit/1e37c56f4a748eda3427020e89b9ebaa95c94d34", "message": "rawtypes and dead code", "committedDate": "2020-04-27T13:56:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE4NzIyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r417187220", "bodyText": "@tylerbenson FYI (ensures the class is loaded by the bootstrap classloader so doesn't require different inst points to share a classloader to coordinate via InstrumentationContext). Please ping me about whether this should really be necessary.", "author": "richardstartin", "createdAt": "2020-04-29T09:36:10Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/api/ParentChildSpan.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.bootstrap.instrumentation.api;", "originalCommit": "93c55fd48e735570dee3eeff7452d5625ca02c22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "904a4d0bacb82412f6b87498b0d475ce0cbb713b", "url": "https://github.com/DataDog/dd-trace-java/commit/904a4d0bacb82412f6b87498b0d475ce0cbb713b", "message": "complete client instrumentation", "committedDate": "2020-04-29T09:39:47Z", "type": "commit"}, {"oid": "904a4d0bacb82412f6b87498b0d475ce0cbb713b", "url": "https://github.com/DataDog/dd-trace-java/commit/904a4d0bacb82412f6b87498b0d475ce0cbb713b", "message": "complete client instrumentation", "committedDate": "2020-04-29T09:39:47Z", "type": "forcePushed"}, {"oid": "eec2d1b26b80b95b4f611f077a7e0900a7247917", "url": "https://github.com/DataDog/dd-trace-java/commit/eec2d1b26b80b95b4f611f077a7e0900a7247917", "message": "add overload of activateSpan defaulting to not finishing on close", "committedDate": "2020-04-29T11:34:26Z", "type": "commit"}, {"oid": "380d611fb127899912690093f9a584132369c521", "url": "https://github.com/DataDog/dd-trace-java/commit/380d611fb127899912690093f9a584132369c521", "message": "apply code formatting", "committedDate": "2020-04-29T14:52:34Z", "type": "commit"}, {"oid": "2f7fc6eee62565bfc532b44d61dc37f449c8ea4e", "url": "https://github.com/DataDog/dd-trace-java/commit/2f7fc6eee62565bfc532b44d61dc37f449c8ea4e", "message": "generify pair", "committedDate": "2020-04-29T15:51:07Z", "type": "commit"}, {"oid": "9195a81e089e0820d6f5bca7199b55a276d1921e", "url": "https://github.com/DataDog/dd-trace-java/commit/9195a81e089e0820d6f5bca7199b55a276d1921e", "message": "ensure a scope is created for the profiler", "committedDate": "2020-04-29T16:56:11Z", "type": "commit"}, {"oid": "9945a4fe86321597dbd463fafc72acd05246be06", "url": "https://github.com/DataDog/dd-trace-java/commit/9945a4fe86321597dbd463fafc72acd05246be06", "message": "parent  to child link working", "committedDate": "2020-04-30T13:43:32Z", "type": "commit"}, {"oid": "9f333b650a60922db67a52737f18fe9ad173766c", "url": "https://github.com/DataDog/dd-trace-java/commit/9f333b650a60922db67a52737f18fe9ad173766c", "message": "handle error traces and fix tests", "committedDate": "2020-04-30T19:33:18Z", "type": "commit"}, {"oid": "9f333b650a60922db67a52737f18fe9ad173766c", "url": "https://github.com/DataDog/dd-trace-java/commit/9f333b650a60922db67a52737f18fe9ad173766c", "message": "handle error traces and fix tests", "committedDate": "2020-04-30T19:33:18Z", "type": "forcePushed"}, {"oid": "b2bb0a9c497d6104875532fd0806a7d35b9f32de", "url": "https://github.com/DataDog/dd-trace-java/commit/b2bb0a9c497d6104875532fd0806a7d35b9f32de", "message": "clean up", "committedDate": "2020-04-30T20:53:52Z", "type": "forcePushed"}, {"oid": "399e80d3bf495cca9a580eac5ee4d0ed825cdb7c", "url": "https://github.com/DataDog/dd-trace-java/commit/399e80d3bf495cca9a580eac5ee4d0ed825cdb7c", "message": "prepare for merge", "committedDate": "2020-04-30T21:14:11Z", "type": "commit"}, {"oid": "0be45d10df68c27dbc1f1be14139895191c1e59b", "url": "https://github.com/DataDog/dd-trace-java/commit/0be45d10df68c27dbc1f1be14139895191c1e59b", "message": "Merge branch 'master' into heather.dsouza/mulesoft-instrumentation", "committedDate": "2020-04-30T21:15:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNTU5OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r418315599", "bodyText": "See also: HttpServerDecorator.DD_SPAN_ATTRIBUTE", "author": "tylerbenson", "createdAt": "2020-04-30T22:05:16Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/ContextAttributes.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package datadog.trace.instrumentation.mulehttpconnector;\n+\n+public class ContextAttributes {\n+  public static final String SPAN = \"SPAN\";", "originalCommit": "d57186c107baa39f6ca56949fa6325c8f8546b7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjM2NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r418316365", "bodyText": "Please add a comment that the scope is closed in ClientResponseAdvice", "author": "tylerbenson", "createdAt": "2020-04-30T22:07:11Z", "path": "dd-java-agent/instrumentation/mule-http-connector-1.0/src/main/java/datadog/trace/instrumentation/mulehttpconnector/client/ClientRequestAdvice.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package datadog.trace.instrumentation.mulehttpconnector.client;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.mulehttpconnector.client.ClientDecorator.DECORATE;\n+import static datadog.trace.instrumentation.mulehttpconnector.client.InjectAdapter.SETTER;\n+\n+import com.ning.http.client.AsyncCompletionHandler;\n+import com.ning.http.client.AsyncHandler;\n+import com.ning.http.client.Request;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ClientRequestAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.Argument(0) final Request request,\n+      @Advice.Argument(1) final AsyncHandler<?> handler) {\n+    AgentSpan parentSpan = activeSpan();\n+    AgentSpan span = startSpan(\"http.request\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onRequest(span, request);\n+    propagate().inject(span, request, SETTER);\n+    InstrumentationContext.get(AsyncCompletionHandler.class, Pair.class)\n+        .put((AsyncCompletionHandler<?>) handler, Pair.of(parentSpan, span));\n+    return activateSpan(span);\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void onExit(@Advice.Enter final AgentScope scope) {\n+    scope.close();", "originalCommit": "d57186c107baa39f6ca56949fa6325c8f8546b7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "10dca37724f87c82e5217c35cde67a9e6f6764bb", "url": "https://github.com/DataDog/dd-trace-java/commit/10dca37724f87c82e5217c35cde67a9e6f6764bb", "message": "Merge branch 'master' into heather.dsouza/mulesoft-instrumentation", "committedDate": "2020-04-30T22:27:34Z", "type": "commit"}, {"oid": "ebbb8dbadd5ff68337d160e5ac74f5aefa314f01", "url": "https://github.com/DataDog/dd-trace-java/commit/ebbb8dbadd5ff68337d160e5ac74f5aefa314f01", "message": "post merge fix", "committedDate": "2020-04-30T22:29:09Z", "type": "forcePushed"}, {"oid": "71f1216c6bb187f09c4ae1ed9343c66c78e598b4", "url": "https://github.com/DataDog/dd-trace-java/commit/71f1216c6bb187f09c4ae1ed9343c66c78e598b4", "message": "post merge fix", "committedDate": "2020-04-30T22:34:59Z", "type": "forcePushed"}, {"oid": "3c9d1053db5a286caff5cd8c0292eb701db1cd8a", "url": "https://github.com/DataDog/dd-trace-java/commit/3c9d1053db5a286caff5cd8c0292eb701db1cd8a", "message": "post merge fix", "committedDate": "2020-04-30T22:43:10Z", "type": "commit"}, {"oid": "3c9d1053db5a286caff5cd8c0292eb701db1cd8a", "url": "https://github.com/DataDog/dd-trace-java/commit/3c9d1053db5a286caff5cd8c0292eb701db1cd8a", "message": "post merge fix", "committedDate": "2020-04-30T22:43:10Z", "type": "forcePushed"}, {"oid": "24e9ab26284ed6a6f52daae6aa09cf9e14e46a14", "url": "https://github.com/DataDog/dd-trace-java/commit/24e9ab26284ed6a6f52daae6aa09cf9e14e46a14", "message": "address basic comments before moving modules", "committedDate": "2020-04-30T22:47:22Z", "type": "commit"}, {"oid": "28c44543a9203a0a629499a918054b8aa09b51d1", "url": "https://github.com/DataDog/dd-trace-java/commit/28c44543a9203a0a629499a918054b8aa09b51d1", "message": "rename filterchain instrumentation", "committedDate": "2020-05-01T08:59:39Z", "type": "commit"}, {"oid": "0ed2f02b317c7672e6c40cc265000dc9c0004892", "url": "https://github.com/DataDog/dd-trace-java/commit/0ed2f02b317c7672e6c40cc265000dc9c0004892", "message": "group filterchain and server, remove ContextAttributes", "committedDate": "2020-05-01T09:33:13Z", "type": "commit"}, {"oid": "154ae82db638d34ccb751848a45038ca41194ab0", "url": "https://github.com/DataDog/dd-trace-java/commit/154ae82db638d34ccb751848a45038ca41194ab0", "message": "Merge branch 'master' into heather.dsouza/mulesoft-instrumentation", "committedDate": "2020-05-05T12:58:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0OTY2NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r420249664", "bodyText": "final?", "author": "dougqh", "createdAt": "2020-05-05T16:39:13Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/api/Pair.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package datadog.trace.bootstrap.instrumentation.api;\n+\n+public class Pair<T, U> {", "originalCommit": "0ed2f02b317c7672e6c40cc265000dc9c0004892", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dc170af9a1700f75fba6885e1bab1e6c0c9b2709", "url": "https://github.com/DataDog/dd-trace-java/commit/dc170af9a1700f75fba6885e1bab1e6c0c9b2709", "message": "Merge branch 'master' into heather.dsouza/mulesoft-instrumentation", "committedDate": "2020-05-14T08:19:05Z", "type": "commit"}, {"oid": "9e0a743a1dd2b5f1842251c08a48e03d92875b7f", "url": "https://github.com/DataDog/dd-trace-java/commit/9e0a743a1dd2b5f1842251c08a48e03d92875b7f", "message": "address review comments", "committedDate": "2020-05-14T09:18:24Z", "type": "forcePushed"}, {"oid": "baab018e89f4ddbf33a6a5b904215fb5f082a48e", "url": "https://github.com/DataDog/dd-trace-java/commit/baab018e89f4ddbf33a6a5b904215fb5f082a48e", "message": "add classloader matcher for org.glassfish.grizzly.filterchain.BaseFilter to FilterInstrumentation", "committedDate": "2020-05-15T15:20:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MjE4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425852189", "bodyText": "let's have this set to \"ning\", \"grizzly-client\"", "author": "tylerbenson", "createdAt": "2020-05-15T14:46:39Z", "path": "dd-java-agent/instrumentation/grizzly-client-1.1/src/main/java/datadog/trace/instrumentation/grizzly/client/ClientDecorator.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package datadog.trace.instrumentation.grizzly.client;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.DDComponents.GRIZZLY_HTTP_ASYNC_CLIENT;\n+\n+import com.ning.http.client.Request;\n+import com.ning.http.client.Response;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpClientDecorator;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+public class ClientDecorator extends HttpClientDecorator<Request, Response> {\n+\n+  public static final ClientDecorator DECORATE = new ClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"grizzly-client-1\"};", "originalCommit": "4f2246dfcbf68b58df4bef6d3e28fc75dc47a23f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MzQ1Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425893457", "bodyText": "addressed", "author": "richardstartin", "createdAt": "2020-05-15T15:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MjE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1NDU2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425854568", "bodyText": "This should match the changes suggested for the decorator.", "author": "tylerbenson", "createdAt": "2020-05-15T14:50:10Z", "path": "dd-java-agent/instrumentation/grizzly-client-1.1/src/main/java/datadog/trace/instrumentation/grizzly/client/ClientRequestInstrumentation.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package datadog.trace.instrumentation.grizzly.client;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClientRequestInstrumentation extends Instrumenter.Default {\n+\n+  public ClientRequestInstrumentation() {\n+    super(\"grizzly-client-1\");", "originalCommit": "4f2246dfcbf68b58df4bef6d3e28fc75dc47a23f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MzQxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425893414", "bodyText": "addressed", "author": "richardstartin", "createdAt": "2020-05-15T15:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1NDU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0OTE4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425849186", "bodyText": "We tend to do a null check on these but I don't think it could be null here", "author": "devinsba", "createdAt": "2020-05-15T14:42:09Z", "path": "dd-java-agent/instrumentation/grizzly-client-1.1/src/main/java/datadog/trace/instrumentation/grizzly/client/ClientRequestAdvice.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package datadog.trace.instrumentation.grizzly.client;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.DDSpanNames.HTTP_REQUEST;\n+import static datadog.trace.instrumentation.grizzly.client.ClientDecorator.DECORATE;\n+import static datadog.trace.instrumentation.grizzly.client.InjectAdapter.SETTER;\n+\n+import com.ning.http.client.AsyncCompletionHandler;\n+import com.ning.http.client.AsyncHandler;\n+import com.ning.http.client.Request;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ClientRequestAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.Argument(0) final Request request,\n+      @Advice.Argument(1) final AsyncHandler<?> handler) {\n+    AgentSpan parentSpan = activeSpan();\n+    AgentSpan span = startSpan(HTTP_REQUEST);\n+    DECORATE.afterStart(span);\n+    DECORATE.onRequest(span, request);\n+    propagate().inject(span, request, SETTER);\n+    InstrumentationContext.get(AsyncCompletionHandler.class, Pair.class)\n+        .put((AsyncCompletionHandler<?>) handler, Pair.of(parentSpan, span));\n+    return activateSpan(span);\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void onExit(@Advice.Enter final AgentScope scope) {\n+    // span closed in ClientResponseAdvice, scope only created for profiler's benefit\n+    scope.close();", "originalCommit": "4f2246dfcbf68b58df4bef6d3e28fc75dc47a23f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwNTAyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425905022", "bodyText": "We might want a follow-up PR that goes through all the others and moves them here", "author": "devinsba", "createdAt": "2020-05-15T16:12:14Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -36,6 +37,7 @@\n     internConstantsUTF8(Tags.class);\n     internConstantsUTF8(DDSpanTypes.class);\n     internConstantsUTF8(DDComponents.class);\n+    internConstantsUTF8(DDSpanNames.class);", "originalCommit": "6a4fed63eefb37a65d1b8f31350733ff9055607b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkxMDMzNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425910335", "bodyText": "fill your boots :)", "author": "richardstartin", "createdAt": "2020-05-15T16:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwNTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MjUxMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425882510", "bodyText": "Instead of casting, could you use AsyncHandler as the type on InstrumentationContext?", "author": "tylerbenson", "createdAt": "2020-05-15T15:33:37Z", "path": "dd-java-agent/instrumentation/grizzly-client-1.9/src/main/java/datadog/trace/instrumentation/grizzly/client/ClientRequestAdvice.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package datadog.trace.instrumentation.grizzly.client;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.DDSpanNames.HTTP_REQUEST;\n+import static datadog.trace.instrumentation.grizzly.client.ClientDecorator.DECORATE;\n+import static datadog.trace.instrumentation.grizzly.client.InjectAdapter.SETTER;\n+\n+import com.ning.http.client.AsyncCompletionHandler;\n+import com.ning.http.client.AsyncHandler;\n+import com.ning.http.client.Request;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ClientRequestAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.Argument(0) final Request request,\n+      @Advice.Argument(1) final AsyncHandler<?> handler) {\n+    AgentSpan parentSpan = activeSpan();\n+    AgentSpan span = startSpan(HTTP_REQUEST);\n+    DECORATE.afterStart(span);\n+    DECORATE.onRequest(span, request);\n+    propagate().inject(span, request, SETTER);\n+    InstrumentationContext.get(AsyncCompletionHandler.class, Pair.class)\n+        .put((AsyncCompletionHandler<?>) handler, Pair.of(parentSpan, span));", "originalCommit": "baab018e89f4ddbf33a6a5b904215fb5f082a48e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4NTgwMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425885801", "bodyText": "It's easy to lose track of what's left and what's right below... consider assigning them to more descriptive local variables early.", "author": "tylerbenson", "createdAt": "2020-05-15T15:39:10Z", "path": "dd-java-agent/instrumentation/grizzly-client-1.9/src/main/java/datadog/trace/instrumentation/grizzly/client/ClientResponseAdvice.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package datadog.trace.instrumentation.grizzly.client;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.instrumentation.grizzly.client.ClientDecorator.DECORATE;\n+\n+import com.ning.http.client.AsyncCompletionHandler;\n+import com.ning.http.client.Response;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ClientResponseAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.This final AsyncCompletionHandler<?> handler,\n+      @Advice.Argument(0) final Response response) {\n+    ContextStore<AsyncCompletionHandler, Pair> contextStore =\n+        InstrumentationContext.get(AsyncCompletionHandler.class, Pair.class);\n+    Pair<AgentSpan, AgentSpan> spanWithParent = contextStore.get(handler);", "originalCommit": "baab018e89f4ddbf33a6a5b904215fb5f082a48e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MTk4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425891986", "bodyText": "I would suggest having this instrumentation use \"grizzly-filterchain\" and the old grizzly instrumentation use \"grizzly\", \"grizzly-httphandler\" as instrumentation names.  That way they can be configured independently.  Ideally this would also use grizzly but if someone already enabled the old one, this would potentially be enabled too.", "author": "tylerbenson", "createdAt": "2020-05-15T15:49:44Z", "path": "dd-java-agent/instrumentation/grizzly-http-2.3.20/src/main/java/datadog/trace/instrumentation/grizzlyhttp232/DefaultFilterChainInstrumentation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package datadog.trace.instrumentation.grizzlyhttp232;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPrivate;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class DefaultFilterChainInstrumentation extends Instrumenter.Default {\n+\n+  public DefaultFilterChainInstrumentation() {\n+    super(\"grizzly-http\");", "originalCommit": "baab018e89f4ddbf33a6a5b904215fb5f082a48e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MjkxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425892914", "bodyText": "For now, can we have these new integrations disabled by default (see how it's done in the grizzly instrumentation)?", "author": "tylerbenson", "createdAt": "2020-05-15T15:51:15Z", "path": "dd-java-agent/instrumentation/grizzly-http-2.3.20/src/main/java/datadog/trace/instrumentation/grizzlyhttp232/DefaultFilterChainInstrumentation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package datadog.trace.instrumentation.grizzlyhttp232;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPrivate;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class DefaultFilterChainInstrumentation extends Instrumenter.Default {", "originalCommit": "baab018e89f4ddbf33a6a5b904215fb5f082a48e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MzQyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425893422", "bodyText": "(You'll also need to add the system property to enable it in the tests.)", "author": "tylerbenson", "createdAt": "2020-05-15T15:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MjkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5Nzg3Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1365#discussion_r425897873", "bodyText": "This needs to match.", "author": "tylerbenson", "createdAt": "2020-05-15T15:59:27Z", "path": "dd-java-agent/instrumentation/grizzly-http-2.3.20/src/main/java/datadog/trace/instrumentation/grizzlyhttp232/GrizzlyDecorator.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package datadog.trace.instrumentation.grizzlyhttp232;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.DDComponents.GRIZZLY_FILTER_CHAIN_SERVER;\n+import static datadog.trace.bootstrap.instrumentation.api.DDSpanNames.GRIZZLY_REQUEST;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.glassfish.grizzly.filterchain.FilterChainContext;\n+import org.glassfish.grizzly.http.HttpHeader;\n+import org.glassfish.grizzly.http.HttpRequestPacket;\n+import org.glassfish.grizzly.http.HttpResponsePacket;\n+\n+public class GrizzlyDecorator\n+    extends HttpServerDecorator<HttpRequestPacket, HttpRequestPacket, HttpResponsePacket> {\n+\n+  public static final GrizzlyDecorator DECORATE = new GrizzlyDecorator();\n+\n+  @Override\n+  protected String method(final HttpRequestPacket httpRequest) {\n+    return httpRequest.getMethod().getMethodString();\n+  }\n+\n+  @Override\n+  protected URI url(final HttpRequestPacket httpRequest) throws URISyntaxException {\n+    return new URI(\n+        (httpRequest.isSecure() ? \"https://\" : \"http://\")\n+            + httpRequest.getRemoteHost()\n+            + \":\"\n+            + httpRequest.getLocalPort()\n+            + httpRequest.getRequestURI()\n+            + (httpRequest.getQueryString() != null ? \"?\" + httpRequest.getQueryString() : \"\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(final HttpRequestPacket httpRequest) {\n+    return httpRequest.getLocalHost();\n+  }\n+\n+  @Override\n+  protected Integer peerPort(final HttpRequestPacket httpRequest) {\n+    return httpRequest.getLocalPort();\n+  }\n+\n+  @Override\n+  protected Integer status(final HttpResponsePacket httpResponse) {\n+    return httpResponse.getStatus();\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"mule-http-connector\"};", "originalCommit": "6a4fed63eefb37a65d1b8f31350733ff9055607b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b9af374962daa369e31bb0301a274e8d5389e9f", "url": "https://github.com/DataDog/dd-trace-java/commit/4b9af374962daa369e31bb0301a274e8d5389e9f", "message": "address review comments", "committedDate": "2020-05-15T17:23:26Z", "type": "commit"}, {"oid": "4b9af374962daa369e31bb0301a274e8d5389e9f", "url": "https://github.com/DataDog/dd-trace-java/commit/4b9af374962daa369e31bb0301a274e8d5389e9f", "message": "address review comments", "committedDate": "2020-05-15T17:23:26Z", "type": "forcePushed"}, {"oid": "a802476fef67c0a1f157167eb05a9a367704aeaf", "url": "https://github.com/DataDog/dd-trace-java/commit/a802476fef67c0a1f157167eb05a9a367704aeaf", "message": "clarify grizzly-client version mismatch", "committedDate": "2020-05-15T17:39:35Z", "type": "commit"}]}