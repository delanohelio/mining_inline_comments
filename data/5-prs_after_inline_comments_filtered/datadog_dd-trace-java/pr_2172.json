{"pr_number": 2172, "pr_title": "metric buffering + payload format change", "pr_createdAt": "2020-12-08T10:39:12Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2172", "timeline": [{"oid": "739575fbe32aa3713ae0b121d2c0e7ce101a8238", "url": "https://github.com/DataDog/dd-trace-java/commit/739575fbe32aa3713ae0b121d2c0e7ce101a8238", "message": "implement a buffering mechanism for requests when the agent is slow to respond", "committedDate": "2020-12-08T10:40:31Z", "type": "forcePushed"}, {"oid": "449f84541b279351a120aba8f0c89784c079a0cd", "url": "https://github.com/DataDog/dd-trace-java/commit/449f84541b279351a120aba8f0c89784c079a0cd", "message": "implement a buffering mechanism for requests when the agent is slow to respond", "committedDate": "2020-12-08T12:51:12Z", "type": "forcePushed"}, {"oid": "d7ce0e023b69e9fb937640484f5ee1a19561485f", "url": "https://github.com/DataDog/dd-trace-java/commit/d7ce0e023b69e9fb937640484f5ee1a19561485f", "message": "implement a buffering mechanism for requests when the agent is slow to respond", "committedDate": "2020-12-08T13:01:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4OTE0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2172#discussion_r538589141", "bodyText": "This will only trigger when responses from the agent are slow (more than a second by default). Do we want to take error responses from the agent into account?", "author": "tylerbenson", "createdAt": "2020-12-08T16:47:51Z", "path": "dd-trace-core/src/main/java/datadog/trace/common/metrics/OkHttpSink.java", "diffHunk": "@@ -7,47 +7,112 @@\n import static datadog.trace.core.http.OkHttpUtils.buildHttpClient;\n import static datadog.trace.core.http.OkHttpUtils.msgpackRequestBodyOf;\n import static datadog.trace.core.http.OkHttpUtils.prepareRequest;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n \n+import datadog.trace.util.AgentTaskScheduler;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import lombok.extern.slf4j.Slf4j;\n import okhttp3.HttpUrl;\n import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import org.jctools.queues.SpscArrayQueue;\n \n+@Slf4j\n public final class OkHttpSink implements Sink, EventListener {\n \n   private final OkHttpClient client;\n   private final HttpUrl metricsUrl;\n   private final List<EventListener> listeners;\n+  private final SpscArrayQueue<Request> enqueuedRequests = new SpscArrayQueue<>(10);\n+  private final AtomicLong lastRequestTime = new AtomicLong();\n+  private final AtomicLong asyncRequestCounter = new AtomicLong();\n+  private final long asyncThresholdLatency;\n+\n+  private final AtomicBoolean asyncTaskStarted = new AtomicBoolean(false);\n+  private volatile AgentTaskScheduler.Scheduled<OkHttpSink> future;\n \n   public OkHttpSink(String agentUrl, long timeoutMillis) {\n     this(buildHttpClient(HttpUrl.get(agentUrl), timeoutMillis), agentUrl, \"v0.5/stats\");\n   }\n \n   public OkHttpSink(OkHttpClient client, String agentUrl, String path) {\n+    this(client, agentUrl, path, SECONDS.toNanos(1));\n+  }\n+\n+  public OkHttpSink(OkHttpClient client, String agentUrl, String path, long asyncThresholdLatency) {\n     this.client = client;\n     this.metricsUrl = HttpUrl.get(agentUrl).resolve(path);\n     this.listeners = new CopyOnWriteArrayList<>();\n+    this.asyncThresholdLatency = asyncThresholdLatency;\n   }\n \n   @Override\n   public void accept(int messageCount, ByteBuffer buffer) {\n-    try (final okhttp3.Response response =\n-        client\n-            .newCall(\n-                prepareRequest(metricsUrl)\n-                    .put(msgpackRequestBodyOf(Collections.singletonList(buffer)))\n-                    .build())\n-            .execute()) {\n+    // if the agent is healthy, then we can send on this thread,\n+    // without copying the buffer, otherwise this needs to be async,\n+    // so need to copy and buffer the request, and let it be executed\n+    // on the main task scheduler as a last resort\n+    if (lastRequestTime.get() < asyncThresholdLatency) {", "originalCommit": "d7ce0e023b69e9fb937640484f5ee1a19561485f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2446eb706ca38bd1c2cd7c02dea50d1ceb5bb0d2", "url": "https://github.com/DataDog/dd-trace-java/commit/2446eb706ca38bd1c2cd7c02dea50d1ceb5bb0d2", "message": "get rid of unused DBType field", "committedDate": "2020-12-09T11:19:21Z", "type": "commit"}, {"oid": "dbcfa79f4649b43a0538d7a364ae53963c6f031f", "url": "https://github.com/DataDog/dd-trace-java/commit/dbcfa79f4649b43a0538d7a364ae53963c6f031f", "message": "implement a buffering mechanism for requests when the agent is slow to respond", "committedDate": "2020-12-09T11:19:21Z", "type": "commit"}, {"oid": "113aca61c67deec7b9c9993ab7c3884d7bff024a", "url": "https://github.com/DataDog/dd-trace-java/commit/113aca61c67deec7b9c9993ab7c3884d7bff024a", "message": "comment about buffering", "committedDate": "2020-12-09T11:19:21Z", "type": "commit"}, {"oid": "113aca61c67deec7b9c9993ab7c3884d7bff024a", "url": "https://github.com/DataDog/dd-trace-java/commit/113aca61c67deec7b9c9993ab7c3884d7bff024a", "message": "comment about buffering", "committedDate": "2020-12-09T11:19:21Z", "type": "forcePushed"}]}