{"pr_number": 1299, "pr_title": "Add commons-httpclient integration", "pr_createdAt": "2020-03-05T20:27:36Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1299", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MjQ5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388592492", "bodyText": "Will need to be resolved with #1298.", "author": "tylerbenson", "createdAt": "2020-03-05T22:00:44Z", "path": "dd-java-agent/instrumentation/commons-httpclient-3/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package datadog.trace.instrumentation.commonshttpclient;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.classLoaderHasNoResources;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.extendsClass;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.commonshttpclient.CommonsHttpClientDecorator.DECORATE;\n+import static datadog.trace.instrumentation.commonshttpclient.HttpHeadersInjectAdapter.SETTER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.CallDepthThreadLocalMap;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.HttpMethod;\n+\n+@AutoService(Instrumenter.class)\n+public class CommonsHttpClientInstrumentation extends Instrumenter.Default {\n+\n+  public CommonsHttpClientInstrumentation() {\n+    super(\"commons-http-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return not(classLoaderHasNoResources(\"org/apache/commons/httpclient/HttpClient.class\"));", "originalCommit": "2662379bbf1944b359545d07abfb7d9b41664d99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzAyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388593024", "bodyText": "I don't think this was ever used with AWS client, so this is prob unnecessary.", "author": "tylerbenson", "createdAt": "2020-03-05T22:01:44Z", "path": "dd-java-agent/instrumentation/commons-httpclient-3/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package datadog.trace.instrumentation.commonshttpclient;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.classLoaderHasNoResources;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.extendsClass;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.commonshttpclient.CommonsHttpClientDecorator.DECORATE;\n+import static datadog.trace.instrumentation.commonshttpclient.HttpHeadersInjectAdapter.SETTER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.CallDepthThreadLocalMap;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.HttpMethod;\n+\n+@AutoService(Instrumenter.class)\n+public class CommonsHttpClientInstrumentation extends Instrumenter.Default {\n+\n+  public CommonsHttpClientInstrumentation() {\n+    super(\"commons-http-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return not(classLoaderHasNoResources(\"org/apache/commons/httpclient/HttpClient.class\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return extendsClass(named(\"org.apache.commons.httpclient.HttpClient\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"datadog.trace.agent.decorator.BaseDecorator\",\n+      \"datadog.trace.agent.decorator.ClientDecorator\",\n+      \"datadog.trace.agent.decorator.HttpClientDecorator\",\n+      packageName + \".CommonsHttpClientDecorator\",\n+      packageName + \".HttpHeadersInjectAdapter\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"executeMethod\"))\n+            .and(takesArguments(3))\n+            .and(takesArgument(1, named(\"org.apache.commons.httpclient.HttpMethod\"))),\n+        CommonsHttpClientInstrumentation.class.getName() + \"$ExecAdvice\");\n+  }\n+\n+  public static class ExecAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static AgentScope methodEnter(@Advice.Argument(1) final HttpMethod httpMethod) {\n+      final int callDepth = CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+      if (callDepth > 0) {\n+        return null;\n+      }\n+\n+      final AgentSpan span = startSpan(\"http.request\");\n+      final AgentScope scope = activateSpan(span, true);\n+\n+      DECORATE.afterStart(span);\n+      DECORATE.onRequest(span, httpMethod);\n+\n+      final boolean awsClientCall =\n+          httpMethod.getRequestHeaders(\"amz-sdk-invocation-id\").length > 0;\n+      // AWS calls are often signed, so we can't add headers without breaking the signature.\n+      if (!awsClientCall) {", "originalCommit": "2662379bbf1944b359545d07abfb7d9b41664d99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c13436d5e49f72c19d778ddc9b0c72c71048421d", "url": "https://github.com/DataDog/dd-trace-java/commit/c13436d5e49f72c19d778ddc9b0c72c71048421d", "message": "Add commons-httpclient integration", "committedDate": "2020-03-06T15:47:41Z", "type": "commit"}, {"oid": "d99c2ad24067200f95d56cb9d21c45d1ab37b5ec", "url": "https://github.com/DataDog/dd-trace-java/commit/d99c2ad24067200f95d56cb9d21c45d1ab37b5ec", "message": "Remove aws-sdk check", "committedDate": "2020-03-06T15:47:41Z", "type": "commit"}, {"oid": "66e14d9256020e37f242443edede4f5fca5bf589", "url": "https://github.com/DataDog/dd-trace-java/commit/66e14d9256020e37f242443edede4f5fca5bf589", "message": "Surprisingly, everything works with 2.0", "committedDate": "2020-03-06T15:47:41Z", "type": "commit"}, {"oid": "a7a7501f40b3a922af6138668438b5ac01f470a8", "url": "https://github.com/DataDog/dd-trace-java/commit/a7a7501f40b3a922af6138668438b5ac01f470a8", "message": "Rename to commons-httpclient-2", "committedDate": "2020-03-06T15:47:41Z", "type": "commit"}, {"oid": "5538021ea6a720d3d3b76e69c3c32d6b2dd25d0a", "url": "https://github.com/DataDog/dd-trace-java/commit/5538021ea6a720d3d3b76e69c3c32d6b2dd25d0a", "message": "classLoaderHasNoResources -> hasClassesNamed", "committedDate": "2020-03-06T15:51:35Z", "type": "commit"}, {"oid": "5538021ea6a720d3d3b76e69c3c32d6b2dd25d0a", "url": "https://github.com/DataDog/dd-trace-java/commit/5538021ea6a720d3d3b76e69c3c32d6b2dd25d0a", "message": "classLoaderHasNoResources -> hasClassesNamed", "committedDate": "2020-03-06T15:51:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5OTAyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388999020", "bodyText": "Unfortunate there isn't a direct way to do this.", "author": "tylerbenson", "createdAt": "2020-03-06T16:19:06Z", "path": "dd-java-agent/instrumentation/commons-httpclient-2/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientDecorator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package datadog.trace.instrumentation.commonshttpclient;\n+\n+import datadog.trace.agent.decorator.HttpClientDecorator;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.StatusLine;\n+import org.apache.commons.httpclient.URIException;\n+\n+public class CommonsHttpClientDecorator extends HttpClientDecorator<HttpMethod, HttpMethod> {\n+  public static final CommonsHttpClientDecorator DECORATE = new CommonsHttpClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"commons-http-client\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"commons-http-client\";\n+  }\n+\n+  @Override\n+  protected String method(final HttpMethod httpMethod) {\n+    return httpMethod.getName();\n+  }\n+\n+  @Override\n+  protected URI url(final HttpMethod httpMethod) throws URISyntaxException {\n+    try {\n+      //  org.apache.commons.httpclient.URI -> java.net.URI\n+      return new URI(httpMethod.getURI().toString());", "originalCommit": "5538021ea6a720d3d3b76e69c3c32d6b2dd25d0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}