{"pr_number": 1894, "pr_title": "More ContinuableScopeManager fixes", "pr_createdAt": "2020-09-21T22:31:22Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1894", "timeline": [{"oid": "16612866f859ff600acba05c8c8651019295346a", "url": "https://github.com/DataDog/dd-trace-java/commit/16612866f859ff600acba05c8c8651019295346a", "message": "Change array to ArrayDeque", "committedDate": "2020-09-21T22:21:26Z", "type": "commit"}, {"oid": "7e31720153734d25cb33f03d90327a5235ffbce4", "url": "https://github.com/DataDog/dd-trace-java/commit/7e31720153734d25cb33f03d90327a5235ffbce4", "message": "More fixes", "committedDate": "2020-09-21T22:22:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5NTYwMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1894#discussion_r492395601", "bodyText": "So now, we're reporting even when the ref count isn't zero and the item isn't on top.\nGood, I left that alone originally to keep the change minimal, but I always thought that was wrong.", "author": "dougqh", "createdAt": "2020-09-21T23:08:53Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -170,15 +168,16 @@ public void close() {\n         }\n       }\n \n+      final boolean alive = decrementReferences();", "originalCommit": "7e31720153734d25cb33f03d90327a5235ffbce4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5Njk5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1894#discussion_r492396992", "bodyText": "Ah, I guess we were doing that in prior change.  This just moves the decrement down.  Good, I think that's more readable.", "author": "dougqh", "createdAt": "2020-09-21T23:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5NTYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwMDA3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1894#discussion_r492500079", "bodyText": "Nice doing the cleanup before we potentially call the code that is not under our control.", "author": "bantonsson", "createdAt": "2020-09-22T06:31:50Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -170,15 +168,16 @@ public void close() {\n         }\n       }\n \n+      final boolean alive = decrementReferences();\n       if (alive) {\n         return;\n       }\n \n+      scopeStack.cleanup();", "originalCommit": "7e31720153734d25cb33f03d90327a5235ffbce4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwNTg0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1894#discussion_r492705848", "bodyText": "+1, hiding all that list management complexity makes every usage of this clearer.", "author": "arkban", "createdAt": "2020-09-22T12:49:36Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -258,27 +257,17 @@ public void afterActivated() {\n    * cleanup() is called to ensure the invariant\n    */\n   static final class ScopeStack {\n-    private static final int MIN_STACK_LENGTH = 16;\n-\n-    ContinuableScope[] stack = new ContinuableScope[MIN_STACK_LENGTH];\n-    // The position of the top-most scope guaranteed to be active\n-    // 0 if empty\n-    int topPos = 0;\n+    private final ArrayDeque<ContinuableScope> stack = new ArrayDeque<>();", "originalCommit": "7e31720153734d25cb33f03d90327a5235ffbce4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}