{"pr_number": 2125, "pr_title": "make reference creation deterministic plus Collections API usage cleanup", "pr_createdAt": "2020-11-26T22:09:53Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2125", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0MDM3OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2125#discussion_r531240378", "bodyText": "This merge algorithm is a bit fishy and has quadratic complexity. I haven't fully understood this subsystem - I just wanted to introduce LinkedHashSet and LinkedHashMap for collections we iterate over - but I suspect that this could all be improved by defining comparability and maintaining sorted sets for linear time merges.", "author": "richardstartin", "createdAt": "2020-11-26T22:21:49Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/Reference.java", "diffHunk": "@@ -106,7 +106,7 @@ public Reference merge(final Reference anotherReference) {\n         merged.set(i, merged.get(i).merge(method));\n       }\n     }\n-    return new HashSet<>(merged);\n+    return new LinkedHashSet<>(merged);\n   }\n \n   private static Set<Field> mergeFields(final Set<Field> fields1, final Set<Field> fields2) {", "originalCommit": "2c2d177a7e3e450ffe1dba69d1c07d06cfea749a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a1c0dbc1df9d08d3b892e184ebfd6527352abaae", "url": "https://github.com/DataDog/dd-trace-java/commit/a1c0dbc1df9d08d3b892e184ebfd6527352abaae", "message": "make reference creation deterministic plus Collections API usage cleanup", "committedDate": "2020-11-26T22:58:20Z", "type": "commit"}, {"oid": "a1c0dbc1df9d08d3b892e184ebfd6527352abaae", "url": "https://github.com/DataDog/dd-trace-java/commit/a1c0dbc1df9d08d3b892e184ebfd6527352abaae", "message": "make reference creation deterministic plus Collections API usage cleanup", "committedDate": "2020-11-26T22:58:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzMTk2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2125#discussion_r531431961", "bodyText": "\ud83d\udc4d I would like to have a linter rule for this containsKey followed by get pattern.", "author": "bantonsson", "createdAt": "2020-11-27T07:52:18Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/MuzzleVisitor.java", "diffHunk": "@@ -123,25 +123,19 @@ public MethodVisitor visitMethod(\n     public Reference[] generateReferences() {\n       // track sources we've generated references from to avoid recursion\n       final Set<String> referenceSources = new HashSet<>();\n-      final Map<String, Reference> references = new HashMap<>();\n-      final Set<String> adviceClassNames = new HashSet<>();\n+      final Map<String, Reference> references = new LinkedHashMap<>();\n \n-      for (String adviceClassName : instrumenter.transformers().values()) {\n-        adviceClassNames.add(adviceClassName);\n-      }\n-\n-      for (String adviceClass : adviceClassNames) {\n-        if (!referenceSources.contains(adviceClass)) {\n-          referenceSources.add(adviceClass);\n+      for (String adviceClass : instrumenter.transformers().values()) {\n+        if (referenceSources.add(adviceClass)) {\n           for (Map.Entry<String, Reference> entry :\n               ReferenceCreator.createReferencesFrom(\n                       adviceClass, ReferenceMatcher.class.getClassLoader())\n                   .entrySet()) {\n-            if (references.containsKey(entry.getKey())) {\n-              references.put(\n-                  entry.getKey(), references.get(entry.getKey()).merge(entry.getValue()));", "originalCommit": "a1c0dbc1df9d08d3b892e184ebfd6527352abaae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}