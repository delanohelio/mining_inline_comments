{"pr_number": 1873, "pr_title": "instrument spring scheduling @Async", "pr_createdAt": "2020-09-16T10:11:04Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1873", "timeline": [{"oid": "02cc033b346af36101557080fbe11bec94797506", "url": "https://github.com/DataDog/dd-trace-java/commit/02cc033b346af36101557080fbe11bec94797506", "message": "add MethodInvocation wrapper for spanning @Async invocations", "committedDate": "2020-09-16T12:29:27Z", "type": "forcePushed"}, {"oid": "8b62b3ab054fcbd55cefc105ca641f7dbd023e92", "url": "https://github.com/DataDog/dd-trace-java/commit/8b62b3ab054fcbd55cefc105ca641f7dbd023e92", "message": "add MethodInvocation wrapper for spanning @Async invocations", "committedDate": "2020-09-16T12:32:26Z", "type": "forcePushed"}, {"oid": "b1b1f2e6075575663b2d63329c08a4bb57d95382", "url": "https://github.com/DataDog/dd-trace-java/commit/b1b1f2e6075575663b2d63329c08a4bb57d95382", "message": "add MethodInvocation wrapper for spanning @Async invocations", "committedDate": "2020-09-16T12:56:56Z", "type": "forcePushed"}, {"oid": "251215ea71593c7785fca40dde2d0206eeeb18fb", "url": "https://github.com/DataDog/dd-trace-java/commit/251215ea71593c7785fca40dde2d0206eeeb18fb", "message": "add a smoke test for spring webmvc -> async -> grpc", "committedDate": "2020-09-16T13:22:49Z", "type": "forcePushed"}, {"oid": "daebf6a97b8f4c0511df6f5067d10284fc8fe45e", "url": "https://github.com/DataDog/dd-trace-java/commit/daebf6a97b8f4c0511df6f5067d10284fc8fe45e", "message": "add a smoke test for spring webmvc -> async -> grpc", "committedDate": "2020-09-16T13:40:02Z", "type": "forcePushed"}, {"oid": "b739ddeb0c4a8b16c1392217cc6cdc6471d5a3a3", "url": "https://github.com/DataDog/dd-trace-java/commit/b739ddeb0c4a8b16c1392217cc6cdc6471d5a3a3", "message": "cleanup", "committedDate": "2020-09-16T13:46:20Z", "type": "forcePushed"}, {"oid": "4893d7f860abe5e74513cf2d0385c8b583ade661", "url": "https://github.com/DataDog/dd-trace-java/commit/4893d7f860abe5e74513cf2d0385c8b583ade661", "message": "close contexts in spring scdheduling tests", "committedDate": "2020-09-16T14:47:48Z", "type": "forcePushed"}, {"oid": "a9f2d81e70eeff0d9e93a7a66cad0d615892209e", "url": "https://github.com/DataDog/dd-trace-java/commit/a9f2d81e70eeff0d9e93a7a66cad0d615892209e", "message": "close contexts in spring scdheduling tests", "committedDate": "2020-09-17T09:45:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NjIwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490156208", "bodyText": "If I can merge #1878 first, we can use already cached UTF-8 string here", "author": "richardstartin", "createdAt": "2020-09-17T11:03:04Z", "path": "dd-java-agent/instrumentation/spring-scheduling-3.1/src/main/java/datadog/trace/instrumentation/springscheduling/SpannedMethodInvocation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package datadog.trace.instrumentation.springscheduling;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.springscheduling.SpringSchedulingDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.lang.reflect.AccessibleObject;\n+import java.lang.reflect.Method;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+public class SpannedMethodInvocation implements MethodInvocation {\n+\n+  private final AgentSpan parent;\n+  private final MethodInvocation delegate;\n+\n+  public SpannedMethodInvocation(AgentSpan parent, MethodInvocation delegate) {\n+    this.parent = parent;\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public Method getMethod() {\n+    return delegate.getMethod();\n+  }\n+\n+  @Override\n+  public Object[] getArguments() {\n+    return delegate.getArguments();\n+  }\n+\n+  @Override\n+  public Object proceed() throws Throwable {\n+    CharSequence spanName = DECORATE.spanNameForMethod(delegate.getMethod());\n+    // TODO kill all APIs requiring String parameters with fire\n+    final AgentSpan span =", "originalCommit": "a9f2d81e70eeff0d9e93a7a66cad0d615892209e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7ca3fedf0d1558c7dbc197186f9c4c37e683a5f8", "url": "https://github.com/DataDog/dd-trace-java/commit/7ca3fedf0d1558c7dbc197186f9c4c37e683a5f8", "message": "demonstrate spring Async breaks lineage", "committedDate": "2020-09-17T17:39:10Z", "type": "commit"}, {"oid": "a7d7f2506f0b01fdc3ec2bb884dc80e9219820d6", "url": "https://github.com/DataDog/dd-trace-java/commit/a7d7f2506f0b01fdc3ec2bb884dc80e9219820d6", "message": "close contexts in spring scheduling tests", "committedDate": "2020-09-17T17:39:19Z", "type": "forcePushed"}, {"oid": "447581de9b6d2b82c9024d2a709a982c534d8728", "url": "https://github.com/DataDog/dd-trace-java/commit/447581de9b6d2b82c9024d2a709a982c534d8728", "message": "add MethodInvocation wrapper for spanning spring Async invocations", "committedDate": "2020-09-17T18:36:41Z", "type": "commit"}, {"oid": "01109f90e4ed105a460a32d75bb8463a3ff857ec", "url": "https://github.com/DataDog/dd-trace-java/commit/01109f90e4ed105a460a32d75bb8463a3ff857ec", "message": "add a smoke test for spring webmvc -> async -> grpc", "committedDate": "2020-09-17T18:36:41Z", "type": "commit"}, {"oid": "81a425841f25602f9f6fda904c3a7bc890b98cbb", "url": "https://github.com/DataDog/dd-trace-java/commit/81a425841f25602f9f6fda904c3a7bc890b98cbb", "message": "cleanup", "committedDate": "2020-09-17T18:36:42Z", "type": "commit"}, {"oid": "bc2fb5e86582413e7e192c6905d0c3524fc91a20", "url": "https://github.com/DataDog/dd-trace-java/commit/bc2fb5e86582413e7e192c6905d0c3524fc91a20", "message": "close contexts in spring scheduling tests", "committedDate": "2020-09-17T18:36:42Z", "type": "commit"}, {"oid": "bc2fb5e86582413e7e192c6905d0c3524fc91a20", "url": "https://github.com/DataDog/dd-trace-java/commit/bc2fb5e86582413e7e192c6905d0c3524fc91a20", "message": "close contexts in spring scheduling tests", "committedDate": "2020-09-17T18:36:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Mzk0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490473943", "bodyText": "I'm a little concerned about adding instrumentation for a class that seems relatively unrelated to scheduling in the module for spring-scheduling.  Is @Async used for anything besides spring scheduling?", "author": "tylerbenson", "createdAt": "2020-09-17T18:36:50Z", "path": "dd-java-agent/instrumentation/spring-scheduling-3.1/src/main/java/datadog/trace/instrumentation/springscheduling/SpringAsyncInstrumentation.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package datadog.trace.instrumentation.springscheduling;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+\n+@AutoService(Instrumenter.class)\n+public class SpringAsyncInstrumentation extends Instrumenter.Default {\n+\n+  public SpringAsyncInstrumentation() {\n+    super(\"spring-async\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.aop.interceptor.AsyncExecutionInterceptor\");", "originalCommit": "a7d7f2506f0b01fdc3ec2bb884dc80e9219820d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4Njg5Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490486893", "bodyText": "This intercepts the annotation (notice the package) org.springframework.scheduling.annotation.Async.", "author": "richardstartin", "createdAt": "2020-09-17T19:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Mzk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDUyOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490490529", "bodyText": "Yes, this seems pretty clearly related to Async to me.  Although, I'll admit their package naming makes me a little concern that maybe AsyncExecutionInterceptor does more.\nBut presuming AsyncExecutionInterceptor is specific to @Async annotations, I think this is probably the right place.\nIt solves my general aim which to let the frameworks find the target methods for us -- rather than us seeking them out.", "author": "dougqh", "createdAt": "2020-09-17T19:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Mzk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MjczNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490482735", "bodyText": "There's a fair bit of history here, but I can't find any original sources. I think these summarize the problem well:\nopentracing/opentracing-java#361 (comment)\nhttps://github.com/Nike-Inc/wingtips#warning-about-error-handling-when-using-try-with-resources-to-autoclose-spans", "author": "tylerbenson", "createdAt": "2020-09-17T18:52:54Z", "path": "dd-java-agent/instrumentation/spring-scheduling-3.1/src/main/java/datadog/trace/instrumentation/springscheduling/SpannedMethodInvocation.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package datadog.trace.instrumentation.springscheduling;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.springscheduling.SpringSchedulingDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.lang.reflect.AccessibleObject;\n+import java.lang.reflect.Method;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+public class SpannedMethodInvocation implements MethodInvocation {\n+\n+  private final AgentSpan parent;\n+  private final MethodInvocation delegate;\n+\n+  public SpannedMethodInvocation(AgentSpan parent, MethodInvocation delegate) {\n+    this.parent = parent;\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public Method getMethod() {\n+    return delegate.getMethod();\n+  }\n+\n+  @Override\n+  public Object[] getArguments() {\n+    return delegate.getArguments();\n+  }\n+\n+  @Override\n+  public Object proceed() throws Throwable {\n+    CharSequence spanName = DECORATE.spanNameForMethod(delegate.getMethod());\n+    final AgentSpan span =\n+        parent == null ? startSpan(spanName) : startSpan(spanName, parent.context());\n+    try (AgentScope scope = activateSpan(span)) {\n+      // question: is this necessary? What does it do?\n+      // if the delegate does async work is everything OK because of this?\n+      // if the delegate does async work, should I need to worry about it here?\n+      scope.setAsyncPropagation(true);\n+      return delegate.proceed();\n+    } finally {\n+      // question: Why can't this just be AutoCloseable? Dogma?", "originalCommit": "bc2fb5e86582413e7e192c6905d0c3524fc91a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4OTUyNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490489527", "bodyText": "That reads like an issue with programming discipline, and sacrifices convenience in the common case for the inability to be incorrect in the rare case. Just my opinion.", "author": "richardstartin", "createdAt": "2020-09-17T19:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MjczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4Mjg2OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490482869", "bodyText": "This will hopefully be unnecessary with the planned changes to PendingTrace.", "author": "tylerbenson", "createdAt": "2020-09-17T18:53:10Z", "path": "dd-java-agent/instrumentation/spring-scheduling-3.1/src/main/java/datadog/trace/instrumentation/springscheduling/SpannedMethodInvocation.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package datadog.trace.instrumentation.springscheduling;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.springscheduling.SpringSchedulingDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.lang.reflect.AccessibleObject;\n+import java.lang.reflect.Method;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+public class SpannedMethodInvocation implements MethodInvocation {\n+\n+  private final AgentSpan parent;\n+  private final MethodInvocation delegate;\n+\n+  public SpannedMethodInvocation(AgentSpan parent, MethodInvocation delegate) {\n+    this.parent = parent;\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public Method getMethod() {\n+    return delegate.getMethod();\n+  }\n+\n+  @Override\n+  public Object[] getArguments() {\n+    return delegate.getArguments();\n+  }\n+\n+  @Override\n+  public Object proceed() throws Throwable {\n+    CharSequence spanName = DECORATE.spanNameForMethod(delegate.getMethod());\n+    final AgentSpan span =\n+        parent == null ? startSpan(spanName) : startSpan(spanName, parent.context());\n+    try (AgentScope scope = activateSpan(span)) {\n+      // question: is this necessary? What does it do?\n+      // if the delegate does async work is everything OK because of this?\n+      // if the delegate does async work, should I need to worry about it here?\n+      scope.setAsyncPropagation(true);", "originalCommit": "bc2fb5e86582413e7e192c6905d0c3524fc91a20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NzkwMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490487902", "bodyText": "One other thing to mention is that currently this will result in the span likely being reported as a separate trace since you're not using continuations to force the trace to stick around.", "author": "tylerbenson", "createdAt": "2020-09-17T19:02:12Z", "path": "dd-java-agent/instrumentation/spring-scheduling-3.1/src/main/java/datadog/trace/instrumentation/springscheduling/SpringAsyncAdvice.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package datadog.trace.instrumentation.springscheduling;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+\n+import net.bytebuddy.asm.Advice;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+public class SpringAsyncAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void scheduleAsync(\n+      @Advice.Argument(value = 0, readOnly = false) MethodInvocation invocation) {\n+    invocation = new SpannedMethodInvocation(activeSpan(), invocation);", "originalCommit": "bc2fb5e86582413e7e192c6905d0c3524fc91a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4OTk4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490489986", "bodyText": "I think that is fine modeling wise because it's timing does not matter for the critical path", "author": "devinsba", "createdAt": "2020-09-17T19:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NzkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5Mjc0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490492748", "bodyText": "I'm confused by saying it is a separate trace, isn't it just spans sent separately?  That's what I think it should be.\nI think today.  These spans might go to PendingTrace that is thought to be done, but I think that's a problem with PendingTrace.", "author": "dougqh", "createdAt": "2020-09-17T19:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NzkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5NzIxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490497215", "bodyText": "@dougqh to clarify, I mean it would likely be reported independently from the rest of the trace.", "author": "tylerbenson", "createdAt": "2020-09-17T19:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NzkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUwMzEyNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490503127", "bodyText": "This feels like the wrong API to me. I should need to call AgentSpan.finish() to finish the span. DDSpanContext has a PendingTrace - so why shouldn't AgentSpan.finish() be enough to hold the PendingTrace back?", "author": "richardstartin", "createdAt": "2020-09-17T19:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NzkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1NTg0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1873#discussion_r490555848", "bodyText": "Yes, right now, an unfinished span holds back sending the trace leg.\nBut that's leading to problems where an unfinished span, holds back the whole trace.\nI think we want to get away from that.\nMy thought is that a span is published in the first payload when it finishes before the root span.\n(Except for long root spans for batch jobs where we need to send sooner).\nOtherwise, the span is deemed to have finished late.  If it makes it with a grace period, it can be included.  Otherwise, it goes separately.  But basically, it is only guarantee if it finishes before the root.", "author": "dougqh", "createdAt": "2020-09-17T20:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NzkwMg=="}], "type": "inlineReview"}, {"oid": "cd7bd80fd378041cd787b5762e5bfa2922c43890", "url": "https://github.com/DataDog/dd-trace-java/commit/cd7bd80fd378041cd787b5762e5bfa2922c43890", "message": "remove comment about the last version of spring scheduling to support JDK7", "committedDate": "2020-09-17T19:13:11Z", "type": "commit"}, {"oid": "cd7bd80fd378041cd787b5762e5bfa2922c43890", "url": "https://github.com/DataDog/dd-trace-java/commit/cd7bd80fd378041cd787b5762e5bfa2922c43890", "message": "remove comment about the last version of spring scheduling to support JDK7", "committedDate": "2020-09-17T19:13:11Z", "type": "forcePushed"}]}