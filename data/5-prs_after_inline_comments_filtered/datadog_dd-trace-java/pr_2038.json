{"pr_number": 2038, "pr_title": "rework setting _dd.measured", "pr_createdAt": "2020-10-28T16:56:51Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2038", "timeline": [{"oid": "54f70e1fe72e688c6c1f1cb910ea8b731ace9a32", "url": "https://github.com/DataDog/dd-trace-java/commit/54f70e1fe72e688c6c1f1cb910ea8b731ace9a32", "message": "don't put _dd.measured in the metrics or tags maps, remove rule processing", "committedDate": "2020-10-28T17:02:10Z", "type": "forcePushed"}, {"oid": "40b3e63c586273e216ccd76b36a40915a6f4d764", "url": "https://github.com/DataDog/dd-trace-java/commit/40b3e63c586273e216ccd76b36a40915a6f4d764", "message": "don't put _dd.measured in the metrics or tags maps, remove rule processing", "committedDate": "2020-10-28T17:07:32Z", "type": "forcePushed"}, {"oid": "ddc6b936abac90638cf1d997fc2d73b8bb5e0826", "url": "https://github.com/DataDog/dd-trace-java/commit/ddc6b936abac90638cf1d997fc2d73b8bb5e0826", "message": "don't put _dd.measured in the metrics or tags maps, remove rule processing", "committedDate": "2020-10-28T17:42:10Z", "type": "commit"}, {"oid": "ddc6b936abac90638cf1d997fc2d73b8bb5e0826", "url": "https://github.com/DataDog/dd-trace-java/commit/ddc6b936abac90638cf1d997fc2d73b8bb5e0826", "message": "don't put _dd.measured in the metrics or tags maps, remove rule processing", "committedDate": "2020-10-28T17:42:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5MjcwOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2038#discussion_r513692709", "bodyText": "Is this good practice when writing to a volatile?  I assume to avoid the cache invalidation...", "author": "tylerbenson", "createdAt": "2020-10-28T19:03:50Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -202,7 +204,19 @@ public boolean getErrorFlag() {\n   }\n \n   public void setErrorFlag(final boolean errorFlag) {\n-    this.errorFlag = errorFlag;\n+    if (errorFlag != this.errorFlag) {\n+      this.errorFlag = errorFlag;\n+    }\n+  }\n+\n+  public boolean isMeasured() {\n+    return measuredFlag;\n+  }\n+\n+  public void setMeasured(boolean measured) {\n+    if (measured != measuredFlag) {", "originalCommit": "ddc6b936abac90638cf1d997fc2d73b8bb5e0826", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwMzE3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2038#discussion_r513703172", "bodyText": "On x86 the barrier inserted after a volatile load is a no-op, but there is one inserted before a volatile store. So this is a mitigation against the cost of accidentally storing many times because of whatever interception mechanism.\nThis field could be final if the decorator created the span, so this story would be a lot better if decorators were tracers, and the spans could be typed.", "author": "richardstartin", "createdAt": "2020-10-28T19:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5MjcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTc3Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2038#discussion_r514061776", "bodyText": "I agree that it makes sense in this case, where the expected behavior is to set the volatile to the value once, but you might accidentally (due to the current code structure) set it multiple times to the same value. It's not a general solution as far as I can see.\nBy the way, isn't the StoreLoad barrier after the volatile store?", "author": "bantonsson", "createdAt": "2020-10-29T07:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5MjcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4NjQzOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2038#discussion_r514086438", "bodyText": "Yes you're right", "author": "richardstartin", "createdAt": "2020-10-29T08:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5MjcwOQ=="}], "type": "inlineReview"}]}