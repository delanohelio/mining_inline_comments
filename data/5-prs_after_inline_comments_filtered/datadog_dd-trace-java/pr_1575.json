{"pr_number": 1575, "pr_title": "Prevent re-entering throwable instrumentation handler", "pr_createdAt": "2020-06-11T15:55:13Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1575", "timeline": [{"oid": "1b0cec072b208ea219bc9574c6e5d9db0648e51b", "url": "https://github.com/DataDog/dd-trace-java/commit/1b0cec072b208ea219bc9574c6e5d9db0648e51b", "message": "Make profiling smoke test use the agent jar (instead of shadowed classes)", "committedDate": "2020-06-11T15:50:16Z", "type": "commit"}, {"oid": "9ee3f35ff662898d6553def1fca5214575d529c0", "url": "https://github.com/DataDog/dd-trace-java/commit/9ee3f35ff662898d6553def1fca5214575d529c0", "message": "Add log file contents assertion to profiling smoke tests", "committedDate": "2020-06-11T15:50:41Z", "type": "commit"}, {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509", "url": "https://github.com/DataDog/dd-trace-java/commit/862cb5ed16828fa2fc3104728c445c3d5f9c9509", "message": "Prevent infinite recursion in throwable instance instrumentation", "committedDate": "2020-06-11T15:51:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjgxOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438906818", "bodyText": "Would be great to have a comment explaining what this protects against in detail... this is useful info since it is very non trivial", "author": "mar-kolya", "createdAt": "2020-06-11T16:13:06Z", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {", "originalCommit": "862cb5ed16828fa2fc3104728c445c3d5f9c9509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MTA2MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438941060", "bodyText": "Done", "author": "jbachorik", "createdAt": "2020-06-11T17:11:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzE3MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438907171", "bodyText": "Maybe a comment here explaining what it guards against (as described in the PR comment).", "author": "bantonsson", "createdAt": "2020-06-11T16:13:42Z", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {", "originalCommit": "862cb5ed16828fa2fc3104728c445c3d5f9c9509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MDk3OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438940978", "bodyText": "Done", "author": "jbachorik", "createdAt": "2020-06-11T17:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzOTI0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438939242", "bodyText": "FWIW: if you move the reentrace check into ExceptionProfiling.getInstance().process you would actually be able to unit test this since you can call process with some special exception that calls process again...", "author": "mar-kolya", "createdAt": "2020-06-11T17:07:40Z", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {\n+      try {\n+        /*\n+         * We may get into a situation when this is called before ExceptionProfiling had a chance\n+         * to fully initialize. So despite the fact that this returns static singleton this may\n+         * return null sometimes.\n+         */\n+        if (ExceptionProfiling.getInstance() == null) {\n+          return;\n+        }\n+        /*\n+         * JFR will assign the stacktrace depending on the place where the event is committed.\n+         * Therefore we need to commit the event here, right in the 'Exception' constructor\n+         */\n+        final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);", "originalCommit": "862cb5ed16828fa2fc3104728c445c3d5f9c9509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MDczMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438940733", "bodyText": "Yes, I was thinking about this. But - this logic seems to be really related to the advice handler and not ExceptionProfiling.\nBut I can unit test ThrowableInstanceAdviceHelper quite easily and it will give the same level of confidence since it is that class doing the heavy lifting.", "author": "jbachorik", "createdAt": "2020-06-11T17:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzOTI0Mg=="}], "type": "inlineReview"}, {"oid": "b28676c1d5285167cdfd70e795ceb83bf59bf7d2", "url": "https://github.com/DataDog/dd-trace-java/commit/b28676c1d5285167cdfd70e795ceb83bf59bf7d2", "message": "Add comments and improve tests", "committedDate": "2020-06-11T17:08:22Z", "type": "commit"}]}