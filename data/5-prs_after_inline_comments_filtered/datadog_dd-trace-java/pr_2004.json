{"pr_number": 2004, "pr_title": "Reduce field injection footprint", "pr_createdAt": "2020-10-19T14:47:33Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2004", "timeline": [{"oid": "e37eb0200ceadd052956d7faa0b575a324a84b63", "url": "https://github.com/DataDog/dd-trace-java/commit/e37eb0200ceadd052956d7faa0b575a324a84b63", "message": "make injected field protected as opposed to private to reduce footprint", "committedDate": "2020-10-19T14:48:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjM4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2004#discussion_r507826388", "bodyText": "typo?", "author": "mcculls", "createdAt": "2020-10-19T15:03:00Z", "path": "dd-java-agent/instrumentation/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "diffHunk": "@@ -41,7 +41,7 @@ public PromiseTransformationInstrumentation() {\n \n   @Override\n   public Map<String, String> contextStore() {\n-    return singletonMap(\"scala.concurrent.impl.Promise$Transformation\", State.class.getName());\n+    return singletonMap(\"s ocala.concurrent.impl.Promise$Transformation\", State.class.getName());", "originalCommit": "e37eb0200ceadd052956d7faa0b575a324a84b63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c0ca5dfe999b89915eb22a1a74b0e46f0670cacc", "url": "https://github.com/DataDog/dd-trace-java/commit/c0ca5dfe999b89915eb22a1a74b0e46f0670cacc", "message": "make excludefilterprovider interface easier to work with", "committedDate": "2020-10-19T15:11:26Z", "type": "commit"}, {"oid": "221515cca9e913dd4eebf0e5bbd78ceaff67ee5a", "url": "https://github.com/DataDog/dd-trace-java/commit/221515cca9e913dd4eebf0e5bbd78ceaff67ee5a", "message": "make injected field protected as opposed to private to reduce footprint", "committedDate": "2020-10-19T15:11:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2MjIxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2004#discussion_r507862215", "bodyText": "\ud83d\udc4d", "author": "bantonsson", "createdAt": "2020-10-19T15:49:20Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ExcludeFilter.java", "diffHunk": "@@ -78,11 +79,11 @@ public static boolean exclude(ExcludeType type, String className) {\n    *\n    * @param excludeTypes the types to exclude\n    */\n-  public static void add(Map<ExcludeType, Set<String>> excludeTypes) {\n+  public static void add(Map<ExcludeType, ? extends Collection<String>> excludeTypes) {", "originalCommit": "221515cca9e913dd4eebf0e5bbd78ceaff67ee5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "12bf9f94d0c7c0356e058fa2a805265258538fbe", "url": "https://github.com/DataDog/dd-trace-java/commit/12bf9f94d0c7c0356e058fa2a805265258538fbe", "message": "exclude known instrumented RunnableFutures from Runnable instrumentation to reduce footprint", "committedDate": "2020-10-19T16:19:03Z", "type": "commit"}, {"oid": "7da0d0f5967651c49185bbcc7a1c5aa3eed35acf", "url": "https://github.com/DataDog/dd-trace-java/commit/7da0d0f5967651c49185bbcc7a1c5aa3eed35acf", "message": "make injected field protected as opposed to private to reduce footprint", "committedDate": "2020-10-19T16:19:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNTUyNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2004#discussion_r507905525", "bodyText": "This doesn't have the effect I had hoped for - I looked in to making SafeToInectFieldsMatcher remember class hierarchies, relying on class load order guarantees, but the matcher is invoked in a different order.", "author": "richardstartin", "createdAt": "2020-10-19T16:54:08Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldInjectionVisitor.java", "diffHunk": "@@ -123,7 +123,7 @@ public void visitEnd() {\n         if (!foundField) {\n           cv.visitField(\n               // Field should be transient to avoid being serialized with the object.\n-              Opcodes.ACC_PRIVATE | Opcodes.ACC_TRANSIENT,\n+              Opcodes.ACC_PROTECTED | Opcodes.ACC_TRANSIENT,", "originalCommit": "7da0d0f5967651c49185bbcc7a1c5aa3eed35acf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTA0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2004#discussion_r507921041", "bodyText": "I wonder if we could get the matcher to add the field to only a specific class (if declared type is a class) or only classes that directly implement the declared interface.  I think we'd have to change the logic to be more specific on if the type is a class/interface.", "author": "tylerbenson", "createdAt": "2020-10-19T17:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNTUyNQ=="}], "type": "inlineReview"}, {"oid": "12bf9f94d0c7c0356e058fa2a805265258538fbe", "url": "https://github.com/DataDog/dd-trace-java/commit/12bf9f94d0c7c0356e058fa2a805265258538fbe", "message": "exclude known instrumented RunnableFutures from Runnable instrumentation to reduce footprint", "committedDate": "2020-10-19T16:19:03Z", "type": "forcePushed"}]}