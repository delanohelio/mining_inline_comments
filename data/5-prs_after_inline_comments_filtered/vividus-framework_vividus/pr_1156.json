{"pr_number": 1156, "pr_title": "[plugin-aws-lambda] Add step to invoke AWS Lambda function", "pr_createdAt": "2020-11-20T14:41:37Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/1156", "timeline": [{"oid": "74888d433f66ee288ff893913461335ec963254c", "url": "https://github.com/vividus-framework/vividus/commit/74888d433f66ee288ff893913461335ec963254c", "message": "[plugin-aws-lambda] Add step to invoke AWS Lambda function", "committedDate": "2020-11-20T15:48:18Z", "type": "forcePushed"}, {"oid": "28a8b2ef311a2affa902f67c4c47e92b5320570c", "url": "https://github.com/vividus-framework/vividus/commit/28a8b2ef311a2affa902f67c4c47e92b5320570c", "message": "[plugin-aws-lambda] Add step to invoke AWS Lambda function", "committedDate": "2020-11-20T20:34:29Z", "type": "forcePushed"}, {"oid": "a71e7524cdf1f25a12324de5243fa9395bcd906c", "url": "https://github.com/vividus-framework/vividus/commit/a71e7524cdf1f25a12324de5243fa9395bcd906c", "message": "[plugin-aws-lambda] Add step to invoke AWS Lambda function", "committedDate": "2020-11-22T11:58:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwODUwNw==", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528508507", "bodyText": "considering the case when the user will expect an empty function error, wouldn't it be easier to verify an empty string instead of a missing variable?", "author": "ikalinin1", "createdAt": "2020-11-23T07:29:03Z", "path": "vividus-plugin-aws-lambda/src/main/java/org/vividus/aws/lambda/steps/LambdaSteps.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.aws.lambda.steps;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.amazonaws.services.lambda.AWSLambda;\n+import com.amazonaws.services.lambda.AWSLambdaClientBuilder;\n+import com.amazonaws.services.lambda.model.InvokeRequest;\n+import com.amazonaws.services.lambda.model.InvokeResult;\n+\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+\n+public class LambdaSteps\n+{\n+    private final AWSLambda awsLambdaClient;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public LambdaSteps(IBddVariableContext bddVariableContext)\n+    {\n+        this.awsLambdaClient = AWSLambdaClientBuilder.defaultClient();\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Invoke a Lambda function by providing the function name and the payload to pass to the Lambda function.\n+     *\n+     * @param functionName the name of the Lambda function, version, or alias. The value can be retrieved by looking\n+     *                     at the function in the AWS Console. Supported name formats:\n+     *                     <ul>\n+     *                     <li>Function name: my-function (name-only), my-function:v1 (with alias).</li>\n+     *                     <li>Function ARN: arn:aws:lambda:us-west-2:123456789012:function:my-function.</li>\n+     *                     <li>Partial ARN: 123456789012:function:my-function.</li>\n+     *                     </ul>\n+     *                     It\u2019s allowed to append a version number or alias to any of the formats. The length\n+     *                     constraint applies only to the full ARN. If only the function name is specified, it is\n+     *                     limited to 64 characters in length.\n+     * @param payload      the JSON that to provide to the Lambda function as input. Vividus performs a Base64\n+     *                     encoding on\n+     *                     this field before sending this request to the AWS service. Users should not perform Base64\n+     *                     encoding on this field.\n+     * @param scopes       The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variables scopes<br>\n+     *                     <i>Available scopes:</i>\n+     *                     <ul>\n+     *                     <li><b>STEP</b> - the variable will be available only within the step,\n+     *                     <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     *                     <li><b>STORY</b> - the variable will be available within the whole story,\n+     *                     <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     *                     </ul>scopes\n+     * @param variableName The variable name to store results. If the variable name is my-var, the following\n+     *                     variables will be created:\n+     *                     <ul>\n+     *                     <li>${my-var.payload} - the response from the function, or an error object</li>\n+     *                     <li>${my-var.status-code} - the HTTP status code is in the 200 range for a successful\n+     *                     request</li>\n+     *                     <li>${my-var.log-result} - the last 4 KB of the execution log</li>\n+     *                     <li>${my-var.executed-version} - the version of the function that executed, when it\u2019s invoked\n+     *                     a function with an\n+     *                     alias, this indicates which version the alias resolved to</li>\n+     *                     <li>${my-var.function-error} - if present, indicates that an error occurred during function\n+     *                     execution, details about the error are included in the response payload</li>\n+     *                     </ul>\n+     */\n+    @When(\"I invoke Lambda function `$functionName` with payload `$payload` and save result to $scopes variable \"\n+            + \"`$variableName`\")\n+    public void invokeLambda(String functionName, String payload, Set<VariableScope> scopes, String variableName)\n+    {\n+        InvokeRequest invokeRequest = new InvokeRequest().withFunctionName(functionName).withPayload(payload);\n+        InvokeResult invokeResult = awsLambdaClient.invoke(invokeRequest);\n+\n+        Map<String, String> result = new HashMap<>();\n+        result.put(\"payload\", new String(invokeResult.getPayload().array(), StandardCharsets.UTF_8));\n+        result.put(\"status-code\", invokeResult.getStatusCode().toString());\n+        result.put(\"log-result\",\n+                new String(Base64.getDecoder().decode(invokeResult.getLogResult()), StandardCharsets.UTF_8));\n+        result.put(\"executed-version\", invokeResult.getExecutedVersion());\n+        String functionError = invokeResult.getFunctionError();\n+        if (functionError != null)", "originalCommit": "a71e7524cdf1f25a12324de5243fa9395bcd906c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwODY4Ng==", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528508686", "bodyText": "Analog of the SSH steps' empty error output stream", "author": "ikalinin1", "createdAt": "2020-11-23T07:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwODUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYzOTExNA==", "url": "https://github.com/vividus-framework/vividus/pull/1156#discussion_r528639114", "bodyText": "I've tested this functionality, functionError is some error type (https://docs.aws.amazon.com/lambda/latest/dg/invocation-retries.html), I have not found any enumeration of possible values here, I always see 'Unhandled' (in my case and in the examples), so I would prefer to rely on current default mechanism: missing value - missing variable (since there is no statement saying it couldn't be empty)\n\n\nAs for error check the users should rely on statusCode", "author": "valfirst", "createdAt": "2020-11-23T11:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUwODUwNw=="}], "type": "inlineReview"}, {"oid": "d26de34e732ed854049337942cd4c9b4c74bae51", "url": "https://github.com/vividus-framework/vividus/commit/d26de34e732ed854049337942cd4c9b4c74bae51", "message": "[plugin-aws-lambda] Add step to invoke AWS Lambda function", "committedDate": "2020-11-23T11:22:41Z", "type": "forcePushed"}, {"oid": "93752f5e16145fcc82e76d7cc23ade7de642994c", "url": "https://github.com/vividus-framework/vividus/commit/93752f5e16145fcc82e76d7cc23ade7de642994c", "message": "[plugin-aws-lambda] Add step to invoke AWS Lambda function", "committedDate": "2020-11-23T12:28:13Z", "type": "forcePushed"}, {"oid": "a711f2d00393f5b3641317f849e4fee30d8ea58b", "url": "https://github.com/vividus-framework/vividus/commit/a711f2d00393f5b3641317f849e4fee30d8ea58b", "message": "[plugin-aws-lambda] Add step to invoke AWS Lambda function", "committedDate": "2020-11-23T12:30:00Z", "type": "commit"}, {"oid": "a711f2d00393f5b3641317f849e4fee30d8ea58b", "url": "https://github.com/vividus-framework/vividus/commit/a711f2d00393f5b3641317f849e4fee30d8ea58b", "message": "[plugin-aws-lambda] Add step to invoke AWS Lambda function", "committedDate": "2020-11-23T12:30:00Z", "type": "forcePushed"}]}