{"pr_number": 962, "pr_title": "Fix 919issue: [transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "pr_createdAt": "2020-09-23T07:55:21Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/962", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4NjYzMw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r493286633", "bodyText": "the header is cells from the first row in the range", "author": "valfirst", "createdAt": "2020-09-23T08:07:17Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -56,6 +61,20 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n                 throw new IllegalArgumentException(\"Sheet with name '\" + sheetName + \"' does not exist\");\n             }\n             IExcelSheetParser excelSheetParser = new ExcelSheetParser(sheet.get());\n+            if (properties.getProperties().getProperty(COLUMN) == null)\n+            {\n+                CellRangeAddress cellRangeAddress = CellRangeAddress.valueOf(properties.getProperties().\n+                        getProperty(RANGE));\n+                int sizeColumn = cellRangeAddress.getLastColumn() - cellRangeAddress.getFirstColumn() + 1;\n+                List<String> list = new ArrayList<>();\n+                for (int i = 1; i <= sizeColumn; i++)\n+                {\n+                    list.add(\"header\" + i);", "originalCommit": "22a74d21371dd79fd75310d34572a9f23254fc2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4Nzk4Mg==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r493287982", "bodyText": "I think before using the property, you should validate that it exists", "author": "valfirst", "createdAt": "2020-09-23T08:08:34Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -56,6 +61,20 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n                 throw new IllegalArgumentException(\"Sheet with name '\" + sheetName + \"' does not exist\");\n             }\n             IExcelSheetParser excelSheetParser = new ExcelSheetParser(sheet.get());\n+            if (properties.getProperties().getProperty(COLUMN) == null)\n+            {\n+                CellRangeAddress cellRangeAddress = CellRangeAddress.valueOf(properties.getProperties().\n+                        getProperty(RANGE));", "originalCommit": "22a74d21371dd79fd75310d34572a9f23254fc2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4ODk4NQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r493288985", "bodyText": "what about handling of line breaks in excel cells?", "author": "valfirst", "createdAt": "2020-09-23T08:09:39Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -56,6 +61,20 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n                 throw new IllegalArgumentException(\"Sheet with name '\" + sheetName + \"' does not exist\");\n             }\n             IExcelSheetParser excelSheetParser = new ExcelSheetParser(sheet.get());\n+            if (properties.getProperties().getProperty(COLUMN) == null)\n+            {\n+                CellRangeAddress cellRangeAddress = CellRangeAddress.valueOf(properties.getProperties().\n+                        getProperty(RANGE));\n+                int sizeColumn = cellRangeAddress.getLastColumn() - cellRangeAddress.getFirstColumn() + 1;\n+                List<String> list = new ArrayList<>();\n+                for (int i = 1; i <= sizeColumn; i++)\n+                {\n+                    list.add(\"header\" + i);\n+                }\n+                return ExamplesTableProcessor.buildExamplesTableFromColumns(list,\n+                        extractAllDataFromRage(excelSheetParser, properties.getProperties().\n+                            getProperty(RANGE)), properties);", "originalCommit": "22a74d21371dd79fd75310d34572a9f23254fc2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4OTI5Mw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r493289293", "bodyText": "noisy change", "author": "valfirst", "createdAt": "2020-09-23T08:09:57Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -74,7 +93,9 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n     private List<String> extractData(IExcelSheetParser sheetParser, TableProperties properties)\n     {\n         return processCompetingMandatoryProperties(properties,\n-                entry(\"range\", range -> extractDataFromRage(sheetParser, properties, range)),\n+                entry(RANGE, range ->\n+                        extractDataFromRage(sheetParser, properties, range)\n+                     ),", "originalCommit": "22a74d21371dd79fd75310d34572a9f23254fc2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4OTY0Ng==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r493289646", "bodyText": "give meaningful names to variables", "author": "valfirst", "createdAt": "2020-09-23T08:10:17Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,14 +115,35 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<List<String>> extractAllDataFromRage(IExcelSheetParser sheetParser, String range)\n+    {\n+        List<List<String>> listList = new ArrayList<>();", "originalCommit": "22a74d21371dd79fd75310d34572a9f23254fc2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMjY1MQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r493632651", "bodyText": "looks like the result of the following command won't be changed after multiple executions, so you can reuse it\nsheetParser.getDataFromRange(range).stream().map(CellValue::getValue).collect(Collectors.toList())", "author": "uarlouski", "createdAt": "2020-09-23T14:20:30Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,14 +115,35 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<List<String>> extractAllDataFromRage(IExcelSheetParser sheetParser, String range)\n+    {\n+        List<List<String>> listList = new ArrayList<>();\n+        CellRangeAddress cellRangeAddress = CellRangeAddress.valueOf(range);\n+        int sizeColumn = cellRangeAddress.getLastColumn() - cellRangeAddress.getFirstColumn() + 1;\n+        int sizeRow = cellRangeAddress.getLastRow() - cellRangeAddress.getFirstRow() + 1;\n+        for (int i = 0; i < sizeColumn; i++)\n+        {\n+            int l = i;\n+            List<String> columnList = new ArrayList<>();\n+            for (int j = 0; j < sizeRow; j++)\n+            {\n+                columnList.add(sheetParser.getDataFromRange(range).stream().map(CellValue::getValue)\n+                          .collect(Collectors.toList()).get(l));", "originalCommit": "22a74d21371dd79fd75310d34572a9f23254fc2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY2NjY1NQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r493666655", "bodyText": "can't it be like\nfor (int col..... = cellRangeAddress.getFirstColumn(); col..... < cellRangeAddress.getLastColumn(); col.....++)", "author": "uarlouski", "createdAt": "2020-09-23T15:02:25Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,14 +115,35 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<List<String>> extractAllDataFromRage(IExcelSheetParser sheetParser, String range)\n+    {\n+        List<List<String>> listList = new ArrayList<>();\n+        CellRangeAddress cellRangeAddress = CellRangeAddress.valueOf(range);\n+        int sizeColumn = cellRangeAddress.getLastColumn() - cellRangeAddress.getFirstColumn() + 1;\n+        int sizeRow = cellRangeAddress.getLastRow() - cellRangeAddress.getFirstRow() + 1;\n+        for (int i = 0; i < sizeColumn; i++)", "originalCommit": "22a74d21371dd79fd75310d34572a9f23254fc2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "efdeaba9e2e801c39beda95bf561aa944af9b976", "url": "https://github.com/vividus-framework/vividus/commit/efdeaba9e2e801c39beda95bf561aa944af9b976", "message": "Fix 919issue\n\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-09-24T11:54:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1NzYzMg==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r494257632", "bodyText": "duplicate space", "author": "valfirst", "createdAt": "2020-09-24T12:01:25Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -59,33 +67,49 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n             String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n             String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n                 : lineBreakReplacementPropertyValue;\n-            result = extractData(excelSheetParser, properties)\n+            List<String> result = extractData(excelSheetParser, properties)\n                     .stream()\n                     .map(e -> e.replace(\"\\n\", lineBreakReplacement))\n                     .collect(Collectors.toList());\n+            String columnName = properties.getProperties().getProperty(COLUMN);\n+            if (columnName != null)\n+            {\n+                String joinValues = properties.getProperties().getProperty(\"joinValues\");\n+                notBlank(columnName, \"Table property 'column' is blank\");\n+                headers = List.of(columnName);\n+                data = List.of(Boolean.parseBoolean(joinValues) ? List.of(String.join(\" \", result)) : result);\n+            }\n+            else\n+            {\n+                CellRangeAddress cellRangeAddress = CellRangeAddress.valueOf(properties.getProperties()\n+                                                    .getProperty(RANGE));\n+                int sizeColumn = cellRangeAddress.getLastColumn() - cellRangeAddress.getFirstColumn() + 1;\n+                headers = result.subList(0, sizeColumn);\n+                data = transformDataTable(headers, result.subList(sizeColumn,\n+                        cellRangeAddress.getNumberOfCells()));\n+            }\n         }\n         catch (WorkbookParsingException e)\n         {\n             throw new IllegalStateException(\"Error during parsing excel workbook\", e);\n         }\n-        return build(result, properties);\n+        return  ExamplesTableProcessor.buildExamplesTableFromColumns(headers, data, properties);", "originalCommit": "efdeaba9e2e801c39beda95bf561aa944af9b976", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1OTA4NQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r494259085", "bodyText": "the method becomes too long and looks too complicated, consider refactoring to improve readability", "author": "valfirst", "createdAt": "2020-09-24T12:03:54Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -59,33 +67,49 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n             String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n             String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n                 : lineBreakReplacementPropertyValue;\n-            result = extractData(excelSheetParser, properties)\n+            List<String> result = extractData(excelSheetParser, properties)\n                     .stream()\n                     .map(e -> e.replace(\"\\n\", lineBreakReplacement))\n                     .collect(Collectors.toList());\n+            String columnName = properties.getProperties().getProperty(COLUMN);\n+            if (columnName != null)\n+            {\n+                String joinValues = properties.getProperties().getProperty(\"joinValues\");\n+                notBlank(columnName, \"Table property 'column' is blank\");\n+                headers = List.of(columnName);\n+                data = List.of(Boolean.parseBoolean(joinValues) ? List.of(String.join(\" \", result)) : result);\n+            }\n+            else\n+            {\n+                CellRangeAddress cellRangeAddress = CellRangeAddress.valueOf(properties.getProperties()\n+                                                    .getProperty(RANGE));\n+                int sizeColumn = cellRangeAddress.getLastColumn() - cellRangeAddress.getFirstColumn() + 1;\n+                headers = result.subList(0, sizeColumn);\n+                data = transformDataTable(headers, result.subList(sizeColumn,\n+                        cellRangeAddress.getNumberOfCells()));\n+            }\n         }\n         catch (WorkbookParsingException e)\n         {\n             throw new IllegalStateException(\"Error during parsing excel workbook\", e);\n         }\n-        return build(result, properties);\n+        return  ExamplesTableProcessor.buildExamplesTableFromColumns(headers, data, properties);", "originalCommit": "efdeaba9e2e801c39beda95bf561aa944af9b976", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1OTc2OQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r494259769", "bodyText": "format in one line or chain-like view", "author": "valfirst", "createdAt": "2020-09-24T12:05:04Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +118,33 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n-    private List<String> extractDataFromAddresses(IExcelSheetParser sheetParser, String addresses)\n+    private List<List<String>> transformDataTable(List<String> headers, List<String> data)\n     {\n-        return Stream.of(addresses.split(\";\")).map(sheetParser::getDataFromCell).collect(Collectors.toList());\n+        List<List<String>> tableValue = new ArrayList<>();\n+        int sizeColumn = headers.size();\n+        int sizeRow = data.size() / sizeColumn;\n+        for (int i = 0; i < sizeColumn; i++)\n+        {\n+            int l = i;\n+            List<String> columnList = new ArrayList<>();\n+            for (int j = 0; j < sizeRow; j++)\n+            {\n+                columnList.add(data.get(l));\n+                l = l + sizeColumn;\n+            }\n+            tableValue.add(columnList);\n+        }\n+        return tableValue;\n+    }\n+\n+    private List<String> extractValues(IExcelSheetParser sheetParser, String range)\n+    {\n+        return sheetParser.getDataFromRange(range).stream().map(CellValue::getValue)\n+          .collect(Collectors.toList());", "originalCommit": "efdeaba9e2e801c39beda95bf561aa944af9b976", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2Mzk1NQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r494263955", "bodyText": "you shouldn't transform linear data (list) to table, you should extract data as table from excel (without extra transformation)", "author": "valfirst", "createdAt": "2020-09-24T12:12:32Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +118,33 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n-    private List<String> extractDataFromAddresses(IExcelSheetParser sheetParser, String addresses)\n+    private List<List<String>> transformDataTable(List<String> headers, List<String> data)", "originalCommit": "efdeaba9e2e801c39beda95bf561aa944af9b976", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d7902731693ba0e92db5f4143bdd4cb60d7cf99d", "url": "https://github.com/vividus-framework/vividus/commit/d7902731693ba0e92db5f4143bdd4cb60d7cf99d", "message": "Fix 919issue\n\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-09-25T14:05:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5MzE3MQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r495793171", "bodyText": "properties.getProperties().getProperty(RANGE) - called twice", "author": "ikalinin1", "createdAt": "2020-09-28T09:05:55Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -59,30 +70,40 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n             String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n             String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n                 : lineBreakReplacementPropertyValue;\n-            result = extractData(excelSheetParser, properties)\n-                    .stream()\n-                    .map(e -> e.replace(\"\\n\", lineBreakReplacement))\n-                    .collect(Collectors.toList());\n+            if (properties.getProperties().getProperty(COLUMN) != null)\n+            {\n+                List<String> result = extractData(excelSheetParser, properties);\n+                result = appendSymbols(result, lineBreakReplacement);\n+                return build(result, properties);\n+            }\n+            isTrue(properties.getProperties().getProperty(RANGE) != null, \"'range' is not set in Table properties\");", "originalCommit": "d7902731693ba0e92db5f4143bdd4cb60d7cf99d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0MTEyMg==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r495841122", "bodyText": "FromRage -> FromRange", "author": "ikalinin1", "createdAt": "2020-09-28T10:30:09Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -59,30 +70,40 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n             String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n             String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n                 : lineBreakReplacementPropertyValue;\n-            result = extractData(excelSheetParser, properties)\n-                    .stream()\n-                    .map(e -> e.replace(\"\\n\", lineBreakReplacement))\n-                    .collect(Collectors.toList());\n+            if (properties.getProperties().getProperty(COLUMN) != null)\n+            {\n+                List<String> result = extractData(excelSheetParser, properties);\n+                result = appendSymbols(result, lineBreakReplacement);\n+                return build(result, properties);\n+            }\n+            isTrue(properties.getProperties().getProperty(RANGE) != null, \"'range' is not set in Table properties\");\n+            CellRangeAddress cellRangeAddress = CellRangeAddress.valueOf(properties.getProperties().getProperty(RANGE));\n+            Map<String, List<String>> exactData = exactDataTable(cellRangeAddress, sheet.get()).entrySet()\n+                .stream()\n+                .collect(Collectors.toMap(\n+                    Map.Entry::getKey,\n+                    entry -> appendSymbols(entry.getValue(), lineBreakReplacement)\n+                 ));\n+            headers = exactData.keySet().stream().collect(Collectors.toList());\n+            data = exactData.values().stream().collect(Collectors.toList());\n         }\n         catch (WorkbookParsingException e)\n         {\n             throw new IllegalStateException(\"Error during parsing excel workbook\", e);\n         }\n-        return build(result, properties);\n+        return  ExamplesTableProcessor.buildExamplesTableFromColumns(headers, data, properties);\n     }\n \n     private List<String> extractData(IExcelSheetParser sheetParser, TableProperties properties)\n     {\n         return processCompetingMandatoryProperties(properties,\n-                entry(\"range\", range -> extractDataFromRage(sheetParser, properties, range)),\n+                entry(RANGE, range -> extractDataFromRage(sheetParser, properties, range)),\n                 entry(\"addresses\", addresses -> extractDataFromAddresses(sheetParser, addresses)));\n     }\n \n-    private List<String> extractDataFromRage(IExcelSheetParser sheetParser, TableProperties properties,\n-            String range)\n+    private List<String> extractDataFromRage(IExcelSheetParser sheetParser, TableProperties properties, String range)", "originalCommit": "d7902731693ba0e92db5f4143bdd4cb60d7cf99d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0MjYwOA==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r495842608", "bodyText": "Shouldn't it be part of ExcelSheetParser?", "author": "ikalinin1", "createdAt": "2020-09-28T10:32:59Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +115,45 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private Map<String, List<String>> exactDataTable(CellRangeAddress address, Sheet sheet)\n+    {\n+        Map<String, List<String>> mapData = new HashMap<>();", "originalCommit": "d7902731693ba0e92db5f4143bdd4cb60d7cf99d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzYyMQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r496117621", "bodyText": "remove it", "author": "TatianaTochko", "createdAt": "2020-09-28T17:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0MjYwOA=="}], "type": "inlineReview"}, {"oid": "c029b89246775b17954894c2da563ab65d78b42a", "url": "https://github.com/vividus-framework/vividus/commit/c029b89246775b17954894c2da563ab65d78b42a", "message": "Fix 919issue\n\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-09-28T17:27:31Z", "type": "forcePushed"}, {"oid": "499ff601330294ab221d85cfbb3951bd9dec3ffe", "url": "https://github.com/vividus-framework/vividus/commit/499ff601330294ab221d85cfbb3951bd9dec3ffe", "message": "Fix 919issue\n\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-09-28T17:41:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxODUyOQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r496618529", "bodyText": "isn't is possible here and at 72 to use the following code?\n79\nreturn build(List.copyOf(exactData.keySet()), List.copyOf(exactData.values()), properties)\n\n72\nreturn build(List.of(column), ....., properties);", "author": "uarlouski", "createdAt": "2020-09-29T10:43:53Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -56,33 +62,40 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n                 throw new IllegalArgumentException(\"Sheet with name '\" + sheetName + \"' does not exist\");\n             }\n             IExcelSheetParser excelSheetParser = new ExcelSheetParser(sheet.get());\n-            String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n-            String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n-                : lineBreakReplacementPropertyValue;\n-            result = extractData(excelSheetParser, properties)\n-                    .stream()\n-                    .map(e -> e.replace(\"\\n\", lineBreakReplacement))\n-                    .collect(Collectors.toList());\n+            String column = properties.getProperties().getProperty(COLUMN);\n+            if (column != null)\n+            {\n+                notBlank(column, \"Table property 'column' is blank\");\n+                String joinValues = properties.getProperties().getProperty(\"joinValues\");\n+                List<String> result = extractData(excelSheetParser, properties);\n+                data = List.of(Boolean.parseBoolean(joinValues) ? List.of(String.join(\" \", result)) : result);\n+                headers = List.of(column);\n+            }\n+            else\n+            {\n+                String range = ExtendedTableTransformer.getMandatoryNonBlankProperty(properties, RANGE);\n+                Map<String, List<String>> exactData = excelSheetParser.exactDataTable(range);\n+                headers = exactData.keySet().stream().collect(Collectors.toList());\n+                data = exactData.values().stream().collect(Collectors.toList());", "originalCommit": "499ff601330294ab221d85cfbb3951bd9dec3ffe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxOTQ2NQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r496619465", "bodyText": "not really readable", "author": "uarlouski", "createdAt": "2020-09-29T10:45:36Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -56,33 +62,40 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n                 throw new IllegalArgumentException(\"Sheet with name '\" + sheetName + \"' does not exist\");\n             }\n             IExcelSheetParser excelSheetParser = new ExcelSheetParser(sheet.get());\n-            String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n-            String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n-                : lineBreakReplacementPropertyValue;\n-            result = extractData(excelSheetParser, properties)\n-                    .stream()\n-                    .map(e -> e.replace(\"\\n\", lineBreakReplacement))\n-                    .collect(Collectors.toList());\n+            String column = properties.getProperties().getProperty(COLUMN);\n+            if (column != null)\n+            {\n+                notBlank(column, \"Table property 'column' is blank\");\n+                String joinValues = properties.getProperties().getProperty(\"joinValues\");\n+                List<String> result = extractData(excelSheetParser, properties);\n+                data = List.of(Boolean.parseBoolean(joinValues) ? List.of(String.join(\" \", result)) : result);", "originalCommit": "499ff601330294ab221d85cfbb3951bd9dec3ffe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMDQ0NA==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r496620444", "bodyText": "key is unreadable", "author": "uarlouski", "createdAt": "2020-09-29T10:47:31Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/ExcelSheetParser.java", "diffHunk": "@@ -225,6 +227,23 @@ public String getDataFromCell(String address)\n                 .orElse(null);\n     }\n \n+    public Map<String, List<String>> exactDataTable(String range)\n+    {\n+        CellRangeAddress address = CellRangeAddress.valueOf(range);\n+        Map<String, List<String>> mapData = new HashMap<>();\n+        for (int colIndex = address.getFirstColumn(); colIndex <= address.getLastColumn(); colIndex++)\n+        {\n+            List<String> temp = new ArrayList<>();\n+            for (int rowIndex = address.getFirstRow() + 1; rowIndex <= address.getLastRow(); rowIndex++)\n+            {\n+                Row row = sheet.getRow(rowIndex);\n+                temp.add(row.getCell(colIndex).getStringCellValue());\n+            }\n+            mapData.put(sheet.getRow(address.getFirstRow()).getCell(colIndex).getStringCellValue(), temp);", "originalCommit": "499ff601330294ab221d85cfbb3951bd9dec3ffe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMjk5NQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r496622995", "bodyText": "if you need to get data from cols with indexes like 1,5,6 they you will get row with index 1,2,3..... for each of those col indexes, so can we iterate through rows and populate cols without having to access the same rows multiple times?", "author": "uarlouski", "createdAt": "2020-09-29T10:52:20Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/ExcelSheetParser.java", "diffHunk": "@@ -225,6 +227,23 @@ public String getDataFromCell(String address)\n                 .orElse(null);\n     }\n \n+    public Map<String, List<String>> exactDataTable(String range)\n+    {\n+        CellRangeAddress address = CellRangeAddress.valueOf(range);\n+        Map<String, List<String>> mapData = new HashMap<>();\n+        for (int colIndex = address.getFirstColumn(); colIndex <= address.getLastColumn(); colIndex++)\n+        {\n+            List<String> temp = new ArrayList<>();\n+            for (int rowIndex = address.getFirstRow() + 1; rowIndex <= address.getLastRow(); rowIndex++)\n+            {\n+                Row row = sheet.getRow(rowIndex);\n+                temp.add(row.getCell(colIndex).getStringCellValue());\n+            }", "originalCommit": "499ff601330294ab221d85cfbb3951bd9dec3ffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA5OTg3NQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498099875", "bodyText": "Fix this", "author": "TatianaTochko", "createdAt": "2020-10-01T09:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMjk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzA5Nw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r496623097", "bodyText": "just data", "author": "uarlouski", "createdAt": "2020-09-29T10:52:33Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/ExcelSheetParser.java", "diffHunk": "@@ -225,6 +227,23 @@ public String getDataFromCell(String address)\n                 .orElse(null);\n     }\n \n+    public Map<String, List<String>> exactDataTable(String range)\n+    {\n+        CellRangeAddress address = CellRangeAddress.valueOf(range);\n+        Map<String, List<String>> mapData = new HashMap<>();", "originalCommit": "499ff601330294ab221d85cfbb3951bd9dec3ffe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzI4MQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r496623281", "bodyText": "please give it meaningful name", "author": "uarlouski", "createdAt": "2020-09-29T10:52:56Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/ExcelSheetParser.java", "diffHunk": "@@ -225,6 +227,23 @@ public String getDataFromCell(String address)\n                 .orElse(null);\n     }\n \n+    public Map<String, List<String>> exactDataTable(String range)\n+    {\n+        CellRangeAddress address = CellRangeAddress.valueOf(range);\n+        Map<String, List<String>> mapData = new HashMap<>();\n+        for (int colIndex = address.getFirstColumn(); colIndex <= address.getLastColumn(); colIndex++)\n+        {\n+            List<String> temp = new ArrayList<>();", "originalCommit": "499ff601330294ab221d85cfbb3951bd9dec3ffe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyNDAzNw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r496624037", "bodyText": "please align streams in the following format\nsource.stream()\n      .op1()\n      .op2()\n      .op3()\n       ........", "author": "uarlouski", "createdAt": "2020-09-29T10:54:22Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +107,29 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<String> extractValues(IExcelSheetParser sheetParser, String range)\n+    {\n+        return sheetParser.getDataFromRange(range).stream().map(CellValue::getValue).collect(Collectors.toList());\n+    }\n+\n     private List<String> extractDataFromAddresses(IExcelSheetParser sheetParser, String addresses)\n     {\n         return Stream.of(addresses.split(\";\")).map(sheetParser::getDataFromCell).collect(Collectors.toList());\n     }\n \n-    private String build(List<String> data, TableProperties properties)\n+    private String build(List<String> headers, List<List<String>> data, TableProperties properties)\n+    {\n+        String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n+        String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n+            : lineBreakReplacementPropertyValue;\n+        List<List<String>> result = data.stream().map(element -> appendSymbols(element, lineBreakReplacement)).\n+                                    collect(Collectors.toList());", "originalCommit": "499ff601330294ab221d85cfbb3951bd9dec3ffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg5MjM3OA==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r500892378", "bodyText": "@TatianaTochko \u261d\ufe0f", "author": "valfirst", "createdAt": "2020-10-07T10:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyNDAzNw=="}], "type": "inlineReview"}, {"oid": "5f229aa6ad3de79f09e8428a48500983f53a61ca", "url": "https://github.com/vividus-framework/vividus/commit/5f229aa6ad3de79f09e8428a48500983f53a61ca", "message": "Fix 919issue\n\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-09-29T14:09:59Z", "type": "forcePushed"}, {"oid": "fc6b489a16b9b73c3fca250e1852085e42cae5ea", "url": "https://github.com/vividus-framework/vividus/commit/fc6b489a16b9b73c3fca250e1852085e42cae5ea", "message": "Fix 919issue\n\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-09-29T14:35:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMDI0Mw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498210243", "bodyText": "Map<String, List<String>> getDataAsTable(String range);", "author": "valfirst", "createdAt": "2020-10-01T12:37:28Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/IExcelSheetParser.java", "diffHunk": "@@ -41,4 +41,6 @@\n     List<CellValue> getDataFromRange(String range);\n \n     String getDataFromCell(String cellAddress);\n+\n+    Map<String, List<String>> exactDataTable(String range);", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMjQwNg==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498212406", "bodyText": "Arrays.asList -> List.of", "author": "valfirst", "createdAt": "2020-10-01T12:40:54Z", "path": "vividus-plugin-excel/src/test/java/org/vividus/excel/ExcelSheetParserTests.java", "diffHunk": "@@ -203,6 +207,17 @@ void testGetDataFromRange()\n         assertCellValue(dataFromRange.get(5), closedStatus, \"B7\");\n     }\n \n+    @Test\n+    void testGetDataFromTableRange()\n+    {\n+        sheetParser = new ExcelSheetParser(extractor.getSheet(SHEET_NAME).get());\n+        Map<String, List<String>> data = sheetParser.exactDataTable(\"A1:B3\");\n+        Map<String, List<String>> expectedData = new HashMap<>();\n+        expectedData.put(NAME, Arrays.asList(\"First\", \"Second\"));\n+        expectedData.put(\"status\", Arrays.asList(OPEN_STATUS, OPEN_STATUS));", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMjQ2Nw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498212467", "bodyText": "Arrays.asList -> List.of", "author": "valfirst", "createdAt": "2020-10-01T12:41:00Z", "path": "vividus-plugin-excel/src/test/java/org/vividus/excel/ExcelSheetParserTests.java", "diffHunk": "@@ -203,6 +207,17 @@ void testGetDataFromRange()\n         assertCellValue(dataFromRange.get(5), closedStatus, \"B7\");\n     }\n \n+    @Test\n+    void testGetDataFromTableRange()\n+    {\n+        sheetParser = new ExcelSheetParser(extractor.getSheet(SHEET_NAME).get());\n+        Map<String, List<String>> data = sheetParser.exactDataTable(\"A1:B3\");\n+        Map<String, List<String>> expectedData = new HashMap<>();\n+        expectedData.put(NAME, Arrays.asList(\"First\", \"Second\"));", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMzU4Ng==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498213586", "bodyText": "listRow -> rows", "author": "valfirst", "createdAt": "2020-10-01T12:42:48Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/ExcelSheetParser.java", "diffHunk": "@@ -225,6 +227,32 @@ public String getDataFromCell(String address)\n                 .orElse(null);\n     }\n \n+    public Map<String, List<String>> exactDataTable(String range)\n+    {\n+        CellRangeAddress address = CellRangeAddress.valueOf(range);\n+        Map<String, List<String>> data = new HashMap<>();\n+        List<List<String>> listRow = new ArrayList<>();", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMzkyNw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498213927", "bodyText": "declaration should be moved after the first loop", "author": "valfirst", "createdAt": "2020-10-01T12:43:23Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/ExcelSheetParser.java", "diffHunk": "@@ -225,6 +227,32 @@ public String getDataFromCell(String address)\n                 .orElse(null);\n     }\n \n+    public Map<String, List<String>> exactDataTable(String range)\n+    {\n+        CellRangeAddress address = CellRangeAddress.valueOf(range);\n+        Map<String, List<String>> data = new HashMap<>();", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzI0Ng==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498217246", "bodyText": "List<String> headers = listRow.remove(0);", "author": "valfirst", "createdAt": "2020-10-01T12:48:39Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/ExcelSheetParser.java", "diffHunk": "@@ -225,6 +227,32 @@ public String getDataFromCell(String address)\n                 .orElse(null);\n     }\n \n+    public Map<String, List<String>> exactDataTable(String range)\n+    {\n+        CellRangeAddress address = CellRangeAddress.valueOf(range);\n+        Map<String, List<String>> data = new HashMap<>();\n+        List<List<String>> listRow = new ArrayList<>();\n+        for (int rowIndex = address.getFirstRow(); rowIndex <= address.getLastRow(); rowIndex++)\n+        {\n+            List<String> col = new ArrayList<>();\n+            Row row = sheet.getRow(rowIndex);\n+            for (int colIndex = address.getFirstColumn(); colIndex <= address.getLastColumn(); colIndex++)\n+            {\n+                col.add(row.getCell(colIndex).getStringCellValue());\n+            }\n+            listRow.add(col);\n+        }\n+        List<String> headers = listRow.get(0);\n+        listRow.remove(0);", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxODMxMQ==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498218311", "bodyText": "what about building table at excel traversal (without this extra transformation)?", "author": "valfirst", "createdAt": "2020-10-01T12:50:20Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/ExcelSheetParser.java", "diffHunk": "@@ -225,6 +227,32 @@ public String getDataFromCell(String address)\n                 .orElse(null);\n     }\n \n+    public Map<String, List<String>> exactDataTable(String range)\n+    {\n+        CellRangeAddress address = CellRangeAddress.valueOf(range);\n+        Map<String, List<String>> data = new HashMap<>();\n+        List<List<String>> listRow = new ArrayList<>();\n+        for (int rowIndex = address.getFirstRow(); rowIndex <= address.getLastRow(); rowIndex++)\n+        {\n+            List<String> col = new ArrayList<>();\n+            Row row = sheet.getRow(rowIndex);\n+            for (int colIndex = address.getFirstColumn(); colIndex <= address.getLastColumn(); colIndex++)\n+            {\n+                col.add(row.getCell(colIndex).getStringCellValue());\n+            }\n+            listRow.add(col);\n+        }\n+        List<String> headers = listRow.get(0);\n+        listRow.remove(0);\n+        for (int i = 0; i < headers.size(); i++)\n+        {\n+            final int index = i;\n+            List<String> listColumn = listRow.stream().map(list -> list.get(index)).collect(Collectors.toList());", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxODc3Mg==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498218772", "bodyText": "appendSymbols -> replaceLineBreaks", "author": "valfirst", "createdAt": "2020-10-01T12:51:05Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +103,30 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<String> extractValues(IExcelSheetParser sheetParser, String range)\n+    {\n+        return sheetParser.getDataFromRange(range).stream().map(CellValue::getValue).collect(Collectors.toList());\n+    }\n+\n     private List<String> extractDataFromAddresses(IExcelSheetParser sheetParser, String addresses)\n     {\n         return Stream.of(addresses.split(\";\")).map(sheetParser::getDataFromCell).collect(Collectors.toList());\n     }\n \n-    private String build(List<String> data, TableProperties properties)\n+    private String build(List<String> headers, List<List<String>> data, TableProperties properties)\n+    {\n+        String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n+        String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n+            : lineBreakReplacementPropertyValue;\n+        List<List<String>> result = data.stream().map(element -> appendSymbols(element, lineBreakReplacement)).\n+                                    collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTableFromColumns(headers, result, properties);\n+    }\n+\n+    private List<String> appendSymbols(List<String> list, String lineBreakReplacement)", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMDA0NA==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498220044", "bodyText": "why do you need copies?", "author": "valfirst", "createdAt": "2020-10-01T12:53:04Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -56,33 +60,38 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n                 throw new IllegalArgumentException(\"Sheet with name '\" + sheetName + \"' does not exist\");\n             }\n             IExcelSheetParser excelSheetParser = new ExcelSheetParser(sheet.get());\n-            String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n-            String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n-                : lineBreakReplacementPropertyValue;\n-            result = extractData(excelSheetParser, properties)\n-                    .stream()\n-                    .map(e -> e.replace(\"\\n\", lineBreakReplacement))\n-                    .collect(Collectors.toList());\n+            String column = properties.getProperties().getProperty(COLUMN);\n+            if (column != null)\n+            {\n+                notBlank(column, \"Table property 'column' is blank\");\n+                String joinValues = properties.getProperties().getProperty(\"joinValues\");\n+                List<String> result = extractData(excelSheetParser, properties);\n+                List<String> data = Boolean.parseBoolean(joinValues) ? List.of(String.join(\" \", result)) : result;\n+                return build(List.of(column), List.of(data), properties);\n+            }\n+            else\n+            {\n+                String range = ExtendedTableTransformer.getMandatoryNonBlankProperty(properties, RANGE);\n+                Map<String, List<String>> exactDataTable = excelSheetParser.exactDataTable(range);\n+                return build(List.copyOf(exactDataTable.keySet()), List.copyOf(exactDataTable.values()), properties);", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NDMyMg==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498394322", "bodyText": "change to  List headers = exactDataTable.keySet().stream().collect(Collectors.toList());\nList<List> columns = exactDataTable.values().stream().collect(Collectors.toList());", "author": "TatianaTochko", "createdAt": "2020-10-01T17:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMDA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMDQxNg==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r498220416", "bodyText": "used once thus it can be inlined", "author": "valfirst", "createdAt": "2020-10-01T12:53:41Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -40,13 +42,15 @@\n @Named(\"FROM_EXCEL\")\n public class ExcelTableTransformer implements ExtendedTableTransformer\n {\n+    private static final String COLUMN = \"column\";", "originalCommit": "e01e2eecf1912f7b60ee9fd50585e9d0301f245a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3553d6d0cd6cb19bdd08133fecd74162e72e0f6b", "url": "https://github.com/vividus-framework/vividus/commit/3553d6d0cd6cb19bdd08133fecd74162e72e0f6b", "message": "Fix 919issue\n\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-10-01T17:04:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA5NzQ1Nw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r500097457", "bodyText": "https://github.com/vividus-framework/vividus/pull/962/files#r496624037", "author": "ikalinin1", "createdAt": "2020-10-06T08:29:49Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +104,30 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<String> extractValues(IExcelSheetParser sheetParser, String range)\n+    {\n+        return sheetParser.getDataFromRange(range).stream().map(CellValue::getValue).collect(Collectors.toList());\n+    }\n+\n     private List<String> extractDataFromAddresses(IExcelSheetParser sheetParser, String addresses)\n     {\n         return Stream.of(addresses.split(\";\")).map(sheetParser::getDataFromCell).collect(Collectors.toList());\n     }\n \n-    private String build(List<String> data, TableProperties properties)\n+    private String build(List<String> headers, List<List<String>> data, TableProperties properties)\n+    {\n+        String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n+        String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n+            : lineBreakReplacementPropertyValue;\n+        List<List<String>> result = data.stream().map(element -> replaceLineBreaks(element, lineBreakReplacement)).\n+                                    collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTableFromColumns(headers, result, properties);\n+    }\n+\n+    private List<String> replaceLineBreaks(List<String> list, String lineBreakReplacement)\n     {\n-        String columnName = ExtendedTableTransformer.getMandatoryNonBlankProperty(properties, \"column\");\n-        String joinValues = properties.getProperties().getProperty(\"joinValues\");\n-        List<String> columnData = Boolean.parseBoolean(joinValues) ? List.of(String.join(\" \", data)) : data;\n-        return ExamplesTableProcessor.buildExamplesTableFromColumns(List.of(columnName),\n-                List.of(columnData), properties);\n+        return list.stream()", "originalCommit": "3553d6d0cd6cb19bdd08133fecd74162e72e0f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA5Nzk2Mg==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r500097962", "bodyText": "are there any guarantees that \"\\n\" only Unix-like linebreaks will be used?", "author": "ikalinin1", "createdAt": "2020-10-06T08:30:33Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +104,30 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<String> extractValues(IExcelSheetParser sheetParser, String range)\n+    {\n+        return sheetParser.getDataFromRange(range).stream().map(CellValue::getValue).collect(Collectors.toList());\n+    }\n+\n     private List<String> extractDataFromAddresses(IExcelSheetParser sheetParser, String addresses)\n     {\n         return Stream.of(addresses.split(\";\")).map(sheetParser::getDataFromCell).collect(Collectors.toList());\n     }\n \n-    private String build(List<String> data, TableProperties properties)\n+    private String build(List<String> headers, List<List<String>> data, TableProperties properties)\n+    {\n+        String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n+        String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n+            : lineBreakReplacementPropertyValue;\n+        List<List<String>> result = data.stream().map(element -> replaceLineBreaks(element, lineBreakReplacement)).\n+                                    collect(Collectors.toList());\n+        return ExamplesTableProcessor.buildExamplesTableFromColumns(headers, result, properties);\n+    }\n+\n+    private List<String> replaceLineBreaks(List<String> list, String lineBreakReplacement)\n     {\n-        String columnName = ExtendedTableTransformer.getMandatoryNonBlankProperty(properties, \"column\");\n-        String joinValues = properties.getProperties().getProperty(\"joinValues\");\n-        List<String> columnData = Boolean.parseBoolean(joinValues) ? List.of(String.join(\" \", data)) : data;\n-        return ExamplesTableProcessor.buildExamplesTableFromColumns(List.of(columnName),\n-                List.of(columnData), properties);\n+        return list.stream()\n+                     .map(e -> e.replace(\"\\n\", lineBreakReplacement))", "originalCommit": "3553d6d0cd6cb19bdd08133fecd74162e72e0f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDExMzU2Mw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r500113563", "bodyText": "I think that's OOS the current PR, I have no idea how it worked before, but we don't have issues", "author": "valfirst", "createdAt": "2020-10-06T08:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA5Nzk2Mg=="}], "type": "inlineReview"}, {"oid": "5d516403f6ebaa107606e05a8ea279a505bdd049", "url": "https://github.com/vividus-framework/vividus/commit/5d516403f6ebaa107606e05a8ea279a505bdd049", "message": "Fix 919issue\n\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-10-07T09:54:57Z", "type": "forcePushed"}, {"oid": "789854d396fd17f4908081ea48a1a853f2250682", "url": "https://github.com/vividus-framework/vividus/commit/789854d396fd17f4908081ea48a1a853f2250682", "message": "Fix 919issue\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-10-07T15:01:08Z", "type": "forcePushed"}, {"oid": "71c6bca7a1b792bd6de6ac46ba9e87b12dbc88c3", "url": "https://github.com/vividus-framework/vividus/commit/71c6bca7a1b792bd6de6ac46ba9e87b12dbc88c3", "message": "Fix 919issue\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-10-08T09:58:44Z", "type": "forcePushed"}, {"oid": "503c0e0f261f852d45a765ab67bfe7ec2ef45d8c", "url": "https://github.com/vividus-framework/vividus/commit/503c0e0f261f852d45a765ab67bfe7ec2ef45d8c", "message": "Fix 919issue\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-10-08T11:55:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5MDc4Mw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r501690783", "bodyText": "you can use Collection interface instead of List and pass exactDataTable keys and values without collecting them into list", "author": "uarlouski", "createdAt": "2020-10-08T12:45:24Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +104,31 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<String> extractValues(IExcelSheetParser sheetParser, String range)\n+    {\n+        return sheetParser.getDataFromRange(range).stream().map(CellValue::getValue).collect(Collectors.toList());\n+    }\n+\n     private List<String> extractDataFromAddresses(IExcelSheetParser sheetParser, String addresses)\n     {\n         return Stream.of(addresses.split(\";\")).map(sheetParser::getDataFromCell).collect(Collectors.toList());\n     }\n \n-    private String build(List<String> data, TableProperties properties)\n+    private String build(List<String> headers, List<List<String>> data, TableProperties properties)", "originalCommit": "503c0e0f261f852d45a765ab67bfe7ec2ef45d8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26edbf0bd026532ebb5c580c7932bf1d97fbfb28", "url": "https://github.com/vividus-framework/vividus/commit/26edbf0bd026532ebb5c580c7932bf1d97fbfb28", "message": "Update ExcelTableTransformer.java\n\nFix 919issue\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-10-08T15:02:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNjk1Mw==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r501816953", "bodyText": "can be inlined now", "author": "valfirst", "createdAt": "2020-10-08T15:34:33Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -56,33 +60,40 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n                 throw new IllegalArgumentException(\"Sheet with name '\" + sheetName + \"' does not exist\");\n             }\n             IExcelSheetParser excelSheetParser = new ExcelSheetParser(sheet.get());\n-            String lineBreakReplacementPropertyValue = properties.getProperties().getProperty(\"lineBreakReplacement\");\n-            String lineBreakReplacement = lineBreakReplacementPropertyValue == null ? \"\"\n-                : lineBreakReplacementPropertyValue;\n-            result = extractData(excelSheetParser, properties)\n-                    .stream()\n-                    .map(e -> e.replace(\"\\n\", lineBreakReplacement))\n-                    .collect(Collectors.toList());\n+            String column = properties.getProperties().getProperty(\"column\");\n+            if (column != null)\n+            {\n+                notBlank(column, \"Table property 'column' is blank\");\n+                String joinValues = properties.getProperties().getProperty(\"joinValues\");\n+                List<String> result = extractData(excelSheetParser, properties);\n+                List<String> data = Boolean.parseBoolean(joinValues) ? List.of(String.join(\" \", result)) : result;\n+                return build(List.of(column), List.of(data), properties);\n+            }\n+            else\n+            {\n+                String range = ExtendedTableTransformer.getMandatoryNonBlankProperty(properties, RANGE);\n+                Map<String, List<String>> exactDataTable = excelSheetParser.getDataAsTable(range);\n+                Collection<String> headers = exactDataTable.keySet();", "originalCommit": "26edbf0bd026532ebb5c580c7932bf1d97fbfb28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNzIxNA==", "url": "https://github.com/vividus-framework/vividus/pull/962#discussion_r501817214", "bodyText": "List<List<String>> data -> Collection<List<String>> data", "author": "valfirst", "createdAt": "2020-10-08T15:34:54Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/transformer/ExcelTableTransformer.java", "diffHunk": "@@ -94,17 +105,31 @@ public String transform(String tableAsString, TableParsers tableParsers, TablePr\n         return data;\n     }\n \n+    private List<String> extractValues(IExcelSheetParser sheetParser, String range)\n+    {\n+        return sheetParser.getDataFromRange(range).stream().map(CellValue::getValue).collect(Collectors.toList());\n+    }\n+\n     private List<String> extractDataFromAddresses(IExcelSheetParser sheetParser, String addresses)\n     {\n         return Stream.of(addresses.split(\";\")).map(sheetParser::getDataFromCell).collect(Collectors.toList());\n     }\n \n-    private String build(List<String> data, TableProperties properties)\n+    private String build(Collection<String> headers, List<List<String>> data, TableProperties properties)", "originalCommit": "26edbf0bd026532ebb5c580c7932bf1d97fbfb28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "106ae866cc3fcf51065cd4dbdeb86818c3438c71", "url": "https://github.com/vividus-framework/vividus/commit/106ae866cc3fcf51065cd4dbdeb86818c3438c71", "message": "Fix 919issue\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-10-09T07:04:45Z", "type": "commit"}, {"oid": "106ae866cc3fcf51065cd4dbdeb86818c3438c71", "url": "https://github.com/vividus-framework/vividus/commit/106ae866cc3fcf51065cd4dbdeb86818c3438c71", "message": "Fix 919issue\n[transformer=FROM_EXCEL] Provide possibility to use the range of ALL cells", "committedDate": "2020-10-09T07:04:45Z", "type": "forcePushed"}]}