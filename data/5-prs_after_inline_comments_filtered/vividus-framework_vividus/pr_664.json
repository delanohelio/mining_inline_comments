{"pr_number": 664, "pr_title": "[vividus-plugin-rest-api] Add step to save cookie as variable", "pr_createdAt": "2020-06-10T11:06:39Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/664", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0NDI1NA==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438044254", "bodyText": "I propose to use a dynamic variable in favor of step;\nJust like for the body", "author": "ikalinin1", "createdAt": "2020-06-10T11:12:32Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpCookieSteps.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+import javax.inject.Inject;\n+import org.apache.http.cookie.Cookie;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class HttpCookieSteps\n+{\n+    private final IBddVariableContext bddVariableContext;\n+    private final CookieStoreProvider cookieStoreProvider;\n+    private final ISoftAssert softAssert;\n+\n+    public HttpCookieSteps(IBddVariableContext bddVariableContext, CookieStoreProvider cookieStoreProvider,\n+            ISoftAssert softAssert)\n+    {\n+        this.bddVariableContext = bddVariableContext;\n+        this.cookieStoreProvider = cookieStoreProvider;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Saves cookie to scope variable\n+     * @param cookieName name of cookie to save\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName name of variable\n+     */\n+    @When(\"I save value of HTTP cookie with name `$cookieName` to $scopes variable `$variableName`\")", "originalCommit": "a595a7377b0916dcdbd0f8befdd207c13f5a37e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyMzMyMQ==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438623321", "bodyText": "Discussed with the team, the step is the simpler API due to cookies' complexity. Please ignore the comment above", "author": "ikalinin1", "createdAt": "2020-06-11T08:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0NDI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0ODg0Mg==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438048842", "bodyText": "maybe make sense to move\nCookieStore cookieStore = Mockito.mock(CookieStore.class);\nwhen(cookieStoreProvider.getCookieStore()).thenReturn(cookieStore);\n\nin @before ?", "author": "abudevich", "createdAt": "2020-06-10T11:22:04Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpCookieStepsTests.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.cookie.Cookie;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class HttpCookieStepsTests\n+{\n+    private static final String NAME = \"name\";\n+\n+    @Mock\n+    private Cookie cookie;\n+\n+    @Mock\n+    private CookieStoreProvider cookieStoreProvider;\n+\n+    @Mock\n+    private IBddVariableContext bddVariableContext;\n+\n+    @Mock\n+    private ISoftAssert softAssert;\n+\n+    @InjectMocks\n+    private HttpCookieSteps httpCookieSteps;\n+\n+    @Test\n+    void shouldSaveCookieValueIntoVariableContext()\n+    {\n+        CookieStore cookieStore = Mockito.mock(CookieStore.class);", "originalCommit": "88a9520c2c3bced6d83a751698adb8f2a387fa46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NDM1OA==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438364358", "bodyText": "instead of getting first, collect the list and then assert that number of cookies in the collection is 1", "author": "valfirst", "createdAt": "2020-06-10T19:39:34Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpCookieSteps.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.apache.http.cookie.Cookie;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class HttpCookieSteps\n+{\n+    private final IBddVariableContext bddVariableContext;\n+    private final CookieStoreProvider cookieStoreProvider;\n+    private final ISoftAssert softAssert;\n+\n+    public HttpCookieSteps(IBddVariableContext bddVariableContext, CookieStoreProvider cookieStoreProvider,\n+            ISoftAssert softAssert)\n+    {\n+        this.bddVariableContext = bddVariableContext;\n+        this.cookieStoreProvider = cookieStoreProvider;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Saves cookie to scope variable\n+     * @param cookieName name of cookie to save\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName name of variable\n+     */\n+    @When(\"I save value of HTTP cookie with name `$cookieName` to $scopes variable `$variableName`\")\n+    public void saveHttpCookieIntoVariable(String cookieName, Set<VariableScope> scopes, String variableName)\n+    {\n+        Optional<Cookie> targetCookie = cookieStoreProvider.getCookieStore().getCookies()\n+                .stream()\n+                .filter(cookie -> cookie.getName().equals(cookieName))\n+                .findFirst();", "originalCommit": "1c00be9a8a9cbc91f05d06e201c84539d790458b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NDY2Mw==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438364663", "bodyText": "no need to make it public", "author": "valfirst", "createdAt": "2020-06-10T19:40:08Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpCookieStepsTests.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.cookie.Cookie;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class HttpCookieStepsTests", "originalCommit": "1c00be9a8a9cbc91f05d06e201c84539d790458b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzODQ4OQ==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438638489", "bodyText": "If we have more than 1 cookies with the same name, will this step successfully pass?\nWhat is the suggested solution to handle such situation?", "author": "dKatechev", "createdAt": "2020-06-11T08:51:51Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpCookieSteps.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import java.util.stream.Collectors;\n+import org.apache.http.cookie.Cookie;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class HttpCookieSteps\n+{\n+    private final IBddVariableContext bddVariableContext;\n+    private final CookieStoreProvider cookieStoreProvider;\n+    private final ISoftAssert softAssert;\n+\n+    public HttpCookieSteps(IBddVariableContext bddVariableContext, CookieStoreProvider cookieStoreProvider,\n+            ISoftAssert softAssert)\n+    {\n+        this.bddVariableContext = bddVariableContext;\n+        this.cookieStoreProvider = cookieStoreProvider;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Saves cookie to scope variable\n+     * @param cookieName name of cookie to save\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName name of variable\n+     */\n+    @When(\"I save value of HTTP cookie with name `$cookieName` to $scopes variable `$variableName`\")\n+    public void saveHttpCookieIntoVariable(String cookieName, Set<VariableScope> scopes, String variableName)\n+    {\n+        List<Cookie> cookies = cookieStoreProvider.getCookieStore().getCookies()\n+                .stream()\n+                .filter(cookie -> cookie.getName().equals(cookieName))\n+                .collect(Collectors.toList());\n+        softAssert.assertTrue(String.format(\"Cookie with the name '%s' is set\", cookieName), cookies.size() == 1);", "originalCommit": "decf4c201fe08107d7b66bd58e2d336321ed08d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MTI0Nw==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438641247", "bodyText": "it will fail, since we can't decide which cookie should be used", "author": "valfirst", "createdAt": "2020-06-11T08:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzODQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDIxMw==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438640213", "bodyText": "use assertEquals as it gives better description in case of failure", "author": "valfirst", "createdAt": "2020-06-11T08:54:47Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpCookieSteps.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import java.util.stream.Collectors;\n+import org.apache.http.cookie.Cookie;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class HttpCookieSteps\n+{\n+    private final IBddVariableContext bddVariableContext;\n+    private final CookieStoreProvider cookieStoreProvider;\n+    private final ISoftAssert softAssert;\n+\n+    public HttpCookieSteps(IBddVariableContext bddVariableContext, CookieStoreProvider cookieStoreProvider,\n+            ISoftAssert softAssert)\n+    {\n+        this.bddVariableContext = bddVariableContext;\n+        this.cookieStoreProvider = cookieStoreProvider;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Saves cookie to scope variable\n+     * @param cookieName name of cookie to save\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName name of variable\n+     */\n+    @When(\"I save value of HTTP cookie with name `$cookieName` to $scopes variable `$variableName`\")\n+    public void saveHttpCookieIntoVariable(String cookieName, Set<VariableScope> scopes, String variableName)\n+    {\n+        List<Cookie> cookies = cookieStoreProvider.getCookieStore().getCookies()\n+                .stream()\n+                .filter(cookie -> cookie.getName().equals(cookieName))\n+                .collect(Collectors.toList());\n+        softAssert.assertTrue(String.format(\"Cookie with the name '%s' is set\", cookieName), cookies.size() == 1);", "originalCommit": "decf4c201fe08107d7b66bd58e2d336321ed08d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDg3NQ==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r438640875", "bodyText": "variable should be saved, only if we have 1 cookie:\nif (softAssert.assertEquals(...))\n{\n   bddVariableContext.putVariable(...);\n}", "author": "valfirst", "createdAt": "2020-06-11T08:55:51Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpCookieSteps.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import java.util.stream.Collectors;\n+import org.apache.http.cookie.Cookie;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class HttpCookieSteps\n+{\n+    private final IBddVariableContext bddVariableContext;\n+    private final CookieStoreProvider cookieStoreProvider;\n+    private final ISoftAssert softAssert;\n+\n+    public HttpCookieSteps(IBddVariableContext bddVariableContext, CookieStoreProvider cookieStoreProvider,\n+            ISoftAssert softAssert)\n+    {\n+        this.bddVariableContext = bddVariableContext;\n+        this.cookieStoreProvider = cookieStoreProvider;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Saves cookie to scope variable\n+     * @param cookieName name of cookie to save\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName name of variable\n+     */\n+    @When(\"I save value of HTTP cookie with name `$cookieName` to $scopes variable `$variableName`\")\n+    public void saveHttpCookieIntoVariable(String cookieName, Set<VariableScope> scopes, String variableName)\n+    {\n+        List<Cookie> cookies = cookieStoreProvider.getCookieStore().getCookies()\n+                .stream()\n+                .filter(cookie -> cookie.getName().equals(cookieName))\n+                .collect(Collectors.toList());\n+        softAssert.assertTrue(String.format(\"Cookie with the name '%s' is set\", cookieName), cookies.size() == 1);\n+        bddVariableContext.putVariable(scopes, variableName, cookies.get(0));", "originalCommit": "decf4c201fe08107d7b66bd58e2d336321ed08d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2Mzc5NA==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r439463794", "bodyText": "List<Cookie> cookies = cookieStoreProvider.getCookieStore().getCookies().stream()\n                .filter(cookie -> cookie.getName().equals(cookieName))\n                .collect(Collectors.toList());\nint cookiesNumber = cookies.size();\nif (softAssert.assertThat(String.format(\"Number of cookies with name '%s'\", cookieName), cookiesNumber, greaterThan(0)))\n{\n    if (cookiesNumber == 1)\n    {\n        bddVariableContext.putVariable(scopes, variableName, cookies.get(0).getValue());\n    }\n    else\n    {\n        String rootPath = \"/\";\n        LOGGER.info(\"Filtering cookies by path attribute '{}'\", rootPath);\n        cookies = cookies.stream()\n                .filter(cookie -> rootPath.equals(cookie.getPath()))\n                .collect(Collectors.toList());\n        if (softAssert.assertEquals(String.format(\"Number of cookies with name '%s' and path attribute '%s'\", cookieName, rootPath), 1, cookies.size())\n        {\n            bddVariableContext.putVariable(scopes, variableName, cookies.get(0).getValue());\n        }\n    }\n}", "author": "valfirst", "createdAt": "2020-06-12T14:46:21Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/steps/api/HttpCookieSteps.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.cookie.Cookie;\n+import org.jbehave.core.annotations.When;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class HttpCookieSteps\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(HttpCookieSteps.class);\n+    private final IBddVariableContext bddVariableContext;\n+    private final CookieStoreProvider cookieStoreProvider;\n+    private final ISoftAssert softAssert;\n+\n+    public HttpCookieSteps(IBddVariableContext bddVariableContext, CookieStoreProvider cookieStoreProvider,\n+            ISoftAssert softAssert)\n+    {\n+        this.bddVariableContext = bddVariableContext;\n+        this.cookieStoreProvider = cookieStoreProvider;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Saves cookie to scope variable.\n+     * If present several cookies with the same name will be stored cookie with the root path value (path is '/'),\n+     * @param cookieName   name of cookie to save\n+     * @param scopes       The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     *                     <i>Available scopes:</i>\n+     *                     <ul>\n+     *                     <li><b>STEP</b> - the variable will be available only within the step,\n+     *                     <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     *                     <li><b>STORY</b> - the variable will be available within the whole story,\n+     *                     <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     *                     </ul>\n+     * @param variableName name of variable\n+     */\n+    @When(\"I save value of HTTP cookie with name `$cookieName` to $scopes variable `$variableName`\")\n+    public void saveHttpCookieIntoVariable(String cookieName, Set<VariableScope> scopes, String variableName)\n+    {\n+        List<Cookie> cookies = cookieStoreProvider.getCookieStore().getCookies()\n+                .stream()\n+                .filter(cookie -> cookie.getName().equals(cookieName))\n+                .collect(Collectors.toList());\n+        int cookiesAmount = cookies.size();\n+        if (softAssert\n+                .assertTrue(String.format(\"Present '%d' cookie(-s) with the name '%s'\", cookiesAmount, cookieName),\n+                        !cookies.isEmpty()))\n+        {\n+            if (cookiesAmount == 1)\n+            {\n+                bddVariableContext.putVariable(scopes, variableName, cookies.get(0).getValue());\n+            }\n+            else\n+            {\n+                LOGGER.info(\"Will be performed cookies filtering by path value equal to '/'\");\n+                List<Cookie> filteredCookies = cookies\n+                        .stream()\n+                        .filter(cookie -> cookie.getPath().equals(\"/\"))\n+                        .collect(Collectors.toList());\n+                if (filteredCookies.size() == 1)\n+                {\n+                    bddVariableContext.putVariable(scopes, variableName, filteredCookies.get(0).getValue());\n+                }\n+                else\n+                {\n+                    softAssert.recordFailedAssertion(\n+                            String.format(\"Not found cookie with name '%s' and path '/' or was several candidates\",\n+                                    cookieName));\n+                }\n+            }\n+        }", "originalCommit": "369dcbd00049b37ce01efcc445dea8f04d657cd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2NDIzMw==", "url": "https://github.com/vividus-framework/vividus/pull/664#discussion_r439464233", "bodyText": "formatting a bit awkward", "author": "valfirst", "createdAt": "2020-06-12T14:47:10Z", "path": "vividus-plugin-rest-api/src/test/java/org/vividus/bdd/steps/api/HttpCookieStepsTests.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.api;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.http.client.CookieStore;\n+import org.apache.http.cookie.Cookie;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.http.CookieStoreProvider;\n+import org.vividus.softassert.ISoftAssert;\n+\n+@ExtendWith(MockitoExtension.class)\n+class HttpCookieStepsTests\n+{\n+    private static final String NAME = \"name\";\n+    private static final String VALUE = \"value\";\n+    private static final String ANOTHER_PATH = \"/anotherPath\";\n+    private static final String PRESENT_COOKIES_WITH_THE_NAME = \"Present '%d' cookie(-s) with the name '%s'\";\n+\n+    @Mock\n+    private Cookie cookie;\n+\n+    @Mock\n+    private CookieStoreProvider cookieStoreProvider;\n+\n+    @Mock\n+    private IBddVariableContext bddVariableContext;\n+\n+    @Mock\n+    private ISoftAssert softAssert;\n+\n+    @InjectMocks\n+    private HttpCookieSteps httpCookieSteps;\n+\n+    private CookieStore cookieStore;\n+\n+    @BeforeEach\n+    void beforeEach()\n+    {\n+        cookieStore = Mockito.mock(CookieStore.class);\n+        when(cookieStoreProvider.getCookieStore()).thenReturn(cookieStore);\n+    }\n+\n+    @Test\n+    void shouldSaveCookieValueIntoVariableContext()\n+    {\n+        List<Cookie> cookies = List.of(cookie);\n+        when(cookieStore.getCookies()).thenReturn(cookies);\n+        when(cookie.getName()).thenReturn(NAME);\n+        when(cookie.getValue()).thenReturn(VALUE);\n+        Set<VariableScope> scopes = Set.of(VariableScope.SCENARIO);\n+        when(softAssert.assertTrue(String.format(PRESENT_COOKIES_WITH_THE_NAME, cookies.size(), NAME), true))\n+                .thenReturn(true);\n+        httpCookieSteps.saveHttpCookieIntoVariable(NAME, scopes, NAME);\n+        verifyCookieAssertion(cookies);\n+        verify(bddVariableContext).putVariable(scopes, NAME, VALUE);\n+        verifyNoMoreInteractions(softAssert);\n+    }\n+\n+    @Test\n+    void shouldSaveCookieWithRootPathValueIntoVariableContext()\n+    {\n+        Cookie cookieWithAnotherPath = mock(Cookie.class);\n+        List<Cookie> cookies = List.of(cookie, cookieWithAnotherPath);\n+        when(cookieStore.getCookies()).thenReturn(cookies);\n+        when(cookie.getName()).thenReturn(NAME);\n+        when(cookieWithAnotherPath.getName()).thenReturn(NAME);\n+        when(cookie.getPath()).thenReturn(\"/\");\n+        when(cookieWithAnotherPath.getPath()).thenReturn(ANOTHER_PATH);\n+        when(cookie.getValue()).thenReturn(VALUE);\n+        Set<VariableScope> scopes = Set.of(VariableScope.SCENARIO);\n+        when(softAssert.assertTrue(String.format(PRESENT_COOKIES_WITH_THE_NAME, cookies.size(), NAME), true))\n+                .thenReturn(true);\n+        httpCookieSteps.saveHttpCookieIntoVariable(NAME, scopes, NAME);\n+        verifyCookieAssertion(cookies);\n+        verify(bddVariableContext).putVariable(scopes, NAME, VALUE);\n+        verifyNoMoreInteractions(softAssert);\n+    }\n+\n+    @Test\n+    void shouldNotSaveCookiesWithTheSameNameAndNotRootPathVariableContext()\n+    {\n+        Cookie cookieWithAnotherPath = mock(Cookie.class);\n+        List<Cookie> cookies = List.of(cookie, cookieWithAnotherPath);\n+        when(cookieStore.getCookies()).thenReturn(cookies);\n+        when(cookie.getName()).thenReturn(NAME);\n+        when(cookieWithAnotherPath.getName()).thenReturn(NAME);\n+        when(cookie.getPath()).thenReturn(ANOTHER_PATH);\n+        when(cookieWithAnotherPath.getPath()).thenReturn(ANOTHER_PATH + \"/1\");\n+        Set<VariableScope> scopes = Set.of(VariableScope.SCENARIO);\n+        when(softAssert.assertTrue(String.format(PRESENT_COOKIES_WITH_THE_NAME, cookies.size(), NAME), true))\n+                .thenReturn(true);\n+        httpCookieSteps.saveHttpCookieIntoVariable(NAME, scopes, NAME);\n+        verifyCookieAssertion(cookies);\n+        verifyNoInteractions(bddVariableContext);\n+        verify(softAssert).recordFailedAssertion(\n+                String.format(\"Not found cookie with name '%s' and path '/' or was several candidates\", NAME));\n+    }\n+\n+    @Test\n+    void shouldNotSaveNotExistingCookieAndRecordAssertion()\n+    {\n+        List<Cookie> cookies = Collections.emptyList();\n+        when(cookieStore.getCookies()).thenReturn(cookies);\n+        httpCookieSteps.saveHttpCookieIntoVariable(NAME, Set.of(VariableScope.SCENARIO), NAME);\n+        verifyCookieAssertion(cookies);\n+        verifyNoInteractions(bddVariableContext);\n+        verifyNoMoreInteractions(softAssert);\n+    }\n+\n+    private void verifyCookieAssertion(List<Cookie> cookies)\n+    {\n+        verify(softAssert)\n+                .assertTrue(eq(String.format(PRESENT_COOKIES_WITH_THE_NAME, cookies.size(), NAME)),\n+                        eq(!cookies.isEmpty()));", "originalCommit": "369dcbd00049b37ce01efcc445dea8f04d657cd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d94205ed215cae1059620f33fa6628372cef82a8", "url": "https://github.com/vividus-framework/vividus/commit/d94205ed215cae1059620f33fa6628372cef82a8", "message": "[vividus-plugin-reast-api] Add step to save cookie as variable", "committedDate": "2020-06-15T09:22:39Z", "type": "commit"}]}