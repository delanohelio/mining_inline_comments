{"pr_number": 469, "pr_title": "[plugin-mongo-db] Add plugin to work with MongoDB", "pr_createdAt": "2020-04-05T18:43:30Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/469", "timeline": [{"oid": "c66c0f2b67717bd573ad6b4b75af37245700171c", "url": "https://github.com/vividus-framework/vividus/commit/c66c0f2b67717bd573ad6b4b75af37245700171c", "message": "Add vividus-plugin-mongodb module to work with MongoDB", "committedDate": "2020-04-05T18:45:25Z", "type": "forcePushed"}, {"oid": "f93e7a5eabdbe8632fabba60b98a64aebb0c9616", "url": "https://github.com/vividus-framework/vividus/commit/f93e7a5eabdbe8632fabba60b98a64aebb0c9616", "message": "Add vividus-plugin-mongodb module to work with MongoDB", "committedDate": "2020-04-12T19:27:31Z", "type": "forcePushed"}, {"oid": "acc45b0f54975ace51f172774fec208b3ce3af44", "url": "https://github.com/vividus-framework/vividus/commit/acc45b0f54975ace51f172774fec208b3ce3af44", "message": "Add vividus-plugin-mongodb module to work with MongoDB", "committedDate": "2020-04-12T19:31:00Z", "type": "forcePushed"}, {"oid": "4f1b5917e11163413beab2f560228d1bf111acd9", "url": "https://github.com/vividus-framework/vividus/commit/4f1b5917e11163413beab2f560228d1bf111acd9", "message": "Add vividus-plugin-mongodb module to work with MongoDB", "committedDate": "2020-04-12T19:49:58Z", "type": "forcePushed"}, {"oid": "eb68e208c0611fc6fcc21b060e405019f396b765", "url": "https://github.com/vividus-framework/vividus/commit/eb68e208c0611fc6fcc21b060e405019f396b765", "message": "Add vividus-plugin-mongodb module to work with MongoDB", "committedDate": "2020-04-13T04:32:12Z", "type": "forcePushed"}, {"oid": "dcc7f4c3bec983b4963fcce288c4ec53e732a937", "url": "https://github.com/vividus-framework/vividus/commit/dcc7f4c3bec983b4963fcce288c4ec53e732a937", "message": "Add vividus-plugin-mongodb module to work with MongoDB", "committedDate": "2020-04-13T04:55:07Z", "type": "forcePushed"}, {"oid": "48c90e0d084e6e9256b4573ef374d18a86573bcf", "url": "https://github.com/vividus-framework/vividus/commit/48c90e0d084e6e9256b4573ef374d18a86573bcf", "message": "Add vividus-plugin-mongodb module to work with MongoDB", "committedDate": "2020-04-13T18:44:53Z", "type": "forcePushed"}, {"oid": "beb9bd2bdc626a84e977c45d145aeebb9d799810", "url": "https://github.com/vividus-framework/vividus/commit/beb9bd2bdc626a84e977c45d145aeebb9d799810", "message": "Add vividus-plugin-mongodb module to work with MongoDB", "committedDate": "2020-04-13T18:49:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3OTg4NA==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r407879884", "bodyText": "why not to apply parameter converter?\nString command > Bson command", "author": "valfirst", "createdAt": "2020-04-14T05:42:30Z", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(String command, String dbName, String instanceKey, Set<VariableScope> scopes,", "originalCommit": "beb9bd2bdc626a84e977c45d145aeebb9d799810", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4MDcyNQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r407880725", "bodyText": "checkMid > checkIntermediate", "author": "valfirst", "createdAt": "2020-04-14T05:45:22Z", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(String command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName, db ->\n+        {\n+            Bson executable = Document.parse(command);\n+            db.runCommand(executable).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName)));\n+        });\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();\n+\n+        boolean checkStart = empty || !commands.get(0).getCommand().getCommandType().equals(CommandType.SOURCE);\n+        appendIf(checkStart, () -> \"Command sequence must start with one of the source commands: \"\n+                + MongoCommand.findByCommandType(CommandType.SOURCE), errors);\n+\n+        boolean checkEnd = empty\n+                || !commands.get(commands.size() - 1).getCommand().getCommandType().equals(CommandType.TERMINAL);\n+        appendIf(checkEnd, () -> \"Command sequence must end with one of the terminal commands: \"\n+                + MongoCommand.findByCommandType(CommandType.TERMINAL), errors);\n+\n+        boolean checkMid = !empty && commands.size() > 2 && !commands.subList(1, commands.size() - 1).stream()", "originalCommit": "beb9bd2bdc626a84e977c45d145aeebb9d799810", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4MTA3Mw==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r407881073", "bodyText": "onces  > ones", "author": "valfirst", "createdAt": "2020-04-14T05:46:30Z", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(String command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName, db ->\n+        {\n+            Bson executable = Document.parse(command);\n+            db.runCommand(executable).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName)));\n+        });\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();\n+\n+        boolean checkStart = empty || !commands.get(0).getCommand().getCommandType().equals(CommandType.SOURCE);\n+        appendIf(checkStart, () -> \"Command sequence must start with one of the source commands: \"\n+                + MongoCommand.findByCommandType(CommandType.SOURCE), errors);\n+\n+        boolean checkEnd = empty\n+                || !commands.get(commands.size() - 1).getCommand().getCommandType().equals(CommandType.TERMINAL);\n+        appendIf(checkEnd, () -> \"Command sequence must end with one of the terminal commands: \"\n+                + MongoCommand.findByCommandType(CommandType.TERMINAL), errors);\n+\n+        boolean checkMid = !empty && commands.size() > 2 && !commands.subList(1, commands.size() - 1).stream()\n+                .map(MongoCommandEntry::getCommand)\n+                .map(MongoCommand::getCommandType)\n+                .allMatch(CommandType.INTERMEDIATE::equals);\n+        appendIf(checkMid, () -> \"Only the following commands are allowed between the first and the last onces: \"", "originalCommit": "beb9bd2bdc626a84e977c45d145aeebb9d799810", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de321cbc27c6259505d5cdbbb578406dd092f297", "url": "https://github.com/vividus-framework/vividus/commit/de321cbc27c6259505d5cdbbb578406dd092f297", "message": "[plugin-mongo-db] Add plugin to work with MongoDB", "committedDate": "2020-04-14T15:54:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408637132", "bodyText": "why don't you fast return or fast fail in case of empty commands?", "author": "ikalinin1", "createdAt": "2020-04-15T07:31:25Z", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+        boolean empty = commands.isEmpty();", "originalCommit": "de321cbc27c6259505d5cdbbb578406dd092f297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNTQ2Mg==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408935462", "bodyText": "I would like to give to the end used as comprehensive info as possible without errors like \"command sequence can not be empty\"", "author": "uarlouski", "createdAt": "2020-04-15T15:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NzI0OA==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408957248", "bodyText": "Yep, you will give them it's empty", "author": "ikalinin1", "createdAt": "2020-04-15T16:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTgyMw==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408961823", "bodyText": "it's not informative enough, instead they will get info on how to start and end sequence", "author": "uarlouski", "createdAt": "2020-04-15T16:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTg0OQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408971849", "bodyText": "\"Yep, you will give them it's empty\" - I disagree that this is more informative than\n\nCommand sequence must start with one of the source commands: [FIND]\nCommand sequence must end with one of the terminal commands: [COLLECT, COUNT]", "author": "uarlouski", "createdAt": "2020-04-15T16:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDk2MQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408994961", "bodyText": "fixed", "author": "uarlouski", "createdAt": "2020-04-15T17:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzNzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NTE2NQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408645165", "bodyText": "cache the search?\nhttps://github.com/vividus-framework/vividus/blob/master/vividus-plugin-web-app/src/main/java/org/vividus/ui/web/action/search/ActionAttributeType.java#L113-L114", "author": "ikalinin1", "createdAt": "2020-04-15T07:45:59Z", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommand.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb.command;\n+\n+import static java.util.stream.StreamSupport.stream;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.FindIterable;\n+import com.mongodb.client.MongoCollection;\n+\n+import org.bson.conversions.Bson;\n+\n+public enum MongoCommand\n+{\n+    FIND(CommandType.SOURCE)\n+    {\n+        @Override\n+        public Function<Object, Object> apply(Function<Object, Object> chain, Bson argument)\n+        {\n+            return chain.andThen(out -> cast(out, MongoCollection.class).find(argument));\n+        }\n+    },\n+    PROJECTION(CommandType.INTERMEDIATE)\n+    {\n+        @Override\n+        public Function<Object, Object> apply(Function<Object, Object> chain, Bson argument)\n+        {\n+            return chain.andThen(out -> cast(out, FindIterable.class).projection(argument));\n+        }\n+    },\n+    COLLECT(CommandType.TERMINAL)\n+    {\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Function<Object, Object> apply(Function<Object, Object> chain, Bson argument)\n+        {\n+            return chain.andThen(\n+                out -> stream(cast(out, FindIterable.class).spliterator(), false).collect(Collectors.toList()));\n+        }\n+    },\n+    COUNT(CommandType.TERMINAL)\n+    {\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Function<Object, Object> apply(Function<Object, Object> chain, Bson argument)\n+        {\n+            return chain.andThen(out -> stream(cast(out, FindIterable.class).spliterator(), false).count());\n+        }\n+    };\n+\n+    private final CommandType commandType;\n+\n+    MongoCommand(CommandType commandType)\n+    {\n+        this.commandType = commandType;\n+    }\n+\n+    public CommandType getCommandType()\n+    {\n+        return commandType;\n+    }\n+\n+    public static Collection<MongoCommand> findByCommandType(CommandType commandType)\n+    {\n+        return Arrays.stream(MongoCommand.values())", "originalCommit": "de321cbc27c6259505d5cdbbb578406dd092f297", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408697580", "bodyText": "are setters necessary ?", "author": "ikalinin1", "createdAt": "2020-04-15T09:14:52Z", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/command/MongoCommandEntry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb.command;\n+\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.AsParameters;\n+\n+@AsParameters\n+public class MongoCommandEntry", "originalCommit": "de321cbc27c6259505d5cdbbb578406dd092f297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5ODc5MQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408698791", "bodyText": "My point is without setters it could be converted into Record https://openjdk.java.net/jeps/359", "author": "ikalinin1", "createdAt": "2020-04-15T09:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMTk3Nw==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408931977", "bodyText": "for anyone who doesn't know how behave populate data, class with private methods and without any setter will look weirds, I also think that sonar will consider this as warning", "author": "uarlouski", "createdAt": "2020-04-15T15:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNDQwOA==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408934408", "bodyText": "\"Records cannot extend any other class, and cannot declare instance fields other than the private final fields which correspond to components\" - we will need first to adjust jbahave strategy on how to populate annotated with @AsParameters object fields", "author": "uarlouski", "createdAt": "2020-04-15T15:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODU5NA==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408958594", "bodyText": "Yep, but the setters never used, only in the tests.", "author": "ikalinin1", "createdAt": "2020-04-15T16:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408913465", "bodyText": "you could use csvsource here and it will be 1 Document.parse instead of 3", "author": "ikalinin1", "createdAt": "2020-04-15T15:03:11Z", "path": "vividus-plugin-mongodb/src/test/java/org/vividus/bdd/converter/StringToBsonConverterTests.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.converter;\n+\n+import java.util.stream.Stream;\n+\n+import org.bson.Document;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+class StringToBsonConverterTests\n+{\n+    private static final String EMPTY_JSON = \"{}\";\n+\n+    private final StringToBsonConverter converter = new StringToBsonConverter();\n+\n+    static Stream<Arguments> documents()\n+    {\n+        return Stream.of(\n+                Arguments.of(Document.parse(EMPTY_JSON), null),\n+                Arguments.of(Document.parse(EMPTY_JSON), \"\"),\n+                Arguments.of(Document.parse(\"{ \\\"id\\\" : 1 }\"), \"{\\\"id\\\":1}\")\n+            );\n+    }\n+\n+    @MethodSource(\"documents\")", "originalCommit": "de321cbc27c6259505d5cdbbb578406dd092f297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MzE2MQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408953161", "bodyText": "under the hood it will be still 3 Document.parse", "author": "uarlouski", "createdAt": "2020-04-15T15:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTczNw==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408955737", "bodyText": "from my pov MethodSource is more readable than\n\"{},\", \"{},''\", \"......\"", "author": "uarlouski", "createdAt": "2020-04-15T15:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NzU3MQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408957571", "bodyText": "Less code - less support", "author": "ikalinin1", "createdAt": "2020-04-15T16:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTM0MQ==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r408961341", "bodyText": "we should not prefer readability in favor of less code especially in unit tests", "author": "uarlouski", "createdAt": "2020-04-15T16:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzQ2NQ=="}], "type": "inlineReview"}, {"oid": "fb828148dbe69ec0630f55d106129fb3318a400a", "url": "https://github.com/vividus-framework/vividus/commit/fb828148dbe69ec0630f55d106129fb3318a400a", "message": "[plugin-mongo-db] Add plugin to work with MongoDB", "committedDate": "2020-04-15T15:58:26Z", "type": "forcePushed"}, {"oid": "cde8de952786fafb6dd4d6e959a169f24210e0ac", "url": "https://github.com/vividus-framework/vividus/commit/cde8de952786fafb6dd4d6e959a169f24210e0ac", "message": "[plugin-mongo-db] Add plugin to work with MongoDB", "committedDate": "2020-04-15T16:55:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMzExNg==", "url": "https://github.com/vividus-framework/vividus/pull/469#discussion_r409003116", "bodyText": "Validate.notEmpty(commands, \"Command sequence must not be empty\");\n\nList<String> errors = new ArrayList<>();\nboolean checkStart = !commands.get(0).getCommand().getCommandType().equals(CommandType.SOURCE);\nappendIf(checkStart, () -> \"Command sequence must start with one of the source commands: \"\n        + MongoCommand.findByCommandType(CommandType.SOURCE), errors);\n\nboolean checkEnd = !commands.get(commands.size() - 1).getCommand().getCommandType()\n        .equals(CommandType.TERMINAL);\nappendIf(checkEnd, () -> \"Command sequence must end with one of the terminal commands: \"\n        + MongoCommand.findByCommandType(CommandType.TERMINAL), errors);\n\nboolean checkIntermediate = commands.size() > 2 && !commands.subList(1, commands.size() - 1).stream()\n        .map(MongoCommandEntry::getCommand)\n        .map(MongoCommand::getCommandType)\n        .allMatch(CommandType.INTERMEDIATE::equals);\nappendIf(checkIntermediate,\n    () -> \"Only the following commands are allowed between the first and the last ones: \"\n        + MongoCommand.findByCommandType(CommandType.INTERMEDIATE), errors);\n\nValidate.isTrue(errors.isEmpty(), \"%n%s\",\n        errors.stream().map(e -> \" - \" + e).collect(Collectors.joining(System.lineSeparator())));", "author": "valfirst", "createdAt": "2020-04-15T17:13:34Z", "path": "vividus-plugin-mongodb/src/main/java/org/vividus/bdd/steps/mongodb/MongoDbSteps.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps.mongodb;\n+\n+import static java.util.function.Function.identity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import com.mongodb.client.MongoClient;\n+import com.mongodb.client.MongoClients;\n+import com.mongodb.client.MongoDatabase;\n+\n+import org.apache.commons.lang3.Validate;\n+import org.bson.conversions.Bson;\n+import org.jbehave.core.annotations.When;\n+import org.vividus.bdd.context.IBddVariableContext;\n+import org.vividus.bdd.steps.mongodb.command.CommandType;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommand;\n+import org.vividus.bdd.steps.mongodb.command.MongoCommandEntry;\n+import org.vividus.bdd.variable.VariableScope;\n+import org.vividus.util.json.IJsonUtils;\n+\n+public class MongoDbSteps\n+{\n+    private final Map<String, String> connections;\n+    private final IJsonUtils jsonUtils;\n+    private final IBddVariableContext bddVariableContext;\n+\n+    public MongoDbSteps(Map<String, String> connections, IJsonUtils jsonUtils, IBddVariableContext bddVariableContext)\n+    {\n+        this.connections = connections;\n+        this.jsonUtils = jsonUtils;\n+        this.bddVariableContext = bddVariableContext;\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>executes provided <b>command</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the command execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     *\n+     * @param command command to perform e.g. <i>{ listCollections: 1, nameOnly: true }</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     * @see <a href=\"https://docs.mongodb.com/manual/reference/command/\">Database commands</a>\n+     */\n+    @When(\"I execute command `$command` against `$dbName` database on `$instanceKey` MongoDB instance and save result \"\n+            + \"to $scopes variable `$variableName`\")\n+    public void executeCommand(Bson command, String dbName, String instanceKey, Set<VariableScope> scopes,\n+            String variableName)\n+    {\n+        executeInDatabase(instanceKey, dbName,\n+            db -> db.runCommand(command).entrySet().stream()\n+                .peek(e -> e.setValue(jsonUtils.toJson(e.getValue())))\n+                .collect(Collectors.collectingAndThen(Collectors.toMap(Entry::getKey, Entry::getValue),\n+                    putVariable(scopes, variableName))));\n+    }\n+\n+    /**\n+     * Actions performed in the step:\n+     * <ul>\n+     *     <li>verifies the sequence of provided <b>commands</b> (see rules below)</li>\n+     *     <li>executes provided <b>commands</b> against MongoDB instance by the provided <b>instanceKey</b></li>\n+     *     <li>saves the commands execution result into <b>variableName</b> variable in JSON format</li>\n+     * </ul>\n+     * Commands\n+     * <table border=\"1\">\n+     * <caption>A table of commands</caption>\n+     * <tr>\n+     * <th>Name</th>\n+     * <th>Type</th>\n+     * <th>Description</th>\n+     * <th>Example</th>\n+     * </tr>\n+     * <tr>\n+     * <td>find</td>\n+     * <td>source</td>\n+     * <td>selects documents in a collection, takes JSON as an argument</td>\n+     * <td>{ age: { $gte: 20 }, city: \"minsk\" }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>projection</td>\n+     * <td>intermediate</td>\n+     * <td>determine which fields to include in the returned documents, takes JSON as an argument</td>\n+     * <td>{ age: 1, city: 1, name: 0 }</td>\n+     * </tr>\n+     * <tr>\n+     * <td>count</td>\n+     * <td>terminal</td>\n+     * <td>counts the number of documents in a collection, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * <tr>\n+     * <td>collect</td>\n+     * <td>terminal</td>\n+     * <td>collects previously found documents into JSON format, takes no arguments</td>\n+     * <td></td>\n+     * </tr>\n+     * </table>\n+     * Command sequence rules\n+     * <ul>\n+     * <li>commands sequence must start with one of the <b>source</b> operations</li>\n+     * <li>commands sequence is allowed to have only <b>intermediate</b> operations between the first and last\n+     * commands</li>\n+     * <li>commands sequence must end with one of the <b>terminal</b> operations</li>\n+     * </ul>\n+     * @param commands sequence of commands to execute\n+     * @param collectionName collection name to retrieve documents from e.g. <i>phone_book</i>\n+     * @param dbName database name e.g. <i>users</i>\n+     * @param instanceKey key of particular connection under <b>mongodb.connection.</b> prefix\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values from command execution result\n+     */\n+    @When(\"I execute commands $commands in `$collectionName` collection against `$dbName` database on `$instanceKey` \"\n+            + \"MongoDB instance and save result to $scopes variable `$variableName`\")\n+    public void executeCommands(List<MongoCommandEntry> commands, String collectionName, String dbName,\n+            String instanceKey, Set<VariableScope> scopes, String variableName)\n+    {\n+        verify(commands);\n+        executeInDatabase(instanceKey, dbName,\n+            db -> commands.stream()\n+                .reduce(identity(), (f, c) -> c.getCommand().apply(f, c.getArgument()), (l, r) -> l)\n+                .andThen(jsonUtils::toJson)\n+                .andThen(putVariable(scopes, variableName))\n+                .apply(db.getCollection(collectionName)));\n+    }\n+\n+    private <T> UnaryOperator<T> putVariable(Set<VariableScope> scopes, String variableName)\n+    {\n+        return r ->\n+        {\n+            bddVariableContext.putVariable(scopes, variableName, r);\n+            return r;\n+        };\n+    }\n+\n+    private static void verify(List<MongoCommandEntry> commands)\n+    {\n+        List<String> errors = new ArrayList<>();\n+\n+        if (!commands.isEmpty())\n+        {\n+            boolean checkStart = !commands.get(0).getCommand().getCommandType().equals(CommandType.SOURCE);\n+            appendIf(checkStart, () -> \"Command sequence must start with one of the source commands: \"\n+                    + MongoCommand.findByCommandType(CommandType.SOURCE), errors);\n+\n+            boolean checkEnd = !commands.get(commands.size() - 1).getCommand().getCommandType()\n+                    .equals(CommandType.TERMINAL);\n+            appendIf(checkEnd, () -> \"Command sequence must end with one of the terminal commands: \"\n+                    + MongoCommand.findByCommandType(CommandType.TERMINAL), errors);\n+\n+            boolean checkIntermediate = commands.size() > 2 && !commands.subList(1, commands.size() - 1).stream()\n+                    .map(MongoCommandEntry::getCommand)\n+                    .map(MongoCommand::getCommandType)\n+                    .allMatch(CommandType.INTERMEDIATE::equals);\n+            appendIf(checkIntermediate,\n+                () -> \"Only the following commands are allowed between the first and the last ones: \"\n+                    + MongoCommand.findByCommandType(CommandType.INTERMEDIATE), errors);\n+        }\n+        else\n+        {\n+            errors.add(\"Command sequence must not be empty\");\n+        }\n+\n+        Validate.isTrue(errors.isEmpty(), \"%n%s\",\n+                errors.stream().map(e -> \" - \" + e).collect(Collectors.joining(System.lineSeparator())));", "originalCommit": "cde8de952786fafb6dd4d6e959a169f24210e0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "65d70ae37f5c1adbf36fd6c718a025ca57aec481", "url": "https://github.com/vividus-framework/vividus/commit/65d70ae37f5c1adbf36fd6c718a025ca57aec481", "message": "[plugin-mongo-db] Add plugin to work with MongoDB", "committedDate": "2020-04-15T18:22:29Z", "type": "forcePushed"}, {"oid": "cdccbbec1166283b31319c58866216b06cdc7c0c", "url": "https://github.com/vividus-framework/vividus/commit/cdccbbec1166283b31319c58866216b06cdc7c0c", "message": "[plugin-mongo-db] Add plugin to work with MongoDB", "committedDate": "2020-04-15T18:39:11Z", "type": "commit"}, {"oid": "cdccbbec1166283b31319c58866216b06cdc7c0c", "url": "https://github.com/vividus-framework/vividus/commit/cdccbbec1166283b31319c58866216b06cdc7c0c", "message": "[plugin-mongo-db] Add plugin to work with MongoDB", "committedDate": "2020-04-15T18:39:11Z", "type": "forcePushed"}]}