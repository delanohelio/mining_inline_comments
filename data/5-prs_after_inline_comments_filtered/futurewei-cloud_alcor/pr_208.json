{"pr_number": 208, "pr_title": "[Microservice] Security Group Manager, Port Manager Refactor", "pr_createdAt": "2020-05-22T09:25:55Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/208", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNjk0NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429726944", "bodyText": "Like it!", "author": "xieus", "createdAt": "2020-05-25T04:30:22Z", "path": "lib/src/main/java/com/futurewei/alcor/common/utils/Ipv4AddrUtil.java", "diffHunk": "@@ -63,4 +68,13 @@ public static String longToIpv4(long longIpv4) {\n \n         return result;\n     }\n+\n+    public static boolean ipv4PrefixCheck(String strIpv4) {", "originalCommit": "194593933bdffb392cda8c4bab5696ab56e1c2d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNzAyMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429727020", "bodyText": "Let us get some UTs to cover this basic util method.", "author": "xieus", "createdAt": "2020-05-25T04:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNjk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0ODY2NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429748665", "bodyText": "no problem", "author": "chenpiaoping", "createdAt": "2020-05-25T06:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNjk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNzY3OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429727678", "bodyText": "I think we should have a good design doc and include details of all these good exception.", "author": "xieus", "createdAt": "2020-05-25T04:35:10Z", "path": "services/security_group_manager/src/main/java/com/futurewei/alcor/securitygroup/exception/DefaultSecurityGroupExists.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.securitygroup.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code= HttpStatus.PRECONDITION_FAILED, reason=\"Default security group exists\")\n+public class DefaultSecurityGroupExists extends Exception {", "originalCommit": "194593933bdffb392cda8c4bab5696ab56e1c2d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc0OTU2NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429749565", "bodyText": "no problem", "author": "chenpiaoping", "createdAt": "2020-05-25T06:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNzY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyODg5Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429728896", "bodyText": "Could we add binding to a subnet?", "author": "xieus", "createdAt": "2020-05-25T04:43:07Z", "path": "services/security_group_manager/src/main/java/com/futurewei/alcor/securitygroup/repo/SecurityGroupBindingsRepository.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.securitygroup.repo;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.securitygroup.exception.SecurityGroupNotFound;\n+import com.futurewei.alcor.web.entity.port.PortSecurityGroupsJson;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroup;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupBindings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Repository;\n+import javax.annotation.PostConstruct;\n+import java.util.HashSet;\n+\n+@Repository\n+@ComponentScan(value=\"com.futurewei.alcor.common.db\")\n+public class SecurityGroupBindingsRepository {\n+    private static final Logger LOG = LoggerFactory.getLogger(SecurityGroupBindingsRepository.class);\n+\n+    private ICache<String, SecurityGroupBindings> bindingCache;\n+    private ICache<String, SecurityGroup> securityGroupCache;\n+\n+    @Autowired\n+    public SecurityGroupBindingsRepository(CacheFactory cacheFactory) {\n+        bindingCache = cacheFactory.getCache(SecurityGroupBindings.class);\n+        securityGroupCache = cacheFactory.getCache(SecurityGroup.class);\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        LOG.info(\"SecurityGroupBindingsRepository init done\");\n+    }\n+\n+    public SecurityGroupBindings getSecurityGroupBindings(String id) throws CacheException {\n+        return bindingCache.get(id);\n+    }\n+\n+\n+    public void addSecurityGroupBinding(PortSecurityGroupsJson portSecurityGroupsJson) throws Exception {", "originalCommit": "194593933bdffb392cda8c4bab5696ab56e1c2d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MDA4NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429750084", "bodyText": "No at present, are we going to support that?", "author": "chenpiaoping", "createdAt": "2020-05-25T06:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyODg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc2NTIwNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429765207", "bodyText": "Hold on for a while here. We could use introduce NACL on subnet level and keep security group on port level.", "author": "xieus", "createdAt": "2020-05-25T07:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyODg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyOTU0OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429729549", "bodyText": "For binding, we should also update port manager, right?", "author": "xieus", "createdAt": "2020-05-25T04:47:19Z", "path": "services/security_group_manager/src/main/java/com/futurewei/alcor/securitygroup/service/implement/SecurityGroupServiceImpl.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.securitygroup.service.implement;\n+\n+import com.futurewei.alcor.securitygroup.exception.*;\n+import com.futurewei.alcor.securitygroup.repo.SecurityGroupBindingsRepository;\n+import com.futurewei.alcor.securitygroup.repo.SecurityGroupRepository;\n+import com.futurewei.alcor.securitygroup.service.SecurityGroupService;\n+import com.futurewei.alcor.securitygroup.utils.TimeUtil;\n+import com.futurewei.alcor.web.entity.port.PortSecurityGroupsJson;\n+import com.futurewei.alcor.web.entity.securitygroup.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class SecurityGroupServiceImpl implements SecurityGroupService {\n+    private static final Logger LOG = LoggerFactory.getLogger(SecurityGroupServiceImpl.class);\n+\n+    @Autowired\n+    private SecurityGroupRepository securityGroupRepository;\n+\n+    @Autowired\n+    private SecurityGroupBindingsRepository securityGroupBindingsRepository;\n+\n+    private boolean isDefaultSecurityGroup(SecurityGroup securityGroup) {\n+        return \"default\".equals(securityGroup.getName());\n+    }\n+\n+    private void createDefaultSecurityGroupRules(SecurityGroup securityGroup, SecurityGroupRule.Direction direction) throws Exception {\n+        List<SecurityGroupRule> securityGroupRules = new ArrayList<>();\n+        List<SecurityGroupRule.EtherType> etherTypes = Arrays.asList(SecurityGroupRule.EtherType.IPV4, SecurityGroupRule.EtherType.IPV6);\n+\n+        for (SecurityGroupRule.EtherType etherType: etherTypes) {\n+            SecurityGroupRule securityGroupRule = new SecurityGroupRule();\n+\n+            securityGroupRule.setId(UUID.randomUUID().toString());\n+            securityGroupRule.setEtherType(etherType.getType());\n+            securityGroupRule.setTenantId(securityGroup.getTenantId());\n+            securityGroupRule.setSecurityGroupId(securityGroup.getId());\n+            securityGroupRule.setDirection(direction.getDirection());\n+\n+            securityGroupRules.add(securityGroupRule);\n+        }\n+\n+        securityGroup.setSecurityGroupRules(securityGroupRules);\n+    }\n+\n+    private void createDefaultSecurityGroup(SecurityGroup securityGroup, String description) throws Exception {\n+        SecurityGroup defaultSecurityGroup = new SecurityGroup();\n+        defaultSecurityGroup.setId(UUID.randomUUID().toString());\n+        defaultSecurityGroup.setTenantId(securityGroup.getTenantId());\n+        defaultSecurityGroup.setProjectId(securityGroup.getProjectId());\n+        defaultSecurityGroup.setDescription(description);\n+        defaultSecurityGroup.setName(\"default\");\n+\n+        //Create default security group rules\n+        createDefaultSecurityGroupRules(defaultSecurityGroup, SecurityGroupRule.Direction.INGRESS);\n+\n+        //Set create and update time for securityGroup\n+        String currentTime = TimeUtil.getCurrentTime();\n+        defaultSecurityGroup.setCreateAt(currentTime);\n+        defaultSecurityGroup.setUpdateAt(currentTime);\n+\n+        //Persist securityGroup\n+        securityGroupRepository.createDefaultSecurityGroup(defaultSecurityGroup);\n+    }\n+\n+    @Override\n+    public SecurityGroupJson createSecurityGroup(SecurityGroupJson securityGroupJson) throws Exception {\n+        SecurityGroup securityGroup = securityGroupJson.getSecurityGroup();\n+        String tenantId = securityGroup.getTenantId();\n+        String description = securityGroup.getDescription();\n+\n+        //Create default security group if not exist\n+        SecurityGroup defaultSecurityGroup = securityGroupRepository.getSecurityGroup(tenantId);\n+        if (isDefaultSecurityGroup(securityGroup) && defaultSecurityGroup != null) {\n+            throw new DefaultSecurityGroupExists();\n+        }\n+\n+        if (!isDefaultSecurityGroup(securityGroup)) {\n+            //Default security group not exists, create it\n+            if (defaultSecurityGroup == null) {\n+                createDefaultSecurityGroup(securityGroup, null);\n+            }\n+\n+            //Generate uuid for securityGroup\n+            if (securityGroup.getId() == null) {\n+                securityGroup.setId(UUID.randomUUID().toString());\n+            }\n+\n+            //Create default security group rule for securityGroup\n+            createDefaultSecurityGroupRules(securityGroup, SecurityGroupRule.Direction.EGRESS);\n+\n+            //Set create and update time for securityGroup\n+            String currentTime = TimeUtil.getCurrentTime();\n+            securityGroup.setCreateAt(currentTime);\n+            securityGroup.setUpdateAt(currentTime);\n+\n+            //Persist securityGroup\n+            securityGroupRepository.addSecurityGroup(securityGroup);\n+        } else {\n+            createDefaultSecurityGroup(securityGroup, description);\n+        }\n+\n+        LOG.info(\"Create security group success, securityGroupJson: {}\", securityGroupJson);\n+\n+        return securityGroupJson;\n+    }\n+\n+    @Override\n+    public SecurityGroupJson updateSecurityGroup(String securityGroupId, SecurityGroupJson securityGroupJson) throws Exception {\n+        SecurityGroup securityGroup = securityGroupJson.getSecurityGroup();\n+        SecurityGroup oldSecurityGroup = securityGroupRepository.getSecurityGroup(securityGroupId);\n+        if (oldSecurityGroup == null) {\n+            throw new SecurityGroupNotFound();\n+        }\n+\n+        if (oldSecurityGroup.getName().equals(\"default\") && securityGroup.getName() != null) {\n+            throw new ModificationNotAllowed();\n+        }\n+\n+        //Only name and description updates are supported\n+        if (securityGroup.getName() != null) {\n+            oldSecurityGroup.setName(securityGroup.getName());\n+        }\n+\n+        if (securityGroup.getDescription() != null) {\n+            oldSecurityGroup.setDescription(securityGroup.getDescription());\n+        }\n+\n+        //Set update time for securityGroup\n+        String currentTime = TimeUtil.getCurrentTime();\n+        oldSecurityGroup.setUpdateAt(currentTime);\n+\n+        securityGroupRepository.addSecurityGroup(oldSecurityGroup);\n+        securityGroupJson.setSecurityGroup(oldSecurityGroup);\n+\n+        LOG.info(\"Update security group success, securityGroupJson: {}\", securityGroupJson);\n+\n+        return securityGroupJson;\n+    }\n+\n+    private Set<String> getSecurityGroupBindings(String SecurityGroupId) throws Exception {\n+        SecurityGroupBindings securityGroupBindings = securityGroupBindingsRepository.getSecurityGroupBindings(SecurityGroupId);\n+        if (securityGroupBindings == null || securityGroupBindings.getBindings().size() == 0) {\n+            return null;\n+        }\n+\n+        return securityGroupBindings.getBindings();\n+    }\n+\n+    @Override\n+    public void deleteSecurityGroup(String securityGroupId) throws Exception {\n+        SecurityGroup securityGroup = securityGroupRepository.getSecurityGroup(securityGroupId);\n+        if (securityGroup == null) {\n+            throw new SecurityGroupNotFound();\n+        }\n+\n+        if (getSecurityGroupBindings(securityGroupId) != null) {\n+            throw new SecurityGroupHasBindings();\n+        }\n+\n+        if (securityGroup.getName().equals(\"default\")) {\n+            securityGroupRepository.deleteDefaultSecurityGroup(securityGroupId);\n+        } else {\n+            securityGroupRepository.deleteSecurityGroup(securityGroupId);\n+        }\n+\n+        LOG.info(\"Delete security group success, securityGroupId: {}\", securityGroupId);\n+    }\n+\n+    @Override\n+    public SecurityGroupJson getSecurityGroup(String SecurityGroupId) throws Exception {\n+        SecurityGroup securityGroup = securityGroupRepository.getSecurityGroup(SecurityGroupId);\n+        if (securityGroup == null) {\n+            throw new SecurityGroupNotFound();\n+        }\n+\n+        LOG.info(\"Get security group success, securityGroup: {}\", securityGroup);\n+\n+        return new SecurityGroupJson(securityGroup);\n+    }\n+\n+    @Override\n+    public List<SecurityGroupJson> listSecurityGroup() throws Exception {\n+        List<SecurityGroupJson> securityGroups = new ArrayList<>();\n+\n+        Map<String, SecurityGroup> securityGroupMap = securityGroupRepository.getAllSecurityGroups();\n+        if (securityGroupMap == null) {\n+            return securityGroups;\n+        }\n+\n+        for (Map.Entry<String, SecurityGroup> entry: securityGroupMap.entrySet()) {\n+            //Skip the internal default security group\n+            if (entry.getKey().equals(entry.getValue().getTenantId())) {\n+                continue;\n+            }\n+\n+            SecurityGroupJson securityGroup = new SecurityGroupJson(entry.getValue());\n+            securityGroups.add(securityGroup);\n+        }\n+\n+        LOG.info(\"List security group success\");\n+\n+        return securityGroups;\n+    }\n+\n+    @Override\n+    public PortSecurityGroupsJson bindSecurityGroups(PortSecurityGroupsJson portSecurityGroupsJson) throws Exception {\n+        securityGroupBindingsRepository.addSecurityGroupBinding(portSecurityGroupsJson);", "originalCommit": "194593933bdffb392cda8c4bab5696ab56e1c2d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc1MDI3MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r429750270", "bodyText": "yes, I will do that after I finish the batch interfaces of security group.", "author": "chenpiaoping", "createdAt": "2020-05-25T06:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyOTU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MDQwNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r430150407", "bodyText": "In the future, we could write a general microservice validation framework, which supports an abstraction of validator and includes a list of abstract rules. A validator implementation for a specific microservice could include specific set of rules, for example, validateProjectId, validateSecurityGroup etc.", "author": "xieus", "createdAt": "2020-05-26T04:32:56Z", "path": "services/security_group_manager/src/main/java/com/futurewei/alcor/securitygroup/controller/SecurityGroupController.java", "diffHunk": "@@ -31,67 +34,129 @@\n     @Autowired\n     private SecurityGroupService securityGroupService;\n \n+    private void checkProjectId(String projectId) throws ProjectIdRequired {\n+        if (StringUtils.isEmpty(projectId)) {\n+            throw new ProjectIdRequired();\n+        }\n+    }\n+\n+    private void checkTenantId(String tenantId) throws TenantIdRequired {\n+        if (StringUtils.isEmpty(tenantId)) {\n+            throw new TenantIdRequired();\n+        }\n+    }\n+\n+    private void checkSecurityGroup(SecurityGroupJson securityGroupJson) throws SecurityGroupRequired {\n+        if (securityGroupJson == null || securityGroupJson.getSecurityGroup() == null) {\n+            throw new SecurityGroupRequired();\n+        }\n+    }\n+\n+    private void checkSecurityGroupId(String securityGroupId) throws SecurityGroupIdRequired {\n+        if (StringUtils.isEmpty(securityGroupId)) {\n+            throw new SecurityGroupIdRequired();\n+        }\n+    }\n+\n+    private void checkPortId(String portId) throws PortIdRequired {\n+        if (StringUtils.isEmpty(portId)) {\n+            throw new PortIdRequired();\n+        }\n+    }\n+\n+    private void checkPortSecurityGroups(PortSecurityGroupsJson portSecurityGroupsJson) throws PortSecurityGroupsRequired {\n+        if (portSecurityGroupsJson == null || portSecurityGroupsJson.getSecurityGroups() == null) {\n+            throw new PortSecurityGroupsRequired();\n+        }\n+    }\n+\n+    private void checkSecurityGroups(SecurityGroupBulkJson securityGroupBulkJson) throws SecurityGroupsRequired {\n+        if (securityGroupBulkJson == null ||\n+                securityGroupBulkJson.getSecurityGroups() == null ||\n+                securityGroupBulkJson.getSecurityGroups().size() == 0) {\n+            throw new SecurityGroupsRequired();\n+        }\n+    }\n+\n     @PostMapping({\"/project/{project_id}/security-groups\", \"v4/{project_id}/security-groups\"})\n     @ResponseBody\n     @ResponseStatus(HttpStatus.CREATED)\n     public SecurityGroupJson createSecurityGroup(@PathVariable(\"project_id\") String projectId,\n                                              @RequestBody SecurityGroupJson securityGroupJson) throws Exception {\n-        RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectId);\n-        RestPreconditionsUtil.verifyParameterNotNullorEmpty(securityGroupJson);\n-        SecurityGroup securityGroup = securityGroupJson.getSecurityGroup();\n-        RestPreconditionsUtil.verifyParameterNotNullorEmpty(securityGroup);\n-        RestPreconditionsUtil.verifyParameterNotNullorEmpty(securityGroup.getTenantId());\n-        securityGroup.setProjectId(projectId);\n+        checkProjectId(projectId);", "originalCommit": "96b1b76d90749ae59213eb7396b1ba317aa5ffb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a2a23bd73f545c8414caa7d60dd64305ce1cf618", "url": "https://github.com/futurewei-cloud/alcor/commit/a2a23bd73f545c8414caa7d60dd64305ce1cf618", "message": "move security_group_manager.adoc to new mgmt_services directory", "committedDate": "2020-06-03T07:37:29Z", "type": "forcePushed"}, {"oid": "826e0944d77cec11cc6b4eb0249a3355bf60167e", "url": "https://github.com/futurewei-cloud/alcor/commit/826e0944d77cec11cc6b4eb0249a3355bf60167e", "message": "get default security group by tenant id", "committedDate": "2020-06-04T03:58:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMzQyMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r435713421", "bodyText": "Seems that the latest Alcor/master is not merge yet. We should have SecurityGroupEntity class here @chenpiaoping", "author": "xieus", "createdAt": "2020-06-05T06:25:16Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/util/GoalStateUtil.java", "diffHunk": "@@ -270,9 +273,9 @@ private static int protocolToNumber(String protocol) {\n             } else if (entity instanceof SubnetEntity) {\n                 SubnetEntity subnetEntity = (SubnetEntity) entity;\n                 subnetEntityMap.put(subnetEntity.getId(), subnetEntity);\n-            } else if (entity instanceof SecurityGroupEntity) {\n-                SecurityGroupEntity securityGroupEntity = (SecurityGroupEntity) entity;\n-                securityGroupEntityMap.put(securityGroupEntity.getId(), securityGroupEntity);\n+            } else if (entity instanceof SecurityGroup) {\n+                SecurityGroup securityGroupEntity = (SecurityGroup) entity;", "originalCommit": "826e0944d77cec11cc6b4eb0249a3355bf60167e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0NDA5OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r435744099", "bodyText": "I renamed it SecurityGroup again.", "author": "chenpiaoping", "createdAt": "2020-06-05T07:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMzQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NTU0NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r435895544", "bodyText": "Okay it is fine.", "author": "xieus", "createdAt": "2020-06-05T12:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMzQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4ODEwNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r436488107", "bodyText": "For the private check methods, I would recommend to move to an util class which could be replaced by a validator.", "author": "xieus", "createdAt": "2020-06-08T06:51:16Z", "path": "services/security_group_manager/src/main/java/com/futurewei/alcor/securitygroup/controller/SecurityGroupRuleController.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.securitygroup.controller;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.securitygroup.exception.*;\n+import com.futurewei.alcor.securitygroup.service.SecurityGroupRuleService;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRuleBulkJson;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRuleJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+import org.thymeleaf.util.StringUtils;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RestController\n+public class SecurityGroupRuleController {\n+    @Autowired\n+    private SecurityGroupRuleService securityGroupRuleService;\n+\n+    private void checkProjectId(String projectId) throws ProjectIdRequired {", "originalCommit": "826e0944d77cec11cc6b4eb0249a3355bf60167e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxNzgxNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r436617817", "bodyText": "ok", "author": "chenpiaoping", "createdAt": "2020-06-08T11:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4ODEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4ODkyMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r436488922", "bodyText": "Didn't see protocol check here. Which protocols are supported by the v1 implementation. Could you list the current scope at the beginning of the controller.", "author": "xieus", "createdAt": "2020-06-08T06:53:20Z", "path": "services/security_group_manager/src/main/java/com/futurewei/alcor/securitygroup/controller/SecurityGroupRuleController.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.securitygroup.controller;\n+\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.securitygroup.exception.*;\n+import com.futurewei.alcor.securitygroup.service.SecurityGroupRuleService;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRule;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRuleBulkJson;\n+import com.futurewei.alcor.web.entity.securitygroup.SecurityGroupRuleJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+import org.thymeleaf.util.StringUtils;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@RestController\n+public class SecurityGroupRuleController {\n+    @Autowired\n+    private SecurityGroupRuleService securityGroupRuleService;\n+\n+    private void checkProjectId(String projectId) throws ProjectIdRequired {\n+        if (StringUtils.isEmpty(projectId)) {\n+            throw new ProjectIdRequired();\n+        }\n+    }\n+\n+    private void checkTenantId(String tenantId) throws TenantIdRequired {\n+        if (StringUtils.isEmpty(tenantId)) {\n+            throw new TenantIdRequired();\n+        }\n+    }\n+\n+    private void checkSecurityGroupId(String securityGroupId) throws SecurityGroupIdRequired {\n+        if (StringUtils.isEmpty(securityGroupId)) {\n+            throw new SecurityGroupIdRequired();\n+        }\n+    }\n+\n+    private void checkDirection(String direction) throws DirectionRequired {\n+        if (StringUtils.isEmpty(direction)) {\n+            throw new DirectionRequired();\n+        }\n+    }\n+\n+    private void checkSecurityGroupRule(SecurityGroupRuleJson securityGroupRuleJson) throws SecurityGroupRuleRequired {\n+        if (securityGroupRuleJson == null || securityGroupRuleJson.getSecurityGroupRule() == null) {\n+            throw new SecurityGroupRuleRequired();\n+        }\n+    }\n+\n+    private void checkSecurityGroupRules(SecurityGroupRuleBulkJson securityGroupRuleBulkJson) throws SecurityGroupRuleRequired {\n+        if (securityGroupRuleBulkJson == null ||\n+                securityGroupRuleBulkJson.getSecurityGroupRules() == null ||\n+                securityGroupRuleBulkJson.getSecurityGroupRules().size() == 0) {\n+            throw new SecurityGroupRuleRequired();\n+        }\n+    }\n+\n+    private void checkSecurityGroupRuleId(String securityGroupRuleId) throws SecurityGroupRuleIdRequired {\n+        if (StringUtils.isEmpty(securityGroupRuleId)) {\n+            throw new SecurityGroupRuleIdRequired();\n+        }\n+    }\n+\n+    private void checkPortRange(SecurityGroupRule securityGroupRule) throws Exception {\n+        Integer portRangeMax = securityGroupRule.getPortRangeMax();\n+        Integer portRangeMin = securityGroupRule.getPortRangeMin();\n+        String protocol = securityGroupRule.getProtocol();\n+\n+        if (protocol == null) {\n+            throw new ProtocolInvalidException();\n+        }\n+\n+        if (Arrays.asList(\"tcp\", \"udp\").contains(protocol)) {\n+            if (portRangeMax == null || portRangeMin == null) {\n+                throw new PortRangeInvalid();\n+            }\n+\n+            if (!(portRangeMax > 0 && portRangeMax < 65536)) {\n+                throw new PortRangeInvalid();\n+            }\n+\n+            if (!(portRangeMin > 0 && portRangeMin < 65536)) {\n+                throw new PortRangeInvalid();\n+            }\n+\n+            if (portRangeMin > portRangeMax) {\n+                throw new PortRangeInvalid();\n+            }\n+        }\n+\n+        if (Arrays.asList(\"icmp\", \"icmpv6\").contains(protocol)) {\n+            if (portRangeMin == null && portRangeMax != null) {\n+                throw new PortRangeInvalid();\n+            }\n+\n+            if (portRangeMin != null && portRangeMax == null) {\n+                throw new PortRangeInvalid();\n+            }\n+\n+            if (portRangeMin != null && !(0 <= portRangeMin && portRangeMin <= 255)) {\n+                throw new PortRangeInvalid();\n+            }\n+\n+            if (portRangeMax != null && !(0 <= portRangeMax && portRangeMax <= 255)) {\n+                throw new PortRangeInvalid();\n+            }\n+        }\n+    }\n+\n+    private String getIpVersionByPrefix(String prefix) throws Exception {\n+        if (Ipv4AddrUtil.ipv4PrefixCheck(prefix)) {\n+            return \"IPv4\";\n+        } else if (Ipv6AddrUtil.ipv6PrefixCheck(prefix)) {\n+            return \"IPv6\";\n+        }\n+\n+        throw new RemoteIpPrefixInvalid();\n+    }\n+    private void checkRemoteIpPrefix(SecurityGroupRule securityGroupRule) throws Exception {\n+        String remoteIpPrefix = securityGroupRule.getRemoteIpPrefix();\n+        String etherType = securityGroupRule.getEtherType();\n+\n+        if (!getIpVersionByPrefix(remoteIpPrefix).equals(etherType)) {\n+            throw new EtherTypeRemoteIpPrefixConflict();\n+        }\n+    }\n+\n+    private void checkProtocolAndEtherType(SecurityGroupRule securityGroupRule) throws Exception {\n+        String protocol = securityGroupRule.getProtocol();\n+        String etherType = securityGroupRule.getEtherType();\n+\n+        List<String> ipv6Protocols = Arrays.asList(\"icmpv6\");\n+        if (ipv6Protocols.contains(protocol) &&\n+                SecurityGroupRule.EtherType.IPV4.getType().equals(etherType)) {\n+            throw new ProtocolEtherTypeConflict();\n+        }\n+    }\n+\n+    private void checkSecurityGroupRule(SecurityGroupRule securityGroupRule) throws Exception {", "originalCommit": "826e0944d77cec11cc6b4eb0249a3355bf60167e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxNzQ2Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r436617466", "bodyText": "Oh, let check.", "author": "chenpiaoping", "createdAt": "2020-06-08T11:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4ODkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4OTgxNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r436489815", "bodyText": "Compared with Neutron SG rule, we need three more fields:\nrevision_number, created_at, updated_at.\nConsider to add it into CustomerResource.", "author": "xieus", "createdAt": "2020-06-08T06:55:39Z", "path": "web/src/main/java/com/futurewei/alcor/web/entity/securitygroup/SecurityGroupRule.java", "diffHunk": "@@ -15,7 +18,7 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.futurewei.alcor.common.entity.CustomerResource;\n \n-public class SecurityGroupRuleEntity extends CustomerResource {\n+public class SecurityGroupRule extends CustomerResource {", "originalCommit": "826e0944d77cec11cc6b4eb0249a3355bf60167e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxNzYxMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r436617610", "bodyText": "ok", "author": "chenpiaoping", "createdAt": "2020-06-08T11:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4OTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NDQ5MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r439174490", "bodyText": "Tracked by Issue #246.", "author": "xieus", "createdAt": "2020-06-12T02:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4OTgxNQ=="}], "type": "inlineReview"}, {"oid": "822c9f6ba10b21ffab512f6a0f1ec5713aba92d1", "url": "https://github.com/futurewei-cloud/alcor/commit/822c9f6ba10b21ffab512f6a0f1ec5713aba92d1", "message": "port manager supprt sql", "committedDate": "2020-06-11T02:11:28Z", "type": "commit"}, {"oid": "b8e058f83f7b83d536d7b2ec46814739101dab87", "url": "https://github.com/futurewei-cloud/alcor/commit/b8e058f83f7b83d536d7b2ec46814739101dab87", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-11T02:13:22Z", "type": "commit"}, {"oid": "f98541fcbcf4430a79e8073d43e172bb0588360a", "url": "https://github.com/futurewei-cloud/alcor/commit/f98541fcbcf4430a79e8073d43e172bb0588360a", "message": "[Micro-Service] Security group manager", "committedDate": "2020-06-11T03:27:57Z", "type": "commit"}, {"oid": "328296f871ed0733abe614a6d3b85349649c6c77", "url": "https://github.com/futurewei-cloud/alcor/commit/328296f871ed0733abe614a6d3b85349649c6c77", "message": "add bulk interfaces for security group", "committedDate": "2020-06-11T03:28:04Z", "type": "commit"}, {"oid": "4667754d71271b8e485be205d763ed27b46477a2", "url": "https://github.com/futurewei-cloud/alcor/commit/4667754d71271b8e485be205d763ed27b46477a2", "message": "add some test cases for Ipv4/Ipv6 util", "committedDate": "2020-06-11T03:28:06Z", "type": "commit"}, {"oid": "e30a8485851095bdd48b87195a632ff67b083d4b", "url": "https://github.com/futurewei-cloud/alcor/commit/e30a8485851095bdd48b87195a632ff67b083d4b", "message": "add API specs and basic design for Security Group Manager", "committedDate": "2020-06-11T03:28:07Z", "type": "commit"}, {"oid": "04f86469016b223916b2dcbad42a5bf3c6c72830", "url": "https://github.com/futurewei-cloud/alcor/commit/04f86469016b223916b2dcbad42a5bf3c6c72830", "message": "move security_group_manager.adoc to new mgmt_services directory", "committedDate": "2020-06-11T03:28:08Z", "type": "commit"}, {"oid": "d575ce1f08d6f3f4b31941e13517db3d82bd2601", "url": "https://github.com/futurewei-cloud/alcor/commit/d575ce1f08d6f3f4b31941e13517db3d82bd2601", "message": "get default security group by tenant id", "committedDate": "2020-06-11T03:29:43Z", "type": "commit"}, {"oid": "07f61f978ce7fdb8f534fe4b458617ad9f647b00", "url": "https://github.com/futurewei-cloud/alcor/commit/07f61f978ce7fdb8f534fe4b458617ad9f647b00", "message": "move parameter check methods to an util class", "committedDate": "2020-06-11T06:39:41Z", "type": "forcePushed"}, {"oid": "59638019ca06cc4687dc90f9b76f20df6f46402c", "url": "https://github.com/futurewei-cloud/alcor/commit/59638019ca06cc4687dc90f9b76f20df6f46402c", "message": "move parameter check methods to an util class", "committedDate": "2020-06-11T06:54:58Z", "type": "commit"}, {"oid": "59638019ca06cc4687dc90f9b76f20df6f46402c", "url": "https://github.com/futurewei-cloud/alcor/commit/59638019ca06cc4687dc90f9b76f20df6f46402c", "message": "move parameter check methods to an util class", "committedDate": "2020-06-11T06:54:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3MzQ5Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r439173492", "bodyText": "Not Alcor classes. Please remove.", "author": "xieus", "createdAt": "2020-06-12T02:26:19Z", "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/entity/Address.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.futurewei.alcor.portmanager.entity;\n+\n+import org.apache.ignite.binary.BinaryObjectException;\n+import org.apache.ignite.binary.BinaryReader;\n+import org.apache.ignite.binary.BinaryWriter;\n+import org.apache.ignite.binary.Binarylizable;\n+\n+/**\n+ * Employee address.\n+ * <p>\n+ * This class implements {@link Binarylizable} only for example purposes,\n+ * in order to show how to customize serialization and deserialization of\n+ * binary objects.\n+ */\n+public class Address implements Binarylizable {", "originalCommit": "59638019ca06cc4687dc90f9b76f20df6f46402c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NjcxMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/208#discussion_r439176712", "bodyText": "These files have been deleted", "author": "chenpiaoping", "createdAt": "2020-06-12T02:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3MzQ5Mg=="}], "type": "inlineReview"}, {"oid": "b8120c670d9d314e87ab09d08578a8a365e7c885", "url": "https://github.com/futurewei-cloud/alcor/commit/b8120c670d9d314e87ab09d08578a8a365e7c885", "message": "Delete Address.java", "committedDate": "2020-06-12T02:37:21Z", "type": "commit"}, {"oid": "01c10775a0326fd29c650649c9793cb4fb650589", "url": "https://github.com/futurewei-cloud/alcor/commit/01c10775a0326fd29c650649c9793cb4fb650589", "message": "Delete Employee.java", "committedDate": "2020-06-12T02:37:34Z", "type": "commit"}, {"oid": "52324f08a526b5e38a9892c8cdc0cb8ede393014", "url": "https://github.com/futurewei-cloud/alcor/commit/52324f08a526b5e38a9892c8cdc0cb8ede393014", "message": "Delete Organization.java", "committedDate": "2020-06-12T02:37:43Z", "type": "commit"}, {"oid": "5a61a401dc53e6a51f152433480a4a77884c3d8a", "url": "https://github.com/futurewei-cloud/alcor/commit/5a61a401dc53e6a51f152433480a4a77884c3d8a", "message": "Delete OrganizationType.java", "committedDate": "2020-06-12T02:37:51Z", "type": "commit"}, {"oid": "4415880729e110bdcfd48bfa878072fc1ff6897a", "url": "https://github.com/futurewei-cloud/alcor/commit/4415880729e110bdcfd48bfa878072fc1ff6897a", "message": "Delete Person.java", "committedDate": "2020-06-12T02:38:09Z", "type": "commit"}, {"oid": "bd5e469ea1f0087db583211884cb2b38d01793c9", "url": "https://github.com/futurewei-cloud/alcor/commit/bd5e469ea1f0087db583211884cb2b38d01793c9", "message": "Delete IgniteCacheTest.java", "committedDate": "2020-06-12T02:38:22Z", "type": "commit"}, {"oid": "dd75eb07441c145e900ddcc8dfc1ca0ced3c0968", "url": "https://github.com/futurewei-cloud/alcor/commit/dd75eb07441c145e900ddcc8dfc1ca0ced3c0968", "message": "Add SGM into main pom.xml and standarlize SGM pom.xml", "committedDate": "2020-06-12T04:07:33Z", "type": "commit"}, {"oid": "86954451b194717513a1c185cbef9ed51fc6ad12", "url": "https://github.com/futurewei-cloud/alcor/commit/86954451b194717513a1c185cbef9ed51fc6ad12", "message": "Enable Swagger UI and code report", "committedDate": "2020-06-12T04:46:59Z", "type": "commit"}, {"oid": "54f5cf26d33f5dae81df0d44c3eea87396c80911", "url": "https://github.com/futurewei-cloud/alcor/commit/54f5cf26d33f5dae81df0d44c3eea87396c80911", "message": "Minor fix format", "committedDate": "2020-06-12T04:57:10Z", "type": "commit"}]}