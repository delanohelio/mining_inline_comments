{"pr_number": 153, "pr_title": "[Database] Add UTs, deployment script and k8s yaml for ignite", "pr_createdAt": "2020-04-08T03:36:41Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/153", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NjU2Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/153#discussion_r406876566", "bodyText": "The UTs look great.\nOne comment: can we add a concurrency test suite, where multiple client tries to write to the same record?", "author": "xieus", "createdAt": "2020-04-10T18:08:42Z", "path": "test/com/futurewei/alcor/controller/db/CacheTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.controller.db;\n+\n+import com.futurewei.alcor.controller.app.AlcorControllerApp;\n+import com.futurewei.alcor.controller.exception.CacheException;\n+import com.futurewei.alcor.controller.model.VpcState;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = {AlcorControllerApp.class})\n+public class CacheTest {\n+    @Autowired\n+    private CacheFactory cacheFactory;\n+\n+    private void basicTest() throws CacheException {\n+        ICache<String, VpcState> cache = cacheFactory.getCache(VpcState.class);\n+        Assert.assertNotNull(cache);\n+\n+        //put operation test\n+        VpcState vpcState1 = new VpcState(\"project1\", \"id1\", \"vpc1\", \"10.10.10.0/24\");\n+        VpcState vpcState2 = new VpcState(\"project1\", \"id2\", \"vpc2\", \"11.11.11.0/24\");\n+\n+        cache.put(\"vpc1\", vpcState1);\n+        cache.put(\"vpc2\", vpcState2);\n+\n+        //get operation test\n+        VpcState vpc1 = cache.get(\"vpc1\");\n+        VpcState vpc2 = cache.get(\"vpc2\");\n+\n+        Assert.assertEquals(vpcState1, vpc1);\n+        Assert.assertEquals(vpcState2, vpc2);\n+\n+        //containsKey operation test\n+        Assert.assertEquals(true, cache.containsKey(\"vpc1\"));\n+        Assert.assertEquals(true, cache.containsKey(\"vpc2\"));\n+        Assert.assertEquals(false, cache.containsKey(\"vpc3\"));\n+\n+        //getAll operation test\n+        Map<String, VpcState> vpcs = cache.getAll();\n+        for (Map.Entry<String, VpcState> entry: vpcs.entrySet()) {\n+            if (\"vpc1\".equals(entry.getKey())) {\n+                Assert.assertEquals(vpcState1, entry.getValue());\n+            } else {\n+                Assert.assertEquals(vpcState2, entry.getValue());\n+            }\n+        }\n+\n+        //remove operation test\n+        cache.remove(\"vpc1\");\n+        cache.remove(\"vpc2\");\n+\n+        vpc1 = cache.get(\"vpc1\");\n+        vpc2 = cache.get(\"vpc2\");\n+\n+        Assert.assertEquals(null, vpc1);\n+        Assert.assertEquals(null, vpc2);\n+\n+        //putAll operation test\n+        Map vpcMap = new HashMap();\n+\n+        vpcMap.put(\"vpc1\", vpcState1);\n+        vpcMap.put(\"vpc2\", vpcState2);\n+\n+        cache.putAll(vpcMap);\n+\n+        vpc1 = cache.get(\"vpc1\");\n+        vpc2 = cache.get(\"vpc2\");\n+\n+        Assert.assertEquals(vpcState1, vpc1);\n+        Assert.assertEquals(vpcState2, vpc2);\n+    }\n+\n+    private void transactionTest() throws CacheException {", "originalCommit": "eb5ac5dc87cb021917c0076fd78a4a0fafece1eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNTgyOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/153#discussion_r408625829", "bodyText": "As discussed, let us revisit the concurrency UTs later but keep an eye on other possible solutions.", "author": "xieus", "createdAt": "2020-04-15T07:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NjU2Ng=="}], "type": "inlineReview"}, {"oid": "50aa14e9e28e039680d34efb9c0a101c7cb86697", "url": "https://github.com/futurewei-cloud/alcor/commit/50aa14e9e28e039680d34efb9c0a101c7cb86697", "message": "add one-box deployment script and k8s yaml file for ignite", "committedDate": "2020-04-13T01:13:53Z", "type": "commit"}, {"oid": "5607b35f1266845a4886a1c454bf10c252deaed8", "url": "https://github.com/futurewei-cloud/alcor/commit/5607b35f1266845a4886a1c454bf10c252deaed8", "message": "add some test cases for the db module", "committedDate": "2020-04-13T01:13:54Z", "type": "commit"}, {"oid": "d505e6f341de95059771b8a9af8846633d354108", "url": "https://github.com/futurewei-cloud/alcor/commit/d505e6f341de95059771b8a9af8846633d354108", "message": "db test case of multiple clients write the same record", "committedDate": "2020-04-13T06:20:17Z", "type": "commit"}, {"oid": "d505e6f341de95059771b8a9af8846633d354108", "url": "https://github.com/futurewei-cloud/alcor/commit/d505e6f341de95059771b8a9af8846633d354108", "message": "db test case of multiple clients write the same record", "committedDate": "2020-04-13T06:20:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3MDg3Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/153#discussion_r407770877", "bodyText": "If you want to control UT order, an alternative way is to use annotation to control the order: https://www.baeldung.com/junit-5-test-order", "author": "xieus", "createdAt": "2020-04-13T23:09:36Z", "path": "test/com/futurewei/alcor/controller/db/MultiClientTest1.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.futurewei.alcor.controller.db;\n+\n+import com.futurewei.alcor.controller.app.AlcorControllerApp;\n+import com.futurewei.alcor.controller.exception.CacheException;\n+import com.futurewei.alcor.controller.model.VpcState;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = {AlcorControllerApp.class})\n+public class MultiClientTest1 {\n+    @Autowired\n+    private CacheFactory cacheFactory;\n+\n+    public void multiClientTest1() throws CacheException, InterruptedException {\n+        ICache<String, VpcState> vpcCache = cacheFactory.getCache(VpcState.class);\n+        ICache<String, Integer> clientNumCache = cacheFactory.getCache(Integer.class);\n+\n+        Assert.assertNotNull(vpcCache);\n+        Assert.assertNotNull(clientNumCache);\n+\n+        System.out.println(\"Client1 igniteClient:\" + cacheFactory.getIgniteClient());\n+\n+        VpcState vpcState1 = new VpcState(\"project1\", \"id1\", \"vpc1\", \"10.10.10.0/24\");\n+        VpcState vpcState2 = new VpcState(\"project1\", \"id1\", \"vpc1\", \"11.11.11.0/24\");\n+\n+        vpcCache.put(\"vpc1\", vpcState1);\n+        VpcState vpc1 = vpcCache.get(\"vpc1\");\n+\n+        Assert.assertEquals(vpcState1, vpc1);\n+\n+        clientNumCache.put(\"client_num\", 1);\n+        Integer clientNum = clientNumCache.get(\"client_num\");\n+\n+        while (clientNum < 2) {\n+            System.out.println(\"Waiting for more clients to write the same key\");\n+            Thread.sleep(1000);\n+            clientNum = clientNumCache.get(\"client_num\");\n+        }\n+\n+        vpc1 = vpcCache.get(\"vpc1\");\n+\n+        Assert.assertEquals(vpcState2, vpc1);\n+    }\n+\n+    /**\n+     * Since all test cases for this class need to be connected to the database,\n+     * they cannot be executed at compile time, so add a switch canRun to this method,\n+     * which needs to be turned on when executing these test cases in the development environment.\n+     * Execute MultiClientTest1.multiClientTest(), and then execute MultiClientTest2.multiClientTest()\n+     */\n+    @Test\n+    public void multiClientTest() throws CacheException, InterruptedException {\n+        boolean canRun = false;\n+        if (canRun) {", "originalCommit": "d505e6f341de95059771b8a9af8846633d354108", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3MjM5Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/153#discussion_r407772392", "bodyText": "Is it possible  to use JUnite BEFORE annotation to launch an Ignite container for concurrency test?\nhttps://www.baeldung.com/junit-before-beforeclass-beforeeach-beforeall", "author": "xieus", "createdAt": "2020-04-13T23:14:11Z", "path": "test/com/futurewei/alcor/controller/db/MultiClientTest1.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.futurewei.alcor.controller.db;\n+\n+import com.futurewei.alcor.controller.app.AlcorControllerApp;\n+import com.futurewei.alcor.controller.exception.CacheException;\n+import com.futurewei.alcor.controller.model.VpcState;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = {AlcorControllerApp.class})\n+public class MultiClientTest1 {\n+    @Autowired\n+    private CacheFactory cacheFactory;\n+\n+    public void multiClientTest1() throws CacheException, InterruptedException {\n+        ICache<String, VpcState> vpcCache = cacheFactory.getCache(VpcState.class);\n+        ICache<String, Integer> clientNumCache = cacheFactory.getCache(Integer.class);\n+\n+        Assert.assertNotNull(vpcCache);\n+        Assert.assertNotNull(clientNumCache);\n+\n+        System.out.println(\"Client1 igniteClient:\" + cacheFactory.getIgniteClient());\n+\n+        VpcState vpcState1 = new VpcState(\"project1\", \"id1\", \"vpc1\", \"10.10.10.0/24\");\n+        VpcState vpcState2 = new VpcState(\"project1\", \"id1\", \"vpc1\", \"11.11.11.0/24\");\n+\n+        vpcCache.put(\"vpc1\", vpcState1);\n+        VpcState vpc1 = vpcCache.get(\"vpc1\");\n+\n+        Assert.assertEquals(vpcState1, vpc1);\n+\n+        clientNumCache.put(\"client_num\", 1);\n+        Integer clientNum = clientNumCache.get(\"client_num\");\n+\n+        while (clientNum < 2) {\n+            System.out.println(\"Waiting for more clients to write the same key\");\n+            Thread.sleep(1000);\n+            clientNum = clientNumCache.get(\"client_num\");\n+        }\n+\n+        vpc1 = vpcCache.get(\"vpc1\");\n+\n+        Assert.assertEquals(vpcState2, vpc1);\n+    }\n+\n+    /**\n+     * Since all test cases for this class need to be connected to the database,", "originalCommit": "d505e6f341de95059771b8a9af8846633d354108", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}