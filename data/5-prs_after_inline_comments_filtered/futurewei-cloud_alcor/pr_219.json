{"pr_number": 219, "pr_title": "[Api Gateway] Support Authentication with OpenStack KeyStone ", "pr_createdAt": "2020-05-27T08:13:55Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/219", "timeline": [{"oid": "61aa663791b89717b44b567a2ca09d53a20a40aa", "url": "https://github.com/futurewei-cloud/alcor/commit/61aa663791b89717b44b567a2ca09d53a20a40aa", "message": "fix a bug that apiGateway start error", "committedDate": "2020-05-25T03:19:04Z", "type": "commit"}, {"oid": "63f1968894a5ff391eb9b6f34e9c8f790a559f2a", "url": "https://github.com/futurewei-cloud/alcor/commit/63f1968894a5ff391eb9b6f34e9c8f790a559f2a", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor", "committedDate": "2020-05-25T03:19:41Z", "type": "commit"}, {"oid": "78385e3bef3a2b400d58c9d613e1e353e46c50b9", "url": "https://github.com/futurewei-cloud/alcor/commit/78385e3bef3a2b400d58c9d613e1e353e46c50b9", "message": "add WebFilter to handle keystone request and process project id", "committedDate": "2020-05-27T08:25:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTA5MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r431215090", "bodyText": "I would recommend to use constant variables to store \"/v2.0\" and other versioning related variable so that it is easy to identify and change in the future once OpenStack advances its feature.", "author": "xieus", "createdAt": "2020-05-27T15:07:55Z", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneAuthWebFilter.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.futurewei.alcor.apigateway.filter;\n+\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+\n+\n+@Component\n+public class KeystoneAuthWebFilter implements WebFilter {\n+\n+    private static final String AUTHORIZE_TOKEN = \"X-Auth-Token\";\n+\n+    @Autowired\n+    private KeystoneClient keystoneClient;\n+\n+    @Override\n+    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n+        String token = exchange.getRequest().getHeaders().getFirst(AUTHORIZE_TOKEN);\n+        try {\n+            String projectId = keystoneClient.verifyToken(token);\n+            if(\"\".equals(projectId)){\n+                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);\n+                return exchange.getResponse().setComplete();\n+            }\n+            // rewrite uri path include project id\n+            ServerHttpRequest req = exchange.getRequest();\n+            ServerWebExchangeUtils.addOriginalRequestUrl(exchange, req.getURI());\n+            String path = req.getURI().getRawPath();\n+            String newPath = path.replaceAll(\"/v2.0\", \"/project/\" + projectId);", "originalCommit": "78385e3bef3a2b400d58c9d613e1e353e46c50b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNTg5OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r431215899", "bodyText": "I see most of the payload is feature codes for integration with KeyStone. Can we add it to description accordingly.", "author": "xieus", "createdAt": "2020-05-27T15:09:02Z", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/filter/KeystoneAuthWebFilter.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.futurewei.alcor.apigateway.filter;\n+\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+\n+\n+@Component\n+public class KeystoneAuthWebFilter implements WebFilter {", "originalCommit": "78385e3bef3a2b400d58c9d613e1e353e46c50b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "659919672a6b68f73cf2bbe2c0b8e47b51aa8c7d", "url": "https://github.com/futurewei-cloud/alcor/commit/659919672a6b68f73cf2bbe2c0b8e47b51aa8c7d", "message": "move neutron url prefix to application.properties", "committedDate": "2020-05-28T08:12:00Z", "type": "commit"}, {"oid": "79a8690efb846c3a08d4d61bd33bab99bde113ce", "url": "https://github.com/futurewei-cloud/alcor/commit/79a8690efb846c3a08d4d61bd33bab99bde113ce", "message": "replace webclient to restclient to avoid webclient block exception", "committedDate": "2020-05-28T08:13:16Z", "type": "commit"}, {"oid": "01ad3c713ff08c2b9901c6adb303fdc8b86786d5", "url": "https://github.com/futurewei-cloud/alcor/commit/01ad3c713ff08c2b9901c6adb303fdc8b86786d5", "message": "add integration_keystone.adoc", "committedDate": "2020-05-28T08:13:58Z", "type": "commit"}, {"oid": "95302ce26ae468d26693c3f00936da645df74b18", "url": "https://github.com/futurewei-cloud/alcor/commit/95302ce26ae468d26693c3f00936da645df74b18", "message": "add chache design in workflow and token design in integration_keystone.adoc", "committedDate": "2020-06-01T03:26:54Z", "type": "commit"}, {"oid": "ccdb7867a333372d0146dc706b56f46c93e03cbb", "url": "https://github.com/futurewei-cloud/alcor/commit/ccdb7867a333372d0146dc706b56f46c93e03cbb", "message": "add junit test for KeystoneAuthWebFilter", "committedDate": "2020-06-01T03:39:16Z", "type": "commit"}, {"oid": "5a5473ecdc44e2d6c94f046e6e7ae3da8927b09f", "url": "https://github.com/futurewei-cloud/alcor/commit/5a5473ecdc44e2d6c94f046e6e7ae3da8927b09f", "message": "add cache in KeystoneAuthWebFilter", "committedDate": "2020-06-01T08:03:01Z", "type": "commit"}, {"oid": "8fcadd4f1541fefa57b70ad7f86bfdbde94eb8a2", "url": "https://github.com/futurewei-cloud/alcor/commit/8fcadd4f1541fefa57b70ad7f86bfdbde94eb8a2", "message": "Update integration_keystone.adoc", "committedDate": "2020-06-01T10:51:36Z", "type": "commit"}, {"oid": "7219fbe77b0e3aa5f6f5a55a64d26ec335be99ee", "url": "https://github.com/futurewei-cloud/alcor/commit/7219fbe77b0e3aa5f6f5a55a64d26ec335be99ee", "message": "add log in KeystoneClient", "committedDate": "2020-06-01T11:01:57Z", "type": "commit"}, {"oid": "aa033850607174e62cb6ec995038373f97256f65", "url": "https://github.com/futurewei-cloud/alcor/commit/aa033850607174e62cb6ec995038373f97256f65", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor", "committedDate": "2020-06-02T00:52:39Z", "type": "commit"}, {"oid": "8f6662dd85be6d505a9c1ab3361e3402ae0b5f8f", "url": "https://github.com/futurewei-cloud/alcor/commit/8f6662dd85be6d505a9c1ab3361e3402ae0b5f8f", "message": "fix a unit test bug", "committedDate": "2020-06-02T01:17:18Z", "type": "commit"}, {"oid": "a86fbb8fdef4f3db2c0f094d0f2674e533adc668", "url": "https://github.com/futurewei-cloud/alcor/commit/a86fbb8fdef4f3db2c0f094d0f2674e533adc668", "message": "add KeystoneAuthWebFilter enable properties", "committedDate": "2020-06-02T01:19:09Z", "type": "commit"}, {"oid": "7c996a28499ad5bc053a582f54a1cd46123f8b56", "url": "https://github.com/futurewei-cloud/alcor/commit/7c996a28499ad5bc053a582f54a1cd46123f8b56", "message": "add keystone.enable=true in KeystoneAuthWebFilterTest", "committedDate": "2020-06-02T01:51:27Z", "type": "commit"}, {"oid": "2a8edc21959a7cf6ea92a495f054104e85f658c9", "url": "https://github.com/futurewei-cloud/alcor/commit/2a8edc21959a7cf6ea92a495f054104e85f658c9", "message": "remove some static class field define", "committedDate": "2020-06-03T09:16:18Z", "type": "commit"}, {"oid": "d130457691644849c9bdfc250253b62776af64bc", "url": "https://github.com/futurewei-cloud/alcor/commit/d130457691644849c9bdfc250253b62776af64bc", "message": "make doc pretty", "committedDate": "2020-06-03T09:17:04Z", "type": "commit"}, {"oid": "79410afcd90e0361995cd784a70f13a04834ce06", "url": "https://github.com/futurewei-cloud/alcor/commit/79410afcd90e0361995cd784a70f13a04834ce06", "message": "correct a spelling mistake", "committedDate": "2020-06-04T02:46:17Z", "type": "commit"}, {"oid": "86ccba3b6531529ffff03f84e25c92e45327d942", "url": "https://github.com/futurewei-cloud/alcor/commit/86ccba3b6531529ffff03f84e25c92e45327d942", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor", "committedDate": "2020-06-04T02:47:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1NTI5Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435055292", "bodyText": "For the getter and setter, we can use an annotation @DaTa to automatically generate the methods.\nA good example: https://github.com/futurewei-cloud/alcor/blob/master/web/src/main/java/com/futurewei/alcor/web/entity/port/PortEntity.java", "author": "xieus", "createdAt": "2020-06-04T07:43:36Z", "path": "lib/src/main/java/com/futurewei/alcor/common/entity/TokenEntity.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.common.entity;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+public class TokenEntity {\n+\n+    String token;\n+    Date expireAt;\n+    String user;\n+    String userId;\n+    String domainId;\n+    String domainName;\n+    String projectName;\n+    String projectId;\n+    String projectDomain;\n+    boolean invalid;\n+    List<String> roles;\n+\n+    public TokenEntity(String token, boolean invalid){\n+        this.invalid = invalid;\n+        this.token = token;\n+    }\n+\n+    public boolean isExpired(){\n+        return invalid || (expireAt != null && expireAt.before(new Date()));\n+    }\n+\n+    public String getToken() {", "originalCommit": "86ccba3b6531529ffff03f84e25c92e45327d942", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "238a12723e2db3fb44f497d74efe1caf6c8c8bd2", "url": "https://github.com/futurewei-cloud/alcor/commit/238a12723e2db3fb44f497d74efe1caf6c8c8bd2", "message": "use @data to replace setter and getter", "committedDate": "2020-06-04T10:04:22Z", "type": "commit"}, {"oid": "beee8b7461b53523f631c583441f11e94089bb02", "url": "https://github.com/futurewei-cloud/alcor/commit/beee8b7461b53523f631c583441f11e94089bb02", "message": "add expire cache support", "committedDate": "2020-06-04T10:07:11Z", "type": "commit"}, {"oid": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "url": "https://github.com/futurewei-cloud/alcor/commit/27b07554ee5951dae97abd15cf57dbdac224d0b8", "message": "add test plan", "committedDate": "2020-06-04T10:12:02Z", "type": "commit"}, {"oid": "544d967b8892e05e26ffdf2237f31b3820616475", "url": "https://github.com/futurewei-cloud/alcor/commit/544d967b8892e05e26ffdf2237f31b3820616475", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor", "committedDate": "2020-06-05T01:18:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NjExOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435646119", "bodyText": "As this is a general interface for Ignite, Redis and other DBs, ideally we should keep the interface db-independent. Could we move this method to Redis class only?\n@Gzure @chenpiaoping We need to add a comment to this interface. Thank you.", "author": "xieus", "createdAt": "2020-06-05T01:45:16Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "diffHunk": "@@ -43,27 +49,46 @@ CacheFactory cacheFactoryInstance() {\n         return new CacheFactory();\n     }\n \n-    private ICache getIgniteCache(String cacheName) {\n+    private <K, V> ICache<K, V> getIgniteCache(String cacheName) {\n         return new IgniteCache<>(igniteClient, cacheName);\n     }\n \n-    public <K, V> ICache getRedisCache(Class<V> v, String cacheName) {\n-        RedisTemplate<K, V> template = new RedisTemplate<K, V>();\n+    public <K, V> RedisTemplate<K, V> getRedisTemplate(Class<V> v){", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzQwNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435663406", "bodyText": "I think we could create a CacheFactory interface, and a DB interface implement a CacheFactory. So we will return different DB CacheFactory from application properties. We can make all DB keep independent.", "author": "Gzure", "createdAt": "2020-06-05T02:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NjExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NjUzOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435646538", "bodyText": "We could use a generic name \"getExpireCache\" and implement it different in Ignite and Redis.", "author": "xieus", "createdAt": "2020-06-05T01:47:01Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "diffHunk": "@@ -43,27 +49,46 @@ CacheFactory cacheFactoryInstance() {\n         return new CacheFactory();\n     }\n \n-    private ICache getIgniteCache(String cacheName) {\n+    private <K, V> ICache<K, V> getIgniteCache(String cacheName) {\n         return new IgniteCache<>(igniteClient, cacheName);\n     }\n \n-    public <K, V> ICache getRedisCache(Class<V> v, String cacheName) {\n-        RedisTemplate<K, V> template = new RedisTemplate<K, V>();\n+    public <K, V> RedisTemplate<K, V> getRedisTemplate(Class<V> v){\n+        RedisTemplate<K, V> template = new RedisTemplate<>();\n         template.setConnectionFactory(lettuceConnectionFactory);\n         template.setKeySerializer(new StringRedisSerializer());\n \n         template.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(v));\n         template.setValueSerializer(new Jackson2JsonRedisSerializer<>(v));\n         template.afterPropertiesSet();\n \n+        return template;\n+    }\n+\n+    public <K, V> ICache<K, V> getRedisCache(Class<V> v, String cacheName) {\n+        RedisTemplate<K, V> template = getRedisTemplate(v);\n         return new RedisCache<>(template, cacheName);\n     }\n \n-    public <K, V> ICache getCache(Class<V> v) {\n+    public <K, V> ICache<K, V> getRedisExpireCache(Class<V> v, long timeout, TimeUnit timeUnit){", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NzExMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435657113", "bodyText": "Please remove the \"vpc\" stuff from the logger message.\nRecommend to use \"Create cache failed for client \" + name + \" \" + e.getMessage().\nPlease also update the message in other constructor as well. Thank you.", "author": "xieus", "createdAt": "2020-06-05T02:30:13Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCache.java", "diffHunk": "@@ -57,6 +59,25 @@ public IgniteCache(IgniteClient igniteClient, String name) {\n         Assert.notNull(igniteClient, \"Create cache for vpc failed\");\n     }\n \n+    public IgniteCache(IgniteClient igniteClient, String name, ExpiryPolicy ep) {\n+        this.igniteClient = igniteClient;\n+\n+        try {\n+            ClientCacheConfiguration cfg = new ClientCacheConfiguration();\n+            cfg.setName(name);\n+            cfg.setExpiryPolicy(ep);\n+            cache = igniteClient.getOrCreateCache(cfg);\n+        } catch (ClientException e) {\n+            logger.log(Level.WARNING, \"Create cache for vpc failed:\" + e.getMessage());", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NzI1Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435657257", "bodyText": "Same here. This is not related to \"vpc\"", "author": "xieus", "createdAt": "2020-06-05T02:30:49Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteCache.java", "diffHunk": "@@ -57,6 +59,25 @@ public IgniteCache(IgniteClient igniteClient, String name) {\n         Assert.notNull(igniteClient, \"Create cache for vpc failed\");\n     }\n \n+    public IgniteCache(IgniteClient igniteClient, String name, ExpiryPolicy ep) {\n+        this.igniteClient = igniteClient;\n+\n+        try {\n+            ClientCacheConfiguration cfg = new ClientCacheConfiguration();\n+            cfg.setName(name);\n+            cfg.setExpiryPolicy(ep);\n+            cache = igniteClient.getOrCreateCache(cfg);\n+        } catch (ClientException e) {\n+            logger.log(Level.WARNING, \"Create cache for vpc failed:\" + e.getMessage());\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"Unexpected failure:\" + e.getMessage());\n+        }\n+\n+        transaction = new IgniteTransaction(igniteClient);\n+\n+        Assert.notNull(igniteClient, \"Create cache for vpc failed\");", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1ODMwMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435658300", "bodyText": "Let us add comment to the constructor, and give an example. Thank you.", "author": "xieus", "createdAt": "2020-06-05T02:35:17Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.common.db.redis;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.core.ValueOperations;\n+import sun.reflect.generics.reflectiveObjects.NotImplementedException;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+\n+public class RedisExpireCache<K, V> implements ICache<K, V> {\n+    private static final Logger logger = LoggerFactory.getLogger();\n+\n+    private RedisTemplate<K, V> redisTemplate;\n+    private ValueOperations<K, V> valueOperations;\n+    private long timeout;\n+    private TimeUnit timeUnit;\n+    private RedisTransaction transaction;\n+\n+    public RedisExpireCache(RedisTemplate<K, V> redisTemplate,  long timeout, TimeUnit timeUnit) {", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1ODg1Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435658853", "bodyText": "Like this class!", "author": "xieus", "createdAt": "2020-06-05T02:37:45Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.common.db.redis;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.core.ValueOperations;\n+import sun.reflect.generics.reflectiveObjects.NotImplementedException;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+\n+public class RedisExpireCache<K, V> implements ICache<K, V> {", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzE5Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435663193", "bodyText": "Maybe rename the package name to com.futurewei.alcor.apigateway.client?", "author": "xieus", "createdAt": "2020-06-05T02:56:09Z", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxOTM5MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435719390", "bodyText": "OK", "author": "Gzure", "createdAt": "2020-06-05T06:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2MzE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3MzgyMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435673822", "bodyText": "Like it!", "author": "xieus", "createdAt": "2020-06-05T03:42:46Z", "path": "services/api_gateway/src/test/java/com/futurewei/alcor/apigateway/KeystoneAuthWebFilterTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway;\n+\n+import com.futurewei.alcor.apigateway.filter.KeystoneAuthWebFilter;\n+import com.futurewei.alcor.apigateway.subnet.SubnetWebHandlers;\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.BodyInserters;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\",", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4NTEyMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435685123", "bodyText": "@Gzure As the code logics in KeyStoneAUthWebFilter and KeystoneClient are not simple, we would like to have UT coverage if possible? Ideally UTs should cover the happy path but the most important, the sad path with different unexpected input?", "author": "xieus", "createdAt": "2020-06-05T04:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3MzgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDMyNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435674327", "bodyText": "Does this test case needs a running SubnetManager, just for my curiosity?", "author": "xieus", "createdAt": "2020-06-05T03:45:15Z", "path": "services/api_gateway/src/test/java/com/futurewei/alcor/apigateway/KeystoneAuthWebFilterTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway;\n+\n+import com.futurewei.alcor.apigateway.filter.KeystoneAuthWebFilter;\n+import com.futurewei.alcor.apigateway.subnet.SubnetWebHandlers;\n+import com.futurewei.alcor.apigateway.utils.KeystoneClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.BodyInserters;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\",\n+                \"keystone.enable=true\", \"neutron.url_prefix=/v2.0\"})\n+@AutoConfigureWireMock(port = 0)\n+public class KeystoneAuthWebFilterTest {\n+\n+    private static final String TEST_TOKEN = \"gaaaaaBex0xWssdfsadfDSSDFSDF\";\n+    private static final String TEST_PROJECT_ID = \"aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\";\n+\n+\n+    @Autowired\n+    private WebTestClient webClient;\n+\n+    @Autowired\n+    private KeystoneAuthWebFilter keystoneAuthWebFilter;\n+\n+    @MockBean\n+    private KeystoneClient keystoneClient;\n+\n+    @MockBean\n+    private SubnetWebHandlers subnetWebHandlers;\n+\n+    @Before\n+    public void setUp(){\n+        ReflectionTestUtils.setField(keystoneAuthWebFilter, \"keystoneClient\", keystoneClient);\n+    }\n+\n+    @Test\n+    public void TestFilter(){\n+        when(keystoneClient.verifyToken(TEST_TOKEN)).thenReturn(TEST_PROJECT_ID);\n+\n+        Mono<ServerResponse> response =ServerResponse.ok().body(BodyInserters.fromObject(\"[{\\\"network_id\\\":\\\"bbaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\\\"}]\"));\n+        when(subnetWebHandlers.getSubnets(ArgumentMatchers.any(ServerRequest.class))).thenReturn(response);\n+\n+        webClient\n+                .get().uri(\"/v2.0/subnets\")", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwODEwMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435708103", "bodyText": "It uses a mock SubnetHandler.", "author": "Gzure", "createdAt": "2020-06-05T06:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NjQ0Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435676447", "bodyText": "Could we make checkEndpoints and getLocalToken private?", "author": "xieus", "createdAt": "2020-06-05T03:55:01Z", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODI1NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435678255", "bodyText": "Can we give a brief comment here about the algorithm to pick the best endpoint?", "author": "xieus", "createdAt": "2020-06-05T04:03:39Z", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(\"v3\") || authUrl.contains(\"v2\")){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(\"versions\")){\n+            JsonNode endpoints = versions.path(\"versions\");\n+            //maybe there are no values key\n+            if(endpoints.has(\"values\")){\n+                endpoints = endpoints.path(\"values\");\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            findBestEndPoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    public void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + \"?nocatalog\", entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(\"token\");\n+            String expireDateStr = token.path(\"expires_at\").asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + \"?nocatalog\",\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(\"token\");\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(\"user\");\n+                te.setUser(user.path(\"name\").asText(\"\"));\n+                te.setUserId(user.path(\"id\").asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(\"expires_at\").asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(\"roles\")){\n+                    JsonNode roles = tokenNode.path(\"roles\");\n+                    Iterator<JsonNode> rolesIt = roles.elements();\n+                    List<String> roleNames = new ArrayList<>();\n+                    rolesIt.forEachRemaining(role -> roleNames.add(role.path(\"name\").asText(\"\")));\n+                    te.setRoles(roleNames);\n+                }\n+\n+                if(tokenNode.has(JSON_PROJECT_KEY)){\n+                    JsonNode project = tokenNode.path(JSON_PROJECT_KEY);\n+                    String projectId = project.path(\"id\").asText();\n+\n+                    if(project.has(JSON_DOMAIN_KEY)){\n+                        JsonNode domain = project.path(JSON_DOMAIN_KEY);\n+                        te.setDomainId(domain.path(\"id\").asText(\"\"));\n+                        te.setDomainName(domain.path(\"name\").asText(\"\"));\n+                    }\n+\n+                    projectId = transformProjectIdToUUID(projectId);\n+                    te.setProjectId(projectId);\n+                    te.setProjectName(project.path(\"name\").asText(\"\"));\n+                    cache.put(token, te);\n+                    return projectId;\n+                }\n+            }else{\n+                cache.put(token, new TokenEntity(token,true));\n+            }\n+        } catch (IOException | CacheException | ParseException e) {\n+            LOG.error(\"verify token failed, {}\", e.getMessage());\n+        }\n+        return \"\";\n+    }\n+\n+    private String transformProjectIdToUUID(String projectId){\n+        return projectId.substring(0, 8) + \"-\" + projectId.substring(8, 12) +\n+                \"-\" + projectId.substring(12, 16) + \"-\" +\n+                projectId.substring(16, 20) + \"-\" +\n+                projectId.substring(20);\n+    }\n+\n+    private String buildLocalTokenParams() throws JsonProcessingException {\n+        //build params\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode auth = mapper.createObjectNode();\n+\n+        ObjectNode identity = mapper.createObjectNode();\n+        ArrayNode methods = mapper.createArrayNode();\n+        methods.add(authType);\n+        identity.set(\"methods\", methods);\n+\n+        ObjectNode passwordNode = mapper.createObjectNode();\n+        ObjectNode user = mapper.createObjectNode();\n+        user.put(\"name\", username);\n+        user.put(\"password\", password);\n+\n+        ObjectNode domain = mapper.createObjectNode();\n+        domain.put(\"name\", userDomainName);\n+        user.set(JSON_DOMAIN_KEY, domain);\n+\n+        passwordNode.set(\"user\", user);\n+        identity.set(\"password\", passwordNode);\n+\n+        auth.set(\"identity\", identity);\n+\n+        ObjectNode scope = mapper.createObjectNode();\n+        ObjectNode project = mapper.createObjectNode();\n+        project.put(\"name\", projectName);\n+        project.set(JSON_DOMAIN_KEY, domain);\n+        scope.set(JSON_PROJECT_KEY, project);\n+\n+        auth.set(\"scope\", scope);\n+        ObjectNode root = mapper.createObjectNode();\n+        root.set(\"auth\", auth);\n+        return mapper.writeValueAsString(root);\n+    }\n+\n+    private void findBestEndPoint(Iterator<JsonNode> endpoints){", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4MDQ1Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435680452", "bodyText": "For the method name, recommend to use \"AssignBaseUrlWithBestEndpoint\"", "author": "xieus", "createdAt": "2020-06-05T04:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTcxNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435679714", "bodyText": "Please store it in a constant.", "author": "xieus", "createdAt": "2020-06-05T04:10:16Z", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(\"v3\") || authUrl.contains(\"v2\")){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(\"versions\")){\n+            JsonNode endpoints = versions.path(\"versions\");\n+            //maybe there are no values key\n+            if(endpoints.has(\"values\")){\n+                endpoints = endpoints.path(\"values\");\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            findBestEndPoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    public void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + \"?nocatalog\", entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(\"token\");\n+            String expireDateStr = token.path(\"expires_at\").asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + \"?nocatalog\",\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(\"token\");\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(\"user\");\n+                te.setUser(user.path(\"name\").asText(\"\"));\n+                te.setUserId(user.path(\"id\").asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(\"expires_at\").asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(\"roles\")){\n+                    JsonNode roles = tokenNode.path(\"roles\");\n+                    Iterator<JsonNode> rolesIt = roles.elements();\n+                    List<String> roleNames = new ArrayList<>();\n+                    rolesIt.forEachRemaining(role -> roleNames.add(role.path(\"name\").asText(\"\")));\n+                    te.setRoles(roleNames);\n+                }\n+\n+                if(tokenNode.has(JSON_PROJECT_KEY)){\n+                    JsonNode project = tokenNode.path(JSON_PROJECT_KEY);\n+                    String projectId = project.path(\"id\").asText();\n+\n+                    if(project.has(JSON_DOMAIN_KEY)){\n+                        JsonNode domain = project.path(JSON_DOMAIN_KEY);\n+                        te.setDomainId(domain.path(\"id\").asText(\"\"));\n+                        te.setDomainName(domain.path(\"name\").asText(\"\"));\n+                    }\n+\n+                    projectId = transformProjectIdToUUID(projectId);\n+                    te.setProjectId(projectId);\n+                    te.setProjectName(project.path(\"name\").asText(\"\"));\n+                    cache.put(token, te);\n+                    return projectId;\n+                }\n+            }else{\n+                cache.put(token, new TokenEntity(token,true));\n+            }\n+        } catch (IOException | CacheException | ParseException e) {\n+            LOG.error(\"verify token failed, {}\", e.getMessage());\n+        }\n+        return \"\";\n+    }\n+\n+    private String transformProjectIdToUUID(String projectId){\n+        return projectId.substring(0, 8) + \"-\" + projectId.substring(8, 12) +\n+                \"-\" + projectId.substring(12, 16) + \"-\" +\n+                projectId.substring(16, 20) + \"-\" +\n+                projectId.substring(20);\n+    }\n+\n+    private String buildLocalTokenParams() throws JsonProcessingException {\n+        //build params\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode auth = mapper.createObjectNode();\n+\n+        ObjectNode identity = mapper.createObjectNode();\n+        ArrayNode methods = mapper.createArrayNode();\n+        methods.add(authType);\n+        identity.set(\"methods\", methods);\n+\n+        ObjectNode passwordNode = mapper.createObjectNode();\n+        ObjectNode user = mapper.createObjectNode();\n+        user.put(\"name\", username);\n+        user.put(\"password\", password);\n+\n+        ObjectNode domain = mapper.createObjectNode();\n+        domain.put(\"name\", userDomainName);\n+        user.set(JSON_DOMAIN_KEY, domain);\n+\n+        passwordNode.set(\"user\", user);\n+        identity.set(\"password\", passwordNode);\n+\n+        auth.set(\"identity\", identity);\n+\n+        ObjectNode scope = mapper.createObjectNode();\n+        ObjectNode project = mapper.createObjectNode();\n+        project.put(\"name\", projectName);\n+        project.set(JSON_DOMAIN_KEY, domain);\n+        scope.set(JSON_PROJECT_KEY, project);\n+\n+        auth.set(\"scope\", scope);\n+        ObjectNode root = mapper.createObjectNode();\n+        root.set(\"auth\", auth);\n+        return mapper.writeValueAsString(root);\n+    }\n+\n+    private void findBestEndPoint(Iterator<JsonNode> endpoints){\n+        SortedMap<String, Iterator<JsonNode>> sortedMap = new TreeMap<>();\n+        while(endpoints.hasNext()){\n+            JsonNode endpoint = endpoints.next();\n+\n+            //check id\n+            if(!endpoint.has(\"id\") || !endpoint.has(\"status\") || !endpoint.has(JSON_LINKS_KEY)){\n+                continue;\n+            }\n+\n+            JsonNode id = endpoint.path(\"id\");\n+            JsonNode status = endpoint.path(\"status\");\n+            String statusStr = status.asText(\"unknown\");\n+            if(\"stable, current, supported\".contains(statusStr)){", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4MzU3MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r435683570", "bodyText": "Can we give an OpenStack KeyStone link about different roles to improve the readability?", "author": "xieus", "createdAt": "2020-06-05T04:28:19Z", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/utils/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.utils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() throws IOException{\n+        checkEndPoints();\n+        getLocalToken();\n+    }\n+\n+    public void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(\"v3\") || authUrl.contains(\"v2\")){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(\"versions\")){\n+            JsonNode endpoints = versions.path(\"versions\");\n+            //maybe there are no values key\n+            if(endpoints.has(\"values\")){\n+                endpoints = endpoints.path(\"values\");\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            findBestEndPoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    public void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + \"?nocatalog\", entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(\"token\");\n+            String expireDateStr = token.path(\"expires_at\").asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + \"?nocatalog\",\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(\"token\");\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(\"user\");\n+                te.setUser(user.path(\"name\").asText(\"\"));\n+                te.setUserId(user.path(\"id\").asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(\"expires_at\").asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(\"roles\")){", "originalCommit": "27b07554ee5951dae97abd15cf57dbdac224d0b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fae5d0298add9955dbdc6bfebad2ce42e5d9cdf2", "url": "https://github.com/futurewei-cloud/alcor/commit/fae5d0298add9955dbdc6bfebad2ce42e5d9cdf2", "message": "add ICacheFactory interface and rewrite CacheFactory", "committedDate": "2020-06-05T10:43:09Z", "type": "commit"}, {"oid": "def42d09534018ff34efca6a91e853571b6edda1", "url": "https://github.com/futurewei-cloud/alcor/commit/def42d09534018ff34efca6a91e853571b6edda1", "message": "add some method annotate", "committedDate": "2020-06-05T10:45:34Z", "type": "commit"}, {"oid": "a36fc076de9910b038a07476c716af1ae1547422", "url": "https://github.com/futurewei-cloud/alcor/commit/a36fc076de9910b038a07476c716af1ae1547422", "message": "add more test cases", "committedDate": "2020-06-05T10:46:54Z", "type": "commit"}, {"oid": "20754ff60a8ce9c2e926a90efdebb780ca7f485d", "url": "https://github.com/futurewei-cloud/alcor/commit/20754ff60a8ce9c2e926a90efdebb780ca7f485d", "message": "rename 1.1 1.2 to 2.1 2.2", "committedDate": "2020-06-05T10:50:04Z", "type": "commit"}, {"oid": "d3770317c3f960ef002a0b3e7525dea48e461c8c", "url": "https://github.com/futurewei-cloud/alcor/commit/d3770317c3f960ef002a0b3e7525dea48e461c8c", "message": "rename utils.KeystoneClient to clients.KeystoneClient", "committedDate": "2020-06-05T10:52:39Z", "type": "commit"}, {"oid": "fb7030692ae5951cc2b5c8c3ad61b9dfc541def3", "url": "https://github.com/futurewei-cloud/alcor/commit/fb7030692ae5951cc2b5c8c3ad61b9dfc541def3", "message": "add KeystoneClientTest for test KeystoneClient", "committedDate": "2020-06-09T02:51:35Z", "type": "commit"}, {"oid": "c34bac4a3bbb4777ff3760e7ed186d8a66908048", "url": "https://github.com/futurewei-cloud/alcor/commit/c34bac4a3bbb4777ff3760e7ed186d8a66908048", "message": "add KeystoneClientTest for test KeystoneClient", "committedDate": "2020-06-09T03:31:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NjYxNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r437496616", "bodyText": "Like it!", "author": "xieus", "createdAt": "2020-06-09T15:06:36Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/CacheFactory.java", "diffHunk": "@@ -16,54 +16,36 @@\n \n package com.futurewei.alcor.common.db;\n \n-import com.futurewei.alcor.common.db.ignite.IgniteCache;\n-import com.futurewei.alcor.common.db.redis.RedisCache;\n+import com.futurewei.alcor.common.db.ignite.IgniteCacheFactory;\n+import com.futurewei.alcor.common.db.redis.RedisCacheFactory;\n import org.apache.ignite.client.IgniteClient;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\n-import org.springframework.data.redis.core.RedisTemplate;\n-import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n-import org.springframework.data.redis.serializer.StringRedisSerializer;\n import org.springframework.stereotype.Component;\n \n+import java.util.concurrent.TimeUnit;\n+\n \n @ComponentScan\n @Component\n public class CacheFactory {\n-    @Autowired(required = false)\n-    private IgniteClient igniteClient;\n-\n-    @Autowired\n-    LettuceConnectionFactory lettuceConnectionFactory;\n \n-    @Bean\n-    CacheFactory cacheFactoryInstance() {\n-        return new CacheFactory();\n-    }\n+    private ICacheFactory iCacheFactory;\n \n-    private ICache getIgniteCache(String cacheName) {\n-        return new IgniteCache<>(igniteClient, cacheName);\n+    public CacheFactory(@Autowired(required=false)IgniteClient igniteClient, LettuceConnectionFactory lettuceConnectionFactory){\n+        if(igniteClient == null){\n+            this.iCacheFactory = new RedisCacheFactory(lettuceConnectionFactory);\n+        }else{\n+            this.iCacheFactory = new IgniteCacheFactory(igniteClient);\n+        }\n     }\n \n-    public <K, V> ICache getRedisCache(Class<V> v, String cacheName) {\n-        RedisTemplate<K, V> template = new RedisTemplate<K, V>();", "originalCommit": "c34bac4a3bbb4777ff3760e7ed186d8a66908048", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNjU1Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r437516553", "bodyText": "\ud83d\udc4d", "author": "xieus", "createdAt": "2020-06-09T15:22:51Z", "path": "services/api_gateway/src/main/java/com/futurewei/alcor/apigateway/client/KeystoneClient.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.apigateway.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.entity.TokenEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.*;\n+import org.springframework.web.client.RestTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class KeystoneClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KeystoneClient.class);\n+\n+    private final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+\n+    private static final String TOKEN_URL = \"/auth/tokens\";\n+    private static final String AUTH_URL_V3 = \"v3\";\n+    private static final String AUTH_URL_V2 = \"v2\";\n+    private static final String AUTH_URL_QUERY_PARAM = \"?nocatalog\";\n+    private static final String VALIDATE_TOKEN_HEADER = \"X-Subject-Token\";\n+    private static final String AUTH_TOKEN_HEADER = \"X-Auth-Token\";\n+    private static final long CACHE_EXPIRE_HOUR = 2;\n+\n+    private static final String JSON_PROJECT_KEY = \"project\";\n+    private static final String JSON_TOKEN_KEY = \"token\";\n+    private static final String JSON_DOMAIN_KEY = \"domain\";\n+    private static final String JSON_LINKS_KEY = \"links\";\n+    private static final String JSON_ID_KEY = \"id\";\n+    private static final String JSON_REL_KEY = \"rel\";\n+    private static final String JSON_HREF_KEY = \"href\";\n+    private static final String JSON_IDENTITY_KEY = \"identity\";\n+    private static final String JSON_PASSWORD_KEY = \"password\";\n+    private static final String JSON_VERSIONS_KEY = \"versions\";\n+    private static final String JSON_VALUES_KEY = \"values\";\n+    private static final String JSON_EXPIRES_AT_KEY = \"expires_at\";\n+    private static final String JSON_NAME_KEY = \"name\";\n+    private static final String JSON_SCOPE_KEY = \"scope\";\n+    private static final String JSON_AUTH_KEY = \"auth\";\n+    private static final String JSON_USER_KEY = \"user\";\n+    private static final String JSON_ROLES_KEY = \"roles\";\n+    private static final String JSON_METHODS_KEY = \"methods\";\n+    private static final String JSON_STATUS_KEY = \"status\";\n+    private static final String JSON_ENDPOINTS_AVAILABLE_STATUS = \"stable, current, supported\";\n+\n+\n+    private String baseUrl = \"\";\n+    private volatile String localToken = \"\";\n+    private volatile Date localTokenExpireDate;\n+\n+    @Value(\"${keystone.project_domain_name}\")\n+    private String projectDomainName;\n+\n+    @Value(\"${keystone.project_name}\")\n+    private String projectName;\n+\n+    @Value(\"${keystone.user_domain_name}\")\n+    private String userDomainName;\n+\n+    @Value(\"${keystone.username}\")\n+    private String username;\n+\n+    @Value(\"${keystone.password}\")\n+    private String password;\n+\n+    @Value(\"${keystone.auth_type}\")\n+    private String authType;\n+\n+    @Value(\"${keystone.auth_url}\")\n+    private String authUrl;\n+\n+    private RestTemplate restTemplate;\n+    private ICache<String, TokenEntity> cache;\n+\n+    public KeystoneClient(CacheFactory cacheFactory){\n+        this.restTemplate = new RestTemplate();\n+        this.cache = cacheFactory.getExpireCache(TokenEntity.class, CACHE_EXPIRE_HOUR, TimeUnit.HOURS);\n+    }\n+\n+    @PostConstruct\n+    public void setUp() {\n+        try {\n+            checkEndPoints();\n+            getLocalToken();\n+        } catch (Exception e) {\n+            LOG.error(\"Keystone client init failed: {}\", e.getMessage());\n+        }\n+    }\n+\n+    private void checkEndPoints() throws IOException{\n+        if(!\"\".equals(baseUrl)){\n+            return;\n+        }else if (authUrl.contains(AUTH_URL_V3) || authUrl.contains(AUTH_URL_V2)){\n+            baseUrl = authUrl;\n+            return;\n+        }\n+\n+        String response = restTemplate.getForObject(authUrl, String.class);\n+\n+        JsonNode versions = json2Map(response);\n+\n+        //in v3 apis resp have versions key\n+        if(versions.has(JSON_VERSIONS_KEY)){\n+            JsonNode endpoints = versions.path(JSON_VERSIONS_KEY);\n+            //maybe there are no values key\n+            if(endpoints.has(JSON_VALUES_KEY)){\n+                endpoints = endpoints.path(JSON_VALUES_KEY);\n+            }\n+            Iterator<JsonNode> endpointsIt = endpoints.elements();\n+            assignBaseUrlWithBestEndpoint(endpointsIt);\n+\n+            if(\"\".equals(baseUrl)){\n+                findEndPoint(endpointsIt);\n+            }\n+        }\n+    }\n+\n+    private void getLocalToken() throws IOException{\n+        //if have token and not expire use it\n+        if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+            return;\n+        }\n+\n+        checkEndPoints();\n+\n+        synchronized(this) {\n+            if(!\"\".equals(localToken) && (localTokenExpireDate == null || localTokenExpireDate.after(new Date()))){\n+                return;\n+            }\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            HttpEntity<String> entity = new HttpEntity<>(buildLocalTokenParams(), headers);\n+            HttpEntity<String> response = restTemplate.postForEntity(baseUrl + TOKEN_URL + AUTH_URL_QUERY_PARAM, entity, String.class);\n+\n+            localToken = response.getHeaders().getFirst(VALIDATE_TOKEN_HEADER);\n+            JsonNode result = json2Map(response.getBody());\n+            JsonNode token = result.path(JSON_TOKEN_KEY);\n+            String expireDateStr = token.path(JSON_EXPIRES_AT_KEY).asText();\n+            if (!\"null\".equals(expireDateStr)) {\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                try {\n+                    localTokenExpireDate = dateFormat.parse(expireDateStr);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Get Alcor Token failed, {}\", e.getMessage());\n+                    localToken = \"\";\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    /**\n+     * verify client request token, and cache the token info which get from keystone\n+     *\n+     * @param token the customer request token in 'X-Auth-Token'\n+     * @return a token project id from keystone\n+     *\n+     * @see <a href=\"https://docs.openstack.org/api-ref/identity/v3/index.html?expanded=password-authentication-with-scoped-authorization-detail#identity-api-operations\">Keystone api operations</a>\n+     */\n+    public String verifyToken(String token){\n+        try {\n+\n+            TokenEntity tokenEntity = cache.get(token);\n+            if(tokenEntity != null){\n+                return tokenEntity.isExpired() ? \"\" : tokenEntity.getProjectId();\n+            }\n+\n+            checkEndPoints();\n+            getLocalToken();\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.setContentType(MediaType.APPLICATION_JSON);\n+            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n+            headers.set(VALIDATE_TOKEN_HEADER, token);\n+            headers.set(AUTH_TOKEN_HEADER, localToken);\n+\n+            HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+            ResponseEntity<String> response = restTemplate.exchange(baseUrl + TOKEN_URL + AUTH_URL_QUERY_PARAM,\n+                    HttpMethod.GET, entity, String.class);\n+\n+            // check headers\n+            if(response.getStatusCode().equals(HttpStatus.OK)){\n+\n+\n+                String resultStr = response.getBody();\n+                JsonNode result = json2Map(resultStr);\n+                JsonNode tokenNode = result.path(JSON_TOKEN_KEY);\n+\n+                TokenEntity te = new TokenEntity(token,false);\n+                JsonNode user = tokenNode.path(JSON_USER_KEY);\n+                te.setUser(user.path(JSON_NAME_KEY).asText(\"\"));\n+                te.setUserId(user.path(JSON_ID_KEY).asText(\"\"));\n+\n+                String expireDateStr = tokenNode.path(JSON_EXPIRES_AT_KEY).asText();\n+                expireDateStr = expireDateStr.replace(\"000Z\", \"+0000\");\n+                Date expireDate = dateFormat.parse(expireDateStr);\n+                te.setExpireAt(expireDate);\n+\n+                if(tokenNode.has(JSON_ROLES_KEY)){\n+                    JsonNode roles = tokenNode.path(JSON_ROLES_KEY);\n+                    Iterator<JsonNode> rolesIt = roles.elements();\n+                    List<String> roleNames = new ArrayList<>();\n+                    rolesIt.forEachRemaining(role -> roleNames.add(role.path(JSON_NAME_KEY).asText(\"\")));\n+                    te.setRoles(roleNames);\n+                }\n+\n+                if(tokenNode.has(JSON_PROJECT_KEY)){\n+                    JsonNode project = tokenNode.path(JSON_PROJECT_KEY);\n+                    String projectId = project.path(JSON_ID_KEY).asText();\n+\n+                    if(project.has(JSON_DOMAIN_KEY)){\n+                        JsonNode domain = project.path(JSON_DOMAIN_KEY);\n+                        te.setDomainId(domain.path(JSON_ID_KEY).asText(\"\"));\n+                        te.setDomainName(domain.path(JSON_NAME_KEY).asText(\"\"));\n+                    }\n+\n+                    projectId = transformProjectIdToUuid(projectId);\n+                    te.setProjectId(projectId);\n+                    te.setProjectName(project.path(JSON_NAME_KEY).asText(\"\"));\n+                    cache.put(token, te);\n+                    return projectId;\n+                }\n+            }else{\n+                cache.put(token, new TokenEntity(token,true));\n+            }\n+        } catch (IOException | CacheException | ParseException e) {\n+            LOG.error(\"verify token failed, {}\", e.getMessage());\n+        }\n+        return \"\";\n+    }\n+\n+    private String transformProjectIdToUuid(String projectId){\n+        int uuidLength = 32;\n+        if (projectId.length() != uuidLength){\n+            throw new IllegalArgumentException(\"Invalid UUID string: \"+ projectId);\n+        }\n+        return projectId.substring(0, 8) + \"-\" + projectId.substring(8, 12) +\n+                \"-\" + projectId.substring(12, 16) + \"-\" +\n+                projectId.substring(16, 20) + \"-\" +\n+                projectId.substring(20);\n+    }\n+\n+    private String buildLocalTokenParams() throws JsonProcessingException {\n+        //build params\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode auth = mapper.createObjectNode();\n+\n+        ObjectNode identity = mapper.createObjectNode();\n+        ArrayNode methods = mapper.createArrayNode();\n+        methods.add(authType);\n+        identity.set(JSON_METHODS_KEY, methods);\n+\n+        ObjectNode passwordNode = mapper.createObjectNode();\n+        ObjectNode user = mapper.createObjectNode();\n+        user.put(JSON_NAME_KEY, username);\n+        user.put(JSON_PASSWORD_KEY, password);\n+\n+        ObjectNode domain = mapper.createObjectNode();\n+        domain.put(JSON_NAME_KEY, userDomainName);\n+        user.set(JSON_DOMAIN_KEY, domain);\n+\n+        passwordNode.set(JSON_USER_KEY, user);\n+        identity.set(JSON_PASSWORD_KEY, passwordNode);\n+\n+        auth.set(JSON_IDENTITY_KEY, identity);\n+\n+        ObjectNode scope = mapper.createObjectNode();\n+        ObjectNode project = mapper.createObjectNode();\n+        project.put(JSON_NAME_KEY, projectName);\n+        project.set(JSON_DOMAIN_KEY, domain);\n+        scope.set(JSON_PROJECT_KEY, project);\n+\n+        auth.set(JSON_SCOPE_KEY, scope);\n+        ObjectNode root = mapper.createObjectNode();\n+        root.set(JSON_AUTH_KEY, auth);\n+        return mapper.writeValueAsString(root);\n+    }\n+\n+\n+    /**", "originalCommit": "c34bac4a3bbb4777ff3760e7ed186d8a66908048", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNzI0MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/219#discussion_r437517240", "bodyText": "\ud83d\udc4d", "author": "xieus", "createdAt": "2020-06-09T15:23:32Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/redis/RedisExpireCache.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.common.db.redis;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.core.ValueOperations;\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+\n+public class RedisExpireCache<K, V> implements ICache<K, V> {\n+    private static final Logger logger = LoggerFactory.getLogger();\n+\n+    private RedisTemplate<K, V> redisTemplate;\n+    private ValueOperations<K, V> valueOperations;\n+    private long timeout;\n+    private TimeUnit timeUnit;\n+    private RedisTransaction transaction;\n+\n+    /**\n+     * return a new redis cache client with auto set expire time", "originalCommit": "c34bac4a3bbb4777ff3760e7ed186d8a66908048", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}