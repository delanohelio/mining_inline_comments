{"pr_number": 1748, "pr_title": "fix near chain searching for R4", "pr_createdAt": "2020-03-03T23:34:57Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1748", "timeline": [{"oid": "e819d404148d62bb8cd01ea175b518e7ba02a98f", "url": "https://github.com/hapifhir/hapi-fhir/commit/e819d404148d62bb8cd01ea175b518e7ba02a98f", "message": "fix near searching for R4", "committedDate": "2020-03-03T23:33:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1OTg0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1748#discussion_r387359846", "bodyText": "So this query is PractitionerRole?location.near=xxxx|yyyyy? i haven't seen location.near before.", "author": "tadgh", "createdAt": "2020-03-03T23:38:07Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4DistanceTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import ca.uhn.fhir.jpa.util.CoordCalculatorTest;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Location;\n+import org.hl7.fhir.r4.model.PractitionerRole;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ResourceProviderR4DistanceTest extends BaseResourceProviderR4Test {\n+\t@Override\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\tmyDaoConfig.setReuseCachedSearchResultsForMillis(null);\n+\t}\n+\n+\t@Test\n+\tpublic void testNearSearchApproximate() {\n+\t\tLocation loc = new Location();\n+\t\tdouble latitude = CoordCalculatorTest.LATITUDE_UHN;\n+\t\tdouble longitude = CoordCalculatorTest.LONGITUDE_UHN;\n+\t\tLocation.LocationPositionComponent position = new Location.LocationPositionComponent().setLatitude(latitude).setLongitude(longitude);\n+\t\tloc.setPosition(position);\n+\t\tIIdType locId = ourClient.create().resource(loc).execute().getId().toUnqualifiedVersionless();\n+\n+\t\t{ // In the box\n+\t\t\tdouble bigEnoughDistance = CoordCalculatorTest.DISTANCE_KM_CHIN_TO_UHN * 2;\n+\t\t\tString url = \"/Location?\" +\n+\t\t\t\tLocation.SP_NEAR + \"=\" + CoordCalculatorTest.LATITUDE_CHIN + \"|\" + CoordCalculatorTest.LONGITUDE_CHIN +\n+\t\t\t\t\"|\" + bigEnoughDistance;\n+\n+\t\t\tBundle actual = ourClient\n+\t\t\t\t.search()\n+\t\t\t\t.byUrl(ourServerBase + \"/\" + url)\n+\t\t\t\t.encodedJson()\n+\t\t\t\t.prettyPrint()\n+\t\t\t\t.returnBundle(Bundle.class)\n+\t\t\t\t.execute();\n+\n+\t\t\tassertEquals(1, actual.getEntry().size());\n+\t\t\tassertEquals(locId.getIdPart(), actual.getEntry().get(0).getResource().getIdElement().getIdPart());\n+\t\t}\n+\t\t{ // Outside the box\n+\t\t\tdouble tooSmallDistance = CoordCalculatorTest.DISTANCE_KM_CHIN_TO_UHN / 2;\n+\t\t\tString url = \"/Location?\" +\n+\t\t\t\tLocation.SP_NEAR + \"=\" + CoordCalculatorTest.LATITUDE_CHIN + \"|\" + CoordCalculatorTest.LONGITUDE_CHIN +\n+\t\t\t\t\"|\" + tooSmallDistance;\n+\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tBundle actual = ourClient\n+\t\t\t\t.search()\n+\t\t\t\t.byUrl(ourServerBase + \"/\" + url)\n+\t\t\t\t.encodedJson()\n+\t\t\t\t.prettyPrint()\n+\t\t\t\t.returnBundle(Bundle.class)\n+\t\t\t\t.execute();\n+\t\t\tmyCaptureQueriesListener.logSelectQueries();\n+\n+\t\t\tassertEquals(0, actual.getEntry().size());\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testNearSearchDistanceNoDistanceChained() {\n+\t\tLocation loc = new Location();\n+\t\tdouble latitude = CoordCalculatorTest.LATITUDE_CHIN;\n+\t\tdouble longitude = CoordCalculatorTest.LONGITUDE_CHIN;\n+\t\tLocation.LocationPositionComponent position = new Location.LocationPositionComponent().setLatitude(latitude).setLongitude(longitude);\n+\t\tloc.setPosition(position);\n+\t\tIIdType locId = ourClient.create().resource(loc).execute().getId().toUnqualifiedVersionless();\n+\n+\t\tPractitionerRole pr = new PractitionerRole();\n+\t\tpr.addLocation().setReference(locId.getValue());\n+\t\tIIdType prId = ourClient.create().resource(pr).execute().getId().toUnqualifiedVersionless();\n+\n+\t\tString url = \"PractitionerRole?location.\" +\n+\t\t\tLocation.SP_NEAR + \"=\" + latitude + \"|\" + longitude;", "originalCommit": "e819d404148d62bb8cd01ea175b518e7ba02a98f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2MTE5Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1748#discussion_r387361193", "bodyText": "The R4 syntax is much nicer than DSTU3", "author": "fil512", "createdAt": "2020-03-03T23:42:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1OTg0Ng=="}], "type": "inlineReview"}]}