{"pr_number": 1918, "pr_title": "Empi 28 matchers", "pr_createdAt": "2020-06-11T23:35:19Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1918", "timeline": [{"oid": "cad7c8648a76e71352f58b515c9a7c60f8c3d5ef", "url": "https://github.com/hapifhir/hapi-fhir/commit/cad7c8648a76e71352f58b515c9a7c60f8c3d5ef", "message": "adding matchers", "committedDate": "2020-06-09T15:29:34Z", "type": "commit"}, {"oid": "df461fc8c5cf9897d894c12fe52e0618ca417890", "url": "https://github.com/hapifhir/hapi-fhir/commit/df461fc8c5cf9897d894c12fe52e0618ca417890", "message": "reorganize resource matching api", "committedDate": "2020-06-09T16:27:34Z", "type": "commit"}, {"oid": "2c6e3cdda5061376ece7f7ffe58953e428df59cd", "url": "https://github.com/hapifhir/hapi-fhir/commit/2c6e3cdda5061376ece7f7ffe58953e428df59cd", "message": "added precision sensitive date matcher", "committedDate": "2020-06-09T19:40:53Z", "type": "commit"}, {"oid": "393a24b17155b909c3956006ffa8cd9d7f371a8c", "url": "https://github.com/hapifhir/hapi-fhir/commit/393a24b17155b909c3956006ffa8cd9d7f371a8c", "message": "stricter rules validation", "committedDate": "2020-06-09T22:57:50Z", "type": "commit"}, {"oid": "ab8d608396ba5348566af737dff8802fc747a81d", "url": "https://github.com/hapifhir/hapi-fhir/commit/ab8d608396ba5348566af737dff8802fc747a81d", "message": "validate thresholds", "committedDate": "2020-06-09T23:10:52Z", "type": "commit"}, {"oid": "977a3281ea8263ecca9d5ba808475ff1ab71d4c5", "url": "https://github.com/hapifhir/hapi-fhir/commit/977a3281ea8263ecca9d5ba808475ff1ab71d4c5", "message": "validate paths.  with FIXMES", "committedDate": "2020-06-09T23:32:51Z", "type": "commit"}, {"oid": "227519a128a8a66ffedc846575ba32c206bf8fc8", "url": "https://github.com/hapifhir/hapi-fhir/commit/227519a128a8a66ffedc846575ba32c206bf8fc8", "message": "validate searchparams", "committedDate": "2020-06-10T16:06:21Z", "type": "commit"}, {"oid": "5ccf21feb639c643ddf4540da219ffbab36798a9", "url": "https://github.com/hapifhir/hapi-fhir/commit/5ccf21feb639c643ddf4540da219ffbab36798a9", "message": "Merge remote-tracking branch 'remotes/origin/master' into empi-28-matchers", "committedDate": "2020-06-10T16:08:19Z", "type": "commit"}, {"oid": "f297036eeccdf56523e43218f7de8a8e64a1ef34", "url": "https://github.com/hapifhir/hapi-fhir/commit/f297036eeccdf56523e43218f7de8a8e64a1ef34", "message": "fix merge compile error", "committedDate": "2020-06-10T16:15:01Z", "type": "commit"}, {"oid": "b03b246cfc5216b641087fb56b09e197ac3fb812", "url": "https://github.com/hapifhir/hapi-fhir/commit/b03b246cfc5216b641087fb56b09e197ac3fb812", "message": "add soundex, validate no duplicate names", "committedDate": "2020-06-10T17:26:45Z", "type": "commit"}, {"oid": "4dbb5b9456306c115619d560b39187118d292546", "url": "https://github.com/hapifhir/hapi-fhir/commit/4dbb5b9456306c115619d560b39187118d292546", "message": "add normalize substring", "committedDate": "2020-06-10T19:21:11Z", "type": "commit"}, {"oid": "894a7e35daed288bd4e1d7c4d1f01beae5d9a8d4", "url": "https://github.com/hapifhir/hapi-fhir/commit/894a7e35daed288bd4e1d7c4d1f01beae5d9a8d4", "message": "add exact field to matcher", "committedDate": "2020-06-10T20:46:57Z", "type": "commit"}, {"oid": "f01daffbc7bc8881a98f43207572950461685418", "url": "https://github.com/hapifhir/hapi-fhir/commit/f01daffbc7bc8881a98f43207572950461685418", "message": "EXACT -> STRING, exact=true", "committedDate": "2020-06-10T21:07:51Z", "type": "commit"}, {"oid": "52c8bd711b693d1fb013fda16ead2dcbaca8947a", "url": "https://github.com/hapifhir/hapi-fhir/commit/52c8bd711b693d1fb013fda16ead2dcbaca8947a", "message": "cleanup test method", "committedDate": "2020-06-10T21:14:19Z", "type": "commit"}, {"oid": "13aafbc3d500543c623d35099abd76a839e88083", "url": "https://github.com/hapifhir/hapi-fhir/commit/13aafbc3d500543c623d35099abd76a839e88083", "message": "match test passes with fixmes", "committedDate": "2020-06-10T23:11:35Z", "type": "commit"}, {"oid": "9a8b6cd10d43412d7411e9ae3176c3fef29ddb2f", "url": "https://github.com/hapifhir/hapi-fhir/commit/9a8b6cd10d43412d7411e9ae3176c3fef29ddb2f", "message": "fixed vector matching", "committedDate": "2020-06-11T00:01:59Z", "type": "commit"}, {"oid": "b53243aeaaac02480a8b08b3769c410f2647331e", "url": "https://github.com/hapifhir/hapi-fhir/commit/b53243aeaaac02480a8b08b3769c410f2647331e", "message": "fixed vector matching", "committedDate": "2020-06-11T00:02:17Z", "type": "commit"}, {"oid": "acb7d35186046b40facbc35f6141de1fc3a5217c", "url": "https://github.com/hapifhir/hapi-fhir/commit/acb7d35186046b40facbc35f6141de1fc3a5217c", "message": "updating documentation and fixing tests", "committedDate": "2020-06-11T17:49:39Z", "type": "commit"}, {"oid": "daeb89c05f5cc791194a1a8a7740427338e67e26", "url": "https://github.com/hapifhir/hapi-fhir/commit/daeb89c05f5cc791194a1a8a7740427338e67e26", "message": "updated rules documentation with latest matchers", "committedDate": "2020-06-11T18:48:35Z", "type": "commit"}, {"oid": "3c2f706e4d75d848da0cf60d3a2327b77a83a05a", "url": "https://github.com/hapifhir/hapi-fhir/commit/3c2f706e4d75d848da0cf60d3a2327b77a83a05a", "message": "updated rules documentation with latest matchers", "committedDate": "2020-06-11T18:49:40Z", "type": "commit"}, {"oid": "1ac92ad735c206d068f3dd47b66bef912ac58c02", "url": "https://github.com/hapifhir/hapi-fhir/commit/1ac92ad735c206d068f3dd47b66bef912ac58c02", "message": "created eid page", "committedDate": "2020-06-11T19:03:16Z", "type": "commit"}, {"oid": "ce96b70930cba5cb8d39670b81ee5a34148144b8", "url": "https://github.com/hapifhir/hapi-fhir/commit/ce96b70930cba5cb8d39670b81ee5a34148144b8", "message": "eid documentation", "committedDate": "2020-06-11T21:17:54Z", "type": "commit"}, {"oid": "f82cbd5e0f36e3c388f313e824f4401015651d88", "url": "https://github.com/hapifhir/hapi-fhir/commit/f82cbd5e0f36e3c388f313e824f4401015651d88", "message": "Merge remote-tracking branch 'remotes/origin/master' into empi-28-matchers", "committedDate": "2020-06-11T21:29:38Z", "type": "commit"}, {"oid": "3c3642f82a843a453760d3e3d0cac9818f3563ea", "url": "https://github.com/hapifhir/hapi-fhir/commit/3c3642f82a843a453760d3e3d0cac9818f3563ea", "message": "pre-review cleanup", "committedDate": "2020-06-11T22:00:14Z", "type": "commit"}, {"oid": "5b219dc72110dfe88cc4bd8040a2b89f7531a750", "url": "https://github.com/hapifhir/hapi-fhir/commit/5b219dc72110dfe88cc4bd8040a2b89f7531a750", "message": "clean up beans", "committedDate": "2020-06-11T22:13:29Z", "type": "commit"}, {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e", "url": "https://github.com/hapifhir/hapi-fhir/commit/42f4af1de1547183743e8b3d66e00eef53d4a67e", "message": "disentangling beans", "committedDate": "2020-06-11T23:28:37Z", "type": "commit"}, {"oid": "c3e4c58dde41529f47cc391ec48fc8ed7f54762e", "url": "https://github.com/hapifhir/hapi-fhir/commit/c3e4c58dde41529f47cc391ec48fc8ed7f54762e", "message": "checkstyle", "committedDate": "2020-06-12T01:04:12Z", "type": "commit"}, {"oid": "7dfe289adb80e8baf38edab3f34d69d22df75a8a", "url": "https://github.com/hapifhir/hapi-fhir/commit/7dfe289adb80e8baf38edab3f34d69d22df75a8a", "message": "noop to trigger CI", "committedDate": "2020-06-12T02:05:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MTE0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439541144", "bodyText": "Can we constant * out to a constant called ALL_EMPI_RESOURCE_TYPES or something?", "author": "tadgh", "createdAt": "2020-06-12T17:06:31Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/config/EmpiRuleValidator.java", "diffHunk": "@@ -21,20 +21,141 @@\n  */\n \n import ca.uhn.fhir.context.ConfigurationException;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.rules.json.EmpiFieldMatchJson;\n+import ca.uhn.fhir.empi.rules.json.EmpiFilterSearchParamJson;\n+import ca.uhn.fhir.empi.rules.json.EmpiResourceSearchParamJson;\n import ca.uhn.fhir.empi.rules.json.EmpiRulesJson;\n+import ca.uhn.fhir.parser.DataFormatException;\n+import ca.uhn.fhir.rest.server.util.ISearchParamRetriever;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.util.HashSet;\n+import java.util.Set;\n \n @Service\n public class EmpiRuleValidator {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiRuleValidator.class);\n+\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final ISearchParamRetriever mySearchParamRetriever;\n+\tprivate final Class<? extends IBaseResource> myPatientClass;\n+\tprivate final Class<? extends IBaseResource> myPractitionerClass;\n+\tprivate final FhirTerser myTerser;\n+\n+\t@Autowired\n+\tpublic EmpiRuleValidator(FhirContext theFhirContext, ISearchParamRetriever theSearchParamRetriever) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyPatientClass = theFhirContext.getResourceDefinition(\"Patient\").getImplementingClass();\n+\t\tmyPractitionerClass = theFhirContext.getResourceDefinition(\"Practitioner\").getImplementingClass();\n+\t\tmyTerser = myFhirContext.newTerser();\n+\t\tmySearchParamRetriever = theSearchParamRetriever;\n+\t}\n \n \tpublic void validate(EmpiRulesJson theEmpiRulesJson) {\n+\t\tvalidateSearchParams(theEmpiRulesJson);\n+\t\tvalidateMatchFields(theEmpiRulesJson);\n \t\tvalidateSystemIsUri(theEmpiRulesJson);\n \t}\n \n+\tprivate void validateSearchParams(EmpiRulesJson theEmpiRulesJson) {\n+\t\tfor (EmpiResourceSearchParamJson searchParam : theEmpiRulesJson.getCandidateSearchParams()) {\n+\t\t\tvalidateSearchParam(\"candidateSearchParams\", searchParam.getResourceType(), searchParam.getSearchParam());\n+\t\t}\n+\t\tfor (EmpiFilterSearchParamJson filter : theEmpiRulesJson.getCandidateFilterSearchParams()) {\n+\t\t\tvalidateSearchParam(\"candidateFilterSearchParams\", filter.getResourceType(), filter.getSearchParam());\n+\t\t}\n+\t}\n+\n+\tprivate void validateSearchParam(String theFieldName, String theTheResourceType, String theTheSearchParam) {\n+\t\tif (\"*\".equals(theTheResourceType)) {", "originalCommit": "42f4af1de1547183743e8b3d66e00eef53d4a67e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1ODU5NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439758594", "bodyText": "thanks fixed", "author": "fil512", "createdAt": "2020-06-13T18:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MTE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MTQxNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439541415", "bodyText": "Nice, this is a good idea \ud83d\udc4d", "author": "tadgh", "createdAt": "2020-06-12T17:07:02Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/config/EmpiRuleValidator.java", "diffHunk": "@@ -21,20 +21,141 @@\n  */\n \n import ca.uhn.fhir.context.ConfigurationException;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.rules.json.EmpiFieldMatchJson;\n+import ca.uhn.fhir.empi.rules.json.EmpiFilterSearchParamJson;\n+import ca.uhn.fhir.empi.rules.json.EmpiResourceSearchParamJson;\n import ca.uhn.fhir.empi.rules.json.EmpiRulesJson;\n+import ca.uhn.fhir.parser.DataFormatException;\n+import ca.uhn.fhir.rest.server.util.ISearchParamRetriever;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.util.HashSet;\n+import java.util.Set;\n \n @Service\n public class EmpiRuleValidator {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiRuleValidator.class);\n+\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final ISearchParamRetriever mySearchParamRetriever;\n+\tprivate final Class<? extends IBaseResource> myPatientClass;\n+\tprivate final Class<? extends IBaseResource> myPractitionerClass;\n+\tprivate final FhirTerser myTerser;\n+\n+\t@Autowired\n+\tpublic EmpiRuleValidator(FhirContext theFhirContext, ISearchParamRetriever theSearchParamRetriever) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyPatientClass = theFhirContext.getResourceDefinition(\"Patient\").getImplementingClass();\n+\t\tmyPractitionerClass = theFhirContext.getResourceDefinition(\"Practitioner\").getImplementingClass();\n+\t\tmyTerser = myFhirContext.newTerser();\n+\t\tmySearchParamRetriever = theSearchParamRetriever;\n+\t}\n \n \tpublic void validate(EmpiRulesJson theEmpiRulesJson) {\n+\t\tvalidateSearchParams(theEmpiRulesJson);\n+\t\tvalidateMatchFields(theEmpiRulesJson);\n \t\tvalidateSystemIsUri(theEmpiRulesJson);\n \t}\n \n+\tprivate void validateSearchParams(EmpiRulesJson theEmpiRulesJson) {\n+\t\tfor (EmpiResourceSearchParamJson searchParam : theEmpiRulesJson.getCandidateSearchParams()) {\n+\t\t\tvalidateSearchParam(\"candidateSearchParams\", searchParam.getResourceType(), searchParam.getSearchParam());\n+\t\t}\n+\t\tfor (EmpiFilterSearchParamJson filter : theEmpiRulesJson.getCandidateFilterSearchParams()) {\n+\t\t\tvalidateSearchParam(\"candidateFilterSearchParams\", filter.getResourceType(), filter.getSearchParam());\n+\t\t}\n+\t}\n+\n+\tprivate void validateSearchParam(String theFieldName, String theTheResourceType, String theTheSearchParam) {\n+\t\tif (\"*\".equals(theTheResourceType)) {\n+\t\t\tvalidateResourceSearchParam(theFieldName, \"Patient\", theTheSearchParam);\n+\t\t\tvalidateResourceSearchParam(theFieldName, \"Practitioner\", theTheSearchParam);\n+\t\t} else {\n+\t\t\tvalidateResourceSearchParam(theFieldName, theTheResourceType, theTheSearchParam);\n+\t\t}\n+\t}\n+\n+\tprivate void validateResourceSearchParam(String theFieldName, String theResourceType, String theSearchParam) {\n+\t\tif (mySearchParamRetriever.getActiveSearchParam(theResourceType, theSearchParam) == null) {\n+\t\t\tthrow new ConfigurationException(\"Error in \" + theFieldName + \": \" + theResourceType + \" does not have a search parameter called '\" + theSearchParam + \"'\");\n+\t\t}\n+\t}\n+\n+\tprivate void validateMatchFields(EmpiRulesJson theEmpiRulesJson) {\n+\t\tSet<String> names = new HashSet<>();\n+\t\tfor (EmpiFieldMatchJson fieldMatch : theEmpiRulesJson.getMatchFields()) {\n+\t\t\tif (names.contains(fieldMatch.getName())) {\n+\t\t\t\tthrow new ConfigurationException(\"Two MatchFields have the same name '\" + fieldMatch.getName() + \"'\");\n+\t\t\t}\n+\t\t\tnames.add(fieldMatch.getName());\n+\t\t\tvalidateThreshold(fieldMatch);\n+\t\t\tvalidatePath(fieldMatch);\n+\t\t}\n+\t}\n+\n+\tprivate void validateThreshold(EmpiFieldMatchJson theFieldMatch) {\n+\t\tif (theFieldMatch.getMetric().isSimilarity()) {\n+\t\t\tif (theFieldMatch.getMatchThreshold() == null) {\n+\t\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" requires a matchThreshold\");\n+\t\t\t}\n+\t\t} else if (theFieldMatch.getMatchThreshold() != null) {\n+\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" should not have a matchThreshold\");\n+\t\t}\n+\t}\n+\n+\tprivate void validatePath(EmpiFieldMatchJson theFieldMatch) {\n+\t\tString resourceType = theFieldMatch.getResourceType();\n+\t\tif (\"*\".equals(resourceType)) {\n+\t\t\tvalidatePatientPath(theFieldMatch);\n+\t\t\tvalidatePractitionerPath(theFieldMatch);\n+\t\t} else if (\"Patient\".equals(resourceType)) {\n+\t\t\tvalidatePatientPath(theFieldMatch);\n+\t\t} else if (\"Practitioner\".equals(resourceType)) {\n+\t\t\tvalidatePractitionerPath(theFieldMatch);\n+\t\t} else {\n+\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" has unknown resourceType \" + resourceType);\n+\t\t}\n+\t}\n+\n+\tprivate void validatePatientPath(EmpiFieldMatchJson theFieldMatch) {\n+\t\ttry {\n+\t\t\tmyTerser.getDefinition(myPatientClass, \"Patient.\" + theFieldMatch.getResourcePath());\n+\t\t} catch (DataFormatException|ConfigurationException e) {\n+\t\t\tthrow new ConfigurationException(\"MatchField \" +\n+\t\t\t\ttheFieldMatch.getName() +\n+\t\t\t\t\" resourceType \" +\n+\t\t\t\ttheFieldMatch.getResourceType() +\n+\t\t\t\t\" has invalid path '\" + theFieldMatch.getResourcePath() + \"'.  \" +\n+\t\t\t\te.getMessage());\n+\t\t}\n+\t}\n+\n+\tprivate void validatePractitionerPath(EmpiFieldMatchJson theFieldMatch) {\n+\t\ttry {\n+\t\t\tmyTerser.getDefinition(myPractitionerClass, \"Practitioner.\" + theFieldMatch.getResourcePath());\n+\t\t} catch (DataFormatException e) {\n+\t\t\tthrow new ConfigurationException(\"MatchField \" +\n+\t\t\t\ttheFieldMatch.getName() +\n+\t\t\t\t\" resourceType \" +\n+\t\t\t\ttheFieldMatch.getResourceType() +\n+\t\t\t\t\" has invalid path '\" + theFieldMatch.getResourcePath() + \"'.  \" +\n+\t\t\t\te.getMessage());\n+\t\t}\n+\t}\n+\n \tprivate void validateSystemIsUri(EmpiRulesJson theEmpiRulesJson) {\n+\t\tif (theEmpiRulesJson.getEnterpriseEIDSystem() == null) {\n+\t\t\treturn;\n+\t\t}\n+\n \t\ttry {\n \t\t\tnew URI(theEmpiRulesJson.getEnterpriseEIDSystem());\n \t\t} catch (URISyntaxException e) {", "originalCommit": "42f4af1de1547183743e8b3d66e00eef53d4a67e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjI4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439542289", "bodyText": "This will help in debugging", "author": "tadgh", "createdAt": "2020-06-12T17:09:01Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/json/EmpiRulesJson.java", "diffHunk": "@@ -142,6 +141,18 @@ public String getFieldMatchNamesForVector(long theVector) {\n \t\treturn myVectorMatchResultMap.getFieldMatchNames(theVector);\n \t}\n \n+\tpublic String getDetailedFieldMatchResultForUnmatchedVector(long theVector) {\n+\t\tList<String> fieldMatchResult = new ArrayList<>();\n+\t\tfor (int i = 0; i < myMatchFieldJsonList.size(); ++i) {\n+\t\t\tif ((theVector & (1 << i)) == 0) {\n+\t\t\t\tfieldMatchResult.add(myMatchFieldJsonList.get(i).getName() + \": NO\");\n+\t\t\t} else {\n+\t\t\t\tfieldMatchResult.add(myMatchFieldJsonList.get(i).getName() + \": YES\");\n+\t\t\t}\n+\t\t}\n+\t\treturn String.join(\"\\n\" ,fieldMatchResult);\n+\t}", "originalCommit": "42f4af1de1547183743e8b3d66e00eef53d4a67e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwMTIzNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439601237", "bodyText": "I needed it when I was trying to understand why my patients didn't match.  I could imagine customers down the road wanting an api to this.", "author": "fil512", "createdAt": "2020-06-12T19:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NDA5NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439544094", "bodyText": "nitpick: I usually do Log formatting with {} instead of string concatenation", "author": "tadgh", "createdAt": "2020-06-12T17:12:49Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/metric/matcher/StringEncoderMatcher.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package ca.uhn.fhir.empi.rules.metric.matcher;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class StringEncoderMatcher implements IEmpiStringMatcher {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(StringEncoderMatcher.class);\n+\n+\tprivate final StringEncoder myStringEncoder;\n+\n+\tpublic StringEncoderMatcher(StringEncoder theStringEncoder) {\n+\t\tmyStringEncoder = theStringEncoder;\n+\t}\n+\n+\t@Override\n+\tpublic boolean matches(String theLeftString, String theRightString) {\n+\t\ttry {\n+\t\t\treturn myStringEncoder.encode(theLeftString).equals(myStringEncoder.encode(theRightString));\n+\t\t} catch (EncoderException e) {\n+\t\t\tourLog.error(\"Failed to match strings '\" + theLeftString + \"' and '\" + theRightString + \"' using encoder \" + myStringEncoder.getClass().getName(), e);", "originalCommit": "42f4af1de1547183743e8b3d66e00eef53d4a67e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1NzI1Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439757257", "bodyText": "done.  was a conversion from exception constructor which sadly doesn't support placeholders", "author": "fil512", "createdAt": "2020-06-13T18:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NDA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTAyMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439545023", "bodyText": "BaseR4MatcherTest may be a better name", "author": "tadgh", "createdAt": "2020-06-12T17:14:48Z", "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/rules/metric/matcher/BaseMatcherTest.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package ca.uhn.fhir.empi.rules.metric.matcher;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+\n+public abstract class BaseMatcherTest {", "originalCommit": "42f4af1de1547183743e8b3d66e00eef53d4a67e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1NzI5Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439757292", "bodyText": "done", "author": "fil512", "createdAt": "2020-06-13T18:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTI1Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439545253", "bodyText": "so cool", "author": "tadgh", "createdAt": "2020-06-12T17:15:17Z", "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/rules/metric/matcher/StringMatcherTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package ca.uhn.fhir.empi.rules.metric.matcher;\n+\n+import ca.uhn.fhir.empi.rules.metric.EmpiMetricEnum;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.Enumeration;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class StringMatcherTest extends BaseMatcherTest {\n+\t@Test\n+\tpublic void testMetaphone() {\n+\t\tassertTrue(match(EmpiMetricEnum.METAPHONE, new StringType(\"Durie\"), new StringType(\"dury\")));\n+\t\tassertTrue(match(EmpiMetricEnum.METAPHONE, new StringType(\"Balo\"), new StringType(\"ballo\")));\n+\t\tassertTrue(match(EmpiMetricEnum.METAPHONE, new StringType(\"Hans Peter\"), new StringType(\"Hanspeter\")));\n+\t\tassertTrue(match(EmpiMetricEnum.METAPHONE, new StringType(\"Lawson\"), new StringType(\"Law son\")));\n+\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Allsop\"), new StringType(\"Allsob\")));\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Gevne\"), new StringType(\"Geve\")));\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Bruce\"), new StringType(\"Bruch\")));\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Smith\"), new StringType(\"Schmidt\")));\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Jyothi\"), new StringType(\"Jyoti\")));", "originalCommit": "42f4af1de1547183743e8b3d66e00eef53d4a67e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e026d156a3f0d5e188529250da815e68616062ee", "url": "https://github.com/hapifhir/hapi-fhir/commit/e026d156a3f0d5e188529250da815e68616062ee", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>", "committedDate": "2020-06-12T18:55:39Z", "type": "commit"}, {"oid": "95c3f0dbe1f77ca7ee8dd32e95ba3b1fa877fc80", "url": "https://github.com/hapifhir/hapi-fhir/commit/95c3f0dbe1f77ca7ee8dd32e95ba3b1fa877fc80", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>", "committedDate": "2020-06-12T18:58:43Z", "type": "commit"}, {"oid": "679326bb62b82da740e0454cf628ca656159be67", "url": "https://github.com/hapifhir/hapi-fhir/commit/679326bb62b82da740e0454cf628ca656159be67", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>", "committedDate": "2020-06-12T18:59:15Z", "type": "commit"}, {"oid": "30e270cc1f28db6576db5be693c13b5a6057076b", "url": "https://github.com/hapifhir/hapi-fhir/commit/30e270cc1f28db6576db5be693c13b5a6057076b", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>", "committedDate": "2020-06-12T19:00:14Z", "type": "commit"}, {"oid": "8e19c76df9f9b31321f994edbbf35c7abfe97ff0", "url": "https://github.com/hapifhir/hapi-fhir/commit/8e19c76df9f9b31321f994edbbf35c7abfe97ff0", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>", "committedDate": "2020-06-12T19:00:56Z", "type": "commit"}, {"oid": "9851968a6bf73c2db7a6732eba28bf5e701c3244", "url": "https://github.com/hapifhir/hapi-fhir/commit/9851968a6bf73c2db7a6732eba28bf5e701c3244", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>", "committedDate": "2020-06-12T19:03:25Z", "type": "commit"}, {"oid": "b954ee3451e5de95ca1408ee01e5c0089363694d", "url": "https://github.com/hapifhir/hapi-fhir/commit/b954ee3451e5de95ca1408ee01e5c0089363694d", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>", "committedDate": "2020-06-12T19:03:54Z", "type": "commit"}, {"oid": "a282e74023aff8a10ecc652a15b9ef76b42b5892", "url": "https://github.com/hapifhir/hapi-fhir/commit/a282e74023aff8a10ecc652a15b9ef76b42b5892", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>", "committedDate": "2020-06-12T19:17:20Z", "type": "commit"}, {"oid": "73081eb554021114a3ab124ef8213866f3648d52", "url": "https://github.com/hapifhir/hapi-fhir/commit/73081eb554021114a3ab124ef8213866f3648d52", "message": "Merge remote-tracking branch 'remotes/origin/master' into empi-28-matchers", "committedDate": "2020-06-13T00:53:46Z", "type": "commit"}, {"oid": "2d6eaaab24310f9a220af586d9047611fddb640e", "url": "https://github.com/hapifhir/hapi-fhir/commit/2d6eaaab24310f9a220af586d9047611fddb640e", "message": "review feedback", "committedDate": "2020-06-13T18:02:18Z", "type": "commit"}, {"oid": "dc7be2e93797e19922168b671542cd79946b1cdc", "url": "https://github.com/hapifhir/hapi-fhir/commit/dc7be2e93797e19922168b671542cd79946b1cdc", "message": "review feedback", "committedDate": "2020-06-13T18:03:35Z", "type": "commit"}, {"oid": "99315d4577d3eb5c65f26bd7d5c20deeaff30aad", "url": "https://github.com/hapifhir/hapi-fhir/commit/99315d4577d3eb5c65f26bd7d5c20deeaff30aad", "message": "review feedback", "committedDate": "2020-06-13T18:06:11Z", "type": "commit"}, {"oid": "149574c0d497bd00b20093a9e743a2226af5aae2", "url": "https://github.com/hapifhir/hapi-fhir/commit/149574c0d497bd00b20093a9e743a2226af5aae2", "message": "review feedback", "committedDate": "2020-06-13T18:19:07Z", "type": "commit"}, {"oid": "957c5f9f1e3c162415640d54bdced32856393225", "url": "https://github.com/hapifhir/hapi-fhir/commit/957c5f9f1e3c162415640d54bdced32856393225", "message": "review feedback", "committedDate": "2020-06-13T18:22:33Z", "type": "commit"}, {"oid": "4f7d131b14587c51c525aea55af6d19f5ab7c2cf", "url": "https://github.com/hapifhir/hapi-fhir/commit/4f7d131b14587c51c525aea55af6d19f5ab7c2cf", "message": "Merge remote-tracking branch 'remotes/origin/master' into empi-28-matchers", "committedDate": "2020-06-14T19:36:51Z", "type": "commit"}]}