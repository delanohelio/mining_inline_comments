{"pr_number": 1984, "pr_title": "Batch empi job", "pr_createdAt": "2020-07-15T22:25:01Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1984", "timeline": [{"oid": "1b7e5b75f1fa751e7242d581e5de9dbeb034027e", "url": "https://github.com/hapifhir/hapi-fhir/commit/1b7e5b75f1fa751e7242d581e5de9dbeb034027e", "message": "wip", "committedDate": "2020-06-30T21:53:54Z", "type": "commit"}, {"oid": "19f3b7b1213d763bdb82a22021a3d17dfbb5a7b1", "url": "https://github.com/hapifhir/hapi-fhir/commit/19f3b7b1213d763bdb82a22021a3d17dfbb5a7b1", "message": "Merge branch 'master' into batch-empi-job", "committedDate": "2020-07-03T17:34:45Z", "type": "commit"}, {"oid": "6259eada3c92d0975fb60449b47e4b63dfead021", "url": "https://github.com/hapifhir/hapi-fhir/commit/6259eada3c92d0975fb60449b47e4b63dfead021", "message": "Fix parameter names. These are not partitions", "committedDate": "2020-07-03T20:18:48Z", "type": "commit"}, {"oid": "25d8668f55cf15b0347e94b7178a61740dea7098", "url": "https://github.com/hapifhir/hapi-fhir/commit/25d8668f55cf15b0347e94b7178a61740dea7098", "message": "Add Basic provider method, skeleton of tests", "committedDate": "2020-07-03T22:21:32Z", "type": "commit"}, {"oid": "db127ab32ffa28896a4e9557da7288f05c40d57e", "url": "https://github.com/hapifhir/hapi-fhir/commit/db127ab32ffa28896a4e9557da7288f05c40d57e", "message": "tidy test file", "committedDate": "2020-07-06T18:01:53Z", "type": "commit"}, {"oid": "f82a53e6f93cd0646a0197db95f080c2ebabdfdf", "url": "https://github.com/hapifhir/hapi-fhir/commit/f82a53e6f93cd0646a0197db95f080c2ebabdfdf", "message": "Merge branch 'master' into batch-empi-job", "committedDate": "2020-07-06T20:12:20Z", "type": "commit"}, {"oid": "b7e5705f5764883c0d487589a57f49f9fff5c8b4", "url": "https://github.com/hapifhir/hapi-fhir/commit/b7e5705f5764883c0d487589a57f49f9fff5c8b4", "message": "Fix tests to cover other scenarios", "committedDate": "2020-07-06T21:57:28Z", "type": "commit"}, {"oid": "5b402de581ad90ba49bc27cf39b27e30ca791e61", "url": "https://github.com/hapifhir/hapi-fhir/commit/5b402de581ad90ba49bc27cf39b27e30ca791e61", "message": "Add EmpiTargetType to link", "committedDate": "2020-07-07T14:51:41Z", "type": "commit"}, {"oid": "86f276158090d000683fa3572f95738cf7aff6cb", "url": "https://github.com/hapifhir/hapi-fhir/commit/86f276158090d000683fa3572f95738cf7aff6cb", "message": "Merge branch 'master' into batch-empi-job", "committedDate": "2020-07-07T14:52:42Z", "type": "commit"}, {"oid": "57f5c10bcaab62ea311a3d81b499397da1131c15", "url": "https://github.com/hapifhir/hapi-fhir/commit/57f5c10bcaab62ea311a3d81b499397da1131c15", "message": "Add migration for MPI Score/TargetType", "committedDate": "2020-07-07T14:56:43Z", "type": "commit"}, {"oid": "5a7e1de367e094c5220566b44230e3941e523a38", "url": "https://github.com/hapifhir/hapi-fhir/commit/5a7e1de367e094c5220566b44230e3941e523a38", "message": "Flesh out tests", "committedDate": "2020-07-07T17:15:38Z", "type": "commit"}, {"oid": "c3b89b4ad5a816399c494aad420294c9d10e7198", "url": "https://github.com/hapifhir/hapi-fhir/commit/c3b89b4ad5a816399c494aad420294c9d10e7198", "message": "Get basic tests running", "committedDate": "2020-07-09T22:56:41Z", "type": "commit"}, {"oid": "677bc5577bbb85fc308ec682082718a3afc689de", "url": "https://github.com/hapifhir/hapi-fhir/commit/677bc5577bbb85fc308ec682082718a3afc689de", "message": "wip", "committedDate": "2020-07-13T19:00:19Z", "type": "commit"}, {"oid": "9d7df0cdda3bb8b0e38462455ded9ddbadc8aab6", "url": "https://github.com/hapifhir/hapi-fhir/commit/9d7df0cdda3bb8b0e38462455ded9ddbadc8aab6", "message": "wip", "committedDate": "2020-07-14T21:49:16Z", "type": "commit"}, {"oid": "80b59599fcb547abb31a118e62797cbf0854789a", "url": "https://github.com/hapifhir/hapi-fhir/commit/80b59599fcb547abb31a118e62797cbf0854789a", "message": "wip", "committedDate": "2020-07-15T19:27:49Z", "type": "commit"}, {"oid": "f965b26f0d2f31f0c3e278930c7753610e2c0a11", "url": "https://github.com/hapifhir/hapi-fhir/commit/f965b26f0d2f31f0c3e278930c7753610e2c0a11", "message": "add more tests for criteria conversion", "committedDate": "2020-07-15T21:03:27Z", "type": "commit"}, {"oid": "acd881ca76d3883853977b1dc4493b06e3e8c8d7", "url": "https://github.com/hapifhir/hapi-fhir/commit/acd881ca76d3883853977b1dc4493b06e3e8c8d7", "message": "Adds queue submitter class, for simplicity of manual triggers of Empi Runs", "committedDate": "2020-07-15T22:20:26Z", "type": "commit"}, {"oid": "31e9f140ad68cd3f5334f532c768dafb46c991b3", "url": "https://github.com/hapifhir/hapi-fhir/commit/31e9f140ad68cd3f5334f532c768dafb46c991b3", "message": "Fix operation name. Remove unnecessary beans", "committedDate": "2020-07-16T16:48:58Z", "type": "commit"}, {"oid": "6bb92717f52a6c04a29893f5999865c30af6501c", "url": "https://github.com/hapifhir/hapi-fhir/commit/6bb92717f52a6c04a29893f5999865c30af6501c", "message": "Merge branch 'master' into batch-empi-job", "committedDate": "2020-07-16T18:00:32Z", "type": "commit"}, {"oid": "92461b63466def1b1671f215a6167321811f035e", "url": "https://github.com/hapifhir/hapi-fhir/commit/92461b63466def1b1671f215a6167321811f035e", "message": "wip", "committedDate": "2020-07-17T16:00:15Z", "type": "commit"}, {"oid": "1e12c740f64c4baa1dd069000182e74910bd45bd", "url": "https://github.com/hapifhir/hapi-fhir/commit/1e12c740f64c4baa1dd069000182e74910bd45bd", "message": "Merge branch 'master' into batch-empi-job", "committedDate": "2020-07-17T16:28:10Z", "type": "commit"}, {"oid": "aebdef1e3fbc79ecf490c115b5430bce70007e6a", "url": "https://github.com/hapifhir/hapi-fhir/commit/aebdef1e3fbc79ecf490c115b5430bce70007e6a", "message": "Fix import issues", "committedDate": "2020-07-17T16:36:08Z", "type": "commit"}, {"oid": "e540e4b0a2a82e0e1a320bb02d22ff5df51c8e71", "url": "https://github.com/hapifhir/hapi-fhir/commit/e540e4b0a2a82e0e1a320bb02d22ff5df51c8e71", "message": "Minor addition to PointcutLatch to support an inline runnable", "committedDate": "2020-07-17T19:06:19Z", "type": "commit"}, {"oid": "fec50686ec4cb535096e887677bf8193adcd2001", "url": "https://github.com/hapifhir/hapi-fhir/commit/fec50686ec4cb535096e887677bf8193adcd2001", "message": "Forgot to unregister interceptor", "committedDate": "2020-07-17T20:18:27Z", "type": "commit"}, {"oid": "4fa4dd1c48aef67c027f1ff5ca24f79bc4f25a96", "url": "https://github.com/hapifhir/hapi-fhir/commit/4fa4dd1c48aef67c027f1ff5ca24f79bc4f25a96", "message": "Update Javadocs", "committedDate": "2020-07-17T20:39:39Z", "type": "commit"}, {"oid": "62b5221c3f7a12be62da97e881d2b3ee7faa46aa", "url": "https://github.com/hapifhir/hapi-fhir/commit/62b5221c3f7a12be62da97e881d2b3ee7faa46aa", "message": "Move Empi Batch work to the BaseHapiResourceProvider, allowing manual EMPI runs on a server/type/ID basis.", "committedDate": "2020-07-18T20:36:14Z", "type": "commit"}, {"oid": "b79ed2167213de0cf5fb04d581bf73d43f56c3ac", "url": "https://github.com/hapifhir/hapi-fhir/commit/b79ed2167213de0cf5fb04d581bf73d43f56c3ac", "message": "Add forgotten bean", "committedDate": "2020-07-18T20:36:31Z", "type": "commit"}, {"oid": "de9621602b315671a3f9eba16cef3fdca827ed12", "url": "https://github.com/hapifhir/hapi-fhir/commit/de9621602b315671a3f9eba16cef3fdca827ed12", "message": "Update provider and create test skeletons for empi batch run", "committedDate": "2020-07-19T01:18:21Z", "type": "commit"}, {"oid": "e82451533fd00686d035ae60f835efe52b4bfce3", "url": "https://github.com/hapifhir/hapi-fhir/commit/e82451533fd00686d035ae60f835efe52b4bfce3", "message": "Move provider logic. Fix tests to reflect. Remove now-dead methods", "committedDate": "2020-07-21T14:52:51Z", "type": "commit"}, {"oid": "4ec2be4ff59e9409b365222af2726a0f8f2d18cf", "url": "https://github.com/hapifhir/hapi-fhir/commit/4ec2be4ff59e9409b365222af2726a0f8f2d18cf", "message": "Merge branch 'master' into batch-empi-job", "committedDate": "2020-07-21T14:54:18Z", "type": "commit"}, {"oid": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "url": "https://github.com/hapifhir/hapi-fhir/commit/249f5e5947e3b5486e9644bc88a07edb8f3cb787", "message": "Add two new tests. Fix non-jupiter-tests", "committedDate": "2020-07-21T15:51:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3NjY1MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458876650", "bodyText": "Smart.  I wonder if, in anticipation of MPI for arbitrary resource types, should we make this a string?  I suggest String length 40 (like ResourceTable.myResourceType)", "author": "fil512", "createdAt": "2020-07-22T15:23:57Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -111,6 +111,9 @@ public EmpiLink(String theVersion) {\n \t\tmyVersion = theVersion;\n \t}\n \n+\t@Column(name = \"TARGET_TYPE\", nullable = true)\n+\tprivate EmpiTargetType myEmpiTargetType;", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzMTg0OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458931849", "bodyText": "\ud83c\udd97", "author": "tadgh", "createdAt": "2020-07-22T16:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3NjY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3Nzc0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458877741", "bodyText": "Woah.  Nice!", "author": "fil512", "createdAt": "2020-07-22T15:25:24Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -106,6 +107,9 @@ private EmpiTransactionContext createEmpiContext(ResourceModifiedMessage theMsg)\n \t\t\tcase UPDATE:\n \t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE;\n \t\t\t\tbreak;\n+\t\t\tcase MANUALLY_TRIGGERED:\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.BATCH;", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3OTQ2OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458879469", "bodyText": "I have mixed feelings about calling this an ExpungeSvc.  Technically it's accurate, but I'm worried future devs might assume it has something to do with the FHIR expunge operation.\nIEmpiResetSvc?", "author": "fil512", "createdAt": "2020-07-22T15:27:48Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiConsumerConfig.java", "diffHunk": "@@ -159,6 +175,11 @@ IEmpiLinkQuerySvc empiLinkQuerySvc() {\n \t\treturn new EmpiLinkQuerySvcImpl();\n \t}\n \n+\t@Bean\n+\tIEmpiExpungeSvc empiExpungeSvc() {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzMzgzMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458933832", "bodyText": "\ud83d\udc4c", "author": "tadgh", "createdAt": "2020-07-22T16:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3OTQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4Mzc2NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458883764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Given a Target Pid, and a match result, return all links which match these criteria.\n          \n          \n            \n            \t * Given a Target Pid, and a match result, return all links that match these criteria.", "author": "fil512", "createdAt": "2020-07-22T15:33:34Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -103,6 +114,14 @@ public EmpiLink getOrCreateEmpiLinkByPersonPidAndTargetPid(Long thePersonPid, Lo\n \t\treturn myEmpiLinkDao.findOne(example);\n \t}\n \n+\t/**\n+\t * Given a Target Pid, and a match result, return all links which match these criteria.", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4OTI2NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458889264", "bodyText": "for numbers that can get big, long is safer than int.", "author": "fil512", "createdAt": "2020-07-22T15:41:08Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNDkyNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458934926", "bodyText": "Good call", "author": "tadgh", "createdAt": "2020-07-22T16:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4OTI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5MTg2MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458891861", "bodyText": "as above, recommend long over int", "author": "fil512", "createdAt": "2020-07-22T15:44:51Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5Mzk0NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458893945", "bodyText": "What function does this if clause play?  It looks wrong to me.  Can we just remove this if and always execute the block?", "author": "fil512", "createdAt": "2020-07-22T15:47:48Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NzgwNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458947806", "bodyText": "Essentially, this ensures that we only reach out to the DB and load actual resources in 100 at a time, as opposed to ONE at a time. It is in effect saying, if we have iterated over 100 pids, or there are no pids remaining, submit the pids to be converted to IBaseResources, and subsequently submitted to EMPI.", "author": "tadgh", "createdAt": "2020-07-22T17:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5Mzk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NTI4Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458895282", "bodyText": "Not clear what's \"manual\" about this...", "author": "fil512", "createdAt": "2020-07-22T15:49:42Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n+\t\t//TODO GGG ask ken how this works. specifically includePids?\n+\t\ttheMySearchBuilder.loadResourcesByPid(thePidsToSubmit, thePidsToSubmit, theResourceToBeSubmitted, false, null);\n+\t\ttheResourceToBeSubmitted\n+\t\t\t.forEach(resource -> myEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(resource));", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNTQ2Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458935467", "bodyText": "I suppose when I say manual, I mean a submission that occurs outside of the general interceptor-based framework, which is automatic EMPI processing. Do you have a recommendation for a better word here?", "author": "tadgh", "createdAt": "2020-07-22T16:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NTI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMTc3Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458901777", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n          \n          \n            \n            \tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theSearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourcesToBeSubmitted) {", "author": "fil512", "createdAt": "2020-07-22T15:58:47Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNTc5MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458935791", "bodyText": "Good catch!", "author": "tadgh", "createdAt": "2020-07-22T16:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMTc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMzUxOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458903518", "bodyText": "Should be able to drop theTargetType here.  IIdType should include the resource type", "author": "fil512", "createdAt": "2020-07-22T16:01:17Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n+\t\t//TODO GGG ask ken how this works. specifically includePids?\n+\t\ttheMySearchBuilder.loadResourcesByPid(thePidsToSubmit, thePidsToSubmit, theResourceToBeSubmitted, false, null);\n+\t\ttheResourceToBeSubmitted\n+\t\t\t.forEach(resource -> myEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(resource));\n+\t\ttheTotal += theResourceToBeSubmitted.size();\n+\t\treturn theTotal;\n+\t}\n+\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPractitionerType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Practitioner\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPatientType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Patient\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTarget(IIdType theId, String theTargetType) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNjA3NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458936074", "bodyText": "Right you are. I was blind, but now I see", "author": "tadgh", "createdAt": "2020-07-22T16:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMzUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNDE4Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458904183", "bodyText": "maybe move this logic right into myEmpiSearchParamSvc.mapFromCriteria  and remove this method?", "author": "fil512", "createdAt": "2020-07-22T16:02:23Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n+\t\t//TODO GGG ask ken how this works. specifically includePids?\n+\t\ttheMySearchBuilder.loadResourcesByPid(thePidsToSubmit, thePidsToSubmit, theResourceToBeSubmitted, false, null);\n+\t\ttheResourceToBeSubmitted\n+\t\t\t.forEach(resource -> myEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(resource));\n+\t\ttheTotal += theResourceToBeSubmitted.size();\n+\t\treturn theTotal;\n+\t}\n+\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPractitionerType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Practitioner\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPatientType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Patient\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTarget(IIdType theId, String theTargetType) {\n+\t\tIFhirResourceDao resourceDao = myDaoRegistry.getResourceDao(theTargetType);\n+\t\tIBaseResource read = resourceDao.read(theId);\n+\t\tmyEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(read);\n+\t\treturn 1;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetPractitioner(IIdType theId) {\n+\t\treturn runEmpiOnTarget(theId, \"Practitioner\");\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetPatient(IIdType theId) {\n+\t\treturn runEmpiOnTarget(theId, \"Patient\");\n+\t}\n+\n+\tprivate SearchParameterMap getSearchParameterMapFromCriteria(String theTargetType, String theCriteria) {\n+\t\tSearchParameterMap spMap;\n+\t\tif (!StringUtils.isBlank(theCriteria)) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NjkxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458946910", "bodyText": "Done, but doing this has exposed some ugliness in that class. Left a note in the class docs", "author": "tadgh", "createdAt": "2020-07-22T17:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNDE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTAyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458905021", "bodyText": "use EmpiUtil.supportedTargetType()", "author": "fil512", "createdAt": "2020-07-22T16:03:41Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.dao.SearchBuilderFactory;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchService {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiQueueSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\t@Autowired\n+\tprivate SearchBuilderFactory mySearchBuilderFactory;\n+\n+\tprivate static final int QUEUE_ADDING_PAGE_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tint submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(QUEUE_ADDING_PAGE_SIZE);\n+\t\tint total = 0;\n+\t\tISearchBuilder mySearchBuilder = mySearchBuilderFactory.newSearchBuilder(myDaoRegistry.getResourceDao(theTargetType), theTargetType, Patient.class);\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\ttry (IResultIterator query = mySearchBuilder.createQuery(spMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\n+\t\t\tCollection<ResourcePersistentId> pidsToSubmit = new ArrayList<>();\n+\t\t\tList<IBaseResource> resourceToBeSubmitted = new ArrayList<>();\n+\n+\t\t\twhile (query.hasNext()) {\n+\t\t\t\tpidsToSubmit.add(query.next());\n+\t\t\t\tif (pidsToSubmit.size() == QUEUE_ADDING_PAGE_SIZE || !query.hasNext()) {\n+\t\t\t\t\ttotal = loadResourcesAndSubmitToEmpi(total, mySearchBuilder, pidsToSubmit, resourceToBeSubmitted);\n+\t\t\t\t\tresourceToBeSubmitted.clear();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\tprivate int loadResourcesAndSubmitToEmpi(int theTotal, ISearchBuilder theMySearchBuilder, Collection<ResourcePersistentId> thePidsToSubmit, List<IBaseResource> theResourceToBeSubmitted) {\n+\t\t//TODO GGG ask ken how this works. specifically includePids?\n+\t\ttheMySearchBuilder.loadResourcesByPid(thePidsToSubmit, thePidsToSubmit, theResourceToBeSubmitted, false, null);\n+\t\ttheResourceToBeSubmitted\n+\t\t\t.forEach(resource -> myEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(resource));\n+\t\ttheTotal += theResourceToBeSubmitted.size();\n+\t\treturn theTotal;\n+\t}\n+\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPractitionerType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Practitioner\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnPatientType(String theCriteria) {\n+\t\treturn runEmpiOnTargetType(\"Patient\", theCriteria);\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTarget(IIdType theId, String theTargetType) {\n+\t\tIFhirResourceDao resourceDao = myDaoRegistry.getResourceDao(theTargetType);\n+\t\tIBaseResource read = resourceDao.read(theId);\n+\t\tmyEmpiQueueSubmitterSvc.manuallySubmitResourceToEmpi(read);\n+\t\treturn 1;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetPractitioner(IIdType theId) {\n+\t\treturn runEmpiOnTarget(theId, \"Practitioner\");\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic int runEmpiOnTargetPatient(IIdType theId) {\n+\t\treturn runEmpiOnTarget(theId, \"Patient\");\n+\t}\n+\n+\tprivate SearchParameterMap getSearchParameterMapFromCriteria(String theTargetType, String theCriteria) {\n+\t\tSearchParameterMap spMap;\n+\t\tif (!StringUtils.isBlank(theCriteria)) {\n+\t\t\tspMap = myEmpiSearchParamSvc.mapFromCriteria(theTargetType, theCriteria);\n+\t\t} else {\n+\t\t\tspMap = new SearchParameterMap();\n+\t\t}\n+\t\treturn spMap;\n+\t}\n+\n+\tprivate void resolveTargetTypeOrThrowException(String theResourceType) {\n+\t\tif (!theResourceType.equalsIgnoreCase(\"Patient\") && !theResourceType.equalsIgnoreCase(\"Practitioner\")) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYzMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458905633", "bodyText": "I like this method name :-)", "author": "fil512", "createdAt": "2020-07-22T16:04:37Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiExpungeSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiExpungeSvc;\n+import ca.uhn.fhir.jpa.dao.expunge.IResourceExpungeService;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.jpa.entity.EmpiTargetType;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.\n+ *\n+ */\n+public class EmpiExpungeSvcImpl implements IEmpiExpungeSvc {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiExpungeSvcImpl.class);\n+\n+\t@Autowired\n+\tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n+\n+\t@Autowired\n+\tprivate IResourceExpungeService myResourceExpungeService;\n+\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks(String theResourceType) {\n+\t\tEmpiTargetType targetType = getTargetTypeOrThrowException(theResourceType);\n+\t\tList<Long> longs = myEmpiLinkDaoSvc.deleteAllEmpiLinksOfTypeAndReturnPersonPids(targetType);", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MzAxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458943010", "bodyText": "\ud83d\ude80", "author": "tadgh", "createdAt": "2020-07-22T16:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNTYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwOTA4NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458909084", "bodyText": "expungeAllEmpiLinks() ?", "author": "fil512", "createdAt": "2020-07-22T16:09:37Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiExpungeSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiExpungeSvc;\n+import ca.uhn.fhir.jpa.dao.expunge.IResourceExpungeService;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.jpa.entity.EmpiTargetType;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.\n+ *\n+ */\n+public class EmpiExpungeSvcImpl implements IEmpiExpungeSvc {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiExpungeSvcImpl.class);\n+\n+\t@Autowired\n+\tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n+\n+\t@Autowired\n+\tprivate IResourceExpungeService myResourceExpungeService;\n+\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks(String theResourceType) {\n+\t\tEmpiTargetType targetType = getTargetTypeOrThrowException(theResourceType);\n+\t\tList<Long> longs = myEmpiLinkDaoSvc.deleteAllEmpiLinksOfTypeAndReturnPersonPids(targetType);\n+\t\tmyResourceExpungeService.expungeCurrentVersionOfResources(null, longs, new AtomicInteger(longs.size()));\n+\t}\n+\n+\tprivate EmpiTargetType getTargetTypeOrThrowException(String theResourceType) {\n+\t\tif (theResourceType.equalsIgnoreCase(\"Patient\")) {\n+\t\t\treturn EmpiTargetType.PATIENT;\n+\t\t} else if(theResourceType.equalsIgnoreCase(\"Practitioner\")) {\n+\t\t\treturn EmpiTargetType.PRACTITIONER;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(ProviderConstants.EMPI_CLEAR + \" does not support resource type: \" + theResourceType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks() {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMDI3OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458910279", "bodyText": "This might not scale when we move to other resource types, but for Person it's totally fine.", "author": "fil512", "createdAt": "2020-07-22T16:11:20Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiExpungeSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiExpungeSvc;\n+import ca.uhn.fhir.jpa.dao.expunge.IResourceExpungeService;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.jpa.entity.EmpiTargetType;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.\n+ *\n+ */\n+public class EmpiExpungeSvcImpl implements IEmpiExpungeSvc {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiExpungeSvcImpl.class);\n+\n+\t@Autowired\n+\tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n+\n+\t@Autowired\n+\tprivate IResourceExpungeService myResourceExpungeService;\n+\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks(String theResourceType) {\n+\t\tEmpiTargetType targetType = getTargetTypeOrThrowException(theResourceType);\n+\t\tList<Long> longs = myEmpiLinkDaoSvc.deleteAllEmpiLinksOfTypeAndReturnPersonPids(targetType);\n+\t\tmyResourceExpungeService.expungeCurrentVersionOfResources(null, longs, new AtomicInteger(longs.size()));\n+\t}\n+\n+\tprivate EmpiTargetType getTargetTypeOrThrowException(String theResourceType) {\n+\t\tif (theResourceType.equalsIgnoreCase(\"Patient\")) {\n+\t\t\treturn EmpiTargetType.PATIENT;\n+\t\t} else if(theResourceType.equalsIgnoreCase(\"Practitioner\")) {\n+\t\t\treturn EmpiTargetType.PRACTITIONER;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(ProviderConstants.EMPI_CLEAR + \" does not support resource type: \" + theResourceType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void expungeEmpiLinks() {\n+\t\tList<Long> longs = myEmpiLinkDaoSvc.deleteAllEmpiLinksAndReturnPersonPids();", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NjE5Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458946197", "bodyText": "good point, might be worthwhile attempting to slice this operation as well. Adding a TODO", "author": "tadgh", "createdAt": "2020-07-22T17:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMDI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMjE1Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458912153", "bodyText": "Nice reuse of MANUALLY_TRIGGERED.", "author": "fil512", "createdAt": "2020-07-22T16:14:03Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiQueueSubmitterSvcImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelProducerSettings;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.IChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n+\n+import javax.annotation.PostConstruct;\n+\n+import static ca.uhn.fhir.empi.api.IEmpiSettings.EMPI_CHANNEL_NAME;\n+\n+/**\n+ * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.\n+ */\n+public class EmpiQueueSubmitterSvcImpl implements IEmpiQueueSubmitterSvc {\n+\t@Autowired\n+\tprivate IChannelNamer myChannelNamer;\n+\n+\tprivate MessageChannel myEmpiChannelProducer;\n+\n+\t@Autowired\n+\tprivate FhirContext myFhirContext;\n+\n+\t@Autowired\n+\tprivate IChannelFactory myChannelFactory;\n+\n+\t@Override\n+\tpublic void manuallySubmitResourceToEmpi(IBaseResource theResource) {\n+\t\tResourceModifiedJsonMessage resourceModifiedJsonMessage = new ResourceModifiedJsonMessage();\n+\t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMzAwNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458913007", "bodyText": "Rather than @PostConstruct initializing this, can you lazy load it?  95% of installations will never use this.  Some installations do not have a broker.", "author": "fil512", "createdAt": "2020-07-22T16:15:16Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiQueueSubmitterSvcImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.IEmpiQueueSubmitterSvc;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelProducerSettings;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.IChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n+\n+import javax.annotation.PostConstruct;\n+\n+import static ca.uhn.fhir.empi.api.IEmpiSettings.EMPI_CHANNEL_NAME;\n+\n+/**\n+ * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.\n+ */\n+public class EmpiQueueSubmitterSvcImpl implements IEmpiQueueSubmitterSvc {\n+\t@Autowired\n+\tprivate IChannelNamer myChannelNamer;\n+\n+\tprivate MessageChannel myEmpiChannelProducer;\n+\n+\t@Autowired\n+\tprivate FhirContext myFhirContext;\n+\n+\t@Autowired\n+\tprivate IChannelFactory myChannelFactory;\n+\n+\t@Override\n+\tpublic void manuallySubmitResourceToEmpi(IBaseResource theResource) {\n+\t\tResourceModifiedJsonMessage resourceModifiedJsonMessage = new ResourceModifiedJsonMessage();\n+\t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedJsonMessage.setPayload(resourceModifiedMessage);\n+\t\tmyEmpiChannelProducer.send(resourceModifiedJsonMessage);\n+\t}\n+\n+\t@PostConstruct\n+\tprivate void init() {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0ODY1Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458948656", "bodyText": "Just for clarity, you want me to:\n\nMake the bean declaration @lazy,\nMove the init code to a standard constructor\n\nYeah?", "author": "tadgh", "createdAt": "2020-07-22T17:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMzAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2MDYxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458960610", "bodyText": "Done", "author": "tadgh", "createdAt": "2020-07-22T17:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMzAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDY2Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458914663", "bodyText": "I like this syntax!  You should demo it at our next cdr core dev meeting", "author": "fil512", "createdAt": "2020-07-22T16:17:58Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderBatchR4Test.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import ca.uhn.test.concurrency.PointcutLatch;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderBatchR4Test extends BaseLinkR4Test {\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@Autowired\n+\tIInterceptorService myInterceptorService;\n+\tPointcutLatch afterEmpiLatch = new PointcutLatch(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED);\n+\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t\tmyInterceptorService.registerAnonymousInterceptor(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED, afterEmpiLatch);\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() {\n+\t\tmyInterceptorService.unregisterInterceptor(afterEmpiLatch);\n+\t\tsuper.after();\n+\t}\n+\n+\t@Test\n+\tpublic void testBatchRunOnAllPractitioners() {\n+\t\tassertLinkCount(2);\n+\t\tStringType criteria = null;\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\n+\t\tafterEmpiLatch.runWithExpectedCount(1, () -> myEmpiProviderR4.empiBatchPractitionerType(criteria, null));\n+\t\tassertLinkCount(1);\n+\t}\n+\t@Test\n+\tpublic void testBatchRunOnSpecificPractitioner() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tafterEmpiLatch.runWithExpectedCount(1, () -> myEmpiProviderR4.empiBatchPractitionerInstance(myPractitioner.getIdElement(), null));", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNjQ2NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458916465", "bodyText": "nice tests!\ndid you measure coverage?", "author": "fil512", "createdAt": "2020-07-22T16:20:38Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderBatchR4Test.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import ca.uhn.test.concurrency.PointcutLatch;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderBatchR4Test extends BaseLinkR4Test {\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@Autowired\n+\tIInterceptorService myInterceptorService;\n+\tPointcutLatch afterEmpiLatch = new PointcutLatch(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED);\n+\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t\tmyInterceptorService.registerAnonymousInterceptor(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED, afterEmpiLatch);\n+\t}\n+\n+\t@AfterEach\n+\tpublic void after() {\n+\t\tmyInterceptorService.unregisterInterceptor(afterEmpiLatch);\n+\t\tsuper.after();\n+\t}\n+\n+\t@Test\n+\tpublic void testBatchRunOnAllPractitioners() {\n+\t\tassertLinkCount(2);\n+\t\tStringType criteria = null;\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\n+\t\tafterEmpiLatch.runWithExpectedCount(1, () -> myEmpiProviderR4.empiBatchPractitionerType(criteria, null));\n+\t\tassertLinkCount(1);\n+\t}\n+\t@Test\n+\tpublic void testBatchRunOnSpecificPractitioner() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tafterEmpiLatch.runWithExpectedCount(1, () -> myEmpiProviderR4.empiBatchPractitionerInstance(myPractitioner.getIdElement(), null));\n+\t\tassertLinkCount(1);\n+\t}\n+\n+\t@Test\n+\tpublic void testBatchRunOnNonExistentSpecificPractitioner() {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0ODkxNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458948914", "bodyText": "No, but can do.", "author": "tadgh", "createdAt": "2020-07-22T17:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNjQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNzEyNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458917127", "bodyText": "you didn't use your fancy new syntax :-)", "author": "fil512", "createdAt": "2020-07-22T16:21:31Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImplTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchService;\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.jpa.empi.BaseEmpiR4Test;\n+import ca.uhn.test.concurrency.PointcutLatch;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.Date;\n+\n+class EmpiBatchSvcImplTest extends BaseEmpiR4Test {\n+\n+\t@Autowired\n+\tIEmpiBatchService myEmpiBatchSvc;\n+\n+\t@Autowired\n+\tIInterceptorService myInterceptorService;\n+\n+\tPointcutLatch afterEmpiLatch = new PointcutLatch(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED);\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tmyInterceptorService.registerAnonymousInterceptor(Pointcut.EMPI_AFTER_PERSISTED_RESOURCE_CHECKED, afterEmpiLatch);\n+\t}\n+\t@AfterEach\n+\tpublic void after() {\n+\t\tmyInterceptorService.unregisterInterceptor(afterEmpiLatch);\n+\t\tafterEmpiLatch.clear();\n+\t\tsuper.after();\n+\t}\n+\n+\t@Test\n+\tpublic void testEmpiBatchRunWorksOverMultipleTargetTypes() throws InterruptedException {\n+\n+\t\tfor (int i =0; i < 10; i++) {\n+\t\t\tcreatePatient(buildJanePatient());\n+\t\t}\n+\n+\t\tfor(int i = 0; i< 10; i++) {\n+\t\t\tcreatePractitioner(buildPractitionerWithNameAndId(\"test\", \"id\"));\n+\t\t}\n+\n+\t\tassertLinkCount(0);\n+\t\tafterEmpiLatch.setExpectedCount(20);\n+\n+\t\t//SUT\n+\t\tmyEmpiBatchSvc.runEmpiOnAllTargetTypes(null);", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1ODM2Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458958362", "bodyText": "Ah this was an old test I didn't update!", "author": "tadgh", "createdAt": "2020-07-22T17:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNzEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxODkyOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458918929", "bodyText": "Tests like this read a bit nicer if they start with a successful read before clearEmpiLinks() is called", "author": "fil512", "createdAt": "2020-07-22T16:23:18Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n+\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testClearAllLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoLinksExist();\n+\t}\n+\n+\tprivate void assertNoLinksExist() {\n+\t\tassertNoPatientLinksExist();\n+\t\tassertNoPractitionerLinksExist();\n+\t}\n+\n+\tprivate void assertNoPatientLinksExist() {\n+\t\tassertThat(getPatientLinks(), hasSize(0));\n+\t}\n+\n+\tprivate void assertNoPractitionerLinksExist() {\n+\t\tassertThat(getPractitionerLinks(), hasSize(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPatientLinks() {\n+\t\tassertLinkCount(2);\n+\n+\t\tPerson read = myPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"patient\"));\n+\t\tassertNoPatientLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPractitionerLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"practitioner\"));\n+\t\tassertNoPractitionerLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPractitionerPersonId.getValueAsString()).toVersionless());", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxOTYzMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458919633", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.\n          \n          \n            \n            \t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioners do not have a birthday.", "author": "fil512", "createdAt": "2020-07-22T16:23:59Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n+\t *                    When using this function, the criteria supplied must be valid for all EMPI types. e.g. , if you\n+\t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxOTk2NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458919964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n          \n          \n            \n            \t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI processing. NOTE:", "author": "fil512", "createdAt": "2020-07-22T16:24:18Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTY1OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458921658", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n          \n          \n            \n            \t * Convenience method that calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.", "author": "fil512", "createdAt": "2020-07-22T16:25:59Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n+\t *                    When using this function, the criteria supplied must be valid for all EMPI types. e.g. , if you\n+\t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.\n+\t *                    Use with caution.\n+\t *\n+\t */\n+\tint runEmpiOnAllTargetTypes(String theCriteria);\n+\n+\t/**\n+\t * Given a type and a search criteria, submit all found resources for EMPI processing.\n+\t *\n+\t * @param theTargetType the resource type that you wish to execute a search over for submission to EMPI.\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnTargetType(String theTargetType, String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTgxNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458921816", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n          \n          \n            \n            \t * Convenience method that calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.", "author": "fil512", "createdAt": "2020-07-22T16:26:10Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n+\t *                    When using this function, the criteria supplied must be valid for all EMPI types. e.g. , if you\n+\t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.\n+\t *                    Use with caution.\n+\t *\n+\t */\n+\tint runEmpiOnAllTargetTypes(String theCriteria);\n+\n+\t/**\n+\t * Given a type and a search criteria, submit all found resources for EMPI processing.\n+\t *\n+\t * @param theTargetType the resource type that you wish to execute a search over for submission to EMPI.\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnTargetType(String theTargetType, String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n+\t *\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnPractitionerType(String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMjI5MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458922290", "bodyText": "per my comments in the implementation, change to long and drop the second arg.", "author": "fil512", "createdAt": "2020-07-22T16:26:41Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiBatchService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+\n+public interface IEmpiBatchService {\n+\n+\t/**\n+\t * Submit all eligible resources for EMPI processing.\n+\t *  @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI. NOTE:\n+\t *                    When using this function, the criteria supplied must be valid for all EMPI types. e.g. , if you\n+\t *                    run this with the criteria birthDate=1990-06-28, it will fail, as Practitioner's do not have a birthday.\n+\t *                    Use with caution.\n+\t *\n+\t */\n+\tint runEmpiOnAllTargetTypes(String theCriteria);\n+\n+\t/**\n+\t * Given a type and a search criteria, submit all found resources for EMPI processing.\n+\t *\n+\t * @param theTargetType the resource type that you wish to execute a search over for submission to EMPI.\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnTargetType(String theTargetType, String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n+\t *\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnPractitionerType(String theCriteria);\n+\n+\t/**\n+\t * Convenience method which calls {@link #runEmpiOnTargetType(String, String)} with the type pre-populated.\n+\t *\n+\t * @param theCriteria The FHIR search critieria for filtering the resources to be submitted for EMPI.\n+\t * @return the number of resources submitted for EMPI processing.\n+\t */\n+\tint runEmpiOnPatientType(String theCriteria);\n+\n+\t/**\n+\t * Given an ID and a target type valid for EMPI, manually submit the given ID for EMPI processing.\n+\t * @param theId the ID of the resource to process for EMPI.\n+\t * @param theTargetType The type of this resource.\n+\t * @return the constant `1`, as if this function returns successfully, it will have processed one resource for EMPI.\n+\t */\n+\tint runEmpiOnTarget(IIdType theId, String theTargetType);", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMjcxOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458922718", "bodyText": "nitpick: I'd drop manually", "author": "fil512", "createdAt": "2020-07-22T16:27:12Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiQueueSubmitterSvc.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+public interface IEmpiQueueSubmitterSvc {\n+\n+\tvoid manuallySubmitResourceToEmpi(IBaseResource theResource);", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzkzMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458923930", "bodyText": "Safer to check theTargetType isn't blank", "author": "fil512", "createdAt": "2020-07-22T16:28:49Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiProviderR4.java", "diffHunk": "@@ -117,6 +127,16 @@ public Person updateLink(@OperationParam(name=ProviderConstants.EMPI_UPDATE_LINK\n \t\treturn (Person) myEmpiLinkUpdaterSvc.updateLink(person, target, matchResult, createEmpiContext(theRequestDetails));\n \t}\n \n+\t@Operation(name = ProviderConstants.EMPI_CLEAR)\n+\tpublic Parameters clearEmpiLinks(@OperationParam(name=ProviderConstants.EMPI_CLEAR_TARGET_TYPE, min = 0, max = 1) StringType theTargetType) {\n+\t\tif (theTargetType == null) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyOTI1NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458929254", "bodyText": "This is my favourite part of this PR", "author": "fil512", "createdAt": "2020-07-22T16:35:09Z", "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/test/concurrency/PointcutLatch.java", "diffHunk": "@@ -67,6 +67,18 @@ public PointcutLatch(String theName) {\n \t\tmyPointcut = null;\n \t}\n \n+\tpublic void runWithExpectedCount(int theExpectedCount, Runnable r) {", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyOTkxOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r458929919", "bodyText": "I strongly recommend you remove this.clear();\nIf you clear the latch before calling setExpectedCount then you are hiding an entire category of failures from the latch.  Better to expose those failures.", "author": "fil512", "createdAt": "2020-07-22T16:36:10Z", "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/test/concurrency/PointcutLatch.java", "diffHunk": "@@ -67,6 +67,18 @@ public PointcutLatch(String theName) {\n \t\tmyPointcut = null;\n \t}\n \n+\tpublic void runWithExpectedCount(int theExpectedCount, Runnable r) {\n+\t\tthis.clear();", "originalCommit": "249f5e5947e3b5486e9644bc88a07edb8f3cb787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bbe6d5600eeec58415ab512984de11d52fa90cc6", "url": "https://github.com/hapifhir/hapi-fhir/commit/bbe6d5600eeec58415ab512984de11d52fa90cc6", "message": "Address review comments", "committedDate": "2020-07-22T18:58:08Z", "type": "commit"}, {"oid": "198385a7b478b88073722f01e100aad6abda1215", "url": "https://github.com/hapifhir/hapi-fhir/commit/198385a7b478b88073722f01e100aad6abda1215", "message": "Dead space", "committedDate": "2020-07-22T19:01:34Z", "type": "commit"}, {"oid": "16c6071062daa3519f1e7729b682b757539bdff3", "url": "https://github.com/hapifhir/hapi-fhir/commit/16c6071062daa3519f1e7729b682b757539bdff3", "message": "Fix migration", "committedDate": "2020-07-22T19:43:36Z", "type": "commit"}, {"oid": "60e5d9783e0f74d7e89aa270cb0272bf5866180d", "url": "https://github.com/hapifhir/hapi-fhir/commit/60e5d9783e0f74d7e89aa270cb0272bf5866180d", "message": "Narrowing catch by LGTM", "committedDate": "2020-07-22T21:00:39Z", "type": "commit"}, {"oid": "9236cdc211474a7322c374ad4f0dfab0ba4f55a6", "url": "https://github.com/hapifhir/hapi-fhir/commit/9236cdc211474a7322c374ad4f0dfab0ba4f55a6", "message": "Add length to migration to string type", "committedDate": "2020-07-22T21:02:03Z", "type": "commit"}, {"oid": "1454364d4e3829562cb7b76e1532d04c6e49cec7", "url": "https://github.com/hapifhir/hapi-fhir/commit/1454364d4e3829562cb7b76e1532d04c6e49cec7", "message": "Add DSTU3 equivalent provider functions", "committedDate": "2020-07-22T21:41:45Z", "type": "commit"}, {"oid": "e9adebc412c5186b3c9f209f7d5aae9a38f3acf7", "url": "https://github.com/hapifhir/hapi-fhir/commit/e9adebc412c5186b3c9f209f7d5aae9a38f3acf7", "message": "Move SearchBuilderFactory into EmpiSearchParamSvc to avoid module loading issues", "committedDate": "2020-07-22T23:19:55Z", "type": "commit"}, {"oid": "9491a3e4992d166f688de7a3779b441476b382e7", "url": "https://github.com/hapifhir/hapi-fhir/commit/9491a3e4992d166f688de7a3779b441476b382e7", "message": "Add DSTU3 clear operation", "committedDate": "2020-07-23T16:37:11Z", "type": "commit"}, {"oid": "90e96c1fb4851b9ed77de58f33756c861709fec6", "url": "https://github.com/hapifhir/hapi-fhir/commit/90e96c1fb4851b9ed77de58f33756c861709fec6", "message": "Fix bug caused by Persons with >1 historical version", "committedDate": "2020-07-23T21:35:28Z", "type": "commit"}, {"oid": "7e694ded3f0bf2367d386d798db936afa3514db5", "url": "https://github.com/hapifhir/hapi-fhir/commit/7e694ded3f0bf2367d386d798db936afa3514db5", "message": "Add failing test showing issue with related persons", "committedDate": "2020-07-25T00:18:59Z", "type": "commit"}, {"oid": "fac14240c8526b7c603124969af562c204090fd4", "url": "https://github.com/hapifhir/hapi-fhir/commit/fac14240c8526b7c603124969af562c204090fd4", "message": "Add circular reference handling, and DeleteConflict handling", "committedDate": "2020-07-27T21:18:40Z", "type": "commit"}, {"oid": "82dcc395eca7bddcbdd072e3b7ee17fb626ebcbe", "url": "https://github.com/hapifhir/hapi-fhir/commit/82dcc395eca7bddcbdd072e3b7ee17fb626ebcbe", "message": "Merge branch 'master' into batch-empi-job", "committedDate": "2020-07-27T21:59:27Z", "type": "commit"}, {"oid": "606b642b1eb1ad7d58a9c571507843fc72bf9895", "url": "https://github.com/hapifhir/hapi-fhir/commit/606b642b1eb1ad7d58a9c571507843fc72bf9895", "message": "Turns out expunge atomic integer didn't do what I expected for historical versions...", "committedDate": "2020-07-28T00:29:27Z", "type": "commit"}, {"oid": "f6d44fe50c49d9078fca7975cfea30349fb421a2", "url": "https://github.com/hapifhir/hapi-fhir/commit/f6d44fe50c49d9078fca7975cfea30349fb421a2", "message": "wip", "committedDate": "2020-07-28T15:42:45Z", "type": "commit"}, {"oid": "2e48ded61b2d9d30cb447df7b492bde973a503e6", "url": "https://github.com/hapifhir/hapi-fhir/commit/2e48ded61b2d9d30cb447df7b492bde973a503e6", "message": "Add license, change bean name", "committedDate": "2020-07-29T01:05:17Z", "type": "commit"}, {"oid": "0e88f359f54b117eb6eb855d2bce9392b3d5250f", "url": "https://github.com/hapifhir/hapi-fhir/commit/0e88f359f54b117eb6eb855d2bce9392b3d5250f", "message": "Merge remote-tracking branch 'remotes/origin/master' into batch-empi-job", "committedDate": "2020-07-29T16:42:12Z", "type": "commit"}, {"oid": "102f936156a60b29ffaba8c34287304ddcf4662f", "url": "https://github.com/hapifhir/hapi-fhir/commit/102f936156a60b29ffaba8c34287304ddcf4662f", "message": "Rework into new person deleting service", "committedDate": "2020-07-29T19:17:07Z", "type": "commit"}, {"oid": "5bfe3ce15ff0fc5ff4e8fa7171612d94aa17cdad", "url": "https://github.com/hapifhir/hapi-fhir/commit/5bfe3ce15ff0fc5ff4e8fa7171612d94aa17cdad", "message": "move transactional method to persistence", "committedDate": "2020-07-29T21:16:49Z", "type": "commit"}, {"oid": "bcc5c59d458fabbe372dde12894f2918f649ab55", "url": "https://github.com/hapifhir/hapi-fhir/commit/bcc5c59d458fabbe372dde12894f2918f649ab55", "message": "Move batch svc to the submitter", "committedDate": "2020-07-30T00:05:57Z", "type": "commit"}, {"oid": "30b517f0d5bf0e7a3aa755659cd74a28774c2673", "url": "https://github.com/hapifhir/hapi-fhir/commit/30b517f0d5bf0e7a3aa755659cd74a28774c2673", "message": "Migrate the channel submitter to SubmitterConfig, (duh)", "committedDate": "2020-07-30T00:21:36Z", "type": "commit"}, {"oid": "b8c000b3a1117215269c588a7b0ed6562f6435e2", "url": "https://github.com/hapifhir/hapi-fhir/commit/b8c000b3a1117215269c588a7b0ed6562f6435e2", "message": "Rename queue to channel", "committedDate": "2020-07-30T00:43:53Z", "type": "commit"}, {"oid": "83d4035ca1673d4e311f1df9aa8faf83278a5c45", "url": "https://github.com/hapifhir/hapi-fhir/commit/83d4035ca1673d4e311f1df9aa8faf83278a5c45", "message": "Remove naming outside of cchannelproducer", "committedDate": "2020-07-30T01:45:40Z", "type": "commit"}, {"oid": "48bf78e972a322314d11849395544d8e843a3c89", "url": "https://github.com/hapifhir/hapi-fhir/commit/48bf78e972a322314d11849395544d8e843a3c89", "message": "Rename service interface name", "committedDate": "2020-07-30T19:17:14Z", "type": "commit"}, {"oid": "8b4fa8048f039422150759a98d8a0c896c090f4b", "url": "https://github.com/hapifhir/hapi-fhir/commit/8b4fa8048f039422150759a98d8a0c896c090f4b", "message": "Add changelog", "committedDate": "2020-07-30T21:42:25Z", "type": "commit"}, {"oid": "07f9e8466b42c3409582b4661b8b7d71040ad8d4", "url": "https://github.com/hapifhir/hapi-fhir/commit/07f9e8466b42c3409582b4661b8b7d71040ad8d4", "message": "Add documentation for -clear", "committedDate": "2020-07-30T22:23:43Z", "type": "commit"}, {"oid": "f731e4430371bb41487c64d81ae1f769fecdb79a", "url": "https://github.com/hapifhir/hapi-fhir/commit/f731e4430371bb41487c64d81ae1f769fecdb79a", "message": "Partial addition of docs for batch run", "committedDate": "2020-07-31T01:21:35Z", "type": "commit"}, {"oid": "9f0af3c21c7565afff729ce423f2707e3098707f", "url": "https://github.com/hapifhir/hapi-fhir/commit/9f0af3c21c7565afff729ce423f2707e3098707f", "message": "docs for batch run", "committedDate": "2020-07-31T02:25:30Z", "type": "commit"}, {"oid": "63cc10c919a082ad8fa3f37336fadc5bd0a3b64b", "url": "https://github.com/hapifhir/hapi-fhir/commit/63cc10c919a082ad8fa3f37336fadc5bd0a3b64b", "message": "Updare license", "committedDate": "2020-07-31T05:10:59Z", "type": "commit"}, {"oid": "bd22b0239f6b59994959b648e75744b6d9dcf272", "url": "https://github.com/hapifhir/hapi-fhir/commit/bd22b0239f6b59994959b648e75744b6d9dcf272", "message": "Add caveat", "committedDate": "2020-07-31T16:13:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDYxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974612", "bodyText": "Thank you!  Love it when these get fixed.", "author": "fil512", "createdAt": "2020-08-01T15:50:20Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/expunge/IResourceExpungeService.java", "diffHunk": "@@ -33,9 +33,9 @@\n \n \tvoid expungeHistoricalVersions(RequestDetails theRequestDetails, List<Long> thePartition, AtomicInteger theRemainingCount);\n \n-\tvoid expungeCurrentVersionOfResources(RequestDetails theRequestDetails, List<Long> thePartition, AtomicInteger theRemainingCount);\n+\tvoid expungeCurrentVersionOfResources(RequestDetails theRequestDetails, List<Long> theResourceIds, AtomicInteger theRemainingCount);\n \n-\tvoid expungeHistoricalVersionsOfIds(RequestDetails theRequestDetails, List<Long> thePartition, AtomicInteger theRemainingCount);", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDcwNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463974706", "bodyText": "IntelliJ is telling me this class isn't used.  If that's the case, can you delete it?  (Maybe CDR uses it?)", "author": "fil512", "createdAt": "2020-08-01T15:51:35Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/expunge/ResourceExpungeService.java", "diffHunk": "@@ -67,7 +67,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n @Service\n-class ResourceExpungeService implements IResourceExpungeService {\n+public class ResourceExpungeService implements IResourceExpungeService {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4ODc5NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463988795", "bodyText": "The interface is used in ExpungeOperation", "author": "tadgh", "createdAt": "2020-08-01T18:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NDcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTUxNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463975516", "bodyText": "um wat?", "author": "fil512", "createdAt": "2020-08-01T16:01:26Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -89,7 +89,7 @@\n \tprivate Date myUpdated;\n \n \t@Column(name = \"VERSION\", nullable = false, length = VERSION_LENGTH)\n-\tprivate String myVersion;\n+\tprivate java.lang.String myVersion;", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTUxOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463975519", "bodyText": "moar wat?", "author": "fil512", "createdAt": "2020-08-01T16:01:33Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -107,10 +107,13 @@\n \n \tpublic EmpiLink() {}\n \n-\tpublic EmpiLink(String theVersion) {\n+\tpublic EmpiLink(java.lang.String theVersion) {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTYwNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463975606", "bodyText": "ders more.  pls find all and scrub", "author": "fil512", "createdAt": "2020-08-01T16:02:29Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -218,11 +221,11 @@ public EmpiLink setUpdated(Date theUpdated) {\n \t\treturn this;\n \t}\n \n-\tpublic String getVersion() {\n+\tpublic java.lang.String getVersion() {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4OTA4Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463989082", "bodyText": "efaf09f", "author": "tadgh", "createdAt": "2020-08-01T18:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTcwMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463975703", "bodyText": "Make length constant and use this constant in the migrator", "author": "fil512", "createdAt": "2020-08-01T16:04:03Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/EmpiLink.java", "diffHunk": "@@ -107,10 +107,13 @@\n \n \tpublic EmpiLink() {}\n \n-\tpublic EmpiLink(String theVersion) {\n+\tpublic EmpiLink(java.lang.String theVersion) {\n \t\tmyVersion = theVersion;\n \t}\n \n+\t@Column(name = \"TARGET_TYPE\", nullable = true, length = 40)", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NjA3MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463996070", "bodyText": "2cf48eb", "author": "tadgh", "createdAt": "2020-08-01T20:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NjA4Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463976083", "bodyText": "IntelliJ says this method is not used", "author": "fil512", "createdAt": "2020-08-01T16:08:35Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/dao/EmpiLinkDaoSvc.java", "diffHunk": "@@ -178,6 +226,64 @@ public void deleteLink(EmpiLink theEmpiLink) {\n \t\treturn myEmpiLinkDao.findAll(example);\n \t}\n \n+\t/**\n+\t * Delete all {@link EmpiLink} entities, and return all resource PIDs from the source of the relationship.\n+\t *\n+\t * @return A list of Long representing the related Person Pids.\n+\t */\n+\t@Transactional\n+\tpublic List<Long> deleteAllEmpiLinksAndReturnPersonPids() {\n+\t\tList<EmpiLink> all = myEmpiLinkDao.findAll();\n+\t\treturn deleteEmpiLinksAndReturnPersonPids(all);\n+\t}\n+\n+\tprivate List<Long> deleteEmpiLinksAndReturnPersonPids(List<EmpiLink> theLinks) {\n+\t\tList<Long> collect = theLinks.stream().map(EmpiLink::getPersonPid).distinct().collect(Collectors.toList());\n+\t\tmyEmpiLinkDao.deleteAll(theLinks);\n+\t\treturn collect;\n+\t}\n+\n+\t/**\n+\t * Given a valid {@link String}, delete all {@link EmpiLink} entities for that type, and get the Pids\n+\t * for the Person resources which were the sources of the links.\n+\t *\n+\t * @param theTargetType the type of relationship you would like to delete.\n+\t *\n+\t * @return A list of longs representing the Pids of the Person resources used as the sources of the relationships that were deleted.\n+\t */\n+\tpublic List<Long> deleteAllEmpiLinksOfTypeAndReturnPersonPids(String theTargetType) {\n+\t\tEmpiLink link = new EmpiLink();\n+\t\tlink.setEmpiTargetType(theTargetType);\n+\t\tExample<EmpiLink> exampleLink = Example.of(link);\n+\t\tList<EmpiLink> allOfType = myEmpiLinkDao.findAll(exampleLink);\n+\t\treturn deleteEmpiLinksAndReturnPersonPids(allOfType);\n+\t}\n+\n+\t/**\n+\t * Given a target type, and a resource ID, delete the target's {@link EmpiLink} entities, and return the Person Pids\n+\t * that were on the source end of each relationship.\n+\t *\n+\t * @param theTargetType The empi target type of the resource\n+\t * @param theId The particular target resource ID.\n+\t *\n+\t * @return A list of longs, each representing the source person of an {@link EmpiLink} that was deleted.\n+\t */\n+\tpublic List<Long> deleteEmpiLinksAndReturnPersonPidsForTypeAndTarget(String theTargetType, IIdType theId) {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4OTE1OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463989158", "bodyText": "1d6a26b", "author": "tadgh", "createdAt": "2020-08-01T18:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NjA4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NjY0Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463976643", "bodyText": "This method is an example of why your code is such a joy to read.  It's refreshing to read code where it's immediately obvious exactly what it's trying to do.", "author": "fil512", "createdAt": "2020-08-01T16:14:55Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchSvc;\n+import ca.uhn.fhir.empi.api.IEmpiChannelSubmitterSvc;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchSvc {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiChannelSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\tprivate static final int BUFFER_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic long runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tlong submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic long runEmpiOnTargetType(String theTargetType, String theCriteria) {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4OTI3Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463989277", "bodyText": ":-) \ud83c\udf89", "author": "tadgh", "createdAt": "2020-08-01T18:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NjY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzAwMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463977002", "bodyText": "Hope I'm not driving you crazy with endless iterations on this, but it feels to me like this method really belongs in IResultIterator.  I.e.\nCollection<ResourcePersistentId> batch = theQuery.getNextResultBatch(long theBatchSize)", "author": "fil512", "createdAt": "2020-08-01T16:19:18Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImpl.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiBatchSvc;\n+import ca.uhn.fhir.empi.api.IEmpiChannelSubmitterSvc;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.dao.IResultIterator;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.model.search.SearchRuntimeDetails;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class EmpiBatchSvcImpl implements IEmpiBatchSvc {\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\n+\t@Autowired\n+\tprivate EmpiSearchParamSvc myEmpiSearchParamSvc;\n+\n+\t@Autowired\n+\tprivate IEmpiChannelSubmitterSvc myEmpiQueueSubmitterSvc;\n+\n+\tprivate static final int BUFFER_SIZE = 100;\n+\n+\t@Override\n+\t@Transactional\n+\tpublic long runEmpiOnAllTargetTypes(String theCriteria) {\n+\t\tlong submittedCount = 0;\n+\t\tsubmittedCount += runEmpiOnPatientType(theCriteria);\n+\t\tsubmittedCount += runEmpiOnPractitionerType(theCriteria);\n+\t\treturn submittedCount;\n+\t}\n+\n+\t@Override\n+\t@Transactional\n+\tpublic long runEmpiOnTargetType(String theTargetType, String theCriteria) {\n+\t\tresolveTargetTypeOrThrowException(theTargetType);\n+\t\tSearchParameterMap spMap = myEmpiSearchParamSvc.getSearchParameterMapFromCriteria(theTargetType, theCriteria);\n+\t\tspMap.setLoadSynchronousUpTo(BUFFER_SIZE);\n+\t\tISearchBuilder searchBuilder = myEmpiSearchParamSvc.generateSearchBuilderForType(theTargetType);\n+\t\treturn submitAllMatchingResourcesToEmpiChannel(spMap, searchBuilder);\n+\t}\n+\n+\tprivate long submitAllMatchingResourcesToEmpiChannel(SearchParameterMap theSpMap, ISearchBuilder theSearchBuilder) {\n+\t\tSearchRuntimeDetails searchRuntimeDetails = new SearchRuntimeDetails(null, UUID.randomUUID().toString());\n+\t\tlong total = 0;\n+\t\ttry (IResultIterator query = theSearchBuilder.createQuery(theSpMap, searchRuntimeDetails, null, RequestPartitionId.defaultPartition())) {\n+\t\t\tCollection<ResourcePersistentId> pidBatch;\n+\t\t\tdo {\n+\t\t\t\tpidBatch = getPidBatch(query);\n+\t\t\t\ttotal += loadPidsAndSubmitToEmpiChannel(theSearchBuilder, pidBatch);\n+\t\t\t} while (query.hasNext());\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InternalErrorException(\"Failure while attempting to query resources for \" + ProviderConstants.OPERATION_EMPI_BATCH_RUN, theE);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\n+\t/**\n+\t * Given an iterator, get a batch of max size BUFFER_SIZE.\n+\t *\n+\t * @param theQuery the iterator.\n+\t *\n+\t * @return a collection of ResourcePersistentId entities.\n+\t */\n+\tpublic Collection<ResourcePersistentId> getPidBatch(IResultIterator theQuery) {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4OTg0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463989841", "bodyText": "Ah I see what you mean!", "author": "tadgh", "createdAt": "2020-08-01T18:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NTQwOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463995408", "bodyText": "0a4d81e", "author": "tadgh", "createdAt": "2020-08-01T20:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NzAwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTMyMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981322", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.\n          \n          \n            \n             * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Channel.", "author": "fil512", "createdAt": "2020-08-01T17:11:14Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiChannelSubmitterSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.IEmpiChannelSubmitterSvc;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelProducerSettings;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.IChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n+\n+import static ca.uhn.fhir.empi.api.IEmpiSettings.EMPI_CHANNEL_NAME;\n+\n+/**\n+ * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTM4MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981380", "bodyText": "theChannelNamer unused", "author": "fil512", "createdAt": "2020-08-01T17:11:56Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiChannelSubmitterSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.IEmpiChannelSubmitterSvc;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelProducerSettings;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.IChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n+\n+import static ca.uhn.fhir.empi.api.IEmpiSettings.EMPI_CHANNEL_NAME;\n+\n+/**\n+ * This class is responsible for manual submissions of {@link IAnyResource} resources onto the Empi Queue.\n+ */\n+public class EmpiChannelSubmitterSvcImpl implements IEmpiChannelSubmitterSvc {\n+\tprivate MessageChannel myEmpiChannelProducer;\n+\n+\tprivate FhirContext myFhirContext;\n+\n+\tprivate IChannelFactory myChannelFactory;\n+\n+\t@Override\n+\tpublic void submitResourceToEmpiChannel(IBaseResource theResource) {\n+\t\tResourceModifiedJsonMessage resourceModifiedJsonMessage = new ResourceModifiedJsonMessage();\n+\t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n+\t\tresourceModifiedJsonMessage.setPayload(resourceModifiedMessage);\n+\t\tgetEmpiChannelProducer().send(resourceModifiedJsonMessage);\n+\t}\n+\n+\t@Autowired\n+\tpublic EmpiChannelSubmitterSvcImpl(IChannelNamer theChannelNamer, FhirContext theFhirContext, IChannelFactory theIChannelFactory) {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NTg4Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463995886", "bodyText": "b0d301b", "author": "tadgh", "createdAt": "2020-08-01T20:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTUxOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981519", "bodyText": "Possible infinite loop.  Add a counter (can be really big, like 100,000) and if this loop iterates more than that number of times, throw an exception.", "author": "fil512", "createdAt": "2020-08-01T17:14:09Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n+import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n+import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+@Service\n+public class EmpiPersonDeletingSvc {\n+\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate ExpungeService myExpungeService;\n+\n+\t/**\n+\t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n+\t * VersionConflictException\n+\t *\n+\t * @param theLongs\n+\t */\n+\t@Transactional\n+\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\t\tDeleteConflictList\n+\t\t\tdeleteConflictList = new DeleteConflictList();\n+\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao personDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\twhile (!deleteConflictList.isEmpty()) {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NTgwMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463995800", "bodyText": "3068fe8", "author": "tadgh", "createdAt": "2020-08-01T20:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTU4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981589", "bodyText": "code comments here and below", "author": "fil512", "createdAt": "2020-08-01T17:14:55Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n+import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n+import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+@Service\n+public class EmpiPersonDeletingSvc {\n+\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate ExpungeService myExpungeService;\n+\n+\t/**\n+\t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n+\t * VersionConflictException\n+\t *\n+\t * @param theLongs\n+\t */\n+\t@Transactional\n+\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\t\tDeleteConflictList\n+\t\t\tdeleteConflictList = new DeleteConflictList();\n+\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao personDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\twhile (!deleteConflictList.isEmpty()) {\n+\t\t\tdeleteConflictBatch(deleteConflictList, personDao);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Use the expunge service to expunge all historical and current versions of the resources associated to the PIDs.\n+\t */\n+\tpublic void expungeHistoricalAndCurrentVersionsOfIds(List<Long> theLongs) {\n+\t\tExpungeOptions options = new ExpungeOptions();\n+\t\toptions.setExpungeDeletedResources(true);\n+\t\toptions.setExpungeOldVersions(true);\n+\t\t//myResourceExpungeService.expungeHistoricalVersionsOfIds(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NTg2Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463995867", "bodyText": "c8dfd00", "author": "tadgh", "createdAt": "2020-08-01T20:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTcwNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tourLog.info(\"Have delete conflict {} - Cascading delete\", next);\n          \n          \n            \n            \t\t\tourLog.info(\"Have delete conflict {} - Cascading delete\", nextSource);", "author": "fil512", "createdAt": "2020-08-01T17:16:20Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n+import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n+import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+@Service\n+public class EmpiPersonDeletingSvc {\n+\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate ExpungeService myExpungeService;\n+\n+\t/**\n+\t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n+\t * VersionConflictException\n+\t *\n+\t * @param theLongs\n+\t */\n+\t@Transactional\n+\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\t\tDeleteConflictList\n+\t\t\tdeleteConflictList = new DeleteConflictList();\n+\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao personDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\twhile (!deleteConflictList.isEmpty()) {\n+\t\t\tdeleteConflictBatch(deleteConflictList, personDao);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Use the expunge service to expunge all historical and current versions of the resources associated to the PIDs.\n+\t */\n+\tpublic void expungeHistoricalAndCurrentVersionsOfIds(List<Long> theLongs) {\n+\t\tExpungeOptions options = new ExpungeOptions();\n+\t\toptions.setExpungeDeletedResources(true);\n+\t\toptions.setExpungeOldVersions(true);\n+\t\t//myResourceExpungeService.expungeHistoricalVersionsOfIds(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));\n+\t\ttheLongs.stream()\n+\t\t\t.forEach(personId -> {\n+\t\t\t\tmyExpungeService.expunge(\"Person\", personId, null, options, null);\n+\t\t\t});\n+\t\t//myResourceExpungeService.expungeCurrentVersionOfResources(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));\n+\t}\n+\n+\tprivate void deleteCascade(Long pid, DeleteConflictList theDeleteConflictList) {\n+\t\tourLog.debug(\"About to cascade delete: \" + pid);\n+\t\tIFhirResourceDao resourceDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\tresourceDao.delete(new IdType(\"Person/\" + pid), theDeleteConflictList, null, null);\n+\t}\n+\n+\tprivate void deleteConflictBatch(DeleteConflictList theDcl, IFhirResourceDao<IBaseResource> theDao) {\n+\t\tDeleteConflictList newBatch = new DeleteConflictList();\n+\t\tfor (DeleteConflict next : theDcl) {\n+\t\t\tIdDt nextSource = next.getSourceId();\n+\t\t\tourLog.info(\"Have delete conflict {} - Cascading delete\", next);", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTgwNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463981807", "bodyText": "If it doesn't already exist, please add a removeAll() function.", "author": "fil512", "createdAt": "2020-08-01T17:17:52Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n+import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n+import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n+import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+@Service\n+public class EmpiPersonDeletingSvc {\n+\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate ExpungeService myExpungeService;\n+\n+\t/**\n+\t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n+\t * VersionConflictException\n+\t *\n+\t * @param theLongs\n+\t */\n+\t@Transactional\n+\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\t\tDeleteConflictList\n+\t\t\tdeleteConflictList = new DeleteConflictList();\n+\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao personDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\twhile (!deleteConflictList.isEmpty()) {\n+\t\t\tdeleteConflictBatch(deleteConflictList, personDao);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Use the expunge service to expunge all historical and current versions of the resources associated to the PIDs.\n+\t */\n+\tpublic void expungeHistoricalAndCurrentVersionsOfIds(List<Long> theLongs) {\n+\t\tExpungeOptions options = new ExpungeOptions();\n+\t\toptions.setExpungeDeletedResources(true);\n+\t\toptions.setExpungeOldVersions(true);\n+\t\t//myResourceExpungeService.expungeHistoricalVersionsOfIds(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));\n+\t\ttheLongs.stream()\n+\t\t\t.forEach(personId -> {\n+\t\t\t\tmyExpungeService.expunge(\"Person\", personId, null, options, null);\n+\t\t\t});\n+\t\t//myResourceExpungeService.expungeCurrentVersionOfResources(null, theLongs, new AtomicInteger(Integer.MAX_VALUE - 1));\n+\t}\n+\n+\tprivate void deleteCascade(Long pid, DeleteConflictList theDeleteConflictList) {\n+\t\tourLog.debug(\"About to cascade delete: \" + pid);\n+\t\tIFhirResourceDao resourceDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\tresourceDao.delete(new IdType(\"Person/\" + pid), theDeleteConflictList, null, null);\n+\t}\n+\n+\tprivate void deleteConflictBatch(DeleteConflictList theDcl, IFhirResourceDao<IBaseResource> theDao) {\n+\t\tDeleteConflictList newBatch = new DeleteConflictList();\n+\t\tfor (DeleteConflict next : theDcl) {\n+\t\t\tIdDt nextSource = next.getSourceId();\n+\t\t\tourLog.info(\"Have delete conflict {} - Cascading delete\", next);\n+\t\t\ttheDao.delete(nextSource.toVersionless(), newBatch, null, null);\n+\t\t}\n+\t\ttheDcl.removeIf(x -> true);", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NjIwOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463996208", "bodyText": "these are Iterable functions, but I can definitely add this to the DeleteConflictList class", "author": "tadgh", "createdAt": "2020-08-01T20:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTgwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NjMzMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463996331", "bodyText": "ad88742", "author": "tadgh", "createdAt": "2020-08-01T20:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MTgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjA2NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463982064", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.\n          \n          \n            \n             * This class is responsible for Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.", "author": "fil512", "createdAt": "2020-08-01T17:21:23Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiResetSvcImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.empi.api.IEmpiResetSvc;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+\n+/**\n+ * This class is in charge of Clearing out existing EMPI links, as well as deleting all persons related to those EMPI Links.", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjIxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463982212", "bodyText": "nitpick: I think code reads easier when you put the positive case first rather than negating a conditional", "author": "fil512", "createdAt": "2020-08-01T17:23:19Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiSearchParamSvc.java", "diffHunk": "@@ -60,4 +71,28 @@ public SearchParameterMap mapFromCriteria(String theResourceType, String theReso\n \tpublic RuntimeSearchParam getActiveSearchParam(String theResourceName, String theParamName) {\n \t\treturn mySearchParamRegistry.getActiveSearchParam(theResourceName, theParamName);\n \t}\n+\n+\t/**\n+\t * Given a target type, and a criteria string of the shape name=x&birthDate=y, generate a {@link SearchParameterMap}\n+\t * that represents this query.\n+\t *\n+\t * @param theTargetType the resource type to execute the search on\n+\t * @param theCriteria the string search criteria.\n+\t *\n+\t * @return the generated SearchParameterMap, or an empty one if there is no criteria.\n+\t */\n+\tpublic SearchParameterMap getSearchParameterMapFromCriteria(String theTargetType, String theCriteria) {\n+\t\tSearchParameterMap spMap;\n+\t\tif (!StringUtils.isBlank(theCriteria)) {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NjQ0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463996442", "bodyText": "ac5d261", "author": "tadgh", "createdAt": "2020-08-01T20:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MjIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzE0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983142", "bodyText": "assert there are links to delete", "author": "fil512", "createdAt": "2020-08-01T17:34:24Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n+\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testClearAllLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoLinksExist();\n+\t}\n+\n+\tprivate void assertNoLinksExist() {\n+\t\tassertNoPatientLinksExist();\n+\t\tassertNoPractitionerLinksExist();\n+\t}\n+\n+\tprivate void assertNoPatientLinksExist() {\n+\t\tassertThat(getPatientLinks(), hasSize(0));\n+\t}\n+\n+\tprivate void assertNoPractitionerLinksExist() {\n+\t\tassertThat(getPractitionerLinks(), hasSize(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPatientLinks() {\n+\t\tassertLinkCount(2);\n+\t\tPerson read = myPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Patient\"));\n+\t\tassertNoPatientLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\n+\t}\n+\t@Test\n+\tpublic void testPersonsWithMultipleHistoricalVersionsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NjUzMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463996530", "bodyText": "160155b", "author": "tadgh", "createdAt": "2020-08-01T20:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzIwNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983204", "bodyText": "nice", "author": "fil512", "createdAt": "2020-08-01T17:34:58Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n+\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testClearAllLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoLinksExist();\n+\t}\n+\n+\tprivate void assertNoLinksExist() {\n+\t\tassertNoPatientLinksExist();\n+\t\tassertNoPractitionerLinksExist();\n+\t}\n+\n+\tprivate void assertNoPatientLinksExist() {\n+\t\tassertThat(getPatientLinks(), hasSize(0));\n+\t}\n+\n+\tprivate void assertNoPractitionerLinksExist() {\n+\t\tassertThat(getPractitionerLinks(), hasSize(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPatientLinks() {\n+\t\tassertLinkCount(2);\n+\t\tPerson read = myPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Patient\"));\n+\t\tassertNoPatientLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\n+\t}\n+\t@Test\n+\tpublic void testPersonsWithMultipleHistoricalVersionsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoPatientLinksExist();\n+\t}\n+\n+\t@Test\n+\tpublic void testPersonWithLinksToOtherPersonsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks1 = createPatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks = createPatientAndUpdateLinks(buildPaulPatient());\n+\n+\t\tPerson personFromTarget = getPersonFromTarget(patientAndUpdateLinks);\n+\t\tPerson personFromTarget2 = getPersonFromTarget(patientAndUpdateLinks1);\n+\t\tlinkPersons(personFromTarget, personFromTarget2);\n+\n+\t\t//SUT\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\n+\t\tassertNoPatientLinksExist();\n+\t\tIBundleProvider search = myPersonDao.search(new SearchParameterMap().setLoadSynchronous(true));\n+\t\tassertThat(search.size(), is(equalTo(0)));\n+\t}\n+\n+\t@Test\n+\tpublic void testPersonsWithCircularReferenceCanBeCleared() {\n+\t\tPatient patientAndUpdateLinks = createPatientAndUpdateLinks(buildPaulPatient());\n+\t\tPatient patientAndUpdateLinks1 = createPatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks2 = createPatientAndUpdateLinks(buildFrankPatient());\n+\n+\t\tPerson personFromTarget = getPersonFromTarget(patientAndUpdateLinks);\n+\t\tPerson personFromTarget1 = getPersonFromTarget(patientAndUpdateLinks1);\n+\t\tPerson personFromTarget2 = getPersonFromTarget(patientAndUpdateLinks2);\n+\n+\t\t// A -> B -> C -> A linkages.", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzI0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983241", "bodyText": "unused", "author": "fil512", "createdAt": "2020-08-01T17:35:18Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/provider/EmpiProviderClearLinkR4Test.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package ca.uhn.fhir.jpa.empi.provider;\n+\n+import ca.uhn.fhir.jpa.entity.EmpiLink;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Person;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class EmpiProviderClearLinkR4Test extends BaseLinkR4Test {\n+\n+\n+\tprotected Practitioner myPractitioner;\n+\tprotected StringType myPractitionerId;\n+\tprotected Person myPractitionerPerson;\n+\tprotected StringType myPractitionerPersonId;\n+\n+\t@BeforeEach\n+\tpublic void before() {\n+\t\tsuper.before();\n+\t\tmyPractitioner = createPractitionerAndUpdateLinks(new Practitioner());\n+\t\tmyPractitionerId = new StringType(myPractitioner.getIdElement().getValue());\n+\t\tmyPractitionerPerson = getPersonFromTarget(myPractitioner);\n+\t\tmyPractitionerPersonId = new StringType(myPractitionerPerson.getIdElement().getValue());\n+\t}\n+\n+\t@Test\n+\tpublic void testClearAllLinks() {\n+\t\tassertLinkCount(2);\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoLinksExist();\n+\t}\n+\n+\tprivate void assertNoLinksExist() {\n+\t\tassertNoPatientLinksExist();\n+\t\tassertNoPractitionerLinksExist();\n+\t}\n+\n+\tprivate void assertNoPatientLinksExist() {\n+\t\tassertThat(getPatientLinks(), hasSize(0));\n+\t}\n+\n+\tprivate void assertNoPractitionerLinksExist() {\n+\t\tassertThat(getPractitionerLinks(), hasSize(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPatientLinks() {\n+\t\tassertLinkCount(2);\n+\t\tPerson read = myPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Patient\"));\n+\t\tassertNoPatientLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\n+\t}\n+\t@Test\n+\tpublic void testPersonsWithMultipleHistoricalVersionsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoPatientLinksExist();\n+\t}\n+\n+\t@Test\n+\tpublic void testPersonWithLinksToOtherPersonsCanBeDeleted() {\n+\t\tcreatePatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks1 = createPatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks = createPatientAndUpdateLinks(buildPaulPatient());\n+\n+\t\tPerson personFromTarget = getPersonFromTarget(patientAndUpdateLinks);\n+\t\tPerson personFromTarget2 = getPersonFromTarget(patientAndUpdateLinks1);\n+\t\tlinkPersons(personFromTarget, personFromTarget2);\n+\n+\t\t//SUT\n+\t\tmyEmpiProviderR4.clearEmpiLinks(null);\n+\n+\t\tassertNoPatientLinksExist();\n+\t\tIBundleProvider search = myPersonDao.search(new SearchParameterMap().setLoadSynchronous(true));\n+\t\tassertThat(search.size(), is(equalTo(0)));\n+\t}\n+\n+\t@Test\n+\tpublic void testPersonsWithCircularReferenceCanBeCleared() {\n+\t\tPatient patientAndUpdateLinks = createPatientAndUpdateLinks(buildPaulPatient());\n+\t\tPatient patientAndUpdateLinks1 = createPatientAndUpdateLinks(buildJanePatient());\n+\t\tPatient patientAndUpdateLinks2 = createPatientAndUpdateLinks(buildFrankPatient());\n+\n+\t\tPerson personFromTarget = getPersonFromTarget(patientAndUpdateLinks);\n+\t\tPerson personFromTarget1 = getPersonFromTarget(patientAndUpdateLinks1);\n+\t\tPerson personFromTarget2 = getPersonFromTarget(patientAndUpdateLinks2);\n+\n+\t\t// A -> B -> C -> A linkages.\n+\t\tlinkPersons(personFromTarget, personFromTarget1);\n+\t\tlinkPersons(personFromTarget1, personFromTarget2);\n+\t\tlinkPersons(personFromTarget2, personFromTarget);\n+\n+\t\t//SUT\n+\t\tParameters parameters = myEmpiProviderR4.clearEmpiLinks(null);\n+\t\tassertNoPatientLinksExist();\n+\t\tIBundleProvider search = myPersonDao.search(new SearchParameterMap().setLoadSynchronous(true));\n+\t\tassertThat(search.size(), is(equalTo(0)));\n+\n+\t}\n+\n+\tprivate void linkPersons(Person theSourcePerson, Person theTargetPerson) {\n+\t\tPerson.PersonLinkComponent plc1 = new Person.PersonLinkComponent();\n+\t\tplc1.setAssurance(Person.IdentityAssuranceLevel.LEVEL2);\n+\t\tplc1.setTarget(new Reference(theTargetPerson.getIdElement().toUnqualifiedVersionless()));\n+\t\ttheSourcePerson.getLink().add(plc1);\n+\t\tmyPersonDao.update(theSourcePerson);\n+\t}\n+\n+\t@Test\n+\tpublic void testClearPractitionerLinks() {\n+\t\tassertLinkCount(2);\n+\t\tPerson read = myPersonDao.read(new IdDt(myPractitionerPersonId.getValueAsString()).toVersionless());\n+\t\tassertThat(read, is(notNullValue()));\n+\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Practitioner\"));\n+\t\tassertNoPractitionerLinksExist();\n+\t\ttry {\n+\t\t\tmyPersonDao.read(new IdDt(myPractitionerPersonId.getValueAsString()).toVersionless());\n+\t\t\tfail();\n+\t\t} catch (ResourceNotFoundException e) {}\n+\t}\n+\n+\t@Test\n+\tpublic void testClearInvalidTargetType() {\n+\t\ttry {\n+\t\t\tmyEmpiProviderR4.clearEmpiLinks(new StringType(\"Observation\"));\n+\t\t\tfail();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertThat(e.getMessage(), is(equalTo(\"$empi-clear does not support resource type: Observation\")));\n+\t\t}\n+\t}\n+\n+\n+\t@Nonnull\n+\tprotected EmpiLink getOnlyPractitionerLink() {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzMzMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983333", "bodyText": "unused", "author": "fil512", "createdAt": "2020-08-01T17:36:44Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/BaseEmpiR4Test.java", "diffHunk": "@@ -101,6 +104,8 @@\n \tEmpiSearchParameterLoader myEmpiSearchParameterLoader;\n \t@Autowired\n \tSearchParamRegistryImpl mySearchParamRegistry;\n+\t@Autowired\n+\tprivate IEmpiBatchSvc myEmpiBatchService;", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzQyOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983429", "bodyText": "use constant from entity class for length", "author": "fil512", "createdAt": "2020-08-01T17:37:54Z", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -138,6 +138,9 @@ protected void init510() {\n \t\tempiLink.addColumn(\"20200715.5\", \"SCORE\").nullable().type(ColumnTypeEnum.FLOAT);\n \n \t\tinit510_20200725();\n+\n+\t\t//EMPI Target Type\n+\t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, 40);", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzYyNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983624", "bodyText": "unused", "author": "fil512", "createdAt": "2020-08-01T17:40:24Z", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/provider/ProviderConstants.java", "diffHunk": "@@ -81,4 +81,13 @@\n \n \tpublic static final String EMPI_DUPLICATE_PERSONS = \"$empi-duplicate-persons\";\n \tpublic static final String EMPI_NOT_DUPLICATE = \"$empi-not-duplicate\";\n+\n+\tpublic static final String EMPI_CLEAR = \"$empi-clear\";\n+\tpublic static final String EMPI_CLEAR_TARGET_TYPE = \"targetType\";\n+\tpublic static final String OPERATION_EMPI_BATCH_RUN = \"$empi-batch-run\";\n+\tpublic static final String EMPI_BATCH_RUN_TARGET_TYPE = \"targetType\" ;", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4MzYzNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983637", "bodyText": "unused", "author": "fil512", "createdAt": "2020-08-01T17:40:31Z", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/provider/ProviderConstants.java", "diffHunk": "@@ -81,4 +81,13 @@\n \n \tpublic static final String EMPI_DUPLICATE_PERSONS = \"$empi-duplicate-persons\";\n \tpublic static final String EMPI_NOT_DUPLICATE = \"$empi-not-duplicate\";\n+\n+\tpublic static final String EMPI_CLEAR = \"$empi-clear\";\n+\tpublic static final String EMPI_CLEAR_TARGET_TYPE = \"targetType\";\n+\tpublic static final String OPERATION_EMPI_BATCH_RUN = \"$empi-batch-run\";\n+\tpublic static final String EMPI_BATCH_RUN_TARGET_TYPE = \"targetType\" ;\n+\tpublic static final String EMPI_BATCH_RUN_CRITERIA= \"criteria\" ;\n+\tpublic static final String EMPI_BATCH_RUN_RESOURCE_IDS = \"resourceIds\" ;", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mzc1OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983758", "bodyText": "TODO", "author": "fil512", "createdAt": "2020-08-01T17:41:53Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiChannelSubmitterSvc.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package ca.uhn.fhir.empi.api;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+public interface IEmpiChannelSubmitterSvc {\n+\n+\t/**\n+\t * TODO GGG write javadoc", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5NjY2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463996668", "bodyText": "da30772", "author": "tadgh", "createdAt": "2020-08-01T20:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mzc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mzk0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1984#discussion_r463983941", "bodyText": "Oops missed this the first time around.\nPlease remove the try/catch.  This needs to throw an exception if it fails so the test fails.\nAs written, junit has no way of knowing the assertion failed.", "author": "fil512", "createdAt": "2020-08-01T17:44:18Z", "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/test/concurrency/PointcutLatch.java", "diffHunk": "@@ -67,6 +67,17 @@ public PointcutLatch(String theName) {\n \t\tmyPointcut = null;\n \t}\n \n+\tpublic void runWithExpectedCount(int theExpectedCount, Runnable r) {\n+\t\tthis.setExpectedCount(theExpectedCount);\n+\t\tr.run();\n+\t\ttry {", "originalCommit": "bd22b0239f6b59994959b648e75744b6d9dcf272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4d3cecaab289bc5327cd2a3f7bf9a8f19be93e72", "url": "https://github.com/hapifhir/hapi-fhir/commit/4d3cecaab289bc5327cd2a3f7bf9a8f19be93e72", "message": "Fix pointcutlatch issue", "committedDate": "2020-08-01T18:12:28Z", "type": "commit"}, {"oid": "7299162f10ea9ad4b80a8d1a420f86a719dd0421", "url": "https://github.com/hapifhir/hapi-fhir/commit/7299162f10ea9ad4b80a8d1a420f86a719dd0421", "message": "Update doc phrasing", "committedDate": "2020-08-01T18:31:28Z", "type": "commit"}, {"oid": "dfecca33bcd9d271b1bb0f5f5e5299eb60f3cb53", "url": "https://github.com/hapifhir/hapi-fhir/commit/dfecca33bcd9d271b1bb0f5f5e5299eb60f3cb53", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-08-01T18:32:30Z", "type": "commit"}, {"oid": "e67ee364920f75d4cb294594e4f221403a9de634", "url": "https://github.com/hapifhir/hapi-fhir/commit/e67ee364920f75d4cb294594e4f221403a9de634", "message": "Renamed and modified reset constant for better naming", "committedDate": "2020-08-01T18:36:14Z", "type": "commit"}, {"oid": "3179e34bcece06a85049316f345deafa3849ac57", "url": "https://github.com/hapifhir/hapi-fhir/commit/3179e34bcece06a85049316f345deafa3849ac57", "message": "Merge branch 'batch-empi-job' of github.com:jamesagnew/hapi-fhir into batch-empi-job", "committedDate": "2020-08-01T18:36:21Z", "type": "commit"}, {"oid": "9c5b69bb6e9b972fef32a428cb0bebc87aabdd71", "url": "https://github.com/hapifhir/hapi-fhir/commit/9c5b69bb6e9b972fef32a428cb0bebc87aabdd71", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-08-01T18:37:11Z", "type": "commit"}, {"oid": "4c64cec8facbfc04919733942424b176d0089ce5", "url": "https://github.com/hapifhir/hapi-fhir/commit/4c64cec8facbfc04919733942424b176d0089ce5", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-08-01T18:40:24Z", "type": "commit"}, {"oid": "8b378995b2e71fbf415b91759502a1056fb73d6a", "url": "https://github.com/hapifhir/hapi-fhir/commit/8b378995b2e71fbf415b91759502a1056fb73d6a", "message": "Doc updates", "committedDate": "2020-08-01T18:45:47Z", "type": "commit"}, {"oid": "efaf09fbfac34e7d8d5fc82b35c357a54b616e6c", "url": "https://github.com/hapifhir/hapi-fhir/commit/efaf09fbfac34e7d8d5fc82b35c357a54b616e6c", "message": "Fix java.lang.string in empiLink entity", "committedDate": "2020-08-01T18:47:00Z", "type": "commit"}, {"oid": "0ef1665061ce7a5e6ddc2fb0d1dd2f32e2398eb3", "url": "https://github.com/hapifhir/hapi-fhir/commit/0ef1665061ce7a5e6ddc2fb0d1dd2f32e2398eb3", "message": "Merge branch 'batch-empi-job' of github.com:jamesagnew/hapi-fhir into batch-empi-job", "committedDate": "2020-08-01T18:48:27Z", "type": "commit"}, {"oid": "1d6a26bf1deb30c9b3a1f409b56a0574f52d7bea", "url": "https://github.com/hapifhir/hapi-fhir/commit/1d6a26bf1deb30c9b3a1f409b56a0574f52d7bea", "message": "Remove unused method", "committedDate": "2020-08-01T18:49:07Z", "type": "commit"}, {"oid": "0a4d81eb850c0fe2d2164839c8fe8f774def8b16", "url": "https://github.com/hapifhir/hapi-fhir/commit/0a4d81eb850c0fe2d2164839c8fe8f774def8b16", "message": "Move getNextBatch into IResultIterator", "committedDate": "2020-08-01T20:00:55Z", "type": "commit"}, {"oid": "995c188305b7223baceefaa8780f4be65df066ef", "url": "https://github.com/hapifhir/hapi-fhir/commit/995c188305b7223baceefaa8780f4be65df066ef", "message": "implement function for all concrete classe", "committedDate": "2020-08-01T20:03:37Z", "type": "commit"}, {"oid": "b0d301b2450fe8cb0ae2b0da602db7e6878b4c39", "url": "https://github.com/hapifhir/hapi-fhir/commit/b0d301b2450fe8cb0ae2b0da602db7e6878b4c39", "message": "Remove constructor argument that was unused", "committedDate": "2020-08-01T20:04:22Z", "type": "commit"}, {"oid": "0d90bbcc9c3af740a700fd4ceb69c39e14f1d6f7", "url": "https://github.com/hapifhir/hapi-fhir/commit/0d90bbcc9c3af740a700fd4ceb69c39e14f1d6f7", "message": "Add escape hatch to while loop", "committedDate": "2020-08-01T20:06:25Z", "type": "commit"}, {"oid": "3068fe8c1aac329c0f2441a40b56f081fcc465c1", "url": "https://github.com/hapifhir/hapi-fhir/commit/3068fe8c1aac329c0f2441a40b56f081fcc465c1", "message": "Rework escape hatch to error", "committedDate": "2020-08-01T20:08:29Z", "type": "commit"}, {"oid": "c8dfd0086438cbbf3e719d1e2e14c4c99dee9532", "url": "https://github.com/hapifhir/hapi-fhir/commit/c8dfd0086438cbbf3e719d1e2e14c4c99dee9532", "message": "Remove dead comments", "committedDate": "2020-08-01T20:09:23Z", "type": "commit"}, {"oid": "2cf48eb9b9577146e6fd2636d3a0d3b4e745aafc", "url": "https://github.com/hapifhir/hapi-fhir/commit/2cf48eb9b9577146e6fd2636d3a0d3b4e745aafc", "message": "Move field length into constants", "committedDate": "2020-08-01T20:11:33Z", "type": "commit"}, {"oid": "46251af81aea5691bfba9993b4178b1437831575", "url": "https://github.com/hapifhir/hapi-fhir/commit/46251af81aea5691bfba9993b4178b1437831575", "message": "Rename queue to channel", "committedDate": "2020-08-01T20:12:32Z", "type": "commit"}, {"oid": "ad887428b382d5d7c6e2b15f18e09d8ec917d015", "url": "https://github.com/hapifhir/hapi-fhir/commit/ad887428b382d5d7c6e2b15f18e09d8ec917d015", "message": "Add removeAll function to DeleteConflictList", "committedDate": "2020-08-01T20:15:22Z", "type": "commit"}, {"oid": "ac5d261a7feb35b7e23aeed0963854c5d603ca4c", "url": "https://github.com/hapifhir/hapi-fhir/commit/ac5d261a7feb35b7e23aeed0963854c5d603ca4c", "message": "Doc updates and flip logic order in SearchParamSVc", "committedDate": "2020-08-01T20:16:50Z", "type": "commit"}, {"oid": "160155bd8f1ea695eba2fd00c99a7c242100c2ec", "url": "https://github.com/hapifhir/hapi-fhir/commit/160155bd8f1ea695eba2fd00c99a7c242100c2ec", "message": "Update test to ensure start state is correct", "committedDate": "2020-08-01T20:17:51Z", "type": "commit"}, {"oid": "da30772a017b50e48d684c24b6480485c83f5c24", "url": "https://github.com/hapifhir/hapi-fhir/commit/da30772a017b50e48d684c24b6480485c83f5c24", "message": "Remove dead methods, constants, and add a javadoc", "committedDate": "2020-08-01T20:19:52Z", "type": "commit"}, {"oid": "b8a3a6e356424f284c0c9f3855287c9605941c93", "url": "https://github.com/hapifhir/hapi-fhir/commit/b8a3a6e356424f284c0c9f3855287c9605941c93", "message": "Update test", "committedDate": "2020-08-02T00:35:04Z", "type": "commit"}, {"oid": "3b9f9e6cc39c3ca80a4e62029fb3ffaa042baeee", "url": "https://github.com/hapifhir/hapi-fhir/commit/3b9f9e6cc39c3ca80a4e62029fb3ffaa042baeee", "message": "Rename operation", "committedDate": "2020-08-04T04:35:12Z", "type": "commit"}]}