{"pr_number": 1867, "pr_title": "Im 20200316 lastn operation elasticsearch", "pr_createdAt": "2020-05-25T22:40:01Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1867", "timeline": [{"oid": "4e4c8dbd9a4d395c30445508ee077f0882a47191", "url": "https://github.com/hapifhir/hapi-fhir/commit/4e4c8dbd9a4d395c30445508ee077f0882a47191", "message": "Initial commit of changes to support $lastn operation.", "committedDate": "2020-03-25T22:02:13Z", "type": "commit"}, {"oid": "83fde618461afa474a382f4a06023eb4b6f015a2", "url": "https://github.com/hapifhir/hapi-fhir/commit/83fde618461afa474a382f4a06023eb4b6f015a2", "message": "Initial commit of changes to support $lastn operation.", "committedDate": "2020-03-25T22:02:57Z", "type": "commit"}, {"oid": "f891634341d8ab03b0319d9988101043b6bff216", "url": "https://github.com/hapifhir/hapi-fhir/commit/f891634341d8ab03b0319d9988101043b6bff216", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch", "committedDate": "2020-03-31T17:30:28Z", "type": "commit"}, {"oid": "f819c91530b591d714c7da278cec5745a3d91fc6", "url": "https://github.com/hapifhir/hapi-fhir/commit/f819c91530b591d714c7da278cec5745a3d91fc6", "message": "Initial implementation of lastn operation.", "committedDate": "2020-04-01T01:55:57Z", "type": "commit"}, {"oid": "a302d26eb160c0a10db0a38259d15f7e18146139", "url": "https://github.com/hapifhir/hapi-fhir/commit/a302d26eb160c0a10db0a38259d15f7e18146139", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch", "committedDate": "2020-04-01T01:57:26Z", "type": "commit"}, {"oid": "83e673e725bc70a9dbf069b1f461cde680b37657", "url": "https://github.com/hapifhir/hapi-fhir/commit/83e673e725bc70a9dbf069b1f461cde680b37657", "message": "Consolidate changes to Command Line Tool and add/improve tests.", "committedDate": "2020-04-03T21:12:04Z", "type": "commit"}, {"oid": "e64d67f4290cf63dd695479d1cbefd7de86b90bc", "url": "https://github.com/hapifhir/hapi-fhir/commit/e64d67f4290cf63dd695479d1cbefd7de86b90bc", "message": "Consolidate changes to Command Line Tool and add/improve tests.", "committedDate": "2020-04-10T20:58:00Z", "type": "commit"}, {"oid": "af11763dee300d6189332af4e1fd637e08c9ebde", "url": "https://github.com/hapifhir/hapi-fhir/commit/af11763dee300d6189332af4e1fd637e08c9ebde", "message": "Fixes to command line tool, clean-up and minor re-factoring.", "committedDate": "2020-04-13T12:56:56Z", "type": "commit"}, {"oid": "0f9bdbd3afd5546a72afd336a7a525d9095250f9", "url": "https://github.com/hapifhir/hapi-fhir/commit/0f9bdbd3afd5546a72afd336a7a525d9095250f9", "message": "Undid previous re-factoring and fixed a bug introduced in last commit.", "committedDate": "2020-04-13T20:14:38Z", "type": "commit"}, {"oid": "925bbbbcdc728db41220074a838cabd96eee324a", "url": "https://github.com/hapifhir/hapi-fhir/commit/925bbbbcdc728db41220074a838cabd96eee324a", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch\n\n# Conflicts:\n#\thapi-fhir-cli/hapi-fhir-cli-api/src/main/java/ca/uhn/fhir/cli/RunServerCommand.java\n#\thapi-fhir-cli/hapi-fhir-cli-jpaserver/src/main/java/ca/uhn/fhir/jpa/demo/CommonConfig.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/dstu3/BaseDstu3Config.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/r4/BaseR4Config.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/r5/BaseR5Config.java\n#\tpom.xml", "committedDate": "2020-04-13T22:35:15Z", "type": "commit"}, {"oid": "d03ce6533edd0507194c93464024702642f465cc", "url": "https://github.com/hapifhir/hapi-fhir/commit/d03ce6533edd0507194c93464024702642f465cc", "message": "Fixed conflicts after merging latest from Master.", "committedDate": "2020-04-14T00:01:34Z", "type": "commit"}, {"oid": "4a89860f9b343d5c6553c4c60161782e8187b5c2", "url": "https://github.com/hapifhir/hapi-fhir/commit/4a89860f9b343d5c6553c4c60161782e8187b5c2", "message": "Additional tests and cleanup.", "committedDate": "2020-04-17T21:38:42Z", "type": "commit"}, {"oid": "540375a7ebe6233afe7b9765cbb2c0e9ff5a0c91", "url": "https://github.com/hapifhir/hapi-fhir/commit/540375a7ebe6233afe7b9765cbb2c0e9ff5a0c91", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch", "committedDate": "2020-04-17T21:39:27Z", "type": "commit"}, {"oid": "197bf2b6a851d4918fb7c44b6b49832cc018d2e0", "url": "https://github.com/hapifhir/hapi-fhir/commit/197bf2b6a851d4918fb7c44b6b49832cc018d2e0", "message": "Further refinements and test fixes.", "committedDate": "2020-04-24T03:21:45Z", "type": "commit"}, {"oid": "0e45db0ba92e3d693ddca05f893d38dcac2973e3", "url": "https://github.com/hapifhir/hapi-fhir/commit/0e45db0ba92e3d693ddca05f893d38dcac2973e3", "message": "More cleanup and test fixes.", "committedDate": "2020-04-24T20:23:59Z", "type": "commit"}, {"oid": "dd749791dbcea6614ad491280809f168e8a45eb6", "url": "https://github.com/hapifhir/hapi-fhir/commit/dd749791dbcea6614ad491280809f168e8a45eb6", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch\n\n# Conflicts:\n#\thapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "committedDate": "2020-04-24T20:55:45Z", "type": "commit"}, {"oid": "3e49e5615fe5772e10075988e786a63b0aee5906", "url": "https://github.com/hapifhir/hapi-fhir/commit/3e49e5615fe5772e10075988e786a63b0aee5906", "message": "Fixing merge conflicts after merge from Master.", "committedDate": "2020-04-26T02:14:55Z", "type": "commit"}, {"oid": "4db5beeabf0094ae3ad242dfd0c2ae8369713b23", "url": "https://github.com/hapifhir/hapi-fhir/commit/4db5beeabf0094ae3ad242dfd0c2ae8369713b23", "message": "Additional changes to enable processing of lastn operations with large numbers of parameters.", "committedDate": "2020-05-05T20:53:47Z", "type": "commit"}, {"oid": "4cced40b54ea5da14b28fe74c0ad8eb116689a96", "url": "https://github.com/hapifhir/hapi-fhir/commit/4cced40b54ea5da14b28fe74c0ad8eb116689a96", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch\n\n# Conflicts:\n#\thapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "committedDate": "2020-05-05T21:19:32Z", "type": "commit"}, {"oid": "1e882d640d8125ecab399b37ad7fe4bb0623f3f4", "url": "https://github.com/hapifhir/hapi-fhir/commit/1e882d640d8125ecab399b37ad7fe4bb0623f3f4", "message": "Merging with latest from Master.", "committedDate": "2020-05-05T21:35:22Z", "type": "commit"}, {"oid": "c290fa3493d61112601bfeab0bd3fddb005a8406", "url": "https://github.com/hapifhir/hapi-fhir/commit/c290fa3493d61112601bfeab0bd3fddb005a8406", "message": "Fixes to enable $lastn to return more than 32K records.", "committedDate": "2020-05-08T13:19:14Z", "type": "commit"}, {"oid": "e56cb049f76154ded8466affeeb417206988ef45", "url": "https://github.com/hapifhir/hapi-fhir/commit/e56cb049f76154ded8466affeeb417206988ef45", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch", "committedDate": "2020-05-08T13:19:44Z", "type": "commit"}, {"oid": "8fcdc780777a0e746a6190403180a1e9401571fb", "url": "https://github.com/hapifhir/hapi-fhir/commit/8fcdc780777a0e746a6190403180a1e9401571fb", "message": "Fix issues resulting from latest merge.", "committedDate": "2020-05-08T13:31:05Z", "type": "commit"}, {"oid": "eb1d1c2b27c31edd0a10d83d857af63e01db6506", "url": "https://github.com/hapifhir/hapi-fhir/commit/eb1d1c2b27c31edd0a10d83d857af63e01db6506", "message": "Changes to better support chunking of queries and paging of results for lastn operation and to monitor performance.", "committedDate": "2020-05-14T16:08:55Z", "type": "commit"}, {"oid": "529e1e1f5e95e31d824a07125be996a9a84b33a0", "url": "https://github.com/hapifhir/hapi-fhir/commit/529e1e1f5e95e31d824a07125be996a9a84b33a0", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch", "committedDate": "2020-05-14T16:09:24Z", "type": "commit"}, {"oid": "6a27192a96290fb44040a022657dc62ee292bac7", "url": "https://github.com/hapifhir/hapi-fhir/commit/6a27192a96290fb44040a022657dc62ee292bac7", "message": "Fixed sorting with chunked and paged queries.", "committedDate": "2020-05-19T18:48:26Z", "type": "commit"}, {"oid": "d2b54d6203440242cdc430b5cbaec0ed827ce078", "url": "https://github.com/hapifhir/hapi-fhir/commit/d2b54d6203440242cdc430b5cbaec0ed827ce078", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch\n\n# Conflicts:\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilder.java", "committedDate": "2020-05-19T19:20:06Z", "type": "commit"}, {"oid": "3b7f106052dba7ced263e9c889a158e1c3929b78", "url": "https://github.com/hapifhir/hapi-fhir/commit/3b7f106052dba7ced263e9c889a158e1c3929b78", "message": "Fixed latest merge conflicts.", "committedDate": "2020-05-19T20:34:05Z", "type": "commit"}, {"oid": "645a0d3681bc088c8040ddb19989f1f9961fe820", "url": "https://github.com/hapifhir/hapi-fhir/commit/645a0d3681bc088c8040ddb19989f1f9961fe820", "message": "Removing extra file that was mistakenly committed.", "committedDate": "2020-05-19T20:37:40Z", "type": "commit"}, {"oid": "4d378ee0ed0cefbae2c98d650d90819585494d6a", "url": "https://github.com/hapifhir/hapi-fhir/commit/4d378ee0ed0cefbae2c98d650d90819585494d6a", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch\n\n# Conflicts:\n#\thapi-fhir-cli/hapi-fhir-cli-jpaserver/src/main/java/ca/uhn/fhir/jpa/demo/CommonConfig.java\n#\thapi-fhir-jpaserver-base/pom.xml\n#\thapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java\n#\thapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/ISearchParamExtractor.java", "committedDate": "2020-05-22T21:04:01Z", "type": "commit"}, {"oid": "35b75f8ffb0536c075f7e4079bc89bc48e994b71", "url": "https://github.com/hapifhir/hapi-fhir/commit/35b75f8ffb0536c075f7e4079bc89bc48e994b71", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch", "committedDate": "2020-05-23T19:54:23Z", "type": "commit"}, {"oid": "816f409a8a8ce0931cb586e28cd4628e1d40fdf8", "url": "https://github.com/hapifhir/hapi-fhir/commit/816f409a8a8ce0931cb586e28cd4628e1d40fdf8", "message": "Re-factor lastn entities to locate them is same package as other Search Parameter entities.", "committedDate": "2020-05-25T15:37:01Z", "type": "commit"}, {"oid": "ee87a2e2d0f20fd57030698473727cf5163ab0e4", "url": "https://github.com/hapifhir/hapi-fhir/commit/ee87a2e2d0f20fd57030698473727cf5163ab0e4", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch", "committedDate": "2020-05-25T15:37:34Z", "type": "commit"}, {"oid": "6ed724e01b75421614bbe53e40a062b000160735", "url": "https://github.com/hapifhir/hapi-fhir/commit/6ed724e01b75421614bbe53e40a062b000160735", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch", "committedDate": "2020-05-25T21:40:53Z", "type": "commit"}, {"oid": "1e554731bbbac773667e3f9fd0b630c170d9b065", "url": "https://github.com/hapifhir/hapi-fhir/commit/1e554731bbbac773667e3f9fd0b630c170d9b065", "message": "Additional cleanup and test fixes.", "committedDate": "2020-05-25T22:25:25Z", "type": "commit"}, {"oid": "a63d90c1f5c5659eefaa8cbccd32d9bf08a8e1de", "url": "https://github.com/hapifhir/hapi-fhir/commit/a63d90c1f5c5659eefaa8cbccd32d9bf08a8e1de", "message": "Additional cleanup and test fixes.", "committedDate": "2020-05-25T22:36:04Z", "type": "commit"}, {"oid": "b250ac4f3dc151c8a880cc382b239673ee8fe0f5", "url": "https://github.com/hapifhir/hapi-fhir/commit/b250ac4f3dc151c8a880cc382b239673ee8fe0f5", "message": "Add a change log.", "committedDate": "2020-05-25T22:42:17Z", "type": "commit"}, {"oid": "5cc77b78d48797949357138b5814153538dfaffd", "url": "https://github.com/hapifhir/hapi-fhir/commit/5cc77b78d48797949357138b5814153538dfaffd", "message": "Fixed problems with results of chunked queries being incorrectly sorted.", "committedDate": "2020-05-26T22:09:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI5NzY1Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431297657", "bodyText": "Is the embedded elasticsearch actually exposing itself on the port on the whole system? It looks like it is, I'm wondering if there are any security implications to not securing it, or are we leaving it up to implementers to make sure they don't expose the port publicly?", "author": "tadgh", "createdAt": "2020-05-27T16:55:36Z", "path": "hapi-fhir-cli/hapi-fhir-cli-jpaserver/src/main/java/ca/uhn/fhir/jpa/demo/CommonConfig.java", "diffHunk": "@@ -100,7 +110,55 @@ public Properties jpaProperties() {\n \t\t\textraProperties.put(\"hibernate.search.autoregister_listeners\", \"false\");\n \t\t}\n \n-\t\treturn extraProperties;\n+\t\treturn configureElasticearch(extraProperties);\n+\t}\n+\n+\tprivate Properties configureElasticearch(Properties theExtraProperties) {\n+\n+\t\tString elasticsearchHost = \"localhost\";\n+\t\tString elasticsearchUserId = \"\";\n+\t\tString elasticsearchPassword = \"\";\n+\t\tint elasticsearchPort = embeddedElasticSearch().getHttpPort();\n+\n+\t\tnew ElasticsearchHibernatePropertiesBuilder()\n+\t\t\t.setDebugRefreshAfterWrite(true)\n+\t\t\t.setDebugPrettyPrintJsonLog(true)\n+\t\t\t.setIndexSchemaManagementStrategy(IndexSchemaManagementStrategy.CREATE)\n+\t\t\t.setIndexManagementWaitTimeoutMillis(10000)\n+\t\t\t.setRequiredIndexStatus(ElasticsearchIndexStatus.YELLOW)\n+\t\t\t.setRestUrl(\"http://\" + elasticsearchHost + \":\" + elasticsearchPort)\n+\t\t\t.setUsername(elasticsearchUserId)\n+\t\t\t.setPassword(elasticsearchPassword)\n+\t\t\t.apply(theExtraProperties);", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI5OTIzNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431299236", "bodyText": "Would love to see a javadoc here if possible!", "author": "tadgh", "createdAt": "2020-05-27T16:57:49Z", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDaoObservation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package ca.uhn.fhir.jpa.api.dao;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+public interface IFhirResourceDaoObservation<T extends IBaseResource> extends IFhirResourceDao<T> {\n+\n+\tIBundleProvider observationsLastN(SearchParameterMap paramMap, RequestDetails theRequestDetails, HttpServletResponse theServletResponse);", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyNjE1NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431826155", "bodyText": "Good point, will update this with some descriptive documentation.", "author": "IanMMarshall", "createdAt": "2020-05-28T13:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI5OTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1Mzk1MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432153951", "bodyText": "Done will include in next commit.", "author": "IanMMarshall", "createdAt": "2020-05-28T22:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI5OTIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzNTU4Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431335582", "bodyText": "What happens when the user submits other sort orders in the query? Looks here like we silently drop them, I imagine this is the correct", "author": "tadgh", "createdAt": "2020-05-27T17:55:15Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDaoObservation.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoObservation;\n+import ca.uhn.fhir.jpa.partition.IRequestPartitionHelperSvc;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.api.*;\n+import ca.uhn.fhir.rest.api.server.*;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.instance.model.api.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.TreeMap;\n+\n+public abstract class BaseHapiFhirResourceDaoObservation<T extends IBaseResource> extends BaseHapiFhirResourceDao<T> implements IFhirResourceDaoObservation<T> {\n+\n+\t@Autowired\n+\tprivate IRequestPartitionHelperSvc myRequestPartitionHelperService;\n+\n+\tprotected void updateSearchParamsForLastn(SearchParameterMap theSearchParameterMap, RequestDetails theRequestDetails) {\n+\t\tif (!isPagingProviderDatabaseBacked(theRequestDetails)) {\n+\t\t\ttheSearchParameterMap.setLoadSynchronous(true);\n+\t\t}\n+\n+\t\ttheSearchParameterMap.setLastN(true);\n+\t\tSortSpec effectiveDtm = new SortSpec(getEffectiveParamName()).setOrder(SortOrderEnum.DESC);\n+\t\tSortSpec observationCode = new SortSpec(getCodeParamName()).setOrder(SortOrderEnum.ASC).setChain(effectiveDtm);", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzOTcxNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431839715", "bodyText": "Correct. For now at least the lastn operation will not be able to support user-specified sort order. As for whether this is correct, may be open for later discussion. I will add some comments to the code here to provide some additional context/rationale as we may want to revisit this at a later time.", "author": "IanMMarshall", "createdAt": "2020-05-28T13:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzNTU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTIyNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431395227", "bodyText": "2 things:\n\nIs it worth checking if this is not size 1?\nThis whole arrow code section can be replaced with a stream i think\n\nString subjectId = subjectReferenceElement.stream()\n.map(refElement -> mySearchParameterExtractor.extractReferenceLinkFromResource(refElement, \"Observation.subject\"))\n.map(sPathAndRef -> sPathAndRef.getRef())\n.map(subjectRef -> subjectRef.getReferenceElement().getValue())\n.findFirst().orElse(null);\nProbably gotta throw some filter(Objects::nonNull) in there too. This may make it easier to read if you're partial to streams", "author": "tadgh", "createdAt": "2020-05-27T19:33:57Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/ObservationLastNIndexPersistSvc.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+import ca.uhn.fhir.context.*;\n+import ca.uhn.fhir.jpa.dao.data.IObservationIndexedCodeCodingSearchParamDao;\n+import ca.uhn.fhir.jpa.dao.data.IObservationIndexedSearchParamLastNDao;\n+import ca.uhn.fhir.jpa.model.cross.IBasePersistedResource;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCategoryCodeableConceptEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCategoryCodingEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodingEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamToken;\n+import ca.uhn.fhir.jpa.searchparam.extractor.ISearchParamExtractor;\n+import ca.uhn.fhir.jpa.searchparam.extractor.PathAndRef;\n+import org.hl7.fhir.instance.model.api.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import java.util.*;\n+\n+@Transactional(propagation = Propagation.REQUIRED)\n+public class ObservationLastNIndexPersistSvc {\n+\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\n+\t@Autowired\n+\tIObservationIndexedSearchParamLastNDao myResourceIndexedObservationLastNDao;\n+\n+\t@Autowired\n+\tIObservationIndexedCodeCodingSearchParamDao myObservationIndexedCodeCodingSearchParamDao;\n+\n+\t@Autowired\n+\tpublic ISearchParamExtractor mySearchParameterExtractor;\n+\n+\tpublic void indexObservation(IBaseResource theResource) {\n+\n+\t\tString subjectId = null;\n+\t\tList<IBase> subjectReferenceElement = mySearchParameterExtractor.extractValues(\"Observation.subject\", theResource);\n+\t\tif (subjectReferenceElement.size() == 1) {\n+\t\t\tPathAndRef subjectPathAndRef = mySearchParameterExtractor.extractReferenceLinkFromResource(subjectReferenceElement.get(0), \"Observation.subject\");\n+\t\t\tif (subjectPathAndRef != null) {\n+\t\t\t\tIBaseReference subjectReference = subjectPathAndRef.getRef();\n+\t\t\t\tif (subjectReference != null) {\n+\t\t\t\t\tsubjectId = subjectReference.getReferenceElement().getValue();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0NDE3Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431844177", "bodyText": "Regarding 1, I agree that this is something that should be considered. I will give some thought as to how best to address this case. Regarding 2, I like the suggestions, I will incorporate these.", "author": "IanMMarshall", "createdAt": "2020-05-28T13:42:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1MzY0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432453646", "bodyText": "Done. Will include these in next commit.", "author": "IanMMarshall", "createdAt": "2020-05-29T12:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTg3MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431395870", "bodyText": "Just to be clear, it is out of scope to get the Last 3 blood pressure observations that came into the system, regardless of who they are for ?", "author": "tadgh", "createdAt": "2020-05-27T19:35:08Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/ObservationLastNIndexPersistSvc.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+import ca.uhn.fhir.context.*;\n+import ca.uhn.fhir.jpa.dao.data.IObservationIndexedCodeCodingSearchParamDao;\n+import ca.uhn.fhir.jpa.dao.data.IObservationIndexedSearchParamLastNDao;\n+import ca.uhn.fhir.jpa.model.cross.IBasePersistedResource;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCategoryCodeableConceptEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCategoryCodingEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodingEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamToken;\n+import ca.uhn.fhir.jpa.searchparam.extractor.ISearchParamExtractor;\n+import ca.uhn.fhir.jpa.searchparam.extractor.PathAndRef;\n+import org.hl7.fhir.instance.model.api.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import java.util.*;\n+\n+@Transactional(propagation = Propagation.REQUIRED)\n+public class ObservationLastNIndexPersistSvc {\n+\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\n+\t@Autowired\n+\tIObservationIndexedSearchParamLastNDao myResourceIndexedObservationLastNDao;\n+\n+\t@Autowired\n+\tIObservationIndexedCodeCodingSearchParamDao myObservationIndexedCodeCodingSearchParamDao;\n+\n+\t@Autowired\n+\tpublic ISearchParamExtractor mySearchParameterExtractor;\n+\n+\tpublic void indexObservation(IBaseResource theResource) {\n+\n+\t\tString subjectId = null;\n+\t\tList<IBase> subjectReferenceElement = mySearchParameterExtractor.extractValues(\"Observation.subject\", theResource);\n+\t\tif (subjectReferenceElement.size() == 1) {\n+\t\t\tPathAndRef subjectPathAndRef = mySearchParameterExtractor.extractReferenceLinkFromResource(subjectReferenceElement.get(0), \"Observation.subject\");\n+\t\t\tif (subjectPathAndRef != null) {\n+\t\t\t\tIBaseReference subjectReference = subjectPathAndRef.getRef();\n+\t\t\t\tif (subjectReference != null) {\n+\t\t\t\t\tsubjectId = subjectReference.getReferenceElement().getValue();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tDate effectiveDtm = null;\n+\t\tList<IBase> effectiveDateElement = mySearchParameterExtractor.extractValues(\"Observation.effective\", theResource);\n+\t\tif (effectiveDateElement.size() == 1) {\n+\t\t\teffectiveDtm = mySearchParameterExtractor.extractDateFromResource(effectiveDateElement.get(0), \"Observation.effective\");\n+\t\t}\n+\n+\t\t// Build CodeableConcept entity for Observation.Code.\n+\t\tList<IBase> observationCodeCodeableConcepts = mySearchParameterExtractor.extractValues(\"Observation.code\", theResource);\n+\n+\n+\t\t// Only index for lastn if Observation has a subject, effective date/time and code\n+\t\tif (subjectId == null || effectiveDtm == null || observationCodeCodeableConcepts.size() == 0) {\n+\t\t\treturn;\n+\t\t}", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3MDIzNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431870235", "bodyText": "Actually no. Although I do not think that this was ever intended to be supported by the FHIR specification, the client who requested these changes does in fact have a use case that would essentially require LastN to support returning e.g.\n\nLast 3 blood pressure observations that came into the system, regardless of who they are for\n\nI am guessing that this question relates to the null/empty checks relating to subject, effective date/time and observation code. Let me take as second look a look at this.", "author": "IanMMarshall", "createdAt": "2020-05-28T14:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NDg3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432454875", "bodyText": "Changed this code to allow observations with null subject and/or effective date/time.", "author": "IanMMarshall", "createdAt": "2020-05-29T12:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTU5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431405599", "bodyText": "This function is quite long, and could probably do with having the last half of it split into a helper function called createOrUpdateIndexedObservation which handles that chunk", "author": "tadgh", "createdAt": "2020-05-27T19:54:11Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/ObservationLastNIndexPersistSvc.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+import ca.uhn.fhir.context.*;\n+import ca.uhn.fhir.jpa.dao.data.IObservationIndexedCodeCodingSearchParamDao;\n+import ca.uhn.fhir.jpa.dao.data.IObservationIndexedSearchParamLastNDao;\n+import ca.uhn.fhir.jpa.model.cross.IBasePersistedResource;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCategoryCodeableConceptEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCategoryCodingEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodingEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamToken;\n+import ca.uhn.fhir.jpa.searchparam.extractor.ISearchParamExtractor;\n+import ca.uhn.fhir.jpa.searchparam.extractor.PathAndRef;\n+import org.hl7.fhir.instance.model.api.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import java.util.*;\n+\n+@Transactional(propagation = Propagation.REQUIRED)\n+public class ObservationLastNIndexPersistSvc {\n+\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\n+\t@Autowired\n+\tIObservationIndexedSearchParamLastNDao myResourceIndexedObservationLastNDao;\n+\n+\t@Autowired\n+\tIObservationIndexedCodeCodingSearchParamDao myObservationIndexedCodeCodingSearchParamDao;\n+\n+\t@Autowired\n+\tpublic ISearchParamExtractor mySearchParameterExtractor;\n+\n+\tpublic void indexObservation(IBaseResource theResource) {\n+\n+\t\tString subjectId = null;\n+\t\tList<IBase> subjectReferenceElement = mySearchParameterExtractor.extractValues(\"Observation.subject\", theResource);\n+\t\tif (subjectReferenceElement.size() == 1) {\n+\t\t\tPathAndRef subjectPathAndRef = mySearchParameterExtractor.extractReferenceLinkFromResource(subjectReferenceElement.get(0), \"Observation.subject\");\n+\t\t\tif (subjectPathAndRef != null) {\n+\t\t\t\tIBaseReference subjectReference = subjectPathAndRef.getRef();\n+\t\t\t\tif (subjectReference != null) {\n+\t\t\t\t\tsubjectId = subjectReference.getReferenceElement().getValue();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tDate effectiveDtm = null;\n+\t\tList<IBase> effectiveDateElement = mySearchParameterExtractor.extractValues(\"Observation.effective\", theResource);\n+\t\tif (effectiveDateElement.size() == 1) {\n+\t\t\teffectiveDtm = mySearchParameterExtractor.extractDateFromResource(effectiveDateElement.get(0), \"Observation.effective\");\n+\t\t}\n+\n+\t\t// Build CodeableConcept entity for Observation.Code.\n+\t\tList<IBase> observationCodeCodeableConcepts = mySearchParameterExtractor.extractValues(\"Observation.code\", theResource);\n+\n+\n+\t\t// Only index for lastn if Observation has a subject, effective date/time and code\n+\t\tif (subjectId == null || effectiveDtm == null || observationCodeCodeableConcepts.size() == 0) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString resourcePID = theResource.getIdElement().getIdPart();\n+\n+\t\t// Determine if an index already exists for Observation:\n+\t\tboolean observationIndexUpdate = false;\n+\t\tObservationIndexedSearchParamLastNEntity indexedObservation = null;\n+\t\tif (resourcePID != null) {\n+\t\t\tindexedObservation = myResourceIndexedObservationLastNDao.findForIdentifier(resourcePID);\n+\t\t}\n+\t\tif (indexedObservation == null) {\n+\t\t\tindexedObservation = new ObservationIndexedSearchParamLastNEntity();\n+\t\t} else {\n+\t\t\tobservationIndexUpdate = true;\n+\t\t}\n+\n+\t\tindexedObservation.setEffectiveDtm(effectiveDtm);\n+\t\tindexedObservation.setIdentifier(resourcePID);\n+\t\tindexedObservation.setSubject(subjectId);\n+\n+\n+\t\t// Determine if a Normalized ID was created previously for Observation Code\n+\t\tboolean observationCodeUpdate = false;\n+\t\tString observationCodeNormalizedId = getCodeCodeableConceptIdIfExists(observationCodeCodeableConcepts.get(0));\n+\t\tif (observationCodeNormalizedId != null) {\n+\t\t\tobservationCodeUpdate = true;\n+\t\t}\n+\t\t// Generate a new a normalized ID if necessary\n+\t\tif (observationCodeNormalizedId == null) {\n+\t\t\tobservationCodeNormalizedId = UUID.randomUUID().toString();\n+\t\t}\n+\n+\t\t// Create/update normalized Observation Code index record\n+\t\tObservationIndexedCodeCodeableConceptEntity codeableConceptField = getCodeCodeableConcept(observationCodeCodeableConcepts.get(0), observationCodeNormalizedId);\n+\n+\t\t// Build CodeableConcept entities for Observation.Category\n+\t\tList<IBase> observationCategoryCodeableConcepts = mySearchParameterExtractor.extractValues(\"Observation.category\", theResource);\n+\t\tSet<ObservationIndexedCategoryCodeableConceptEntity> categoryCodeableConceptEntities = new HashSet<>();\n+\t\tfor (IBase categoryCodeableConcept : observationCategoryCodeableConcepts) {\n+\t\t\t// Build CodeableConcept entities for each category CodeableConcept\n+\t\t\tcategoryCodeableConceptEntities.add(getCategoryCodeableConceptEntities(categoryCodeableConcept));\n+\t\t}\n+\t\tindexedObservation.setCategoryCodeableConcepts(categoryCodeableConceptEntities);\n+\n+\t\tif (observationCodeUpdate) {\n+\t\t\tmyEntityManager.merge(codeableConceptField);\n+\t\t} else {\n+\t\t\tmyEntityManager.persist(codeableConceptField);\n+\t\t}\n+\n+\t\tindexedObservation.setObservationCode(codeableConceptField);\n+\t\tindexedObservation.setCodeNormalizedId(observationCodeNormalizedId);\n+\t\tif (observationIndexUpdate) {\n+\t\t\tmyEntityManager.merge(indexedObservation);\n+\t\t} else {\n+\t\t\tmyEntityManager.persist(indexedObservation);\n+\t\t}\n+", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MzQzNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432483435", "bodyText": "Good point. Have refactored this method to break it down and make it more readable.", "author": "IanMMarshall", "createdAt": "2020-05-29T13:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNTU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxNjc0OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431416748", "bodyText": "This function seems like a good candidate to return an Optional", "author": "tadgh", "createdAt": "2020-05-27T20:16:46Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/ObservationLastNIndexPersistSvc.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+import ca.uhn.fhir.context.*;\n+import ca.uhn.fhir.jpa.dao.data.IObservationIndexedCodeCodingSearchParamDao;\n+import ca.uhn.fhir.jpa.dao.data.IObservationIndexedSearchParamLastNDao;\n+import ca.uhn.fhir.jpa.model.cross.IBasePersistedResource;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCategoryCodeableConceptEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCategoryCodingEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodingEntity;\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamToken;\n+import ca.uhn.fhir.jpa.searchparam.extractor.ISearchParamExtractor;\n+import ca.uhn.fhir.jpa.searchparam.extractor.PathAndRef;\n+import org.hl7.fhir.instance.model.api.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import java.util.*;\n+\n+@Transactional(propagation = Propagation.REQUIRED)\n+public class ObservationLastNIndexPersistSvc {\n+\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\n+\t@Autowired\n+\tIObservationIndexedSearchParamLastNDao myResourceIndexedObservationLastNDao;\n+\n+\t@Autowired\n+\tIObservationIndexedCodeCodingSearchParamDao myObservationIndexedCodeCodingSearchParamDao;\n+\n+\t@Autowired\n+\tpublic ISearchParamExtractor mySearchParameterExtractor;\n+\n+\tpublic void indexObservation(IBaseResource theResource) {\n+\n+\t\tString subjectId = null;\n+\t\tList<IBase> subjectReferenceElement = mySearchParameterExtractor.extractValues(\"Observation.subject\", theResource);\n+\t\tif (subjectReferenceElement.size() == 1) {\n+\t\t\tPathAndRef subjectPathAndRef = mySearchParameterExtractor.extractReferenceLinkFromResource(subjectReferenceElement.get(0), \"Observation.subject\");\n+\t\t\tif (subjectPathAndRef != null) {\n+\t\t\t\tIBaseReference subjectReference = subjectPathAndRef.getRef();\n+\t\t\t\tif (subjectReference != null) {\n+\t\t\t\t\tsubjectId = subjectReference.getReferenceElement().getValue();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tDate effectiveDtm = null;\n+\t\tList<IBase> effectiveDateElement = mySearchParameterExtractor.extractValues(\"Observation.effective\", theResource);\n+\t\tif (effectiveDateElement.size() == 1) {\n+\t\t\teffectiveDtm = mySearchParameterExtractor.extractDateFromResource(effectiveDateElement.get(0), \"Observation.effective\");\n+\t\t}\n+\n+\t\t// Build CodeableConcept entity for Observation.Code.\n+\t\tList<IBase> observationCodeCodeableConcepts = mySearchParameterExtractor.extractValues(\"Observation.code\", theResource);\n+\n+\n+\t\t// Only index for lastn if Observation has a subject, effective date/time and code\n+\t\tif (subjectId == null || effectiveDtm == null || observationCodeCodeableConcepts.size() == 0) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString resourcePID = theResource.getIdElement().getIdPart();\n+\n+\t\t// Determine if an index already exists for Observation:\n+\t\tboolean observationIndexUpdate = false;\n+\t\tObservationIndexedSearchParamLastNEntity indexedObservation = null;\n+\t\tif (resourcePID != null) {\n+\t\t\tindexedObservation = myResourceIndexedObservationLastNDao.findForIdentifier(resourcePID);\n+\t\t}\n+\t\tif (indexedObservation == null) {\n+\t\t\tindexedObservation = new ObservationIndexedSearchParamLastNEntity();\n+\t\t} else {\n+\t\t\tobservationIndexUpdate = true;\n+\t\t}\n+\n+\t\tindexedObservation.setEffectiveDtm(effectiveDtm);\n+\t\tindexedObservation.setIdentifier(resourcePID);\n+\t\tindexedObservation.setSubject(subjectId);\n+\n+\n+\t\t// Determine if a Normalized ID was created previously for Observation Code\n+\t\tboolean observationCodeUpdate = false;\n+\t\tString observationCodeNormalizedId = getCodeCodeableConceptIdIfExists(observationCodeCodeableConcepts.get(0));\n+\t\tif (observationCodeNormalizedId != null) {\n+\t\t\tobservationCodeUpdate = true;\n+\t\t}\n+\t\t// Generate a new a normalized ID if necessary\n+\t\tif (observationCodeNormalizedId == null) {\n+\t\t\tobservationCodeNormalizedId = UUID.randomUUID().toString();\n+\t\t}\n+\n+\t\t// Create/update normalized Observation Code index record\n+\t\tObservationIndexedCodeCodeableConceptEntity codeableConceptField = getCodeCodeableConcept(observationCodeCodeableConcepts.get(0), observationCodeNormalizedId);\n+\n+\t\t// Build CodeableConcept entities for Observation.Category\n+\t\tList<IBase> observationCategoryCodeableConcepts = mySearchParameterExtractor.extractValues(\"Observation.category\", theResource);\n+\t\tSet<ObservationIndexedCategoryCodeableConceptEntity> categoryCodeableConceptEntities = new HashSet<>();\n+\t\tfor (IBase categoryCodeableConcept : observationCategoryCodeableConcepts) {\n+\t\t\t// Build CodeableConcept entities for each category CodeableConcept\n+\t\t\tcategoryCodeableConceptEntities.add(getCategoryCodeableConceptEntities(categoryCodeableConcept));\n+\t\t}\n+\t\tindexedObservation.setCategoryCodeableConcepts(categoryCodeableConceptEntities);\n+\n+\t\tif (observationCodeUpdate) {\n+\t\t\tmyEntityManager.merge(codeableConceptField);\n+\t\t} else {\n+\t\t\tmyEntityManager.persist(codeableConceptField);\n+\t\t}\n+\n+\t\tindexedObservation.setObservationCode(codeableConceptField);\n+\t\tindexedObservation.setCodeNormalizedId(observationCodeNormalizedId);\n+\t\tif (observationIndexUpdate) {\n+\t\t\tmyEntityManager.merge(indexedObservation);\n+\t\t} else {\n+\t\t\tmyEntityManager.persist(indexedObservation);\n+\t\t}\n+\n+\t}\n+\n+\tprivate ObservationIndexedCategoryCodeableConceptEntity getCategoryCodeableConceptEntities(IBase theValue) {\n+\t\tString text = mySearchParameterExtractor.getDisplayTextFromCodeableConcept(theValue);\n+\t\tObservationIndexedCategoryCodeableConceptEntity categoryCodeableConcept = new ObservationIndexedCategoryCodeableConceptEntity(text);\n+\n+\t\tList<IBase> codings = mySearchParameterExtractor.getCodingsFromCodeableConcept(theValue);\n+\t\tSet<ObservationIndexedCategoryCodingEntity> categoryCodingEntities = new HashSet<>();\n+\t\tfor (IBase nextCoding : codings) {\n+\t\t\tcategoryCodingEntities.add(getCategoryCoding(nextCoding));\n+\t\t}\n+\n+\t\tcategoryCodeableConcept.setObservationIndexedCategoryCodingEntitySet(categoryCodingEntities);\n+\n+\t\treturn categoryCodeableConcept;\n+\t}\n+\n+\tprivate ObservationIndexedCodeCodeableConceptEntity getCodeCodeableConcept(IBase theValue, String observationCodeNormalizedId) {\n+\t\tString text = mySearchParameterExtractor.getDisplayTextFromCodeableConcept(theValue);\n+\t\tObservationIndexedCodeCodeableConceptEntity codeCodeableConcept = new ObservationIndexedCodeCodeableConceptEntity(text, observationCodeNormalizedId);\n+\n+\t\tList<IBase> codings = mySearchParameterExtractor.getCodingsFromCodeableConcept(theValue);\n+\t\tfor (IBase nextCoding : codings) {\n+\t\t\tcodeCodeableConcept.addCoding(getCodeCoding(nextCoding, observationCodeNormalizedId));\n+\t\t}\n+\n+\t\treturn codeCodeableConcept;\n+\t}\n+\n+\tprivate String getCodeCodeableConceptIdIfExists(IBase theValue) {\n+\t\tList<IBase> codings = mySearchParameterExtractor.getCodingsFromCodeableConcept(theValue);\n+\t\tString codeCodeableConceptId = null;\n+\t\tfor (IBase nextCoding : codings) {\n+\t\t\tResourceIndexedSearchParamToken param = mySearchParameterExtractor.createSearchParamForCoding(\"Observation\",\n+\t\t\t\tnew RuntimeSearchParam(null, null, \"code\", null, null, null, null, null, null, null),\n+\t\t\t\tnextCoding);\n+\t\t\tif (param != null) {\n+\t\t\t\tString system = param.getSystem();\n+\t\t\t\tString code = param.getValue();\n+\t\t\t\tString text = mySearchParameterExtractor.getDisplayTextForCoding(nextCoding);\n+\t\t\t\tif (code != null && system != null) {\n+\t\t\t\t\tcodeCodeableConceptId = myObservationIndexedCodeCodingSearchParamDao.findForCodeAndSystem(code, system);\n+\t\t\t\t} else {\n+\t\t\t\t\tcodeCodeableConceptId = myObservationIndexedCodeCodingSearchParamDao.findForDisplay(text);\n+\t\t\t\t}\n+\t\t\t\tif (codeCodeableConceptId != null) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn codeCodeableConceptId;\n+\t}", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNjg1NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432516854", "bodyText": "Good point. I have updated this method to return an Optional and updated the calling method to take optimal advantage of the Optional return value.", "author": "IanMMarshall", "createdAt": "2020-05-29T14:21:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxNjc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxNzU0NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431417545", "bodyText": "perhaps findBy is a better prefix, as that is what spring-data seems to use by default", "author": "tadgh", "createdAt": "2020-05-27T20:18:18Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IObservationIndexedCodeCodingSearchParamDao.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package ca.uhn.fhir.jpa.dao.data;\n+\n+import ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodingEntity;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface IObservationIndexedCodeCodingSearchParamDao extends JpaRepository<ObservationIndexedCodeCodingEntity, Long> {\n+\n+    @Query(\"\" +\n+            \"SELECT t.myCodeableConceptId FROM ObservationIndexedCodeCodingEntity t \" +\n+            \"WHERE t.myCode = :code \" +\n+            \"AND t.mySystem = :system \" +\n+            \"\")\n+    String findForCodeAndSystem(@Param(\"code\") String theCode, @Param(\"system\") String theSystem);", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMTM2NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432521365", "bodyText": "Makes sense. Have adopted this convention in all of the new indexing APIs.", "author": "IanMMarshall", "createdAt": "2020-05-29T14:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxNzU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxODAwMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431418001", "bodyText": "Too many spaces between IbasePersistedResource and theEntity", "author": "tadgh", "createdAt": "2020-05-27T20:19:19Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoObservationDstu3.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package ca.uhn.fhir.jpa.dao.dstu3;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.dao.BaseHapiFhirResourceDaoObservation;\n+import ca.uhn.fhir.jpa.dao.ObservationLastNIndexPersistSvc;\n+import ca.uhn.fhir.jpa.model.cross.IBasePersistedResource;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.CacheControlDirective;\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.api.server.storage.TransactionDetails;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.dstu3.model.Observation;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Date;\n+\n+public class FhirResourceDaoObservationDstu3 extends BaseHapiFhirResourceDaoObservation<Observation> {\n+\n+\t@Autowired\n+\tObservationLastNIndexPersistSvc myObservationLastNIndexPersistSvc;\n+\n+\t@Override\n+\tpublic IBundleProvider observationsLastN(SearchParameterMap theSearchParameterMap,  RequestDetails theRequestDetails, HttpServletResponse theServletResponse) {\n+\n+\t\tupdateSearchParamsForLastn(theSearchParameterMap, theRequestDetails);\n+\n+\t\treturn mySearchCoordinatorSvc.registerSearch(this, theSearchParameterMap, getResourceName(), new CacheControlDirective().parse(theRequestDetails.getHeaders(Constants.HEADER_CACHE_CONTROL)), theRequestDetails);\n+\t}\n+\n+\t@Override\n+\tprotected String getEffectiveParamName() {\n+\t\treturn Observation.SP_DATE;\n+\t}\n+\n+\t@Override\n+\tprotected String getCodeParamName() {\n+\t\treturn Observation.SP_CODE;\n+\t}\n+\n+\t@Override\n+\tprotected String getSubjectParamName() {\n+\t\treturn Observation.SP_SUBJECT;\n+\t}\n+\n+\t@Override\n+\tprotected String getPatientParamName() {\n+\t\treturn Observation.SP_PATIENT;\n+\t}\n+\n+\t@Override\n+\tpublic ResourceTable updateEntity(RequestDetails theRequest, IBaseResource theResource, IBasePersistedResource\ttheEntity, Date theDeletedTimestampOrNull, boolean thePerformIndexing,", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0ODYzOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432548639", "bodyText": "Interesting. When I viewed this in IntelliJ, it looked fine. I think there was maybe a tab character between IBasePersistedResource and theEntity. I have now ensured that this is indeed a space. Also checking this in the other FhirResourceDaoObservation* classes.", "author": "IanMMarshall", "createdAt": "2020-05-29T15:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxODAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxODkxMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431418913", "bodyText": "Seems like you may be able to extract at least part of this to the superclass, or is there something R4-specific happening here outside of IndexObservation, which could probably just as easily take an IAnyResource", "author": "tadgh", "createdAt": "2020-05-27T20:21:07Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoObservationR4.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.jpa.dao.r4;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.dao.BaseHapiFhirResourceDaoObservation;\n+import ca.uhn.fhir.jpa.dao.ObservationLastNIndexPersistSvc;\n+import ca.uhn.fhir.jpa.model.cross.IBasePersistedResource;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.CacheControlDirective;\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.api.server.storage.TransactionDetails;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Date;\n+\n+public class FhirResourceDaoObservationR4 extends BaseHapiFhirResourceDaoObservation<Observation> {\n+\n+\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\n+\t@Autowired\n+\tObservationLastNIndexPersistSvc myObservationLastNIndexPersistSvc;\n+\n+\t@Override\n+\tpublic IBundleProvider observationsLastN(SearchParameterMap theSearchParameterMap,  RequestDetails theRequestDetails, HttpServletResponse theServletResponse) {\n+\n+\t\tupdateSearchParamsForLastn(theSearchParameterMap, theRequestDetails);\n+\n+\t\treturn mySearchCoordinatorSvc.registerSearch(this, theSearchParameterMap, getResourceName(), new CacheControlDirective().parse(theRequestDetails.getHeaders(Constants.HEADER_CACHE_CONTROL)), theRequestDetails);\n+\t}\n+\n+\t@Override\n+\tprotected String getEffectiveParamName() {\n+\t\treturn Observation.SP_DATE;\n+\t}\n+\n+\t@Override\n+\tprotected String getCodeParamName() {\n+\t\treturn Observation.SP_CODE;\n+\t}\n+\n+\t@Override\n+\tprotected String getSubjectParamName() {\n+\t\treturn Observation.SP_SUBJECT;\n+\t}\n+\n+\t@Override\n+\tprotected String getPatientParamName() {\n+\t\treturn Observation.SP_PATIENT;\n+\t}\n+\n+\t@Override\n+\tpublic ResourceTable updateEntity(RequestDetails theRequest, IBaseResource theResource, IBasePersistedResource\ttheEntity, Date theDeletedTimestampOrNull, boolean thePerformIndexing,\n+\t\t\t\t\t\t\t\t\t\t\t\t boolean theUpdateVersion, TransactionDetails theTransactionDetails, boolean theForceUpdate, boolean theCreateNewHistoryEntry) {\n+\t\tResourceTable retVal = super.updateEntity(theRequest, theResource, theEntity, theDeletedTimestampOrNull, thePerformIndexing, theUpdateVersion, theTransactionDetails, theForceUpdate, theCreateNewHistoryEntry);\n+\n+\t\tif (!retVal.isUnchangedInCurrentOperation()) {\n+\t\t\tif (retVal.getDeleted() == null) {\n+\t\t\t\t// Update indexes here for LastN operation.\n+\t\t\t\tObservation observation = (Observation) theResource;\n+\t\t\t\tmyObservationLastNIndexPersistSvc.indexObservation(observation);\n+\t\t\t} else {\n+\t\t\t\tmyObservationLastNIndexPersistSvc.deleteObservationIndex(retVal);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn retVal;\n+\t}\n+\n+}", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MzY1Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432563653", "bodyText": "Good catch. There is no longer anything version specific in the updateEntity methods and so I can indeed move the entire implementation into the super class. Done for all three implementations.", "author": "IanMMarshall", "createdAt": "2020-05-29T15:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxODkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMDQyMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431420423", "bodyText": "I feel as though this operation isn't idempotent, or is this some other meaning of idempotent I'm not getting?", "author": "tadgh", "createdAt": "2020-05-27T20:24:29Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderObservationDstu3.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.jpa.provider.dstu3;\n+\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoObservation;\n+import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.annotation.Description;\n+import ca.uhn.fhir.model.valueset.BundleTypeEnum;\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.api.SortOrderEnum;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.*;\n+import org.hl7.fhir.dstu3.model.Observation;\n+import org.hl7.fhir.dstu3.model.UnsignedIntType;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+public class BaseJpaResourceProviderObservationDstu3 extends JpaResourceProviderDstu3<Observation> {\n+\n+\t/**\n+\t * Observation/$lastn\n+\t */\n+\t@Operation(name = JpaConstants.OPERATION_LASTN, idempotent = true, bundleType = BundleTypeEnum.SEARCHSET)", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3NzczMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432577731", "bodyText": "I believe that this particular operation is idempotent as it always returns an IBundleProvider which in turn will return the same set of Observation resources for the same set of parameters, no matter how many times it is executed, so long as nothing changes in the database (this operation does not change the indexes or Observation resources).\nThis operation is analogous to the $everything operation (see implementation of this operation in 'BaseJpaResourceProviderPatientDstu3`).", "author": "IanMMarshall", "createdAt": "2020-05-29T15:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMDQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMTgwOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431421808", "bodyText": "I'm not sure what our policy is on huge JSON strings in code, wondering if this would be better extracted into a resource. I may be wrong here, feel free to ignore this comment", "author": "tadgh", "createdAt": "2020-05-27T20:27:23Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -0,0 +1,604 @@\n+package ca.uhn.fhir.jpa.search.lastn;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.jpa.searchparam.util.LastNParameterHelper;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.jpa.search.lastn.json.CodeJson;\n+import ca.uhn.fhir.jpa.search.lastn.json.ObservationJson;\n+import ca.uhn.fhir.jpa.search.lastn.util.CodeSystemHash;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.shadehapi.elasticsearch.action.admin.indices.get.GetIndexRequest;\n+import org.shadehapi.elasticsearch.action.DocWriteResponse;\n+import org.shadehapi.elasticsearch.action.index.IndexRequest;\n+import org.shadehapi.elasticsearch.action.index.IndexResponse;\n+import org.shadehapi.elasticsearch.action.search.SearchRequest;\n+import org.shadehapi.elasticsearch.action.search.SearchResponse;\n+import org.shadehapi.elasticsearch.client.RequestOptions;\n+import org.shadehapi.elasticsearch.client.RestHighLevelClient;\n+import org.shadehapi.elasticsearch.common.xcontent.XContentType;\n+import org.shadehapi.elasticsearch.index.query.BoolQueryBuilder;\n+import org.shadehapi.elasticsearch.index.query.QueryBuilders;\n+import org.shadehapi.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.shadehapi.elasticsearch.search.SearchHit;\n+import org.shadehapi.elasticsearch.search.SearchHits;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.shadehapi.elasticsearch.search.aggregations.Aggregations;\n+import org.shadehapi.elasticsearch.search.aggregations.BucketOrder;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.composite.*;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.metrics.tophits.ParsedTopHits;\n+import org.shadehapi.elasticsearch.search.aggregations.support.ValueType;\n+import org.shadehapi.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.shadehapi.elasticsearch.search.sort.SortOrder;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public class ElasticsearchSvcImpl implements IElasticsearchSvc {\n+\n+\tpublic static final String OBSERVATION_INDEX = \"observation_index\";\n+\tpublic static final String CODE_INDEX = \"code_index\";\n+\tpublic static final String OBSERVATION_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\";\n+\tpublic static final String CODE_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity\";\n+\n+\tprivate final RestHighLevelClient myRestHighLevelClient;\n+\n+\tprivate final ObjectMapper objectMapper = new ObjectMapper();\n+\n+\tprivate final String GROUP_BY_SUBJECT = \"group_by_subject\";\n+\tprivate final String GROUP_BY_SYSTEM = \"group_by_system\";\n+\tprivate final String GROUP_BY_CODE = \"group_by_code\";\n+\n+\n+\tpublic ElasticsearchSvcImpl(String theHostname, int thePort, String theUsername, String thePassword) {\n+\t\tmyRestHighLevelClient = ElasticsearchRestClientFactory.createElasticsearchHighLevelRestClient(theHostname, thePort, theUsername, thePassword);\n+\n+\t\ttry {\n+\t\t\tcreateObservationIndexIfMissing();\n+\t\t\tcreateCodeIndexIfMissing();\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new RuntimeException(\"Failed to create document index\", theE);\n+\t\t}\n+\t}\n+\n+\tprivate void createObservationIndexIfMissing() throws IOException {\n+\t\tif (indexExists(OBSERVATION_INDEX)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tString observationMapping = \"{\\n\" +", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NTUxOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432645518", "bodyText": "You are right, I kept meaning to re-visit this. Moving the index definitions into resource files.", "author": "IanMMarshall", "createdAt": "2020-05-29T17:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMzYwOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431423609", "bodyText": "Out of curiosity why do we need norms here? Are we scoring on length of field?", "author": "tadgh", "createdAt": "2020-05-27T20:30:58Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -0,0 +1,604 @@\n+package ca.uhn.fhir.jpa.search.lastn;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.jpa.searchparam.util.LastNParameterHelper;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.jpa.search.lastn.json.CodeJson;\n+import ca.uhn.fhir.jpa.search.lastn.json.ObservationJson;\n+import ca.uhn.fhir.jpa.search.lastn.util.CodeSystemHash;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.shadehapi.elasticsearch.action.admin.indices.get.GetIndexRequest;\n+import org.shadehapi.elasticsearch.action.DocWriteResponse;\n+import org.shadehapi.elasticsearch.action.index.IndexRequest;\n+import org.shadehapi.elasticsearch.action.index.IndexResponse;\n+import org.shadehapi.elasticsearch.action.search.SearchRequest;\n+import org.shadehapi.elasticsearch.action.search.SearchResponse;\n+import org.shadehapi.elasticsearch.client.RequestOptions;\n+import org.shadehapi.elasticsearch.client.RestHighLevelClient;\n+import org.shadehapi.elasticsearch.common.xcontent.XContentType;\n+import org.shadehapi.elasticsearch.index.query.BoolQueryBuilder;\n+import org.shadehapi.elasticsearch.index.query.QueryBuilders;\n+import org.shadehapi.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.shadehapi.elasticsearch.search.SearchHit;\n+import org.shadehapi.elasticsearch.search.SearchHits;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.shadehapi.elasticsearch.search.aggregations.Aggregations;\n+import org.shadehapi.elasticsearch.search.aggregations.BucketOrder;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.composite.*;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.metrics.tophits.ParsedTopHits;\n+import org.shadehapi.elasticsearch.search.aggregations.support.ValueType;\n+import org.shadehapi.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.shadehapi.elasticsearch.search.sort.SortOrder;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public class ElasticsearchSvcImpl implements IElasticsearchSvc {\n+\n+\tpublic static final String OBSERVATION_INDEX = \"observation_index\";\n+\tpublic static final String CODE_INDEX = \"code_index\";\n+\tpublic static final String OBSERVATION_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\";\n+\tpublic static final String CODE_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity\";\n+\n+\tprivate final RestHighLevelClient myRestHighLevelClient;\n+\n+\tprivate final ObjectMapper objectMapper = new ObjectMapper();\n+\n+\tprivate final String GROUP_BY_SUBJECT = \"group_by_subject\";\n+\tprivate final String GROUP_BY_SYSTEM = \"group_by_system\";\n+\tprivate final String GROUP_BY_CODE = \"group_by_code\";\n+\n+\n+\tpublic ElasticsearchSvcImpl(String theHostname, int thePort, String theUsername, String thePassword) {\n+\t\tmyRestHighLevelClient = ElasticsearchRestClientFactory.createElasticsearchHighLevelRestClient(theHostname, thePort, theUsername, thePassword);\n+\n+\t\ttry {\n+\t\t\tcreateObservationIndexIfMissing();\n+\t\t\tcreateCodeIndexIfMissing();\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new RuntimeException(\"Failed to create document index\", theE);\n+\t\t}\n+\t}\n+\n+\tprivate void createObservationIndexIfMissing() throws IOException {\n+\t\tif (indexExists(OBSERVATION_INDEX)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tString observationMapping = \"{\\n\" +\n+\t\t\t\"  \\\"mappings\\\" : {\\n\" +\n+\t\t\t\"    \\\"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\\\" : {\\n\" +\n+\t\t\t\"      \\\"properties\\\" : {\\n\" +\n+\t\t\t\"        \\\"codeconceptid\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"norms\\\" : true\\n\" +", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NDcyNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432654726", "bodyText": "Probably not. I adapted this mapping from one that was generated automatically by Hibernate Search during earlier stages of development and I think this parameter was included in the original mapping. I do not see any need to keep this. Removing it.", "author": "IanMMarshall", "createdAt": "2020-05-29T18:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMzYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNDI4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431424287", "bodyText": "Are we doing fuzzy matching on the text fields, or exact matching? If only the latter, keyword-matching is wayyy faster.", "author": "tadgh", "createdAt": "2020-05-27T20:32:20Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -0,0 +1,604 @@\n+package ca.uhn.fhir.jpa.search.lastn;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.jpa.searchparam.util.LastNParameterHelper;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.jpa.search.lastn.json.CodeJson;\n+import ca.uhn.fhir.jpa.search.lastn.json.ObservationJson;\n+import ca.uhn.fhir.jpa.search.lastn.util.CodeSystemHash;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.shadehapi.elasticsearch.action.admin.indices.get.GetIndexRequest;\n+import org.shadehapi.elasticsearch.action.DocWriteResponse;\n+import org.shadehapi.elasticsearch.action.index.IndexRequest;\n+import org.shadehapi.elasticsearch.action.index.IndexResponse;\n+import org.shadehapi.elasticsearch.action.search.SearchRequest;\n+import org.shadehapi.elasticsearch.action.search.SearchResponse;\n+import org.shadehapi.elasticsearch.client.RequestOptions;\n+import org.shadehapi.elasticsearch.client.RestHighLevelClient;\n+import org.shadehapi.elasticsearch.common.xcontent.XContentType;\n+import org.shadehapi.elasticsearch.index.query.BoolQueryBuilder;\n+import org.shadehapi.elasticsearch.index.query.QueryBuilders;\n+import org.shadehapi.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.shadehapi.elasticsearch.search.SearchHit;\n+import org.shadehapi.elasticsearch.search.SearchHits;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.shadehapi.elasticsearch.search.aggregations.Aggregations;\n+import org.shadehapi.elasticsearch.search.aggregations.BucketOrder;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.composite.*;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.metrics.tophits.ParsedTopHits;\n+import org.shadehapi.elasticsearch.search.aggregations.support.ValueType;\n+import org.shadehapi.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.shadehapi.elasticsearch.search.sort.SortOrder;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public class ElasticsearchSvcImpl implements IElasticsearchSvc {\n+\n+\tpublic static final String OBSERVATION_INDEX = \"observation_index\";\n+\tpublic static final String CODE_INDEX = \"code_index\";\n+\tpublic static final String OBSERVATION_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\";\n+\tpublic static final String CODE_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity\";\n+\n+\tprivate final RestHighLevelClient myRestHighLevelClient;\n+\n+\tprivate final ObjectMapper objectMapper = new ObjectMapper();\n+\n+\tprivate final String GROUP_BY_SUBJECT = \"group_by_subject\";\n+\tprivate final String GROUP_BY_SYSTEM = \"group_by_system\";\n+\tprivate final String GROUP_BY_CODE = \"group_by_code\";\n+\n+\n+\tpublic ElasticsearchSvcImpl(String theHostname, int thePort, String theUsername, String thePassword) {\n+\t\tmyRestHighLevelClient = ElasticsearchRestClientFactory.createElasticsearchHighLevelRestClient(theHostname, thePort, theUsername, thePassword);\n+\n+\t\ttry {\n+\t\t\tcreateObservationIndexIfMissing();\n+\t\t\tcreateCodeIndexIfMissing();\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new RuntimeException(\"Failed to create document index\", theE);\n+\t\t}\n+\t}\n+\n+\tprivate void createObservationIndexIfMissing() throws IOException {\n+\t\tif (indexExists(OBSERVATION_INDEX)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tString observationMapping = \"{\\n\" +\n+\t\t\t\"  \\\"mappings\\\" : {\\n\" +\n+\t\t\t\"    \\\"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\\\" : {\\n\" +\n+\t\t\t\"      \\\"properties\\\" : {\\n\" +\n+\t\t\t\"        \\\"codeconceptid\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"norms\\\" : true\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconcepttext\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconcepttext\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NzQ5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432657499", "bodyText": "Right OK. No, we are not currently support fuzzy searches and performance is definitely an important consideration here. Changing these to keyword type.", "author": "IanMMarshall", "createdAt": "2020-05-29T18:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNDI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNTQyNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431425426", "bodyText": "Would like to know the rationale for store:true here, as it seems these are pretty compact objects and this would take up extra space, and provide no value unless you're querying specifically for large swathes of these identifier fields.", "author": "tadgh", "createdAt": "2020-05-27T20:34:37Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -0,0 +1,604 @@\n+package ca.uhn.fhir.jpa.search.lastn;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.jpa.searchparam.util.LastNParameterHelper;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.jpa.search.lastn.json.CodeJson;\n+import ca.uhn.fhir.jpa.search.lastn.json.ObservationJson;\n+import ca.uhn.fhir.jpa.search.lastn.util.CodeSystemHash;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.shadehapi.elasticsearch.action.admin.indices.get.GetIndexRequest;\n+import org.shadehapi.elasticsearch.action.DocWriteResponse;\n+import org.shadehapi.elasticsearch.action.index.IndexRequest;\n+import org.shadehapi.elasticsearch.action.index.IndexResponse;\n+import org.shadehapi.elasticsearch.action.search.SearchRequest;\n+import org.shadehapi.elasticsearch.action.search.SearchResponse;\n+import org.shadehapi.elasticsearch.client.RequestOptions;\n+import org.shadehapi.elasticsearch.client.RestHighLevelClient;\n+import org.shadehapi.elasticsearch.common.xcontent.XContentType;\n+import org.shadehapi.elasticsearch.index.query.BoolQueryBuilder;\n+import org.shadehapi.elasticsearch.index.query.QueryBuilders;\n+import org.shadehapi.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.shadehapi.elasticsearch.search.SearchHit;\n+import org.shadehapi.elasticsearch.search.SearchHits;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.shadehapi.elasticsearch.search.aggregations.Aggregations;\n+import org.shadehapi.elasticsearch.search.aggregations.BucketOrder;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.composite.*;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.metrics.tophits.ParsedTopHits;\n+import org.shadehapi.elasticsearch.search.aggregations.support.ValueType;\n+import org.shadehapi.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.shadehapi.elasticsearch.search.sort.SortOrder;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public class ElasticsearchSvcImpl implements IElasticsearchSvc {\n+\n+\tpublic static final String OBSERVATION_INDEX = \"observation_index\";\n+\tpublic static final String CODE_INDEX = \"code_index\";\n+\tpublic static final String OBSERVATION_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\";\n+\tpublic static final String CODE_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity\";\n+\n+\tprivate final RestHighLevelClient myRestHighLevelClient;\n+\n+\tprivate final ObjectMapper objectMapper = new ObjectMapper();\n+\n+\tprivate final String GROUP_BY_SUBJECT = \"group_by_subject\";\n+\tprivate final String GROUP_BY_SYSTEM = \"group_by_system\";\n+\tprivate final String GROUP_BY_CODE = \"group_by_code\";\n+\n+\n+\tpublic ElasticsearchSvcImpl(String theHostname, int thePort, String theUsername, String thePassword) {\n+\t\tmyRestHighLevelClient = ElasticsearchRestClientFactory.createElasticsearchHighLevelRestClient(theHostname, thePort, theUsername, thePassword);\n+\n+\t\ttry {\n+\t\t\tcreateObservationIndexIfMissing();\n+\t\t\tcreateCodeIndexIfMissing();\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new RuntimeException(\"Failed to create document index\", theE);\n+\t\t}\n+\t}\n+\n+\tprivate void createObservationIndexIfMissing() throws IOException {\n+\t\tif (indexExists(OBSERVATION_INDEX)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tString observationMapping = \"{\\n\" +\n+\t\t\t\"  \\\"mappings\\\" : {\\n\" +\n+\t\t\t\"    \\\"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\\\" : {\\n\" +\n+\t\t\t\"      \\\"properties\\\" : {\\n\" +\n+\t\t\t\"        \\\"codeconceptid\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"norms\\\" : true\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconcepttext\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconcepttext\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"effectivedtm\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"date\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"identifier\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"store\\\" : true\\n\" +", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MzU2OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432663569", "bodyText": "Actually, no I do not believe that we have a need for this property. This was included in an earlier version of the mapping that was generated automatically by Hibernate Search and I neglected to remove it. Removing it now.", "author": "IanMMarshall", "createdAt": "2020-05-29T18:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNTQyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNTg1MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431425850", "bodyText": "move to class level", "author": "tadgh", "createdAt": "2020-05-27T20:35:24Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -0,0 +1,604 @@\n+package ca.uhn.fhir.jpa.search.lastn;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.jpa.searchparam.util.LastNParameterHelper;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.jpa.search.lastn.json.CodeJson;\n+import ca.uhn.fhir.jpa.search.lastn.json.ObservationJson;\n+import ca.uhn.fhir.jpa.search.lastn.util.CodeSystemHash;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.shadehapi.elasticsearch.action.admin.indices.get.GetIndexRequest;\n+import org.shadehapi.elasticsearch.action.DocWriteResponse;\n+import org.shadehapi.elasticsearch.action.index.IndexRequest;\n+import org.shadehapi.elasticsearch.action.index.IndexResponse;\n+import org.shadehapi.elasticsearch.action.search.SearchRequest;\n+import org.shadehapi.elasticsearch.action.search.SearchResponse;\n+import org.shadehapi.elasticsearch.client.RequestOptions;\n+import org.shadehapi.elasticsearch.client.RestHighLevelClient;\n+import org.shadehapi.elasticsearch.common.xcontent.XContentType;\n+import org.shadehapi.elasticsearch.index.query.BoolQueryBuilder;\n+import org.shadehapi.elasticsearch.index.query.QueryBuilders;\n+import org.shadehapi.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.shadehapi.elasticsearch.search.SearchHit;\n+import org.shadehapi.elasticsearch.search.SearchHits;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.shadehapi.elasticsearch.search.aggregations.Aggregations;\n+import org.shadehapi.elasticsearch.search.aggregations.BucketOrder;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.composite.*;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.metrics.tophits.ParsedTopHits;\n+import org.shadehapi.elasticsearch.search.aggregations.support.ValueType;\n+import org.shadehapi.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.shadehapi.elasticsearch.search.sort.SortOrder;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public class ElasticsearchSvcImpl implements IElasticsearchSvc {\n+\n+\tpublic static final String OBSERVATION_INDEX = \"observation_index\";\n+\tpublic static final String CODE_INDEX = \"code_index\";\n+\tpublic static final String OBSERVATION_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\";\n+\tpublic static final String CODE_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity\";\n+\n+\tprivate final RestHighLevelClient myRestHighLevelClient;\n+\n+\tprivate final ObjectMapper objectMapper = new ObjectMapper();\n+\n+\tprivate final String GROUP_BY_SUBJECT = \"group_by_subject\";\n+\tprivate final String GROUP_BY_SYSTEM = \"group_by_system\";\n+\tprivate final String GROUP_BY_CODE = \"group_by_code\";\n+\n+\n+\tpublic ElasticsearchSvcImpl(String theHostname, int thePort, String theUsername, String thePassword) {\n+\t\tmyRestHighLevelClient = ElasticsearchRestClientFactory.createElasticsearchHighLevelRestClient(theHostname, thePort, theUsername, thePassword);\n+\n+\t\ttry {\n+\t\t\tcreateObservationIndexIfMissing();\n+\t\t\tcreateCodeIndexIfMissing();\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new RuntimeException(\"Failed to create document index\", theE);\n+\t\t}\n+\t}\n+\n+\tprivate void createObservationIndexIfMissing() throws IOException {\n+\t\tif (indexExists(OBSERVATION_INDEX)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tString observationMapping = \"{\\n\" +\n+\t\t\t\"  \\\"mappings\\\" : {\\n\" +\n+\t\t\t\"    \\\"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\\\" : {\\n\" +\n+\t\t\t\"      \\\"properties\\\" : {\\n\" +\n+\t\t\t\"        \\\"codeconceptid\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"norms\\\" : true\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconcepttext\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconcepttext\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"effectivedtm\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"date\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"identifier\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"store\\\" : true\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"subject\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        }\\n\" +\n+\t\t\t\"      }\\n\" +\n+\t\t\t\"    }\\n\" +\n+\t\t\t\"  }\\n\" +\n+\t\t\t\"}\\n\";\n+\t\tif (!createIndex(OBSERVATION_INDEX, observationMapping)) {\n+\t\t\tthrow new RuntimeException(\"Failed to create observation index\");\n+\t\t}\n+\t}\n+\n+\tprivate void createCodeIndexIfMissing() throws IOException {\n+\t\tif (indexExists(CODE_INDEX)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tString codeMapping = \"{\\n\" +\n+\t\t\t\"  \\\"mappings\\\" : {\\n\" +\n+\t\t\t\"    \\\"ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity\\\" : {\\n\" +\n+\t\t\t\"      \\\"properties\\\" : {\\n\" +\n+\t\t\t\"        \\\"codeable_concept_id\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"store\\\" : true\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"text\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        }\\n\" +\n+\t\t\t\"      }\\n\" +\n+\t\t\t\"    }\\n\" +\n+\t\t\t\"  }\\n\" +\n+\t\t\t\"}\\n\";\n+\t\tif (!createIndex(CODE_INDEX, codeMapping)) {\n+\t\t\tthrow new RuntimeException(\"Failed to create code index\");\n+\t\t}\n+\n+\t}\n+\n+\tprivate boolean createIndex(String theIndexName, String theMapping) throws IOException {\n+\t\tCreateIndexRequest request = new CreateIndexRequest(theIndexName);\n+\t\trequest.source(theMapping, XContentType.JSON);\n+\t\tCreateIndexResponse createIndexResponse = myRestHighLevelClient.indices().create(request, RequestOptions.DEFAULT);\n+\t\treturn createIndexResponse.isAcknowledged();\n+\n+\t}\n+\n+\tprivate boolean indexExists(String theIndexName) throws IOException {\n+\t\tGetIndexRequest request = new GetIndexRequest();\n+\t\trequest.indices(theIndexName);\n+\t\treturn myRestHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);\n+\t}\n+\n+\t@Override\n+\tpublic List<String> executeLastN(SearchParameterMap theSearchParameterMap, FhirContext theFhirContext, Integer theMaxResultsToFetch) {\n+\t\tString OBSERVATION_IDENTIFIER_FIELD_NAME = \"identifier\";", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NDUyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432664521", "bodyText": "Moved.", "author": "IanMMarshall", "createdAt": "2020-05-29T18:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNTg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMjk5NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431432994", "bodyText": "Are we ever anticipating more than 1 subject? I was under the impression there was only 1 allowed.", "author": "tadgh", "createdAt": "2020-05-27T20:48:58Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -0,0 +1,604 @@\n+package ca.uhn.fhir.jpa.search.lastn;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.jpa.searchparam.util.LastNParameterHelper;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.jpa.search.lastn.json.CodeJson;\n+import ca.uhn.fhir.jpa.search.lastn.json.ObservationJson;\n+import ca.uhn.fhir.jpa.search.lastn.util.CodeSystemHash;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.shadehapi.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.shadehapi.elasticsearch.action.admin.indices.get.GetIndexRequest;\n+import org.shadehapi.elasticsearch.action.DocWriteResponse;\n+import org.shadehapi.elasticsearch.action.index.IndexRequest;\n+import org.shadehapi.elasticsearch.action.index.IndexResponse;\n+import org.shadehapi.elasticsearch.action.search.SearchRequest;\n+import org.shadehapi.elasticsearch.action.search.SearchResponse;\n+import org.shadehapi.elasticsearch.client.RequestOptions;\n+import org.shadehapi.elasticsearch.client.RestHighLevelClient;\n+import org.shadehapi.elasticsearch.common.xcontent.XContentType;\n+import org.shadehapi.elasticsearch.index.query.BoolQueryBuilder;\n+import org.shadehapi.elasticsearch.index.query.QueryBuilders;\n+import org.shadehapi.elasticsearch.index.reindex.DeleteByQueryRequest;\n+import org.shadehapi.elasticsearch.search.SearchHit;\n+import org.shadehapi.elasticsearch.search.SearchHits;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.shadehapi.elasticsearch.search.aggregations.Aggregations;\n+import org.shadehapi.elasticsearch.search.aggregations.BucketOrder;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.composite.*;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.ParsedTerms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.Terms;\n+import org.shadehapi.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n+import org.shadehapi.elasticsearch.search.aggregations.metrics.tophits.ParsedTopHits;\n+import org.shadehapi.elasticsearch.search.aggregations.support.ValueType;\n+import org.shadehapi.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.shadehapi.elasticsearch.search.sort.SortOrder;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public class ElasticsearchSvcImpl implements IElasticsearchSvc {\n+\n+\tpublic static final String OBSERVATION_INDEX = \"observation_index\";\n+\tpublic static final String CODE_INDEX = \"code_index\";\n+\tpublic static final String OBSERVATION_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\";\n+\tpublic static final String CODE_DOCUMENT_TYPE = \"ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity\";\n+\n+\tprivate final RestHighLevelClient myRestHighLevelClient;\n+\n+\tprivate final ObjectMapper objectMapper = new ObjectMapper();\n+\n+\tprivate final String GROUP_BY_SUBJECT = \"group_by_subject\";\n+\tprivate final String GROUP_BY_SYSTEM = \"group_by_system\";\n+\tprivate final String GROUP_BY_CODE = \"group_by_code\";\n+\n+\n+\tpublic ElasticsearchSvcImpl(String theHostname, int thePort, String theUsername, String thePassword) {\n+\t\tmyRestHighLevelClient = ElasticsearchRestClientFactory.createElasticsearchHighLevelRestClient(theHostname, thePort, theUsername, thePassword);\n+\n+\t\ttry {\n+\t\t\tcreateObservationIndexIfMissing();\n+\t\t\tcreateCodeIndexIfMissing();\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new RuntimeException(\"Failed to create document index\", theE);\n+\t\t}\n+\t}\n+\n+\tprivate void createObservationIndexIfMissing() throws IOException {\n+\t\tif (indexExists(OBSERVATION_INDEX)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tString observationMapping = \"{\\n\" +\n+\t\t\t\"  \\\"mappings\\\" : {\\n\" +\n+\t\t\t\"    \\\"ca.uhn.fhir.jpa.model.entity.ObservationIndexedSearchParamLastNEntity\\\" : {\\n\" +\n+\t\t\t\"      \\\"properties\\\" : {\\n\" +\n+\t\t\t\"        \\\"codeconceptid\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"norms\\\" : true\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconcepttext\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codeconceptcodingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconcepttext\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"categoryconceptcodingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"effectivedtm\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"date\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"identifier\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"store\\\" : true\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"subject\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        }\\n\" +\n+\t\t\t\"      }\\n\" +\n+\t\t\t\"    }\\n\" +\n+\t\t\t\"  }\\n\" +\n+\t\t\t\"}\\n\";\n+\t\tif (!createIndex(OBSERVATION_INDEX, observationMapping)) {\n+\t\t\tthrow new RuntimeException(\"Failed to create observation index\");\n+\t\t}\n+\t}\n+\n+\tprivate void createCodeIndexIfMissing() throws IOException {\n+\t\tif (indexExists(CODE_INDEX)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tString codeMapping = \"{\\n\" +\n+\t\t\t\"  \\\"mappings\\\" : {\\n\" +\n+\t\t\t\"    \\\"ca.uhn.fhir.jpa.model.entity.ObservationIndexedCodeCodeableConceptEntity\\\" : {\\n\" +\n+\t\t\t\"      \\\"properties\\\" : {\\n\" +\n+\t\t\t\"        \\\"codeable_concept_id\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\",\\n\" +\n+\t\t\t\"          \\\"store\\\" : true\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codingcode\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codingcode_system_hash\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codingdisplay\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"codingsystem\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"keyword\\\"\\n\" +\n+\t\t\t\"        },\\n\" +\n+\t\t\t\"        \\\"text\\\" : {\\n\" +\n+\t\t\t\"          \\\"type\\\" : \\\"text\\\"\\n\" +\n+\t\t\t\"        }\\n\" +\n+\t\t\t\"      }\\n\" +\n+\t\t\t\"    }\\n\" +\n+\t\t\t\"  }\\n\" +\n+\t\t\t\"}\\n\";\n+\t\tif (!createIndex(CODE_INDEX, codeMapping)) {\n+\t\t\tthrow new RuntimeException(\"Failed to create code index\");\n+\t\t}\n+\n+\t}\n+\n+\tprivate boolean createIndex(String theIndexName, String theMapping) throws IOException {\n+\t\tCreateIndexRequest request = new CreateIndexRequest(theIndexName);\n+\t\trequest.source(theMapping, XContentType.JSON);\n+\t\tCreateIndexResponse createIndexResponse = myRestHighLevelClient.indices().create(request, RequestOptions.DEFAULT);\n+\t\treturn createIndexResponse.isAcknowledged();\n+\n+\t}\n+\n+\tprivate boolean indexExists(String theIndexName) throws IOException {\n+\t\tGetIndexRequest request = new GetIndexRequest();\n+\t\trequest.indices(theIndexName);\n+\t\treturn myRestHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);\n+\t}\n+\n+\t@Override\n+\tpublic List<String> executeLastN(SearchParameterMap theSearchParameterMap, FhirContext theFhirContext, Integer theMaxResultsToFetch) {\n+\t\tString OBSERVATION_IDENTIFIER_FIELD_NAME = \"identifier\";\n+\t\tString[] topHitsInclude = {OBSERVATION_IDENTIFIER_FIELD_NAME};\n+\t\treturn buildAndExecuteSearch(theSearchParameterMap, theFhirContext, topHitsInclude,\n+\t\t\tObservationJson::getIdentifier, theMaxResultsToFetch);\n+\t}\n+\n+\tprivate <T> List<T> buildAndExecuteSearch(SearchParameterMap theSearchParameterMap, FhirContext theFhirContext,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tString[] topHitsInclude, Function<ObservationJson,T> setValue, Integer theMaxResultsToFetch) {\n+\t\tString patientParamName = LastNParameterHelper.getPatientParamName(theFhirContext);\n+\t\tString subjectParamName = LastNParameterHelper.getSubjectParamName(theFhirContext);\n+\t\tList<T> searchResults = new ArrayList<>();\n+\t\tif (theSearchParameterMap.containsKey(patientParamName)\n+\t\t\t|| theSearchParameterMap.containsKey(subjectParamName)) {\n+\t\t\tfor (String subject : getSubjectReferenceCriteria(patientParamName, subjectParamName, theSearchParameterMap)) {", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3NDM5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432674399", "bodyText": "Yes, we are allowing for more than 1 subject because the client requesting this operation has a use case for more than 1 subject. Looking at the FHIR specification, it does not appear to specifically prohibit more than one subject, although that might admittedly change in a later version.", "author": "IanMMarshall", "createdAt": "2020-05-29T18:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMjk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2Njc4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431466787", "bodyText": "Are these todos still relevant? If so, maybe open an issue for them", "author": "tadgh", "createdAt": "2020-05-27T21:58:38Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/json/ObservationJson.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package ca.uhn.fhir.jpa.search.lastn.json;\n+\n+/*\n+ * #%L\n+ * Smile CDR - CDR\n+ * %%\n+ * Copyright (C) 2016 - 2019 Simpatico Intelligent Systems Inc\n+ * %%\n+ * All rights reserved.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.search.lastn.util.CodeSystemHash;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonAutoDetect(creatorVisibility = JsonAutoDetect.Visibility.NONE, fieldVisibility = JsonAutoDetect.Visibility.NONE, getterVisibility = JsonAutoDetect.Visibility.NONE, isGetterVisibility = JsonAutoDetect.Visibility.NONE, setterVisibility = JsonAutoDetect.Visibility.NONE)\n+public class ObservationJson {\n+\n+    @JsonProperty(value = \"identifier\", required = true)\n+    private String myIdentifier;\n+\n+    @JsonProperty(value = \"subject\", required = true)\n+    private String mySubject;\n+\n+    @JsonProperty(value = \"categoryconcepttext\", required = false)\n+    private List<String> myCategory_concept_text = new ArrayList<>();\n+\n+    @JsonProperty(value = \"categoryconceptcodingcode\", required = false)\n+    private List<List<String>> myCategory_coding_code = new ArrayList<>();\n+\n+    @JsonProperty(value = \"categoryconceptcodingcode_system_hash\", required = false)\n+    private List<List<String>> myCategory_coding_code_system_hash = new ArrayList<>();\n+\n+    @JsonProperty(value = \"categoryconceptcodingdisplay\", required = false)\n+    private List<List<String>> myCategory_coding_display = new ArrayList<>();\n+\n+    @JsonProperty(value = \"categoryconceptcodingsystem\", required = false)\n+    private List<List<String>> myCategory_coding_system = new ArrayList<>();\n+\n+    @JsonProperty(value = \"codeconceptid\", required = false)\n+    private String myCode_concept_id;\n+\n+    @JsonProperty(value = \"codeconcepttext\", required = false)\n+    private String myCode_concept_text;\n+\n+    @JsonProperty(value = \"codeconceptcodingcode\", required = false)\n+\t // TODO: Temporary change until sort out how to deal with multiple observation code codings\n+//    private List<String> myCode_coding_code = new ArrayList<>();", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3NzQ5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432677499", "bodyText": "Yes, they are still relevant, but I will remove these and create a separate issue.", "author": "IanMMarshall", "createdAt": "2020-05-29T18:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2Njc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5OTY3Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r431999673", "bodyText": "Would appreciate Javadocs here too", "author": "tadgh", "createdAt": "2020-05-28T17:20:55Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/IElasticsearchSvc.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package ca.uhn.fhir.jpa.search.lastn;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+\n+import java.util.List;\n+\n+public interface IElasticsearchSvc {\n+\tList<String> executeLastN(SearchParameterMap theSearchParameterMap, FhirContext theFhirContext, Integer theMaxResultsToFetch);", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NDQ4Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432744486", "bodyText": "Done.", "author": "IanMMarshall", "createdAt": "2020-05-29T21:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5OTY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMjczMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432002730", "bodyText": "it is unclear how setting IsTest sets chunk size to 50`", "author": "tadgh", "createdAt": "2020-05-28T17:26:00Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchLastNIT.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package ca.uhn.fhir.jpa.dao.r4;\n+\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.param.*;\n+import ca.uhn.fhir.util.TestUtil;\n+import org.hl7.fhir.r4.model.*;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+public class FhirResourceDaoR4SearchLastNIT extends BaseR4SearchLastN {\n+\n+\t@After\n+\tpublic void resetMaximumPageSize() {\n+\t\tSearchBuilder.setIsTest(false);\n+\t}\n+\n+\t@Test\n+\tpublic void testLastNChunking() {\n+\n+\t\t// Set up search parameters that will return 75 Observations.\n+\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\tReferenceParam subjectParam1 = new ReferenceParam(\"Patient\", \"\", patient0Id.getValue());\n+\t\tReferenceParam subjectParam2 = new ReferenceParam(\"Patient\", \"\", patient1Id.getValue());\n+\t\tReferenceParam subjectParam3 = new ReferenceParam(\"Patient\", \"\", patient2Id.getValue());\n+\t\tparams.add(Observation.SP_SUBJECT, buildReferenceAndListParam(subjectParam1, subjectParam2, subjectParam3));\n+\t\tTokenParam codeParam1 = new TokenParam(codeSystem, observationCd0);\n+\t\tTokenParam codeParam2 = new TokenParam(codeSystem, observationCd1);\n+\t\tparams.add(Observation.SP_CODE, buildTokenAndListParam(codeParam1, codeParam2));\n+\n+\t\tparams.setLastN(true);\n+\t\tparams.setLastNMax(100);\n+\n+\t\tMap<String, String[]> requestParameters = new HashMap<>();\n+\t\twhen(mySrd.getParameters()).thenReturn(requestParameters);\n+\n+\t\t// Set chunk size to 50\n+\t\tSearchBuilder.setIsTest(true);", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NjE0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432766141", "bodyText": "I have changed the method name to make it more explicit what it does.", "author": "IanMMarshall", "createdAt": "2020-05-29T22:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMjczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMzIwMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432003201", "bodyText": "I'm confused as to why the pidlist would be padded with -1, am I missing some internal functionality?", "author": "tadgh", "createdAt": "2020-05-28T17:26:46Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchLastNIT.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package ca.uhn.fhir.jpa.dao.r4;\n+\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.param.*;\n+import ca.uhn.fhir.util.TestUtil;\n+import org.hl7.fhir.r4.model.*;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+public class FhirResourceDaoR4SearchLastNIT extends BaseR4SearchLastN {\n+\n+\t@After\n+\tpublic void resetMaximumPageSize() {\n+\t\tSearchBuilder.setIsTest(false);\n+\t}\n+\n+\t@Test\n+\tpublic void testLastNChunking() {\n+\n+\t\t// Set up search parameters that will return 75 Observations.\n+\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\tReferenceParam subjectParam1 = new ReferenceParam(\"Patient\", \"\", patient0Id.getValue());\n+\t\tReferenceParam subjectParam2 = new ReferenceParam(\"Patient\", \"\", patient1Id.getValue());\n+\t\tReferenceParam subjectParam3 = new ReferenceParam(\"Patient\", \"\", patient2Id.getValue());\n+\t\tparams.add(Observation.SP_SUBJECT, buildReferenceAndListParam(subjectParam1, subjectParam2, subjectParam3));\n+\t\tTokenParam codeParam1 = new TokenParam(codeSystem, observationCd0);\n+\t\tTokenParam codeParam2 = new TokenParam(codeSystem, observationCd1);\n+\t\tparams.add(Observation.SP_CODE, buildTokenAndListParam(codeParam1, codeParam2));\n+\n+\t\tparams.setLastN(true);\n+\t\tparams.setLastNMax(100);\n+\n+\t\tMap<String, String[]> requestParameters = new HashMap<>();\n+\t\twhen(mySrd.getParameters()).thenReturn(requestParameters);\n+\n+\t\t// Set chunk size to 50\n+\t\tSearchBuilder.setIsTest(true);\n+\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tList<String> results = toUnqualifiedVersionlessIdValues(myObservationDao.observationsLastN(params, mockSrd(),null));\n+\t\tassertEquals(75, results.size());\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tList<String> queries = myCaptureQueriesListener\n+\t\t\t.getSelectQueriesForCurrentThread()\n+\t\t\t.stream()\n+\t\t\t.map(t -> t.getSql(true, false))\n+\t\t\t.collect(Collectors.toList());\n+\n+\t\t// Two chunked queries executed by the QueryIterator (in current thread) and two chunked queries to retrieve resources by PID.\n+\t\tassertEquals(4, queries.size());\n+\n+\t\t// The first and third chunked queries should have a full complement of PIDs\n+\t\tStringBuilder firstQueryPattern = new StringBuilder(\".*RES_ID in \\\\('[0-9]+'\");\n+\t\tfor (int pidIndex = 1; pidIndex<50; pidIndex++) {\n+\t\t\tfirstQueryPattern.append(\" , '[0-9]+'\");\n+\t\t}\n+\t\tfirstQueryPattern.append(\"\\\\).*\");\n+\t\tassertThat(queries.get(0), matchesPattern(firstQueryPattern.toString()));\n+\t\tassertThat(queries.get(2), matchesPattern(firstQueryPattern.toString()));\n+\n+\t\t// the second and fourth chunked queries should be padded with \"-1\".", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzUwOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432767508", "bodyText": "The SearchBuilder pads the pidlist with -1 in order normalize the number of arguments that appear in search query's \"in\" clause. The reason for this is that Hibernate caches query plans for the searches, but it creates a different query plan each time there is a different number of parameters in the \"in\" clause. By normalizing the size of these clauses to a smaller number it reduces the memory used by the application.", "author": "IanMMarshall", "createdAt": "2020-05-29T22:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMzIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMzgzOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432003839", "bodyText": "suggestion: remove commented code if its unused.", "author": "tadgh", "createdAt": "2020-05-28T17:27:50Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/search/lastn/LastNElasticsearchSvcSingleObservationIT.java", "diffHunk": "@@ -0,0 +1,353 @@\n+package ca.uhn.fhir.jpa.search.lastn;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.search.lastn.config.TestElasticsearchConfig;\n+import ca.uhn.fhir.jpa.search.lastn.json.CodeJson;\n+import ca.uhn.fhir.jpa.search.lastn.json.ObservationJson;\n+import ca.uhn.fhir.jpa.search.lastn.util.CodeSystemHash;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.dstu2.resource.Observation;\n+import ca.uhn.fhir.rest.param.*;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.junit.*;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = {TestElasticsearchConfig.class})\n+public class LastNElasticsearchSvcSingleObservationIT {\n+\n+\t@Autowired\n+\tElasticsearchSvcImpl elasticsearchSvc;\n+\n+\tstatic ObjectMapper ourMapperNonPrettyPrint;\n+\n+\tfinal String RESOURCEPID = \"123\";\n+\tfinal String SUBJECTID = \"Patient/4567\";\n+\tfinal Date EFFECTIVEDTM = new Date();\n+\tfinal String FIRSTCATEGORYTEXT = \"Test Codeable Concept Field for first category\";\n+\tfinal String CATEGORYFIRSTCODINGSYSTEM = \"http://mycodes.org/fhir/observation-category\";\n+\tfinal String CATEGORYSECONDCODINGSYSTEM = \"http://myalternatecodes.org/fhir/observation-category\";\n+\tfinal String CATEGORYTHIRDCODINGSYSTEM = \"http://mysecondaltcodes.org/fhir/observation-category\";\n+\tfinal String FIRSTCATEGORYFIRSTCODINGCODE = \"test-heart-rate\";\n+\tfinal String FIRSTCATEGORYFIRSTCODINGDISPLAY = \"test-heart-rate display\";\n+\tfinal String FIRSTCATEGORYSECONDCODINGCODE = \"test-alt-heart-rate\";\n+\tfinal String FIRSTCATEGORYSECONDCODINGDISPLAY = \"test-alt-heart-rate display\";\n+\tfinal String FIRSTCATEGORYTHIRDCODINGCODE = \"test-2nd-alt-heart-rate\";\n+\tfinal String FIRSTCATEGORYTHIRDCODINGDISPLAY = \"test-2nd-alt-heart-rate display\";\n+\tfinal String SECONDCATEGORYTEXT = \"Test Codeable Concept Field for for second category\";\n+\tfinal String SECONDCATEGORYFIRSTCODINGCODE = \"test-vital-signs\";\n+\tfinal String SECONDCATEGORYFIRSTCODINGDISPLAY = \"test-vital-signs display\";\n+\tfinal String SECONDCATEGORYSECONDCODINGCODE = \"test-alt-vitals\";\n+\tfinal String SECONDCATEGORYSECONDCODINGDISPLAY = \"test-alt-vitals display\";\n+\tfinal String SECONDCATEGORYTHIRDCODINGCODE = \"test-2nd-alt-vitals\";\n+\tfinal String SECONDCATEGORYTHIRDCODINGDISPLAY = \"test-2nd-alt-vitals display\";\n+\tfinal String THIRDCATEGORYTEXT = \"Test Codeable Concept Field for third category\";\n+\tfinal String THIRDCATEGORYFIRSTCODINGCODE = \"test-vital-panel\";\n+\tfinal String THIRDCATEGORYFIRSTCODINGDISPLAY = \"test-vitals-panel display\";\n+\tfinal String THIRDCATEGORYSECONDCODINGCODE = \"test-alt-vitals-panel\";\n+\tfinal String THIRDCATEGORYSECONDCODINGDISPLAY = \"test-alt-vitals display\";\n+\tfinal String THIRDCATEGORYTHIRDCODINGCODE = \"test-2nd-alt-vitals-panel\";\n+\tfinal String THIRDCATEGORYTHIRDCODINGDISPLAY = \"test-2nd-alt-vitals-panel display\";\n+\n+\tfinal String OBSERVATIONSINGLECODEID = UUID.randomUUID().toString();\n+\tfinal String OBSERVATIONCODETEXT = \"Test Codeable Concept Field for Code\";\n+\tfinal String CODEFIRSTCODINGSYSTEM = \"http://mycodes.org/fhir/observation-code\";\n+\tfinal String CODEFIRSTCODINGCODE = \"test-code\";\n+\tfinal String CODEFIRSTCODINGDISPLAY = \"test-code display\";\n+//\tfinal String CODESECONDCODINGSYSTEM = \"http://myalternatecodes.org/fhir/observation-code\";\n+//\tfinal String CODESECONDCODINGCODE = \"test-alt-code\";\n+//\tfinal String CODESECONDCODINGDISPLAY = \"test-alt-code display\";\n+//\tfinal String CODETHIRDCODINGSYSTEM = \"http://mysecondaltcodes.org/fhir/observation-code\";\n+//\tfinal String CODETHIRDCODINGCODE = \"test-second-alt-code\";\n+//\tfinal String CODETHIRDCODINGDISPLAY = \"test-second-alt-code display\";", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4MDA1OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432680058", "bodyText": "Done.", "author": "IanMMarshall", "createdAt": "2020-05-29T19:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMzgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNDI4Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432004283", "bodyText": "remove this as well", "author": "tadgh", "createdAt": "2020-05-28T17:28:38Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/search/lastn/config/TestElasticsearchConfig.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package ca.uhn.fhir.jpa.search.lastn.config;\n+\n+import ca.uhn.fhir.context.ConfigurationException;\n+import ca.uhn.fhir.jpa.search.lastn.ElasticsearchSvcImpl;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import pl.allegro.tech.embeddedelasticsearch.EmbeddedElastic;\n+import pl.allegro.tech.embeddedelasticsearch.PopularProperties;\n+\n+import javax.annotation.PreDestroy;\n+import java.io.IOException;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+\n+@Configuration\n+public class TestElasticsearchConfig {\n+\n+\tprivate final String elasticsearchHost = \"localhost\";\n+\tprivate final String elasticsearchUserId = \"\";\n+\tprivate final String elasticsearchPassword = \"\";\n+\n+\tprivate static final String ELASTIC_VERSION = \"6.5.4\";\n+\n+\n+\t@Bean()\n+\tpublic ElasticsearchSvcImpl myElasticsearchSvc() throws IOException {\n+\t\tint elasticsearchPort = embeddedElasticSearch().getHttpPort();\n+\t\treturn new ElasticsearchSvcImpl(elasticsearchHost, elasticsearchPort, elasticsearchUserId, elasticsearchPassword);\n+\t}\n+\n+\t@Bean\n+\tpublic EmbeddedElastic embeddedElasticSearch() {\n+\t\tEmbeddedElastic embeddedElastic = null;\n+\t\ttry {\n+\t\t\tembeddedElastic = EmbeddedElastic.builder()\n+\t\t\t\t\t.withElasticVersion(ELASTIC_VERSION)\n+\t\t\t\t\t.withSetting(PopularProperties.TRANSPORT_TCP_PORT, 0)\n+\t\t\t\t\t.withSetting(PopularProperties.HTTP_PORT, 0)\n+\t\t\t\t\t.withSetting(PopularProperties.CLUSTER_NAME, UUID.randomUUID())\n+\t\t\t\t\t.withStartTimeout(60, TimeUnit.SECONDS)\n+\t\t\t\t\t.build()\n+\t\t\t\t\t.start();\n+\t\t} catch (IOException | InterruptedException e) {\n+\t\t\tthrow new ConfigurationException(e);\n+\t\t}\n+\n+\t\treturn embeddedElastic;\n+\t}\n+\n+//\t@PreDestroy\n+//\tpublic void stop() {\n+//\t\tembeddedElasticSearch().stop();\n+//\t}", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzcxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432767712", "bodyText": "Done.", "author": "IanMMarshall", "createdAt": "2020-05-29T22:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNDI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwOTk5Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432009997", "bodyText": "Can you explain the purpose of these embeddable entities to me? I'm unfamiliar with the concept and would like to understand what's going on here a bit better", "author": "tadgh", "createdAt": "2020-05-28T17:38:45Z", "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ObservationIndexedCodeCodeableConceptEntity.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package ca.uhn.fhir.jpa.model.entity;\n+\n+import org.hibernate.search.annotations.DocumentId;\n+import org.hibernate.search.annotations.Field;\n+import org.hibernate.search.annotations.Indexed;\n+import org.hibernate.search.annotations.IndexedEmbedded;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Indexed(index = \"code_index\")\n+@Embeddable\n+@Table(name = \"HFJ_SPIDX_LASTN_CODE_CONCEPT\")\n+public class ObservationIndexedCodeCodeableConceptEntity {\n+\n+\tpublic static final int MAX_LENGTH = 200;\n+\n+\t@Id\n+    @DocumentId(name = \"codeable_concept_id\")\n+    @Column(name=\"CODEABLE_CONCEPT_ID\", length = MAX_LENGTH)\n+    private String myCodeableConceptId;\n+\n+    @Field(name = \"text\")\n+    @Column(name = \"CODEABLE_CONCEPT_TEXT\", nullable = true, length = MAX_LENGTH)\n+    private String myCodeableConceptText;\n+\n+    // TODO: Make coding a Collection. Need to first figure out how to maintain this over time.\n+    @IndexedEmbedded(depth=2, prefix = \"coding\")\n+//    @OneToMany(mappedBy = \"myCodeableConceptId\", cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n+\t @JoinColumn(name = \"CODEABLE_CONCEPT_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_CONCEPT_CODE\"))\n+\t @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n+//    private Set<ObservationIndexedCodeCodingEntity> myObservationIndexedCodeCodingEntitySet;\n+\t private ObservationIndexedCodeCodingEntity myObservationIndexedCodeCodingEntity;\n+\n+    public ObservationIndexedCodeCodeableConceptEntity() {\n+\n+    }\n+\n+    public ObservationIndexedCodeCodeableConceptEntity(String theCodeableConceptText, String theCodeableConceptId) {\n+        setCodeableConceptText(theCodeableConceptText);\n+        setCodeableConceptId(theCodeableConceptId);\n+    }\n+\n+    public void addCoding(ObservationIndexedCodeCodingEntity theObservationIndexedCodeCodingEntity) {\n+//        if (myObservationIndexedCodeCodingEntitySet == null) {\n+//            myObservationIndexedCodeCodingEntitySet = new HashSet<>();\n+//        }\n+//        myObservationIndexedCodeCodingEntitySet.add(theObservationIndexedCodeCodingEntity);\n+\t\t myObservationIndexedCodeCodingEntity = theObservationIndexedCodeCodingEntity;\n+    }\n+\n+    public String getCodeableConceptId() {\n+        return myCodeableConceptId;\n+    }\n+\n+    public void setCodeableConceptId(String theCodeableConceptId) {\n+        myCodeableConceptId = theCodeableConceptId;\n+    }\n+\n+    public String getCodeableConceptText() {\n+        return myCodeableConceptText;\n+    }\n+\n+    public void setCodeableConceptText(String theCodeableConceptText) {\n+        myCodeableConceptText = theCodeableConceptText;\n+    }\n+\n+\n+\n+}", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MDU1NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432770554", "bodyText": "Basically this allows Hibernate Search to index rows that are part of a one-to-many or many-to-many relationship. In this case, we have Observation Code which is defined as CodeableConcept. However a CodeableConcept can have multiple codings. We need to index on the code and system which are defined in the codings which make up the CodeableConcept. The Embeddable annotation is normally used to indicate that an entity is used for indexing by another entity.", "author": "IanMMarshall", "createdAt": "2020-05-29T22:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwOTk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMTEyMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432011122", "bodyText": "Am I crazy or are there two CodeSystemHash classes? Any reason for the duplication between jpaserver-model and jpaserver-base?", "author": "tadgh", "createdAt": "2020-05-28T17:40:45Z", "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/util/CodeSystemHash.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package ca.uhn.fhir.jpa.model.util;\n+\n+import ca.uhn.fhir.util.UrlUtil;\n+import com.google.common.base.Charsets;\n+import com.google.common.hash.HashCode;\n+import com.google.common.hash.HashFunction;\n+import com.google.common.hash.Hasher;\n+import com.google.common.hash.Hashing;\n+\n+public class CodeSystemHash {\n+    private static final HashFunction HASH_FUNCTION = Hashing.murmur3_128(0);\n+    private static final byte[] DELIMITER_BYTES = \"|\".getBytes(Charsets.UTF_8);\n+\n+    static public long hashCodeSystem( String system, String code ) {\n+        Hasher hasher = HASH_FUNCTION.newHasher();\n+        addStringToHasher(hasher, system);\n+        addStringToHasher(hasher, code);\n+\n+        HashCode hashCode = hasher.hash();\n+        return hashCode.asLong();\n+    }\n+\n+    static private void addStringToHasher(Hasher hasher, String next) {\n+        if (next == null) {\n+            hasher.putByte((byte) 0);\n+        } else {\n+            next = UrlUtil.escapeUrlParam(next);\n+            byte[] bytes = next.getBytes(Charsets.UTF_8);\n+            hasher.putBytes(bytes);\n+        }\n+        hasher.putBytes(DELIMITER_BYTES);\n+    }\n+}", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5NzI4OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432797288", "bodyText": "No, that was something I meant to fix. I have now removed the one from jpaserver-base and changed all references to point to the one in jpaserver-model.", "author": "IanMMarshall", "createdAt": "2020-05-30T01:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMTEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMzA0NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432013045", "bodyText": "This function could do with some tidying up, its looking a little hairy. theContext.getVersion().getVersion() can be ripped out into a variable, and each of these 4-level || checks could be broken out so this reads better, e.g.\nif (isR5(version) && isLastNParamR5(theParamName))", "author": "tadgh", "createdAt": "2020-05-28T17:44:20Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/LastNParameterHelper.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.FhirVersionEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class LastNParameterHelper {\n+\n+\tpublic static boolean isLastNParameter(String theParamName, FhirContext theContext) {\n+\t\tif (theParamName == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (theContext.getVersion().getVersion() == FhirVersionEnum.R5) {", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5ODgxMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432798811", "bodyText": "Good point. Done.", "author": "IanMMarshall", "createdAt": "2020-05-30T01:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMzA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNDEyNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432014127", "bodyText": "So in all these cases, SP_PATIENT resolves to \"patient\" right? I wonder if its worth just returning the string if we detect that the version is legal. Bit of a hack but this seems like a ton of conditionals for what is essentially just:\nreturn \"patient\" if version >=3 else throw", "author": "tadgh", "createdAt": "2020-05-28T17:46:14Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/LastNParameterHelper.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.FhirVersionEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class LastNParameterHelper {\n+\n+\tpublic static boolean isLastNParameter(String theParamName, FhirContext theContext) {\n+\t\tif (theParamName == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (theContext.getVersion().getVersion() == FhirVersionEnum.R5) {\n+\t\t\tif (theParamName.equals(org.hl7.fhir.r5.model.Observation.SP_SUBJECT) || theParamName.equals(org.hl7.fhir.r5.model.Observation.SP_PATIENT)\n+\t\t\t\t|| theParamName.equals(org.hl7.fhir.r5.model.Observation.SP_CATEGORY) || theParamName.equals(org.hl7.fhir.r5.model.Observation.SP_CODE)) {\n+\t\t\t\treturn true;\n+\t\t\t} else {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t} else if (theContext.getVersion().getVersion() == FhirVersionEnum.R4) {\n+\t\t\tif (theParamName.equals(org.hl7.fhir.r4.model.Observation.SP_SUBJECT) || theParamName.equals(org.hl7.fhir.r4.model.Observation.SP_PATIENT)\n+\t\t\t\t|| theParamName.equals(org.hl7.fhir.r4.model.Observation.SP_CATEGORY) || theParamName.equals(org.hl7.fhir.r4.model.Observation.SP_CODE)) {\n+\t\t\t\treturn true;\n+\t\t\t} else {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t} else if (theContext.getVersion().getVersion() == FhirVersionEnum.DSTU3) {\n+\t\t\tif (theParamName.equals(org.hl7.fhir.dstu3.model.Observation.SP_SUBJECT) || theParamName.equals(org.hl7.fhir.dstu3.model.Observation.SP_PATIENT)\n+\t\t\t\t|| theParamName.equals(org.hl7.fhir.dstu3.model.Observation.SP_CATEGORY) || theParamName.equals(org.hl7.fhir.dstu3.model.Observation.SP_CODE)) {\n+\t\t\t\treturn true;\n+\t\t\t} else {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(\"$lastn operation is not implemented for FHIR Version \" + theContext.getVersion().getVersion().getFhirVersionString());\n+\t\t}\n+\t}\n+\n+\tpublic static String getSubjectParamName(FhirContext theContext) {\n+\t\tif (theContext.getVersion().getVersion() == FhirVersionEnum.R5) {\n+\t\t\treturn org.hl7.fhir.r5.model.Observation.SP_SUBJECT;\n+\t\t} else if (theContext.getVersion().getVersion() == FhirVersionEnum.R4) {\n+\t\t\treturn org.hl7.fhir.r4.model.Observation.SP_SUBJECT;\n+\t\t} else if (theContext.getVersion().getVersion() == FhirVersionEnum.DSTU3) {\n+\t\t\treturn org.hl7.fhir.dstu3.model.Observation.SP_SUBJECT;\n+\t\t} else {\n+\t\t\tthrow new InvalidRequestException(\"$lastn operation is not implemented for FHIR Version \" + theContext.getVersion().getVersion().getFhirVersionString());\n+\t\t}\n+\t}\n+\n+\tpublic static String getPatientParamName(FhirContext theContext) {\n+\t\tif (theContext.getVersion().getVersion() == FhirVersionEnum.R5) {\n+\t\t\treturn org.hl7.fhir.r5.model.Observation.SP_PATIENT;\n+\t\t} else if (theContext.getVersion().getVersion() == FhirVersionEnum.R4) {\n+\t\t\treturn org.hl7.fhir.r4.model.Observation.SP_PATIENT;\n+\t\t} else if (theContext.getVersion().getVersion() == FhirVersionEnum.DSTU3) {\n+\t\t\treturn org.hl7.fhir.dstu3.model.Observation.SP_PATIENT;", "originalCommit": "5cc77b78d48797949357138b5814153538dfaffd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMDkyOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1867#discussion_r432800928", "bodyText": "I am not sure I agree with this suggestion. I admit that the conditionals are a bit onerous, but I am concerned that using hard-coded Strings will make future debugging and maintenance more difficult. A better solution would be to come up with a common set of search parameter names that are not tied to specific FHIR versions and replacing all of the version-specific references with the common references.", "author": "IanMMarshall", "createdAt": "2020-05-30T02:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNDEyNw=="}], "type": "inlineReview"}, {"oid": "a4811f150844720f516cf2675e017c507188d0a1", "url": "https://github.com/hapifhir/hapi-fhir/commit/a4811f150844720f516cf2675e017c507188d0a1", "message": "Changes per code review.", "committedDate": "2020-05-30T03:47:44Z", "type": "commit"}, {"oid": "f48214deda0f5e9282d789a7baeb7fb8dfcc6ebb", "url": "https://github.com/hapifhir/hapi-fhir/commit/f48214deda0f5e9282d789a7baeb7fb8dfcc6ebb", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200316_lastn_operation_elasticsearch\n\n# Conflicts:\n#\thapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "committedDate": "2020-05-30T03:54:11Z", "type": "commit"}]}