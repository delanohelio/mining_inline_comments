{"pr_number": 1897, "pr_title": "Im 20200604 remove observation index tables", "pr_createdAt": "2020-06-04T17:29:17Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1897", "timeline": [{"oid": "6e507bf642eb70d5152e3448a9db497498572492", "url": "https://github.com/hapifhir/hapi-fhir/commit/6e507bf642eb70d5152e3448a9db497498572492", "message": "Changed observation indexing to bypass hibernate search and removed Observation indexing tables.", "committedDate": "2020-06-04T17:10:06Z", "type": "commit"}, {"oid": "9696af5dc083d5a71a3b137cc71300ecc32a34e9", "url": "https://github.com/hapifhir/hapi-fhir/commit/9696af5dc083d5a71a3b137cc71300ecc32a34e9", "message": "Changed observation indexing to bypass hibernate search and removed Observation index tables.", "committedDate": "2020-06-04T17:20:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0MDkzMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1897#discussion_r435440932", "bodyText": "Match Phrase is case insensitive, is that the intent here? Also, match phrase search for my-text will match\n hello everybody this is my-text. Is this intended? Or are we looking to get an exact match?", "author": "tadgh", "createdAt": "2020-06-04T17:51:38Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -539,8 +540,104 @@ private void addObservationCodeCriteria(BoolQueryBuilder theBoolQueryBuilder, Se\n \t\treturn codes;\n \t}\n \n-\t@VisibleForTesting\n-\tboolean performIndex(String theIndexName, String theDocumentId, String theIndexDocument, String theDocumentType) throws IOException {\n+\t@Override\n+\tpublic ObservationJson getObservationDocument(String theDocumentID) {\n+\t\tif (theDocumentID == null) {\n+\t\t\tthrow new InvalidRequestException(\"Require non-null document ID for observation document query\");\n+\t\t}\n+\t\tSearchRequest theSearchRequest = buildSingleObservationSearchRequest(theDocumentID);\n+\t\tObservationJson observationDocumentJson = null;\n+\t\ttry {\n+\t\t\tSearchResponse observationDocumentResponse = executeSearchRequest(theSearchRequest);\n+\t\t\tSearchHit[] observationDocumentHits = observationDocumentResponse.getHits().getHits();\n+\t\t\tif (observationDocumentHits.length > 0) {\n+\t\t\t\t// There should be no more than one hit for the identifier\n+\t\t\t\tString observationDocument = observationDocumentHits[0].getSourceAsString();\n+\t\t\t\tobservationDocumentJson = objectMapper.readValue(observationDocument, ObservationJson.class);\n+\t\t\t}\n+\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InvalidRequestException(\"Unable to execute observation document query for ID \" + theDocumentID, theE);\n+\t\t}\n+\n+\t\treturn observationDocumentJson;\n+\t}\n+\n+\tprivate SearchRequest buildSingleObservationSearchRequest(String theObservationIdentifier) {\n+\t\tSearchRequest searchRequest = new SearchRequest(OBSERVATION_INDEX);\n+\t\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+\t\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n+\t\tboolQueryBuilder.must(QueryBuilders.termQuery(OBSERVATION_IDENTIFIER_FIELD_NAME, theObservationIdentifier));\n+\t\tsearchSourceBuilder.query(boolQueryBuilder);\n+\t\tsearchSourceBuilder.size(1);\n+\n+\t\tsearchRequest.source(searchSourceBuilder);\n+\n+\t\treturn searchRequest;\n+\t}\n+\n+\t@Override\n+\tpublic CodeJson getObservationCodeDocument(String theCodeSystemHash, String theText) {\n+\t\tif(theCodeSystemHash == null && theText == null) {\n+\t\t\tthrow new InvalidRequestException(\"Require a non-null code system hash value or display value for observation code document query\");\n+\t\t}\n+\t\tSearchRequest theSearchRequest = buildSingleObservationCodeSearchRequest(theCodeSystemHash, theText);\n+\t\tCodeJson observationCodeDocumentJson = null;\n+\t\ttry {\n+\t\t\tSearchResponse observationCodeDocumentResponse = executeSearchRequest(theSearchRequest);\n+\t\t\tSearchHit[] observationCodeDocumentHits = observationCodeDocumentResponse.getHits().getHits();\n+\t\t\tif (observationCodeDocumentHits.length > 0) {\n+\t\t\t\t// There should be no more than one hit for the code lookup.\n+\t\t\t\tString observationCodeDocument = observationCodeDocumentHits[0].getSourceAsString();\n+\t\t\t\tobservationCodeDocumentJson = objectMapper.readValue(observationCodeDocument, CodeJson.class);\n+\t\t\t}\n+\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InvalidRequestException(\"Unable to execute observation code document query hash code or display\", theE);\n+\t\t}\n+\n+\t\treturn observationCodeDocumentJson;\n+\t}\n+\n+\tprivate SearchRequest buildSingleObservationCodeSearchRequest(String theCodeSystemHash, String theText) {\n+\t\tSearchRequest searchRequest = new SearchRequest(OBSERVATION_CODE_INDEX);\n+\t\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+\t\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n+\t\tif (theCodeSystemHash != null) {\n+\t\t\tboolQueryBuilder.must(QueryBuilders.termQuery(\"codingcode_system_hash\", theCodeSystemHash));\n+\t\t} else {\n+\t\t\tboolQueryBuilder.must(QueryBuilders.matchPhraseQuery(\"text\", theText));", "originalCommit": "9696af5dc083d5a71a3b137cc71300ecc32a34e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2MDI3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1897#discussion_r435460275", "bodyText": "The intention here is to get an exact match.", "author": "IanMMarshall", "createdAt": "2020-06-04T18:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0MDkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0NDI4NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1897#discussion_r435444284", "bodyText": "It's probably faster to just delete the index, assuming index auto-create is on, it will get recreated when next a document comes in for it.", "author": "tadgh", "createdAt": "2020-06-04T17:57:17Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -556,11 +653,27 @@ private IndexRequest createIndexRequest(String theIndexName, String theDocumentI\n \t\treturn request;\n \t}\n \n+\t@Override\n+\tpublic void deleteObservationDocument(String theDocumentId) {\n+\t\tDeleteByQueryRequest deleteByQueryRequest = new DeleteByQueryRequest(OBSERVATION_INDEX);\n+\t\tdeleteByQueryRequest.setQuery(QueryBuilders.termQuery(OBSERVATION_IDENTIFIER_FIELD_NAME, theDocumentId));\n+\t\ttry {\n+\t\t\tmyRestHighLevelClient.deleteByQuery(deleteByQueryRequest, RequestOptions.DEFAULT);\n+\t\t} catch (IOException theE) {\n+\t\t\tthrow new InvalidRequestException(\"Unable to delete Observation \" + theDocumentId);\n+\t\t}\n+\t}\n+\n \t@VisibleForTesting\n-\tvoid deleteAllDocuments(String theIndexName) throws IOException {\n+\tpublic void deleteAllDocumentsForTest(String theIndexName) throws IOException {\n \t\tDeleteByQueryRequest deleteByQueryRequest = new DeleteByQueryRequest(theIndexName);\n \t\tdeleteByQueryRequest.setQuery(QueryBuilders.matchAllQuery());\n \t\tmyRestHighLevelClient.deleteByQuery(deleteByQueryRequest, RequestOptions.DEFAULT);\n \t}", "originalCommit": "9696af5dc083d5a71a3b137cc71300ecc32a34e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MDg0NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1897#discussion_r435480845", "bodyText": "This seems to cause me more problems as certain operations query the index to determine the existence of a document before creating anything and as such sometimes the index is not yet auto-created.", "author": "IanMMarshall", "createdAt": "2020-06-04T18:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0NDI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0NDYzOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1897#discussion_r435444638", "bodyText": "Is this returning success? or is it 1 == created, 0 == updated?", "author": "tadgh", "createdAt": "2020-06-04T17:57:49Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/IElasticsearchSvc.java", "diffHunk": "@@ -35,4 +37,42 @@\n \t * @return\n \t */\n \tList<String> executeLastN(SearchParameterMap theSearchParameterMap, FhirContext theFhirContext, Integer theMaxResultsToFetch);\n+\n+\t/**\n+\t * Returns index document for a single Observation\n+\t * @param theDocumentID Identifier of Observation resource.\n+\t * @return\n+\t */\n+\tObservationJson getObservationDocument(String theDocumentID);\n+\n+\t/**\n+\t * Returns index document for a single Observation Code that either has a coding that matches a specified Code value and system or that has a specified text value.\n+\t * @param theCodeSystemHash A hash string constructed from a Code value and Code system used to match to an Observation Code.\n+\t * @param theText A text value used to match to an Observation Code.\n+\t * @return\n+\t */\n+\tCodeJson getObservationCodeDocument(String theCodeSystemHash, String theText);\n+\n+\t/**\n+\t * Creates or updates index for an Observation Resource.\n+\t * @param theDocumentId Identifier for Observation resource.\n+\t * @param theObservationDocument Indexing document for Observation.\n+\t * @return\n+\t */\n+\tBoolean createOrUpdateObservationIndex(String theDocumentId, ObservationJson theObservationDocument);\n+\n+\t/**\n+\t * Creates or updates index for an Observation Code.\n+\t * @param theCodeableConceptID Identifier for Observation resource.\n+\t * @param theObservationCodeDocument Indexing document for Observation.\n+\t * @return\n+\t */\n+\tBoolean createOrUpdateObservationCodeIndex(String theCodeableConceptID, CodeJson theObservationCodeDocument);", "originalCommit": "9696af5dc083d5a71a3b137cc71300ecc32a34e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MjI2Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1897#discussion_r435482267", "bodyText": "Good point. Updated the Javadoc to make this clearer.", "author": "IanMMarshall", "createdAt": "2020-06-04T18:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0NDYzOA=="}], "type": "inlineReview"}, {"oid": "0a2f9d2697ae7a315b514835ca0b8f71af69b239", "url": "https://github.com/hapifhir/hapi-fhir/commit/0a2f9d2697ae7a315b514835ca0b8f71af69b239", "message": "Changes per code review plus fix for possible intermittent JUnit failures.", "committedDate": "2020-06-04T19:24:41Z", "type": "commit"}]}