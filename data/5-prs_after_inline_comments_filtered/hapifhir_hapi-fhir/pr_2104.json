{"pr_number": 2104, "pr_title": "empi bugfixes and enhancements", "pr_createdAt": "2020-09-25T12:38:55Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/2104", "timeline": [{"oid": "f8f171f850d2a036dd42bc409f3c1f21a5157bc0", "url": "https://github.com/hapifhir/hapi-fhir/commit/f8f171f850d2a036dd42bc409f3c1f21a5157bc0", "message": "fixed swallowed exception", "committedDate": "2020-09-19T01:16:10Z", "type": "commit"}, {"oid": "e0e0fc619a087587463098abb7b2475893ba5e8b", "url": "https://github.com/hapifhir/hapi-fhir/commit/e0e0fc619a087587463098abb7b2475893ba5e8b", "message": "Merge remote-tracking branch 'origin/master' into ks-20200918-empi-bugfixes", "committedDate": "2020-09-19T01:16:26Z", "type": "commit"}, {"oid": "a0e16797e3946ab5fed9606e79250ee1add374f3", "url": "https://github.com/hapifhir/hapi-fhir/commit/a0e16797e3946ab5fed9606e79250ee1add374f3", "message": "url escape search parameters", "committedDate": "2020-09-19T16:16:26Z", "type": "commit"}, {"oid": "5f1a5bf3b838fda3f631960909cbd77ee570151b", "url": "https://github.com/hapifhir/hapi-fhir/commit/5f1a5bf3b838fda3f631960909cbd77ee570151b", "message": "improved logging for clear operation", "committedDate": "2020-09-20T15:25:06Z", "type": "commit"}, {"oid": "a162842caae3eb72fc9af4361eab63c6237ebe4b", "url": "https://github.com/hapifhir/hapi-fhir/commit/a162842caae3eb72fc9af4361eab63c6237ebe4b", "message": "refactored matchers and similarities\ntests in server pass.  still need to fix jpa tests", "committedDate": "2020-09-20T16:51:28Z", "type": "commit"}, {"oid": "6d65aa3368a63e6c904b0608d93b16fbf1b5d33c", "url": "https://github.com/hapifhir/hapi-fhir/commit/6d65aa3368a63e6c904b0608d93b16fbf1b5d33c", "message": "tests pass", "committedDate": "2020-09-21T13:21:09Z", "type": "commit"}, {"oid": "8ceca8e440f50cc2b4ff8275184cc875f96848d4", "url": "https://github.com/hapifhir/hapi-fhir/commit/8ceca8e440f50cc2b4ff8275184cc875f96848d4", "message": "renamed metric packages", "committedDate": "2020-09-21T13:23:55Z", "type": "commit"}, {"oid": "6d52a59aeb86552a3c8d9e6733d0a512f20ed420", "url": "https://github.com/hapifhir/hapi-fhir/commit/6d52a59aeb86552a3c8d9e6733d0a512f20ed420", "message": "identifier matcher simple case", "committedDate": "2020-09-21T15:17:18Z", "type": "commit"}, {"oid": "883b22e248579d62dfb77c973ae62df17e1f63ce", "url": "https://github.com/hapifhir/hapi-fhir/commit/883b22e248579d62dfb77c973ae62df17e1f63ce", "message": "finished IdentifierMatcher", "committedDate": "2020-09-21T15:45:07Z", "type": "commit"}, {"oid": "adeb2a93554cb8fed08d96b955f27bdff183c9ae", "url": "https://github.com/hapifhir/hapi-fhir/commit/adeb2a93554cb8fed08d96b955f27bdff183c9ae", "message": "tests pass", "committedDate": "2020-09-21T15:48:33Z", "type": "commit"}, {"oid": "e2caa9fe8d7aa65e8fdb43d583218a620d35af23", "url": "https://github.com/hapifhir/hapi-fhir/commit/e2caa9fe8d7aa65e8fdb43d583218a620d35af23", "message": "validate improved identifier matching", "committedDate": "2020-09-21T17:20:55Z", "type": "commit"}, {"oid": "b91e62acc225fe0d615c9670590adc2e71b4a937", "url": "https://github.com/hapifhir/hapi-fhir/commit/b91e62acc225fe0d615c9670590adc2e71b4a937", "message": "delete Persons in batch rather than one at a time", "committedDate": "2020-09-22T20:10:10Z", "type": "commit"}, {"oid": "359bacb9437f7748505498c520ea7b830d4de20f", "url": "https://github.com/hapifhir/hapi-fhir/commit/359bacb9437f7748505498c520ea7b830d4de20f", "message": "Merge remote-tracking branch 'origin/master' into ks-20200918-empi-bugfixes", "committedDate": "2020-09-22T20:10:27Z", "type": "commit"}, {"oid": "6d487a5b078ffde027974da58e98473dc9e55c49", "url": "https://github.com/hapifhir/hapi-fhir/commit/6d487a5b078ffde027974da58e98473dc9e55c49", "message": "Merge remote-tracking branch 'origin/master' into ks-20200918-empi-bugfixes", "committedDate": "2020-09-22T21:14:05Z", "type": "commit"}, {"oid": "f532e72962c043b5403f93525061e2cdfea97dd1", "url": "https://github.com/hapifhir/hapi-fhir/commit/f532e72962c043b5403f93525061e2cdfea97dd1", "message": "fixed a bug where EMPI processing was skipped if there were no candidateSearchParams defined", "committedDate": "2020-09-23T01:59:43Z", "type": "commit"}, {"oid": "d697dda8cfb5688b95c604cf826337274c71b644", "url": "https://github.com/hapifhir/hapi-fhir/commit/d697dda8cfb5688b95c604cf826337274c71b644", "message": "doc fix", "committedDate": "2020-09-23T15:57:50Z", "type": "commit"}, {"oid": "7c5645766351de7e0b0e6460345c892a6e0cfed4", "url": "https://github.com/hapifhir/hapi-fhir/commit/7c5645766351de7e0b0e6460345c892a6e0cfed4", "message": "doc fix", "committedDate": "2020-09-23T16:01:09Z", "type": "commit"}, {"oid": "50310a8bf7a77960d6fbd56fc5f7664368dc250c", "url": "https://github.com/hapifhir/hapi-fhir/commit/50310a8bf7a77960d6fbd56fc5f7664368dc250c", "message": "doc cleanup and nullable annotations", "committedDate": "2020-09-23T16:08:21Z", "type": "commit"}, {"oid": "79e7be385e53a72faed47cd78567a6fa7b66b4ed", "url": "https://github.com/hapifhir/hapi-fhir/commit/79e7be385e53a72faed47cd78567a6fa7b66b4ed", "message": "added test for empty candidateSearchParams case", "committedDate": "2020-09-23T16:38:45Z", "type": "commit"}, {"oid": "130d484848f1eb2ff0b4b6d376d7725f9e8cc3e6", "url": "https://github.com/hapifhir/hapi-fhir/commit/130d484848f1eb2ff0b4b6d376d7725f9e8cc3e6", "message": "refactor provider to support simplified json output", "committedDate": "2020-09-23T20:53:02Z", "type": "commit"}, {"oid": "0611271183f65d22514cd2433e5ef5b5a03546b9", "url": "https://github.com/hapifhir/hapi-fhir/commit/0611271183f65d22514cd2433e5ef5b5a03546b9", "message": "added controller layer to provider methods so we can have a simpler api in cdr", "committedDate": "2020-09-24T19:24:29Z", "type": "commit"}, {"oid": "e6266398a46a183b5bc8ea769c1ef3c79f19cf31", "url": "https://github.com/hapifhir/hapi-fhir/commit/e6266398a46a183b5bc8ea769c1ef3c79f19cf31", "message": "change list to stream so double-translation doesn't consume memory", "committedDate": "2020-09-24T19:40:13Z", "type": "commit"}, {"oid": "66ae3525f278515b9db58e48a65f716728756fde", "url": "https://github.com/hapifhir/hapi-fhir/commit/66ae3525f278515b9db58e48a65f716728756fde", "message": "add json encoder to helper", "committedDate": "2020-09-24T20:24:41Z", "type": "commit"}, {"oid": "866ffaa2a423ddec919e1eb4beb00ea202aa6141", "url": "https://github.com/hapifhir/hapi-fhir/commit/866ffaa2a423ddec919e1eb4beb00ea202aa6141", "message": "added controller layer", "committedDate": "2020-09-25T00:42:55Z", "type": "commit"}, {"oid": "2995a5ef9a9194a5add5327428a9c89c9dfcd0f1", "url": "https://github.com/hapifhir/hapi-fhir/commit/2995a5ef9a9194a5add5327428a9c89c9dfcd0f1", "message": "changelog and pre-review cleanup", "committedDate": "2020-09-25T13:14:40Z", "type": "commit"}, {"oid": "5ab1e3f5bf3bafd0b465c7cd200263b53edece9c", "url": "https://github.com/hapifhir/hapi-fhir/commit/5ab1e3f5bf3bafd0b465c7cd200263b53edece9c", "message": "Merge remote-tracking branch 'origin/master' into ks-20200918-empi-bugfixes", "committedDate": "2020-09-25T14:21:48Z", "type": "commit"}, {"oid": "a972cc7ecf6797882ca1302c98d70859263f8eb3", "url": "https://github.com/hapifhir/hapi-fhir/commit/a972cc7ecf6797882ca1302c98d70859263f8eb3", "message": "update documentation", "committedDate": "2020-09-25T17:15:36Z", "type": "commit"}, {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "url": "https://github.com/hapifhir/hapi-fhir/commit/0c5398959c332c56db94cd93be3e9a2b3b51ab92", "message": "FIXME", "committedDate": "2020-09-25T20:43:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxODg0Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495918843", "bodyText": "Fill out javadocs, also theThe", "author": "tadgh", "createdAt": "2020-09-28T12:59:43Z", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDao.java", "diffHunk": "@@ -254,6 +255,15 @@\n \n \tRuntimeResourceDefinition validateCriteriaAndReturnResourceDefinition(String criteria);\n \n+\t/**\n+\t * Delete a list of resource Pids\n+\t * @param theUrl the original URL that triggered the delete\n+\t * @param theResourceIds\n+\t * @param theDeleteConflicts\n+\t * @param theTheRequest\n+\t * @return", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTYzOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496295638", "bodyText": "done", "author": "fil512", "createdAt": "2020-09-28T23:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxODg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzM3Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495927376", "bodyText": "Interesting, why this change? I thought sending null would check all partitions.", "author": "tadgh", "createdAt": "2020-09-28T13:12:04Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -438,7 +438,7 @@ public Long getPidOrNull(IBaseResource theResource) {\n \t\tif (retVal == null) {\n \t\t\tIIdType id = theResource.getIdElement();\n \t\t\ttry {\n-\t\t\t\tretVal = this.resolveResourcePersistentIds(null, id.getResourceType(), id.getIdPart()).getIdAsLong();\n+\t\t\t\tretVal = this.resolveResourcePersistentIds(RequestPartitionId.allPartitions(), id.getResourceType(), id.getIdPart()).getIdAsLong();", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTc5Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496295792", "bodyText": "null caused an NPE.", "author": "fil512", "createdAt": "2020-09-28T23:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4Njc4Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496686782", "bodyText": "wild", "author": "tadgh", "createdAt": "2020-09-29T12:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4Njg5Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496686897", "bodyText": "stupid java", "author": "tadgh", "createdAt": "2020-09-29T12:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMTg1NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495931855", "bodyText": "Cool I didn't realize codecov bot was actually posting on individual lines. Nifty!", "author": "tadgh", "createdAt": "2020-09-28T13:18:49Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -92,7 +92,7 @@ public void matchEmpiAndUpdateLinks(ResourceModifiedMessage theMsg) {\n \t\t\t\t\tourLog.trace(\"Not processing modified message for {}\", theMsg.getOperationType());\n \t\t\t}\n \t\t}catch (Exception e) {\n-\t\t\tlog(empiContext, \"Failure during EMPI processing: \" + e.getMessage());\n+\t\t\tlog(empiContext, \"Failure during EMPI processing: \" + e.getMessage(), e);\n \t\t} finally {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjI1OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496296259", "bodyText": "?", "author": "fil512", "createdAt": "2020-09-28T23:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMjMxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495932312", "bodyText": "SUBMIT_RESOURCE as opposed to RESOURCES may be a better name here.", "author": "tadgh", "createdAt": "2020-09-28T13:19:25Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -111,13 +111,13 @@ private EmpiTransactionContext createEmpiContext(ResourceModifiedMessage theMsg)\n \t\tEmpiTransactionContext.OperationType empiOperation;\n \t\tswitch (theMsg.getOperationType()) {\n \t\t\tcase CREATE:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.CREATE;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.CREATE_RESOURCE;\n \t\t\t\tbreak;\n \t\t\tcase UPDATE:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE_RESOURCE;\n \t\t\t\tbreak;\n \t\t\tcase MANUALLY_TRIGGERED:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.BATCH;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.SUBMIT_RESOURCES_TO_EMPI;", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjU5OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496296598", "bodyText": "good call.  changed.", "author": "fil512", "createdAt": "2020-09-28T23:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMjMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNTkyNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495935924", "bodyText": "remove my", "author": "tadgh", "createdAt": "2020-09-28T13:24:28Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiConsumerConfig.java", "diffHunk": "@@ -217,4 +221,10 @@ EmpiLinkDeleteSvc empiLinkDeleteSvc() {\n \tEmpiResourceFilteringSvc empiResourceFilteringSvc() {\n \t\treturn new EmpiResourceFilteringSvc();\n \t}\n+\n+\t@Bean\n+\tEmpiControllerHelper empiProviderHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) { return new EmpiControllerHelper(theFhirContext, theResourceLoader); }\n+\n+\t@Bean\n+\tIEmpiControllerSvc myEmpiControllerSvc() {return new EmpiControllerSvcImpl(); }", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjgyOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496296828", "bodyText": "fixed.", "author": "fil512", "createdAt": "2020-09-28T23:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNzI3Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495937272", "bodyText": "Maybe add a trace log on success? or does the sender already do that", "author": "tadgh", "createdAt": "2020-09-28T13:26:23Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiChannelSubmitterSvcImpl.java", "diffHunk": "@@ -49,7 +53,10 @@ public void submitResourceToEmpiChannel(IBaseResource theResource) {\n \t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n \t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n \t\tresourceModifiedJsonMessage.setPayload(resourceModifiedMessage);\n-\t\tgetEmpiChannelProducer().send(resourceModifiedJsonMessage);\n+\t\tboolean success = getEmpiChannelProducer().send(resourceModifiedJsonMessage);\n+\t\tif (!success) {\n+\t\t\tourLog.error(\"Failed to submit {} to EMPI Channel.\", resourceModifiedMessage.getPayloadId());\n+\t\t}", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NzA4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496297087", "bodyText": "logging does add a tiny overhead I'd prefer to avoid.  I found the current logging met my troubleshooting needs.  Can always add more in the future.", "author": "fil512", "createdAt": "2020-09-28T23:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNzI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MDcwMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495940701", "bodyText": "All these public methods should be javadocced if possible. I havent hit the interface, but if its done there, disregard this :P", "author": "tadgh", "createdAt": "2020-09-28T13:31:16Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiControllerSvcImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.api.IEmpiControllerSvc;\n+import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n+import ca.uhn.fhir.empi.api.IEmpiLinkUpdaterSvc;\n+import ca.uhn.fhir.empi.api.IEmpiPersonMergerSvc;\n+import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n+import ca.uhn.fhir.empi.provider.EmpiControllerHelper;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.jetbrains.annotations.Nullable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.stream.Stream;\n+\n+@Service\n+public class EmpiControllerSvcImpl implements IEmpiControllerSvc {\n+\t@Autowired\n+\tEmpiControllerHelper myEmpiControllerHelper;\n+\t@Autowired\n+\tIEmpiPersonMergerSvc myEmpiPersonMergerSvc;\n+\t@Autowired\n+\tIEmpiLinkQuerySvc myEmpiLinkQuerySvc;\n+\t@Autowired\n+\tIEmpiLinkUpdaterSvc myIEmpiLinkUpdaterSvc;\n+\n+\t@Override\n+\tpublic IAnyResource mergePersons(String theFromPersonId, String theToPersonId, EmpiTransactionContext theEmpiTransactionContext) {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5Nzk0OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496297948", "bodyText": "These methods are 1:1 to provider methods.  I added a javadoc explaining the classes role in the system.", "author": "fil512", "createdAt": "2020-09-28T23:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MDcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MjM1Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495942352", "bodyText": "Something about returning JSON objects from an internal service class smells to me a bit. I feel as though that JSON-wrapping is the responsibility of the controller itself. What are your thoughts on this? Is it possible that some other service would call this service and want to operate on the actual non-json objects?", "author": "tadgh", "createdAt": "2020-09-28T13:33:34Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "diffHunk": "@@ -20,73 +20,61 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n-import ca.uhn.fhir.util.ParametersUtil;\n-import org.hl7.fhir.instance.model.api.IBase;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Example;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class EmpiLinkQuerySvcImpl implements IEmpiLinkQuerySvc {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiLinkQuerySvcImpl.class);\n \n-\t@Autowired\n-\tFhirContext myFhirContext;\n \t@Autowired\n \tIdHelperService myIdHelperService;\n \t@Autowired\n \tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n \n \t@Override\n-\tpublic IBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(thePersonId, theTargetId, theMatchResult, theLinkSource);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n \t\t\t.filter(empiLink -> empiLink.getMatchResult() != EmpiMatchResultEnum.POSSIBLE_DUPLICATE)\n-\t\t\t.collect(Collectors.toList());\n-\t\t// TODO RC1 KHS page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, true);\n+\t\t\t.map(this::toJson);\n \t}\n \n+\n+\n \t@Override\n-\tpublic IBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> getDuplicatePersons(EmpiTransactionContext theEmpiContext) {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5ODkzNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496298935", "bodyText": "This JSON goes straight out to the user in cdr so it's not really \"internal\".  I agree it looks funny here, but taken with the cdr simplified REST api it makes sense.  I used a double Stream to avoid any memory overhead (that we'd incur if we instead returned List.)", "author": "fil512", "createdAt": "2020-09-28T23:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MjM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MzU0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495943542", "bodyText": "If this function needs to exist, should it not exist on the Model itself? i.e, knowledge of the json-serialization of the object should rest with the object itself?  So you could just do empiLink.toJson()", "author": "tadgh", "createdAt": "2020-09-28T13:35:15Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "diffHunk": "@@ -20,73 +20,61 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n-import ca.uhn.fhir.util.ParametersUtil;\n-import org.hl7.fhir.instance.model.api.IBase;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Example;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class EmpiLinkQuerySvcImpl implements IEmpiLinkQuerySvc {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiLinkQuerySvcImpl.class);\n \n-\t@Autowired\n-\tFhirContext myFhirContext;\n \t@Autowired\n \tIdHelperService myIdHelperService;\n \t@Autowired\n \tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n \n \t@Override\n-\tpublic IBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(thePersonId, theTargetId, theMatchResult, theLinkSource);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n \t\t\t.filter(empiLink -> empiLink.getMatchResult() != EmpiMatchResultEnum.POSSIBLE_DUPLICATE)\n-\t\t\t.collect(Collectors.toList());\n-\t\t// TODO RC1 KHS page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, true);\n+\t\t\t.map(this::toJson);\n \t}\n \n+\n+\n \t@Override\n-\tpublic IBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> getDuplicatePersons(EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(null, null, EmpiMatchResultEnum.POSSIBLE_DUPLICATE, null);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink);\n-\t\t// TODO RC1 page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, false);\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream().map(this::toJson);\n \t}\n \n-\tprivate IBaseParameters parametersFromEmpiLinks(List<EmpiLink> theEmpiLinks, boolean includeResultAndSource) {\n-\t\tIBaseParameters retval = ParametersUtil.newInstance(myFhirContext);\n-\n-\t\tfor (EmpiLink empiLink : theEmpiLinks) {\n-\t\t\tIBase resultPart = ParametersUtil.addParameterToParameters(myFhirContext, retval, \"link\");\n-\t\t\tString personId = myIdHelperService.resourceIdFromPidOrThrowException(empiLink.getPersonPid()).toVersionless().getValue();\n-\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"personId\", personId);\n-\n-\t\t\tString targetId = myIdHelperService.resourceIdFromPidOrThrowException(empiLink.getTargetPid()).toVersionless().getValue();\n-\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"targetId\", targetId);\n-\n-\t\t\tif (includeResultAndSource) {\n-\t\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"matchResult\", empiLink.getMatchResult().name());\n-\t\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"linkSource\", empiLink.getLinkSource().name());\n-\t\t\t\tParametersUtil.addPartBoolean(myFhirContext, resultPart, \"eidMatch\", empiLink.getEidMatch());\n-\t\t\t\tParametersUtil.addPartBoolean(myFhirContext, resultPart, \"newPerson\", empiLink.getNewPerson());\n-\t\t\t\tParametersUtil.addPartDecimal(myFhirContext, resultPart, \"score\", empiLink.getScore());\n-\t\t\t}\n-\t\t}\n+\tprivate EmpiLinkJson toJson(EmpiLink theLink) {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTM0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496299342", "bodyText": "Can't do that.  EmpiLink is a jpa entity whereas EmpiLinkJson is persistence independent (in hapi-server-empi).  If we ever support mongo in the future, it will need to have its own serializer.", "author": "fil512", "createdAt": "2020-09-28T23:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MzU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4ODIzMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496688230", "bodyText": "Ah fair enough.", "author": "tadgh", "createdAt": "2020-09-29T12:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MzU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0Mzg3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495943875", "bodyText": "good catch", "author": "tadgh", "createdAt": "2020-09-28T13:35:44Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -20,27 +20,28 @@\n  * #L%\n  */\n \n+import ca.uhn.fhir.empi.log.Logs;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.r4.model.IdType;\n import org.slf4j.Logger;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n import java.util.List;\n \n-import static org.slf4j.LoggerFactory.getLogger;\n-\n @Service\n public class EmpiPersonDeletingSvc {\n-\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\tprivate static final Logger ourLog = Logs.getEmpiTroubleshootingLog();", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NTE2Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495945163", "bodyText": "I see you found a better way to handle cascading delete here.", "author": "tadgh", "createdAt": "2020-09-28T13:37:35Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -55,13 +56,17 @@\n \t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n \t * VersionConflictException\n \t *\n-\t * @param theLongs\n+\t * @param theResourcePids\n \t */\n \t@Transactional\n-\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\tpublic void deletePersonResourcesAndHandleConflicts(List<Long> theResourcePids) {\n+\t\tList<ResourcePersistentId> resourceIds = ResourcePersistentId.fromLongList(theResourcePids);\n+\t\tourLog.info(\"Deleting {} Person resources...\", resourceIds.size());\n \t\tDeleteConflictList\n \t\t\tdeleteConflictList = new DeleteConflictList();\n-\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao<?> resourceDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\tresourceDao.deletePidList(ProviderConstants.EMPI_CLEAR, resourceIds, deleteConflictList, null);", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTcyMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496299720", "bodyText": "Sadly this change made no difference to performance.  This is what prompted my recent discussion in #coredev on rewriting how we do delete for expunge.", "author": "fil512", "createdAt": "2020-09-29T00:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4ODQ5Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496688493", "bodyText": "Still reads cleaner!", "author": "tadgh", "createdAt": "2020-09-29T12:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NTE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzQ4OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495947488", "bodyText": "I thought we had previously dealt with the issue of empty candidateSearchParams? Maybe I'm misremembering", "author": "tadgh", "createdAt": "2020-09-28T13:40:50Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceFilteringSvc.java", "diffHunk": "@@ -56,15 +56,19 @@\n \t */\n \tpublic boolean shouldBeProcessed(IAnyResource theResource) {\n \t\tString resourceType = myFhirContext.getResourceType(theResource);\n-\t\tList<EmpiResourceSearchParamJson> candidateSearchParams = empiSettings.getEmpiRules().getCandidateSearchParams();\n+\t\tList<EmpiResourceSearchParamJson> candidateSearchParams = myEmpiSettings.getEmpiRules().getCandidateSearchParams();\n+\n+\t\tif (candidateSearchParams.isEmpty()) {\n+\t\t\treturn true;\n+\t\t}", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTk2Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496299962", "bodyText": "Ya I thought so too.  But this bug was here.  I wonder if it manifested in different ways for different scenarios...?", "author": "fil512", "createdAt": "2020-09-29T00:01:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0ODg4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495948887", "bodyText": "Either change this line to Person Resources to match above line, or change above line to match Persons", "author": "tadgh", "createdAt": "2020-09-28T13:42:51Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiPersonFindingSvc.java", "diffHunk": "@@ -50,9 +50,9 @@\n \t * 0. First, check the incoming Resource for an EID. If it is present, and we can find a Person with this EID, it automatically matches.\n \t * 1. First, check link table for any entries where this baseresource is the target of a person. If found, return.\n \t * 2. If none are found, attempt to find Person Resources which link to this theResource.\n-\t * 3. If none are found, attempt to find Persons similar to our incoming resource based on the EMPI rules and similarity metrics.\n+\t * 3. If none are found, attempt to find Persons similar to our incoming resource based on the EMPI rules and field matchers.", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDM0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496300341", "bodyText": "I generally prefer to use Person Resources", "author": "fil512", "createdAt": "2020-09-29T00:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0ODg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTQ5Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495949492", "bodyText": "may as well rename the member variable to match new class name.", "author": "tadgh", "createdAt": "2020-09-28T13:43:41Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImplTest.java", "diffHunk": "@@ -17,7 +17,7 @@\n class EmpiBatchSvcImplTest extends BaseEmpiR4Test {\n \n \t@Autowired\n-\tIEmpiBatchSvc myEmpiBatchSvc;\n+    IEmpiSubmitSvc myEmpiBatchSvc;", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDYzNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496300635", "bodyText": "oops.  IJ is supposed to catch those for me!", "author": "fil512", "createdAt": "2020-09-29T00:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTY1Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495949656", "bodyText": "\ud83d\udc4d", "author": "tadgh", "createdAt": "2020-09-28T13:43:55Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiCandidateSearchCriteriaBuilderSvcTest.java", "diffHunk": "@@ -67,7 +67,18 @@ public void testIdentifier() {\n \t\tsearchParamJson.addSearchParam(\"identifier\");\n \t\tOptional<String> result = myEmpiCandidateSearchCriteriaBuilderSvc.buildResourceQueryString(\"Patient\", patient, Collections.emptyList(), searchParamJson);\n \t\tassertTrue(result.isPresent());\n-\t\tassertEquals(result.get(), \"Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345\");\n+\t\tassertEquals(result.get(), \"Patient?identifier=urn%3Aoid%3A1.2.36.146.595.217.0.1%7C12345\");\n+\t}\n+\n+\t@Test\n+\tpublic void testIdentifierSpaceIsEscaped() {\n+\t\tPatient patient = new Patient();\n+\t\tpatient.addIdentifier().setSystem(\"urn:oid:1.2.36.146.595.217.0.1\").setValue(\"abc def\");\n+\t\tEmpiResourceSearchParamJson searchParamJson = new EmpiResourceSearchParamJson();\n+\t\tsearchParamJson.addSearchParam(\"identifier\");\n+\t\tOptional<String> result = myEmpiCandidateSearchCriteriaBuilderSvc.buildResourceQueryString(\"Patient\", patient, Collections.emptyList(), searchParamJson);\n+\t\tassertTrue(result.isPresent());\n+\t\tassertEquals(\"Patient?identifier=urn%3Aoid%3A1.2.36.146.595.217.0.1%7Cabc%20def\", result.get());", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MDM4Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495950382", "bodyText": "im confused about the point of this assert, I don't understand why this possibleLinkedTo plays into the test.", "author": "tadgh", "createdAt": "2020-09-28T13:44:56Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonMergerSvcTest.java", "diffHunk": "@@ -144,21 +144,21 @@ public void emptyFromFullTo() {\n \tpublic void fromLinkToNoLink() {\n \t\tcreateEmpiLink(myFromPerson, myTargetPatient1);\n \n-\t\tmergePersons();\n-\t\tList<EmpiLink> links = myEmpiLinkDaoSvc.findEmpiLinksByPerson(myToPerson);\n+\t\tPerson mergedPerson = mergePersons();\n+\t\tList<EmpiLink> links = myEmpiLinkDaoSvc.findEmpiLinksByPerson(mergedPerson);\n \t\tassertEquals(1, links.size());\n-\t\tassertThat(myToPerson, is(possibleLinkedTo(myTargetPatient1)));\n+\t\tassertThat(mergedPerson, is(possibleLinkedTo(myTargetPatient1)));", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTgyOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496301828", "bodyText": "It's all about the mergePersons() on line 147 which merges fromPerson into toPerson.\nI changed the API so that you now pass in a reference instead of a resource, and so needed to fix some tests.  Before it lazily took advantage of the way it was implemented.  This way is more clear.\nIn this case we're checking that if from has a link and to doesn't, then post merge the merged person has the link.", "author": "fil512", "createdAt": "2020-09-29T00:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MDM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4OTM2Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496689366", "bodyText": "Ah I see, and that possible link was pre-existing.", "author": "tadgh", "createdAt": "2020-09-29T12:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MDM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzQ2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495953468", "bodyText": "Yeah add the javadocs here I suppose", "author": "tadgh", "createdAt": "2020-09-28T13:49:11Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiControllerSvc.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+\n+import javax.annotation.Nullable;\n+import java.util.stream.Stream;\n+\n+public interface IEmpiControllerSvc {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTkxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496301910", "bodyText": "see comment above", "author": "fil512", "createdAt": "2020-09-29T00:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzY3OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495953679", "bodyText": "This could also use some javadocs", "author": "tadgh", "createdAt": "2020-09-28T13:49:27Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiLinkQuerySvc.java", "diffHunk": "@@ -21,12 +21,11 @@\n  */\n \n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n \n-public interface IEmpiLinkQuerySvc {\n-\tIBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext);\n-\n-\tIBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext);\n+import java.util.stream.Stream;\n \n+public interface IEmpiLinkQuerySvc {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjM3Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496302376", "bodyText": "I added a javadoc over the class.", "author": "fil512", "createdAt": "2020-09-29T00:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NTI0MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495955240", "bodyText": "Hmm, I thought the original purpose of this enum was for EMPI to determine what the original resource change operation was for handling updates. Do we actually use all these enum values? I would imageine we want like, CREATE, UPDATE and then essentially INTERNAL_EMPI_OPERATION. Though I guess there's no harm in splitting them out.", "author": "tadgh", "createdAt": "2020-09-28T13:51:38Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/model/EmpiTransactionContext.java", "diffHunk": "@@ -33,9 +33,13 @@\n \n \n \tpublic enum OperationType {\n-\t\tCREATE,\n-\t\tUPDATE,\n-\t\tBATCH,\n+\t\tCREATE_RESOURCE,\n+\t\tUPDATE_RESOURCE,\n+\t\tSUBMIT_RESOURCES_TO_EMPI,\n+\t\tQUERY_LINKS,\n+\t\tUPDATE_LINK,\n+\t\tDUPLICATE_PERSONS,\n+\t\tNOT_DUPLICATE,\n \t\tMERGE_PERSONS\n \t}", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjU3Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496302576", "bodyText": "The purpose of this is to record what the trigger was in the transaction logs.  The more detail the better I figure.", "author": "fil512", "createdAt": "2020-09-29T00:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NTI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1OTI0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495959244", "bodyText": "Why are some of these methods static?", "author": "tadgh", "createdAt": "2020-09-28T13:56:51Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.uhn.fhir.empi.provider;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import ca.uhn.fhir.validation.IResourceLoader;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EmpiControllerHelper {\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final IResourceLoader myResourceLoader;\n+\n+\t@Autowired\n+\tpublic EmpiControllerHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyResourceLoader = theResourceLoader;\n+\t}\n+\n+\tpublic void validateSameVersion(IAnyResource theResource, String theResourceId) {\n+\t\tString storedId = theResource.getIdElement().getValue();\n+\t\tif (hasVersionIdPart(theResourceId) && !storedId.equals(theResourceId)) {\n+\t\t\tthrow new ResourceVersionConflictException(\"Requested resource \" + theResourceId + \" is not the latest version.  Latest version is \" + storedId);\n+\t\t}\n+\t}\n+\n+\tprivate boolean hasVersionIdPart(String theId) {\n+\t\treturn new IdDt(theId).hasVersionIdPart();\n+\t}\n+\n+\tpublic IAnyResource getLatestPersonFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = getPersonIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(personId.toUnqualifiedVersionless());\n+\t}\n+\n+\n+\tpublic IAnyResource getLatestTargetFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIIdType targetId = getTargetIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(targetId.toUnqualifiedVersionless());\n+\t}\n+\n+\tprotected IAnyResource loadResource(IIdType theResourceId) {\n+\t\tClass<? extends IBaseResource> resourceClass = myFhirContext.getResourceDefinition(theResourceId.getResourceType()).getImplementingClass();\n+\t\treturn (IAnyResource) myResourceLoader.load(resourceClass, theResourceId);\n+\t}\n+\n+\tpublic static EmpiMatchResultEnum extractMatchResultOrNull(String theMatchResult) {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjgxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496302812", "bodyText": "Funny I used to always ask James the same question.  And he'd reply, \"because they're static.\"  So Ima pull a James and respond, \"because they're static.\"  :-)", "author": "fil512", "createdAt": "2020-09-29T00:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1OTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5Mzc1Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496693752", "bodyText": "I just find it weird to have a bean that exposes half of its API statically and half non-statically. I see that it is static, but it just seems kinda annoying for the developer. \"Do I have to call this function on the bean or the class?\". Didn't we land on a difference between Util and Helper a while ago? This isn't a blocker by any means, but it seems like this static functionality could be broken into a util class.", "author": "tadgh", "createdAt": "2020-09-29T12:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1OTI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNzU0Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496727547", "bodyText": "I agree, that's a good point.  It happened by accident.  I will fix.", "author": "fil512", "createdAt": "2020-09-29T13:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1OTI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MTI0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495961242", "bodyText": "This is technically false right? Subscriptions can be EMPI-managed. Not sure if that is relevant here.", "author": "tadgh", "createdAt": "2020-09-28T13:59:35Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.uhn.fhir.empi.provider;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import ca.uhn.fhir.validation.IResourceLoader;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EmpiControllerHelper {\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final IResourceLoader myResourceLoader;\n+\n+\t@Autowired\n+\tpublic EmpiControllerHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyResourceLoader = theResourceLoader;\n+\t}\n+\n+\tpublic void validateSameVersion(IAnyResource theResource, String theResourceId) {\n+\t\tString storedId = theResource.getIdElement().getValue();\n+\t\tif (hasVersionIdPart(theResourceId) && !storedId.equals(theResourceId)) {\n+\t\t\tthrow new ResourceVersionConflictException(\"Requested resource \" + theResourceId + \" is not the latest version.  Latest version is \" + storedId);\n+\t\t}\n+\t}\n+\n+\tprivate boolean hasVersionIdPart(String theId) {\n+\t\treturn new IdDt(theId).hasVersionIdPart();\n+\t}\n+\n+\tpublic IAnyResource getLatestPersonFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = getPersonIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(personId.toUnqualifiedVersionless());\n+\t}\n+\n+\n+\tpublic IAnyResource getLatestTargetFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIIdType targetId = getTargetIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(targetId.toUnqualifiedVersionless());\n+\t}\n+\n+\tprotected IAnyResource loadResource(IIdType theResourceId) {\n+\t\tClass<? extends IBaseResource> resourceClass = myFhirContext.getResourceDefinition(theResourceId.getResourceType()).getImplementingClass();\n+\t\treturn (IAnyResource) myResourceLoader.load(resourceClass, theResourceId);\n+\t}\n+\n+\tpublic static EmpiMatchResultEnum extractMatchResultOrNull(String theMatchResult) {\n+\t\tif (theMatchResult == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn EmpiMatchResultEnum.valueOf(theMatchResult);\n+\t}\n+\n+\tpublic static EmpiLinkSourceEnum extractLinkSourceOrNull(String theLinkSource) {\n+\t\tif (theLinkSource == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn EmpiLinkSourceEnum.valueOf(theLinkSource);\n+\t}\n+\n+\tpublic static IIdType extractPersonIdDtOrNull(String theName, String thePersonId) {\n+\t\tif (thePersonId == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn getPersonIdDtOrThrowException(theName, thePersonId);\n+\t}\n+\n+\tpublic static IIdType extractTargetIdDtOrNull(String theName, String theTargetId) {\n+\t\tif (theTargetId == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn getTargetIdDtOrThrowException(theName, theTargetId);\n+\t}\n+\n+\tprivate static IdDt getPersonIdDtOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = new IdDt(theId);\n+\t\tif (!\"Person\".equals(personId.getResourceType()) ||\n+\t\t\tpersonId.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(theParamName + \" is '\" + theId + \"'.  must have form Person/<id> where <id> is the id of the person\");\n+\t\t}\n+\t\treturn personId;\n+\t}\n+\n+\tpublic static IIdType getTargetIdDtOrThrowException(String theParamName, String theId) {\n+\t\tIdDt targetId = new IdDt(theId);\n+\t\tString resourceType = targetId.getResourceType();\n+\t\tif (!EmpiUtil.supportedTargetType(resourceType) ||\n+\t\t\ttargetId.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(theParamName + \" is '\" + theId + \"'.  must have form Patient/<id> or Practitioner/<id> where <id> is the id of the resource\");\n+\t\t}\n+\t\treturn targetId;\n+\t}\n+\n+\tpublic void validateMergeResources(IAnyResource theFromPerson, IAnyResource theToPerson) {\n+\t\tvalidateIsEmpiManaged(ProviderConstants.EMPI_MERGE_PERSONS_FROM_PERSON_ID, theFromPerson);\n+\t\tvalidateIsEmpiManaged(ProviderConstants.EMPI_MERGE_PERSONS_TO_PERSON_ID, theToPerson);\n+\t}\n+\n+\tpublic String toJson(IAnyResource theAnyResource) {\n+\t\treturn myFhirContext.newJsonParser().encodeResourceToString(theAnyResource);\n+\t}\n+\n+\tprivate void validateIsEmpiManaged(String theName, IAnyResource thePerson) {\n+\t\tif (!\"Person\".equals(myFhirContext.getResourceType(thePerson))) {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMzI4NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496303284", "bodyText": "EmpiManaged has a specific meaning in this context.   Probably not named the best...", "author": "fil512", "createdAt": "2020-09-29T00:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MTI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3OTc3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495979775", "bodyText": "If we are renaming the operation to SUBMIT anyhow, probably good to change the name of EmpiSubmitSvc.runEmpiOnAllTargetTypes to EmpiSubmitSvc.submitAllTargetTypesToEmpi", "author": "tadgh", "createdAt": "2020-09-28T14:25:04Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiProviderR4.java", "diffHunk": "@@ -169,68 +152,67 @@ public Parameters notDuplicate(@OperationParam(name=ProviderConstants.EMPI_QUERY\n \t\t\t\t\t\t\t\t\t\t\t ServletRequestDetails theRequestDetails) {\n \n \t\tvalidateNotDuplicateParameters(thePersonId, theTargetId);\n-\t\tIAnyResource person = getLatestPersonFromIdOrThrowException(ProviderConstants.EMPI_UPDATE_LINK_PERSON_ID, thePersonId.getValue());\n-\t\tIAnyResource target = getLatestPersonFromIdOrThrowException(ProviderConstants.EMPI_UPDATE_LINK_TARGET_ID, theTargetId.getValue());\n-\t\tvalidateSameVersion(person, thePersonId);\n-\t\tvalidateSameVersion(target, theTargetId);\n+\t\tmyEmpiControllerSvc.notDuplicatePerson(thePersonId.getValue(), theTargetId.getValue(), createEmpiContext(theRequestDetails, EmpiTransactionContext.OperationType.NOT_DUPLICATE));\n \n-\t\treturn (Parameters) myEmpiLinkUpdaterSvc.notDuplicatePerson(person, target, createEmpiContext(theRequestDetails));\n+\t\tParameters retval = (Parameters) ParametersUtil.newInstance(myFhirContext);\n+\t\tParametersUtil.addParameterToParametersBoolean(myFhirContext, retval, \"success\", true);\n+\t\treturn retval;\n \t}\n \n-\t@Operation(name = ProviderConstants.OPERATION_EMPI_BATCH_RUN, idempotent = false, returnParameters = {\n+\t@Operation(name = ProviderConstants.OPERATION_EMPI_SUBMIT, idempotent = false, returnParameters = {\n \t\t@OperationParam(name = ProviderConstants.OPERATION_EMPI_BATCH_RUN_OUT_PARAM_SUBMIT_COUNT, type= IntegerType.class)\n \t})\n \tpublic Parameters empiBatchOnAllTargets(\n \t\t@OperationParam(name= ProviderConstants.EMPI_BATCH_RUN_CRITERIA,min = 0 , max = 1) StringType theCriteria,\n \t\tServletRequestDetails theRequestDetails) {\n \t\tString criteria = convertCriteriaToString(theCriteria);\n-\t\tlong submittedCount  = myEmpiBatchSvc.runEmpiOnAllTargetTypes(criteria);\n+\t\tlong submittedCount  = myEmpiSubmitSvc.runEmpiOnAllTargetTypes(criteria);", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNDA5NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496304095", "bodyText": "good call.  done\nfixed all the other ones too", "author": "fil512", "createdAt": "2020-09-29T00:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3OTc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTEwMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495981101", "bodyText": "This function signature can be changed to just take the field match, it can extract similarity internally. Nitpick though /shrug", "author": "tadgh", "createdAt": "2020-09-28T14:26:52Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/config/EmpiRuleValidator.java", "diffHunk": "@@ -99,18 +100,18 @@ private void validateMatchFields(EmpiRulesJson theEmpiRulesJson) {\n \t\t\t\tthrow new ConfigurationException(\"Two MatchFields have the same name '\" + fieldMatch.getName() + \"'\");\n \t\t\t}\n \t\t\tnames.add(fieldMatch.getName());\n-\t\t\tvalidateThreshold(fieldMatch);\n+\t\t\tif (fieldMatch.getSimilarity() != null) {\n+\t\t\t\tvalidateSimilarity(fieldMatch, fieldMatch.getSimilarity());\n+\t\t\t} else if (fieldMatch.getMatcher() == null) {\n+\t\t\t\tthrow new ConfigurationException(\"MatchField \" + fieldMatch.getName() + \" has neither a similarity nor a matcher.  At least one must be present.\");\n+\t\t\t}\n \t\t\tvalidatePath(fieldMatch);\n \t\t}\n \t}\n \n-\tprivate void validateThreshold(EmpiFieldMatchJson theFieldMatch) {\n-\t\tif (theFieldMatch.getMetric().isSimilarity()) {\n-\t\t\tif (theFieldMatch.getMatchThreshold() == null) {\n-\t\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" requires a matchThreshold\");\n-\t\t\t}\n-\t\t} else if (theFieldMatch.getMatchThreshold() != null) {\n-\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" should not have a matchThreshold\");\n+\tprivate void validateSimilarity(EmpiFieldMatchJson theFieldMatch, EmpiSimilarityJson theSimilarity) {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNDYxNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496304617", "bodyText": "good call.  fixed.  this was a holdover from the refactoring.", "author": "fil512", "createdAt": "2020-09-29T00:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTEwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgwNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495981805", "bodyText": "Not sure if its necessary, but you could close the  tag", "author": "tadgh", "createdAt": "2020-09-28T14:27:51Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/json/EmpiFieldMatchJson.java", "diffHunk": "@@ -20,45 +20,38 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.empi.rules.metric.EmpiMetricEnum;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiMatchEvaluation;\n+import ca.uhn.fhir.empi.rules.matcher.EmpiMatcherEnum;\n import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.hl7.fhir.instance.model.api.IBase;\n \n import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n \n /**\n  * Contains all business data for determining if a match exists on a particular field, given:\n- *\n- * 1. A {@link EmpiMetricEnum} which determines the actual similarity values.\n+ * <p>\n+ * 1. A {@link EmpiMatcherEnum} which determines the actual similarity values.\n  * 2. A given resource type (e.g. Patient)\n  * 3. A given FHIRPath expression for finding the particular primitive to be used for comparison. (e.g. name.given)", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NjIzNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496196236", "bodyText": "okiiiiiiii", "author": "fil512", "createdAt": "2020-09-28T19:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5NDcwNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496694704", "bodyText": "heh I tried to type <p> in my previous comment, but it just...made a new paragraph, not sure what I was expecting.", "author": "tadgh", "createdAt": "2020-09-29T12:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTc0NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495991745", "bodyText": "I thought DTs were DSTU2? Is this canonical?", "author": "tadgh", "createdAt": "2020-09-28T14:41:21Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.model.api.IElement;\n+import ca.uhn.fhir.model.base.composite.BaseIdentifierDt;\n+import ca.uhn.fhir.model.primitive.StringDt;\n+import ca.uhn.fhir.model.primitive.UriDt;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+import java.util.List;\n+\n+/**\n+ * Version independent identifier\n+ */\n+public class CanonicalIdentifier extends BaseIdentifierDt {\n+\tUriDt mySystem;\n+\tStringDt myValue;", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTA1Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496305052", "bodyText": "Dts are version independent.  E.g. we use IdDt all over the place.  I wanted to implement the data type so the connection to it was clear.  But it is superfluous.", "author": "fil512", "createdAt": "2020-09-29T00:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4NDc2NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496684765", "bodyText": "Ah interesting, I was under the impression that since all STU3+ code I saw IDType() everywhere, that this was stu-specifc.", "author": "tadgh", "createdAt": "2020-09-29T12:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MjcwOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495992709", "bodyText": "Might as well use accessors here", "author": "tadgh", "createdAt": "2020-09-28T14:42:38Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.model.api.IElement;\n+import ca.uhn.fhir.model.base.composite.BaseIdentifierDt;\n+import ca.uhn.fhir.model.primitive.StringDt;\n+import ca.uhn.fhir.model.primitive.UriDt;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+import java.util.List;\n+\n+/**\n+ * Version independent identifier\n+ */\n+public class CanonicalIdentifier extends BaseIdentifierDt {\n+\tUriDt mySystem;\n+\tStringDt myValue;\n+\n+\t@Override\n+\tpublic UriDt getSystemElement() {\n+\t\treturn mySystem;\n+\t}\n+\n+\t@Override\n+\tpublic StringDt getValueElement() {\n+\t\treturn myValue;\n+\t}\n+\n+\t@Override\n+\tpublic CanonicalIdentifier setSystem(String theUri) {\n+\t\tmySystem = new UriDt((theUri));\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic CanonicalIdentifier setValue(String theString) {\n+\t\tmyValue = new StringDt(theString);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic <T extends IElement> List<T> getAllPopulatedChildElementsOfType(Class<T> theType) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic boolean isEmpty() {\n+\t\tif (mySystem != null && !mySystem.isEmpty()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (myValue != null && !myValue.isEmpty()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object theO) {\n+\t\tif (this == theO) return true;\n+\n+\t\tif (theO == null || getClass() != theO.getClass()) return false;\n+\n+\t\tCanonicalIdentifier that = (CanonicalIdentifier) theO;\n+\n+\t\treturn new EqualsBuilder()\n+\t\t\t.append(mySystem, that.mySystem)\n+\t\t\t.append(myValue, that.myValue)", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTI3MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496305270", "bodyText": "That's generated code.  Maybe I picked the wrong values when I ran it?", "author": "fil512", "createdAt": "2020-09-29T00:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MjcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MzU5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495993599", "bodyText": "Is this a TODO for now, or for later?", "author": "tadgh", "createdAt": "2020-09-28T14:43:47Z", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/IdentifierUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import org.hl7.fhir.instance.model.api.IBase;\n+\n+public class IdentifierUtil {\n+\tpublic static CanonicalIdentifier identifierDtFromIdentifier(IBase theIdentifier) {\n+\t\tCanonicalIdentifier retval = new CanonicalIdentifier();\n+\n+\t\t// TODO add other fields like \"use\" etc", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTMxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496305310", "bodyText": "later.", "author": "fil512", "createdAt": "2020-09-29T00:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MzU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NTE1OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495995159", "bodyText": "namadega?! a quick google reveals nothing. What is this?", "author": "tadgh", "createdAt": "2020-09-28T14:45:53Z", "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/rules/matcher/StringMatcherR4Test.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package ca.uhn.fhir.empi.rules.matcher;\n+\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.Enumeration;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class StringMatcherR4Test extends BaseMatcherR4Test {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(StringMatcherR4Test.class);\n+\tpublic static final String LEFT = \"namadega\";\n+\tpublic static final String RIGHT = \"namaedga\";\n+\n+\t@Test\n+\tpublic void testNamadega() {", "originalCommit": "0c5398959c332c56db94cd93be3e9a2b3b51ab92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTU5MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496305591", "bodyText": "It is a person's name.", "author": "fil512", "createdAt": "2020-09-29T00:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NTE1OQ=="}], "type": "inlineReview"}, {"oid": "3a02e2f9e139a96c628eed5b91690151583b60a7", "url": "https://github.com/hapifhir/hapi-fhir/commit/3a02e2f9e139a96c628eed5b91690151583b60a7", "message": "resolving GGGs most excellent feedback", "committedDate": "2020-09-29T00:27:12Z", "type": "commit"}, {"oid": "53f2997b1b0e6f3d215a19684461dd40fb4988f2", "url": "https://github.com/hapifhir/hapi-fhir/commit/53f2997b1b0e6f3d215a19684461dd40fb4988f2", "message": "moving static methods from helper to util class per review feedback", "committedDate": "2020-09-29T13:50:20Z", "type": "commit"}]}