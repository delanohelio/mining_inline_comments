{"pr_number": 5230, "pr_title": "Issue #5201 - simplify the QueuedThreadPool dump", "pr_createdAt": "2020-09-03T00:46:22Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5230", "timeline": [{"oid": "0a59a2b0909383de7db8bdd2b69e2f0c869bcd09", "url": "https://github.com/eclipse/jetty.project/commit/0a59a2b0909383de7db8bdd2b69e2f0c869bcd09", "message": "Issue #5201 - simplify the QueuedThreadPool detailed dump\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-02T20:58:55Z", "type": "commit"}, {"oid": "85c8c6510e9e4e00edf23af3037100e08944940b", "url": "https://github.com/eclipse/jetty.project/commit/85c8c6510e9e4e00edf23af3037100e08944940b", "message": "Issue #5201 - Fix issues with test after changes to QTP dump\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-03T00:34:18Z", "type": "commit"}, {"oid": "26ae875d1c77d455b853f6a24e7590ea09864b7f", "url": "https://github.com/eclipse/jetty.project/commit/26ae875d1c77d455b853f6a24e7590ea09864b7f", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5201-QueuedThreadPoolDump", "committedDate": "2020-09-03T05:00:47Z", "type": "commit"}, {"oid": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb", "url": "https://github.com/eclipse/jetty.project/commit/516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb", "message": "Update server dump documentation after QueuedThreadPool dump changes\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-03T05:06:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzM1MA==", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r482777350", "bodyText": "Should not this be getKnownState() as it returns the state of the thread?", "author": "sbordet", "createdAt": "2020-09-03T07:49:32Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "diffHunk": "@@ -701,74 +701,41 @@ protected void removeThread(Thread thread)\n     public void dump(Appendable out, String indent) throws IOException\n     {\n         List<Object> threads = new ArrayList<>(getMaxThreads());\n-        for (final Thread thread : _threads)\n+        for (Thread thread : _threads)\n         {\n-            final StackTraceElement[] trace = thread.getStackTrace();\n-            String knownMethod = \"\";\n-            for (StackTraceElement t : trace)\n-            {\n-                if (\"idleJobPoll\".equals(t.getMethodName()) && t.getClassName().equals(Runner.class.getName()))\n-                {\n-                    knownMethod = \"IDLE \";\n-                    break;\n-                }\n-\n-                if (\"reservedWait\".equals(t.getMethodName()) && t.getClassName().endsWith(\"ReservedThread\"))\n-                {\n-                    knownMethod = \"RESERVED \";\n-                    break;\n-                }\n-\n-                if (\"select\".equals(t.getMethodName()) && t.getClassName().endsWith(\"SelectorProducer\"))\n-                {\n-                    knownMethod = \"SELECTING \";\n-                    break;\n-                }\n-\n-                if (\"accept\".equals(t.getMethodName()) && t.getClassName().contains(\"ServerConnector\"))\n-                {\n-                    knownMethod = \"ACCEPTING \";\n-                    break;\n-                }\n-            }\n-            final String known = knownMethod;\n-\n-            if (isDetailedDump())\n-            {\n-                threads.add(new Dumpable()\n-                {\n-                    @Override\n-                    public void dump(Appendable out, String indent) throws IOException\n-                    {\n-                        if (StringUtil.isBlank(known))\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority()), (Object[])trace);\n-                        else\n-                            Dumpable.dumpObjects(out, indent, String.format(\"%s %s %s %s %d\", thread.getId(), thread.getName(), known, thread.getState(), thread.getPriority()));\n-                    }\n-\n-                    @Override\n-                    public String dump()\n-                    {\n-                        return null;\n-                    }\n-                });\n-            }\n+            StackTraceElement[] trace = thread.getStackTrace();\n+            String known = getKnownMethod(trace);\n+            String baseThreadInfo = String.format(\"%s %s %s %d\", thread.getId(), thread.getName(), thread.getState(), thread.getPriority());\n+\n+            if (!StringUtil.isBlank(known))\n+                threads.add(baseThreadInfo + \" \" + known);\n+            else if (isDetailedDump())\n+                threads.add((Dumpable)(o, i) -> Dumpable.dumpObjects(o, i, baseThreadInfo, (Object[])trace));\n             else\n-            {\n-                int p = thread.getPriority();\n-                threads.add(thread.getId() + \" \" + thread.getName() + \" \" + known + thread.getState() + \" @ \" + (trace.length > 0 ? trace[0] : \"???\") + (p == Thread.NORM_PRIORITY ? \"\" : (\" prio=\" + p)));\n-            }\n+                threads.add(baseThreadInfo + \" @ \" + (trace.length > 0 ? trace[0].toString() : \"???\"));\n         }\n \n+        DumpableCollection threadsDump = new DumpableCollection(\"threads\", threads);\n         if (isDetailedDump())\n-        {\n-            List<Runnable> jobs = new ArrayList<>(getQueue());\n-            dumpObjects(out, indent, new DumpableCollection(\"threads\", threads), new DumpableCollection(\"jobs\", jobs));\n-        }\n+            dumpObjects(out, indent, threadsDump, new DumpableCollection(\"jobs\", new ArrayList<>(getQueue())));\n         else\n+            dumpObjects(out, indent, threadsDump);\n+    }\n+\n+    private String getKnownMethod(StackTraceElement[] trace)", "originalCommit": "516432b9cbd47f3a9987d6dbcdfb690b1cc6baeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk3MDcxNw==", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r482970717", "bodyText": "I kinda like the getKnownMethod name.\nIt's not returning the java.lang.Thread.State.\nIt's intuiting the jetty specific behavior that the stack is in based on the method found in the stacktrace.", "author": "joakime", "createdAt": "2020-09-03T13:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA1MTQ4NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r483051485", "bodyText": "Ok so it's a string tag that indicates the Jetty thread stack state.\nHow about getStateTag() or getCompressedStackTag() or getReducedStackTag()?", "author": "sbordet", "createdAt": "2020-09-03T15:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3Nzc4Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5230#discussion_r483077782", "bodyText": "Or getStackBehavior() ?", "author": "joakime", "createdAt": "2020-09-03T15:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzM1MA=="}], "type": "inlineReview"}, {"oid": "1d1bbc49f750c3061682eee22bae332228387f21", "url": "https://github.com/eclipse/jetty.project/commit/1d1bbc49f750c3061682eee22bae332228387f21", "message": "Issue #5201 - change format for QTP dump from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-04T03:55:26Z", "type": "commit"}, {"oid": "1d1bbc49f750c3061682eee22bae332228387f21", "url": "https://github.com/eclipse/jetty.project/commit/1d1bbc49f750c3061682eee22bae332228387f21", "message": "Issue #5201 - change format for QTP dump from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-04T03:55:26Z", "type": "forcePushed"}]}