{"pr_number": 5177, "pr_title": "Issue #5162 CDI embedded integration improvements", "pr_createdAt": "2020-08-20T08:31:15Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5177", "timeline": [{"oid": "67c373c7d986b73e03ffb137f860298c891cdc0a", "url": "https://github.com/eclipse/jetty.project/commit/67c373c7d986b73e03ffb137f860298c891cdc0a", "message": "Issue #5162 CDI embedded integration improvements\n\nClean up CDI integration and documentation to better support embedded usage.\n + made listener public\n + added utility class for SCIs", "committedDate": "2020-08-20T08:29:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2MjM2Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473762367", "bodyText": "Made public so it can be directly used without SCI", "author": "gregw", "createdAt": "2020-08-20T08:32:09Z", "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiDecoratingListener.java", "diffHunk": "@@ -24,13 +24,14 @@\n /**\n  * A DecoratingListener that listens for \"org.eclipse.jetty.cdi.decorator\"\n  */\n-class CdiDecoratingListener extends DecoratingListener\n+public class CdiDecoratingListener extends DecoratingListener", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2Mjc4MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473762781", "bodyText": "Set the mode here, so direct usage still signals to weld the method used.", "author": "gregw", "createdAt": "2020-08-20T08:32:34Z", "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiDecoratingListener.java", "diffHunk": "@@ -24,13 +24,14 @@\n /**\n  * A DecoratingListener that listens for \"org.eclipse.jetty.cdi.decorator\"\n  */\n-class CdiDecoratingListener extends DecoratingListener\n+public class CdiDecoratingListener extends DecoratingListener\n {\n     public static final String MODE = \"CdiDecoratingListener\";\n     public static final String ATTRIBUTE = \"org.eclipse.jetty.cdi.decorator\";\n \n     public CdiDecoratingListener(ServletContextHandler contextHandler)\n     {\n         super(contextHandler, ATTRIBUTE);\n+        contextHandler.setAttribute(CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, MODE);", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2MzEyOA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473763128", "bodyText": "make work when there is no classloader", "author": "gregw", "createdAt": "2020-08-20T08:32:56Z", "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiSpiDecorator.java", "diffHunk": "@@ -65,7 +65,10 @@\n     public CdiSpiDecorator(ServletContextHandler context) throws UnsupportedOperationException\n     {\n         _context = context;\n+        context.setAttribute(CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, MODE);\n         ClassLoader classLoader = _context.getClassLoader();\n+        if (classLoader == null)\n+            classLoader = this.getClass().getClassLoader();", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NDQ3Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473764473", "bodyText": "This complex little dance is because it is too easy to install CdiSpiDecorator and then try to init Weld with it's listener, which will fail because CdiSpiDecorator will try to decorate it, but CDI is not enabled yet.     This soft dependency  breaks that chicken-egg problem.", "author": "gregw", "createdAt": "2020-08-20T08:34:24Z", "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiSpiDecorator.java", "diffHunk": "@@ -92,6 +95,35 @@ public CdiSpiDecorator(ServletContextHandler context) throws UnsupportedOperatio\n         }\n     }\n \n+    /**\n+     * Test if a class can be decorated.\n+     * @implNote The default implementation calls {@link #isKnownUndecoratable(String) }\n+     * on the class and all it's super classes.\n+     * @param clazz The class to check\n+     * @return True if the class and all it's super classes can be decorated\n+     */\n+    protected boolean isDecoratable(Class<?> clazz)\n+    {\n+        if (Object.class == clazz)\n+            return true;\n+        if (isKnownUndecoratable(clazz.getName()))\n+            return false;\n+        return isDecoratable(clazz.getSuperclass());\n+    }\n+\n+    /**\n+     * Test if a specific class name is known to not be decoratable.\n+     * @implNote default implementation checks for well known classes that are used to\n+     * setup CDI itself, and thus cannot themselves be decorated.\n+     * @see #isDecoratable(Class)\n+     * @param className The name of the class to check\n+     * @return True if the class is known not to be decoratable\n+     */\n+    protected boolean isKnownUndecoratable(String className)\n+    {\n+        return \"org.jboss.weld.environment.servlet.Listener\".equals(className);", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NTExMw==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473765113", "bodyText": "This is no longer needed.  Always called with correct classloader set.", "author": "gregw", "createdAt": "2020-08-20T08:35:06Z", "path": "jetty-plus/src/main/java/org/eclipse/jetty/plus/annotation/ContainerInitializer.java", "diffHunk": "@@ -124,9 +124,6 @@ public void callStartup(WebAppContext context)\n         {\n             Set<Class<?>> classes = new HashSet<Class<?>>();\n \n-            ClassLoader oldLoader = Thread.currentThread().getContextClassLoader();\n-            Thread.currentThread().setContextClassLoader(context.getClassLoader());\n-", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NTY2OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473765669", "bodyText": "This allows for multiple SCI Callers.  It also correctly sets them as managed if this handler starts them.", "author": "gregw", "createdAt": "2020-08-20T08:35:44Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -336,9 +338,15 @@ protected ServletHandler newServletHandler()\n     @Override\n     protected void startContext() throws Exception\n     {\n-        ServletContainerInitializerCaller sciBean = getBean(ServletContainerInitializerCaller.class);\n-        if (sciBean != null)\n-            sciBean.start();\n+        for (ServletContainerInitializerCaller  sci : getBeans(ServletContainerInitializerCaller.class))\n+        {\n+            if (sci.isStopped())\n+            {\n+                sci.start();\n+                if (isAuto(sci))\n+                    manage(sci);\n+            }\n+        }", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjcwMw==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473766703", "bodyText": "This utility class avoids the need to create custom SCI callers.   The name is not perfect, but this name space is a bit messed up.  It does read well when used.", "author": "gregw", "createdAt": "2020-08-20T08:36:50Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -1493,4 +1501,43 @@ public void destroy(Object o)\n             decorator.destroy(o);\n         }\n     }\n+\n+    /**\n+     * A utility class to hold a {@link ServletContainerInitializer} and implement the\n+     * {@link ServletContainerInitializerCaller} interface so that the SCI is correctly\n+     * started if an instance of this class is added as a bean to a {@link ServletContextHandler}.\n+     */\n+    public static class Initializer extends AbstractLifeCycle implements ServletContainerInitializerCaller\n+    {\n+        private final ServletContextHandler _context;\n+        private final ServletContainerInitializer _sci;\n+        private final Set<Class<?>> _classes;\n+\n+        public Initializer(ServletContextHandler context, ServletContainerInitializer sci, Set<Class<?>> classes)\n+        {\n+            _context = context;\n+            _sci = sci;\n+            _classes = classes;\n+        }\n+\n+        public Initializer(ServletContextHandler context, ServletContainerInitializer sci)\n+        {\n+            this(context, sci, Collections.emptySet());\n+        }\n+\n+        @Override\n+        protected void doStart() throws Exception\n+        {\n+            boolean oldExtended = _context.getServletContext().isExtendedListenerTypes();\n+            try\n+            {\n+                _context.getServletContext().setExtendedListenerTypes(true);\n+                _sci.onStartup(_classes, _context.getServletContext());\n+            }\n+            finally\n+            {\n+                _context.getServletContext().setExtendedListenerTypes(oldExtended);\n+            }\n+        }\n+    }", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAzMTk3NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r474031975", "bodyText": "If an SCI is being run on a ServletContextHandler, there's no expectations of bytecode scanning (IMO).\nIt would be sweet if we could just do ...\nServletContextHandler handler = new ServletContextHandler();\nhandler.addBean(new MyLibServletContextInitializer());\nhandler.addBean(new org.jboss.weld.environment.servlet.EnhancedListener()); // this is an SCI\nserver.setHandler(handler);\nserver.start(); // this loads the SCI's from the beans and uses them.\nJust have ServletContextHandler be aware of SCI as beans and load / call them with no/empty classes.\nOr, if this raw/naked SCI as bean concept isn't right, how about a specific call on ServletContextHandler for them?\nServletContextHandler handler = new ServletContextHandler();\nhandler.addInitializer(new MyLibServletContextInitializer(), Collections.emptySet());\nhandler.addInitializer(new org.jboss.weld.environment.servlet.EnhancedListener(), Collections.emptySet());\nserver.setHandler(handler);\nserver.start();", "author": "joakime", "createdAt": "2020-08-20T14:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY5NzcxNg==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r475697716", "bodyText": "@joakime if we were adding this mechanism from scratch, I agree that just adding the SCIs as beans would be simplest.\nHowever, we already have the concept of a ServletContainerInitializerCaller set as a bean and it is used at least a little bit.... so adding a utility instance of that feels simpler than having two mechanisms.     I guess we could make Initializer private and check for SCI beans... so it would be a feeder to the existing mechanism.... torn.... @janbartel thoughts?", "author": "gregw", "createdAt": "2020-08-24T15:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0MDUzNA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477140534", "bodyText": "You can't do away with some kind of wrapper for the SCIs because the SCI.onStartup() method can have the list of classes passed in, so you need to remember somewhere what they are.", "author": "janbartel", "createdAt": "2020-08-26T08:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMjQxMA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477202410", "bodyText": "Ah yes - naked SCIs only work if they have no classes to be passed in.  Whilst that will be rare for the usage intended, it still would mean another mechanism, so let's just keep it simple.", "author": "gregw", "createdAt": "2020-08-26T10:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NjcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2Njg3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473766872", "bodyText": "This test mode is now supported", "author": "gregw", "createdAt": "2020-08-20T08:37:04Z", "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/CDITests.java", "diffHunk": "@@ -61,7 +61,7 @@\n             Arguments.of(\"weld\", \"cdi2\", null),\n             Arguments.of(\"weld\", \"cdi-spi\", null), // Weld >= 3.1.2\n             Arguments.of(\"weld\", \"decorate\", null), // Weld >= 3.1.2\n-            // TODO Arguments.of(\"weld\", \"cdi-decorate\", null), // Weld >= 3.1.3\n+            Arguments.of(\"weld\", \"cdi-decorate\", null), // Weld >= 3.1.3", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2NzQ0MA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473767440", "bodyText": "Added this unit test to test similar features as the webapp, but from embedded", "author": "gregw", "createdAt": "2020-08-20T08:37:42Z", "path": "tests/test-webapps/test-weld-cdi-webapp/src/test/java/org/eclipse/jetty/cdi/weld/EmbeddedWeldTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.cdi.weld;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+import javax.servlet.DispatcherType;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.annotations.AnnotationConfiguration;\n+import org.eclipse.jetty.cdi.CdiServletContainerInitializer;\n+import org.eclipse.jetty.server.LocalConnector;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ListenerHolder;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.test.GreetingsServlet;\n+import org.eclipse.jetty.test.MyContextListener;\n+import org.eclipse.jetty.test.ServerIDFilter;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.JettyWebXmlConfiguration;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class EmbeddedWeldTest", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2ODM2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473768360", "bodyText": "I don't think all these modes are recommended, but all variations are probably used somewhere so best to test to know if we break any usages.", "author": "gregw", "createdAt": "2020-08-20T08:38:46Z", "path": "tests/test-webapps/test-weld-cdi-webapp/src/test/java/org/eclipse/jetty/cdi/weld/EmbeddedWeldTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.cdi.weld;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+import javax.servlet.DispatcherType;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.annotations.AnnotationConfiguration;\n+import org.eclipse.jetty.cdi.CdiServletContainerInitializer;\n+import org.eclipse.jetty.server.LocalConnector;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ListenerHolder;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.test.GreetingsServlet;\n+import org.eclipse.jetty.test.MyContextListener;\n+import org.eclipse.jetty.test.ServerIDFilter;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.JettyWebXmlConfiguration;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class EmbeddedWeldTest\n+{\n+    public static Server createServerWithServletContext(int mode)\n+    {\n+        Server server = new Server();\n+        server.addConnector(new LocalConnector(server));\n+        ServletContextHandler context = new ServletContextHandler();\n+        context.setContextPath(\"/\");\n+        server.setHandler(context);\n+\n+        // Setup context\n+        context.addServlet(GreetingsServlet.class, \"/\");\n+        context.addServlet(BeanServlet.class, \"/beans\");\n+        context.addFilter(ServerIDFilter.class, \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+\n+        // Setup Jetty weld integration\n+        switch (mode)", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc2ODkyNw==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r473768927", "bodyText": "We can add a CdiConfiguration to do this in 10.", "author": "gregw", "createdAt": "2020-08-20T08:39:27Z", "path": "tests/test-webapps/test-weld-cdi-webapp/src/test/java/org/eclipse/jetty/cdi/weld/EmbeddedWeldTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.cdi.weld;\n+\n+import java.io.IOException;\n+import java.util.EnumSet;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+import javax.servlet.DispatcherType;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.annotations.AnnotationConfiguration;\n+import org.eclipse.jetty.cdi.CdiServletContainerInitializer;\n+import org.eclipse.jetty.server.LocalConnector;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ListenerHolder;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.test.GreetingsServlet;\n+import org.eclipse.jetty.test.MyContextListener;\n+import org.eclipse.jetty.test.ServerIDFilter;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.JettyWebXmlConfiguration;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class EmbeddedWeldTest\n+{\n+    public static Server createServerWithServletContext(int mode)\n+    {\n+        Server server = new Server();\n+        server.addConnector(new LocalConnector(server));\n+        ServletContextHandler context = new ServletContextHandler();\n+        context.setContextPath(\"/\");\n+        server.setHandler(context);\n+\n+        // Setup context\n+        context.addServlet(GreetingsServlet.class, \"/\");\n+        context.addServlet(BeanServlet.class, \"/beans\");\n+        context.addFilter(ServerIDFilter.class, \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+\n+        // Setup Jetty weld integration\n+        switch (mode)\n+        {\n+            case 0: // Do nothing, let weld work it out.\n+                // Expect:INFO: WELD-ENV-001201: Jetty 7.2+ detected, CDI injection will be available in Servlets and Filters. Injection into Listeners is not supported.\n+                context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 1:  // Deprecated use of Decorating Listener\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.addEventListener(new org.eclipse.jetty.webapp.DecoratingListener(context));\n+                context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 2: // CDI Decorating Listener\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.addEventListener(new org.eclipse.jetty.cdi.CdiDecoratingListener(context));\n+                context.addEventListener(new org.jboss.weld.environment.servlet.Listener());\n+                break;\n+\n+            case 3: // CDI SPI\n+                // Expect:INFO: WELD-ENV-001213: Jetty CDI SPI support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.getObjectFactory().addDecorator(new org.eclipse.jetty.cdi.CdiSpiDecorator(context));\n+                context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 4: // SCI invocation with no mode selected\n+                // Expect:INFO: WELD-ENV-001213: Jetty CDI SPI support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+                context.addEventListener(new org.jboss.weld.environment.servlet.Listener());\n+                // context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 5: // SCI invocation with mode selected\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters\n+                context.setInitParameter(org.eclipse.jetty.cdi.CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, org.eclipse.jetty.cdi.CdiDecoratingListener.MODE);\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+                context.getServletHandler().addListener(new ListenerHolder(org.jboss.weld.environment.servlet.Listener.class));\n+                break;\n+\n+            case 6: // direct SCI invocation of jetty and Weld SCI\n+                // Expect:INFO: WELD-ENV-001213: Jetty CDI SPI support detected, CDI injection will be available in Listeners, Servlets and Filters.\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.jboss.weld.environment.servlet.EnhancedListener()));\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+\n+                // Can decorate MyContextListener in this setup\n+                context.getServletHandler().addListener(new ListenerHolder(MyContextListener.class));\n+                break;\n+\n+            case 7: // direct SCI invocation of jetty and Weld SCI with mode selected\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters\n+                context.setInitParameter(org.eclipse.jetty.cdi.CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, org.eclipse.jetty.cdi.CdiDecoratingListener.MODE);\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.jboss.weld.environment.servlet.EnhancedListener()));\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+\n+                // Can decorate MyContextListener in this setup\n+                context.getServletHandler().addListener(new ListenerHolder(MyContextListener.class));\n+                break;\n+\n+            case 8: // direct SCI invocation of jetty and Weld SCI with mode selected - check order independent\n+                // Expect:INFO: WELD-ENV-001212: Jetty CdiDecoratingListener support detected, CDI injection will be available in Listeners, Servlets and Filters\n+                context.setInitParameter(org.eclipse.jetty.cdi.CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, org.eclipse.jetty.cdi.CdiDecoratingListener.MODE);\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+                context.addBean(new ServletContextHandler.Initializer(context, new org.jboss.weld.environment.servlet.EnhancedListener()));\n+\n+                // Can decorate MyContextListener in this setup\n+                context.getServletHandler().addListener(new ListenerHolder(MyContextListener.class));\n+                break;\n+        }\n+\n+        return server;\n+    }\n+\n+    @ParameterizedTest()\n+    @ValueSource(ints = {0, 1, 2, 3, 4, 5, 6, 7, 8})\n+    public void testServletContext(int mode) throws Exception\n+    {\n+        Server server = createServerWithServletContext(mode);\n+        server.start();\n+        LocalConnector connector = server.getBean(LocalConnector.class);\n+        String response = connector.getResponse(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n+        assertThat(response, containsString(\"HTTP/1.1 200 OK\"));\n+        assertThat(response, containsString(\"Hello GreetingsServlet\"));\n+        if (mode >= 6)\n+            assertThat(response, containsString(\" from CDI-Demo-org.eclipse.jetty.test\"));\n+\n+        response = connector.getResponse(\"GET /beans HTTP/1.0\\r\\n\\r\\n\");\n+        assertThat(response, containsString(\"Beans from Weld BeanManager for \"));\n+\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testWebappContext() throws Exception\n+    {\n+        Server server = new Server(8080);\n+        server.addConnector(new LocalConnector(server));\n+        WebAppContext webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setResourceBase(\"src/test/resources\");\n+        server.setHandler(webapp);\n+\n+        webapp.setInitParameter(org.eclipse.jetty.cdi.CdiServletContainerInitializer.CDI_INTEGRATION_ATTRIBUTE, org.eclipse.jetty.cdi.CdiDecoratingListener.MODE);\n+        webapp.addBean(new ServletContextHandler.Initializer(webapp, new org.eclipse.jetty.cdi.CdiServletContainerInitializer()));\n+        webapp.addBean(new ServletContextHandler.Initializer(webapp, new org.jboss.weld.environment.servlet.EnhancedListener()));\n+\n+        // This is ugly but needed for maven for testing in a overlaid war pom\n+        webapp.getServerClasspathPattern().add(\"-org.eclipse.jetty.test.\");\n+        webapp.getSystemClasspathPattern().add(\"org.eclipse.jetty.test.\");\n+\n+        webapp.addServlet(GreetingsServlet.class, \"/\");\n+        webapp.addFilter(ServerIDFilter.class, \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+        webapp.getServletHandler().addListener(new ListenerHolder(MyContextListener.class));\n+\n+        server.start();\n+\n+        LocalConnector connector = server.getBean(LocalConnector.class);\n+        String response = connector.getResponse(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n+        System.err.println(response);\n+        assertThat(response, containsString(\"HTTP/1.1 200 OK\"));\n+        assertThat(response, containsString(\"Hello GreetingsServlet\"));\n+        assertThat(response, containsString(\" from CDI-Demo-org.eclipse.jetty.test\"));\n+        server.stop();\n+\n+    }\n+\n+    @Test\n+    public void testWebappContextDiscovered() throws Exception\n+    {\n+        Server server = new Server(8080);\n+        server.addConnector(new LocalConnector(server));\n+        WebAppContext webapp = new WebAppContext();\n+        webapp.setContextPath(\"/\");\n+        webapp.setResourceBase(\"src/test/resources\");\n+        server.setHandler(webapp);\n+\n+        // Need the AnnotationConfiguration to detect SCIs\n+        Configuration.ClassList.setServerDefault(server).addBefore(JettyWebXmlConfiguration.class.getName(),\n+            AnnotationConfiguration.class.getName());\n+\n+        // Need to expose our SCI.  This is ugly could be made better in jetty-10 with a CdiConfiguration\n+        webapp.getServerClasspathPattern().add(\"-\" + CdiServletContainerInitializer.class.getName());\n+        webapp.getSystemClasspathPattern().add(CdiServletContainerInitializer.class.getName());\n+", "originalCommit": "67c373c7d986b73e03ffb137f860298c891cdc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed0b344a1cfd99b8092fcb99cc394946181be28c", "url": "https://github.com/eclipse/jetty.project/commit/ed0b344a1cfd99b8092fcb99cc394946181be28c", "message": "Issue #5162 CDI embedded integration improvements\n\nClean up CDI integration and documentation to better support embedded usage.\n + moved EmbeddedWeldTest to jetty-embedded", "committedDate": "2020-08-24T10:47:58Z", "type": "commit"}, {"oid": "b0f16c64aa4b8e4538b86832cfa2315ef7e712b4", "url": "https://github.com/eclipse/jetty.project/commit/b0f16c64aa4b8e4538b86832cfa2315ef7e712b4", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples", "committedDate": "2020-08-24T11:52:30Z", "type": "commit"}, {"oid": "b2fd5af3eddf4e0a6bdbd3169e6deb7590456e82", "url": "https://github.com/eclipse/jetty.project/commit/b2fd5af3eddf4e0a6bdbd3169e6deb7590456e82", "message": "fix javadoc\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-08-24T14:36:00Z", "type": "commit"}, {"oid": "e4d7712863b366208c0df6c2c7e5762ab6fe132d", "url": "https://github.com/eclipse/jetty.project/commit/e4d7712863b366208c0df6c2c7e5762ab6fe132d", "message": "Issue #5162 CDI embedded integration improvements\n\nventilated text", "committedDate": "2020-08-24T15:35:12Z", "type": "commit"}, {"oid": "1052180245bb95dfabee558c6101ebd08dd6f4b7", "url": "https://github.com/eclipse/jetty.project/commit/1052180245bb95dfabee558c6101ebd08dd6f4b7", "message": "Merge branch 'jetty-9.4.x-5162-Improve-Decorating-Listener-Examples' of github.com:eclipse/jetty.project into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples", "committedDate": "2020-08-24T15:36:25Z", "type": "commit"}, {"oid": "68cf3f55c1a7ea4fa766f05d3c383f69bee43281", "url": "https://github.com/eclipse/jetty.project/commit/68cf3f55c1a7ea4fa766f05d3c383f69bee43281", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples", "committedDate": "2020-08-24T16:43:28Z", "type": "commit"}, {"oid": "f923d9b8b337d68243fb61ee719916faff5efcb8", "url": "https://github.com/eclipse/jetty.project/commit/f923d9b8b337d68243fb61ee719916faff5efcb8", "message": "fix test pom\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-08-24T17:47:29Z", "type": "commit"}, {"oid": "d3c4bd8c35f0e13fce939b429d260ec97400bdad", "url": "https://github.com/eclipse/jetty.project/commit/d3c4bd8c35f0e13fce939b429d260ec97400bdad", "message": "Fixed javadoc", "committedDate": "2020-08-25T10:37:31Z", "type": "commit"}, {"oid": "7784be49004f6c99e08bbd2a920b349c57972980", "url": "https://github.com/eclipse/jetty.project/commit/7784be49004f6c99e08bbd2a920b349c57972980", "message": "Merge branch 'jetty-9.4.x-5162-Improve-Decorating-Listener-Examples' of github.com:eclipse/jetty.project into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples", "committedDate": "2020-08-25T10:44:56Z", "type": "commit"}, {"oid": "400838503972b3aa5accc7b9f1f9ab95dee0c658", "url": "https://github.com/eclipse/jetty.project/commit/400838503972b3aa5accc7b9f1f9ab95dee0c658", "message": "Fixed javadoc", "committedDate": "2020-08-25T12:12:46Z", "type": "commit"}, {"oid": "c9e1fa50971f2a2b1f4b954a06cc3de026dc27d1", "url": "https://github.com/eclipse/jetty.project/commit/c9e1fa50971f2a2b1f4b954a06cc3de026dc27d1", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5162-Improve-Decorating-Listener-Examples", "committedDate": "2020-08-25T13:05:43Z", "type": "commit"}, {"oid": "9a6f48ce74c45f15348bff075f1e5342f9d5f535", "url": "https://github.com/eclipse/jetty.project/commit/9a6f48ce74c45f15348bff075f1e5342f9d5f535", "message": "Issue #5162 CDI embedded integration improvements\n\nMoved tests to jetty-cdi to avoid consequences to other tests in embedded", "committedDate": "2020-08-25T13:26:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NTE1Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477145156", "bodyText": "Again with the extraneous changes!", "author": "janbartel", "createdAt": "2020-08-26T08:58:11Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -749,13 +757,13 @@ public static ServletContextHandler getServletContextHandler(ServletContext cont\n \n     public static class JspPropertyGroup implements JspPropertyGroupDescriptor\n     {\n-        private List<String> _urlPatterns = new ArrayList<>();\n+        private final List<String> _urlPatterns = new ArrayList<>();", "originalCommit": "9a6f48ce74c45f15348bff075f1e5342f9d5f535", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5NTAzMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477195031", "bodyText": "yeah - you have to be a little bad sometimes :)", "author": "gregw", "createdAt": "2020-08-26T10:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NTE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjA5OA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477146098", "bodyText": "Why is the comment removed?", "author": "janbartel", "createdAt": "2020-08-26T08:59:42Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/ContainerLifeCycle.java", "diffHunk": "@@ -915,11 +915,6 @@ public void updateBeans(Object[] oldBeans, final Object[] newBeans)\n         }\n     }\n \n-    /**", "originalCommit": "9a6f48ce74c45f15348bff075f1e5342f9d5f535", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMjc3MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477202771", "bodyText": "You don't need to comment overridden methods unless you need to add impl notes.", "author": "gregw", "createdAt": "2020-08-26T10:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MDA3NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477150075", "bodyText": "I don't see any refactoring of the existing ContainerInitializer and ServletContainerInitializersStarter classes used by webapps - I would think that we could extend this ServletContextHandler.Initializer class, or have the other classes extend it. I don't like having 2 completely separate mechanisms.", "author": "janbartel", "createdAt": "2020-08-26T09:06:23Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -1493,4 +1501,43 @@ public void destroy(Object o)\n             decorator.destroy(o);\n         }\n     }\n+\n+    /**\n+     * A utility class to hold a {@link ServletContainerInitializer} and implement the\n+     * {@link ServletContainerInitializerCaller} interface so that the SCI is correctly\n+     * started if an instance of this class is added as a bean to a {@link ServletContextHandler}.\n+     */\n+    public static class Initializer extends AbstractLifeCycle implements ServletContainerInitializerCaller", "originalCommit": "9a6f48ce74c45f15348bff075f1e5342f9d5f535", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMTgwOA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477201808", "bodyText": "We have a single mechanism based on a single interface, ServletContainerInitializerCaller, that has two key implementations:\n\nThe webapp impl that has a single caller that invokes all the SCIs it has discovered in the order that it wants.\nThe Initializer impl that is just a convenience class to create your own custom caller.\n\nTo make the webapp impl use the Initializer, then it would have to make all discovered SCIs individually wrapped as Initializers and get into the business of sorting beans on the context....  That is doable, but I'm not sure it is worth it for the bugs that it will introduce.  I really don't want to mess with webapps SCI handling if it is not broken.", "author": "gregw", "createdAt": "2020-08-26T10:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MDA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3MjM2NA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477272364", "bodyText": "But I thought that the ordering on the beans is that they are called in the order they are added? If so, then we can just have AnnotationConfiguration add them in the order that is established by applying any ordering: currently it just adds the ContainerInitializers to a list in the order determined by the ordering, so I don't see the difference between adding it to that list, and adding it to the  list of beans.\nAnd I think the refactoring I'm talking about should be done in 10, not 9.", "author": "janbartel", "createdAt": "2020-08-26T12:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MDA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5NTUwNw==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r477595507", "bodyText": "Yes it is totally doable... but I just don't want to mess with something that isn't broken.... maybe 10.1?", "author": "gregw", "createdAt": "2020-08-26T21:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MDA3NQ=="}], "type": "inlineReview"}, {"oid": "16bae47a73b4916928ade19fd00612d954150b50", "url": "https://github.com/eclipse/jetty.project/commit/16bae47a73b4916928ade19fd00612d954150b50", "message": "trailing new line\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-08-26T12:37:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MDk2NA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r481940964", "bodyText": "Not at all fond of the name isKnownDecoratable(). How about instead you remove isKnownDecoratable() and add a field list of _undecoratables, a setter for them, and in isDecoratable() you just check the list? This might also be a good idea in case CDI adds some other classes that can't be decorated?", "author": "janbartel", "createdAt": "2020-09-02T09:42:55Z", "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiSpiDecorator.java", "diffHunk": "@@ -92,6 +95,35 @@ public CdiSpiDecorator(ServletContextHandler context) throws UnsupportedOperatio\n         }\n     }\n \n+    /**\n+     * Test if a class can be decorated.\n+     * The default implementation calls {@link #isKnownUndecoratable(String) }\n+     * on the class and all it's super classes.\n+     * @param clazz The class to check\n+     * @return True if the class and all it's super classes can be decorated\n+     */\n+    protected boolean isDecoratable(Class<?> clazz)\n+    {\n+        if (Object.class == clazz)\n+            return true;\n+        if (isKnownUndecoratable(clazz.getName()))", "originalCommit": "16bae47a73b4916928ade19fd00612d954150b50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b665a6ed05d607f8f928f8084e5f4c613f0fe864", "url": "https://github.com/eclipse/jetty.project/commit/b665a6ed05d607f8f928f8084e5f4c613f0fe864", "message": "updates from review\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-09-02T10:08:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1NzU4OA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r481957588", "bodyText": "I meant \"setUndecoratableClasses\". Undecorated makes it sound like they haven't been decorated yet.", "author": "janbartel", "createdAt": "2020-09-02T10:12:54Z", "path": "jetty-cdi/src/main/java/org/eclipse/jetty/cdi/CdiSpiDecorator.java", "diffHunk": "@@ -92,6 +100,54 @@ public CdiSpiDecorator(ServletContextHandler context) throws UnsupportedOperatio\n         }\n     }\n \n+    /**\n+     * Test if a class can be decorated.\n+     * The default implementation checks the set from  {@link #getUndecoratedClasses()}\n+     * on the class and all it's super classes.\n+     * @param clazz The class to check\n+     * @return True if the class and all it's super classes can be decorated\n+     */\n+    protected boolean isDecoratable(Class<?> clazz)\n+    {\n+        if (Object.class == clazz)\n+            return true;\n+        if (getUndecoratedClasses().contains(clazz.getName()))\n+            return false;\n+        return isDecoratable(clazz.getSuperclass());\n+    }\n+\n+    /**\n+     * Get the set of classes that will not be decorated. The default set includes the listener from Weld that will itself\n+     * setup decoration.\n+     * @return The modifiable set of class names that will not be decorated (ie {@link #isDecoratable(Class)} will return false.\n+     * @see #isDecoratable(Class)\n+     */\n+    public Set<String> getUndecoratedClasses()\n+    {\n+        return _undecorated;\n+    }\n+\n+    /**\n+     * @param undecorated The set of class names that will not be decorated.\n+     * @see #isDecoratable(Class)\n+     */\n+    public void setUndecoratedClasses(Set<String> undecorated)", "originalCommit": "b665a6ed05d607f8f928f8084e5f4c613f0fe864", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2MTU0OA==", "url": "https://github.com/eclipse/jetty.project/pull/5177#discussion_r481961548", "bodyText": "@janb I saw that, but I think Undecorated also works, is less of a mouthful and eitherway you need to check with the javadoc to really know what it means.", "author": "gregw", "createdAt": "2020-09-02T10:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1NzU4OA=="}], "type": "inlineReview"}, {"oid": "2bd8e1c7cae83f18386303428b12c29966521a8a", "url": "https://github.com/eclipse/jetty.project/commit/2bd8e1c7cae83f18386303428b12c29966521a8a", "message": "Feedback from review", "committedDate": "2020-09-02T11:13:46Z", "type": "commit"}]}