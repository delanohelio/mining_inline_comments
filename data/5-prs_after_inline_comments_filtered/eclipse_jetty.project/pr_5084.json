{"pr_number": 5084, "pr_title": "Fixes #5083 - Convert synchronized usages to AutoLock.", "pr_createdAt": "2020-07-27T21:17:44Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5084", "timeline": [{"oid": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "url": "https://github.com/eclipse/jetty.project/commit/8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\n* Replaced relevant usages of synchronized with AutoLock.\n* Made AutoLock serializable since classes that use it may be stored in the HttpSession.\n* Added convenience methods to AutoLock to execute lambdas with the lock held.\n* Introduced AutoLock.WithCondition to use a Lock and a Condition together.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-07-27T21:14:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyNDkzOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461424939", "bodyText": "Can we verify if this style does more allocations or not?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return _lock.runLocked(() -> _exchange);\n          \n          \n            \n                    try (AutoLock ignored = _lock.lock())\n          \n          \n            \n                    {\n          \n          \n            \n                        return _exchange;\n          \n          \n            \n                    }\t\t\ufffc   \n          \n      \n    \n    \n  \n\nis not that bad.", "author": "gregw", "createdAt": "2020-07-28T08:55:16Z", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpChannel.java", "diffHunk": "@@ -103,10 +105,7 @@ public boolean disassociate(HttpExchange exchange)\n \n     public HttpExchange getHttpExchange()\n     {\n-        synchronized (this)\n-        {\n-            return _exchange;\n-        }\n+        return _lock.runLocked(() -> _exchange);", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4MTU0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461481541", "bodyText": "AFAIK, _lock.runLocked(() -> _exchange) must capture this and therefore allocates each time.\nIt may or may not be optimized by allocating only the first time it's executed, however the try version you suggest does not allocate ever, but it's more boilerplate-y.", "author": "sbordet", "createdAt": "2020-07-28T10:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyNDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MjQxNw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461492417", "bodyText": "I don't think we should be allocating for syntax sugar.     If we can't demonstrate that these simple getters/setters are not optimised to not allocate, then I think we should use the boilerplate version.... it's only 3 extra lines.", "author": "gregw", "createdAt": "2020-07-28T10:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyNDkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyNzkzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461427935", "bodyText": "Would this be a better pattern to avoid allocation?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public void setMaxMultiplex(int maxMultiplex)\n          \n          \n            \n                {\n          \n          \n            \n                    synchronized (this)\n          \n          \n            \n                    {\n          \n          \n            \n                        this.maxMultiplex = maxMultiplex;\n          \n          \n            \n                    }\n          \n          \n            \n                    lock.runLocked(() -> this.maxMultiplex = maxMultiplex);\n          \n          \n            \n                }\n          \n          \n            \n               private void setMaxMultiplexLocked(int maxMultiplex)\n          \n          \n            \n               {\n          \n          \n            \n                   this.maxMultiplex = maxMultiplex\n          \n          \n            \n               }\n          \n          \n            \n               @Override\n          \n          \n            \n               public void setMaxMultiplex(int maxMultiplex)\n          \n          \n            \n               {\n          \n          \n            \n                   lock.runLocked(this::setMaxMultiplexLocked);\n          \n          \n            \n               }", "author": "gregw", "createdAt": "2020-07-28T09:00:04Z", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/MultiplexConnectionPool.java", "diffHunk": "@@ -80,19 +82,13 @@ private static int ceilDiv(int a, int b)\n     @Override\n     public int getMaxMultiplex()\n     {\n-        synchronized (this)\n-        {\n-            return maxMultiplex;\n-        }\n+        return lock.runLocked(() -> maxMultiplex);\n     }\n \n     @Override\n     public void setMaxMultiplex(int maxMultiplex)\n     {\n-        synchronized (this)\n-        {\n-            this.maxMultiplex = maxMultiplex;\n-        }\n+        lock.runLocked(() -> this.maxMultiplex = maxMultiplex);\n     }", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4MTk1MA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461481950", "bodyText": "Uh, no. I won't write another method just for this, if you don't want to allocate ever, just use the try version.", "author": "sbordet", "createdAt": "2020-07-28T10:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyNzkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1ODYxMA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461458610", "bodyText": "this debug is now outside of the lock", "author": "gregw", "createdAt": "2020-07-28T09:48:29Z", "path": "jetty-http2/http2-client/src/test/java/org/eclipse/jetty/http2/client/RawHTTP2ProxyTest.java", "diffHunk": "@@ -415,12 +413,9 @@ protected Action process() throws Throwable\n                     @Override\n                     public void succeeded(Stream result)\n                     {\n-                        synchronized (lock)\n-                        {\n-                            if (LOGGER.isDebugEnabled())\n-                                LOGGER.debug(\"CPS created {}\", result);\n-                            streams.put(clientToProxyStream, result);\n-                        }\n+                        if (LOGGER.isDebugEnabled())\n+                            LOGGER.debug(\"CPS created {}\", result);", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4MjM4NA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461482384", "bodyText": "Yes, it only references local variables and does not need to be inside the lock.", "author": "sbordet", "createdAt": "2020-07-28T10:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ1ODYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MjU5MA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461462590", "bodyText": "why ignored ?", "author": "gregw", "createdAt": "2020-07-28T09:55:25Z", "path": "jetty-http2/http2-http-client-transport/src/main/java/org/eclipse/jetty/http2/client/http/HttpReceiverOverHTTP2.java", "diffHunk": "@@ -285,7 +284,7 @@ private void process(boolean resume)\n                 return;\n \n             // Process only if there is demand.\n-            synchronized (this)\n+            try (AutoLock ignored = lock.lock())", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4MjY4Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461482683", "bodyText": "Because otherwise IDEs report it as a warning because it's an unused variable.", "author": "sbordet", "createdAt": "2020-07-28T10:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MjU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MTQyNg==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461491426", "bodyText": "As I said below (above), that's a problem with the IDE.  The variable is used in the virtual finally block.  Let's just call it lock and raise a bug on the ide", "author": "gregw", "createdAt": "2020-07-28T10:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MjU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MzE3MA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461463170", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        try (AutoLock ignored = _lock.lock())\n          \n          \n            \n                        try (AutoLock lock = _lock.lock())", "author": "gregw", "createdAt": "2020-07-28T09:56:23Z", "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/HttpTransportOverHTTP2.java", "diffHunk": "@@ -443,7 +445,7 @@ private void abort(Throwable failure)\n \n         private Throwable sending(Callback callback, boolean commit)\n         {\n-            synchronized (this)\n+            try (AutoLock ignored = _lock.lock())", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5NDczMw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461494733", "bodyText": "Leave it as ignored, it's not a variable that is used.\nMany different kinds of tooling will complain if we leave it as lock (checkstyle, findbugs, and error_prone will all complain)", "author": "joakime", "createdAt": "2020-07-28T10:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MzE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzMjc3NA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461532774", "bodyText": "It is not ignored.  It is used.    I'm not going to change our code for bad tooling.   Checkstyle has not complained about this before???  If it does, then raise bugs on the tools as they should not complain if the variable is an AutoCloseable.", "author": "gregw", "createdAt": "2020-07-28T12:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MzE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NTEzOA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461545138", "bodyText": "@joakime absolutely not. That lock is used! Calling it \"ignored\" makes it look like it is not used.", "author": "janbartel", "createdAt": "2020-07-28T12:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MzE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5NjM2Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461596367", "bodyText": "The AutoLock instance is used, the variable named lock is not.\nWe have code like this ...\ntry(AutoLock lock = _lock.lock()) {\n   // the variable 'lock' is not used in this block.\n}\nThis isn't new.\nWe have literally over 100 places in the existing Jetty codebase that honors this language quirk as well. (in both try-with-resources and catch blocks)\nWe have chosen to use the industry standard mechanism of using \"ignored\" or \"ignore\" as the variable name to signal to the tooling.\nOr we can use the @SuppressWarnings(\"unused\") before each instance as well.\nThis is not unique to the IDE, it's present in TONS of tooling around Java.\nEven turning on the lint features on javac presents the same warnings.\nIf this is suddenly an issue for you, then vote for the variable-less language features then. (the same features that exist in other languages like C#)\ntry(_lock.lock()) { // no variable\n}\n\nand \n\ntry {\n} catch(IOException) { // no variable\n}", "author": "joakime", "createdAt": "2020-07-28T13:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MzE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5NDQ1Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461494457", "bodyText": "Since you have a getter for the lock and neither the class nor method is final then you should use the getter:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        _lock.runLocked(() -> _redirectMap.put(name, entity));\n          \n          \n            \n                        lock().runLocked(() -> _redirectMap.put(name, entity));", "author": "gregw", "createdAt": "2020-07-28T10:57:48Z", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlParser.java", "diffHunk": "@@ -127,10 +131,10 @@ public boolean isValidating()\n         return _parser.isValidating();\n     }\n \n-    public synchronized void redirectEntity(String name, URL entity)\n+    public void redirectEntity(String name, URL entity)\n     {\n         if (entity != null)\n-            _redirectMap.put(name, entity);\n+            _lock.runLocked(() -> _redirectMap.put(name, entity));", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODA3OA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461498078", "bodyText": "I don't like this new method as it allocates a new Condition on every lock??  So at the very least that is garbage.... but does it even work so one locker is going to have a different condition to another?   I think this is just wrong?\nIf you want to avoid the extra field to hold a condition then you need a class AutoLockWithCondition... and maybe AutoLockWithBiCondition", "author": "gregw", "createdAt": "2020-07-28T11:05:07Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/AutoLock.java", "diffHunk": "@@ -64,4 +119,69 @@ public void close()\n     {\n         _lock.unlock();\n     }\n+\n+    /**\n+     * <p>A reentrant lock with a condition that can be used in a try-with-resources statement.</p>\n+     * <p>Typical usage:</p>\n+     * <pre>\n+     * // Waiting\n+     * try (AutoLock lock = _lock.lock())\n+     * {\n+     *     lock.await();\n+     * }\n+     *\n+     * // Signaling\n+     * try (AutoLock lock = _lock.lock())\n+     * {\n+     *     lock.signalAll();\n+     * }\n+     * </pre>\n+     */\n+    public static class WithCondition extends AutoLock\n+    {\n+        private final Condition _condition = newCondition();", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMzU3Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461503576", "bodyText": "Ah ignore this... I misread the code.\nStill not a fan of this though.", "author": "gregw", "createdAt": "2020-07-28T11:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMDMzMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461500331", "bodyText": "Don't remove this synchronized.   The StringBuffer is synchronized no matter what we do, so the outer synchronized prevents the lock being grabbed and released for every call.", "author": "gregw", "createdAt": "2020-07-28T11:09:44Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/ResourceService.java", "diffHunk": "@@ -377,22 +377,19 @@ protected void sendWelcome(HttpContent content, String pathInContext, boolean en\n         if (!endsWithSlash)\n         {\n             StringBuffer buf = request.getRequestURL();\n-            synchronized (buf)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMTA0OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461501049", "bodyText": "Don't remove this synchronized", "author": "gregw", "createdAt": "2020-07-28T11:10:56Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/URIUtil.java", "diffHunk": "@@ -1180,27 +1180,24 @@ public static void appendSchemeHostPort(StringBuilder url, String scheme, String\n      */\n     public static void appendSchemeHostPort(StringBuffer url, String scheme, String server, int port)\n     {\n-        synchronized (url)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MDEyNw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461490127", "bodyText": "I'm not happy with this change: why are we testing classloader instead of oldClassLoader?", "author": "janbartel", "createdAt": "2020-07-28T10:48:51Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "diffHunk": "@@ -1392,10 +1388,8 @@ public void handle(Request request, Runnable runnable)\n             exitScope(request);\n \n             __context.set(oldContext);\n-            if (oldClassloader != null)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MDc3NA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461490774", "bodyText": "What's the significance of the change here? This method used to be synchronized, and now there's not even a lock?", "author": "janbartel", "createdAt": "2020-07-28T10:50:08Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "diffHunk": "@@ -1783,15 +1777,16 @@ public String toString()\n         return b.toString();\n     }\n \n-    public synchronized Class<?> loadClass(String className) throws ClassNotFoundException", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MzAxMw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461493013", "bodyText": "Why have you removed direct access to the field _classLoader?", "author": "janbartel", "createdAt": "2020-07-28T10:54:46Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "diffHunk": "@@ -1783,15 +1777,16 @@ public String toString()\n         return b.toString();\n     }\n \n-    public synchronized Class<?> loadClass(String className) throws ClassNotFoundException\n+    public Class<?> loadClass(String className) throws ClassNotFoundException\n     {\n         if (className == null)\n             return null;\n \n-        if (_classLoader == null)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MzMxNw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461493317", "bodyText": "Why have you removed direct access to _classLoader?", "author": "janbartel", "createdAt": "2020-07-28T10:55:23Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "diffHunk": "@@ -2366,9 +2371,11 @@ public void addListener(String className)\n \n             try\n             {\n-                @SuppressWarnings(\n-                    {\"unchecked\", \"rawtypes\"})\n-                Class<? extends EventListener> clazz = _classLoader == null ? Loader.loadClass(className) : (Class)_classLoader.loadClass(className);\n+                ClassLoader classLoader = ContextHandler.this.getClassLoader();", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5NzcxOA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461497718", "bodyText": "I actually preferred this the way it was:   the stateChangeCompleted condition makes it very clear what is being awaited and released", "author": "janbartel", "createdAt": "2020-07-28T11:04:25Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/Session.java", "diffHunk": "@@ -792,7 +764,7 @@ public void renewId(HttpServletRequest request)\n                     case CHANGING:\n                         try\n                         {\n-                            _stateChangeCompleted.await();", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMTYxNg==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461501616", "bodyText": "This change may be correct - need to run tests to be sure - but I'd really rather you hadn't changed this in a pr which is about locking.", "author": "janbartel", "createdAt": "2020-07-28T11:11:58Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -102,36 +104,29 @@\n     private boolean _ensureDefaultServlet = true;\n     private IdentityService _identityService;\n     private boolean _allowDuplicateMappings = false;\n-\n     private ServletHolder[] _servlets = new ServletHolder[0];\n     private ServletMapping[] _servletMappings;\n     private final Map<String, FilterHolder> _filterNameMap = new HashMap<>();\n     private List<FilterMapping> _filterPathMappings;\n     private MultiMap<FilterMapping> _filterNameMappings;\n-\n     private final Map<String, MappedServlet> _servletNameMap = new HashMap<>();\n     private PathMappings<MappedServlet> _servletPathMap;\n-\n     private ListenerHolder[] _listeners = new ListenerHolder[0];\n     private boolean _initialized = false;\n-\n     @SuppressWarnings(\"unchecked\")\n     protected final ConcurrentMap<String, FilterChain>[] _chainCache = new ConcurrentMap[FilterMapping.ALL];\n-\n     @SuppressWarnings(\"unchecked\")\n     protected final Queue<String>[] _chainLRU = new Queue[FilterMapping.ALL];\n \n-    /**\n-     * Constructor.\n-     */\n-    public ServletHandler()\n+    AutoLock lock()\n     {\n+        return _lock.lock();\n     }\n \n     @Override\n     public boolean isDumpable(Object o)\n     {\n-        return !(o instanceof Holder || o instanceof BaseHolder || o instanceof FilterMapping || o instanceof ServletMapping);", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjI3Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461502273", "bodyText": "Why was the synchronization on this not replaced with a lock?", "author": "janbartel", "createdAt": "2020-07-28T11:13:14Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -146,8 +141,7 @@ public void dump(Appendable out, String indent) throws IOException\n     }\n \n     @Override\n-    protected synchronized void doStart()\n-        throws Exception\n+    protected void doStart() throws Exception\n     {", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjUxNg==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461502516", "bodyText": "Same as for doStop(), where is the lock?", "author": "janbartel", "createdAt": "2020-07-28T11:13:41Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -230,8 +224,7 @@ protected void stop(LifeCycle l) throws Exception\n     }\n \n     @Override\n-    protected synchronized void doStop()", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNzQzOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461507439", "bodyText": "Why removed?", "author": "janbartel", "createdAt": "2020-07-28T11:23:35Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java", "diffHunk": "@@ -376,15 +376,12 @@ public static void append(StringBuilder buf,\n                               int offset,\n                               int length)\n     {\n-        synchronized (buf)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNzkwMA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461507900", "bodyText": "Where's the lock equivalent to the synchronize?", "author": "janbartel", "createdAt": "2020-07-28T11:24:37Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/UrlEncoded.java", "diffHunk": "@@ -238,64 +238,61 @@ public static void decodeTo(String content, MultiMap<String> map, Charset charse\n             return;\n         }\n \n-        synchronized (map)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwODA3OA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461508078", "bodyText": "Where's the lock equivalent to the synchronize?", "author": "janbartel", "createdAt": "2020-07-28T11:24:59Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/UrlEncoded.java", "diffHunk": "@@ -316,75 +313,72 @@ public static void decodeUtf8To(String query, MultiMap<String> map)\n     public static void decodeUtf8To(String query, int offset, int length, MultiMap<String> map)\n     {\n         Utf8StringBuilder buffer = new Utf8StringBuilder();\n-        synchronized (map)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwOTI0NA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461509244", "bodyText": "Lock?", "author": "janbartel", "createdAt": "2020-07-28T11:27:31Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/UrlEncoded.java", "diffHunk": "@@ -400,74 +394,71 @@ else if (buffer.length() > 0)\n     public static void decode88591To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)\n         throws IOException\n     {\n-        synchronized (map)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwOTMxNw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461509317", "bodyText": "Lock?", "author": "janbartel", "createdAt": "2020-07-28T11:27:41Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/UrlEncoded.java", "diffHunk": "@@ -482,74 +473,71 @@ else if (buffer.length() > 0)\n     public static void decodeUtf8To(InputStream in, MultiMap<String> map, int maxLength, int maxKeys)\n         throws IOException\n     {\n-        synchronized (map)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwOTQyNw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461509427", "bodyText": "Lock?", "author": "janbartel", "createdAt": "2020-07-28T11:27:55Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/UrlEncoded.java", "diffHunk": "@@ -627,77 +615,74 @@ public static void decodeTo(InputStream in, MultiMap<String> map, Charset charse\n             return;\n         }\n \n-        synchronized (map)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMDE2Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461510167", "bodyText": "As this is the base-class for many other classes, do we want to consider allowing access to this lock instead of declaring yet another lock in the subclasses?", "author": "janbartel", "createdAt": "2020-07-28T11:29:32Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java", "diffHunk": "@@ -53,7 +54,7 @@\n     public static final String STOPPING = State.STOPPING.toString();\n \n     private final List<EventListener> _eventListener = new CopyOnWriteArrayList<>();\n-    private final Object _lock = new Object();", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MzY3Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461553677", "bodyText": "It was a private lock, so lets keep it a private lock.", "author": "gregw", "createdAt": "2020-07-28T12:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMDE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMTM1NA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461511354", "bodyText": "Maybe this lock should be moved down into Resource, the base class?", "author": "janbartel", "createdAt": "2020-07-28T11:32:00Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/URLResource.java", "diffHunk": "@@ -38,9 +39,10 @@\n public class URLResource extends Resource\n {\n     private static final Logger LOG = LoggerFactory.getLogger(URLResource.class);\n+\n+    protected final AutoLock _lock = new AutoLock();", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMTcxNg==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461511716", "bodyText": "Where's the lock and why did you change the substance of the code?", "author": "janbartel", "createdAt": "2020-07-28T11:32:38Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java", "diffHunk": "@@ -210,15 +208,8 @@ public boolean check(Object credentials)\n                     credentials = new String((char[])credentials);\n                 if (credentials instanceof Password || credentials instanceof String)\n                 {\n-                    byte[] digest;\n-                    synchronized (__md5Lock)", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMjI4OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461512289", "bodyText": "Where's the lock, and why did you change the substance of the code?", "author": "janbartel", "createdAt": "2020-07-28T11:33:46Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java", "diffHunk": "@@ -256,27 +247,8 @@ public static String digest(String password)\n         {\n             try\n             {\n-                byte[] digest;", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMzU2Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461513566", "bodyText": "Again, this might strictly be correct, but should have only been changed after the synchronization is converted to locks.", "author": "janbartel", "createdAt": "2020-07-28T11:36:23Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ShutdownThread.java", "diffHunk": "@@ -36,10 +37,11 @@\n public class ShutdownThread extends Thread\n {\n     private static final Logger LOG = LoggerFactory.getLogger(ShutdownThread.class);\n-    private static final ShutdownThread _thread = new ShutdownThread();\n+    private static final ShutdownThread INSTANCE = new ShutdownThread();", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxNDU5MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461514591", "bodyText": "Unnecessary object allocation of the list here?", "author": "janbartel", "createdAt": "2020-07-28T11:38:36Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ShutdownThread.java", "diffHunk": "@@ -81,45 +83,53 @@ private synchronized void unhook()\n     }\n \n     /**\n-     * Returns the instance of the singleton\n-     *\n-     * @return the singleton instance of the {@link ShutdownThread}\n+     * @return the singleton instance of the ShutdownThread\n      */\n     public static ShutdownThread getInstance()\n     {\n-        return _thread;\n+        return INSTANCE;\n     }\n \n-    public static synchronized void register(LifeCycle... lifeCycles)\n+    public static void register(LifeCycle... lifeCycles)\n     {\n-        _thread._lifeCycles.addAll(Arrays.asList(lifeCycles));\n-        if (_thread._lifeCycles.size() > 0)\n-            _thread.hook();\n+        try (AutoLock ignored = INSTANCE._lock.lock())\n+        {\n+            INSTANCE._lifeCycles.addAll(Arrays.asList(lifeCycles));\n+            if (INSTANCE._lifeCycles.size() > 0)\n+                INSTANCE.hook();\n+        }\n     }\n \n-    public static synchronized void register(int index, LifeCycle... lifeCycles)\n+    public static void register(int index, LifeCycle... lifeCycles)\n     {\n-        _thread._lifeCycles.addAll(index, Arrays.asList(lifeCycles));\n-        if (_thread._lifeCycles.size() > 0)\n-            _thread.hook();\n+        try (AutoLock ignored = INSTANCE._lock.lock())\n+        {\n+            INSTANCE._lifeCycles.addAll(index, Arrays.asList(lifeCycles));\n+            if (INSTANCE._lifeCycles.size() > 0)\n+                INSTANCE.hook();\n+        }\n     }\n \n-    public static synchronized void deregister(LifeCycle lifeCycle)\n+    public static void deregister(LifeCycle lifeCycle)\n     {\n-        _thread._lifeCycles.remove(lifeCycle);\n-        if (_thread._lifeCycles.size() == 0)\n-            _thread.unhook();\n+        try (AutoLock ignored = INSTANCE._lock.lock())\n+        {\n+            INSTANCE._lifeCycles.remove(lifeCycle);\n+            if (INSTANCE._lifeCycles.size() == 0)\n+                INSTANCE.unhook();\n+        }\n     }\n \n-    public static synchronized boolean isRegistered(LifeCycle lifeCycle)\n+    public static boolean isRegistered(LifeCycle lifeCycle)\n     {\n-        return _thread._lifeCycles.contains(lifeCycle);\n+        return INSTANCE._lock.runLocked(() -> INSTANCE._lifeCycles.contains(lifeCycle));\n     }\n \n     @Override\n     public void run()\n     {\n-        for (LifeCycle lifeCycle : _thread._lifeCycles)\n+        List<LifeCycle> lifeCycles = INSTANCE._lock.runLocked(() -> new ArrayList<>(INSTANCE._lifeCycles));", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxNTQzMA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461515430", "bodyText": "What's the motivation for this code change?", "author": "janbartel", "createdAt": "2020-07-28T11:40:26Z", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java", "diffHunk": "@@ -66,15 +67,18 @@\n public class Configurations extends AbstractList<Configuration> implements Dumpable\n {\n     private static final Logger LOG = LoggerFactory.getLogger(Configurations.class);\n-\n+    private static final AutoLock __lock = new AutoLock();\n     private static final List<Configuration> __known = new ArrayList<>();\n     private static final List<Configuration> __unavailable = new ArrayList<>();\n     private static final Set<String> __knownByClassName = new HashSet<>();\n \n-    public static synchronized List<Configuration> getKnown()\n+    public static List<Configuration> getKnown()\n     {\n-        if (__known.isEmpty())\n+        try (AutoLock ignored = __lock.lock())\n         {\n+            if (!__known.isEmpty())", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxNjM4Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r461516383", "bodyText": "Why is the name of the method changed?", "author": "janbartel", "createdAt": "2020-07-28T11:42:30Z", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java", "diffHunk": "@@ -105,53 +108,62 @@\n                 }\n             }\n \n-            LOG.debug(\"Known Configurations {}\", __knownByClassName);\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Known Configurations {}\", __knownByClassName);\n+            return __known;\n         }\n-        return __known;\n     }\n \n-    public static synchronized void setKnown(String... classes)\n+    public static void setKnown(String... classes)\n     {\n-        if (!__known.isEmpty())\n-            throw new IllegalStateException(\"Known configuration classes already set\");\n-\n-        for (String c : classes)\n+        try (AutoLock ignored = __lock.lock())\n         {\n-            try\n+            if (!__known.isEmpty())\n+                throw new IllegalStateException(\"Known configuration classes already set\");\n+\n+            for (String c : classes)\n             {\n-                Class<? extends Configuration> clazz = Loader.loadClass(c);\n-                Configuration configuration = clazz.getConstructor().newInstance();\n-                if (!configuration.isAvailable())\n+                try\n                 {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.warn(\"Configuration unavailable: \" + configuration);\n-                    __unavailable.add(configuration);\n-                    continue;\n+                    Class<? extends Configuration> clazz = Loader.loadClass(c);\n+                    Configuration configuration = clazz.getConstructor().newInstance();\n+                    if (!configuration.isAvailable())\n+                    {\n+                        if (LOG.isDebugEnabled())\n+                            LOG.warn(\"Configuration unavailable: \" + configuration);\n+                        __unavailable.add(configuration);\n+                        continue;\n+                    }\n+                    __known.add(clazz.getConstructor().newInstance());\n+                    __knownByClassName.add(c);\n+                }\n+                catch (Exception e)\n+                {\n+                    LOG.warn(\"Problem loading known class\", e);\n                 }\n-                __known.add(clazz.getConstructor().newInstance());\n-                __knownByClassName.add(c);\n-            }\n-            catch (Exception e)\n-            {\n-                LOG.warn(\"Problem loading known class\", e);\n             }\n-        }\n-        sort(__known);\n-        if (LOG.isDebugEnabled())\n-        {\n-            for (Configuration c : __known)\n+            sort(__known);\n+            if (LOG.isDebugEnabled())\n             {\n-                LOG.debug(\"known {}\", c);\n+                for (Configuration c : __known)\n+                {\n+                    LOG.debug(\"known {}\", c);\n+                }\n             }\n-        }\n \n-        LOG.debug(\"Known Configurations {}\", __knownByClassName);\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Known Configurations {}\", __knownByClassName);\n+        }\n     }\n \n-    static synchronized void cleanKnown()\n+    // Only used by tests.\n+    static void clearKnown()", "originalCommit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "url": "https://github.com/eclipse/jetty.project/commit/089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-07-29T13:34:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMzIwMA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462323200", "bodyText": "We should make this change for all of our Serializable classes.\nhttps://product.hubspot.com/blog/java-11-dont-rely-on-generated-serialversionuid", "author": "joakime", "createdAt": "2020-07-29T14:03:12Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/AutoLock.java", "diffHunk": "@@ -36,6 +35,8 @@\n  */\n public class AutoLock implements AutoCloseable, Serializable\n {\n+    private static final long serialVersionUID = 3300696774541816341L;", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NjgyNw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462376827", "bodyText": "Opened as Issue #5100", "author": "joakime", "createdAt": "2020-07-29T15:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMzIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzQ2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462327460", "bodyText": "interesting.  is there a reason for this here?", "author": "joakime", "createdAt": "2020-07-29T14:09:03Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java", "diffHunk": "@@ -524,6 +524,7 @@ protected void skip(Content content, int length)\n      */\n     protected void blockForContent() throws IOException\n     {\n+        assert _lock.isHeldByCurrentThread();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2ODczNA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462368734", "bodyText": "Yes, few lines below there is a naked call to _lock.await() which can only happen if the caller of blockForContent() is holding the lock. The assert makes explicit that we want blockForContent() only ever called with the lock held.", "author": "sbordet", "createdAt": "2020-07-29T15:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyOTgwOA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462329808", "bodyText": "This looks odd.\nIt looks like we are attempting to modify an immutable field in the request object?\nThat can't be right.", "author": "joakime", "createdAt": "2020-07-29T14:11:46Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/ResourceService.java", "diffHunk": "@@ -377,19 +377,22 @@ protected void sendWelcome(HttpContent content, String pathInContext, boolean en\n         if (!endsWithSlash)\n         {\n             StringBuffer buf = request.getRequestURL();\n-            int param = buf.lastIndexOf(\";\");\n-            if (param < 0)\n-                buf.append('/');\n-            else\n-                buf.insert(param, '/');\n-            String q = request.getQueryString();\n-            if (q != null && q.length() != 0)\n+            synchronized (buf)", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTkyMA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462369920", "bodyText": "\ud83e\udd23 @gregw", "author": "sbordet", "createdAt": "2020-07-29T15:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyOTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMzU3Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462333577", "bodyText": "\ud83d\ude15 \u2754", "author": "joakime", "createdAt": "2020-07-29T14:16:32Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "diffHunk": "@@ -214,13 +222,15 @@ public static void setServerInfo(String serverInfo)\n     private final Set<EventListener> _durableListeners = new HashSet<>();\n     private String[] _protectedTargets;\n     private final CopyOnWriteArrayList<AliasCheck> _aliasChecks = new CopyOnWriteArrayList<>();\n-    private Availability _availability = Availability.UNAVAILABLE;\n \n     public enum Availability\n     {\n         UNAVAILABLE, STARTING, AVAILABLE, SHUTDOWN,\n     }\n \n+    ;", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MDYwMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462370601", "bodyText": "Always been there, and asked to not do other changes that were not related to synchronization.\nI may still have slipped a few though.", "author": "sbordet", "createdAt": "2020-07-29T15:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMzU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNTcwMg==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462335702", "bodyText": "I think i've seen this go from Long.toString() to none to back again in multiple commits on this PR.", "author": "joakime", "createdAt": "2020-07-29T14:19:23Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/session/DefaultSessionIdManager.java", "diffHunk": "@@ -268,7 +270,7 @@ public String newSessionId(long seedTerm)\n                 if (!StringUtil.isBlank(_workerName))\n                     id = _workerName + id;\n \n-                id = id + COUNTER.getAndIncrement();\n+                id = id + Long.toString(COUNTER.getAndIncrement());", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MDk0MA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462370940", "bodyText": "Been asked to not do other changes that were not related to synchronization.", "author": "sbordet", "createdAt": "2020-07-29T15:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNTcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNjQzOA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462336438", "bodyText": "Huh? Why is this synchronized?", "author": "joakime", "createdAt": "2020-07-29T14:20:19Z", "path": "jetty-server/src/test/java/org/eclipse/jetty/server/ServerConnectorTimeoutTest.java", "diffHunk": "@@ -124,13 +124,16 @@ public void testIdleTimeoutAfterComplete() throws Exception\n \n     private String process(String content) throws IOException, InterruptedException\n     {\n-        String request = \"GET / HTTP/1.1\\r\\n\" + \"Host: localhost\\r\\n\";\n+        synchronized (this)", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzODAxNA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462338014", "bodyText": "The old code (on the left) called the signal on the AutoLock, this change does it on the flush.", "author": "joakime", "createdAt": "2020-07-29T14:22:11Z", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AsyncRequestContent.java", "diffHunk": "@@ -291,15 +293,15 @@ private void notifyFailure(Consumer consumer, Throwable failure)\n \n     private void notifyFlush()\n     {\n-        try (AutoLock.WithCondition l = lock.lock())\n+        try (AutoLock l = lock.lock())\n         {\n-            l.signal();\n+            flush.signal();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzODQ2NA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462338464", "bodyText": "Ditto.  changed from AutoLock.WithCondition.await() to flush.await()", "author": "joakime", "createdAt": "2020-07-29T14:22:46Z", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AsyncRequestContent.java", "diffHunk": "@@ -311,7 +313,7 @@ public void flush() throws IOException\n                         throw new IOException(failure);\n                     if (chunks.isEmpty())\n                         return;\n-                    l.await();\n+                    flush.await();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzODczOA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462338738", "bodyText": "Here too. (l confusion?)", "author": "joakime", "createdAt": "2020-07-29T14:23:08Z", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/util/AsyncRequestContent.java", "diffHunk": "@@ -338,7 +340,7 @@ public void close()\n                     produce = true;\n                 }\n             }\n-            l.signal();\n+            flush.signal();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MDk4OA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462340988", "bodyText": "the old code did signalAll on the lock", "author": "joakime", "createdAt": "2020-07-29T14:26:00Z", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteArrayEndPoint.java", "diffHunk": "@@ -445,11 +447,11 @@ public boolean flush(ByteBuffer... buffers) throws IOException\n     @Override\n     public void reset()\n     {\n-        try (AutoLock.WithCondition lock = _lock.lock())\n+        try (AutoLock l = _lock.lock())\n         {\n             _inQ.clear();\n+            _hasOutput.signalAll();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MTAzMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462341031", "bodyText": "the old code did signalAll on the lock", "author": "joakime", "createdAt": "2020-07-29T14:26:04Z", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteArrayEndPoint.java", "diffHunk": "@@ -436,7 +438,7 @@ public boolean flush(ByteBuffer... buffers) throws IOException\n             if (!idle)\n             {\n                 notIdle();\n-                lock.signalAll();\n+                _hasOutput.signalAll();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MjU0OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462342549", "bodyText": "static final is all caps by checkstyle rules.\ngrandfathered ruleset is __<name> (two underscores).", "author": "joakime", "createdAt": "2020-07-29T14:27:59Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ShutdownThread.java", "diffHunk": "@@ -37,11 +36,11 @@\n public class ShutdownThread extends Thread\n {\n     private static final Logger LOG = LoggerFactory.getLogger(ShutdownThread.class);\n-    private static final ShutdownThread INSTANCE = new ShutdownThread();\n+    private static final ShutdownThread _thread = new ShutdownThread();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NTQzNA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462345434", "bodyText": "this is a unrelated change.\n\"clear\" (verb) means \"to remove unwanted items\"\n\"clean\" (verb) means \"make (something or someone) free of dirt, marks, or mess, especially by washing, wiping, or brushing\"\nUsing \"clean\" here is not correct.", "author": "joakime", "createdAt": "2020-07-29T14:31:37Z", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebAppContextTest.java", "diffHunk": "@@ -76,7 +76,7 @@ public void sessionDestroyed(HttpSessionEvent se)\n     @AfterEach\n     public void tearDown()\n     {\n-        Configurations.clearKnown();\n+        Configurations.cleanKnown();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NTYzMw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462345633", "bodyText": "Unrelated change.\nPlease revert.", "author": "joakime", "createdAt": "2020-07-29T14:31:51Z", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/ConfigurationsTest.java", "diffHunk": "@@ -34,13 +34,13 @@\n     @AfterEach\n     public void tearDown()\n     {\n-        Configurations.clearKnown();\n+        Configurations.cleanKnown();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NjQ2Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462346466", "bodyText": "Unrelated change.\nPlease revert.\nSee other comment about \"clear\" vs \"clean\".", "author": "joakime", "createdAt": "2020-07-29T14:32:52Z", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java", "diffHunk": "@@ -149,17 +147,15 @@ public static void setKnown(String... classes)\n                 {\n                     LOG.debug(\"known {}\", c);\n                 }\n-            }\n-\n-            if (LOG.isDebugEnabled())\n                 LOG.debug(\"Known Configurations {}\", __knownByClassName);\n+            }\n         }\n     }\n \n     // Only used by tests.\n-    static void clearKnown()\n+    static void cleanKnown()", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NzkwMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462347901", "bodyText": "Bad javadoc. (merge both sections)\nWhere did this text come from btw?", "author": "joakime", "createdAt": "2020-07-29T14:34:36Z", "path": "jetty-websocket/websocket-javax-common/src/main/java/org/eclipse/jetty/websocket/javax/common/JavaxWebSocketFrameHandler.java", "diffHunk": "@@ -62,11 +62,38 @@\n public class JavaxWebSocketFrameHandler implements FrameHandler\n {\n     private final AutoLock lock = new AutoLock();\n-    private final AtomicBoolean closeNotified = new AtomicBoolean();\n-    private final Map<Byte, RegisteredMessageHandler> messageHandlerMap = new HashMap<>();\n     private final Logger logger;\n     private final JavaxWebSocketContainer container;\n     private final Object endpointInstance;\n+    private final AtomicBoolean closeNotified = new AtomicBoolean();\n+\n+    /**\n+     * List of configured named variables in the uri-template.\n+     * <p>\n+     *     Used to bind uri-template variables, with their values from the upgrade, to the methods\n+     *     that have declared their interest in these values via {@code @PathParam} annotations.\n+     * </p>\n+     * <p>\n+     *     Can be null if client side, or no named variables were configured on the server side.\n+     * </p>\n+     */\n+    /**", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4Mjg1MA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462382850", "bodyText": "@lachlan-roberts we should fix this in 10.0.x", "author": "joakime", "createdAt": "2020-07-29T15:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NzkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0ODQ5MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462348491", "bodyText": "This wasn't synchronized before, why now?", "author": "joakime", "createdAt": "2020-07-29T14:35:20Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/URIUtil.java", "diffHunk": "@@ -1180,24 +1180,27 @@ public static void appendSchemeHostPort(StringBuilder url, String scheme, String\n      */\n     public static void appendSchemeHostPort(StringBuffer url, String scheme, String server, int port)\n     {\n-        url.append(scheme).append(\"://\").append(HostPort.normalizeHost(server));\n-\n-        if (port > 0)\n+        synchronized (url)", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0OTMwOA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462349308", "bodyText": "Why is this synchronized now?\nWouldn't that mean all of our code using StringBuilder would now need synchronized now to make any use of this change?", "author": "joakime", "createdAt": "2020-07-29T14:36:21Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java", "diffHunk": "@@ -376,12 +376,15 @@ public static void append(StringBuilder buf,\n                               int offset,\n                               int length)\n     {\n-        int end = offset + length;\n-        for (int i = offset; i < end; i++)\n+        synchronized (buf)", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MDU1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462350551", "bodyText": "This seems like an unrelated change.", "author": "joakime", "createdAt": "2020-07-29T14:38:00Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -126,7 +138,7 @@ AutoLock lock()\n     @Override\n     public boolean isDumpable(Object o)\n     {\n-        return !(o instanceof BaseHolder || o instanceof FilterMapping || o instanceof ServletMapping);\n+        return !(o instanceof Holder || o instanceof BaseHolder || o instanceof FilterMapping || o instanceof ServletMapping);", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MjM5Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462352393", "bodyText": "This cast shouldn't be needed.", "author": "joakime", "createdAt": "2020-07-29T14:40:17Z", "path": "jetty-jndi/src/main/java/org/eclipse/jetty/jndi/ContextFactory.java", "diffHunk": "@@ -245,7 +249,7 @@ public static void disassociateContext(final Context ctx)\n \n     public static ClassLoader associateClassLoader(final ClassLoader loader)\n     {\n-        ClassLoader prev = __threadClassLoader.get();\n+        ClassLoader prev = (ClassLoader)__threadClassLoader.get();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MjQ1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462352451", "bodyText": "This cast shouldn't be needed.", "author": "joakime", "createdAt": "2020-07-29T14:40:21Z", "path": "jetty-jndi/src/main/java/org/eclipse/jetty/jndi/ContextFactory.java", "diffHunk": "@@ -233,7 +237,7 @@ public Context getContextForClassLoader(ClassLoader loader)\n      */\n     public static Context associateContext(final Context ctx)\n     {\n-        Context previous = __threadContext.get();\n+        Context previous = (Context)__threadContext.get();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1MjgxMA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462352810", "bodyText": "This cast shouldn't be needed.", "author": "joakime", "createdAt": "2020-07-29T14:40:50Z", "path": "jetty-jndi/src/main/java/org/eclipse/jetty/jndi/ContextFactory.java", "diffHunk": "@@ -161,12 +163,12 @@ public Object getObjectInstance(Object obj,\n         //classloader associated with the current context\n         if (ContextHandler.getCurrentContext() != null)\n         {\n-            if (LOG.isDebugEnabled())\n+            if (LOG.isDebugEnabled() && loader != null)\n                 LOG.debug(\"Trying classloader of current org.eclipse.jetty.server.handler.ContextHandler\");\n-            try (AutoLock ignored = __lock.lock())\n+            try (AutoLock l = __lock.lock())\n             {\n                 loader = ContextHandler.getCurrentContext().getContextHandler().getClassLoader();\n-                ctx = __contextMap.get(loader);\n+                ctx = (Context)__contextMap.get(loader);", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1Mjk0Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462352947", "bodyText": "This cast shouldn't be needed.", "author": "joakime", "createdAt": "2020-07-29T14:41:00Z", "path": "jetty-jndi/src/main/java/org/eclipse/jetty/jndi/ContextFactory.java", "diffHunk": "@@ -101,7 +103,7 @@ public Object getObjectInstance(Object obj,\n         throws Exception\n     {\n         //First, see if we have had a context injected into us to use.\n-        Context ctx = __threadContext.get();\n+        Context ctx = (Context)__threadContext.get();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1Mjk5Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r462352997", "bodyText": "This cast shouldn't be needed.", "author": "joakime", "createdAt": "2020-07-29T14:41:04Z", "path": "jetty-jndi/src/main/java/org/eclipse/jetty/jndi/ContextFactory.java", "diffHunk": "@@ -111,12 +113,12 @@ public Object getObjectInstance(Object obj,\n \n         //See if there is a classloader to use for finding the comp context\n         //Don't use its parent hierarchy if set.\n-        ClassLoader loader = __threadClassLoader.get();\n+        ClassLoader loader = (ClassLoader)__threadClassLoader.get();", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2OTc5MA==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r464969790", "bodyText": "This will create a new static Timer for every instance. It will replace the previous instance, but it will be held in memory by the thread.\nEither keep code as is, or make it statically initialised.", "author": "gregw", "createdAt": "2020-08-04T11:01:19Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/RolloverFileOutputStream.java", "diffHunk": "@@ -176,11 +178,7 @@ public RolloverFileOutputStream(String filename,\n         // Calculate Today's Midnight, based on Configured TimeZone (will be in past, even if by a few milliseconds)\n         setFile(now);\n \n-        synchronized (RolloverFileOutputStream.class)\n-        {\n-            if (__rollover == null)\n-                __rollover = new Timer(RolloverFileOutputStream.class.getName(), true);\n-        }\n+        __rollover = new Timer(RolloverFileOutputStream.class.getName(), true);", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3MDYwOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5084#discussion_r464970609", "bodyText": "I'm not really sure we need this lock.... but best to keep logic as is for this PR.", "author": "gregw", "createdAt": "2020-08-04T11:03:01Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Scanner.java", "diffHunk": "@@ -500,52 +513,61 @@ public boolean getReportDirs()\n      *\n      * @param listener the listener to add\n      */\n-    public synchronized void addListener(Listener listener)\n+    public void addListener(Listener listener)\n     {\n         if (listener == null)\n             return;\n-        _listeners.add(listener);\n+        try (AutoLock l = _lock.lock())\n+        {\n+            _listeners.add(listener);\n+        }\n     }\n \n     /**\n      * Remove a registered listener\n      *\n      * @param listener the Listener to be removed\n      */\n-    public synchronized void removeListener(Listener listener)\n+    public void removeListener(Listener listener)\n     {\n         if (listener == null)\n             return;\n-        _listeners.remove(listener);\n+        try (AutoLock l = _lock.lock())\n+        {\n+            _listeners.remove(listener);\n+        }\n     }\n \n     /**\n      * Start the scanning action.\n      */\n     @Override\n-    public synchronized void doStart()\n+    public void doStart()\n     {\n-        if (_running)\n-            return;\n+        try (AutoLock l = _lock.lock())", "originalCommit": "089e51f0bc02b63490e1038e0ec23d1d43adf9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "edd6ca2ee1d70b3e5cc578103b8371c04f14f7b6", "url": "https://github.com/eclipse/jetty.project/commit/edd6ca2ee1d70b3e5cc578103b8371c04f14f7b6", "message": "Issue #5083 - Convert synchronized usages to AutoLock.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-08-04T13:43:39Z", "type": "commit"}, {"oid": "c49035570e5a9f2731c205b98c1550e796bb3d8e", "url": "https://github.com/eclipse/jetty.project/commit/c49035570e5a9f2731c205b98c1550e796bb3d8e", "message": "Merged branch 'jetty-10.0.x' into 'jetty-10.0.x-convert_synchronized_to_autolock'.", "committedDate": "2020-08-04T14:32:55Z", "type": "commit"}]}