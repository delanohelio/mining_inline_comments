{"pr_number": 5273, "pr_title": "Issue #5032 - Minimal Extensible Web App changes", "pr_createdAt": "2020-09-15T19:31:59Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5273", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyOTkwNg==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489329906", "bodyText": "The ServletHolder does these two operations in the opposite order.  However, I think the order here is correct, so the servlet holder needs to be changed to do the same order.", "author": "gregw", "createdAt": "2020-09-16T10:22:34Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "diffHunk": "@@ -156,13 +161,41 @@ public void doStop()\n \n     @Override\n     public void destroyInstance(Object o)\n-        throws Exception\n     {\n         if (o == null)\n             return;\n-        Filter f = (Filter)o;\n-        f.destroy();\n-        getServletHandler().destroyFilter(f);\n+\n+        Filter filter = (Filter)o;\n+        // destroy the wrapped filter, in case there is special behaviour\n+        filter.destroy();\n+        // need to use the unwrapped filter because lifecycle callbacks such as\n+        // postconstruct and predestroy are based off the classname and the wrapper\n+        // classes are unknown outside the ServletHolder\n+        getServletHandler().destroyFilter(unwrap(filter));", "originalCommit": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzMTYxOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489331619", "bodyText": "I'd be OK with FilterWrapper and changing the existing servlet one to match.", "author": "gregw", "createdAt": "2020-09-16T10:25:33Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "diffHunk": "@@ -264,11 +304,62 @@ public void addMappingForUrlPatterns(EnumSet<DispatcherType> dispatcherTypes, bo\n \n     class Config extends HolderConfig implements FilterConfig\n     {\n-\n         @Override\n         public String getFilterName()\n         {\n             return getName();\n         }\n     }\n+\n+    /**\n+     * Experimental Wrapper mechanism for Filter objects.\n+     * <p>\n+     * Beans in ServletContextHandler or WebAppContext that implement this interface\n+     * will be called to optionally wrap any newly created Filters\n+     * (before their {@link Filter#init(FilterConfig)} method is called)\n+     * </p>\n+     */\n+    public interface WrapperFunction\n+    {\n+        Filter wrapFilter(Filter filter);\n+    }\n+\n+    public static class WrapperFilter implements Filter", "originalCommit": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489337854", "bodyText": "It would be good to have the bulk of wrap and unwrap in BaseHolder... but I'm struggling to think of how to do this nicely... as getBeans needs a real type.   Maybe we could pass it that type and have a common wrapper function interface:\n    private T wrap(T item, Class<? extends WrapperFunction<T>> wrapperType)\n\ufffc    {\n\ufffc        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n\ufffc        if (contextHandler != null)\n\ufffc        {\n\ufffc            for (WrapperFunction<T> wrapperFunction : contextHandler.getBeans(wrapperType))\n\ufffc            {\n\ufffc                item = wrapperFunction.wrapEventListener(item);\n\ufffc            }\n\ufffc        }\n\ufffc        return item;\n\ufffc    }\nNote sure if that works.... or if it is better... thoughts?", "author": "gregw", "createdAt": "2020-09-16T10:37:13Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "diffHunk": "@@ -126,9 +127,67 @@ public void doStop() throws Exception\n         }\n     }\n \n+    private EventListener wrap(final EventListener listener)\n+    {\n+        EventListener ret = listener;\n+        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n+        if (contextHandler != null)\n+        {\n+            for (ListenerHolder.WrapperFunction wrapperFunction : contextHandler.getBeans(ListenerHolder.WrapperFunction.class))\n+            {\n+                ret = wrapperFunction.wrapEventListener(ret);\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    private static EventListener unwrap(EventListener listener)\n+    {\n+        EventListener unwrapped = listener;\n+        while (ListenerHolder.WrapperEventListener.class.isAssignableFrom(unwrapped.getClass()))\n+        {\n+            unwrapped = ((ListenerHolder.WrapperEventListener)unwrapped).getWrappedListener();\n+        }\n+        return unwrapped;\n+    }", "originalCommit": "439d3f9d9e56339ad3b1d8c0bb6580a1b14fa880", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MDc5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489480799", "bodyText": "How about ...\n    protected <C,W> C wrap(final C component, final Class<W> wrapperFunctionType, final BiFunction<W,C,C> function)\n    {\n        C ret = component;\n        ServletContextHandler contextHandler = getServletHandler().getServletContextHandler();\n        if (contextHandler != null)\n        {\n            for (W wrapperFunction : contextHandler.getBeans(wrapperFunctionType))\n            {\n                ret = function.apply(wrapperFunction, ret);\n            }\n        }\n        return ret;\n    }\nWith a call like the following in FilterHolder ...\n_filter = wrap(_filter, FilterHolder.WrapperFunction.class, FilterHolder.WrapperFunction::wrapFilter);", "author": "joakime", "createdAt": "2020-09-16T14:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4MTUyMw==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489481523", "bodyText": "it's abstract > abstract > abstract.\nnot the prettiest thing.\nI kinda like the local wrap methods instead (easier to follow)", "author": "joakime", "createdAt": "2020-09-16T14:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxODU1OA==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489518558", "bodyText": "I agree that is too ugly.... let me have a play with it for 15 minutes to see if I can find something simpler....", "author": "gregw", "createdAt": "2020-09-16T15:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzMTQzOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489531439", "bodyText": "@joakime I've pushed an alternative", "author": "gregw", "createdAt": "2020-09-16T15:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzNzg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjIxMg==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489536212", "bodyText": "Should probably move this javadoc detail to the holder specific WrapFunction javadoc.", "author": "joakime", "createdAt": "2020-09-16T15:39:08Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/FilterHolder.java", "diffHunk": "@@ -297,16 +297,8 @@ public String getFilterName()\n      * (before their {@link Filter#init(FilterConfig)} method is called)\n      * </p>\n      */\n-    public interface WrapperFunction\n-    {\n-        /**\n-         * Optionally wrap the Filter.\n-         *\n-         * @param filter the Filter being passed in.\n-         * @return the Filter (extend from {@link FilterHolder.Wrapper} if you do wrap the Filter)", "originalCommit": "31175e98e59d0c3fcf2d375994584f8eeef907fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjM3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489536372", "bodyText": "Ditto.", "author": "joakime", "createdAt": "2020-09-16T15:39:19Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ListenerHolder.java", "diffHunk": "@@ -141,17 +141,8 @@ public String toString()\n      * they are used for the first time.\n      * </p>\n      */\n-    public interface WrapperFunction\n-    {\n-        /**\n-         * Optionally wrap the Servlet EventListener.\n-         *\n-         * @param listener the Servlet EventListener being passed in.\n-         * @return the Servlet EventListener (extend from {@link ListenerHolder.Wrapper}", "originalCommit": "31175e98e59d0c3fcf2d375994584f8eeef907fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjQ1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489536451", "bodyText": "This one too.", "author": "joakime", "createdAt": "2020-09-16T15:39:27Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java", "diffHunk": "@@ -1281,16 +1281,8 @@ public UnavailableException getUnavailableException()\n      * (before their {@link Servlet#init(ServletConfig)} method is called)\n      * </p>\n      */\n-    public interface WrapperFunction\n-    {\n-        /**\n-         * Optionally wrap the Servlet.\n-         *\n-         * @param servlet the servlet being passed in.\n-         * @return the servlet (extend from {@link ServletHolder.Wrapper} if you do wrap the Servlet)", "originalCommit": "31175e98e59d0c3fcf2d375994584f8eeef907fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0ODgwOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489748809", "bodyText": "I really don't understand why you have this templated over C when the class itself is already templated over T?\nWhen will C and T ever  be different types?", "author": "gregw", "createdAt": "2020-09-16T20:55:38Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "diffHunk": "@@ -185,6 +186,32 @@ public synchronized boolean isInstance()\n         return _instance != null;\n     }\n \n+    protected <C, W> C wrap(final C component, final Class<W> wrapperFunctionType, final BiFunction<W, C, C> function)", "originalCommit": "aee8b935398109867addfbb1730fc5bc8f8fdf7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1Mzg4Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489753886", "bodyText": "Good point.\nThe protected <C, W> portion was the problem with using <T, W> as that's a local T that hides the BaseHolder<T> declaration.\nI fixed this  in commit c569c87", "author": "joakime", "createdAt": "2020-09-16T21:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0ODgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NTI4NA==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489755284", "bodyText": "There was a point in time in this effort where wrap() returned the Wrapped/Wrapper version.\nBut that doesn't allow identity behavior (no wrap).\nOnce that was removed there wasn't a need for <C> anymore.", "author": "joakime", "createdAt": "2020-09-16T21:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0ODgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NDIwNw==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r489794207", "bodyText": "I don't love this signature.... but I'd like it a lot more with javadoc!", "author": "gregw", "createdAt": "2020-09-16T22:43:37Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "diffHunk": "@@ -185,6 +186,38 @@ public synchronized boolean isInstance()\n         return _instance != null;\n     }\n \n+    protected <W> T wrap(final T component, final Class<W> wrapperFunctionType, final BiFunction<W, T, T> function)", "originalCommit": "9d4b92b7ded4ede154df22f452d1f637fda55151", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0MzM0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5273#discussion_r490043341", "bodyText": "Added javadoc.", "author": "joakime", "createdAt": "2020-09-17T07:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NDIwNw=="}], "type": "inlineReview"}, {"oid": "59976dce54c172531ba353bda927ab3d1949a19a", "url": "https://github.com/eclipse/jetty.project/commit/59976dce54c172531ba353bda927ab3d1949a19a", "message": "Issue #5032 - Minimal Extensible Web App changes\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-09-17T10:58:06Z", "type": "commit"}, {"oid": "59976dce54c172531ba353bda927ab3d1949a19a", "url": "https://github.com/eclipse/jetty.project/commit/59976dce54c172531ba353bda927ab3d1949a19a", "message": "Issue #5032 - Minimal Extensible Web App changes\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-09-17T10:58:06Z", "type": "forcePushed"}]}