{"pr_number": 2271, "pr_title": "Add Flight Recorder based execution listener", "pr_createdAt": "2020-04-24T02:16:53Z", "pr_url": "https://github.com/junit-team/junit5/pull/2271", "timeline": [{"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "url": "https://github.com/junit-team/junit5/commit/95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "message": "\"Fix\" build by commenting out tool run for the time being", "committedDate": "2020-04-24T02:31:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNzc0Ng==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414637746", "bodyText": "Set a @name annotation. My recommendation would be org.junit.Test", "author": "egahlin", "createdAt": "2020-04-24T14:52:12Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzODAwMg==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414638002", "bodyText": "Should be \"Unique Id\"", "author": "egahlin", "createdAt": "2020-04-24T14:52:33Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzODkxMw==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414638913", "bodyText": "Set a @Label. My recommendation would be \"Test\".", "author": "egahlin", "createdAt": "2020-04-24T14:53:43Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQxOA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414640418", "bodyText": "Should be Label, not Description", "author": "egahlin", "createdAt": "2020-04-24T14:55:42Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDgxOQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414640819", "bodyText": "A better label would be \"Contains Tests\"", "author": "egahlin", "createdAt": "2020-04-24T14:56:12Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTU0NA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414641544", "bodyText": "A better label would be \"Root Containers Ids\"", "author": "egahlin", "createdAt": "2020-04-24T14:57:05Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTgzOQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414641839", "bodyText": "A better fields name would be \"rootContainerIds\"", "author": "egahlin", "createdAt": "2020-04-24T14:57:28Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MjA0MA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414642040", "bodyText": "\"Unique Id\"", "author": "egahlin", "createdAt": "2020-04-24T14:57:42Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0Mjk4OQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414642989", "bodyText": "Why not use a volatile?", "author": "egahlin", "createdAt": "2020-04-24T14:58:55Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxMzY4Mg==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414713682", "bodyText": "I like the similarity to the map declared next to it: an atomic reference is a single-entry map", "author": "sormuras", "createdAt": "2020-04-24T16:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0Mjk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTQ2MQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414645461", "bodyText": "If this is a path, consider using \"/\" as a separator, i.e. \"id1 / id2 / id3\". Tabs may result in different number of spaces, or may not work at all, if visualized in a GUI.", "author": "egahlin", "createdAt": "2020-04-24T15:02:04Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNTU0OQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414715549", "bodyText": "The format defined by UniqueId uses / as an element separator char -- so, that's already taken. See details at:\n\n  \n    \n      junit5/junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueIdFormat.java\n    \n    \n         Line 42\n      in\n      1978513\n    \n    \n    \n    \n\n        \n          \n           private static final UniqueIdFormat defaultFormat = new UniqueIdFormat('[', ':', ']', '/'); \n        \n    \n  \n\n\nUsing tab \\t is not a good choice either. Guess, we need to define a human-visible, URI-encodeable unique-id separator char.", "author": "sormuras", "createdAt": "2020-04-24T16:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMTU1OA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414721558", "bodyText": "Using # for the time being.", "author": "sormuras", "createdAt": "2020-04-24T16:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NjQyMQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414646421", "bodyText": "No need to call end(). It is implicit in commit()", "author": "egahlin", "createdAt": "2020-04-24T15:03:18Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NjkzNg==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414646936", "bodyText": "Should be label", "author": "egahlin", "createdAt": "2020-04-24T15:04:03Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")\n+\t\tString uniqueId;\n+\t\t@Label(\"Display Name\")\n+\t\tString displayName;\n+\t}\n+\n+\t@Description(\"Dynamic Test Registration\")", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzQxMQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414647411", "bodyText": "Missing Category and Name(\"org.junit.DynamicTestRegistration\")", "author": "egahlin", "createdAt": "2020-04-24T15:04:39Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")\n+\t\tString uniqueId;\n+\t\t@Label(\"Display Name\")\n+\t\tString displayName;\n+\t}\n+\n+\t@Description(\"Dynamic Test Registration\")", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMDEwMg==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414720102", "bodyText": "Is @Category not inherited?", "author": "sormuras", "createdAt": "2020-04-24T16:51:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk4NzM1OQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414987359", "bodyText": "It is inherited.", "author": "sormuras", "createdAt": "2020-04-25T05:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzQxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0ODIzMw==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414648233", "bodyText": "Set the fields before timing starts with begin()", "author": "egahlin", "createdAt": "2020-04-24T15:05:49Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414649185", "bodyText": "Why not assign field directly, i.e. testExecutionEventMap = new ConcurrentHashMap<>()?", "author": "egahlin", "createdAt": "2020-04-24T15:06:58Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();", "originalCommit": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwOTY5Ng==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414709696", "bodyText": "I like field declarations to be separated from their assignment.\nThe constructor is a good place to do that work, which isn't much here, yet. But you never know.", "author": "sormuras", "createdAt": "2020-04-24T16:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5MDIwNw==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414990207", "bodyText": "Why assign a field directly? Performance?", "author": "sormuras", "createdAt": "2020-04-25T05:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMzc0NA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415033744", "bodyText": "Less code.", "author": "marcphilipp", "createdAt": "2020-04-25T10:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414763989", "bodyText": "\u2753 Does JFR support explicit nesting of events?", "author": "marcphilipp", "createdAt": "2020-04-24T18:03:30Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.rootContainerIds = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(\n+\t\t\tCollectors.joining(\"#\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();", "originalCommit": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NjA1OQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414776059", "bodyText": "Yes, but it is usually good to avoid from a visualization point of view.\nThis image from JMC shows what happens in the JVM (thread sleep, lock contention etc) using events from JFR. A JUnit test event would be visualized on separate lane next to the JVM event so you can see what made a test slow, i.e a call to Thread.sleep().\nNested events are painted on top of each other, so it can be hard to see. Preferably only the actual test (the leaf nodes) should be represented by the Test event. If you want to have information about test containers/groups, it would be better to separate them into their own events, or perhaps leave them out completely.\nhttps://docs.oracle.com/javase/10/troubleshoot/img/jfr-eventgraph.png", "author": "egahlin", "createdAt": "2020-04-24T18:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk4ODY2OA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414988668", "bodyText": "[...] If you want to have information about test containers/groups, it would be better to separate them into their own events, or perhaps leave them out completely.\n\nGood idea.\nCandidates to be left out:\n\nTest Plan\nDynamic Test Registration\nTest Container\n\nThey don't contribute much to a better understanding what happened in a test run. Also, the recorded \"Unique Id\" field already contains the hierarchical information of a test and its parents.", "author": "sormuras", "createdAt": "2020-04-25T05:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MTUwNQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415041505", "bodyText": "I would leave them out for now. It will reduce the noise. If there is a need later on, they can be added.", "author": "egahlin", "createdAt": "2020-04-25T11:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5MjMxNg==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416392316", "bodyText": "Reduced the scope to \"Test Plan\" and \"Test\" (w/o containers) events for the time being.", "author": "sormuras", "createdAt": "2020-04-28T07:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NDMwNQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414764305", "bodyText": "This should be declared in META-INF/services so it works on the classpath as well, shouldn't it?", "author": "marcphilipp", "createdAt": "2020-04-24T18:04:05Z", "path": "junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java", "diffHunk": "@@ -30,4 +31,7 @@\n \n \tuses org.junit.platform.engine.TestEngine;\n \tuses org.junit.platform.launcher.TestExecutionListener;\n+\n+\tprovides org.junit.platform.launcher.TestExecutionListener\n+\t\t\twith org.junit.platform.launcher.listeners.FlightRecordingListener;", "originalCommit": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk4OTUxOA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414989518", "bodyText": "Just wanted to start small: ModularUserGuideTests\nStill, I think, we should register this listener by default, i.e. programmatically. Hard-coded into the constructor of: TestExecutionListenerRegistry", "author": "sormuras", "createdAt": "2020-04-25T05:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NDMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415039895", "bodyText": "@category(\"JUnit\"", "author": "egahlin", "createdAt": "2020-04-25T11:07:33Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")", "originalCommit": "c7dc07b655eed11f532e983f6c178b1b02bb457b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MzEyNQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415043125", "bodyText": "To make it explicit? As @Category is already inherited from the super class.", "author": "sormuras", "createdAt": "2020-04-25T11:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDMzMw==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415044333", "bodyText": "Sorry. I missed that. I'm not used to GitHub, is there a way I can see the files in their latest state without comments (on the web)?", "author": "egahlin", "createdAt": "2020-04-25T11:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTEyOQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415045129", "bodyText": "Thought there was a filter for that, but couldn't find it.\nTry \"View file...\" in this drop down menu:", "author": "sormuras", "createdAt": "2020-04-25T11:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3OTE4NQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416379185", "bodyText": "Thanks!", "author": "egahlin", "createdAt": "2020-04-28T07:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTkyNQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415039925", "bodyText": "@category(\"JUnit\"", "author": "egahlin", "createdAt": "2020-04-25T11:07:49Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")", "originalCommit": "c7dc07b655eed11f532e983f6c178b1b02bb457b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MDIwNg==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415040206", "bodyText": "I don't think stack traces are useful for these events as they would only point back into the test framework. Adding the annotation @stacktrace(false) will turn them off.", "author": "egahlin", "createdAt": "2020-04-25T11:09:36Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")", "originalCommit": "c7dc07b655eed11f532e983f6c178b1b02bb457b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0Mzg5MQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415043891", "bodyText": "Good point -- really need to read https://docs.oracle.com/en/java/javase/14/jfapi/create-events.html more carefully. That entire event class might be dropped in the near future -- as it is not relevant for test result recording anyway.", "author": "sormuras", "createdAt": "2020-04-25T11:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MDIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MjMyOA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415042328", "bodyText": "How often is a report emitted, once per test? What would it typically contain? There may be other ways to structure the data, but I need more information.", "author": "egahlin", "createdAt": "2020-04-25T11:22:55Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")\n \tstatic class TestExecutionEvent extends TestEvent {\n \t\t@Label(\"Result\")\n \t\tString result;\n \t}\n+\n+\t@Category(\"JUnit\")\n+\t@Name(\"org.junit.ReportEntry\")\n+\t@Label(\"Report Entry\")\n+\tstatic class ReportEntryEvent extends Event {", "originalCommit": "c7dc07b655eed11f532e983f6c178b1b02bb457b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTQ2Mw==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415045463", "bodyText": "This is an event triggered by a user or an extension within the lifecycle of a test.\nHere's an example:\n\n  \n    \n      junit5/documentation/src/test/java/example/TestReporterDemo.java\n    \n    \n        Lines 25 to 42\n      in\n      1978513\n    \n    \n    \n    \n\n        \n          \n           @Test \n        \n\n        \n          \n           void reportSingleValue(TestReporter testReporter) { \n        \n\n        \n          \n           \ttestReporter.publishEntry(\"a status message\"); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           @Test \n        \n\n        \n          \n           void reportKeyValuePair(TestReporter testReporter) { \n        \n\n        \n          \n           \ttestReporter.publishEntry(\"a key\", \"a value\"); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           @Test \n        \n\n        \n          \n           void reportMultipleKeyValuePairs(TestReporter testReporter) { \n        \n\n        \n          \n           \tMap<String, String> values = new HashMap<>(); \n        \n\n        \n          \n           \tvalues.put(\"user name\", \"dk38\"); \n        \n\n        \n          \n           \tvalues.put(\"award year\", \"1974\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n           \ttestReporter.publishEntry(values); \n        \n\n        \n          \n           }", "author": "sormuras", "createdAt": "2020-04-25T11:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MjMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTYxNQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415045615", "bodyText": "Here's the API documentation for TestReporter: https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/TestReporter.html", "author": "sormuras", "createdAt": "2020-04-25T11:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MjMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2OTA2NQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416369065", "bodyText": "A better fields name may be: exceptionMessage\nYou may want to complement with the class:\nexceptionClass = result.getThrowable();", "author": "egahlin", "createdAt": "2020-04-28T06:47:33Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();\n \t\tevent.result = result.getStatus().toString();\n+\t\tevent.throwable = result.getThrowable().map(Throwable::getMessage).orElse(null); // TODO Include stacktrace?", "originalCommit": "321d5e2913ee041525f84dea57144cc22e4323c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5Nzg5Ng==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416397896", "bodyText": "Check. Will rename the existing field and extend the event class with field exceptionClass.", "author": "sormuras", "createdAt": "2020-04-28T07:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2OTA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416374518", "bodyText": "Ideally data in JFR should be normalized, similar to a relational database:\nabstract class TestEvent {\n@Testid\nlong testId\n}\nand then\nclass ReportEntryEvent {\n@Testid\nlong testId;\nString key;\nString value;\n}\nTo mark there is a relation between the event and the report:\n@MetadataDefinition\n@Label(\"Test Id\")\n@relational\n@retention(RetentionPolicy.RUNTIME)\n@target({ ElementType.FIELD })\npublic @interface @Testid {\n}\ntestId could be a counter, i.e 1, 2, 3 ..", "author": "egahlin", "createdAt": "2020-04-28T06:58:07Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();", "originalCommit": "321d5e2913ee041525f84dea57144cc22e4323c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5NzA0MQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416397041", "bodyText": "Understood.\n\nIs type String also a good choice for an ID? That's the one the JUnit Platform already provides.\nDo tools like JMC display those relations?\n\nI'll keep this normalization advice for later, as report entries are always strongly coupled to a test execution frame/event. And 99% or more of todays' tests don't publish any report entries anyway. Thus, the field is almost always null.", "author": "sormuras", "createdAt": "2020-04-28T07:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ2ODY2Nw==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416468667", "bodyText": "String works as long it is unique (for a recording).", "author": "egahlin", "createdAt": "2020-04-28T09:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MjA5NA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416472094", "bodyText": "JMC will display all fields and is aware of relations. They can be used when creating custom tables, i.e group by testId.", "author": "egahlin", "createdAt": "2020-04-28T09:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk2NTQzOA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r417965438", "bodyText": "For long-running tests (like scenario/UI tests) it is better to have distinct report event fired while the test is still running.\nThus, I'll implement the suggested normalization.", "author": "sormuras", "createdAt": "2020-04-30T12:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MTQxNg==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r418041416", "bodyText": "Set a name for the annotation, i.e @name(\"org.junit.UniqueId\")", "author": "egahlin", "createdAt": "2020-04-30T14:13:17Z", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.MetadataDefinition;\n+import jdk.jfr.Name;\n+import jdk.jfr.Relational;\n+import jdk.jfr.StackTrace;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent = new AtomicReference<>();\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap = new ConcurrentHashMap<>();\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.engineNames = plan.getRoots().stream().map(TestIdentifier::getDisplayName).collect(\n+\t\t\tCollectors.joining(\", \"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.initialize(test);\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t\tevent.initialize(test);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tOptional<Throwable> throwable = result.getThrowable();\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.exceptionClass = throwable.map(Throwable::getClass).orElse(null);\n+\t\tevent.exceptionMessage = throwable.map(Throwable::getMessage).orElse(null);\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier test, ReportEntry reportEntry) {\n+\t\tfor (Map.Entry<String, String> entry : reportEntry.getKeyValuePairs().entrySet()) {\n+\t\t\tReportEntryEvent event = new ReportEntryEvent();\n+\t\t\tevent.uniqueId = test.getUniqueId();\n+\t\t\tevent.key = entry.getKey();\n+\t\t\tevent.value = entry.getValue();\n+\t\t\tevent.commit();\n+\t\t}\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Label(\"Test Plan\")\n+\t@Name(\"org.junit.TestPlan\")\n+\t@StackTrace(false)\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Contains Tests\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"Engine Names\")\n+\t\tString engineNames;\n+\t}\n+\n+\t@MetadataDefinition\n+\t@Relational", "originalCommit": "d5d6267b409fe28f81f6b9af33b4c2ebad7b5044", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyNjU5MQ==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r422826591", "bodyText": "Sure.\nRemoved the name annotation from the metadata definition because it isn't inherited:\n@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@MetadataDefinition\npublic @interface Name { ...", "author": "sormuras", "createdAt": "2020-05-11T07:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MTQxNg=="}], "type": "inlineReview"}, {"oid": "9c74ef0b286b799ca74e5b29b040a78174cad9b2", "url": "https://github.com/junit-team/junit5/commit/9c74ef0b286b799ca74e5b29b040a78174cad9b2", "message": "Always register JFR-based event-firing listener\n\nCould be guarded by a launcher configuration flag to opt-out via:\n`LauncherConfig.builder().enableJavaFlightRecordingListener(false);`", "committedDate": "2020-05-11T07:37:29Z", "type": "forcePushed"}, {"oid": "89cb158ca642be5a8451a1426a536a9de760031e", "url": "https://github.com/junit-team/junit5/commit/89cb158ca642be5a8451a1426a536a9de760031e", "message": "Rely on module org.junit.platform.launcher's API\n\nRevert super-powered command-line options.", "committedDate": "2020-06-02T15:10:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNzA3Nw==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434607077", "bodyText": "Convert this into a real integration test.", "author": "sormuras", "createdAt": "2020-06-03T14:23:36Z", "path": "platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java", "diffHunk": "@@ -108,6 +108,8 @@\n \t\tvar projectDir = Path.of(\"../documentation\");\n \t\tcommand.add(Path.of(System.getProperty(\"java.home\"), \"bin\", \"java\").toString());\n \n+\t\tcommand.add(\"-XX:StartFlightRecording:filename=\" + temp.resolve(\"user-guide.jfr\"));\n+", "originalCommit": "9ac3472c3dc67666703300f7899c807558b4f85e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTg2OA==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434811868", "bodyText": "I don't see commons in the dependencies in the buildscript nor used in the source code. Can that be removed from here?", "author": "marcphilipp", "createdAt": "2020-06-03T19:43:29Z", "path": "junit-platform-jfr/src/module/org.junit.platform.jfr/module-info.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+/**\n+ * Defines the JUnit Platform JAR API.\n+ *\n+ * @since 1.7\n+ */\n+module org.junit.platform.jfr {\n+\trequires jdk.jfr;\n+\trequires transitive org.apiguardian.api;\n+\trequires org.junit.platform.commons;", "originalCommit": "a7e9c1e8cd9d9c91b27da97aabfce31d6bc4e18c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1NzgwMg==", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434957802", "bodyText": "Think so, yes.\nAlso the transitive modifiers are not needed here -- as no package is exported.", "author": "sormuras", "createdAt": "2020-06-04T02:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTg2OA=="}], "type": "inlineReview"}, {"oid": "2a35753fe4bc7826bdfc1d594f8b2c0b96e61848", "url": "https://github.com/junit-team/junit5/commit/2a35753fe4bc7826bdfc1d594f8b2c0b96e61848", "message": "Update junit-platform-jfr/junit-platform-jfr.gradle.kts\n\nCo-authored-by: Marc Philipp <mail@marcphilipp.de>", "committedDate": "2020-06-18T06:46:35Z", "type": "forcePushed"}, {"oid": "8e404138e21b461e3c4aafb6ee361d940f28219d", "url": "https://github.com/junit-team/junit5/commit/8e404138e21b461e3c4aafb6ee361d940f28219d", "message": "Apply small change as suggested by @rotty3000\n\nhttps://github.com/junit-team/junit5/pull/2271#discussion_r442243291", "committedDate": "2020-07-05T04:13:50Z", "type": "forcePushed"}, {"oid": "c9ff0df7cf1cc6111bc8fcd76f321d804c14f23e", "url": "https://github.com/junit-team/junit5/commit/c9ff0df7cf1cc6111bc8fcd76f321d804c14f23e", "message": "Spike Flight Recorder based execution listener\n\nhttps://openjdk.java.net/jeps/328", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "3eb11d75d40716588564182262fcb6826dbbbfdf", "url": "https://github.com/junit-team/junit5/commit/3eb11d75d40716588564182262fcb6826dbbbfdf", "message": "\"Fix\" build by commenting out tool run for the time being", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "0afbad6185248035ff1d58d92784083b40a46dae", "url": "https://github.com/junit-team/junit5/commit/0afbad6185248035ff1d58d92784083b40a46dae", "message": "Apply changes suggested by @egahlin's first pass", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "20e6d164eb874cd40cd9ffd7cb7251df0ab75c96", "url": "https://github.com/junit-team/junit5/commit/20e6d164eb874cd40cd9ffd7cb7251df0ab75c96", "message": "Fix compileMainRelease9Java", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "f94222262c1d0441c71e2c7737ec4ead956665d2", "url": "https://github.com/junit-team/junit5/commit/f94222262c1d0441c71e2c7737ec4ead956665d2", "message": "Fix Checkstyle", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "9b3807dcb67197300c1b9a11a30515bbcdb9374f", "url": "https://github.com/junit-team/junit5/commit/9b3807dcb67197300c1b9a11a30515bbcdb9374f", "message": "Fix compileModule", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "8ff15e378c3a991345aa14be1e2d72f0b202917c", "url": "https://github.com/junit-team/junit5/commit/8ff15e378c3a991345aa14be1e2d72f0b202917c", "message": "Replace duplicated package-info with new suppression rule", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "843d6a6385e36e5cd8b689716c492a2f60a47fd2", "url": "https://github.com/junit-team/junit5/commit/843d6a6385e36e5cd8b689716c492a2f60a47fd2", "message": "Update expected module description", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "bd2e781c7aea5531f64fb3fe1a43ab357c86db6e", "url": "https://github.com/junit-team/junit5/commit/bd2e781c7aea5531f64fb3fe1a43ab357c86db6e", "message": "Synchronize API of base type and versioned type", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "0b0b01251c6da2d1f14cf3a6875b690137990306", "url": "https://github.com/junit-team/junit5/commit/0b0b01251c6da2d1f14cf3a6875b690137990306", "message": "Inject versioned classes into JAR file", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "8f78f595ab280877899e3750b66544cc67a924bf", "url": "https://github.com/junit-team/junit5/commit/8f78f595ab280877899e3750b66544cc67a924bf", "message": "Weave module jdk.jfr into the module graph at launch time...", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "efb988ab6ea834a4dc095595d5553e436f14e9ae", "url": "https://github.com/junit-team/junit5/commit/efb988ab6ea834a4dc095595d5553e436f14e9ae", "message": "Include report entry events and improve labels", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "e2a8b01e83c3763abe17c44e61949389805b6abb", "url": "https://github.com/junit-team/junit5/commit/e2a8b01e83c3763abe17c44e61949389805b6abb", "message": "Remove dynamic test registered override", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "af9584a3f983477eed3af93ab0df8f4336c446fe", "url": "https://github.com/junit-team/junit5/commit/af9584a3f983477eed3af93ab0df8f4336c446fe", "message": "Improve event declaration and handling\n\n- omit stack traces\n- merge dedicated report entry event into test event\n- include most interesting test identifier properties\n- leave out successful test container executions", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "a84048e487b4dcb99f5f9ba7e815eb553a8f0c19", "url": "https://github.com/junit-team/junit5/commit/a84048e487b4dcb99f5f9ba7e815eb553a8f0c19", "message": "Apply more suggested changes\n\n- remove constructor, init fields directly\n- split throwable field into exceptionClass and exceptionMessage\n- fire dedicated event for each published report entry\n- normalize event relations via test's unique id", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "3cf61a993ac865ce0e768683e9a9b0e6c70fc282", "url": "https://github.com/junit-team/junit5/commit/3cf61a993ac865ce0e768683e9a9b0e6c70fc282", "message": "Add missing space in report entry event label", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "9102c6854f786027379bdb32ed9d5e421f54d367", "url": "https://github.com/junit-team/junit5/commit/9102c6854f786027379bdb32ed9d5e421f54d367", "message": "Attach label to UniqueId's metadata definition", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "535f9e19e515470f4a34adad88c004a26b0f6622", "url": "https://github.com/junit-team/junit5/commit/535f9e19e515470f4a34adad88c004a26b0f6622", "message": "Always register JFR-based event-firing listener\n\nCould be guarded by a launcher configuration flag to opt-out via:\n`LauncherConfig.builder().enableJavaFlightRecordingListener(false);`", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "050dc4762fa3cb3244ae22d2e50e9243261e0646", "url": "https://github.com/junit-team/junit5/commit/050dc4762fa3cb3244ae22d2e50e9243261e0646", "message": "Let module org.junit.platform.launcher read module jdk.jfr", "committedDate": "2020-07-10T10:06:37Z", "type": "commit"}, {"oid": "5bca93934c9592d4cc07b9e58b772e7db6823bd7", "url": "https://github.com/junit-team/junit5/commit/5bca93934c9592d4cc07b9e58b772e7db6823bd7", "message": "Convince Gradle that module jdk.jfr is available since Java 9\n\nhttps://docs.oracle.com/javase/9/docs/api/jdk.jfr-summary.html", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "b960812231c3262767170bd17a0b9c9e2bbe3a29", "url": "https://github.com/junit-team/junit5/commit/b960812231c3262767170bd17a0b9c9e2bbe3a29", "message": "Rely on module org.junit.platform.launcher's API\n\nRevert super-powered command-line options.", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "c8f17bdfc95590fff810515258f130875edca727", "url": "https://github.com/junit-team/junit5/commit/c8f17bdfc95590fff810515258f130875edca727", "message": "Move JFR-related code into a dedicated module", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "fda351dd691993c995b093fe6d33393b0c5d914d", "url": "https://github.com/junit-team/junit5/commit/fda351dd691993c995b093fe6d33393b0c5d914d", "message": "Cleanup", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "4fe311e4f7e1909c7bd5ded5cceab8825cfc8f58", "url": "https://github.com/junit-team/junit5/commit/4fe311e4f7e1909c7bd5ded5cceab8825cfc8f58", "message": "Pass classpath to scan to ApiReportGenerator via system property\n\nThis way documentation can use Java 8 again for its test source set.", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "600f4836c59c7249e81a13a8cdacd51408b5b39e", "url": "https://github.com/junit-team/junit5/commit/600f4836c59c7249e81a13a8cdacd51408b5b39e", "message": "Fine-tune module descriptor", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "6d8180974de37822a079680932a6eb2dc45d54a2", "url": "https://github.com/junit-team/junit5/commit/6d8180974de37822a079680932a6eb2dc45d54a2", "message": "Update junit-platform-jfr/junit-platform-jfr.gradle.kts\n\nCo-authored-by: Marc Philipp <mail@marcphilipp.de>", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "c9d415bcf2b91a624b5255f71b7498cfd2405dcb", "url": "https://github.com/junit-team/junit5/commit/c9d415bcf2b91a624b5255f71b7498cfd2405dcb", "message": "Include JFR-related module in Dependency Metadata listing", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "c4018619b34c4ce0694c293e85733606d89961ee", "url": "https://github.com/junit-team/junit5/commit/c4018619b34c4ce0694c293e85733606d89961ee", "message": "Apply small change as suggested by @rotty3000\n\nhttps://github.com/junit-team/junit5/pull/2271#discussion_r442243291", "committedDate": "2020-07-10T10:06:38Z", "type": "commit"}, {"oid": "c4018619b34c4ce0694c293e85733606d89961ee", "url": "https://github.com/junit-team/junit5/commit/c4018619b34c4ce0694c293e85733606d89961ee", "message": "Apply small change as suggested by @rotty3000\n\nhttps://github.com/junit-team/junit5/pull/2271#discussion_r442243291", "committedDate": "2020-07-10T10:06:38Z", "type": "forcePushed"}, {"oid": "666d3ead3b3151bd60d7ef335292786ac99c994f", "url": "https://github.com/junit-team/junit5/commit/666d3ead3b3151bd60d7ef335292786ac99c994f", "message": "Add module `org.junit.platform.jfr` to the release notes", "committedDate": "2020-07-10T10:35:27Z", "type": "commit"}, {"oid": "23d29eb8e132d3e88ace8724eaac086ad122ed48", "url": "https://github.com/junit-team/junit5/commit/23d29eb8e132d3e88ace8724eaac086ad122ed48", "message": "Add section \"Flight Recorder Support\" to the User Guide", "committedDate": "2020-07-10T13:02:35Z", "type": "commit"}]}