{"pr_number": 2276, "pr_title": "Support custom reason in @Disabled* / @Enabled* variants", "pr_createdAt": "2020-04-26T18:45:52Z", "pr_url": "https://github.com/junit-team/junit5/pull/2276", "timeline": [{"oid": "bd41c60b06ea88c60531b0b8a0a94d1e5f8253e8", "url": "https://github.com/junit-team/junit5/commit/bd41c60b06ea88c60531b0b8a0a94d1e5f8253e8", "message": "Fix build", "committedDate": "2020-04-26T19:08:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4ODA0OQ==", "url": "https://github.com/junit-team/junit5/pull/2276#discussion_r415388049", "bodyText": "I just saw this, and i thought i drop my few cents here on the .isPresent()-.get()-combination - as i do think there are nicer and more Optional-API-ish way. :)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tOptional<A> optional = findAnnotation(context.getElement(), annotationType);\n          \n          \n            \n            \t\tif (optional.isPresent()) {\n          \n          \n            \n            \t\t\tA annotation = optional.get();\n          \n          \n            \n            \t\t\tString customReason = customDisabledReason.apply(annotation);\n          \n          \n            \n            \t\t\treturn isEnabled(annotation) ? enabled(enabledReason) : disabled(disabledReason, customReason);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\treturn enabledByDefault();\n          \n          \n            \n            \t\treturn findAnnotation(context.getElement(), annotationType)\n          \n          \n            \n            \t\t    .map(annotation -> {\n          \n          \n            \n            \t\t\tString customReason = customDisabledReason.apply(annotation);\n          \n          \n            \n            \t\t\treturn isEnabled(annotation) ? enabled(enabledReason) : disabled(disabledReason, customReason);\n          \n          \n            \n            \t\t     })\n          \n          \n            \n            \t\t     .orElseGet(this::enabledByDefault);\n          \n          \n            \n            \t}", "author": "aepfli", "createdAt": "2020-04-26T19:58:11Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/BooleanExecutionCondition.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\n+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotation;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+abstract class BooleanExecutionCondition<A extends Annotation> implements ExecutionCondition {\n+\n+\tprivate final Class<A> annotationType;\n+\tprivate final String enabledReason;\n+\tprivate final String disabledReason;\n+\tprivate final Function<A, String> customDisabledReason;\n+\n+\tBooleanExecutionCondition(Class<A> annotationType, String enabledReason, String disabledReason,\n+\t\t\tFunction<A, String> customDisabledReason) {\n+\t\tthis.annotationType = annotationType;\n+\t\tthis.enabledReason = enabledReason;\n+\t\tthis.disabledReason = disabledReason;\n+\t\tthis.customDisabledReason = customDisabledReason;\n+\t}\n+\n+\tabstract boolean isEnabled(A annotation);\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\tOptional<A> optional = findAnnotation(context.getElement(), annotationType);\n+\t\tif (optional.isPresent()) {\n+\t\t\tA annotation = optional.get();\n+\t\t\tString customReason = customDisabledReason.apply(annotation);\n+\t\t\treturn isEnabled(annotation) ? enabled(enabledReason) : disabled(disabledReason, customReason);\n+\t\t}\n+\t\treturn enabledByDefault();", "originalCommit": "bd41c60b06ea88c60531b0b8a0a94d1e5f8253e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyMjM2MA==", "url": "https://github.com/junit-team/junit5/pull/2276#discussion_r415922360", "bodyText": "You're right, it does look nicer \ud83d\udc4d", "author": "juliette-derancourt", "createdAt": "2020-04-27T15:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4ODA0OQ=="}], "type": "inlineReview"}, {"oid": "94298f4e873e08dddfad0088404b38ccae8231bc", "url": "https://github.com/junit-team/junit5/commit/94298f4e873e08dddfad0088404b38ccae8231bc", "message": "Simple solution", "committedDate": "2020-04-27T15:54:08Z", "type": "commit"}, {"oid": "9d0ff0e3dc4611d2f01c79c13288af47c9e3c356", "url": "https://github.com/junit-team/junit5/commit/9d0ff0e3dc4611d2f01c79c13288af47c9e3c356", "message": "Extract similar logic in an abstract ExecutionCondition", "committedDate": "2020-04-27T15:54:08Z", "type": "commit"}, {"oid": "2992083c5dec2be6f7bc577ba2724bb3d2bcd6f2", "url": "https://github.com/junit-team/junit5/commit/2992083c5dec2be6f7bc577ba2724bb3d2bcd6f2", "message": "Use constructor to pass reasons", "committedDate": "2020-04-27T15:54:08Z", "type": "commit"}, {"oid": "954a16a9573dd7a08eead1f8623fe6358c167199", "url": "https://github.com/junit-team/junit5/commit/954a16a9573dd7a08eead1f8623fe6358c167199", "message": "Add disabledReason tests for EnabledOnOs/DisabledOnOs", "committedDate": "2020-04-27T15:54:08Z", "type": "commit"}, {"oid": "a33d2c12bc676d3b0e49f3c73528242ea4d5b795", "url": "https://github.com/junit-team/junit5/commit/a33d2c12bc676d3b0e49f3c73528242ea4d5b795", "message": "Apply changes to JRE based conditions", "committedDate": "2020-04-27T15:54:08Z", "type": "commit"}, {"oid": "edd1a4b0b2d94074dd43af5e8ffdbc719b1a47c8", "url": "https://github.com/junit-team/junit5/commit/edd1a4b0b2d94074dd43af5e8ffdbc719b1a47c8", "message": "Add tests for JRE based conditions", "committedDate": "2020-04-27T15:54:08Z", "type": "commit"}, {"oid": "8417e6a4919e9e5537f84434e4f5defa994ced1a", "url": "https://github.com/junit-team/junit5/commit/8417e6a4919e9e5537f84434e4f5defa994ced1a", "message": "Add custom reason for repeatable conditions", "committedDate": "2020-04-27T15:54:09Z", "type": "commit"}, {"oid": "82f86cf8d5334f40445f784216fbecfba28d8445", "url": "https://github.com/junit-team/junit5/commit/82f86cf8d5334f40445f784216fbecfba28d8445", "message": "Add custom reason for method based conditions", "committedDate": "2020-04-27T15:54:09Z", "type": "commit"}, {"oid": "31f608644c55d400e04837aa62def4f7149d7ce8", "url": "https://github.com/junit-team/junit5/commit/31f608644c55d400e04837aa62def4f7149d7ce8", "message": "Refactor MethodBasedCondition", "committedDate": "2020-04-27T15:54:09Z", "type": "commit"}, {"oid": "7f6bd5e2d9c0dd1f2ac649ae1ce508fa51c0373a", "url": "https://github.com/junit-team/junit5/commit/7f6bd5e2d9c0dd1f2ac649ae1ce508fa51c0373a", "message": "Fix build", "committedDate": "2020-04-27T15:54:09Z", "type": "commit"}, {"oid": "38f74c4746c9464299855d646ec5be2f22a48482", "url": "https://github.com/junit-team/junit5/commit/38f74c4746c9464299855d646ec5be2f22a48482", "message": "Take advantage of the `Optional` API", "committedDate": "2020-04-27T15:54:09Z", "type": "commit"}, {"oid": "4b12fb197f8458ce019b391e83da54bab1bc5039", "url": "https://github.com/junit-team/junit5/commit/4b12fb197f8458ce019b391e83da54bab1bc5039", "message": "Update release notes", "committedDate": "2020-04-27T16:07:29Z", "type": "commit"}, {"oid": "4b12fb197f8458ce019b391e83da54bab1bc5039", "url": "https://github.com/junit-team/junit5/commit/4b12fb197f8458ce019b391e83da54bab1bc5039", "message": "Update release notes", "committedDate": "2020-04-27T16:07:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2NDM1NA==", "url": "https://github.com/junit-team/junit5/pull/2276#discussion_r418464354", "bodyText": "\u2b55 Should we use StringUtils.isBlank() here?", "author": "marcphilipp", "createdAt": "2020-05-01T08:42:06Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/ConditionEvaluationResult.java", "diffHunk": "@@ -45,6 +45,21 @@ public static ConditionEvaluationResult disabled(String reason) {\n \t\treturn new ConditionEvaluationResult(false, reason);\n \t}\n \n+\t/**\n+\t * Factory for creating <em>disabled</em> results with custom reasons\n+\t * added by the user.\n+\t *\n+\t * @param reason the default reason why the container or test should be disabled\n+\t * @param customReason the custom reason why the container or test should be disabled\n+\t * @return a disabled {@code ConditionEvaluationResult} with the given reasons\n+\t */\n+\tpublic static ConditionEvaluationResult disabled(String reason, String customReason) {\n+\t\tif (customReason.isEmpty()) {", "originalCommit": "4b12fb197f8458ce019b391e83da54bab1bc5039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5ODM3Mg==", "url": "https://github.com/junit-team/junit5/pull/2276#discussion_r418698372", "bodyText": "Good idea \ud83d\udc4d", "author": "juliette-derancourt", "createdAt": "2020-05-01T19:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2NDM1NA=="}], "type": "inlineReview"}, {"oid": "374aeecd21aa782f1bccc2437b63d3e7ca49ed36", "url": "https://github.com/junit-team/junit5/commit/374aeecd21aa782f1bccc2437b63d3e7ca49ed36", "message": "Improvements", "committedDate": "2020-05-02T15:53:56Z", "type": "commit"}, {"oid": "06a2f555c3039c0fbab8791e511071871766e267", "url": "https://github.com/junit-team/junit5/commit/06a2f555c3039c0fbab8791e511071871766e267", "message": "Update user guide", "committedDate": "2020-05-04T16:10:06Z", "type": "commit"}, {"oid": "ae64c0d79d88c9f582471b88ea23667a33cf328d", "url": "https://github.com/junit-team/junit5/commit/ae64c0d79d88c9f582471b88ea23667a33cf328d", "message": "Update user guide\n\nCo-authored-by: Marc Philipp <mail@marcphilipp.de>", "committedDate": "2020-05-05T14:30:21Z", "type": "commit"}]}