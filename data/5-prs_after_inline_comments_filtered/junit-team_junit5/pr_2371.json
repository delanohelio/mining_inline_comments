{"pr_number": 2371, "pr_title": "Truncate arguments in display name if they exceed max length", "pr_createdAt": "2020-08-02T16:22:48Z", "pr_url": "https://github.com/junit-team/junit5/pull/2371", "timeline": [{"oid": "3fff84558991bcdad5e6f9788286fb75ce624629", "url": "https://github.com/junit-team/junit5/commit/3fff84558991bcdad5e6f9788286fb75ce624629", "message": "Add convenience method for reading transformed config params", "committedDate": "2020-08-02T16:14:12Z", "type": "commit"}, {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc", "url": "https://github.com/junit-team/junit5/commit/60f1a15049fdd78123ba4f85475a2cf3510113bc", "message": "Truncate arguments in display name if they exceed max length\n\nResolves #2358.", "committedDate": "2020-08-02T16:14:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464107711", "bodyText": "So do we consider that \u2026 counts as a character? Personally, with a max length of two I'd naturally expect fo\u2026. But I may be the only one \ud83e\udd37\u200d\u2640\ufe0f", "author": "juliette-derancourt", "createdAt": "2020-08-02T18:20:56Z", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "diffHunk": "@@ -219,6 +220,17 @@ void executesLifecycleMethods() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tvoid truncatesArgumentsThatExceedMaxLength() {\n+\t\tvar results = EngineTestKit.engine(new JupiterTestEngine()) //\n+\t\t\t\t.configurationParameter(ParameterizedTestExtension.ARGUMENT_MAX_LENGTH_KEY, \"2\") //\n+\t\t\t\t.selectors(selectMethod(TestCase.class, \"testWithCsvSource\", String.class.getName())) //\n+\t\t\t\t.execute();\n+\t\tresults.testEvents().assertThatEvents() //\n+\t\t\t\t.haveExactly(1, event(displayName(\"[1] argument=f\u2026\"), started())) //", "originalCommit": "60f1a15049fdd78123ba4f85475a2cf3510113bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwOTM0OQ==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464109349", "bodyText": "TBH I was myself torn on this question. @junit-team/junit-lambda Thoughts?", "author": "marcphilipp", "createdAt": "2020-08-02T18:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNTEzOQ==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464205139", "bodyText": "If I specify a max char count, I expect to get back a string of the given max length. For max = 5 and ... it'd yield:\n   \"123\" = \"123\"\n  \"1234\" = \"1234\"\n \"12345\" = \"12345\"\n\"123456\" = \"12...\" // with 3x char `.`\n\"123456\" = \"1234\u2026\" // with 1x char `\u2026`", "author": "sormuras", "createdAt": "2020-08-03T05:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNTQ3MA==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464205470", "bodyText": "I'm using the Unicode ellipsis character \u2026 which is just one character so it would be 1234\u2026 for 123456 in your example.", "author": "marcphilipp", "createdAt": "2020-08-03T05:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMTEyNQ==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464211125", "bodyText": "Ah, I see. Nice trick to retain two more characters from the source string. I'll update the example above accordingly. I bet, the standard Windows shell displays a ? instead of \u2026 though...\nGist: a given max char count should not be exceeded. It's max. Not max+n. ;-)", "author": "sormuras", "createdAt": "2020-08-03T06:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxNzc5Nw==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464317797", "bodyText": "Gist: a given max char count should not be exceeded. It's max. Not max+n.\n\nI agree with that.", "author": "sbrannen", "createdAt": "2020-08-03T10:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNTcwOA==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464335708", "bodyText": "So be it \ud83d\ude04\nBut we should make that clear in the documentation then.", "author": "juliette-derancourt", "createdAt": "2020-08-03T10:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxOTk5OA==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464319998", "bodyText": "Maybe add a comment that the unicode character is an ellipsis.", "author": "sbrannen", "createdAt": "2020-08-03T10:09:00Z", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java", "diffHunk": "@@ -91,10 +94,17 @@ private String argumentsPattern(Object[] arguments) {\n \t\tObject[] result = Arrays.copyOf(arguments, Math.min(arguments.length, formats.length), Object[].class);\n \t\tfor (int i = 0; i < result.length; i++) {\n \t\t\tif (formats[i] == null) {\n-\t\t\t\tresult[i] = StringUtils.nullSafeToString(arguments[i]);\n+\t\t\t\tresult[i] = truncateIfExceedsMaxLength(StringUtils.nullSafeToString(arguments[i]));\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n \n+\tprivate String truncateIfExceedsMaxLength(String argument) {\n+\t\tif (argument.length() > argumentMaxLength) {\n+\t\t\treturn argument.substring(0, argumentMaxLength - 1) + \"\\u2026\";", "originalCommit": "60f1a15049fdd78123ba4f85475a2cf3510113bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQyMTcwMw==", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464421703", "bodyText": "Done in 4f4707e.", "author": "marcphilipp", "createdAt": "2020-08-03T13:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxOTk5OA=="}], "type": "inlineReview"}, {"oid": "585ba080f671c5c22c23076bb33a3db1e2526faa", "url": "https://github.com/junit-team/junit5/commit/585ba080f671c5c22c23076bb33a3db1e2526faa", "message": "Polish documentation\n\nCo-authored-by: Sam Brannen <sbrannen@pivotal.io>", "committedDate": "2020-08-03T13:40:13Z", "type": "commit"}, {"oid": "4f4707e082ae70e3f34925f0d1f37039b5d70691", "url": "https://github.com/junit-team/junit5/commit/4f4707e082ae70e3f34925f0d1f37039b5d70691", "message": "Extract constant to increase readability", "committedDate": "2020-08-03T13:43:10Z", "type": "commit"}]}