{"pr_number": 1401, "pr_title": "Added OptionalOrElseGetConstant error prone check.", "pr_createdAt": "2020-06-11T07:42:57Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1401", "timeline": [{"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb", "url": "https://github.com/palantir/gradle-baseline/commit/bf1712581e70164f22f650aaa6fdb41a15c3d5fb", "message": "Added OptionalOrElseGetConstant error prone check.", "committedDate": "2020-06-11T07:41:24Z", "type": "commit"}, {"oid": "6cb06f5768f4f12f70c1ab97dfc676c9d20e0593", "url": "https://github.com/palantir/gradle-baseline/commit/6cb06f5768f4f12f70c1ab97dfc676c9d20e0593", "message": "Excavator: Upgrade buildscript dependencies (#1402)\n\nCo-authored-by: svc-excavator-bot <svc-excavator-bot@palantir.com>", "committedDate": "2020-06-11T13:12:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438969685", "bodyText": "I think we should expand this check to include any variable", "author": "ferozco", "createdAt": "2020-06-11T17:54:51Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,\n+        summary = \"If lambda passed to Optional#orElseGet returns a compile time constant, use Optional#orElse instead\")", "originalCommit": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjA1Mg==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438972052", "bodyText": "+1 no need for it to be constant, field loads are less expensive than lambda allocations.\nWe would want to accept foo, this.foo, foo.bar but not foo().bar, foo[index], foo[index].bar.", "author": "carterkozak", "createdAt": "2020-06-11T17:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzI4Nw==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438973287", "bodyText": "Was a bit worried about race conditions in case it's a member variable. Thinking of it now again though, I'm realizing that it's probably not an issue. I'll look into it.", "author": "aioobe", "createdAt": "2020-06-11T18:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4NTU2Ng==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438985566", "bodyText": "Out of curiosity, why not foo[index] and foo[index].bar?", "author": "aioobe", "createdAt": "2020-06-11T18:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NTc5OQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438995799", "bodyText": "I'm not entirely sure they'll always be better, but they probably are. Even if there's llc miss it's probably better than the lambda.\nI tend to prefer flagging and fixing the most unambiguous cases, but I don't have a strong opinion here.", "author": "carterkozak", "createdAt": "2020-06-11T18:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNzgxMg==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439517812", "bodyText": "Check now covers foo, this.foo, foo.bar but not array accesses or anything that could have side-effects.", "author": "aioobe", "createdAt": "2020-06-12T16:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}], "type": "inlineReview"}, {"oid": "f8fa3d1c5f0e0bf17efc88987f452d1acdb87051", "url": "https://github.com/palantir/gradle-baseline/commit/f8fa3d1c5f0e0bf17efc88987f452d1acdb87051", "message": "Excavator: Upgrade buildscript dependencies (#1403)\n\nCo-authored-by: svc-excavator-bot <svc-excavator-bot@palantir.com>", "committedDate": "2020-06-11T19:06:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODU1OQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439038559", "bodyText": "If the suggested changes make sense, perhaps we should rename this to OptionalOrElseGetValue", "author": "carterkozak", "createdAt": "2020-06-11T20:07:15Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",", "originalCommit": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzOTc4NA==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439039784", "bodyText": "This check should be documented with the others in the readme", "author": "carterkozak", "createdAt": "2020-06-11T20:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMDA1Mw==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439520053", "bodyText": "Added a line in the readme.", "author": "aioobe", "createdAt": "2020-06-12T16:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODkxNw==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439038917", "bodyText": "Should probably be WARN rather than ERROR.", "author": "carterkozak", "createdAt": "2020-06-11T20:07:40Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,", "originalCommit": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxOTk0Mg==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439519942", "bodyText": "Changed.", "author": "aioobe", "createdAt": "2020-06-12T16:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MDM2OQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439040369", "bodyText": "After we test the suggested fixes on a large internal project (per-merge) we should add this check to the list that baseline automatically fixes by referencing the name from the list in BaselineErrorProneExtension.java", "author": "carterkozak", "createdAt": "2020-06-11T20:09:40Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,", "originalCommit": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMDM0Mg==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439520342", "bodyText": "Sounds good. \ud83d\udc4d", "author": "aioobe", "createdAt": "2020-06-12T16:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MDM2OQ=="}], "type": "inlineReview"}, {"oid": "09ca77ab9f5abb069212837c5b718c370bbb1356", "url": "https://github.com/palantir/gradle-baseline/commit/09ca77ab9f5abb069212837c5b718c370bbb1356", "message": "--write-locks no longer implicitly runs checkClassUniqueness task (#1389)\n\nRunning `./gradlew --write-locks` should be faster now, as it doesn't update your `baseline-class-uniqueness.lock` file implicitly anymore. To update this, you need to run `./gradlew checkClassUniqueness --write-locks`.", "committedDate": "2020-06-11T20:16:56Z", "type": "commit"}, {"oid": "b99ee1dc983acf0b22195994abf0b405dc7292bd", "url": "https://github.com/palantir/gradle-baseline/commit/b99ee1dc983acf0b22195994abf0b405dc7292bd", "message": "Autorelease 3.24.0", "committedDate": "2020-06-11T20:17:00Z", "type": "commit"}, {"oid": "66041065f688e8e13902a8c994099029806f3a88", "url": "https://github.com/palantir/gradle-baseline/commit/66041065f688e8e13902a8c994099029806f3a88", "message": "Excavator: Upgrade dependencies (#1399)\n\n* Excavator: Upgrade dependencies\n\n* correct task\n\nCo-authored-by: svc-excavator-bot <svc-excavator-bot@palantir.com>\nCo-authored-by: Robert Kruszewski <robertk@palantir.com>", "committedDate": "2020-06-11T22:40:22Z", "type": "commit"}, {"oid": "93bca37b17bd1fea81df63512c8b786fb95704a9", "url": "https://github.com/palantir/gradle-baseline/commit/93bca37b17bd1fea81df63512c8b786fb95704a9", "message": "Improvement: Upgrade Checkstyle to 8.33 (#1404)\n\nUpgrade checkstyle to 8.33", "committedDate": "2020-06-11T23:28:44Z", "type": "commit"}, {"oid": "4407bb5d0e0581ae6c4ebca46cb92b379fc0d5d3", "url": "https://github.com/palantir/gradle-baseline/commit/4407bb5d0e0581ae6c4ebca46cb92b379fc0d5d3", "message": "Autorelease 3.25.0", "committedDate": "2020-06-11T23:28:47Z", "type": "commit"}, {"oid": "d12519dab84aa6299b4a92962e29c412a866004a", "url": "https://github.com/palantir/gradle-baseline/commit/d12519dab84aa6299b4a92962e29c412a866004a", "message": "Fix: Adjust checkstyle config for new version (#1409)\n\nFix checkstyle config to conform to breaks made between 8.13 and 8.33", "committedDate": "2020-06-12T01:35:57Z", "type": "commit"}, {"oid": "0401037f787a4a758f2beac134f9252b6e6f64a1", "url": "https://github.com/palantir/gradle-baseline/commit/0401037f787a4a758f2beac134f9252b6e6f64a1", "message": "Autorelease 3.25.1", "committedDate": "2020-06-12T01:36:00Z", "type": "commit"}, {"oid": "329b939716a994b387edb38e7b9023b9a11bec40", "url": "https://github.com/palantir/gradle-baseline/commit/329b939716a994b387edb38e7b9023b9a11bec40", "message": "Excavator: Render CircleCI file using template specified in .circleci/template.sh (#1384)\n\nCo-authored-by: svc-excavator-bot <svc-excavator-bot@palantir.com>\r\nCo-authored-by: forozco <forozco@palantir.com>", "committedDate": "2020-06-12T15:03:24Z", "type": "commit"}, {"oid": "1eaa6cef3806bb4393c22dffff574ec1f12b5aa8", "url": "https://github.com/palantir/gradle-baseline/commit/1eaa6cef3806bb4393c22dffff574ec1f12b5aa8", "message": "Check now also covers other simple expressions. Readme updated.", "committedDate": "2020-06-12T16:15:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzQ5MQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439527491", "bodyText": "Is the compile time constant check ever necessary? What does it catch that the following checks cannot?", "author": "carterkozak", "createdAt": "2020-06-12T16:38:51Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.IdentifierTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.LiteralTree;\n+import com.sun.source.tree.MemberSelectTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetValue\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.WARNING,\n+        summary = \"If lambda passed to Optional#orElseGet returns a simple expression, use Optional#orElse instead\")\n+public final class OptionalOrElseGetValue extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Matcher<ExpressionTree> OR_ELSE_GET_METHOD =\n+            MethodMatchers.instanceMethod().onExactClass(\"java.util.Optional\").named(\"orElseGet\");\n+    private static final Matcher<ExpressionTree> COMPILE_TIME_CONSTANT = new CompileTimeConstantExpressionMatcher();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        match:\n+        {\n+            if (!OR_ELSE_GET_METHOD.matches(tree, state)) {\n+                break match;\n+            }\n+\n+            ExpressionTree orElseGetArg = tree.getArguments().get(0);\n+\n+            if (orElseGetArg.getKind() != Tree.Kind.LAMBDA_EXPRESSION) {\n+                break match;\n+            }\n+\n+            LambdaExpressionTree lambdaExpressionTree = (LambdaExpressionTree) orElseGetArg;\n+            LambdaExpressionTree.BodyKind bodyKind = lambdaExpressionTree.getBodyKind();\n+\n+            if (bodyKind != LambdaExpressionTree.BodyKind.EXPRESSION) {\n+                break match;\n+            }\n+\n+            ExpressionTree expressionBody = (ExpressionTree) lambdaExpressionTree.getBody();\n+            if (COMPILE_TIME_CONSTANT.matches(expressionBody, state)", "originalCommit": "1eaa6cef3806bb4393c22dffff574ec1f12b5aa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzNjgzNg==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439636836", "bodyText": "It covers expressions that may look more complicated than the other cases, but can be evaluated at compile time. For example PREFIX + \"_someSuffix\" or MIN + SIZE * 1.5.\nAdded a test for such case.", "author": "aioobe", "createdAt": "2020-06-12T20:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzQ5MQ=="}], "type": "inlineReview"}, {"oid": "eb4d55b75ee04d9a0133645f8ba72885752ac427", "url": "https://github.com/palantir/gradle-baseline/commit/eb4d55b75ee04d9a0133645f8ba72885752ac427", "message": "StrictUnusedVariable handles Java 14 records (#1412)\n\nStrictUnusedVariable handles Java 14 records", "committedDate": "2020-06-12T17:16:35Z", "type": "commit"}, {"oid": "7209e9b7990754574d4aaa78b104ecf266294ac7", "url": "https://github.com/palantir/gradle-baseline/commit/7209e9b7990754574d4aaa78b104ecf266294ac7", "message": "Autorelease 3.26.0", "committedDate": "2020-06-12T17:16:37Z", "type": "commit"}, {"oid": "ce1d2e181e4e2a4832fec06d3c9baefbcab3c665", "url": "https://github.com/palantir/gradle-baseline/commit/ce1d2e181e4e2a4832fec06d3c9baefbcab3c665", "message": "Ran spotlessApply.", "committedDate": "2020-06-12T18:13:28Z", "type": "commit"}, {"oid": "54f4f322053677c7528fa9706c9f6f3f73261bad", "url": "https://github.com/palantir/gradle-baseline/commit/54f4f322053677c7528fa9706c9f6f3f73261bad", "message": "Added a compile time constant test.", "committedDate": "2020-06-12T20:44:53Z", "type": "commit"}, {"oid": "03c85a0dc5243e62f4888b5fc6a94c41b0e46708", "url": "https://github.com/palantir/gradle-baseline/commit/03c85a0dc5243e62f4888b5fc6a94c41b0e46708", "message": "Reworded description in README.", "committedDate": "2020-06-12T20:52:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzOTQyMg==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439639422", "bodyText": "Not sure the named block + break buys us anything over return Description.NO_MATCH;, by returning no-match we can shed a layer of indents, and style more uniformly with other checks.", "author": "carterkozak", "createdAt": "2020-06-12T20:58:13Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.IdentifierTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.LiteralTree;\n+import com.sun.source.tree.MemberSelectTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetValue\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.WARNING,\n+        summary = \"If lambda passed to Optional#orElseGet returns a simple expression, use Optional#orElse instead\")\n+public final class OptionalOrElseGetValue extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Matcher<ExpressionTree> OR_ELSE_GET_METHOD =\n+            MethodMatchers.instanceMethod().onExactClass(\"java.util.Optional\").named(\"orElseGet\");\n+    private static final Matcher<ExpressionTree> COMPILE_TIME_CONSTANT = new CompileTimeConstantExpressionMatcher();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        match:\n+        {\n+            if (!OR_ELSE_GET_METHOD.matches(tree, state)) {\n+                break match;\n+            }\n+\n+            ExpressionTree orElseGetArg = tree.getArguments().get(0);\n+\n+            if (orElseGetArg.getKind() != Tree.Kind.LAMBDA_EXPRESSION) {\n+                break match;\n+            }\n+\n+            LambdaExpressionTree lambdaExpressionTree = (LambdaExpressionTree) orElseGetArg;\n+            LambdaExpressionTree.BodyKind bodyKind = lambdaExpressionTree.getBodyKind();\n+\n+            if (bodyKind != LambdaExpressionTree.BodyKind.EXPRESSION) {\n+                break match;", "originalCommit": "03c85a0dc5243e62f4888b5fc6a94c41b0e46708", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDgzNw==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439670837", "bodyText": "It was part of my battle against cyclomatic complexity. I'll check if I can drop it without tipping over.", "author": "aioobe", "createdAt": "2020-06-12T22:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzOTQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MzI2Mg==", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439673262", "bodyText": "I\u2019d suppress the cyclomatic complexity check here", "author": "carterkozak", "createdAt": "2020-06-12T22:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzOTQyMg=="}], "type": "inlineReview"}, {"oid": "87eb1ffc467a8f5c23618b29de7e153f5a5c13c9", "url": "https://github.com/palantir/gradle-baseline/commit/87eb1ffc467a8f5c23618b29de7e153f5a5c13c9", "message": "Changed to multiple returns.", "committedDate": "2020-06-12T22:51:42Z", "type": "commit"}, {"oid": "c4fd4b2d8018e1b7ad1e15a63322e03f07293a2b", "url": "https://github.com/palantir/gradle-baseline/commit/c4fd4b2d8018e1b7ad1e15a63322e03f07293a2b", "message": "Don't wrap method declaration (#1416)\n\nWrap method declarations on parameters, not on modifiers and return type.", "committedDate": "2020-06-16T18:42:35Z", "type": "commit"}, {"oid": "02303a8ac7f2257ccf896fe03fa178d23d1d6628", "url": "https://github.com/palantir/gradle-baseline/commit/02303a8ac7f2257ccf896fe03fa178d23d1d6628", "message": "Autorelease 3.27.0", "committedDate": "2020-06-16T18:42:37Z", "type": "commit"}, {"oid": "e9309b7d225757a2ffd1724db59a132ac9f391b9", "url": "https://github.com/palantir/gradle-baseline/commit/e9309b7d225757a2ffd1724db59a132ac9f391b9", "message": "Excavator: Upgrade buildscript dependencies (#1417)\n\nCo-authored-by: svc-excavator-bot <svc-excavator-bot@palantir.com>", "committedDate": "2020-06-17T01:39:47Z", "type": "commit"}, {"oid": "ac4956d6e85c51efa432ea8212eaffc9f02c3a68", "url": "https://github.com/palantir/gradle-baseline/commit/ac4956d6e85c51efa432ea8212eaffc9f02c3a68", "message": "Excavator: Ensure consistent gradle/publish-(jar|dist).gradle files (#1418)\n\nCo-authored-by: svc-excavator-bot <svc-excavator-bot@palantir.com>", "committedDate": "2020-06-17T01:43:01Z", "type": "commit"}, {"oid": "1d0cc65cd5e229032cd472a5a986116b3177da25", "url": "https://github.com/palantir/gradle-baseline/commit/1d0cc65cd5e229032cd472a5a986116b3177da25", "message": "Excavator: Upgrade dependencies (#1419)\n\nCo-authored-by: svc-excavator-bot <svc-excavator-bot@palantir.com>", "committedDate": "2020-06-17T08:18:37Z", "type": "commit"}, {"oid": "13fc3720665d0b1cb99a5b0dcf038909f988ce16", "url": "https://github.com/palantir/gradle-baseline/commit/13fc3720665d0b1cb99a5b0dcf038909f988ce16", "message": "Added changelog entry.", "committedDate": "2020-06-17T16:01:39Z", "type": "commit"}, {"oid": "3bd2a1e0bafa7199bf2220c44e6b5dae06992519", "url": "https://github.com/palantir/gradle-baseline/commit/3bd2a1e0bafa7199bf2220c44e6b5dae06992519", "message": "Improve gradle-baseline-java integration with IntelliJ import (#1411)\n\nAdds the proper configuration files upon IntelliJ import of a gradle project for checkstyle and copyright.\r\n\r\nThis generates the following additional files:\r\n- .idea/copyright/profiles_settings.xml\r\n- an xml file under .idea/copyright/ per copyright file under .baseline/copyright\r\n- .idea/checkstyle-idea.xml (and adds Checkstyle-IDEA to the external dependencies) if baseline-checkstyle is applied\r\n- Either .idea/codeStyleSettings.xml or a .idea/codeStyles/ folder with the contents being copied from .baseline/idea\r\n  - If .baseline/idea/codeStyles is present, it will copy its contents, otherwise, it will fall back to .baseline/idea/intellij-java-palantir-style.xml as currently\r\n  - The fallback is using a legacy IntelliJ format and requires closing and reopening the project to be taken into account", "committedDate": "2020-06-17T16:36:20Z", "type": "commit"}, {"oid": "f1c1f638c0831a727ff656501ba3b9ab1a62cf69", "url": "https://github.com/palantir/gradle-baseline/commit/f1c1f638c0831a727ff656501ba3b9ab1a62cf69", "message": "Autorelease 3.28.0", "committedDate": "2020-06-17T16:36:21Z", "type": "commit"}, {"oid": "3b331f105a947a94e7d5ddd7c92f9881d1ddb58a", "url": "https://github.com/palantir/gradle-baseline/commit/3b331f105a947a94e7d5ddd7c92f9881d1ddb58a", "message": "Added OptionalOrElseGetConstant error prone check.", "committedDate": "2020-06-17T17:36:44Z", "type": "commit"}, {"oid": "aa20422e87d0a2987b628f4bcdb5739ca5827b39", "url": "https://github.com/palantir/gradle-baseline/commit/aa20422e87d0a2987b628f4bcdb5739ca5827b39", "message": "Check now also covers other simple expressions. Readme updated.", "committedDate": "2020-06-17T17:36:44Z", "type": "commit"}, {"oid": "15a48bfb915d47f9b9bc4662305285911ddcfbd9", "url": "https://github.com/palantir/gradle-baseline/commit/15a48bfb915d47f9b9bc4662305285911ddcfbd9", "message": "Ran spotlessApply.", "committedDate": "2020-06-17T17:36:44Z", "type": "commit"}, {"oid": "83993a1f3ad551ef0780dc9f970663208d36d822", "url": "https://github.com/palantir/gradle-baseline/commit/83993a1f3ad551ef0780dc9f970663208d36d822", "message": "Added a compile time constant test.", "committedDate": "2020-06-17T17:36:44Z", "type": "commit"}, {"oid": "e135dff3af2285789cc16a40ae39afcd7a22ad96", "url": "https://github.com/palantir/gradle-baseline/commit/e135dff3af2285789cc16a40ae39afcd7a22ad96", "message": "Reworded description in README.", "committedDate": "2020-06-17T17:36:44Z", "type": "commit"}, {"oid": "d5e0139f2a8ce666ec9b09c73ca1783fb66f1d55", "url": "https://github.com/palantir/gradle-baseline/commit/d5e0139f2a8ce666ec9b09c73ca1783fb66f1d55", "message": "Changed to multiple returns.", "committedDate": "2020-06-17T17:36:44Z", "type": "commit"}, {"oid": "7ece87bb9acd8b4c7a5149f11f411ed6c18a268c", "url": "https://github.com/palantir/gradle-baseline/commit/7ece87bb9acd8b4c7a5149f11f411ed6c18a268c", "message": "Added changelog entry.", "committedDate": "2020-06-17T17:36:44Z", "type": "commit"}, {"oid": "689346f145172db8975f1bfd05f6613c14f4a75b", "url": "https://github.com/palantir/gradle-baseline/commit/689346f145172db8975f1bfd05f6613c14f4a75b", "message": "Merge branch 'orElseGet-constant' of github.com:aioobe/gradle-baseline into orElseGet-constant", "committedDate": "2020-06-17T17:37:12Z", "type": "commit"}]}