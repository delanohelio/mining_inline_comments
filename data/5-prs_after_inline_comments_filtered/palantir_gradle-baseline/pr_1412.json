{"pr_number": 1412, "pr_title": "StrictUnusedVariable handles Java 14 records", "pr_createdAt": "2020-06-12T17:05:49Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1412", "timeline": [{"oid": "b727ced2aa0a4d472e9be48e75103cb6927ff988", "url": "https://github.com/palantir/gradle-baseline/commit/b727ced2aa0a4d472e9be48e75103cb6927ff988", "message": "StrictUnusedVariable supports records", "committedDate": "2020-06-12T16:54:05Z", "type": "commit"}, {"oid": "48c3b3fcca36ad5642fd7218bee71149f91fb30f", "url": "https://github.com/palantir/gradle-baseline/commit/48c3b3fcca36ad5642fd7218bee71149f91fb30f", "message": "comment", "committedDate": "2020-06-12T17:02:29Z", "type": "commit"}, {"oid": "e4e8958c3f466f227a52d200ac5333f970d20292", "url": "https://github.com/palantir/gradle-baseline/commit/e4e8958c3f466f227a52d200ac5333f970d20292", "message": "disable for java 11", "committedDate": "2020-06-12T17:09:03Z", "type": "commit"}, {"oid": "be7f74c93b5f5bdd4d5787f5f08b2245b00b8d9b", "url": "https://github.com/palantir/gradle-baseline/commit/be7f74c93b5f5bdd4d5787f5f08b2245b00b8d9b", "message": "intellij!", "committedDate": "2020-06-12T17:10:23Z", "type": "commit"}, {"oid": "be37afa96eed894677999269494c27fea155791f", "url": "https://github.com/palantir/gradle-baseline/commit/be37afa96eed894677999269494c27fea155791f", "message": "Add generated changelog entries", "committedDate": "2020-06-12T17:10:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MzA1Mg==", "url": "https://github.com/palantir/gradle-baseline/pull/1412#discussion_r439543052", "bodyText": "slick", "author": "carterkozak", "createdAt": "2020-06-12T17:10:36Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java", "diffHunk": "@@ -768,6 +768,14 @@ public Void visitLambdaExpression(LambdaExpressionTree node, Void unused) {\n \n         @Override\n         public Void visitMethod(MethodTree tree, Void unused) {\n+            // From the perspective of an errorprone rule there are two standalone trees for a single `record`\n+            // definition; A MethodTree which looks like a void function and a ClassTree which has the record fields.\n+            //\n+            // Its unclear why both trees are emitted, but we can identify and ignore a record's MethodTree by checking\n+            // if it does not have any associated source.\n+            if (state.getEndPosition(tree) < 0) {", "originalCommit": "e4e8958c3f466f227a52d200ac5333f970d20292", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MzA2OQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1412#discussion_r439543069", "bodyText": "What a nifty annotation!", "author": "ferozco", "createdAt": "2020-06-12T17:10:38Z", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/StrictUnusedVariableTest.java", "diffHunk": "@@ -295,6 +298,22 @@ public void fixes_previously_suppressed_variables() {\n                 .doTest(TestMode.TEXT_MATCH);\n     }\n \n+    @Test\n+    @DisabledForJreRange(max = JRE.JAVA_13)", "originalCommit": "be7f74c93b5f5bdd4d5787f5f08b2245b00b8d9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}