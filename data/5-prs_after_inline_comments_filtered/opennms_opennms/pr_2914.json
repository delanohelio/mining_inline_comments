{"pr_number": 2914, "pr_title": "NMS-12583: Write enriched flows to Kafka", "pr_createdAt": "2020-03-11T14:00:56Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2914", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NDI2Ng==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r393844266", "bodyText": "This is pure elasticsearch specific and can be calculated from other values.", "author": "fooker", "createdAt": "2020-03-17T17:21:14Z", "path": "features/flows/api/src/main/java/org/opennms/netmgt/flows/api/EnrichedFlow.java", "diffHunk": "@@ -0,0 +1,506 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.flows.api;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class EnrichedFlow {\n+\n+    public enum Locality {\n+        PUBLIC,\n+        PRIVATE\n+    }\n+\n+    private Flow flow;\n+\n+    private String application;\n+\n+    private String convoKey;", "originalCommit": "21e2f7f43f43ec183fd868b6146d2b108ba142c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MTAwMg==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r396041002", "bodyText": "It would actually be nice to have this populated the same way that is done is Elasticsearch and avoid having to replicate that logic elsewhere.", "author": "j-white", "createdAt": "2020-03-22T00:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NDI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NDUyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r393844525", "bodyText": "Same here: pure elasticsearch specific", "author": "fooker", "createdAt": "2020-03-17T17:21:37Z", "path": "features/flows/api/src/main/java/org/opennms/netmgt/flows/api/EnrichedFlow.java", "diffHunk": "@@ -0,0 +1,506 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.flows.api;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class EnrichedFlow {\n+\n+    public enum Locality {\n+        PUBLIC,\n+        PRIVATE\n+    }\n+\n+    private Flow flow;\n+\n+    private String application;\n+\n+    private String convoKey;\n+\n+    private String host;\n+\n+    private List<String> hosts = new ArrayList<>();", "originalCommit": "21e2f7f43f43ec183fd868b6146d2b108ba142c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNjg0NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r397306845", "bodyText": "This one we can skip.", "author": "j-white", "createdAt": "2020-03-24T16:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NDUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NTY4Ng==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r393845686", "bodyText": "If the property to enable it is called \"forwarding\", should the class be called \"Forwarder\", too?", "author": "fooker", "createdAt": "2020-03-17T17:23:36Z", "path": "features/flows/elastic/src/main/java/org/opennms/netmgt/flows/elastic/ElasticFlowRepository.java", "diffHunk": "@@ -164,6 +165,10 @@\n \n     private final IndexSettings indexSettings;\n ", "originalCommit": "21e2f7f43f43ec183fd868b6146d2b108ba142c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NTQ4Mw==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r393855483", "bodyText": "I debated this in my mind but somehow I didn't like Forwarder for the class name.  For ElasticFlowRepository it is forwarding to kafka but when it comes to KafkaFlowPersister it is just persisting.", "author": "cgorantla", "createdAt": "2020-03-17T17:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NTY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1OTI4OQ==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r393859289", "bodyText": "Class names should be nouns or noun phrases. This means that the name of the class should be something that would be the subject of a verb. In the case of object-oriented design, methods would be the verbs that take place on the thing that the class is a representation of. Some words should be avoided.\n\nPerhaps that no longer applies in the modern functional programming world. :)", "author": "pbrane", "createdAt": "2020-03-17T17:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NTY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk0MTIwNw==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r393941207", "bodyText": "Modified to forwarder.", "author": "cgorantla", "createdAt": "2020-03-17T20:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NTY4Ng=="}], "type": "inlineReview"}, {"oid": "978dcd600c0ace77b27b1485c80acc60c7d1dad8", "url": "https://github.com/OpenNMS/opennms/commit/978dcd600c0ace77b27b1485c80acc60c7d1dad8", "message": "NMS-12583: Fix test", "committedDate": "2020-03-18T19:45:45Z", "type": "forcePushed"}, {"oid": "1c351725cb13b24d869bd0836d780b85d66cebeb", "url": "https://github.com/OpenNMS/opennms/commit/1c351725cb13b24d869bd0836d780b85d66cebeb", "message": "NMS-12583: Fix test", "committedDate": "2020-03-18T19:48:06Z", "type": "forcePushed"}, {"oid": "0ccf144ce525f0d49c20ca748d9881fddb638b6d", "url": "https://github.com/OpenNMS/opennms/commit/0ccf144ce525f0d49c20ca748d9881fddb638b6d", "message": "NMS-12583: Add kafka flow forwarder\n\nNMS-12583: Add proto builder\n\nNMS-12583: Add relavant features on sentinel\n\nNMS-12583: Refactor enriched flow forwarder/persister\n\nNMS-12583: Handle review comments\n\nNMS-12583: Fix test", "committedDate": "2020-03-18T19:51:46Z", "type": "forcePushed"}, {"oid": "28980914ff963ff3c6193f939140e72af89225b6", "url": "https://github.com/OpenNMS/opennms/commit/28980914ff963ff3c6193f939140e72af89225b6", "message": "NMS-12583: Add kafka flow forwarder\n\nNMS-12583: Add proto builder\n\nNMS-12583: Add relavant features on sentinel\n\nNMS-12583: Refactor enriched flow forwarder/persister\n\nNMS-12583: Handle review comments\n\nNMS-12583: Fix test", "committedDate": "2020-03-18T19:56:53Z", "type": "commit"}, {"oid": "28980914ff963ff3c6193f939140e72af89225b6", "url": "https://github.com/OpenNMS/opennms/commit/28980914ff963ff3c6193f939140e72af89225b6", "message": "NMS-12583: Add kafka flow forwarder\n\nNMS-12583: Add proto builder\n\nNMS-12583: Add relavant features on sentinel\n\nNMS-12583: Refactor enriched flow forwarder/persister\n\nNMS-12583: Handle review comments\n\nNMS-12583: Fix test", "committedDate": "2020-03-18T19:56:53Z", "type": "forcePushed"}, {"oid": "ae29d087bb88c83a2dd96a008f040ff0399c7782", "url": "https://github.com/OpenNMS/opennms/commit/ae29d087bb88c83a2dd96a008f040ff0399c7782", "message": "NMS-12583: Simplify EnrichedFlow conversions", "committedDate": "2020-03-20T16:55:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDU1MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r396040551", "bodyText": "I'd move this logic to the EnrichedFlow class instead of defining it here.", "author": "j-white", "createdAt": "2020-03-22T00:03:01Z", "path": "features/flows/elastic/src/main/java/org/opennms/netmgt/flows/elastic/FlowDocument.java", "diffHunk": "@@ -724,4 +741,59 @@ public static FlowDocument from(final Flow flow) {\n \n         return doc;\n     }\n+\n+    public static EnrichedFlow buildEnrichedFlow(FlowDocument flowDocument) {", "originalCommit": "ae29d087bb88c83a2dd96a008f040ff0399c7782", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4ODY4NA==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r396488684", "bodyText": "Had to do build EnrichedFlow here as EnrichedFlow is in api module which don't have visibility of FlowDocument.", "author": "cgorantla", "createdAt": "2020-03-23T14:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjA4OQ==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r396626089", "bodyText": "Have added these back.", "author": "cgorantla", "createdAt": "2020-03-23T17:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDYxMg==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r396040612", "bodyText": "We don't know that it's Kafka, but rather just some flow forwarder.", "author": "j-white", "createdAt": "2020-03-22T00:03:43Z", "path": "features/flows/elastic/src/main/java/org/opennms/netmgt/flows/elastic/ElasticFlowRepository.java", "diffHunk": "@@ -238,8 +244,14 @@ public void persist(final Collection<Flow> flows, final FlowSource source) throw\n         } catch (Exception e) {\n             throw new FlowException(\"Failed to enrich one or more flows.\", e);\n         }\n-\n+        if(enableFlowForwarding) {\n+            // Persist to kafka.\n+            LOG.debug(\"Forwarding {} flow documents to Kafka\", flowDocuments.size());", "originalCommit": "ae29d087bb88c83a2dd96a008f040ff0399c7782", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDgyMQ==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r396040821", "bodyText": "Can we just have it fail if not set?", "author": "j-white", "createdAt": "2020-03-22T00:07:51Z", "path": "features/flows/kafka-persistence/src/main/java/org/opennms/netmgt/flows/persistence/KafkaFlowForwarder.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.flows.persistence;\n+\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Supplier;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.joda.time.Duration;\n+import org.opennms.netmgt.flows.api.EnrichedFlow;\n+import org.opennms.netmgt.flows.api.EnrichedFlowForwarder;\n+import org.opennms.netmgt.flows.persistence.model.FlowDocument;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.swrve.ratelimitedlogger.RateLimitedLog;\n+\n+public class KafkaFlowForwarder implements EnrichedFlowForwarder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KafkaFlowForwarder.class);\n+    public static final String KAFKA_CLIENT_PID = \"org.opennms.features.flows.persistence.kafka\";\n+    private final ConfigurationAdmin configAdmin;\n+    private KafkaProducer<String, byte[]> producer;\n+    private String topicName;\n+    private static final RateLimitedLog RATE_LIMITED_LOG = RateLimitedLog\n+            .withRateLimit(LOG)\n+            .maxRate(1).every(Duration.standardSeconds(60))\n+            .build();\n+    private Properties producerConfig;\n+    \n+    public KafkaFlowForwarder(ConfigurationAdmin configAdmin) {\n+        this.configAdmin = configAdmin;\n+    }\n+\n+    @Override\n+    public void forward(EnrichedFlow enrichedFlow) {\n+\n+        if (producer == null) {\n+            RATE_LIMITED_LOG.warn(\"Kafka Producer is not configured for flow forwarding.\");\n+            return;\n+        }\n+\n+        try {\n+            FlowDocument flowDocument = FlowDocumentBuilder.buildFlowDocument(enrichedFlow);\n+            final ProducerRecord<String, byte[]> record = new ProducerRecord<>(topicName, flowDocument.toByteArray());\n+            producer.send(record, (recordMetadata, e) -> {\n+                if (e != null) {\n+                    RATE_LIMITED_LOG.warn(\"Failed to send flow document to producer: {}.\", record, e);\n+                } else if (LOG.isTraceEnabled()) {\n+                    LOG.trace(\"Persisted flow document {} to kafka.\", flowDocument);\n+                }\n+            });\n+        } catch (Exception e) {\n+            LOG.error(\"Exception while sending flow to kafka\", e);\n+        }\n+    }\n+\n+    public void init() throws IOException {\n+        // Create the Kafka producer\n+        producerConfig = new Properties();\n+        final Dictionary<String, Object> properties = configAdmin\n+                .getConfiguration(KAFKA_CLIENT_PID).getProperties();\n+        if (properties != null) {\n+            final Enumeration<String> keys = properties.keys();\n+            while (keys.hasMoreElements()) {\n+                final String key = keys.nextElement();\n+                producerConfig.put(key, properties.get(key));\n+            }\n+        }\n+\n+        if (producerConfig.getProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG) != null) {", "originalCommit": "ae29d087bb88c83a2dd96a008f040ff0399c7782", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTYyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r396625625", "bodyText": "Without  bootstrap.servers in the config,  init would throw exception and bundle wouldn't load. Since this bundle is not needed by default and should be available when needed, chose this approach.", "author": "cgorantla", "createdAt": "2020-03-23T17:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0MDgzNw==", "url": "https://github.com/OpenNMS/opennms/pull/2914#discussion_r396040837", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.info(\" Kafka Producer initialized with config {} \", producerConfig);\n          \n          \n            \n                        LOG.info(\"Kafka Producer initialized with config: {}\", producerConfig);\n          \n      \n    \n    \n  \n\nRemove leading and trailing spaces from log message.", "author": "j-white", "createdAt": "2020-03-22T00:08:14Z", "path": "features/flows/kafka-persistence/src/main/java/org/opennms/netmgt/flows/persistence/KafkaFlowForwarder.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.flows.persistence;\n+\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Supplier;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.joda.time.Duration;\n+import org.opennms.netmgt.flows.api.EnrichedFlow;\n+import org.opennms.netmgt.flows.api.EnrichedFlowForwarder;\n+import org.opennms.netmgt.flows.persistence.model.FlowDocument;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.swrve.ratelimitedlogger.RateLimitedLog;\n+\n+public class KafkaFlowForwarder implements EnrichedFlowForwarder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KafkaFlowForwarder.class);\n+    public static final String KAFKA_CLIENT_PID = \"org.opennms.features.flows.persistence.kafka\";\n+    private final ConfigurationAdmin configAdmin;\n+    private KafkaProducer<String, byte[]> producer;\n+    private String topicName;\n+    private static final RateLimitedLog RATE_LIMITED_LOG = RateLimitedLog\n+            .withRateLimit(LOG)\n+            .maxRate(1).every(Duration.standardSeconds(60))\n+            .build();\n+    private Properties producerConfig;\n+    \n+    public KafkaFlowForwarder(ConfigurationAdmin configAdmin) {\n+        this.configAdmin = configAdmin;\n+    }\n+\n+    @Override\n+    public void forward(EnrichedFlow enrichedFlow) {\n+\n+        if (producer == null) {\n+            RATE_LIMITED_LOG.warn(\"Kafka Producer is not configured for flow forwarding.\");\n+            return;\n+        }\n+\n+        try {\n+            FlowDocument flowDocument = FlowDocumentBuilder.buildFlowDocument(enrichedFlow);\n+            final ProducerRecord<String, byte[]> record = new ProducerRecord<>(topicName, flowDocument.toByteArray());\n+            producer.send(record, (recordMetadata, e) -> {\n+                if (e != null) {\n+                    RATE_LIMITED_LOG.warn(\"Failed to send flow document to producer: {}.\", record, e);\n+                } else if (LOG.isTraceEnabled()) {\n+                    LOG.trace(\"Persisted flow document {} to kafka.\", flowDocument);\n+                }\n+            });\n+        } catch (Exception e) {\n+            LOG.error(\"Exception while sending flow to kafka\", e);\n+        }\n+    }\n+\n+    public void init() throws IOException {\n+        // Create the Kafka producer\n+        producerConfig = new Properties();\n+        final Dictionary<String, Object> properties = configAdmin\n+                .getConfiguration(KAFKA_CLIENT_PID).getProperties();\n+        if (properties != null) {\n+            final Enumeration<String> keys = properties.keys();\n+            while (keys.hasMoreElements()) {\n+                final String key = keys.nextElement();\n+                producerConfig.put(key, properties.get(key));\n+            }\n+        }\n+\n+        if (producerConfig.getProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG) != null) {\n+            // Overwrite the serializers\n+            producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getCanonicalName());\n+            producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getCanonicalName());\n+            // Class-loader hack for accessing the kafka classes when initializing producer.\n+            producer = runWithGivenClassLoader(() -> new KafkaProducer<>(producerConfig), KafkaProducer.class.getClassLoader());\n+            LOG.info(\" Kafka Producer initialized with config {} \", producerConfig);", "originalCommit": "ae29d087bb88c83a2dd96a008f040ff0399c7782", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d872567b0acb0f551a565dd84cf70628eedd0df3", "url": "https://github.com/OpenNMS/opennms/commit/d872567b0acb0f551a565dd84cf70628eedd0df3", "message": "Merge branch 'release-26.0.0' into jira/NMS-12583", "committedDate": "2020-03-23T14:53:21Z", "type": "commit"}, {"oid": "baf2c99118d1b14f656fff2bee4be80f0946532b", "url": "https://github.com/OpenNMS/opennms/commit/baf2c99118d1b14f656fff2bee4be80f0946532b", "message": "NMS-12583: Handle review comments", "committedDate": "2020-03-23T18:12:43Z", "type": "commit"}, {"oid": "baf2c99118d1b14f656fff2bee4be80f0946532b", "url": "https://github.com/OpenNMS/opennms/commit/baf2c99118d1b14f656fff2bee4be80f0946532b", "message": "NMS-12583: Handle review comments", "committedDate": "2020-03-23T18:12:43Z", "type": "forcePushed"}, {"oid": "3756539a9cc275a2b9b0dc55a378d05cc8998362", "url": "https://github.com/OpenNMS/opennms/commit/3756539a9cc275a2b9b0dc55a378d05cc8998362", "message": "NMS-12583: Remove 'hosts' from EnrichedFlow", "committedDate": "2020-03-24T20:13:17Z", "type": "commit"}]}