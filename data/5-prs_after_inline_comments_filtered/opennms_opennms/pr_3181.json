{"pr_number": 3181, "pr_title": "NMS-8484: New property extender classes, test coverage for existing ones, and docs for all", "pr_createdAt": "2020-10-08T16:25:42Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/3181", "timeline": [{"oid": "006a50fdce9077c1f52626fc82eb208d89ea4ff9", "url": "https://github.com/OpenNMS/opennms/commit/006a50fdce9077c1f52626fc82eb208d89ea4ff9", "message": "NMS-8484: Add custom string attributes based on indirect and complex SNMP Indices\n- Merged ColumnPropertyExtender from old PR on this issue (still needs tests)\n- Added test case for pulling over a value of entPhysicalName into the\n  cempMemoryPool resource-type (uses existing RegExPropertyExtender)", "committedDate": "2020-09-25T18:55:48Z", "type": "commit"}, {"oid": "833b9381b63fb9a5339f4ba215a745d41248433d", "url": "https://github.com/OpenNMS/opennms/commit/833b9381b63fb9a5339f4ba215a745d41248433d", "message": "Removing ColumnPropertyExtender since I could never work out a test case for it", "committedDate": "2020-10-01T17:58:37Z", "type": "commit"}, {"oid": "02402817e8641048831d6dd2a7e27cadc2707f2c", "url": "https://github.com/OpenNMS/opennms/commit/02402817e8641048831d6dd2a7e27cadc2707f2c", "message": "NMS-8484: Added pointer-like-index property extenders for SNMP collector\n\nPointerLikeIndexPropertyExtender is a generic extender which uses the value\nof an attribute on a target resource (e.g. cpmCPUTotalPhysicalIndex) as a\nforeign-key on which it then \"joins\" a source resource to retrieve the value\nof a nominated string attribute (e.g. entPhysicalName) on that source resource.\nThis class has the same name as one contributed in an abandoned PR by\nJean-Marie Kubek, but in the end I wrote my own implementation.\n\nInterfaceSnmpPropertyExtender is a specific extender for \"joining\" resources\nof type interfaceSnmp against the value of an attribute on a target attribute\nwhich is a value of ifIndex. The separate implementation is necessary because\ninterfaceSnmp resources are indexed not by their ifIndex, but by a calculated\nifLabel.", "committedDate": "2020-10-06T15:51:36Z", "type": "commit"}, {"oid": "6cf401e4384025621a2a75dc0638ee60eba02594", "url": "https://github.com/OpenNMS/opennms/commit/6cf401e4384025621a2a75dc0638ee60eba02594", "message": "NMS-8484: Cleanup, documentation, and one bonus extender class\n\n- Cleaned up imports and copyright dates in all touched classes\n- Added documentation to Admin Guide for all existing and new extender\n  classes\n- Added an Enum Lookup extender, for translating integer values to\n  human-sensible text equivalents", "committedDate": "2020-10-07T22:01:11Z", "type": "commit"}, {"oid": "aebfc653cce75f163f9db96c45eb2128bab42cbc", "url": "https://github.com/OpenNMS/opennms/commit/aebfc653cce75f163f9db96c45eb2128bab42cbc", "message": "Merge branch 'foundation-2020' of github.com:OpenNMS/opennms into jira/NMS-8484-revival", "committedDate": "2020-10-07T22:04:31Z", "type": "commit"}, {"oid": "bb39f1264c820a6e4eef6a53e631efb09d3a832c", "url": "https://github.com/OpenNMS/opennms/commit/bb39f1264c820a6e4eef6a53e631efb09d3a832c", "message": "NMS-8484: Fix copyright header issue", "committedDate": "2020-10-08T02:16:26Z", "type": "commit"}, {"oid": "8fcc4e7cdce61b77d45642c9b939f039a9217f59", "url": "https://github.com/OpenNMS/opennms/commit/8fcc4e7cdce61b77d45642c9b939f039a9217f59", "message": "NMS-8484: Added some illumination of the property-extender example\nconfigurations, and some MIB definition snippets to aid understanding", "committedDate": "2020-10-08T16:12:19Z", "type": "commit"}, {"oid": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "url": "https://github.com/OpenNMS/opennms/commit/f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "message": "Merge branch 'foundation-2020' of github.com:OpenNMS/opennms into jira/NMS-8484-revival", "committedDate": "2020-10-08T16:13:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjE4NA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501872184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T16:58:19Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMjQwOA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501922408", "bodyText": "Does this work in Java sources? I thought it would be only for asciidoc.", "author": "jeffgdotorg", "createdAt": "2020-10-08T18:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMzgyOA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501923828", "bodyText": "@jeffgdotorg sorry. You are correct. Please replace {docyear} with 2020.", "author": "Bonrob2", "createdAt": "2020-10-08T18:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjU0Ng==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501872546", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) {docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T16:58:52Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMzM3Mg==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501923372", "bodyText": "Here again, not sure this works in Java source files.", "author": "jeffgdotorg", "createdAt": "2020-10-08T18:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MjU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzQ5MA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501873490", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Bonrob2", "createdAt": "2020-10-08T17:00:19Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzcxMg==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501873712", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with OpenNMS(R).  If not, see:\n          \n          \n            \n             * along with OpenNMS(R). If you did not, see:", "author": "Bonrob2", "createdAt": "2020-10-08T17:00:42Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNTM3OQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501925379", "bodyText": "This one and the others I haven't committed are boilerplate comment headers. If we're going to mount an effort to improve these blocks, I think it ought to be across the whole corpus of code. I'm nervous about changing it just here and there, since some code-analysis tools might deduct points for inconsistent application of license and copyright header.", "author": "jeffgdotorg", "createdAt": "2020-10-08T18:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNjcxNw==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501926717", "bodyText": "Here is the reference copy of the Affero GPLv3 copyright boilerplate block. I think it's best if we stick with the one put out by the FSF.", "author": "jeffgdotorg", "createdAt": "2020-10-08T18:26:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MTMyOQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501941329", "bodyText": "@jeffgdotorg no worries. Context is everything. No need to make the changes.", "author": "Bonrob2", "createdAt": "2020-10-08T18:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MzcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NDY2NA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501874664", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     http://www.opennms.org/\n          \n      \n    \n    \n  \n\nI know it redirects, but since this is deprecated we should probably just remove it.", "author": "Bonrob2", "createdAt": "2020-10-08T17:02:13Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2016 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NTQ3NA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501875474", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) {docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T17:03:40Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NTcyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501875725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T17:04:04Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NjM0MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501876341", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Bonrob2", "createdAt": "2020-10-08T17:05:07Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NjU1NQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501876555", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with OpenNMS(R).  If not, see:\n          \n          \n            \n             * along with OpenNMS(R). If you did not, see:", "author": "Bonrob2", "createdAt": "2020-10-08T17:05:29Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NjY5Mg==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501876692", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     http://www.opennms.org/", "author": "Bonrob2", "createdAt": "2020-10-08T17:05:42Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/InterfaceSnmpPropertyExtender.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzE4NQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877185", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) {docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T17:06:34Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzI2NQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877265", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T17:06:45Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzQ0Nw==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Bonrob2", "createdAt": "2020-10-08T17:07:01Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzU3MA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877570", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with OpenNMS(R).  If not, see:\n          \n          \n            \n             * along with OpenNMS(R). If you did not, see:", "author": "Bonrob2", "createdAt": "2020-10-08T17:07:15Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NzY3Ng==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501877676", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     http://www.opennms.org/", "author": "Bonrob2", "createdAt": "2020-10-08T17:07:25Z", "path": "features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/PointerLikeIndexPropertyExtender.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODAxNw==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878017", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2006-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) 2006-{docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T17:08:03Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "diffHunk": "@@ -1,8 +1,8 @@\n /*******************************************************************************\n  * This file is part of OpenNMS(R).\n  *\n- * Copyright (C) 2006-2014 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.\n+ * Copyright (C) 2006-2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODEwNA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878104", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T17:08:12Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "diffHunk": "@@ -1,8 +1,8 @@\n /*******************************************************************************\n  * This file is part of OpenNMS(R).\n  *\n- * Copyright (C) 2006-2014 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.\n+ * Copyright (C) 2006-2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODMxMQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878311", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Test collection for Cisco memory-pool entry with indirectly-referenced property\n          \n          \n            \n                 * Test collection for Cisco memory-pool entry with indirectly referenced property", "author": "Bonrob2", "createdAt": "2020-10-08T17:08:33Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "diffHunk": "@@ -242,6 +242,52 @@ public void testCollectCiscoQoS() throws Exception {\n         assertEquals(\"GESTION-ROUTING\", map.get(\"cbQosClassMapName\"));\n         assertEquals(\"Conexion Valencia\", map.get(\"ifAlias\"));\n     }\n+    \n+    /**\n+     * Test collection for Cisco memory-pool entry with indirectly-referenced property", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODUxOA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878518", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * Copyright (C) {docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T17:08:56Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODYyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878625", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n          \n          \n            \n             * OpenNMS(R) is Copyright (C) 1999-{docyear} The OpenNMS Group, Inc.", "author": "Bonrob2", "createdAt": "2020-10-08T17:09:07Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODczMw==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878733", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Bonrob2", "createdAt": "2020-10-08T17:09:18Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODg5MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878891", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with OpenNMS(R).  If not, see:\n          \n          \n            \n             * along with OpenNMS(R). If you did not, see:", "author": "Bonrob2", "createdAt": "2020-10-08T17:09:33Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3ODk5NA==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501878994", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *     http://www.opennms.org/", "author": "Bonrob2", "createdAt": "2020-10-08T17:09:44Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3OTM3MQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501879371", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Test collection for dot1d-bridge base port entry with indirectly-referenced property\n          \n          \n            \n                 * Test collection for dot1d-bridge base port entry with indirectly referenced property", "author": "Bonrob2", "createdAt": "2020-10-08T17:10:20Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.collectd;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.File;\n+import java.net.InetAddress;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.opennms.core.collection.test.JUnitCollector;\n+import org.opennms.core.spring.BeanUtils;\n+import org.opennms.core.test.MockLogAppender;\n+import org.opennms.core.test.OpenNMSJUnit4ClassRunner;\n+import org.opennms.core.test.TestContextAware;\n+import org.opennms.core.test.db.annotations.JUnitTemporaryDatabase;\n+import org.opennms.core.test.snmp.annotations.JUnitSnmpAgent;\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.api.CollectionSet;\n+import org.opennms.netmgt.collection.api.CollectionStatus;\n+import org.opennms.netmgt.collection.core.CollectionSpecification;\n+import org.opennms.netmgt.collection.test.api.CollectorTestUtils;\n+import org.opennms.netmgt.config.SnmpPeerFactory;\n+import org.opennms.netmgt.config.dao.outages.api.ReadablePollOutagesDao;\n+import org.opennms.netmgt.dao.api.IpInterfaceDao;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.support.FilesystemResourceStorageDao;\n+import org.opennms.netmgt.model.NetworkBuilder;\n+import org.opennms.netmgt.model.OnmsIpInterface;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourcePath;\n+import org.opennms.netmgt.rrd.RrdStrategy;\n+import org.opennms.netmgt.rrd.jrobin.JRobinRrdStrategy;\n+import org.opennms.test.JUnitConfigurationEnvironment;\n+import org.opennms.test.mock.MockUtil;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestContext;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+/**\n+ * The Test Class for SnmpCollector with MIB Object Properties.\n+ */\n+@RunWith(OpenNMSJUnit4ClassRunner.class)\n+@ContextConfiguration(locations={\n+        \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-minimal-conf.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-soa.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-mockDao.xml\",\n+        \"classpath*:/META-INF/opennms/component-dao.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-pinger.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-daemon.xml\",\n+        \"classpath:/META-INF/opennms/mockEventIpcManager.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-proxy-snmp.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPollerConfigDaos.xml\"\n+})\n+@JUnitConfigurationEnvironment(systemProperties=\"org.opennms.rrd.storeByGroup=false\")\n+@JUnitTemporaryDatabase(reuseDatabase=false) // Relies on records created in @Before so we need a fresh database for each test\n+public class SnmpCollectorWithPointerLikeExtendedPropertiesIT implements InitializingBean, TestContextAware {\n+\n+    /** The Constant TEST_NODE_LABEL. */\n+    private final static String TEST_NODE_LABEL = \"sample.local\"; \n+\n+    /** The platform transaction manager. */\n+    @Autowired\n+    private PlatformTransactionManager m_transactionManager;\n+\n+    /** The Node DAO. */\n+    @Autowired\n+    private NodeDao m_nodeDao;\n+\n+    /** The IP interface DAO. */\n+    @Autowired\n+    private IpInterfaceDao m_ipInterfaceDao;\n+\n+    /** The SNMP peer factory. */\n+    @Autowired\n+    private SnmpPeerFactory m_snmpPeerFactory;\n+\n+    @Autowired\n+    private ReadablePollOutagesDao m_pollOutagesDao;\n+\n+    /** The context. */\n+    private TestContext m_context;\n+\n+    /** The test host name. */\n+    private String m_testHostName;\n+\n+    /** The collection specification. */\n+    private CollectionSpecification m_collectionSpecification;\n+\n+    /** The collection agent. */\n+    private SnmpCollectionAgent m_collectionAgent;\n+\n+    /** The RRD strategy. */\n+    private RrdStrategy<?, ?> m_rrdStrategy;\n+\n+    /** The resource storage DAO. */\n+    private FilesystemResourceStorageDao m_resourceStorageDao;\n+\n+    /* (non-Javadoc)\n+     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n+     */\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        BeanUtils.assertAutowiring(this);\n+    }\n+\n+    /**\n+     * Sets up the test.\n+     *\n+     * @throws Exception the exception\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        MockServiceCollector.setDelegate(null);\n+        MockLogAppender.setupLogging();\n+\n+        m_rrdStrategy = new JRobinRrdStrategy();\n+\n+        m_resourceStorageDao = new FilesystemResourceStorageDao();\n+        File snmpRrdDirectory = (File)m_context.getAttribute(\"rrdDirectory\");\n+        m_resourceStorageDao.setRrdDirectory(snmpRrdDirectory.getParentFile());\n+\n+        m_testHostName = InetAddressUtils.str(InetAddress.getLocalHost());\n+\n+        OnmsIpInterface iface = null;\n+        OnmsNode testNode = null;\n+        Collection<OnmsNode> testNodes = m_nodeDao.findByLabel(TEST_NODE_LABEL);\n+        if (testNodes == null || testNodes.size() < 1) {\n+            NetworkBuilder builder = new NetworkBuilder();\n+            builder.addNode(TEST_NODE_LABEL).setId(1).setSysObjectId(\".1.3.6.1.4.1.9.1.1208\");\n+            builder.addSnmpInterface(1).setIfName(\"Vl1\").setPhysAddr(\"de:ad:be:ef:ca:01\").setIfType(6).setCollectionEnabled(true).addIpInterface(m_testHostName).setIsSnmpPrimary(\"P\");\n+            builder.addSnmpInterface(10146).setIfName(\"Gi1/0/46\").setPhysAddr(\"de:ad:be:ef:ca:32\").setIfType(6).setCollectionEnabled(true).addIpInterface(\"10.0.46.1\").setIsSnmpPrimary(\"N\");\n+            builder.addSnmpInterface(10152).setIfName(\"Gi1/0/52\").setPhysAddr(\"de:ad:be:ef:ca:38\").setIfType(6).setCollectionEnabled(true).addIpInterface(\"10.0.52.1\").setIsSnmpPrimary(\"N\");\n+            testNode = builder.getCurrentNode();\n+            assertNotNull(testNode);\n+            m_nodeDao.save(testNode);\n+            m_nodeDao.flush();\n+        } else {\n+            testNode = testNodes.iterator().next();\n+        }\n+\n+        Set<OnmsIpInterface> ifaces = testNode.getIpInterfaces();\n+        assertEquals(3, ifaces.size());\n+        iface = ifaces.iterator().next();\n+\n+        SnmpPeerFactory.setInstance(m_snmpPeerFactory);\n+\n+        SnmpCollector collector = new SnmpCollector();\n+        collector.initialize();\n+\n+        m_collectionSpecification = CollectorTestUtils.createCollectionSpec(\"SNMP\", collector, \"default\",\n+                m_pollOutagesDao);\n+        m_collectionAgent = DefaultSnmpCollectionAgent.create(iface.getId(), m_ipInterfaceDao, m_transactionManager);\n+    }\n+\n+    /**\n+     * Tears down the test.\n+     *\n+     * @throws Exception the exception\n+     */\n+    @After\n+    public void tearDown() throws Exception {\n+        MockUtil.println(\"------------ End Test --------------------------\");\n+        MockLogAppender.assertNoWarningsOrGreater();\n+    }\n+\n+    /**\n+     * Test collection for dot1d-bridge base port entry with indirectly-referenced property", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3OTUxNw==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501879517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * pulled over from ifTable, using the value of dot1dBasePortIfIndex as a pointer\n          \n          \n            \n                 * pulled over from ifTable, using the value of dot1dBasePortIfIndex as a pointer.", "author": "Bonrob2", "createdAt": "2020-10-08T17:10:34Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.collectd;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.File;\n+import java.net.InetAddress;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.opennms.core.collection.test.JUnitCollector;\n+import org.opennms.core.spring.BeanUtils;\n+import org.opennms.core.test.MockLogAppender;\n+import org.opennms.core.test.OpenNMSJUnit4ClassRunner;\n+import org.opennms.core.test.TestContextAware;\n+import org.opennms.core.test.db.annotations.JUnitTemporaryDatabase;\n+import org.opennms.core.test.snmp.annotations.JUnitSnmpAgent;\n+import org.opennms.core.utils.InetAddressUtils;\n+import org.opennms.netmgt.collection.api.CollectionSet;\n+import org.opennms.netmgt.collection.api.CollectionStatus;\n+import org.opennms.netmgt.collection.core.CollectionSpecification;\n+import org.opennms.netmgt.collection.test.api.CollectorTestUtils;\n+import org.opennms.netmgt.config.SnmpPeerFactory;\n+import org.opennms.netmgt.config.dao.outages.api.ReadablePollOutagesDao;\n+import org.opennms.netmgt.dao.api.IpInterfaceDao;\n+import org.opennms.netmgt.dao.api.NodeDao;\n+import org.opennms.netmgt.dao.support.FilesystemResourceStorageDao;\n+import org.opennms.netmgt.model.NetworkBuilder;\n+import org.opennms.netmgt.model.OnmsIpInterface;\n+import org.opennms.netmgt.model.OnmsNode;\n+import org.opennms.netmgt.model.ResourcePath;\n+import org.opennms.netmgt.rrd.RrdStrategy;\n+import org.opennms.netmgt.rrd.jrobin.JRobinRrdStrategy;\n+import org.opennms.test.JUnitConfigurationEnvironment;\n+import org.opennms.test.mock.MockUtil;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestContext;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+/**\n+ * The Test Class for SnmpCollector with MIB Object Properties.\n+ */\n+@RunWith(OpenNMSJUnit4ClassRunner.class)\n+@ContextConfiguration(locations={\n+        \"classpath:/META-INF/opennms/applicationContext-commonConfigs.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-minimal-conf.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-soa.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-mockDao.xml\",\n+        \"classpath*:/META-INF/opennms/component-dao.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-pinger.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-daemon.xml\",\n+        \"classpath:/META-INF/opennms/mockEventIpcManager.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-proxy-snmp.xml\",\n+        \"classpath:/META-INF/opennms/applicationContext-testPollerConfigDaos.xml\"\n+})\n+@JUnitConfigurationEnvironment(systemProperties=\"org.opennms.rrd.storeByGroup=false\")\n+@JUnitTemporaryDatabase(reuseDatabase=false) // Relies on records created in @Before so we need a fresh database for each test\n+public class SnmpCollectorWithPointerLikeExtendedPropertiesIT implements InitializingBean, TestContextAware {\n+\n+    /** The Constant TEST_NODE_LABEL. */\n+    private final static String TEST_NODE_LABEL = \"sample.local\"; \n+\n+    /** The platform transaction manager. */\n+    @Autowired\n+    private PlatformTransactionManager m_transactionManager;\n+\n+    /** The Node DAO. */\n+    @Autowired\n+    private NodeDao m_nodeDao;\n+\n+    /** The IP interface DAO. */\n+    @Autowired\n+    private IpInterfaceDao m_ipInterfaceDao;\n+\n+    /** The SNMP peer factory. */\n+    @Autowired\n+    private SnmpPeerFactory m_snmpPeerFactory;\n+\n+    @Autowired\n+    private ReadablePollOutagesDao m_pollOutagesDao;\n+\n+    /** The context. */\n+    private TestContext m_context;\n+\n+    /** The test host name. */\n+    private String m_testHostName;\n+\n+    /** The collection specification. */\n+    private CollectionSpecification m_collectionSpecification;\n+\n+    /** The collection agent. */\n+    private SnmpCollectionAgent m_collectionAgent;\n+\n+    /** The RRD strategy. */\n+    private RrdStrategy<?, ?> m_rrdStrategy;\n+\n+    /** The resource storage DAO. */\n+    private FilesystemResourceStorageDao m_resourceStorageDao;\n+\n+    /* (non-Javadoc)\n+     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()\n+     */\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        BeanUtils.assertAutowiring(this);\n+    }\n+\n+    /**\n+     * Sets up the test.\n+     *\n+     * @throws Exception the exception\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        MockServiceCollector.setDelegate(null);\n+        MockLogAppender.setupLogging();\n+\n+        m_rrdStrategy = new JRobinRrdStrategy();\n+\n+        m_resourceStorageDao = new FilesystemResourceStorageDao();\n+        File snmpRrdDirectory = (File)m_context.getAttribute(\"rrdDirectory\");\n+        m_resourceStorageDao.setRrdDirectory(snmpRrdDirectory.getParentFile());\n+\n+        m_testHostName = InetAddressUtils.str(InetAddress.getLocalHost());\n+\n+        OnmsIpInterface iface = null;\n+        OnmsNode testNode = null;\n+        Collection<OnmsNode> testNodes = m_nodeDao.findByLabel(TEST_NODE_LABEL);\n+        if (testNodes == null || testNodes.size() < 1) {\n+            NetworkBuilder builder = new NetworkBuilder();\n+            builder.addNode(TEST_NODE_LABEL).setId(1).setSysObjectId(\".1.3.6.1.4.1.9.1.1208\");\n+            builder.addSnmpInterface(1).setIfName(\"Vl1\").setPhysAddr(\"de:ad:be:ef:ca:01\").setIfType(6).setCollectionEnabled(true).addIpInterface(m_testHostName).setIsSnmpPrimary(\"P\");\n+            builder.addSnmpInterface(10146).setIfName(\"Gi1/0/46\").setPhysAddr(\"de:ad:be:ef:ca:32\").setIfType(6).setCollectionEnabled(true).addIpInterface(\"10.0.46.1\").setIsSnmpPrimary(\"N\");\n+            builder.addSnmpInterface(10152).setIfName(\"Gi1/0/52\").setPhysAddr(\"de:ad:be:ef:ca:38\").setIfType(6).setCollectionEnabled(true).addIpInterface(\"10.0.52.1\").setIsSnmpPrimary(\"N\");\n+            testNode = builder.getCurrentNode();\n+            assertNotNull(testNode);\n+            m_nodeDao.save(testNode);\n+            m_nodeDao.flush();\n+        } else {\n+            testNode = testNodes.iterator().next();\n+        }\n+\n+        Set<OnmsIpInterface> ifaces = testNode.getIpInterfaces();\n+        assertEquals(3, ifaces.size());\n+        iface = ifaces.iterator().next();\n+\n+        SnmpPeerFactory.setInstance(m_snmpPeerFactory);\n+\n+        SnmpCollector collector = new SnmpCollector();\n+        collector.initialize();\n+\n+        m_collectionSpecification = CollectorTestUtils.createCollectionSpec(\"SNMP\", collector, \"default\",\n+                m_pollOutagesDao);\n+        m_collectionAgent = DefaultSnmpCollectionAgent.create(iface.getId(), m_ipInterfaceDao, m_transactionManager);\n+    }\n+\n+    /**\n+     * Tears down the test.\n+     *\n+     * @throws Exception the exception\n+     */\n+    @After\n+    public void tearDown() throws Exception {\n+        MockUtil.println(\"------------ End Test --------------------------\");\n+        MockLogAppender.assertNoWarningsOrGreater();\n+    }\n+\n+    /**\n+     * Test collection for dot1d-bridge base port entry with indirectly-referenced property\n+     * pulled over from ifTable, using the value of dot1dBasePortIfIndex as a pointer", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MDExOQ==", "url": "https://github.com/OpenNMS/opennms/pull/3181#discussion_r501880119", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throwsException the exception\n          \n          \n            \n                 * @throws Exception the exception\n          \n      \n    \n    \n  \n\nElsewhere there is a space between @throws and Exception. Not sure if this is syntactically necessary.", "author": "Bonrob2", "createdAt": "2020-10-08T17:11:33Z", "path": "opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java", "diffHunk": "@@ -242,6 +242,52 @@ public void testCollectCiscoQoS() throws Exception {\n         assertEquals(\"GESTION-ROUTING\", map.get(\"cbQosClassMapName\"));\n         assertEquals(\"Conexion Valencia\", map.get(\"ifAlias\"));\n     }\n+    \n+    /**\n+     * Test collection for Cisco memory-pool entry with indirectly-referenced property\n+     * pulled over from entPhysicalTable\n+     * \n+     * @throwsException the exception\n+     */\n+    @Test\n+    @JUnitCollector(datacollectionType = \"snmp\", datacollectionConfig = \"/org/opennms/netmgt/config/datacollection-config-cisco-mempool.xml\")\n+    @JUnitSnmpAgent(resource = \"/org/opennms/netmgt/snmp/cisco-mempool-snmpwalk.properties\")\n+    public void testCollectionCiscoMemPoolVsEntPhysical() throws Exception {\n+        System.setProperty(\"org.opennms.netmgt.collectd.SnmpCollector.limitCollectionToInstances\", \"true\");\n+        \n+        CollectionSet collectionSet = m_collectionSpecification.collect(m_collectionAgent);\n+        assertEquals(\"collection status\", CollectionStatus.SUCCEEDED, collectionSet.getStatus());\n+        CollectorTestUtils.persistCollectionSet(m_rrdStrategy, m_resourceStorageDao, m_collectionSpecification, collectionSet);\n+        \n+        Map<String, String> map = m_resourceStorageDao.getStringAttributes(ResourcePath.get(\"snmp\", \"1\", \"cempMemoryPool\", \"1.1\"));\n+        assertEquals(\"Processor\", map.get(\"cempMemoryPoolName\"));\n+        assertEquals(\"CISCO2911/K9\", map.get(\"cempMemoryPoolPhysName\"));\n+        assertEquals(\"CISCO2911/K9 chassis, Hw Serial#: FCZ161870SC, Hw Revision: 1.0\", map.get(\"cempMemoryPoolPhysDescr\"));\n+        \n+        map = m_resourceStorageDao.getStringAttributes(ResourcePath.get(\"snmp\", \"1\", \"cempMemoryPool\", \"1.2\"));\n+        assertEquals(\"CISCO2911/K9\", map.get(\"cempMemoryPoolPhysName\"));\n+        assertEquals(\"CISCO2911/K9 chassis, Hw Serial#: FCZ161870SC, Hw Revision: 1.0\", map.get(\"cempMemoryPoolPhysDescr\"));\n+    }\n+\n+    /**\n+     * Test enum-lookup property extender against values of dot1dStpPortState\n+     *\n+     * @throwsException the exception", "originalCommit": "f1e70a548b6215e8b2e407634a1e90381cd0ed8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "93543af84443d8f783a5d798bf3c0591d210fb7c", "url": "https://github.com/OpenNMS/opennms/commit/93543af84443d8f783a5d798bf3c0591d210fb7c", "message": "NMS-8484: Make usage of RegexPropertyExtender explicit despite it being\nthe default class.", "committedDate": "2020-10-08T18:16:30Z", "type": "commit"}, {"oid": "ecc1dc93730a835cc8a7ef996ca536ad5eaccb6a", "url": "https://github.com/OpenNMS/opennms/commit/ecc1dc93730a835cc8a7ef996ca536ad5eaccb6a", "message": "Update features/collection/snmp-collector/src/main/java/org/opennms/netmgt/collectd/EnumLookupPropertyExtender.java\r\n\r\nWhitespace copy-edit\n\nCo-authored-by: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>", "committedDate": "2020-10-08T18:19:46Z", "type": "commit"}, {"oid": "3684179067489ae1209c3487c5c89a3a8efd50f9", "url": "https://github.com/OpenNMS/opennms/commit/3684179067489ae1209c3487c5c89a3a8efd50f9", "message": "Update opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java\n\nCo-authored-by: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>", "committedDate": "2020-10-08T18:21:08Z", "type": "commit"}, {"oid": "41c8137a38274c95362afa239ab7949f290433f0", "url": "https://github.com/OpenNMS/opennms/commit/41c8137a38274c95362afa239ab7949f290433f0", "message": "Update opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java\n\nCo-authored-by: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>", "committedDate": "2020-10-08T18:21:25Z", "type": "commit"}, {"oid": "d65d78d9b62d559e9ffe3d55e2de7ba49be5ea87", "url": "https://github.com/OpenNMS/opennms/commit/d65d78d9b62d559e9ffe3d55e2de7ba49be5ea87", "message": "Update opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithPointerLikeExtendedPropertiesIT.java\n\nCo-authored-by: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>", "committedDate": "2020-10-08T18:21:36Z", "type": "commit"}, {"oid": "7e991c10414ce29eb368091c377a31cde70afe96", "url": "https://github.com/OpenNMS/opennms/commit/7e991c10414ce29eb368091c377a31cde70afe96", "message": "Update opennms-services/src/test/java/org/opennms/netmgt/collectd/SnmpCollectorWithMibPropertiesIT.java\n\nCo-authored-by: Bonrob2 <59453630+Bonrob2@users.noreply.github.com>", "committedDate": "2020-10-08T18:26:37Z", "type": "commit"}, {"oid": "c6ebe651eebea78fe34d403e994a3807f30a2856", "url": "https://github.com/OpenNMS/opennms/commit/c6ebe651eebea78fe34d403e994a3807f30a2856", "message": "NMS-8484: Fix another accidental check-style violation introduced in review", "committedDate": "2020-10-08T19:07:59Z", "type": "commit"}]}