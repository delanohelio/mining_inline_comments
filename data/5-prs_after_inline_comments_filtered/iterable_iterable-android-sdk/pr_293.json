{"pr_number": 293, "pr_title": "[MOB-2150] - Request Serialization", "pr_createdAt": "2020-12-07T16:32:20Z", "pr_url": "https://github.com/Iterable/iterable-android-sdk/pull/293", "timeline": [{"oid": "04d3af9abaecbf23ed7e7f1dfe785b3b17795522", "url": "https://github.com/Iterable/iterable-android-sdk/commit/04d3af9abaecbf23ed7e7f1dfe785b3b17795522", "message": "[MOB-2150] - Request Serialization\n\n1. Added from JSON and toJSON to IterableApiRequest class.\n2. Added temporary task schedular code in offline request processor to see if it can form the request from the database", "committedDate": "2020-12-07T17:46:54Z", "type": "forcePushed"}, {"oid": "be68baaa4f40107b3a398dcbd1fdf796b4774d9d", "url": "https://github.com/Iterable/iterable-android-sdk/commit/be68baaa4f40107b3a398dcbd1fdf796b4774d9d", "message": "[MOB-2150] - Request Serialization\n\n1. Added from JSON and toJSON to IterableApiRequest class.\n2. Added temporary task schedular code in offline request processor to see if it can form the request from the database", "committedDate": "2020-12-07T17:53:48Z", "type": "forcePushed"}, {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549", "url": "https://github.com/Iterable/iterable-android-sdk/commit/a421a559c0378eb79e1d5946bc23f64f6275b549", "message": "[MOB-2150] - Request Serialization\n\n1. Added from JSON and toJSON to IterableApiRequest class.\n2. Added temporary task schedular code in offline request processor to see if it can form the request from the database", "committedDate": "2020-12-07T17:55:55Z", "type": "commit"}, {"oid": "a421a559c0378eb79e1d5946bc23f64f6275b549", "url": "https://github.com/Iterable/iterable-android-sdk/commit/a421a559c0378eb79e1d5946bc23f64f6275b549", "message": "[MOB-2150] - Request Serialization\n\n1. Added from JSON and toJSON to IterableApiRequest class.\n2. Added temporary task schedular code in offline request processor to see if it can form the request from the database", "committedDate": "2020-12-07T17:55:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNDAwMw==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537824003", "bodyText": "The names auth and authToken imply different things.. I would expect auth to include email, userId and authToken.", "author": "vbabenkoru", "createdAt": "2020-12-07T20:52:07Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "diffHunk": "@@ -338,4 +340,31 @@ protected void setRetryCount(int count) {\n         this.authToken = authToken;\n         this.legacyCallback = callback;\n     }\n+\n+    public JSONObject toJSONObject() throws JSONException {\n+        JSONObject jsonObject = new JSONObject();\n+        jsonObject.put(\"apiKey\", this.apiKey);\n+        jsonObject.put(\"endPoint\", this.resourcePath);\n+        jsonObject.put(\"auth\", this.authToken);", "originalCommit": "a421a559c0378eb79e1d5946bc23f64f6275b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNDU5NQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537824595", "bodyText": "auth itself is an ambiguous term.. Is it auth data? Is it a flag? Is it a token?", "author": "vbabenkoru", "createdAt": "2020-12-07T20:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNDAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNTMxMA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537825310", "bodyText": "Is this deferred to a separate PR?", "author": "vbabenkoru", "createdAt": "2020-12-07T20:54:09Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database", "originalCommit": "a421a559c0378eb79e1d5946bc23f64f6275b549", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjIxNQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537826215", "bodyText": "Can we pass IterableTaskManager as a dependency to this class? This call looks weird.", "author": "vbabenkoru", "createdAt": "2020-12-07T20:55:39Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+\n+class TaskScheduler {\n+    private final String TAG = \"RequestProcessor\";\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject iterableRequestOffline = null;\n+        try {\n+            iterableRequestOffline = request.toJSONObject();\n+        } catch (JSONException e) {\n+            IterableLogger.e(TAG, \"Failed serializating the request for offline execution. Attempting to request the request now...\");\n+            new IterableRequest().execute(request);\n+            return;\n+        }\n+\n+        String taskId = taskManager.createTask(request.resourcePath, IterableTaskType.API, iterableRequestOffline.toString());\n+\n+        successCallbackMap.put(taskId, onSuccess);\n+        failureCallbackMap.put(taskId,onFailure);\n+\n+        processTask();\n+    }\n+\n+    //Temporary function to convert database offline task to ITerableReuqest and execute.\n+    void processTask() {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());", "originalCommit": "a421a559c0378eb79e1d5946bc23f64f6275b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5OTQ2MA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r538699460", "bodyText": "This will eventually be singly invoked during initialization", "author": "Ayyanchira", "createdAt": "2020-12-08T18:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjYxOA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537826618", "bodyText": "I like this approach", "author": "vbabenkoru", "createdAt": "2020-12-07T20:56:22Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+\n+class TaskScheduler {\n+    private final String TAG = \"RequestProcessor\";\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject iterableRequestOffline = null;\n+        try {\n+            iterableRequestOffline = request.toJSONObject();\n+        } catch (JSONException e) {\n+            IterableLogger.e(TAG, \"Failed serializating the request for offline execution. Attempting to request the request now...\");\n+            new IterableRequest().execute(request);\n+            return;\n+        }\n+\n+        String taskId = taskManager.createTask(request.resourcePath, IterableTaskType.API, iterableRequestOffline.toString());\n+\n+        successCallbackMap.put(taskId, onSuccess);\n+        failureCallbackMap.put(taskId,onFailure);\n+\n+        processTask();\n+    }\n+\n+    //Temporary function to convert database offline task to ITerableReuqest and execute.", "originalCommit": "a421a559c0378eb79e1d5946bc23f64f6275b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3MDgyNg==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537970826", "bodyText": "\ud83d\ude42", "author": "Ayyanchira", "createdAt": "2020-12-08T01:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjkzNw==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r537826937", "bodyText": "The name of this variable isn't very clear", "author": "vbabenkoru", "createdAt": "2020-12-07T20:56:54Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,77 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.gms.tasks.Task;\n+\n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+\n+class TaskScheduler {\n+    private final String TAG = \"RequestProcessor\";\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject iterableRequestOffline = null;\n+        try {\n+            iterableRequestOffline = request.toJSONObject();", "originalCommit": "a421a559c0378eb79e1d5946bc23f64f6275b549", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c89b7a4a28ad7af02ba32bf3a85e18f572f164f2", "url": "https://github.com/Iterable/iterable-android-sdk/commit/c89b7a4a28ad7af02ba32bf3a85e18f572f164f2", "message": "Revision 1\n\n1. Added test methods\n2. Renamed variables as discussed", "committedDate": "2020-12-08T01:52:35Z", "type": "forcePushed"}, {"oid": "8f4c887e47de67c934e9f6c0fddc04e64fdc6a3b", "url": "https://github.com/Iterable/iterable-android-sdk/commit/8f4c887e47de67c934e9f6c0fddc04e64fdc6a3b", "message": "Revision 1\n\n1. Added test methods\n2. Renamed variables as discussed", "committedDate": "2020-12-08T01:56:06Z", "type": "forcePushed"}, {"oid": "56a47ed4e80847158db219546b1bb441fe05530e", "url": "https://github.com/Iterable/iterable-android-sdk/commit/56a47ed4e80847158db219546b1bb441fe05530e", "message": "Revision 1\n\n1. Added test methods\n2. Renamed variables as discussed", "committedDate": "2020-12-08T01:58:37Z", "type": "forcePushed"}, {"oid": "2a4b22714a65fbbf2b82f4c797ffbfc31f9c6e2a", "url": "https://github.com/Iterable/iterable-android-sdk/commit/2a4b22714a65fbbf2b82f4c797ffbfc31f9c6e2a", "message": "Revision 1\n\n1. Added test methods\n2. Renamed variables as discussed", "committedDate": "2020-12-08T02:02:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0NjY3Ng==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r538046676", "bodyText": "Same as in the first review.. does it have to be auth?", "author": "vbabenkoru", "createdAt": "2020-12-08T05:30:38Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "diffHunk": "@@ -338,4 +340,31 @@ protected void setRetryCount(int count) {\n         this.authToken = authToken;\n         this.legacyCallback = callback;\n     }\n+\n+    public JSONObject toJSONObject() throws JSONException {\n+        JSONObject jsonObject = new JSONObject();\n+        jsonObject.put(\"apiKey\", this.apiKey);\n+        jsonObject.put(\"endPoint\", this.resourcePath);\n+        jsonObject.put(\"authToken\", this.authToken);\n+        jsonObject.put(\"requestType\", this.requestType);\n+        jsonObject.put(\"data\", this.json);\n+        return jsonObject;\n+    }\n+\n+    static IterableApiRequest fromJSON(JSONObject jsonData, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        try {\n+            String apikey = jsonData.getString(\"apiKey\");\n+            String resourcePath = jsonData.getString(\"endPoint\");\n+            String requestType = jsonData.getString(\"requestType\");\n+            String auth = \"\";", "originalCommit": "2a4b22714a65fbbf2b82f4c797ffbfc31f9c6e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0Nzg5Mg==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r538047892", "bodyText": "Is this an iOS name? Why is it different than resourcePath?", "author": "vbabenkoru", "createdAt": "2020-12-08T05:33:59Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableRequest.java", "diffHunk": "@@ -338,4 +340,31 @@ protected void setRetryCount(int count) {\n         this.authToken = authToken;\n         this.legacyCallback = callback;\n     }\n+\n+    public JSONObject toJSONObject() throws JSONException {\n+        JSONObject jsonObject = new JSONObject();\n+        jsonObject.put(\"apiKey\", this.apiKey);\n+        jsonObject.put(\"endPoint\", this.resourcePath);", "originalCommit": "2a4b22714a65fbbf2b82f4c797ffbfc31f9c6e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "94ec5152f53a413cfa848299e0507796f1c58467", "url": "https://github.com/Iterable/iterable-android-sdk/commit/94ec5152f53a413cfa848299e0507796f1c58467", "message": "Revision 1\n\n1. Added test methods\n2. Renamed variables as discussed", "committedDate": "2020-12-08T07:36:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTEwNQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/293#discussion_r538999105", "bodyText": "formatting", "author": "vbabenkoru", "createdAt": "2020-12-09T04:35:08Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/OfflineRequestProcessor.java", "diffHunk": "@@ -3,17 +3,74 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n public class OfflineRequestProcessor implements RequestProcessor {\n \n+\n     @Override\n     public void processGetRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.IterableActionHandler onCallback) {\n-\n+        //Invoke taskScheduler and add task to database\n     }\n \n     @Override\n     public void processPostRequest(@Nullable String apiKey, @NonNull String resourcePath, @NonNull JSONObject json, String authToken, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableApiRequest request = new IterableApiRequest(apiKey, resourcePath, json, IterableApiRequest.POST, authToken, onSuccess, onFailure);\n+        TaskScheduler taskScheduler = new TaskScheduler();\n+        taskScheduler.scheduleTask(request, onSuccess, onFailure);\n+    }\n+}\n+\n+//Placeholder Taskschedular for testing purpose.\n+class TaskScheduler {\n+\n+    static HashMap<String, IterableHelper.SuccessHandler> successCallbackMap = new HashMap<>();\n+    static HashMap<String, IterableHelper.FailureHandler> failureCallbackMap = new HashMap<>();\n+\n+    void scheduleTask(IterableApiRequest request, @Nullable IterableHelper.SuccessHandler onSuccess, @Nullable IterableHelper.FailureHandler onFailure) {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        JSONObject serializedRequest = null;\n+        try {\n+            serializedRequest = request.toJSONObject();\n+        } catch (JSONException e) {\n+            IterableLogger.e(\"RequestProcessor\", \"Failed serializating the request for offline execution. Attempting to request the request now...\");\n+            new IterableRequest().execute(request);\n+            return;\n+        }\n+\n+        String taskId = taskManager.createTask(request.resourcePath, IterableTaskType.API, serializedRequest.toString());\n+\n+        successCallbackMap.put(taskId, onSuccess);\n+        failureCallbackMap.put(taskId, onFailure);\n+\n+        processTasks();\n+    }\n+\n+    //Temporary function to convert database offline task to ITerableReuqest and execute.\n+    void processTasks() {\n+        IterableTaskManager taskManager = IterableTaskManager.sharedInstance(IterableApi.getInstance().getMainActivityContext());\n+        ArrayList<String> taskIds = taskManager.getAllTaskIds();\n+        for (String id : taskIds\n+        ) {", "originalCommit": "94ec5152f53a413cfa848299e0507796f1c58467", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7c43cd0a60a1484762be178c64985709cea5b986", "url": "https://github.com/Iterable/iterable-android-sdk/commit/7c43cd0a60a1484762be178c64985709cea5b986", "message": "Revision 1\n\n1. Added test methods\n2. Renamed variables as discussed", "committedDate": "2020-12-09T19:45:50Z", "type": "commit"}, {"oid": "7c43cd0a60a1484762be178c64985709cea5b986", "url": "https://github.com/Iterable/iterable-android-sdk/commit/7c43cd0a60a1484762be178c64985709cea5b986", "message": "Revision 1\n\n1. Added test methods\n2. Renamed variables as discussed", "committedDate": "2020-12-09T19:45:50Z", "type": "forcePushed"}]}