{"pr_number": 241, "pr_title": "Selectively store anomaly results when index pressure is high", "pr_createdAt": "2020-10-07T21:06:59Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MzIyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r502093229", "bodyText": "You may refactor this constructor to\npublic AnomalyDetector(....,lastUpdateTime) {\n     new AnomalyDetector(....,lastUpdateTime, null);\n}", "author": "yizheliu-amazon", "createdAt": "2020-10-09T00:28:29Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -151,6 +210,7 @@ public AnomalyDetector(\n         this.uiMetadata = uiMetadata;\n         this.schemaVersion = schemaVersion;\n         this.lastUpdateTime = lastUpdateTime;\n+        this.categoryField = null;", "originalCommit": "6c9214152b9256fee439dd545f942ad831aee1aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NDUwNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r503474504", "bodyText": "Yes, changed.", "author": "kaituo", "createdAt": "2020-10-12T18:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MzIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MzU1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r502093553", "bodyText": "same comment as above to refactor constructor", "author": "yizheliu-amazon", "createdAt": "2020-10-09T00:29:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyResult.java", "diffHunk": "@@ -91,6 +95,55 @@ public AnomalyResult(\n         this.executionStartTime = executionStartTime;\n         this.executionEndTime = executionEndTime;\n         this.error = error;\n+        this.entity = null;", "originalCommit": "6c9214152b9256fee439dd545f942ad831aee1aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3ODMyOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r503478328", "bodyText": "changed", "author": "kaituo", "createdAt": "2020-10-12T18:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA5MzU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0MDA4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r502240085", "bodyText": "This PR has some overlap with #240 ?", "author": "ylwu-amzn", "createdAt": "2020-10-09T07:31:35Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -105,7 +109,62 @@\n      * @param uiMetadata        metadata used by Kibana\n      * @param schemaVersion     anomaly detector index mapping version\n      * @param lastUpdateTime    detector's last update time\n+     * @param categoryField     a list of partition fields\n      */\n+    public AnomalyDetector(", "originalCommit": "6c9214152b9256fee439dd545f942ad831aee1aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NDcyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r503474721", "bodyText": "Yes, they have common dependencies.", "author": "kaituo", "createdAt": "2020-10-12T18:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0MDA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0NTQ4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r502245481", "bodyText": "How about we move this logic to detector constructor\uff1fAlways set shingle size as default value if it's null. Then this get method can return shingleSize directly; and we should persist shingle size in detector document even it's default shingle size in case the default shingle size changes in future.", "author": "ylwu-amzn", "createdAt": "2020-10-09T07:42:40Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/AnomalyDetector.java", "diffHunk": "@@ -428,7 +497,9 @@ public TimeConfiguration getWindowDelay() {\n     }\n \n     public Integer getShingleSize() {\n-        return shingleSize == null ? DEFAULT_SHINGLE_SIZE : shingleSize;\n+        return shingleSize == null", "originalCommit": "6c9214152b9256fee439dd545f942ad831aee1aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NzU1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r503477555", "bodyText": "good idea.  Changed.", "author": "kaituo", "createdAt": "2020-10-12T18:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI0NTQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NTA1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r502255057", "bodyText": "name is category field name and value is the entity's unique value? For example, name will be \"IP\" and value will be 53.230.198.42 ?\nIs it necessary to store same name for every AD result doc ? As high cardinality detector will generate too much AD results, I think it will save some disk usage if we remove such duplicate information (same for feature data).", "author": "ylwu-amzn", "createdAt": "2020-10-09T08:00:58Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/Entity.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.model;\n+\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContentObject;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+\n+import com.amazon.opendistroforelasticsearch.ad.annotation.Generated;\n+import com.google.common.base.Objects;\n+\n+/**\n+ * Categorical field name and its value\n+ * @author kaituo\n+ *\n+ */\n+public class Entity implements ToXContentObject, Writeable {\n+    public static final String ENTITY_NAME_FIELD = \"name\";\n+    public static final String ENTITY_VALUE_FIELD = \"value\";\n+\n+    private final String name;", "originalCommit": "6c9214152b9256fee439dd545f942ad831aee1aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MDY5MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r503480690", "bodyText": "yes, your understanding is correct.  I am mostly doing this for the future: in case we have multiple categorical fields and the parser knows which value belongs to which field.  Open to change if we have a solution.", "author": "kaituo", "createdAt": "2020-10-12T19:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5OTA2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r503499065", "bodyText": "Let's keep it as is currently. Remove these duplicate fields needs some snapshot mechanism to track the old version of detector configuration. Let's discuss more to make a decision.", "author": "ylwu-amzn", "createdAt": "2020-10-12T19:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NTA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NTIwNw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r502265207", "bodyText": "Check bulk request size, if no anomaly result, no need to execute bulk index.", "author": "ylwu-amzn", "createdAt": "2020-10-09T08:18:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADResultBulkTransportAction.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.INDEX_PRESSURE_SOFT_LIMIT;\n+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n+import static org.elasticsearch.index.IndexingPressure.MAX_INDEXING_BYTES;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.bulk.BulkAction;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.index.IndexingPressure;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+\n+public class ADResultBulkTransportAction extends HandledTransportAction<ADResultBulkRequest, BulkResponse> {\n+\n+    private static final Logger LOG = LogManager.getLogger(ADResultBulkAction.class);\n+    private IndexingPressure indexingPressure;\n+    private final long primaryAndCoordinatingLimits;\n+    private float softLimit;\n+    private String indexName;\n+    private Client client;\n+\n+    @Inject\n+    public ADResultBulkTransportAction(\n+        TransportService transportService,\n+        ActionFilters actionFilters,\n+        IndexingPressure indexingPressure,\n+        Settings settings,\n+        ClusterService clusterService,\n+        Client client\n+    ) {\n+        super(ADResultBulkAction.NAME, transportService, actionFilters, ADResultBulkRequest::new, ThreadPool.Names.SAME);\n+        this.indexingPressure = indexingPressure;\n+        this.primaryAndCoordinatingLimits = MAX_INDEXING_BYTES.get(settings).getBytes();\n+        this.softLimit = INDEX_PRESSURE_SOFT_LIMIT.get(settings);\n+        this.indexName = CommonName.ANOMALY_RESULT_INDEX_ALIAS;\n+        this.client = client;\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(INDEX_PRESSURE_SOFT_LIMIT, it -> softLimit = it);\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, ADResultBulkRequest request, ActionListener<BulkResponse> listener) {\n+        // Concurrent indexing memory limit = 10% of heap\n+        // indexing pressure = indexing bytes / indexing limit\n+        // Write all until index pressure (global indexing memory pressure) is less than 80% of 10% of heap. Otherwise, index\n+        // all non-zero anomaly grade index requests and index zero anomaly grade index requests with probability (1 - index pressure).\n+        long totalBytes = indexingPressure.getCurrentCombinedCoordinatingAndPrimaryBytes() + indexingPressure.getCurrentReplicaBytes();\n+        LOG.info(primaryAndCoordinatingLimits + \" \" + totalBytes);\n+        float indexingPressurePercent = (float) totalBytes / primaryAndCoordinatingLimits;\n+\n+        BulkRequest bulkRequest = new BulkRequest();\n+\n+        if (indexingPressurePercent <= softLimit) {\n+            for (AnomalyResult result : request.getAnomalyResults()) {\n+                addResult(bulkRequest, result);\n+            }\n+        } else if (Float.compare(indexingPressurePercent, 1.0f) < 0) {\n+            // exceed soft limit (80%) but smaller than hard limit (100%)\n+            // random seed is 42. Can be any number\n+            Random random = new Random(42);\n+            float acceptProbability = 1 - indexingPressurePercent;\n+            for (AnomalyResult result : request.getAnomalyResults()) {\n+                if (result.getAnomalyGrade() > 0 || random.nextFloat() < acceptProbability) {\n+                    addResult(bulkRequest, result);\n+                }\n+            }\n+        } else {\n+            // if exceeding 100% of hard limit, try our luck and only index non-zero grade result\n+            for (AnomalyResult result : request.getAnomalyResults()) {\n+                if (result.getAnomalyGrade() > 0) {\n+                    addResult(bulkRequest, result);\n+                }\n+            }\n+        }\n+\n+        client", "originalCommit": "6c9214152b9256fee439dd545f942ad831aee1aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MTE0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/241#discussion_r503481142", "bodyText": "good catch.  Added.", "author": "kaituo", "createdAt": "2020-10-12T19:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2NTIwNw=="}], "type": "inlineReview"}, {"oid": "21fe5fdb30246ab946881a8d06d442c3cb9c765d", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/21fe5fdb30246ab946881a8d06d442c3cb9c765d", "message": "Selectively store anomaly results when index pressure exceeds a threshold.\n\nOur performance evaluation has observed a large number of EsRejectedExecutionException due to indexing too many anomaly results. This PR adds a customized bulk transport action to deal with high index memory pressure. When the index pressure exceeds 80%, we only index non-zero anomaly grade index results and a random subset of zero anomaly grade index results.\n\nThis PR adds a few supporting data structures related changes:1. add constructors in AnomalyResult/FeatureData to use them in the newly added transport action.2. add Entity class to represent an entity in anomaly results.\nThis PR also renames ANOMALY_RESULT_INDEX to ANOMALY_RESULT_INDEX_ALIAS and moves it to the CommonName class. The name refers to an alias and is accessed in multiple places.\n\nTesting done:\n1. we don't observe EsRejectedExecutionException after applying the change (together with a series of other related changes).\n2. added unit tests.", "committedDate": "2020-10-13T21:40:44Z", "type": "commit"}, {"oid": "89d055c91747f76d87d6e609951441aece42b436", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/89d055c91747f76d87d6e609951441aece42b436", "message": "Address comments", "committedDate": "2020-10-13T21:40:44Z", "type": "commit"}, {"oid": "1e7f3bca115d8369a22cab26e8c372c70d3461f3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1e7f3bca115d8369a22cab26e8c372c70d3461f3", "message": "rebase", "committedDate": "2020-10-13T21:47:53Z", "type": "commit"}, {"oid": "1e7f3bca115d8369a22cab26e8c372c70d3461f3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1e7f3bca115d8369a22cab26e8c372c70d3461f3", "message": "rebase", "committedDate": "2020-10-13T21:47:53Z", "type": "forcePushed"}, {"oid": "60b94f528f06a2a4d439e72eb2fce6e437adb04e", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/60b94f528f06a2a4d439e72eb2fce6e437adb04e", "message": "Fix flaky test", "committedDate": "2020-10-13T21:54:44Z", "type": "commit"}]}