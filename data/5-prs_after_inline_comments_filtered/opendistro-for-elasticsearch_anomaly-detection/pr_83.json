{"pr_number": 83, "pr_title": "Use callbacks and bug fix", "pr_createdAt": "2020-04-09T18:20:11Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83", "timeline": [{"oid": "f9d506e810e8760c7f9685d05a93dc765aedd93e", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/f9d506e810e8760c7f9685d05a93dc765aedd93e", "message": "Use callbacks and bug fix\n\nThis PR includes the following changes:\n\n1. remove classes that are not needed in jacocoExclusions since we have enough coverage for those classes.\n2. Use ClientUtil instead of Elasticsearch\u2019s client in AD job runner\n3. Use one function to get the number of partitioned forests. Previously, we have redundant code in both ModelManager and ADStateManager.\n4. Change ADStateManager.getAnomalyDetector to use callback.\n5. Change AnomalyResultTransportAction to use callback to get features.\n6. Add in AnomalyResultTransportAction to handle the case where all features have been disabled, and users' index does not exist.\n7. Change get RCF and threshold result methods to use callback and add exception handling of IndexNotFoundException due to the change. Previously, getting RCF and threshold result methods won\u2019t throw IndexNotFoundException.\n8. Remove unused fields in StopDetectorTransportAction and AnomalyResultTransportAction\n9. Unwrap EsRejectedExecutionException as it can be nested inside RemoteTransportException. Previously, we would not recognize EsRejectedExecutionException and thus miss anomaly results write retrying.\n10. Add error in anomaly result schema.11. Fix broken tests due to my changes.\n\nTesting done:\n1. unit/integration tests pass\n2. do end-to-end testing and make sure my fix achieves the purpose\u00a0\n   * timeout issue is gone\u00a0\n   * when all features have been disabled or index does not exist, we will retry a few more times and disable AD jobs.", "committedDate": "2020-04-09T18:11:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwODc0NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406608744", "bodyText": "Why not end run immediately if we can't find detector?", "author": "ylwu-amzn", "createdAt": "2020-04-10T05:29:32Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -225,9 +213,20 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n         }\n \n         try {\n-            Optional<AnomalyDetector> detector = stateManager.getAnomalyDetector(adID);\n+            stateManager.getAnomalyDetector(adID, onGetDetector(listener, adID, request));\n+        } catch (Exception ex) {\n+            handleExecuteException(ex, listener, adID);\n+        }\n+    }\n+\n+    private ActionListener<Optional<AnomalyDetector>> onGetDetector(\n+        ActionListener<AnomalyResultResponse> listener,\n+        String adID,\n+        AnomalyResultRequest request\n+    ) {\n+        return ActionListener.wrap(detector -> {\n             if (!detector.isPresent()) {\n-                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", true));\n+                listener.onFailure(new EndRunException(adID, \"AnomalyDetector is not available.\", false));", "originalCommit": "f9d506e810e8760c7f9685d05a93dc765aedd93e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3NzgxNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406977816", "bodyText": "Changed it back to end run immediately.", "author": "kaituo", "createdAt": "2020-04-10T23:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwODc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMDAzMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406610033", "bodyText": "How about we check feature list and give user a definite answer? If that change takes time, please add some todo here.", "author": "ylwu-amzn", "createdAt": "2020-04-10T05:34:59Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -342,9 +358,19 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                         new ActionListenerResponseHandler<>(rcfListener, RCFResultResponse::new)\n                     );\n             }\n-        } catch (Exception ex) {\n-            handleExecuteException(ex, listener, adID);\n-        }\n+        }, exception -> {\n+            LOG.warn(exception);\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onFailure(new EndRunException(adID, \"Having trouble querying data: \" + exception.getMessage(), false));\n+            } else if (exception instanceof IllegalArgumentException) {\n+                listener\n+                    .onFailure(\n+                        new EndRunException(adID, \"Having trouble querying data. Maybe all of your features have been disabled.\", false)", "originalCommit": "f9d506e810e8760c7f9685d05a93dc765aedd93e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MDc2MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406980760", "bodyText": "good suggestion.  Done.", "author": "kaituo", "createdAt": "2020-04-10T23:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMDAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMDM4OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406610388", "bodyText": "How about we change to \"Can't find index XXX\"? So user can know clearly the trouble is missing index, rather than others like wrong query or network latency.", "author": "ylwu-amzn", "createdAt": "2020-04-10T05:36:50Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -342,9 +358,19 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                         new ActionListenerResponseHandler<>(rcfListener, RCFResultResponse::new)\n                     );\n             }\n-        } catch (Exception ex) {\n-            handleExecuteException(ex, listener, adID);\n-        }\n+        }, exception -> {\n+            LOG.warn(exception);\n+            if (exception instanceof IndexNotFoundException) {\n+                listener.onFailure(new EndRunException(adID, \"Having trouble querying data: \" + exception.getMessage(), false));", "originalCommit": "f9d506e810e8760c7f9685d05a93dc765aedd93e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MDgyNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406980824", "bodyText": "exception.getMessage would return such information.", "author": "kaituo", "createdAt": "2020-04-10T23:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMDM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406858316", "bodyText": "if we are going to refactor this method, I suggest the new api just takes a detector object, which contains all the needed info and simpler to use.", "author": "wnbts", "createdAt": "2020-04-10T17:25:10Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -272,6 +272,35 @@ public String getDetectorIdForModelId(String modelId) {\n         return new SimpleImmutableEntry<>(numPartitions, forestSize);\n     }\n \n+    /**\n+     * Construct a RCF model and then partition it by forest size.\n+     *\n+     * A RCF model is constructed based on the number of input features.\n+     *\n+     * Then a RCF model is first partitioned into desired size based on heap.\n+     * If there are more partitions than the number of nodes in the cluster,\n+     * the model is partitioned by the number of nodes and verified to\n+     * ensure the size of a partition does not exceed the max size limit based on heap.\n+     *\n+     * @param detectorId ID of the detector with no effects on partitioning\n+     * @param rcfNumFeatures the number of features\n+     * @return a pair of number of partitions and size of a parition (number of trees)\n+     * @throws LimitExceededException when there is no sufficient resouce available\n+     */\n+    public Entry<Integer, Integer> getPartitionedForestSizes(String detectorId, int rcfNumFeatures) {", "originalCommit": "f9d506e810e8760c7f9685d05a93dc765aedd93e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MTE1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406981155", "bodyText": "We only use use detector id as part of error message. Don't need other detector information.", "author": "kaituo", "createdAt": "2020-04-10T23:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MzY2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406993662", "bodyText": "if model manager takes a detector, it can compute the feature dimensions and partitioning so that will be only input needed and that will save client the work to provide a second rcfNumFeatures input. that's why i suggest doing that.", "author": "wnbts", "createdAt": "2020-04-11T00:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTU4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406999581", "bodyText": "make sense. done", "author": "kaituo", "createdAt": "2020-04-11T01:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODg5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407648891", "bodyText": "please take a look at the recent commit: d8ea9cf", "author": "kaituo", "createdAt": "2020-04-13T18:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2MDI3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406860277", "bodyText": "Minor. Why not validate detector first and just pass a detector afterwards? saving all the repetitive and unlikely handling of a non-existent detector.", "author": "wnbts", "createdAt": "2020-04-10T17:29:51Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -91,67 +87,63 @@ public ADStateManager(\n     /**\n      * Get the number of RCF model's partition number for detector adID\n      * @param adID detector id\n+     * @param detector object\n      * @return the number of RCF model's partition number for adID\n      * @throws InterruptedException when we cannot get anomaly detector object for adID before timeout\n      * @throws LimitExceededException when there is no sufficient resource available\n      */\n-    public int getPartitionNumber(String adID) throws InterruptedException {\n+    public int getPartitionNumber(String adID, Optional<AnomalyDetector> detector) throws InterruptedException {", "originalCommit": "f9d506e810e8760c7f9685d05a93dc765aedd93e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4MzE2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r406983166", "bodyText": "good point.  Done.", "author": "kaituo", "createdAt": "2020-04-10T23:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2MDI3Nw=="}], "type": "inlineReview"}, {"oid": "ed40113f6be37e0d7194450b900ee73383151534", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/ed40113f6be37e0d7194450b900ee73383151534", "message": "Change the default value of lastUpdateTime from the current timestamp to null (#77)\n\n1. Change the default value of lastUpdateTime from the current timestamp to null. Before the change, creating a detector returns one lastUpdateTime, while getting a detector returns a different lastUpdateTime. The difference is confusing to the user, and they may wonder what has happened between the creating and getting detector calls. After the change, creating a detector returns no last update time, while getting a detector returns a last update time.\r\n2. Replace the mocked threadpool in 2 tests with a real threadpool object.\r\n\r\nTesting done:\r\n1. verified lastUpdateTime change in a cluster\r\n2. gradle build", "committedDate": "2020-04-13T18:35:55Z", "type": "commit"}, {"oid": "b2fd4cdb11260412aa3bc9ecbc6b7894950425e3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/b2fd4cdb11260412aa3bc9ecbc6b7894950425e3", "message": "Add async getColdStartData (#80)", "committedDate": "2020-04-13T18:35:55Z", "type": "commit"}, {"oid": "d023166843c2f7876f4044c4e8e8ae7363a19369", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d023166843c2f7876f4044c4e8e8ae7363a19369", "message": "add async trainModel (#81)", "committedDate": "2020-04-13T18:35:55Z", "type": "commit"}, {"oid": "d8ea9cf5ec5c46f09b1b6fbcd8f5e725e0fa50b6", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d8ea9cf5ec5c46f09b1b6fbcd8f5e725e0fa50b6", "message": "Various\n\n1. remove uncessary optional passing and return end run exception after making sure all features are disabled\n2. End run immediately when anomaly detector is not available\n3. make getPartitionedForestSizes takes detector only", "committedDate": "2020-04-13T18:35:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwNDk3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407704972", "bodyText": "Minor. Is this exception still possible?", "author": "wnbts", "createdAt": "2020-04-13T20:35:16Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -91,67 +86,59 @@ public ADStateManager(\n     /**\n      * Get the number of RCF model's partition number for detector adID\n      * @param adID detector id\n+     * @param detector object\n      * @return the number of RCF model's partition number for adID\n      * @throws InterruptedException when we cannot get anomaly detector object for adID before timeout\n      * @throws LimitExceededException when there is no sufficient resource available\n      */\n-    public int getPartitionNumber(String adID) throws InterruptedException {\n+    public int getPartitionNumber(String adID, AnomalyDetector detector) throws InterruptedException {", "originalCommit": "d8ea9cf5ec5c46f09b1b6fbcd8f5e725e0fa50b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NjYzNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407746636", "bodyText": "no, it is impossible now.  Will fix.", "author": "kaituo", "createdAt": "2020-04-13T22:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwNDk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwOTYwOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407709608", "bodyText": "suggestion. it's clearer to rebase and force push to avoid showing pulled changes that are checked in.", "author": "wnbts", "createdAt": "2020-04-13T20:44:10Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -598,6 +634,116 @@ public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints) {\n         checkpointDao.putModelCheckpoint(modelId, checkpoint);\n     }\n \n+    /**\n+    * Trains and saves cold-start AD models.\n+    *\n+    * This implementations splits RCF models and trains them all.\n+    * As all model partitions have the same size, the scores from RCF models are merged by averaging.\n+    * Since RCF outputs 0 until it is ready, initial 0 scores are meaningless and therefore filtered out.\n+    * Filtered (non-zero) RCF scores are the training data for a single thresholding model.\n+    * All trained models are serialized and persisted to be hosted.\n+    *\n+    * @param anomalyDetector the detector for which models are trained\n+    * @param dataPoints M, N shape, where M is the number of samples for training and N is the number of features\n+    * @param listener onResponse is called with null when this operation is completed\n+    *                 onFailure is called IllegalArgumentException when training data is invalid\n+    *                 onFailure is called LimitExceededException when a limit for training is exceeded\n+    */\n+    public void trainModel(AnomalyDetector anomalyDetector, double[][] dataPoints, ActionListener<Void> listener) {", "originalCommit": "d8ea9cf5ec5c46f09b1b6fbcd8f5e725e0fa50b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NjIyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/83#discussion_r407746225", "bodyText": "yes, will try next time", "author": "kaituo", "createdAt": "2020-04-13T22:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwOTYwOA=="}], "type": "inlineReview"}, {"oid": "c554a4f0e09ddb962fb63637724d36861b8e89d0", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/c554a4f0e09ddb962fb63637724d36861b8e89d0", "message": "Remove impossible exception throwing", "committedDate": "2020-04-13T22:10:17Z", "type": "commit"}]}