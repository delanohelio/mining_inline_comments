{"pr_number": 95, "pr_title": "Integration with Ultrawarm", "pr_createdAt": "2020-04-28T22:46:22Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95", "timeline": [{"oid": "76643823476351b24564a9733adbee79da9eb69c", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/76643823476351b24564a9733adbee79da9eb69c", "message": "Integration with Ultrawarm\n\nUltrawarm introduces warm nodes into the ES cluster. Currently, we distribute model partitions to all data nodes in the cluster randomly, which could cause a model performance downgrade issue once warm nodes are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n\nSince index shards are hosted on hot nodes, AD's coordinating nodes are in hot nodes as well. We don't need to send HourlyCron job and stats requests to warm nodes anymore. This PR implements those changes.\n\nTesting done:\n1. Verified AD runs only in hot nodes.\n2. stats API and HourlyCron still works.", "committedDate": "2020-04-28T22:48:45Z", "type": "commit"}, {"oid": "76643823476351b24564a9733adbee79da9eb69c", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/76643823476351b24564a9733adbee79da9eb69c", "message": "Integration with Ultrawarm\n\nUltrawarm introduces warm nodes into the ES cluster. Currently, we distribute model partitions to all data nodes in the cluster randomly, which could cause a model performance downgrade issue once warm nodes are throttled due to resource limitations. The PR excludes warm nodes to place model partitions.\n\nSince index shards are hosted on hot nodes, AD's coordinating nodes are in hot nodes as well. We don't need to send HourlyCron job and stats requests to warm nodes anymore. This PR implements those changes.\n\nTesting done:\n1. Verified AD runs only in hot nodes.\n2. stats API and HourlyCron still works.", "committedDate": "2020-04-28T22:48:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MjU4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r416972581", "bodyText": "Minor. Documentation is missing for public classes and methods.", "author": "wnbts", "createdAt": "2020-04-28T22:56:14Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClusterStateUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.inject.Inject;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+import com.carrotsearch.hppc.cursors.ObjectObjectCursor;\n+\n+public class ClusterStateUtils {", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MjE3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417452179", "bodyText": "added", "author": "kaituo", "createdAt": "2020-04-29T16:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MjU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MzU2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r416973563", "bodyText": "Minor. The code will be more robust if this state is injected at constructor rather than hardcoded so when the config changes, constructor and unit tests do not need to change.", "author": "wnbts", "createdAt": "2020-04-28T22:58:49Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClusterStateUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.inject.Inject;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+import com.carrotsearch.hppc.cursors.ObjectObjectCursor;\n+\n+public class ClusterStateUtils {\n+    private static final Logger LOG = LogManager.getLogger(ClusterStateUtils.class);\n+    private final ClusterService clusterService;\n+    private final Map<String, String> ignoredAttributes = new HashMap<String, String>();", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1NTYzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417455631", "bodyText": "done", "author": "kaituo", "createdAt": "2020-04-29T16:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MzU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTA0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r416975047", "bodyText": "Question. Is this needed?", "author": "wnbts", "createdAt": "2020-04-28T23:02:49Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClusterStateUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.inject.Inject;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+import com.carrotsearch.hppc.cursors.ObjectObjectCursor;\n+\n+public class ClusterStateUtils {\n+    private static final Logger LOG = LogManager.getLogger(ClusterStateUtils.class);\n+    private final ClusterService clusterService;\n+    private final Map<String, String> ignoredAttributes = new HashMap<String, String>();\n+\n+    @Inject", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1NTkwNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417455906", "bodyText": "Yes because transport action needs this class. Transport action constructor uses Guice to find injected dependencies.  Dependency classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor.", "author": "kaituo", "createdAt": "2020-04-29T16:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMzI2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418133269", "bodyText": "Oh, I found it. It's the RestStatsAnomalyDetectorAction, right? Thanks!", "author": "wnbts", "createdAt": "2020-04-30T16:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzU0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418317543", "bodyText": "It is StopDetectorTransportAction.", "author": "kaituo", "createdAt": "2020-04-30T22:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0OTg4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418349882", "bodyText": "Do dependencies (to be injected) require @Inject annotation? It make senses for dependents to be annotated as entry point. For example, RCFResultTransportAction (a dependent) is annotated but its dependencies such as ADCircuitBreakerService and ModelManager are not.\nClusterStateUtils is a dependency not a dependent, right?", "author": "wnbts", "createdAt": "2020-04-30T23:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyMDY2MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418420660", "bodyText": "We need the injection because no implementation for java.util.HashMap was bound.  ModelManager does not @Inject becasue all of its parameters are bound using AnomalyDetectorPlugin.createComponents.  Now we don't need inject since I changed implementation. Please see the new PR.", "author": "kaituo", "createdAt": "2020-05-01T05:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MjE4MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r416982180", "bodyText": "Question. Why not using Map or unmodifiableMap\u200b so the specific class doesn't leak into client code?", "author": "wnbts", "createdAt": "2020-04-28T23:22:24Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClusterStateUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.inject.Inject;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+import com.carrotsearch.hppc.cursors.ObjectObjectCursor;\n+\n+public class ClusterStateUtils {\n+    private static final Logger LOG = LogManager.getLogger(ClusterStateUtils.class);\n+    private final ClusterService clusterService;\n+    private final Map<String, String> ignoredAttributes = new HashMap<String, String>();\n+\n+    @Inject\n+    public ClusterStateUtils(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+        ignoredAttributes.put(CommonName.BOX_TYPE_KEY, CommonName.WARM_BOX_TYPE);\n+    }\n+\n+    public ImmutableOpenMap<String, DiscoveryNode> getEligibleDataNodes() {", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1Njg4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417456885", "bodyText": "That's what clusterService.state().nodes().getDataNodes() returns.  ImmutableOpenMap is not a Map or unmodifiableMap\u200b.  ES defined it in their own way.", "author": "kaituo", "createdAt": "2020-04-29T16:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNTU0OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418135548", "bodyText": "since the new code is a wrapper over the api and creates a new map, the wrapper may hide the implementation class, particular when map is much friendly to clients.", "author": "wnbts", "createdAt": "2020-04-30T16:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxOTM2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418419362", "bodyText": "Changed to return an array instead.  Please see the context from Sorabh's comments.", "author": "kaituo", "createdAt": "2020-05-01T05:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MjE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MzIwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r416983205", "bodyText": "Minor. isEligibleNode is easier to use than double negative.", "author": "wnbts", "createdAt": "2020-04-28T23:25:13Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClusterStateUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.inject.Inject;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+import com.carrotsearch.hppc.cursors.ObjectObjectCursor;\n+\n+public class ClusterStateUtils {\n+    private static final Logger LOG = LogManager.getLogger(ClusterStateUtils.class);\n+    private final ClusterService clusterService;\n+    private final Map<String, String> ignoredAttributes = new HashMap<String, String>();\n+\n+    @Inject\n+    public ClusterStateUtils(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+        ignoredAttributes.put(CommonName.BOX_TYPE_KEY, CommonName.WARM_BOX_TYPE);\n+    }\n+\n+    public ImmutableOpenMap<String, DiscoveryNode> getEligibleDataNodes() {\n+        ImmutableOpenMap<String, DiscoveryNode> dataNodes = clusterService.state().nodes().getDataNodes();\n+        ImmutableOpenMap.Builder<String, DiscoveryNode> modelNodes = ImmutableOpenMap.builder();\n+\n+        for (Iterator<ObjectObjectCursor<String, DiscoveryNode>> it = dataNodes.iterator(); it.hasNext();) {\n+            ObjectObjectCursor<String, DiscoveryNode> cursor = it.next();\n+            if (!isIgnoredNode(cursor.value)) {", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1NzUzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417457539", "bodyText": "This is one place where isIgnoredNode gets used.  In some other places like ADClusterEventListener, we don't use double negative.", "author": "kaituo", "createdAt": "2020-04-29T16:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MzIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzODY1OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418138658", "bodyText": "i just did a count. there are three double negatives in this pr, two from ADClusterEventListener and one from ClusterStateUtils, while one without a second negation. This reduces readability unnecessarily.", "author": "wnbts", "createdAt": "2020-04-30T16:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MzIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxOTE5NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418419195", "bodyText": "changed to isEligibleNode with a different implementation.  Please see it in another PR.", "author": "kaituo", "createdAt": "2020-05-01T05:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4MzIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NDYyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r416984626", "bodyText": "Minor. Or if (entry.getValue().equals(attribute)) {...}", "author": "wnbts", "createdAt": "2020-04-28T23:29:06Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClusterStateUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.inject.Inject;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+import com.carrotsearch.hppc.cursors.ObjectObjectCursor;\n+\n+public class ClusterStateUtils {\n+    private static final Logger LOG = LogManager.getLogger(ClusterStateUtils.class);\n+    private final ClusterService clusterService;\n+    private final Map<String, String> ignoredAttributes = new HashMap<String, String>();\n+\n+    @Inject\n+    public ClusterStateUtils(ClusterService clusterService) {\n+        this.clusterService = clusterService;\n+        ignoredAttributes.put(CommonName.BOX_TYPE_KEY, CommonName.WARM_BOX_TYPE);\n+    }\n+\n+    public ImmutableOpenMap<String, DiscoveryNode> getEligibleDataNodes() {\n+        ImmutableOpenMap<String, DiscoveryNode> dataNodes = clusterService.state().nodes().getDataNodes();\n+        ImmutableOpenMap.Builder<String, DiscoveryNode> modelNodes = ImmutableOpenMap.builder();\n+\n+        for (Iterator<ObjectObjectCursor<String, DiscoveryNode>> it = dataNodes.iterator(); it.hasNext();) {\n+            ObjectObjectCursor<String, DiscoveryNode> cursor = it.next();\n+            if (!isIgnoredNode(cursor.value)) {\n+                modelNodes.put(cursor.key, cursor.value);\n+            }\n+        }\n+        return modelNodes.build();\n+    }\n+\n+    public boolean isIgnoredNode(DiscoveryNode node) {\n+        if (!node.isDataNode()) {\n+            return true;\n+        }\n+        for (Map.Entry<String, String> entry : ignoredAttributes.entrySet()) {\n+            String attribute = node.getAttributes().get(entry.getKey());\n+            if (attribute != null && attribute.equals(entry.getValue())) {", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4NDU1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417484555", "bodyText": "good point. Changed.", "author": "kaituo", "createdAt": "2020-04-29T17:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NDYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjgxNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417002814", "bodyText": "Minor. clusterStateUtils", "author": "wnbts", "createdAt": "2020-04-29T00:25:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/cluster/HourlyCron.java", "diffHunk": "@@ -21,27 +21,27 @@\n import org.elasticsearch.action.FailedNodeException;\n import org.elasticsearch.client.Client;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n-import org.elasticsearch.cluster.service.ClusterService;\n \n import com.amazon.opendistroforelasticsearch.ad.transport.CronAction;\n import com.amazon.opendistroforelasticsearch.ad.transport.CronRequest;\n+import com.amazon.opendistroforelasticsearch.ad.util.ClusterStateUtils;\n \n public class HourlyCron implements Runnable {\n     private static final Logger LOG = LogManager.getLogger(HourlyCron.class);\n     static final String SUCCEEDS_LOG_MSG = \"Hourly maintenance succeeds\";\n     static final String NODE_EXCEPTION_LOG_MSG = \"Hourly maintenance of node has exception\";\n     static final String EXCEPTION_LOG_MSG = \"Hourly maintenance has exception.\";\n-    private ClusterService clusterService;\n+    private ClusterStateUtils clientStateUtils;\n     private Client client;\n \n-    public HourlyCron(ClusterService clusterService, Client client) {\n-        this.clusterService = clusterService;\n+    public HourlyCron(Client client, ClusterStateUtils clientStateUtils) {", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4NTQ0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417485445", "bodyText": "fixed.", "author": "kaituo", "createdAt": "2020-04-29T17:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjgxNA=="}], "type": "inlineReview"}, {"oid": "4e74ce382d1bb794c8ca0fd4ec5d5487619a5f12", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/4e74ce382d1bb794c8ca0fd4ec5d5487619a5f12", "message": "Address Lai's comments", "committedDate": "2020-04-29T20:53:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NDYzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417664631", "bodyText": "it looks like everywhere the map returned by getEligibleDataNodes() is converted to an array. Would be cleaner if we return an array from getEligibleDataNodes() itself.", "author": "sohami", "createdAt": "2020-04-29T23:10:21Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestStatsAnomalyDetectorAction.java", "diffHunk": "@@ -73,15 +79,18 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n      */\n     private ADStatsRequest getRequest(RestRequest request) {\n         // parse the nodes the user wants to query the stats for\n-        String[] nodeIdsArr = null;\n         String nodesIdsStr = request.param(\"nodeId\");\n         Set<String> validStats = adStats.getStats().keySet();\n \n+        ADStatsRequest adStatsRequest = null;\n         if (!Strings.isEmpty(nodesIdsStr)) {\n-            nodeIdsArr = nodesIdsStr.split(\",\");\n+            String[] nodeIdsArr = nodesIdsStr.split(\",\");\n+            adStatsRequest = new ADStatsRequest(nodeIdsArr);\n+        } else {\n+            DiscoveryNode[] dataNodes = clusterStateUtils.getEligibleDataNodes().values().toArray(DiscoveryNode.class);", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxOTAzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418419035", "bodyText": "yes, changed to return an array.", "author": "kaituo", "createdAt": "2020-05-01T05:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NDYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NjY2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417666666", "bodyText": "clientStateUtils -> clusterStateUtils ?", "author": "sohami", "createdAt": "2020-04-29T23:16:09Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/StopDetectorTransportAction.java", "diffHunk": "@@ -37,26 +38,26 @@\n     private static final Logger LOG = LogManager.getLogger(StopDetectorTransportAction.class);\n \n     private final Client client;\n-    private final ClusterService clusterService;\n+    private final ClusterStateUtils clientStateUtils;\n \n     @Inject\n     public StopDetectorTransportAction(\n         TransportService transportService,\n-        ClusterService clusterService,\n+        ClusterStateUtils clientStateUtils,", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxODk4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418418986", "bodyText": "This is changed to your DiscoveryNodeFilterer.", "author": "kaituo", "createdAt": "2020-05-01T05:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NjY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3ODg4MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r417678880", "bodyText": "Since its a util class I would say you can just have a static methods in it and the caller doesn't have to create an instance of it. Something like this:\n\npublic final class DiscoveryNodeFilterer {\n\n         private DiscoveryNodeFilterer() {\n         }\n\n         public static DiscoveryNode[] getHotDataNodes(ClusterState state) {\n                   final List<DiscoveryNode> eligibleNodes = new ArrayList<>();\n                   final HotDataNodePredicate eligibleNodeFilter = new HotDataNodePredicate();\n                   for(DiscoveryNode node : state.nodes()) {\n                         if (eligibleNodeFilter.test(node)) {\n                                eligibleNodes.add(node);\n                         }\n                    }\n                   return eligibleNode.toArray(new DiscoveryNode[0]);\n         }\n\n        static class HotDataNodePredicate implements Predicate<DiscoveryNode> {\n              @Override\n              public boolean test(DiscoveryNode discoveryNode) {\n                    return discoveryNode.isDataNode() \n                         && discoveryNode.getAttributes().getOrDefault(CommonName.BOX_TYPE_KEY, CommonName.HOT_BOX_TYPE).equals(CommonName.HOT_BOX_TYPE);\n              }\n         }\n}\n\n\nOr if you want to support multiple attributes then you can use DiscoveryNodeFilters but the catch in this implementation is that it doesn't consider the DiscoveryNode with null value for attribute as an eligible node. Whereas in the case here a hot data node can have null value for box_type.", "author": "sohami", "createdAt": "2020-04-29T23:54:36Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClusterStateUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.inject.Inject;\n+\n+import com.amazon.opendistroforelasticsearch.ad.constant.CommonName;\n+import com.carrotsearch.hppc.cursors.ObjectObjectCursor;\n+\n+public class ClusterStateUtils {", "originalCommit": "76643823476351b24564a9733adbee79da9eb69c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNTkzMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/95#discussion_r418335932", "bodyText": "In my implementation, I would ignore a node if its box type equals to warm.  If we have null value for the box type attribute, we don't ignore them.\nWill use your version since we don't have a use case to support multiple attributes now.\nI am using an instance methods since that's easier for testing than static methods. And since we have dependence injection, we only have one copy of the class.", "author": "kaituo", "createdAt": "2020-04-30T23:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3ODg4MA=="}], "type": "inlineReview"}]}