{"pr_number": 232, "pr_title": "add anomaly feature attribution to model output", "pr_createdAt": "2020-09-14T20:29:56Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232", "timeline": [{"oid": "8223872fc7e5fefe43f85b8566d27afa967dc40d", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8223872fc7e5fefe43f85b8566d27afa967dc40d", "message": "add anomaly feature attribution to model output", "committedDate": "2020-09-14T21:58:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0OTc5NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#discussion_r494449795", "bodyText": "Questions:\nFirst, how to interpret both high and low are non-zero?  Is it really high or low?  Does it mean RCF trees think the value can be both higher or lower than the recently observed data trends for that column?  Do we need a majority win rule to say it is actually high or low?\nSecond, when doing a high low sum, we lose direction.  Is there any way to preserve the direction?\nThird, when users see two features' attribution like x: 1% and y 99%, it tells users y is the place anomaly happens.  It might as well not to show x's 1%.  I feel an attribution score less than 1/d (d is the number of features) is not useful to users.  Any comments on this?", "author": "kaituo", "createdAt": "2020-09-24T16:23:28Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -349,13 +370,25 @@ public void getRcfResult(String detectorId, String modelId, double[] point, Acti\n     }\n \n     private void getRcfResult(ModelState<RandomCutForest> modelState, double[] point, ActionListener<RcfResult> listener) {\n+        modelState.setLastUsedTime(clock.instant());\n+\n         RandomCutForest rcf = modelState.getModel();\n         double score = rcf.getAnomalyScore(point);\n         double confidence = computeRcfConfidence(rcf);\n         int forestSize = rcf.getNumberOfTrees();\n+        double[] attribution = getAnomalyAttribution(rcf, point);\n         rcf.update(point);\n-        modelState.setLastUsedTime(clock.instant());\n-        listener.onResponse(new RcfResult(score, confidence, forestSize));\n+        listener.onResponse(new RcfResult(score, confidence, forestSize, attribution));\n+    }\n+\n+    private double[] getAnomalyAttribution(RandomCutForest rcf, double[] point) {\n+        DiVector vec = rcf.getAnomalyAttribution(point);\n+        vec.renormalize(1d);\n+        double[] attribution = new double[vec.getDimensions()];\n+        for (int i = 0; i < attribution.length; i++) {\n+            attribution[i] = vec.getHighLowSum(i);", "originalCommit": "8223872fc7e5fefe43f85b8566d27afa967dc40d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5Nzk2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#discussion_r494697969", "bodyText": "for a given sum, the larger value indicates the direction/relative position. Note even data within normal range has non-zero values for both.\nsince the current ux design only shows feature contribution, only contribution is computed here. The direction is not lost. It can be added when it's needed.\n1/99 or 0/100 probably won't make a difference for users. In general, additional rules should be avoided for simplicity and correctness as they might introduce their own problems. As an extreme example, the contribution from two features is 49/51, if 49 is omitted, after normalization the result could be 0/100.", "author": "wnbts", "createdAt": "2020-09-25T01:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0OTc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1Mjc1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#discussion_r497852756", "bodyText": "[minor] It looks like the variable attribution was meant to be used in line 229, but didn't get used and instead combineAttribution was invoked again with identical args.", "author": "LiuJoyceC", "createdAt": "2020-09-30T23:18:29Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/ml/ModelManager.java", "diffHunk": "@@ -206,28 +207,48 @@ public ModelManager(\n      *\n      * Final RCF score is calculated by averaging scores weighted by model size (number of trees).\n      * Confidence is the weighted average of confidence with confidence for missing models being 0.\n+     * Attribution is normalized weighted average for the most recent feature dimensions.\n      *\n      * @param rcfResults RCF results from partitioned models\n+     * @param numFeatures number of features for attribution\n      * @return combined RCF result\n      */\n-    public CombinedRcfResult combineRcfResults(List<RcfResult> rcfResults) {\n+    public CombinedRcfResult combineRcfResults(List<RcfResult> rcfResults, int numFeatures) {\n         CombinedRcfResult combinedResult = null;\n         if (rcfResults.isEmpty()) {\n-            combinedResult = new CombinedRcfResult(0, 0);\n+            combinedResult = new CombinedRcfResult(0, 0, new double[0]);\n         } else {\n             int totalForestSize = rcfResults.stream().mapToInt(RcfResult::getForestSize).sum();\n             if (totalForestSize == 0) {\n-                combinedResult = new CombinedRcfResult(0, 0);\n+                combinedResult = new CombinedRcfResult(0, 0, new double[0]);\n             } else {\n                 double score = rcfResults.stream().mapToDouble(r -> r.getScore() * r.getForestSize()).sum() / totalForestSize;\n                 double confidence = rcfResults.stream().mapToDouble(r -> r.getConfidence() * r.getForestSize()).sum() / Math\n                     .max(rcfNumTrees, totalForestSize);\n-                combinedResult = new CombinedRcfResult(score, confidence);\n+                double[] attribution = combineAttribution(rcfResults, numFeatures, totalForestSize);\n+                combinedResult = new CombinedRcfResult(score, confidence, combineAttribution(rcfResults, numFeatures, totalForestSize));", "originalCommit": "8223872fc7e5fefe43f85b8566d27afa967dc40d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3NzM3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/232#discussion_r498377379", "bodyText": "good catch. I fixed it in the new commit.", "author": "wnbts", "createdAt": "2020-10-01T16:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1Mjc1Ng=="}], "type": "inlineReview"}, {"oid": "d1c95fbebaab479f8a6581b726fef29dc98cb6e7", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d1c95fbebaab479f8a6581b726fef29dc98cb6e7", "message": "remove redundant attribution", "committedDate": "2020-10-01T16:32:13Z", "type": "commit"}]}