{"pr_number": 40, "pr_title": "Adding negative cache to throttle extra request https://github.com/opendistro-for-elasticsearch/anomaly-detection/issues/33", "pr_createdAt": "2020-01-30T23:51:28Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40", "timeline": [{"oid": "9aa9e4691f26f286e62e27e948c24a41404a7171", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/9aa9e4691f26f286e62e27e948c24a41404a7171", "message": "Revert \"merge changes from alpha branch: change setting name and fix stop AD request\"\n\nThis reverts commit 363daa6af5bbf416311ed7860c489a2848584d05, reversing\nchanges made to caebb97d91a87369aa33f9fc90d4b87eba12eb76.\n\nThis also reverts commit ff190fa038a71564adbf9aa86ca406123096c026", "committedDate": "2020-01-30T18:42:26Z", "type": "commit"}, {"oid": "bc6a763172f7e1162125f35b445b81b9916204b8", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/bc6a763172f7e1162125f35b445b81b9916204b8", "message": "Adding negative cache to AD\nhttps://github.com/opendistro-for-elasticsearch/anomaly-detection/issues/33", "committedDate": "2020-01-30T23:44:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMDUwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373620505", "bodyText": "Question. From #33 , query cannot be aborted. The comment indicates the opposite. Is it confusing?", "author": "wnbts", "createdAt": "2020-01-31T18:27:52Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/cluster/HourlyCron.java", "diffHunk": "@@ -43,6 +43,8 @@ public HourlyCron(ClusterService clusterService, Client client) {\n     public void run() {\n         DiscoveryNode[] dataNodes = clusterService.state().nodes().getDataNodes().values().toArray(DiscoveryNode.class);\n \n+        // we also add the cancel query function here based on query text from the negative cache.", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0NDcwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r374244701", "bodyText": "Good catch. That's true. Currently anomaly-detection cannot abort running query in elasticsearch. If a query running longer than expected, anomaly-detection will not wait for that even though the query is still running. To solve this issue, we will 1) stop accepting new query if this case happen which is #33  2) daily cron clean up running query using es task management API(https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html)", "author": "zhanghg08", "createdAt": "2020-02-03T17:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMDUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMTQ3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373621471", "bodyText": "The added parameter should be a dependency injected rather than passed all the way down the stack.", "author": "wnbts", "createdAt": "2020-01-31T18:29:58Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/FeatureManager.java", "diffHunk": "@@ -115,15 +116,16 @@ public FeatureManager(\n      * @param detector anomaly detector for which the features are returned\n      * @param startTime start time of the data point in epoch milliseconds\n      * @param endTime end time of the data point in epoch milliseconds\n+     * @param stateManager ADStateManager\n      * @return unprocessed features and processed features for the current data point\n      */\n     @Deprecated\n-    public SinglePointFeatures getCurrentFeatures(AnomalyDetector detector, long startTime, long endTime) {\n+    public SinglePointFeatures getCurrentFeatures(AnomalyDetector detector, long startTime, long endTime, ADStateManager stateManager) {", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNjc0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r374416742", "bodyText": "Agree. We should not pass state manager around.", "author": "ylwu-amzn", "createdAt": "2020-02-04T00:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMTQ3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMTg4MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373621880", "bodyText": "The needed dependency can be injected in this class.", "author": "wnbts", "createdAt": "2020-01-31T18:31:00Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -114,18 +115,24 @@ public SearchFeatureDao(\n     }\n \n     /**\n-     * Gets features for the given time period.\n+     * Gets features for the given time period. This function also add given detector to negative cache before sending es request.\n+     * Once we get response/exception within timeout, we treat this request as complete and clear the negative cache.\n+     * Otherwise this detector entry remain in the negative to reject further request.\n      *\n      * @param detector info about indices, documents, feature query\n      * @param startTime epoch milliseconds at the beginning of the period\n      * @param endTime epoch milliseconds at the end of the period\n+     * @param stateManager ADStateManager\n      * @throws IllegalStateException when unexpected failures happen\n      * @return features from search results, empty when no data found\n      */\n-    public Optional<double[]> getFeaturesForPeriod(AnomalyDetector detector, long startTime, long endTime) {\n+    public Optional<double[]> getFeaturesForPeriod(AnomalyDetector detector, long startTime, long endTime, ADStateManager stateManager) {", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNjY4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373626685", "bodyText": "Minor. This method can be simplified to this line.", "author": "wnbts", "createdAt": "2020-01-31T18:42:03Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -119,6 +124,47 @@ public int getPartitionNumber(String adID) throws InterruptedException {\n         return partitionNum;\n     }\n \n+    /**\n+     * Get negative cache value(QueryBuilder, Instant) for given detector\n+     * If detectorId is null, return Optional.empty()\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(QueryBuilder, Instant)\n+     */\n+    public Optional<Entry<SearchRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (detector.getDetectorId() == null) {\n+            return Optional.empty();\n+        }\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyODU3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373628571", "bodyText": "Minor. This can be assumed to be unlikely. If this is a real concern that must be addressed, the proper behavior to expect is to throw an exception.", "author": "wnbts", "createdAt": "2020-01-31T18:46:09Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -119,6 +124,47 @@ public int getPartitionNumber(String adID) throws InterruptedException {\n         return partitionNum;\n     }\n \n+    /**\n+     * Get negative cache value(QueryBuilder, Instant) for given detector\n+     * If detectorId is null, return Optional.empty()", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyOTU3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373629573", "bodyText": "Question. Is put more expected for the client? Or, the insert call returns but the entry is still not updated. If that's by design, the documentation should make it clear.", "author": "wnbts", "createdAt": "2020-01-31T18:48:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -119,6 +124,47 @@ public int getPartitionNumber(String adID) throws InterruptedException {\n         return partitionNum;\n     }\n \n+    /**\n+     * Get negative cache value(QueryBuilder, Instant) for given detector\n+     * If detectorId is null, return Optional.empty()\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(QueryBuilder, Instant)\n+     */\n+    public Optional<Entry<SearchRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (detector.getDetectorId() == null) {\n+            return Optional.empty();\n+        }\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * If detectorId is null, do nothing\n+     * @param detector AnomalyDetector\n+     * @param searchRequest ES search request\n+     */\n+    public void insertFilteredQuery(AnomalyDetector detector, SearchRequest searchRequest) {\n+        if (detector.getDetectorId() == null) {\n+            return;\n+        }\n+        negativeCache.putIfAbsent(detector.getDetectorId(), new SimpleEntry<>(searchRequest, clock.instant()));", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5MDEyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r374990125", "bodyText": "Yes, I think put is better than putIfAbsent here. Will update.", "author": "zhanghg08", "createdAt": "2020-02-04T23:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyOTU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyOTk5OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r373629998", "bodyText": "Minor. Map::remove should work.", "author": "wnbts", "createdAt": "2020-01-31T18:49:24Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -119,6 +124,47 @@ public int getPartitionNumber(String adID) throws InterruptedException {\n         return partitionNum;\n     }\n \n+    /**\n+     * Get negative cache value(QueryBuilder, Instant) for given detector\n+     * If detectorId is null, return Optional.empty()\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(QueryBuilder, Instant)\n+     */\n+    public Optional<Entry<SearchRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (detector.getDetectorId() == null) {\n+            return Optional.empty();\n+        }\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * If detectorId is null, do nothing\n+     * @param detector AnomalyDetector\n+     * @param searchRequest ES search request\n+     */\n+    public void insertFilteredQuery(AnomalyDetector detector, SearchRequest searchRequest) {\n+        if (detector.getDetectorId() == null) {\n+            return;\n+        }\n+        negativeCache.putIfAbsent(detector.getDetectorId(), new SimpleEntry<>(searchRequest, clock.instant()));\n+    }\n+\n+    /**\n+     * Clear the negative cache for given detector.\n+     * If detectorId is null, do nothing\n+     * @param detector AnomalyDetector\n+     */\n+    public void clearFilteredQuery(AnomalyDetector detector) {\n+        if (detector.getDetectorId() == null) {\n+            return;\n+        }\n+        negativeCache.keySet().removeIf(key -> key.equals(detector.getDetectorId()));", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNzcyMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r374417722", "bodyText": "Client can't distinguish this case with \"No data in current detection window\"(line 295) as both return empty result. How about we throw an exception like line243", "author": "ylwu-amzn", "createdAt": "2020-02-04T00:29:25Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -249,6 +251,12 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                 return;\n             }\n             AnomalyDetector anomalyDetector = detector.get();\n+            Optional<Entry<SearchRequest, Instant>> queryEntry = stateManager.getFilteredQuery(anomalyDetector);\n+            if (queryEntry.isPresent()) {\n+                LOG.info(\"There is one query running for detectorId: {}\", anomalyDetector.getDetectorId());\n+                listener.onResponse(new AnomalyResultResponse(Double.NaN, Double.NaN, new ArrayList<FeatureData>()));", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMzI5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r374803291", "bodyText": "Good catch! Yes, we should throw exception in this case. Will update in next revision.", "author": "zhanghg08", "createdAt": "2020-02-04T17:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNzcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTQ5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r374419491", "bodyText": "If a query stuck for a long time, that will impact AD realtime detection. How about we cancel the stuck/running query and run the new coming query?", "author": "ylwu-amzn", "createdAt": "2020-02-04T00:36:12Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/AnomalyResultTransportAction.java", "diffHunk": "@@ -249,6 +251,12 @@ protected void doExecute(Task task, ActionRequest actionRequest, ActionListener<\n                 return;\n             }\n             AnomalyDetector anomalyDetector = detector.get();\n+            Optional<Entry<SearchRequest, Instant>> queryEntry = stateManager.getFilteredQuery(anomalyDetector);\n+            if (queryEntry.isPresent()) {\n+                LOG.info(\"There is one query running for detectorId: {}\", anomalyDetector.getDetectorId());", "originalCommit": "bc6a763172f7e1162125f35b445b81b9916204b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExOTgyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r382119826", "bodyText": "You are correct. Canceling the stuck query whenever new query comes is one way. However it can be expensive since right now we can only use string compare(query.getDescription()) to find which query to kill. Also killing query using task management API is not effective instantly. It will only happen when moving to next segment.", "author": "zhanghg08", "createdAt": "2020-02-20T16:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTQ5MQ=="}], "type": "inlineReview"}, {"oid": "3a82b22edde7528c1fcb0af681aa712b9cd9cd3e", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/3a82b22edde7528c1fcb0af681aa712b9cd9cd3e", "message": "Address feedback from Yaliang and Lai", "committedDate": "2020-02-05T18:33:04Z", "type": "commit"}, {"oid": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "message": "Remove unused data structure", "committedDate": "2020-02-05T18:50:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTM0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380945347", "bodyText": "Minor. The doc is incomplete.", "author": "wnbts", "createdAt": "2020-02-18T21:28:28Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStateManager.java", "diffHunk": "@@ -209,4 +209,13 @@ public void addPressure(String nodeId) {\n     public void resetBackpressureCounter(String nodeId) {\n         backpressureMuter.remove(nodeId);\n     }\n+\n+    /**\n+     * Check if there is running query on given detector\n+     * @param detector Anomaly Detector\n+     * @return boolean", "originalCommit": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODA2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380968069", "bodyText": "will update", "author": "zhanghg08", "createdAt": "2020-02-18T22:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NjUzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380946535", "bodyText": "Minor. Adds.\nAlso, use descriptive language instead of prescriptive. See java doc.", "author": "wnbts", "createdAt": "2020-02-18T21:30:49Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -114,7 +114,9 @@ public SearchFeatureDao(\n     }\n \n     /**\n-     * Gets features for the given time period.\n+     * Gets features for the given time period. This function also add given detector to negative cache before sending es request.", "originalCommit": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODAyMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380968020", "bodyText": "will update, thanks for the suggestion", "author": "zhanghg08", "createdAt": "2020-02-18T22:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NjUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0Nzc5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380947792", "bodyText": "What should happen if the detector is already in cache?", "author": "wnbts", "createdAt": "2020-02-18T21:33:24Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +158,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            throttler.insertFilteredQuery(detector, request);", "originalCommit": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2MjI0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380962245", "bodyText": "It won't happen here since if a detector is already in cache, we will throw exception in AnomalyResultTransportAction", "author": "zhanghg08", "createdAt": "2020-02-18T22:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0Nzc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzMTkzMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381631930", "bodyText": "This can be a race condition when concurrent threads have finished the check at the higher level and try to execute queries. The method needs to be synchronized.", "author": "wnbts", "createdAt": "2020-02-20T00:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0Nzc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDExMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380950112", "bodyText": "Minor. The method can be simplified to one line. return throttler.getFilteredQuery(detector).isPresent()", "author": "wnbts", "createdAt": "2020-02-18T21:38:06Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +158,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            throttler.insertFilteredQuery(detector, request);\n+            AtomicReference<Response> respReference = new AtomicReference<>();\n+            final CountDownLatch latch = new CountDownLatch(1);\n+\n+            consumer.accept(request, new LatchedActionListener<Response>(ActionListener.wrap(response -> {\n+                // clear negative cache\n+                throttler.clearFilteredQuery(detector);\n+                respReference.set(response);\n+            }, exception -> {\n+                // clear negative cache\n+                throttler.clearFilteredQuery(detector);\n+                LOG.error(\"Cannot get response for request {}, error: {}\", request, exception);\n+            }), latch));\n+\n+            if (!latch.await(requestTimeout.getSeconds(), TimeUnit.SECONDS)) {\n+                throw new ElasticsearchTimeoutException(\"Cannot get response within time limit: \" + request.toString());\n+            }\n+            return Optional.ofNullable(respReference.get());\n+        } catch (InterruptedException e1) {\n+            LOG.error(CommonErrorMessages.WAIT_ERR_MSG);\n+            throw new IllegalStateException(e1);\n+        }\n+    }\n+\n+    /**\n+     * Check if there is running query on given detector\n+     * @param detector Anomaly Detector\n+     * @return boolean\n+     */\n+    public boolean hasRunningQuery(AnomalyDetector detector) {\n+        Optional<Map.Entry<ActionRequest, Instant>> queryEntry = throttler.getFilteredQuery(detector);", "originalCommit": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODEwOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380968109", "bodyText": "will update", "author": "zhanghg08", "createdAt": "2020-02-18T22:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDI4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380950285", "bodyText": "Minor. The class java doc is missing.", "author": "wnbts", "createdAt": "2020-02-18T21:38:26Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+public class Throttler {", "originalCommit": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODEyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380968121", "bodyText": "will update", "author": "zhanghg08", "createdAt": "2020-02-18T22:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjkxMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380952913", "bodyText": "MInor. The whole method can be simplified to this line  return Optional.of(negativeCache.get(detector.getDetectorId()));", "author": "wnbts", "createdAt": "2020-02-18T21:43:53Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+public class Throttler {\n+    // negativeCache is used to reject search query if given detector already has one query running\n+    // key is detectorId, value is an entry. Key is ActionRequest and value is the timestamp\n+    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;\n+    private final Clock clock;\n+\n+    public Throttler(Clock clock) {\n+        this.negativeCache = new ConcurrentHashMap<>();\n+        this.clock = clock;\n+    }\n+\n+    /**\n+     * Get negative cache value(ActionRequest, Instant) for given detector\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(ActionRequest, Instant)\n+     */\n+    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));", "originalCommit": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODE2NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380968164", "bodyText": "will update", "author": "zhanghg08", "createdAt": "2020-02-18T22:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MTI4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380971287", "bodyText": "Should be Optional.ofNullable", "author": "ylwu-amzn", "createdAt": "2020-02-18T22:22:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MzMyNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380953324", "bodyText": "Minor. The java doc is outdated.", "author": "wnbts", "createdAt": "2020-02-18T21:44:49Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+public class Throttler {\n+    // negativeCache is used to reject search query if given detector already has one query running\n+    // key is detectorId, value is an entry. Key is ActionRequest and value is the timestamp\n+    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;\n+    private final Clock clock;\n+\n+    public Throttler(Clock clock) {\n+        this.negativeCache = new ConcurrentHashMap<>();\n+        this.clock = clock;\n+    }\n+\n+    /**\n+     * Get negative cache value(ActionRequest, Instant) for given detector\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(ActionRequest, Instant)\n+     */\n+    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        if (negativeCache.containsKey(detector.getDetectorId())) {\n+            return Optional.of(negativeCache.get(detector.getDetectorId()));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * If detectorId is null, do nothing", "originalCommit": "fe2a193db5522ef3696f2b394cb88d7f2f2a38b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2ODE3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380968177", "bodyText": "will update", "author": "zhanghg08", "createdAt": "2020-02-18T22:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MzMyNA=="}], "type": "inlineReview"}, {"oid": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1bb92577a9c8570fc4f6dc02a1eafb00865f116e", "message": "Adding missing java doc and simplify code.", "committedDate": "2020-02-18T22:17:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3OTEyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r380979129", "bodyText": "Optional.ofNullable", "author": "ylwu-amzn", "createdAt": "2020-02-18T22:41:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -41,15 +44,11 @@ public Throttler(Clock clock) {\n      * @return negative cache value(ActionRequest, Instant)\n      */\n     public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n-        if (negativeCache.containsKey(detector.getDetectorId())) {\n-            return Optional.of(negativeCache.get(detector.getDetectorId()));\n-        }\n-        return Optional.empty();\n+        return Optional.of(negativeCache.get(detector.getDetectorId()));", "originalCommit": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MjY2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381392667", "bodyText": "will update", "author": "zhanghg08", "createdAt": "2020-02-19T16:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3OTEyOQ=="}], "type": "inlineReview"}, {"oid": "fae4c59dea02a78b9aec2a1acea45ca85672faab", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/fae4c59dea02a78b9aec2a1acea45ca85672faab", "message": "Address feedback: Optional.ofNullable", "committedDate": "2020-02-19T16:34:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyODU4MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381628580", "bodyText": "Minor. We is prescriptive (giving orders to code), not descriptive (stating what code does).", "author": "wnbts", "createdAt": "2020-02-20T00:39:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/feature/SearchFeatureDao.java", "diffHunk": "@@ -115,6 +115,9 @@ public SearchFeatureDao(\n \n     /**\n      * Gets features for the given time period.\n+     * This function also adds given detector to negative cache before sending es request.\n+     * Once we get response/exception within timeout, we treat this request as complete and clear the negative cache.", "originalCommit": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzMzY2MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381633661", "bodyText": "Minor. Outdated doc.", "author": "wnbts", "createdAt": "2020-02-20T00:56:26Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+/**\n+ * Utility functions for throttling query.\n+ */\n+public class Throttler {\n+    // negativeCache is used to reject search query if given detector already has one query running\n+    // key is detectorId, value is an entry. Key is ActionRequest and value is the timestamp\n+    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;\n+    private final Clock clock;\n+\n+    public Throttler(Clock clock) {\n+        this.negativeCache = new ConcurrentHashMap<>();\n+        this.clock = clock;\n+    }\n+\n+    /**\n+     * Get negative cache value(ActionRequest, Instant) for given detector\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(ActionRequest, Instant)\n+     */\n+    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        return Optional.of(negativeCache.get(detector.getDetectorId()));\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * @param detector AnomalyDetector\n+     * @param request ActionRequest\n+     */\n+    public void insertFilteredQuery(AnomalyDetector detector, ActionRequest request) {\n+        negativeCache.put(detector.getDetectorId(), new AbstractMap.SimpleEntry<>(request, clock.instant()));\n+    }\n+\n+    /**\n+     * Clear the negative cache for given detector.\n+     * If detectorId is null, do nothing", "originalCommit": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzMzk5NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r381633994", "bodyText": "Minor. Why not using Map::remove?", "author": "wnbts", "createdAt": "2020-02-20T00:57:52Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/Throttler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistroforelasticsearch.ad.util;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.elasticsearch.action.ActionRequest;\n+\n+/**\n+ * Utility functions for throttling query.\n+ */\n+public class Throttler {\n+    // negativeCache is used to reject search query if given detector already has one query running\n+    // key is detectorId, value is an entry. Key is ActionRequest and value is the timestamp\n+    private final ConcurrentHashMap<String, Map.Entry<ActionRequest, Instant>> negativeCache;\n+    private final Clock clock;\n+\n+    public Throttler(Clock clock) {\n+        this.negativeCache = new ConcurrentHashMap<>();\n+        this.clock = clock;\n+    }\n+\n+    /**\n+     * Get negative cache value(ActionRequest, Instant) for given detector\n+     * @param detector AnomalyDetector\n+     * @return negative cache value(ActionRequest, Instant)\n+     */\n+    public Optional<Map.Entry<ActionRequest, Instant>> getFilteredQuery(AnomalyDetector detector) {\n+        return Optional.of(negativeCache.get(detector.getDetectorId()));\n+    }\n+\n+    /**\n+     * Insert the negative cache entry for given detector\n+     * @param detector AnomalyDetector\n+     * @param request ActionRequest\n+     */\n+    public void insertFilteredQuery(AnomalyDetector detector, ActionRequest request) {\n+        negativeCache.put(detector.getDetectorId(), new AbstractMap.SimpleEntry<>(request, clock.instant()));\n+    }\n+\n+    /**\n+     * Clear the negative cache for given detector.\n+     * If detectorId is null, do nothing\n+     * @param detector AnomalyDetector\n+     */\n+    public void clearFilteredQuery(AnomalyDetector detector) {\n+        negativeCache.keySet().removeIf(key -> key.equals(detector.getDetectorId()));", "originalCommit": "1bb92577a9c8570fc4f6dc02a1eafb00865f116e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c6a048df327cf67b8b21e85392783ed9409c5b71", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/c6a048df327cf67b8b21e85392783ed9409c5b71", "message": "Address feedback", "committedDate": "2020-02-20T17:21:16Z", "type": "commit"}, {"oid": "fcab62ca4184e781c45ed5016a6cd2eaeeba2a92", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/fcab62ca4184e781c45ed5016a6cd2eaeeba2a92", "message": "Merge remote-tracking branch 'upstream/development' into development", "committedDate": "2020-02-20T17:31:06Z", "type": "commit"}, {"oid": "f7ad7c0fb5c812e67cee3e1c851d32282cb02b25", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/f7ad7c0fb5c812e67cee3e1c851d32282cb02b25", "message": "1) Adding test case for throttler\n2) Adding check when inserting new entry to negative cache.", "committedDate": "2020-02-20T23:40:35Z", "type": "commit"}, {"oid": "ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c", "message": "Merge remote-tracking branch 'upstream/development' into development", "committedDate": "2020-02-20T23:44:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMjkwOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r383522908", "bodyText": "MInor. This exception should be documented for client.", "author": "wnbts", "createdAt": "2020-02-24T21:24:23Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +157,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            // if key already exist, reject the request and throws exception\n+            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n+                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n+                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);", "originalCommit": "ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3ODgzNw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r383578837", "bodyText": "added.", "author": "zhanghg08", "createdAt": "2020-02-24T23:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyMjkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NjE4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/40#discussion_r383566189", "bodyText": "If exception happens, should clear negative cache for this detector", "author": "ylwu-amzn", "createdAt": "2020-02-24T23:01:50Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/ClientUtil.java", "diffHunk": "@@ -152,4 +157,62 @@ public ClientUtil(Settings setting, Client client) {\n     ) {\n         return function.apply(request).actionGet(requestTimeout);\n     }\n+\n+    /**\n+     * Send a nonblocking request with a timeout and return response. The request will first be put into\n+     * the negative cache. Once the request complete, it will be removed from the negative cache.\n+     *\n+     * @param request request like index/search/get\n+     * @param LOG log\n+     * @param consumer functional interface to operate as a client request like client::get\n+     * @param <Request> ActionRequest\n+     * @param <Response> ActionResponse\n+     * @param detector Anomaly Detector\n+     * @return the response\n+     * @throws ElasticsearchTimeoutException when we cannot get response within time.\n+     * @throws IllegalStateException when the waiting thread is interrupted\n+     */\n+    public <Request extends ActionRequest, Response extends ActionResponse> Optional<Response> throttledTimedRequest(\n+        Request request,\n+        Logger LOG,\n+        BiConsumer<Request, ActionListener<Response>> consumer,\n+        AnomalyDetector detector\n+    ) {\n+        try {\n+            // if key already exist, reject the request and throws exception\n+            if (!throttler.insertFilteredQuery(detector.getDetectorId(), request)) {\n+                LOG.error(\"There is one query running for detectorId: {}\", detector.getDetectorId());\n+                throw new EndRunException(detector.getDetectorId(), \"There is one query running on AnomalyDetector\", true);\n+            }\n+            AtomicReference<Response> respReference = new AtomicReference<>();\n+            final CountDownLatch latch = new CountDownLatch(1);\n+\n+            consumer.accept(request, new LatchedActionListener<Response>(ActionListener.wrap(response -> {\n+                // clear negative cache\n+                throttler.clearFilteredQuery(detector.getDetectorId());\n+                respReference.set(response);\n+            }, exception -> {\n+                // clear negative cache\n+                throttler.clearFilteredQuery(detector.getDetectorId());\n+                LOG.error(\"Cannot get response for request {}, error: {}\", request, exception);\n+            }), latch));\n+\n+            if (!latch.await(requestTimeout.getSeconds(), TimeUnit.SECONDS)) {\n+                throw new ElasticsearchTimeoutException(\"Cannot get response within time limit: \" + request.toString());\n+            }\n+            return Optional.ofNullable(respReference.get());\n+        } catch (InterruptedException e1) {\n+            LOG.error(CommonErrorMessages.WAIT_ERR_MSG);\n+            throw new IllegalStateException(e1);", "originalCommit": "ff73fb7eb6fb3b0fa9146a90ff73e406b6afa56c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "95f389255c0d487162bae63747dd89e987c46ff3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/95f389255c0d487162bae63747dd89e987c46ff3", "message": "Add additional clean cache step.", "committedDate": "2020-02-24T23:20:06Z", "type": "commit"}, {"oid": "1d086d120dcc1f0fb02e9bd131cbfe9b9f434c29", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1d086d120dcc1f0fb02e9bd131cbfe9b9f434c29", "message": "Add javadoc for EndRunException", "committedDate": "2020-02-24T23:37:20Z", "type": "commit"}]}