{"pr_number": 332, "pr_title": "add ad task stats", "pr_createdAt": "2020-12-16T23:18:05Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332", "timeline": [{"oid": "237530aca98c411bf1cbb77b5cf1341ff9643bc5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/237530aca98c411bf1cbb77b5cf1341ff9643bc5", "message": "add ad task stats", "committedDate": "2020-12-16T23:14:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NjQzNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544696436", "bodyText": "these metrics will be added later?", "author": "yizheliu-amazon", "createdAt": "2020-12-16T23:25:39Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java", "diffHunk": "@@ -460,6 +460,12 @@ private static Void initGson() {\n                 new ADStat<>(true, new IndexStatusSupplier(indexUtils, DetectorInternalState.DETECTOR_STATE_INDEX))\n             )\n             .put(StatNames.DETECTOR_COUNT.getName(), new ADStat<>(true, new SettableSupplier()))\n+            .put(StatNames.JVM_HEAP_USAGE.getName(), new ADStat<>(false, new SettableSupplier()))\n+            .put(StatNames.HISTORICAL_DETECTOR_COUNT.getName(), new ADStat<>(true, new SettableSupplier()))\n+            .put(StatNames.AD_EXECUTING_BATCH_TASK_COUNT.getName(), new ADStat<>(false, new CounterSupplier()))\n+            .put(StatNames.AD_CANCELED_BATCH_TASK_COUNT.getName(), new ADStat<>(false, new CounterSupplier()))\n+            .put(StatNames.AD_TOTAL_BATCH_TASK_EXECUTION_COUNT.getName(), new ADStat<>(false, new CounterSupplier()))\n+            .put(StatNames.AD_BATCH_TASK_FAILURE_COUNT.getName(), new ADStat<>(false, new CounterSupplier()))", "originalCommit": "237530aca98c411bf1cbb77b5cf1341ff9643bc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNDc1MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544734750", "bodyText": "Yes, these metrics will be added in following PRs.", "author": "ylwu-amzn", "createdAt": "2020-12-17T01:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NjQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NzA1NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544697054", "bodyText": "is it current heap usage? if yes, what's the purpose to have this?", "author": "weicongs-amazon", "createdAt": "2020-12-16T23:27:14Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ADStatsNodesTransportAction.java", "diffHunk": "@@ -99,6 +104,12 @@ private ADStatsNodeResponse createADStatsNodeResponse(ADStatsRequest adStatsRequ\n         Map<String, Object> statValues = new HashMap<>();\n         Set<String> statsToBeRetrieved = adStatsRequest.getStatsToBeRetrieved();\n \n+        if (statsToBeRetrieved.contains(StatNames.JVM_HEAP_USAGE.getName())) {\n+            long heapUsedPercent = jvmService.stats().getMem().getHeapUsedPercent();", "originalCommit": "237530aca98c411bf1cbb77b5cf1341ff9643bc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNTgyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544735825", "bodyText": "We will use this to decide which node has lowest load. The task will be distributed to node which\n\nJVM heap usage not exceeds limitation(85%)\nExecuting AD task count is minimum and if there are multiple nodes has the same minimum task count, will choose one which has lower JVM heap usage.", "author": "ylwu-amzn", "createdAt": "2020-12-17T01:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NzA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2Mjc3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544762771", "bodyText": "but this is for stats requests, right? not sure how this JVM heap info is used after client receives it.", "author": "weicongs-amazon", "createdAt": "2020-12-17T02:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NzA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4MDIzMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544780232", "bodyText": "In next PR, the task manger will send AD stats transport action to get all data nodes' JVM heap info and executing task count to dispatch AD task.\nThe REST AD stats API is only for monitoring.", "author": "ylwu-amzn", "createdAt": "2020-12-17T03:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NzA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5NjUxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544796511", "bodyText": "I see, thanks. our task manager will use the same one. MINOR: it's better to remove the jvm heap info from rest api since it's kind of confusing.", "author": "weicongs-amazon", "createdAt": "2020-12-17T04:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5NzA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5Nzg4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544697882", "bodyText": "I see it's only for testing. Is protected method good enough?", "author": "weicongs-amazon", "createdAt": "2020-12-16T23:29:21Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/StatsAnomalyDetectorResponse.java", "diffHunk": "@@ -47,4 +47,8 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws\n         adStatsResponse.toXContent(builder, params);\n         return builder;\n     }\n+\n+    public ADStatsResponse getAdStatsResponse() {", "originalCommit": "237530aca98c411bf1cbb77b5cf1341ff9643bc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczODA2MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544738060", "bodyText": "Yes, agree, will change to protected.", "author": "ylwu-amzn", "createdAt": "2020-12-17T01:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5Nzg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwMjQwMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544702403", "bodyText": "why is prefix used here?", "author": "weicongs-amazon", "createdAt": "2020-12-16T23:40:27Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/StatsAnomalyDetectorTransportAction.java", "diffHunk": "@@ -120,23 +127,34 @@ private void getClusterStats(\n         ADStatsRequest adStatsRequest\n     ) {\n         ADStatsResponse adStatsResponse = new ADStatsResponse();\n-        if (adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())) {\n-            if (clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n-                final SearchRequest request = client\n-                    .prepareSearch(AnomalyDetector.ANOMALY_DETECTORS_INDEX)\n-                    .setSize(0)\n-                    .setTrackTotalHits(true)\n-                    .request();\n-                client.search(request, ActionListener.wrap(indicesStatsResponse -> {\n-                    adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(indicesStatsResponse.getHits().getTotalHits().value);\n-                    adStatsResponse.setClusterStats(getClusterStatsMap(adStatsRequest));\n-                    listener.onResponse(adStatsResponse);\n-                }, e -> listener.onFailure(new RuntimeException(\"Failed to get AD cluster stats\", e))));\n-            } else {\n-                adStats.getStat(StatNames.DETECTOR_COUNT.getName()).setValue(0L);\n+        if ((adStatsRequest.getStatsToBeRetrieved().contains(StatNames.DETECTOR_COUNT.getName())\n+            || adStatsRequest.getStatsToBeRetrieved().contains(StatNames.HISTORICAL_DETECTOR_COUNT.getName()))\n+            && clusterService.state().getRoutingTable().hasIndex(AnomalyDetector.ANOMALY_DETECTORS_INDEX)) {\n+\n+            TermsAggregationBuilder termsAgg = AggregationBuilders.terms(DETECTOR_TYPE_AGG).field(AnomalyDetector.DETECTOR_TYPE_FIELD);\n+            SearchRequest request = new SearchRequest()\n+                .indices(AnomalyDetector.ANOMALY_DETECTORS_INDEX)\n+                .source(new SearchSourceBuilder().aggregation(termsAgg).size(0).trackTotalHits(true));\n+\n+            client.search(request, ActionListener.wrap(r -> {\n+                StringTerms aggregation = r.getAggregations().get(DETECTOR_TYPE_AGG);\n+                List<StringTerms.Bucket> buckets = aggregation.getBuckets();\n+                long totalDetectors = r.getHits().getTotalHits().value;\n+                long totalHistoricalDetectors = 0;\n+                for (StringTerms.Bucket b : buckets) {\n+                    if (b.getKeyAsString().contains(HISTORICAL_DETECTOR_TYPE_PREFIX)) {", "originalCommit": "237530aca98c411bf1cbb77b5cf1341ff9643bc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNjE4OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544736188", "bodyText": "We may have historical single and multiple entity detector, both will be counted as historical detector.", "author": "ylwu-amzn", "createdAt": "2020-12-17T01:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwMjQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNzcyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544737725", "bodyText": "I will change this to historical single entity detector, so we can track historical single/multi-entity detector separately.", "author": "ylwu-amzn", "createdAt": "2020-12-17T01:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwMjQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwMzcyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544703729", "bodyText": "do we need realtime detector count?", "author": "weicongs-amazon", "createdAt": "2020-12-16T23:43:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/stats/StatNames.java", "diffHunk": "@@ -32,7 +32,13 @@\n     MODELS_CHECKPOINT_INDEX_STATUS(\"models_checkpoint_index_status\"),\n     ANOMALY_DETECTION_JOB_INDEX_STATUS(\"anomaly_detection_job_index_status\"),\n     ANOMALY_DETECTION_STATE_STATUS(\"anomaly_detection_state_status\"),\n-    MODEL_INFORMATION(\"models\");\n+    MODEL_INFORMATION(\"models\"),\n+    JVM_HEAP_USAGE(\"jvm_heap_usage\"),\n+    HISTORICAL_DETECTOR_COUNT(\"historical_detector_count\"),", "originalCommit": "237530aca98c411bf1cbb77b5cf1341ff9643bc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNDQyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544734426", "bodyText": "This is for monitor usage, we can use this this to build some monitor/dashboard based on this. Currently our metrics shows only total detector count. Will add realtime detector count as well. But the old realtime detectors have no detector type filed, so we need to backfill these old detectors first if we want to get metrics for realtime single/multi-entity detector separately. Prefer to do that in another PR. Created an issue to track this: #333", "author": "ylwu-amzn", "createdAt": "2020-12-17T01:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwMzcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNDYzOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544704638", "bodyText": "btw, how to run this test case? Is it included in the \"build\" command?", "author": "weicongs-amazon", "createdAt": "2020-12-16T23:46:17Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/StatsAnomalyDetectorTransportActionTests.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils.XCONTENT_WITH_TYPE;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.junit.Before;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorPlugin;\n+import com.amazon.opendistroforelasticsearch.ad.TestHelpers;\n+import com.amazon.opendistroforelasticsearch.ad.indices.AnomalyDetectionIndices;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetectorType;\n+import com.amazon.opendistroforelasticsearch.ad.stats.StatNames;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class StatsAnomalyDetectorTransportActionTests extends ESIntegTestCase {", "originalCommit": "237530aca98c411bf1cbb77b5cf1341ff9643bc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczNjczNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/332#discussion_r544736735", "bodyText": "Yes, ./gradlew build will run this.", "author": "ylwu-amzn", "createdAt": "2020-12-17T01:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNDYzOA=="}], "type": "inlineReview"}, {"oid": "8561acccb0b1d06ef13d29d151b9fffcd65ad87a", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8561acccb0b1d06ef13d29d151b9fffcd65ad87a", "message": "change historical detector stats name to historical single entity detector;change getAdStatsResponse as protected method", "committedDate": "2020-12-17T01:43:29Z", "type": "commit"}, {"oid": "f6f70455593e80c3b24a49056772b32f4b6bb949", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/f6f70455593e80c3b24a49056772b32f4b6bb949", "message": "change historical detector stats name to historical single entity detector;change getAdStatsResponse as protected method", "committedDate": "2020-12-17T04:38:13Z", "type": "commit"}]}