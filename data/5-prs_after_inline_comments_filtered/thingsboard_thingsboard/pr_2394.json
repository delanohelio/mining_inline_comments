{"pr_number": 2394, "pr_title": "bug fixes & improvements / sql-timeseries (#2382)", "pr_createdAt": "2020-02-06T07:10:00Z", "pr_url": "https://github.com/thingsboard/thingsboard/pull/2394", "timeline": [{"oid": "b4e405f6d4afb0c19c30efc038a21fc7fa0c248d", "url": "https://github.com/thingsboard/thingsboard/commit/b4e405f6d4afb0c19c30efc038a21fc7fa0c248d", "message": "bug fixes & improvements / sql-timeseries (#2382)\n\n* fixed the partion date extracting\r\n\r\n* fix imports\r\n\r\n* ts-keys dictionary for latest, hsqldb\r\n\r\n* removed AbstractSimpleSqlTimeseriesDao class & fix beanCreationException in ThingsboardInstallService\r\n\r\n* timescale-db upgrade added\r\n\r\n* added postgreSQL upgrade\r\n\r\n* fix logging\r\n\r\n* refactoring timeseries-dao implementation", "committedDate": "2020-02-06T07:08:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3MTkzOQ==", "url": "https://github.com/thingsboard/thingsboard/pull/2394#discussion_r375671939", "bodyText": "Please drop the functions you have just created.", "author": "ashvayka", "createdAt": "2020-02-06T07:18:52Z", "path": "application/src/main/java/org/thingsboard/server/service/install/PsqlTsDatabaseUpgradeService.java", "diffHunk": "@@ -70,20 +73,22 @@ public void upgradeDatabase(String fromVersion) throws Exception {\n                     log.info(\"Updating timeseries schema ...\");\n                     log.info(\"Load upgrade functions ...\");\n                     loadSql(conn);\n-                    log.info(\"Upgrade functions successfully loaded!\");\n                     boolean versionValid = checkVersion(conn);\n                     if (!versionValid) {\n                         log.info(\"PostgreSQL version should be at least more than 10!\");\n                         log.info(\"Please upgrade your PostgreSQL and restart the script!\");\n                     } else {\n                         log.info(\"PostgreSQL version is valid!\");\n                         log.info(\"Updating schema ...\");\n-                        executeFunction(conn, CREATE_PARTITION_TABLE);\n+                        executeFunction(conn, CREATE_PARTITION_TS_KV_TABLE);\n                         executeFunction(conn, CREATE_PARTITIONS);\n                         executeFunction(conn, CREATE_TS_KV_DICTIONARY_TABLE);\n                         executeFunction(conn, INSERT_INTO_DICTIONARY);\n                         executeFunction(conn, INSERT_INTO_TS_KV);\n-                        dropOldTable(conn, DROP_OLD_TABLE);\n+                        executeFunction(conn, CREATE_NEW_TS_KV_LATEST_TABLE);\n+                        executeFunction(conn, INSERT_INTO_TS_KV_LATEST);\n+                        dropOldTable(conn, DROP_TABLE_TS_KV_OLD);\n+                        dropOldTable(conn, DROP_TABLE_TS_KV_LATEST_OLD);", "originalCommit": "b4e405f6d4afb0c19c30efc038a21fc7fa0c248d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3NDc4MA==", "url": "https://github.com/thingsboard/thingsboard/pull/2394#discussion_r375674780", "bodyText": "TYPO", "author": "ashvayka", "createdAt": "2020-02-06T07:28:42Z", "path": "dao/src/main/java/org/thingsboard/server/dao/sqlts/AbstractPsqlHsqlTimeseriesDao.java", "diffHunk": "@@ -76,26 +63,39 @@ protected void destroy() {\n         }\n     }\n \n-    protected ListenableFuture<List<TsKvEntry>> findAllAsync(TenantId tenantId, EntityId entityId, ReadTsKvQuery query) {\n-        if (query.getAggregation() == Aggregation.NONE) {\n-            return findAllAsyncWithLimit(entityId, query);\n-        } else {\n-            long stepTs = query.getStartTs();\n-            List<ListenableFuture<Optional<TsKvEntry>>> futures = new ArrayList<>();\n-            while (stepTs < query.getEndTs()) {\n-                long startTs = stepTs;\n-                long endTs = stepTs + query.getInterval();\n-                long ts = startTs + (endTs - startTs) / 2;\n-                futures.add(findAndAggregateAsync(entityId, query.getKey(), startTs, endTs, ts, query.getAggregation()));\n-                stepTs = endTs;\n-            }\n-            return getTskvEntriesFuture(Futures.allAsList(futures));\n+    protected abstract ListenableFuture<Optional<TsKvEntry>> findAndAggregateAsync(TenantId tenantId, EntityId entityId, String key, long startTs, long endTs, long ts, Aggregation aggregation);\n+\n+    protected void switchAgregation(TenantId tenantId, EntityId entityId, String key, long startTs, long endTs, Aggregation aggregation, List<CompletableFuture<T>> entitiesFutures) {", "originalCommit": "b4e405f6d4afb0c19c30efc038a21fc7fa0c248d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY3NzA5Mg==", "url": "https://github.com/thingsboard/thingsboard/pull/2394#discussion_r375677092", "bodyText": "AbstractChunkedAggregationTimeseriesDao", "author": "ashvayka", "createdAt": "2020-02-06T07:36:27Z", "path": "dao/src/main/java/org/thingsboard/server/dao/sqlts/AbstractPsqlHsqlTimeseriesDao.java", "diffHunk": "@@ -15,43 +15,30 @@\n  */\n package org.thingsboard.server.dao.sqlts;\n \n-import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.SettableFuture;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Value;\n import org.thingsboard.server.common.data.id.EntityId;\n import org.thingsboard.server.common.data.id.TenantId;\n import org.thingsboard.server.common.data.kv.Aggregation;\n-import org.thingsboard.server.common.data.kv.ReadTsKvQuery;\n import org.thingsboard.server.common.data.kv.TsKvEntry;\n import org.thingsboard.server.dao.model.sql.AbstractTsKvEntity;\n import org.thingsboard.server.dao.sql.TbSqlBlockingQueue;\n import org.thingsboard.server.dao.sql.TbSqlBlockingQueueParams;\n \n import javax.annotation.PostConstruct;\n import javax.annotation.PreDestroy;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.stream.Collectors;\n \n @Slf4j\n-public abstract class AbstractSimpleSqlTimeseriesDao<T extends AbstractTsKvEntity> extends AbstractSqlTimeseriesDao {\n+public abstract class AbstractPsqlHsqlTimeseriesDao<T extends AbstractTsKvEntity> extends AbstractSqlTimeseriesDao {", "originalCommit": "b4e405f6d4afb0c19c30efc038a21fc7fa0c248d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "18e1838b6eb6b292fb37cf886d28b9731a981f34", "url": "https://github.com/thingsboard/thingsboard/commit/18e1838b6eb6b292fb37cf886d28b9731a981f34", "message": "refactored sqlUpgradeService implementation (#2395)\n\n* refactored sqlUpgradeService implementation\r\n\r\n* fix typo\r\n\r\n* change string constant name\r\n\r\n* add ability to re-init chunks for upgrade timescale", "committedDate": "2020-02-07T13:38:04Z", "type": "commit"}]}