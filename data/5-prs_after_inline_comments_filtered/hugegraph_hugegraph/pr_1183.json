{"pr_number": 1183, "pr_title": "implement RamTable", "pr_createdAt": "2020-09-19T06:55:56Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1183", "timeline": [{"oid": "2cbd441d8ced0c461cd850824aab03db8e3f363a", "url": "https://github.com/hugegraph/hugegraph/commit/2cbd441d8ced0c461cd850824aab03db8e3f363a", "message": "implement RamTable  (#49)\n\n* implement RamTable\n* plugin ramtable to StandardHugeGrap.edges(query)\n* plugin ramtable to GraphTransaction.queryEdgesFromBackend(Query query)\n* allow config vertices/edges capacity of ramtable\n* tiny improve: remove empty line and delete IntLongMap\n* support concurrent loading\n* fix edge direction of result is set to BOTH when query with BOTH\n\nChange-Id: I4e1a5c06bd331dc29a92dcb76843990863dfe6ca", "committedDate": "2020-09-19T04:45:59Z", "type": "commit"}, {"oid": "08027fe4330a7e824e1a436883471309758a52f5", "url": "https://github.com/hugegraph/hugegraph/commit/08027fe4330a7e824e1a436883471309758a52f5", "message": "add Consumers class to util package\n\nChange-Id: I8765582ba4e9b5fe8de4300719612a84bfce89a3", "committedDate": "2020-09-19T06:49:15Z", "type": "commit"}, {"oid": "3e6f35ded6620e924d84c973d05d5072e8e80ac2", "url": "https://github.com/hugegraph/hugegraph/commit/3e6f35ded6620e924d84c973d05d5072e8e80ac2", "message": "fix ramtable missing some edges if vertex id is big long number(overflow int) (#58)\n\nChange-Id: Icfaba2550c7ee8892d98b1fbb736645e3d3820d1", "committedDate": "2020-09-19T06:49:15Z", "type": "commit"}, {"oid": "19149a7929e69e8c57d345fb756197a0f6f44221", "url": "https://github.com/hugegraph/hugegraph/commit/19149a7929e69e8c57d345fb756197a0f6f44221", "message": "fix ramtable edge id(direction IN) does not exist and adjacent vertex without props\n\nChange-Id: I92cb10fbf0f7acd818a70723bc0dbd988ca89132", "committedDate": "2020-09-19T06:49:15Z", "type": "commit"}, {"oid": "b5f56bcb60860c9166d2e8cb7192379213201fa3", "url": "https://github.com/hugegraph/hugegraph/commit/b5f56bcb60860c9166d2e8cb7192379213201fa3", "message": "support load from file and export to file\n\nChange-Id: Iecfb5bad535e4954a325eb45b1d9def53fdb31c0\nusage: graph.reloadRamtable(true)", "committedDate": "2020-09-19T06:49:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1NTMwNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1183#discussion_r491755304", "bodyText": "if(ramtable) is more understandable", "author": "houzhizhen", "createdAt": "2020-09-21T00:41:31Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "diffHunk": "@@ -126,26 +127,37 @@\n     private final BackendStoreProvider storeProvider;\n     private final TinkerpopTransaction tx;\n \n-    public StandardHugeGraph(HugeConfig configuration) {\n+    private final RamTable ramtable;\n+\n+    public StandardHugeGraph(HugeConfig config) {\n         this.params = new StandardHugeGraphParams();\n-        this.configuration = configuration;\n+        this.configuration = config;\n \n         this.schemaEventHub = new EventHub(\"schema\");\n         this.graphEventHub = new EventHub(\"graph\");\n         this.indexEventHub = new EventHub(\"index\");\n \n-        final int writeLimit = configuration.get(CoreOptions.RATE_LIMIT_WRITE);\n+        final int writeLimit = config.get(CoreOptions.RATE_LIMIT_WRITE);\n         this.writeRateLimiter = writeLimit > 0 ?\n                                 RateLimiter.create(writeLimit) : null;\n-        final int readLimit = configuration.get(CoreOptions.RATE_LIMIT_READ);\n+        final int readLimit = config.get(CoreOptions.RATE_LIMIT_READ);\n         this.readRateLimiter = readLimit > 0 ?\n                                RateLimiter.create(readLimit) : null;\n \n+        boolean ramtable = config.get(CoreOptions.QUERY_RAMTABLE_ENABLE);\n+        if (!ramtable) {", "originalCommit": "b5f56bcb60860c9166d2e8cb7192379213201fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1NjAxNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1183#discussion_r491756016", "bodyText": "It is better to put this.done in finally clause.", "author": "houzhizhen", "createdAt": "2020-09-21T00:48:00Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/util/Consumers.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.util;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.task.TaskManager.ContextCallable;\n+import com.baidu.hugegraph.util.ExecutorUtil;\n+import com.baidu.hugegraph.util.Log;\n+\n+public class Consumers<V> {\n+\n+    public static final int CPUS = Runtime.getRuntime().availableProcessors();\n+    public static final int THREADS = 4 + CPUS / 4;\n+    public static final int QUEUE_WORKER_SIZE = 1000;\n+\n+    private static final Logger LOG = Log.logger(Consumers.class);\n+\n+    private final ExecutorService executor;\n+    private final Consumer<V> consumer;\n+    private final Runnable done;\n+\n+    private final int workers;\n+    private final int queueSize;\n+    private final CountDownLatch latch;\n+    private final BlockingQueue<V> queue;\n+\n+    private volatile boolean ending = false;\n+    private volatile Throwable exception = null;\n+\n+    public Consumers(ExecutorService executor, Consumer<V> consumer) {\n+        this(executor, consumer, null);\n+    }\n+\n+    public Consumers(ExecutorService executor,\n+                     Consumer<V> consumer, Runnable done) {\n+        this.executor = executor;\n+        this.consumer = consumer;\n+        this.done = done;\n+\n+        int workers = THREADS;\n+        if (this.executor instanceof ThreadPoolExecutor) {\n+            workers = ((ThreadPoolExecutor) this.executor).getCorePoolSize();\n+        }\n+        this.workers = workers;\n+        this.queueSize = QUEUE_WORKER_SIZE * workers;\n+        this.latch = new CountDownLatch(workers);\n+        this.queue = new ArrayBlockingQueue<>(this.queueSize);\n+    }\n+\n+    public void start(String name) {\n+        this.ending = false;\n+        this.exception = null;\n+        if (this.executor == null) {\n+            return;\n+        }\n+        LOG.info(\"Starting {} workers[{}] with queue size {}...\",\n+                 this.workers, name, this.queueSize);\n+        for (int i = 0; i < this.workers; i++) {\n+            this.executor.submit(new ContextCallable<>(this::runAndDone));\n+        }\n+    }\n+\n+    private Void runAndDone() {\n+        try {\n+            this.run();\n+            this.done();", "originalCommit": "b5f56bcb60860c9166d2e8cb7192379213201fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e910426183c233a05cd52b848dedc93c03e5635e", "url": "https://github.com/hugegraph/hugegraph/commit/e910426183c233a05cd52b848dedc93c03e5635e", "message": "split test into unit test and core test\n\nChange-Id: I7ccd8ab674c0333d0a35930d0822b198954d6bd7", "committedDate": "2020-09-21T08:31:07Z", "type": "commit"}, {"oid": "e910426183c233a05cd52b848dedc93c03e5635e", "url": "https://github.com/hugegraph/hugegraph/commit/e910426183c233a05cd52b848dedc93c03e5635e", "message": "split test into unit test and core test\n\nChange-Id: I7ccd8ab674c0333d0a35930d0822b198954d6bd7", "committedDate": "2020-09-21T08:31:07Z", "type": "forcePushed"}]}