{"pr_number": 1079, "pr_title": "fix task scheduler bugs: dead lock and dup server-info", "pr_createdAt": "2020-07-03T15:03:23Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1079", "timeline": [{"oid": "1cd809e5b29c2bc094eaca88612fe50746255065", "url": "https://github.com/hugegraph/hugegraph/commit/1cd809e5b29c2bc094eaca88612fe50746255065", "message": "fix task schedule 3 bugs\n\n1.fix dead lock when scheduler-worker hold scheduleTasks lock then\n  query tasks, tx() method synchronized(this) wait indefinitely.\n2.delete server-info when graph close\n3.throw exception if task if failed in syncWait\n\nfix #1075\nChange-Id: Icb8d5073f024f0598d439d738d6c0e2caa6fd0cd", "committedDate": "2020-07-07T14:41:38Z", "type": "commit"}, {"oid": "600df25819d414956c78f5e879c356cdff8dc830", "url": "https://github.com/hugegraph/hugegraph/commit/600df25819d414956c78f5e879c356cdff8dc830", "message": "submit task if there is only single node\n\nChange-Id: I69efd7d48610619379975e7d284e5dab88e30776", "committedDate": "2020-07-07T14:41:38Z", "type": "commit"}, {"oid": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "url": "https://github.com/hugegraph/hugegraph/commit/795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "message": "fix some bugs\n\n* standardize the status of tasks\n* remove server info only after storage is initialized\n* cancel(task) don't remove task from memory if it's single-node server\n* notifyNewTask only notify when the queue is empty\n\nChange-Id: I874724519e516f600ee8eb1b4760a607421a844a", "committedDate": "2020-07-07T14:41:38Z", "type": "commit"}, {"oid": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "url": "https://github.com/hugegraph/hugegraph/commit/795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "message": "fix some bugs\n\n* standardize the status of tasks\n* remove server info only after storage is initialized\n* cancel(task) don't remove task from memory if it's single-node server\n* notifyNewTask only notify when the queue is empty\n\nChange-Id: I874724519e516f600ee8eb1b4760a607421a844a", "committedDate": "2020-07-07T14:41:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMDMzNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451220336", "bodyText": "Parameter task is not used.", "author": "houzhizhen", "createdAt": "2020-07-08T00:46:25Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -242,17 +237,19 @@ public int pendingTasks() {\n     }\n \n     protected void notifyNewTask(HugeTask<?> task) {", "originalCommit": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwOTQyMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451309423", "bodyText": "does not matter, just preserved", "author": "javeme", "createdAt": "2020-07-08T06:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyMDMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNjAzMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451226031", "bodyText": "It may schedule more tasks at the same time, and these tasks will not be processed.", "author": "houzhizhen", "createdAt": "2020-07-08T01:08:42Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -242,17 +237,19 @@ public int pendingTasks() {\n     }\n \n     protected void notifyNewTask(HugeTask<?> task) {\n-        // Notify to schedule tasks initiatively when have new task\n-        this.schedulerExecutor.submit(this::scheduleOrExecuteJob);\n+        Queue<Runnable> queue = ((ThreadPoolExecutor) this.schedulerExecutor)\n+                                                          .getQueue();\n+        if (queue.size() <= 1) {", "originalCommit": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMTA3Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451311072", "bodyText": "it's ok to not notify again if there are more than 1 task in queue(like two, one is timer task, one is immediate task), we don't want too many  immediate tasks to be inserted into queue, one notify will cause all the tasks processed.", "author": "javeme", "createdAt": "2020-07-08T06:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNjAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NDM3Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451254373", "bodyText": "queued => scheduling", "author": "zhoney", "createdAt": "2020-07-08T03:00:23Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -248,127 +272,128 @@ private void unlistenChanges() {\n     @Override\n     public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        if (!this.serverManager().master()) {\n+        this.checkOnMasterNode(\"cancel\");\n+\n+        if (task.completed() || task.cancelling()) {\n             return;\n         }\n-        if (!task.completed()) {\n-            // The task scheduled to workers, waiting for worker cancel\n-            task.status(TaskStatus.CANCELLING);\n+\n+        LOG.info(\"Cancel task '{}' in status {}\", task.id(), task.status());\n+\n+        if (task.server() == null) {\n+            // The task not scheduled to workers, set canceled immediately\n+            assert task.status().code() < TaskStatus.QUEUED.code();\n+            if (task.status(TaskStatus.CANCELLED)) {\n+                this.save(task);\n+                return;\n+            }\n+        } else if (task.status(TaskStatus.CANCELLING)) {\n+            // The task scheduled to workers, let the worker node to cancel\n             this.save(task);\n-            this.remove(task.id());\n+            assert task.server() != null : task;\n+            assert this.serverManager().master();\n+            if (!task.server().equals(this.serverManager().selfServerId())) {\n+                /*\n+                 * Remove task from memory if it's running on worker node,\n+                 * but keep task in memory if it's running on master node.\n+                 * cancel-scheduling will read task from backend store, if\n+                 * removed this instance from memory, there will be two task\n+                 * instances with same id, and can't cancel the real task that\n+                 * is running but removed from memory.\n+                 */\n+                this.remove(task);\n+            }\n             // Notify master server to schedule and execute immediately\n             TaskManager.instance().notifyNewTask(task);\n+            return;\n         }\n+\n+        throw new HugeException(\"Can't cancel task '%s' in status %s\",\n+                                task.id(), task.status());\n+    }\n+\n+    protected ServerInfoManager serverManager() {\n+        return this.serverManager;\n     }\n \n-    protected synchronized <V> void scheduleTasks() {\n-        // Master schedule all queued tasks to suitable servers\n+    protected synchronized void scheduleTasks() {\n+        // Master server schedule all queued tasks to suitable worker servers", "originalCommit": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NjgwNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451256804", "bodyText": "must save server info here. Otherwise all tasks will be scheduled to same worker\nImplement increaseLoad(int load) in class HugeServerInfo", "author": "zhoney", "createdAt": "2020-07-08T03:10:30Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -248,127 +272,128 @@ private void unlistenChanges() {\n     @Override\n     public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        if (!this.serverManager().master()) {\n+        this.checkOnMasterNode(\"cancel\");\n+\n+        if (task.completed() || task.cancelling()) {\n             return;\n         }\n-        if (!task.completed()) {\n-            // The task scheduled to workers, waiting for worker cancel\n-            task.status(TaskStatus.CANCELLING);\n+\n+        LOG.info(\"Cancel task '{}' in status {}\", task.id(), task.status());\n+\n+        if (task.server() == null) {\n+            // The task not scheduled to workers, set canceled immediately\n+            assert task.status().code() < TaskStatus.QUEUED.code();\n+            if (task.status(TaskStatus.CANCELLED)) {\n+                this.save(task);\n+                return;\n+            }\n+        } else if (task.status(TaskStatus.CANCELLING)) {\n+            // The task scheduled to workers, let the worker node to cancel\n             this.save(task);\n-            this.remove(task.id());\n+            assert task.server() != null : task;\n+            assert this.serverManager().master();\n+            if (!task.server().equals(this.serverManager().selfServerId())) {\n+                /*\n+                 * Remove task from memory if it's running on worker node,\n+                 * but keep task in memory if it's running on master node.\n+                 * cancel-scheduling will read task from backend store, if\n+                 * removed this instance from memory, there will be two task\n+                 * instances with same id, and can't cancel the real task that\n+                 * is running but removed from memory.\n+                 */\n+                this.remove(task);\n+            }\n             // Notify master server to schedule and execute immediately\n             TaskManager.instance().notifyNewTask(task);\n+            return;\n         }\n+\n+        throw new HugeException(\"Can't cancel task '%s' in status %s\",\n+                                task.id(), task.status());\n+    }\n+\n+    protected ServerInfoManager serverManager() {\n+        return this.serverManager;\n     }\n \n-    protected synchronized <V> void scheduleTasks() {\n-        // Master schedule all queued tasks to suitable servers\n+    protected synchronized void scheduleTasks() {\n+        // Master server schedule all queued tasks to suitable worker servers\n+        Map<HugeServerInfo, MutableInt> scheduleInfos = new HashMap<>();\n+        ServerInfoManager serverManager = this.serverManager();\n         String page = this.supportsPaging() ? PageInfo.PAGE_NONE : null;\n         do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            HugeTask<V> task;\n+            Iterator<HugeTask<Object>> tasks = this.tasks(TaskStatus.SCHEDULING,\n+                                                          PAGE_SIZE, page);\n             while (tasks.hasNext()) {\n-                task = tasks.next();\n+                HugeTask<?> task = tasks.next();\n                 if (task.server() != null) {\n                     // Skip if already scheduled\n                     continue;\n                 }\n-                HugeServerInfo server = this.pickWorker(task);\n+\n+                HugeServerInfo server = serverManager.pickWorker(task);\n                 if (server == null) {\n                     LOG.debug(\"The master can't find suitable servers to \" +\n-                              \"execute task: {}, wait for next schedule\",\n+                              \"execute task '{}', wait for next schedule\",\n                               task.id());\n-                    return;\n+                    continue;\n                 }\n \n                 // Found suitable server, update task server and server load\n                 assert server.id() != null;\n                 task.server(server.id());\n+                task.status(TaskStatus.SCHEDULED);\n                 this.save(task);\n+\n                 server.load(server.load() + task.load());\n-                this.serverManager().save(server);\n-                LOG.info(\"Schedule task {} to server {}\",\n+", "originalCommit": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3OTUwMA==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451379500", "bodyText": "use batch read write", "author": "javeme", "createdAt": "2020-07-08T08:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NjgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI2MTY1OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451261658", "bodyText": "move to line 397 and change to:\nId taskServer = task.server();\nassert taskServer != null;\nif (!taskServer.equals(server)) {\n    continue;\n}", "author": "zhoney", "createdAt": "2020-07-08T03:30:36Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -377,15 +402,14 @@ private void unlistenChanges() {\n                  * initialized when canceled.\n                  */\n                 this.initTaskCallable(task);\n-                @SuppressWarnings(\"unchecked\")\n-                HugeTask<V> memTask = (HugeTask<V>) this.tasks.get(task.id());\n+                HugeTask<?> memTask = this.tasks.get(task.id());\n                 if (memTask != null) {\n                     task = memTask;\n                 }\n                 Id taskServer = task.server();\n                 if (taskServer != null && taskServer.equals(server)) {", "originalCommit": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI2NTExMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451265113", "bodyText": "remove line 218 due to system tx is auto commit", "author": "zhoney", "createdAt": "2020-07-08T03:43:31Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/ServerInfoManager.java", "diffHunk": "@@ -212,8 +273,8 @@ protected Id save(HugeServerInfo server) {\n         });", "originalCommit": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI4MDcwNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r451280706", "bodyText": "as a monitor", "author": "Linary", "createdAt": "2020-07-08T04:48:14Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -132,7 +137,14 @@ public int taskResultSizeLimit() {\n     private TaskTransaction tx() {\n         // NOTE: only the owner thread can access task tx\n         if (this.taskTx == null) {\n-            synchronized (this) {\n+            /*\n+             * NOTE: don't synchronized(this) due to scheduler thread hold\n+             * this lock through scheduleTasks(), then query tasks and wait\n+             * for db-worker thread after call(), the tx may not be initialized\n+             * but can't catch this lock, then cause dead lock.\n+             * We just use this.eventListener ad a monitor here", "originalCommit": "795ef8923415fe938de02fc5d3cb5c5f4f7e7a3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cad38cfe25444803583cd5bf350b1cf2f11d1459", "url": "https://github.com/hugegraph/hugegraph/commit/cad38cfe25444803583cd5bf350b1cf2f11d1459", "message": "read/write server-infos in bache duting one scheduling\n\nChange-Id: I23c845ee93c05ebec1fbea77fdc36a5cdb2614c2", "committedDate": "2020-07-08T08:46:48Z", "type": "forcePushed"}, {"oid": "176c98863adf4918592e1e7d3f0a66c8814ef3cd", "url": "https://github.com/hugegraph/hugegraph/commit/176c98863adf4918592e1e7d3f0a66c8814ef3cd", "message": "read/write server-infos in bache duting one scheduling\n\nChange-Id: I23c845ee93c05ebec1fbea77fdc36a5cdb2614c2", "committedDate": "2020-07-08T08:48:42Z", "type": "commit"}, {"oid": "176c98863adf4918592e1e7d3f0a66c8814ef3cd", "url": "https://github.com/hugegraph/hugegraph/commit/176c98863adf4918592e1e7d3f0a66c8814ef3cd", "message": "read/write server-infos in bache duting one scheduling\n\nChange-Id: I23c845ee93c05ebec1fbea77fdc36a5cdb2614c2", "committedDate": "2020-07-08T08:48:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyMzEwMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r452023101", "bodyText": "move to line 234", "author": "zhoney", "createdAt": "2020-07-09T07:38:10Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -200,27 +211,38 @@ private void unlistenChanges() {\n \n     @Override\n     public <V> Future<?> schedule(HugeTask<V> task) {\n-        if (!this.serverManager().master()) {\n-            throw new HugeException(\"The worker can't schedule task\");\n-        }\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n+        this.checkOnMasterNode(\"schedule\");", "originalCommit": "176c98863adf4918592e1e7d3f0a66c8814ef3cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0MjE5NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r452042194", "bodyText": "else means task is on master, cancel it directly seems more efficient", "author": "zhoney", "createdAt": "2020-07-09T08:12:56Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -248,65 +271,109 @@ private void unlistenChanges() {\n     @Override\n     public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        if (!this.serverManager().master()) {\n+        this.checkOnMasterNode(\"cancel\");\n+\n+        if (task.completed() || task.cancelling()) {\n             return;\n         }\n-        if (!task.completed()) {\n-            // The task scheduled to workers, waiting for worker cancel\n-            task.status(TaskStatus.CANCELLING);\n+\n+        LOG.info(\"Cancel task '{}' in status {}\", task.id(), task.status());\n+\n+        if (task.server() == null) {\n+            // The task not scheduled to workers, set canceled immediately\n+            assert task.status().code() < TaskStatus.QUEUED.code();\n+            if (task.status(TaskStatus.CANCELLED)) {\n+                this.save(task);\n+                return;\n+            }\n+        } else if (task.status(TaskStatus.CANCELLING)) {\n+            // The task scheduled to workers, let the worker node to cancel\n             this.save(task);\n-            this.remove(task.id());\n+            assert task.server() != null : task;\n+            assert this.serverManager().master();\n+            if (!task.server().equals(this.serverManager().selfServerId())) {\n+                /*\n+                 * Remove task from memory if it's running on worker node,\n+                 * but keep task in memory if it's running on master node.\n+                 * cancel-scheduling will read task from backend store, if\n+                 * removed this instance from memory, there will be two task\n+                 * instances with same id, and can't cancel the real task that\n+                 * is running but removed from memory.\n+                 */\n+                this.remove(task);\n+            }", "originalCommit": "176c98863adf4918592e1e7d3f0a66c8814ef3cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2OTM5MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1079#discussion_r452169390", "bodyText": "We assume cancel is not a frequent operation, so it is not optimized", "author": "javeme", "createdAt": "2020-07-09T12:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0MjE5NA=="}], "type": "inlineReview"}, {"oid": "21cb8c1694cb7004c82eed6cdaf693b4a29a7364", "url": "https://github.com/hugegraph/hugegraph/commit/21cb8c1694cb7004c82eed6cdaf693b4a29a7364", "message": "fix not check master with EphemeralJob and fix onlySingleNode update\n\nChange-Id: I74a0164fd755bae885575a1770995502def6e88b", "committedDate": "2020-07-09T12:35:00Z", "type": "commit"}]}