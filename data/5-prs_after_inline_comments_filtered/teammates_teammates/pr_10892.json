{"pr_number": 10892, "pr_title": "[#10891] Numerical Scale Question: Improve Validation ", "pr_createdAt": "2020-12-22T16:02:49Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10892", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4ODM0MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r547388340", "bodyText": "The logic is wrong here. The remainder should be taken over answer - minScale, not simply answer. This logic will return no error with setting of minscale = 6, maxscale = 10, step = 0.7, answer = 7, while it should have returned error as the nearest answers are 6.7 and 7.4.", "author": "wkurniawan07", "createdAt": "2020-12-22T16:54:56Z", "path": "src/main/java/teammates/common/datatransfer/questions/FeedbackNumericalScaleQuestionDetails.java", "diffHunk": "@@ -60,15 +58,16 @@ private static double convertTo5dp(double num) {\n             }\n \n             // when the answer is within range but not one of the possible values\n-            double interval = details.getAnswer() - minScale;\n-            double remainder = convertTo5dp(interval - Math.floor(interval / step) * step);\n-            boolean isAnswerNotAPossibleValueWithinRange = remainder != 0.0 && !isAnswerOutOfRange;\n+            BigDecimal answer = BigDecimal.valueOf(details.getAnswer());\n+            BigDecimal stepBd = BigDecimal.valueOf(step);\n+            BigDecimal remainder = answer.remainder(stepBd);", "originalCommit": "6b851c0ebf8842d51d23d9c4e82428d688903597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NjQ5Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r547586492", "bodyText": "oh yes, your right - I have updated this", "author": "rrtheonlyone", "createdAt": "2020-12-23T01:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4ODM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4ODY2MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r547388660", "bodyText": "Use assertEquals instead?", "author": "wkurniawan07", "createdAt": "2020-12-22T16:55:30Z", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackNumericalScaleQuestionDetailsTest.java", "diffHunk": "@@ -21,4 +25,122 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n \n+    @Test\n+    public void tesValidateResponseDetails() {\n+        FeedbackNumericalScaleQuestionDetails numScaleQuestion = new FeedbackNumericalScaleQuestionDetails();\n+        numScaleQuestion.setStep(0.1);\n+\n+        ______TS(\"Test Val=1.2 and Step=0.1 does no trigger error\");\n+        FeedbackNumericalScaleResponseDetails resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.2);\n+        List<String> errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertTrue(errors.isEmpty());\n+\n+        ______TS(\"Test Val=1.22 and Step=0.1 triggers error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.22);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertTrue(errors.size() == 1);", "originalCommit": "6b851c0ebf8842d51d23d9c4e82428d688903597", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NjUxMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r547586511", "bodyText": "done!", "author": "rrtheonlyone", "createdAt": "2020-12-23T01:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM4ODY2MA=="}], "type": "inlineReview"}, {"oid": "a4b64d84fd3c13df768da1e8dbe5de57f10a5cb4", "url": "https://github.com/TEAMMATES/teammates/commit/a4b64d84fd3c13df768da1e8dbe5de57f10a5cb4", "message": "Update assertTrue to assertEquals", "committedDate": "2020-12-23T06:52:49Z", "type": "forcePushed"}, {"oid": "20bed6266994a9e6731bcc0bfb402edab62ea8bb", "url": "https://github.com/TEAMMATES/teammates/commit/20bed6266994a9e6731bcc0bfb402edab62ea8bb", "message": "Add failing test for numerical scale", "committedDate": "2020-12-23T06:54:02Z", "type": "commit"}, {"oid": "bae168eccd54d4b2393183c786e79c3a41421776", "url": "https://github.com/TEAMMATES/teammates/commit/bae168eccd54d4b2393183c786e79c3a41421776", "message": "Fix failing test: make sure precision is accounted for when doing step validation", "committedDate": "2020-12-23T06:54:02Z", "type": "commit"}, {"oid": "4da742870fd13500baba1d52a2759c2b29381fee", "url": "https://github.com/TEAMMATES/teammates/commit/4da742870fd13500baba1d52a2759c2b29381fee", "message": "Add failing test: validation does not take into account minimum value", "committedDate": "2020-12-23T06:54:02Z", "type": "commit"}, {"oid": "7e6754cca32c4239e55baf9868c61a40cffa74f9", "url": "https://github.com/TEAMMATES/teammates/commit/7e6754cca32c4239e55baf9868c61a40cffa74f9", "message": "Fix failing test", "committedDate": "2020-12-23T06:54:02Z", "type": "commit"}, {"oid": "eb860e22962671a3d85ed6720df9b336655bdc6e", "url": "https://github.com/TEAMMATES/teammates/commit/eb860e22962671a3d85ed6720df9b336655bdc6e", "message": "Update assertTrue to assertEquals", "committedDate": "2020-12-23T06:54:02Z", "type": "commit"}, {"oid": "eb860e22962671a3d85ed6720df9b336655bdc6e", "url": "https://github.com/TEAMMATES/teammates/commit/eb860e22962671a3d85ed6720df9b336655bdc6e", "message": "Update assertTrue to assertEquals", "committedDate": "2020-12-23T06:54:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzODg3MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r548338870", "bodyText": "Your test description says 1.33333 but the answer here is 1.333, I'm assuming the description is the correct one?", "author": "madanalogy", "createdAt": "2020-12-24T01:12:20Z", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackNumericalScaleQuestionDetailsTest.java", "diffHunk": "@@ -21,4 +25,122 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n \n+    @Test\n+    public void tesValidateResponseDetails() {\n+        FeedbackNumericalScaleQuestionDetails numScaleQuestion = new FeedbackNumericalScaleQuestionDetails();\n+        numScaleQuestion.setStep(0.1);\n+\n+        ______TS(\"Test Val=1.2 and Step=0.1 does no trigger error\");\n+        FeedbackNumericalScaleResponseDetails resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.2);\n+        List<String> errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertTrue(errors.isEmpty());\n+\n+        ______TS(\"Test Val=1.22 and Step=0.1 triggers error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.22);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertEquals(1, errors.size());\n+        assertEquals(\"Please enter a valid value. The two nearest valid values are 1.2 and 1.3.\", errors.get(0));\n+\n+        ______TS(\"Test Val=1.333 and Step=0.1 triggers error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.333);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertEquals(1, errors.size());\n+        assertEquals(\"Please enter a valid value. The two nearest valid values are 1.3 and 1.4.\", errors.get(0));\n+\n+        ______TS(\"Test Val=2 and Step=0.1 does not trigger error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(2);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertTrue(errors.isEmpty());\n+\n+        numScaleQuestion.setStep(0.00001);\n+\n+        ______TS(\"Test Val=1.33333 and Step=0.00001 does not trigger error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.333);", "originalCommit": "eb860e22962671a3d85ed6720df9b336655bdc6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0MzUzOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r548343539", "bodyText": "yes updated", "author": "rrtheonlyone", "createdAt": "2020-12-24T01:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzODg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzOTE3Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r548339177", "bodyText": "All the tests below reference Step=1 but you set it to 0.7 here, just to confirm that this was intentional to trigger an error right?", "author": "madanalogy", "createdAt": "2020-12-24T01:13:56Z", "path": "src/test/java/teammates/common/datatransfer/questions/FeedbackNumericalScaleQuestionDetailsTest.java", "diffHunk": "@@ -21,4 +25,122 @@ public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFals\n         assertFalse(feedbackQuestionDetails.isFeedbackParticipantCommentsOnResponsesAllowed());\n     }\n \n+    @Test\n+    public void tesValidateResponseDetails() {\n+        FeedbackNumericalScaleQuestionDetails numScaleQuestion = new FeedbackNumericalScaleQuestionDetails();\n+        numScaleQuestion.setStep(0.1);\n+\n+        ______TS(\"Test Val=1.2 and Step=0.1 does no trigger error\");\n+        FeedbackNumericalScaleResponseDetails resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.2);\n+        List<String> errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertTrue(errors.isEmpty());\n+\n+        ______TS(\"Test Val=1.22 and Step=0.1 triggers error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.22);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertEquals(1, errors.size());\n+        assertEquals(\"Please enter a valid value. The two nearest valid values are 1.2 and 1.3.\", errors.get(0));\n+\n+        ______TS(\"Test Val=1.333 and Step=0.1 triggers error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.333);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertEquals(1, errors.size());\n+        assertEquals(\"Please enter a valid value. The two nearest valid values are 1.3 and 1.4.\", errors.get(0));\n+\n+        ______TS(\"Test Val=2 and Step=0.1 does not trigger error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(2);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertTrue(errors.isEmpty());\n+\n+        numScaleQuestion.setStep(0.00001);\n+\n+        ______TS(\"Test Val=1.33333 and Step=0.00001 does not trigger error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.333);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertTrue(errors.isEmpty());\n+\n+        ______TS(\"Test Val=1.333333 and Step=0.00001 triggers error\");\n+        resp = new FeedbackNumericalScaleResponseDetails();\n+        resp.setAnswer(1.333333);\n+        errors = numScaleQuestion.validateResponsesDetails(Arrays.asList(resp), 1);\n+        assertEquals(1, errors.size());\n+        assertEquals(\"Please enter a valid value. The two nearest valid values are 1.33333 and 1.33334.\",\n+                errors.get(0));\n+\n+        numScaleQuestion.setStep(0.7);", "originalCommit": "eb860e22962671a3d85ed6720df9b336655bdc6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0MzYwMA==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r548343600", "bodyText": "yes this was a recent change above - I updated description!", "author": "rrtheonlyone", "createdAt": "2020-12-24T01:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzOTE3Nw=="}], "type": "inlineReview"}, {"oid": "e6fcd6ec528ffe227bcef4c9c4e9f1565781f343", "url": "https://github.com/TEAMMATES/teammates/commit/e6fcd6ec528ffe227bcef4c9c4e9f1565781f343", "message": "Maintain test consistency", "committedDate": "2020-12-24T01:35:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUwNDYzMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10892#discussion_r548504631", "bodyText": "Previous variable names represent what they mean better, although admittedly a bit on the verbose side", "author": "wkurniawan07", "createdAt": "2020-12-24T11:42:12Z", "path": "src/main/java/teammates/common/datatransfer/questions/FeedbackNumericalScaleQuestionDetails.java", "diffHunk": "@@ -60,15 +58,17 @@ private static double convertTo5dp(double num) {\n             }\n \n             // when the answer is within range but not one of the possible values\n-            double interval = details.getAnswer() - minScale;\n-            double remainder = convertTo5dp(interval - Math.floor(interval / step) * step);\n-            boolean isAnswerNotAPossibleValueWithinRange = remainder != 0.0 && !isAnswerOutOfRange;\n+            BigDecimal minval = BigDecimal.valueOf(this.minScale);\n+            BigDecimal answer = BigDecimal.valueOf(details.getAnswer());\n+            BigDecimal stepBd = BigDecimal.valueOf(step);\n+            BigDecimal remainder = answer.subtract(minval).remainder(stepBd);\n+            boolean isAnsMultipleOfStep = remainder.compareTo(BigDecimal.ZERO) == 0;\n+            if (!isAnsMultipleOfStep && !isAnswerOutOfRange) {\n+                double posValSmall = answer.subtract(remainder).setScale(5, RoundingMode.HALF_UP).doubleValue();\n+                double posValBig = answer.subtract(remainder).add(stepBd).setScale(5, RoundingMode.HALF_UP).doubleValue();", "originalCommit": "e6fcd6ec528ffe227bcef4c9c4e9f1565781f343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}