{"pr_number": 10801, "pr_title": "[#9536] Instructor Feedback Results Page E2E Test", "pr_createdAt": "2020-10-22T14:43:07Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10801", "timeline": [{"oid": "a1e5e295d94923c375bcff089463a2b8b020d33e", "url": "https://github.com/TEAMMATES/teammates/commit/a1e5e295d94923c375bcff089463a2b8b020d33e", "message": "Add InstructorFeedbackResultsPageE2ETest", "committedDate": "2020-10-22T14:24:34Z", "type": "commit"}, {"oid": "37ae638567521106e80663002d1bee4ab630a4af", "url": "https://github.com/TEAMMATES/teammates/commit/37ae638567521106e80663002d1bee4ab630a4af", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into instructor-result-e2e\n\n# Conflicts:\n#\tsrc/web/app/components/question-responses/gqr-rqg-view-responses/gqr-rqg-view-responses.component.html\n#\tsrc/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-gqr-view.component.html\n#\tsrc/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-grq-view.component.html\n#\tsrc/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-rgq-view.component.html\n#\tsrc/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-rqg-view.component.html", "committedDate": "2020-10-25T02:28:17Z", "type": "commit"}, {"oid": "ba3f9211c756a39997f21d88d442e36350a6e36c", "url": "https://github.com/TEAMMATES/teammates/commit/ba3f9211c756a39997f21d88d442e36350a6e36c", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into instructor-result-e2e", "committedDate": "2020-10-31T07:58:08Z", "type": "commit"}, {"oid": "3734701cb06522393e0018732da35d469baf023d", "url": "https://github.com/TEAMMATES/teammates/commit/3734701cb06522393e0018732da35d469baf023d", "message": "Simplify statistic check to not do calculations", "committedDate": "2020-10-31T09:33:54Z", "type": "commit"}, {"oid": "3734701cb06522393e0018732da35d469baf023d", "url": "https://github.com/TEAMMATES/teammates/commit/3734701cb06522393e0018732da35d469baf023d", "message": "Simplify statistic check to not do calculations", "committedDate": "2020-10-31T09:33:54Z", "type": "forcePushed"}, {"oid": "273c9e1610c4fbb4ea71b07469ded66127fc2bfc", "url": "https://github.com/TEAMMATES/teammates/commit/273c9e1610c4fbb4ea71b07469ded66127fc2bfc", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into instructor-results-e2e\n\n# Conflicts:\n#\tsrc/e2e/resources/testng-e2e.xml\n#\tsrc/web/app/components/question-text-with-info/question-text-with-info.component.html", "committedDate": "2020-11-12T15:24:40Z", "type": "commit"}, {"oid": "8a0f5ed40877b11ed288e0669a8b7f33bd8892d4", "url": "https://github.com/TEAMMATES/teammates/commit/8a0f5ed40877b11ed288e0669a8b7f33bd8892d4", "message": "Add second course to prevent email insertion from affecting responses", "committedDate": "2020-11-12T15:26:48Z", "type": "forcePushed"}, {"oid": "ea81636bdde70caf0fdb1409b9becf4f30a0b070", "url": "https://github.com/TEAMMATES/teammates/commit/ea81636bdde70caf0fdb1409b9becf4f30a0b070", "message": "Comply with BaseE2ETestCase changes", "committedDate": "2020-11-12T17:27:18Z", "type": "commit"}, {"oid": "f5413f47124ab62e62ba661f0d6a7abe9406afb6", "url": "https://github.com/TEAMMATES/teammates/commit/f5413f47124ab62e62ba661f0d6a7abe9406afb6", "message": "Update InstructorFeedbackResultsPageE2ETest data to follow validity rules", "committedDate": "2020-11-12T17:27:31Z", "type": "commit"}, {"oid": "e83aec46abfee96d528ba484b1001839dbfcc7ca", "url": "https://github.com/TEAMMATES/teammates/commit/e83aec46abfee96d528ba484b1001839dbfcc7ca", "message": "Add second course to prevent email insertion from affecting responses", "committedDate": "2020-11-12T17:30:55Z", "type": "commit"}, {"oid": "e83aec46abfee96d528ba484b1001839dbfcc7ca", "url": "https://github.com/TEAMMATES/teammates/commit/e83aec46abfee96d528ba484b1001839dbfcc7ca", "message": "Add second course to prevent email insertion from affecting responses", "committedDate": "2020-11-12T17:30:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2MTE1NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10801#discussion_r532161155", "bodyText": "This button only appears after some data is loaded, so adding this hook at the beginning may result in NoSuchElementException especially in production server", "author": "wkurniawan07", "createdAt": "2020-11-29T06:05:18Z", "path": "src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackResultsPage.java", "diffHunk": "@@ -0,0 +1,1144 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.NoSuchElementException;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackContributionResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricResponseDetails;\n+import teammates.common.util.TimeHelper;\n+\n+/**\n+ * Represents the \"Results\" page for Instructors.\n+ */\n+public class InstructorFeedbackResultsPage extends AppPage {\n+    private static final String QUESTION_VIEW = \"QUESTION\";\n+    private static final String GQR_VIEW = \"GQR\";\n+    private static final String RQG_VIEW = \"RQG\";\n+    private static final String GRQ_VIEW = \"GRQ\";\n+    private static final String RGQ_VIEW = \"RGQ\";\n+\n+    private static final String NO_RESPONSE_LABEL = \"No Response\";\n+    private static final String NO_TEAM_LABEL = \"No Specific Team\";\n+    private static final String NO_SECTION_LABEL = \"No specific section\";\n+    private static final String NO_USER_LABEL = \"No Specific User\";\n+\n+    private static final String MCQ_OTHER = \"Other\";\n+\n+    private String currentView = \"\";\n+\n+    @FindBy(id = \"course-id\")\n+    private WebElement courseId;\n+\n+    @FindBy(id = \"session-name\")\n+    private WebElement sessionName;\n+\n+    @FindBy(id = \"session-duration\")\n+    private WebElement sessionDuration;\n+\n+    @FindBy(id = \"result-visible-date\")\n+    private WebElement resultVisibleDate;\n+\n+    @FindBy(id = \"btn-publish\")\n+    private WebElement publishButton;\n+\n+    @FindBy(id = \"btn-download\")\n+    private WebElement downloadButton;\n+\n+    @FindBy(id = \"no-response-panel\")\n+    private WebElement noResponsePanel;\n+\n+    @FindBy(id = \"btn-remind-all\")\n+    private WebElement remindAllButton;\n+\n+    @FindBy(id = \"include-team-grouping\")\n+    private WebElement groupByTeamCheckbox;\n+\n+    @FindBy(id = \"include-statistics\")\n+    private WebElement statisticsCheckbox;\n+\n+    @FindBy(id = \"include-missing-responses\")\n+    private WebElement missingResponsesCheckbox;\n+\n+    @FindBy(id = \"btn-expand-all\")", "originalCommit": "e83aec46abfee96d528ba484b1001839dbfcc7ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2MTE2OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10801#discussion_r532161169", "bodyText": "\\n -> System.lineSeparator", "author": "wkurniawan07", "createdAt": "2020-11-29T06:05:29Z", "path": "src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackResultsPage.java", "diffHunk": "@@ -0,0 +1,1144 @@\n+package teammates.e2e.pageobjects;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.NoSuchElementException;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.support.FindBy;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackContributionResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackResponseDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackRubricResponseDetails;\n+import teammates.common.util.TimeHelper;\n+\n+/**\n+ * Represents the \"Results\" page for Instructors.\n+ */\n+public class InstructorFeedbackResultsPage extends AppPage {\n+    private static final String QUESTION_VIEW = \"QUESTION\";\n+    private static final String GQR_VIEW = \"GQR\";\n+    private static final String RQG_VIEW = \"RQG\";\n+    private static final String GRQ_VIEW = \"GRQ\";\n+    private static final String RGQ_VIEW = \"RGQ\";\n+\n+    private static final String NO_RESPONSE_LABEL = \"No Response\";\n+    private static final String NO_TEAM_LABEL = \"No Specific Team\";\n+    private static final String NO_SECTION_LABEL = \"No specific section\";\n+    private static final String NO_USER_LABEL = \"No Specific User\";\n+\n+    private static final String MCQ_OTHER = \"Other\";\n+\n+    private String currentView = \"\";\n+\n+    @FindBy(id = \"course-id\")\n+    private WebElement courseId;\n+\n+    @FindBy(id = \"session-name\")\n+    private WebElement sessionName;\n+\n+    @FindBy(id = \"session-duration\")\n+    private WebElement sessionDuration;\n+\n+    @FindBy(id = \"result-visible-date\")\n+    private WebElement resultVisibleDate;\n+\n+    @FindBy(id = \"btn-publish\")\n+    private WebElement publishButton;\n+\n+    @FindBy(id = \"btn-download\")\n+    private WebElement downloadButton;\n+\n+    @FindBy(id = \"no-response-panel\")\n+    private WebElement noResponsePanel;\n+\n+    @FindBy(id = \"btn-remind-all\")\n+    private WebElement remindAllButton;\n+\n+    @FindBy(id = \"include-team-grouping\")\n+    private WebElement groupByTeamCheckbox;\n+\n+    @FindBy(id = \"include-statistics\")\n+    private WebElement statisticsCheckbox;\n+\n+    @FindBy(id = \"include-missing-responses\")\n+    private WebElement missingResponsesCheckbox;\n+\n+    @FindBy(id = \"btn-expand-all\")\n+    private WebElement expandAllButton;\n+\n+    public InstructorFeedbackResultsPage(Browser browser) {\n+        super(browser);\n+    }\n+\n+    @Override\n+    protected boolean containsExpectedPageContents() {\n+        return getPageTitle().contains(\"Feedback Session Results\");\n+    }\n+\n+    public void verifySessionDetails(FeedbackSessionAttributes feedbackSession) {\n+        assertEquals(feedbackSession.getCourseId(), courseId.getText());\n+        assertEquals(feedbackSession.getFeedbackSessionName(), sessionName.getText());\n+        assertEquals(getSessionDurationString(feedbackSession), sessionDuration.getText());\n+        assertEquals(getDateString(feedbackSession.getResultsVisibleFromTime(), feedbackSession.getTimeZone()),\n+                resultVisibleDate.getText());\n+    }\n+\n+    public void unpublishSessionResults() {\n+        if (publishButton.getText().contains(\"Unpublish\")) {\n+            clickAndConfirm(publishButton);\n+        }\n+    }\n+\n+    public void publishSessionResults() {\n+        if (publishButton.getText().contains(\"Publish\")) {\n+            clickAndConfirm(publishButton);\n+        }\n+    }\n+\n+    public void downloadResults() {\n+        click(downloadButton);\n+    }\n+\n+    public void sortNoResponseByName() {\n+        click(getNoResponseTable().findElement(By.id(\"sort-by-name\")));\n+        waitUntilAnimationFinish();\n+    }\n+\n+    public void verifyNoResponsePanelDetails(List<StudentAttributes> noResponseStudents) {\n+        verifyTableBodyValues(getNoResponseTable(), getExpectedNoResponseDetails(noResponseStudents));\n+    }\n+\n+    public void remindAllNonResponders() {\n+        click(remindAllButton);\n+        click(waitForElementPresence(By.id(\"btn-confirm-send-reminder\")));\n+    }\n+\n+    public void includeGroupingByTeam(boolean isIncluded) {\n+        includeOption(isIncluded, groupByTeamCheckbox);\n+    }\n+\n+    public void includeMissingResponses(boolean isIncluded) {\n+        includeOption(isIncluded, missingResponsesCheckbox);\n+    }\n+\n+    public void includeStatistics(boolean isIncluded) {\n+        includeOption(isIncluded, statisticsCheckbox);\n+    }\n+\n+    public void expandAllPanels() {\n+        if (expandAllButton.getText().contains(\"Expand\")) {\n+            click(expandAllButton);\n+            waitUntilAnimationFinish();\n+        }\n+    }\n+\n+    public void filterBySectionEither(String sectionName) {\n+        selectSectionDropdown(sectionName);\n+        selectSectionTypeDropdown(\"0: EITHER\");\n+    }\n+\n+    public void unfilterResponses() {\n+        selectSectionDropdown(\"All\");\n+    }\n+\n+    public void verifyQnViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses,\n+                                      Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students) {\n+        selectViewType(QUESTION_VIEW);\n+\n+        WebElement questionPanel = getQuestionPanel(question.getQuestionNumber());\n+        verifyQuestionText(questionPanel, question);\n+\n+        List<FeedbackResponseAttributes> responsesWithoutMissing = filterMissingResponses(responses);\n+        if (responsesWithoutMissing.isEmpty()) {\n+            verifyNoResponsesMessage(questionPanel, true, true);\n+        } else {\n+            String[][] expectedDetails = getExpectedQnViewDetails(question, responses, instructors, students);\n+            verifyTableBodyValues(getResponseTable(questionPanel), expectedDetails);\n+        }\n+    }\n+\n+    public void verifyGrqViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses,\n+                                       boolean isGroupedByTeam, Collection<InstructorAttributes> instructors,\n+                                       Collection<StudentAttributes> students) {\n+        selectViewType(GRQ_VIEW);\n+\n+        // all responses should be from the same giver\n+        String giver = responses.get(0).getGiver();\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        WebElement giverPanel = getUserPanel(giverType, giver, instructors, students, isGroupedByTeam, true);\n+\n+        List<String> recipients = getRecipients(responses);\n+        for (String recipient : recipients) {\n+            FeedbackResponseAttributes responseForRecipient = getResponseForRecipient(responses, recipient);\n+            FeedbackParticipantType recipientType = question.getRecipientType();\n+            String recipientTeam = getTeam(recipientType, recipient, students);\n+            String recipientName = getName(recipientType, recipient, instructors, students);\n+\n+            verifyGroupedResponses(question, giverPanel, recipientName, recipientTeam, responseForRecipient, true);\n+        }\n+    }\n+\n+    public void verifyRgqViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses,\n+                                       boolean isGroupedByTeam, Collection<InstructorAttributes> instructors,\n+                                       Collection<StudentAttributes> students) {\n+        selectViewType(RGQ_VIEW);\n+\n+        // all responses should have the same recipient\n+        String recipient = responses.get(0).getRecipient();\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+        WebElement recipientPanel = getUserPanel(recipientType, recipient, instructors, students, isGroupedByTeam, false);\n+\n+        List<String> givers = getGivers(responses);\n+        for (String giver : givers) {\n+            FeedbackResponseAttributes responseFromGiver = getResponseFromGiver(responses, giver);\n+            FeedbackParticipantType giverType = question.getGiverType();\n+            String giverTeam = getTeam(giverType, giver, students);\n+            String giverName = getName(giverType, giver, instructors, students);\n+\n+            verifyGroupedResponses(question, recipientPanel, giverName, giverTeam, responseFromGiver, false);\n+        }\n+    }\n+\n+    public void verifyGqrViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses,\n+                                       boolean isGroupedByTeam, Collection<InstructorAttributes> instructors,\n+                                       Collection<StudentAttributes> students) {\n+        selectViewType(GQR_VIEW);\n+\n+        // all responses should be from the same giver\n+        String giver = responses.get(0).getGiver();\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        WebElement giverPanel = getUserPanel(giverType, giver, instructors, students, isGroupedByTeam, true);\n+\n+        WebElement questionPanel = getQuestionPanel(giverPanel, question.getQuestionNumber());\n+        verifyQuestionText(questionPanel, question);\n+\n+        List<FeedbackResponseAttributes> responsesWithoutMissing = filterMissingResponses(responses);\n+\n+        if (responsesWithoutMissing.isEmpty()) {\n+            verifyNoResponsesMessage(questionPanel, true, true);\n+        } else {\n+            for (FeedbackResponseAttributes response : responses) {\n+                String[] expectedResponses = getExpectedGqrDetails(question, response, instructors, students);\n+                String recipientTeam = getTeam(question.getRecipientType(), response.getRecipient(), students);\n+                String recipientName = getName(question.getRecipientType(), response.getRecipient(), instructors, students);\n+                verifyTableRowValues(getResponseRow(questionPanel, recipientTeam, recipientName), expectedResponses);\n+            }\n+        }\n+    }\n+\n+    public void verifyRqgViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses,\n+                                       boolean isGroupedByTeam, Collection<InstructorAttributes> instructors,\n+                                       Collection<StudentAttributes> students) {\n+        selectViewType(RQG_VIEW);\n+\n+        // all responses should be from the same recipient\n+        String recipient = responses.get(0).getRecipient();\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+        WebElement recipientPanel = getUserPanel(recipientType, recipient, instructors, students, isGroupedByTeam, false);\n+\n+        WebElement questionPanel = getQuestionPanel(recipientPanel, question.getQuestionNumber());\n+        verifyQuestionText(questionPanel, question);\n+\n+        List<FeedbackResponseAttributes> responsesWithoutMissing = filterMissingResponses(responses);\n+\n+        if (responsesWithoutMissing.isEmpty()) {\n+            verifyNoResponsesMessage(questionPanel, true, true);\n+        } else {\n+            for (FeedbackResponseAttributes response : responses) {\n+                String[] expectedResponses = getExpectedRqgDetails(question, response, instructors, students);\n+                String giverTeam = getTeam(question.getGiverType(), response.getGiver(), students);\n+                String giverName = getName(question.getGiverType(), response.getGiver(), instructors, students);\n+                verifyTableRowValues(getResponseRow(questionPanel, giverTeam, giverName), expectedResponses);\n+            }\n+        }\n+    }\n+\n+    private void verifyQuestionText(WebElement questionPanel, FeedbackQuestionAttributes question) {\n+        assertEquals(question.getQuestionDetails().getQuestionText(), getQuestionText(questionPanel));\n+    }\n+\n+    private void verifyGroupedResponses(FeedbackQuestionAttributes question, WebElement userPanel, String userName,\n+                                        String userTeam, FeedbackResponseAttributes response, boolean isGrq) {\n+        WebElement groupedResponses;\n+        try {\n+            groupedResponses = getGroupedResponses(userPanel, userName, userTeam, isGrq);\n+        } catch (NoSuchElementException e) {\n+            // No response message shown instead of grouped responses\n+            // if all responses in panel are missing responses\n+            assertTrue(isMissingResponse(response));\n+            verifyNoResponsesMessage(userPanel, false, isGrq);\n+            return;\n+        }\n+\n+        if (groupedResponses == null) {\n+            // Empty grouped response if this user only has missing responses\n+            assertTrue(isMissingResponse(response));\n+            return;\n+        }\n+\n+        WebElement questionPanel = getQuestionPanel(groupedResponses, question.questionNumber);\n+        verifyQuestionText(questionPanel, question);\n+        WebElement singleResponse = questionPanel.findElement(By.id(\"response\"));\n+        if (isMissingResponse(response)) {\n+            // Missing response will only be shown if this user has some real responses\n+            assertEquals(NO_RESPONSE_LABEL, singleResponse.getText());\n+        } else {\n+            assertEquals(getAnswerString(question, response.getResponseDetails()), singleResponse.getText());\n+        }\n+    }\n+\n+    public void verifyQnViewStats(FeedbackQuestionAttributes question,\n+                                  List<FeedbackResponseAttributes> responses,\n+                                  Collection<InstructorAttributes> instructors,\n+                                  Collection<StudentAttributes> students) {\n+        selectViewType(QUESTION_VIEW);\n+        WebElement questionPanel = getQuestionPanel(question.getQuestionNumber());\n+        // re-expand question panel to reset sorting order\n+        hideQuestionPanel(questionPanel);\n+        expandQuestionPanel(questionPanel);\n+        verifyStatistics(questionPanel, question, responses, instructors, students);\n+    }\n+\n+    public void verifyGqrViewStats(FeedbackQuestionAttributes question,\n+                                   List<FeedbackResponseAttributes> responses,\n+                                   boolean isGroupedByTeam,\n+                                   Collection<InstructorAttributes> instructors,\n+                                   Collection<StudentAttributes> students) {\n+        selectViewType(GQR_VIEW);\n+\n+        String giver = responses.get(0).getGiver();\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        verifyUserViewStats(giverType, giver, question, responses, instructors, students, isGroupedByTeam, true);\n+    }\n+\n+    public void verifyRqgViewStats(FeedbackQuestionAttributes question,\n+                                   List<FeedbackResponseAttributes> responses,\n+                                   boolean isGroupedByTeam,\n+                                   Collection<InstructorAttributes> instructors,\n+                                   Collection<StudentAttributes> students) {\n+        selectViewType(RQG_VIEW);\n+\n+        String recipient = responses.get(0).getRecipient();\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+        verifyUserViewStats(recipientType, recipient, question, responses, instructors, students, isGroupedByTeam, false);\n+    }\n+\n+    private void verifyUserViewStats(FeedbackParticipantType type, String user,\n+                                     FeedbackQuestionAttributes question,\n+                                     List<FeedbackResponseAttributes> responses,\n+                                     Collection<InstructorAttributes> instructors,\n+                                     Collection<StudentAttributes> students,\n+                                     boolean isGroupedByTeam,\n+                                     boolean isGiver) {\n+        WebElement panelWithStats = getPanelWithStats(type, user, question, instructors, students,\n+                isGroupedByTeam, isGiver);\n+        verifyStatistics(panelWithStats, question, responses, instructors, students);\n+    }\n+\n+    private void verifyStatistics(WebElement questionPanel, FeedbackQuestionAttributes question,\n+                                  List<FeedbackResponseAttributes> responses,\n+                                  Collection<InstructorAttributes> instructors,\n+                                  Collection<StudentAttributes> students) {\n+        switch(question.getQuestionType()) {\n+        case MCQ:\n+            verifyMcqStatistics(questionPanel, question, responses, instructors, students);\n+            break;\n+        case TEXT:\n+        case NUMSCALE:\n+        case RANK_RECIPIENTS:\n+        case MSQ:\n+        case RUBRIC:\n+        case RANK_OPTIONS:\n+        case CONSTSUM:\n+        case CONTRIB:\n+            return; // TODO: Find way to test different statistics efficiently.\n+        default:\n+            throw new RuntimeException(\"Unknown question type: \" + question.getQuestionType());\n+        }\n+    }\n+\n+    private void verifyMcqStatistics(WebElement questionPanel, FeedbackQuestionAttributes question,\n+                                     List<FeedbackResponseAttributes> responses,\n+                                     Collection<InstructorAttributes> instructors,\n+                                     Collection<StudentAttributes> students) {\n+        List<FeedbackResponseAttributes> responsesToUse = filterMissingResponses(responses);\n+        List<WebElement> statisticsTables = questionPanel.findElements(By.cssSelector(\"#mcq-statistics table\"));\n+        verifyTableBodyValues(statisticsTables.get(0), getMcqResponseSummary(question));\n+        // sort per recipient statistics\n+        click(statisticsTables.get(1).findElements(By.tagName(\"th\")).get(1));\n+        verifyTableBodyValues(statisticsTables.get(1), getMcqPerRecipientStatistics(question, responsesToUse, students,\n+                instructors));\n+    }\n+\n+    public void verifyQnViewStatsHidden(FeedbackQuestionAttributes question) {\n+        selectViewType(QUESTION_VIEW);\n+\n+        WebElement questionPanel = getQuestionPanel(question.getQuestionNumber());\n+        verifyStatsHidden(questionPanel);\n+    }\n+\n+    public void verifyGqrViewStatsHidden(FeedbackQuestionAttributes question,\n+                                         String giver,\n+                                         Collection<InstructorAttributes> instructors,\n+                                         Collection<StudentAttributes> students,\n+                                         boolean isGroupedByTeam) {\n+        selectViewType(GQR_VIEW);\n+\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        WebElement panelWithStats = getPanelWithStats(giverType, giver, question, instructors, students,\n+                isGroupedByTeam, true);\n+        verifyStatsHidden(panelWithStats);\n+    }\n+\n+    public void verifyRqgViewStatsHidden(FeedbackQuestionAttributes question,\n+                                         String recipient,\n+                                         Collection<InstructorAttributes> instructors,\n+                                         Collection<StudentAttributes> students,\n+                                         boolean isGroupedByTeam) {\n+        selectViewType(RQG_VIEW);\n+\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+        WebElement panelWithStats = getPanelWithStats(recipientType, recipient, question, instructors, students,\n+                isGroupedByTeam, false);\n+        verifyStatsHidden(panelWithStats);\n+    }\n+\n+    private WebElement getPanelWithStats(FeedbackParticipantType type, String user,\n+                                         FeedbackQuestionAttributes question,\n+                                         Collection<InstructorAttributes> instructors,\n+                                         Collection<StudentAttributes> students,\n+                                         boolean isGroupedByTeam,\n+                                         boolean isGiver) {\n+        String section = getSection(type, user, students);\n+        String team = getTeam(type, user, students);\n+        String name = getName(type, user, instructors, students);\n+        String header = getUserHeader(isGiver, name);\n+        int qnNum = question.getQuestionNumber();\n+        if (isGroupedByTeam) {\n+            WebElement teamPanel = getUserParentPanel(section, team, true);\n+            return getTeamStats(teamPanel, qnNum);\n+        } else {\n+            WebElement userPanel = getUserPanel(section, team, header, false);\n+            return getQuestionPanel(userPanel, qnNum);\n+        }\n+    }\n+\n+    private void verifyStatsHidden(WebElement panelWithStats) {\n+        assertTrue(panelWithStats.findElements(By.tagName(\"tm-single-statistics\")).size() == 0);\n+    }\n+\n+    public void verifyQnViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment,\n+                                    FeedbackResponseAttributes response, Collection<InstructorAttributes> instructors,\n+                                    Collection<StudentAttributes> students) {\n+        selectViewType(QUESTION_VIEW);\n+        WebElement questionPanel = getQuestionPanel(question.getQuestionNumber());\n+\n+        String giverTeam = getTeam(question.getGiverType(), response.getGiver(), students);\n+        String giverName = getName(question.getGiverType(), response.getGiver(), instructors, students);\n+        String recipientTeam = getTeam(question.getRecipientType(), response.getRecipient(), students);\n+        String recipientName = getName(question.getRecipientType(), response.getRecipient(), instructors, students);\n+        WebElement responseRow = getResponseRow(questionPanel, giverTeam, giverName, recipientTeam, recipientName);\n+\n+        verifyResponseRowComment(responseRow, comment, instructors, students);\n+    }\n+\n+    public void verifyGqrViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment,\n+                                     FeedbackResponseAttributes response,\n+                                     Collection<InstructorAttributes> instructors,\n+                                     Collection<StudentAttributes> students, boolean isGroupedByTeam) {\n+        selectViewType(GQR_VIEW);\n+\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        WebElement giverPanel = getUserPanel(giverType, response.getGiver(), instructors, students, isGroupedByTeam, true);\n+\n+        WebElement questionPanel = getQuestionPanel(giverPanel, question.getQuestionNumber());\n+        String recipientTeam = getTeam(question.getRecipientType(), response.getRecipient(), students);\n+        String recipientName = getName(question.getRecipientType(), response.getRecipient(), instructors, students);\n+        WebElement responseRow = getResponseRow(questionPanel, recipientTeam, recipientName);\n+\n+        verifyResponseRowComment(responseRow, comment, instructors, students);\n+    }\n+\n+    public void verifyRqgViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment,\n+                                     FeedbackResponseAttributes response,\n+                                     Collection<InstructorAttributes> instructors,\n+                                     Collection<StudentAttributes> students, boolean isGroupedByTeam) {\n+        selectViewType(RQG_VIEW);\n+\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+        WebElement recipientPanel = getUserPanel(recipientType, response.getRecipient(), instructors, students,\n+                isGroupedByTeam, false);\n+\n+        WebElement questionPanel = getQuestionPanel(recipientPanel, question.getQuestionNumber());\n+        String giverTeam = getTeam(question.getGiverType(), response.getGiver(), students);\n+        String giverName = getName(question.getGiverType(), response.getGiver(), instructors, students);\n+        WebElement responseRow = getResponseRow(questionPanel, giverTeam, giverName);\n+\n+        verifyResponseRowComment(responseRow, comment, instructors, students);\n+    }\n+\n+    public void verifyGrqViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment,\n+                                     FeedbackResponseAttributes response,\n+                                     Collection<InstructorAttributes> instructors,\n+                                     Collection<StudentAttributes> students, boolean isGroupedByTeam) {\n+\n+        selectViewType(GRQ_VIEW);\n+\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        WebElement userPanel = getUserPanel(giverType, response.getGiver(), instructors, students, isGroupedByTeam, true);\n+\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+        String recipientTeam = getTeam(recipientType, response.getRecipient(), students);\n+        String recipientName = getName(recipientType, response.getRecipient(), instructors, students);\n+\n+        WebElement groupedResponses = getGroupedResponses(userPanel, recipientName, recipientTeam, true);\n+        verifyGroupedResponseComment(groupedResponses, question.getQuestionNumber(), comment, instructors, students);\n+    }\n+\n+    public void verifyRgqViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment,\n+                                     FeedbackResponseAttributes response,\n+                                     Collection<InstructorAttributes> instructors,\n+                                     Collection<StudentAttributes> students, boolean isGroupedByTeam) {\n+        selectViewType(RGQ_VIEW);\n+\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+        WebElement userPanel = getUserPanel(recipientType, response.getRecipient(), instructors, students,\n+                isGroupedByTeam, false);\n+\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        String giverTeam = getTeam(giverType, response.getGiver(), students);\n+        String giverName = getName(giverType, response.getGiver(), instructors, students);\n+\n+        WebElement groupedResponses = getGroupedResponses(userPanel, giverName, giverTeam, false);\n+        verifyGroupedResponseComment(groupedResponses, question.getQuestionNumber(), comment, instructors, students);\n+    }\n+\n+    private void verifyResponseRowComment(WebElement responseRow, FeedbackResponseCommentAttributes comment,\n+                                          Collection<InstructorAttributes> instructors,\n+                                          Collection<StudentAttributes> students) {\n+        click(responseRow.findElement(By.id(\"btn-add-comment\")));\n+        WebElement commentModal = waitForElementPresence(By.className(\"modal-body\"));\n+\n+        String editor = getName(comment.getCommentGiverType(), comment.getLastEditorEmail(), instructors, students);\n+        String commentGiver = getName(comment.getCommentGiverType(), comment.getCommentGiver(), instructors, students);\n+        verifyCommentDetails(commentModal, commentGiver, editor, comment.getCommentText(), true);\n+    }\n+\n+    private void verifyGroupedResponseComment(WebElement groupedResponses, int qnNum,\n+                                              FeedbackResponseCommentAttributes comment,\n+                                              Collection<InstructorAttributes> instructors,\n+                                              Collection<StudentAttributes> students) {\n+        WebElement questionPanel = getQuestionPanel(groupedResponses, qnNum);\n+\n+        String editor = getName(comment.getCommentGiverType(), comment.getLastEditorEmail(), instructors, students);\n+        String commentGiver = getName(comment.getCommentGiverType(), comment.getCommentGiver(), instructors, students);\n+        verifyCommentDetails(questionPanel, commentGiver, editor, comment.getCommentText(), false);\n+    }\n+\n+    public void verifyCommentDetails(WebElement commentSection, String commentGiver, String commentEditor,\n+                                     String commentString, boolean isClosable) {\n+        WebElement commentField = getCommentField(commentSection, commentString);\n+        assertEquals(commentGiver, getCommentGiver(commentField));\n+        if (!commentEditor.isEmpty()) {\n+            assertEquals(commentEditor, getCommentEditor(commentField));\n+        }\n+        if (isClosable) {\n+            click(waitForElementPresence(By.id(\"btn-close-comments\")));\n+            waitForPageToLoad();\n+        }\n+    }\n+\n+    private void verifyNoResponsesMessage(WebElement panel, boolean isQuestion, boolean isGiver) {\n+        WebElement noResponsesMessage = panel.findElement(By.id(\"no-responses\"));\n+        if (isQuestion) {\n+            assertEquals(\"There are no responses for this question or you may not have the permission to\"\n+                    + \" see the response.\", noResponsesMessage.getText());\n+        } else {\n+            assertEquals(\"There are no responses \" + (isGiver ? \"given\" : \"received\")\n+                    + \" by this user or you may not have the permission to see the responses.\",\n+                    noResponsesMessage.getText());\n+        }\n+    }\n+\n+    // Methods for formatting expected results\n+    private String[][] getExpectedNoResponseDetails(List<StudentAttributes> noResponseStudents) {\n+        String[][] expectedDetails = new String[noResponseStudents.size()][2];\n+        for (int i = 0; i < noResponseStudents.size(); i++) {\n+            expectedDetails[i][0] = noResponseStudents.get(i).getTeam();\n+            expectedDetails[i][1] = noResponseStudents.get(i).getName();\n+        }\n+        return expectedDetails;\n+    }\n+\n+    private String[][] getExpectedQnViewDetails(FeedbackQuestionAttributes question,\n+                                                List<FeedbackResponseAttributes> responses,\n+                                                Collection<InstructorAttributes> instructors,\n+                                                Collection<StudentAttributes> students) {\n+        String[][] expected = new String[responses.size()][5];\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+\n+        for (int i = 0; i < responses.size(); i++) {\n+            FeedbackResponseAttributes response = responses.get(i);\n+            expected[i][0] = getTeam(giverType, response.getGiver(), students);\n+            expected[i][1] = getName(giverType, response.getGiver(), instructors, students);\n+            if (recipientType.equals(FeedbackParticipantType.NONE)) {\n+                expected[i][2] = NO_TEAM_LABEL;\n+                expected[i][3] = NO_USER_LABEL;\n+            } else {\n+                expected[i][2] = getTeam(recipientType, response.getRecipient(), students);\n+                expected[i][3] = getName(recipientType, response.getRecipient(), instructors, students);\n+            }\n+            if (isMissingResponse(response)) {\n+                expected[i][4] = NO_RESPONSE_LABEL;\n+            } else {\n+                expected[i][4] = getAnswerString(question, response.getResponseDetails());\n+            }\n+        }\n+        return expected;\n+    }\n+\n+    private String[] getExpectedGqrDetails(FeedbackQuestionAttributes question,\n+                                           FeedbackResponseAttributes response,\n+                                           Collection<InstructorAttributes> instructors,\n+                                           Collection<StudentAttributes> students) {\n+        String[] expected = new String[3];\n+        FeedbackParticipantType recipientType = question.getRecipientType();\n+        if (recipientType.equals(FeedbackParticipantType.NONE)) {\n+            expected[0] = NO_TEAM_LABEL;\n+            expected[1] = NO_USER_LABEL;\n+        } else {\n+            expected[0] = getTeam(recipientType, response.getRecipient(), students);\n+            expected[1] = getName(recipientType, response.getRecipient(), instructors, students);\n+        }\n+        if (response.getFeedbackSessionName() == null) {\n+            expected[2] = NO_RESPONSE_LABEL;\n+        } else {\n+            expected[2] = getAnswerString(question, response.getResponseDetails());\n+        }\n+        return expected;\n+    }\n+\n+    private String[] getExpectedRqgDetails(FeedbackQuestionAttributes question,\n+                                           FeedbackResponseAttributes response,\n+                                           Collection<InstructorAttributes> instructors,\n+                                           Collection<StudentAttributes> students) {\n+        String[] expected = new String[3];\n+        FeedbackParticipantType giverType = question.getGiverType();\n+        if (giverType.equals(FeedbackParticipantType.NONE)) {\n+            expected[0] = NO_TEAM_LABEL;\n+            expected[1] = NO_USER_LABEL;\n+        } else {\n+            expected[0] = getTeam(giverType, response.getGiver(), students);\n+            expected[1] = getName(giverType, response.getGiver(), instructors, students);\n+        }\n+        if (response.getFeedbackSessionName() == null) {\n+            expected[2] = NO_RESPONSE_LABEL;\n+        } else {\n+            expected[2] = getAnswerString(question, response.getResponseDetails());\n+        }\n+        return expected;\n+    }\n+\n+    private String[][] getMcqResponseSummary(FeedbackQuestionAttributes question) {\n+        FeedbackMcqQuestionDetails questionDetails = (FeedbackMcqQuestionDetails) question.getQuestionDetails();\n+        List<String> choices = questionDetails.getMcqChoices();\n+        List<Double> weights = questionDetails.getMcqWeights();\n+        Double otherWeight = questionDetails.getMcqOtherWeight();\n+        boolean isOtherEnabled = questionDetails.isOtherEnabled();\n+        boolean hasAssignedWeights = questionDetails.hasAssignedWeights();\n+\n+        int numRows = isOtherEnabled ? choices.size() + 1 : choices.size();\n+        String[][] expectedStatistics = new String[numRows][2];\n+        for (int i = 0; i < choices.size(); i++) {\n+            expectedStatistics[i][0] = choices.get(i);\n+            expectedStatistics[i][1] = hasAssignedWeights ? getDoubleString(weights.get(i)) : \"-\";\n+        }\n+        if (isOtherEnabled) {\n+            int index = choices.size();\n+            expectedStatistics[index][0] = MCQ_OTHER;\n+            expectedStatistics[index][1] = hasAssignedWeights ? getDoubleString(otherWeight) : \"-\";\n+        }\n+        return expectedStatistics;\n+    }\n+\n+    private String[][] getMcqPerRecipientStatistics(FeedbackQuestionAttributes question,\n+                                                    List<FeedbackResponseAttributes> responses,\n+                                                    Collection<StudentAttributes> students,\n+                                                    Collection<InstructorAttributes> instructors) {\n+        List<String> recipients = getRecipients(responses);\n+        recipients.sort(Comparator.naturalOrder());\n+\n+        String[][] expectedStatistics = new String[recipients.size()][2];\n+\n+        for (int i = 0; i < recipients.size(); i++) {\n+            String recipient = recipients.get(i);\n+            expectedStatistics[i][0] = getTeam(question.recipientType, recipient, students);\n+            expectedStatistics[i][1] = getName(question.recipientType, recipient, instructors, students);\n+        }\n+\n+        return expectedStatistics;\n+    }\n+\n+    private String getAnswerString(FeedbackQuestionAttributes question, FeedbackResponseDetails response) {\n+        switch(response.getQuestionType()) {\n+        case TEXT:\n+        case NUMSCALE:\n+        case RANK_RECIPIENTS:\n+            return response.getAnswerString();\n+        case MCQ:\n+        case MSQ:\n+            return response.getAnswerString().replace(\", \", \"\\n\");", "originalCommit": "e83aec46abfee96d528ba484b1001839dbfcc7ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2MTI3NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10801#discussion_r532161274", "bodyText": "1 and 3 are magic numbers here", "author": "wkurniawan07", "createdAt": "2020-11-29T06:07:04Z", "path": "src/e2e/java/teammates/e2e/cases/InstructorFeedbackResultsPageE2ETest.java", "diffHunk": "@@ -0,0 +1,558 @@\n+package teammates.e2e.cases;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.util.AppUrl;\n+import teammates.common.util.Const;\n+import teammates.common.util.ThreadHelper;\n+import teammates.e2e.pageobjects.InstructorFeedbackResultsPage;\n+import teammates.e2e.util.TestProperties;\n+\n+/**\n+ * SUT: {@link Const.WebPageURIs#INSTRUCTOR_SESSION_RESULTS_PAGE}.\n+ */\n+public class InstructorFeedbackResultsPageE2ETest extends BaseE2ETestCase {\n+    private InstructorAttributes instructor;\n+    private String fileName;\n+    private StudentAttributes studentToEmail;\n+\n+    private Collection<InstructorAttributes> instructors;\n+    private Collection<StudentAttributes> students;\n+\n+    private InstructorFeedbackResultsPage resultsPage;\n+\n+    // Maps to organise responses\n+    private Map<FeedbackQuestionAttributes, List<FeedbackResponseAttributes>> questionToResponses;\n+    private Map<FeedbackQuestionAttributes, Map<String, List<FeedbackResponseAttributes>>> questionToGiverToResponses;\n+    private Map<FeedbackQuestionAttributes, Map<String, List<FeedbackResponseAttributes>>> questionToRecipientToResponses;\n+\n+    @Override\n+    protected void prepareTestData() {\n+        testData = loadDataBundle(\"/InstructorFeedbackResultsPageE2ETest.json\");\n+        studentToEmail = testData.students.get(\"Emily\");\n+        studentToEmail.email = TestProperties.TEST_EMAIL;\n+        removeAndRestoreDataBundle(testData);\n+\n+        instructor = testData.instructors.get(\"tm.e2e.IFRes.instr\");\n+        FeedbackSessionAttributes fileSession = testData.feedbackSessions.get(\"Open Session 2\");\n+        fileName = \"/\" + fileSession.getCourseId() + \"_\" + fileSession.getFeedbackSessionName() + \"_result.csv\";\n+\n+        instructors = testData.instructors.values();\n+        students = testData.students.values();\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        deleteDownloadsFile(fileName);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAll() {\n+        testViews();\n+        testActions();\n+    }\n+\n+    private void testViews() {\n+        CourseAttributes course = testData.courses.get(\"tm.e2e.IFRes.CS2104\");\n+        FeedbackSessionAttributes feedbackSession = testData.feedbackSessions.get(\"Open Session\");\n+\n+        AppUrl resultsUrl = createUrl(Const.WebPageURIs.INSTRUCTOR_SESSION_RESULTS_PAGE)\n+                .withUserId(instructor.getGoogleId())\n+                .withCourseId(course.getId())\n+                .withSessionName(feedbackSession.getFeedbackSessionName());\n+        resultsPage = loginAdminToPage(resultsUrl, InstructorFeedbackResultsPage.class);\n+\n+        // -------------------------------------- Prepare responses -------------------------------------- //\n+        organiseResponses(course.getId());\n+        // we either test all questions or just use qn2\n+        FeedbackQuestionAttributes qn2 = testData.feedbackQuestions.get(\"qn2\");\n+        List<FeedbackResponseAttributes> qn2Responses = questionToResponses.get(qn2);\n+        Map<String, List<FeedbackResponseAttributes>> qn2GiverResponses = questionToGiverToResponses.get(qn2);\n+        Map<String, List<FeedbackResponseAttributes>> qn2RecipientResponses = questionToRecipientToResponses.get(qn2);\n+\n+        // For testing section filtering\n+        String section = testData.students.get(\"Alice\").getSection();\n+        List<FeedbackResponseAttributes> filteredQn2Responses = filterResponsesBySection(qn2Responses, section);\n+        Map<String, List<FeedbackResponseAttributes>> filteredQn2GiverResponses =\n+                filterMapBySection(qn2GiverResponses, section);\n+        Map<String, List<FeedbackResponseAttributes>> filteredQn2RecipientResponses =\n+                filterMapBySection(qn2RecipientResponses, section);\n+\n+        // For testing missing responses\n+        StudentAttributes noResponseStudent = testData.students.get(\"Benny\");\n+        StudentAttributes teammate = testData.students.get(\"Alice\");\n+        FeedbackResponseAttributes missingResponse =\n+                getMissingResponse(qn2.getQuestionNumber(), noResponseStudent, teammate);\n+        Map<String, List<FeedbackResponseAttributes>> qn2GiverResponsesWithMissing =\n+                addMissingResponseToMap(qn2GiverResponses, missingResponse, noResponseStudent.getEmail());\n+        Map<String, List<FeedbackResponseAttributes>> qn2RecipientResponsesWithMissing =\n+                addMissingResponseToMap(qn2RecipientResponses, missingResponse, teammate.getEmail());\n+\n+        // For testing comment\n+        FeedbackResponseAttributes responseWithComment = testData.feedbackResponses.get(\"qn2response1\");\n+        FeedbackResponseCommentAttributes comment = testData.feedbackResponseComments.get(\"qn2Comment2\");\n+\n+        boolean isGroupedByTeam = true;\n+\n+        // -------------------------------------- Question View -------------------------------------- //\n+\n+        ______TS(\"Question view: no missing responses\");\n+        resultsPage.includeMissingResponses(false);\n+\n+        for (Map.Entry<FeedbackQuestionAttributes, List<FeedbackResponseAttributes>> entry\n+                : questionToResponses.entrySet()) {\n+            resultsPage.verifyQnViewResponses(entry.getKey(), entry.getValue(), instructors, students);\n+        }\n+        resultsPage.verifyQnViewStats(qn2, qn2Responses, instructors, students);\n+\n+        ______TS(\"Question view: filter by section\");\n+        resultsPage.filterBySectionEither(section);\n+\n+        resultsPage.verifyQnViewResponses(qn2, filteredQn2Responses, instructors, students);\n+        resultsPage.verifyQnViewStats(qn2, filteredQn2Responses, instructors, students);\n+        resultsPage.unfilterResponses();\n+\n+        ______TS(\"Question view: with missing responses\");\n+        qn2Responses.add(missingResponse);\n+        sortResponses(qn2Responses);\n+        resultsPage.includeMissingResponses(true);\n+\n+        resultsPage.verifyQnViewResponses(qn2, qn2Responses, instructors, students);\n+\n+        ______TS(\"Question view: hide statistics\");\n+        resultsPage.includeStatistics(false);\n+\n+        resultsPage.verifyQnViewStatsHidden(qn2);\n+\n+        ______TS(\"Question view: verify comments\");\n+        resultsPage.verifyQnViewComment(qn2, comment, responseWithComment, instructors, students);\n+\n+        // -------------------------------------- GRQ View -------------------------------------- //\n+\n+        ______TS(\"GRQ view: no missing responses\");\n+        isGroupedByTeam = true;\n+        resultsPage.includeStatistics(true);\n+        resultsPage.includeGroupingByTeam(true);\n+        resultsPage.includeMissingResponses(false);\n+\n+        for (FeedbackQuestionAttributes question : questionToResponses.keySet()) {\n+            verifyGrqViewResponses(question, questionToGiverToResponses.get(question), isGroupedByTeam);\n+        }\n+\n+        ______TS(\"GRQ view: not grouped by team\");\n+        isGroupedByTeam = false;\n+        resultsPage.includeGroupingByTeam(false);\n+\n+        verifyGrqViewResponses(qn2, qn2GiverResponses, isGroupedByTeam);\n+\n+        ______TS(\"GRQ view: filter by section\");\n+        resultsPage.filterBySectionEither(section);\n+\n+        verifyGrqViewResponses(qn2, filteredQn2GiverResponses, isGroupedByTeam);\n+        resultsPage.unfilterResponses();\n+\n+        ______TS(\"GRQ view: with missing responses\");\n+        resultsPage.includeMissingResponses(true);\n+        verifyGrqViewResponses(qn2, qn2GiverResponsesWithMissing, isGroupedByTeam);\n+\n+        ______TS(\"GRQ view: verify comments\");\n+        resultsPage.verifyGrqViewComment(qn2, comment, responseWithComment, instructors, students, false);\n+\n+        // -------------------------------------- RGQ View -------------------------------------- //\n+\n+        ______TS(\"RGQ view: no missing responses\");\n+        isGroupedByTeam = true;\n+        resultsPage.includeStatistics(true);\n+        resultsPage.includeGroupingByTeam(true);\n+        resultsPage.includeMissingResponses(false);\n+\n+        for (FeedbackQuestionAttributes question : questionToResponses.keySet()) {\n+            verifyRgqViewResponses(question, questionToRecipientToResponses.get(question), isGroupedByTeam);\n+        }\n+\n+        ______TS(\"RGQ view: not grouped by team\");\n+        isGroupedByTeam = false;\n+        resultsPage.includeGroupingByTeam(false);\n+\n+        verifyRqgViewResponses(qn2, qn2RecipientResponses, isGroupedByTeam);\n+\n+        ______TS(\"RGQ view: filter by section\");\n+        resultsPage.filterBySectionEither(section);\n+\n+        verifyRqgViewResponses(qn2, filteredQn2RecipientResponses, isGroupedByTeam);\n+        resultsPage.unfilterResponses();\n+\n+        ______TS(\"RGQ view: with missing responses\");\n+        resultsPage.includeMissingResponses(true);\n+\n+        verifyRgqViewResponses(qn2, qn2RecipientResponsesWithMissing, isGroupedByTeam);\n+\n+        ______TS(\"RGQ view: verify comments\");\n+        resultsPage.verifyRgqViewComment(qn2, comment, responseWithComment, instructors, students, false);\n+\n+        // -------------------------------------- GQR View -------------------------------------- //\n+\n+        ______TS(\"GQR view: no missing responses\");\n+        isGroupedByTeam = true;\n+        resultsPage.includeStatistics(true);\n+        resultsPage.includeGroupingByTeam(true);\n+        resultsPage.includeMissingResponses(false);\n+\n+        for (FeedbackQuestionAttributes question : questionToResponses.keySet()) {\n+            verifyGqrViewResponses(question, questionToGiverToResponses.get(question), isGroupedByTeam);\n+        }\n+        verifyGqrViewStats(qn2, getResponsesByTeam(qn2, true), isGroupedByTeam);\n+\n+        ______TS(\"GQR view: not grouped by team\");\n+        isGroupedByTeam = false;\n+        resultsPage.includeGroupingByTeam(false);\n+\n+        verifyGqrViewResponses(qn2, qn2GiverResponses, isGroupedByTeam);\n+        verifyGqrViewStats(qn2, qn2GiverResponses, isGroupedByTeam);\n+\n+        ______TS(\"GQR view: filter by section\");\n+        resultsPage.filterBySectionEither(section);\n+\n+        verifyGqrViewStats(qn2, filteredQn2GiverResponses, isGroupedByTeam);\n+        resultsPage.unfilterResponses();\n+\n+        ______TS(\"GQR view: with missing responses\");\n+        resultsPage.includeMissingResponses(true);\n+\n+        verifyGqrViewResponses(qn2, qn2GiverResponsesWithMissing, isGroupedByTeam);\n+\n+        ______TS(\"GQR view: hide statistics\");\n+        resultsPage.includeStatistics(false);\n+        for (String giver : qn2GiverResponses.keySet()) {\n+            resultsPage.verifyGqrViewStatsHidden(qn2, giver, instructors, students, isGroupedByTeam);\n+        }\n+\n+        ______TS(\"GQR view: verify comments\");\n+        resultsPage.verifyGqrViewComment(qn2, comment, responseWithComment, instructors, students, false);\n+\n+        // -------------------------------------- RQG View -------------------------------------- //\n+\n+        ______TS(\"RQG view: no missing responses\");\n+        isGroupedByTeam = true;\n+        resultsPage.includeStatistics(true);\n+        resultsPage.includeGroupingByTeam(true);\n+        resultsPage.includeMissingResponses(false);\n+\n+        for (FeedbackQuestionAttributes question : questionToResponses.keySet()) {\n+            verifyRqgViewResponses(question, questionToRecipientToResponses.get(question), isGroupedByTeam);\n+        }\n+        verifyRqgViewStats(qn2, getResponsesByTeam(qn2, false), isGroupedByTeam);\n+\n+        ______TS(\"RQG view: not grouped by team\");\n+        isGroupedByTeam = false;\n+        resultsPage.includeGroupingByTeam(false);\n+\n+        verifyRqgViewStats(qn2, qn2RecipientResponses, isGroupedByTeam);\n+\n+        ______TS(\"RQG view: filter by section\");\n+        resultsPage.filterBySectionEither(section);\n+\n+        verifyRqgViewStats(qn2, filteredQn2RecipientResponses, isGroupedByTeam);\n+        resultsPage.unfilterResponses();\n+\n+        ______TS(\"RQG view: with missing responses\");\n+        resultsPage.includeMissingResponses(true);\n+\n+        verifyRqgViewResponses(qn2, qn2RecipientResponsesWithMissing, isGroupedByTeam);\n+\n+        ______TS(\"RQG view: hide statistics\");\n+        resultsPage.includeStatistics(false);\n+        for (String recipient : qn2RecipientResponses.keySet()) {\n+            resultsPage.verifyRqgViewStatsHidden(qn2, recipient, instructors, students, isGroupedByTeam);\n+        }\n+\n+        ______TS(\"RQG view: verify comments\");\n+        resultsPage.verifyRqgViewComment(qn2, comment, responseWithComment, instructors, students, false);\n+    }\n+\n+    private void testActions() {\n+        CourseAttributes course = testData.courses.get(\"tm.e2e.IFRes.CS2103\");\n+        FeedbackSessionAttributes feedbackSession = testData.feedbackSessions.get(\"Open Session 2\");\n+\n+        AppUrl resultsUrl = createUrl(Const.WebPageURIs.INSTRUCTOR_SESSION_RESULTS_PAGE)\n+                .withUserId(instructor.getGoogleId())\n+                .withCourseId(course.getId())\n+                .withSessionName(feedbackSession.getFeedbackSessionName());\n+        resultsPage = loginAdminToPage(resultsUrl, InstructorFeedbackResultsPage.class);\n+\n+        ______TS(\"verify loaded session details\");\n+        resultsPage.verifySessionDetails(feedbackSession);\n+\n+        ______TS(\"unpublish results\");\n+        resultsPage.unpublishSessionResults();\n+\n+        resultsPage.verifyStatusMessage(\"The feedback session has been unpublished.\");\n+        verifySessionPublishedState(feedbackSession, false);\n+        verifyEmailSent(studentToEmail.getEmail(), \"TEAMMATES: Feedback session results unpublished\"\n+                + \" [Course: \" + course.getName() + \"][Feedback Session: \"\n+                + feedbackSession.getFeedbackSessionName() + \"]\");\n+\n+        ______TS(\"publish results\");\n+        resultsPage.publishSessionResults();\n+\n+        resultsPage.verifyStatusMessage(\"The feedback session has been published. \"\n+                + \"Please allow up to 1 hour for all the notification emails to be sent out.\");\n+        verifySessionPublishedState(feedbackSession, true);\n+        verifyEmailSent(studentToEmail.getEmail(), \"TEAMMATES: Feedback session results published\"\n+                + \" [Course: \" + course.getName() + \"][Feedback Session: \"\n+                + feedbackSession.getFeedbackSessionName() + \"]\");\n+\n+        ______TS(\"download results\");\n+        resultsPage.downloadResults();\n+\n+        List<String> expectedContent = Arrays.asList(\"Course,\" + course.getId(),\n+                \"Session Name,\" + feedbackSession.getFeedbackSessionName(),\n+                \"Question 1,What part of the product did this teammate contribute most to?\");\n+        verifyDownloadedFile(fileName, expectedContent);\n+\n+        ______TS(\"verify no response panel details\");\n+        List<StudentAttributes> studentAttributes = getNotRespondedStudents(course.getId());\n+        studentAttributes.sort(Comparator.comparing(StudentAttributes::getName).reversed());\n+        resultsPage.sortNoResponseByName();\n+        resultsPage.verifyNoResponsePanelDetails(studentAttributes);\n+\n+        ______TS(\"remind all who have not responded to any question\");\n+        resultsPage.remindAllNonResponders();\n+\n+        resultsPage.verifyStatusMessage(\"Reminder e-mails have been sent out to those students and instructors.\"\n+                + \" Please allow up to 1 hour for all the notification emails to be sent out.\");\n+        verifyEmailSent(studentToEmail.getEmail(), \"TEAMMATES: Feedback session reminder\"\n+                + \" [Course: \" + course.getName() + \"][Feedback Session: \"\n+                + feedbackSession.getFeedbackSessionName() + \"]\");\n+    }\n+\n+    private void verifySessionPublishedState(FeedbackSessionAttributes feedbackSession, boolean state) {\n+        int retryLimit = 5;\n+        FeedbackSessionAttributes actual = getFeedbackSession(feedbackSession.getCourseId(),\n+                feedbackSession.getFeedbackSessionName());\n+        while (actual.isPublished() == state && retryLimit > 0) {\n+            retryLimit--;\n+            ThreadHelper.waitFor(1000);\n+            actual = getFeedbackSession(feedbackSession.getCourseId(),\n+                    feedbackSession.getFeedbackSessionName());\n+        }\n+        assertEquals(actual.isPublished(), state);\n+    }\n+\n+    private List<StudentAttributes> getNotRespondedStudents(String courseId) {\n+        Set<String> responders = testData.feedbackResponses.values().stream()\n+                .filter(response -> response.getCourseId().equals(courseId))\n+                .map(FeedbackResponseAttributes::getGiver)\n+                .collect(Collectors.toSet());\n+\n+        return testData.students.values().stream()\n+                .filter(student -> !responders.contains(student.getEmail()) && student.getCourse().equals(courseId))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private List<FeedbackResponseAttributes> getResponsesByQuestion(String courseId, int qnNum) {\n+        List<FeedbackResponseAttributes> responses = testData.feedbackResponses.values().stream()\n+                .filter(response -> response.getCourseId().equals(courseId)\n+                        && response.getFeedbackQuestionId().equals(Integer.toString(qnNum)))\n+                .collect(Collectors.toList());\n+        sortResponses(responses);\n+        return responses;\n+    }\n+\n+    private void sortResponses(List<FeedbackResponseAttributes> responses) {\n+        responses.sort((r1, r2) -> {\n+            if (r1.getGiver().equals(r2.getGiver())) {\n+                return r1.getRecipient().compareTo(r2.getRecipient());\n+            }\n+            return r1.getGiver().compareTo(r2.getGiver());\n+        });\n+    }\n+\n+    private String getTeamName(FeedbackParticipantType type, String participant, Collection<StudentAttributes> students) {\n+        if (type.equals(FeedbackParticipantType.NONE)) {\n+            return \"No Specific Team\";\n+        } else if (type.equals(FeedbackParticipantType.TEAMS)) {\n+            return participant;\n+        } else if (type.equals(FeedbackParticipantType.INSTRUCTORS)) {\n+            return \"Instructors\";\n+        }\n+        String teamName = students.stream()\n+                .filter(student -> student.getEmail().equals(participant))\n+                .findFirst()\n+                .map(StudentAttributes::getTeam)\n+                .orElse(null);\n+\n+        if (teamName == null) {\n+            throw new RuntimeException(\"cannot find section name\");\n+        }\n+\n+        return teamName;\n+    }\n+\n+    private Map<String, List<FeedbackResponseAttributes>> getResponsesByTeam(FeedbackQuestionAttributes question,\n+                                                                             boolean isGiver) {\n+        Map<String, List<FeedbackResponseAttributes>> userToResponses;\n+        if (isGiver) {\n+            userToResponses = questionToGiverToResponses.get(question);\n+        } else {\n+            userToResponses = questionToRecipientToResponses.get(question);\n+        }\n+\n+        Map<String, List<FeedbackResponseAttributes>> teamResponses = new HashMap<>();\n+        for (Map.Entry<String, List<FeedbackResponseAttributes>> entry : userToResponses.entrySet()) {\n+            String user = entry.getKey();\n+            FeedbackParticipantType type = isGiver ? question.getGiverType() : question.getRecipientType();\n+            String team = getTeamName(type, user, students);\n+            List<FeedbackResponseAttributes> responses = entry.getValue();\n+\n+            if (!teamResponses.containsKey(team)) {\n+                teamResponses.put(team, new ArrayList<>());\n+            }\n+            teamResponses.get(team).addAll(responses);\n+        }\n+\n+        return teamResponses;\n+    }\n+\n+    private Map<String, List<FeedbackResponseAttributes>> addMissingResponseToMap(\n+                                         Map<String, List<FeedbackResponseAttributes>> map,\n+                                         FeedbackResponseAttributes missingResponse, String key) {\n+        Map<String, List<FeedbackResponseAttributes>> copy = map.entrySet().stream()\n+                .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue().stream().collect(Collectors.toList())));\n+        if (!copy.containsKey(key)) {\n+            copy.put(key, new ArrayList<>());\n+        }\n+        copy.get(key).add(missingResponse);\n+        sortResponses(copy.get(key));\n+        return copy;\n+    }\n+\n+    private Map<String, List<FeedbackResponseAttributes>> filterMapBySection(\n+            Map<String, List<FeedbackResponseAttributes>> userToResponses,\n+            String section) {\n+        Map<String, List<FeedbackResponseAttributes>> filtered = new HashMap<>();\n+        for (Map.Entry<String, List<FeedbackResponseAttributes>> entry : userToResponses.entrySet()) {\n+            List<FeedbackResponseAttributes> filteredResponses = filterResponsesBySection(entry.getValue(), section);\n+            if (!filteredResponses.isEmpty()) {\n+                filtered.put(entry.getKey(), filteredResponses);\n+            }\n+        }\n+        return filtered;\n+    }\n+\n+    private List<FeedbackResponseAttributes> filterResponsesBySection(List<FeedbackResponseAttributes> responses,\n+                                                                     String section) {\n+        return responses.stream()\n+                .filter(r1 -> r1.getGiverSection().equals(section) || r1.getRecipientSection().equals(section))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private FeedbackResponseAttributes getMissingResponse(int qnNum, StudentAttributes giver, StudentAttributes recipient) {\n+        return FeedbackResponseAttributes.builder(Integer.toString(qnNum), giver.getEmail(), recipient.getEmail()).build();\n+    }\n+\n+    private void verifyGqrViewResponses(FeedbackQuestionAttributes question,\n+                                        Map<String, List<FeedbackResponseAttributes>> giverToResponses,\n+                                        boolean isGroupedByTeam) {\n+        for (Map.Entry<String, List<FeedbackResponseAttributes>> entry : giverToResponses.entrySet()) {\n+            resultsPage.verifyGqrViewResponses(question, entry.getValue(), isGroupedByTeam, instructors, students);\n+        }\n+    }\n+\n+    private void verifyRqgViewResponses(FeedbackQuestionAttributes question,\n+                                        Map<String, List<FeedbackResponseAttributes>> recipientToResponses,\n+                                        boolean isGroupedByTeam) {\n+        for (Map.Entry<String, List<FeedbackResponseAttributes>> entry : recipientToResponses.entrySet()) {\n+            resultsPage.verifyRqgViewResponses(question, entry.getValue(), isGroupedByTeam, instructors, students);\n+        }\n+    }\n+\n+    private void verifyGrqViewResponses(FeedbackQuestionAttributes question,\n+                                        Map<String, List<FeedbackResponseAttributes>> giverToResponses,\n+                                        boolean isGroupedByTeam) {\n+        for (Map.Entry<String, List<FeedbackResponseAttributes>> entry : giverToResponses.entrySet()) {\n+            resultsPage.verifyGrqViewResponses(question, entry.getValue(), isGroupedByTeam, instructors, students);\n+        }\n+    }\n+\n+    private void verifyRgqViewResponses(FeedbackQuestionAttributes question,\n+                                        Map<String, List<FeedbackResponseAttributes>> recipientToResponses,\n+                                        boolean isGroupedByTeam) {\n+        for (Map.Entry<String, List<FeedbackResponseAttributes>> entry : recipientToResponses.entrySet()) {\n+            resultsPage.verifyRgqViewResponses(question, entry.getValue(), isGroupedByTeam, instructors, students);\n+        }\n+    }\n+\n+    private void verifyRqgViewStats(FeedbackQuestionAttributes question,\n+                                    Map<String, List<FeedbackResponseAttributes>> responses,\n+                                    boolean isGroupedByTeam) {\n+        for (Map.Entry<String, List<FeedbackResponseAttributes>> entry : responses.entrySet()) {\n+            resultsPage.verifyRqgViewStats(question, entry.getValue(), isGroupedByTeam, instructors, students);\n+        }\n+    }\n+\n+    private void verifyGqrViewStats(FeedbackQuestionAttributes question,\n+                                    Map<String, List<FeedbackResponseAttributes>> responses,\n+                                    boolean isGroupedByTeam) {\n+        for (Map.Entry<String, List<FeedbackResponseAttributes>> entry : responses.entrySet()) {\n+            resultsPage.verifyGqrViewStats(question, entry.getValue(), isGroupedByTeam, instructors, students);\n+        }\n+    }\n+\n+    private void organiseResponses(String courseId) {\n+        questionToResponses = new HashMap<>();\n+        for (int i = 1; i <= 3; i++) {", "originalCommit": "e83aec46abfee96d528ba484b1001839dbfcc7ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cc78726dcbe7cd2cd12e1bd0c883df348194b288", "url": "https://github.com/TEAMMATES/teammates/commit/cc78726dcbe7cd2cd12e1bd0c883df348194b288", "message": "Clean up InstructorFeedbackResultsPageE2ETest", "committedDate": "2020-12-13T14:33:56Z", "type": "commit"}, {"oid": "b287fc7ba2bfda016473fb65b54e1f59b0df2344", "url": "https://github.com/TEAMMATES/teammates/commit/b287fc7ba2bfda016473fb65b54e1f59b0df2344", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into instructor-result-e2e", "committedDate": "2020-12-13T14:34:07Z", "type": "commit"}, {"oid": "b287fc7ba2bfda016473fb65b54e1f59b0df2344", "url": "https://github.com/TEAMMATES/teammates/commit/b287fc7ba2bfda016473fb65b54e1f59b0df2344", "message": "Merge branch 'master' of https://github.com/TEAMMATES/teammates into instructor-result-e2e", "committedDate": "2020-12-13T14:34:07Z", "type": "forcePushed"}]}