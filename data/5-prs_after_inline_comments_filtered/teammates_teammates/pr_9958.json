{"pr_number": 9958, "pr_title": "[#9646] Add L&P tests for backend endpoints", "pr_createdAt": "2020-02-16T19:57:57Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/9958", "timeline": [{"oid": "f262fc2ba74d4bf80d59b7765e0df801e42c78e8", "url": "https://github.com/TEAMMATES/teammates/commit/f262fc2ba74d4bf80d59b7765e0df801e42c78e8", "message": "Add skeleton for Feedback Session load testing", "committedDate": "2020-02-13T18:49:19Z", "type": "commit"}, {"oid": "4a6daef8e2ab3de8cfcea55c58f940ea85c302c3", "url": "https://github.com/TEAMMATES/teammates/commit/4a6daef8e2ab3de8cfcea55c58f940ea85c302c3", "message": "Add method to generate feedback session", "committedDate": "2020-02-13T19:16:38Z", "type": "commit"}, {"oid": "1eda259772484334ed47f33fb70ee508dba6b2ff", "url": "https://github.com/TEAMMATES/teammates/commit/1eda259772484334ed47f33fb70ee508dba6b2ff", "message": "Add method to generate feedback questions", "committedDate": "2020-02-13T19:46:46Z", "type": "commit"}, {"oid": "f270aa582e43979a1b990805ceecb08234c1c2e7", "url": "https://github.com/TEAMMATES/teammates/commit/f270aa582e43979a1b990805ceecb08234c1c2e7", "message": "Complete feedback view lnp test", "committedDate": "2020-02-15T17:15:08Z", "type": "commit"}, {"oid": "739dfe103bc59afef6ab8c4e811c8f42900db55e", "url": "https://github.com/TEAMMATES/teammates/commit/739dfe103bc59afef6ab8c4e811c8f42900db55e", "message": "Change test to use login method", "committedDate": "2020-02-15T19:45:03Z", "type": "commit"}, {"oid": "787b40708e4f2a80ae3e751191c006e157f949c2", "url": "https://github.com/TEAMMATES/teammates/commit/787b40708e4f2a80ae3e751191c006e157f949c2", "message": "Fix lnp test for viewing feedback form not working properly", "committedDate": "2020-02-15T20:41:52Z", "type": "commit"}, {"oid": "cd3ce07c5392c1e00e2f9b4463055e6f51b4adbd", "url": "https://github.com/TEAMMATES/teammates/commit/cd3ce07c5392c1e00e2f9b4463055e6f51b4adbd", "message": "Fix styling issues", "committedDate": "2020-02-15T20:52:13Z", "type": "commit"}, {"oid": "6d389f6286904f024ffb16b7e62977455e2ae0da", "url": "https://github.com/TEAMMATES/teammates/commit/6d389f6286904f024ffb16b7e62977455e2ae0da", "message": "Add more HTTP request to simulate real case scenario better", "committedDate": "2020-02-15T21:22:06Z", "type": "commit"}, {"oid": "78f1cf0f0084553b2fd539205ee34f7cd4eebe15", "url": "https://github.com/TEAMMATES/teammates/commit/78f1cf0f0084553b2fd539205ee34f7cd4eebe15", "message": "Fix FeedbackSessionQuestion giving errors", "committedDate": "2020-02-15T22:16:56Z", "type": "commit"}, {"oid": "c98774b08810466d9edfefb62c9592e7f4b6b11f", "url": "https://github.com/TEAMMATES/teammates/commit/c98774b08810466d9edfefb62c9592e7f4b6b11f", "message": "Create new lnp test for submitting feedback session form", "committedDate": "2020-02-16T00:11:53Z", "type": "commit"}, {"oid": "a589b4b9226e9d0007b54090232c2acdd8199c53", "url": "https://github.com/TEAMMATES/teammates/commit/a589b4b9226e9d0007b54090232c2acdd8199c53", "message": "Attempt to fix regexMatcher", "committedDate": "2020-02-16T07:59:25Z", "type": "commit"}, {"oid": "6d4091014776f7684fe98aa3cc3acb97d67d996a", "url": "https://github.com/TEAMMATES/teammates/commit/6d4091014776f7684fe98aa3cc3acb97d67d996a", "message": "Fix lnp testing for Feedback session submit response", "committedDate": "2020-02-16T18:52:11Z", "type": "commit"}, {"oid": "38a63dec974e734da2f692e2e2526a5f4c8d5bf5", "url": "https://github.com/TEAMMATES/teammates/commit/38a63dec974e734da2f692e2e2526a5f4c8d5bf5", "message": "Remove debugging code and stray character", "committedDate": "2020-02-16T18:54:18Z", "type": "commit"}, {"oid": "f3ccc4d7b7832861885a243915349a1742d834d0", "url": "https://github.com/TEAMMATES/teammates/commit/f3ccc4d7b7832861885a243915349a1742d834d0", "message": "Disable standard output stream for lnp tests", "committedDate": "2020-02-16T19:10:40Z", "type": "commit"}, {"oid": "104b14a3acfa2399470f363b49728e625aef1392", "url": "https://github.com/TEAMMATES/teammates/commit/104b14a3acfa2399470f363b49728e625aef1392", "message": "Fix style issues", "committedDate": "2020-02-16T19:51:08Z", "type": "commit"}, {"oid": "b01c9ae90972f8ca048f71407ff251fda060c159", "url": "https://github.com/TEAMMATES/teammates/commit/b01c9ae90972f8ca048f71407ff251fda060c159", "message": "Fix lint and other minor issues", "committedDate": "2020-02-16T20:57:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDI1Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934256", "bodyText": "Forget to change?", "author": "xpdavid", "createdAt": "2020-02-16T21:20:52Z", "path": "src/e2e/java/teammates/e2e/cases/lnp/FeedbackSessionSubmitLNPTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jmeter.protocol.http.control.HeaderManager;\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.util.Const;\n+import teammates.e2e.util.BackDoor;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPTestData;\n+\n+/**\n+ * L&P Test Case for instructor's student enrollment API endpoint.", "originalCommit": "b01c9ae90972f8ca048f71407ff251fda060c159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNjIyMA==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379936220", "bodyText": "Updated javadoc to reflect on the actual test.", "author": "daekoon", "createdAt": "2020-02-16T21:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDM2Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934362", "bodyText": "sleep for?", "author": "xpdavid", "createdAt": "2020-02-16T21:22:27Z", "path": "src/e2e/java/teammates/e2e/cases/lnp/FeedbackSessionSubmitLNPTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jmeter.protocol.http.control.HeaderManager;\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.util.Const;\n+import teammates.e2e.util.BackDoor;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPTestData;\n+\n+/**\n+ * L&P Test Case for instructor's student enrollment API endpoint.\n+ */\n+public class FeedbackSessionSubmitLNPTest extends BaseLNPTestCase {\n+\n+    private static final int NUMBER_OF_USER_ACCOUNTS = 500;\n+    private static final int RAMP_UP_PERIOD = 2;\n+    private static final String STUDENT_NAME = \"LnPStudent\";\n+    private static final String STUDENT_EMAIL = \"personalEmail\";\n+\n+    private static final String INSTRUCTOR_EMAIL = \"tmms.test@gmail.tmt\";\n+\n+    private static final String COURSE_ID = \"TestData.CS101\";\n+    private static final String FEEDBACK_SESSION_NAME = \"Test Feedback Session\";\n+\n+    @Override\n+    protected LNPTestData getTestData() {\n+        return new LNPTestData() {\n+            @Override\n+            protected Map<String, AccountAttributes> generateAccounts() {\n+                Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    accounts.put(STUDENT_NAME + i, AccountAttributes.builder(STUDENT_NAME + i + \".tmms\")\n+                            .withEmail(STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                            .withName(STUDENT_NAME + i)\n+                            .withIsInstructor(false)\n+                            .withInstitute(\"TEAMMATES Test Institute 2\")\n+                            .build()\n+                    );\n+                }\n+\n+                return accounts;\n+            }\n+\n+            @Override\n+            protected Map<String, CourseAttributes> generateCourses() {\n+                Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+                courses.put(\"course\", CourseAttributes.builder(COURSE_ID)\n+                        .withName(\"Feedback Load Testing\")\n+                        .withTimezone(ZoneId.of(\"UTC\"))\n+                        .build()\n+                );\n+\n+                return courses;\n+            }\n+\n+            @Override\n+            protected Map<String, InstructorAttributes> generateInstructors() {\n+                Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+                instructors.put(\"teammates.test.instructor\",\n+                        InstructorAttributes.builder(COURSE_ID, INSTRUCTOR_EMAIL)\n+                                .withGoogleId(\"TestData.instructor\")\n+                                .withName(\"Teammates Test\")\n+                                .withRole(\"Co-owner\")\n+                                .withIsDisplayedToStudents(true)\n+                                .withDisplayedName(\"Co-owner\")\n+                                .withPrivileges(new InstructorPrivileges(\n+                                        Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER))\n+                                .build()\n+                );\n+\n+                return instructors;\n+            }\n+\n+            @Override\n+            protected Map<String, StudentAttributes> generateStudents() {\n+                Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+                StudentAttributes studentAttribute;\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    studentAttribute = StudentAttributes.builder(COURSE_ID, STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                                            .withGoogleId(STUDENT_NAME + i + \".tmms\")\n+                                            .withName(STUDENT_NAME + i)\n+                                            .withComment(\"This student's name is \" + STUDENT_NAME + i)\n+                                            .withSectionName(\"None\")\n+                                            .withTeamName(\"Team 1\")\n+                                            .build();\n+                    students.put(STUDENT_NAME + i, studentAttribute);\n+                }\n+\n+                return students;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions() {\n+                Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+                FeedbackSessionAttributes session = FeedbackSessionAttributes\n+                                                            .builder(FEEDBACK_SESSION_NAME, COURSE_ID)\n+                                                            .withCreatorEmail(INSTRUCTOR_EMAIL)\n+                                                            .withStartTime(Instant.now())\n+                                                            .withEndTime(Instant.now().plusSeconds(500))\n+                                                            .withSessionVisibleFromTime(Instant.now())\n+                                                            .withResultsVisibleFromTime(Instant.now())\n+                                                            .build();\n+\n+                feedbackSessions.put(FEEDBACK_SESSION_NAME, session);\n+\n+                return feedbackSessions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions() {\n+                ArrayList<FeedbackParticipantType> showResponses = new ArrayList<>();\n+                showResponses.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                ArrayList<FeedbackParticipantType> showRecepientName = new ArrayList<>();\n+                showRecepientName.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+                FeedbackQuestionDetails details = new FeedbackTextQuestionDetails(\"Test Question\");\n+                feedbackQuestions.put(\"QuestionTest\",\n+                        FeedbackQuestionAttributes.builder()\n+                            .withFeedbackSessionName(FEEDBACK_SESSION_NAME)\n+                                .withQuestionDescription(\"Test Question\")\n+                            .withCourseId(COURSE_ID)\n+                            .withQuestionDetails(details)\n+                            .withQuestionNumber(1)\n+                            .withGiverType(FeedbackParticipantType.STUDENTS)\n+                            .withRecipientType(FeedbackParticipantType.SELF)\n+                            .withShowResponsesTo(showResponses)\n+                            .withShowGiverNameTo(showGiverName)\n+                            .withShowRecipientNameTo(showRecepientName)\n+                            .withNumberOfEntitiesToGiveFeedbackTo(1)\n+                            .build()\n+                );\n+\n+                return feedbackQuestions;\n+            }\n+\n+            @Override\n+            public List<String> generateCsvHeaders() {\n+                List<String> headers = new ArrayList<>();\n+\n+                headers.add(\"loginId\");\n+                headers.add(\"isAdmin\");\n+                headers.add(\"googleId\");\n+                headers.add(\"courseId\");\n+                headers.add(\"fsname\");\n+                headers.add(\"studentEmail\");\n+\n+                return headers;\n+            }\n+\n+            @Override\n+            public List<List<String>> generateCsvData() {\n+                DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n+                List<List<String>> csvData = new ArrayList<>();\n+\n+                dataBundle.students.forEach((key, student) -> {\n+                    List<String> csvRow = new ArrayList<>();\n+\n+                    csvRow.add(student.googleId); // \"googleId\" is used for logging in, not \"email\"\n+                    csvRow.add(\"no\");\n+                    csvRow.add(student.googleId);\n+                    csvRow.add(COURSE_ID);\n+                    csvRow.add(FEEDBACK_SESSION_NAME);\n+                    csvRow.add(student.email);\n+\n+                    csvData.add(csvRow);\n+\n+                });\n+\n+                return csvData;\n+            }\n+        };\n+    }\n+\n+    private Map<String, String> getRequestHeaders() {\n+        Map<String, String> headers = new LinkedHashMap<>();\n+\n+        headers.put(\"X-CSRF-TOKEN\", \"${csrfToken}\");\n+        headers.put(\"Content-Type\", \"application/json\");\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    protected ListedHashTree getLnpTestPlan() {\n+        ListedHashTree testPlan = new ListedHashTree(JMeterElements.testPlan());\n+        HashTree threadGroup = testPlan.add(\n+                JMeterElements.threadGroup(NUMBER_OF_USER_ACCOUNTS, RAMP_UP_PERIOD, 1));\n+        threadGroup.add(JMeterElements.csvDataSet(getPathToTestDataFile(getCsvConfigPath())));\n+        threadGroup.add(JMeterElements.cookieManager());\n+        threadGroup.add(JMeterElements.defaultSampler());\n+        threadGroup.add(JMeterElements.onceOnlyController())\n+                .add(JMeterElements.loginSampler())\n+                .add(JMeterElements.csrfExtractor(\"csrfToken\"));\n+\n+        HeaderManager headerManager = JMeterElements.headerManager(getRequestHeaders());\n+        threadGroup.add(headerManager);\n+\n+        //Backdoor to retrieve questionId which is generated only on backend server\n+        String fqId = BackDoor.getFeedbackQuestionId(COURSE_ID, FEEDBACK_SESSION_NAME, 1);\n+\n+        String body = \"{\\\"questionType\\\": \\\"TEXT\\\",\"\n+                + \"\\\"recipientIdentifier\\\": \\\"${studentEmail}\\\",\"\n+                + \"\\\"responseDetails\\\": {\\\"answer\\\": \\\"<p>test</p>\\\", \\\"questionType\\\": \\\"TEXT\\\"}}\";\n+        String fourthPath = \"webapi/response?questionid=\" + fqId\n+                                    + \"&intent=STUDENT_SUBMISSION\";\n+        threadGroup.add(JMeterElements.httpSampler(fourthPath, POST, body));\n+\n+        return testPlan;\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        createTestData();\n+        persistTestData();\n+    }\n+\n+    @Test\n+    public void runLnpTest() throws IOException {\n+        try {\n+            Thread.sleep(3000);", "originalCommit": "b01c9ae90972f8ca048f71407ff251fda060c159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDkzNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934934", "bodyText": "This test had a tendency to break randomly. Sometimes, the Backdoor access to retrieve questionId will result in out of bounds exception, which I assumed that the data was still being generated. Hence the 3 second delay to ensure that the test only runs after all data has been created.", "author": "daekoon", "createdAt": "2020-02-16T21:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDQxNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934414", "bodyText": "Remember to change the doc", "author": "xpdavid", "createdAt": "2020-02-16T21:23:19Z", "path": "src/e2e/java/teammates/e2e/cases/lnp/FeedbackSessionSubmitLNPTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jmeter.protocol.http.control.HeaderManager;\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.util.Const;\n+import teammates.e2e.util.BackDoor;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPTestData;\n+\n+/**\n+ * L&P Test Case for instructor's student enrollment API endpoint.\n+ */\n+public class FeedbackSessionSubmitLNPTest extends BaseLNPTestCase {\n+\n+    private static final int NUMBER_OF_USER_ACCOUNTS = 500;\n+    private static final int RAMP_UP_PERIOD = 2;\n+    private static final String STUDENT_NAME = \"LnPStudent\";\n+    private static final String STUDENT_EMAIL = \"personalEmail\";\n+\n+    private static final String INSTRUCTOR_EMAIL = \"tmms.test@gmail.tmt\";\n+\n+    private static final String COURSE_ID = \"TestData.CS101\";\n+    private static final String FEEDBACK_SESSION_NAME = \"Test Feedback Session\";\n+\n+    @Override\n+    protected LNPTestData getTestData() {\n+        return new LNPTestData() {\n+            @Override\n+            protected Map<String, AccountAttributes> generateAccounts() {\n+                Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    accounts.put(STUDENT_NAME + i, AccountAttributes.builder(STUDENT_NAME + i + \".tmms\")\n+                            .withEmail(STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                            .withName(STUDENT_NAME + i)\n+                            .withIsInstructor(false)\n+                            .withInstitute(\"TEAMMATES Test Institute 2\")\n+                            .build()\n+                    );\n+                }\n+\n+                return accounts;\n+            }\n+\n+            @Override\n+            protected Map<String, CourseAttributes> generateCourses() {\n+                Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+                courses.put(\"course\", CourseAttributes.builder(COURSE_ID)\n+                        .withName(\"Feedback Load Testing\")\n+                        .withTimezone(ZoneId.of(\"UTC\"))\n+                        .build()\n+                );\n+\n+                return courses;\n+            }\n+\n+            @Override\n+            protected Map<String, InstructorAttributes> generateInstructors() {\n+                Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+                instructors.put(\"teammates.test.instructor\",\n+                        InstructorAttributes.builder(COURSE_ID, INSTRUCTOR_EMAIL)\n+                                .withGoogleId(\"TestData.instructor\")\n+                                .withName(\"Teammates Test\")\n+                                .withRole(\"Co-owner\")\n+                                .withIsDisplayedToStudents(true)\n+                                .withDisplayedName(\"Co-owner\")\n+                                .withPrivileges(new InstructorPrivileges(\n+                                        Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER))\n+                                .build()\n+                );\n+\n+                return instructors;\n+            }\n+\n+            @Override\n+            protected Map<String, StudentAttributes> generateStudents() {\n+                Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+                StudentAttributes studentAttribute;\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    studentAttribute = StudentAttributes.builder(COURSE_ID, STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                                            .withGoogleId(STUDENT_NAME + i + \".tmms\")\n+                                            .withName(STUDENT_NAME + i)\n+                                            .withComment(\"This student's name is \" + STUDENT_NAME + i)\n+                                            .withSectionName(\"None\")\n+                                            .withTeamName(\"Team 1\")\n+                                            .build();\n+                    students.put(STUDENT_NAME + i, studentAttribute);\n+                }\n+\n+                return students;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions() {\n+                Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+                FeedbackSessionAttributes session = FeedbackSessionAttributes\n+                                                            .builder(FEEDBACK_SESSION_NAME, COURSE_ID)\n+                                                            .withCreatorEmail(INSTRUCTOR_EMAIL)\n+                                                            .withStartTime(Instant.now())\n+                                                            .withEndTime(Instant.now().plusSeconds(500))\n+                                                            .withSessionVisibleFromTime(Instant.now())\n+                                                            .withResultsVisibleFromTime(Instant.now())\n+                                                            .build();\n+\n+                feedbackSessions.put(FEEDBACK_SESSION_NAME, session);\n+\n+                return feedbackSessions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions() {\n+                ArrayList<FeedbackParticipantType> showResponses = new ArrayList<>();\n+                showResponses.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                ArrayList<FeedbackParticipantType> showRecepientName = new ArrayList<>();\n+                showRecepientName.add(FeedbackParticipantType.INSTRUCTORS);\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+                FeedbackQuestionDetails details = new FeedbackTextQuestionDetails(\"Test Question\");\n+                feedbackQuestions.put(\"QuestionTest\",\n+                        FeedbackQuestionAttributes.builder()\n+                            .withFeedbackSessionName(FEEDBACK_SESSION_NAME)\n+                                .withQuestionDescription(\"Test Question\")\n+                            .withCourseId(COURSE_ID)\n+                            .withQuestionDetails(details)\n+                            .withQuestionNumber(1)\n+                            .withGiverType(FeedbackParticipantType.STUDENTS)\n+                            .withRecipientType(FeedbackParticipantType.SELF)\n+                            .withShowResponsesTo(showResponses)\n+                            .withShowGiverNameTo(showGiverName)\n+                            .withShowRecipientNameTo(showRecepientName)\n+                            .withNumberOfEntitiesToGiveFeedbackTo(1)\n+                            .build()\n+                );\n+\n+                return feedbackQuestions;\n+            }\n+\n+            @Override\n+            public List<String> generateCsvHeaders() {\n+                List<String> headers = new ArrayList<>();\n+\n+                headers.add(\"loginId\");\n+                headers.add(\"isAdmin\");\n+                headers.add(\"googleId\");\n+                headers.add(\"courseId\");\n+                headers.add(\"fsname\");\n+                headers.add(\"studentEmail\");\n+\n+                return headers;\n+            }\n+\n+            @Override\n+            public List<List<String>> generateCsvData() {\n+                DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n+                List<List<String>> csvData = new ArrayList<>();\n+\n+                dataBundle.students.forEach((key, student) -> {\n+                    List<String> csvRow = new ArrayList<>();\n+\n+                    csvRow.add(student.googleId); // \"googleId\" is used for logging in, not \"email\"\n+                    csvRow.add(\"no\");\n+                    csvRow.add(student.googleId);\n+                    csvRow.add(COURSE_ID);\n+                    csvRow.add(FEEDBACK_SESSION_NAME);\n+                    csvRow.add(student.email);\n+\n+                    csvData.add(csvRow);\n+\n+                });\n+\n+                return csvData;\n+            }\n+        };\n+    }\n+\n+    private Map<String, String> getRequestHeaders() {\n+        Map<String, String> headers = new LinkedHashMap<>();\n+\n+        headers.put(\"X-CSRF-TOKEN\", \"${csrfToken}\");\n+        headers.put(\"Content-Type\", \"application/json\");\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    protected ListedHashTree getLnpTestPlan() {\n+        ListedHashTree testPlan = new ListedHashTree(JMeterElements.testPlan());\n+        HashTree threadGroup = testPlan.add(\n+                JMeterElements.threadGroup(NUMBER_OF_USER_ACCOUNTS, RAMP_UP_PERIOD, 1));\n+        threadGroup.add(JMeterElements.csvDataSet(getPathToTestDataFile(getCsvConfigPath())));\n+        threadGroup.add(JMeterElements.cookieManager());\n+        threadGroup.add(JMeterElements.defaultSampler());\n+        threadGroup.add(JMeterElements.onceOnlyController())\n+                .add(JMeterElements.loginSampler())\n+                .add(JMeterElements.csrfExtractor(\"csrfToken\"));\n+\n+        HeaderManager headerManager = JMeterElements.headerManager(getRequestHeaders());\n+        threadGroup.add(headerManager);\n+\n+        //Backdoor to retrieve questionId which is generated only on backend server\n+        String fqId = BackDoor.getFeedbackQuestionId(COURSE_ID, FEEDBACK_SESSION_NAME, 1);\n+\n+        String body = \"{\\\"questionType\\\": \\\"TEXT\\\",\"\n+                + \"\\\"recipientIdentifier\\\": \\\"${studentEmail}\\\",\"\n+                + \"\\\"responseDetails\\\": {\\\"answer\\\": \\\"<p>test</p>\\\", \\\"questionType\\\": \\\"TEXT\\\"}}\";\n+        String fourthPath = \"webapi/response?questionid=\" + fqId\n+                                    + \"&intent=STUDENT_SUBMISSION\";\n+        threadGroup.add(JMeterElements.httpSampler(fourthPath, POST, body));\n+\n+        return testPlan;\n+    }\n+\n+    @BeforeClass\n+    public void classSetup() {\n+        createTestData();\n+        persistTestData();\n+    }\n+\n+    @Test\n+    public void runLnpTest() throws IOException {\n+        try {\n+            Thread.sleep(3000);\n+        } catch (Exception e) {\n+            System.out.println(\"Error while executing LnP Test.\");\n+            System.out.println(e.toString());\n+        }\n+        runJmeter(true);\n+    }\n+\n+    /**\n+     * Removes the entities added for the instructors' student enrollment L&P test.", "originalCommit": "b01c9ae90972f8ca048f71407ff251fda060c159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNjIyNw==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379936227", "bodyText": "Updated javadoc to reflect on the actual test.", "author": "daekoon", "createdAt": "2020-02-16T21:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDQ3OA==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934478", "bodyText": "Is there any particular reason to name the path as firstPath, secondPath and so on?", "author": "xpdavid", "createdAt": "2020-02-16T21:24:19Z", "path": "src/e2e/java/teammates/e2e/cases/lnp/FeedbackSessionViewLNPTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package teammates.e2e.cases.lnp;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.jorphan.collections.HashTree;\n+import org.apache.jorphan.collections.ListedHashTree;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import teammates.common.datatransfer.DataBundle;\n+import teammates.common.datatransfer.FeedbackParticipantType;\n+import teammates.common.datatransfer.InstructorPrivileges;\n+import teammates.common.datatransfer.attributes.AccountAttributes;\n+import teammates.common.datatransfer.attributes.CourseAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;\n+import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;\n+import teammates.common.datatransfer.attributes.InstructorAttributes;\n+import teammates.common.datatransfer.attributes.StudentAttributes;\n+import teammates.common.datatransfer.questions.FeedbackQuestionDetails;\n+import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;\n+import teammates.common.util.Const;\n+import teammates.e2e.util.JMeterElements;\n+import teammates.e2e.util.LNPTestData;\n+\n+/**\n+ * L&P Test Case for instructor's student enrollment API endpoint.\n+ */\n+public class FeedbackSessionViewLNPTest extends BaseLNPTestCase {\n+\n+    private static final int NUMBER_OF_USER_ACCOUNTS = 500;\n+    private static final int RAMP_UP_PERIOD = 2;\n+    private static final String STUDENT_NAME = \"LnPStudent\";\n+    private static final String STUDENT_EMAIL = \"personalEmail\";\n+\n+    private static final String INSTRUCTOR_EMAIL = \"tmms.test@gmail.tmt\";\n+\n+    private static final String COURSE_ID = \"TestData.CS101\";\n+\n+    @Override\n+    protected LNPTestData getTestData() {\n+        return new LNPTestData() {\n+            @Override\n+            protected Map<String, AccountAttributes> generateAccounts() {\n+                Map<String, AccountAttributes> accounts = new LinkedHashMap<>();\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    accounts.put(STUDENT_NAME + i, AccountAttributes.builder(STUDENT_NAME + i + \".tmms\")\n+                            .withEmail(STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                            .withName(STUDENT_NAME + i)\n+                            .withIsInstructor(false)\n+                            .withInstitute(\"TEAMMATES Test Institute 2\")\n+                            .build()\n+                    );\n+                }\n+\n+                return accounts;\n+            }\n+\n+            @Override\n+            protected Map<String, CourseAttributes> generateCourses() {\n+                Map<String, CourseAttributes> courses = new LinkedHashMap<>();\n+\n+                courses.put(\"course\", CourseAttributes.builder(COURSE_ID)\n+                        .withName(\"Feedback Load Testing\")\n+                        .withTimezone(ZoneId.of(\"UTC\"))\n+                        .build()\n+                );\n+\n+                return courses;\n+            }\n+\n+            @Override\n+            protected Map<String, InstructorAttributes> generateInstructors() {\n+                Map<String, InstructorAttributes> instructors = new LinkedHashMap<>();\n+\n+                instructors.put(\"teammates.test.instructor\",\n+                        InstructorAttributes.builder(COURSE_ID, INSTRUCTOR_EMAIL)\n+                                .withGoogleId(\"TestData.instructor\")\n+                                .withName(\"Teammates Test\")\n+                                .withRole(\"Co-owner\")\n+                                .withIsDisplayedToStudents(true)\n+                                .withDisplayedName(\"Co-owner\")\n+                                .withPrivileges(new InstructorPrivileges(\n+                                        Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER))\n+                                .build()\n+                );\n+\n+                return instructors;\n+            }\n+\n+            @Override\n+            protected Map<String, StudentAttributes> generateStudents() {\n+                Map<String, StudentAttributes> students = new LinkedHashMap<>();\n+                StudentAttributes studentAttribute;\n+\n+                for (int i = 0; i < NUMBER_OF_USER_ACCOUNTS; i++) {\n+                    studentAttribute = StudentAttributes.builder(COURSE_ID, STUDENT_EMAIL + i + \"@gmail.tmt\")\n+                                            .withGoogleId(STUDENT_NAME + i + \".tmms\")\n+                                            .withName(STUDENT_NAME + i)\n+                                            .withComment(\"This student's name is \" + STUDENT_NAME + i)\n+                                            .withSectionName(\"None\")\n+                                            .withTeamName(\"Team 1\")\n+                                            .build();\n+                    students.put(STUDENT_NAME + i, studentAttribute);\n+                }\n+\n+                return students;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions() {\n+                Map<String, FeedbackSessionAttributes> feedbackSessions = new LinkedHashMap<>();\n+\n+                FeedbackSessionAttributes session = FeedbackSessionAttributes\n+                                                            .builder(\"Test Feedback Session\", COURSE_ID)\n+                                                            .withCreatorEmail(INSTRUCTOR_EMAIL)\n+                                                            .withStartTime(Instant.now())\n+                                                            .withEndTime(Instant.now().plusSeconds(500))\n+                                                            .withSessionVisibleFromTime(Instant.now())\n+                                                            .withResultsVisibleFromTime(Instant.now())\n+                                                            .build();\n+\n+                feedbackSessions.put(\"Test Feedback Session\", session);\n+\n+                return feedbackSessions;\n+            }\n+\n+            @Override\n+            protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions() {\n+                ArrayList<FeedbackParticipantType> showResponses = new ArrayList<>();\n+                showResponses.add(FeedbackParticipantType.RECEIVER);\n+                showResponses.add(FeedbackParticipantType.INSTRUCTORS);\n+                ArrayList<FeedbackParticipantType> showGiverName = new ArrayList<>();\n+                showGiverName.add(FeedbackParticipantType.INSTRUCTORS);\n+                ArrayList<FeedbackParticipantType> showRecepientName = new ArrayList<>();\n+                showRecepientName.add(FeedbackParticipantType.INSTRUCTORS);\n+                Map<String, FeedbackQuestionAttributes> feedbackQuestions = new LinkedHashMap<>();\n+                FeedbackQuestionDetails details = new FeedbackTextQuestionDetails(\"Test Question\");\n+                feedbackQuestions.put(\"QuestionTest\",\n+                        FeedbackQuestionAttributes.builder()\n+                            .withFeedbackSessionName(\"Test Feedback Session\")\n+                            .withQuestionDescription(\"Test Question\")\n+                            .withCourseId(COURSE_ID)\n+                            .withQuestionDetails(details)\n+                            .withQuestionNumber(1)\n+                            .withGiverType(FeedbackParticipantType.SELF)\n+                            .withRecipientType(FeedbackParticipantType.NONE)\n+                            .withShowResponsesTo(showResponses)\n+                            .withShowGiverNameTo(showGiverName)\n+                            .withShowRecipientNameTo(showRecepientName)\n+                            .build()\n+                );\n+                return feedbackQuestions;\n+            }\n+\n+            @Override\n+            public List<String> generateCsvHeaders() {\n+                List<String> headers = new ArrayList<>();\n+\n+                headers.add(\"loginId\");\n+                headers.add(\"isAdmin\");\n+                headers.add(\"googleId\");\n+                headers.add(\"courseId\");\n+                headers.add(\"fsname\");\n+\n+                return headers;\n+            }\n+\n+            @Override\n+            public List<List<String>> generateCsvData() {\n+                DataBundle dataBundle = loadDataBundle(getJsonDataPath());\n+                List<List<String>> csvData = new ArrayList<>();\n+\n+                dataBundle.students.forEach((key, student) -> {\n+                    List<String> csvRow = new ArrayList<>();\n+\n+                    csvRow.add(student.googleId); // \"googleId\" is used for logging in, not \"email\"\n+                    csvRow.add(\"no\");\n+                    csvRow.add(student.googleId);\n+                    csvRow.add(COURSE_ID);\n+                    csvRow.add(\"Test Feedback Session\");\n+\n+                    csvData.add(csvRow);\n+                });\n+\n+                return csvData;\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected ListedHashTree getLnpTestPlan() {\n+        ListedHashTree testPlan = new ListedHashTree(JMeterElements.testPlan());\n+        HashTree threadGroup = testPlan.add(\n+                JMeterElements.threadGroup(NUMBER_OF_USER_ACCOUNTS, RAMP_UP_PERIOD, 1));\n+        threadGroup.add(JMeterElements.csvDataSet(getPathToTestDataFile(getCsvConfigPath())));\n+        threadGroup.add(JMeterElements.cookieManager());\n+        threadGroup.add(JMeterElements.defaultSampler());\n+        threadGroup.add(JMeterElements.onceOnlyController())\n+                .add(JMeterElements.loginSampler());\n+\n+        // Add HTTP samplers for test endpoint\n+        String firstPath = \"webapi/student?courseid=${courseId}\";", "originalCommit": "b01c9ae90972f8ca048f71407ff251fda060c159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNjI4OA==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379936288", "bodyText": "No particular reason at first, it was when I was trying stuff out. I changed the name to be more explanatory of what it does.", "author": "daekoon", "createdAt": "2020-02-16T21:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDUzMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934531", "bodyText": "This is more like a work-around before #9956", "author": "xpdavid", "createdAt": "2020-02-16T21:25:20Z", "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -258,6 +259,22 @@ public static CourseAttributes getCourse(String courseId) {\n         return CourseAttributes.builder(courseData.getCourseId()).build();\n     }\n \n+    /**\n+     * Gets the ID of an feedback question from the datastore.\n+     */\n+    public static String getFeedbackQuestionId(String courseId, String fsName, int questionNumber) {", "originalCommit": "b01c9ae90972f8ca048f71407ff251fda060c159", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU1Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934552", "bodyText": "As you make implicit assumption that an instructor is logged in.", "author": "xpdavid", "createdAt": "2020-02-16T21:25:41Z", "path": "src/e2e/java/teammates/e2e/util/BackDoor.java", "diffHunk": "@@ -258,6 +259,22 @@ public static CourseAttributes getCourse(String courseId) {\n         return CourseAttributes.builder(courseData.getCourseId()).build();\n     }\n \n+    /**\n+     * Gets the ID of an feedback question from the datastore.\n+     */\n+    public static String getFeedbackQuestionId(String courseId, String fsName, int questionNumber) {\n+        Map<String, String[]> params = new HashMap<>();\n+        params.put(Const.ParamsNames.COURSE_ID, new String[] { courseId });\n+        params.put(Const.ParamsNames.FEEDBACK_SESSION_NAME, new String[] {fsName});\n+        params.put(Const.ParamsNames.INTENT, new String[] {\"INSTRUCTOR_RESULT\"});\n+        ResponseBodyAndCode response = executeGetRequest(Const.ResourceURIs.QUESTIONS, params);", "originalCommit": "b01c9ae90972f8ca048f71407ff251fda060c159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNjYwMw==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379936603", "bodyText": "I chose the \"INSTRUCTOR_RESULT\" intent because it provides the feedback questions without checking for logged in instructors, as shown in the code here (GetFeedbackQuestionsAction.java, line 78).\n    case INSTRUCTOR_RESULT:\n        questions = logic.getFeedbackQuestionsForSession(feedbackSessionName, courseId);\n\nPlus the Backdoor api access gives us full privilege, which passes the privilege check. It minimized the amount of change I needed to make to make this temporary backdoor workaround work.", "author": "daekoon", "createdAt": "2020-02-16T21:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MDEyNA==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r381970124", "bodyText": "probably add some documentation explaining the situation, as it is not straight forward.", "author": "junming403", "createdAt": "2020-02-20T12:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzMDU3Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r383130573", "bodyText": "Added documentation to explain the situation in getFeedbackQuestionId method", "author": "daekoon", "createdAt": "2020-02-24T08:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU3OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379934579", "bodyText": "Irrelevant changes?", "author": "xpdavid", "createdAt": "2020-02-16T21:26:01Z", "path": "src/e2e/java/teammates/e2e/util/LNPTestData.java", "diffHunk": "@@ -67,8 +67,8 @@ public DataBundle generateJsonData() {\n         dataBundle.courses = generateCourses();\n         dataBundle.instructors = generateInstructors();\n         dataBundle.students = generateStudents();\n-        dataBundle.feedbackSessions = generateFeedbackSessions();\n         dataBundle.feedbackQuestions = generateFeedbackQuestions();\n+        dataBundle.feedbackSessions = generateFeedbackSessions();", "originalCommit": "b01c9ae90972f8ca048f71407ff251fda060c159", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNjcyMA==", "url": "https://github.com/TEAMMATES/teammates/pull/9958#discussion_r379936720", "bodyText": "Reverted back the change. Leftover from when I was trying out ways to obtain feedback question ID.", "author": "daekoon", "createdAt": "2020-02-16T21:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDU3OQ=="}], "type": "inlineReview"}, {"oid": "74646bc2a8be6b716dec37442215ba06e7bf0a8a", "url": "https://github.com/TEAMMATES/teammates/commit/74646bc2a8be6b716dec37442215ba06e7bf0a8a", "message": "Fix minor issues", "committedDate": "2020-02-16T21:49:32Z", "type": "commit"}, {"oid": "4353817ebdca34abac43ecfc3da756c1ff4b2b37", "url": "https://github.com/TEAMMATES/teammates/commit/4353817ebdca34abac43ecfc3da756c1ff4b2b37", "message": "Revert ordering of data bundle generation in lnp test", "committedDate": "2020-02-16T21:56:56Z", "type": "commit"}, {"oid": "bb6eae70f4e75999cb2cb4823f11f4f6f440248e", "url": "https://github.com/TEAMMATES/teammates/commit/bb6eae70f4e75999cb2cb4823f11f4f6f440248e", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission", "committedDate": "2020-02-19T07:51:29Z", "type": "commit"}, {"oid": "ff98f599692e635d1628307ba84019d084cda54b", "url": "https://github.com/TEAMMATES/teammates/commit/ff98f599692e635d1628307ba84019d084cda54b", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission", "committedDate": "2020-02-24T03:09:05Z", "type": "commit"}, {"oid": "a5a14f56a93ecd8520f81d38966f2a4d031bcd07", "url": "https://github.com/TEAMMATES/teammates/commit/a5a14f56a93ecd8520f81d38966f2a4d031bcd07", "message": "Add comments and documentation to explain new backdoor API", "committedDate": "2020-02-24T08:32:02Z", "type": "commit"}, {"oid": "3894089353247b3ebaf881d26970373675435984", "url": "https://github.com/TEAMMATES/teammates/commit/3894089353247b3ebaf881d26970373675435984", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission", "committedDate": "2020-03-16T15:33:49Z", "type": "commit"}, {"oid": "d52fe325ad567918e0758d200f62fd63eefd9d5d", "url": "https://github.com/TEAMMATES/teammates/commit/d52fe325ad567918e0758d200f62fd63eefd9d5d", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission", "committedDate": "2020-03-19T14:23:25Z", "type": "commit"}, {"oid": "dd79a7611b28f603efcde1a8a6ab308eb8da0fc3", "url": "https://github.com/TEAMMATES/teammates/commit/dd79a7611b28f603efcde1a8a6ab308eb8da0fc3", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission", "committedDate": "2020-04-01T07:53:56Z", "type": "commit"}, {"oid": "b19d626a30b0a34289a1d3ece8f9a9521e291e22", "url": "https://github.com/TEAMMATES/teammates/commit/b19d626a30b0a34289a1d3ece8f9a9521e291e22", "message": "Update LnP tests to work with new BaseLNPTestCase", "committedDate": "2020-04-02T21:37:21Z", "type": "commit"}, {"oid": "19e2249987733a8a8ba09f38ca1150ac49e52e6a", "url": "https://github.com/TEAMMATES/teammates/commit/19e2249987733a8a8ba09f38ca1150ac49e52e6a", "message": "Update FeedbackSessionView LnP test to handle multiple questions per feedbackSession", "committedDate": "2020-04-02T22:40:57Z", "type": "commit"}, {"oid": "3007ffc5ed59371d6fb07c19af10249c76953e36", "url": "https://github.com/TEAMMATES/teammates/commit/3007ffc5ed59371d6fb07c19af10249c76953e36", "message": "Update FeedbackSessionSubmit LnP to support multiple questions, and remove dependency on backdoor", "committedDate": "2020-04-02T22:41:33Z", "type": "commit"}, {"oid": "bd243ef9eeb5d2ba5617a946c0ea11a5a48a0664", "url": "https://github.com/TEAMMATES/teammates/commit/bd243ef9eeb5d2ba5617a946c0ea11a5a48a0664", "message": "Merge branch 'master' into 9646-add-load-testing-for-feedback-submission", "committedDate": "2020-04-02T22:43:23Z", "type": "commit"}]}