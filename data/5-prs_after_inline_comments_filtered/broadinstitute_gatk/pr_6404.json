{"pr_number": 6404, "pr_title": "fixed error in RealignmentEngine due to inclusive vs exclusive ends", "pr_createdAt": "2020-01-21T20:42:49Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6404", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMjg3Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369232872", "bodyText": "I think we need to go the other way don't we?  Increase the start and leave the end alone?", "author": "lbergelson", "createdAt": "2020-01-21T20:43:40Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "diffHunk": "@@ -132,8 +132,9 @@ private final static boolean mightSupportInsertion(final CigarElement cigarEleme\n         return new ArrayList<>(commonAlignments);\n     }\n \n+    // note the conversion from exclusive end (BWAMemAlignment) to inclusive end (SimpleInterval)\n     private static SimpleInterval convertToInterval(final BwaMemAlignment alignment) {\n-        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd());\n+        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd() - 1);", "originalCommit": "f1b4e607be3731ce33680ae009b3c6c6ba95759d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzNTYwNg==", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369235606", "bodyText": "Suppose the last included position is 5.\n\n\nAccount for exclusive --> inclusive stop.\nBWA mem alignment is exclusive, hence its end is 6.  SimpleInterval is inclusive, so its end should be 5, which is BWA's end - 1.\n\n\naccount for 0-based --> 1-based contig\nAdd 1 to everything, so that adding 1 to the end cancels subtracting 1, while the start is incremented by 1.\n\n\n@lbergelson You're right.  Thank you!", "author": "davidbenjamin", "createdAt": "2020-01-21T20:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMjg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0Mzk1NA==", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369243954", "bodyText": "Sounds good to me!", "author": "takutosato", "createdAt": "2020-01-21T21:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMjg3Mg=="}], "type": "inlineReview"}, {"oid": "5d33c3f8ebb062a52215207a505a042ad5845261", "url": "https://github.com/broadinstitute/gatk/commit/5d33c3f8ebb062a52215207a505a042ad5845261", "message": "fixed error in RealignmentEngine due to converting from exclusive to inclusive interval ends", "committedDate": "2020-01-21T20:49:15Z", "type": "commit"}, {"oid": "5d33c3f8ebb062a52215207a505a042ad5845261", "url": "https://github.com/broadinstitute/gatk/commit/5d33c3f8ebb062a52215207a505a042ad5845261", "message": "fixed error in RealignmentEngine due to converting from exclusive to inclusive interval ends", "committedDate": "2020-01-21T20:49:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3NTg4NA==", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369275884", "bodyText": "@davidbenjamin Are we sure that the contig is correct?  I think alignment.getRefId() is likely to be 0 indexed, which means that you'll start with contig 0 when you want contig 1.  And obviously it doesn't work for non-numbered contigs.  I think what you need to be doing here is looking it up from bwaMemIndex.getReferenceContigNames().", "author": "lbergelson", "createdAt": "2020-01-21T22:23:54Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "diffHunk": "@@ -132,8 +132,11 @@ private final static boolean mightSupportInsertion(final CigarElement cigarEleme\n         return new ArrayList<>(commonAlignments);\n     }\n \n+    // note the conversion from exclusive end (BWAMemAlignment) to inclusive end (SimpleInterval) (subtract 1 from the end)\n+    // combined with the conversion from 0-based to 1-based contigs (add 1 to start and end)\n+    // which has the net result of adding 1 to the start and leaving the end alone\n     private static SimpleInterval convertToInterval(final BwaMemAlignment alignment) {\n-        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd());\n+        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart() + 1, alignment.getRefEnd());", "originalCommit": "5d33c3f8ebb062a52215207a505a042ad5845261", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3NzE1Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369277152", "bodyText": "Oh.  I see, it's using the same method to generate the overlap detectors, so that's ok.", "author": "lbergelson", "createdAt": "2020-01-21T22:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3NTg4NA=="}], "type": "inlineReview"}]}