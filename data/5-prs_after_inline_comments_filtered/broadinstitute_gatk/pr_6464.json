{"pr_number": 6464, "pr_title": "remove duplicate copy of prefetching code", "pr_createdAt": "2020-02-21T19:49:56Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6464", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074603", "bodyText": "Where does the name is come from?  What about sbc, channel, or rawChannel?", "author": "davidbenjamin", "createdAt": "2020-03-01T03:57:29Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the\n+     * original channel.\n+     * @param cloudPrefetchBuffer the prefetcher buffer size in MB\n+     */\n+    public static Function<SeekableByteChannel, SeekableByteChannel> getPrefetchingWrapper(final int cloudPrefetchBuffer) {\n+        return cloudPrefetchBuffer > 0 ? is -> addPrefetcher(cloudPrefetchBuffer, is) : Utils.identityFunction();", "originalCommit": "f30f5b42bb908a24fbd54374de10e99340ce6ac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1Njc4Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386456782", "bodyText": "that's a good question.... I don't remember where is came from...", "author": "lbergelson", "createdAt": "2020-03-02T15:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjMyMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386472321", "bodyText": "It depends on what the meaning of \"is\" is.", "author": "davidbenjamin", "createdAt": "2020-03-02T15:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4OTQ4OA==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386589488", "bodyText": "rawChannel is a good option.", "author": "lbergelson", "createdAt": "2020-03-02T19:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYyMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074621", "bodyText": "\"it's\" with apostrophe", "author": "davidbenjamin", "createdAt": "2020-03-01T03:57:59Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the", "originalCommit": "f30f5b42bb908a24fbd54374de10e99340ce6ac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4OTU5MA==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386589590", "bodyText": "done", "author": "lbergelson", "createdAt": "2020-03-02T19:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY1Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074653", "bodyText": "final arguments", "author": "davidbenjamin", "createdAt": "2020-03-01T03:58:42Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {", "originalCommit": "f30f5b42bb908a24fbd54374de10e99340ce6ac2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY3Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074672", "bodyText": "I think you can splurge and make this BUFFER_SIZE_MB", "author": "davidbenjamin", "createdAt": "2020-03-01T03:59:14Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "diffHunk": "@@ -35,7 +35,7 @@\n     private final boolean removeHeader = true;\n \n     class ReadsIterator implements CloseableIterator<SAMRecord> {\n-        private final static int BUFSIZE = 200 * 1024 * 1024;\n+        private final static int BUFSIZE_MB = 200;", "originalCommit": "f30f5b42bb908a24fbd54374de10e99340ce6ac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDM3NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386590375", "bodyText": "done, although we should delete that class in a separate pr", "author": "lbergelson", "createdAt": "2020-03-02T19:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY4MA==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074680", "bodyText": "It can't hurt to make this channel.", "author": "davidbenjamin", "createdAt": "2020-03-01T03:59:43Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "diffHunk": "@@ -47,8 +47,7 @@ public ReadsIterator() throws IOException {\n             SeekableStream indexInMemory = new ByteArraySeekableStream(indexData);\n             // set high-level retries to deal with servers that might be temporarily overloaded\n             // while we're reading a very long file from them.\n-            SeekableByteChannelPrefetcher chan = new SeekableByteChannelPrefetcher(\n-                Files.newByteChannel(fpath), BUFSIZE);\n+            SeekableByteChannel chan = BucketUtils.addPrefetcher( BUFSIZE_MB, Files.newByteChannel(fpath));", "originalCommit": "f30f5b42bb908a24fbd54374de10e99340ce6ac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDU0Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386590546", "bodyText": "done", "author": "lbergelson", "createdAt": "2020-03-02T19:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY4MA=="}], "type": "inlineReview"}, {"oid": "4ba1102928bc10a0ff65f10d54a8688fdf81a66a", "url": "https://github.com/broadinstitute/gatk/commit/4ba1102928bc10a0ff65f10d54a8688fdf81a66a", "message": "removing our copy of the prefetcher and using the version in the NIO library directly", "committedDate": "2020-03-02T19:10:30Z", "type": "commit"}, {"oid": "c5ca063a36ce58408825e93fa6cae6eb9769a8a4", "url": "https://github.com/broadinstitute/gatk/commit/c5ca063a36ce58408825e93fa6cae6eb9769a8a4", "message": "Adding new methods to BucketUtils to make getting a prefetcher less verbose.", "committedDate": "2020-03-02T19:10:30Z", "type": "commit"}, {"oid": "ee9f0b4e40f5a5aaec30d1e7dcd3c5e70d6c0346", "url": "https://github.com/broadinstitute/gatk/commit/ee9f0b4e40f5a5aaec30d1e7dcd3c5e70d6c0346", "message": "respond to comments", "committedDate": "2020-03-02T19:10:30Z", "type": "commit"}, {"oid": "ee9f0b4e40f5a5aaec30d1e7dcd3c5e70d6c0346", "url": "https://github.com/broadinstitute/gatk/commit/ee9f0b4e40f5a5aaec30d1e7dcd3c5e70d6c0346", "message": "respond to comments", "committedDate": "2020-03-02T19:10:30Z", "type": "forcePushed"}]}