{"pr_number": 6406, "pr_title": "Test data to illustrate bug in GenotypeGVCFs.removeNonRefAlleles()", "pr_createdAt": "2020-01-22T05:29:28Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6406", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNDEzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369734135", "bodyText": "Should this comment instead say \"no site has output\"?", "author": "davidbenjamin", "createdAt": "2020-01-22T18:39:58Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsIntegrationTest.java", "diffHunk": "@@ -562,6 +562,43 @@ public void testForceOutput() {\n         Assert.assertTrue(actualVC2.get(1).isPolymorphicInSamples());\n     }\n \n+    @Test\n+    public void testForceOutputNonRef() {\n+        final File input = getTestFile(\"ForceOutputNonRef.g.vcf\");\n+        final File output1 = createTempFile(\"output\", \".vcf\");\n+\n+        final ArgumentsBuilder argsWithAllSites = new ArgumentsBuilder()\n+                .addReference(b37Reference)\n+                .addVCF(input)\n+                .addBooleanArgument(RMSMappingQuality.RMS_MAPPING_QUALITY_OLD_BEHAVIOR_OVERRIDE_ARGUMENT, true)\n+                .addOutput(output1);\n+\n+        Utils.resetRandomGenerator();\n+        runCommandLine(argsWithAllSites);\n+\n+        final List<VariantContext> actualVC = VariantContextTestUtils.getVariantContexts(output1);\n+\n+        // every site has output", "originalCommit": "b1115baedfe2bf5497b6fd314a7dadd0760f0dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NDcyMw==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369764723", "bodyText": "ok", "author": "bbimber", "createdAt": "2020-01-22T19:41:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNDEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNDg1Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369734853", "bodyText": "Add a comment that this checks that the non-ref is removed even for multiple alt alleles", "author": "davidbenjamin", "createdAt": "2020-01-22T18:41:22Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsIntegrationTest.java", "diffHunk": "@@ -562,6 +562,43 @@ public void testForceOutput() {\n         Assert.assertTrue(actualVC2.get(1).isPolymorphicInSamples());\n     }\n \n+    @Test", "originalCommit": "b1115baedfe2bf5497b6fd314a7dadd0760f0dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NDgwMA==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369764800", "bodyText": "ok", "author": "bbimber", "createdAt": "2020-01-22T19:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNDg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNTc5Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369735792", "bodyText": "Could you also force output at the site 1051053, where there is a * allele?", "author": "davidbenjamin", "createdAt": "2020-01-22T18:43:12Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsIntegrationTest.java", "diffHunk": "@@ -562,6 +562,43 @@ public void testForceOutput() {\n         Assert.assertTrue(actualVC2.get(1).isPolymorphicInSamples());\n     }\n \n+    @Test\n+    public void testForceOutputNonRef() {\n+        final File input = getTestFile(\"ForceOutputNonRef.g.vcf\");\n+        final File output1 = createTempFile(\"output\", \".vcf\");\n+\n+        final ArgumentsBuilder argsWithAllSites = new ArgumentsBuilder()\n+                .addReference(b37Reference)\n+                .addVCF(input)\n+                .addBooleanArgument(RMSMappingQuality.RMS_MAPPING_QUALITY_OLD_BEHAVIOR_OVERRIDE_ARGUMENT, true)\n+                .addOutput(output1);\n+\n+        Utils.resetRandomGenerator();\n+        runCommandLine(argsWithAllSites);\n+\n+        final List<VariantContext> actualVC = VariantContextTestUtils.getVariantContexts(output1);\n+\n+        // every site has output\n+        Assert.assertEquals(actualVC.size(), 0);\n+\n+        final File output2 = createTempFile(\"output\", \".vcf\");\n+\n+        final ArgumentsBuilder argsWithSpecificSites = new ArgumentsBuilder()\n+                .addReference(b37Reference)\n+                .addVCF(input)\n+                .addArgument(GenotypeGVCFs.FORCE_OUTPUT_INTERVALS_NAME, \"1:1048236-1048236\")", "originalCommit": "b1115baedfe2bf5497b6fd314a7dadd0760f0dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NDg0Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369764847", "bodyText": "ok", "author": "bbimber", "createdAt": "2020-01-22T19:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNTc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5OTYxNw==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369899617", "bodyText": "Make the Set<String> argument final", "author": "davidbenjamin", "createdAt": "2020-01-23T01:55:26Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsEngine.java", "diffHunk": "@@ -185,7 +185,7 @@ private VariantContext regenotypeVC(final VariantContext originalVC, final Refer\n      * @param vc   the variant context\n      * @return variant context with the NON-REF alleles removed if multiallelic or replaced with NO-CALL alleles if biallelic\n      */\n-    private VariantContext removeNonRefAlleles(final VariantContext vc) {\n+    protected static VariantContext removeNonRefAlleles(final VariantContext vc, Set<String> infoHeaderAltAllelesLineNames) {", "originalCommit": "5177e890cf1ec44ec935d4f8c7866636b327c5ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwMDExNA==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369900114", "bodyText": "And don't forget the @VisibleForTesting annotation.  In such cases, it's typical in the GATK to omit the protected modifier to denote package-level visibility for testing.", "author": "davidbenjamin", "createdAt": "2020-01-23T01:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5OTYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyNzEzOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369927139", "bodyText": "ok", "author": "bbimber", "createdAt": "2020-01-23T04:30:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5OTYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwMDY3MA==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369900670", "bodyText": "Instead of creating a file, just specify multiple interval literals\n. . .\n   .addArgument(GenotypeGVCFs.FORCE_OUTPUT_INTERVALS_NAME, \"1:1048236-1048236\")\n   .addArgument(GenotypeGVCFs.FORCE_OUTPUT_INTERVALS_NAME, \"1:1051053-1051053\")\n   .addArgument(GenotypeGVCFs.FORCE_OUTPUT_INTERVALS_NAME, \"1:2364622-2364622\")\n   . . .", "author": "davidbenjamin", "createdAt": "2020-01-23T02:00:07Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsIntegrationTest.java", "diffHunk": "@@ -562,6 +564,60 @@ public void testForceOutput() {\n         Assert.assertTrue(actualVC2.get(1).isPolymorphicInSamples());\n     }\n \n+    /**\n+     * This tests whether NON_REF alleles are properly removed, including multi-allelic sites\n+     */\n+    @Test\n+    public void testForceOutputNonRef() {\n+        final File input = getTestFile(\"ForceOutputNonRef.g.vcf\");\n+        final File output1 = createTempFile(\"output\", \".vcf\");\n+\n+        // build intervals\n+        final File output2 = createTempFile(\"output\", \".vcf\");\n+        final File intervalFile = createTempFile(\"testForceOutputNonRef\", \".intervals\");\n+        try (PrintWriter writer = new PrintWriter(IOUtil.openFileForWriting(intervalFile))) {", "originalCommit": "5177e890cf1ec44ec935d4f8c7866636b327c5ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyNzAwOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369927009", "bodyText": "ok", "author": "bbimber", "createdAt": "2020-01-23T04:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwMDY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwMTAyOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369901029", "bodyText": "argsWithAllSites is confusing because one would expect more output than for argsWithSpecificSites.  Therefore argsWith(out)ForceCalling would be clearer.", "author": "davidbenjamin", "createdAt": "2020-01-23T02:01:32Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsIntegrationTest.java", "diffHunk": "@@ -562,6 +564,60 @@ public void testForceOutput() {\n         Assert.assertTrue(actualVC2.get(1).isPolymorphicInSamples());\n     }\n \n+    /**\n+     * This tests whether NON_REF alleles are properly removed, including multi-allelic sites\n+     */\n+    @Test\n+    public void testForceOutputNonRef() {\n+        final File input = getTestFile(\"ForceOutputNonRef.g.vcf\");\n+        final File output1 = createTempFile(\"output\", \".vcf\");\n+\n+        // build intervals\n+        final File output2 = createTempFile(\"output\", \".vcf\");\n+        final File intervalFile = createTempFile(\"testForceOutputNonRef\", \".intervals\");\n+        try (PrintWriter writer = new PrintWriter(IOUtil.openFileForWriting(intervalFile))) {\n+            writer.println(\"1:1048236-1048236\");\n+            writer.println(\"1:1051053-1051053\");\n+            writer.println(\"1:2364622-2364622\");\n+        }\n+\n+        // No sites should be output\n+        final ArgumentsBuilder argsWithAllSites = new ArgumentsBuilder()", "originalCommit": "5177e890cf1ec44ec935d4f8c7866636b327c5ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyNjk4OA==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r369926988", "bodyText": "sure", "author": "bbimber", "createdAt": "2020-01-23T04:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwMTAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMTA0MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r374911041", "bodyText": "Instead of tracking this boolean, why not replace if(altAllelesChanged) with if(newAlleles.size() < vc.getNAlleles()?", "author": "davidbenjamin", "createdAt": "2020-02-04T20:41:53Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsEngine.java", "diffHunk": "@@ -183,21 +185,37 @@ private VariantContext regenotypeVC(final VariantContext originalVC, final Refer\n      * Remove NON-REF alleles from the variant context\n      *\n      * @param vc   the variant context\n+     * @param infoHeaderAltAllelesLineNames INFO Header names that require alt alleles, which will be removed if the ALT alleles change.\n+     * @param removeUnusedAlternates If true, unused alternate alleles will also be trimmed.\n      * @return variant context with the NON-REF alleles removed if multiallelic or replaced with NO-CALL alleles if biallelic\n      */\n-    private VariantContext removeNonRefAlleles(final VariantContext vc) {\n+    @VisibleForTesting\n+    static VariantContext removeNonRefAlleles(final VariantContext vc, final Set<String> infoHeaderAltAllelesLineNames, final boolean removeUnusedAlternates) {\n \n         // If NON_REF is the only alt allele, ignore this site\n         final List<Allele> newAlleles = new ArrayList<>();\n         // Only keep alleles that are not NON-REF\n+        boolean altAllelesChanged = false;", "originalCommit": "935f2bca60245b7a1d72f0090d9df74dac0a9236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3ODQ0Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r374978442", "bodyText": "yes, good point", "author": "bbimber", "createdAt": "2020-02-04T23:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxMTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNTE1Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r374915157", "bodyText": "Can we simplify the bulk of this method to just\nfinal Set<Allele> allelesToKeep = removeUnusedAlternates ? vc.getGenotypes().stream().flatMap(g->g.getAlleles().stream()).collect(Collectors.toSet()) : vc.getAlleles();\nallelesToKeep.remove(Allele.NON_REF_ALLELE);\nfinal List<Allele> newAlleles = vc.getAlleles().stream().filter(allelesToKeep::contains).collect(Collectors.toList());", "author": "davidbenjamin", "createdAt": "2020-02-04T20:50:48Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsEngine.java", "diffHunk": "@@ -183,21 +185,37 @@ private VariantContext regenotypeVC(final VariantContext originalVC, final Refer\n      * Remove NON-REF alleles from the variant context\n      *\n      * @param vc   the variant context\n+     * @param infoHeaderAltAllelesLineNames INFO Header names that require alt alleles, which will be removed if the ALT alleles change.\n+     * @param removeUnusedAlternates If true, unused alternate alleles will also be trimmed.\n      * @return variant context with the NON-REF alleles removed if multiallelic or replaced with NO-CALL alleles if biallelic\n      */\n-    private VariantContext removeNonRefAlleles(final VariantContext vc) {\n+    @VisibleForTesting\n+    static VariantContext removeNonRefAlleles(final VariantContext vc, final Set<String> infoHeaderAltAllelesLineNames, final boolean removeUnusedAlternates) {\n \n         // If NON_REF is the only alt allele, ignore this site\n         final List<Allele> newAlleles = new ArrayList<>();\n         // Only keep alleles that are not NON-REF\n+        boolean altAllelesChanged = false;\n         for ( final Allele allele : vc.getAlleles() ) {\n             if ( !allele.equals(Allele.NON_REF_ALLELE) ) {\n                 newAlleles.add(allele);\n             }\n+            else {\n+                altAllelesChanged = true;\n+            }\n+        }", "originalCommit": "935f2bca60245b7a1d72f0090d9df74dac0a9236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NDQ4MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r374984481", "bodyText": "I modified this slightly, but yes something like this is simpler than what's there.  The main difference is to ensure REF is retained", "author": "bbimber", "createdAt": "2020-02-04T23:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNTE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNTg3NA==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r374915874", "bodyText": "Looks like there's one last place to rename argsWithAllSites", "author": "davidbenjamin", "createdAt": "2020-02-04T20:52:19Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFsIntegrationTest.java", "diffHunk": "@@ -562,6 +562,70 @@ public void testForceOutput() {\n         Assert.assertTrue(actualVC2.get(1).isPolymorphicInSamples());\n     }\n \n+    /**\n+     * This tests whether NON_REF alleles are properly removed, including multi-allelic sites\n+     */\n+    @Test\n+    public void testForceOutputNonRef() {\n+        final File input = new File(getToolTestDataDir() + \"../CombineGVCFs/NA12878.AS.chr20snippet.g.vcf\");\n+\n+        // No sites should be output\n+        final File output1 = createTempFile(\"output\", \".vcf\");\n+        final ArgumentsBuilder argsWithAllSites = new ArgumentsBuilder()", "originalCommit": "935f2bca60245b7a1d72f0090d9df74dac0a9236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MDAxNw==", "url": "https://github.com/broadinstitute/gatk/pull/6406#discussion_r374980017", "bodyText": "ok", "author": "bbimber", "createdAt": "2020-02-04T23:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNTg3NA=="}], "type": "inlineReview"}, {"oid": "408cc6c674ba563f450e005fd2a4cbd46f47f572", "url": "https://github.com/broadinstitute/gatk/commit/408cc6c674ba563f450e005fd2a4cbd46f47f572", "message": "Test data to illustrate bug in GenotypeGVCFs.removeNonRefAlleles()", "committedDate": "2020-02-05T06:44:40Z", "type": "commit"}, {"oid": "e8d3dd385c5c76c7ca4c2d1fd84e1b937fc7e841", "url": "https://github.com/broadinstitute/gatk/commit/e8d3dd385c5c76c7ca4c2d1fd84e1b937fc7e841", "message": "Test updates following code review", "committedDate": "2020-02-05T06:44:40Z", "type": "commit"}, {"oid": "f43110ef3c17035e27649ffa4838f8ce7e12c340", "url": "https://github.com/broadinstitute/gatk/commit/f43110ef3c17035e27649ffa4838f8ce7e12c340", "message": "Dont create vcf index", "committedDate": "2020-02-05T06:44:40Z", "type": "commit"}, {"oid": "e3f3d9533005e4bba03b5cc00bfbd26ca5e84a0a", "url": "https://github.com/broadinstitute/gatk/commit/e3f3d9533005e4bba03b5cc00bfbd26ca5e84a0a", "message": "Modify gVCF to add site with multiple ALT alleles", "committedDate": "2020-02-05T06:44:41Z", "type": "commit"}, {"oid": "7e53d4da72819230617d9041ebf5ef7d2a0db6c1", "url": "https://github.com/broadinstitute/gatk/commit/7e53d4da72819230617d9041ebf5ef7d2a0db6c1", "message": "Changes after code review", "committedDate": "2020-02-05T06:44:41Z", "type": "commit"}, {"oid": "5d7efd271ae7ca20c1162c19e7d68f779d4c2f3f", "url": "https://github.com/broadinstitute/gatk/commit/5d7efd271ae7ca20c1162c19e7d68f779d4c2f3f", "message": "- Switch test data to use pre-existing gVCF\n- Tests now produce some genotype calls\n- Prune unused alternates from sites with no variation that are forced output from GenotypeGVCFs", "committedDate": "2020-02-05T06:44:41Z", "type": "commit"}, {"oid": "52f1ea32a47567649b6300019dab30b095c5b16f", "url": "https://github.com/broadinstitute/gatk/commit/52f1ea32a47567649b6300019dab30b095c5b16f", "message": "Respond to code review", "committedDate": "2020-02-05T06:44:41Z", "type": "commit"}, {"oid": "84b23a31b6229834d156fbd2f2f8a55f67a87932", "url": "https://github.com/broadinstitute/gatk/commit/84b23a31b6229834d156fbd2f2f8a55f67a87932", "message": "- Prune alternates in callRegion()\n- Update test data accordingly", "committedDate": "2020-02-05T06:46:02Z", "type": "commit"}, {"oid": "84b23a31b6229834d156fbd2f2f8a55f67a87932", "url": "https://github.com/broadinstitute/gatk/commit/84b23a31b6229834d156fbd2f2f8a55f67a87932", "message": "- Prune alternates in callRegion()\n- Update test data accordingly", "committedDate": "2020-02-05T06:46:02Z", "type": "forcePushed"}, {"oid": "6ba0d638ab24c9579bd31ecbb72bd63c451feead", "url": "https://github.com/broadinstitute/gatk/commit/6ba0d638ab24c9579bd31ecbb72bd63c451feead", "message": "Update test data after rebase", "committedDate": "2020-02-05T06:54:53Z", "type": "commit"}]}