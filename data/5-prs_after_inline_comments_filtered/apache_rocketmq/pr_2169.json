{"pr_number": 2169, "pr_title": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "pr_createdAt": "2020-07-16T14:58:53Z", "pr_url": "https://github.com/apache/rocketmq/pull/2169", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxNzk5MA==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456217990", "bodyText": "Enum or constant would be better\uff0cmagic numbers not a good choice.", "author": "duhenglucky", "createdAt": "2020-07-17T04:55:38Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AllocateMessageQueueProcessor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.broker.processor;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.List;\n+import org.apache.rocketmq.broker.BrokerController;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.common.protocol.RequestCode;\n+import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.common.protocol.body.AllocateMessageQueueRequestBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseHeader;\n+import org.apache.rocketmq.common.rebalance.AllocateMachineRoomNearby;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragely;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragelyByCircle;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByConfig;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByMachineRoom;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueConsistentHash;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n+import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+\n+public class AllocateMessageQueueProcessor implements NettyRequestProcessor {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n+\n+    private final BrokerController brokerController;\n+\n+    public AllocateMessageQueueProcessor(final BrokerController brokerController) {\n+        this.brokerController = brokerController;\n+    }\n+\n+    @Override\n+    public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        switch (request.getCode()) {\n+            case RequestCode.ALLOCATE_MESSAGE_QUEUE:\n+                return this.allocateMessageQueue(ctx, request);\n+            default:\n+                break;\n+        }\n+        return null;\n+    }\n+\n+    private RemotingCommand allocateMessageQueue(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        final RemotingCommand response =\n+            RemotingCommand.createResponseCommand(AllocateMessageQueueResponseHeader.class);\n+        final AllocateMessageQueueRequestHeader requestHeader =\n+            (AllocateMessageQueueRequestHeader) request.decodeCommandCustomHeader(AllocateMessageQueueRequestHeader.class);\n+        final AllocateMessageQueueRequestBody requestBody = AllocateMessageQueueRequestBody.decode(request.getBody(),\n+            AllocateMessageQueueRequestBody.class);\n+\n+        AllocateMessageQueueStrategy strategy = null;\n+        String strategyName = requestHeader.getStrategyName();\n+        if (strategyName.startsWith(\"MACHINE_ROOM_NEARBY\")) {\n+            strategy = new AllocateMachineRoomNearby(new AllocateMessageQueueAveragely(),\n+                new AllocateMachineRoomNearby.MachineRoomResolver() {\n+                    @Override\n+                    public String brokerDeployIn(MessageQueue messageQueue) {\n+                        return messageQueue.getBrokerName().split(\"-\")[0];\n+                    }\n+\n+                    @Override\n+                    public String consumerDeployIn(String clientID) {\n+                        return clientID.split(\"-\")[0];\n+                    }\n+                });\n+        } else {\n+            switch (strategyName) {\n+                case \"AVG\":", "originalCommit": "3059642788f063fd41a5ee445483ee668b2b63b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0NzEzOA==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r459447138", "bodyText": "Updated. The strings have been changed to constants.", "author": "jack870131", "createdAt": "2020-07-23T13:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxNzk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxODc3MA==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456218770", "bodyText": "Recommend to add strategy consistency check logic", "author": "duhenglucky", "createdAt": "2020-07-17T04:59:09Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AllocateMessageQueueProcessor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.broker.processor;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.List;\n+import org.apache.rocketmq.broker.BrokerController;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.common.protocol.RequestCode;\n+import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.common.protocol.body.AllocateMessageQueueRequestBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseHeader;\n+import org.apache.rocketmq.common.rebalance.AllocateMachineRoomNearby;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragely;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragelyByCircle;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByConfig;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByMachineRoom;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueConsistentHash;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n+import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+\n+public class AllocateMessageQueueProcessor implements NettyRequestProcessor {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n+\n+    private final BrokerController brokerController;\n+\n+    public AllocateMessageQueueProcessor(final BrokerController brokerController) {\n+        this.brokerController = brokerController;\n+    }\n+\n+    @Override\n+    public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        switch (request.getCode()) {\n+            case RequestCode.ALLOCATE_MESSAGE_QUEUE:\n+                return this.allocateMessageQueue(ctx, request);\n+            default:\n+                break;\n+        }\n+        return null;\n+    }\n+\n+    private RemotingCommand allocateMessageQueue(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        final RemotingCommand response =\n+            RemotingCommand.createResponseCommand(AllocateMessageQueueResponseHeader.class);\n+        final AllocateMessageQueueRequestHeader requestHeader =\n+            (AllocateMessageQueueRequestHeader) request.decodeCommandCustomHeader(AllocateMessageQueueRequestHeader.class);\n+        final AllocateMessageQueueRequestBody requestBody = AllocateMessageQueueRequestBody.decode(request.getBody(),\n+            AllocateMessageQueueRequestBody.class);\n+\n+        AllocateMessageQueueStrategy strategy = null;\n+        String strategyName = requestHeader.getStrategyName();", "originalCommit": "3059642788f063fd41a5ee445483ee668b2b63b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0NTAwNQ==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r459445005", "bodyText": "Updated. I had added the try/catch statement for the strategy.allocate() method, which could enhance the consistency here.", "author": "jack870131", "createdAt": "2020-07-23T13:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxODc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4OTAyNA==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456289024", "bodyText": "IMO, It would be better that the client only needs to bring the current cid to get the result.\nBoth mqAll and cidAll are obtained on the broker side.", "author": "RongtongJin", "createdAt": "2020-07-17T08:11:40Z", "path": "client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java", "diffHunk": "@@ -278,11 +278,20 @@ private void rebalanceByTopic(final String topic, final boolean isOrder) {\n \n                     List<MessageQueue> allocateResult = null;\n                     try {\n-                        allocateResult = strategy.allocate(\n-                            this.consumerGroup,\n-                            this.mQClientFactory.getClientId(),\n-                            mqAll,\n-                            cidAll);\n+                        if (!isRebalanceByBroker()) {\n+                            allocateResult = strategy.allocate(\n+                                this.consumerGroup,\n+                                this.mQClientFactory.getClientId(),\n+                                mqAll,\n+                                cidAll);", "originalCommit": "3059642788f063fd41a5ee445483ee668b2b63b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0MzI5OQ==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r459443299", "bodyText": "Updated. According to our previous discussion, the performance of obtaining mqAll from broker side still need further discussions.", "author": "jack870131", "createdAt": "2020-07-23T13:20:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4OTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDY2Mg==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456294662", "bodyText": "It would be better to use placeholders, such as log.warn(\"getAllocationResultByStrategy exception, {} {}\", brokerAddr, group, e);", "author": "RongtongJin", "createdAt": "2020-07-17T08:22:30Z", "path": "client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java", "diffHunk": "@@ -1161,6 +1161,26 @@ public void resetOffset(String topic, String group, Map<MessageQueue, Long> offs\n         }\n     }\n \n+    public List<MessageQueue> getAllocationResult(final String topic, final String group, final String strategyName,\n+        final List<MessageQueue> mqAll, final List<String> cidAll) {\n+        String brokerAddr = this.findBrokerAddrByTopic(topic);\n+        if (null == brokerAddr) {\n+            this.updateTopicRouteInfoFromNameServer(topic);\n+            brokerAddr = this.findBrokerAddrByTopic(topic);\n+        }\n+\n+        if (null != brokerAddr) {\n+            try {\n+                return this.mQClientAPIImpl.getAllocationResultByStrategy(brokerAddr, group, clientId, strategyName,\n+                    mqAll, cidAll, 3000);\n+            } catch (Exception e) {\n+                log.warn(\"getAllocationResultByStrategy exception, \" + brokerAddr, \" \" + group, e);", "originalCommit": "3059642788f063fd41a5ee445483ee668b2b63b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0MTI1OA==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r459441258", "bodyText": "Updated.", "author": "jack870131", "createdAt": "2020-07-23T13:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3ODY0NA==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456178644", "bodyText": "Would it be better if we cache the commonly used Strategy Object on the broker side? I think it's better than creating it for every request.", "author": "xiangwangcheng", "createdAt": "2020-07-17T02:09:39Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AllocateMessageQueueProcessor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.broker.processor;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.List;\n+import org.apache.rocketmq.broker.BrokerController;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.common.protocol.RequestCode;\n+import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.common.protocol.body.AllocateMessageQueueRequestBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseHeader;\n+import org.apache.rocketmq.common.rebalance.AllocateMachineRoomNearby;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragely;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragelyByCircle;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByConfig;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByMachineRoom;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueConsistentHash;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n+import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+\n+public class AllocateMessageQueueProcessor implements NettyRequestProcessor {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n+\n+    private final BrokerController brokerController;\n+\n+    public AllocateMessageQueueProcessor(final BrokerController brokerController) {\n+        this.brokerController = brokerController;\n+    }\n+\n+    @Override\n+    public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        switch (request.getCode()) {\n+            case RequestCode.ALLOCATE_MESSAGE_QUEUE:\n+                return this.allocateMessageQueue(ctx, request);\n+            default:\n+                break;\n+        }\n+        return null;\n+    }\n+\n+    private RemotingCommand allocateMessageQueue(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        final RemotingCommand response =\n+            RemotingCommand.createResponseCommand(AllocateMessageQueueResponseHeader.class);\n+        final AllocateMessageQueueRequestHeader requestHeader =\n+            (AllocateMessageQueueRequestHeader) request.decodeCommandCustomHeader(AllocateMessageQueueRequestHeader.class);\n+        final AllocateMessageQueueRequestBody requestBody = AllocateMessageQueueRequestBody.decode(request.getBody(),\n+            AllocateMessageQueueRequestBody.class);\n+\n+        AllocateMessageQueueStrategy strategy = null;\n+        String strategyName = requestHeader.getStrategyName();\n+        if (strategyName.startsWith(\"MACHINE_ROOM_NEARBY\")) {\n+            strategy = new AllocateMachineRoomNearby(new AllocateMessageQueueAveragely(),", "originalCommit": "3059642788f063fd41a5ee445483ee668b2b63b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0MTA0OA==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r459441048", "bodyText": "Hi, good point. I had created a ConcurrentHashMap to cache Strategy Object.", "author": "jack870131", "createdAt": "2020-07-23T13:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3ODY0NA=="}], "type": "inlineReview"}, {"oid": "91f6d54139e2efc90dded338adc62d3ee921be29", "url": "https://github.com/apache/rocketmq/commit/91f6d54139e2efc90dded338adc62d3ee921be29", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-07-18T15:38:53Z", "type": "forcePushed"}, {"oid": "e7d2a99a5c341637bb524fa12279dc47abb832ec", "url": "https://github.com/apache/rocketmq/commit/e7d2a99a5c341637bb524fa12279dc47abb832ec", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-07-18T15:57:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNTMwMw==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r458535303", "bodyText": "IMO, we don\u2019t need to open a thread pool separately, could we reuse consumerManageExecutor?", "author": "RongtongJin", "createdAt": "2020-07-22T05:01:35Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java", "diffHunk": "@@ -329,6 +331,10 @@ public boolean initialize() throws CloneNotSupportedException {\n                 Executors.newFixedThreadPool(this.brokerConfig.getConsumerManageThreadPoolNums(), new ThreadFactoryImpl(\n                     \"ConsumerManageThread_\"));\n \n+            this.allocateMessageQueueExecutor =\n+                Executors.newFixedThreadPool(this.brokerConfig.getConsumerManageThreadPoolNums(), new ThreadFactoryImpl(\n+                    \"AllocateMessageQueueThread_\"));", "originalCommit": "e7d2a99a5c341637bb524fa12279dc47abb832ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0ODc5Nw==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r459448797", "bodyText": "Updated. The processor thread had been deleted and the code had migrated to ConsumerManageProcessor.", "author": "jack870131", "createdAt": "2020-07-23T13:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNTMwMw=="}], "type": "inlineReview"}, {"oid": "893a0124e78ac6543347ce4c6c0a4b1f0a7a3456", "url": "https://github.com/apache/rocketmq/commit/893a0124e78ac6543347ce4c6c0a4b1f0a7a3456", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-07-23T13:07:08Z", "type": "forcePushed"}, {"oid": "9c4ddc2b8e6bedbe63ea09e82df0dc8004ab27cf", "url": "https://github.com/apache/rocketmq/commit/9c4ddc2b8e6bedbe63ea09e82df0dc8004ab27cf", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-07-23T13:33:20Z", "type": "forcePushed"}, {"oid": "f2e6961c148fcdd1626516e281ee4bc7b0186940", "url": "https://github.com/apache/rocketmq/commit/f2e6961c148fcdd1626516e281ee4bc7b0186940", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-09T15:35:15Z", "type": "forcePushed"}, {"oid": "be0065847f0d4f7de992c41828f0d03750d261a1", "url": "https://github.com/apache/rocketmq/commit/be0065847f0d4f7de992c41828f0d03750d261a1", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-10T05:42:53Z", "type": "forcePushed"}, {"oid": "763fcbebb49a24b249c16700ae276a8a48900d5d", "url": "https://github.com/apache/rocketmq/commit/763fcbebb49a24b249c16700ae276a8a48900d5d", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-10T06:05:34Z", "type": "forcePushed"}, {"oid": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17", "url": "https://github.com/apache/rocketmq/commit/96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-10T10:58:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MDQwMw==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r468360403", "bodyText": "Throwing NPE is very strange, because even if you don\u2019t write related code, it will still throw NPE.", "author": "RongtongJin", "createdAt": "2020-08-11T06:44:43Z", "path": "common/src/main/java/org/apache/rocketmq/common/rebalance/AllocateMessageQueueSticky.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.rebalance;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+\n+public class AllocateMessageQueueSticky implements AllocateMessageQueueStrategy {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n+\n+    private final Map<String, List<MessageQueue>> messageQueueAllocation;\n+\n+    private final List<MessageQueue> unassignedQueues = new ArrayList<MessageQueue>();\n+\n+    public AllocateMessageQueueSticky(Map<String, List<MessageQueue>> messageQueueAllocation)\n+        throws NullPointerException {\n+        if (messageQueueAllocation == null) {\n+            throw new NullPointerException(\"currentMessageQueueAllocation is null\");\n+        }", "originalCommit": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3MDkzMQ==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r470070931", "bodyText": "Updated. Thx for pointing out.", "author": "jack870131", "createdAt": "2020-08-13T16:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MDQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NTExNQ==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r468365115", "bodyText": "There may be a thread-safe issue, because multiple threads may call allocateMessageQueue at the same time", "author": "RongtongJin", "createdAt": "2020-08-11T06:56:05Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java", "diffHunk": "@@ -152,4 +168,75 @@ private RemotingCommand queryConsumerOffset(ChannelHandlerContext ctx, RemotingC\n \n         return response;\n     }\n+\n+    private RemotingCommand allocateMessageQueue(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        final RemotingCommand response =\n+            RemotingCommand.createResponseCommand(AllocateMessageQueueResponseHeader.class);\n+        final AllocateMessageQueueRequestHeader requestHeader =\n+            (AllocateMessageQueueRequestHeader) request.decodeCommandCustomHeader(AllocateMessageQueueRequestHeader.class);\n+        final AllocateMessageQueueRequestBody requestBody = AllocateMessageQueueRequestBody.decode(request.getBody(),\n+            AllocateMessageQueueRequestBody.class);\n+\n+        AllocateMessageQueueStrategy strategy = null;\n+        String consumerGroup = requestHeader.getConsumerGroup();\n+        String strategyName = requestHeader.getStrategyName();\n+\n+        if (this.brokerController.getAllocateMessageQueueStrategyTable().containsKey(consumerGroup)) {\n+            strategy = this.brokerController.getAllocateMessageQueueStrategyTable().get(consumerGroup);\n+        } else {\n+            if (strategyName.startsWith(AllocateMessageQueueStrategyConstants.ALLOCATE_MACHINE_ROOM_NEARBY)) {\n+                response.setCode(ResponseCode.ALLOCATE_MESSAGE_QUEUE_STRATEGY_NOT_SUPPORTED);\n+                response.setRemark(\"The broker does not support message queue strategy \" + strategyName);\n+                return response;\n+            } else {\n+                switch (strategyName) {\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_AVERAGELY:\n+                        strategy = new AllocateMessageQueueAveragely();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_AVERAGELY_BY_CIRCLE:\n+                        strategy = new AllocateMessageQueueAveragelyByCircle();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_BY_CONFIG:\n+                        strategy = new AllocateMessageQueueByConfig();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_BY_MACHINE_ROOM:\n+                        strategy = new AllocateMessageQueueByMachineRoom();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_CONSISTENT_HASH:\n+                        strategy = new AllocateMessageQueueConsistentHash();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_STICKY:\n+                        strategy = new AllocateMessageQueueSticky(new HashMap<String, List<MessageQueue>>());\n+                    default:\n+                        break;\n+                }\n+            }\n+            this.brokerController.getAllocateMessageQueueStrategyTable().put(consumerGroup, strategy);\n+        }", "originalCommit": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NDY4NA==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r470074684", "bodyText": "Updated. A synchronized keyword had been applied to avoid race conditions.", "author": "jack870131", "createdAt": "2020-08-13T16:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NTExNQ=="}], "type": "inlineReview"}, {"oid": "e9ef67ad7a22909d9dce84fddde11fb541985f63", "url": "https://github.com/apache/rocketmq/commit/e9ef67ad7a22909d9dce84fddde11fb541985f63", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-11T14:26:50Z", "type": "forcePushed"}, {"oid": "697c3b73b6b4f34ca8421c41ef39934e9e52e499", "url": "https://github.com/apache/rocketmq/commit/697c3b73b6b4f34ca8421c41ef39934e9e52e499", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-13T15:54:57Z", "type": "forcePushed"}, {"oid": "27c7ced6c7fc96691a0189e838c0e337c23130e8", "url": "https://github.com/apache/rocketmq/commit/27c7ced6c7fc96691a0189e838c0e337c23130e8", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-13T16:23:34Z", "type": "forcePushed"}, {"oid": "0a73b304b25d7fc67cdbddd48f7624c825de774a", "url": "https://github.com/apache/rocketmq/commit/0a73b304b25d7fc67cdbddd48f7624c825de774a", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-14T05:01:15Z", "type": "forcePushed"}, {"oid": "3549cac6f4b00ca6d4ae3f23e7609011ae582cd9", "url": "https://github.com/apache/rocketmq/commit/3549cac6f4b00ca6d4ae3f23e7609011ae582cd9", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-14T06:49:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMjM4OQ==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r470512389", "bodyText": "Why not just new a hashmap in the constructor instead of passing one \uff1f", "author": "RongtongJin", "createdAt": "2020-08-14T09:22:24Z", "path": "common/src/main/java/org/apache/rocketmq/common/rebalance/AllocateMessageQueueSticky.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.rebalance;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+\n+public class AllocateMessageQueueSticky implements AllocateMessageQueueStrategy {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n+\n+    private final Map<String, List<MessageQueue>> messageQueueAllocation;\n+\n+    private final List<MessageQueue> unassignedQueues = new ArrayList<MessageQueue>();\n+\n+    public AllocateMessageQueueSticky(Map<String, List<MessageQueue>> messageQueueAllocation) {\n+        this.messageQueueAllocation = messageQueueAllocation;\n+    }", "originalCommit": "3549cac6f4b00ca6d4ae3f23e7609011ae582cd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxOTI4Ng==", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r471219286", "bodyText": "IMO, It's would be better not to upload LitePullConsumerRebalanceByBrokerReliabilityTest.java and PushConsumerRebalanceByBrokerReliabilityTest.java, because they are not examples and will mislead users.\n\nYou're right. Those two tests had been taken off from the commit.\n\nWhy not just new a hashmap in the constructor instead of passing one \uff1f\n\nFixed. It's just a careless mistake. Thx for pointing out.", "author": "jack870131", "createdAt": "2020-08-17T03:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMjM4OQ=="}], "type": "inlineReview"}, {"oid": "e7aba517519794a628be47ddbc94dbb3b775dad2", "url": "https://github.com/apache/rocketmq/commit/e7aba517519794a628be47ddbc94dbb3b775dad2", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-17T03:51:25Z", "type": "forcePushed"}, {"oid": "3d0fe22b44afb13adaa10cecdd9b61ce627aaf8f", "url": "https://github.com/apache/rocketmq/commit/3d0fe22b44afb13adaa10cecdd9b61ce627aaf8f", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-17T03:53:31Z", "type": "forcePushed"}, {"oid": "91fa427345462eac7fb0c727d32d95e6ff0950cd", "url": "https://github.com/apache/rocketmq/commit/91fa427345462eac7fb0c727d32d95e6ff0950cd", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-17T03:57:15Z", "type": "forcePushed"}, {"oid": "32cdff5def66a76d806dd881edc435b39e7cf91b", "url": "https://github.com/apache/rocketmq/commit/32cdff5def66a76d806dd881edc435b39e7cf91b", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-20T15:00:45Z", "type": "forcePushed"}, {"oid": "62dddc215db0508468060211311ad3f6de654c6f", "url": "https://github.com/apache/rocketmq/commit/62dddc215db0508468060211311ad3f6de654c6f", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-21T16:37:19Z", "type": "forcePushed"}, {"oid": "87bae705b3502b155bae6f76add21e14a1991f5e", "url": "https://github.com/apache/rocketmq/commit/87bae705b3502b155bae6f76add21e14a1991f5e", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-22T16:49:19Z", "type": "commit"}, {"oid": "87bae705b3502b155bae6f76add21e14a1991f5e", "url": "https://github.com/apache/rocketmq/commit/87bae705b3502b155bae6f76add21e14a1991f5e", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "committedDate": "2020-08-22T16:49:19Z", "type": "forcePushed"}]}