{"pr_number": 1985, "pr_title": "[ISSUE #1976]System topic should add permission checking globally", "pr_createdAt": "2020-05-12T08:21:41Z", "pr_url": "https://github.com/apache/rocketmq/pull/1985", "timeline": [{"oid": "d48ff116a4a12e2fb87a8b37c7675065ed04a715", "url": "https://github.com/apache/rocketmq/commit/d48ff116a4a12e2fb87a8b37c7675065ed04a715", "message": "fix #1976\nSystem Topic like SCHEDULE_TOPIC_XXXX should not be create or delete by user", "committedDate": "2020-05-12T08:18:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0Nzc2Mw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r424547763", "bodyText": "You can combine two code into one and use placeholder like log.warn(\"xxxxxxx { } xxxx\", topic)", "author": "RongtongJin", "createdAt": "2020-05-13T15:53:25Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "diffHunk": "@@ -285,7 +273,19 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext\n \n         this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-        return null;\n+        response.setCode(ResponseCode.SUCCESS);\n+        return response;\n+    }\n+\n+    private boolean isSystemTopic(RemotingCommand response, String topic) {\n+        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n+            String errorMsg = \"the topic[\" + topic + \"] is conflict with system reserved words.\";\n+            log.warn(errorMsg);", "originalCommit": "d48ff116a4a12e2fb87a8b37c7675065ed04a715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0MzEyNw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r424843127", "bodyText": "errorMsg used in log and response's remark, so it is better to use a local var to store it", "author": "coder-zzzz", "createdAt": "2020-05-14T02:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0Nzc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NDM3Mw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r425084373", "bodyText": "errorMsg used in log and response's remark, so it is better to use a local var to store it\n\nYou are right", "author": "RongtongJin", "createdAt": "2020-05-14T12:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0Nzc2Mw=="}], "type": "inlineReview"}, {"oid": "8c9b7fb8a8fda42e7692e3565bf2af7b885d0c3d", "url": "https://github.com/apache/rocketmq/commit/8c9b7fb8a8fda42e7692e3565bf2af7b885d0c3d", "message": "User can not send message to system topic SCHEDULE_TOPIC_XXXX", "committedDate": "2020-05-15T07:32:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3Njk0MA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r429876940", "bodyText": "the -> The", "author": "duhenglucky", "createdAt": "2020-05-25T11:09:11Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "diffHunk": "@@ -252,29 +253,16 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext\n             (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n         log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n-        if (requestHeader.getTopic().equals(this.brokerController.getBrokerConfig().getBrokerClusterName())) {\n-            String errorMsg = \"the topic[\" + requestHeader.getTopic() + \"] is conflict with system reserved words.\";", "originalCommit": "8c9b7fb8a8fda42e7692e3565bf2af7b885d0c3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxOTI4MA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r429919280", "bodyText": "ok", "author": "coder-zzzz", "createdAt": "2020-05-25T12:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3Njk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3OTg5NA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r429879894", "bodyText": "It would be better to integrate these two methods: org.apache.rocketmq.common.MixAll#isSystemTopic", "author": "duhenglucky", "createdAt": "2020-05-25T11:17:10Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "diffHunk": "@@ -285,7 +273,19 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext\n \n         this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-        return null;\n+        response.setCode(ResponseCode.SUCCESS);\n+        return response;\n+    }\n+\n+    private boolean isSystemTopic(RemotingCommand response, String topic) {\n+        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {", "originalCommit": "8c9b7fb8a8fda42e7692e3565bf2af7b885d0c3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjI4Mw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r429922283", "bodyText": "The MixAll#isSystemTopic is used in NamespaceUtil, but NamespaceUtil is use in both broker and client. Some topic can be mixed like AUTO_CREATE_TOPIC_KEY_TOPIC, but some can't, such as the topic of broker' clusterName.\nI try to use a new method in nameserver which offer the ability to judge if the topic will be created is system topic before this pr.But I found there always will be mistake when some broker register itself to nameserver after the judge request.\nSo I just promise broker itself will not create topics which it thought is system topic.\nDo u have any ideas to fix it?", "author": "coder-zzzz", "createdAt": "2020-05-25T13:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3OTg5NA=="}], "type": "inlineReview"}, {"oid": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "url": "https://github.com/apache/rocketmq/commit/3c86a3fcc12fd37d3fa44f65601858aed7224863", "message": "the-->The", "committedDate": "2020-05-25T13:03:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODg4NA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430128884", "bodyText": "String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\nThe reminder info(reserved words should update system topic )is not uniform with your modification.", "author": "vongosling", "createdAt": "2020-05-26T02:41:58Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "diffHunk": "@@ -285,7 +273,19 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext\n \n         this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-        return null;\n+        response.setCode(ResponseCode.SUCCESS);\n+        return response;\n+    }\n+\n+    private boolean isSystemTopic(RemotingCommand response, String topic) {\n+        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n+            String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzODcxNg==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430138716", "bodyText": "ok", "author": "coder-zzzz", "createdAt": "2020-05-26T03:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDMxMg==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430130312", "bodyText": "SCHEDULE_TOPIC is a special system topic? IMO, we should refactor this naming logic here.", "author": "vongosling", "createdAt": "2020-05-26T02:48:45Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java", "diffHunk": "@@ -124,6 +124,14 @@ public TopicConfigManager(BrokerController brokerController) {\n             topicConfig.setWriteQueueNums(1);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n+        {\n+            String topic = MixAll.SCHEDULE_TOPIC;\n+            TopicConfig topicConfig = new TopicConfig(topic);", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzOTk0MA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430139940", "bodyText": "Yeah, it is a special system topic used in delay msg. When producer send a delay  msg, the msg will be send to SCHEDULE_TOPIC, then send to the real topic when the delay time comes.\nDo u meaning  add prefix to system topic , or remove system topics to a independent class?", "author": "coder-zzzz", "createdAt": "2020-05-26T03:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MjI5Mg==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r431062292", "bodyText": "system topic should be a List. Also, we could judge it from the naming, a prefix is a good way.", "author": "vongosling", "createdAt": "2020-05-27T11:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDY1Nw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430130657", "bodyText": "Should use static number while not a special number 18", "author": "vongosling", "createdAt": "2020-05-26T02:50:37Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java", "diffHunk": "@@ -124,6 +124,14 @@ public TopicConfigManager(BrokerController brokerController) {\n             topicConfig.setWriteQueueNums(1);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n+        {\n+            String topic = MixAll.SCHEDULE_TOPIC;\n+            TopicConfig topicConfig = new TopicConfig(topic);\n+            this.systemTopicList.add(topic);\n+            topicConfig.setReadQueueNums(18);\n+            topicConfig.setWriteQueueNums(18);", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0MDA2NA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430140064", "bodyText": "I will do it.", "author": "coder-zzzz", "createdAt": "2020-05-26T03:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMTk3MA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430131970", "bodyText": "MixAll class should not inflate continue. could you help to move the system topic related logic to a new class, such as TopicValidator or TopicChecker?", "author": "vongosling", "createdAt": "2020-05-26T02:56:47Z", "path": "common/src/main/java/org/apache/rocketmq/common/MixAll.java", "diffHunk": "@@ -56,6 +56,7 @@\n     //http://jmenv.tbsite.net:8080/rocketmq/nsaddr\n     //public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n     public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = \"TBW102\"; // Will be created at broker when isAutoCreateTopicEnable\n+    public static final String SCHEDULE_TOPIC = \"SCHEDULE_TOPIC_XXXX\";", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0MDU5Mw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430140593", "bodyText": "It's a good way to make code cleaner.I'will try my best to do it", "author": "coder-zzzz", "createdAt": "2020-05-26T03:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMTk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMjI1OQ==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430132259", "bodyText": "I don't like to see many MixAll scatter in so many places:-)", "author": "vongosling", "createdAt": "2020-05-26T02:58:11Z", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -383,7 +384,7 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n                     msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n                 }\n \n-                topic = ScheduleMessageService.SCHEDULE_TOPIC;\n+                topic = MixAll.SCHEDULE_TOPIC;", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d964e87c2ad364292e9323f321703cd08a0946f4", "url": "https://github.com/apache/rocketmq/commit/d964e87c2ad364292e9323f321703cd08a0946f4", "message": "fix magic number 18", "committedDate": "2020-05-26T10:14:46Z", "type": "commit"}, {"oid": "d37b692ccaa941c1f95f5f3825ddf7e3a718198b", "url": "https://github.com/apache/rocketmq/commit/d37b692ccaa941c1f95f5f3825ddf7e3a718198b", "message": " move system topic to TopicValidator except TBW102", "committedDate": "2020-05-27T06:05:14Z", "type": "commit"}, {"oid": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "url": "https://github.com/apache/rocketmq/commit/2378dff3545520f97bbda2501f07926e1c1d6ea6", "message": " move TBW102 and isSystemTopic to TopicValidator", "committedDate": "2020-05-27T08:45:57Z", "type": "commit"}, {"oid": "15048661a4cb09ded4dedd96e5a92212b9fd9da5", "url": "https://github.com/apache/rocketmq/commit/15048661a4cb09ded4dedd96e5a92212b9fd9da5", "message": "add test code", "committedDate": "2020-05-27T10:48:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4ODU1MQ==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r431088551", "bodyText": "Is this piece of code necessary? The following code will check system topic again.", "author": "RongtongJin", "createdAt": "2020-05-27T12:45:36Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java", "diffHunk": "@@ -173,6 +173,12 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,\n             return response;\n         }\n \n+        if (TopicValidator.RMQ_SYS_SCHEDULE_TOPIC.equals(requestHeader.getTopic())) {\n+            response.setCode(ResponseCode.NO_PERMISSION);\n+            response.setRemark(\"sending message to topic[\" + requestHeader.getTopic() + \"] is forbidden\");\n+            return response;\n+        }\n+", "originalCommit": "15048661a4cb09ded4dedd96e5a92212b9fd9da5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyNzc5Nw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r431127797", "bodyText": "[Important] There is a serious problem. msgCheck call this method and check all system topics, this will cause the client to fail to send messages to all system topics, but it is necessary for the client to send messages to certain system topics, such as BenchmarkTest, OFFSET_MOVED_EVENT.  IMO, We need a blacklist to prohibit sending to certain system topics, but not all system topics.", "author": "RongtongJin", "createdAt": "2020-05-27T13:24:38Z", "path": "common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java", "diffHunk": "@@ -57,13 +85,24 @@ public static boolean validateTopic(String topic, RemotingCommand response) {\n             return false;\n         }\n \n-        //whether the same with system reserved keyword\n-        if (topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC)) {\n+        if (isSystemTopic(topic)) {\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(\"The specified topic is conflict with AUTO_CREATE_TOPIC_KEY_TOPIC.\");\n+            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n             return false;\n         }", "originalCommit": "15048661a4cb09ded4dedd96e5a92212b9fd9da5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODMyOQ==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r431148329", "bodyText": "This is really a deadly problem. Schedule Topic is the only one should prevent send by user,I\u2019ll check the method TopicValidator#validateTopic everywhere invoked.", "author": "coder-zzzz", "createdAt": "2020-05-27T13:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyNzc5Nw=="}], "type": "inlineReview"}, {"oid": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "url": "https://github.com/apache/rocketmq/commit/1bb880cfccb82c50f840cafe060efb4e2c6474da", "message": "validateTopic --> validatorSystemTopic, validatorBlacklistTopic", "committedDate": "2020-05-29T07:05:05Z", "type": "commit"}, {"oid": "82825b0824b4fbeb4d67d62ca5daf66326430b55", "url": "https://github.com/apache/rocketmq/commit/82825b0824b4fbeb4d67d62ca5daf66326430b55", "message": "validateTopic --> validatorSystemTopic, validatorBlacklistTopic", "committedDate": "2020-05-29T07:05:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxMzQ1Mg==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r432413452", "bodyText": "what is a blacklist? It's just not allowed to send a message to this topic. It would be better to name it notAllowedSending.", "author": "vongosling", "createdAt": "2020-05-29T11:07:10Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java", "diffHunk": "@@ -173,13 +173,10 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,\n             return response;\n         }\n \n-        if (TopicValidator.RMQ_SYS_SCHEDULE_TOPIC.equals(requestHeader.getTopic())) {\n-            response.setCode(ResponseCode.NO_PERMISSION);\n-            response.setRemark(\"sending message to topic[\" + requestHeader.getTopic() + \"] is forbidden\");\n+        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n-\n-        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n+        if (!TopicValidator.validateBlacklistTopic(requestHeader.getTopic(), response)) {", "originalCommit": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwODYzNA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r433008634", "bodyText": "ok\uff0cI'll change it", "author": "coder-zzzz", "createdAt": "2020-06-01T01:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxMzQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNTIyOA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r432415228", "bodyText": "it still needs to polish when you change your blacklist method in validator class.", "author": "vongosling", "createdAt": "2020-05-29T11:11:14Z", "path": "broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java", "diffHunk": "@@ -70,6 +64,62 @@ public void testAddSystemTopic() {\n         assertThat(TopicValidator.getSystemTopicSet()).contains(topic);\n     }\n \n+    @Test\n+    public void testValidateSystemTopic() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        Boolean res = TopicValidator.validateSystemTopic(topic, response);\n+        assertThat(res).isFalse();\n+        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n+        assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+\n+        topic = \"test_topic\";\n+        res = TopicValidator.validateSystemTopic(topic, response);\n+        assertThat(res).isTrue();\n+    }\n+\n+    @Test\n+    public void testValidateBlacklistTopic() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        Boolean res = TopicValidator.validateBlacklistTopic(topic, response);", "originalCommit": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNTU1OA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r432415558", "bodyText": "where is IsBlacklistTopic in here", "author": "vongosling", "createdAt": "2020-05-29T11:12:02Z", "path": "broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java", "diffHunk": "@@ -70,6 +64,62 @@ public void testAddSystemTopic() {\n         assertThat(TopicValidator.getSystemTopicSet()).contains(topic);\n     }\n \n+    @Test\n+    public void testValidateSystemTopic() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        Boolean res = TopicValidator.validateSystemTopic(topic, response);\n+        assertThat(res).isFalse();\n+        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n+        assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+\n+        topic = \"test_topic\";\n+        res = TopicValidator.validateSystemTopic(topic, response);\n+        assertThat(res).isTrue();\n+    }\n+\n+    @Test\n+    public void testValidateBlacklistTopic() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        Boolean res = TopicValidator.validateBlacklistTopic(topic, response);\n+        assertThat(res).isFalse();\n+        assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n+        assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+\n+        topic = \"test_topic\";\n+        res = TopicValidator.validateBlacklistTopic(topic, response);\n+        assertThat(res).isTrue();\n+    }\n+\n+    @Test\n+    public void testIsSystemTopic() {\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        boolean res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isTrue();\n+\n+        topic = \"rmq_sys_test\";\n+        res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isTrue();\n+\n+        topic = \"test_topic\";\n+        res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isFalse();\n+    }\n+\n+    @Test\n+    public void testIsBlacklistTopic() {\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;", "originalCommit": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMTM4MQ==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r432421381", "bodyText": "It would be better to reconsider the naming of these methods. The difference between validateSystemTopic and isSystemTopic are quite confusing, same for  isBlacklistTopic and validateBlacklistTopic. For example, when a topic is system topic, but validateSystemTopic return false.", "author": "RongtongJin", "createdAt": "2020-05-29T11:25:51Z", "path": "common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.topic;\n+\n+import org.apache.rocketmq.common.UtilAll;\n+import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TopicValidator {\n+\n+    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = \"TBW102\"; // Will be created at broker when isAutoCreateTopicEnable\n+    public static final String RMQ_SYS_SCHEDULE_TOPIC = \"SCHEDULE_TOPIC_XXXX\";\n+    public static final String RMQ_SYS_BENCHMARK_TOPIC = \"BenchmarkTest\";\n+    public static final String RMQ_SYS_TRANS_HALF_TOPIC = \"RMQ_SYS_TRANS_HALF_TOPIC\";\n+    public static final String RMQ_SYS_TRACE_TOPIC = \"RMQ_SYS_TRACE_TOPIC\";\n+    public static final String RMQ_SYS_TRANS_OP_HALF_TOPIC = \"RMQ_SYS_TRANS_OP_HALF_TOPIC\";\n+    public static final String RMQ_SYS_TRANS_CHECK_MAX_TIME_TOPIC = \"TRANS_CHECK_MAX_TIME_TOPIC\";\n+    public static final String RMQ_SYS_SELF_TEST_TOPIC = \"SELF_TEST_TOPIC\";\n+    public static final String RMQ_SYS_OFFSET_MOVED_EVENT = \"OFFSET_MOVED_EVENT\";\n+\n+    public static final String SYSTEM_TOPIC_PREFIX = \"rmq_sys_\";\n+\n+    private static final String VALID_PATTERN_STR = \"^[%|a-zA-Z0-9_-]+$\";\n+    private static final Pattern PATTERN = Pattern.compile(VALID_PATTERN_STR);\n+    private static final int TOPIC_MAX_LENGTH = 127;\n+\n+    private static final Set<String> SYSTEM_TOPIC_SET = new HashSet<String>();\n+\n+    /**\n+     * Topics'set which client can not send msg!\n+     */\n+    private static final Set<String> CLIENT_BLACKLIST_TOPIC_SET = new HashSet<String>();\n+\n+    static {\n+        SYSTEM_TOPIC_SET.add(AUTO_CREATE_TOPIC_KEY_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_SCHEDULE_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_BENCHMARK_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_TRANS_HALF_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_TRACE_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_TRANS_OP_HALF_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_TRANS_CHECK_MAX_TIME_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_SELF_TEST_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_OFFSET_MOVED_EVENT);\n+\n+        CLIENT_BLACKLIST_TOPIC_SET.add(RMQ_SYS_SCHEDULE_TOPIC);\n+    }\n+\n+    private static boolean regularExpressionMatcher(String origin, Pattern pattern) {\n+        if (pattern == null) {\n+            return true;\n+        }\n+        Matcher matcher = pattern.matcher(origin);\n+        return matcher.matches();\n+    }\n+\n+    public static boolean validateTopic(String topic, RemotingCommand response) {\n+\n+        if (UtilAll.isBlank(topic)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The specified topic is blank.\");\n+            return false;\n+        }\n+\n+        if (!regularExpressionMatcher(topic, PATTERN)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The specified topic contains illegal characters, allowing only \" + VALID_PATTERN_STR);\n+            return false;\n+        }\n+\n+        if (topic.length() > TOPIC_MAX_LENGTH) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The specified topic is longer than topic max length.\");\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean validateSystemTopic(String topic, RemotingCommand response) {\n+        if (isSystemTopic(topic)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static boolean isSystemTopic(String topic) {\n+        return SYSTEM_TOPIC_SET.contains(topic) || topic.startsWith(SYSTEM_TOPIC_PREFIX);\n+    }\n+\n+    public static boolean isBlacklistTopic(String topic) {\n+        return CLIENT_BLACKLIST_TOPIC_SET.contains(topic);\n+    }\n+\n+    public static boolean validateBlacklistTopic(String topic, RemotingCommand response) {\n+        if (isBlacklistTopic(topic)) {\n+            response.setCode(ResponseCode.NO_PERMISSION);\n+            response.setRemark(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+            return false;\n+        }\n+        return true;", "originalCommit": "82825b0824b4fbeb4d67d62ca5daf66326430b55", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "url": "https://github.com/apache/rocketmq/commit/cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "message": "rename some methods", "committedDate": "2020-06-01T08:10:57Z", "type": "commit"}]}