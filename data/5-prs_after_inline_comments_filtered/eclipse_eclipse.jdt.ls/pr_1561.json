{"pr_number": 1561, "pr_title": "Find references to fields via getters/setters", "pr_createdAt": "2020-10-07T17:28:59Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561", "timeline": [{"oid": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/573201fe3e46c0db6e2732a2cd19797fc7c2fdfb", "message": "Find references to fields via getters/setters\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-10-07T17:27:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjY5Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501326693", "bodyText": "Is there a particular case you encountered that this addresses, or is this just a precaution ?", "author": "rgrunber", "createdAt": "2020-10-07T21:42:14Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/ReferencesHandler.java", "diffHunk": "@@ -55,47 +62,100 @@ private IJavaSearchScope createSearchScope() throws JavaModelException {\n \t}\n \n \tpublic List<Location> findReferences(ReferenceParams param, IProgressMonitor monitor) {\n-\n \t\tfinal List<Location> locations = new ArrayList<>();\n \t\ttry {\n-\t\t\tIJavaElement elementToSearch = JDTUtils.findElementAtSelection(JDTUtils.resolveTypeRoot(param.getTextDocument().getUri()), param.getPosition().getLine(), param.getPosition().getCharacter(), this.preferenceManager, monitor);\n-\n+\t\t\tITypeRoot typeRoot = JDTUtils.resolveTypeRoot(param.getTextDocument().getUri());\n+\t\t\tif (typeRoot == null) {\n+\t\t\t\treturn locations;\n+\t\t\t}\n+\t\t\tIJavaElement elementToSearch = JDTUtils.findElementAtSelection(typeRoot, param.getPosition().getLine(), param.getPosition().getCharacter(), this.preferenceManager, monitor);\n+\t\t\tif (elementToSearch == null) {\n+\t\t\t\tint offset = JsonRpcHelpers.toOffset(typeRoot.getBuffer(), param.getPosition().getLine(), param.getPosition().getCharacter());\n+\t\t\t\telementToSearch = typeRoot.getElementAt(offset);", "originalCommit": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NjIxNA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501356214", "bodyText": "There is an Eclipse upstream issue.\nYou can reproduce it using the following steps:\n\ngit clone git@github.com:Frederick888/java-dummy.git\ncd java-dummy\nmvn clean verify # download lombok-1.18.10.jar\nstart Eclipse with the following VM arguments:\n\n-javaagent:~/.m2/repository/org/projectlombok/lombok/1.18.10/lombok-1.18.10.jar -Dlog.level=ALL -XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx3G\n\n\nopen the java-dummy project in Eclipse\nopen Apple.java\nright click the id field (line 20), select References>Workspace\nYou will get the  \"Operation is unavailable on the current selection. Please select a valid Java element type\" message dialog.\nIf you start Eclipse without the \"-javaagent:/home/snpe/.m2/repository/org/projectlombok/lombok/1.18.10/lombok-1.18.10.jar\" VM arguments, it works fine.\n\nThis code solves such issue.", "author": "snjeza", "createdAt": "2020-10-07T22:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5Njk4OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501796989", "bodyText": "Yup, definitely looks like a JDT-lombok issue when lombok handles the generated bytecode. getElementAt(..) seems to work around the limitations of codeSelect(..). We could probably file this upstream eventually although it seems like such issues have happened in the past, and we would probably need to do a thorough investigation proving it really is needed (See https://bugs.eclipse.org/bugs/show_bug.cgi?id=442070 )\nAlso, if we have to support any additional builder generation libraries in the future, we should probably clean up getBuilderName(..) and the block below its invocation.\nChange looks good though, so feel free to merge.", "author": "rgrunber", "createdAt": "2020-10-08T15:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNjM2Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501336367", "bodyText": "This may eventually have to evolve to support other builders (eg. https://immutables.github.io/ ) but I think it should be fine for now.", "author": "rgrunber", "createdAt": "2020-10-07T22:04:57Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/ReferencesHandler.java", "diffHunk": "@@ -55,47 +62,100 @@ private IJavaSearchScope createSearchScope() throws JavaModelException {\n \t}\n \n \tpublic List<Location> findReferences(ReferenceParams param, IProgressMonitor monitor) {\n-\n \t\tfinal List<Location> locations = new ArrayList<>();\n \t\ttry {\n-\t\t\tIJavaElement elementToSearch = JDTUtils.findElementAtSelection(JDTUtils.resolveTypeRoot(param.getTextDocument().getUri()), param.getPosition().getLine(), param.getPosition().getCharacter(), this.preferenceManager, monitor);\n-\n+\t\t\tITypeRoot typeRoot = JDTUtils.resolveTypeRoot(param.getTextDocument().getUri());\n+\t\t\tif (typeRoot == null) {\n+\t\t\t\treturn locations;\n+\t\t\t}\n+\t\t\tIJavaElement elementToSearch = JDTUtils.findElementAtSelection(typeRoot, param.getPosition().getLine(), param.getPosition().getCharacter(), this.preferenceManager, monitor);\n+\t\t\tif (elementToSearch == null) {\n+\t\t\t\tint offset = JsonRpcHelpers.toOffset(typeRoot.getBuffer(), param.getPosition().getLine(), param.getPosition().getCharacter());\n+\t\t\t\telementToSearch = typeRoot.getElementAt(offset);\n+\t\t\t}\n \t\t\tif (elementToSearch == null) {\n \t\t\t\treturn locations;\n \t\t\t}\n-\n-\t\t\tboolean includeClassFiles = preferenceManager.isClientSupportsClassFileContent();\n-\t\t\tSearchEngine engine = new SearchEngine();\n-\t\t\tSearchPattern pattern = SearchPattern.createPattern(elementToSearch, IJavaSearchConstants.REFERENCES);\n-\n-\t\t\tengine.search(pattern, new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() }, createSearchScope(), new SearchRequestor() {\n-\n-\t\t\t\t@Override\n-\t\t\t\tpublic void acceptSearchMatch(SearchMatch match) throws CoreException {\n-\t\t\t\t\tObject o = match.getElement();\n-\t\t\t\t\tif (o instanceof IJavaElement) {\n-\t\t\t\t\t\tIJavaElement element = (IJavaElement) o;\n-\t\t\t\t\t\tICompilationUnit compilationUnit = (ICompilationUnit) element.getAncestor(IJavaElement.COMPILATION_UNIT);\n-\t\t\t\t\t\tLocation location = null;\n-\t\t\t\t\t\tif (compilationUnit != null) {\n-\t\t\t\t\t\t\tlocation = JDTUtils.toLocation(compilationUnit, match.getOffset(), match.getLength());\n-\t\t\t\t\t\t} else if (includeClassFiles) {\n-\t\t\t\t\t\t\tIClassFile cf = (IClassFile) element.getAncestor(IJavaElement.CLASS_FILE);\n-\t\t\t\t\t\t\tif (cf != null && cf.getSourceRange() != null) {\n-\t\t\t\t\t\t\t\tlocation = JDTUtils.toLocation(cf, match.getOffset(), match.getLength());\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tif (location != null) {\n-\t\t\t\t\t\t\tlocations.add(location);\n+\t\t\tsearch(elementToSearch, locations, monitor);\n+\t\t\tif (preferenceManager.getPreferences().isIncludeGetterSetter() && elementToSearch instanceof IField) { // IField\n+\t\t\t\tIField field = (IField) elementToSearch;\n+\t\t\t\tIMethod getter = GetterSetterUtil.getGetter(field);\n+\t\t\t\tif (getter != null) {\n+\t\t\t\t\tsearch(getter, locations, monitor);\n+\t\t\t\t}\n+\t\t\t\tIMethod setter = GetterSetterUtil.getSetter(field);\n+\t\t\t\tif (setter != null) {\n+\t\t\t\t\tsearch(setter, locations, monitor);\n+\t\t\t\t}\n+\t\t\t\tString builderName = getBuilderName(field);\n+\t\t\t\tIType builder = field.getJavaProject().findType(builderName);\n+\t\t\t\tif (builder != null) {\n+\t\t\t\t\tString fieldSignature = field.getTypeSignature();\n+\t\t\t\t\tfor (IMethod method : builder.getMethods()) {\n+\t\t\t\t\t\tString[] parameters = method.getParameterTypes();\n+\t\t\t\t\t\tif (parameters.length == 1 && field.getElementName().equals(method.getElementName()) && fieldSignature.equals(parameters[0])) {\n+\t\t\t\t\t\t\tsearch(method, locations, monitor);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}, monitor);\n-\n+\t\t\t}\n \t\t} catch (CoreException e) {\n \t\t\tJavaLanguageServerPlugin.logException(\"Find references failure \", e);\n \t\t}\n \t\treturn locations;\n \t}\n \n+\tprivate String getBuilderName(IField field) {\n+\t\tIType declaringType = field.getDeclaringType();\n+\t\tIAnnotation annotation = declaringType.getAnnotation(\"Builder\");\n+\t\tif (annotation == null || !annotation.exists()) {\n+\t\t\tannotation = declaringType.getAnnotation(\"lombok.Builder\");\n+\t\t}", "originalCommit": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MzA4OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501583089", "bodyText": "JAVA_REFERENCES_INCLUDE_ACCESSORS = \"java.references.includeAccessors\";", "author": "fbricon", "createdAt": "2020-10-08T09:37:59Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -57,6 +57,11 @@\n \t * Specifies the folder path to the JDK .\n \t */\n \tpublic static final String JAVA_HOME = \"java.home\";\n+\t/**\n+\t * Preference key used to include getter, setter and builder/constructor when\n+\t * finding references.\n+\t */\n+\tpublic static final String JAVA_REFERENCES_INCLUDE_GETTERSETTER = \"java.references.includeGetterSetter\";", "originalCommit": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MzY1OA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r501583658", "bodyText": "includeAccessors", "author": "fbricon", "createdAt": "2020-10-08T09:38:54Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -434,6 +439,7 @@\n \tprivate boolean generateToStringListArrayContents;\n \tprivate int generateToStringLimitElements;\n \tprivate List<String> preferredContentProviderIds;\n+\tprivate boolean includeGetterSetter;", "originalCommit": "573201fe3e46c0db6e2732a2cd19797fc7c2fdfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzNjM4Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1561#discussion_r504036382", "bodyText": "Fixed. Related PR - #1568", "author": "snjeza", "createdAt": "2020-10-13T15:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MzY1OA=="}], "type": "inlineReview"}]}