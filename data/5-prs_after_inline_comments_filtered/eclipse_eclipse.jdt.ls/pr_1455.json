{"pr_number": 1455, "pr_title": "IBuildSupport extension point", "pr_createdAt": "2020-05-26T16:49:11Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455", "timeline": [{"oid": "bcefc614f7875df96326ca10287665b645476993", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/bcefc614f7875df96326ca10287665b645476993", "message": "Create extension point for IBuildSupport. Add extension with build support. Implement build support extension point.\nSigned-off-by: Siarhei Leanavets <siarhei_leanavets1@epam.com>", "committedDate": "2020-05-27T12:25:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1Nzg0Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432457847", "bodyText": "for (IConfigurationElement config : configs)", "author": "fbricon", "createdAt": "2020-05-29T12:45:15Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {", "originalCommit": "bcefc614f7875df96326ca10287665b645476993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDYyOA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284628", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-01T14:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1Nzg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1OTIwMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432459203", "bodyText": "should log at error level.\nAlso need to log which build implementation was skipped", "author": "fbricon", "createdAt": "2020-05-29T12:48:01Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {\n+\t\t\ttry {\n+\t\t\t\tInteger order = Integer.valueOf(configs[i].getAttribute(\"order\"));\n+\t\t\t\tsupporters.put(order, (IBuildSupport) configs[i].createExecutableExtension(\"class\")); //$NON-NLS-1$\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.log(e.getStatus());", "originalCommit": "bcefc614f7875df96326ca10287665b645476993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5NTg4MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433695881", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-02T08:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1OTIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1OTgwNA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432459804", "bodyText": "getWatchPatterns()", "author": "fbricon", "createdAt": "2020-05-29T12:49:08Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -185,4 +187,10 @@ public void discoverSource(IClassFile classFile, IProgressMonitor monitor) throw\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, MavenRuntimeClasspathProvider.MAVEN_CLASSPATH_PROVIDER);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {", "originalCommit": "bcefc614f7875df96326ca10287665b645476993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDY3Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284672", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-01T14:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1OTgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MTQ1Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432461453", "bodyText": "return Collections.emptyList<>();", "author": "fbricon", "createdAt": "2020-05-29T12:52:05Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/IBuildSupport.java", "diffHunk": "@@ -109,4 +112,8 @@ default ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, St\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, null);\n \t}\n \n+\tdefault List<String> getBasicWatchers() {\n+\t\treturn new ArrayList<>();", "originalCommit": "bcefc614f7875df96326ca10287665b645476993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDc5NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284794", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-01T14:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MTQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MzIwMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432463202", "bodyText": "the list is immutable, might as well put it in a static field once and for all", "author": "fbricon", "createdAt": "2020-05-29T12:55:24Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleBuildSupport.java", "diffHunk": "@@ -131,4 +135,10 @@ public static void saveModels() {\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, GradleClasspathProvider.ID);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {\n+\t\treturn Arrays.asList(GRADLE_SUFFIX_PATTERN, GRADLE_PROPERTIES_PATTERN);", "originalCommit": "bcefc614f7875df96326ca10287665b645476993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDc0OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284749", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-01T14:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MzIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MzkzMQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432463931", "bodyText": "Collections.singletonList(\"**/pom.xml\")", "author": "fbricon", "createdAt": "2020-05-29T12:56:46Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -57,6 +58,7 @@\n public class MavenBuildSupport implements IBuildSupport {\n \n \tprivate static final int MAX_TIME_MILLIS = 3000;\n+\tprivate static final String POM_FILE_PATTERN = \"**/pom.xml\";", "originalCommit": "bcefc614f7875df96326ca10287665b645476993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDg3NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284874", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-01T14:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MzkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NDA4MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432464080", "bodyText": "return static field instead", "author": "fbricon", "createdAt": "2020-05-29T12:57:02Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenBuildSupport.java", "diffHunk": "@@ -185,4 +187,10 @@ public void discoverSource(IClassFile classFile, IProgressMonitor monitor) throw\n \tpublic ILaunchConfiguration getLaunchConfiguration(IJavaProject javaProject, String scope) throws CoreException {\n \t\treturn new JavaApplicationLaunchConfiguration(javaProject.getProject(), scope, MavenRuntimeClasspathProvider.MAVEN_CLASSPATH_PROVIDER);\n \t}\n+\n+\t@Override\n+\tpublic List<String> getBasicWatchers() {\n+\t\treturn Arrays.asList(POM_FILE_PATTERN);", "originalCommit": "bcefc614f7875df96326ca10287665b645476993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NDk3Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433284973", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-01T14:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NDA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NTIzMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r432465232", "bodyText": "we need a test case that checks the order", "author": "fbricon", "createdAt": "2020-05-29T12:59:14Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -273,7 +277,18 @@ public boolean isBuildFile(IResource resource) {\n \t}\n \n \tprivate Stream<IBuildSupport> buildSupports() {\n-\t\treturn Stream.of(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(this), new EclipseBuildSupport());\n+\t\tMap<Integer, IBuildSupport> supporters = new TreeMap<>();\n+\t\tIExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(IConstants.PLUGIN_ID, BUILD_SUPPORT_EXTENSION_POINT_ID);\n+\t\tIConfigurationElement[] configs = extensionPoint.getConfigurationElements();\n+\t\tfor (int i = 0; i < configs.length; i++) {\n+\t\t\ttry {\n+\t\t\t\tInteger order = Integer.valueOf(configs[i].getAttribute(\"order\"));\n+\t\t\t\tsupporters.put(order, (IBuildSupport) configs[i].createExecutableExtension(\"class\")); //$NON-NLS-1$\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tJavaLanguageServerPlugin.log(e.getStatus());\n+\t\t\t}\n+\t\t}\n+\t\treturn supporters.values().stream();", "originalCommit": "bcefc614f7875df96326ca10287665b645476993", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5MDYwMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r433290603", "bodyText": "Created a test. Replaced access modifier of the buildSupports () method by protected. It was necessary for the test.", "author": "LeonovecSergey", "createdAt": "2020-06-01T15:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NTIzMg=="}], "type": "inlineReview"}, {"oid": "888b75a2156a4fac2739da1a28d81dea37813fd6", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/888b75a2156a4fac2739da1a28d81dea37813fd6", "message": "Add description of build support extension point. Code refactoring.\nSigned-off-by: Siarhei Leanavets <siarhei_leanavets1@epam.com>", "committedDate": "2020-06-01T12:10:50Z", "type": "commit"}, {"oid": "5d7c238e3e2a193037f9d9531020c767cd083c85", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/5d7c238e3e2a193037f9d9531020c767cd083c85", "message": "Add test for check order loading build support from extension point.\nSigned-off-by: Siarhei Leanavets <siarhei_leanavets1@epam.com>", "committedDate": "2020-06-01T14:50:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTY3MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434001670", "bodyText": "List<Class<IBuildSupport>> instead. Don't instantiate the  classes", "author": "fbricon", "createdAt": "2020-06-02T16:11:19Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandartProjectManagerTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.StandardPreferenceManager;\n+import org.junit.Test;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandartProjectManagerTest {\n+\n+\t@Test\n+\tpublic void testCheckBuildSupportOrder() {\n+\t\tPreferenceManager preferenceManager = mock(StandardPreferenceManager.class);\n+\t\tStandardProjectsManagerDummy projectsManagerDummy = new StandardProjectsManagerDummy(preferenceManager);\n+\t\tList<IBuildSupport> expectedList = Arrays.asList(new GradleBuildSupport(), new MavenBuildSupport(), new InvisibleProjectBuildSupport(), new DefaultProjectBuildSupport(), new EclipseBuildSupport());", "originalCommit": "5d7c238e3e2a193037f9d9531020c767cd083c85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNjA5Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434616093", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-03T14:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMDc3MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434010770", "bodyText": "e.getWatchPatterns().forEach(patterns::add));", "author": "fbricon", "createdAt": "2020-06-02T16:25:32Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManager.java", "diffHunk": "@@ -302,6 +317,7 @@ public void registerWatchers(boolean runInJob) {\n \t\tlogInfo(\">> registerFeature 'workspace/didChangeWatchedFiles'\");\n \t\tif (preferenceManager.getClientPreferences().isWorkspaceChangeWatchedFilesDynamicRegistered()) {\n \t\t\tSet<String> patterns = new LinkedHashSet<>(basicWatchers);\n+\t\t\tbuildSupports().forEach(e -> e.getWatchPatterns().forEach(p -> patterns.add(p)));", "originalCommit": "5d7c238e3e2a193037f9d9531020c767cd083c85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNTUyMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434615520", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-03T14:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMDc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMTQyMQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434011421", "bodyText": "better create an anonymous or inner class in StandartProjectManagerTest", "author": "fbricon", "createdAt": "2020-06-02T16:26:40Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandardProjectsManagerDummy.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandardProjectsManagerDummy extends StandardProjectsManager {", "originalCommit": "5d7c238e3e2a193037f9d9531020c767cd083c85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNTQ0NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434615444", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-03T14:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMTQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMjkzMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434012932", "bodyText": "StandardProjectsManagerTest", "author": "fbricon", "createdAt": "2020-06-02T16:29:08Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/StandartProjectManagerTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+import org.eclipse.jdt.ls.core.internal.preferences.StandardPreferenceManager;\n+import org.junit.Test;\n+\n+/**\n+ * @author siarhei_leanavets1\n+ *\n+ */\n+public class StandartProjectManagerTest {", "originalCommit": "5d7c238e3e2a193037f9d9531020c767cd083c85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNTM4Ng==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1455#discussion_r434615386", "bodyText": "fixed", "author": "LeonovecSergey", "createdAt": "2020-06-03T14:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMjkzMg=="}], "type": "inlineReview"}, {"oid": "c0450532aedd5d3e6e458ac1d26fb01875510546", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c0450532aedd5d3e6e458ac1d26fb01875510546", "message": "Code refactoring.\nSigned-off-by: Siarhei Leanavets <siarhei_leanavets1@epam.com>", "committedDate": "2020-06-03T14:33:57Z", "type": "commit"}]}