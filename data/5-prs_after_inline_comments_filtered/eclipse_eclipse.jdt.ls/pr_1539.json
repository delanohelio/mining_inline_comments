{"pr_number": 1539, "pr_title": "Improve semantic token modifiers", "pr_createdAt": "2020-09-05T11:59:55Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1539", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NDMxMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1539#discussion_r486754313", "bodyText": "I'm ok to simplify it by removing SemanticTokenManager. But here it's no longer lazy-loaded. Suggest to keep the original Initialization-on-demand_holder_idiom", "author": "Eskibear", "createdAt": "2020-09-11T03:38:14Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/SemanticTokensLegend.java", "diffHunk": "@@ -13,22 +13,28 @@\n  *******************************************************************************/\n package org.eclipse.jdt.ls.core.internal.semantictokens;\n \n-import java.util.List;\n+import java.util.Arrays;\n \n public class SemanticTokensLegend {\n-\tprivate final List<String> tokenTypes;\n-\tprivate final List<String> tokenModifiers;\n+\tpublic static final SemanticTokensLegend INSTANCE = new SemanticTokensLegend();", "originalCommit": "964cba6e58027764cba709b1476e8998eadd28f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5ODUxMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1539#discussion_r486798512", "bodyText": "Oh, I see the original purpose of SemanticTokenManager now. But I just thought it was a bit unnecessary after the changes I made, since it was only used to get the SemanticTokensLegend instance. I can re-implement the lazy-loading in SemanticTokensLegend instead.\nBut now that I think about it, is there any reason to keep the legend in-memory at all in Java-land? Couldn't we just create a new instance when requested by the client? Because the server never uses the legend, and the client only needs to request it once and then keep it in it's own memory. Does the server have any reason to keep holding a static instance of the legend then?", "author": "0dinD", "createdAt": "2020-09-11T06:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NDMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NTM4OA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1539#discussion_r487045388", "bodyText": "is there any reason to keep the legend in-memory at all in Java-land?\n\nIt's a good finding. Indeed, we don't have to have the Legend, as it simply holds all possible values of TokenType and TokenModifier.\n\nDoes the server have any reason to keep holding a static instance of the legend then?\n\nWhen client talks to the server, Legend is their contract, and it was used to encode tokens. With consistency in mind, I just implemented in that way.", "author": "Eskibear", "createdAt": "2020-09-11T13:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NDMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2NDk3NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1539#discussion_r486764975", "bodyText": "I'm wondering whether we have to add all \"standard Java modifiers\", because ultimately we'll align modifiers with LSP3.16 as much as possible, via LSP4J.\nAnd massive modifiers would be potentially anonying (we did receive such feedback). I'm thinking, do people actually want to know below information from highlighting?\ntransient, volatile, default, synchronized, native, strictfp\n\nMy suggestion is to only keep important modifiers you are actually consuming now, also to avoid future breaking changes (when aligning to LSP) as best as we can.", "author": "Eskibear", "createdAt": "2020-09-11T04:22:32Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/TokenModifier.java", "diffHunk": "@@ -31,54 +31,26 @@\n import org.eclipse.jdt.core.dom.VariableDeclarationFragment;\n \n public enum TokenModifier {\n-\tSTATIC(\"static\") {\n-\t\t@Override\n-\t\tprotected boolean applies(IBinding binding) {\n-\t\t\treturn Modifier.isStatic(binding.getModifiers());\n-\t\t}\n-\t},\n-\tFINAL(\"readonly\") {\n-\t\t@Override\n-\t\tprotected boolean applies(IBinding binding) {\n-\t\t\treturn Modifier.isFinal(binding.getModifiers());\n-\t\t}\n-\t},\n-\tDEPRECATED(\"deprecated\") {\n-\t\t@Override\n-\t\tprotected boolean applies(IBinding binding) {\n-\t\t\treturn binding.isDeprecated();\n-\t\t}\n-\t},\n-\tPUBLIC(\"public\") {\n-\t\t@Override\n-\t\tprotected boolean applies(IBinding binding) {\n-\t\t\treturn Modifier.isPublic(binding.getModifiers());\n-\t\t}\n-\t},\n-\tPRIVATE(\"private\") {\n-\t\t@Override\n-\t\tprotected boolean applies(IBinding binding) {\n-\t\t\treturn Modifier.isPrivate(binding.getModifiers());\n-\t\t}\n-\t},\n-\tPROTECTED(\"protected\") {\n-\t\t@Override\n-\t\tprotected boolean applies(IBinding binding) {\n-\t\t\treturn Modifier.isProtected(binding.getModifiers());\n-\t\t}\n-\t},\n-\tABSTRACT(\"abstract\") {\n-\t\t@Override\n-\t\tprotected boolean applies(IBinding binding) {\n-\t\t\treturn Modifier.isAbstract(binding.getModifiers());\n-\t\t}\n-\t},\n-\tDECLARATION(\"declaration\") {\n-\t\t@Override\n-\t\tprotected boolean applies(SimpleName simpleName) {\n-\t\t\treturn isDeclaration(simpleName);\n-\t\t}\n-\t};\n+\t// Standard Java modifiers\n+\tPUBLIC(\"public\"),", "originalCommit": "964cba6e58027764cba709b1476e8998eadd28f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNDA3MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1539#discussion_r486804070", "bodyText": "Well, I do see your point here. The main purpose of this PR was to add the generic, typeArgument and importDeclaration modifiers. But I realised that adding the rest of the standard Java modifiers was easy and computationally cheap, so I thought \"why not?\".\nI'm not sure I understand what you mean by \"align modifiers with LSP3.16\"? We still need to have some custom modifiers that are not part of LSP3.16, and I don't see why these would be any different. Regarding the \"massive modifiers\", I think it would be rare to actually see all of those modifiers used together in a token, since many of them are mutually exclusive, or at least rarely used together.\nTo be clear, I also think some of the standard Java modifiers are rarely going to be used, like strictfp for example. But I just didn't see any particular reason not to add the information, since it's trivial to check them in the same way as public, static, readonly etc. If you want me to remove the new \"standard Java modifiers\", I am also fine with that.", "author": "0dinD", "createdAt": "2020-09-11T06:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2NDk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MTY1OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1539#discussion_r487051659", "bodyText": "I'm not that strongly opposed to that (as you mentioned you don't see any slow-down), my point is just \"why to add them if they are rarely going to be used\". It's indeed trivial to check them, it may cost tiny but still some time to check...\nI still prefer not to add them here. One day if we do consume those modifiers, it's also trivial to add them back.", "author": "Eskibear", "createdAt": "2020-09-11T13:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2NDk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4NTMzMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1539#discussion_r488185330", "bodyText": "Yeah, I do see your point. I'll remove those modifiers from this PR in my next iteration, which I'll probably commit later this week. But can we keep the native modifier? I don't see much use for the other modifiers (transient, volatile, default, synchronized and strictfp), but native is something that I might actually use myself, as it's quite common to see when using native libraries.", "author": "0dinD", "createdAt": "2020-09-14T19:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2NDk3NQ=="}], "type": "inlineReview"}, {"oid": "d4c4fd3425057e96a1dec9493d87e55aa5f58805", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d4c4fd3425057e96a1dec9493d87e55aa5f58805", "message": "Improve semantic token modifiers\n\nSigned-off-by: 0dinD <zerodind@gmail.com>", "committedDate": "2020-09-15T17:37:04Z", "type": "forcePushed"}, {"oid": "daf610c58237619a34371cf59b7a710f05293bda", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/daf610c58237619a34371cf59b7a710f05293bda", "message": "Improve semantic token modifiers\n\nSigned-off-by: 0dinD <zerodind@gmail.com>", "committedDate": "2020-09-28T17:47:13Z", "type": "forcePushed"}, {"oid": "444dad83c7cb072ae399a7780f2f64d968ace257", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/444dad83c7cb072ae399a7780f2f64d968ace257", "message": "Improve semantic token modifiers\n\nSigned-off-by: 0dinD <zerodind@gmail.com>", "committedDate": "2020-09-28T18:06:00Z", "type": "forcePushed"}, {"oid": "879e6ed09a84d6e4d891dd127238ed9ec8560af6", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/879e6ed09a84d6e4d891dd127238ed9ec8560af6", "message": "Improve semantic token modifiers\n\nSigned-off-by: 0dinD <zerodind@gmail.com>", "committedDate": "2020-09-28T18:34:24Z", "type": "forcePushed"}, {"oid": "64965f3101b95ae5197260883530dca484e33b8c", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/64965f3101b95ae5197260883530dca484e33b8c", "message": "Improve semantic token modifiers\n\nSigned-off-by: 0dinD <zerodind@gmail.com>", "committedDate": "2020-09-30T08:27:41Z", "type": "forcePushed"}, {"oid": "f0e83fc3479136c0b2ed6357d2be1b167a074150", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/f0e83fc3479136c0b2ed6357d2be1b167a074150", "message": "Improve semantic token modifiers\n\nSigned-off-by: 0dinD <zerodind@gmail.com>", "committedDate": "2020-09-30T08:34:22Z", "type": "commit"}, {"oid": "f0e83fc3479136c0b2ed6357d2be1b167a074150", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/f0e83fc3479136c0b2ed6357d2be1b167a074150", "message": "Improve semantic token modifiers\n\nSigned-off-by: 0dinD <zerodind@gmail.com>", "committedDate": "2020-09-30T08:34:22Z", "type": "forcePushed"}]}