{"pr_number": 1487, "pr_title": "fill additionalTextEdits during completionItem/resolve ", "pr_createdAt": "2020-06-18T17:37:07Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1487", "timeline": [{"oid": "25f24396a149d5c12fcb3534e730577c7891e4e1", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/25f24396a149d5c12fcb3534e730577c7891e4e1", "message": "call addImports only in resolve stage\n\nSigned-off-by: Yan Zhang <yanzh@microsoft.com>", "committedDate": "2020-06-19T08:07:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyODA2OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1487#discussion_r442928069", "bodyText": "Not sure if we should do something like:\nif (proposal.getKind() == CompletionProposal.CONSTRUCTOR_INVOCATION || proposal.getKind() == CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION\n\t\t|| proposal.getKind() == CompletionProposal.ANONYMOUS_CLASS_DECLARATION) {\n\torg.eclipse.lsp4j.TextEdit edit = toRequiredTypeEdit(requiredProposal, trigger, proposal.canUseDiamond(context));\n\tcompletionBuffer.append(edit.getNewText());\n\trange = edit.getRange();\n} else if (addImports) {\n\torg.eclipse.lsp4j.TextEdit edit = toRequiredTypeEdit(requiredProposal, trigger, proposal.canUseDiamond(context));\n\tadditionalTextEdits.add(edit);\n}\nare all additional edits imports?", "author": "fbricon", "createdAt": "2020-06-19T16:10:55Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalReplacementProvider.java", "diffHunk": "@@ -111,31 +127,31 @@ public void updateReplacement(CompletionProposal proposal, CompletionItem item,\n \t\tStringBuilder completionBuffer = new StringBuilder();\n \t\tRange range = null;\n \t\tif (isSupportingRequiredProposals(proposal)) {\n-\t\t\tCompletionProposal[] requiredProposals= proposal.getRequiredProposals();\n+\t\t\tCompletionProposal[] requiredProposals = proposal.getRequiredProposals();\n \t\t\tif (requiredProposals != null) {\n \t\t\t\tfor (CompletionProposal requiredProposal : requiredProposals) {\n-\t\t\t\t\tswitch(requiredProposal.getKind()) {\n-\t\t\t\t\tcase CompletionProposal.TYPE_IMPORT:\n-\t\t\t\t\tcase CompletionProposal.METHOD_IMPORT:\n-\t\t\t\t\tcase CompletionProposal.FIELD_IMPORT:\n-\t\t\t\t\t\tappendImportProposal(completionBuffer, requiredProposal, proposal.getKind());\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase CompletionProposal.TYPE_REF:\n-\t\t\t\t\t\torg.eclipse.lsp4j.TextEdit edit = toRequiredTypeEdit(requiredProposal, trigger, proposal.canUseDiamond(context));\n+\t\t\t\t\tswitch (requiredProposal.getKind()) {\n+\t\t\t\t\t\tcase CompletionProposal.TYPE_IMPORT:\n+\t\t\t\t\t\tcase CompletionProposal.METHOD_IMPORT:\n+\t\t\t\t\t\tcase CompletionProposal.FIELD_IMPORT:\n+\t\t\t\t\t\t\tappendImportProposal(completionBuffer, requiredProposal, proposal.getKind());\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase CompletionProposal.TYPE_REF:\n+\t\t\t\t\t\t\torg.eclipse.lsp4j.TextEdit edit = toRequiredTypeEdit(requiredProposal, trigger, proposal.canUseDiamond(context));\n \t\t\t\t\t\t\tif (proposal.getKind() == CompletionProposal.CONSTRUCTOR_INVOCATION || proposal.getKind() == CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION\n \t\t\t\t\t\t\t\t\t|| proposal.getKind() == CompletionProposal.ANONYMOUS_CLASS_DECLARATION) {\n-\t\t\t\t\t\t\tcompletionBuffer.append(edit.getNewText());\n-\t\t\t\t\t\t\trange = edit.getRange();\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tadditionalTextEdits.add(edit);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\t/*\n-\t\t\t\t\t\t * In 3.3 we only support the above required proposals, see\n-\t\t\t\t\t\t * CompletionProposal#getRequiredProposals()\n-\t\t\t\t\t\t */\n-\t\t\t\t\t\tAssert.isTrue(false);\n+\t\t\t\t\t\t\t\tcompletionBuffer.append(edit.getNewText());\n+\t\t\t\t\t\t\t\trange = edit.getRange();\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tadditionalTextEdits.add(edit);\n+\t\t\t\t\t\t\t}", "originalCommit": "25f24396a149d5c12fcb3534e730577c7891e4e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExMTU3OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1487#discussion_r443111579", "bodyText": "are all additional edits imports?\n\nNo. In most cases they are imports. But there is a special case CompletionHandlerTest.java#testCompletion_method_withLSPV3(), besides the imports, there is another additonal edit to replace \"HashMap\" with \"HashMap\". It look confusing (redudant), but after playing for a while, I found a case that might better explain it.\npublic class A {\n    public static void main(String[] args) {\n        HashMap map = new HashMap<>();\n        map.putA\n    }\n}\n\n// additional edits for `putAll`\n    \"additionalTextEdits\": [\n        {\n            \"range\": {\n                \"start\": {\n                    \"line\": 2,\n                    \"character\": 8\n                },\n                \"end\": {\n                    \"line\": 2,\n                    \"character\": 15\n                }\n            },\n            \"newText\": \"HashMap<K,V>\" //<-- this is the `toRequiredTypeEdit` one\n        },\n        {\n            \"range\": {\n                \"start\": {\n                    \"line\": 0,\n                    \"character\": 0\n                },\n                \"end\": {\n                    \"line\": 0,\n                    \"character\": 0\n                }\n            },\n            \"newText\": \"import java.util.HashMap;\\n\\n\"\n        }\nNo matter whether they are imports or not, the additional edits will be correctly calculated in the resolve stage. The change you proposed is surely harmless, and can also reduce the times of calling  toRequiredTypeEdit.", "author": "Eskibear", "createdAt": "2020-06-20T08:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyODA2OQ=="}], "type": "inlineReview"}, {"oid": "d1b10d60b804aeb67532470de6ba29c056e38fc3", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d1b10d60b804aeb67532470de6ba29c056e38fc3", "message": "support resolve additionalTextEdits\n\nSigned-off-by: Yan Zhang <yanzh@microsoft.com>", "committedDate": "2020-06-24T08:22:09Z", "type": "commit"}, {"oid": "d1b10d60b804aeb67532470de6ba29c056e38fc3", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d1b10d60b804aeb67532470de6ba29c056e38fc3", "message": "support resolve additionalTextEdits\n\nSigned-off-by: Yan Zhang <yanzh@microsoft.com>", "committedDate": "2020-06-24T08:22:09Z", "type": "forcePushed"}, {"oid": "8a901a9fc7b918a5c1da0bc162cf7cf2c4b632d7", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/8a901a9fc7b918a5c1da0bc162cf7cf2c4b632d7", "message": "don't fill unimplemented methods in new type constructor\n\nSigned-off-by: Yan Zhang <yanzh@microsoft.com>", "committedDate": "2020-06-26T15:35:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTA2Ng==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1487#discussion_r446959066", "bodyText": "only use ${0} if snippets are supported by the client", "author": "fbricon", "createdAt": "2020-06-29T13:11:25Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/AnonymousTypeCompletionProposal.java", "diffHunk": "@@ -91,10 +91,10 @@ public AnonymousTypeCompletionProposal(ICompilationUnit cu, int replacementOffse\n \t * @see JavaTypeCompletionProposal#updateReplacementString(IDocument,char,int,ImportRewrite)\n \t */\n \tpublic String updateReplacementString(IDocument document, int offset, ImportRewrite impRewrite) throws CoreException, BadLocationException {\n-\t\tString newBody = createNewBody(impRewrite);\n-\t\tif (newBody == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\t// Construct empty body for performance concern\n+\t\t// See https://github.com/microsoft/language-server-protocol/issues/1032#issuecomment-648748013\n+\t\tString newBody = \"{\\n\\t${0}\\n}\";", "originalCommit": "8a901a9fc7b918a5c1da0bc162cf7cf2c4b632d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTE4MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1487#discussion_r446959180", "bodyText": "StringBuilder", "author": "fbricon", "createdAt": "2020-06-29T13:11:36Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/AnonymousTypeCompletionProposal.java", "diffHunk": "@@ -91,10 +91,10 @@ public AnonymousTypeCompletionProposal(ICompilationUnit cu, int replacementOffse\n \t * @see JavaTypeCompletionProposal#updateReplacementString(IDocument,char,int,ImportRewrite)\n \t */\n \tpublic String updateReplacementString(IDocument document, int offset, ImportRewrite impRewrite) throws CoreException, BadLocationException {\n-\t\tString newBody = createNewBody(impRewrite);\n-\t\tif (newBody == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\t// Construct empty body for performance concern\n+\t\t// See https://github.com/microsoft/language-server-protocol/issues/1032#issuecomment-648748013\n+\t\tString newBody = \"{\\n\\t${0}\\n}\";\n+\n \t\tStringBuffer buf = new StringBuffer(\"new A()\"); //$NON-NLS-1$", "originalCommit": "8a901a9fc7b918a5c1da0bc162cf7cf2c4b632d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "157ca612f519f9a26adb8845eeb7679b7ef4ace9", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/157ca612f519f9a26adb8845eeb7679b7ef4ace9", "message": "use placeholder only when client supports snippet\n\nSigned-off-by: Yan Zhang <yanzh@microsoft.com>", "committedDate": "2020-06-29T15:17:33Z", "type": "commit"}]}