{"pr_number": 1362, "pr_title": "Fix to retry when TDClient returns 401, 403 and get apikey again", "pr_createdAt": "2020-02-19T10:23:50Z", "pr_url": "https://github.com/treasure-data/digdag/pull/1362", "timeline": [{"oid": "f088a50929492186a893e32e07b08a5364cba671", "url": "https://github.com/treasure-data/digdag/commit/f088a50929492186a893e32e07b08a5364cba671", "message": "Fix to retry when TDClient returns 4XX and get apikey again", "committedDate": "2020-02-19T11:52:38Z", "type": "commit"}, {"oid": "f088a50929492186a893e32e07b08a5364cba671", "url": "https://github.com/treasure-data/digdag/commit/f088a50929492186a893e32e07b08a5364cba671", "message": "Fix to retry when TDClient returns 4XX and get apikey again", "committedDate": "2020-02-19T11:52:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0NjE4OQ==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r381246189", "bodyText": "Will it be better to use httpstatus code instead of 400 ~ 500 ? because not all 4xx are authentication failure", "author": "LeenSun", "createdAt": "2020-02-19T11:56:32Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/TDOperator.java", "diffHunk": "@@ -408,17 +415,27 @@ private static int exponentialBackoffInterval(DurationInterval pollInterval, int\n     static boolean isDeterministicClientException(Exception ex)\n     {\n         if (ex instanceof TDClientHttpException) {\n-            int statusCode = ((TDClientHttpException) ex).getStatusCode();\n-            switch (statusCode) {\n-                case HttpStatus.TOO_MANY_REQUESTS_429:\n-                case HttpStatus.REQUEST_TIMEOUT_408:\n-                    return false;\n-                default:\n-                    // return true if 4xx\n-                    return statusCode >= 400 && statusCode < 500;\n-            }\n+            return isAuthenticationErrorException((TDClientHttpException)ex);\n         }\n-        else if (ex instanceof TDClientException) {\n+        return isFailedBeforeSendClientException(ex);\n+    }\n+\n+    static boolean isAuthenticationErrorException(TDClientHttpException ex)\n+    {\n+        int statusCode = ex.getStatusCode();\n+        switch (statusCode) {\n+            case HttpStatus.TOO_MANY_REQUESTS_429:\n+            case HttpStatus.REQUEST_TIMEOUT_408:\n+                return false;\n+            default:\n+                // return true if 4xx\n+                return statusCode >= 400 && statusCode < 500;", "originalCommit": "f088a50929492186a893e32e07b08a5364cba671", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NTQ5OQ==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r381255499", "bodyText": "Thanks for pointing out! I fixed here. 73cdc06", "author": "naritta", "createdAt": "2020-02-19T12:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0NjE4OQ=="}], "type": "inlineReview"}, {"oid": "73cdc06b428726998469a599acc253af00472d2e", "url": "https://github.com/treasure-data/digdag/commit/73cdc06b428726998469a599acc253af00472d2e", "message": "Fix isAuthenticationErrorException to use status code", "committedDate": "2020-02-19T12:17:56Z", "type": "commit"}, {"oid": "f3f4fdde9e910fd68dff9ab2d669d92fa3d04239", "url": "https://github.com/treasure-data/digdag/commit/f3f4fdde9e910fd68dff9ab2d669d92fa3d04239", "message": "Fix TDOperatorFactory also", "committedDate": "2020-02-20T03:44:54Z", "type": "forcePushed"}, {"oid": "7ca88a8e8ffab2ebb3fcb69b5e4bcd5631bb05b8", "url": "https://github.com/treasure-data/digdag/commit/7ca88a8e8ffab2ebb3fcb69b5e4bcd5631bb05b8", "message": "Fix TDOperatorFactory also", "committedDate": "2020-02-20T03:55:20Z", "type": "forcePushed"}, {"oid": "6b7032ddd22d8ed26a0b7980e123729dd7295b98", "url": "https://github.com/treasure-data/digdag/commit/6b7032ddd22d8ed26a0b7980e123729dd7295b98", "message": "Fix TDOperatorFactory also", "committedDate": "2020-02-20T04:58:07Z", "type": "forcePushed"}, {"oid": "ca486ec3e58d8726cfc446a116a670c7c3a4437d", "url": "https://github.com/treasure-data/digdag/commit/ca486ec3e58d8726cfc446a116a670c7c3a4437d", "message": "Fix TDOperatorFactory also", "committedDate": "2020-02-20T07:11:26Z", "type": "forcePushed"}, {"oid": "dd18565836f85b1b5f62e503485a8a9673a0caad", "url": "https://github.com/treasure-data/digdag/commit/dd18565836f85b1b5f62e503485a8a9673a0caad", "message": "Fix TDOperatorFactory also", "committedDate": "2020-02-20T08:21:17Z", "type": "forcePushed"}, {"oid": "9d32c73010cbb87cadac19a3c61eafbbfbff6fb7", "url": "https://github.com/treasure-data/digdag/commit/9d32c73010cbb87cadac19a3c61eafbbfbff6fb7", "message": "Fix TDOperatorFactory also", "committedDate": "2020-02-20T09:03:02Z", "type": "commit"}, {"oid": "9d32c73010cbb87cadac19a3c61eafbbfbff6fb7", "url": "https://github.com/treasure-data/digdag/commit/9d32c73010cbb87cadac19a3c61eafbbfbff6fb7", "message": "Fix TDOperatorFactory also", "committedDate": "2020-02-20T09:03:02Z", "type": "forcePushed"}, {"oid": "1f01d62082854883f170d146c6e52e48649c429d", "url": "https://github.com/treasure-data/digdag/commit/1f01d62082854883f170d146c6e52e48649c429d", "message": "Fix wrong catch", "committedDate": "2020-02-21T03:46:34Z", "type": "commit"}, {"oid": "d86d333ab8fc94e806fddeeac11f64064776b4e0", "url": "https://github.com/treasure-data/digdag/commit/d86d333ab8fc94e806fddeeac11f64064776b4e0", "message": "Fix to retry with defaultRetryExecutor not pollingRetryExecutor", "committedDate": "2020-02-21T06:20:00Z", "type": "commit"}, {"oid": "962cc6e968dae395855fadf7b2c11464aa8541dc", "url": "https://github.com/treasure-data/digdag/commit/962cc6e968dae395855fadf7b2c11464aa8541dc", "message": "Delete needless change", "committedDate": "2020-02-21T06:26:42Z", "type": "commit"}, {"oid": "5773201eee873d74491f2d790a3fd8710157ba9a", "url": "https://github.com/treasure-data/digdag/commit/5773201eee873d74491f2d790a3fd8710157ba9a", "message": "Fix to use isNeedNotRetryException for fixed version", "committedDate": "2020-02-21T06:45:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNTcxNQ==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r382435715", "bodyText": "I am not sure 401 and 403 are only authentication errors.\nBut you have investigated it and as result you set condition, it is ok.", "author": "yoyama", "createdAt": "2020-02-21T07:41:03Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/TDOperator.java", "diffHunk": "@@ -418,7 +442,43 @@ static boolean isDeterministicClientException(Exception ex)\n                     return statusCode >= 400 && statusCode < 500;\n             }\n         }\n-        else if (ex instanceof TDClientException) {\n+        return isFailedBeforeSendClientException(ex);\n+    }\n+\n+    static boolean isNeedNotRetryException(Exception ex)\n+    {\n+        if (ex instanceof TDClientHttpException) {\n+            int statusCode = ((TDClientHttpException) ex).getStatusCode();\n+            switch (statusCode) {\n+                case HttpStatus.TOO_MANY_REQUESTS_429:\n+                case HttpStatus.REQUEST_TIMEOUT_408:\n+                case HttpStatus.UNAUTHORIZED_401:\n+                case HttpStatus.FORBIDDEN_403:\n+                    return false;\n+                default:\n+                    // return true if 4xx\n+                    return statusCode >= 400 && statusCode < 500;\n+            }\n+        }\n+        return isFailedBeforeSendClientException(ex);\n+    }\n+\n+    static boolean isAuthenticationErrorException(TDClientHttpException ex)\n+    {\n+        int statusCode = ex.getStatusCode();\n+        switch (statusCode) {\n+            case HttpStatus.UNAUTHORIZED_401:\n+            // This is not for authentication basically, but it may be 403 for auth token error. https://tools.ietf.org/html/rfc6750\n+            case HttpStatus.FORBIDDEN_403:\n+                return true;", "originalCommit": "5773201eee873d74491f2d790a3fd8710157ba9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNzIyNw==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r382437227", "bodyText": "Not serious, but method name may be difficult to understand. If possible rename is better.", "author": "yoyama", "createdAt": "2020-02-21T07:46:01Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/TDOperator.java", "diffHunk": "@@ -418,7 +442,43 @@ static boolean isDeterministicClientException(Exception ex)\n                     return statusCode >= 400 && statusCode < 500;\n             }\n         }\n-        else if (ex instanceof TDClientException) {\n+        return isFailedBeforeSendClientException(ex);\n+    }\n+\n+    static boolean isNeedNotRetryException(Exception ex)", "originalCommit": "5773201eee873d74491f2d790a3fd8710157ba9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxOTM4Mw==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r383619383", "bodyText": "I fixed to isDeterministicException opposite to isDeterministicClientException because it includes non-client(authentication) but deterministic. Please tell me if you have better idea.\n972d0b7", "author": "naritta", "createdAt": "2020-02-25T02:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzNzIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQzODMxNA==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r382438314", "bodyText": "I am not sure this condition is correct or not.\nIf this behavior is different from original, we should clarify the change.", "author": "yoyama", "createdAt": "2020-02-21T07:49:27Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/TDOperator.java", "diffHunk": "@@ -418,7 +442,43 @@ static boolean isDeterministicClientException(Exception ex)\n                     return statusCode >= 400 && statusCode < 500;\n             }\n         }\n-        else if (ex instanceof TDClientException) {\n+        return isFailedBeforeSendClientException(ex);\n+    }\n+\n+    static boolean isNeedNotRetryException(Exception ex)\n+    {\n+        if (ex instanceof TDClientHttpException) {\n+            int statusCode = ((TDClientHttpException) ex).getStatusCode();\n+            switch (statusCode) {\n+                case HttpStatus.TOO_MANY_REQUESTS_429:\n+                case HttpStatus.REQUEST_TIMEOUT_408:\n+                case HttpStatus.UNAUTHORIZED_401:\n+                case HttpStatus.FORBIDDEN_403:\n+                    return false;", "originalCommit": "5773201eee873d74491f2d790a3fd8710157ba9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6e0ad03f10d3582a4b5a1316a85872cfd60d1fd4", "url": "https://github.com/treasure-data/digdag/commit/6e0ad03f10d3582a4b5a1316a85872cfd60d1fd4", "message": "Add integration tests for td operator", "committedDate": "2020-02-21T08:19:46Z", "type": "commit"}, {"oid": "6e0ad03f10d3582a4b5a1316a85872cfd60d1fd4", "url": "https://github.com/treasure-data/digdag/commit/6e0ad03f10d3582a4b5a1316a85872cfd60d1fd4", "message": "Add integration tests for td operator", "committedDate": "2020-02-21T08:19:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MTk0MQ==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r382461941", "bodyText": "This defaultRetryExecutor is still used in TDJobOperator. Is this OK?", "author": "yoyama", "createdAt": "2020-02-21T08:53:02Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/TDOperator.java", "diffHunk": "@@ -67,7 +67,13 @@ public static TDOperator fromConfig(BaseTDClientFactory clientFactory, SystemDef\n \n         TDClient client = clientFactory.createClient(systemDefaultConfig, env, config, secrets);\n \n-        return new TDOperator(client, database);\n+        return new TDOperator(client, database, secrets);\n+    }\n+\n+    public void updateApikey(SecretProvider secrets)\n+    {\n+        String apikey = TDClientFactory.getApikey(secrets);\n+        client = client.withApiKey(apikey);\n     }\n \n     static final RetryExecutor defaultRetryExecutor = retryExecutor()", "originalCommit": "5773201eee873d74491f2d790a3fd8710157ba9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxODc5Nw==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r383618797", "bodyText": "Thanks, I fixed TDJobOperator also here.\n87cf2ba", "author": "naritta", "createdAt": "2020-02-25T01:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MTk0MQ=="}], "type": "inlineReview"}, {"oid": "87cf2ba7c7b3232be7228e896d2e0892a03094cf", "url": "https://github.com/treasure-data/digdag/commit/87cf2ba7c7b3232be7228e896d2e0892a03094cf", "message": "Fix TDJobOperator also to adapt to updating apikey", "committedDate": "2020-02-25T01:50:46Z", "type": "commit"}, {"oid": "972d0b788f7c0ac101c9f9453472fc4ffbbb6db6", "url": "https://github.com/treasure-data/digdag/commit/972d0b788f7c0ac101c9f9453472fc4ffbbb6db6", "message": "Fix exception name to isDeterministicException", "committedDate": "2020-02-25T01:57:03Z", "type": "commit"}, {"oid": "ddd4750b75e6d84cd5e12c5e6d8fb9cb9ccc986a", "url": "https://github.com/treasure-data/digdag/commit/ddd4750b75e6d84cd5e12c5e6d8fb9cb9ccc986a", "message": "Fix to divide retry executor for auth error", "committedDate": "2020-02-25T09:00:41Z", "type": "commit"}, {"oid": "c1c0af1001146e3a67e74cef7882d6fb087a2cca", "url": "https://github.com/treasure-data/digdag/commit/c1c0af1001146e3a67e74cef7882d6fb087a2cca", "message": "Fix TDJobOperator also", "committedDate": "2020-02-25T09:16:05Z", "type": "commit"}, {"oid": "7c747496dba7b117c6fd0bbee78bb58cb5fa6798", "url": "https://github.com/treasure-data/digdag/commit/7c747496dba7b117c6fd0bbee78bb58cb5fa6798", "message": "Fix runWithRetry to use ignoreException as args", "committedDate": "2020-02-25T09:49:44Z", "type": "commit"}, {"oid": "30d6334dd253e238631d5f3ea0c54103fa9a7fc8", "url": "https://github.com/treasure-data/digdag/commit/30d6334dd253e238631d5f3ea0c54103fa9a7fc8", "message": "Fix auth error logic and refactor", "committedDate": "2020-02-26T03:27:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTc0NA==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r384929744", "bodyText": "This method is similar to TDOperator.authenticatinRetryExecutor().\nBut some options are not set.\nCould you explain difference between them ?\nCan't we merge and reuse same logic?", "author": "yoyama", "createdAt": "2020-02-27T06:10:01Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/TDJobOperator.java", "diffHunk": "@@ -7,59 +7,92 @@\n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.treasuredata.client.TDClient;\n+import com.treasuredata.client.TDClientHttpException;\n import com.treasuredata.client.model.TDJob;\n import com.treasuredata.client.model.TDJobSummary;\n import com.treasuredata.client.model.TDResultFormat;\n+import io.digdag.spi.SecretProvider;\n import io.digdag.spi.TaskExecutionException;\n+import io.digdag.util.RetryExecutor;\n import io.digdag.util.RetryExecutor.RetryGiveupException;\n import org.msgpack.core.MessagePack;\n import org.msgpack.core.MessageUnpacker;\n import org.msgpack.value.ArrayValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.concurrent.Callable;\n import java.util.zip.GZIPInputStream;\n \n+import static io.digdag.standards.operator.td.TDOperator.AUTH_MAX_RETRY_LIMIT;\n import static io.digdag.standards.operator.td.TDOperator.defaultRetryExecutor;\n+import static io.digdag.standards.operator.td.TDOperator.isAuthenticationErrorException;\n+import static io.digdag.util.RetryExecutor.retryExecutor;\n \n class TDJobOperator\n {\n-    private final TDClient client;\n+    private TDClient client;\n     private final String jobId;\n+    private final SecretProvider secrets;\n \n-    TDJobOperator(TDClient client, String jobId)\n+    private static final Logger logger = LoggerFactory.getLogger(TDJobOperator.class);\n+\n+    TDJobOperator(TDClient client, String jobId, SecretProvider secrets)\n     {\n         this.client = client;\n         this.jobId = jobId;\n+        this.secrets = secrets;\n+    }\n+\n+    void updateApikey(SecretProvider secrets)\n+    {\n+        String apikey = TDClientFactory.getApikey(secrets);\n+        client = client.withApiKey(apikey);\n+    }\n+\n+    RetryExecutor authenticatinRetryExecutor() {", "originalCommit": "30d6334dd253e238631d5f3ea0c54103fa9a7fc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTU5OA==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r384939598", "bodyText": "updateApikey update client member in each TDOperator and TDJobOperator, and td-client doesn't have overwrite method for itself, and there is only withApiKey which returns new client, I thought I have to update each client member in each class, so I couldn't merge this method with passing client.\nSorry if I'm wrong.", "author": "naritta", "createdAt": "2020-02-27T06:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NDM2Ng==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r384974366", "bodyText": "Got it.  There is a possibility to fix by using base class. But anyway I understand.", "author": "yoyama", "createdAt": "2020-02-27T08:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkyOTc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMDA0OA==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r384930048", "bodyText": "Ditto. It seems complet same logic in TDOperator.", "author": "yoyama", "createdAt": "2020-02-27T06:11:12Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/TDJobOperator.java", "diffHunk": "@@ -7,59 +7,92 @@\n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.treasuredata.client.TDClient;\n+import com.treasuredata.client.TDClientHttpException;\n import com.treasuredata.client.model.TDJob;\n import com.treasuredata.client.model.TDJobSummary;\n import com.treasuredata.client.model.TDResultFormat;\n+import io.digdag.spi.SecretProvider;\n import io.digdag.spi.TaskExecutionException;\n+import io.digdag.util.RetryExecutor;\n import io.digdag.util.RetryExecutor.RetryGiveupException;\n import org.msgpack.core.MessagePack;\n import org.msgpack.core.MessageUnpacker;\n import org.msgpack.value.ArrayValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.concurrent.Callable;\n import java.util.zip.GZIPInputStream;\n \n+import static io.digdag.standards.operator.td.TDOperator.AUTH_MAX_RETRY_LIMIT;\n import static io.digdag.standards.operator.td.TDOperator.defaultRetryExecutor;\n+import static io.digdag.standards.operator.td.TDOperator.isAuthenticationErrorException;\n+import static io.digdag.util.RetryExecutor.retryExecutor;\n \n class TDJobOperator\n {\n-    private final TDClient client;\n+    private TDClient client;\n     private final String jobId;\n+    private final SecretProvider secrets;\n \n-    TDJobOperator(TDClient client, String jobId)\n+    private static final Logger logger = LoggerFactory.getLogger(TDJobOperator.class);\n+\n+    TDJobOperator(TDClient client, String jobId, SecretProvider secrets)\n     {\n         this.client = client;\n         this.jobId = jobId;\n+        this.secrets = secrets;\n+    }\n+\n+    void updateApikey(SecretProvider secrets)\n+    {\n+        String apikey = TDClientFactory.getApikey(secrets);\n+        client = client.withApiKey(apikey);\n+    }\n+\n+    RetryExecutor authenticatinRetryExecutor() {\n+        return defaultRetryExecutor\n+            .withRetryLimit(AUTH_MAX_RETRY_LIMIT)\n+            .onRetry((exception, retryCount, retryLimit, retryWait) -> {\n+                logger.warn(\"apikey will be tried to update by retrying\");\n+                updateApikey(secrets);\n+            })\n+            .retryIf((exception) -> isAuthenticationErrorException(exception));\n     }\n \n     String getJobId()\n     {\n         return jobId;\n     }\n \n-    TDJobSummary getJobStatus()\n+    private <T> T callWithRetry(Callable<T> op)", "originalCommit": "30d6334dd253e238631d5f3ea0c54103fa9a7fc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MDA4NQ==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r384940085", "bodyText": "I couldn't make authenticatinRetryExecutor static or merged with above reason, so I couldn't make this like that also.", "author": "naritta", "createdAt": "2020-02-27T06:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMDA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMDc1Mg==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r384930752", "bodyText": "Logging is good. But warn is the best? In my understand it is not problem so debug or info may be better.", "author": "yoyama", "createdAt": "2020-02-27T06:14:09Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/TDJobOperator.java", "diffHunk": "@@ -7,59 +7,92 @@\n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.treasuredata.client.TDClient;\n+import com.treasuredata.client.TDClientHttpException;\n import com.treasuredata.client.model.TDJob;\n import com.treasuredata.client.model.TDJobSummary;\n import com.treasuredata.client.model.TDResultFormat;\n+import io.digdag.spi.SecretProvider;\n import io.digdag.spi.TaskExecutionException;\n+import io.digdag.util.RetryExecutor;\n import io.digdag.util.RetryExecutor.RetryGiveupException;\n import org.msgpack.core.MessagePack;\n import org.msgpack.core.MessageUnpacker;\n import org.msgpack.value.ArrayValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.concurrent.Callable;\n import java.util.zip.GZIPInputStream;\n \n+import static io.digdag.standards.operator.td.TDOperator.AUTH_MAX_RETRY_LIMIT;\n import static io.digdag.standards.operator.td.TDOperator.defaultRetryExecutor;\n+import static io.digdag.standards.operator.td.TDOperator.isAuthenticationErrorException;\n+import static io.digdag.util.RetryExecutor.retryExecutor;\n \n class TDJobOperator\n {\n-    private final TDClient client;\n+    private TDClient client;\n     private final String jobId;\n+    private final SecretProvider secrets;\n \n-    TDJobOperator(TDClient client, String jobId)\n+    private static final Logger logger = LoggerFactory.getLogger(TDJobOperator.class);\n+\n+    TDJobOperator(TDClient client, String jobId, SecretProvider secrets)\n     {\n         this.client = client;\n         this.jobId = jobId;\n+        this.secrets = secrets;\n+    }\n+\n+    void updateApikey(SecretProvider secrets)\n+    {\n+        String apikey = TDClientFactory.getApikey(secrets);\n+        client = client.withApiKey(apikey);\n+    }\n+\n+    RetryExecutor authenticatinRetryExecutor() {\n+        return defaultRetryExecutor\n+            .withRetryLimit(AUTH_MAX_RETRY_LIMIT)\n+            .onRetry((exception, retryCount, retryLimit, retryWait) -> {\n+                logger.warn(\"apikey will be tried to update by retrying\");", "originalCommit": "30d6334dd253e238631d5f3ea0c54103fa9a7fc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MDE1NQ==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r384940155", "bodyText": "I fixed here. f824f2e", "author": "naritta", "createdAt": "2020-02-27T06:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMDc1Mg=="}], "type": "inlineReview"}, {"oid": "f824f2e8ebed8a9642c28e46caaed67c655b4ae9", "url": "https://github.com/treasure-data/digdag/commit/f824f2e8ebed8a9642c28e46caaed67c655b4ae9", "message": "Fix logger level to debug", "committedDate": "2020-02-27T06:42:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUxODQ3NQ==", "url": "https://github.com/treasure-data/digdag/pull/1362#discussion_r385518475", "bodyText": "No new line?", "author": "yoyama", "createdAt": "2020-02-28T05:51:31Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/td/BaseTDOperator.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.digdag.standards.operator.td;\n+\n+import com.google.common.base.Throwables;\n+import com.treasuredata.client.TDClient;\n+import com.treasuredata.client.TDClientException;\n+import com.treasuredata.client.TDClientHttpException;\n+import io.digdag.spi.SecretProvider;\n+import io.digdag.util.RetryExecutor;\n+import io.digdag.util.RetryExecutor.RetryGiveupException;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.Callable;\n+\n+import static io.digdag.util.RetryExecutor.retryExecutor;\n+\n+public class BaseTDOperator\n+{\n+    private static final Logger logger = LoggerFactory.getLogger(BaseTDOperator.class);\n+\n+    private static final int INITIAL_RETRY_WAIT = 500;\n+    private static final int MAX_RETRY_WAIT = 2000;\n+    private static final int MAX_RETRY_LIMIT = 3;\n+    public static final int AUTH_MAX_RETRY_LIMIT = 1;\n+\n+    TDClient client;\n+    SecretProvider secrets;\n+\n+    static final RetryExecutor defaultRetryExecutor = retryExecutor()\n+            .withInitialRetryWait(INITIAL_RETRY_WAIT)\n+            .withMaxRetryWait(MAX_RETRY_WAIT)\n+            .withRetryLimit(MAX_RETRY_LIMIT)\n+            .retryIf((exception) -> !isDeterministicClientException(exception));\n+\n+    public void updateApikey(SecretProvider secrets)\n+    {\n+        String apikey = TDClientFactory.getApikey(secrets);\n+        client = client.withApiKey(apikey);\n+    }\n+\n+    public RetryExecutor authenticatinRetryExecutor() {\n+        return retryExecutor()\n+                .withInitialRetryWait(INITIAL_RETRY_WAIT)\n+                .withMaxRetryWait(MAX_RETRY_WAIT)\n+                .withRetryLimit(AUTH_MAX_RETRY_LIMIT)\n+                .onRetry((exception, retryCount, retryLimit, retryWait) -> {\n+                    logger.debug(\"apikey will be tried to update by retrying\");\n+                    updateApikey(secrets);\n+                })\n+                .retryIf((exception) -> isAuthenticationErrorException(exception));\n+    }\n+\n+    public <T> T callWithRetry(Callable<T> op)\n+    {\n+        try {\n+            return defaultRetryExecutor.run(() -> {\n+                try {\n+                    return authenticatinRetryExecutor().run(() -> op.call());\n+                } catch (RetryGiveupException ex) {\n+                    throw Throwables.propagate(ex.getCause());\n+                }\n+            });\n+        }\n+        catch (RetryGiveupException ex) {\n+            throw Throwables.propagate(ex.getCause());\n+        }\n+    }\n+\n+    static boolean isDeterministicClientException(Exception ex)\n+    {\n+        if (ex instanceof TDClientHttpException) {\n+            int statusCode = ((TDClientHttpException) ex).getStatusCode();\n+            switch (statusCode) {\n+                case HttpStatus.TOO_MANY_REQUESTS_429:\n+                case HttpStatus.REQUEST_TIMEOUT_408:\n+                    return false;\n+                default:\n+                    // return true if 4xx\n+                    return statusCode >= 400 && statusCode < 500;\n+            }\n+        }\n+        return isFailedBeforeSendClientException(ex);\n+    }\n+\n+    static boolean isFailedBeforeSendClientException(Exception ex)\n+    {\n+        if (ex instanceof TDClientException) {\n+            // failed before sending HTTP request or receiving HTTP response\n+            TDClientException.ErrorType errorType = ((TDClientException) ex).getErrorType();\n+            switch (errorType) {\n+                case INVALID_CONFIGURATION:  // failed to read td.conf, failed to pares integer in properties set to TDClientBuilder, etc.\n+                case INVALID_INPUT:          // early table name validation fails, failed to format request body in json, etc.\n+                    return true;\n+                default:\n+                    // other cases such as PROXY_AUTHENTICATION_FAILURE, SSL_ERROR, REQUEST_TIMEOUT, INTERRUPTED, etc.\n+                    break;  // pass-through\n+            }\n+        }\n+        return false;\n+    }\n+\n+    static boolean isAuthenticationErrorException(Exception ex)\n+    {\n+        if (ex instanceof TDClientHttpException) {\n+            int statusCode = ((TDClientHttpException) ex).getStatusCode();\n+            switch (statusCode) {\n+                case HttpStatus.UNAUTHORIZED_401:\n+                    // This is not for authentication basically, but it may be 403 for auth token error. https://tools.ietf.org/html/rfc6750\n+                case HttpStatus.FORBIDDEN_403:\n+                    return true;\n+                default:\n+                    return false;\n+            }\n+        }\n+        else {\n+            return false;\n+        }\n+    }\n+}", "originalCommit": "8a59c888ef5840f776d8e696c80a39c361c2cf12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6afc81b4f4114a71ad9e18df8155e9443fc08b2f", "url": "https://github.com/treasure-data/digdag/commit/6afc81b4f4114a71ad9e18df8155e9443fc08b2f", "message": "Create BaseTDOperator to extend in each TD operator", "committedDate": "2020-02-28T09:08:03Z", "type": "commit"}, {"oid": "6afc81b4f4114a71ad9e18df8155e9443fc08b2f", "url": "https://github.com/treasure-data/digdag/commit/6afc81b4f4114a71ad9e18df8155e9443fc08b2f", "message": "Create BaseTDOperator to extend in each TD operator", "committedDate": "2020-02-28T09:08:03Z", "type": "forcePushed"}]}