{"pr_number": 445, "pr_title": "JSS RSA-PSS support first cut.", "pr_createdAt": "2020-03-25T18:21:46Z", "pr_url": "https://github.com/dogtagpki/jss/pull/445", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5OTY4MQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398099681", "bodyText": "I'm fine with these names for clarity and specifying which hash algorithm to use, but please add the supported name too, and allow for detection of the signature parameters:\n(from SunRsaSignEntries.java in JDK11)\n        map.put(\"Signature.RSASSA-PSS\",\n                \"sun.security.rsa.RSAPSSSignature\");\nAnd also the other aliases they expect:\nsrc/java.base/share/classes/sun/security/rsa/SunRsaSignEntries.java:71:        map.put(\"Signature.RSASSA-PSS\",\nsrc/java.base/share/classes/sun/security/rsa/SunRsaSignEntries.java:129:        map.put(\"Alg.Alias.Signature.1.2.840.113549.1.1.10\",     \"RSASSA-PSS\");\nsrc/java.base/share/classes/sun/security/rsa/SunRsaSignEntries.java:130:        map.put(\"Alg.Alias.Signature.OID.1.2.840.113549.1.1.10\", \"RSASSA-PSS\");", "author": "cipherboy", "createdAt": "2020-03-25T19:02:40Z", "path": "org/mozilla/jss/JSSProvider.java", "diffHunk": "@@ -59,6 +59,21 @@ public JSSProvider() {\n         put(\"Alg.Alias.Signature.SHA256/RSA\", \"SHA-256/RSA\");\n         put(\"Alg.Alias.Signature.SHA256withRSA\", \"SHA-256/RSA\");\n \n+        put(\"Signature.SHA-256/RSA/PSS\",", "originalCommit": "33beff9d660b894410da2534695e377fbfa42285", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDY3MQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034671", "bodyText": "Done.", "author": "jmagne", "createdAt": "2020-03-27T04:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5OTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMDM4NQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398100385", "bodyText": "I'd keep a newline I think.", "author": "cipherboy", "createdAt": "2020-03-25T19:03:49Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -22,7 +22,10 @@\n import java.io.Serializable;\n import java.security.AlgorithmParameters;\n import java.security.NoSuchAlgorithmException;\n-\n+import java.security.NoSuchProviderException;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;", "originalCommit": "33beff9d660b894410da2534695e377fbfa42285", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDcwNA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034704", "bodyText": "Done, I think :)", "author": "jmagne", "createdAt": "2020-03-27T04:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMDM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMjE0Mg==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398102142", "bodyText": "I'd remove this for review ;-)", "author": "cipherboy", "createdAt": "2020-03-25T19:06:56Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -204,8 +291,19 @@ public AlgorithmId() {\n \n     protected void decodeParams() throws IOException {\n         try {\n-            this.algParams = AlgorithmParameters.getInstance\n-                    (this.algid.toString());\n+\n+            if (algid.equals(AlgorithmId.rsaPSS_oid)) {\n+                try {\n+                    //dumpBytes(this.params.toByteArray());", "originalCommit": "33beff9d660b894410da2534695e377fbfa42285", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDczOA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034738", "bodyText": "Done.", "author": "jmagne", "createdAt": "2020-03-27T04:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMjE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMzE4NQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r398103185", "bodyText": "This'd be simpler if we wrote:\nif (!algName.contains(\"PSS\")) { throw Exception(...) } and then we wouldn't need the body indented.", "author": "cipherboy", "createdAt": "2020-03-25T19:08:36Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -552,7 +714,64 @@ public final boolean equals(ObjectIdentifier id) {\n         return algid.equals(id);\n     }\n \n+    public static AlgorithmParameters createPSSAlgorithmParametersFromData(byte[] der) throws Exception {\n+        if (der == null) {\n+            throw new Exception(\"Invalid input data.\");\n+        }\n+        AlgorithmParameters pssParams = null;\n+        try {\n+            pssParams = AlgorithmParameters.getInstance(\"RSAPSSAlgorithmParameters\", \"Mozilla-JSS\");\n+        } catch (NoSuchProviderException e) {\n+            throw new Exception(e);\n+        }\n \n+        try {\n+            pssParams.init(der);\n+        } catch (IOException e) {\n+            throw new Exception(\"Error intializing RSAPSS parameters: \" + e);\n+        }\n+        return pssParams;\n+    }\n+    /* Used to create the PSS algorithm params needed for RSA PSS signatures\n+     * for now only support the RSAPSS algoritm with the SHA256 digest\n+     * this can be extended to support SHA384 and 512 PSS digests.\n+    */\n+    public static AlgorithmParameters createPSSAlgorithmParameters(String algName) throws Exception {\n+        if (algName == null) {\n+            throw new Exception(\"Invalid Algorithm name input.\");\n+        }\n+        AlgorithmParameters pssParams = null;\n+        PSSParameterSpec pssSpec = null;\n+        // Make sure we are in the RSA PSS family\n+        if (algName.contains(\"PSS\")) {", "originalCommit": "33beff9d660b894410da2534695e377fbfa42285", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAzNDgwNg==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399034806", "bodyText": "Done.", "author": "jmagne", "createdAt": "2020-03-27T04:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMzE4NQ=="}], "type": "inlineReview"}, {"oid": "1ff5ca3c36780022fc61b4876c7d8aa33421ea35", "url": "https://github.com/dogtagpki/jss/commit/1ff5ca3c36780022fc61b4876c7d8aa33421ea35", "message": "JSS RSA-PSS support first cut.\n\nProvide support for the various SHAxxxwithRSAPSS algorithms.\n\nSupprt for 256, 384, and 512 variants included.\nIncluded test case for SHA256withRSA/PSS.\n\nThis fix also requires a corresponding fix to the pki server in\norder to exercise this functionality in the context of a pki\nca server.", "committedDate": "2020-03-26T18:41:33Z", "type": "forcePushed"}, {"oid": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "url": "https://github.com/dogtagpki/jss/commit/9206e82366e270106187f7b7cb4a0ff0fba5ea35", "message": "JSS RSA-PSS support first cut.\n\nProvide support for the various SHAxxxwithRSAPSS algorithms.\n\nSupprt for 256, 384, and 512 variants included.\nIncluded test case for SHA256withRSA/PSS.\n\nThis fix also requires a corresponding fix to the pki server in\norder to exercise this functionality in the context of a pki\nca server.\n\nAdd some review suggestions.", "committedDate": "2020-03-27T04:46:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MTYyNw==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399451627", "bodyText": "Not sure I understand this one. Shouldn't we fail here if no algorithm was specified?", "author": "cipherboy", "createdAt": "2020-03-27T18:09:27Z", "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }\n+    }\n+\n+    private Algorithm getRSAPSSDigestAlgFromSpec(PSSParameterSpec params) {\n+         String hashAlgName = params.getDigestAlgorithm();\n+         Algorithm hashAlg = null;\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+            hashAlg =  DigestAlgorithm.SHA512;\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+            hashAlg =  DigestAlgorithm.SHA384;\n+        } else {\n+            hashAlg =  DigestAlgorithm.SHA256;", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MjkxNA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582914", "bodyText": "Done, throws exception.", "author": "jmagne", "createdAt": "2020-03-27T23:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MTYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MjAwOA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399452008", "bodyText": "Do we want to leave an else block and say it isn't implemented / supported to pass parameters to other signature schemes?", "author": "cipherboy", "createdAt": "2020-03-27T18:10:03Z", "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4Mjk3Mg==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399582972", "bodyText": "Done, throw exception.", "author": "jmagne", "createdAt": "2020-03-27T23:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MjAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MjQ5NQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399452495", "bodyText": "Could we keep the indentation the same? Thanks!", "author": "cipherboy", "createdAt": "2020-03-27T18:10:53Z", "path": "org/mozilla/jss/pkcs11/PK11Signature.java", "diffHunk": "@@ -317,12 +334,47 @@ native protected boolean engineVerifyNative(byte[] sigBytes)\n     public void engineSetParameter(AlgorithmParameterSpec params)\n         throws InvalidAlgorithmParameterException, TokenException\n     {\n-        Assert.notYetImplemented(\"PK11Signature.engineSetParameter\");\n+        //For now we only care about RSAPSS\n+        if( isRSAPSSAlgorithm((SignatureAlgorithm) algorithm) ) {\n+            digestAlgorithm = getRSAPSSDigestAlgFromSpec((PSSParameterSpec) params);\n+        }\n+    }\n+\n+    private Algorithm getRSAPSSDigestAlgFromSpec(PSSParameterSpec params) {\n+         String hashAlgName = params.getDigestAlgorithm();\n+         Algorithm hashAlg = null;\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+            hashAlg =  DigestAlgorithm.SHA512;\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+            hashAlg =  DigestAlgorithm.SHA384;\n+        } else {\n+            hashAlg =  DigestAlgorithm.SHA256;\n+        }\n+\n+        return hashAlg;\n+    }\n+\n+    private boolean isRSAPSSAlgorithm(SignatureAlgorithm algorithm) {\n+\n+        if(algorithm == null) {\n+            return false;\n+        }\n+        if( algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA256Digest\n+            || algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA384Digest \n+            || algorithm == SignatureAlgorithm.RSAPSSSignatureWithSHA512Digest\n+            || algorithm == SignatureAlgorithm.RSAPSSSignature) {\n+\n+            return true;\n+        }\n+        return false;\n     }\n \n \tprotected PK11Token token;\n \tprotected TokenProxy tokenProxy;\n \tprotected Algorithm algorithm;\n+        protected Algorithm digestAlgorithm;", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzA3NQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583075", "bodyText": "There was a mixup of this and existing code. I just fixed them all in that section.", "author": "jmagne", "createdAt": "2020-03-27T23:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1MjQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTA4MQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399455081", "bodyText": "At least a separate line? :-)", "author": "cipherboy", "createdAt": "2020-03-27T18:15:36Z", "path": "org/mozilla/jss/provider/java/security/JSSSignatureSpi.java", "diffHunk": "@@ -35,12 +36,16 @@ public void engineInitSign(java.security.PrivateKey privateKey)\n     {\n         try {\n             sig = getSigContext(privateKey);\n+            if(paramSpec != null) sig.setParameter(paramSpec);", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzExNg==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583116", "bodyText": "Done.", "author": "jmagne", "createdAt": "2020-03-27T23:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NTA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MDc1MA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399460750", "bodyText": "Could we remove this too? And the comments above?", "author": "cipherboy", "createdAt": "2020-03-27T18:25:52Z", "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+/*  RSASSA-PSS-params ::= SEQUENCE {\n+   hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n+   maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n+   saltLength         [2] INTEGER  DEFAULT 20,\n+   trailerField       [3] INTEGER  DEFAULT 1\n+ }\n+\n+where\n+\n+ OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+   { OID id-sha1 PARAMETERS NULL   }|\n+   { OID id-sha224 PARAMETERS NULL   }|\n+   { OID id-sha256 PARAMETERS NULL }|\n+   { OID id-sha384 PARAMETERS NULL }|\n+   { OID id-sha512 PARAMETERS NULL },\n+   ...  -- Allows for future expansion --\n+ }\n+\n+ PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+   { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n+   ...  -- Allows for future expansion --\n+ }\n+*/\n+\n+package org.mozilla.jss.provider.java.security;\n+\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.PSSParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.io.IOException;\n+import org.mozilla.jss.util.Assert;\n+import org.mozilla.jss.netscape.security.util.BigInt;\n+import org.mozilla.jss.netscape.security.x509.AlgorithmId;\n+import org.mozilla.jss.netscape.security.util.DerOutputStream;\n+import org.mozilla.jss.netscape.security.util.DerInputStream;\n+import org.mozilla.jss.netscape.security.util.DerValue;\n+import org.mozilla.jss.netscape.security.util.ObjectIdentifier;\n+import org.mozilla.jss.asn1.ASN1Template;\n+import org.mozilla.jss.asn1.ASN1Value;\n+import org.mozilla.jss.asn1.INTEGER;\n+import org.mozilla.jss.asn1.InvalidBERException;\n+import org.mozilla.jss.asn1.OBJECT_IDENTIFIER;\n+import org.mozilla.jss.asn1.OCTET_STRING;\n+import org.mozilla.jss.asn1.SEQUENCE;\n+import org.mozilla.jss.asn1.Tag;\n+\n+public class RSAPSSAlgorithmParameters extends AlgorithmParametersSpi {\n+\n+    public final static AlgorithmId defaultHashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+    public final static AlgorithmId defaultMaskGenFunc  = new AlgorithmId(AlgorithmId.MGF1_oid);\n+    public final static BigInt          defaultSaltLen = new BigInt(20);\n+    public final static BigInt          defaultTrailerField = new BigInt(1);\n+\n+    private PSSParameterSpec spec = PSSParameterSpec.DEFAULT;\n+    private AlgorithmId hashAlg = defaultHashAlg;\n+    private AlgorithmId maskGenFunc = defaultMaskGenFunc;\n+    private BigInt saltLen = defaultSaltLen;\n+    private BigInt trailerField = defaultTrailerField;\n+\n+    public RSAPSSAlgorithmParameters() {\n+    }\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        spec = (PSSParameterSpec) paramSpec;\n+        populateFromSpec();\n+    }\n+    \n+    @Override\n+    protected  AlgorithmParameterSpec engineGetParameterSpec(Class paramSpec) \n+            throws InvalidParameterSpecException  {\n+        if (paramSpec == PSSParameterSpec.class || paramSpec == AlgorithmParameterSpec.class) {\n+            return spec;\n+        }\n+\n+        throw new InvalidParameterSpecException(\"unknown parameter spec passed to PSS parameters object.\");\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        decode(new DerInputStream(params), params);\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineInit(byte[],String) not supported\");\n+        throw new IOException(\"engineInit(byte[],String) not supported\");\n+    }\n+ \n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        encode(out);\n+        return out.toByteArray();\n+\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineGetEncoded(String format)) not supported\");\n+        throw new IOException(\"engineGetEncoded(String format)) not supported\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        String str = new String(\"Mozilla-JSS PSSAlgorithmParameters \" +  getClass().getName() + \" HashAlg: \" + spec.getDigestAlgorithm() + \" MaskGenAlg: \" + spec.getMGFAlgorithm() );\n+        //System.out.println(\"engineToString: \" + str);\n+        return str;\n+    }\n+\n+    private void decode(DerInputStream in , byte[] encoded) throws IOException {\n+        if(in == null) {\n+           throw new IOException(\"Invalid input.\");\n+        }\n+\n+        //System.out.println(\"Entering decode \");\n+\n+        // Sequence has 3 members, trailer field ignored\n+        DerValue seq[] = in.getSequence(3);\n+\n+        if(seq.length != 3) {\n+            throw new IOException(\"Invalid data!\");\n+        }\n+        //System.out.println(\"seq[0] \" + seq[0].toString());\n+        //System.out.println(\"seq[1] \" + seq[1].toString());\n+        //System.out.println(\"seq[2] \" + seq[2].toString());\n+\n+        if(seq[0].isContextSpecific((byte)0)) {\n+             seq[0]  = seq[0].data.getDerValue();\n+        } else\n+             throw new IOException(\"Invalid encoded data.\");\n+\n+        AlgorithmId algid = AlgorithmId.parse(seq[0]);\n+        //System.out.println(\"AlgName: \" + algid.getName());\n+\n+        String specAlgName = getSpecAlgName(algid.getName());\n+\n+        String specMGF1Name = \"\";\n+        // Now the MFG1 parameter hash fun is the same as the main hash func.\n+        MGF1ParameterSpec specMFG1ParamSpec = new MGF1ParameterSpec(specAlgName);\n+\n+        if(seq[1].isContextSpecific((byte)1)) {\n+            seq[1]  = seq[1].data.getDerValue();\n+        } else\n+            throw new IOException(\"Invalid encoded data.\");\n+\n+        DerInputStream mgf1Str = new DerInputStream(seq[1].toByteArray());\n+        DerValue[] seqMgf1 = mgf1Str.getSequence(2);\n+\n+        //dumpBytes(seqMgf1[0].toByteArray());\n+        //dumpBytes(seqMgf1[1].toByteArray());\n+\n+        ObjectIdentifier mgf1OID = seqMgf1[0].getOID();\n+\n+        //System.out.println(\"mfg1OID: \" + mgf1OID.toString());\n+\n+        if(!mgf1OID.equals(AlgorithmId.MGF1_oid)) \n+           throw new IOException(\"Invalid encoded data.\");\n+        else\n+           specMGF1Name = \"MGF1\";\n+               \n+        //dumpBytes(seq[1].toByteArray());\n+\n+        if(seq[2].isContextSpecific((byte)2))\n+            seq[2]  = seq[2].data.getDerValue();\n+        else\n+            throw new IOException(\"Invalid encoded data.\");\n+\n+        //dumpBytes(seq[2].toByteArray()); \n+\n+        BigInt sLength = seq[2].getInteger();\n+\n+        //System.out.println(\"saltLen: \" + sLength.toString());\n+        this.spec = new PSSParameterSpec(specAlgName, specMGF1Name, specMFG1ParamSpec, sLength.toInt(), 1 /*always defaut trailer */);\n+              \n+        populateFromSpec(); \n+    }\n+ \n+    private void encode(DerOutputStream out) throws IOException {\n+\n+        try(  \n+            DerOutputStream tmp = new DerOutputStream();\n+            DerOutputStream mgf = new DerOutputStream();\n+            DerOutputStream seq1 = new DerOutputStream();\n+            DerOutputStream intStream = new DerOutputStream();\n+        ) {\n+            // Hash algorithm\n+\n+            //System.out.println(\"Entering encode \");\n+            hashAlg.derEncodeWithContext(tmp,0);\n+\n+            // Mask Gen Function Sequence\n+            mgf.putOID(maskGenFunc.getOID());\n+\n+            // MGF hash alg is the same as the hash Alg at this point.\n+\n+            hashAlg.encode(mgf);\n+            seq1.write(DerValue.tag_Sequence,mgf);\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT,\n+                                             true, (byte) 1), seq1);\n+\n+            // Salt Length\n+            intStream.putInteger(saltLen);\n+\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 2),\n+                    intStream);\n+\n+            //Ignore trailer field, it never changes\n+\n+            // over all sequence tag\n+            out.write(DerValue.tag_Sequence, tmp);\n+\n+            byte[] data = out.toByteArray();\n+            //dumpBytes(data);\n+        }\n+    }\n+\n+    private void populateFromSpec() {\n+        if(spec == null || hashAlg == null) {\n+            return;\n+        }\n+\n+        String hashAlgName = spec.getDigestAlgorithm();\n+        String maskGenName = spec.getMGFAlgorithm();\n+\n+        int saltLen = spec.getSaltLength();\n+        this.saltLen = new BigInt(saltLen);\n+        int trailer = spec.getTrailerField();\n+\n+        // Create the hash alg and mask gen func objects\n+\n+        if(hashAlgName.equals(\"SHA-256\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA256_oid);\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA512_oid);\n+        }  else if(hashAlgName.equals(\"SHA-224\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA224_oid);\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA384_oid);\n+        } else {\n+           hashAlg =  new AlgorithmId(AlgorithmId.SHA_oid);\n+        }\n+    }\n+\n+    private String getSpecAlgName(String algName) {\n+    \n+        if(\"SHA256\".equals(algName)) \n+            return \"SHA-256\"; \n+        else if(\"SHA384\".equals(algName))\n+            return \"SHA-384\";\n+        else if(\"SHA512\".equals(algName))\n+            return \"SHA-512\";\n+        else //default\n+            return \"SHA-1\";\n+\n+    }\n+    private static void dumpBytes(byte[] data) {", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzE0OA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583148", "bodyText": "Done.", "author": "jmagne", "createdAt": "2020-03-27T23:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MDc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MzkzOQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399483939", "bodyText": "I think if you remove the space here, it'll make javadocs happy.", "author": "cipherboy", "createdAt": "2020-03-27T19:09:58Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzE4MQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583181", "bodyText": "Done.", "author": "jmagne", "createdAt": "2020-03-27T23:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4MzkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjMyMA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399486320", "bodyText": "Remove space above, and should this also throw NSAE?", "author": "cipherboy", "createdAt": "2020-03-27T19:14:35Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, AlgorithmParameters params)\n+        throws IOException {\n+       algid = oid;\n+       algParams = params;\n+\n+       if(algParams != null ) {\n+           this.params = new DerValue(algParams.getEncoded());\n+       }\n+    }\n+\n+    /**\n+     * Constructor that takes the oid and name, so the name can be cachedf or laster use.\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n+     *\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, String algName) throws  IOException {", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzIwNw==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583207", "bodyText": "Done.", "author": "jmagne", "createdAt": "2020-03-27T23:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjQ4Mg==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399486482", "bodyText": "Same as above, seems like this should throw the new exceptions if at all possible.", "author": "cipherboy", "createdAt": "2020-03-27T19:14:53Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, AlgorithmParameters params)\n+        throws IOException {\n+       algid = oid;\n+       algParams = params;\n+\n+       if(algParams != null ) {\n+           this.params = new DerValue(algParams.getEncoded());\n+       }\n+    }\n+\n+    /**\n+     * Constructor that takes the oid and name, so the name can be cachedf or laster use.\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n+     *\n+     */\n+\n+    public AlgorithmId(ObjectIdentifier oid, String algName) throws  IOException {\n+        algid = oid;\n+        cachedAlgName = algName;\n+        /* Create the params if our algorithm is RSA PSS related */\n+        if (algName != null && algName.contains(\"PSS\")) {\n+            try {\n+                this.algParams = getPSSParams(algName);\n+                this.params = new DerValue(this.algParams.getEncoded());\n+            } catch (Exception e) {\n+                throw new IOException(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Constructs an  algorithm ID with possible RSAPSS params.\n      *\n      * @param oid the identifier for the algorithm\n+     * @throws NoSuchAlgorithmException\n+     * @throws IOException\n      */\n     public AlgorithmId(ObjectIdentifier oid) {", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzI0NQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583245", "bodyText": "Done, I think :)", "author": "jmagne", "createdAt": "2020-03-27T23:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzgwOQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583809", "bodyText": "OH , now I remember, I wanted to keep this the same signature, since it is heavily used, could be breaking code all over the place.", "author": "jmagne", "createdAt": "2020-03-27T23:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NjQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NzM0NA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399487344", "bodyText": "Same as below; NSAE and IO Exception should be in the constructor and remove space.", "author": "cipherboy", "createdAt": "2020-03-27T19:16:30Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -177,12 +189,88 @@ public static AlgorithmId parse(byte[] val)\n     }\n \n     /**\n-     * Constructs a parameterless algorithm ID.\n+     * Constructs an algorithm ID with a fully encoded params object\n+     *\n+     * @ param oid the identifier for the algorithm\n+     * @ param params the fully encoded AlgorithmIdentifier Object\n+     */\n+", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NzU1MA==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399487550", "bodyText": "Spare newline. :-)", "author": "cipherboy", "createdAt": "2020-03-27T19:16:57Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -256,6 +353,47 @@ public void derEncode(OutputStream out) throws IOException {\n         }\n     }\n \n+    /**\n+     * DER encode this object onto an output stream.\n+     * Implements the <code>DerEncoder</code> interface.\n+     *\n+     * @param out", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzMwNw==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583307", "bodyText": "Done.", "author": "jmagne", "createdAt": "2020-03-27T23:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NzU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTE3Mw==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399489173", "bodyText": "Just askin', but why was SHA224 added here? We don't really support SHA224 anywhere else in JSS.", "author": "cipherboy", "createdAt": "2020-03-27T19:19:52Z", "path": "org/mozilla/jss/netscape/security/x509/AlgorithmId.java", "diffHunk": "@@ -566,7 +784,8 @@ public final boolean equals(ObjectIdentifier id) {\n     private static final int SHA256_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 1 };\n     private static final int SHA384_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 2 };\n     private static final int SHA512_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 3 };\n-\n+    private static final int SHA224_data[] = { 2, 16, 840, 1, 101, 3, 4, 2, 4 };", "originalCommit": "9206e82366e270106187f7b7cb4a0ff0fba5ea35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NTMxMw==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399565313", "bodyText": "I was doing this way back when for completeness. I think I will just get rid of it.", "author": "jmagne", "createdAt": "2020-03-27T22:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzMzNQ==", "url": "https://github.com/dogtagpki/jss/pull/445#discussion_r399583335", "bodyText": "Got rid of it.", "author": "jmagne", "createdAt": "2020-03-27T23:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4OTE3Mw=="}], "type": "inlineReview"}, {"oid": "97e52f12fc2aab9ad8c276a1e8028c4a32839902", "url": "https://github.com/dogtagpki/jss/commit/97e52f12fc2aab9ad8c276a1e8028c4a32839902", "message": "JSS RSA-PSS support first cut.\n\nProvide support for the various SHAxxxwithRSAPSS algorithms.\n\nSupprt for 256, 384, and 512 variants included.\nIncluded test case for SHA256withRSA/PSS.\n\nThis fix also requires a corresponding fix to the pki server in\norder to exercise this functionality in the context of a pki\nca server.\n\nAdd some review suggestions.\nMore reivew suggestions.", "committedDate": "2020-03-27T23:28:53Z", "type": "commit"}, {"oid": "97e52f12fc2aab9ad8c276a1e8028c4a32839902", "url": "https://github.com/dogtagpki/jss/commit/97e52f12fc2aab9ad8c276a1e8028c4a32839902", "message": "JSS RSA-PSS support first cut.\n\nProvide support for the various SHAxxxwithRSAPSS algorithms.\n\nSupprt for 256, 384, and 512 variants included.\nIncluded test case for SHA256withRSA/PSS.\n\nThis fix also requires a corresponding fix to the pki server in\norder to exercise this functionality in the context of a pki\nca server.\n\nAdd some review suggestions.\nMore reivew suggestions.", "committedDate": "2020-03-27T23:28:53Z", "type": "forcePushed"}]}