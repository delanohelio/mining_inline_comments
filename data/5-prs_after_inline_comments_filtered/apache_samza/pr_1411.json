{"pr_number": 1411, "pr_title": "SAMZA-2577 : Adding support for Async-Logger in Log4j2 Stream Appender", "pr_createdAt": "2020-08-10T23:12:41Z", "pr_url": "https://github.com/apache/samza/pull/1411", "timeline": [{"oid": "3416d1f41dd3eb204adabb9fea589234eca11946", "url": "https://github.com/apache/samza/commit/3416d1f41dd3eb204adabb9fea589234eca11946", "message": "Adding support for Async-Logger in Log4j2 Stream Appender", "committedDate": "2020-08-10T22:55:22Z", "type": "commit"}, {"oid": "9d4382489c0a99e02c754534a6ca96a3af0c3fe6", "url": "https://github.com/apache/samza/commit/9d4382489c0a99e02c754534a6ca96a3af0c3fe6", "message": "Revert \"Adding support for Async-Logger in Log4j2 Stream Appender\"\n\nThis reverts commit 3416d1f41dd3eb204adabb9fea589234eca11946.", "committedDate": "2020-08-10T23:26:23Z", "type": "commit"}, {"oid": "d051709e4a37b3b6e677dedb3a8138fa6d20abeb", "url": "https://github.com/apache/samza/commit/d051709e4a37b3b6e677dedb3a8138fa6d20abeb", "message": "Adding support for Async-Logger in Log4j2 Stream Appender", "committedDate": "2020-08-10T23:35:49Z", "type": "commit"}, {"oid": "deff09544d9728b84b52290e03b40e93ed2c66c9", "url": "https://github.com/apache/samza/commit/deff09544d9728b84b52290e03b40e93ed2c66c9", "message": "Updating MockSystemProducerAppender", "committedDate": "2020-08-10T23:41:35Z", "type": "commit"}, {"oid": "1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f", "url": "https://github.com/apache/samza/commit/1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f", "message": "Checkstyle fixes", "committedDate": "2020-08-11T05:22:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MjE1Nw==", "url": "https://github.com/apache/samza/pull/1411#discussion_r468862157", "bodyText": "Now that you have cached keyBytes at the instance level, can we get rid of the local keyBytes byte array?", "author": "mynameborat", "createdAt": "2020-08-11T21:00:36Z", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -397,15 +425,7 @@ private void startTransferThread() {\n       Runnable transferFromQueueToSystem = () -> {\n         while (!Thread.currentThread().isInterrupted()) {\n           try {\n-            byte[] serializedLogEvent = logQueue.take();\n-\n-            metrics.logMessagesBytesSent.inc(serializedLogEvent.length);\n-            metrics.logMessagesCountSent.inc();\n-\n-            OutgoingMessageEnvelope outgoingMessageEnvelope =\n-                new OutgoingMessageEnvelope(systemStream, keyBytes, serializedLogEvent);\n-            systemProducer.send(SOURCE, outgoingMessageEnvelope);\n-\n+            sendEventToSystemProducer(logQueue.take());", "originalCommit": "1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MzcwMw==", "url": "https://github.com/apache/samza/pull/1411#discussion_r468863703", "bodyText": "Capturing our offline conversation - \"We will need this to replaced with System.err as the recursion will drop this message in the event of not able to acquire the lock within the timeout\"", "author": "mynameborat", "createdAt": "2020-08-11T21:03:46Z", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -239,6 +227,46 @@ public void append(LogEvent event) {\n     }\n   }\n \n+  /**\n+   * If async-Logger is enabled, the log-event is sent directly to the systemProducer. Else, the event is serialized\n+   * and added to a bounded blocking queue, before returning to the \"synchronous\" caller.\n+   * @param event the log event to append\n+   * @throws InterruptedException\n+   */\n+  private void handleEvent(LogEvent event) throws InterruptedException {\n+    if (usingAsyncLogger) {\n+      sendEventToSystemProducer(encodeLogEventToBytes(event));\n+      return;\n+    }\n+\n+    // Serialize the event before adding to the queue to leverage the caller thread\n+    // and ensure that the transferThread can keep up.\n+    if (!logQueue.offer(encodeLogEventToBytes(event), queueTimeoutS, TimeUnit.SECONDS)) {\n+      // Do NOT retry adding system to the queue. Dropping the event allows us to alleviate the unlikely\n+      // possibility of a deadlock, which can arise due to a circular dependency between the SystemProducer\n+      // which is used for StreamAppender and the log, which uses StreamAppender. Any locks held in the callstack\n+      // of those two code paths can cause a deadlock. Dropping the event allows us to proceed.\n+\n+      // Scenario:\n+      // T1: holds L1 and is waiting for L2\n+      // T2: holds L2 and is waiting to produce to BQ1 which is drained by T3 (SystemProducer) which is waiting for L1\n+\n+      // This has happened due to locks in Kafka and log4j (see SAMZA-1537), which are both out of our control,\n+      // so dropping events in the StreamAppender is our best recourse.\n+\n+      // Drain the queue instead of dropping one message just to reduce the frequency of warn logs above.\n+      int messagesDropped = logQueue.drainTo(new ArrayList<>()) + 1; // +1 because of the current log event\n+      log.warn(String.format(\"Exceeded timeout %ss while trying to log to %s. Dropping %d log messages.\",\n+          queueTimeoutS,\n+          systemStream.toString(),\n+          messagesDropped));", "originalCommit": "1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e9acf7c2c8a487c6f89cfaa0ce66a220c008058a", "url": "https://github.com/apache/samza/commit/e9acf7c2c8a487c6f89cfaa0ce66a220c008058a", "message": "Moving to use system.out and system.err instead of log in stream-appender, addressing comments", "committedDate": "2020-08-11T22:48:59Z", "type": "commit"}, {"oid": "4f6ecc4e1d11a1dccccd5dbf21a74027ca851998", "url": "https://github.com/apache/samza/commit/4f6ecc4e1d11a1dccccd5dbf21a74027ca851998", "message": "Adding unit-test for asyncLogger + stream appender for log4j2", "committedDate": "2020-08-12T06:00:43Z", "type": "commit"}]}