{"pr_number": 1434, "pr_title": "SAMZA-2595: Updated MonitorService to use separate ScheduleExecutor for each monitor", "pr_createdAt": "2020-10-12T21:08:47Z", "pr_url": "https://github.com/apache/samza/pull/1434", "timeline": [{"oid": "123e921359ce56a8e2ec6c0a7e2da090dba22828", "url": "https://github.com/apache/samza/commit/123e921359ce56a8e2ec6c0a7e2da090dba22828", "message": "Updated MonitorService to use separate ScheduleExecutor for each monitor", "committedDate": "2020-10-12T20:59:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNTI0OA==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503535248", "bodyText": "If this is the only place this interface was being used, let's delete the interface + impl.", "author": "prateekm", "createdAt": "2020-10-12T21:14:05Z", "path": "samza-rest/src/main/java/org/apache/samza/monitor/SamzaMonitorService.java", "diffHunk": "@@ -43,16 +51,14 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(SamzaMonitorService.class);\n   private static final SecureRandom RANDOM = new SecureRandom();\n \n-  private final SchedulingProvider scheduler;", "originalCommit": "123e921359ce56a8e2ec6c0a7e2da090dba22828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MTgzNw==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503541837", "bodyText": "Deleted the unused interface and it's impl", "author": "shekhars-li", "createdAt": "2020-10-12T21:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNTI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNTU0NA==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503535544", "bodyText": "\"for future executions of the same monitor. New execution is ..\"", "author": "prateekm", "createdAt": "2020-10-12T21:14:57Z", "path": "samza-rest/src/main/java/org/apache/samza/monitor/SamzaMonitorService.java", "diffHunk": "@@ -67,8 +73,12 @@ public void start() {\n           int monitorSchedulingJitterInMs = (int) (RANDOM.nextInt(schedulingIntervalInMs + 1) * (monitorConfig.getSchedulingJitterPercent() / 100.0));\n           schedulingIntervalInMs += monitorSchedulingJitterInMs;\n           LOGGER.info(\"Scheduling the monitor: {} to run every {} ms.\", monitorName, schedulingIntervalInMs);\n-          scheduler.schedule(getRunnable(instantiateMonitor(monitorName, monitorConfig, metricsRegistry)),\n-              schedulingIntervalInMs);\n+          // Create a new SchedulerExecutorService for each monitor. This ensures that a long running monitor service\n+          // does not block another monitor from scheduling/running. A long running monitor will not create a backlog\n+          // of work for future monitors of same type. A new monitor is scheduled only when current work is complete.", "originalCommit": "123e921359ce56a8e2ec6c0a7e2da090dba22828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNTg1MQ==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503535851", "bodyText": "Where is this list updated?", "author": "prateekm", "createdAt": "2020-10-12T21:15:37Z", "path": "samza-rest/src/main/java/org/apache/samza/monitor/SamzaMonitorService.java", "diffHunk": "@@ -43,16 +51,14 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(SamzaMonitorService.class);\n   private static final SecureRandom RANDOM = new SecureRandom();\n \n-  private final SchedulingProvider scheduler;\n   private final SamzaRestConfig config;\n   private final MetricsRegistry metricsRegistry;\n-\n+  private final List<ScheduledExecutorService> scheduledExecutors;\n   public SamzaMonitorService(SamzaRestConfig config,\n-                             MetricsRegistry metricsRegistry,\n-                             SchedulingProvider schedulingProvider) {\n+      MetricsRegistry metricsRegistry) {\n     this.config = config;\n     this.metricsRegistry = metricsRegistry;\n-    this.scheduler = schedulingProvider;\n+    scheduledExecutors = new ArrayList<>();", "originalCommit": "123e921359ce56a8e2ec6c0a7e2da090dba22828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNjk4OQ==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503536989", "bodyText": "this.scheduledExecutors for consistency.", "author": "prateekm", "createdAt": "2020-10-12T21:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MjQ2MA==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503542460", "bodyText": "The list is updated in the createdScheduler, to stop all the schedulers in the end when stop is called.", "author": "shekhars-li", "createdAt": "2020-10-12T21:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNTg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNzQwMA==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503537400", "bodyText": "s/getScheduler/createScheduler.", "author": "prateekm", "createdAt": "2020-10-12T21:19:46Z", "path": "samza-rest/src/main/java/org/apache/samza/monitor/SamzaMonitorService.java", "diffHunk": "@@ -67,8 +73,12 @@ public void start() {\n           int monitorSchedulingJitterInMs = (int) (RANDOM.nextInt(schedulingIntervalInMs + 1) * (monitorConfig.getSchedulingJitterPercent() / 100.0));\n           schedulingIntervalInMs += monitorSchedulingJitterInMs;\n           LOGGER.info(\"Scheduling the monitor: {} to run every {} ms.\", monitorName, schedulingIntervalInMs);\n-          scheduler.schedule(getRunnable(instantiateMonitor(monitorName, monitorConfig, metricsRegistry)),\n-              schedulingIntervalInMs);\n+          // Create a new SchedulerExecutorService for each monitor. This ensures that a long running monitor service\n+          // does not block another monitor from scheduling/running. A long running monitor will not create a backlog\n+          // of work for future monitors of same type. A new monitor is scheduled only when current work is complete.\n+          getScheduler()", "originalCommit": "123e921359ce56a8e2ec6c0a7e2da090dba22828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b11e08de275e482b3410e1898d2c233fa24a7cfe", "url": "https://github.com/apache/samza/commit/b11e08de275e482b3410e1898d2c233fa24a7cfe", "message": "Delete unused ScheduledProvider interface and it's impl, addressed review comments", "committedDate": "2020-10-12T21:29:46Z", "type": "commit"}, {"oid": "0b12ef0ecea0d440f436dd7bc28bff13130132c7", "url": "https://github.com/apache/samza/commit/0b12ef0ecea0d440f436dd7bc28bff13130132c7", "message": "Delete unused ScheduledProvider interface and it's impl, addressed review comments", "committedDate": "2020-10-12T21:33:35Z", "type": "commit"}, {"oid": "ba1af914e9a6d59da1b42e2794dfb074cb24b52e", "url": "https://github.com/apache/samza/commit/ba1af914e9a6d59da1b42e2794dfb074cb24b52e", "message": "Merge branch 'MonitorUpdate' of https://github.com/shekhars-li/samza into MonitorUpdate", "committedDate": "2020-10-12T21:35:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0NzIzNw==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503547237", "bodyText": "Can you leave a comment explaining why we made this change.", "author": "prateekm", "createdAt": "2020-10-12T21:37:23Z", "path": "samza-rest/src/main/java/org/apache/samza/monitor/MonitorConfig.java", "diffHunk": "@@ -44,7 +44,7 @@\n \n   private static final String CONFIG_SCHEDULING_JITTER_PERCENT = \"scheduling.jitter.percent\";\n \n-  private static final int DEFAULT_SCHEDULING_JITTER_PERCENT = 0;", "originalCommit": "ba1af914e9a6d59da1b42e2794dfb074cb24b52e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f0d411072a124d83dea1c17f38a469360d04d64c", "url": "https://github.com/apache/samza/commit/f0d411072a124d83dea1c17f38a469360d04d64c", "message": "Update comment on jitter percent", "committedDate": "2020-10-12T21:45:30Z", "type": "commit"}, {"oid": "f0d411072a124d83dea1c17f38a469360d04d64c", "url": "https://github.com/apache/samza/commit/f0d411072a124d83dea1c17f38a469360d04d64c", "message": "Update comment on jitter percent", "committedDate": "2020-10-12T21:45:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2NDA1Mw==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503564053", "bodyText": "Thanks for the description. Let's also mention this change under \"API changes\" section of the PR description, so that it's easy to document at release time.", "author": "prateekm", "createdAt": "2020-10-12T22:24:34Z", "path": "samza-rest/src/main/java/org/apache/samza/monitor/MonitorConfig.java", "diffHunk": "@@ -44,7 +44,11 @@\n \n   private static final String CONFIG_SCHEDULING_JITTER_PERCENT = \"scheduling.jitter.percent\";\n \n-  private static final int DEFAULT_SCHEDULING_JITTER_PERCENT = 0;\n+  // Default scheduling jitter set to 100 to ensure every monitor is scheduled with an initial jitter.\n+  // The change SAMZA-2595 creates a new scheduler/thread for every monitor. Jitter ensures that there is a delay in\n+  // scheduling of every monitor to ensure all the monitors do not start at the same time, to avoid spike on host\n+  // and to not overwhelm the metric reporting service.\n+  private static final int DEFAULT_SCHEDULING_JITTER_PERCENT = 100;", "originalCommit": "f0d411072a124d83dea1c17f38a469360d04d64c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2ODA2NA==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503568064", "bodyText": "monitorService.stop is already being called on line 106. Do you need to remove that?", "author": "prateekm", "createdAt": "2020-10-12T22:37:24Z", "path": "samza-rest/src/main/java/org/apache/samza/rest/SamzaRestService.java", "diffHunk": "@@ -104,24 +99,16 @@ public static void main(String[] args)\n       ServletContainer container = new ServletContainer(samzaRestApplication);\n       restService.addServlet(container, \"/*\");\n \n-      // Schedule monitors to run\n-      ThreadFactory threadFactory = new ThreadFactoryBuilder().setDaemon(true)\n-                                                              .setNameFormat(\"MonitorThread-%d\")\n-                                                              .build();\n-      ScheduledExecutorService schedulingService = Executors.newScheduledThreadPool(1, threadFactory);\n-      schedulingProvider = new ScheduledExecutorSchedulingProvider(schedulingService);\n-      SamzaMonitorService monitorService = new SamzaMonitorService(config,\n-          metricsRegistry,\n-          schedulingProvider);\n+      monitorService = new SamzaMonitorService(config, metricsRegistry);\n       monitorService.start();\n \n       restService.runBlocking();\n       monitorService.stop();\n     } catch (Throwable t) {\n       log.error(\"Exception in main.\", t);\n     } finally {\n-      if (schedulingProvider != null) {\n-        schedulingProvider.stop();\n+      if (monitorService != null) {\n+        monitorService.stop();", "originalCommit": "f0d411072a124d83dea1c17f38a469360d04d64c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDI0MA==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503570240", "bodyText": "Just curious.\nInitially we had a single threaded scheduler to ensure when two monitors in samza-admin are trying to update/modify some shared state(either on disk or in some external store), then their executions are serialized. How are we planning to achieve that goal when we allow multiple monitors to be running at the same time in their own threads.", "author": "shanthoosh", "createdAt": "2020-10-12T22:44:24Z", "path": "samza-rest/src/main/java/org/apache/samza/monitor/SamzaMonitorService.java", "diffHunk": "@@ -100,4 +110,19 @@ public void run() {\n       }\n     };\n   }\n+\n+  /**\n+   * Creates a ScheduledThreadPoolExecutor with core pool size 1\n+   * @return ScheduledExecutorService\n+   */\n+  private ScheduledExecutorService createScheduler() {", "originalCommit": "f0d411072a124d83dea1c17f38a469360d04d64c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjcyMg==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503576722", "bodyText": "We've already run into performance limits of what single threaded execution for all monitors can do with some monitors within LinkedIn, so while the current implementation avoided premature optimization, it's not sustainable. A better way to achieve the exclusivity goal will be to write the monitors with such side-effects in a \"thread-safe\" way. @shanthoosh are you aware of any existing monitors could be impacted by this change? If so, we can update them.\nShekhar, let's also call this out as another potentially backwards incompatible change in the \"API  changes\" section.", "author": "prateekm", "createdAt": "2020-10-12T23:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4NzU1Mg==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503587552", "bodyText": "are you aware of any existing monitors could be impacted by this change?\n\nLet's please double-check if the parallel execution of monitors(StateStoreGCMonitor, StateStoreDeltaMonitor) internally could potentially cause any correctness issues.\nOther than that, updating the API spec of Monitor abstraction(& calling out backwards compatibility) should be sufficient.", "author": "shanthoosh", "createdAt": "2020-10-12T23:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5MjEzOQ==", "url": "https://github.com/apache/samza/pull/1434#discussion_r503592139", "bodyText": "Ack, thanks for the heads up!", "author": "prateekm", "createdAt": "2020-10-12T23:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MDI0MA=="}], "type": "inlineReview"}, {"oid": "a4405d11d70c42446a004ebeb62ffdeb2656e591", "url": "https://github.com/apache/samza/commit/a4405d11d70c42446a004ebeb62ffdeb2656e591", "message": "Removed redundant stop call", "committedDate": "2020-10-12T22:53:51Z", "type": "commit"}, {"oid": "94d009299cab3d0b700aeadf7c7676e0bff3b415", "url": "https://github.com/apache/samza/commit/94d009299cab3d0b700aeadf7c7676e0bff3b415", "message": "UT fix", "committedDate": "2020-10-12T23:40:51Z", "type": "commit"}, {"oid": "3dad3d978a980bc77cc86cf7a0f77030ba7956f6", "url": "https://github.com/apache/samza/commit/3dad3d978a980bc77cc86cf7a0f77030ba7956f6", "message": "UT Fix", "committedDate": "2020-10-13T01:13:17Z", "type": "forcePushed"}, {"oid": "b9b1c5373863f800ec5448503cb2825a75d99df3", "url": "https://github.com/apache/samza/commit/b9b1c5373863f800ec5448503cb2825a75d99df3", "message": "UT Fix", "committedDate": "2020-10-13T01:16:15Z", "type": "commit"}, {"oid": "b9b1c5373863f800ec5448503cb2825a75d99df3", "url": "https://github.com/apache/samza/commit/b9b1c5373863f800ec5448503cb2825a75d99df3", "message": "UT Fix", "committedDate": "2020-10-13T01:16:15Z", "type": "forcePushed"}]}