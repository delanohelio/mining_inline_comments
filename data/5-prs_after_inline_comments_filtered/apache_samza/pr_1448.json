{"pr_number": 1448, "pr_title": "SAMZA-2606: container orchestration for AM HA", "pr_createdAt": "2020-11-25T03:37:42Z", "pr_url": "https://github.com/apache/samza/pull/1448", "timeline": [{"oid": "eeb7ab73762b8081430dd752ce71cc18c096ca4b", "url": "https://github.com/apache/samza/commit/eeb7ab73762b8081430dd752ce71cc18c096ca4b", "message": "Introduce config for cluster based job coordinator high availability", "committedDate": "2020-11-17T19:47:01Z", "type": "commit"}, {"oid": "1a58b6dee7969021c3b97659e65f58eac0f355eb", "url": "https://github.com/apache/samza/commit/1a58b6dee7969021c3b97659e65f58eac0f355eb", "message": "SAMZA-2604: Data model change to capture physical container id mapping for AM HA", "committedDate": "2020-11-19T18:58:15Z", "type": "commit"}, {"oid": "5672bbcab6699edc1c268d2611dbbdd7046ace73", "url": "https://github.com/apache/samza/commit/5672bbcab6699edc1c268d2611dbbdd7046ace73", "message": "fix typos", "committedDate": "2020-11-19T19:21:02Z", "type": "commit"}, {"oid": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "url": "https://github.com/apache/samza/commit/5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "message": "container orchestration for AM HA", "committedDate": "2020-11-25T03:19:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE3NTE0Nw==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532175147", "bodyText": "After some digging through, realized we will need to handle populating allocated resources.\nStopStreamProcessor method will error out in the absence of that information.", "author": "mynameborat", "createdAt": "2020-11-29T08:35:06Z", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -192,7 +193,8 @@ public YarnClusterResourceManager(Config config, JobModelManager jobModelManager\n         clusterManagerConfig.getNumCores(),\n         samzaAppState,\n         state,\n-        amClient\n+        amClient,\n+        new JobConfig(config).getApplicationMasterHighAvailabilityEnabled()", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTI3Mw==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532595273", "bodyText": "Ideally, you want to follow through the OnContainersAllocated code path to ensure that all the state is intact when updating AM with the previous set of running containers.\nWe also need to ensure both YarnAppState and SamzaApplicationState are up-to-date on top of the other internal state held by YarnResourceClusterManager and ContainerAllocator barring the state that is interim during the container assignment & starting.", "author": "mynameborat", "createdAt": "2020-11-30T13:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE3NTE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ1MDQ5NA==", "url": "https://github.com/apache/samza/pull/1448#discussion_r536450494", "bodyText": "updated to invoke OnContainerStarted instead of OnContainersAllocated -- as that seemed to be the more appropriate one (setting job healthy etc).\nfixed the npe arising from not having previous attempt containers in the allocatedResources map", "author": "lakshmi-manasa-g", "createdAt": "2020-12-04T23:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE3NTE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE3NTQ5MA==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532175490", "bodyText": "The current flow doesn't set the job as healthy in the event that all the containers are from the previous attempt and there is no necessity to spin up a new one.", "author": "mynameborat", "createdAt": "2020-11-29T08:38:32Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -413,6 +428,9 @@ public void onStreamProcessorLaunchSuccess(SamzaResource resource) {\n           processorId, containerId, containerHost);\n       state.pendingProcessors.remove(processorId);\n       state.runningProcessors.put(processorId, resource);\n+      if (jobConfig.getApplicationMasterHighAvailabilityEnabled()) {\n+        state.processorToExecutionId.put(processorId, containerId);\n+      }\n \n       if (state.neededProcessors.decrementAndGet() == 0) {\n         state.jobHealthy.set(true);", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3NjIxNQ==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532576215", "bodyText": "Since we don't need this information beyond the construction phase, I am going to suggest to not update the information in other places.\nIdeally, have it wired during construction although if that doesn't seem straight forward, we can follow it up after the initial PR.", "author": "mynameborat", "createdAt": "2020-11-30T12:55:55Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "diffHunk": "@@ -105,6 +105,22 @@\n    */\n   public final ConcurrentMap<String, SamzaResource> runningProcessors = new ConcurrentHashMap<>(0);\n \n+  /**\n+   * Map of Samza processor Id (aka logical id) to execution environment container id (aka physical id ex: yarn container id).\n+   * This map will be used during the start up phase of new AM in AM-HA.\n+   *\n+   * This map is populated at startup of ClusterBasedJobCoordinator.\n+   * It initially holds the processId to execution id mapping (if any) present in the coordinator stream.\n+   * This could correspond to containers currently running or from previous attempt or previous deploy.\n+   *\n+   * If # of containers in map is same as current JobModel's containers, and mapping is from previous deploy,\n+   * then they will get overwritten by new container incarnations in the current deploy in {@link ContainerProcessManager}.onStreamProcessorLaunchSuccess.\n+   * If # of containers in map is lesser, then map entries will get overwritten by current containers and new ones will be added to map.\n+   * If # of containers in map is greater, this map is wiped clear in {@link ContainerProcessManager}.start\n+   * to avoid having mapping for containers which are not part of the current JobModel.\n+   */\n+  public final ConcurrentMap<String, String> processorToExecutionId = new ConcurrentHashMap<>(0);", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4NDM2Mw==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532984363", "bodyText": "agreed.\nI did consider not persisting this mapping in the state throughout lifecycle of the AM but decided to go with it as other option of passing mapping/metadata store to the life cycle will require changing some interfaces.\nHowever, after our offline sync it does sound better to update the interface than persist this map.\ncreated a jira to follow it up SAMZA-2607.\nalso removed the updates to this mapping in the state to keep in fresh in CPM", "author": "lakshmi-manasa-g", "createdAt": "2020-12-01T00:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3NjIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MDY5NA==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532580694", "bodyText": "same as above. Be consistent with the log message and replace container with processor and use executionEnvContainerId instead.", "author": "mynameborat", "createdAt": "2020-11-30T13:03:20Z", "path": "samza-core/src/main/java/org/apache/samza/container/ExecutionContainerIdManager.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.container;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.samza.coordinator.stream.CoordinatorStreamValueSerde;\n+import org.apache.samza.coordinator.stream.messages.SetExecutionContainerIdMapping;\n+import org.apache.samza.metadatastore.MetadataStore;\n+import org.apache.samza.serializers.Serde;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Used for persisting and reading the execution environment container id information into the metadata store.\n+ * Processor id (logical Samza container id) to execution environment container id (ex: yarn container id) is written.\n+ **/\n+public class ExecutionContainerIdManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExecutionContainerIdManager.class);\n+\n+  private final Serde<String> valueSerde;\n+  private final MetadataStore metadataStore;\n+\n+  /**\n+   * Builds the ExecutionContainerIdManager based upon the provided {@link MetadataStore} that is instantiated.\n+   * Uses the {@link CoordinatorStreamValueSerde} to serialize messages before reading/writing into metadata store.\n+   * @param metadataStore an instance of {@link MetadataStore} to read/write the container locality.\n+   */\n+  public ExecutionContainerIdManager(MetadataStore metadataStore) {\n+    this.metadataStore = metadataStore;\n+    this.valueSerde = new CoordinatorStreamValueSerde(SetExecutionContainerIdMapping.TYPE);\n+  }\n+\n+  public void writeExecutionEnvironmentContainerIdMapping(String processorId, String executionEnvContainerId) {\n+    Preconditions.checkNotNull(processorId, \"Container's logical processor id can not be null.\");\n+    Preconditions.checkNotNull(executionEnvContainerId, \"Container's physical execution environment container id can not be null.\");\n+    LOG.info(\"Container {} has executionEnvContainerId as {}\", processorId, executionEnvContainerId);\n+    metadataStore.put(processorId, valueSerde.toBytes(executionEnvContainerId));\n+    metadataStore.flush();\n+  }\n+\n+  public Map<String, String> readExecutionEnvironmentContainerIdMapping() {\n+    Map<String, String> executionEnvironmentContainerIdMapping = new HashMap<>();\n+    metadataStore.all().forEach((processorId, valueBytes) -> {\n+      if (valueBytes != null) {\n+        String executionEnvContainerId = valueSerde.fromBytes(valueBytes);\n+        executionEnvironmentContainerIdMapping.put(processorId, executionEnvContainerId);\n+      }\n+    });\n+    if (LOG.isDebugEnabled()) {\n+      for (Map.Entry<String, String> entry : executionEnvironmentContainerIdMapping.entrySet()) {\n+        LOG.debug(\"Execution evironment container id for container {}: {}\", entry.getKey(), entry.getValue());", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MDk0MQ==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532580941", "bodyText": "nit: Processor: {} has executionEnvContainerId: {} to be consistent in other places. I remember Prateek made a whole clean up PR for this :)", "author": "mynameborat", "createdAt": "2020-11-30T13:03:50Z", "path": "samza-core/src/main/java/org/apache/samza/container/ExecutionContainerIdManager.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.container;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.samza.coordinator.stream.CoordinatorStreamValueSerde;\n+import org.apache.samza.coordinator.stream.messages.SetExecutionContainerIdMapping;\n+import org.apache.samza.metadatastore.MetadataStore;\n+import org.apache.samza.serializers.Serde;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Used for persisting and reading the execution environment container id information into the metadata store.\n+ * Processor id (logical Samza container id) to execution environment container id (ex: yarn container id) is written.\n+ **/\n+public class ExecutionContainerIdManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(ExecutionContainerIdManager.class);\n+\n+  private final Serde<String> valueSerde;\n+  private final MetadataStore metadataStore;\n+\n+  /**\n+   * Builds the ExecutionContainerIdManager based upon the provided {@link MetadataStore} that is instantiated.\n+   * Uses the {@link CoordinatorStreamValueSerde} to serialize messages before reading/writing into metadata store.\n+   * @param metadataStore an instance of {@link MetadataStore} to read/write the container locality.\n+   */\n+  public ExecutionContainerIdManager(MetadataStore metadataStore) {\n+    this.metadataStore = metadataStore;\n+    this.valueSerde = new CoordinatorStreamValueSerde(SetExecutionContainerIdMapping.TYPE);\n+  }\n+\n+  public void writeExecutionEnvironmentContainerIdMapping(String processorId, String executionEnvContainerId) {\n+    Preconditions.checkNotNull(processorId, \"Container's logical processor id can not be null.\");\n+    Preconditions.checkNotNull(executionEnvContainerId, \"Container's physical execution environment container id can not be null.\");\n+    LOG.info(\"Container {} has executionEnvContainerId as {}\", processorId, executionEnvContainerId);", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MTY1Nw==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532581657", "bodyText": "s/persist the container/persist", "author": "mynameborat", "createdAt": "2020-11-30T13:05:04Z", "path": "samza-core/src/main/java/org/apache/samza/coordinator/stream/messages/SetExecutionContainerIdMapping.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.coordinator.stream.messages;\n+\n+/**\n+ * SetContainerIdExecutionContainerIdMapping is used internally by the Samza framework to\n+ * persist the container processorId-to-executionEnvContainerId mappings.", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MjQyNQ==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532582425", "bodyText": "s/ContainerId/ProcessorId", "author": "mynameborat", "createdAt": "2020-11-30T13:06:17Z", "path": "samza-core/src/main/java/org/apache/samza/coordinator/stream/messages/SetExecutionContainerIdMapping.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.coordinator.stream.messages;\n+\n+/**\n+ * SetContainerIdExecutionContainerIdMapping is used internally by the Samza framework to\n+ * persist the container processorId-to-executionEnvContainerId mappings.\n+ *\n+ * Structure of the message looks like:\n+ * {\n+ *     Key: $ContainerId", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MjkzMA==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532582930", "bodyText": "set-execution-container-id-mapping to be consistent with the class name similar to others.", "author": "mynameborat", "createdAt": "2020-11-30T13:07:12Z", "path": "samza-core/src/main/java/org/apache/samza/coordinator/stream/messages/SetExecutionContainerIdMapping.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.coordinator.stream.messages;\n+\n+/**\n+ * SetContainerIdExecutionContainerIdMapping is used internally by the Samza framework to\n+ * persist the container processorId-to-executionEnvContainerId mappings.\n+ *\n+ * Structure of the message looks like:\n+ * {\n+ *     Key: $ContainerId\n+ *     Type: set-container-id-execution-id-assignment\n+ *     Source: \"SamzaContainer-$ContainerId\"\n+ *     MessageMap:\n+ *     {\n+ *         execution-env-container-id: execution environment container id\n+ *     }\n+ * }\n+ * */\n+public class SetExecutionContainerIdMapping extends CoordinatorStreamMessage {\n+  public static final String TYPE = \"set-container-id-execution-id-assignment\";", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MzM1NA==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532583354", "bodyText": "SetExecutionEnvContainerIdMapping instead of SetExecutionContainerIdMapping to be consistent in usage.", "author": "mynameborat", "createdAt": "2020-11-30T13:08:00Z", "path": "samza-core/src/main/java/org/apache/samza/coordinator/stream/messages/SetExecutionContainerIdMapping.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.coordinator.stream.messages;\n+\n+/**\n+ * SetContainerIdExecutionContainerIdMapping is used internally by the Samza framework to\n+ * persist the container processorId-to-executionEnvContainerId mappings.\n+ *\n+ * Structure of the message looks like:\n+ * {\n+ *     Key: $ContainerId\n+ *     Type: set-container-id-execution-id-assignment\n+ *     Source: \"SamzaContainer-$ContainerId\"\n+ *     MessageMap:\n+ *     {\n+ *         execution-env-container-id: execution environment container id\n+ *     }\n+ * }\n+ * */\n+public class SetExecutionContainerIdMapping extends CoordinatorStreamMessage {", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4NjI5NQ==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532586295", "bodyText": "we just create the manager above. why is this null check? should be execEnvContainerId instead.\nI still think you don't need this check. You can use Optional::ifPresent and write it.", "author": "mynameborat", "createdAt": "2020-11-30T13:12:57Z", "path": "samza-core/src/main/java/org/apache/samza/runtime/ContainerLaunchUtil.java", "diffHunk": "@@ -147,6 +149,14 @@ private static void run(\n         heartbeatMonitor.start();\n       }\n \n+      if (new JobConfig(config).getApplicationMasterHighAvailabilityEnabled()) {\n+        ExecutionContainerIdManager executionContainerIdManager = new ExecutionContainerIdManager(\n+            new NamespaceAwareCoordinatorStreamStore(coordinatorStreamStore, SetExecutionContainerIdMapping.TYPE));\n+        if (executionContainerIdManager != null && execEnvContainerId.isPresent()) {", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4NzkwOA==", "url": "https://github.com/apache/samza/pull/1448#discussion_r532587908", "bodyText": "Seems like you are modifying a static map here and the remnants of the test is going to impact other tests in the class.\nCan we make a copy instead and add AM-HA configs?", "author": "mynameborat", "createdAt": "2020-11-30T13:15:38Z", "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerProcessManager.java", "diffHunk": "@@ -226,6 +227,56 @@ public void run() {\n     cpm.stop();\n   }\n \n+  @Test\n+  public void testOnInitAMHighAvailability() throws Exception {\n+    configVals.put(JobConfig.YARN_AM_HIGH_AVAILABILITY_ENABLED, \"true\");", "originalCommit": "5a0ce4271f16781b8e1e0221e41801ebd24c0f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9dc8e51ac48a9fc90316ee2ab6dc754081f6fa86", "url": "https://github.com/apache/samza/commit/9dc8e51ac48a9fc90316ee2ab6dc754081f6fa86", "message": "merge master", "committedDate": "2020-12-03T19:25:29Z", "type": "commit"}, {"oid": "bc0c261e0a50f406a435b4f92ef7ed60f42e5702", "url": "https://github.com/apache/samza/commit/bc0c261e0a50f406a435b4f92ef7ed60f42e5702", "message": "address comments", "committedDate": "2020-12-04T23:40:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ3OTk0NQ==", "url": "https://github.com/apache/samza/pull/1448#discussion_r536479945", "bodyText": "If i am reading this right, we are just doing the same thing regardless of enabled vs not except logging it additionally.\n\nWhy can't we move the initializations before clusterResourceManager.start() and consolidate this?", "author": "mynameborat", "createdAt": "2020-12-05T01:58:27Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -236,11 +236,20 @@ public void start() {\n       diagnosticsManager.get().start();\n     }\n \n+    if (jobConfig.getApplicationMasterHighAvailabilityEnabled()) {\n+      LOG.info(\n+          \"Set neededProcessors prior to starting clusterResourceManager because it gets running containres from prev attempts in AM HA.\");\n+      state.processorCount.set(state.jobModelManager.jobModel().getContainers().size());\n+      state.neededProcessors.set(state.jobModelManager.jobModel().getContainers().size());\n+    }\n+\n     LOG.info(\"Starting the cluster resource manager\");\n     clusterResourceManager.start();\n \n-    state.processorCount.set(state.jobModelManager.jobModel().getContainers().size());\n-    state.neededProcessors.set(state.jobModelManager.jobModel().getContainers().size());\n+    if (!jobConfig.getApplicationMasterHighAvailabilityEnabled()) {\n+      state.processorCount.set(state.jobModelManager.jobModel().getContainers().size());\n+      state.neededProcessors.set(state.jobModelManager.jobModel().getContainers().size());\n+    }", "originalCommit": "bc0c261e0a50f406a435b4f92ef7ed60f42e5702", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxODU0NQ==", "url": "https://github.com/apache/samza/pull/1448#discussion_r537618545", "bodyText": "Did you miss this comment?", "author": "mynameborat", "createdAt": "2020-12-07T15:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ3OTk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY1OTEwMg==", "url": "https://github.com/apache/samza/pull/1448#discussion_r537659102", "bodyText": "(i had written the response but forgot to submit it.)\nthe reason for this flow is to keep the non-AMHA exactly the same as before.\nthe big difference is setting neededProcessors prior to ClusterResourceManager.start() as it will invoke launch sucess which inturn will decrement neededProcessors and set job healthy accordingly.", "author": "lakshmi-manasa-g", "createdAt": "2020-12-07T16:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ3OTk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ4MDQ4Ng==", "url": "https://github.com/apache/samza/pull/1448#discussion_r536480486", "bodyText": "would suggest do\nif ()\nelse if()\nelse \n\ninstead as it eliminates the need to use multiple control statements (return) across the function to make it more readable. It becomes tedious especially if this function evolves and starts having updates to local state.", "author": "mynameborat", "createdAt": "2020-12-05T02:01:08Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -403,29 +412,23 @@ public void onResourcesCompleted(List<SamzaResourceStatus> resourceStatuses) {\n \n   @Override\n   public void onStreamProcessorLaunchSuccess(SamzaResource resource) {\n-    String containerId = resource.getContainerId();\n-    String containerHost = resource.getHost();\n-\n-    // 1. Obtain the processor ID for the pending container on this resource.\n-    String processorId = getPendingProcessorId(containerId);\n-    LOG.info(\"Successfully started Processor ID: {} on Container ID: {} on host: {}\",\n-        processorId, containerId, containerHost);\n-\n-    // 2. Remove the container from the pending buffer and add it to the running buffer. Additionally, update the\n-    // job-health metric.\n-    if (processorId != null) {\n-      LOG.info(\"Moving Processor ID: {} on Container ID: {} on host: {} from pending to running state.\",\n-          processorId, containerId, containerHost);\n-      state.pendingProcessors.remove(processorId);\n-      state.runningProcessors.put(processorId, resource);\n-      if (state.neededProcessors.decrementAndGet() == 0) {\n-        state.jobHealthy.set(true);\n-      }\n-      containerManager.handleContainerLaunchSuccess(processorId, containerHost);\n-    } else {\n-      LOG.warn(\"Did not find a pending Processor ID for Container ID: {} on host: {}. \" +\n-          \"Ignoring invalid/redundant notification.\", containerId, containerHost);\n+    // Scenario 1: processor belongs to current attempt of the job.\n+    // This means, the current AM had placed a request for the processor\n+    // and hence containerId should be found in the pendingProcessor map\n+    if (state.pendingProcessors.containsValue(resource)) {\n+      handleNewProcessorLaunchSuccess(resource);\n+      return;\n+    }\n+    // Scenario 2: Due to AM HA, processor could belong to the previous attempt of the job.\n+    // This means, the current AM did not place a request for the processor as it was already running.\n+    // Hence it will be in the runningProcessors map and not in the pendingProcessor Map\n+    if (jobConfig.getApplicationMasterHighAvailabilityEnabled() && state.runningProcessors.containsValue(resource)) {\n+      handleRunningProcessorLaunchSuccess(resource);\n+      return;\n     }\n+\n+    LOG.warn(\"Did not find a pending Processor ID for Container ID: {} on host: {}. \"\n+        + \"Ignoring invalid/redundant notification.\", resource.getContainerId(), resource.getHost());", "originalCommit": "bc0c261e0a50f406a435b4f92ef7ed60f42e5702", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "33093016ee62ff0bef9848835c7b1259c101d6d4", "url": "https://github.com/apache/samza/commit/33093016ee62ff0bef9848835c7b1259c101d6d4", "message": "address comments", "committedDate": "2020-12-07T05:32:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYxODIwNg==", "url": "https://github.com/apache/samza/pull/1448#discussion_r537618206", "bodyText": "Either needs a merge from latest master or this is an extra file that needs to be removed since it got renamed in master and the merge is keeping this as is.", "author": "mynameborat", "createdAt": "2020-12-07T15:55:58Z", "path": "samza-core/src/main/java/org/apache/samza/coordinator/stream/messages/SetExecutionContainerIdMapping.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*", "originalCommit": "33093016ee62ff0bef9848835c7b1259c101d6d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cc53aae514ec484bf3c1ae65a588ebb84b9913f5", "url": "https://github.com/apache/samza/commit/cc53aae514ec484bf3c1ae65a588ebb84b9913f5", "message": "address pending comments + one fix", "committedDate": "2020-12-07T18:10:50Z", "type": "commit"}, {"oid": "a4263e04c1261f0c72965121a3afdfce6c285362", "url": "https://github.com/apache/samza/commit/a4263e04c1261f0c72965121a3afdfce6c285362", "message": "add comments + fix a bug with neededProcessors decremented", "committedDate": "2020-12-07T20:00:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjU0Nw==", "url": "https://github.com/apache/samza/pull/1448#discussion_r537826547", "bodyText": "remove the log :)", "author": "mynameborat", "createdAt": "2020-12-07T20:56:15Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -420,6 +423,7 @@ public void onStreamProcessorLaunchSuccess(SamzaResource resource) {\n       state.pendingProcessors.remove(processorId);\n       state.runningProcessors.put(processorId, resource);\n       if (state.neededProcessors.decrementAndGet() == 0) {\n+        LOG.info(\"Manasa#: setting job healhty to true\");", "originalCommit": "a4263e04c1261f0c72965121a3afdfce6c285362", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjgxNg==", "url": "https://github.com/apache/samza/pull/1448#discussion_r537826816", "bodyText": "can we consolidate the log statements? guess it is used for testing", "author": "mynameborat", "createdAt": "2020-12-07T20:56:44Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -254,10 +257,10 @@ public void start() {\n     });\n     if (jobConfig.getApplicationMasterHighAvailabilityEnabled()) {\n       // don't request resource for container that is already running\n-      state.runningProcessors.keySet().forEach(containerId -> {\n-        processorToHost.remove(containerId);\n-        state.neededProcessors.decrementAndGet();\n-      });\n+      LOG.info(\"have in samza app state: \" + state.runningProcessors.size() + \" running processors\");\n+      LOG.info(\"have in processorToHost \" + processorToHost.size());\n+      state.runningProcessors.keySet().forEach(processorToHost::remove);\n+      LOG.info(\"after removing running processors : have in processorToHost \" + processorToHost.size());", "originalCommit": "a4263e04c1261f0c72965121a3afdfce6c285362", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db695eefd5a3996d9323f16f2a3cc2c6e950bb27", "url": "https://github.com/apache/samza/commit/db695eefd5a3996d9323f16f2a3cc2c6e950bb27", "message": "remove testing logs", "committedDate": "2020-12-07T20:59:37Z", "type": "commit"}]}