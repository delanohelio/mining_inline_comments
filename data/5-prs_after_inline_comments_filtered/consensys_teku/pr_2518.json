{"pr_number": 2518, "pr_title": "Implement Validator API PostAggregateAndProof method", "pr_createdAt": "2020-08-06T04:56:04Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2518", "timeline": [{"oid": "8477c0caa1be2fd143cdfdb794ee816c2c42f14d", "url": "https://github.com/ConsenSys/teku/commit/8477c0caa1be2fd143cdfdb794ee816c2c42f14d", "message": "Implement Validator API PostAggregateAndProof method\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-08-06T04:54:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0NzU0OA==", "url": "https://github.com/ConsenSys/teku/pull/2518#discussion_r466147548", "bodyText": "generally this would mean we have a test case in BeaconRestApiTest also", "author": "rolfyone", "createdAt": "2020-08-06T05:02:31Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -230,6 +231,9 @@ private void addValidatorHandlers(DataProvider dataProvider) {\n         PostBlock.ROUTE,\n         new PostBlock(validatorDataProvider, dataProvider.getSyncDataProvider(), jsonProvider));\n     app.post(PostDuties.ROUTE, new PostDuties(validatorDataProvider, jsonProvider));\n+    app.post(\n+        PostAggregateAndProof.ROUTE,\n+        new PostAggregateAndProof(validatorDataProvider, jsonProvider));", "originalCommit": "8477c0caa1be2fd143cdfdb794ee816c2c42f14d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0ODE5NA==", "url": "https://github.com/ConsenSys/teku/pull/2518#discussion_r466148194", "bodyText": "We do! :D\nhttps://github.com/PegaSysEng/teku/pull/2518/files#diff-2e867c244b70539fa877a970c3b802dbR193-R197", "author": "lucassaldanha", "createdAt": "2020-08-06T05:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0NzU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTQzNg==", "url": "https://github.com/ConsenSys/teku/pull/2518#discussion_r466155436", "bodyText": "ok then :)", "author": "rolfyone", "createdAt": "2020-08-06T05:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0NzU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0OTE5Mg==", "url": "https://github.com/ConsenSys/teku/pull/2518#discussion_r466149192", "bodyText": "we should really either use spy's or use a verify that shows the expected object is coming in... this shows an aggregate got sent, but no detail about whether it was something sane...\nIf we spy, we could potentially validate it against the object we passed in through the http request", "author": "rolfyone", "createdAt": "2020-08-06T05:08:54Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/validator/PostAggregateAndProofTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+class PostAggregateAndProofTest {\n+\n+  @SuppressWarnings({\"unchecked\", \"unused\"})\n+  private final ArgumentCaptor<SafeFuture<String>> args = ArgumentCaptor.forClass(SafeFuture.class);\n+\n+  @SuppressWarnings(\"unused\")\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+\n+  private final Context context = mock(Context.class);\n+  private final ValidatorDataProvider provider = mock(ValidatorDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+\n+  private PostAggregateAndProof handler;\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    handler = new PostAggregateAndProof(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestWhenRequestBodyIsInvalid() throws Exception {\n+    when(context.body()).thenReturn(\"{\\\"foo\\\": \\\"bar\\\"}\");\n+\n+    handler.handle(context);\n+    verify(context).status(SC_BAD_REQUEST);\n+  }\n+\n+  @Test\n+  public void shouldReturnServerErrorWhenFutureHasUnmappedException() throws Exception {\n+    final SignedAggregateAndProof signedAggregateAndProof =\n+        dataStructureUtil.randomSignedAggregateAndProof();\n+\n+    final tech.pegasys.teku.api.schema.SignedAggregateAndProof schemaSignedAggregateAndProof =\n+        new tech.pegasys.teku.api.schema.SignedAggregateAndProof(signedAggregateAndProof);\n+\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(schemaSignedAggregateAndProof));\n+    doThrow(new RuntimeException()).when(provider).sendAggregateAndProof(any());\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_INTERNAL_SERVER_ERROR);\n+  }\n+\n+  @Test\n+  public void shouldReturnSuccessWhenSendAggregateAndProofSucceeds() throws Exception {\n+    final SignedAggregateAndProof signedAggregateAndProof =\n+        dataStructureUtil.randomSignedAggregateAndProof();\n+\n+    final tech.pegasys.teku.api.schema.SignedAggregateAndProof schemaSignedAggregateAndProof =\n+        new tech.pegasys.teku.api.schema.SignedAggregateAndProof(signedAggregateAndProof);\n+\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(schemaSignedAggregateAndProof));\n+\n+    handler.handle(context);\n+\n+    verify(provider).sendAggregateAndProof(any());", "originalCommit": "8477c0caa1be2fd143cdfdb794ee816c2c42f14d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1Mzk5MQ==", "url": "https://github.com/ConsenSys/teku/pull/2518#discussion_r466153991", "bodyText": "If it's possible to avoid spies that would be good. A custom matcher (ie argThat) or a captor and then whatever assertThat's after would be much nicer.  Spies wind up coupling to the internals of what's being tested a lot.", "author": "ajsutton", "createdAt": "2020-08-06T05:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0OTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDIyMw==", "url": "https://github.com/ConsenSys/teku/pull/2518#discussion_r466154223", "bodyText": "Yep, I've used an ArgumentCaptor \ud83d\udc4d", "author": "lucassaldanha", "createdAt": "2020-08-06T05:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0OTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTU5NQ==", "url": "https://github.com/ConsenSys/teku/pull/2518#discussion_r466155595", "bodyText": "sorry yep that's what i mean by a spy - goodo :)", "author": "rolfyone", "createdAt": "2020-08-06T05:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0OTE5Mg=="}], "type": "inlineReview"}, {"oid": "3abdb2f9f37323ab08312528c49a486a218ea33c", "url": "https://github.com/ConsenSys/teku/commit/3abdb2f9f37323ab08312528c49a486a218ea33c", "message": "Fix test", "committedDate": "2020-08-06T05:20:42Z", "type": "commit"}]}