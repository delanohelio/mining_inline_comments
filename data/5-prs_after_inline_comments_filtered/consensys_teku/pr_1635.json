{"pr_number": 1635, "pr_title": "Support loading the genesis file from an URL", "pr_createdAt": "2020-04-21T23:35:54Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1635", "timeline": [{"oid": "897ba5247827d60e60592b599552d584913fb835", "url": "https://github.com/ConsenSys/teku/commit/897ba5247827d60e60592b599552d584913fb835", "message": "Support loading the genesis file from an URL", "committedDate": "2020-04-21T23:33:46Z", "type": "commit"}, {"oid": "4dcd4284df9072fc0a35b66c4b665326d2115e0c", "url": "https://github.com/ConsenSys/teku/commit/4dcd4284df9072fc0a35b66c4b665326d2115e0c", "message": "Add missing override.", "committedDate": "2020-04-21T23:46:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMjM2Mg==", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412612362", "bodyText": "Is there a better exception? it seems like the source is not necessarily a File.", "author": "cemozerr", "createdAt": "2020-04-22T01:57:25Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java", "diffHunk": "@@ -52,9 +51,12 @@ public static BeaconState createMockedStartInitialBeaconState(\n         .createInitialBeaconState(UnsignedLong.valueOf(genesisTime), initialDepositData);\n   }\n \n-  public static BeaconState loadBeaconStateFromFile(final String stateFile) throws IOException {\n+  private static BeaconState loadBeaconState(final String source) throws IOException {\n     return SimpleOffsetSerializer.deserialize(\n-        Bytes.wrap(Files.readAllBytes(new File(stateFile).toPath())), BeaconStateImpl.class);\n+        ResourceLoader.urlOrFile()\n+            .loadBytes(source)\n+            .orElseThrow(() -> new FileNotFoundException(\"Could not find \" + source)),", "originalCommit": "4dcd4284df9072fc0a35b66c4b665326d2115e0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMzgxOQ==", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412613819", "bodyText": "We could just throw IllegalArgumentException but the final fallback is to treat it as a file so this matches the previous behaviour and winds up being fairly intuitive for users.", "author": "ajsutton", "createdAt": "2020-04-22T02:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMjM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMzIyMg==", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412613222", "bodyText": "really cool.", "author": "cemozerr", "createdAt": "2020-04-22T01:59:55Z", "path": "util/src/main/java/tech/pegasys/artemis/util/resource/FallbackResourceLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.resource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Optional;\n+\n+public class FallbackResourceLoader implements ResourceLoader {\n+\n+  private final ResourceLoader[] loaders;\n+\n+  FallbackResourceLoader(final ResourceLoader... loaders) {\n+    this.loaders = loaders;\n+  }\n+\n+  @Override\n+  public Optional<InputStream> load(final String source) throws IOException {\n+    for (ResourceLoader loader : loaders) {", "originalCommit": "4dcd4284df9072fc0a35b66c4b665326d2115e0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxNDU0OQ==", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412614549", "bodyText": "this seems to start initially from classpath so a more appropriate naming would be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static ResourceLoader urlClasspathOrFile(\n          \n          \n            \n              static ResourceLoader classpathUrlOrFile(", "author": "cemozerr", "createdAt": "2020-04-22T02:03:45Z", "path": "util/src/main/java/tech/pegasys/artemis/util/resource/ResourceLoader.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.resource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public interface ResourceLoader {\n+\n+  static ResourceLoader urlOrFile() {\n+    return new FallbackResourceLoader(new URLResourceLoader(), new FileResourceLoader());\n+  }\n+\n+  static ResourceLoader urlClasspathOrFile(", "originalCommit": "4dcd4284df9072fc0a35b66c4b665326d2115e0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyNzgxMA==", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412627810", "bodyText": "Good point, done.", "author": "ajsutton", "createdAt": "2020-04-22T02:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxNDU0OQ=="}], "type": "inlineReview"}, {"oid": "8786771696f6a89fae7d1e6cbc62ae73c0b6a5f9", "url": "https://github.com/ConsenSys/teku/commit/8786771696f6a89fae7d1e6cbc62ae73c0b6a5f9", "message": "Rename method.", "committedDate": "2020-04-22T02:05:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTc1OA==", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412619758", "bodyText": "It's not clear to me how you're testing loading from URL here", "author": "cemozerr", "createdAt": "2020-04-22T02:19:47Z", "path": "util/src/test/java/tech/pegasys/artemis/util/resource/URLResourceLoaderTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.resource;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URL;\n+import org.junit.jupiter.api.Test;\n+\n+class URLResourceLoaderTest {\n+  private final ResourceLoader loader = new URLResourceLoader();\n+\n+  @Test\n+  public void shouldLoadContentFromURL() throws Exception {\n+    final String resourceName = ClasspathResourceLoaderTest.TEST_FILE_1 + \".txt\";\n+    final URL resource = ClasspathResourceLoaderTest.class.getResource(resourceName);", "originalCommit": "8786771696f6a89fae7d1e6cbc62ae73c0b6a5f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyNzc1Nw==", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412627757", "bodyText": "It's cheating a little - I'm getting a URL to a resource on the class path.  That's likely actually either a file:// or jar:// URL but since the implementation is just using the standard URL.openStream any URL supported by that works well enough to provide a basic sanity test.  Previously this loading from URL wasn't tested at all.", "author": "ajsutton", "createdAt": "2020-04-22T02:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTc1OA=="}], "type": "inlineReview"}]}