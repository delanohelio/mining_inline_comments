{"pr_number": 2042, "pr_title": "Support exit gossip", "pr_createdAt": "2020-06-02T23:24:14Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2042", "timeline": [{"oid": "e597f7f583d4f7bae5bcd3b4902d236550fe403e", "url": "https://github.com/ConsenSys/teku/commit/e597f7f583d4f7bae5bcd3b4902d236550fe403e", "message": "Implement VoluntaryExit Validator, GossipManager & TopicHandler", "committedDate": "2020-06-01T22:28:21Z", "type": "commit"}, {"oid": "a43f4956591d5fd69551409b3b9e44aedf7b9c77", "url": "https://github.com/ConsenSys/teku/commit/a43f4956591d5fd69551409b3b9e44aedf7b9c77", "message": "Add tests", "committedDate": "2020-06-02T23:12:00Z", "type": "commit"}, {"oid": "e2759b98e791fab9c0db9413abddddfbb4abf548", "url": "https://github.com/ConsenSys/teku/commit/e2759b98e791fab9c0db9413abddddfbb4abf548", "message": "Make cosmetic changes", "committedDate": "2020-06-02T23:18:45Z", "type": "commit"}, {"oid": "ff20c22e3f29abd7b6506609686605f022e5f432", "url": "https://github.com/ConsenSys/teku/commit/ff20c22e3f29abd7b6506609686605f022e5f432", "message": "Run spotless", "committedDate": "2020-06-02T23:23:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTM4OQ==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434239389", "bodyText": "I don't feel like this class is the right approach - the responsibilities here feel like they should stay in DepositProvider (which is primarily responsible for providing the deposits to include in a block).\nThe TestDepositGenerator class also feels a little overly specific to the test it's used in.  I've suggested a simpler way to get an inactive validator on that test.", "author": "ajsutton", "createdAt": "2020-06-03T00:05:29Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/DepositMerkleTree.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.teku.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.teku.util.config.Constants.MAX_DEPOSITS;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Deposit;\n+import tech.pegasys.teku.datastructures.operations.DepositWithIndex;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.util.MerkleTree;\n+import tech.pegasys.teku.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+\n+public class DepositMerkleTree {\n+  private final MerkleTree depositMerkleTree = new OptimizedMerkleTree(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final NavigableMap<UnsignedLong, DepositWithIndex> depositNavigableMap = new TreeMap<>();\n+\n+  public void addDeposit(DepositWithIndex deposit) {\n+    depositNavigableMap.put(deposit.getIndex(), deposit);\n+    depositMerkleTree.add(deposit.getData().hash_tree_root());\n+  }\n+\n+  public SSZList<Deposit> getDeposits(BeaconState state) {", "originalCommit": "ff20c22e3f29abd7b6506609686605f022e5f432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NjM0MQ==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434646341", "bodyText": "I agree, the only reason I did that was because the DepositProvider has a rather specific API. It only accepts through DepositsFromBlockEvents. For testing, it would be better to have a class that accepts through only deposits as well.", "author": "cemozerr", "createdAt": "2020-06-03T15:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MjE4OA==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434252188", "bodyText": "Stray println.", "author": "ajsutton", "createdAt": "2020-06-03T00:55:39Z", "path": "ethereum/statetransition/src/testFixtures/java/tech/pegasys/teku/statetransition/BeaconChainUtil.java", "diffHunk": "@@ -227,7 +269,30 @@ public void finalizeChainAtEpoch(final UnsignedLong epoch) throws Exception {\n               Attestation.class);\n       createAndImportBlockAtSlot(\n           recentChainData.getBestSlot().plus(UnsignedLong.ONE),\n-          Optional.of(currentSlotAssignments));\n+          Optional.of(currentSlotAssignments),\n+          Optional.empty(),\n+          Optional.empty(),\n+          Optional.empty());\n+    }\n+  }\n+\n+  public void setEth1DataOfChain(final Eth1Data eth1Data) throws Exception {\n+    long vote_count = 0;\n+    while (true) {\n+      System.out.println(vote_count);", "originalCommit": "ff20c22e3f29abd7b6506609686605f022e5f432", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzE5MA==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434253190", "bodyText": "We should modify verify_voluntary_exits to return a reason code rather than throwing an exception while we're making changes here.  Helps move us away from using exceptions to indicate validation failure which is an anti-pattern.", "author": "ajsutton", "createdAt": "2020-06-03T00:59:39Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/VoluntaryExitValidator.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static tech.pegasys.teku.core.BlockProcessorUtil.check_voluntary_exit;\n+import static tech.pegasys.teku.core.BlockProcessorUtil.verify_voluntary_exits;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.ValidationResult.VALID;\n+import static tech.pegasys.teku.util.config.Constants.VALID_VALIDATOR_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.bls.BLSSignatureVerifier;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+import tech.pegasys.teku.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.teku.util.collections.LimitStrategy;\n+\n+public class VoluntaryExitValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RecentChainData recentChainData;\n+  private final Set<UnsignedLong> receivedValidExitSet =\n+      ConcurrentLimitedSet.create(\n+          VALID_VALIDATOR_SET_SIZE, LimitStrategy.DROP_LEAST_RECENTLY_ACCESSED);\n+\n+  public VoluntaryExitValidator(RecentChainData recentChainData) {\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  public ValidationResult validate(SignedVoluntaryExit exit) {\n+    if (!isFirstValidExitForValidator(exit)) {\n+      LOG.trace(\"VoluntaryExitValidator: Exit is not the first one for the given validator.\");\n+      return INVALID;\n+    }\n+\n+    if (!passesProcessVoluntaryExitConditions(exit)) {\n+      return INVALID;\n+    }\n+\n+    if (receivedValidExitSet.add(exit.getMessage().getValidator_index())) {\n+      return VALID;\n+    } else {\n+      LOG.trace(\"VoluntaryExitValidator: Exit is not the first one for the given validator.\");\n+      return INVALID;\n+    }\n+  }\n+\n+  private boolean passesProcessVoluntaryExitConditions(SignedVoluntaryExit exit) {\n+    try {\n+      BeaconState state =\n+          recentChainData\n+              .getBestState()\n+              .orElseThrow(\n+                  () ->\n+                      new IllegalStateException(\n+                          \"Unable to get best state for voluntary exit processing\"));\n+      check_voluntary_exit(state, exit.getMessage());\n+      verify_voluntary_exits(state, SSZList.singleton(exit), BLSSignatureVerifier.SIMPLE);\n+    } catch (IllegalArgumentException | BLSSignatureVerifier.InvalidSignatureException e) {\n+      LOG.trace(\"VoluntaryExitValidator: Exit fails process voluntary exit conditions.\", e);\n+      return false;", "originalCommit": "ff20c22e3f29abd7b6506609686605f022e5f432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwNzc2MQ==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434707761", "bodyText": "I just did that refactoring for processing voluntary exits but to do that for the signature check, i.e. the verify_voluntary_exits seems like it might require a lot of work (due to it being tied into batch block signature verification). I should probably do that in another PR since this one's already getting pretty big.", "author": "cemozerr", "createdAt": "2020-06-03T16:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkwMDIzNQ==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434900235", "bodyText": "I don't think it has to be split out into a whole separate class for the validations - the signature check would wind up just using BLSSignatureVerifier.verify instead of verifyAndThrow - BlockProcessorUtil is already converting the InvalidSignatureException to a BlockProcessingException so it would be an easy change for verify_voluntary_exits to wind up returning a boolean instead of throwing.", "author": "ajsutton", "createdAt": "2020-06-03T22:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTY5OQ==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r435381699", "bodyText": "Makes sense. Made the change.", "author": "cemozerr", "createdAt": "2020-06-04T16:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzMyOA==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434253328", "bodyText": "invalidBlock?", "author": "ajsutton", "createdAt": "2020-06-03T01:00:09Z", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/VoluntaryExitTopicHandlerTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.ValidationResult.VALID;\n+\n+import com.google.common.eventbus.EventBus;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.core.VoluntaryExitGenerator;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.networking.eth2.gossip.encoding.GossipEncoding;\n+import tech.pegasys.teku.networking.eth2.gossip.topics.validation.VoluntaryExitValidator;\n+import tech.pegasys.teku.ssz.SSZTypes.Bytes4;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class VoluntaryExitTopicHandlerTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final EventBus eventBus = mock(EventBus.class);\n+  private final GossipEncoding gossipEncoding = GossipEncoding.SSZ_SNAPPY;\n+  private final RecentChainData recentChainData = MemoryOnlyRecentChainData.create(eventBus);\n+  private final BeaconChainUtil beaconChainUtil = BeaconChainUtil.create(5, recentChainData);\n+\n+  private final VoluntaryExitGenerator exitGenerator =\n+      new VoluntaryExitGenerator(beaconChainUtil.getValidatorKeys());\n+  private final VoluntaryExitValidator validator = mock(VoluntaryExitValidator.class);\n+\n+  private VoluntaryExitTopicHandler topicHandler =\n+      new VoluntaryExitTopicHandler(gossipEncoding, dataStructureUtil.randomForkInfo(), validator);\n+\n+  @BeforeEach\n+  public void setup() {\n+    beaconChainUtil.initializeStorage();\n+  }\n+\n+  @Test\n+  public void handleMessage_validExit() {\n+    final SignedVoluntaryExit exit =\n+        exitGenerator.withEpoch(recentChainData.getBestState().orElseThrow(), 3, 3);\n+    when(validator.validate(exit)).thenReturn(VALID);\n+    Bytes serialized = gossipEncoding.encode(exit);\n+    final boolean result = topicHandler.handleMessage(serialized);\n+    assertThat(result).isEqualTo(true);\n+  }\n+\n+  @Test\n+  public void handleMessage_invalidExit() {\n+    final SignedVoluntaryExit exit =\n+        exitGenerator.withEpoch(recentChainData.getBestState().orElseThrow(), 3, 3);\n+    when(validator.validate(exit)).thenReturn(INVALID);\n+    Bytes serialized = gossipEncoding.encode(exit);\n+    final boolean result = topicHandler.handleMessage(serialized);\n+    assertThat(result).isEqualTo(false);\n+  }\n+\n+  @Test\n+  public void handleMessage_invalidBlock_invalidSSZ() {", "originalCommit": "ff20c22e3f29abd7b6506609686605f022e5f432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MTU1Mg==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434651552", "bodyText": "removed.", "author": "cemozerr", "createdAt": "2020-06-03T15:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NTkzMg==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434265932", "bodyText": "You already have the epoch, so this is always generating invalid signatures. :)", "author": "ajsutton", "createdAt": "2020-06-03T01:53:07Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/Signer.java", "diffHunk": "@@ -95,6 +96,18 @@ public Signer(final MessageSignerService signerService) {\n     return signerService.signAggregateAndProof(signingRoot);\n   }\n \n+  public SafeFuture<BLSSignature> signVoluntaryExit(\n+      final VoluntaryExit voluntaryExit, final ForkInfo forkInfo) {\n+    final Bytes domain =\n+        get_domain(\n+            Constants.DOMAIN_VOLUNTARY_EXIT,\n+            compute_epoch_at_slot(voluntaryExit.getEpoch()),", "originalCommit": "ff20c22e3f29abd7b6506609686605f022e5f432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MTE5NQ==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434651195", "bodyText": "Oops. Good catch.", "author": "cemozerr", "createdAt": "2020-06-03T15:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NTkzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MTI0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434651249", "bodyText": "Fixed.", "author": "cemozerr", "createdAt": "2020-06-03T15:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NTkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjMzMg==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434266332", "bodyText": "You can do this without messing around with additional deposits and Eth1Data by just adding a validator to the genesis state that hasn't deposited enough to be activated:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Test\n          \n          \n            \n              public void shouldReturnInvalidForExitOfInactiveValidator() throws Exception {\n          \n          \n            \n                TestDepositGenerator testDepositGenerator =\n          \n          \n            \n                    new TestDepositGenerator(VALIDATOR_KEYS.subList(0, 20));\n          \n          \n            \n                List<Deposit> deposits = testDepositGenerator.getDeposits(10, 20, 20);\n          \n          \n            \n                initializeStorage(recentChainData, VALIDATOR_KEYS.subList(0, 10));\n          \n          \n            \n            \n          \n          \n            \n                beaconChainUtil.setEth1DataOfChain(\n          \n          \n            \n                    new Eth1Data(testDepositGenerator.getRoot(), UnsignedLong.valueOf(20), Bytes32.ZERO));\n          \n          \n            \n                beaconChainUtil.createAndImportBlockAtSlotWithDeposits(UnsignedLong.valueOf(6), deposits);\n          \n          \n            \n            \n          \n          \n            \n                SignedVoluntaryExit exit =\n          \n          \n            \n                    voluntaryExitGenerator.valid(recentChainData.getBestState().orElseThrow(), 15);\n          \n          \n            \n                assertThat(voluntaryExitValidator.validate(exit)).isEqualTo(INVALID);\n          \n          \n            \n              }\n          \n          \n            \n              @Test\n          \n          \n            \n              public void shouldReturnInvalidForExitOfInactiveValidator() throws Exception {\n          \n          \n            \n                final DepositGenerator depositGenerator = new DepositGenerator(true);\n          \n          \n            \n                final List<DepositData> initialDepositData =\n          \n          \n            \n                    new MockStartDepositGenerator(depositGenerator)\n          \n          \n            \n                        .createDeposits(VALIDATOR_KEYS.subList(0, 10));\n          \n          \n            \n                // Add an inactive validator (they haven't deposited enough to become a validator)\n          \n          \n            \n                final BLSKeyPair inactiveValidatorKeyPair = VALIDATOR_KEYS.get(10);\n          \n          \n            \n                initialDepositData.add(depositGenerator.createDepositData(inactiveValidatorKeyPair, UnsignedLong.ONE, inactiveValidatorKeyPair.getPublicKey()));\n          \n          \n            \n                final BeaconState genesisState = new MockStartBeaconStateGenerator()\n          \n          \n            \n                    .createInitialBeaconState(UnsignedLong.ZERO, initialDepositData);\n          \n          \n            \n                recentChainData.initializeFromGenesis(genesisState);\n          \n          \n            \n            \n          \n          \n            \n                SignedVoluntaryExit exit =\n          \n          \n            \n                    voluntaryExitGenerator.valid(recentChainData.getBestState().orElseThrow(), 10, false);\n          \n          \n            \n                assertThat(voluntaryExitValidator.validate(exit)).isEqualTo(INVALID);\n          \n          \n            \n              }", "author": "ajsutton", "createdAt": "2020-06-03T01:55:04Z", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/VoluntaryExitValidatorTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.ValidationResult.VALID;\n+import static tech.pegasys.teku.statetransition.BeaconChainUtil.initializeStorage;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.TestDepositGenerator;\n+import tech.pegasys.teku.core.VoluntaryExitGenerator;\n+import tech.pegasys.teku.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.datastructures.operations.Deposit;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class VoluntaryExitValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private final VoluntaryExitGenerator voluntaryExitGenerator =\n+      new VoluntaryExitGenerator(VALIDATOR_KEYS);\n+\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private VoluntaryExitValidator voluntaryExitValidator;\n+\n+  @BeforeAll\n+  static void beforeAll() {\n+    Constants.SLOTS_PER_EPOCH = 2;\n+    Constants.EPOCHS_PER_ETH1_VOTING_PERIOD = 1;\n+    Constants.PERSISTENT_COMMITTEE_PERIOD = 2;\n+  }\n+\n+  @AfterAll\n+  static void afterAll() {\n+    Constants.setConstants(\"minimal\");\n+  }\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());\n+    beaconChainUtil = BeaconChainUtil.create(recentChainData, VALIDATOR_KEYS, true);\n+    voluntaryExitValidator = new VoluntaryExitValidator(recentChainData);\n+  }\n+\n+  @Test\n+  public void shouldReturnValidForValidVoluntaryExit() throws Exception {\n+    beaconChainUtil.initializeStorage();\n+    beaconChainUtil.createAndImportBlockAtSlot(6);\n+    SignedVoluntaryExit exit =\n+        voluntaryExitGenerator.valid(recentChainData.getBestState().orElseThrow(), 3);\n+    assertThat(voluntaryExitValidator.validate(exit)).isEqualTo(VALID);\n+  }\n+\n+  @Test\n+  public void shouldReturnInvalidForExitsAfterTheFirstForValidator() throws Exception {\n+    beaconChainUtil.initializeStorage();\n+    beaconChainUtil.createAndImportBlockAtSlot(6);\n+    SignedVoluntaryExit exit1 =\n+        voluntaryExitGenerator.valid(recentChainData.getBestState().orElseThrow(), 3);\n+\n+    SignedVoluntaryExit exit2 =\n+        voluntaryExitGenerator.valid(recentChainData.getBestState().orElseThrow(), 3);\n+\n+    SignedVoluntaryExit exit3 =\n+        voluntaryExitGenerator.valid(recentChainData.getBestState().orElseThrow(), 3);\n+\n+    assertThat(voluntaryExitValidator.validate(exit1)).isEqualTo(VALID);\n+    assertThat(voluntaryExitValidator.validate(exit2)).isEqualTo(INVALID);\n+    assertThat(voluntaryExitValidator.validate(exit3)).isEqualTo(INVALID);\n+  }\n+\n+  @Test\n+  public void shouldReturnInvalidForExitWithInvalidSignature() throws Exception {\n+    beaconChainUtil.initializeStorage();\n+    beaconChainUtil.createAndImportBlockAtSlot(6);\n+    SignedVoluntaryExit exit1 =\n+        voluntaryExitGenerator.withInvalidSignature(\n+            recentChainData.getBestState().orElseThrow(), 3);\n+    assertThat(voluntaryExitValidator.validate(exit1)).isEqualTo(INVALID);\n+  }\n+\n+  @Test\n+  public void shouldReturnInvalidForExitOfInactiveValidator() throws Exception {\n+    TestDepositGenerator testDepositGenerator =\n+        new TestDepositGenerator(VALIDATOR_KEYS.subList(0, 20));\n+    List<Deposit> deposits = testDepositGenerator.getDeposits(10, 20, 20);\n+    initializeStorage(recentChainData, VALIDATOR_KEYS.subList(0, 10));\n+\n+    beaconChainUtil.setEth1DataOfChain(\n+        new Eth1Data(testDepositGenerator.getRoot(), UnsignedLong.valueOf(20), Bytes32.ZERO));\n+    beaconChainUtil.createAndImportBlockAtSlotWithDeposits(UnsignedLong.valueOf(6), deposits);\n+\n+    SignedVoluntaryExit exit =\n+        voluntaryExitGenerator.valid(recentChainData.getBestState().orElseThrow(), 15);\n+    assertThat(voluntaryExitValidator.validate(exit)).isEqualTo(INVALID);\n+  }", "originalCommit": "ff20c22e3f29abd7b6506609686605f022e5f432", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTI4MA==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434309280", "bodyText": "Do you think I should keep setEth1DataOfChain as a utility method, or remove it since this PR won't require it anymore?", "author": "cemozerr", "createdAt": "2020-06-03T05:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDQ5NA==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434310494", "bodyText": "Probably take it out of this PR but keep it around locally - you're going to want it when fixing the bug about using the wrong Eth1Data when selecting deposits to go in the block. :)", "author": "ajsutton", "createdAt": "2020-06-03T05:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0OTc2OA==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434649768", "bodyText": "Yep, this approach is way smarter and simpler btw.", "author": "cemozerr", "createdAt": "2020-06-03T15:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MDM1NQ==", "url": "https://github.com/ConsenSys/teku/pull/2042#discussion_r434650355", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-03T15:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2NjMzMg=="}], "type": "inlineReview"}, {"oid": "4092d2aae629aa78e87af09f4648d50f1e61841b", "url": "https://github.com/ConsenSys/teku/commit/4092d2aae629aa78e87af09f4648d50f1e61841b", "message": "Simplify inactive validator test", "committedDate": "2020-06-03T15:22:00Z", "type": "commit"}, {"oid": "5e9154f7a1ef47331129999e8c40222ca75fb039", "url": "https://github.com/ConsenSys/teku/commit/5e9154f7a1ef47331129999e8c40222ca75fb039", "message": "Fix unnecessary epoch calculation", "committedDate": "2020-06-03T15:22:49Z", "type": "commit"}, {"oid": "3607ec39eae8c50ffff50fe61c32c0fed0ceb6ba", "url": "https://github.com/ConsenSys/teku/commit/3607ec39eae8c50ffff50fe61c32c0fed0ceb6ba", "message": "Remove stray function name", "committedDate": "2020-06-03T15:23:38Z", "type": "commit"}, {"oid": "25e91c0d20cb46b04e84b00d79020a41758cca64", "url": "https://github.com/ConsenSys/teku/commit/25e91c0d20cb46b04e84b00d79020a41758cca64", "message": "Return reason instead of throwing during exit validation", "committedDate": "2020-06-03T15:55:26Z", "type": "commit"}, {"oid": "f0e71e00fc16555eeb1c6cf43d9f365f4a30839a", "url": "https://github.com/ConsenSys/teku/commit/f0e71e00fc16555eeb1c6cf43d9f365f4a30839a", "message": "Integrate BlockVoluntaryExitValidator", "committedDate": "2020-06-03T16:44:56Z", "type": "commit"}, {"oid": "fac4f37c952f61c605b098572d962b3541c234d4", "url": "https://github.com/ConsenSys/teku/commit/fac4f37c952f61c605b098572d962b3541c234d4", "message": "Remove redundant setEth1DataOfChain method", "committedDate": "2020-06-03T16:46:24Z", "type": "commit"}, {"oid": "45303efc0a58d762e7ae33b1f14d4c7862e1b84d", "url": "https://github.com/ConsenSys/teku/commit/45303efc0a58d762e7ae33b1f14d4c7862e1b84d", "message": "Revert the DepositProvider changes", "committedDate": "2020-06-03T16:49:39Z", "type": "commit"}, {"oid": "3699b42d0975c2c9c3e91425496283d711a1f1fb", "url": "https://github.com/ConsenSys/teku/commit/3699b42d0975c2c9c3e91425496283d711a1f1fb", "message": "Run spotless", "committedDate": "2020-06-03T16:54:42Z", "type": "commit"}, {"oid": "739a2fddf1a59ee845448b0d3953ad82a00a48ab", "url": "https://github.com/ConsenSys/teku/commit/739a2fddf1a59ee845448b0d3953ad82a00a48ab", "message": "Add back accidentally deleted file", "committedDate": "2020-06-03T17:21:09Z", "type": "commit"}, {"oid": "258beb4c4cd1e74da6539a912e8d8d5315874ea4", "url": "https://github.com/ConsenSys/teku/commit/258beb4c4cd1e74da6539a912e8d8d5315874ea4", "message": "Merge remote-tracking branch 'remotes/origin/master' into supportExitGossip\n\n# Conflicts:\n#\tnetworking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "committedDate": "2020-06-03T20:27:19Z", "type": "commit"}, {"oid": "8976bd2fdd1042932b5c41b1dec74c812866add9", "url": "https://github.com/ConsenSys/teku/commit/8976bd2fdd1042932b5c41b1dec74c812866add9", "message": "Merge branch 'master' into supportExitGossip", "committedDate": "2020-06-04T15:57:43Z", "type": "commit"}, {"oid": "2fffd15c7134a2475ff691c95d90bc5fbb8715ba", "url": "https://github.com/ConsenSys/teku/commit/2fffd15c7134a2475ff691c95d90bc5fbb8715ba", "message": "Return boolean from verify_voluntary_exits", "committedDate": "2020-06-04T16:15:22Z", "type": "commit"}, {"oid": "e72c3450ad75fecc33c3273b8d51873f56c186ea", "url": "https://github.com/ConsenSys/teku/commit/e72c3450ad75fecc33c3273b8d51873f56c186ea", "message": "Fix bug and run spotless", "committedDate": "2020-06-04T16:21:26Z", "type": "commit"}, {"oid": "d9a5d59dde8ca46309fa1583482573e390ab346c", "url": "https://github.com/ConsenSys/teku/commit/d9a5d59dde8ca46309fa1583482573e390ab346c", "message": "Merge branch 'master' into supportExitGossip", "committedDate": "2020-06-04T16:21:45Z", "type": "commit"}]}