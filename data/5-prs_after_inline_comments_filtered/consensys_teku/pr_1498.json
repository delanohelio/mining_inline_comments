{"pr_number": 1498, "pr_title": "Clean Storage Client", "pr_createdAt": "2020-03-28T00:36:38Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1498", "timeline": [{"oid": "378165920c39988531209e4fa656d40c42f62479", "url": "https://github.com/ConsenSys/teku/commit/378165920c39988531209e4fa656d40c42f62479", "message": "Create MemoryOnlyChainStorageClient", "committedDate": "2020-03-28T00:33:44Z", "type": "commit"}, {"oid": "8869e1c6040a373751758640530ceedfc7131791", "url": "https://github.com/ConsenSys/teku/commit/8869e1c6040a373751758640530ceedfc7131791", "message": "Clean and rename ChainStorageClient", "committedDate": "2020-03-28T00:35:07Z", "type": "commit"}, {"oid": "5ad4d8408e20faf0735413ddbb92316c6b24e10f", "url": "https://github.com/ConsenSys/teku/commit/5ad4d8408e20faf0735413ddbb92316c6b24e10f", "message": "Run spotless", "committedDate": "2020-03-28T00:36:54Z", "type": "commit"}, {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "url": "https://github.com/ConsenSys/teku/commit/3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "message": "Remove accidentally committed data files", "committedDate": "2020-03-28T01:00:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjMyOQ==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399852329", "bodyText": "nit: Probably more semantically accurate to use an IllegalStateException here.", "author": "ajsutton", "createdAt": "2020-03-29T20:52:47Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/ChainStorageServer.java", "diffHunk": "@@ -77,9 +71,13 @@ private synchronized void handleStoreUpdate(final StorageUpdateResult result) {\n     }\n   }\n \n-  @Subscribe\n-  public void onStoreRequest(final GetStoreRequest request) {\n-    eventBus.post(new GetStoreResponse(request.getId(), getStore()));\n+  @Override\n+  public SafeFuture<Optional<Store>> onStoreRequest() {\n+    if (database == null) {\n+      return SafeFuture.failedFuture(new RuntimeException(\"Database not initialized yet\"));", "originalCommit": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNzcxMg==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r400327712", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-03-30T16:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjczNw==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399852737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @SuppressWarnings({\"FutureReturnValueIgnored\"})\n          \n          \n            \n              private SafeFuture<RecentChainData> initializeFromStorage() {\n          \n          \n            \n                LOG.trace(\"Begin initializing ChainStorageClient from storage\");\n          \n          \n            \n                SafeFuture<RecentChainData> recentChainDataFuture = new SafeFuture<>();\n          \n          \n            \n                makeStoreRequest()\n          \n          \n            \n                    .thenAccept(\n          \n          \n            \n                        maybeStore -> {\n          \n          \n            \n                          maybeStore.ifPresent(\n          \n          \n            \n                              (store) -> {\n          \n          \n            \n                                this.setStore(store);\n          \n          \n            \n                                LOG.debug(\"Finish initializing ChainStorageClient from storage\");\n          \n          \n            \n                              });\n          \n          \n            \n                          recentChainDataFuture.complete(this);\n          \n          \n            \n                        });\n          \n          \n            \n                return recentChainDataFuture;\n          \n          \n            \n              }\n          \n          \n            \n               private SafeFuture<RecentChainData> initializeFromStorage() {\n          \n          \n            \n                LOG.trace(\"Begin initializing ChainStorageClient from storage\");\n          \n          \n            \n                return makeStoreRequest()\n          \n          \n            \n                    .thenApply(\n          \n          \n            \n                        maybeStore -> {\n          \n          \n            \n                          maybeStore.ifPresent(\n          \n          \n            \n                              (store) -> {\n          \n          \n            \n                                this.setStore(store);\n          \n          \n            \n                                LOG.debug(\"Finish initializing ChainStorageClient from storage\");\n          \n          \n            \n                              });\n          \n          \n            \n                          return this;\n          \n          \n            \n                        });\n          \n          \n            \n              }", "author": "ajsutton", "createdAt": "2020-03-29T20:56:26Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/StorageBackedRecentChainData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.storage.api.StorageUpdateChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class StorageBackedRecentChainData extends RecentChainData {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final AsyncRunner asyncRunner;\n+\n+  public StorageBackedRecentChainData(\n+      final AsyncRunner asyncRunner,\n+      final StorageUpdateChannel storageUpdateChannel,\n+      final EventBus eventBus) {\n+    super(storageUpdateChannel, eventBus);\n+    this.asyncRunner = asyncRunner;\n+    eventBus.register(this);\n+  }\n+\n+  public static SafeFuture<RecentChainData> create(\n+      final AsyncRunner asyncRunner,\n+      final StorageUpdateChannel storageUpdateChannel,\n+      final EventBus eventBus) {\n+    StorageBackedRecentChainData client =\n+        new StorageBackedRecentChainData(asyncRunner, storageUpdateChannel, eventBus);\n+    return client.initializeFromStorage();\n+  }\n+\n+  @SuppressWarnings({\"FutureReturnValueIgnored\"})\n+  private SafeFuture<RecentChainData> initializeFromStorage() {\n+    LOG.trace(\"Begin initializing ChainStorageClient from storage\");\n+    SafeFuture<RecentChainData> recentChainDataFuture = new SafeFuture<>();\n+    makeStoreRequest()\n+        .thenAccept(\n+            maybeStore -> {\n+              maybeStore.ifPresent(\n+                  (store) -> {\n+                    this.setStore(store);\n+                    LOG.debug(\"Finish initializing ChainStorageClient from storage\");\n+                  });\n+              recentChainDataFuture.complete(this);\n+            });\n+    return recentChainDataFuture;\n+  }", "originalCommit": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1ODAyNw==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399858027", "bodyText": "This was exactly what I initially did, but for some reason, the compiler was giving me this error:\nerror: incompatible types: unexpected return value. I'll try it again tomorrow.", "author": "cemozerr", "createdAt": "2020-03-29T21:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1ODgyMw==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399858823", "bodyText": "I tried it in IntellIJ and it was happy.  It think the key difference is thenApply instead of thenAccept and the return being outside the ifPresent.", "author": "ajsutton", "createdAt": "2020-03-29T21:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1ODkzMg==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399858932", "bodyText": "Oh yes, that would explain it. Thanks for the help!", "author": "cemozerr", "createdAt": "2020-03-29T21:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyODU1Mw==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r400328553", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-03-30T16:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjkxMQ==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399852911", "bodyText": "nit: A better name might be requestInitialStore?", "author": "ajsutton", "createdAt": "2020-03-29T20:57:51Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/StorageBackedRecentChainData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.storage.api.StorageUpdateChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class StorageBackedRecentChainData extends RecentChainData {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final AsyncRunner asyncRunner;\n+\n+  public StorageBackedRecentChainData(\n+      final AsyncRunner asyncRunner,\n+      final StorageUpdateChannel storageUpdateChannel,\n+      final EventBus eventBus) {\n+    super(storageUpdateChannel, eventBus);\n+    this.asyncRunner = asyncRunner;\n+    eventBus.register(this);\n+  }\n+\n+  public static SafeFuture<RecentChainData> create(\n+      final AsyncRunner asyncRunner,\n+      final StorageUpdateChannel storageUpdateChannel,\n+      final EventBus eventBus) {\n+    StorageBackedRecentChainData client =\n+        new StorageBackedRecentChainData(asyncRunner, storageUpdateChannel, eventBus);\n+    return client.initializeFromStorage();\n+  }\n+\n+  @SuppressWarnings({\"FutureReturnValueIgnored\"})\n+  private SafeFuture<RecentChainData> initializeFromStorage() {\n+    LOG.trace(\"Begin initializing ChainStorageClient from storage\");\n+    SafeFuture<RecentChainData> recentChainDataFuture = new SafeFuture<>();\n+    makeStoreRequest()\n+        .thenAccept(\n+            maybeStore -> {\n+              maybeStore.ifPresent(\n+                  (store) -> {\n+                    this.setStore(store);\n+                    LOG.debug(\"Finish initializing ChainStorageClient from storage\");\n+                  });\n+              recentChainDataFuture.complete(this);\n+            });\n+    return recentChainDataFuture;\n+  }\n+\n+  private SafeFuture<Optional<Store>> makeStoreRequest() {", "originalCommit": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyODc3OA==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r400328778", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-03-30T16:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzEyMw==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853123", "bodyText": "nit: Rename to RecentChainDataTest.\nPossibly should test the storage backed initial loading in a separate StorageBackedRecentChainDataTest as well.", "author": "ajsutton", "createdAt": "2020-03-29T20:59:35Z", "path": "storage/src/test/java/tech/pegasys/artemis/storage/ChainStorageClientTest.java", "diffHunk": "@@ -40,12 +36,8 @@\n import tech.pegasys.artemis.storage.Store.Transaction;\n import tech.pegasys.artemis.storage.api.StorageUpdateChannel;\n import tech.pegasys.artemis.storage.events.FinalizedCheckpointEvent;\n-import tech.pegasys.artemis.storage.events.GetStoreRequest;\n-import tech.pegasys.artemis.storage.events.GetStoreResponse;\n-import tech.pegasys.artemis.storage.events.StoreInitializedFromStorageEvent;\n-import tech.pegasys.artemis.storage.events.diskupdates.SuccessfulStorageUpdateResult;\n-import tech.pegasys.artemis.util.EventSink;\n import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.async.StubAsyncRunner;\n import tech.pegasys.artemis.util.config.Constants;\n \n class ChainStorageClientTest {", "originalCommit": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjM0MA==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r400332340", "bodyText": "Done both.", "author": "cemozerr", "createdAt": "2020-03-30T16:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzI3OA==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853278", "bodyText": "Timeout is simulated by returning a failedFuture(new TimeoutException()).  Note that you'll need to use the multiple return pattern of mockito so it doesn't keep returning the timeout future and fail forever so:\nwhen(storageUpdateChannel.onStoreRequest()).thenReturn(SafeFuture.failedFuture(new TimeoutException()).thenReturn(storeRequestFuture)", "author": "ajsutton", "createdAt": "2020-03-29T21:01:03Z", "path": "storage/src/test/java/tech/pegasys/artemis/storage/ChainStorageClientTest.java", "diffHunk": "@@ -137,64 +112,39 @@ public void storageBackedClient_storeInitializeViaNewGenesisState()\n     assertThat(client.get().getStore()).isEqualTo(genesisStore);\n   }\n \n-  @Test\n-  public void storageBackedClient_storeInitializeViaStoreInitializedEvent()\n-      throws ExecutionException, InterruptedException {\n-    final EventBus eventBus = new EventBus();\n-    final List<GetStoreRequest> getStoreRequests =\n-        EventSink.capture(eventBus, GetStoreRequest.class);\n-    final SafeFuture<ChainStorageClient> client =\n-        ChainStorageClient.storageBackedClient(eventBus, storageUpdateChannel);\n-\n-    // We should have posted a request to get the store from storage\n-    assertThat(getStoreRequests.size()).isEqualTo(1);\n-    // Client shouldn't be initialized yet\n-    assertThat(client).isNotDone();\n-\n-    // Post initialization event\n-    final Store genesisStore = Store.get_genesis_store(INITIAL_STATE);\n-    eventBus.post(new StoreInitializedFromStorageEvent(Optional.of(genesisStore)));\n-    assertThat(client).isCompleted();\n-    assertStoreInitialized(client.get());\n-    assertStoreIsSet(client.get());\n-    assertThat(client.get().getStore()).isEqualTo(genesisStore);\n-\n-    // Post getStore response - which shouldn't change the store\n-    final BeaconState otherState = dataStructureUtil.randomBeaconState(UnsignedLong.ZERO);\n-    assertThat(otherState).isNotEqualTo(INITIAL_STATE);\n-    final Store otherStore = Store.get_genesis_store(otherState);\n-    eventBus.post(new GetStoreResponse(getStoreRequests.get(0).getId(), Optional.of(otherStore)));\n-    assertStoreIsSet(client.get());\n-    assertThat(client.get().getStore()).isEqualTo(genesisStore);\n-  }\n-\n-  @Test\n-  public void storageBackedClient_storeInitializeViaStoreInitializedEvent_emptyStore()\n-      throws ExecutionException, InterruptedException {\n-    final EventBus eventBus = new EventBus();\n-    final List<GetStoreRequest> getStoreRequests =\n-        EventSink.capture(eventBus, GetStoreRequest.class);\n-    final SafeFuture<ChainStorageClient> client =\n-        ChainStorageClient.storageBackedClient(eventBus, storageUpdateChannel);\n-\n-    // We should have posted a request to get the store from storage\n-    assertThat(getStoreRequests.size()).isEqualTo(1);\n-    // Client shouldn't be initialized yet\n-    assertThat(client).isNotDone();\n-\n-    // Post initialization event\n-    eventBus.post(new StoreInitializedFromStorageEvent(Optional.empty()));\n-    assertThat(client).isCompleted();\n-    assertStoreNotInitialized(client.get());\n-    assertThat(client.get().getStore()).isNull();\n-\n-    // Now set the genesis state\n-    final Store genesisStore = Store.get_genesis_store(INITIAL_STATE);\n-    client.get().initializeFromGenesis(INITIAL_STATE);\n-    assertStoreInitialized(client.get());\n-    assertStoreIsSet(client.get());\n-    assertThat(client.get().getStore()).isEqualTo(genesisStore);\n-  }\n+  // TODO: figure out how to simulate a timeout and uncomment this test\n+  //  @Test\n+  //  public void storageBackedClient_storeInitializeViaGetStoreRequestAfterTimeout()", "originalCommit": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjY5Ng==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r400332696", "bodyText": "Thanks for the tip, was really struggling to find how to simulate a TimeoutException.", "author": "cemozerr", "createdAt": "2020-03-30T16:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjczOQ==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r400332739", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-03-30T16:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzQ5Mw==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853493", "bodyText": "Should return a failedFuture instead of null.  While it's not called today getting a null future returned is a nasty surprise.", "author": "ajsutton", "createdAt": "2020-03-29T21:02:59Z", "path": "storage/src/test/java/tech/pegasys/artemis/storage/MapDbDatabaseTest.java", "diffHunk": "@@ -80,6 +81,11 @@\n \n         @Override\n         public void onGenesis(Store store) {}\n+\n+        @Override\n+        public SafeFuture<Optional<Store>> onStoreRequest() {\n+          return null;", "originalCommit": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzYyNg==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853626", "bodyText": "Could this extend StubStorageUpdateChannel and just override onStorageUpdate?", "author": "ajsutton", "createdAt": "2020-03-29T21:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1ODE5Mw==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399858193", "bodyText": "Yeah definitely, that's a great idea.", "author": "cemozerr", "createdAt": "2020-03-29T21:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNDg4Ng==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r400334886", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-03-30T16:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzUzNw==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853537", "bodyText": "nit: Return failed future instead of null.", "author": "ajsutton", "createdAt": "2020-03-29T21:03:23Z", "path": "storage/src/testFixtures/java/tech/pegasys/artemis/storage/StubStorageUpdateChannel.java", "diffHunk": "@@ -13,13 +13,19 @@\n \n package tech.pegasys.artemis.storage;\n \n+import java.util.Optional;\n import tech.pegasys.artemis.storage.api.StorageUpdateChannel;\n import tech.pegasys.artemis.storage.events.diskupdates.StorageUpdate;\n import tech.pegasys.artemis.storage.events.diskupdates.StorageUpdateResult;\n import tech.pegasys.artemis.util.async.SafeFuture;\n \n public class StubStorageUpdateChannel implements StorageUpdateChannel {\n \n+  @Override\n+  public SafeFuture<Optional<Store>> onStoreRequest() {\n+    return null;", "originalCommit": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNDA5MA==", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r400334090", "bodyText": "Done", "author": "cemozerr", "createdAt": "2020-03-30T16:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzUzNw=="}], "type": "inlineReview"}, {"oid": "05bd76b8e3bc7ac772d1efc3262c2ff2b3e5c09a", "url": "https://github.com/ConsenSys/teku/commit/05bd76b8e3bc7ac772d1efc3262c2ff2b3e5c09a", "message": "Resolve comments", "committedDate": "2020-03-30T16:42:41Z", "type": "commit"}, {"oid": "9daf209c5fad6a4a6579ecfa66fa301a5613ed95", "url": "https://github.com/ConsenSys/teku/commit/9daf209c5fad6a4a6579ecfa66fa301a5613ed95", "message": "Merge branch 'master' into cleanAndRenameStorageClient", "committedDate": "2020-03-30T16:42:56Z", "type": "commit"}, {"oid": "ab3db9d50cb9e1c22bd09c6308552c47bb619324", "url": "https://github.com/ConsenSys/teku/commit/ab3db9d50cb9e1c22bd09c6308552c47bb619324", "message": "Fix test", "committedDate": "2020-03-30T17:11:17Z", "type": "commit"}]}