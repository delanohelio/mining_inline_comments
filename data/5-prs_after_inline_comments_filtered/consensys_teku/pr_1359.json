{"pr_number": 1359, "pr_title": "[BC-298] Rework ChainStorageClient initialization", "pr_createdAt": "2020-03-11T15:44:54Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1359", "timeline": [{"oid": "be0693b5fbc7839273b2c381f69257f007e61d18", "url": "https://github.com/ConsenSys/teku/commit/be0693b5fbc7839273b2c381f69257f007e61d18", "message": "Manage ChainStorageClient initialization internally", "committedDate": "2020-03-10T20:39:55Z", "type": "commit"}, {"oid": "b09bdcb8fb8f9f94584f34c3535345ba57afa4f3", "url": "https://github.com/ConsenSys/teku/commit/b09bdcb8fb8f9f94584f34c3535345ba57afa4f3", "message": "Make bestBlockRoot and bestBlockState getters return Optional's", "committedDate": "2020-03-10T22:30:19Z", "type": "commit"}, {"oid": "2a8b4d94808dc0805a9abf3710369f5f69029fe5", "url": "https://github.com/ConsenSys/teku/commit/2a8b4d94808dc0805a9abf3710369f5f69029fe5", "message": "Handle starting up from an existing, but empty database", "committedDate": "2020-03-10T22:30:25Z", "type": "commit"}, {"oid": "3ecf7cb89c83f7f2e0903dd7964318d2d8acfd64", "url": "https://github.com/ConsenSys/teku/commit/3ecf7cb89c83f7f2e0903dd7964318d2d8acfd64", "message": "Update acceptance test dsl to account for lag in setting chain head", "committedDate": "2020-03-10T22:30:25Z", "type": "commit"}, {"oid": "8eb4c813fd8e86c50cb5025b04a27c6634bce004", "url": "https://github.com/ConsenSys/teku/commit/8eb4c813fd8e86c50cb5025b04a27c6634bce004", "message": "Rework chainStorageClient initialization, add tests", "committedDate": "2020-03-11T01:20:59Z", "type": "commit"}, {"oid": "666f396b1d2e33dfd84d2b0a4a6104a4a2457712", "url": "https://github.com/ConsenSys/teku/commit/666f396b1d2e33dfd84d2b0a4a6104a4a2457712", "message": "Update storageBackedClient() factory to return a future\n\nMove storage-backed initialization logic to a separate factory class.", "committedDate": "2020-03-11T15:14:27Z", "type": "commit"}, {"oid": "0966628fe66126be11b944da84592878321d2532", "url": "https://github.com/ConsenSys/teku/commit/0966628fe66126be11b944da84592878321d2532", "message": "Merge branch 'master' into bc-277/clean-up-service-startup-cross-dependencies", "committedDate": "2020-03-11T15:29:23Z", "type": "commit"}, {"oid": "fa3c317036f1b2f25829cfa1bd201a3d17cc8e28", "url": "https://github.com/ConsenSys/teku/commit/fa3c317036f1b2f25829cfa1bd201a3d17cc8e28", "message": "Start chainStorageService first", "committedDate": "2020-03-11T16:11:40Z", "type": "commit"}, {"oid": "e65d651324c507dba9f21cd5c9fb8b2b15f3bbb0", "url": "https://github.com/ConsenSys/teku/commit/e65d651324c507dba9f21cd5c9fb8b2b15f3bbb0", "message": "Fix getBestBlockRootState() - use lambda, not method reference", "committedDate": "2020-03-11T20:04:24Z", "type": "commit"}, {"oid": "5e5a230a598fd44bf83380f89d921d409e863322", "url": "https://github.com/ConsenSys/teku/commit/5e5a230a598fd44bf83380f89d921d409e863322", "message": "Make sure we run store initialization logic even if we miss the event", "committedDate": "2020-03-11T20:20:54Z", "type": "commit"}, {"oid": "6839e7c0459c9094b1e4ffd50826ca7add5a2483", "url": "https://github.com/ConsenSys/teku/commit/6839e7c0459c9094b1e4ffd50826ca7add5a2483", "message": "Rework ChainStorageClient initialization events", "committedDate": "2020-03-11T21:15:00Z", "type": "commit"}, {"oid": "666ea7f552dac26bb12164eb391d26067385616b", "url": "https://github.com/ConsenSys/teku/commit/666ea7f552dac26bb12164eb391d26067385616b", "message": "Fix ValidatorCoordinator unit test", "committedDate": "2020-03-11T21:30:03Z", "type": "commit"}, {"oid": "d0ede056df35d35029b83f8af991dbc0dde4c7fc", "url": "https://github.com/ConsenSys/teku/commit/d0ede056df35d35029b83f8af991dbc0dde4c7fc", "message": "Add some more test assertions to ChainStorageClientTest", "committedDate": "2020-03-11T21:30:33Z", "type": "commit"}, {"oid": "cf87292b50f92209e8d18f21b1797a55ef6e8b16", "url": "https://github.com/ConsenSys/teku/commit/cf87292b50f92209e8d18f21b1797a55ef6e8b16", "message": "Fix error-prone issue", "committedDate": "2020-03-11T21:37:48Z", "type": "commit"}, {"oid": "0d32cc919331aefe660c559f29a076279a86887b", "url": "https://github.com/ConsenSys/teku/commit/0d32cc919331aefe660c559f29a076279a86887b", "message": "We should be able to set up an initial state as long as store is null", "committedDate": "2020-03-11T22:07:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMzgyNA==", "url": "https://github.com/ConsenSys/teku/pull/1359#discussion_r391303824", "bodyText": "We should probably be using fetchBeaconHead here rather than waitForBeaconHead. Otherwise we're effectively nesting a waiter inside a waiter.  It will work but failure times become a lot longer unnecessarily.", "author": "ajsutton", "createdAt": "2020-03-11T22:20:56Z", "path": "acceptance-tests/src/test-support/java/tech/pegasys/artemis/test/acceptance/dsl/ArtemisNode.java", "diffHunk": "@@ -137,39 +138,70 @@ public UnsignedLong getGenesisTime() throws IOException {\n     return fetchGenesisTime();\n   }\n \n-  public void waitForNewBlock() throws IOException {\n-    final Bytes32 startingBlockRoot = getCurrentBeaconHead().getBlockRoot();\n-    waitFor(\n-        () -> assertThat(getCurrentBeaconHead().getBlockRoot()).isNotEqualTo(startingBlockRoot));\n+  public void waitForNewBlock() {\n+    final Bytes32 startingBlockRoot = waitForBeaconHead().getBlockRoot();\n+    waitFor(() -> assertThat(waitForBeaconHead().getBlockRoot()).isNotEqualTo(startingBlockRoot));\n   }\n \n-  public void waitForNewFinalization() throws IOException {\n-    UnsignedLong startingFinalizedEpoch = getChainHead().finalized_epoch;\n+  public void waitForNewFinalization() {\n+    UnsignedLong startingFinalizedEpoch = waitForChainHead().finalized_epoch;\n     LOG.debug(\"Wait for finalized block\");\n     waitFor(\n-        () -> assertThat(getChainHead().finalized_epoch).isNotEqualTo(startingFinalizedEpoch), 540);\n+        () -> assertThat(waitForChainHead().finalized_epoch).isNotEqualTo(startingFinalizedEpoch),\n+        540);\n   }\n \n   public void waitUntilInSyncWith(final ArtemisNode targetNode) {\n     LOG.debug(\"Wait for {} to sync to {}\", nodeAlias, targetNode.nodeAlias);\n+    waitFor(() -> assertThat(waitForBeaconHead()).isEqualTo(targetNode.waitForBeaconHead()), 300);", "originalCommit": "0d32cc919331aefe660c559f29a076279a86887b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMzkxNA==", "url": "https://github.com/ConsenSys/teku/pull/1359#discussion_r391303914", "bodyText": "Probably should use fetchChainHead here inside the waiter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    () -> assertThat(waitForChainHead().finalized_epoch).isNotEqualTo(startingFinalizedEpoch),\n          \n          \n            \n                    () -> assertThat(fetchChainHead().finalized_epoch).isNotEqualTo(startingFinalizedEpoch),", "author": "ajsutton", "createdAt": "2020-03-11T22:21:14Z", "path": "acceptance-tests/src/test-support/java/tech/pegasys/artemis/test/acceptance/dsl/ArtemisNode.java", "diffHunk": "@@ -137,39 +138,70 @@ public UnsignedLong getGenesisTime() throws IOException {\n     return fetchGenesisTime();\n   }\n \n-  public void waitForNewBlock() throws IOException {\n-    final Bytes32 startingBlockRoot = getCurrentBeaconHead().getBlockRoot();\n-    waitFor(\n-        () -> assertThat(getCurrentBeaconHead().getBlockRoot()).isNotEqualTo(startingBlockRoot));\n+  public void waitForNewBlock() {\n+    final Bytes32 startingBlockRoot = waitForBeaconHead().getBlockRoot();\n+    waitFor(() -> assertThat(waitForBeaconHead().getBlockRoot()).isNotEqualTo(startingBlockRoot));\n   }\n \n-  public void waitForNewFinalization() throws IOException {\n-    UnsignedLong startingFinalizedEpoch = getChainHead().finalized_epoch;\n+  public void waitForNewFinalization() {\n+    UnsignedLong startingFinalizedEpoch = waitForChainHead().finalized_epoch;\n     LOG.debug(\"Wait for finalized block\");\n     waitFor(\n-        () -> assertThat(getChainHead().finalized_epoch).isNotEqualTo(startingFinalizedEpoch), 540);\n+        () -> assertThat(waitForChainHead().finalized_epoch).isNotEqualTo(startingFinalizedEpoch),", "originalCommit": "0d32cc919331aefe660c559f29a076279a86887b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNDA2MQ==", "url": "https://github.com/ConsenSys/teku/pull/1359#discussion_r391304061", "bodyText": "Probably should use fetchBeaconHead here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                waitFor(() -> assertThat(waitForBeaconHead().getBlockRoot()).isNotEqualTo(startingBlockRoot));\n          \n          \n            \n                waitFor(() -> assertThat(fetchBeaconHead().getBlockRoot()).isNotEqualTo(startingBlockRoot));", "author": "ajsutton", "createdAt": "2020-03-11T22:21:37Z", "path": "acceptance-tests/src/test-support/java/tech/pegasys/artemis/test/acceptance/dsl/ArtemisNode.java", "diffHunk": "@@ -137,39 +138,70 @@ public UnsignedLong getGenesisTime() throws IOException {\n     return fetchGenesisTime();\n   }\n \n-  public void waitForNewBlock() throws IOException {\n-    final Bytes32 startingBlockRoot = getCurrentBeaconHead().getBlockRoot();\n-    waitFor(\n-        () -> assertThat(getCurrentBeaconHead().getBlockRoot()).isNotEqualTo(startingBlockRoot));\n+  public void waitForNewBlock() {\n+    final Bytes32 startingBlockRoot = waitForBeaconHead().getBlockRoot();\n+    waitFor(() -> assertThat(waitForBeaconHead().getBlockRoot()).isNotEqualTo(startingBlockRoot));", "originalCommit": "0d32cc919331aefe660c559f29a076279a86887b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNjA1Mg==", "url": "https://github.com/ConsenSys/teku/pull/1359#discussion_r391306052", "bodyText": "Nice to be using real data structures instead of mocking them.", "author": "ajsutton", "createdAt": "2020-03-11T22:27:17Z", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/topics/AttestationTopicHandlerTest.java", "diffHunk": "@@ -84,10 +82,10 @@ public void handleMessage_invalidAttestation_missingState() throws Exception {\n     final Bytes serialized = SimpleOffsetSerializer.serialize(attestation);\n \n     // Set up state to be missing\n-    final Bytes32 blockRoot = attestation.getData().getBeacon_block_root();\n-    Store mockStore = mock(Store.class);\n-    storageClient.setStore(mockStore);\n-    doReturn(null).when(mockStore).getBlockState(blockRoot);\n+    final ChainStorageClient storageClient = ChainStorageClient.memoryOnlyClient(eventBus);\n+    storageClient.setGenesisState(DataStructureUtil.randomBeaconState(1));\n+    final AttestationTopicHandler topicHandler =\n+        new AttestationTopicHandler(eventBus, storageClient, 1);", "originalCommit": "0d32cc919331aefe660c559f29a076279a86887b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNzc0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1359#discussion_r391307745", "bodyText": "Not a big deal but I think I preferred the initializeFromGenesis naming because it doesn't feel like it quite matches the pattern of a setter (particularly that it can't be called multiple times).", "author": "ajsutton", "createdAt": "2020-03-11T22:31:55Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/ChainStorageClient.java", "diffHunk": "@@ -45,54 +47,68 @@\n   protected final EventBus eventBus;\n   private final TransactionPrecommit transactionPrecommit;\n \n+  private final AtomicBoolean storeInitialized = new AtomicBoolean(false);\n+  private final SafeFuture<Void> storeInitializedFuture = new SafeFuture<>();\n+  private final SafeFuture<Void> bestBlockInitialized = new SafeFuture<>();\n+\n   private volatile Store store;\n-  private volatile Bytes32 bestBlockRoot =\n-      Bytes32.ZERO; // block chosen by lmd ghost to build and attest on\n+  private volatile Optional<Bytes32> bestBlockRoot =\n+      Optional.empty(); // block chosen by lmd ghost to build and attest on\n   private volatile UnsignedLong bestSlot =\n       UnsignedLong.ZERO; // slot of the block chosen by lmd ghost to build and attest on\n   // Time\n   private volatile UnsignedLong genesisTime;\n \n   public static ChainStorageClient memoryOnlyClient(final EventBus eventBus) {\n-    return new ChainStorageClient(eventBus, TransactionPrecommit.memoryOnly());\n+    final ChainStorageClient client =\n+        new ChainStorageClient(eventBus, TransactionPrecommit.memoryOnly());\n+    eventBus.register(client);\n+    return client;\n+  }\n+\n+  public static SafeFuture<ChainStorageClient> storageBackedClient(final EventBus eventBus) {\n+    final StorageBackedChainStorageClientFactory factory =\n+        new StorageBackedChainStorageClientFactory(eventBus);\n+    eventBus.register(factory);\n+    return factory.get();\n   }\n \n-  public static ChainStorageClient storageBackedClient(final EventBus eventBus) {\n-    return new ChainStorageClient(eventBus, TransactionPrecommit.storageEnabled(eventBus));\n+  @VisibleForTesting\n+  static ChainStorageClient memoryOnlyClientWithStore(final EventBus eventBus, final Store store) {\n+    final ChainStorageClient client =\n+        new ChainStorageClient(eventBus, TransactionPrecommit.memoryOnly());\n+    eventBus.register(client);\n+    client.setStore(store);\n+    return client;\n   }\n \n-  private ChainStorageClient(EventBus eventBus, final TransactionPrecommit transactionPrecommit) {\n+  ChainStorageClient(EventBus eventBus, final TransactionPrecommit transactionPrecommit) {\n     this.eventBus = eventBus;\n     this.transactionPrecommit = transactionPrecommit;\n-    this.eventBus.register(this);\n   }\n \n-  public void initializeFromGenesis(final BeaconState initialState) {\n-    setGenesisTime(initialState.getGenesis_time());\n-    final Store store = Store.get_genesis_store(initialState);\n-    setStore(store);\n-    eventBus.post(new StoreGenesisDiskUpdateEvent(store));\n+  public void subscribeStoreInitialized(Runnable runnable) {\n+    storeInitializedFuture.always(runnable);\n+  }\n \n-    // The genesis state is by definition finalised so just get the root from there.\n-    Bytes32 headBlockRoot = store.getFinalizedCheckpoint().getRoot();\n-    BeaconBlock headBlock = store.getBlock(headBlockRoot);\n-    updateBestBlock(headBlockRoot, headBlock.getSlot());\n-    eventBus.post(new StoreInitializedEvent());\n+  public void subscribeBestBlockInitialized(Runnable runnable) {\n+    bestBlockInitialized.always(runnable);\n   }\n \n-  public void initializeFromStore(final Store store, final Bytes32 headBlockRoot) {\n-    BeaconState state = store.getBlockState(headBlockRoot);\n-    setGenesisTime(state.getGenesis_time());\n-    setStore(store);\n+  public void setGenesisState(final BeaconState genesisState) {", "originalCommit": "0d32cc919331aefe660c559f29a076279a86887b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMDEzOA==", "url": "https://github.com/ConsenSys/teku/pull/1359#discussion_r391700138", "bodyText": "Fair enough - will switch it back", "author": "mbaxter", "createdAt": "2020-03-12T15:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNzc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwODU3Nw==", "url": "https://github.com/ConsenSys/teku/pull/1359#discussion_r391308577", "bodyText": "Nice to see these becoming Optional instead of returning null.", "author": "ajsutton", "createdAt": "2020-03-11T22:34:11Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/ChainStorageClient.java", "diffHunk": "@@ -154,7 +178,7 @@ public Bytes4 getForkAtEpoch(UnsignedLong epoch) {\n    *\n    * @return\n    */\n-  public Bytes32 getBestBlockRoot() {\n+  public Optional<Bytes32> getBestBlockRoot() {", "originalCommit": "0d32cc919331aefe660c559f29a076279a86887b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMDA2Mw==", "url": "https://github.com/ConsenSys/teku/pull/1359#discussion_r391310063", "bodyText": "I like specifically requesting the store instead of it just magically being fired at startup.  Should be even nicer when we get to convert this over to EventChannels.", "author": "ajsutton", "createdAt": "2020-03-11T22:38:22Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/StorageBackedChainStorageClientFactory.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import java.util.OptionalLong;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.storage.events.GetStoreRequest;\n+import tech.pegasys.artemis.storage.events.GetStoreResponse;\n+import tech.pegasys.artemis.storage.events.StoreInitializedFromStorageEvent;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+class StorageBackedChainStorageClientFactory {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final ChainStorageClient client;\n+  private final EventBus eventBus;\n+\n+  private final AtomicBoolean initializationStarted = new AtomicBoolean(false);\n+  private final SafeFuture<ChainStorageClient> initializationCompleted = new SafeFuture<>();\n+  private volatile OptionalLong getStoreRequestId = OptionalLong.empty();\n+\n+  public StorageBackedChainStorageClientFactory(final EventBus eventBus) {\n+    this.client = new ChainStorageClient(eventBus, TransactionPrecommit.storageEnabled(eventBus));\n+    this.eventBus = eventBus;\n+    eventBus.register(client);\n+  }\n+\n+  public SafeFuture<ChainStorageClient> get() {\n+    initializeFromStorage();\n+    return initializationCompleted;\n+  }\n+\n+  private void initializeFromStorage() {\n+    if (initializationStarted.compareAndSet(false, true)) {\n+      LOG.trace(\"Begin initializing {} from storage\", client.getClass().getSimpleName());\n+      final GetStoreRequest storeRequest = new GetStoreRequest();", "originalCommit": "0d32cc919331aefe660c559f29a076279a86887b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "93b80583c7ac6ce414f4353f210a2dda48709672", "url": "https://github.com/ConsenSys/teku/commit/93b80583c7ac6ce414f4353f210a2dda48709672", "message": "Merge branch 'master' into bc-298/rework-chain-storage-client-initialization", "committedDate": "2020-03-12T15:24:17Z", "type": "commit"}, {"oid": "9f767859c6f31a53c2fd68e3c764c430a3b01823", "url": "https://github.com/ConsenSys/teku/commit/9f767859c6f31a53c2fd68e3c764c430a3b01823", "message": "Revert method name change", "committedDate": "2020-03-12T15:28:44Z", "type": "commit"}, {"oid": "0c261f4c7d7f9b54e1fab01be556be5920afd6dd", "url": "https://github.com/ConsenSys/teku/commit/0c261f4c7d7f9b54e1fab01be556be5920afd6dd", "message": "Avoid nested waits where possible", "committedDate": "2020-03-12T15:49:08Z", "type": "commit"}, {"oid": "2edc72f1f9fc37e67907c6c6f977b10a8c12429f", "url": "https://github.com/ConsenSys/teku/commit/2edc72f1f9fc37e67907c6c6f977b10a8c12429f", "message": "Always post an event when ChainStorageServer starts up", "committedDate": "2020-03-12T15:59:09Z", "type": "commit"}]}