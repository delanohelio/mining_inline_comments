{"pr_number": 2683, "pr_title": "Running Validator Node independently", "pr_createdAt": "2020-08-28T04:19:07Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2683", "timeline": [{"oid": "f3523bdc3b5c5bbe10b2d5b501c33c8c06470a5f", "url": "https://github.com/ConsenSys/teku/commit/f3523bdc3b5c5bbe10b2d5b501c33c8c06470a5f", "message": "Running Validator Node independently", "committedDate": "2020-08-28T04:17:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyMjQ5MA==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r478822490", "bodyText": "Maybe here we should probably validate that, when running as a validator, the user isn't using some of the bacon node only options (and vice versa?).", "author": "lucassaldanha", "createdAt": "2020-08-28T04:21:38Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/TekuConfigurationBuilder.java", "diffHunk": "@@ -464,6 +483,8 @@ public TekuConfiguration build() {\n           \"eth1-deposit-contract-address is required if eth1-endpoint is specified.\");\n     }\n \n+    // TODO validate config for validator node only", "originalCommit": "f3523bdc3b5c5bbe10b2d5b501c33c8c06470a5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNzU1Ng==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r478827556", "bodyText": "I think the validator only mode would need to be a subcommand (e.g. teku validator_client with alias teku vc) rather than a --validator-only kind of option.  Then users wouldn't be able to specify any options that weren't specifically allowed for the validator command.", "author": "ajsutton", "createdAt": "2020-08-28T04:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyMjQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5ODEwNQ==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r482598105", "bodyText": "Do we need this TODO? And if so can it be replaced by an issue instead as that's more likely to actually be noticed...", "author": "ajsutton", "createdAt": "2020-09-02T23:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyMjQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3MzczMA==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r482673730", "bodyText": "Yeah, we don't need it :)", "author": "lucassaldanha", "createdAt": "2020-09-03T02:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyMjQ5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNjM5MQ==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r478826391", "bodyText": "We might be able to just use Service here. Will take a little more jiggling to make it fit but would be a nice outcome if we can.", "author": "ajsutton", "createdAt": "2020-08-28T04:39:33Z", "path": "teku/src/main/java/tech/pegasys/teku/Node.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku;\n+\n+public interface Node {", "originalCommit": "f3523bdc3b5c5bbe10b2d5b501c33c8c06470a5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyNjg2NA==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r478826864", "bodyText": "Somewhere along the way we probably should support running the beacon node without it starting an internal validator service. Maybe not step one though.", "author": "ajsutton", "createdAt": "2020-08-28T04:41:32Z", "path": "teku/src/main/java/tech/pegasys/teku/Teku.java", "diffHunk": "@@ -35,7 +36,13 @@ public static void main(final String... args) {\n   }\n \n   private static void start(final TekuConfiguration config) {\n-    final BeaconNode node = new BeaconNode(config);\n+    final Node node;\n+    if (config.isValidatorNodeOnly()) {\n+      node = new ValidatorNode(config);\n+    } else {\n+      node = new BeaconNode(config);\n+    }", "originalCommit": "f3523bdc3b5c5bbe10b2d5b501c33c8c06470a5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed74c1cb0d0ce9dadb85be6f98b950b013517d0c", "url": "https://github.com/ConsenSys/teku/commit/ed74c1cb0d0ce9dadb85be6f98b950b013517d0c", "message": "Added validator client subcommand", "committedDate": "2020-09-02T05:26:09Z", "type": "commit"}, {"oid": "7ed2975f53fbdf306e247fc06e2fd6cc5cf7d1c6", "url": "https://github.com/ConsenSys/teku/commit/7ed2975f53fbdf306e247fc06e2fd6cc5cf7d1c6", "message": "Merge branch 'master' into separate-validator\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-09-02T05:27:57Z", "type": "commit"}, {"oid": "a6ac6d07fe2e478a8c0150ebb09125d34d3d1e4a", "url": "https://github.com/ConsenSys/teku/commit/a6ac6d07fe2e478a8c0150ebb09125d34d3d1e4a", "message": "Adding datapath\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-09-02T05:37:38Z", "type": "commit"}, {"oid": "5f43ca4b9bc449b70af3ced13721dee9972d57d7", "url": "https://github.com/ConsenSys/teku/commit/5f43ca4b9bc449b70af3ced13721dee9972d57d7", "message": "Fixing test\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-09-02T05:44:45Z", "type": "commit"}, {"oid": "4908ac4e79e172c610fa6614bc8e989904edc0ae", "url": "https://github.com/ConsenSys/teku/commit/4908ac4e79e172c610fa6614bc8e989904edc0ae", "message": "Merge branch 'master' into separate-validator\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-09-02T20:35:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5Mzg0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r482593849", "bodyText": "Can we put a hidden = true on this?\nAnd maybe also aliases = { \"vc\" }", "author": "ajsutton", "createdAt": "2020-09-02T23:21:22Z", "path": "teku/src/main/java/tech/pegasys/teku/cli/subcommand/ValidatorClientCommand.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.cli.subcommand;\n+\n+import com.google.common.base.Throwables;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Mixin;\n+import picocli.CommandLine.ParentCommand;\n+import tech.pegasys.teku.cli.BeaconNodeCommand;\n+import tech.pegasys.teku.cli.options.DataOptions;\n+import tech.pegasys.teku.cli.options.InteropOptions;\n+import tech.pegasys.teku.cli.options.LoggingOptions;\n+import tech.pegasys.teku.cli.options.MetricsOptions;\n+import tech.pegasys.teku.cli.options.NetworkOptions;\n+import tech.pegasys.teku.cli.options.ValidatorClientOptions;\n+import tech.pegasys.teku.cli.options.ValidatorOptions;\n+import tech.pegasys.teku.storage.server.DatabaseStorageException;\n+import tech.pegasys.teku.util.cli.PicoCliVersionProvider;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+import tech.pegasys.teku.util.config.NetworkDefinition;\n+import tech.pegasys.teku.util.config.TekuConfiguration;\n+\n+@Command(\n+    name = \"validator-client\",\n+    description = \"Run a Validator Client that connects to a remote Beacon Node\",\n+    showDefaultValues = true,\n+    abbreviateSynopsis = true,\n+    mixinStandardHelpOptions = true,\n+    versionProvider = PicoCliVersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Teku is licensed under the Apache License 2.0\")", "originalCommit": "4908ac4e79e172c610fa6614bc8e989904edc0ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3NTAyOQ==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r482675029", "bodyText": "Done!", "author": "lucassaldanha", "createdAt": "2020-09-03T03:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5Mzg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NzM4Nw==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r482597387", "bodyText": "Once #2684 is merged you'll only have data path in DataOptions - the others have moved to DataStorageOptions but the validator client won't need them anyway.", "author": "ajsutton", "createdAt": "2020-09-02T23:26:37Z", "path": "teku/src/main/java/tech/pegasys/teku/cli/subcommand/ValidatorClientCommand.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.cli.subcommand;\n+\n+import com.google.common.base.Throwables;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Mixin;\n+import picocli.CommandLine.ParentCommand;\n+import tech.pegasys.teku.cli.BeaconNodeCommand;\n+import tech.pegasys.teku.cli.options.DataOptions;\n+import tech.pegasys.teku.cli.options.InteropOptions;\n+import tech.pegasys.teku.cli.options.LoggingOptions;\n+import tech.pegasys.teku.cli.options.MetricsOptions;\n+import tech.pegasys.teku.cli.options.NetworkOptions;\n+import tech.pegasys.teku.cli.options.ValidatorClientOptions;\n+import tech.pegasys.teku.cli.options.ValidatorOptions;\n+import tech.pegasys.teku.storage.server.DatabaseStorageException;\n+import tech.pegasys.teku.util.cli.PicoCliVersionProvider;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+import tech.pegasys.teku.util.config.NetworkDefinition;\n+import tech.pegasys.teku.util.config.TekuConfiguration;\n+\n+@Command(\n+    name = \"validator-client\",\n+    description = \"Run a Validator Client that connects to a remote Beacon Node\",\n+    showDefaultValues = true,\n+    abbreviateSynopsis = true,\n+    mixinStandardHelpOptions = true,\n+    versionProvider = PicoCliVersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Teku is licensed under the Apache License 2.0\")\n+public class ValidatorClientCommand implements Callable<Integer> {\n+\n+  @Mixin(name = \"Validator\")\n+  private ValidatorOptions validatorOptions;\n+\n+  @Mixin(name = \"Validator Client\")\n+  private ValidatorClientOptions validatorClientOptions;\n+\n+  @Mixin(name = \"Network\")\n+  private NetworkOptions networkOptions;\n+\n+  @Mixin(name = \"Data\")\n+  private DataOptions dataOptions;\n+\n+  @Mixin(name = \"Interop\")\n+  private InteropOptions interopOptions;\n+\n+  @Mixin(name = \"Logging\")\n+  private LoggingOptions loggingOptions;\n+\n+  @Mixin(name = \"Metrics\")\n+  private MetricsOptions metricsOptions;\n+\n+  @ParentCommand private BeaconNodeCommand parentCommand;\n+\n+  @Override\n+  public Integer call() {\n+    try {\n+      parentCommand.setLogLevels();\n+      final TekuConfiguration tekuConfiguration = tekuConfiguration();\n+      parentCommand.getStartAction().accept(tekuConfiguration);\n+      return 0;\n+    } catch (InvalidConfigurationException | DatabaseStorageException ex) {\n+      parentCommand.reportUserError(ex);\n+    } catch (CompletionException e) {\n+      if (Throwables.getRootCause(e) instanceof InvalidConfigurationException) {\n+        parentCommand.reportUserError(Throwables.getRootCause(e));\n+      } else {\n+        parentCommand.reportUnexpectedError(e);\n+      }\n+    } catch (Throwable t) {\n+      parentCommand.reportUnexpectedError(t);\n+    }\n+    return 1;\n+  }\n+\n+  private TekuConfiguration tekuConfiguration() {\n+    return TekuConfiguration.builder()\n+        .setNetwork(NetworkDefinition.fromCliArg(networkOptions.getNetwork()))\n+        .setInteropGenesisTime(interopOptions.getInteropGenesisTime())\n+        .setInteropOwnedValidatorStartIndex(interopOptions.getInteropOwnerValidatorStartIndex())\n+        .setInteropOwnedValidatorCount(interopOptions.getInteropOwnerValidatorCount())\n+        .setInteropNumberOfValidators(interopOptions.getInteropNumberOfValidators())\n+        .setInteropEnabled(interopOptions.isInteropEnabled())\n+        .setValidatorKeystoreFiles(validatorOptions.getValidatorKeystoreFiles())\n+        .setValidatorKeystorePasswordFiles(validatorOptions.getValidatorKeystorePasswordFiles())\n+        .setValidatorKeys(validatorOptions.getValidatorKeys())\n+        .setValidatorExternalSignerPublicKeys(\n+            validatorOptions.getValidatorExternalSignerPublicKeys())\n+        .setValidatorExternalSignerUrl(validatorOptions.getValidatorExternalSignerUrl())\n+        .setValidatorExternalSignerTimeout(validatorOptions.getValidatorExternalSignerTimeout())\n+        .setGraffiti(validatorOptions.getGraffiti())\n+        .setLogColorEnabled(loggingOptions.isLogColorEnabled())\n+        .setLogIncludeEventsEnabled(loggingOptions.isLogIncludeEventsEnabled())\n+        .setLogIncludeValidatorDutiesEnabled(loggingOptions.isLogIncludeValidatorDutiesEnabled())\n+        .setLogDestination(loggingOptions.getLogDestination())\n+        .setLogFile(loggingOptions.getLogFile())\n+        .setLogFileNamePattern(loggingOptions.getLogFileNamePattern())\n+        .setLogWireCipher(loggingOptions.isLogWireCipherEnabled())\n+        .setLogWirePlain(loggingOptions.isLogWirePlainEnabled())\n+        .setLogWireMuxFrames(loggingOptions.isLogWireMuxEnabled())\n+        .setLogWireGossip(loggingOptions.isLogWireGossipEnabled())\n+        .setMetricsEnabled(metricsOptions.isMetricsEnabled())\n+        .setMetricsPort(metricsOptions.getMetricsPort())\n+        .setMetricsInterface(metricsOptions.getMetricsInterface())\n+        .setMetricsCategories(metricsOptions.getMetricsCategories())\n+        .setMetricsHostAllowlist(metricsOptions.getMetricsHostAllowlist())\n+        .setDataPath(dataOptions.getDataPath())\n+        .setDataStorageMode(dataOptions.getDataStorageMode())\n+        .setDataStorageFrequency(dataOptions.getDataStorageFrequency())\n+        .setDataStorageCreateDbVersion(dataOptions.getCreateDbVersion())", "originalCommit": "4908ac4e79e172c610fa6614bc8e989904edc0ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3NTA5MQ==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r482675091", "bodyText": "Done :)", "author": "lucassaldanha", "createdAt": "2020-09-03T03:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NzM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5Nzc0MA==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r482597740", "bodyText": "Might be nice to have a common subclass to reuse this code.", "author": "ajsutton", "createdAt": "2020-09-02T23:27:33Z", "path": "teku/src/main/java/tech/pegasys/teku/services/ValidatorNodeServiceController.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.service.serviceutils.Service;\n+import tech.pegasys.teku.service.serviceutils.ServiceConfig;\n+import tech.pegasys.teku.validator.client.ValidatorClientService;\n+\n+public class ValidatorNodeServiceController extends Service {\n+\n+  private final List<Service> services = new ArrayList<>();\n+\n+  public ValidatorNodeServiceController(final ServiceConfig config) {\n+    services.add(ValidatorClientService.create(config));\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStart() {\n+    final Iterator<Service> iterator = services.iterator();\n+    SafeFuture<?> startupFuture = iterator.next().start();\n+    while (iterator.hasNext()) {\n+      final Service nextService = iterator.next();\n+      startupFuture = startupFuture.thenCompose(__ -> nextService.start());\n+    }\n+    return startupFuture;\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStop() {\n+    return SafeFuture.allOf(services.stream().map(Service::stop).toArray(SafeFuture[]::new));\n+  }", "originalCommit": "4908ac4e79e172c610fa6614bc8e989904edc0ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3NjM1Ng==", "url": "https://github.com/ConsenSys/teku/pull/2683#discussion_r482676356", "bodyText": "Done", "author": "lucassaldanha", "createdAt": "2020-09-03T03:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5Nzc0MA=="}], "type": "inlineReview"}, {"oid": "5ac0dfc4ca00d1de1361c02e3089915c65d6848b", "url": "https://github.com/ConsenSys/teku/commit/5ac0dfc4ca00d1de1361c02e3089915c65d6848b", "message": "Merge branch 'master' into separate-validator\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-09-03T02:58:57Z", "type": "commit"}, {"oid": "6a2e25b84cfe832c62a419307dd22b970dd53797", "url": "https://github.com/ConsenSys/teku/commit/6a2e25b84cfe832c62a419307dd22b970dd53797", "message": "Updated to use DataOptions only\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-09-03T03:05:16Z", "type": "commit"}, {"oid": "f2d5dac3e11e402adfe07f1a2bb8a7bcdc6ca7e4", "url": "https://github.com/ConsenSys/teku/commit/f2d5dac3e11e402adfe07f1a2bb8a7bcdc6ca7e4", "message": "Created ServiceController abstract class\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-09-03T03:10:10Z", "type": "commit"}]}