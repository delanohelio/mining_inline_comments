{"pr_number": 2062, "pr_title": "Minimize fork choice dependencies on store", "pr_createdAt": "2020-06-05T15:48:24Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2062", "timeline": [{"oid": "8199f41836d157b0286788cf84af010b5b6a3356", "url": "https://github.com/ConsenSys/teku/commit/8199f41836d157b0286788cf84af010b5b6a3356", "message": "Switch head block slot retrieving source from Store to ProtoArray", "committedDate": "2020-06-03T21:16:24Z", "type": "commit"}, {"oid": "e922872c9e3baf4d6c198f8def875e76815558ea", "url": "https://github.com/ConsenSys/teku/commit/e922872c9e3baf4d6c198f8def875e76815558ea", "message": "Refactor block slot and root look up to not use Store", "committedDate": "2020-06-05T15:45:23Z", "type": "commit"}, {"oid": "7a165dd87ef3dde9695ffee78f6538d288a3a44a", "url": "https://github.com/ConsenSys/teku/commit/7a165dd87ef3dde9695ffee78f6538d288a3a44a", "message": "Remove redundant parent root field", "committedDate": "2020-06-05T19:37:18Z", "type": "commit"}, {"oid": "1060e90a5d06d7d59ac675fb1e7636adc70fd381", "url": "https://github.com/ConsenSys/teku/commit/1060e90a5d06d7d59ac675fb1e7636adc70fd381", "message": "Run spotless & fix test", "committedDate": "2020-06-05T21:11:12Z", "type": "commit"}, {"oid": "fef7512a09156f5e26895cefa706f8a7ebc633fe", "url": "https://github.com/ConsenSys/teku/commit/fef7512a09156f5e26895cefa706f8a7ebc633fe", "message": "Merge remote-tracking branch 'remotes/origin/master' into minimiseForkChoiceDependenciesOnStore\n\n# Conflicts:\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "committedDate": "2020-06-05T21:16:12Z", "type": "commit"}, {"oid": "a23d0654735553452a4787ede5af8877edfb823d", "url": "https://github.com/ConsenSys/teku/commit/a23d0654735553452a4787ede5af8877edfb823d", "message": "Fix tests", "committedDate": "2020-06-08T14:59:22Z", "type": "commit"}, {"oid": "a917252d3c1b69d735526b01bfb47c866f2b07bf", "url": "https://github.com/ConsenSys/teku/commit/a917252d3c1b69d735526b01bfb47c866f2b07bf", "message": "Run spotless", "committedDate": "2020-06-08T15:55:02Z", "type": "commit"}, {"oid": "66553074294534bf91e804530739fb4cd2136af3", "url": "https://github.com/ConsenSys/teku/commit/66553074294534bf91e804530739fb4cd2136af3", "message": "Merge branch 'master' into minimiseForkChoiceDependenciesOnStore", "committedDate": "2020-06-08T15:55:17Z", "type": "commit"}, {"oid": "08d5b9c75d9be3ba8ce5fef472f931f4b1195988", "url": "https://github.com/ConsenSys/teku/commit/08d5b9c75d9be3ba8ce5fef472f931f4b1195988", "message": "Refactor test utils and fix test", "committedDate": "2020-06-08T16:58:00Z", "type": "commit"}, {"oid": "8260412c28a1804be4468db6aa0f367977c67cd3", "url": "https://github.com/ConsenSys/teku/commit/8260412c28a1804be4468db6aa0f367977c67cd3", "message": "Run spotless", "committedDate": "2020-06-08T17:02:59Z", "type": "commit"}, {"oid": "717e09beae1006620bf11b9404b748d5c62fe869", "url": "https://github.com/ConsenSys/teku/commit/717e09beae1006620bf11b9404b748d5c62fe869", "message": "Merge branch 'master' into minimiseForkChoiceDependenciesOnStore", "committedDate": "2020-06-08T21:24:13Z", "type": "commit"}, {"oid": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "url": "https://github.com/ConsenSys/teku/commit/cd7aec30801173c9f8bca144f82f449c304fb9a2", "message": "Merge branch 'master' into minimiseForkChoiceDependenciesOnStore", "committedDate": "2020-06-08T22:18:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MjY2MQ==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437072661", "bodyText": "Rather than throwing UnknownBlockRootException which is then caught as a routine result in each place that calls this - would be better to return Optional from here.\nreturn forkChoiceStrategy\n        .blockSlot(root)\n        .flatMap(\n            blockSlot -> {\n              if (blockSlot.compareTo(slot) > 0) {\n                return get_ancestor(\n                    forkChoiceStrategy,\n                    forkChoiceStrategy.blockParentRoot(root).orElseThrow(),\n                    slot);\n              } else if (blockSlot.equals(slot)) {\n                return Optional.of(root);\n              } else {\n                // root is older than the queried slot, thus a skip slot. Return earliest root prior\n                // to slot.\n                return Optional.of(root);\n              }\n            });", "author": "ajsutton", "createdAt": "2020-06-09T00:32:04Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -76,18 +76,27 @@ public static UnsignedLong compute_slots_since_epoch_start(UnsignedLong slot) {\n   /**\n    * Get the ancestor of ``block`` with slot number ``slot``.\n    *\n-   * @param store\n+   * @param forkChoiceStrategy\n    * @param root\n    * @param slot\n    * @return\n    * @see\n    *     <a>https://github.com/ethereum/eth2.0-specs/blob/v0.10.1/specs/phase0/fork-choice.md#get_ancestor</a>\n    */\n-  private static Bytes32 get_ancestor(ReadOnlyStore store, Bytes32 root, UnsignedLong slot) {\n-    BeaconBlock block = store.getBlock(root);\n-    if (block.getSlot().compareTo(slot) > 0) {\n-      return get_ancestor(store, block.getParent_root(), slot);\n-    } else if (block.getSlot().equals(slot)) {\n+  private static Bytes32 get_ancestor(", "originalCommit": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMjI3NQ==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437522275", "bodyText": "Makes sense. Done.", "author": "cemozerr", "createdAt": "2020-06-09T15:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MjY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MjkyMg==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437072922", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  return get_ancestor(forkChoiceStrategy, new_justified_checkpoint.getRoot(), justified_slot)\n          \n          \n            \n                      .equals(store.getJustifiedCheckpoint().getRoot());\n          \n          \n            \n                } catch (UnknownBlockRootException e) {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n            return get_ancestor(forkChoiceStrategy, new_justified_checkpoint.getRoot(), justified_slot)\n          \n          \n            \n                    .map(ancestorRoot -> ancestorRoot.equals(store.getJustifiedCheckpoint().getRoot()))\n          \n          \n            \n                    .orElse(false);", "author": "ajsutton", "createdAt": "2020-06-09T00:32:57Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -112,8 +123,12 @@ private static boolean should_update_justified_checkpoint(\n \n     UnsignedLong justified_slot =\n         compute_start_slot_at_epoch(store.getJustifiedCheckpoint().getEpoch());\n-    return get_ancestor(store, new_justified_checkpoint.getRoot(), justified_slot)\n-        .equals(store.getJustifiedCheckpoint().getRoot());\n+    try {\n+      return get_ancestor(forkChoiceStrategy, new_justified_checkpoint.getRoot(), justified_slot)\n+          .equals(store.getJustifiedCheckpoint().getRoot());\n+    } catch (UnknownBlockRootException e) {\n+      return false;\n+    }", "originalCommit": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMjM0NQ==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437522345", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-09T15:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MjkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MzQxNA==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437073414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  boolean isFinalizedAncestorOfJustified;\n          \n          \n            \n                  try {\n          \n          \n            \n                    Bytes32 ancestorOfJustifiedAtFinalizedSlot =\n          \n          \n            \n                        get_ancestor(\n          \n          \n            \n                            forkChoiceStrategy, store.getJustifiedCheckpoint().getRoot(), finalized_slot);\n          \n          \n            \n                    isFinalizedAncestorOfJustified =\n          \n          \n            \n                        ancestorOfJustifiedAtFinalizedSlot.equals(store.getFinalizedCheckpoint().getRoot());\n          \n          \n            \n                  } catch (UnknownBlockRootException e) {\n          \n          \n            \n                    isFinalizedAncestorOfJustified = false;\n          \n          \n            \n                  }\n          \n          \n            \n                  boolean isFinalizedAncestorOfJustified =\n          \n          \n            \n                      get_ancestor(forkChoiceStrategy, store.getJustifiedCheckpoint().getRoot(), finalized_slot)\n          \n          \n            \n                          .map(\n          \n          \n            \n                              ancestorOfJustifiedAtFinalizedSlot ->\n          \n          \n            \n                                  ancestorOfJustifiedAtFinalizedSlot.equals(\n          \n          \n            \n                                      store.getFinalizedCheckpoint().getRoot()))\n          \n          \n            \n                          .orElse(false);", "author": "ajsutton", "createdAt": "2020-06-09T00:35:03Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -213,13 +232,24 @@ public static BlockImportResult on_block(\n       UnsignedLong finalized_slot = store.getFinalizedCheckpoint().getEpochStartSlot();\n       // Update justified if new justified is later than store justified\n       // or if store justified is not in chain with finalized checkpoint\n+\n+      boolean isFinalizedAncestorOfJustified;\n+      try {\n+        Bytes32 ancestorOfJustifiedAtFinalizedSlot =\n+            get_ancestor(\n+                forkChoiceStrategy, store.getJustifiedCheckpoint().getRoot(), finalized_slot);\n+        isFinalizedAncestorOfJustified =\n+            ancestorOfJustifiedAtFinalizedSlot.equals(store.getFinalizedCheckpoint().getRoot());\n+      } catch (UnknownBlockRootException e) {\n+        isFinalizedAncestorOfJustified = false;\n+      }", "originalCommit": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMjQwMw==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437522403", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-09T15:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MzQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MzcwOA==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437073708", "bodyText": "We should restore the order of these checks as finding the ancestor is a lot more expensive than checking the epochs.  So probably make isFinalizedAncestorOfJustified a method that's called here rather than a variable. Then we benefit from short circuiting.", "author": "ajsutton", "createdAt": "2020-06-09T00:36:12Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -213,13 +232,24 @@ public static BlockImportResult on_block(\n       UnsignedLong finalized_slot = store.getFinalizedCheckpoint().getEpochStartSlot();\n       // Update justified if new justified is later than store justified\n       // or if store justified is not in chain with finalized checkpoint\n+\n+      boolean isFinalizedAncestorOfJustified;\n+      try {\n+        Bytes32 ancestorOfJustifiedAtFinalizedSlot =\n+            get_ancestor(\n+                forkChoiceStrategy, store.getJustifiedCheckpoint().getRoot(), finalized_slot);\n+        isFinalizedAncestorOfJustified =\n+            ancestorOfJustifiedAtFinalizedSlot.equals(store.getFinalizedCheckpoint().getRoot());\n+      } catch (UnknownBlockRootException e) {\n+        isFinalizedAncestorOfJustified = false;\n+      }\n+\n       if (state\n                   .getCurrent_justified_checkpoint()\n                   .getEpoch()\n                   .compareTo(store.getJustifiedCheckpoint().getEpoch())\n               > 0\n-          || !get_ancestor(store, store.getJustifiedCheckpoint().getRoot(), finalized_slot)\n-              .equals(store.getFinalizedCheckpoint().getRoot())) {\n+          || !isFinalizedAncestorOfJustified) {", "originalCommit": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4Mzk5OQ==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437483999", "bodyText": "Makes sense. Done.", "author": "cemozerr", "createdAt": "2020-06-09T14:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MzcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NDM1MA==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437074350", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  final Bytes32 ancestorAtFinalizedSlot =\n          \n          \n            \n                      get_ancestor(forkChoiceStrategy, block.getParent_root(), finalizedSlot);\n          \n          \n            \n                  return ancestorAtFinalizedSlot.equals(finalizedCheckpoint.getRoot());\n          \n          \n            \n                } catch (UnknownBlockRootException e) {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n               return get_ancestor(forkChoiceStrategy, block.getParent_root(), finalizedSlot)\n          \n          \n            \n                    .map(\n          \n          \n            \n                        ancestorAtFinalizedSlot ->\n          \n          \n            \n                            ancestorAtFinalizedSlot.equals(finalizedCheckpoint.getRoot()))\n          \n          \n            \n                    .orElse(false);\n          \n      \n    \n    \n  \n\nI'm feeling like there's a pattern here so we could just extract a hasAncestorAtSlot(BeaconBlock block, UnsignedLong slot, Bytes32 expectedBlockRoot) method.", "author": "ajsutton", "createdAt": "2020-06-09T00:39:04Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -235,41 +265,54 @@ public static BlockImportResult on_block(\n   }\n \n   private static Optional<BlockImportResult> checkOnBlockConditions(\n-      final BeaconBlock block, final BeaconState preState, final ReadOnlyStore store) {\n+      final BeaconBlock block,\n+      final BeaconState preState,\n+      final ReadOnlyStore store,\n+      final ForkChoiceStrategy forkChoiceStrategy) {\n+    final UnsignedLong blockSlot = block.getSlot();\n     if (preState == null) {\n       return Optional.of(BlockImportResult.FAILED_UNKNOWN_PARENT);\n     }\n-    if (preState.getSlot().compareTo(block.getSlot()) >= 0) {\n+    if (preState.getSlot().compareTo(blockSlot) >= 0) {\n       return Optional.of(BlockImportResult.FAILED_INVALID_ANCESTRY);\n     }\n-    if (blockIsFromFuture(block, store)) {\n+    if (blockIsFromFuture(store, blockSlot)) {\n       return Optional.of(BlockImportResult.FAILED_BLOCK_IS_FROM_FUTURE);\n     }\n-    if (!blockDescendsFromLatestFinalizedBlock(block, store)) {\n+    if (!blockDescendsFromLatestFinalizedBlock(block, store, forkChoiceStrategy)) {\n       return Optional.of(BlockImportResult.FAILED_INVALID_ANCESTRY);\n     }\n     return Optional.empty();\n   }\n \n-  private static boolean blockIsFromFuture(BeaconBlock block, ReadOnlyStore store) {\n-    return get_current_slot(store).compareTo(block.getSlot()) < 0;\n+  private static boolean blockIsFromFuture(ReadOnlyStore store, final UnsignedLong blockSlot) {\n+    return get_current_slot(store).compareTo(blockSlot) < 0;\n   }\n \n   private static boolean blockDescendsFromLatestFinalizedBlock(\n-      final BeaconBlock block, final ReadOnlyStore store) {\n+      final BeaconBlock block,\n+      final ReadOnlyStore store,\n+      final ForkChoiceStrategy forkChoiceStrategy) {\n     final Checkpoint finalizedCheckpoint = store.getFinalizedCheckpoint();\n+    // TODO: throw specific error here\n+    final UnsignedLong blockSlot = block.getSlot();\n \n     // Make sure this block's slot is after the latest finalized slot\n     final UnsignedLong finalizedEpochStartSlot = finalizedCheckpoint.getEpochStartSlot();\n-    if (block.getSlot().compareTo(finalizedEpochStartSlot) <= 0) {\n+    if (blockSlot.compareTo(finalizedEpochStartSlot) <= 0) {\n       return false;\n     }\n \n     // Make sure this block descends from the finalized block\n-    final UnsignedLong finalizedSlot = store.getBlock(finalizedCheckpoint.getRoot()).getSlot();\n-    final Bytes32 ancestorAtFinalizedSlot =\n-        get_ancestor(store, block.getParent_root(), finalizedSlot);\n-    return ancestorAtFinalizedSlot.equals(finalizedCheckpoint.getRoot());\n+    final UnsignedLong finalizedSlot =\n+        forkChoiceStrategy.blockSlot(finalizedCheckpoint.getRoot()).orElseThrow();\n+    try {\n+      final Bytes32 ancestorAtFinalizedSlot =\n+          get_ancestor(forkChoiceStrategy, block.getParent_root(), finalizedSlot);\n+      return ancestorAtFinalizedSlot.equals(finalizedCheckpoint.getRoot());\n+    } catch (UnknownBlockRootException e) {\n+      return false;\n+    }", "originalCommit": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMjUzNw==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437522537", "bodyText": "Extracted the method.", "author": "cemozerr", "createdAt": "2020-06-09T15:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NDM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NTIzMQ==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437075231", "bodyText": "If the previous checks that the roots are known mean we can safely call get here, can we replace one or more of them with a check that the returned blockSlot is empty?  Otherwise, do we need to handle blockSlot returning empty?", "author": "ajsutton", "createdAt": "2020-06-09T00:42:44Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -381,21 +426,21 @@ private static AttestationProcessingResult validateOnAttestation(\n       return AttestationProcessingResult.INVALID;\n     }\n \n-    if (!store.getBlockRoots().contains(target.getRoot())) {\n+    if (!forkChoiceStrategy.contains(target.getRoot())) {\n       // Attestations target must be for a known block. If a target block is unknown, delay\n       // consideration until the block is found\n       return AttestationProcessingResult.UNKNOWN_BLOCK;\n     }\n \n-    if (!store.getBlockRoots().contains(attestation.getData().getBeacon_block_root())) {\n+    if (!forkChoiceStrategy.contains(attestation.getData().getBeacon_block_root())) {\n       // Attestations must be for a known block. If block is unknown, delay consideration until the\n       // block is found\n       return AttestationProcessingResult.UNKNOWN_BLOCK;\n     }\n \n-    if (store\n-            .getBlock(attestation.getData().getBeacon_block_root())\n-            .getSlot()\n+    if (forkChoiceStrategy\n+            .blockSlot(attestation.getData().getBeacon_block_root())\n+            .get()", "originalCommit": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMDA2NA==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437500064", "bodyText": "No, you're right we don't need to handle blockSlot returning empty, we can remove the .contains check with just saving the return value from forkChoiceStrategy.blockSlot", "author": "cemozerr", "createdAt": "2020-06-09T15:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NTIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMTY1Ng==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437501656", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-09T15:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NTIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NTMyNw==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437075327", "bodyText": "If we return Optional we can get rid of this.", "author": "ajsutton", "createdAt": "2020-06-09T00:43:05Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/UnknownBlockRootException.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core;\n+\n+public class UnknownBlockRootException extends Exception {", "originalCommit": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NjYwMQ==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437496601", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-09T15:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NTMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NTcwMw==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437075703", "bodyText": "When we were finding head we already knew the root and slot.  Can we find a way to just return it instead of having to do a second lookup?", "author": "ajsutton", "createdAt": "2020-06-09T00:44:36Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -53,14 +52,20 @@ public synchronized Bytes32 processHead() {\n     StoreTransaction transaction = recentChainData.startStoreTransaction();\n     Bytes32 headBlockRoot = protoArrayForkChoiceStrategy.findHead(transaction);\n     transaction.commit(() -> {}, \"Failed to persist validator vote changes.\");\n-    BeaconBlock headBlock = recentChainData.getStore().getBlock(headBlockRoot);\n-    recentChainData.updateBestBlock(headBlockRoot, headBlock.getSlot());\n+    recentChainData.updateBestBlock(\n+        headBlockRoot,\n+        protoArrayForkChoiceStrategy\n+            .blockSlot(headBlockRoot)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\"Unable to retrieve the slot of fork choice head\")));", "originalCommit": "cd7aec30801173c9f8bca144f82f449c304fb9a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNDg3Mw==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r437514873", "bodyText": "It could be done but the findHead method of ProtoArray is used more than 50 times in tests so I'd be wary to change its API in this PR. Also, I'm not worried since the retrieval is constant time, and findHead gets called once (or twice a slot).", "author": "cemozerr", "createdAt": "2020-06-09T15:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NTcwMw=="}], "type": "inlineReview"}, {"oid": "06a4bc91cb67caf5572851d9ad33e240c65bc0c7", "url": "https://github.com/ConsenSys/teku/commit/06a4bc91cb67caf5572851d9ad33e240c65bc0c7", "message": "Refactor ancestor checking", "committedDate": "2020-06-09T15:27:14Z", "type": "commit"}, {"oid": "77e19afa6090b585da603d25c7c1338948a7f23d", "url": "https://github.com/ConsenSys/teku/commit/77e19afa6090b585da603d25c7c1338948a7f23d", "message": "Merge branch 'master' into minimiseForkChoiceDependenciesOnStore", "committedDate": "2020-06-09T15:33:19Z", "type": "commit"}, {"oid": "5e63ebfeecd65453c7bfadfdbece14be46763bef", "url": "https://github.com/ConsenSys/teku/commit/5e63ebfeecd65453c7bfadfdbece14be46763bef", "message": "Merge branch 'master' into minimiseForkChoiceDependenciesOnStore", "committedDate": "2020-06-09T17:01:01Z", "type": "commit"}, {"oid": "b218d614c9451fc253725447dd9f1b1bfdfe1396", "url": "https://github.com/ConsenSys/teku/commit/b218d614c9451fc253725447dd9f1b1bfdfe1396", "message": "Do not throw NPE when asked for not existing ProtoNode", "committedDate": "2020-06-10T16:06:09Z", "type": "commit"}, {"oid": "9d4ad44a15a10e8d7a6eaab11336709a573b5530", "url": "https://github.com/ConsenSys/teku/commit/9d4ad44a15a10e8d7a6eaab11336709a573b5530", "message": "Run spotless", "committedDate": "2020-06-10T16:08:56Z", "type": "commit"}, {"oid": "543c42aa6bb7fb23690487c64b7d0706d3baed8e", "url": "https://github.com/ConsenSys/teku/commit/543c42aa6bb7fb23690487c64b7d0706d3baed8e", "message": "Merge remote-tracking branch 'remotes/origin/master' into minimiseForkChoiceDependenciesOnStore\n\n# Conflicts:\n#\tethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "committedDate": "2020-06-10T16:13:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzOTY2MQ==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r438439661", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .map(ancestorAtFinalizedSlot -> ancestorAtFinalizedSlot.equals(ancestorRoot))\n          \n          \n            \n                    .map(ancestorAtSlot -> ancestorAtSlot.equals(ancestorRoot))", "author": "ajsutton", "createdAt": "2020-06-10T22:21:08Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -233,42 +249,69 @@ public static BlockImportResult on_block(\n     return BlockImportResult.successful(record);\n   }\n \n+  private static boolean isFinalizedAncestorOfJustified(\n+      ForkChoiceStrategy forkChoiceStrategy, ReadOnlyStore store) {\n+    UnsignedLong finalizedSlot = store.getFinalizedCheckpoint().getEpochStartSlot();\n+    return hasAncestorAtSlot(\n+        forkChoiceStrategy,\n+        store.getJustifiedCheckpoint().getRoot(),\n+        finalizedSlot,\n+        store.getFinalizedCheckpoint().getRoot());\n+  }\n+\n   private static Optional<BlockImportResult> checkOnBlockConditions(\n-      final BeaconBlock block, final BeaconState preState, final ReadOnlyStore store) {\n+      final BeaconBlock block,\n+      final BeaconState preState,\n+      final ReadOnlyStore store,\n+      final ForkChoiceStrategy forkChoiceStrategy) {\n+    final UnsignedLong blockSlot = block.getSlot();\n     if (preState == null) {\n       return Optional.of(BlockImportResult.FAILED_UNKNOWN_PARENT);\n     }\n-    if (preState.getSlot().compareTo(block.getSlot()) >= 0) {\n+    if (preState.getSlot().compareTo(blockSlot) >= 0) {\n       return Optional.of(BlockImportResult.FAILED_INVALID_ANCESTRY);\n     }\n-    if (blockIsFromFuture(block, store)) {\n+    if (blockIsFromFuture(store, blockSlot)) {\n       return Optional.of(BlockImportResult.FAILED_BLOCK_IS_FROM_FUTURE);\n     }\n-    if (!blockDescendsFromLatestFinalizedBlock(block, store)) {\n+    if (!blockDescendsFromLatestFinalizedBlock(block, store, forkChoiceStrategy)) {\n       return Optional.of(BlockImportResult.FAILED_INVALID_ANCESTRY);\n     }\n     return Optional.empty();\n   }\n \n-  private static boolean blockIsFromFuture(BeaconBlock block, ReadOnlyStore store) {\n-    return get_current_slot(store).compareTo(block.getSlot()) < 0;\n+  private static boolean blockIsFromFuture(ReadOnlyStore store, final UnsignedLong blockSlot) {\n+    return get_current_slot(store).compareTo(blockSlot) < 0;\n+  }\n+\n+  private static boolean hasAncestorAtSlot(\n+      ForkChoiceStrategy forkChoiceStrategy,\n+      Bytes32 root,\n+      UnsignedLong slot,\n+      Bytes32 ancestorRoot) {\n+    return get_ancestor(forkChoiceStrategy, root, slot)\n+        .map(ancestorAtFinalizedSlot -> ancestorAtFinalizedSlot.equals(ancestorRoot))", "originalCommit": "543c42aa6bb7fb23690487c64b7d0706d3baed8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MTExNQ==", "url": "https://github.com/ConsenSys/teku/pull/2062#discussion_r438851115", "bodyText": "Good catch. Done.", "author": "cemozerr", "createdAt": "2020-06-11T15:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzOTY2MQ=="}], "type": "inlineReview"}, {"oid": "1cfdce8bf62d161e10928cbfb119023d50522805", "url": "https://github.com/ConsenSys/teku/commit/1cfdce8bf62d161e10928cbfb119023d50522805", "message": "Merge branch 'master' into minimiseForkChoiceDependenciesOnStore", "committedDate": "2020-06-11T14:59:06Z", "type": "commit"}, {"oid": "f7020a266096ffb810cc7309fb016b88a78f4576", "url": "https://github.com/ConsenSys/teku/commit/f7020a266096ffb810cc7309fb016b88a78f4576", "message": "Change local variable name", "committedDate": "2020-06-11T15:03:04Z", "type": "commit"}, {"oid": "f7309b55d3c2cd0def1959b3b5847ee93a8cde19", "url": "https://github.com/ConsenSys/teku/commit/f7309b55d3c2cd0def1959b3b5847ee93a8cde19", "message": "Merge branch 'master' into minimiseForkChoiceDependenciesOnStore", "committedDate": "2020-06-11T15:45:24Z", "type": "commit"}]}