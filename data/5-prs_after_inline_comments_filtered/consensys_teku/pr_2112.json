{"pr_number": 2112, "pr_title": "Implement proposer slashing networking validator", "pr_createdAt": "2020-06-10T18:01:50Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2112", "timeline": [{"oid": "e1113ef6b9a2478b30f521a4d66599fad51d78cc", "url": "https://github.com/ConsenSys/teku/commit/e1113ef6b9a2478b30f521a4d66599fad51d78cc", "message": "Implement ProposerSlashingValidator for networking layer", "committedDate": "2020-06-10T17:57:43Z", "type": "commit"}, {"oid": "38d73413873df186431dffd82b87a0bd23a2a3dd", "url": "https://github.com/ConsenSys/teku/commit/38d73413873df186431dffd82b87a0bd23a2a3dd", "message": "Run spotless", "committedDate": "2020-06-10T18:00:16Z", "type": "commit"}, {"oid": "1efdbee486c1ce40fcadf240f19d68b83d9d73e8", "url": "https://github.com/ConsenSys/teku/commit/1efdbee486c1ce40fcadf240f19d68b83d9d73e8", "message": "Check for signature more explicitly", "committedDate": "2020-06-10T19:50:24Z", "type": "commit"}, {"oid": "3505bbf882986e2a099592eed9771f9a99857658", "url": "https://github.com/ConsenSys/teku/commit/3505bbf882986e2a099592eed9771f9a99857658", "message": "Run spotless", "committedDate": "2020-06-10T19:56:56Z", "type": "commit"}, {"oid": "8ad03f3b97c93d58a460f15527184a19ca4f6bbb", "url": "https://github.com/ConsenSys/teku/commit/8ad03f3b97c93d58a460f15527184a19ca4f6bbb", "message": "Merge branch 'master' into implementProposerSlashingNetworkingValidator", "committedDate": "2020-06-10T20:23:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0MzcxNw==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438443717", "bodyText": "nit: Probably worth extracting these into a utils class since we're duplicating them in a few places now.", "author": "ajsutton", "createdAt": "2020-06-10T22:32:46Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationstatetransitionvalidators/ProposerSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationstatetransitionvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import javax.annotation.CheckReturnValue;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class ProposerSlashingStateTransitionValidator {\n+\n+  public Optional<ProposerSlashingInvalidReason> validateSlashing(\n+      final BeaconState state, final ProposerSlashing proposerSlashing) {\n+    final BeaconBlockHeader header1 = proposerSlashing.getHeader_1().getMessage();\n+    final BeaconBlockHeader header2 = proposerSlashing.getHeader_2().getMessage();\n+    return firstOf(\n+        () ->\n+            check(\n+                header1.getSlot().equals(header2.getSlot()),\n+                ProposerSlashingInvalidReason.HEADER_SLOTS_DIFFERENT),\n+        () ->\n+            check(\n+                header1.getProposer_index().equals(header2.getProposer_index()),\n+                ProposerSlashingInvalidReason.PROPOSER_INDICES_DIFFERENT),\n+        () ->\n+            check(\n+                !Objects.equals(proposerSlashing.getHeader_1(), proposerSlashing.getHeader_2()),\n+                ProposerSlashingInvalidReason.SAME_HEADER),\n+        () ->\n+            check(\n+                UnsignedLong.valueOf(state.getValidators().size())\n+                        .compareTo(header1.getProposer_index())\n+                    > 0,\n+                ProposerSlashingInvalidReason.INVALID_PROPOSER),\n+        () ->\n+            check(\n+                is_slashable_validator(\n+                    state.getValidators().get(toIntExact(header1.getProposer_index().longValue())),\n+                    get_current_epoch(state)),\n+                ProposerSlashingInvalidReason.PROPOSER_NOT_SLASHABLE));\n+  }\n+\n+  @SafeVarargs\n+  private Optional<ProposerSlashingInvalidReason> firstOf(\n+      final Supplier<Optional<ProposerSlashingInvalidReason>>... checks) {\n+    return Stream.of(checks)\n+        .map(Supplier::get)\n+        .filter(Optional::isPresent)\n+        .map(Optional::get)\n+        .findFirst();\n+  }\n+\n+  @CheckReturnValue\n+  private Optional<ProposerSlashingInvalidReason> check(\n+      final boolean isValid, final ProposerSlashingInvalidReason check) {\n+    return !isValid ? Optional.of(check) : Optional.empty();\n+  }", "originalCommit": "8ad03f3b97c93d58a460f15527184a19ca4f6bbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNzc1OQ==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438517759", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-11T03:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0MzcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0MzkzMw==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438443933", "bodyText": "That's quite the package name... Would just validators do?", "author": "ajsutton", "createdAt": "2020-06-10T22:33:23Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationstatetransitionvalidators/VoluntaryExitStateTransitionValidator.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.core;\n+package tech.pegasys.teku.core.operationstatetransitionvalidators;", "originalCommit": "8ad03f3b97c93d58a460f15527184a19ca4f6bbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxODI0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438518249", "bodyText": "Lol. Let's meet halfway at operationvalidators? :D", "author": "cemozerr", "createdAt": "2020-06-11T03:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0MzkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NDQwOA==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438444408", "bodyText": "Validating proposer slashing, but message says \"Exit\".", "author": "ajsutton", "createdAt": "2020-06-10T22:34:47Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/ProposerSlashingValidator.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+import static tech.pegasys.teku.util.config.Constants.VALID_VALIDATOR_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.bls.BLSSignatureVerifier;\n+import tech.pegasys.teku.core.operationsignatureverifiers.ProposerSlashingSignatureVerifier;\n+import tech.pegasys.teku.core.operationstatetransitionvalidators.ProposerSlashingStateTransitionValidator;\n+import tech.pegasys.teku.core.operationstatetransitionvalidators.ProposerSlashingStateTransitionValidator.ProposerSlashingInvalidReason;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+import tech.pegasys.teku.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.teku.util.collections.LimitStrategy;\n+\n+public class ProposerSlashingValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RecentChainData recentChainData;\n+  private final Set<UnsignedLong> receivedValidExitSet =\n+      ConcurrentLimitedSet.create(\n+          VALID_VALIDATOR_SET_SIZE, LimitStrategy.DROP_LEAST_RECENTLY_ACCESSED);\n+  private final ProposerSlashingStateTransitionValidator transitionValidator;\n+  private final ProposerSlashingSignatureVerifier signatureValidator;\n+\n+  public ProposerSlashingValidator(\n+      RecentChainData recentChainData,\n+      ProposerSlashingStateTransitionValidator proposerSlashingStateTransitionValidator,\n+      ProposerSlashingSignatureVerifier proposerSlashingSignatureVerifier) {\n+    this.recentChainData = recentChainData;\n+    this.transitionValidator = proposerSlashingStateTransitionValidator;\n+    this.signatureValidator = proposerSlashingSignatureVerifier;\n+  }\n+\n+  public InternalValidationResult validate(ProposerSlashing slashing) {\n+    if (!isFirstValidSlashingForValidator(slashing)) {\n+      LOG.trace(\"ProposerSlashingValidator: Exit is not the first one for the given validator.\");", "originalCommit": "8ad03f3b97c93d58a460f15527184a19ca4f6bbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNzkzNQ==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438517935", "bodyText": "Removed.", "author": "cemozerr", "createdAt": "2020-06-11T03:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NDQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NDU2NQ==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438444565", "bodyText": "Exit again.", "author": "ajsutton", "createdAt": "2020-06-10T22:35:19Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/ProposerSlashingValidator.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+import static tech.pegasys.teku.util.config.Constants.VALID_VALIDATOR_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.bls.BLSSignatureVerifier;\n+import tech.pegasys.teku.core.operationsignatureverifiers.ProposerSlashingSignatureVerifier;\n+import tech.pegasys.teku.core.operationstatetransitionvalidators.ProposerSlashingStateTransitionValidator;\n+import tech.pegasys.teku.core.operationstatetransitionvalidators.ProposerSlashingStateTransitionValidator.ProposerSlashingInvalidReason;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+import tech.pegasys.teku.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.teku.util.collections.LimitStrategy;\n+\n+public class ProposerSlashingValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RecentChainData recentChainData;\n+  private final Set<UnsignedLong> receivedValidExitSet =\n+      ConcurrentLimitedSet.create(\n+          VALID_VALIDATOR_SET_SIZE, LimitStrategy.DROP_LEAST_RECENTLY_ACCESSED);\n+  private final ProposerSlashingStateTransitionValidator transitionValidator;\n+  private final ProposerSlashingSignatureVerifier signatureValidator;\n+\n+  public ProposerSlashingValidator(\n+      RecentChainData recentChainData,\n+      ProposerSlashingStateTransitionValidator proposerSlashingStateTransitionValidator,\n+      ProposerSlashingSignatureVerifier proposerSlashingSignatureVerifier) {\n+    this.recentChainData = recentChainData;\n+    this.transitionValidator = proposerSlashingStateTransitionValidator;\n+    this.signatureValidator = proposerSlashingSignatureVerifier;\n+  }\n+\n+  public InternalValidationResult validate(ProposerSlashing slashing) {\n+    if (!isFirstValidSlashingForValidator(slashing)) {\n+      LOG.trace(\"ProposerSlashingValidator: Exit is not the first one for the given validator.\");\n+      return IGNORE;\n+    }\n+\n+    if (!passesProcessProposerSlashingConditions(slashing)) {\n+      return REJECT;\n+    }\n+\n+    if (receivedValidExitSet.add(slashing.getHeader_1().getMessage().getProposer_index())) {\n+      return ACCEPT;\n+    } else {\n+      LOG.trace(\"ProposerSlashingValidator: Exit is not the first one for the given validator.\");", "originalCommit": "8ad03f3b97c93d58a460f15527184a19ca4f6bbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNzk1Mg==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438517952", "bodyText": "Removed.", "author": "cemozerr", "createdAt": "2020-06-11T03:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NDU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NDgxNQ==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438444815", "bodyText": "Not an exit.  This strongly suggests we could extract some common code to reduce duplication between these validators.", "author": "ajsutton", "createdAt": "2020-06-10T22:36:01Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/ProposerSlashingValidator.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+import static tech.pegasys.teku.util.config.Constants.VALID_VALIDATOR_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.bls.BLSSignatureVerifier;\n+import tech.pegasys.teku.core.operationsignatureverifiers.ProposerSlashingSignatureVerifier;\n+import tech.pegasys.teku.core.operationstatetransitionvalidators.ProposerSlashingStateTransitionValidator;\n+import tech.pegasys.teku.core.operationstatetransitionvalidators.ProposerSlashingStateTransitionValidator.ProposerSlashingInvalidReason;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+import tech.pegasys.teku.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.teku.util.collections.LimitStrategy;\n+\n+public class ProposerSlashingValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RecentChainData recentChainData;\n+  private final Set<UnsignedLong> receivedValidExitSet =", "originalCommit": "8ad03f3b97c93d58a460f15527184a19ca4f6bbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NDkwNQ==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438444905", "bodyText": "Maybe a follow up PR though.", "author": "ajsutton", "createdAt": "2020-06-10T22:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NDgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxODgxMQ==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438518811", "bodyText": "Changed the name. Leaving the extraction to a follow up PR. I do think a lot of stuff can be deduplicated as soon as we have all the gossiping done.", "author": "cemozerr", "createdAt": "2020-06-11T03:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NDgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NTkwNQ==", "url": "https://github.com/ConsenSys/teku/pull/2112#discussion_r438445905", "bodyText": "We know invalidReason is present so can just use\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      invalidReason\n          \n          \n            \n                          .map(VoluntaryExitStateTransitionValidator.ExitInvalidReason::describe)\n          \n          \n            \n                          .orElse(\"\"));\n          \n          \n            \n                      invalidReason.get().describe();", "author": "ajsutton", "createdAt": "2020-06-10T22:39:18Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/VoluntaryExitValidator.java", "diffHunk": "@@ -72,13 +73,15 @@ private boolean passesProcessVoluntaryExitConditions(SignedVoluntaryExit exit) {\n                 () ->\n                     new IllegalStateException(\n                         \"Unable to get best state for voluntary exit processing.\"));\n-    Optional<BlockVoluntaryExitValidator.ExitInvalidReason> invalidReason =\n+    Optional<VoluntaryExitStateTransitionValidator.ExitInvalidReason> invalidReason =\n         validator.validateExit(state, exit);\n \n     if (invalidReason.isPresent()) {\n       LOG.trace(\n           \"VoluntaryExitValidator: Exit fails process voluntary exit conditions {}.\",\n-          invalidReason.map(BlockVoluntaryExitValidator.ExitInvalidReason::describe).orElse(\"\"));\n+          invalidReason\n+              .map(VoluntaryExitStateTransitionValidator.ExitInvalidReason::describe)\n+              .orElse(\"\"));", "originalCommit": "8ad03f3b97c93d58a460f15527184a19ca4f6bbb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "52d0d87d6d004b64dd7c47448bc1232a90a287f7", "url": "https://github.com/ConsenSys/teku/commit/52d0d87d6d004b64dd7c47448bc1232a90a287f7", "message": "Extract duplicated utilities", "committedDate": "2020-06-11T03:22:51Z", "type": "commit"}, {"oid": "fe6f9d87853bfe08a845884e5f1a4f08ab0007ed", "url": "https://github.com/ConsenSys/teku/commit/fe6f9d87853bfe08a845884e5f1a4f08ab0007ed", "message": "Remove stale comments", "committedDate": "2020-06-11T03:22:52Z", "type": "commit"}, {"oid": "c94beaeb52f7ff46af7e085f614dff611a350bb8", "url": "https://github.com/ConsenSys/teku/commit/c94beaeb52f7ff46af7e085f614dff611a350bb8", "message": "Change package name", "committedDate": "2020-06-11T03:22:52Z", "type": "commit"}, {"oid": "0fd16be371883bc940c3b2ef8a8e672228608d0a", "url": "https://github.com/ConsenSys/teku/commit/0fd16be371883bc940c3b2ef8a8e672228608d0a", "message": "Use OperationInvalidReason instead of specific invalid reasons", "committedDate": "2020-06-11T03:22:52Z", "type": "commit"}, {"oid": "758fa0bafa26a07e80dc5ce5620aba6ea54f28ca", "url": "https://github.com/ConsenSys/teku/commit/758fa0bafa26a07e80dc5ce5620aba6ea54f28ca", "message": "Add override modifiers", "committedDate": "2020-06-11T03:22:52Z", "type": "commit"}, {"oid": "3e11b0d2c2846a85bad9c7e6780c462aa6b754ec", "url": "https://github.com/ConsenSys/teku/commit/3e11b0d2c2846a85bad9c7e6780c462aa6b754ec", "message": "Run spotless", "committedDate": "2020-06-11T03:22:52Z", "type": "commit"}, {"oid": "9f119171b468b91a2da2f325b435f7e5a8482fae", "url": "https://github.com/ConsenSys/teku/commit/9f119171b468b91a2da2f325b435f7e5a8482fae", "message": "Merge branch 'master' into implementProposerSlashingNetworkingValidator", "committedDate": "2020-06-11T03:25:58Z", "type": "commit"}]}