{"pr_number": 2070, "pr_title": "Apply changes from the validator spec", "pr_createdAt": "2020-06-08T01:13:10Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2070", "timeline": [{"oid": "448383bd99b085529abe4bc0308669c7b16abc05", "url": "https://github.com/ConsenSys/teku/commit/448383bd99b085529abe4bc0308669c7b16abc05", "message": "Use new subnet ID calculation.\nAdd requirement that Eth1Data votes must not reduce the number of deposits.", "committedDate": "2020-06-08T01:08:33Z", "type": "commit"}, {"oid": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606", "url": "https://github.com/ConsenSys/teku/commit/3a9fdd562ddd9ef740e4ce4a1c057e201e419606", "message": "Fix integration tests.", "committedDate": "2020-06-08T01:52:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MTczMw==", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r436751733", "bodyText": "I'm confused with how we can be sure that these random attestations have the same subnetId?", "author": "cemozerr", "createdAt": "2020-06-08T14:27:36Z", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManagerTest.java", "diffHunk": "@@ -52,39 +52,43 @@\n   private final GossipEncoding gossipEncoding = GossipEncoding.SSZ_SNAPPY;\n   private final TopicChannel topicChannel = mock(TopicChannel.class);\n   private AttestationGossipManager attestationGossipManager;\n+  private final AttestationSubnetSubscriptions attestationSubnetSubscriptions =\n+      new AttestationSubnetSubscriptions(\n+          gossipNetwork,\n+          gossipEncoding,\n+          attestationValidator,\n+          recentChainData,\n+          gossipedAttestationConsumer);\n \n   @BeforeEach\n   public void setup() {\n     BeaconChainUtil.create(0, recentChainData).initializeStorage();\n     doReturn(topicChannel).when(gossipNetwork).subscribe(contains(\"committee_index\"), any());\n-    AttestationSubnetSubscriptions attestationSubnetSubscriptions =\n-        new AttestationSubnetSubscriptions(\n-            gossipNetwork,\n-            gossipEncoding,\n-            attestationValidator,\n-            recentChainData,\n-            gossipedAttestationConsumer);\n     attestationGossipManager =\n         new AttestationGossipManager(gossipEncoding, attestationSubnetSubscriptions);\n   }\n \n   @Test\n   public void onNewAttestation_afterMatchingAssignment() {\n+    final Attestation attestation = dataStructureUtil.randomAttestation();\n+    final Attestation attestation2 =\n+        new Attestation(\n+            dataStructureUtil.randomBitlist(),\n+            dataStructureUtil.randomAttestationData(UnsignedLong.valueOf(13)),\n+            dataStructureUtil.randomSignature());\n+    final int subnetId = computeSubnetId(attestation);\n+    // Sanity check the attestations are for the same subnet\n+    assertThat(computeSubnetId(attestation2)).isEqualTo(subnetId);", "originalCommit": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNDA0NQ==", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r437004045", "bodyText": "Remember that we use a fixed seed for all randomness, so they're completely repeatable.  And then I carefully selected the slot for the second attestation to make it line up.", "author": "ajsutton", "createdAt": "2020-06-08T21:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2NTE4Nw==", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r436765187", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Not point aggregating for historic slots and we can't calculate the subnet ID\n          \n          \n            \n                    // No point aggregating for historic slots and we can't calculate the subnet ID", "author": "cemozerr", "createdAt": "2020-06-08T14:46:32Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -24,22 +23,40 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.util.CommitteeUtil;\n import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n   private final Map<Integer, UnsignedLong> subnetIdToUnsubscribeSlot = new HashMap<>();\n   private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n+  private final RecentChainData recentChainData;\n \n-  public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n+  public AttestationTopicSubscriber(\n+      final Eth2Network eth2Network, final RecentChainData recentChainData) {\n     this.eth2Network = eth2Network;\n+    this.recentChainData = recentChainData;\n   }\n \n   public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n-    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    recentChainData\n+        .getBestState()\n+        // Not point aggregating for historic slots and we can't calculate the subnet ID", "originalCommit": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDg0Ng==", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r436780846", "bodyText": "Not sure I understand this line - don't we set up subscriptions at the beginning of each epoch, so wouldn't we expect that the aggregationSlot will be in the future?  Should this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .filter(state -> state.getSlot().compareTo(aggregationSlot) <= 0)\n          \n          \n            \n                    .filter(state -> state.getSlot().compareTo(aggregationSlot) > 0)\n          \n      \n    \n    \n  \n\n?", "author": "mbaxter", "createdAt": "2020-06-08T15:07:07Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -24,22 +23,40 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.util.CommitteeUtil;\n import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n   private final Map<Integer, UnsignedLong> subnetIdToUnsubscribeSlot = new HashMap<>();\n   private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n+  private final RecentChainData recentChainData;\n \n-  public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n+  public AttestationTopicSubscriber(\n+      final Eth2Network eth2Network, final RecentChainData recentChainData) {\n     this.eth2Network = eth2Network;\n+    this.recentChainData = recentChainData;\n   }\n \n   public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n-    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    recentChainData\n+        .getBestState()\n+        // Not point aggregating for historic slots and we can't calculate the subnet ID\n+        .filter(state -> state.getSlot().compareTo(aggregationSlot) <= 0)", "originalCommit": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5OTE1Nw==", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r436999157", "bodyText": "Yes the aggregation slot should be greater than the current head slot (so it's in the future).  so state.getSlot() <= aggregationSlot.", "author": "ajsutton", "createdAt": "2020-06-08T21:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDg0Ng=="}], "type": "inlineReview"}, {"oid": "752952786557054cb670d24d0aa5c9b981bb3f90", "url": "https://github.com/ConsenSys/teku/commit/752952786557054cb670d24d0aa5c9b981bb3f90", "message": "Merge branch '0.12.1-integration' of github.com:PegaSysEng/teku into validator-changes", "committedDate": "2020-06-08T21:03:47Z", "type": "commit"}, {"oid": "e9aa9e0da960741981ea9f611c8bfb973e15f392", "url": "https://github.com/ConsenSys/teku/commit/e9aa9e0da960741981ea9f611c8bfb973e15f392", "message": "Fix typo.", "committedDate": "2020-06-08T21:12:50Z", "type": "commit"}]}