{"pr_number": 2318, "pr_title": "Connection management improvements", "pr_createdAt": "2020-07-05T22:10:32Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2318", "timeline": [{"oid": "2ea6dcb16352e49c5ec96dace416f7b64785662e", "url": "https://github.com/ConsenSys/teku/commit/2ea6dcb16352e49c5ec96dace416f7b64785662e", "message": "Use runWithFixedDelay instead of manually creating a repeating loop in ConnectionManager", "committedDate": "2020-07-05T22:03:40Z", "type": "commit"}, {"oid": "18151d6e4272b00b49f00f6f4c67fc57ebf2d9a5", "url": "https://github.com/ConsenSys/teku/commit/18151d6e4272b00b49f00f6f4c67fc57ebf2d9a5", "message": "Add trace messages to aid debugging.", "committedDate": "2020-07-05T22:07:46Z", "type": "commit"}, {"oid": "ae16bbad0a6cbfeaa1aca7b83f6e5d35f7a3f91d", "url": "https://github.com/ConsenSys/teku/commit/ae16bbad0a6cbfeaa1aca7b83f6e5d35f7a3f91d", "message": "Don't retry connections to known peers if they have recently been disconnected.\nTrack reputation by NodeID instead of PeerAddress to ensure they match even when the address differs.", "committedDate": "2020-07-06T01:16:18Z", "type": "commit"}, {"oid": "7efa84cf436b071f28c962169e69528ac71ead2f", "url": "https://github.com/ConsenSys/teku/commit/7efa84cf436b071f28c962169e69528ac71ead2f", "message": "Reduce log level.", "committedDate": "2020-07-06T03:51:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzI4NA==", "url": "https://github.com/ConsenSys/teku/pull/2318#discussion_r450223284", "bodyText": "Isn't making a peer totally unsuitable for connection if they disconnect one time a bit harsh?", "author": "cemozerr", "createdAt": "2020-07-06T13:33:37Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ReputationManager.java", "diffHunk": "@@ -53,28 +58,55 @@ public void reportInitiatedConnectionSuccessful(final PeerAddress peerAddress) {\n     getOrCreateReputation(peerAddress).reportInitiatedConnectionSuccessful();\n   }\n \n+  public void reportDisconnection(\n+      final PeerAddress peerAddress,\n+      final Optional<DisconnectReason> reason,\n+      final boolean locallyInitiated) {\n+    getOrCreateReputation(peerAddress)\n+        .reportDisconnection(timeProvider.getTimeInSeconds(), reason, locallyInitiated);\n+  }\n+\n   private Reputation getOrCreateReputation(final PeerAddress peerAddress) {\n-    return peerReputations.get(peerAddress, key -> new Reputation());\n+    return peerReputations.get(peerAddress.getId(), key -> new Reputation());\n   }\n \n   private static class Reputation {\n-    private static final UnsignedLong FAILURE_BAN_PERIOD = UnsignedLong.valueOf(60); // Seconds\n     private volatile Optional<UnsignedLong> lastInitiationFailure = Optional.empty();\n+    private volatile boolean unsuitable = false;\n \n     public void reportInitiatedConnectionFailed(final UnsignedLong failureTime) {\n       lastInitiationFailure = Optional.of(failureTime);\n     }\n \n     public boolean shouldInitiateConnection(final UnsignedLong currentTime) {\n-      return lastInitiationFailure\n-          .map(\n-              lastFailureTime ->\n-                  lastFailureTime.plus(FAILURE_BAN_PERIOD).compareTo(currentTime) < 0)\n-          .orElse(true);\n+      return !unsuitable\n+          && lastInitiationFailure\n+              .map(\n+                  lastFailureTime ->\n+                      lastFailureTime.plus(FAILURE_BAN_PERIOD).compareTo(currentTime) < 0)\n+              .orElse(true);\n     }\n \n     public void reportInitiatedConnectionSuccessful() {\n       lastInitiationFailure = Optional.empty();\n     }\n+\n+    public void reportDisconnection(\n+        final UnsignedLong disconnectTime,\n+        final Optional<DisconnectReason> reason,\n+        final boolean locallyInitiated) {\n+      if (isLocallyConsideredUnsuitable(reason, locallyInitiated)\n+          || reason.map(DisconnectReason::isPermanent).orElse(false)) {", "originalCommit": "7efa84cf436b071f28c962169e69528ac71ead2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyNjc5Nw==", "url": "https://github.com/ConsenSys/teku/pull/2318#discussion_r450226797", "bodyText": "Now I understand that we only disconnect permanently if we're unable to verify their network, or if they're on an irrelevant network. Smart.", "author": "cemozerr", "createdAt": "2020-07-06T13:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5ODIxNg==", "url": "https://github.com/ConsenSys/teku/pull/2318#discussion_r450498216", "bodyText": "Yep and it only means that we don't connect to them - they can still connect to us if they want.", "author": "ajsutton", "createdAt": "2020-07-06T21:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzI4NA=="}], "type": "inlineReview"}, {"oid": "19562023722a020e3b0113e300cf0e90428bcf91", "url": "https://github.com/ConsenSys/teku/commit/19562023722a020e3b0113e300cf0e90428bcf91", "message": "Merge branch 'master' into retry-with-fixed-delay", "committedDate": "2020-07-06T21:50:17Z", "type": "commit"}]}