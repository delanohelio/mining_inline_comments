{"pr_number": 1089, "pr_title": "Misc benchmark preparation updates", "pr_createdAt": "2020-01-14T15:40:29Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1089", "timeline": [{"oid": "1916724f9132d7eff8ddab5145802ef11bfa2914", "url": "https://github.com/ConsenSys/teku/commit/1916724f9132d7eff8ddab5145802ef11bfa2914", "message": "Fix a couple of typos", "committedDate": "2020-01-07T14:23:47Z", "type": "commit"}, {"oid": "886c0c2e235678385683b6b23bcd98c8ee5705e4", "url": "https://github.com/ConsenSys/teku/commit/886c0c2e235678385683b6b23bcd98c8ee5705e4", "message": "Get rid of deprecation warns", "committedDate": "2020-01-08T10:58:31Z", "type": "commit"}, {"oid": "fa7cb3880cd41c3c1edfad82a4823b43e89b72be", "url": "https://github.com/ConsenSys/teku/commit/fa7cb3880cd41c3c1edfad82a4823b43e89b72be", "message": "Correctly pass cause exception", "committedDate": "2020-01-10T14:27:25Z", "type": "commit"}, {"oid": "292582d6df6032969216d9b5f28a113566e66cfb", "url": "https://github.com/ConsenSys/teku/commit/292582d6df6032969216d9b5f28a113566e66cfb", "message": "Add handy method overload", "committedDate": "2020-01-10T14:42:07Z", "type": "commit"}, {"oid": "fe58bc2ba56a753db69e227bd15563e4b06b87b1", "url": "https://github.com/ConsenSys/teku/commit/fe58bc2ba56a753db69e227bd15563e4b06b87b1", "message": "Merge remote-tracking branch 'origin/master' into transition-bench", "committedDate": "2020-01-13T12:55:25Z", "type": "commit"}, {"oid": "c5a4bf467164d825d716148196a4064f3dceda42", "url": "https://github.com/ConsenSys/teku/commit/c5a4bf467164d825d716148196a4064f3dceda42", "message": "Add static aggregateAttestations helpers", "committedDate": "2020-01-13T15:04:34Z", "type": "commit"}, {"oid": "19c83a3aacea6c4bbfb4ff8ff81edf7166c9118a", "url": "https://github.com/ConsenSys/teku/commit/19c83a3aacea6c4bbfb4ff8ff81edf7166c9118a", "message": "Add a couple of Key constructors", "committedDate": "2020-01-13T18:00:26Z", "type": "commit"}, {"oid": "d9c8a188ff9303deda78487942aa377bfdf5a976", "url": "https://github.com/ConsenSys/teku/commit/d9c8a188ff9303deda78487942aa377bfdf5a976", "message": "Add ability to skip Deposit signing/validation for testing/benchmarking large validator sets", "committedDate": "2020-01-13T18:48:14Z", "type": "commit"}, {"oid": "cf1e865d3c8e42334fe29b9680b7939719371e19", "url": "https://github.com/ConsenSys/teku/commit/cf1e865d3c8e42334fe29b9680b7939719371e19", "message": "Add method for grouping and aggregating attestations", "committedDate": "2020-01-13T18:49:13Z", "type": "commit"}, {"oid": "634290538bb931fac1433fa1b7f22f1651396d4b", "url": "https://github.com/ConsenSys/teku/commit/634290538bb931fac1433fa1b7f22f1651396d4b", "message": "Make the code true parallel, the former variant executes sequentially due to forEachOrdered", "committedDate": "2020-01-14T10:01:29Z", "type": "commit"}, {"oid": "923fb43ead59e86d47f4e725632b59498766dfe2", "url": "https://github.com/ConsenSys/teku/commit/923fb43ead59e86d47f4e725632b59498766dfe2", "message": "Merge remote-tracking branch 'pegasys/master' into my-first-fix", "committedDate": "2020-01-14T14:39:27Z", "type": "commit"}, {"oid": "60067976995ec3c199aa9e3bf1748e32cc0df1fe", "url": "https://github.com/ConsenSys/teku/commit/60067976995ec3c199aa9e3bf1748e32cc0df1fe", "message": "Merge branch 'my-first-fix' into bench-preparation\n\n# Conflicts:\n#\tethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java", "committedDate": "2020-01-14T15:12:55Z", "type": "commit"}, {"oid": "3bac0c522117049479f27183a38ecbaaa5c940f9", "url": "https://github.com/ConsenSys/teku/commit/3bac0c522117049479f27183a38ecbaaa5c940f9", "message": "Apply Spotless", "committedDate": "2020-01-14T15:21:22Z", "type": "commit"}, {"oid": "bfefbfcae8094acd612f2d41a3bd56d786edc654", "url": "https://github.com/ConsenSys/teku/commit/bfefbfcae8094acd612f2d41a3bd56d786edc654", "message": "Fix merge artifact: return back overloaded method", "committedDate": "2020-01-14T15:32:02Z", "type": "commit"}, {"oid": "a32b4b1bc750ff49a27637ceb129a3c61ad17db4", "url": "https://github.com/ConsenSys/teku/commit/a32b4b1bc750ff49a27637ceb129a3c61ad17db4", "message": "Add new method javadoc", "committedDate": "2020-01-14T15:36:58Z", "type": "commit"}, {"oid": "8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da", "url": "https://github.com/ConsenSys/teku/commit/8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da", "message": "Apply Spotless", "committedDate": "2020-01-14T15:47:51Z", "type": "commit"}, {"oid": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3", "url": "https://github.com/ConsenSys/teku/commit/6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3", "message": "Merge branch 'master' into bench-preparation", "committedDate": "2020-01-14T22:46:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjA4OQ==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366602089", "bodyText": "Could we have a test that checks this is set to true please? It's the kind of thing that could easily be changed during development and accidentally committed which would be bad.", "author": "ajsutton", "createdAt": "2020-01-14T22:16:44Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "diffHunk": "@@ -76,6 +76,8 @@\n \n public class BeaconStateUtil {\n \n+  public static boolean BLS_VERIFY_DEPOSIT = true;", "originalCommit": "8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3Mjc1Nw==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366772757", "bodyText": "Added this test b7288de\nDid you mean something like this?", "author": "Nashatyrev", "createdAt": "2020-01-15T09:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NDAwMg==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r367084002", "bodyText": "That test is probably good to have too, but I was thinking of the really straight forward:\n@Test\nvoid ensureVerifyDepositDefaultsToFalse() {\n  assertThat(BeaconStateUtil.BLS_VERIFY_DEPOSIT).isTrue();\n}\n\nPurely to ensure something fails if someone changes that to false for testing or something and accidentally commits it.", "author": "ajsutton", "createdAt": "2020-01-15T20:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4OTc0NA==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r367289744", "bodyText": "Yep, I see what you mean. My test covers this case.\nAdded your variant as well", "author": "Nashatyrev", "createdAt": "2020-01-16T08:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY0NDI4NA==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r367644284", "bodyText": "Ah yes it would too, sorry.  I know I'm very paranoid about \"disable validation\" flags like these so glad to have the very explicit boolean is true test as well.", "author": "ajsutton", "createdAt": "2020-01-16T20:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMjg2OQ==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366612869", "bodyText": "What's the context for needing this method? If it's only needed for benchmarks should it just live in the benchmark code rather than the production code?  Or is there something else coming that will use it?", "author": "ajsutton", "createdAt": "2020-01-14T22:45:36Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/AttestationAggregator.java", "diffHunk": "@@ -117,6 +121,49 @@ private synchronized void aggregateAttestations(\n         BLSAggregate.bls_aggregate_signatures(signaturesToAggregate));\n   }\n \n+  /**\n+   * Groups passed attestations by their {@link\n+   * tech.pegasys.artemis.datastructures.operations.AttestationData} and aggregates attestations in\n+   * every group to a single {@link Attestation}\n+   *\n+   * @return a list of aggregated {@link Attestation}s with distinct {@link\n+   *     tech.pegasys.artemis.datastructures.operations.AttestationData}\n+   */\n+  public static List<Attestation> groupAndAggregateAttestations(List<Attestation> srcAttestations) {", "originalCommit": "8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MzMwNw==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366773307", "bodyText": "Yep these 2 methods are just for benchmarking. Just thought they can be potentially useful.\nMoved them to bench code", "author": "Nashatyrev", "createdAt": "2020-01-15T09:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMjg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDI2MQ==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366614261", "bodyText": "We've typically used Guava's Preconditions class to do these assertions rather than the assert keyword. As a result we aren't explicitly controlling whether assert is actually enforced or not in our startup scripts and test config.  Might be worth a discussion if the preconditions show up as a performance bottleneck - the second check here is potentially quite expensive for example.\nI'd be tempted to make the first one a Preconditions.checkArgument and probably just remove the second.  If this method could be made private we'd be confident that groupAndAggregateAttestations is calling it with the right arguments.", "author": "ajsutton", "createdAt": "2020-01-14T22:49:34Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/AttestationAggregator.java", "diffHunk": "@@ -117,6 +121,49 @@ private synchronized void aggregateAttestations(\n         BLSAggregate.bls_aggregate_signatures(signaturesToAggregate));\n   }\n \n+  /**\n+   * Groups passed attestations by their {@link\n+   * tech.pegasys.artemis.datastructures.operations.AttestationData} and aggregates attestations in\n+   * every group to a single {@link Attestation}\n+   *\n+   * @return a list of aggregated {@link Attestation}s with distinct {@link\n+   *     tech.pegasys.artemis.datastructures.operations.AttestationData}\n+   */\n+  public static List<Attestation> groupAndAggregateAttestations(List<Attestation> srcAttestations) {\n+    Collection<List<Attestation>> groupedAtt =\n+        srcAttestations.stream().collect(Collectors.groupingBy(Attestation::getData)).values();\n+    return groupedAtt.stream()\n+        .map(AttestationAggregator::aggregateAttestations)\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Aggregates passed attestations\n+   *\n+   * @param srcAttestations attestations which should have the same {@link Attestation#getData()}\n+   */\n+  public static Attestation aggregateAttestations(List<Attestation> srcAttestations) {\n+    assert !srcAttestations.isEmpty();\n+    assert srcAttestations.stream()", "originalCommit": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MzU3OA==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366773578", "bodyText": "Done", "author": "Nashatyrev", "createdAt": "2020-01-15T09:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NjYyNw==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366646627", "bodyText": "Maybe just:\nOptional<SSZList<Attestation> sszList = attestations.isEmpty() ? Optional.empty() : Optional.of(new SSZList<>(...))\n\nto save mixing null and Optional.", "author": "ajsutton", "createdAt": "2020-01-15T00:42:49Z", "path": "ethereum/statetransition/src/test-support/java/tech/pegasys/artemis/statetransition/BeaconChainUtil.java", "diffHunk": "@@ -94,6 +112,16 @@ public BlockProcessingRecord createAndImportBlockAtSlot(final long slot) throws\n     return createAndImportBlockAtSlot(UnsignedLong.valueOf(slot));\n   }\n \n+  public BlockProcessingRecord createAndImportBlockAtSlot(\n+      final UnsignedLong slot, List<Attestation> attestations) throws Exception {\n+    SSZList<Attestation> sszList =\n+        attestations.isEmpty()\n+            ? null\n+            : new SSZList<>(attestations, Constants.MAX_ATTESTATIONS, Attestation.class);\n+\n+    return createAndImportBlockAtSlot(slot, Optional.ofNullable(sszList));", "originalCommit": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MzY5Mw==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366773693", "bodyText": "Done", "author": "Nashatyrev", "createdAt": "2020-01-15T09:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NjYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3NDExNw==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366674117", "bodyText": "Does flatMap sustain the order of elements here? I believe we had an issue with a similar change in the past due to not preserving the order of validator indices.", "author": "cemozerr", "createdAt": "2020-01-15T02:48:16Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/ValidatorsUtil.java", "diffHunk": "@@ -72,18 +71,16 @@ public static boolean is_active_validator(Validator validator, UnsignedLong epoc\n    *     <a>https://github.com/ethereum/eth2.0-specs/blob/v0.8.0/specs/core/0_beacon-chain.md#get_active_validator_indices</a>\n    */\n   public static List<Integer> get_active_validator_indices(BeaconState state, UnsignedLong epoch) {\n-    List<Integer> active_validator_indices = Collections.synchronizedList(new ArrayList<>());\n     List<Validator> validators = state.getValidators();\n-    IntStream.range(0, validators.size())\n+    return IntStream.range(0, validators.size())\n         .parallel()\n-        .forEachOrdered(\n-            index -> {\n-              if (is_active_validator(validators.get(index), epoch)) {\n-                active_validator_indices.add(index);\n-              }\n-            });\n-\n-    return active_validator_indices;\n+        .flatMap(", "originalCommit": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc1MDQ2NA==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366750464", "bodyText": "@cemozerr Good question. I didn't find any mentions that flatMap makes a stream unordered. My minitest also confirms this. However this is not relevant any more, since I change this method in the next commit", "author": "Nashatyrev", "createdAt": "2020-01-15T08:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3NDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NTAxNg==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r367085016", "bodyText": "flatMap preserves ordering but making a stream parallel may not (you can have parallel, ordered streams but that restricts how much parallelisation can happen). I can't recall how or if you can choose between ordered or unordered parallel streams so tend to just assume parallel streams won't preserve order unless I go check more carefully.", "author": "ajsutton", "createdAt": "2020-01-15T20:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3NDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMDIwNA==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r367300204", "bodyText": "From my understanding of the spec if the original stream is ordered and all pipeline operators preserve ordering (unlike e.g. .unordered() operator) then collector would make ordered list. parallel() preserves ordering\nIf e.g. is_active_validator is heavy operation (which is actually not the case), then parallelization would yield good gain here.\nE.g. the following test:\n    IntStream.range(0, 10)\n        .parallel()\n        .flatMap(i -> {\n          LOG.info(\"Calculating \" + i);\n          Thread.sleep(1000);\n          return i % 2 == 0 ? IntStream.of(i) : IntStream.empty();\n        })\n        .forEachOrdered(i -> LOG.info(i));\nWould print:\n11:59:25.985 | ForkJoinPool.commonPool-worker-7  | Calculating 1\n11:59:25.985 | ForkJoinPool.commonPool-worker-15 | Calculating 7\n11:59:25.985 | ForkJoinPool.commonPool-worker-9  | Calculating 5\n11:59:25.985 | ForkJoinPool.commonPool-worker-5  | Calculating 2\n11:59:25.985 | ForkJoinPool.commonPool-worker-3  | Calculating 8\n11:59:25.985 | main                              | Calculating 6\n11:59:25.985 | ForkJoinPool.commonPool-worker-11 | Calculating 0\n11:59:25.985 | ForkJoinPool.commonPool-worker-13 | Calculating 9\n11:59:26.994 | ForkJoinPool.commonPool-worker-7  | Calculating 3\n11:59:26.994 | ForkJoinPool.commonPool-worker-13 | Calculating 4\n11:59:26.995 | ForkJoinPool.commonPool-worker-11 | 0\n11:59:26.996 | ForkJoinPool.commonPool-worker-11 | 2\n11:59:27.995 | ForkJoinPool.commonPool-worker-13 | 4\n11:59:27.995 | ForkJoinPool.commonPool-worker-13 | 6\n11:59:27.995 | ForkJoinPool.commonPool-worker-13 | 8", "author": "Nashatyrev", "createdAt": "2020-01-16T09:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3NDExNw=="}], "type": "inlineReview"}, {"oid": "7210b514f997662b85007b74e24d174fff2284b2", "url": "https://github.com/ConsenSys/teku/commit/7210b514f997662b85007b74e24d174fff2284b2", "message": "No need to parallelize very lightweight task", "committedDate": "2020-01-15T08:37:11Z", "type": "commit"}, {"oid": "55551904b2c7ba792d530367d7f14babc36c181e", "url": "https://github.com/ConsenSys/teku/commit/55551904b2c7ba792d530367d7f14babc36c181e", "message": "Merge remote-tracking branch 'pegasys/master' into bench-preparation", "committedDate": "2020-01-15T08:37:24Z", "type": "commit"}, {"oid": "47b153684e4de811c713bbc2bfcbd455d8237fde", "url": "https://github.com/ConsenSys/teku/commit/47b153684e4de811c713bbc2bfcbd455d8237fde", "message": "Use checkArgument() instead of assert", "committedDate": "2020-01-15T08:55:44Z", "type": "commit"}, {"oid": "b7288de9f0908a181ebcf4b1e7a2a767442691f4", "url": "https://github.com/ConsenSys/teku/commit/b7288de9f0908a181ebcf4b1e7a2a767442691f4", "message": "Add test checking invalid signed deposit case", "committedDate": "2020-01-15T09:17:48Z", "type": "commit"}, {"oid": "72cd8d97bfd6276933a4f2927a685edb7c4fc551", "url": "https://github.com/ConsenSys/teku/commit/72cd8d97bfd6276933a4f2927a685edb7c4fc551", "message": "Use Optional instead of null", "committedDate": "2020-01-15T09:20:40Z", "type": "commit"}, {"oid": "c3338eb28b673f748e23712c89ba3c804094a6d1", "url": "https://github.com/ConsenSys/teku/commit/c3338eb28b673f748e23712c89ba3c804094a6d1", "message": "Apply Spotless", "committedDate": "2020-01-15T09:22:10Z", "type": "commit"}, {"oid": "4bb59a51d346e4b07b7c0544bfa40990de962cfc", "url": "https://github.com/ConsenSys/teku/commit/4bb59a51d346e4b07b7c0544bfa40990de962cfc", "message": "Remove benchmark only related methods", "committedDate": "2020-01-15T09:24:53Z", "type": "commit"}, {"oid": "2deaa955be5ad66acab101adfe7e64215617fe70", "url": "https://github.com/ConsenSys/teku/commit/2deaa955be5ad66acab101adfe7e64215617fe70", "message": "Merge remote-tracking branch 'origin/bench-preparation' into bench-preparation", "committedDate": "2020-01-15T09:30:27Z", "type": "commit"}, {"oid": "fe7bb680a120663fa1d4c5c3ac4c9a75cad43cd2", "url": "https://github.com/ConsenSys/teku/commit/fe7bb680a120663fa1d4c5c3ac4c9a75cad43cd2", "message": "Add ensureVerifyDepositDefaultsToTrue test", "committedDate": "2020-01-16T08:37:44Z", "type": "commit"}, {"oid": "43f982388eb7882f01803cccb67bf81ecc69c807", "url": "https://github.com/ConsenSys/teku/commit/43f982388eb7882f01803cccb67bf81ecc69c807", "message": "Add ability to disable deposit proofs generatoin/validation to speed up bench initialization with a large number of deposits", "committedDate": "2020-01-16T17:10:31Z", "type": "commit"}, {"oid": "f58738bb671c901b61c52c3c660683f199015926", "url": "https://github.com/ConsenSys/teku/commit/f58738bb671c901b61c52c3c660683f199015926", "message": "Add test to prevent accidentally changing deposit validation option during development", "committedDate": "2020-01-16T17:14:51Z", "type": "commit"}, {"oid": "37abd8641cf62a04619d4e8c4a449b57d74fffba", "url": "https://github.com/ConsenSys/teku/commit/37abd8641cf62a04619d4e8c4a449b57d74fffba", "message": "Apply Spotless", "committedDate": "2020-01-16T17:16:27Z", "type": "commit"}, {"oid": "3ec78c5688e6a0263d9d9e54c6a4165ed647c479", "url": "https://github.com/ConsenSys/teku/commit/3ec78c5688e6a0263d9d9e54c6a4165ed647c479", "message": "Merge branch 'master' into bench-preparation", "committedDate": "2020-01-16T20:54:01Z", "type": "commit"}, {"oid": "ca3e8b8cfeaad9d685b969d5153ee8e9eb29f2e9", "url": "https://github.com/ConsenSys/teku/commit/ca3e8b8cfeaad9d685b969d5153ee8e9eb29f2e9", "message": "Optimize initialize_beacon_state_from_eth1 to speed up launch with a large number of validators", "committedDate": "2020-01-16T20:55:49Z", "type": "commit"}, {"oid": "7cb327b0d3eacfbc59893f9a4125beb4a170f521", "url": "https://github.com/ConsenSys/teku/commit/7cb327b0d3eacfbc59893f9a4125beb4a170f521", "message": "Merge branch 'master' into bench-preparation", "committedDate": "2020-01-16T20:55:58Z", "type": "commit"}, {"oid": "79fe8e70feed3be942dd0c359b7077e7e932d52e", "url": "https://github.com/ConsenSys/teku/commit/79fe8e70feed3be942dd0c359b7077e7e932d52e", "message": "Add JMH annotation processor for using JMH IDEA plugin", "committedDate": "2020-01-16T20:56:17Z", "type": "commit"}, {"oid": "544f82f21d7b4808332515b44f8c1f5799b3ac27", "url": "https://github.com/ConsenSys/teku/commit/544f82f21d7b4808332515b44f8c1f5799b3ac27", "message": "Merge remote-tracking branch 'origin/bench-preparation' into bench-preparation", "committedDate": "2020-01-16T20:57:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NTU0MA==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r367655540", "bodyText": "This took me a bit to get my head around so maybe worth adding a comment.  I believe the logic is:\n\nif the validator is already present, just use the cached index\nif it's not present then we're going to add it to the end of the validator list so it's index will be the current size of that list and we have no existingIndex.\n\nThat works on the basis that the pubKeyToIndexMap contains a key to index mapping for every validator, which holds because this method is private and only called when we're generating the genesis state from a list of ETH1 deposits.", "author": "ajsutton", "createdAt": "2020-01-16T21:19:55Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "diffHunk": "@@ -179,9 +189,20 @@ public static void process_deposit(BeaconState state, Deposit deposit) {\n \n     BLSPublicKey pubkey = deposit.getData().getPubkey();\n     UnsignedLong amount = deposit.getData().getAmount();\n-    List<BLSPublicKey> validator_pubkeys =\n-        state.getValidators().stream().map(Validator::getPubkey).collect(Collectors.toList());\n-    if (!validator_pubkeys.contains(pubkey)) {\n+\n+    SSZList<Validator> validators = state.getValidators();\n+    OptionalInt existingIndex;\n+    if (pubKeyToIndexMap != null) {\n+      Integer cachedIndex = pubKeyToIndexMap.putIfAbsent(pubkey, state.getValidators().size());\n+      existingIndex = cachedIndex == null ? OptionalInt.empty() : OptionalInt.of(cachedIndex);", "originalCommit": "ca3e8b8cfeaad9d685b969d5153ee8e9eb29f2e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2Nzg4NA==", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r367667884", "bodyText": "Yep, exactly.\nThis could be subject to migrate to a global PubKey -> ValidatorIdex cache at later optimization stages", "author": "Nashatyrev", "createdAt": "2020-01-16T21:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NTU0MA=="}], "type": "inlineReview"}]}