{
  "pr_number": 8483,
  "pr_title": "IGNITE-13496 Java thin: make async API non-blocking with GridNioServer",
  "pr_createdAt": "2020-11-20T07:27:27Z",
  "pr_url": "https://github.com/apache/ignite/pull/8483",
  "timeline": [
    {
      "oid": "9a23d4acc89e8a50603825c0222e30f4b5f8d22d",
      "url": "https://github.com/apache/ignite/commit/9a23d4acc89e8a50603825c0222e30f4b5f8d22d",
      "message": "wip TODOs",
      "committedDate": "2020-11-23T10:44:58Z",
      "type": "commit"
    },
    {
      "oid": "175d7764192e406f8ca3b4754f2c5404ee217fd8",
      "url": "https://github.com/apache/ignite/commit/175d7764192e406f8ca3b4754f2c5404ee217fd8",
      "message": "wip fixing exception handling",
      "committedDate": "2020-11-23T12:31:52Z",
      "type": "commit"
    },
    {
      "oid": "4511dac5ebd303be24cc8859f0452e01f7338269",
      "url": "https://github.com/apache/ignite/commit/4511dac5ebd303be24cc8859f0452e01f7338269",
      "message": "Clean up GridNioServer if TcpIgniteClient constructor fails",
      "committedDate": "2020-11-24T08:02:44Z",
      "type": "commit"
    },
    {
      "oid": "f997d8e3a9a5d5a67648b10d309e8188933b87d3",
      "url": "https://github.com/apache/ignite/commit/f997d8e3a9a5d5a67648b10d309e8188933b87d3",
      "message": "Fix resource cleanup in ConnectToStartingNodeTest",
      "committedDate": "2020-11-24T08:21:40Z",
      "type": "commit"
    },
    {
      "oid": "295e7c031c499fc996fc99d4444fe54ffc44cd58",
      "url": "https://github.com/apache/ignite/commit/295e7c031c499fc996fc99d4444fe54ffc44cd58",
      "message": "Fix handshake timeout handling",
      "committedDate": "2020-11-24T08:53:37Z",
      "type": "commit"
    },
    {
      "oid": "cd4427e12b88147a847f9918dd4dd4484b467df2",
      "url": "https://github.com/apache/ignite/commit/cd4427e12b88147a847f9918dd4dd4484b467df2",
      "message": "Fix operation timeout handling",
      "committedDate": "2020-11-24T12:18:26Z",
      "type": "commit"
    },
    {
      "oid": "81bbe9c2118139cac1a894378a04a2a3ba4f6058",
      "url": "https://github.com/apache/ignite/commit/81bbe9c2118139cac1a894378a04a2a3ba4f6058",
      "message": "All tests pass!",
      "committedDate": "2020-11-24T12:22:47Z",
      "type": "commit"
    },
    {
      "oid": "38981dcbfedb9c3a8cea0370d59215740348fe86",
      "url": "https://github.com/apache/ignite/commit/38981dcbfedb9c3a8cea0370d59215740348fe86",
      "message": "Fixing checkstyle",
      "committedDate": "2020-11-24T13:44:21Z",
      "type": "commit"
    },
    {
      "oid": "aab7d1dee312b1b58dce4e05be7e82dc82aa8d68",
      "url": "https://github.com/apache/ignite/commit/aab7d1dee312b1b58dce4e05be7e82dc82aa8d68",
      "message": "wip cleanup",
      "committedDate": "2020-11-24T14:02:38Z",
      "type": "commit"
    },
    {
      "oid": "220a64cfcc877a5909697999370921d0c561d4e6",
      "url": "https://github.com/apache/ignite/commit/220a64cfcc877a5909697999370921d0c561d4e6",
      "message": "wip cleanup",
      "committedDate": "2020-11-24T14:07:13Z",
      "type": "commit"
    },
    {
      "oid": "ecd54fbf615b4ab324bf6e0fb1afc5225e2ce75c",
      "url": "https://github.com/apache/ignite/commit/ecd54fbf615b4ab324bf6e0fb1afc5225e2ce75c",
      "message": "wip cleanup",
      "committedDate": "2020-11-24T15:07:12Z",
      "type": "commit"
    },
    {
      "oid": "71ec9dfbd8993ecb87c83f5548ee72e93747ad58",
      "url": "https://github.com/apache/ignite/commit/71ec9dfbd8993ecb87c83f5548ee72e93747ad58",
      "message": "wip cleanup",
      "committedDate": "2020-11-24T15:14:18Z",
      "type": "commit"
    },
    {
      "oid": "1ad021cca41339d3f722ede5488cabb51c2f7e73",
      "url": "https://github.com/apache/ignite/commit/1ad021cca41339d3f722ede5488cabb51c2f7e73",
      "message": "wip cleanup",
      "committedDate": "2020-11-24T15:53:53Z",
      "type": "commit"
    },
    {
      "oid": "b075750c135a36ed09c407892fdc589cbbc5cdb1",
      "url": "https://github.com/apache/ignite/commit/b075750c135a36ed09c407892fdc589cbbc5cdb1",
      "message": "wip cleanup",
      "committedDate": "2020-11-24T16:22:16Z",
      "type": "commit"
    },
    {
      "oid": "bfbb8c544b527fa70b893189314adc772a667c0c",
      "url": "https://github.com/apache/ignite/commit/bfbb8c544b527fa70b893189314adc772a667c0c",
      "message": "wip cleanup",
      "committedDate": "2020-11-24T16:27:40Z",
      "type": "commit"
    },
    {
      "oid": "a313af3dbf50301a863bf93aad04799db58884ff",
      "url": "https://github.com/apache/ignite/commit/a313af3dbf50301a863bf93aad04799db58884ff",
      "message": "Fixing exception propagation",
      "committedDate": "2020-11-24T16:40:33Z",
      "type": "commit"
    },
    {
      "oid": "4c6f9f60b9c6383aeb2f01300af0a36857f7a4b0",
      "url": "https://github.com/apache/ignite/commit/4c6f9f60b9c6383aeb2f01300af0a36857f7a4b0",
      "message": "Fixing exception propagation",
      "committedDate": "2020-11-24T17:14:00Z",
      "type": "commit"
    },
    {
      "oid": "b0c776d252be9248f9d477b03cc601ea1d5c0f21",
      "url": "https://github.com/apache/ignite/commit/b0c776d252be9248f9d477b03cc601ea1d5c0f21",
      "message": "Remove locking from TcpClientChannel",
      "committedDate": "2020-11-24T17:14:47Z",
      "type": "commit"
    },
    {
      "oid": "da983a0e6d30bb0eb8b5d58d27621344dada0d74",
      "url": "https://github.com/apache/ignite/commit/da983a0e6d30bb0eb8b5d58d27621344dada0d74",
      "message": "Cleanup",
      "committedDate": "2020-11-24T17:41:49Z",
      "type": "commit"
    },
    {
      "oid": "3511525f16f100075bf40388d48fb1b2929ea18d",
      "url": "https://github.com/apache/ignite/commit/3511525f16f100075bf40388d48fb1b2929ea18d",
      "message": "Cleanup",
      "committedDate": "2020-11-24T17:43:20Z",
      "type": "commit"
    },
    {
      "oid": "4e720e1dbb709f7043eb20dfdf0a3bceac108640",
      "url": "https://github.com/apache/ignite/commit/4e720e1dbb709f7043eb20dfdf0a3bceac108640",
      "message": "Cleanup",
      "committedDate": "2020-11-24T18:41:41Z",
      "type": "commit"
    },
    {
      "oid": "7838d13d9a2ee4dd0b516694b4f375e53de68f0d",
      "url": "https://github.com/apache/ignite/commit/7838d13d9a2ee4dd0b516694b4f375e53de68f0d",
      "message": "Cleanup",
      "committedDate": "2020-11-24T18:42:30Z",
      "type": "commit"
    },
    {
      "oid": "eb7959922287b39d98f294496e5e208c385011ed",
      "url": "https://github.com/apache/ignite/commit/eb7959922287b39d98f294496e5e208c385011ed",
      "message": "Fix exception propagation during write",
      "committedDate": "2020-11-24T18:57:48Z",
      "type": "commit"
    },
    {
      "oid": "5fd49fff22896d840e697a3d8719859e3d7d7ed1",
      "url": "https://github.com/apache/ignite/commit/5fd49fff22896d840e697a3d8719859e3d7d7ed1",
      "message": "imports cleanup",
      "committedDate": "2020-11-24T19:02:34Z",
      "type": "commit"
    },
    {
      "oid": "45e6fe411a1ff1a421ec0efc49838a2931eda1a7",
      "url": "https://github.com/apache/ignite/commit/45e6fe411a1ff1a421ec0efc49838a2931eda1a7",
      "message": "imports cleanup",
      "committedDate": "2020-11-24T19:03:02Z",
      "type": "commit"
    },
    {
      "oid": "95b37a221cc544ed0855737a0d51005abe966642",
      "url": "https://github.com/apache/ignite/commit/95b37a221cc544ed0855737a0d51005abe966642",
      "message": "imports cleanup",
      "committedDate": "2020-11-24T19:05:33Z",
      "type": "commit"
    },
    {
      "oid": "fe6dd44d4caf91f0d75a9fb652580a7d628cfa1a",
      "url": "https://github.com/apache/ignite/commit/fe6dd44d4caf91f0d75a9fb652580a7d628cfa1a",
      "message": "imports cleanup",
      "committedDate": "2020-11-24T19:05:51Z",
      "type": "commit"
    },
    {
      "oid": "65444d05f1042700640ca708e81c1debba31ad68",
      "url": "https://github.com/apache/ignite/commit/65444d05f1042700640ca708e81c1debba31ad68",
      "message": "comments cleanup",
      "committedDate": "2020-11-24T19:10:04Z",
      "type": "commit"
    },
    {
      "oid": "630af97e457d10e03b98abcfe59cc2382d806bc6",
      "url": "https://github.com/apache/ignite/commit/630af97e457d10e03b98abcfe59cc2382d806bc6",
      "message": "Merge remote-tracking branch 'origin/master' into ignite-13496",
      "committedDate": "2020-11-25T06:29:47Z",
      "type": "commit"
    },
    {
      "oid": "9a3a2ebbf5feb8f2e77e1386f17d98fc5c70e1cc",
      "url": "https://github.com/apache/ignite/commit/9a3a2ebbf5feb8f2e77e1386f17d98fc5c70e1cc",
      "message": "Adding thin client JMH benchmarks",
      "committedDate": "2020-11-25T09:31:12Z",
      "type": "commit"
    },
    {
      "oid": "f20eddc90ec24de923bb458ea1611b86fbb61983",
      "url": "https://github.com/apache/ignite/commit/f20eddc90ec24de923bb458ea1611b86fbb61983",
      "message": "wip Adding thin client JMH benchmarks",
      "committedDate": "2020-11-25T09:41:03Z",
      "type": "commit"
    },
    {
      "oid": "7f020a71fb117296489f3ace4f81cae8d1f14214",
      "url": "https://github.com/apache/ignite/commit/7f020a71fb117296489f3ace4f81cae8d1f14214",
      "message": "wip Adding thin client JMH benchmarks",
      "committedDate": "2020-11-25T09:43:43Z",
      "type": "commit"
    },
    {
      "oid": "fb84e7df262c6e0965bb983d478213f20c07ce82",
      "url": "https://github.com/apache/ignite/commit/fb84e7df262c6e0965bb983d478213f20c07ce82",
      "message": "Merge branch 'master' into ignite-13496",
      "committedDate": "2020-11-25T12:53:32Z",
      "type": "commit"
    },
    {
      "oid": "90b5d78c0b721e2f8f69883d04f6c0756c1ccd17",
      "url": "https://github.com/apache/ignite/commit/90b5d78c0b721e2f8f69883d04f6c0756c1ccd17",
      "message": "wip thin client benchmarks",
      "committedDate": "2020-11-25T13:03:26Z",
      "type": "commit"
    },
    {
      "oid": "ab362f8441cc16698137fa8f08f909edbb485a6d",
      "url": "https://github.com/apache/ignite/commit/ab362f8441cc16698137fa8f08f909edbb485a6d",
      "message": "wip thin client benchmarks",
      "committedDate": "2020-11-25T13:04:42Z",
      "type": "commit"
    },
    {
      "oid": "6e12482f77f19da9649cd240a50b9038f1269de4",
      "url": "https://github.com/apache/ignite/commit/6e12482f77f19da9649cd240a50b9038f1269de4",
      "message": "wip thin client benchmarks",
      "committedDate": "2020-11-25T13:32:26Z",
      "type": "commit"
    },
    {
      "oid": "52f89f6cedb0765a7b7b36836305f69963a97e9f",
      "url": "https://github.com/apache/ignite/commit/52f89f6cedb0765a7b7b36836305f69963a97e9f",
      "message": "wip thin client benchmarks",
      "committedDate": "2020-11-25T13:41:00Z",
      "type": "commit"
    },
    {
      "oid": "c1ba3b60fcdf1f33fdcdd5d25d535669cf7fff83",
      "url": "https://github.com/apache/ignite/commit/c1ba3b60fcdf1f33fdcdd5d25d535669cf7fff83",
      "message": "wip thin client benchmarks",
      "committedDate": "2020-11-25T13:45:17Z",
      "type": "commit"
    },
    {
      "oid": "87801bf8277bb0fd58db3c3bbdd5c453257d771f",
      "url": "https://github.com/apache/ignite/commit/87801bf8277bb0fd58db3c3bbdd5c453257d771f",
      "message": "wip thin client benchmarks",
      "committedDate": "2020-11-25T13:47:56Z",
      "type": "commit"
    },
    {
      "oid": "ea2de648f66af8a8948777840785b0efabcc1a90",
      "url": "https://github.com/apache/ignite/commit/ea2de648f66af8a8948777840785b0efabcc1a90",
      "message": "wip thin client benchmarks",
      "committedDate": "2020-11-25T13:50:07Z",
      "type": "commit"
    },
    {
      "oid": "8e93fe2cf8f85808ad39a228131bd1277ff4e036",
      "url": "https://github.com/apache/ignite/commit/8e93fe2cf8f85808ad39a228131bd1277ff4e036",
      "message": "wip thin client benchmarks",
      "committedDate": "2020-11-25T14:02:09Z",
      "type": "commit"
    },
    {
      "oid": "c7c8ee1c6db3bcc328038d77190d3324425d64ef",
      "url": "https://github.com/apache/ignite/commit/c7c8ee1c6db3bcc328038d77190d3324425d64ef",
      "message": "wip thin client benchmarks - investigate hangs",
      "committedDate": "2020-11-25T14:20:22Z",
      "type": "commit"
    },
    {
      "oid": "6e42984d1f10f356989801bedace59d443446a9f",
      "url": "https://github.com/apache/ignite/commit/6e42984d1f10f356989801bedace59d443446a9f",
      "message": "wip thin client benchmarks - investigate hangs",
      "committedDate": "2020-11-25T14:35:48Z",
      "type": "commit"
    },
    {
      "oid": "323ef1faab68c0086435f71cdbd5b9da5c5e5aef",
      "url": "https://github.com/apache/ignite/commit/323ef1faab68c0086435f71cdbd5b9da5c5e5aef",
      "message": "wip thin client benchmarks - investigate hangs",
      "committedDate": "2020-11-25T14:36:37Z",
      "type": "commit"
    },
    {
      "oid": "9bf57846e8d49de9f259075bf70f81a9a36d01cb",
      "url": "https://github.com/apache/ignite/commit/9bf57846e8d49de9f259075bf70f81a9a36d01cb",
      "message": "wip thin client benchmarks - investigate hangs",
      "committedDate": "2020-11-25T14:37:11Z",
      "type": "commit"
    },
    {
      "oid": "cea96374fa05c3c8cde07a4b30af1ffed3b8d6de",
      "url": "https://github.com/apache/ignite/commit/cea96374fa05c3c8cde07a4b30af1ffed3b8d6de",
      "message": "wip thin client benchmarks - TODOs about IGNITE_IO_BALANCE_PERIOD",
      "committedDate": "2020-11-25T15:02:15Z",
      "type": "commit"
    },
    {
      "oid": "2e7079cebd3572177d178f8533d7543c95b5990c",
      "url": "https://github.com/apache/ignite/commit/2e7079cebd3572177d178f8533d7543c95b5990c",
      "message": "Put ClientMessageDecoder to session meta - fix race conditions across multiple sessions / selectors",
      "committedDate": "2020-11-26T10:44:31Z",
      "type": "commit"
    },
    {
      "oid": "52ee53dfc5c4d7515a0db3deaa81893082d56797",
      "url": "https://github.com/apache/ignite/commit/52ee53dfc5c4d7515a0db3deaa81893082d56797",
      "message": "Benchmark cleanup",
      "committedDate": "2020-11-26T10:52:06Z",
      "type": "commit"
    },
    {
      "oid": "c18175e88ba3943f5e282153da1c2cf944361810",
      "url": "https://github.com/apache/ignite/commit/c18175e88ba3943f5e282153da1c2cf944361810",
      "message": "cleanup",
      "committedDate": "2020-11-26T11:26:17Z",
      "type": "commit"
    },
    {
      "oid": "366539fc1ac9ab30f39fdf075a0692d10a11670d",
      "url": "https://github.com/apache/ignite/commit/366539fc1ac9ab30f39fdf075a0692d10a11670d",
      "message": "Add benchmark results to xmldoc",
      "committedDate": "2020-11-26T11:28:02Z",
      "type": "commit"
    },
    {
      "oid": "32e107621ebb430deebfb1714f2cba02db17fb8d",
      "url": "https://github.com/apache/ignite/commit/32e107621ebb430deebfb1714f2cba02db17fb8d",
      "message": "fix license headers",
      "committedDate": "2020-11-26T11:33:00Z",
      "type": "commit"
    },
    {
      "oid": "7ec65888fe9086160e589cd1488e45f78845696c",
      "url": "https://github.com/apache/ignite/commit/7ec65888fe9086160e589cd1488e45f78845696c",
      "message": "Merge remote-tracking branch 'origin/master' into ignite-13496",
      "committedDate": "2020-11-26T11:38:32Z",
      "type": "commit"
    },
    {
      "oid": "8ea125f43ac263c24c3bf2b8233c8f49c91141aa",
      "url": "https://github.com/apache/ignite/commit/8ea125f43ac263c24c3bf2b8233c8f49c91141aa",
      "message": "cleanup",
      "committedDate": "2020-11-26T11:39:06Z",
      "type": "commit"
    },
    {
      "oid": "95471e8b15f0c14681350a900e3c1c5a2e57e74a",
      "url": "https://github.com/apache/ignite/commit/95471e8b15f0c14681350a900e3c1c5a2e57e74a",
      "message": "BinaryByteBufferInputStream cleanup",
      "committedDate": "2020-11-26T11:42:17Z",
      "type": "commit"
    },
    {
      "oid": "3e06fe305b56e7df401dcb783a90fffd2a7bd0e9",
      "url": "https://github.com/apache/ignite/commit/3e06fe305b56e7df401dcb783a90fffd2a7bd0e9",
      "message": "BinaryByteBufferInputStream cleanup",
      "committedDate": "2020-11-26T11:45:12Z",
      "type": "commit"
    },
    {
      "oid": "aa57ebf88a9dd81ba54a80d2c3b6657f5b7ca893",
      "url": "https://github.com/apache/ignite/commit/aa57ebf88a9dd81ba54a80d2c3b6657f5b7ca893",
      "message": "comments cleanup",
      "committedDate": "2020-11-26T12:03:07Z",
      "type": "commit"
    },
    {
      "oid": "eb29f33ac3ff668b567a5e3d863558445b029fbe",
      "url": "https://github.com/apache/ignite/commit/eb29f33ac3ff668b567a5e3d863558445b029fbe",
      "message": "comments cleanup",
      "committedDate": "2020-11-26T12:10:22Z",
      "type": "commit"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMDg0NA==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r531030844",
      "bodyText": "Maybe we should also specify the hardware used to get those results.",
      "author": "isapego",
      "createdAt": "2020-11-26T13:31:00Z",
      "path": "modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/jmh/thin/JmhThinClientCacheBenchmark.java",
      "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.benchmarks.jmh.thin;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.apache.ignite.internal.benchmarks.jmh.runner.JmhIdeBenchmarkRunner;\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+/**\n+ * Thin client cache benchmark.\n+ *\n+ * Benchmark                         Mode  Cnt      Score      Error  Units\n+ * JmhThinClientCacheBenchmark.get  thrpt   10  92501.557 \u00b1 1380.384  ops/s\n+ * JmhThinClientCacheBenchmark.put  thrpt   10  82907.446 \u00b1 7572.537  ops/s",
      "originalCommit": "eb29f33ac3ff668b567a5e3d863558445b029fbe",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4NDExNg==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r531084116",
          "bodyText": "+1\nAlso, it will be great if we measure also latency (org.openjdk.jmh.annotations.Mode#AverageTime), not only trouhgput",
          "author": "ivandasch",
          "createdAt": "2020-11-26T14:58:17Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMDg0NA=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0Mzk2Mw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r532443963",
          "bodyText": "Added Mode.AverageTime, added system config to the results comment.",
          "author": "ptupitsyn",
          "createdAt": "2020-11-30T09:13:02Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMDg0NA=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "oid": "1f523fd3f9d957f528dfb4258d7af798eb3370be",
      "url": "https://github.com/apache/ignite/commit/1f523fd3f9d957f528dfb4258d7af798eb3370be",
      "message": "Merge remote-tracking branch 'origin/master' into ignite-13496\n\n# Conflicts:\n#\tmodules/core/src/main/java/org/apache/ignite/internal/client/thin/TcpClientChannel.java\n\n(port \"IGNITE-13730 Unify fallback property for SSL key store provider\" changes to ClientSslUtils)",
      "committedDate": "2020-11-30T07:48:04Z",
      "type": "commit"
    },
    {
      "oid": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "url": "https://github.com/apache/ignite/commit/054bf139a27909223f8f1b6f929d2d3431a1f774",
      "message": "Add latency benchmark, update results, specify system config",
      "committedDate": "2020-11-30T09:11:32Z",
      "type": "commit"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4NzM5NQ==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533187395",
      "bodyText": "NL between } and catch according to code style",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:07:16Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/TcpIgniteClient.java",
      "diffHunk": "@@ -116,18 +117,23 @@ private TcpIgniteClient(ClientConfiguration cfg) throws ClientException {\n \n         ch = new ReliableChannel(chFactory, cfg, binary);\n \n-        ch.channelsInit();\n+        try {\n+            ch.channelsInit();\n \n-        ch.addChannelFailListener(() -> metadataHandler.onReconnect());\n+            ch.addChannelFailListener(() -> metadataHandler.onReconnect());\n \n-        transactions = new TcpClientTransactions(ch, marsh,\n-            new ClientTransactionConfiguration(cfg.getTransactionConfiguration()));\n+            transactions = new TcpClientTransactions(ch, marsh,\n+                    new ClientTransactionConfiguration(cfg.getTransactionConfiguration()));\n \n-        cluster = new ClientClusterImpl(ch, marsh);\n+            cluster = new ClientClusterImpl(ch, marsh);\n \n-        compute = new ClientComputeImpl(ch, marsh, cluster.defaultClusterGroup());\n+            compute = new ClientComputeImpl(ch, marsh, cluster.defaultClusterGroup());\n \n-        services = new ClientServicesImpl(ch, marsh, cluster.defaultClusterGroup());\n+            services = new ClientServicesImpl(ch, marsh, cluster.defaultClusterGroup());\n+        } catch (Exception e) {",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyMTUzNg==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533421536",
          "bodyText": "Fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T13:51:47Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4NzM5NQ=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4NzYzNA==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533187634",
      "bodyText": "NL between } and catch according to code style",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:07:27Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/gridnioserver/GridNioClientConnectionMultiplexer.java",
      "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io.gridnioserver;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.net.ssl.SSLContext;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.client.ClientConnectionException;\n+import org.apache.ignite.configuration.ClientConfiguration;\n+import org.apache.ignite.internal.client.thin.ClientSslUtils;\n+import org.apache.ignite.internal.client.thin.io.ClientConnection;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionMultiplexer;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionStateHandler;\n+import org.apache.ignite.internal.client.thin.io.ClientMessageHandler;\n+import org.apache.ignite.internal.util.nio.GridNioCodecFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFuture;\n+import org.apache.ignite.internal.util.nio.GridNioFutureImpl;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.nio.ssl.GridNioSslFilter;\n+import org.apache.ignite.logger.NullLogger;\n+\n+/**\n+ * Client connection multiplexer based on {@link org.apache.ignite.internal.util.nio.GridNioServer}.\n+ */\n+public class GridNioClientConnectionMultiplexer implements ClientConnectionMultiplexer {\n+    /** Worker thread prefix. */\n+    private static final String THREAD_PREFIX = \"thin-client-channel\";\n+\n+    /** */\n+    private static final int CLIENT_MODE_PORT = -1;\n+\n+    /** */\n+    private final GridNioServer<ByteBuffer> srv;\n+\n+    /** */\n+    private final SSLContext sslCtx;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param cfg Client config.\n+     */\n+    public GridNioClientConnectionMultiplexer(ClientConfiguration cfg) {\n+        IgniteLogger gridLog = new NullLogger();\n+\n+        GridNioFilter[] filters;\n+\n+        GridNioFilter codecFilter = new GridNioCodecFilter(new GridNioClientParser(), gridLog, false);\n+\n+        sslCtx = ClientSslUtils.getSslContext(cfg);\n+\n+        if (sslCtx != null) {\n+            GridNioSslFilter sslFilter = new GridNioSslFilter(sslCtx, true, ByteOrder.nativeOrder(), gridLog);\n+            sslFilter.directMode(false);\n+            filters = new GridNioFilter[]{codecFilter, sslFilter};\n+        } else\n+            filters = new GridNioFilter[]{codecFilter};\n+\n+        try {\n+            srv = GridNioServer.<ByteBuffer>builder()\n+                    .port(CLIENT_MODE_PORT)\n+                    .listener(new GridNioClientListener())\n+                    .filters(filters)\n+                    .logger(gridLog)\n+                    .selectorCount(1) // Using more selectors does not seem to improve performance.\n+                    .byteOrder(ByteOrder.nativeOrder())\n+                    .directBuffer(true)\n+                    .directMode(false)\n+                    .igniteInstanceName(\"thinClient\")\n+                    .serverName(THREAD_PREFIX)\n+                    .idleTimeout(Long.MAX_VALUE)\n+                    .socketReceiveBufferSize(cfg.getReceiveBufferSize())\n+                    .socketSendBufferSize(cfg.getSendBufferSize())\n+                    .tcpNoDelay(true)\n+                    .build();\n+        } catch (IgniteCheckedException e) {",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyMTc4Mw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533421783",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T13:52:07Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4NzYzNA=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4Nzc3Nw==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533187777",
      "bodyText": "NL between } and catch according to code style",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:07:37Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/gridnioserver/GridNioClientConnectionMultiplexer.java",
      "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io.gridnioserver;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.net.ssl.SSLContext;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.client.ClientConnectionException;\n+import org.apache.ignite.configuration.ClientConfiguration;\n+import org.apache.ignite.internal.client.thin.ClientSslUtils;\n+import org.apache.ignite.internal.client.thin.io.ClientConnection;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionMultiplexer;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionStateHandler;\n+import org.apache.ignite.internal.client.thin.io.ClientMessageHandler;\n+import org.apache.ignite.internal.util.nio.GridNioCodecFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFuture;\n+import org.apache.ignite.internal.util.nio.GridNioFutureImpl;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.nio.ssl.GridNioSslFilter;\n+import org.apache.ignite.logger.NullLogger;\n+\n+/**\n+ * Client connection multiplexer based on {@link org.apache.ignite.internal.util.nio.GridNioServer}.\n+ */\n+public class GridNioClientConnectionMultiplexer implements ClientConnectionMultiplexer {\n+    /** Worker thread prefix. */\n+    private static final String THREAD_PREFIX = \"thin-client-channel\";\n+\n+    /** */\n+    private static final int CLIENT_MODE_PORT = -1;\n+\n+    /** */\n+    private final GridNioServer<ByteBuffer> srv;\n+\n+    /** */\n+    private final SSLContext sslCtx;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param cfg Client config.\n+     */\n+    public GridNioClientConnectionMultiplexer(ClientConfiguration cfg) {\n+        IgniteLogger gridLog = new NullLogger();\n+\n+        GridNioFilter[] filters;\n+\n+        GridNioFilter codecFilter = new GridNioCodecFilter(new GridNioClientParser(), gridLog, false);\n+\n+        sslCtx = ClientSslUtils.getSslContext(cfg);\n+\n+        if (sslCtx != null) {\n+            GridNioSslFilter sslFilter = new GridNioSslFilter(sslCtx, true, ByteOrder.nativeOrder(), gridLog);\n+            sslFilter.directMode(false);\n+            filters = new GridNioFilter[]{codecFilter, sslFilter};\n+        } else\n+            filters = new GridNioFilter[]{codecFilter};\n+\n+        try {\n+            srv = GridNioServer.<ByteBuffer>builder()\n+                    .port(CLIENT_MODE_PORT)\n+                    .listener(new GridNioClientListener())\n+                    .filters(filters)\n+                    .logger(gridLog)\n+                    .selectorCount(1) // Using more selectors does not seem to improve performance.\n+                    .byteOrder(ByteOrder.nativeOrder())\n+                    .directBuffer(true)\n+                    .directMode(false)\n+                    .igniteInstanceName(\"thinClient\")\n+                    .serverName(THREAD_PREFIX)\n+                    .idleTimeout(Long.MAX_VALUE)\n+                    .socketReceiveBufferSize(cfg.getReceiveBufferSize())\n+                    .socketSendBufferSize(cfg.getSendBufferSize())\n+                    .tcpNoDelay(true)\n+                    .build();\n+        } catch (IgniteCheckedException e) {\n+            throw new IgniteException(e);\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void start() {\n+        srv.start();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void stop() {\n+        srv.stop();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ClientConnection open(InetSocketAddress addr,\n+                                           ClientMessageHandler msgHnd,\n+                                           ClientConnectionStateHandler stateHnd)\n+            throws ClientConnectionException {\n+        try {\n+            java.nio.channels.SocketChannel ch = java.nio.channels.SocketChannel.open();\n+            ch.socket().connect(new InetSocketAddress(addr.getHostName(), addr.getPort()), Integer.MAX_VALUE);\n+\n+            Map<Integer, Object> meta = new HashMap<>();\n+            GridNioFuture<?> sslHandshakeFut = null;\n+\n+            if (sslCtx != null) {\n+                sslHandshakeFut = new GridNioFutureImpl<>(null);\n+\n+                meta.put(GridNioSslFilter.HANDSHAKE_FUT_META_KEY, sslHandshakeFut);\n+            }\n+\n+            GridNioSession ses = srv.createSession(ch, meta, false, null).get();\n+\n+            if (sslHandshakeFut != null)\n+                sslHandshakeFut.get();\n+\n+            return new GridNioClientConnection(ses, msgHnd, stateHnd);\n+        } catch (Exception e) {",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyMTkzNg==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533421936",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T13:52:20Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4Nzc3Nw=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MTU1NA==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533191554",
      "bodyText": "NL after }",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:10:44Z",
      "path": "modules/core/src/test/java/org/apache/ignite/client/ConnectToStartingNodeTest.java",
      "diffHunk": "@@ -71,14 +71,20 @@ public void testClientConnectBeforeDiscoveryStart() throws Exception {\n         IgniteInternalFuture<IgniteClient> futStartClient = GridTestUtils.runAsync(\n             () -> startClient(grid()));\n \n-        // Server doesn't accept connection before discovery SPI started.\n-        assertFalse(GridTestUtils.waitForCondition(futStartClient::isDone, 500L));\n+        try {\n+            // Server doesn't accept connection before discovery SPI started.\n+            assertFalse(GridTestUtils.waitForCondition(futStartClient::isDone, 500L));\n \n-        barrier.await();\n+            barrier.await();\n+\n+            futStartGrid.get();\n \n-        futStartGrid.get();\n+            // Server accept connection after discovery SPI started.\n+            assertTrue(GridTestUtils.waitForCondition(futStartClient::isDone, 500L));\n+        } finally {",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyMjA3Ng==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533422076",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T13:52:31Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MTU1NA=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MjI2Ng==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533192266",
      "bodyText": "Redundant NL",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:11:19Z",
      "path": "modules/core/src/test/java/org/apache/ignite/client/ConnectToStartingNodeTest.java",
      "diffHunk": "@@ -71,14 +71,20 @@ public void testClientConnectBeforeDiscoveryStart() throws Exception {\n         IgniteInternalFuture<IgniteClient> futStartClient = GridTestUtils.runAsync(\n             () -> startClient(grid()));\n \n-        // Server doesn't accept connection before discovery SPI started.\n-        assertFalse(GridTestUtils.waitForCondition(futStartClient::isDone, 500L));\n+        try {\n+            // Server doesn't accept connection before discovery SPI started.\n+            assertFalse(GridTestUtils.waitForCondition(futStartClient::isDone, 500L));\n \n-        barrier.await();\n+            barrier.await();\n+\n+            futStartGrid.get();\n \n-        futStartGrid.get();\n+            // Server accept connection after discovery SPI started.\n+            assertTrue(GridTestUtils.waitForCondition(futStartClient::isDone, 500L));\n+        } finally {\n+            if (futStartClient.isDone())\n+                futStartClient.get().close();\n+        }\n ",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyMjExMg==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533422112",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T13:52:34Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MjI2Ng=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzNDk3NA==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533234974",
      "bodyText": "NL between } and catch according to code style",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:41:41Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/TcpClientChannel.java",
      "diffHunk": "@@ -680,12 +571,12 @@ else if (!supportedVers.contains(srvVer) ||\n \n     /** Write bytes to the output stream. */\n     private void write(byte[] bytes, int len) throws ClientConnectionException {\n+        ByteBuffer buf = ByteBuffer.wrap(bytes, 0, len);\n+\n         try {\n-            out.write(bytes, 0, len);\n-            out.flush();\n-        }\n-        catch (IOException e) {\n-            throw handleIOError(e);\n+            sock.send(buf);\n+        } catch (IgniteCheckedException e) {",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyMjM2Mg==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533422362",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T13:52:58Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzNDk3NA=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzNTM3NA==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533235374",
      "bodyText": "NL between } and catch according to code style",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:42:01Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/TcpClientChannel.java",
      "diffHunk": "@@ -543,31 +450,20 @@ else if (addr.getPort() < 1024 || addr.getPort() > 49151)\n             throw new IllegalArgumentException(error);\n     }\n \n-    /** Create socket. */\n-    private static Socket createSocket(ClientChannelConfiguration cfg) throws IOException {\n-        Socket sock = cfg.getSslMode() == SslMode.REQUIRED ?\n-            new ClientSslSocketFactory(cfg).create() :\n-            new Socket(cfg.getAddress().getHostName(), cfg.getAddress().getPort());\n-\n-        sock.setTcpNoDelay(cfg.isTcpNoDelay());\n-\n-        if (cfg.getTimeout() > 0)\n-            sock.setSoTimeout(cfg.getTimeout());\n-\n-        if (cfg.getSendBufferSize() > 0)\n-            sock.setSendBufferSize(cfg.getSendBufferSize());\n-\n-        if (cfg.getReceiveBufferSize() > 0)\n-            sock.setReceiveBufferSize(cfg.getReceiveBufferSize());\n-\n-        return sock;\n-    }\n-\n     /** Client handshake. */\n     private void handshake(ProtocolVersion ver, String user, String pwd, Map<String, String> userAttrs)\n         throws ClientConnectionException, ClientAuthenticationException, ClientProtocolError {\n+        ClientRequestFuture fut = new ClientRequestFuture();\n+        pendingReqs.put(-1L, fut);\n+\n         handshakeReq(ver, user, pwd, userAttrs);\n-        handshakeRes(ver, user, pwd, userAttrs);\n+\n+        try {\n+            ByteBuffer res = timeout > 0 ? fut.get(timeout) : fut.get();\n+            handshakeRes(res, ver, user, pwd, userAttrs);\n+        } catch (IgniteCheckedException e) {",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyMjg0Nw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533422847",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T13:53:40Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzNTM3NA=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1MzY2NQ==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533253665",
      "bodyText": "I don't quite understand. In PayloadOutputChannel constructor we have created a new BinaryHeapOutputStream, which doesn't leaks to anywhere. Why do we need another array copy here?",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:56:27Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/TcpClientChannel.java",
      "diffHunk": "@@ -292,7 +233,8 @@ private ClientRequestFuture send(ClientOperation op, Consumer<PayloadOutputChann\n \n             req.writeInt(0, req.position() - 4); // Actual size.\n \n-            write(req.array(), req.position());\n+            // arrayCopy is required, because buffer is pooled, and write is async.\n+            write(req.arrayCopy(), req.position());",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyODM0OA==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533428348",
          "bodyText": "PayloadOutputChannel creates BinaryHeapOutputStream, which uses BinaryMemoryAllocator.THREAD_LOCAL.chunk(). This thread-local chunk will be released as soon as we leave the scope, because PayloadOutputChannel is wrapped in a try-with-resources block. However, write passes the buffer to the NIO framework, which may process it later, causing \"use-after-free\" of sorts.",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T14:01:16Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1MzY2NQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzMzkzNw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533433937",
          "bodyText": "Got it. Thanks.",
          "author": "alex-plekhanov",
          "createdAt": "2020-12-01T14:09:10Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1MzY2NQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkxNTc1Nw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533915757",
          "bodyText": "We can also make micro-optimization - avoid arrayCopy for sync requests without a timeout, in this case, the thread can't reuse buffer again until the response is received. And latency for such operations will be a little bit better. (Perhaps this can be made in another ticket)",
          "author": "alex-plekhanov",
          "createdAt": "2020-12-02T05:59:49Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1MzY2NQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI4NDkxNg==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r534284916",
          "bodyText": "@alex-plekhanov ticket filed: https://issues.apache.org/jira/browse/IGNITE-13804\n\nwithout a timeout\n\nHow does the timeout affect this logic?",
          "author": "ptupitsyn",
          "createdAt": "2020-12-02T16:02:36Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1MzY2NQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwODc5Nw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r534708797",
          "bodyText": "If the timeout is too low, there are no guarantees that the message already sent when control returned to the user thread after pendingReq.get(timeout)",
          "author": "alex-plekhanov",
          "createdAt": "2020-12-03T06:06:52Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1MzY2NQ=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1Nzc3OQ==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533257779",
      "bodyText": "Wrong indent",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T09:59:44Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/ClientMessageDecoder.java",
      "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Decodes thin client messages from partial buffers.\n+  */",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyODc2MQ==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533428761",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T14:01:51Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1Nzc3OQ=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1OTUzNw==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533259537",
      "bodyText": "Point at the end",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T10:01:10Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/ClientConnectionStateHandler.java",
      "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Handles thin client connection state.\n+ */\n+public interface ClientConnectionStateHandler {\n+    /**\n+     * Handles connection loss",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyODk1MQ==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533428951",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T14:02:08Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI1OTUzNw=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI3ODkzMA==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533278930",
      "bodyText": "NL after }",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T10:17:43Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/gridnioserver/GridNioClientConnectionMultiplexer.java",
      "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io.gridnioserver;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.net.ssl.SSLContext;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.client.ClientConnectionException;\n+import org.apache.ignite.configuration.ClientConfiguration;\n+import org.apache.ignite.internal.client.thin.ClientSslUtils;\n+import org.apache.ignite.internal.client.thin.io.ClientConnection;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionMultiplexer;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionStateHandler;\n+import org.apache.ignite.internal.client.thin.io.ClientMessageHandler;\n+import org.apache.ignite.internal.util.nio.GridNioCodecFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFuture;\n+import org.apache.ignite.internal.util.nio.GridNioFutureImpl;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.nio.ssl.GridNioSslFilter;\n+import org.apache.ignite.logger.NullLogger;\n+\n+/**\n+ * Client connection multiplexer based on {@link org.apache.ignite.internal.util.nio.GridNioServer}.\n+ */\n+public class GridNioClientConnectionMultiplexer implements ClientConnectionMultiplexer {\n+    /** Worker thread prefix. */\n+    private static final String THREAD_PREFIX = \"thin-client-channel\";\n+\n+    /** */\n+    private static final int CLIENT_MODE_PORT = -1;\n+\n+    /** */\n+    private final GridNioServer<ByteBuffer> srv;\n+\n+    /** */\n+    private final SSLContext sslCtx;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param cfg Client config.\n+     */\n+    public GridNioClientConnectionMultiplexer(ClientConfiguration cfg) {\n+        IgniteLogger gridLog = new NullLogger();\n+\n+        GridNioFilter[] filters;\n+\n+        GridNioFilter codecFilter = new GridNioCodecFilter(new GridNioClientParser(), gridLog, false);\n+\n+        sslCtx = ClientSslUtils.getSslContext(cfg);\n+\n+        if (sslCtx != null) {\n+            GridNioSslFilter sslFilter = new GridNioSslFilter(sslCtx, true, ByteOrder.nativeOrder(), gridLog);\n+            sslFilter.directMode(false);\n+            filters = new GridNioFilter[]{codecFilter, sslFilter};\n+        } else",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyOTM5NA==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533429394",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T14:02:44Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI3ODkzMA=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDgxOQ==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533284819",
      "bodyText": "Space before  {",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T10:22:39Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/gridnioserver/GridNioClientConnectionMultiplexer.java",
      "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io.gridnioserver;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.net.ssl.SSLContext;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.client.ClientConnectionException;\n+import org.apache.ignite.configuration.ClientConfiguration;\n+import org.apache.ignite.internal.client.thin.ClientSslUtils;\n+import org.apache.ignite.internal.client.thin.io.ClientConnection;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionMultiplexer;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionStateHandler;\n+import org.apache.ignite.internal.client.thin.io.ClientMessageHandler;\n+import org.apache.ignite.internal.util.nio.GridNioCodecFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFuture;\n+import org.apache.ignite.internal.util.nio.GridNioFutureImpl;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.nio.ssl.GridNioSslFilter;\n+import org.apache.ignite.logger.NullLogger;\n+\n+/**\n+ * Client connection multiplexer based on {@link org.apache.ignite.internal.util.nio.GridNioServer}.\n+ */\n+public class GridNioClientConnectionMultiplexer implements ClientConnectionMultiplexer {\n+    /** Worker thread prefix. */\n+    private static final String THREAD_PREFIX = \"thin-client-channel\";\n+\n+    /** */\n+    private static final int CLIENT_MODE_PORT = -1;\n+\n+    /** */\n+    private final GridNioServer<ByteBuffer> srv;\n+\n+    /** */\n+    private final SSLContext sslCtx;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param cfg Client config.\n+     */\n+    public GridNioClientConnectionMultiplexer(ClientConfiguration cfg) {\n+        IgniteLogger gridLog = new NullLogger();\n+\n+        GridNioFilter[] filters;\n+\n+        GridNioFilter codecFilter = new GridNioCodecFilter(new GridNioClientParser(), gridLog, false);\n+\n+        sslCtx = ClientSslUtils.getSslContext(cfg);\n+\n+        if (sslCtx != null) {\n+            GridNioSslFilter sslFilter = new GridNioSslFilter(sslCtx, true, ByteOrder.nativeOrder(), gridLog);\n+            sslFilter.directMode(false);\n+            filters = new GridNioFilter[]{codecFilter, sslFilter};\n+        } else\n+            filters = new GridNioFilter[]{codecFilter};",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyOTU1Mw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533429553",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T14:02:59Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDgxOQ=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDk0Mw==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533284943",
      "bodyText": "Space before  {",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T10:22:45Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/gridnioserver/GridNioClientConnectionMultiplexer.java",
      "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io.gridnioserver;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.net.ssl.SSLContext;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.client.ClientConnectionException;\n+import org.apache.ignite.configuration.ClientConfiguration;\n+import org.apache.ignite.internal.client.thin.ClientSslUtils;\n+import org.apache.ignite.internal.client.thin.io.ClientConnection;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionMultiplexer;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionStateHandler;\n+import org.apache.ignite.internal.client.thin.io.ClientMessageHandler;\n+import org.apache.ignite.internal.util.nio.GridNioCodecFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFuture;\n+import org.apache.ignite.internal.util.nio.GridNioFutureImpl;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.nio.ssl.GridNioSslFilter;\n+import org.apache.ignite.logger.NullLogger;\n+\n+/**\n+ * Client connection multiplexer based on {@link org.apache.ignite.internal.util.nio.GridNioServer}.\n+ */\n+public class GridNioClientConnectionMultiplexer implements ClientConnectionMultiplexer {\n+    /** Worker thread prefix. */\n+    private static final String THREAD_PREFIX = \"thin-client-channel\";\n+\n+    /** */\n+    private static final int CLIENT_MODE_PORT = -1;\n+\n+    /** */\n+    private final GridNioServer<ByteBuffer> srv;\n+\n+    /** */\n+    private final SSLContext sslCtx;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param cfg Client config.\n+     */\n+    public GridNioClientConnectionMultiplexer(ClientConfiguration cfg) {\n+        IgniteLogger gridLog = new NullLogger();\n+\n+        GridNioFilter[] filters;\n+\n+        GridNioFilter codecFilter = new GridNioCodecFilter(new GridNioClientParser(), gridLog, false);\n+\n+        sslCtx = ClientSslUtils.getSslContext(cfg);\n+\n+        if (sslCtx != null) {\n+            GridNioSslFilter sslFilter = new GridNioSslFilter(sslCtx, true, ByteOrder.nativeOrder(), gridLog);\n+            sslFilter.directMode(false);\n+            filters = new GridNioFilter[]{codecFilter, sslFilter};",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyOTY1OQ==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533429659",
          "bodyText": "fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T14:03:08Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDk0Mw=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxOTY1Ng==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533319656",
      "bodyText": "Add java.nio.channels.SocketChannel to imports?",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T10:57:09Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/gridnioserver/GridNioClientConnectionMultiplexer.java",
      "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io.gridnioserver;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.net.ssl.SSLContext;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.client.ClientConnectionException;\n+import org.apache.ignite.configuration.ClientConfiguration;\n+import org.apache.ignite.internal.client.thin.ClientSslUtils;\n+import org.apache.ignite.internal.client.thin.io.ClientConnection;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionMultiplexer;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionStateHandler;\n+import org.apache.ignite.internal.client.thin.io.ClientMessageHandler;\n+import org.apache.ignite.internal.util.nio.GridNioCodecFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFuture;\n+import org.apache.ignite.internal.util.nio.GridNioFutureImpl;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.nio.ssl.GridNioSslFilter;\n+import org.apache.ignite.logger.NullLogger;\n+\n+/**\n+ * Client connection multiplexer based on {@link org.apache.ignite.internal.util.nio.GridNioServer}.\n+ */\n+public class GridNioClientConnectionMultiplexer implements ClientConnectionMultiplexer {\n+    /** Worker thread prefix. */\n+    private static final String THREAD_PREFIX = \"thin-client-channel\";\n+\n+    /** */\n+    private static final int CLIENT_MODE_PORT = -1;\n+\n+    /** */\n+    private final GridNioServer<ByteBuffer> srv;\n+\n+    /** */\n+    private final SSLContext sslCtx;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param cfg Client config.\n+     */\n+    public GridNioClientConnectionMultiplexer(ClientConfiguration cfg) {\n+        IgniteLogger gridLog = new NullLogger();\n+\n+        GridNioFilter[] filters;\n+\n+        GridNioFilter codecFilter = new GridNioCodecFilter(new GridNioClientParser(), gridLog, false);\n+\n+        sslCtx = ClientSslUtils.getSslContext(cfg);\n+\n+        if (sslCtx != null) {\n+            GridNioSslFilter sslFilter = new GridNioSslFilter(sslCtx, true, ByteOrder.nativeOrder(), gridLog);\n+            sslFilter.directMode(false);\n+            filters = new GridNioFilter[]{codecFilter, sslFilter};\n+        } else\n+            filters = new GridNioFilter[]{codecFilter};\n+\n+        try {\n+            srv = GridNioServer.<ByteBuffer>builder()\n+                    .port(CLIENT_MODE_PORT)\n+                    .listener(new GridNioClientListener())\n+                    .filters(filters)\n+                    .logger(gridLog)\n+                    .selectorCount(1) // Using more selectors does not seem to improve performance.\n+                    .byteOrder(ByteOrder.nativeOrder())\n+                    .directBuffer(true)\n+                    .directMode(false)\n+                    .igniteInstanceName(\"thinClient\")\n+                    .serverName(THREAD_PREFIX)\n+                    .idleTimeout(Long.MAX_VALUE)\n+                    .socketReceiveBufferSize(cfg.getReceiveBufferSize())\n+                    .socketSendBufferSize(cfg.getSendBufferSize())\n+                    .tcpNoDelay(true)\n+                    .build();\n+        } catch (IgniteCheckedException e) {\n+            throw new IgniteException(e);\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void start() {\n+        srv.start();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void stop() {\n+        srv.stop();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ClientConnection open(InetSocketAddress addr,\n+                                           ClientMessageHandler msgHnd,\n+                                           ClientConnectionStateHandler stateHnd)\n+            throws ClientConnectionException {\n+        try {\n+            java.nio.channels.SocketChannel ch = java.nio.channels.SocketChannel.open();",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzMDA1Nw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533430057",
          "bodyText": "Fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T14:03:45Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxOTY1Ng=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzODUxMQ==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533338511",
      "bodyText": "I think here ByteOrder.LITTLE_ENDIAN should be used since this ByteBuffer is passed to payload readers",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T11:30:00Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/gridnioserver/GridNioClientParser.java",
      "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io.gridnioserver;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+\n+import org.apache.ignite.internal.client.thin.io.ClientMessageDecoder;\n+import org.apache.ignite.internal.util.nio.GridNioParser;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.nio.GridNioSessionMetaKey;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Client message parser.\n+ */\n+class GridNioClientParser implements GridNioParser {\n+    /** */\n+    private static final int SES_META_DECODER = GridNioSessionMetaKey.nextUniqueKey();\n+\n+    /** {@inheritDoc} */\n+    @Override public @Nullable Object decode(GridNioSession ses, ByteBuffer buf) {\n+        ClientMessageDecoder decoder = ses.meta(SES_META_DECODER);\n+\n+        if (decoder == null) {\n+            decoder = new ClientMessageDecoder();\n+\n+            ses.addMeta(SES_META_DECODER, decoder);\n+        }\n+\n+        byte[] bytes = decoder.apply(buf);\n+\n+        if (bytes == null)\n+            return null; // Message is not yet completely received.\n+\n+        return ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder());",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzMjk4NQ==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533532985",
          "bodyText": "Good catch! Fixed.",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T16:07:49Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzODUxMQ=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0MjY4NA==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r533342684",
      "bodyText": "public abstract class?",
      "author": "alex-plekhanov",
      "createdAt": "2020-12-01T11:37:09Z",
      "path": "modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/jmh/thin/JmhThinClientAbstractBenchmark.java",
      "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.benchmarks.jmh.thin;\n+\n+import java.util.stream.IntStream;\n+\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.Ignition;\n+import org.apache.ignite.client.ClientCache;\n+import org.apache.ignite.client.IgniteClient;\n+import org.apache.ignite.configuration.ClientConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.benchmarks.jmh.JmhAbstractBenchmark;\n+import org.apache.ignite.internal.util.typedef.internal.A;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+\n+/**\n+ * Base class for thin client benchmarks.\n+ */\n+@State(Scope.Benchmark)\n+public class JmhThinClientAbstractBenchmark extends JmhAbstractBenchmark {",
      "originalCommit": "054bf139a27909223f8f1b6f929d2d3431a1f774",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyNzM1NA==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r533527354",
          "bodyText": "Fixed",
          "author": "ptupitsyn",
          "createdAt": "2020-12-01T16:00:28Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0MjY4NA=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "oid": "a1ca91668c56d9814c4b7dd82539eeac6c36f638",
      "url": "https://github.com/apache/ignite/commit/a1ca91668c56d9814c4b7dd82539eeac6c36f638",
      "message": "fixing code style",
      "committedDate": "2020-12-01T13:51:59Z",
      "type": "commit"
    },
    {
      "oid": "8489a03bcb8a6537cb0b775e44cb8a532768d3ae",
      "url": "https://github.com/apache/ignite/commit/8489a03bcb8a6537cb0b775e44cb8a532768d3ae",
      "message": "fixing code style",
      "committedDate": "2020-12-01T13:53:36Z",
      "type": "commit"
    },
    {
      "oid": "f50c4ecf9c5145ae70af701294ac0f872be2de17",
      "url": "https://github.com/apache/ignite/commit/f50c4ecf9c5145ae70af701294ac0f872be2de17",
      "message": "fixing code style",
      "committedDate": "2020-12-01T14:01:53Z",
      "type": "commit"
    },
    {
      "oid": "6dae134bc0c343ca6cb9c5de6d8003131a493181",
      "url": "https://github.com/apache/ignite/commit/6dae134bc0c343ca6cb9c5de6d8003131a493181",
      "message": "fixing code style",
      "committedDate": "2020-12-01T14:03:13Z",
      "type": "commit"
    },
    {
      "oid": "0bae1866b66491d2c94d376411f138d6fd4e4c9b",
      "url": "https://github.com/apache/ignite/commit/0bae1866b66491d2c94d376411f138d6fd4e4c9b",
      "message": "fixing code style",
      "committedDate": "2020-12-01T14:03:41Z",
      "type": "commit"
    },
    {
      "oid": "2f8c7cd8926329d018800720188001d8b969f76d",
      "url": "https://github.com/apache/ignite/commit/2f8c7cd8926329d018800720188001d8b969f76d",
      "message": "fixing code style",
      "committedDate": "2020-12-01T16:00:16Z",
      "type": "commit"
    },
    {
      "oid": "4b1e1619da5605892959798176480d79efef62d5",
      "url": "https://github.com/apache/ignite/commit/4b1e1619da5605892959798176480d79efef62d5",
      "message": "Fix ByteBuffer endianness",
      "committedDate": "2020-12-01T16:05:53Z",
      "type": "commit"
    },
    {
      "oid": "bd35d4d2728fa5655d908956c3536f3b77af95b8",
      "url": "https://github.com/apache/ignite/commit/bd35d4d2728fa5655d908956c3536f3b77af95b8",
      "message": "AsynchronousSocketChannel POC wip",
      "committedDate": "2020-10-13T13:45:01Z",
      "type": "commit"
    },
    {
      "oid": "d47863abf6190e830625a885f2eae319a9a5b85f",
      "url": "https://github.com/apache/ignite/commit/d47863abf6190e830625a885f2eae319a9a5b85f",
      "message": "AsynchronousSocketChannel POC wip",
      "committedDate": "2020-10-13T13:48:42Z",
      "type": "commit"
    },
    {
      "oid": "d70305b38d0646db91f89595d4443fdbe14e8f4e",
      "url": "https://github.com/apache/ignite/commit/d70305b38d0646db91f89595d4443fdbe14e8f4e",
      "message": "AsynchronousSocketChannel POC wip",
      "committedDate": "2020-10-13T13:50:00Z",
      "type": "commit"
    },
    {
      "oid": "42b78386c03adf8810ee4918f65973a355128607",
      "url": "https://github.com/apache/ignite/commit/42b78386c03adf8810ee4918f65973a355128607",
      "message": "AsynchronousSocketChannel testing wip",
      "committedDate": "2020-10-14T15:43:14Z",
      "type": "commit"
    },
    {
      "oid": "5c3a70c7fd8267ede78311aaeefd9a8c88c7b342",
      "url": "https://github.com/apache/ignite/commit/5c3a70c7fd8267ede78311aaeefd9a8c88c7b342",
      "message": "AsynchronousSocketChannel testing wip",
      "committedDate": "2020-10-14T15:52:06Z",
      "type": "commit"
    },
    {
      "oid": "59a4c185f2f96dcdafc7904b729c7ffc2de6d091",
      "url": "https://github.com/apache/ignite/commit/59a4c185f2f96dcdafc7904b729c7ffc2de6d091",
      "message": "AsynchronousSocketChannel testing wip",
      "committedDate": "2020-10-14T15:56:52Z",
      "type": "commit"
    },
    {
      "oid": "a14e98ade13380b1b8163053265e974fb4013ac0",
      "url": "https://github.com/apache/ignite/commit/a14e98ade13380b1b8163053265e974fb4013ac0",
      "message": "AsynchronousSocketChannel testing wip",
      "committedDate": "2020-10-14T16:00:34Z",
      "type": "commit"
    },
    {
      "oid": "734451a71689a300988841d847cccec0b43c4795",
      "url": "https://github.com/apache/ignite/commit/734451a71689a300988841d847cccec0b43c4795",
      "message": "AsynchronousSocketChannel testing wip",
      "committedDate": "2020-10-14T16:24:05Z",
      "type": "commit"
    },
    {
      "oid": "4f9c667bb930e1bc3be8f913ab8e7e22538ee65a",
      "url": "https://github.com/apache/ignite/commit/4f9c667bb930e1bc3be8f913ab8e7e22538ee65a",
      "message": "AsynchronousSocketChannel testing wip",
      "committedDate": "2020-10-14T16:24:53Z",
      "type": "commit"
    },
    {
      "oid": "d1e9094f23b02d1524bfc5ab82dfbd6fe35a8b47",
      "url": "https://github.com/apache/ignite/commit/d1e9094f23b02d1524bfc5ab82dfbd6fe35a8b47",
      "message": "AsynchronousSocketChannel testing wip netty",
      "committedDate": "2020-10-14T18:13:54Z",
      "type": "commit"
    },
    {
      "oid": "36327410c0df307a9f85839670300d0704922a9b",
      "url": "https://github.com/apache/ignite/commit/36327410c0df307a9f85839670300d0704922a9b",
      "message": "AsynchronousSocketChannel testing wip netty",
      "committedDate": "2020-10-14T18:40:46Z",
      "type": "commit"
    },
    {
      "oid": "bb7779b78340b4abd067771274264b381b3dc2f0",
      "url": "https://github.com/apache/ignite/commit/bb7779b78340b4abd067771274264b381b3dc2f0",
      "message": "AsynchronousSocketChannel testing wip netty",
      "committedDate": "2020-10-14T18:45:37Z",
      "type": "commit"
    },
    {
      "oid": "76152b0d2f47b8404e03dd40280615e29a5d36dc",
      "url": "https://github.com/apache/ignite/commit/76152b0d2f47b8404e03dd40280615e29a5d36dc",
      "message": "AsynchronousSocketChannel testing wip netty",
      "committedDate": "2020-10-15T19:07:37Z",
      "type": "commit"
    },
    {
      "oid": "3ace15ce3f1ee88569c226e1bf7f4eec59232361",
      "url": "https://github.com/apache/ignite/commit/3ace15ce3f1ee88569c226e1bf7f4eec59232361",
      "message": "AsynchronousSocketChannel testing wip netty",
      "committedDate": "2020-10-15T19:25:31Z",
      "type": "commit"
    },
    {
      "oid": "0626431eddb0aab512cbdf5d41a671cdfe8139a2",
      "url": "https://github.com/apache/ignite/commit/0626431eddb0aab512cbdf5d41a671cdfe8139a2",
      "message": "AsynchronousSocketChannel testing wip netty",
      "committedDate": "2020-10-15T19:29:35Z",
      "type": "commit"
    },
    {
      "oid": "c1b69c052adca4edd7bccce8396e8c26ce37fe7f",
      "url": "https://github.com/apache/ignite/commit/c1b69c052adca4edd7bccce8396e8c26ce37fe7f",
      "message": "AsynchronousSocketChannel testing wip netty",
      "committedDate": "2020-10-15T19:32:56Z",
      "type": "commit"
    },
    {
      "oid": "d5fc08b81a854e55e2156d9d7ae16774ed3dfb52",
      "url": "https://github.com/apache/ignite/commit/d5fc08b81a854e55e2156d9d7ae16774ed3dfb52",
      "message": "wip",
      "committedDate": "2020-10-15T19:42:28Z",
      "type": "commit"
    },
    {
      "oid": "e3e99f5aa1c9d654603e6157e95cff9da05414fa",
      "url": "https://github.com/apache/ignite/commit/e3e99f5aa1c9d654603e6157e95cff9da05414fa",
      "message": "wip netty ssl",
      "committedDate": "2020-10-16T07:37:04Z",
      "type": "commit"
    },
    {
      "oid": "749a7c89b95ab4c48b86f1d9ec610ed8f7829b0b",
      "url": "https://github.com/apache/ignite/commit/749a7c89b95ab4c48b86f1d9ec610ed8f7829b0b",
      "message": "wip netty ssl",
      "committedDate": "2020-10-16T07:43:54Z",
      "type": "commit"
    },
    {
      "oid": "1836a010e3e7c9f3e43e46b0efb6c338c9ca4f4f",
      "url": "https://github.com/apache/ignite/commit/1836a010e3e7c9f3e43e46b0efb6c338c9ca4f4f",
      "message": "wip GridNioServer",
      "committedDate": "2020-10-21T15:12:34Z",
      "type": "commit"
    },
    {
      "oid": "a99d9f4405009c2fb9711393991b2c9dddd9b42f",
      "url": "https://github.com/apache/ignite/commit/a99d9f4405009c2fb9711393991b2c9dddd9b42f",
      "message": "Merge branch 'master' into ignite-13496",
      "committedDate": "2020-11-06T09:06:28Z",
      "type": "commit"
    },
    {
      "oid": "354953847a5b500e2cf4715fd09c82fa0a966a5f",
      "url": "https://github.com/apache/ignite/commit/354953847a5b500e2cf4715fd09c82fa0a966a5f",
      "message": "Merge remote-tracking branch 'origin/master' into ignite-13496",
      "committedDate": "2020-11-06T16:20:39Z",
      "type": "commit"
    },
    {
      "oid": "48c2fcb6f11dae346d039951427bd73593a2cc17",
      "url": "https://github.com/apache/ignite/commit/48c2fcb6f11dae346d039951427bd73593a2cc17",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T17:07:51Z",
      "type": "commit"
    },
    {
      "oid": "d4b39115d8986f6979c9259f2748056744eb31dd",
      "url": "https://github.com/apache/ignite/commit/d4b39115d8986f6979c9259f2748056744eb31dd",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T17:27:35Z",
      "type": "commit"
    },
    {
      "oid": "8cf972a1c0fab4d8c73700cc5c692d5d16d2ffb1",
      "url": "https://github.com/apache/ignite/commit/8cf972a1c0fab4d8c73700cc5c692d5d16d2ffb1",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T17:35:22Z",
      "type": "commit"
    },
    {
      "oid": "0320cee2b9288c7e1fe067221f3621ed435aaa5e",
      "url": "https://github.com/apache/ignite/commit/0320cee2b9288c7e1fe067221f3621ed435aaa5e",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T17:36:34Z",
      "type": "commit"
    },
    {
      "oid": "6a95d76adca6d849d45484e99dfd48a89531baac",
      "url": "https://github.com/apache/ignite/commit/6a95d76adca6d849d45484e99dfd48a89531baac",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T17:38:51Z",
      "type": "commit"
    },
    {
      "oid": "017be62b6102cbf1e1a1af540a2f0e8abc8926e5",
      "url": "https://github.com/apache/ignite/commit/017be62b6102cbf1e1a1af540a2f0e8abc8926e5",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T17:46:39Z",
      "type": "commit"
    },
    {
      "oid": "5cd1dd07c9c50ae8ad7da9cdf9995bc49566f819",
      "url": "https://github.com/apache/ignite/commit/5cd1dd07c9c50ae8ad7da9cdf9995bc49566f819",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T17:48:56Z",
      "type": "commit"
    },
    {
      "oid": "a1f05f01a5d1e29cade7f51474841b71d59640bb",
      "url": "https://github.com/apache/ignite/commit/a1f05f01a5d1e29cade7f51474841b71d59640bb",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T17:52:46Z",
      "type": "commit"
    },
    {
      "oid": "d4330c53ab56ac09d7c1dab6f18c95e779ae1780",
      "url": "https://github.com/apache/ignite/commit/d4330c53ab56ac09d7c1dab6f18c95e779ae1780",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T18:47:29Z",
      "type": "commit"
    },
    {
      "oid": "5e581bb735c41a2077f949d06b618c06318515ce",
      "url": "https://github.com/apache/ignite/commit/5e581bb735c41a2077f949d06b618c06318515ce",
      "message": "wip GridNioServer test",
      "committedDate": "2020-11-06T18:57:16Z",
      "type": "commit"
    },
    {
      "oid": "ba08e8bb98284ab3e75375a30b0728db8fea9e9a",
      "url": "https://github.com/apache/ignite/commit/ba08e8bb98284ab3e75375a30b0728db8fea9e9a",
      "message": "cleanup",
      "committedDate": "2020-11-08T16:05:11Z",
      "type": "commit"
    },
    {
      "oid": "a0401a404547e5637f92898fe74bdf50141c1117",
      "url": "https://github.com/apache/ignite/commit/a0401a404547e5637f92898fe74bdf50141c1117",
      "message": "Merge branch 'master' into ignite-13496",
      "committedDate": "2020-11-18T07:16:45Z",
      "type": "commit"
    },
    {
      "oid": "7ee2c41f4f1cc0887a776e09604fd0d6d0e7ea21",
      "url": "https://github.com/apache/ignite/commit/7ee2c41f4f1cc0887a776e09604fd0d6d0e7ea21",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T12:54:47Z",
      "type": "commit"
    },
    {
      "oid": "6814848ba3f9b167a5c8d57ff89da0b9829d4325",
      "url": "https://github.com/apache/ignite/commit/6814848ba3f9b167a5c8d57ff89da0b9829d4325",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T12:56:34Z",
      "type": "commit"
    },
    {
      "oid": "7bfa6c9ad41b38afd8bcd136ea849ed750e061b3",
      "url": "https://github.com/apache/ignite/commit/7bfa6c9ad41b38afd8bcd136ea849ed750e061b3",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T13:02:07Z",
      "type": "commit"
    },
    {
      "oid": "7887210e6d3b8d0602b7f51b9331421cd6f068cc",
      "url": "https://github.com/apache/ignite/commit/7887210e6d3b8d0602b7f51b9331421cd6f068cc",
      "message": "use byte buffers",
      "committedDate": "2020-11-18T13:05:08Z",
      "type": "commit"
    },
    {
      "oid": "64882a367ec1a32251b37222b16304541523ae42",
      "url": "https://github.com/apache/ignite/commit/64882a367ec1a32251b37222b16304541523ae42",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T13:18:17Z",
      "type": "commit"
    },
    {
      "oid": "4e5b6d00fe8a2958f5f4b0b442ae0558d6567838",
      "url": "https://github.com/apache/ignite/commit/4e5b6d00fe8a2958f5f4b0b442ae0558d6567838",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T13:38:30Z",
      "type": "commit"
    },
    {
      "oid": "2e26eb9d31038705db02d1a6f3795f4e8f10ac30",
      "url": "https://github.com/apache/ignite/commit/2e26eb9d31038705db02d1a6f3795f4e8f10ac30",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T13:49:47Z",
      "type": "commit"
    },
    {
      "oid": "726faa2b717b8267045fcc13962bb1c018bcaf54",
      "url": "https://github.com/apache/ignite/commit/726faa2b717b8267045fcc13962bb1c018bcaf54",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T14:25:35Z",
      "type": "commit"
    },
    {
      "oid": "81267f5caf167c2100adb731cfe1e9d59c0fdf0b",
      "url": "https://github.com/apache/ignite/commit/81267f5caf167c2100adb731cfe1e9d59c0fdf0b",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T14:34:14Z",
      "type": "commit"
    },
    {
      "oid": "13daaae22c74f2c6c83da0189eaa18492b6fd792",
      "url": "https://github.com/apache/ignite/commit/13daaae22c74f2c6c83da0189eaa18492b6fd792",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T14:36:50Z",
      "type": "commit"
    },
    {
      "oid": "fc27964444957e89552ea050d4f7a351757d96ff",
      "url": "https://github.com/apache/ignite/commit/fc27964444957e89552ea050d4f7a351757d96ff",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T15:10:08Z",
      "type": "commit"
    },
    {
      "oid": "561e2fa471dca31c710223a7a3a7fbe6bab77d1f",
      "url": "https://github.com/apache/ignite/commit/561e2fa471dca31c710223a7a3a7fbe6bab77d1f",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T17:47:43Z",
      "type": "commit"
    },
    {
      "oid": "409059585ebe1fa76109b22960398b6611fe7d45",
      "url": "https://github.com/apache/ignite/commit/409059585ebe1fa76109b22960398b6611fe7d45",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T17:51:52Z",
      "type": "commit"
    },
    {
      "oid": "c5178fef35ca3279ee83dc78a59bae0721e41dd6",
      "url": "https://github.com/apache/ignite/commit/c5178fef35ca3279ee83dc78a59bae0721e41dd6",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T17:57:30Z",
      "type": "commit"
    },
    {
      "oid": "b2a7345118801f8162bf139703bb92b08c4c17b5",
      "url": "https://github.com/apache/ignite/commit/b2a7345118801f8162bf139703bb92b08c4c17b5",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T17:58:10Z",
      "type": "commit"
    },
    {
      "oid": "4c594ea675e06880e8e37adc3fe2032d1054022d",
      "url": "https://github.com/apache/ignite/commit/4c594ea675e06880e8e37adc3fe2032d1054022d",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T18:08:04Z",
      "type": "commit"
    },
    {
      "oid": "6558951d198d19d521263ac97c90a3395df807d0",
      "url": "https://github.com/apache/ignite/commit/6558951d198d19d521263ac97c90a3395df807d0",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T19:36:04Z",
      "type": "commit"
    },
    {
      "oid": "c3b5fdc5a68911750fafbf29ffa98a8d1bafd169",
      "url": "https://github.com/apache/ignite/commit/c3b5fdc5a68911750fafbf29ffa98a8d1bafd169",
      "message": "wip NIO abstraction",
      "committedDate": "2020-11-18T19:37:04Z",
      "type": "commit"
    },
    {
      "oid": "9ec8ea31b23c27403d1157bd1e72df8543c61421",
      "url": "https://github.com/apache/ignite/commit/9ec8ea31b23c27403d1157bd1e72df8543c61421",
      "message": "wip NIO abstraction - decoding",
      "committedDate": "2020-11-18T19:40:09Z",
      "type": "commit"
    },
    {
      "oid": "15fc9b886804de08828ca403f29e88c664015443",
      "url": "https://github.com/apache/ignite/commit/15fc9b886804de08828ca403f29e88c664015443",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-18T19:46:50Z",
      "type": "commit"
    },
    {
      "oid": "0b59189eaf060cdfabe712cd76f85df431f6b30e",
      "url": "https://github.com/apache/ignite/commit/0b59189eaf060cdfabe712cd76f85df431f6b30e",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-19T10:32:24Z",
      "type": "commit"
    },
    {
      "oid": "ebd930a0614314ca5f7a924bd8f978e5904de6e8",
      "url": "https://github.com/apache/ignite/commit/ebd930a0614314ca5f7a924bd8f978e5904de6e8",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-19T10:36:20Z",
      "type": "commit"
    },
    {
      "oid": "435359ce3797aeaa6c2cca533ca44c74db3172e2",
      "url": "https://github.com/apache/ignite/commit/435359ce3797aeaa6c2cca533ca44c74db3172e2",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-19T10:41:13Z",
      "type": "commit"
    },
    {
      "oid": "401d1eab1c4e5db9c2d04d86f47e9cf9d1f07c86",
      "url": "https://github.com/apache/ignite/commit/401d1eab1c4e5db9c2d04d86f47e9cf9d1f07c86",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-19T12:15:31Z",
      "type": "commit"
    },
    {
      "oid": "fe567c97087c18ea6b664999583a296fb1f4cd47",
      "url": "https://github.com/apache/ignite/commit/fe567c97087c18ea6b664999583a296fb1f4cd47",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-19T12:51:18Z",
      "type": "commit"
    },
    {
      "oid": "4fddb28d0fdcb4163ca9cdc04766a4781520bd7f",
      "url": "https://github.com/apache/ignite/commit/4fddb28d0fdcb4163ca9cdc04766a4781520bd7f",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-19T12:51:52Z",
      "type": "commit"
    },
    {
      "oid": "21b45a86e82c33933d6c39608ee19ac4ce381307",
      "url": "https://github.com/apache/ignite/commit/21b45a86e82c33933d6c39608ee19ac4ce381307",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-19T13:26:19Z",
      "type": "commit"
    },
    {
      "oid": "bd2b120f7e4f2a0151e4e77aa2b31aecf7c4679b",
      "url": "https://github.com/apache/ignite/commit/bd2b120f7e4f2a0151e4e77aa2b31aecf7c4679b",
      "message": "wip NIO abstraction - refactoring TcpClientChannel",
      "committedDate": "2020-11-19T13:39:12Z",
      "type": "commit"
    },
    {
      "oid": "548ce1b0d4606959c2b1155a03d548871ba8da21",
      "url": "https://github.com/apache/ignite/commit/548ce1b0d4606959c2b1155a03d548871ba8da21",
      "message": "wip NIO abstraction - refactoring TcpClientChannel - switch everything to ByteBuffer",
      "committedDate": "2020-11-19T13:53:01Z",
      "type": "commit"
    },
    {
      "oid": "4b1910cfc51ec30607a4aaecf26c6d9ff46bdf55",
      "url": "https://github.com/apache/ignite/commit/4b1910cfc51ec30607a4aaecf26c6d9ff46bdf55",
      "message": "wip NIO abstraction - refactoring TcpClientChannel - switch everything to ByteBuffer",
      "committedDate": "2020-11-19T13:54:21Z",
      "type": "commit"
    },
    {
      "oid": "00be6c6b734b1d83515f2938d99bbfb149ca706f",
      "url": "https://github.com/apache/ignite/commit/00be6c6b734b1d83515f2938d99bbfb149ca706f",
      "message": "TcpClientChannel refactoring: it compiles",
      "committedDate": "2020-11-19T14:00:00Z",
      "type": "commit"
    },
    {
      "oid": "03095eef83cbb0f8e701a50273c0ce300ece4b6d",
      "url": "https://github.com/apache/ignite/commit/03095eef83cbb0f8e701a50273c0ce300ece4b6d",
      "message": "TcpClientChannel refactoring: fix tests compilation",
      "committedDate": "2020-11-19T14:03:58Z",
      "type": "commit"
    },
    {
      "oid": "7e2b3119063c3c971da9c13cadcb975c85d97e8d",
      "url": "https://github.com/apache/ignite/commit/7e2b3119063c3c971da9c13cadcb975c85d97e8d",
      "message": "TcpClientChannel refactoring: fixing simple connection use case",
      "committedDate": "2020-11-19T14:10:14Z",
      "type": "commit"
    },
    {
      "oid": "f2e9f3ee4701b8226398984dbc99d9ca64719f4e",
      "url": "https://github.com/apache/ignite/commit/f2e9f3ee4701b8226398984dbc99d9ca64719f4e",
      "message": "TcpClientChannel refactoring: fixing simple connection use case - fix BinaryByteBufferInputStream",
      "committedDate": "2020-11-19T14:15:55Z",
      "type": "commit"
    },
    {
      "oid": "46f878d1f40bc7497e02c9aa9e3db2c2b6cf1869",
      "url": "https://github.com/apache/ignite/commit/46f878d1f40bc7497e02c9aa9e3db2c2b6cf1869",
      "message": "TcpClientChannel refactoring: fixing simple connection use case - replace BinaryByteBufferInputStream with BinaryHeapInputStream - handshake works!",
      "committedDate": "2020-11-19T14:24:20Z",
      "type": "commit"
    },
    {
      "oid": "4ada2943eeece9b06a79f0b53d3d22c2fee45c48",
      "url": "https://github.com/apache/ignite/commit/4ada2943eeece9b06a79f0b53d3d22c2fee45c48",
      "message": "TcpClientChannel refactoring: handshake works with ByteBuffer - ByteOrder fixed",
      "committedDate": "2020-11-19T16:52:35Z",
      "type": "commit"
    },
    {
      "oid": "d45c409a630d1de336e94416dd6a804055e80043",
      "url": "https://github.com/apache/ignite/commit/d45c409a630d1de336e94416dd6a804055e80043",
      "message": "cleanup",
      "committedDate": "2020-11-19T16:54:09Z",
      "type": "commit"
    },
    {
      "oid": "03588760621c3d83f5ecae83f19a6bc11fd2c06c",
      "url": "https://github.com/apache/ignite/commit/03588760621c3d83f5ecae83f19a6bc11fd2c06c",
      "message": "Fix BinaryByteBufferInputStream.readIntPositioned",
      "committedDate": "2020-11-19T19:55:33Z",
      "type": "commit"
    },
    {
      "oid": "af131903cd6de93a8dd0fff7e7645563834fdd2b",
      "url": "https://github.com/apache/ignite/commit/af131903cd6de93a8dd0fff7e7645563834fdd2b",
      "message": "Fix addr passing - fixes testComputeDisabled",
      "committedDate": "2020-11-20T07:25:17Z",
      "type": "commit"
    },
    {
      "oid": "1fbdbde1f9bfd57e669359ba74b1c8ed0187757e",
      "url": "https://github.com/apache/ignite/commit/1fbdbde1f9bfd57e669359ba74b1c8ed0187757e",
      "message": "cleanup",
      "committedDate": "2020-11-20T07:38:40Z",
      "type": "commit"
    },
    {
      "oid": "3058159c9c7b439cb646bf6b343f7b55b511a2a4",
      "url": "https://github.com/apache/ignite/commit/3058159c9c7b439cb646bf6b343f7b55b511a2a4",
      "message": "cleanup",
      "committedDate": "2020-11-20T07:38:44Z",
      "type": "commit"
    },
    {
      "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDYxNQ==",
      "url": "https://github.com/apache/ignite/pull/8483#discussion_r527494615",
      "bodyText": "To be honest, there is no need to create more than one selector. One thread for processing IO event\nis more than enough",
      "author": "ivandasch",
      "createdAt": "2020-11-20T07:43:38Z",
      "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/io/gridnioserver/GridNioServerClientConnectionMultiplexer.java",
      "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.client.thin.io.gridnioserver;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.failure.FailureType;\n+import org.apache.ignite.internal.client.thin.io.ClientConnection;\n+import org.apache.ignite.internal.client.thin.io.ClientConnectionMultiplexer;\n+import org.apache.ignite.internal.client.thin.io.ClientMessageDecoder;\n+import org.apache.ignite.internal.util.nio.GridNioCodecFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFilter;\n+import org.apache.ignite.internal.util.nio.GridNioFuture;\n+import org.apache.ignite.internal.util.nio.GridNioParser;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioServerListener;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.logger.java.JavaLogger;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Client connection multiplexer based on {@link org.apache.ignite.internal.util.nio.GridNioServer}.\n+ */\n+public class GridNioServerClientConnectionMultiplexer implements ClientConnectionMultiplexer {\n+    /** */\n+    private static final int CLIENT_MODE_PORT = -1;\n+\n+    /** */\n+    private final GridNioServer<ByteBuffer> srv; // TODO: <ByteBuffer> possible?\n+\n+    public GridNioServerClientConnectionMultiplexer() {\n+        IgniteLogger gridLog = new JavaLogger(false);\n+\n+        ClientMessageDecoder decoder = new ClientMessageDecoder();\n+\n+        GridNioFilter[] filters;\n+\n+        GridNioFilter codecFilter = new GridNioCodecFilter(new GridNioParser() {\n+            @Override\n+            public @Nullable Object decode(GridNioSession ses, ByteBuffer buf) throws IOException, IgniteCheckedException {\n+                byte[] bytes = decoder.apply(buf);\n+\n+                return ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder());\n+            }\n+\n+            @Override\n+            public ByteBuffer encode(GridNioSession ses, Object msg) throws IOException, IgniteCheckedException {\n+                return (ByteBuffer)msg;\n+            }\n+        }, gridLog, false);\n+\n+//        if (sslCtx != null) {\n+//            GridNioSslFilter sslFilter = new GridNioSslFilter(sslCtx, true, ByteOrder.nativeOrder(), gridLog);\n+//\n+//            sslFilter.directMode(false);\n+//\n+//            filters = new GridNioFilter[]{codecFilter, sslFilter};\n+//        }\n+//        else\n+        filters = new GridNioFilter[]{codecFilter};\n+\n+        try {\n+            srv = GridNioServer.<ByteBuffer>builder()\n+                    .address(InetAddress.getLoopbackAddress()) // TODO: Remove?\n+                    .port(CLIENT_MODE_PORT)\n+                    .listener(new GridNioServerListener<ByteBuffer>() {\n+                        @Override\n+                        public void onConnected(GridNioSession ses) {\n+                            System.out.println(\"Connect\");\n+                        }\n+\n+                        @Override\n+                        public void onDisconnected(GridNioSession ses, @Nullable Exception e) {\n+                            System.out.println(\"Disconnect\");\n+                        }\n+\n+                        @Override\n+                        public void onMessageSent(GridNioSession ses, ByteBuffer msg) {\n+\n+                        }\n+\n+                        @Override\n+                        public void onMessage(GridNioSession ses, ByteBuffer msg) {\n+                            GridNioServerClientConnection conn = ses.meta(GridNioServerClientConnection.SES_META_CONN);\n+\n+                            conn.onMessage(msg);\n+                        }\n+\n+                        @Override\n+                        public void onSessionWriteTimeout(GridNioSession ses) {\n+\n+                        }\n+\n+                        @Override\n+                        public void onSessionIdleTimeout(GridNioSession ses) {\n+\n+                        }\n+\n+                        @Override\n+                        public void onFailure(FailureType failureType, Throwable failure) {\n+                            System.out.println(\"Fail\");\n+                        }\n+                    })\n+                    .filters(filters)\n+                    .logger(gridLog)\n+                    .selectorCount(1) // TODO: Get from settings",
      "originalCommit": "3058159c9c7b439cb646bf6b343f7b55b511a2a4",
      "replyToReviewId": null,
      "replies": [
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MjI1NQ==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r529552255",
          "bodyText": "@ivandasch I don't think so:\n\nWith Partition Awareness a single IgniteClient connects to all server nodes\nIgniteClient can be used from multiple threads\n\nSingle worker thread can easily become a bottleneck.",
          "author": "ptupitsyn",
          "createdAt": "2020-11-24T13:40:38Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDYxNQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NjY5NA==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r529556694",
          "bodyText": "This is not a bottleneck at all, it's common practice to create 1 thread per selector and for clients 1 selector is more than enough. Remember, tarantool or redis use 1 thread for all network activity and this is more than enough. This is not even a server (sometimes it's desirable to split acceptor task to another selector)",
          "author": "ivandasch",
          "createdAt": "2020-11-24T13:47:19Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDYxNQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1OTA1MQ==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r529559051",
          "bodyText": "With Partition Awareness a single IgniteClient connects to all server nodes\n\n1 thread easily can handle thousands connections. Look at nodejs for another example.",
          "author": "ivandasch",
          "createdAt": "2020-11-24T13:50:44Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDYxNQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU3NjE3MQ==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r529576171",
          "bodyText": "Ok, you may be right. I'll do some benchmarks and we'll see.\n\nnodejs for another example\n\nNot a good example because of single-threaded javascript nature; also, not anymore https://nodejs.org/api/worker_threads.html",
          "author": "ptupitsyn",
          "createdAt": "2020-11-24T14:14:47Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDYxNQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNDk1Mg==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r529624952",
          "bodyText": "Workers (threads) are useful for performing CPU-intensive JavaScript operations. They will not help much with I/O-intensive work. Node.js\u2019s built-in asynchronous I/O operations are more efficient than Workers can be.\n\nCitation above is from your link... And, AFAIU you use ForkJoinPool for user code...",
          "author": "ivandasch",
          "createdAt": "2020-11-24T15:17:58Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDYxNQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1MDk5NQ==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r529650995",
          "bodyText": "Yes, GridNioServer workers are used solely for encoding and decoding requests in form of byte buffers and arrays - essentially copying some bytes around, which is trivial, so maybe one thread is really enough. We'll see. I'm happy to use a single worker and avoid one more config parameter.",
          "author": "ptupitsyn",
          "createdAt": "2020-11-24T15:39:27Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDYxNQ=="
        },
        {
          "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2Mzk4Mw==",
          "url": "https://github.com/apache/ignite/pull/8483#discussion_r530963983",
          "bodyText": "@ivandasch I've done some basic benchmarks (see JmhThinClientCacheBenchmark) and could not come up with a config where multiple selectors work faster than one (various cluster sizes, thread counts, entry sizes). You are right, let's keep this hardcoded to 1 and not bother with making it configurable. Thank you for raising this point.",
          "author": "ptupitsyn",
          "createdAt": "2020-11-26T11:30:18Z",
          "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDYxNQ=="
        }
      ],
      "type": "inlineReview"
    },
    {
      "oid": "51edbb23146ac5e63d66ab20fcc82f766275eeeb",
      "url": "https://github.com/apache/ignite/commit/51edbb23146ac5e63d66ab20fcc82f766275eeeb",
      "message": "Fix InetSocketAddress handling",
      "committedDate": "2020-11-20T13:50:11Z",
      "type": "commit"
    },
    {
      "oid": "1a9193f48c92890bf1469a42947f1d511317644f",
      "url": "https://github.com/apache/ignite/commit/1a9193f48c92890bf1469a42947f1d511317644f",
      "message": "fix partial message handling",
      "committedDate": "2020-11-20T14:15:01Z",
      "type": "commit"
    },
    {
      "oid": "9abbd88394c1a33517e0148c0172108557aa6f73",
      "url": "https://github.com/apache/ignite/commit/9abbd88394c1a33517e0148c0172108557aa6f73",
      "message": "wip TODOs",
      "committedDate": "2020-11-20T14:20:55Z",
      "type": "commit"
    },
    {
      "oid": "d964e508225c84126d5bb67bb04b3d3bd7120cff",
      "url": "https://github.com/apache/ignite/commit/d964e508225c84126d5bb67bb04b3d3bd7120cff",
      "message": "wip",
      "committedDate": "2020-11-21T11:02:17Z",
      "type": "commit"
    },
    {
      "oid": "37c63d075885642c243ad501c2e43761b6f068bd",
      "url": "https://github.com/apache/ignite/commit/37c63d075885642c243ad501c2e43761b6f068bd",
      "message": "wip handle disconnect",
      "committedDate": "2020-11-21T11:15:55Z",
      "type": "commit"
    },
    {
      "oid": "feb9d91b85fdb22f9c31ac9cf583e7e63dfa5e34",
      "url": "https://github.com/apache/ignite/commit/feb9d91b85fdb22f9c31ac9cf583e7e63dfa5e34",
      "message": "wip handle disconnect",
      "committedDate": "2020-11-21T11:46:19Z",
      "type": "commit"
    },
    {
      "oid": "ecc51012dcb5ff54101c4aa9a26567425ab456dd",
      "url": "https://github.com/apache/ignite/commit/ecc51012dcb5ff54101c4aa9a26567425ab456dd",
      "message": "wip handle disconnect",
      "committedDate": "2020-11-21T11:47:01Z",
      "type": "commit"
    },
    {
      "oid": "f0817b2b68902d510c64e9851bc859dc48b68630",
      "url": "https://github.com/apache/ignite/commit/f0817b2b68902d510c64e9851bc859dc48b68630",
      "message": "disconnect handling works",
      "committedDate": "2020-11-21T11:48:05Z",
      "type": "commit"
    },
    {
      "oid": "e68f50609fea7c20e5db64d4703ab22d7d83cfd9",
      "url": "https://github.com/apache/ignite/commit/e68f50609fea7c20e5db64d4703ab22d7d83cfd9",
      "message": "wip fixing testResourcesReleasedAfterClientClosed",
      "committedDate": "2020-11-21T12:04:38Z",
      "type": "commit"
    },
    {
      "oid": "8a01ec698bc11eb6ba47baf89f09524f387e1377",
      "url": "https://github.com/apache/ignite/commit/8a01ec698bc11eb6ba47baf89f09524f387e1377",
      "message": "testResourcesReleasedAfterClientClosed fixed",
      "committedDate": "2020-11-21T12:08:37Z",
      "type": "commit"
    },
    {
      "oid": "56c6c21f81521c8b806bea5496347d847dace15c",
      "url": "https://github.com/apache/ignite/commit/56c6c21f81521c8b806bea5496347d847dace15c",
      "message": "Replace ReliableChannel#asyncRunner with ForkJoinPool.commonPool()",
      "committedDate": "2020-11-21T12:25:13Z",
      "type": "commit"
    },
    {
      "oid": "0435af0b60db215a713f9bc3e6ad9ac066413377",
      "url": "https://github.com/apache/ignite/commit/0435af0b60db215a713f9bc3e6ad9ac066413377",
      "message": "Replace ReliableChannel#asyncRunner with ForkJoinPool.commonPool() - cleanup",
      "committedDate": "2020-11-21T14:08:42Z",
      "type": "commit"
    },
    {
      "oid": "3b6fe96304d0aef80d596f9d43a1da5535ed2053",
      "url": "https://github.com/apache/ignite/commit/3b6fe96304d0aef80d596f9d43a1da5535ed2053",
      "message": "Replace ReliableChannel#asyncRunner with ForkJoinPool.commonPool() - cleanup",
      "committedDate": "2020-11-21T14:10:10Z",
      "type": "commit"
    },
    {
      "oid": "45b6b7db6b651eb1fae43381e6692bf81e011dd3",
      "url": "https://github.com/apache/ignite/commit/45b6b7db6b651eb1fae43381e6692bf81e011dd3",
      "message": "wip SSL",
      "committedDate": "2020-11-22T15:43:42Z",
      "type": "commit"
    },
    {
      "oid": "9d0665115d0301cc9991e640028aabb3edee7eeb",
      "url": "https://github.com/apache/ignite/commit/9d0665115d0301cc9991e640028aabb3edee7eeb",
      "message": "wip SSL",
      "committedDate": "2020-11-22T15:56:52Z",
      "type": "commit"
    },
    {
      "oid": "fc0dbfea2f56131dff6a4e2b693a5d59b363dd21",
      "url": "https://github.com/apache/ignite/commit/fc0dbfea2f56131dff6a4e2b693a5d59b363dd21",
      "message": "wip SSL",
      "committedDate": "2020-11-22T16:16:51Z",
      "type": "commit"
    },
    {
      "oid": "14d4381e6e4d2c5547e53d5722d1bf0f76cbc7e3",
      "url": "https://github.com/apache/ignite/commit/14d4381e6e4d2c5547e53d5722d1bf0f76cbc7e3",
      "message": "wip SSL",
      "committedDate": "2020-11-22T16:28:16Z",
      "type": "commit"
    },
    {
      "oid": "0beb60fdd1e836d4714b202d5b7cdcd46a0431ae",
      "url": "https://github.com/apache/ignite/commit/0beb60fdd1e836d4714b202d5b7cdcd46a0431ae",
      "message": "wip SSL - compilation fixed",
      "committedDate": "2020-11-22T16:37:26Z",
      "type": "commit"
    },
    {
      "oid": "31c488e1a88b74144ed442d5073008b6812e99b1",
      "url": "https://github.com/apache/ignite/commit/31c488e1a88b74144ed442d5073008b6812e99b1",
      "message": "wip SSL - compilation fixed",
      "committedDate": "2020-11-22T16:49:22Z",
      "type": "commit"
    },
    {
      "oid": "8519a86f91077a8b01d8fd9e84f2161a299025a7",
      "url": "https://github.com/apache/ignite/commit/8519a86f91077a8b01d8fd9e84f2161a299025a7",
      "message": "SSL works - basic test passes",
      "committedDate": "2020-11-22T16:57:44Z",
      "type": "commit"
    },
    {
      "oid": "77917e56a7cc6c84d6cb8b222426691ee57e9ac0",
      "url": "https://github.com/apache/ignite/commit/77917e56a7cc6c84d6cb8b222426691ee57e9ac0",
      "message": "wip cleanup",
      "committedDate": "2020-11-23T09:42:30Z",
      "type": "commit"
    },
    {
      "oid": "016356b35dc460edfd018873119bb1c09c92400f",
      "url": "https://github.com/apache/ignite/commit/016356b35dc460edfd018873119bb1c09c92400f",
      "message": "Merge remote-tracking branch 'origin/master' into ignite-13496\n\n# Conflicts:\n#\tmodules/core/src/main/java/org/apache/ignite/internal/client/thin/TcpClientChannel.java",
      "committedDate": "2020-11-23T09:45:56Z",
      "type": "commit"
    },
    {
      "oid": "81c346a0df15dee49f6a450b9db51c338845644a",
      "url": "https://github.com/apache/ignite/commit/81c346a0df15dee49f6a450b9db51c338845644a",
      "message": "wip cleanup",
      "committedDate": "2020-11-23T10:01:23Z",
      "type": "commit"
    },
    {
      "oid": "7429ce0259e60ce9f3180eb2919c98357b838f25",
      "url": "https://github.com/apache/ignite/commit/7429ce0259e60ce9f3180eb2919c98357b838f25",
      "message": "fixing tests",
      "committedDate": "2020-11-23T10:11:39Z",
      "type": "commit"
    }
  ]
}