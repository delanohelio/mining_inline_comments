{"pr_number": 8109, "pr_title": "Json params support", "pr_createdAt": "2020-07-31T14:59:07Z", "pr_url": "https://github.com/apache/ignite/pull/8109", "timeline": [{"oid": "d9f847b3655136c507226acf3a0e03fd8ed3f17d", "url": "https://github.com/apache/ignite/commit/d9f847b3655136c507226acf3a0e03fd8ed3f17d", "message": "Json params support", "committedDate": "2020-07-31T14:57:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NDk3NA==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463674974", "bodyText": "Why do you use Map instead of fair JsonNode object? Now you're limited with flat structure, also user is responsible for casting value types.", "author": "timoninmaxim", "createdAt": "2020-07-31T15:22:01Z", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(Map<String, String> args) {", "originalCommit": "d9f847b3655136c507226acf3a0e03fd8ed3f17d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzOTEwMQ==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r463939101", "bodyText": "+1 JsonObject seems to be more universal solution and has a potential to extend", "author": "ivandasch", "createdAt": "2020-08-01T08:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NDk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5MjkyOA==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464892928", "bodyText": "Done", "author": "anton-vinogradov", "createdAt": "2020-08-04T08:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NDk3NA=="}], "type": "inlineReview"}, {"oid": "903dfb88c5dda6f636fc13f8a33e50a504abc09f", "url": "https://github.com/apache/ignite/commit/903dfb88c5dda6f636fc13f8a33e50a504abc09f", "message": "Json params support", "committedDate": "2020-08-04T08:38:22Z", "type": "commit"}, {"oid": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0", "url": "https://github.com/apache/ignite/commit/05ba11c69ac4ce6503a466d3f883c7f741b2a4c0", "message": "Json params support", "committedDate": "2020-08-04T10:22:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r464987922", "bodyText": "Is it possible to use a DTO object instead? Generics is more clear solution", "author": "timoninmaxim", "createdAt": "2020-08-04T11:39:39Z", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/DataGenerationApplication.java", "diffHunk": "@@ -34,13 +35,13 @@ public DataGenerationApplication(Ignite ignite) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override protected void run(String[] args) {\n+    @Override protected void run(JsonNode jsonNode) {\n         log.info(\"Creating cache...\");\n \n-        IgniteCache<Integer, Integer> cache = ignite.createCache(args[0]);\n+        IgniteCache<Integer, Integer> cache = ignite.createCache(jsonNode.get(\"cacheName\").asText());\n \n         try (IgniteDataStreamer<Integer, Integer> stmr = ignite.dataStreamer(cache.getName())) {\n-            for (int i = 0; i < Integer.parseInt(args[1]); i++) {\n+            for (int i = 0; i < jsonNode.get(\"range\").asInt(); i++) {", "originalCommit": "05ba11c69ac4ce6503a466d3f883c7f741b2a4c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwMzA4NA==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465003084", "bodyText": "It will be unique for every app, will this lead to useless classes?", "author": "anton-vinogradov", "createdAt": "2020-08-04T12:09:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMTE5Mw==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465011193", "bodyText": "Additional classes are ok. In case of complex hierarchy I'd prefer use generics (for example smth like obj.getList().get(0).getRange()) instead of ugly constructions (smth like node.get(\"list\").asArray()[0].get(\"range\").asInt()).\nDTOs make code much much clearer, also it provides sanity checks out of the box.", "author": "timoninmaxim", "createdAt": "2020-08-04T12:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2NjExOA==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465066118", "bodyText": "Not sure I've got an idea.\nCould you provide an example related to the current tests?", "author": "anton-vinogradov", "createdAt": "2020-08-04T13:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5MzA2OQ==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465093069", "bodyText": "Oh, I see. I thought that JsonNode is a generic, but it's not. So, there is a choice between plain JsonNode and DTO. In favor of latter:\n\nCurrently there are not, but in one day could be complex json with nested objects and arrays. User will have to use mapper.readValue(jsonNode, DTO.class) if need it.\nIf you want change code of your app in one day and change params, there won't help from IDE for you. There is a possibility of NPE in jsonNode.get(). DTO provides checks for such situations (code fails in compile time).\nAll tests have own package, so I don't see problems with additional classes that are isolated within a package.", "author": "timoninmaxim", "createdAt": "2020-08-04T14:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5OTQ2NQ==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465099465", "bodyText": "How to share java DTO to python? Seems we should add and sync DTO couple for each application.\nHow to sync this automatically?\nSeem overcomplicated...?", "author": "anton-vinogradov", "createdAt": "2020-08-04T14:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMjcyOA==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465112728", "bodyText": "I think, that we should make in the bright future a generic application, that accepts broad range of generic options to load data to cache. For example, cache name, key-value schema (binary object), range for keys, number of keys, etc.\nFor this argument DTO is a preferrable solution, I suppose. But we can implement this a little bit later as a separate task.", "author": "ivandasch", "createdAt": "2020-08-04T14:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExNjg4Mg==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465116882", "bodyText": "There still python, shame :( There are different approaches. Python just use dict and user is responsible for everything that is running in python code. Java could provide more strict checks.\nOk, agree, not an issue, as python won't directly use DTO object.", "author": "timoninmaxim", "createdAt": "2020-08-04T15:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNzI5OQ==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465537299", "bodyText": "Great, let's re-discuss this later", "author": "anton-vinogradov", "createdAt": "2020-08-05T07:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4NzkyMg=="}], "type": "inlineReview"}, {"oid": "08ebdc0412e92817027cdd6d45a58f200d0d1cc9", "url": "https://github.com/apache/ignite/commit/08ebdc0412e92817027cdd6d45a58f200d0d1cc9", "message": "Json params support", "committedDate": "2020-08-04T11:51:02Z", "type": "commit"}, {"oid": "ee5057140f12c9d14ef1de9f779a139fd0634ef8", "url": "https://github.com/apache/ignite/commit/ee5057140f12c9d14ef1de9f779a139fd0634ef8", "message": "Json params support", "committedDate": "2020-08-04T12:26:38Z", "type": "commit"}, {"oid": "e934bb2978b19af4b2ab3dfc4a0f98b0ec272835", "url": "https://github.com/apache/ignite/commit/e934bb2978b19af4b2ab3dfc4a0f98b0ec272835", "message": "Merge branch 'ignite-ducktape' into ignite-ducktape-json-params", "committedDate": "2020-08-04T13:53:33Z", "type": "commit"}, {"oid": "d6d53817fa12ac9f6fbb999207d09cae7d599c17", "url": "https://github.com/apache/ignite/commit/d6d53817fa12ac9f6fbb999207d09cae7d599c17", "message": "Json params support", "committedDate": "2020-08-04T14:27:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465545139", "bodyText": "Unused variable, I presume", "author": "ivandasch", "createdAt": "2020-08-05T08:00:19Z", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplicationService.java", "diffHunk": "@@ -40,8 +47,15 @@ public static void main(String[] args) throws Exception {\n \n         IgniteAwareApplication app = (IgniteAwareApplication)clazz.getConstructor().newInstance();\n \n-        String[] appParams = Arrays.copyOfRange(params, 1, params.length);\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        ObjectReader reader = mapper.readerFor(Map.class);", "originalCommit": "d6d53817fa12ac9f6fbb999207d09cae7d599c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NjE4NQ==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465546185", "bodyText": "Which one?", "author": "anton-vinogradov", "createdAt": "2020-08-05T08:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NjU1Mw==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465546553", "bodyText": "\"reader\" makes next line more readable ))))", "author": "anton-vinogradov", "createdAt": "2020-08-05T08:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1MDIwMg==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465550202", "bodyText": "mapper.readTree(new String(Base64.getDecoder().decode(params[2]), UTF_8))", "author": "ivandasch", "createdAt": "2020-08-05T08:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1NTMwMQ==", "url": "https://github.com/apache/ignite/pull/8109#discussion_r465555301", "bodyText": "Fixed", "author": "anton-vinogradov", "createdAt": "2020-08-05T08:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NTEzOQ=="}], "type": "inlineReview"}, {"oid": "2e406774bd57213ecb143a1c8c43bd9df4c27280", "url": "https://github.com/apache/ignite/commit/2e406774bd57213ecb143a1c8c43bd9df4c27280", "message": "Json params support", "committedDate": "2020-08-05T08:18:17Z", "type": "commit"}]}