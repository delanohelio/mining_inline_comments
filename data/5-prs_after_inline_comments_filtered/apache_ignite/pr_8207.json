{"pr_number": 8207, "pr_title": "IGNITE-13380 Output IgniteSystemProperties via ignite.sh", "pr_createdAt": "2020-09-02T09:00:53Z", "pr_url": "https://github.com/apache/ignite/pull/8207", "timeline": [{"oid": "41948bdd197fa13a60cb7bb1b8830c636d459858", "url": "https://github.com/apache/ignite/commit/41948bdd197fa13a60cb7bb1b8830c636d459858", "message": "IGNITE-13380", "committedDate": "2020-09-01T11:05:08Z", "type": "commit"}, {"oid": "e747108f6fc227f5f9764151829bbfaf687de9ac", "url": "https://github.com/apache/ignite/commit/e747108f6fc227f5f9764151829bbfaf687de9ac", "message": "Merge branch 'master' into IGNITE-13380", "committedDate": "2020-09-02T05:51:35Z", "type": "commit"}, {"oid": "5968f45f2cd5d76a1e399a3de0317d3cd16e0258", "url": "https://github.com/apache/ignite/commit/5968f45f2cd5d76a1e399a3de0317d3cd16e0258", "message": "IGNITE-13380: wording.", "committedDate": "2020-09-02T09:00:09Z", "type": "commit"}, {"oid": "a3b2896ec7cde3c086a3f21c394fd6a2974c076e", "url": "https://github.com/apache/ignite/commit/a3b2896ec7cde3c086a3f21c394fd6a2974c076e", "message": "IGNITE-13380: wording.", "committedDate": "2020-09-02T09:28:16Z", "type": "commit"}, {"oid": "4a50417145dc4216d0a20f935259f43a0b490395", "url": "https://github.com/apache/ignite/commit/4a50417145dc4216d0a20f935259f43a0b490395", "message": "IGNITE-13380: tests fix.", "committedDate": "2020-09-02T10:12:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwMTA4OA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r483201088", "bodyText": "I would say \"Enables the compatibility mode for the exchange protocol of version 1.\"", "author": "dmagda", "createdAt": "2020-09-03T19:17:15Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/ExchangeContext.java", "diffHunk": "@@ -37,7 +38,8 @@\n  *\n  */\n public class ExchangeContext {\n-    /** */\n+    /** Enables exchange compatibility with protocol version 1. */\n+    @SystemProperty(value = \"Enables exchange compatibility with protocol version 1.\")", "originalCommit": "4a50417145dc4216d0a20f935259f43a0b490395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwMTk2NQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484201965", "bodyText": "Fixed.", "author": "nizhikov", "createdAt": "2020-09-07T06:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwMTA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwMzEzMg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r483203132", "bodyText": "How about renaming value to descr (stands for description) and adding the default property? Then the property will be used this way in the code\n@SystemProperty(descr = \"Sets the entry's lock timeout in milliseconds\", default = \"1000 millis\", type = Long.class)", "author": "dmagda", "createdAt": "2020-09-03T19:21:40Z", "path": "modules/core/src/main/java/org/apache/ignite/SystemProperty.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/** Ignite system property info. */\n+@Documented\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.FIELD})\n+public @interface SystemProperty {\n+    /** Description. */\n+    String value();", "originalCommit": "4a50417145dc4216d0a20f935259f43a0b490395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyMTE4NQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484521185", "bodyText": "value have a special meaning in annotations and can be default property to specify like @SystemProperty(\"Just description\").\ndefaults attribute introduced.", "author": "nizhikov", "createdAt": "2020-09-07T16:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwMzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwMzM1OA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r483203358", "bodyText": "I would say \"Sets the entry's lock timeout in milliseconds. Defaults to 1000 milliseconds\"", "author": "dmagda", "createdAt": "2020-09-03T19:22:05Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java", "diffHunk": "@@ -138,7 +139,9 @@\n     /** */\n     public static final GridCacheAtomicVersionComparator ATOMIC_VER_COMPARATOR = new GridCacheAtomicVersionComparator();\n \n-    /** Property name for entry lock timeout. */\n+    /** Property name for entry lock timeout in milliseconds. Default is 1000. */", "originalCommit": "4a50417145dc4216d0a20f935259f43a0b490395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwMjIzMg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484202232", "bodyText": "Fixed.", "author": "nizhikov", "createdAt": "2020-09-07T06:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwMzM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNDg1Mg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r483204852", "bodyText": "\"Sets the flag controlling if the I/O sync needs to be skipped on a checkpoint. Defaults tofalse\"", "author": "dmagda", "createdAt": "2020-09-03T19:25:10Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java", "diffHunk": "@@ -190,12 +191,15 @@\n @SuppressWarnings({\"unchecked\", \"NonPrivateFieldAccessedInSynchronizedContext\"})\n public class GridCacheDatabaseSharedManager extends IgniteCacheDatabaseSharedManager {\n     /** */\n+    @SystemProperty(value = \"Skip IO sync on checkpoint.\")", "originalCommit": "4a50417145dc4216d0a20f935259f43a0b490395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwMjM5OQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484202399", "bodyText": "Fixed.", "author": "nizhikov", "createdAt": "2020-09-07T06:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNDg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTMyNA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r483205324", "bodyText": "\"Sets the flag controlling of a checkpoint needs to be skipped during a node termination. Defaults to false.\"", "author": "dmagda", "createdAt": "2020-09-03T19:26:10Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java", "diffHunk": "@@ -190,12 +191,15 @@\n @SuppressWarnings({\"unchecked\", \"NonPrivateFieldAccessedInSynchronizedContext\"})\n public class GridCacheDatabaseSharedManager extends IgniteCacheDatabaseSharedManager {\n     /** */\n+    @SystemProperty(value = \"Skip IO sync on checkpoint.\")\n     public static final String IGNITE_PDS_CHECKPOINT_TEST_SKIP_SYNC = \"IGNITE_PDS_CHECKPOINT_TEST_SKIP_SYNC\";\n \n-    /** */\n+    /** Skip checkpoint on node stop flag. */\n+    @SystemProperty(value = \"Skip checkpoint on node stop flag.\")", "originalCommit": "4a50417145dc4216d0a20f935259f43a0b490395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwMjYyNw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484202627", "bodyText": "Fixed.", "author": "nizhikov", "createdAt": "2020-09-07T06:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTkzMw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r483205933", "bodyText": "\"Sets a JMX port for the Ignite instance. Defaults to X.\"", "author": "dmagda", "createdAt": "2020-09-03T19:27:25Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java", "diffHunk": "@@ -25,12 +25,14 @@\n import java.net.UnknownHostException;\n import java.nio.channels.FileLock;\n import org.apache.ignite.IgniteSystemProperties;\n+import org.apache.ignite.SystemProperty;\n \n /**\n  * Ignite port scanner.\n  */\n public class GridJmxPortFinder {\n     /** Environment variable for overriding JMX port. */\n+    @SystemProperty(value = \"JMX port.\", type = Integer.class)", "originalCommit": "4a50417145dc4216d0a20f935259f43a0b490395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyMTU3MQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484521571", "bodyText": "I think we describe the value and not action. So \"sets\" is wrong word - this property is just a jmx port value.\nMakes sense?", "author": "nizhikov", "createdAt": "2020-09-07T16:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNTkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjIwNw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r483206207", "bodyText": "Enables an additional check of a resource name on resources removal", "author": "dmagda", "createdAt": "2020-09-03T19:28:01Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/deployment/local/LocalDeploymentSpi.java", "diffHunk": "@@ -69,6 +70,7 @@\n @IgnoreIfPeerClassLoadingDisabled\n public class LocalDeploymentSpi extends IgniteSpiAdapter implements DeploymentSpi {\n     /** Enables additional check for resource name on resources removal. */\n+    @SystemProperty(value = \"Enables additional check for resource name on resources removal.\")", "originalCommit": "4a50417145dc4216d0a20f935259f43a0b490395", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIwMjk4OQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484202989", "bodyText": "Fixed.", "author": "nizhikov", "createdAt": "2020-09-07T06:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjIwNw=="}], "type": "inlineReview"}, {"oid": "d774f5ae810c8f7ea4f52d699da2ba39104e0f5f", "url": "https://github.com/apache/ignite/commit/d774f5ae810c8f7ea4f52d699da2ba39104e0f5f", "message": "Merge branch 'master' into IGNITE-13380", "committedDate": "2020-09-07T06:11:16Z", "type": "commit"}, {"oid": "cc6dd5c2c113f29e39d5344680a7668629b439c1", "url": "https://github.com/apache/ignite/commit/cc6dd5c2c113f29e39d5344680a7668629b439c1", "message": "IGNITE-13380: code review fixes.", "committedDate": "2020-09-07T06:31:26Z", "type": "commit"}, {"oid": "7266a4d8f435373a497059905ba867d38b0e583a", "url": "https://github.com/apache/ignite/commit/7266a4d8f435373a497059905ba867d38b0e583a", "message": "IGNITE-13380: Default value parameter introduced.", "committedDate": "2020-09-07T14:29:46Z", "type": "commit"}, {"oid": "f87c2b15b68c7dd1c6c61b967ff7d03d41b8802b", "url": "https://github.com/apache/ignite/commit/f87c2b15b68c7dd1c6c61b967ff7d03d41b8802b", "message": "IGNITE-13380: Default value parameter introduced.", "committedDate": "2020-09-07T14:37:52Z", "type": "commit"}, {"oid": "2f3ad1c8d22f4b3f7ca9a7d1c2095623edd2f25b", "url": "https://github.com/apache/ignite/commit/2f3ad1c8d22f4b3f7ca9a7d1c2095623edd2f25b", "message": "Revert \"IGNITE-13380: Default value parameter introduced.\"\n\nThis reverts commit f87c2b15", "committedDate": "2020-09-07T16:02:39Z", "type": "commit"}, {"oid": "c2c735dad5bbc7f6f890ab70572d3cf3f4442e4e", "url": "https://github.com/apache/ignite/commit/c2c735dad5bbc7f6f890ab70572d3cf3f4442e4e", "message": "IGNITE-13380: Reverting unnecessary changes.", "committedDate": "2020-09-07T16:26:21Z", "type": "commit"}, {"oid": "06fe706257becad6dfe8407af88bc2957dd547d1", "url": "https://github.com/apache/ignite/commit/06fe706257becad6dfe8407af88bc2957dd547d1", "message": "IGNITE-13380: Reverting unnecessary changes.", "committedDate": "2020-09-07T16:28:29Z", "type": "commit"}, {"oid": "736ffbcca30ab37bc20bcac569c37556f732ba3f", "url": "https://github.com/apache/ignite/commit/736ffbcca30ab37bc20bcac569c37556f732ba3f", "message": "IGNITE-13380: Minor fixes.", "committedDate": "2020-09-07T16:49:25Z", "type": "commit"}, {"oid": "81769a18d045ae097cf2d64816210a1dbaed3b91", "url": "https://github.com/apache/ignite/commit/81769a18d045ae097cf2d64816210a1dbaed3b91", "message": "IGNITE-13380: Minor fixes.", "committedDate": "2020-09-07T18:00:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzOTg0Mw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484539843", "bodyText": "I think it is better to use the same name as the prop's name: DFLT_DISCO_FAILED_CLIENT_RECONNECT_DELAY", "author": "NSAmelchev", "createdAt": "2020-09-07T18:20:57Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "diffHunk": "@@ -291,6 +292,21 @@\n     /** Default connection recovery timeout in ms. */\n     public static final long DFLT_CONNECTION_RECOVERY_TIMEOUT = IgniteConfiguration.DFLT_FAILURE_DETECTION_TIMEOUT;\n \n+    /** @see IgniteSystemProperties#IGNITE_DISCOVERY_CLIENT_RECONNECT_HISTORY_SIZE */\n+    public static final int DFLT_DISCOVERY_CLIENT_RECONNECT_HISTORY_SIZE = 512;\n+\n+    /** @see IgniteSystemProperties#IGNITE_NODE_IDS_HISTORY_SIZE */\n+    public static final int DFLT_NODE_IDS_HISTORY_SIZE = 50;\n+\n+    /** @see IgniteSystemProperties#IGNITE_DISCO_FAILED_CLIENT_RECONNECT_DELAY */\n+    public static final int DFLT_DISCO_CLIENT_RECONNECT_DELAY = 10_000;", "originalCommit": "81769a18d045ae097cf2d64816210a1dbaed3b91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0NjE1NQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485146155", "bodyText": "Fixed.", "author": "nizhikov", "createdAt": "2020-09-08T19:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzOTg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MDc0MQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r484540741", "bodyText": "typo: DFLT_UPDATE_NOTIFIER", "author": "NSAmelchev", "createdAt": "2020-09-07T18:26:19Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/ClusterProcessor.java", "diffHunk": "@@ -125,6 +125,12 @@\n     /** Active baseline nodes count metric name. */\n     public static final String ACTIVE_BASELINE_NODES = \"ActiveBaselineNodes\";\n \n+    /** @see IgniteSystemProperties#IGNITE_UPDATE_NOTIFIER */\n+    public static final boolean DFLT_IGNITE_UPDATE_NOTIFIER = true;", "originalCommit": "81769a18d045ae097cf2d64816210a1dbaed3b91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0NjQ1Nw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485146457", "bodyText": "Fixed.", "author": "nizhikov", "createdAt": "2020-09-08T19:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MDc0MQ=="}], "type": "inlineReview"}, {"oid": "6392f405d3d05100ad9fb7ba28aee1a82a9e08c4", "url": "https://github.com/apache/ignite/commit/6392f405d3d05100ad9fb7ba28aee1a82a9e08c4", "message": "IGNITE-13380: Minor fixes.", "committedDate": "2020-09-08T19:26:55Z", "type": "commit"}, {"oid": "ae75ae1ec2df4fa62bb6fa3b40296cd4392d62ae", "url": "https://github.com/apache/ignite/commit/ae75ae1ec2df4fa62bb6fa3b40296cd4392d62ae", "message": "Merge branch 'master' into IGNITE-13380", "committedDate": "2020-09-08T19:32:26Z", "type": "commit"}, {"oid": "12ff7fb4aedf442844c0bfc98183064675430924", "url": "https://github.com/apache/ignite/commit/12ff7fb4aedf442844c0bfc98183064675430924", "message": "IGNITE-13380: Revert unnecessary changes.", "committedDate": "2020-09-08T20:00:21Z", "type": "commit"}, {"oid": "289f70cef9a4851ec6cf119fb48832f7af661f5f", "url": "https://github.com/apache/ignite/commit/289f70cef9a4851ec6cf119fb48832f7af661f5f", "message": "IGNITE-13380: Revert unnecessary changes.", "committedDate": "2020-09-08T20:06:01Z", "type": "commit"}, {"oid": "e10e36b3a81a4c28889afcb1816e528e6d4af13d", "url": "https://github.com/apache/ignite/commit/e10e36b3a81a4c28889afcb1816e528e6d4af13d", "message": "IGNITE-13380: Undocumented properties added.", "committedDate": "2020-09-09T09:54:23Z", "type": "commit"}, {"oid": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "url": "https://github.com/apache/ignite/commit/03b43fbbba5ff659eb168be85fd57bad3f61ecec", "message": "IGNITE-13380: Code style fixes.", "committedDate": "2020-09-09T10:30:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMDc5Mg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485510792", "bodyText": "Dot is unnecessary.", "author": "NSAmelchev", "createdAt": "2020-09-09T10:35:38Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/OffheapReadWriteLock.java", "diffHunk": "@@ -34,13 +35,27 @@\n  * </pre>\n  */\n public class OffheapReadWriteLock {\n+    /** @see #IGNITE_OFFHEAP_RWLOCK_SPIN_COUNT */\n+    public static final int DFLT_OFFHEAP_RWLOCK_SPIN_COUNT = 32;\n+\n+    /** */\n+    @SystemProperty(value = \"Count spin lock iterations before fallback to block\", type = Long.class,\n+        defaults = \"\" + DFLT_OFFHEAP_RWLOCK_SPIN_COUNT)\n+    public static final String IGNITE_OFFHEAP_RWLOCK_SPIN_COUNT = \"IGNITE_OFFHEAP_RWLOCK_SPIN_COUNT\";\n+\n+    /** */\n+    @SystemProperty(value = \"OffheapReadWriteLock flag to switch between signal to writers or signal to writers or \" +\n+        \"reades policy.\", defaults = \"Default is false that means always signal to writers\")", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMTExNQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485511115", "bodyText": "Dot is unnecessary.", "author": "NSAmelchev", "createdAt": "2020-09-09T10:36:13Z", "path": "modules/core/src/main/java/org/apache/ignite/spi/deployment/local/LocalDeploymentSpi.java", "diffHunk": "@@ -69,6 +70,7 @@\n @IgnoreIfPeerClassLoadingDisabled\n public class LocalDeploymentSpi extends IgniteSpiAdapter implements DeploymentSpi {\n     /** Enables additional check for resource name on resources removal. */\n+    @SystemProperty(value = \"Enables an additional check of a resource name on resources removal.\")", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzOTc4OA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485539788", "bodyText": "Fixed", "author": "nizhikov", "createdAt": "2020-09-09T11:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMTUzNA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485511534", "bodyText": "Dot is unnecessary.", "author": "NSAmelchev", "createdAt": "2020-09-09T10:37:09Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java", "diffHunk": "@@ -122,6 +124,15 @@\n  * Used when persistence enabled.\n  */\n public class GridCacheOffheapManager extends IgniteCacheOffheapManagerImpl implements DbCheckpointListener {\n+    /** @see #WAL_MARGIN_FOR_ATOMIC_CACHE_HISTORICAL_REBALANCE */\n+    public static final int DFLT_WAL_MARGIN_FOR_ATOMIC_CACHE_HISTORICAL_REBALANCE = 5;\n+\n+    @SystemProperty(value = \"Margin for WAL iterator, that used for historical rebalance on atomic cache.  \" +\n+        \"It is intended for prevent  partition divergence due to reordering in WAL.\", type = Long.class,", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzOTYwMg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485539602", "bodyText": "Fixed.", "author": "nizhikov", "createdAt": "2020-09-09T11:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMTUzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzOTcyNA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485539724", "bodyText": "Fixed", "author": "nizhikov", "createdAt": "2020-09-09T11:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMTUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNDA4OA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485534088", "bodyText": "partion -> partition", "author": "Mmuzaf", "createdAt": "2020-09-09T11:21:06Z", "path": "modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java", "diffHunk": "@@ -1177,61 +1678,86 @@\n      * which leads to extra memory consumption, otherwise we use view on the\n      * list of cluster nodes to reduce memory consumption on redundant data structures.\n      */\n+    @SystemProperty(\"Disables memory optimization: BitSets instead of HashSets to store \" +\n+        \"partitions. When number of backups per partion is > IGNITE_AFFINITY_BACKUPS_THRESHOLD we use HashMap to \" +", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNDUwNQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485534505", "bodyText": "aquiring -> acquiring", "author": "Mmuzaf", "createdAt": "2020-09-09T11:22:01Z", "path": "modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java", "diffHunk": "@@ -1279,12 +1816,19 @@\n      * waiting it). Equals 0 if not set. No long transactions are dumped in log if nor this parameter\n      * neither {@link #IGNITE_TRANSACTION_TIME_DUMP_SAMPLES_COEFFICIENT} is set.\n      */\n+    @SystemProperty(value = \"Threshold timeout for long transactions, if transaction exceeds it, it \" +\n+        \"will be dumped in log with information about how much time did it spent in system time (time while aquiring \" +", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNDY3MQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485534671", "bodyText": "commiting -> committing", "author": "Mmuzaf", "createdAt": "2020-09-09T11:22:19Z", "path": "modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java", "diffHunk": "@@ -1279,12 +1816,19 @@\n      * waiting it). Equals 0 if not set. No long transactions are dumped in log if nor this parameter\n      * neither {@link #IGNITE_TRANSACTION_TIME_DUMP_SAMPLES_COEFFICIENT} is set.\n      */\n+    @SystemProperty(value = \"Threshold timeout for long transactions, if transaction exceeds it, it \" +\n+        \"will be dumped in log with information about how much time did it spent in system time (time while aquiring \" +\n+        \"locks, preparing, commiting, etc) and user time (time when client node runs some code while holding \" +", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUzNzQzNg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485537436", "bodyText": "I think it's safe to rename constant to DFLT_PERIODIC_STARVATION_CHECK_FREQ like the other constants named.", "author": "Mmuzaf", "createdAt": "2020-09-09T11:27:56Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java", "diffHunk": "@@ -355,7 +355,7 @@\n      * <p>\n      * Value is {@code 30 sec}.\n      */\n-    private static final long PERIODIC_STARVATION_CHECK_FREQ = 1000 * 30;\n+    public static final long PERIODIC_STARVATION_CHECK_FREQ = 1000 * 30;", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9f70caca86ebbc2eeb9de2b71e4ce251e3ea737", "url": "https://github.com/apache/ignite/commit/b9f70caca86ebbc2eeb9de2b71e4ce251e3ea737", "message": "IGNITE-13380: dot in the end fixed. Check to the test added.", "committedDate": "2020-09-09T11:29:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MzAzOA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485543038", "bodyText": "Should we consider making this fields public too?", "author": "Mmuzaf", "createdAt": "2020-09-09T11:38:40Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/topology/PartitionsEvictManager.java", "diffHunk": "@@ -60,6 +61,8 @@\n     private static final int DEFAULT_SHOW_EVICTION_PROGRESS_FREQ_MS = 2 * 60 * 1000;\n \n     /** Eviction progress frequency property name. */\n+    @SystemProperty(value = \"Eviction progress frequency in milliseconds\", type = Long.class,\n+        defaults = \"\" + DEFAULT_SHOW_EVICTION_PROGRESS_FREQ_MS)\n     private static final String SHOW_EVICTION_PROGRESS_FREQ = \"SHOW_EVICTION_PROGRESS_FREQ\";", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1MDg4OQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485550889", "bodyText": "Yes. Fixed.", "author": "nizhikov", "createdAt": "2020-09-09T11:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MzAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0OTQ0OA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485549448", "bodyText": "Should we consider moving the default value to the constant like for other constant does?\nCommandProcessor:157\nIgniteSystemProperties.getBoolean(IgniteSystemProperties.IGNITE_SQL_UUID_DDL_BYTE_FORMAT, false);", "author": "Mmuzaf", "createdAt": "2020-09-09T11:50:54Z", "path": "modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java", "diffHunk": "@@ -515,69 +774,101 @@\n      * @deprecated Since version 2.8.\n      */\n     @Deprecated\n+    @SystemProperty(\"Force all SQL queries to be processed lazily regardless of what clients request\")\n     public static final String IGNITE_SQL_FORCE_LAZY_RESULT_SET = \"IGNITE_SQL_FORCE_LAZY_RESULT_SET\";\n \n     /** Disable SQL system views. */\n+    @SystemProperty(\"Disables SQL system views\")\n     public static final String IGNITE_SQL_DISABLE_SYSTEM_VIEWS = \"IGNITE_SQL_DISABLE_SYSTEM_VIEWS\";\n \n     /** SQL retry timeout. */\n+    @SystemProperty(value = \"SQL retry timeout in milliseconds\", type = Long.class, defaults = \"30 seconds\")\n     public static final String IGNITE_SQL_RETRY_TIMEOUT = \"IGNITE_SQL_RETRY_TIMEOUT\";\n \n     /** Enable backward compatible handling of UUID through DDL. */\n+    @SystemProperty(\"Enables backward compatible handling of UUID through DDL\")\n     public static final String IGNITE_SQL_UUID_DDL_BYTE_FORMAT = \"IGNITE_SQL_UUID_DDL_BYTE_FORMAT\";", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1ODY0Mg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485558642", "bodyText": "false is the default value for IgniteSystemProperties#getBoolean and for SystemProperty#defaults annotation.\n\nThis param is redundant here.\nConstant not required.", "author": "nizhikov", "createdAt": "2020-09-09T12:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0OTQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1MDU2MA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485550560", "bodyText": "The IGNITE_DEFAULT_DATA_STORAGE_PAGE_SIZE has default value 0. Should we add it here?", "author": "Mmuzaf", "createdAt": "2020-09-09T11:53:00Z", "path": "modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java", "diffHunk": "@@ -1093,40 +1565,52 @@\n      * @deprecated Use {@link IgniteConfiguration#getRebalanceThrottle()} instead.\n      */\n     @Deprecated\n+    @SystemProperty(value = \"Overrides CacheConfiguration.getRebalanceThrottle \" +\n+        \"configuration property for all caches in milliseconds. 0 by default, which means that override is disabled\",\n+        type = Long.class, defaults = \"0\")\n     public static final String IGNITE_REBALANCE_THROTTLE_OVERRIDE = \"IGNITE_REBALANCE_THROTTLE_OVERRIDE\";\n \n     /**\n      * Enables start caches in parallel.\n      *\n      * Default is {@code true}.\n      */\n+    @SystemProperty(value = \"Enables start caches in parallel\",\n+        defaults = \"\" + DFLT_ALLOW_START_CACHES_IN_PARALLEL)\n     public static final String IGNITE_ALLOW_START_CACHES_IN_PARALLEL = \"IGNITE_ALLOW_START_CACHES_IN_PARALLEL\";\n \n     /** For test purposes only. Force Mvcc mode. */\n+    @SystemProperty(\"For test purposes only. Force Mvcc mode\")\n     public static final String IGNITE_FORCE_MVCC_MODE_IN_TESTS = \"IGNITE_FORCE_MVCC_MODE_IN_TESTS\";\n \n     /**\n      * Allows to log additional information about all restored partitions after binary and logical recovery phases.\n      *\n      * Default is {@code true}.\n      */\n+    @SystemProperty(\"Allows to log additional information about all restored partitions after \" +\n+        \"binary and logical recovery phases\")\n     public static final String IGNITE_RECOVERY_VERBOSE_LOGGING = \"IGNITE_RECOVERY_VERBOSE_LOGGING\";\n \n     /**\n      * Disables cache interceptor triggering in case of conflicts.\n      *\n      * Default is {@code false}.\n      */\n+    @SystemProperty(\"Disables cache interceptor triggering in case of conflicts\")\n     public static final String IGNITE_DISABLE_TRIGGERING_CACHE_INTERCEPTOR_ON_CONFLICT = \"IGNITE_DISABLE_TRIGGERING_CACHE_INTERCEPTOR_ON_CONFLICT\";\n \n     /**\n      * Sets default {@link CacheConfiguration#setDiskPageCompression disk page compression}.\n      */\n+    @SystemProperty(value = \"Disk page compression - CacheConfiguration#setDiskPageCompression\",\n+        type = DiskPageCompression.class)\n     public static final String IGNITE_DEFAULT_DISK_PAGE_COMPRESSION = \"IGNITE_DEFAULT_DISK_PAGE_COMPRESSION\";\n \n     /**\n      * Sets default {@link DataStorageConfiguration#setPageSize storage page size}.\n      */\n+    @SystemProperty(value = \"Storage page size - DataStorageConfiguration#setPageSize\", type = Integer.class)\n     public static final String IGNITE_DEFAULT_DATA_STORAGE_PAGE_SIZE = \"IGNITE_DEFAULT_DATA_STORAGE_PAGE_SIZE\";", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MDU3OA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485560578", "bodyText": "0 is the default value for the int variable.\nSo, it seems to me that constant will be useless here.", "author": "nizhikov", "createdAt": "2020-09-09T12:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1MDU2MA=="}], "type": "inlineReview"}, {"oid": "89e0f2b5c23d76347ed7df812da8942fb5c46a68", "url": "https://github.com/apache/ignite/commit/89e0f2b5c23d76347ed7df812da8942fb5c46a68", "message": "IGNITE-13380: Code review fixes.", "committedDate": "2020-09-09T11:54:10Z", "type": "commit"}, {"oid": "743b9b2d47cd544f41a20e6f4f03079dac66aad9", "url": "https://github.com/apache/ignite/commit/743b9b2d47cd544f41a20e6f4f03079dac66aad9", "message": "IGNITE-13380: Code review fixes.", "committedDate": "2020-09-09T12:04:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzIzMg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485563232", "bodyText": "The default value is false. Should we mentioned it?", "author": "Mmuzaf", "createdAt": "2020-09-09T12:14:28Z", "path": "modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java", "diffHunk": "@@ -1177,61 +1678,86 @@\n      * which leads to extra memory consumption, otherwise we use view on the\n      * list of cluster nodes to reduce memory consumption on redundant data structures.\n      */\n+    @SystemProperty(\"Disables memory optimization: BitSets instead of HashSets to store \" +\n+        \"partitions. When number of backups per partion is > IGNITE_AFFINITY_BACKUPS_THRESHOLD we use HashMap to \" +\n+        \"improve contains() which leads to extra memory consumption, otherwise we use view on the list of cluster \" +\n+        \"nodes to reduce memory consumption on redundant data structures\")\n     public static final String IGNITE_DISABLE_AFFINITY_MEMORY_OPTIMIZATION = \"IGNITE_DISABLE_AFFINITY_MEMORY_OPTIMIZATION\";\n \n     /**\n      * Limit the maximum number of objects in memory during the recovery procedure.\n      */\n+    @SystemProperty(value = \"Limit the maximum number of objects in memory during the recovery procedure\",\n+        type = Integer.class)\n     public static final String IGNITE_RECOVERY_SEMAPHORE_PERMITS = \"IGNITE_RECOVERY_SEMAPHORE_PERMITS\";\n \n     /**\n      * Maximum size of history of server nodes (server node IDs) that ever joined to current topology.\n      */\n+    @SystemProperty(value = \"Maximum size of history of server nodes (server node IDs) that ever joined \" +\n+        \"to current topology\", type = Integer.class, defaults = \"\" + DFLT_NODE_IDS_HISTORY_SIZE)\n     public static final String IGNITE_NODE_IDS_HISTORY_SIZE = \"IGNITE_NODE_IDS_HISTORY_SIZE\";\n \n     /**\n      * Maximum number of diagnostic warning messages per category, when waiting for PME.\n      */\n+    @SystemProperty(value = \"Maximum number of diagnostic warning messages per category, when waiting for PME\",\n+        type = Integer.class, defaults = \"\" + DFLT_DIAGNOSTIC_WARN_LIMIT)\n     public static final String IGNITE_DIAGNOSTIC_WARN_LIMIT = \"IGNITE_DIAGNOSTIC_WARN_LIMIT\";\n \n     /**\n      * Flag to enable triggering failure handler for node if unrecoverable partition inconsistency is\n      * discovered during partition update counters exchange.\n      */\n+    @SystemProperty(\"Enables triggering failure handler for node if unrecoverable \" +\n+        \"partition inconsistency is discovered during partition update counters exchange\")\n     public static final String IGNITE_FAIL_NODE_ON_UNRECOVERABLE_PARTITION_INCONSISTENCY =\n         \"IGNITE_FAIL_NODE_ON_UNRECOVERABLE_PARTITION_INCONSISTENCY\";\n \n     /**\n      * Allow use composite _key, _val columns at the INSERT/UPDATE/MERGE statements.\n      */\n+    @SystemProperty(\"Allow use composite _key, _val columns at the INSERT/UPDATE/MERGE statements\")\n     public static final String IGNITE_SQL_ALLOW_KEY_VAL_UPDATES = \"IGNITE_SQL_ALLOW_KEY_VAL_UPDATES\";", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NDcxMQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485564711", "bodyText": "Yes. It will be mentioned automatically by the help printer.\nPlease, take a look into CommandLineStartup.java#452", "author": "nizhikov", "createdAt": "2020-09-09T12:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NTE0Ng==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485565146", "bodyText": "The default value is false. Should we mention it?", "author": "Mmuzaf", "createdAt": "2020-09-09T12:17:46Z", "path": "modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java", "diffHunk": "@@ -816,132 +1188,184 @@\n      *\n      * Default value is {@code false}.\n      */\n+    @SystemProperty(\"If the property is set org.apache.ignite.internal.pagemem.wal.record.TxRecord records \" +\n+        \"will be logged to WAL\")\n     public static final String IGNITE_WAL_LOG_TX_RECORDS = \"IGNITE_WAL_LOG_TX_RECORDS\";\n \n     /** Max amount of remembered errors for {@link GridLogThrottle}. */\n+    @SystemProperty(value = \"Max amount of remembered errors for GridLogThrottle\", type = Integer.class,\n+        defaults = \"\" + DFLT_LOG_THROTTLE_CAPACITY)\n     public static final String IGNITE_LOG_THROTTLE_CAPACITY = \"IGNITE_LOG_THROTTLE_CAPACITY\";\n \n     /**\n      * If this property is set, {@link DataStorageConfiguration#setWriteThrottlingEnabled(boolean)}\n      * will be overridden to {@code true} regardless the initial value in the configuration.\n      */\n+    @SystemProperty(value = \"Checkpoint throttling policy\", type = String.class)\n     public static final String IGNITE_OVERRIDE_WRITE_THROTTLING_ENABLED = \"IGNITE_OVERRIDE_WRITE_THROTTLING_ENABLED\";\n \n     /**\n      * Property for setup WAL serializer version.\n      */\n+    @SystemProperty(value = \"WAL serializer version\", type = Integer.class,\n+        defaults = \"\" + LATEST_SERIALIZER_VERSION)\n     public static final String IGNITE_WAL_SERIALIZER_VERSION = \"IGNITE_WAL_SERIALIZER_VERSION\";\n \n     /** Property for setup Ignite WAL segment sync timeout. */\n+    @SystemProperty(value = \"WAL segment sync timeout in milliseconds\", type = Long.class,\n+        defaults = \"\" + DFLT_WAL_SEGMENT_SYNC_TIMEOUT)\n     public static final String IGNITE_WAL_SEGMENT_SYNC_TIMEOUT = \"IGNITE_WAL_SEGMENT_SYNC_TIMEOUT\";\n \n     /**\n      * If the property is set Ignite will use legacy node comparator (based on node order) inste\n      *\n      * Default value is {@code false}.\n      */\n+    @SystemProperty(\"Enables usage of legacy node comparator (based on node order)\")\n     public static final String IGNITE_USE_LEGACY_NODE_COMPARATOR = \"IGNITE_USE_LEGACY_NODE_COMPARATOR\";\n \n     /**\n      * Property that indicates should be mapped byte buffer used or not.\n      * Possible values: {@code true} and {@code false}.\n      */\n+    @SystemProperty(value = \"Enables usage of the mapped byte buffer\", defaults = \"\" + DFLT_WAL_MMAP)\n     public static final String IGNITE_WAL_MMAP = \"IGNITE_WAL_MMAP\";\n \n     /**\n      * When set to {@code true}, Data store folders are generated only by consistent id, and no consistent ID will be\n      * set based on existing data store folders. This option also enables compatible folder generation mode as it was\n      * before 2.3.\n      */\n+    @SystemProperty(\"When set to true, Data store folders are generated only by consistent id, \" +\n+        \"and no consistent ID will be set based on existing data store folders. This option also enables compatible \" +\n+        \"folder generation mode as it was before 2.3\")\n     public static final String IGNITE_DATA_STORAGE_FOLDER_BY_CONSISTENT_ID = \"IGNITE_DATA_STORAGE_FOLDER_BY_CONSISTENT_ID\";\n \n     /** Ignite JVM pause detector disabled. */\n+    @SystemProperty(\"Disables JVM pause detector\")\n     public static final String IGNITE_JVM_PAUSE_DETECTOR_DISABLED = \"IGNITE_JVM_PAUSE_DETECTOR_DISABLED\";\n \n     /** Ignite JVM pause detector precision. */\n+    @SystemProperty(value = \"JVM pause detector precision\", type = Integer.class,\n+        defaults = \"\" + DFLT_JVM_PAUSE_DETECTOR_PRECISION)\n     public static final String IGNITE_JVM_PAUSE_DETECTOR_PRECISION = \"IGNITE_JVM_PAUSE_DETECTOR_PRECISION\";\n \n     /** Ignite JVM pause detector threshold. */\n+    @SystemProperty(value = \"JVM pause detector threshold\", type = Integer.class,\n+        defaults = \"\" + DEFAULT_JVM_PAUSE_DETECTOR_THRESHOLD)\n     public static final String IGNITE_JVM_PAUSE_DETECTOR_THRESHOLD = \"IGNITE_JVM_PAUSE_DETECTOR_THRESHOLD\";\n \n     /** Ignite JVM pause detector last events count. */\n+    @SystemProperty(value = \"JVM pause detector last events count\", type = Integer.class,\n+        defaults = \"\" + DFLT_JVM_PAUSE_DETECTOR_LAST_EVENTS_COUNT)\n     public static final String IGNITE_JVM_PAUSE_DETECTOR_LAST_EVENTS_COUNT = \"IGNITE_JVM_PAUSE_DETECTOR_LAST_EVENTS_COUNT\";\n \n     /**\n      * Default value is {@code false}.\n+     *\n+     * @deprecated Not used.\n      */\n+    @Deprecated\n+    @SystemProperty(\"Enables WAL debug log on recovery\")\n     public static final String IGNITE_WAL_DEBUG_LOG_ON_RECOVERY = \"IGNITE_WAL_DEBUG_LOG_ON_RECOVERY\";\n \n     /**\n      * Number of checkpoint history entries held in memory.\n      */\n+    @SystemProperty(value = \"Number of checkpoint history entries held in memory\", type = Integer.class,\n+        defaults = \"\" + DFLT_PDS_MAX_CHECKPOINT_MEMORY_HISTORY_SIZE)\n     public static final String IGNITE_PDS_MAX_CHECKPOINT_MEMORY_HISTORY_SIZE = \"IGNITE_PDS_MAX_CHECKPOINT_MEMORY_HISTORY_SIZE\";\n \n     /**\n      * If this property is set to {@code true} enable logging in {@link GridClient}.\n      */\n+    @SystemProperty(\"Enables logging in GridClient\")\n     public static final String IGNITE_GRID_CLIENT_LOG_ENABLED = \"IGNITE_GRID_CLIENT_LOG_ENABLED\";\n \n     /**\n      * When set to {@code true}, direct IO may be enabled. Direct IO enabled only if JAR file with corresponding\n      * feature is available in classpath and OS and filesystem settings allows to enable this mode.\n      * Default is {@code true}.\n      */\n+    @SystemProperty(value = \"Enables direct IO. Direct IO enabled only if JAR \" +\n+        \"file with corresponding feature is available in classpath and OS and filesystem settings allows to enable \" +\n+        \"this mode\", defaults = \"true\")\n     public static final String IGNITE_DIRECT_IO_ENABLED = \"IGNITE_DIRECT_IO_ENABLED\";\n \n     /**\n      * When set to {@code true}, warnings that are intended for development environments and not for production\n      * (such as coding mistakes in code using Ignite) will not be logged.\n      */\n+    @SystemProperty(\"Enables development environments warnings\")\n     public static final String IGNITE_DEV_ONLY_LOGGING_DISABLED = \"IGNITE_DEV_ONLY_LOGGING_DISABLED\";\n \n     /**\n      * When set to {@code true} (default), pages are written to page store without holding segment lock (with delay).\n      * Because other thread may require exactly the same page to be loaded from store, reads are protected by locking.\n      */\n+    @SystemProperty(value = \"When set to true (default), pages are written to page store without \" +\n+        \"holding segment lock (with delay). Because other thread may require exactly the same page to be loaded \" +\n+        \"from store, reads are protected by locking\", defaults = \"\" + DFLT_DELAYED_REPLACED_PAGE_WRITE)\n     public static final String IGNITE_DELAYED_REPLACED_PAGE_WRITE = \"IGNITE_DELAYED_REPLACED_PAGE_WRITE\";\n \n     /**\n      * When set to {@code true}, WAL implementation with dedicated worker will be used even in FSYNC mode.\n      * Default is {@code false}.\n      */\n+    @SystemProperty(\"When set to true, WAL implementation with dedicated worker will be used \" +\n+        \"even in FSYNC mode\")\n     public static final String IGNITE_WAL_FSYNC_WITH_DEDICATED_WORKER = \"IGNITE_WAL_FSYNC_WITH_DEDICATED_WORKER\";", "originalCommit": "03b43fbbba5ff659eb168be85fd57bad3f61ecec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NDA0Mg==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485564042", "bodyText": "Lets add same checks for the IgniteSystemProperties class above", "author": "NSAmelchev", "createdAt": "2020-09-09T12:15:50Z", "path": "modules/core/src/test/java/org/apache/ignite/startup/cmdline/CommandLinePrintPropertiesTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.startup.cmdline;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.ignite.IgniteSystemProperties;\n+import org.apache.ignite.SystemProperty;\n+import org.apache.ignite.internal.util.GridJavaProcess;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static org.apache.ignite.startup.cmdline.CommandLineStartup.PRINT_PROPS_COMMAND;\n+import static org.apache.ignite.startup.cmdline.CommandLineStartup.PROPS_CLS;\n+\n+/** Tests print Ignite system properties. */\n+public class CommandLinePrintPropertiesTest extends GridCommonAbstractTest {\n+    /** Ignite system property pattern. */\n+    private final Pattern propPtrn = Pattern.compile(\"^([\\\\w.]+).* +- (\\\\[Deprecated] |)\\\\[\\\\w+] (.*)\");\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testPrintProperties() throws Exception {\n+        Map<String, Field> expProps = new HashMap<>();\n+\n+        for (Field field : IgniteSystemProperties.class.getFields()) {\n+            int mod = field.getModifiers();\n+\n+            if (isPublic(mod) && isStatic(mod) && isFinal(mod) && String.class.equals(field.getType())) {\n+                expProps.put(U.staticField(IgniteSystemProperties.class, field.getName()), field);\n+\n+                assertTrue(\"Ignite system property must be annotated by @\" +\n+                        SystemProperty.class.getSimpleName() + \" [field=\" + field + ']',\n+                    field.isAnnotationPresent(SystemProperty.class));\n+            }\n+        }\n+\n+        for (Class<?> cls : PROPS_CLS) {\n+            if (cls.equals(IgniteSystemProperties.class))\n+                continue;\n+\n+            for (Field field : cls.getFields()) {\n+                SystemProperty ann = field.getAnnotation(SystemProperty.class);\n+\n+                if (ann == null)\n+                    continue;\n+\n+                assertFalse(field.getName() + \" value shouldn't ends with dot.\", ann.value().endsWith(\".\"));", "originalCommit": "743b9b2d47cd544f41a20e6f4f03079dac66aad9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2NDc4Nw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485564787", "bodyText": "the first .* is unnecessary", "author": "NSAmelchev", "createdAt": "2020-09-09T12:17:07Z", "path": "modules/core/src/test/java/org/apache/ignite/startup/cmdline/CommandLinePrintPropertiesTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.startup.cmdline;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.ignite.IgniteSystemProperties;\n+import org.apache.ignite.SystemProperty;\n+import org.apache.ignite.internal.util.GridJavaProcess;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static java.lang.reflect.Modifier.isFinal;\n+import static java.lang.reflect.Modifier.isPublic;\n+import static java.lang.reflect.Modifier.isStatic;\n+import static org.apache.ignite.startup.cmdline.CommandLineStartup.PRINT_PROPS_COMMAND;\n+import static org.apache.ignite.startup.cmdline.CommandLineStartup.PROPS_CLS;\n+\n+/** Tests print Ignite system properties. */\n+public class CommandLinePrintPropertiesTest extends GridCommonAbstractTest {\n+    /** Ignite system property pattern. */\n+    private final Pattern propPtrn = Pattern.compile(\"^([\\\\w.]+).* +- (\\\\[Deprecated] |)\\\\[\\\\w+] (.*)\");", "originalCommit": "743b9b2d47cd544f41a20e6f4f03079dac66aad9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "166917250655f77f8c5aa18d8a3f076d3e90febc", "url": "https://github.com/apache/ignite/commit/166917250655f77f8c5aa18d8a3f076d3e90febc", "message": "IGNITE-13380: Code review fixes.", "committedDate": "2020-09-09T12:39:50Z", "type": "commit"}, {"oid": "9ef5341faf6e0822d3ab9fa70bb278694c4afe8b", "url": "https://github.com/apache/ignite/commit/9ef5341faf6e0822d3ab9fa70bb278694c4afe8b", "message": "IGNITE-13380: Code review fixes.", "committedDate": "2020-09-09T12:40:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3OTQ5MQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485579491", "bodyText": "Should we add checks here at compile time to ensure that this list is fully enough? Some of the developers may forgot adding new classes here. Also, we should to mention it in javadoc of the @SystemProperty annotation.", "author": "Mmuzaf", "createdAt": "2020-09-09T12:42:14Z", "path": "modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineStartup.java", "diffHunk": "@@ -66,6 +86,48 @@\n     /** Quite log flag. */\n     private static final boolean QUITE;\n \n+    /** Command to print Ignite system properties info. */\n+    static final String PRINT_PROPS_COMMAND = \"-systemProps\";\n+\n+    /** Classes with Ignite system properties. */\n+    static final List<Class<?>> PROPS_CLS = new ArrayList<>(Arrays.asList(\n+        IgniteSystemProperties.class,", "originalCommit": "743b9b2d47cd544f41a20e6f4f03079dac66aad9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4MDM1Nw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485580357", "bodyText": "What checks do you have in mind?", "author": "nizhikov", "createdAt": "2020-09-09T12:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3OTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwNzIyOQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485607229", "bodyText": "I don't have a simple solution for this case, probably, some autogenerated resources might help here. As another option, we can write a custom checkstyle rule but it less friendly for the developers.", "author": "Mmuzaf", "createdAt": "2020-09-09T13:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3OTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwOTk3NA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485609974", "bodyText": "Let's postpone this task to another ticket?\nI agree with you that this should be checked automatically, but, without simple answers, we have to think and come to the dev-list with some solution", "author": "nizhikov", "createdAt": "2020-09-09T13:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3OTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxMTEzNQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485611135", "bodyText": "OK, let's file a ticket right after this one will be merged.", "author": "Mmuzaf", "createdAt": "2020-09-09T13:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3OTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxNDY5NQ==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485614695", "bodyText": "IGNITE-13421 created", "author": "nizhikov", "createdAt": "2020-09-09T13:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3OTQ5MQ=="}], "type": "inlineReview"}, {"oid": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "url": "https://github.com/apache/ignite/commit/4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "message": "Merge branch 'master' into IGNITE-13380", "committedDate": "2020-09-09T15:43:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MDQ2Mw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485770463", "bodyText": "Let's simplify the sentence 'The WAL iterator margin that is used to prevent partitions divergence on the historical rebalance of atomic caches.\"", "author": "dmagda", "createdAt": "2020-09-09T16:51:11Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java", "diffHunk": "@@ -122,6 +124,15 @@\n  * Used when persistence enabled.\n  */\n public class GridCacheOffheapManager extends IgniteCacheOffheapManagerImpl implements DbCheckpointListener {\n+    /** @see #WAL_MARGIN_FOR_ATOMIC_CACHE_HISTORICAL_REBALANCE */\n+    public static final int DFLT_WAL_MARGIN_FOR_ATOMIC_CACHE_HISTORICAL_REBALANCE = 5;\n+\n+    @SystemProperty(value = \"Margin for WAL iterator, that used for historical rebalance on atomic cache.  \" +\n+        \"It is intended for prevent  partition divergence due to reordering in WAL\", type = Long.class,", "originalCommit": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MTg0MA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485771840", "bodyText": "Let's update it a bit \"The threshold of flush calls on empty caches to allow GC of stripes (the flush is triggered two times per checkpoint).\"", "author": "dmagda", "createdAt": "2020-09-09T16:52:48Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/freelist/PagesList.java", "diffHunk": "@@ -1913,17 +1927,44 @@ public int cachedPagesCount(int bucket) {\n \n     /** Class to store page-list cache onheap. */\n     public static class PagesCache {\n+        /** @see #IGNITE_PAGES_LIST_CACHING_MAX_CACHE_SIZE */\n+        public static final int DFLT_PAGES_LIST_CACHING_MAX_CACHE_SIZE = 64;\n+\n+        /** @see #IGNITE_PAGES_LIST_CACHING_STRIPES_COUNT */\n+        public static final int DFLT_PAGES_LIST_CACHING_STRIPES_COUNT = 4;\n+\n+        /** @see #IGNITE_PAGES_LIST_CACHING_EMPTY_FLUSH_GC_THRESHOLD */\n+        public static final int DFLT_PAGES_LIST_CACHING_EMPTY_FLUSH_GC_THRESHOLD = 10;\n+\n+        /** */\n+        @SystemProperty(value = \"Pages cache maximum size\", type = Long.class,\n+            defaults = \"\" + DFLT_PAGES_LIST_CACHING_MAX_CACHE_SIZE)\n+        public static final String IGNITE_PAGES_LIST_CACHING_MAX_CACHE_SIZE = \"IGNITE_PAGES_LIST_CACHING_MAX_CACHE_SIZE\";\n+\n+        /** */\n+        @SystemProperty(value = \"Stripes count. Must be power of 2\", type = Long.class,\n+            defaults = \"\" + DFLT_PAGES_LIST_CACHING_STRIPES_COUNT)\n+        public static final String IGNITE_PAGES_LIST_CACHING_STRIPES_COUNT = \"IGNITE_PAGES_LIST_CACHING_STRIPES_COUNT\";\n+\n+        /** */\n+        @SystemProperty(value = \"Threshold of flush calls on empty cache to allow GC of stripes \" +", "originalCommit": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3Mjk5Mw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485772993", "bodyText": "Please update \"The max size of the buffer with pending continuous queries events.\"", "author": "dmagda", "createdAt": "2020-09-09T16:54:09Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "diffHunk": "@@ -40,13 +41,29 @@\n  *\n  */\n public class CacheContinuousQueryEventBuffer {\n+    /** @see #IGNITE_CONTINUOUS_QUERY_PENDING_BUFF_SIZE */\n+    public static final int DFLT_CONTINUOUS_QUERY_PENDING_BUFF_SIZE = 10_000;\n+\n+    /** @see #IGNITE_CONTINUOUS_QUERY_SERVER_BUFFER_SIZE */\n+    public static final int DFLT_CONTINUOUS_QUERY_SERVER_BUFFER_SIZE = 1000;\n+\n+    /** */\n+    @SystemProperty(value = \"Maximum size of buffer for pending events\", type = Long.class,", "originalCommit": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MzU3NA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485773574", "bodyText": "Please update to \"Continuous queries batch buffer size\"", "author": "dmagda", "createdAt": "2020-09-09T16:54:46Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "diffHunk": "@@ -40,13 +41,29 @@\n  *\n  */\n public class CacheContinuousQueryEventBuffer {\n+    /** @see #IGNITE_CONTINUOUS_QUERY_PENDING_BUFF_SIZE */\n+    public static final int DFLT_CONTINUOUS_QUERY_PENDING_BUFF_SIZE = 10_000;\n+\n+    /** @see #IGNITE_CONTINUOUS_QUERY_SERVER_BUFFER_SIZE */\n+    public static final int DFLT_CONTINUOUS_QUERY_SERVER_BUFFER_SIZE = 1000;\n+\n+    /** */\n+    @SystemProperty(value = \"Maximum size of buffer for pending events\", type = Long.class,\n+        defaults = \"\" + DFLT_CONTINUOUS_QUERY_PENDING_BUFF_SIZE)\n+    public static final String IGNITE_CONTINUOUS_QUERY_PENDING_BUFF_SIZE = \"IGNITE_CONTINUOUS_QUERY_PENDING_BUFF_SIZE\";\n+\n+    /** */\n+    @SystemProperty(value = \"Batch buffer size\", type = Long.class,", "originalCommit": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NzUwNw==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485777507", "bodyText": "\"The size of the buffer with acknowledgment events that are sent to backup nodes.\"", "author": "dmagda", "createdAt": "2020-09-09T16:59:33Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java", "diffHunk": "@@ -91,13 +92,32 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** @see #IGNITE_CONTINUOUS_QUERY_BACKUP_ACK_THRESHOLD */\n+    public static final int DFLT_CONTINUOUS_QUERY_BACKUP_ACK_THRESHOLD = 100;\n+\n+    /** @see #IGNITE_CONTINUOUS_QUERY_LISTENER_MAX_BUFFER_SIZE */\n+    public static final int DFLT_CONTINUOUS_QUERY_LISTENER_MAX_BUFFER_SIZE = 10_000;\n+\n+    /** */\n+    @SystemProperty(value = \"Size of the buffer of events to send acknowledge to backup\", type = Long.class,", "originalCommit": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3ODY1MA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485778650", "bodyText": "The maximum size of the continuous query listener buffer. 10% of events are dropped once the buffer is full.", "author": "dmagda", "createdAt": "2020-09-09T17:01:23Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java", "diffHunk": "@@ -91,13 +92,32 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** @see #IGNITE_CONTINUOUS_QUERY_BACKUP_ACK_THRESHOLD */\n+    public static final int DFLT_CONTINUOUS_QUERY_BACKUP_ACK_THRESHOLD = 100;\n+\n+    /** @see #IGNITE_CONTINUOUS_QUERY_LISTENER_MAX_BUFFER_SIZE */\n+    public static final int DFLT_CONTINUOUS_QUERY_LISTENER_MAX_BUFFER_SIZE = 10_000;\n+\n+    /** */\n+    @SystemProperty(value = \"Size of the buffer of events to send acknowledge to backup\", type = Long.class,\n+        defaults = \"\" + DFLT_CONTINUOUS_QUERY_BACKUP_ACK_THRESHOLD)\n+    public static final String IGNITE_CONTINUOUS_QUERY_BACKUP_ACK_THRESHOLD = \"IGNITE_CONTINUOUS_QUERY_BACKUP_ACK_THRESHOLD\";\n+\n+    /** */\n+    @SystemProperty(value = \"Maximum size of continuous query listener buffer. \" +", "originalCommit": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4MjQ1Ng==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485782456", "bodyText": "A number of spin-lock iterations to take before falling back to the blocking approach.", "author": "dmagda", "createdAt": "2020-09-09T17:08:08Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/OffheapReadWriteLock.java", "diffHunk": "@@ -34,13 +35,27 @@\n  * </pre>\n  */\n public class OffheapReadWriteLock {\n+    /** @see #IGNITE_OFFHEAP_RWLOCK_SPIN_COUNT */\n+    public static final int DFLT_OFFHEAP_RWLOCK_SPIN_COUNT = 32;\n+\n+    /** */\n+    @SystemProperty(value = \"Count spin lock iterations before fallback to block\", type = Long.class,", "originalCommit": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc4NDcxMA==", "url": "https://github.com/apache/ignite/pull/8207#discussion_r485784710", "bodyText": "\"The OffheapReadWriteLock flag that switches between writers and readers policy.\"\nNot sure if this is accurate, please revise if my understanding of the capability is wrong.", "author": "dmagda", "createdAt": "2020-09-09T17:11:24Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/OffheapReadWriteLock.java", "diffHunk": "@@ -34,13 +35,27 @@\n  * </pre>\n  */\n public class OffheapReadWriteLock {\n+    /** @see #IGNITE_OFFHEAP_RWLOCK_SPIN_COUNT */\n+    public static final int DFLT_OFFHEAP_RWLOCK_SPIN_COUNT = 32;\n+\n+    /** */\n+    @SystemProperty(value = \"Count spin lock iterations before fallback to block\", type = Long.class,\n+        defaults = \"\" + DFLT_OFFHEAP_RWLOCK_SPIN_COUNT)\n+    public static final String IGNITE_OFFHEAP_RWLOCK_SPIN_COUNT = \"IGNITE_OFFHEAP_RWLOCK_SPIN_COUNT\";\n+\n+    /** */\n+    @SystemProperty(value = \"OffheapReadWriteLock flag to switch between signal to writers or signal to writers or \" +", "originalCommit": "4e69258639be2d78ac9786b85ceb2c1cc52cd3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8cd8ff3a519272264a38b1edc59cea720ed2a519", "url": "https://github.com/apache/ignite/commit/8cd8ff3a519272264a38b1edc59cea720ed2a519", "message": "IGNITE-13380: Code review fixes.", "committedDate": "2020-09-09T22:00:22Z", "type": "commit"}]}