{"pr_number": 1988, "pr_title": "[CALCITE-4019] Visit SqlInsert with SqlShuttle cause NullPointerException", "pr_createdAt": "2020-05-24T03:08:29Z", "pr_url": "https://github.com/apache/calcite/pull/1988", "timeline": [{"oid": "c4e8cfd45b4e19dd957c4ab7e312dc981a25fd8b", "url": "https://github.com/apache/calcite/commit/c4e8cfd45b4e19dd957c4ab7e312dc981a25fd8b", "message": "[CALCITE-4019] Fix visit SqlInsert with SqlShuttle cause NullPointerException (Xu Zhaohui)", "committedDate": "2020-05-24T03:21:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMTIwOQ==", "url": "https://github.com/apache/calcite/pull/1988#discussion_r429701209", "bodyText": "why create a new  SqlInsert instance, can we just make a cast from call object?", "author": "yanlin-Lynn", "createdAt": "2020-05-25T01:44:46Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 3 || operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.size() == 3 ? null : (SqlNodeList) call.getOperandList().get(3));\n+      insert.unparse(writer, operator.getLeftPrec(), operator.getRightPrec());", "originalCommit": "c4e8cfd45b4e19dd957c4ab7e312dc981a25fd8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a026e159f2084bcc7b2254589d5ddff40d48f009", "url": "https://github.com/apache/calcite/commit/a026e159f2084bcc7b2254589d5ddff40d48f009", "message": "[CALCITE-4019] Change SqlInsert getOperandList method (Xu Zhaohui)", "committedDate": "2020-05-25T03:20:06Z", "type": "forcePushed"}, {"oid": "9a90c5c1a4d3d0e0815f00e5842779105d32ec52", "url": "https://github.com/apache/calcite/commit/9a90c5c1a4d3d0e0815f00e5842779105d32ec52", "message": "[CALCITE-4019] Change SqlInsert getOperandList method (Xu ZhaoHui)", "committedDate": "2020-05-25T03:55:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjc1Nw==", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430126757", "bodyText": "how about add  some checks for the result of accept", "author": "yanlin-Lynn", "createdAt": "2020-05-26T02:30:47Z", "path": "core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java", "diffHunk": "@@ -5747,6 +5748,17 @@ public void subTestIntervalMonthFailsValidation() {\n         .ok(\"INTERVAL '0' MONTH(0)\");\n   }\n \n+  @Test void testSqlParserPosPlus() throws Exception {\n+    final String sql = \"insert into emps select * from emps\";\n+    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n+    sqlNode.accept(new SqlShuttle() {\n+      @Override public SqlNode visit(SqlIdentifier identifier) {\n+        return new SqlIdentifier(identifier.names,\n+            identifier.getParserPosition());\n+      }\n+    });\n+  }", "originalCommit": "9a90c5c1a4d3d0e0815f00e5842779105d32ec52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODI3NA==", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430128274", "bodyText": "Thanks, add check for it.", "author": "xy2953396112", "createdAt": "2020-05-26T02:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjc1Nw=="}], "type": "inlineReview"}, {"oid": "0fe2a42033511a0a33e24f5dfbb5b67511c371d0", "url": "https://github.com/apache/calcite/commit/0fe2a42033511a0a33e24f5dfbb5b67511c371d0", "message": "[CALCITE-4019] Visit SqlInsert with SqlShuttle cause NullPointerException (Xu ZhaoHui)", "committedDate": "2020-05-26T02:35:08Z", "type": "forcePushed"}, {"oid": "a7ca1091f5a44af5debba7e3ef134c397992c924", "url": "https://github.com/apache/calcite/commit/a7ca1091f5a44af5debba7e3ef134c397992c924", "message": "[CALCITE-4019] Visit SqlInsert with SqlShuttle cause NullPointerException (Xu ZhaoHui)", "committedDate": "2020-05-26T02:44:16Z", "type": "commit"}, {"oid": "a7ca1091f5a44af5debba7e3ef134c397992c924", "url": "https://github.com/apache/calcite/commit/a7ca1091f5a44af5debba7e3ef134c397992c924", "message": "[CALCITE-4019] Visit SqlInsert with SqlShuttle cause NullPointerException (Xu ZhaoHui)", "committedDate": "2020-05-26T02:44:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMDAyOA==", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430830028", "bodyText": "Is it possible that targetTable is null or source is null?", "author": "DonnyZone", "createdAt": "2020-05-27T02:57:08Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlInsert.java", "diffHunk": "@@ -62,7 +62,11 @@ public SqlOperator getOperator() {\n   }\n \n   public List<SqlNode> getOperandList() {\n-    return ImmutableNullableList.of(keywords, targetTable, source, columnList);\n+    if (columnList == null) {", "originalCommit": "a7ca1091f5a44af5debba7e3ef134c397992c924", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4MDY0OQ==", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430880649", "bodyText": "@DonnyZone Thansk for review. targetTable and source should be not null.\nFor example a sql such as insert into emps , it can\u2019t be parsed.\ninsert into emps VALUES (true, 1) be parsed as SqlInsert, source not null.", "author": "xy2953396112", "createdAt": "2020-05-27T06:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMDAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5MzUyNg==", "url": "https://github.com/apache/calcite/pull/1988#discussion_r430893526", "bodyText": "Thanks for clarification.", "author": "DonnyZone", "createdAt": "2020-05-27T06:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMDAyOA=="}], "type": "inlineReview"}]}