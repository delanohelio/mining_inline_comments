{"pr_number": 1749, "pr_title": "Refine rules to avoid producing matches that are known to be no-op", "pr_createdAt": "2020-01-11T12:19:16Z", "pr_url": "https://github.com/apache/calcite/pull/1749", "timeline": [{"oid": "ef6be093d67ef989cf861937b7ea98aa808a2b57", "url": "https://github.com/apache/calcite/commit/ef6be093d67ef989cf861937b7ea98aa808a2b57", "message": "Refine rules to avoid producing matches that are known to be no-op\n\nUnionMergeRule produced lots of unrelated matches because it\nmatched only the top operand as SetOp.\nBottom operand classes were compared in onMatch method only, so\nit resulted in lots of false positives for the optimizer.\n\nNot it does not get added to the optimizer queue at all.", "committedDate": "2020-01-11T12:22:41Z", "type": "forcePushed"}, {"oid": "e387deddb0cce39f5827de8744645286b2cb1d7f", "url": "https://github.com/apache/calcite/commit/e387deddb0cce39f5827de8744645286b2cb1d7f", "message": "Refine rules so they produce less no-op matches\n\nUnionMergeRule produced lots of unrelated matches because it\nmatched only the top operand as SetOp.\nBottom operand classes were compared in onMatch method only, so\nit resulted in lots of false positives for the optimizer.\n\nNot it does not get added to the optimizer queue at all.", "committedDate": "2020-01-11T13:13:42Z", "type": "commit"}, {"oid": "e387deddb0cce39f5827de8744645286b2cb1d7f", "url": "https://github.com/apache/calcite/commit/e387deddb0cce39f5827de8744645286b2cb1d7f", "message": "Refine rules so they produce less no-op matches\n\nUnionMergeRule produced lots of unrelated matches because it\nmatched only the top operand as SetOp.\nBottom operand classes were compared in onMatch method only, so\nit resulted in lots of false positives for the optimizer.\n\nNot it does not get added to the optimizer queue at all.", "committedDate": "2020-01-11T13:13:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5MTYwNQ==", "url": "https://github.com/apache/calcite/pull/1749#discussion_r365591605", "bodyText": "Hi @vlsi\nShall we do analogous optimization for rules like ProjectSetOpTransposeRule, AggregateUnionAggregateRule, AggregateUnionTransposeRule. I mean check setOp.all or union.all by operandJ, rather than checking in method of onMatch, thus to save the \"match\" to be added into optimizer queue", "author": "jinxing64", "createdAt": "2020-01-12T15:42:29Z", "path": "core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java", "diffHunk": "@@ -43,7 +43,9 @@\n    */\n   public UnionToDistinctRule(Class<? extends Union> unionClazz,\n       RelBuilderFactory relBuilderFactory) {\n-    super(operand(unionClazz, any()), relBuilderFactory, null);\n+    super(\n+        operandJ(unionClazz, null, union -> !union.all, any()),\n+        relBuilderFactory, null);", "originalCommit": "e387deddb0cce39f5827de8744645286b2cb1d7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5NDg5MQ==", "url": "https://github.com/apache/calcite/pull/1749#discussion_r365594891", "bodyText": "That is true: it is better to use operandJ or matches methods to reduce the planning overhead.\nI improved the rules that produced lots of false positives in MaterializedTest, and I have not verified other rules.", "author": "vlsi", "createdAt": "2020-01-12T16:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5MTYwNQ=="}], "type": "inlineReview"}]}