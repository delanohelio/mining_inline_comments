{"pr_number": 1724, "pr_title": "[CALCITE-3675] SQL to Rel conversion is broken for coalesce on nullable field", "pr_createdAt": "2020-01-06T08:12:45Z", "pr_url": "https://github.com/apache/calcite/pull/1724", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDc5OQ==", "url": "https://github.com/apache/calcite/pull/1724#discussion_r363570799", "bodyText": "It might be better if we put the if condition out of the loop.", "author": "chunweilei", "createdAt": "2020-01-07T02:40:20Z", "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "diffHunk": "@@ -293,16 +294,26 @@ private RelDataType inferTypeFromValidator(\n     return ret;\n   }\n \n-  private RelDataType inferTypeFromOperands(\n-      RelDataTypeFactory typeFactory,\n-      List<RelDataType> argTypes) {\n+  private RelDataType inferTypeFromOperands(SqlOperatorBinding opBinding) {\n+    final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();\n+    final List<RelDataType> argTypes = opBinding.collectOperandTypes();\n     assert (argTypes.size() % 2) == 1 : \"odd number of arguments expected: \"\n         + argTypes.size();\n     assert argTypes.size() > 1 : \"CASE must have more than 1 argument. Given \"\n       + argTypes.size() + \", \" + argTypes;\n     List<RelDataType> thenTypes = new ArrayList<>();\n     for (int j = 1; j < (argTypes.size() - 1); j += 2) {\n-      thenTypes.add(argTypes.get(j));\n+      RelDataType argType = argTypes.get(j);\n+      if (opBinding instanceof RexCallBinding) {\n+        RexNode whenNode = ((RexCallBinding) opBinding).getOperands().get(j - 1);\n+        RexNode thenNode = ((RexCallBinding) opBinding).getOperands().get(j);\n+        if (whenNode.getKind() == SqlKind.IS_NOT_NULL && argType.isNullable()) {\n+          if (((RexCall) whenNode).getOperands().get(0).equals(thenNode)) {", "originalCommit": "09906561de8e309bf1df302414ed7a2e1d7420f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MTAzNA==", "url": "https://github.com/apache/calcite/pull/1724#discussion_r363571034", "bodyText": "Also extract ((RexCallBinding) opBinding) as a variable to avoid casting twice.", "author": "chunweilei", "createdAt": "2020-01-07T02:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4Mzc1NA==", "url": "https://github.com/apache/calcite/pull/1724#discussion_r363583754", "bodyText": "Thanks for review!\n\nIt might be better if we put the if condition out of the loop.\n\nIt's might be difficult. Only when SqlKind is IS_NOT_NULL, we convert it to RexCall. Or can we combine these two if conditions?\n\nAlso extract ((RexCallBinding) opBinding) as a variable to avoid casting twice.\n\nDone.", "author": "DonnyZone", "createdAt": "2020-01-07T04:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3MDc5OQ=="}], "type": "inlineReview"}, {"oid": "b301ba518e61fe6fde83c02b26648a38a0cb064f", "url": "https://github.com/apache/calcite/commit/b301ba518e61fe6fde83c02b26648a38a0cb064f", "message": "[CALCITE-3675] SQL to Rel conversion is broken for coalesce on nullable field (DonnyZone)", "committedDate": "2020-01-07T03:47:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDAzMQ==", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364230031", "bodyText": "Follow the SqlCallBinding name pattern, use operands or operand.", "author": "danny0405", "createdAt": "2020-01-08T13:29:29Z", "path": "core/src/main/java/org/apache/calcite/rex/RexCallBinding.java", "diffHunk": "@@ -122,6 +122,10 @@ public static RexCallBinding create(RelDataTypeFactory typeFactory,\n     return RexUtil.isLiteral(operands.get(ordinal), allowCast);\n   }\n \n+  public List<RexNode> getOperands() {\n+    return operands;\n+  }", "originalCommit": "b301ba518e61fe6fde83c02b26648a38a0cb064f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0NjI5NA==", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364546294", "bodyText": "Done", "author": "DonnyZone", "createdAt": "2020-01-09T03:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDUwOA==", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364230508", "bodyText": "Just as the comment addressed, can we unify the call bindings ?", "author": "danny0405", "createdAt": "2020-01-08T13:30:31Z", "path": "core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java", "diffHunk": "@@ -216,9 +219,7 @@ public RelDataType inferReturnType(\n       SqlOperatorBinding opBinding) {\n     // REVIEW jvs 4-June-2005:  can't these be unified?\n     if (!(opBinding instanceof SqlCallBinding)) {\n-      return inferTypeFromOperands(", "originalCommit": "b301ba518e61fe6fde83c02b26648a38a0cb064f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0NjA0MQ==", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364546041", "bodyText": "I ever noticed the comment left by Julian and made some efforts to unify them.\nBut it seems to be diffcult, especially for the usage of unique fields in SqlCallBinding.\nMaybe we need a thorough consideration on unifying type inference in different phases (validating/converting/runtime).", "author": "DonnyZone", "createdAt": "2020-01-09T03:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwNzM2MA==", "url": "https://github.com/apache/calcite/pull/1724#discussion_r364607360", "bodyText": "Thanks for the clarification, i have no more comments.", "author": "danny0405", "createdAt": "2020-01-09T08:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMDUwOA=="}], "type": "inlineReview"}, {"oid": "e2cd56caea6fa3578fcdae000ce168e841b2dfec", "url": "https://github.com/apache/calcite/commit/e2cd56caea6fa3578fcdae000ce168e841b2dfec", "message": "[CALCITE-3675] SQL to Rel conversion is broken for coalesce on nullable field (DonnyZone)", "committedDate": "2020-01-09T02:50:30Z", "type": "commit"}, {"oid": "e2cd56caea6fa3578fcdae000ce168e841b2dfec", "url": "https://github.com/apache/calcite/commit/e2cd56caea6fa3578fcdae000ce168e841b2dfec", "message": "[CALCITE-3675] SQL to Rel conversion is broken for coalesce on nullable field (DonnyZone)", "committedDate": "2020-01-09T02:50:30Z", "type": "forcePushed"}]}