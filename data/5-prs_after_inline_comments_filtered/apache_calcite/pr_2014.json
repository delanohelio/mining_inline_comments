{"pr_number": 2014, "pr_title": "[CALCITE-4022] Support unparse special syntax when operator is INSERT", "pr_createdAt": "2020-06-09T08:21:23Z", "pr_url": "https://github.com/apache/calcite/pull/2014", "timeline": [{"oid": "a9d3903817400d8e376344ac917870514a28345a", "url": "https://github.com/apache/calcite/commit/a9d3903817400d8e376344ac917870514a28345a", "message": "[CALCITE-4022] Support evaluate SqlInsert SqlBasicCall.toString() (Xu Zhaohui)", "committedDate": "2020-06-09T08:30:05Z", "type": "forcePushed"}, {"oid": "7cf9f44d0af4f63e331a36790770c928d9b3c59f", "url": "https://github.com/apache/calcite/commit/7cf9f44d0af4f63e331a36790770c928d9b3c59f", "message": "[CALCITE-4022] Support evaluate SqlInsert SqlBasicCall.toString() (Xu ZhaoHui)", "committedDate": "2020-06-09T09:07:27Z", "type": "forcePushed"}, {"oid": "d3075982c08c18cf301493ebda3bce800bf88f9c", "url": "https://github.com/apache/calcite/commit/d3075982c08c18cf301493ebda3bce800bf88f9c", "message": "[CALCITE-4022] Support evaluate SqlInsert SqlBasicCall.toString() (Xu Zhaohui)", "committedDate": "2020-06-09T10:59:05Z", "type": "forcePushed"}, {"oid": "cc71a12a61b1bc582cf7bedb4da0976c7fee9d9e", "url": "https://github.com/apache/calcite/commit/cc71a12a61b1bc582cf7bedb4da0976c7fee9d9e", "message": "[CALCITE-4022] Support evaluate SqlInsert SqlBasicCall.toString() (Xu Zhaohui)", "committedDate": "2020-06-23T16:44:20Z", "type": "forcePushed"}, {"oid": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842", "url": "https://github.com/apache/calcite/commit/bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842", "message": "[CALCITE-4022] Support evaluate SqlInsert SqlBasicCall.toString() (Xu Zhaohui)", "committedDate": "2020-06-27T09:05:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODI4Mw==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r448358283", "bodyText": "this name is really weird.\ncould you find a way to inline your implementation in the original place instead of here.", "author": "zinking", "createdAt": "2020-07-01T13:21:17Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,", "originalCommit": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2MjcwNw==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r454962707", "bodyText": "SqlUtil#unparseSpecialSyntax is used for unparse SqlSyntax.SPECIAL. other processing logic also exists in SqlUtil.", "author": "xy2953396112", "createdAt": "2020-07-15T10:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r448358925", "bodyText": "why null and why not reusing operands in this line ?", "author": "zinking", "createdAt": "2020-07-01T13:22:13Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 3 || operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.size() == 3 ? null : (SqlNodeList) call.getOperandList().get(3));", "originalCommit": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1OTA2Mw==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r453259063", "bodyText": "what's the cases for operands.size() == 3 and operands.size() == 4", "author": "yanlin-Lynn", "createdAt": "2020-07-12T02:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MDEzOA==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r453260138", "bodyText": "The size of operands is always 4, right?", "author": "yanlin-Lynn", "createdAt": "2020-07-12T03:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxODg0MQ==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r453618841", "bodyText": "I mean:\n\nwhy null, is there a better value to pass\ncall.getOperandList() => operands", "author": "zinking", "createdAt": "2020-07-13T12:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2Mjc0NA==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r454962744", "bodyText": "@yanlin-Lynn @zinking\nThanks.The size of operands is always 4, update the code.", "author": "xy2953396112", "createdAt": "2020-07-15T10:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2MDQ5NQ==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r448360495", "bodyText": "what about one more test regarding the actual execution?", "author": "zinking", "createdAt": "2020-07-01T13:24:42Z", "path": "core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java", "diffHunk": "@@ -5818,6 +5818,21 @@ public void subTestIntervalDayFailsValidation() {\n     assertTrue(sqlNodeVisited.getKind() == SqlKind.INSERT);\n   }\n \n+  @Test void testSqlInsertSqlBasicCallToString() throws Exception {\n+    final String sql = \"insert into emps select * from emps\";\n+    final SqlNode sqlNode = getSqlParser(sql).parseStmt();\n+    final SqlNode sqlNodeVisited = sqlNode.accept(new SqlShuttle() {\n+      @Override public SqlNode visit(SqlIdentifier identifier) {\n+        return new SqlIdentifier(identifier.names,\n+            identifier.getParserPosition());\n+      }\n+    });\n+    final String str = \"INSERT INTO `EMPS`\\n\"", "originalCommit": "bd1fbfe3c062af0879f36ad0e8b53cb0aaec3842", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2OTA1OQ==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r455069059", "bodyText": "Thanks, update the code.", "author": "xy2953396112", "createdAt": "2020-07-15T13:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2MDQ5NQ=="}], "type": "inlineReview"}, {"oid": "ae553d25668161a1df438b12b736d91bad0817b0", "url": "https://github.com/apache/calcite/commit/ae553d25668161a1df438b12b736d91bad0817b0", "message": "[CALCITE-4022] Support evaluate SqlInsert SqlBasicCall.toString() (Xu Zhaohui)", "committedDate": "2020-07-15T10:52:57Z", "type": "forcePushed"}, {"oid": "9a650e235799772ea508279b4cb50c61e773782c", "url": "https://github.com/apache/calcite/commit/9a650e235799772ea508279b4cb50c61e773782c", "message": "[CALCITE-4022] Support evaluate SqlInsert SqlBasicCall.toString() (Xu Zhaohui)", "committedDate": "2020-07-15T13:52:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ2MzQ0Ng==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r455463446", "bodyText": "Just use (SqlNodeList) operands.get(3) will be fine", "author": "yanlin-Lynn", "createdAt": "2020-07-16T01:54:53Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -261,6 +261,32 @@ public static boolean isLiteralChain(SqlNode node) {\n     }\n   }\n \n+  /**\n+   * Unparses a call to an operator which has special syntax.\n+   *\n+   * @param operator The operator\n+   * @param writer   Writer\n+   * @param call     List of 0 or more operands\n+   */\n+  public static void unparseSpecialSyntax(SqlOperator operator,\n+      SqlWriter writer,\n+      SqlCall call) {\n+    final List<SqlNode> operands = call.getOperandList();\n+    switch (operator.getKind()) {\n+    case INSERT:\n+      assert operands.size() == 4;\n+      final SqlInsert insert = new SqlInsert(call.getParserPosition(),\n+          (SqlNodeList) operands.get(0), operands.get(1), operands.get(2),\n+          operands.get(3) == null ? null : (SqlNodeList) operands.get(3));", "originalCommit": "9a650e235799772ea508279b4cb50c61e773782c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyODY3Nw==", "url": "https://github.com/apache/calcite/pull/2014#discussion_r455528677", "bodyText": "ok, Thanks a lot.", "author": "xy2953396112", "createdAt": "2020-07-16T06:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ2MzQ0Ng=="}], "type": "inlineReview"}, {"oid": "d73c2ebfea86eb6321c9436b9d15e6960b9702f8", "url": "https://github.com/apache/calcite/commit/d73c2ebfea86eb6321c9436b9d15e6960b9702f8", "message": "[CALCITE-4022] Support evaluate SqlInsert SqlBasicCall.toString() (Xu Zhaohui)", "committedDate": "2020-07-16T06:01:29Z", "type": "forcePushed"}, {"oid": "573eeaa3f023cffd05777e2b38b2a402d2752060", "url": "https://github.com/apache/calcite/commit/573eeaa3f023cffd05777e2b38b2a402d2752060", "message": "[CALCITE-4022] Support unparse special syntax when operator is INSERT (Xu Zhaohui)", "committedDate": "2020-07-17T11:27:35Z", "type": "forcePushed"}, {"oid": "a45f7b78e4d3891d36abfa9213c609f896601c36", "url": "https://github.com/apache/calcite/commit/a45f7b78e4d3891d36abfa9213c609f896601c36", "message": "[CALCITE-4022] Support unparse special syntax when operator is INSERT (Xu zhaohui)", "committedDate": "2020-07-17T11:41:53Z", "type": "commit"}, {"oid": "a45f7b78e4d3891d36abfa9213c609f896601c36", "url": "https://github.com/apache/calcite/commit/a45f7b78e4d3891d36abfa9213c609f896601c36", "message": "[CALCITE-4022] Support unparse special syntax when operator is INSERT (Xu zhaohui)", "committedDate": "2020-07-17T11:41:53Z", "type": "forcePushed"}]}