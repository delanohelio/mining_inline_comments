{"pr_number": 1837, "pr_title": "[CALCITE-3835] Overloaded table functions fail with an assertion error if param types differ", "pr_createdAt": "2020-02-27T17:00:31Z", "pr_url": "https://github.com/apache/calcite/pull/1837", "timeline": [{"oid": "aaa1a7bdda745ac111be3f6faf0bb82b79f3a488", "url": "https://github.com/apache/calcite/commit/aaa1a7bdda745ac111be3f6faf0bb82b79f3a488", "message": "[CALCITE-3835] Overloaded table functions fail with an assertion error if param types differ", "committedDate": "2020-03-05T17:27:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjczNA==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r397766734", "bodyText": "Does all kinds of functions return a non-empty list if the method call have parameter names ? I don't think so, and how about function.getParamNames().indexOf(argNames.get(i)) returns -1 there ?", "author": "danny0405", "createdAt": "2020-03-25T10:57:36Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java", "diffHunk": "@@ -676,14 +680,16 @@ public static boolean matchRoutinesByParameterCount(\n   }\n \n   private static RelDataType bestMatch(List<SqlFunction> sqlFunctions, int i,\n-      RelDataTypePrecedenceList precList) {\n+      List<String> argNames, RelDataTypePrecedenceList precList) {\n     RelDataType bestMatch = null;\n     for (SqlFunction function : sqlFunctions) {\n       List<RelDataType> paramTypes = function.getParamTypes();\n       if (paramTypes == null) {\n         continue;\n       }\n-      final RelDataType paramType = paramTypes.get(i);\n+      final RelDataType paramType = argNames != null\n+          ? paramTypes.get(function.getParamNames().indexOf(argNames.get(i)))", "originalCommit": "aaa1a7bdda745ac111be3f6faf0bb82b79f3a488", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwMDk1OQ==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r397800959", "bodyText": "@danny0405, good question!\nThis method is called after calling filterRoutinesByParameterType(), which will return false for the case when the incorrect name was specified in argNames list: \n  \n    \n      calcite/core/src/main/java/org/apache/calcite/sql/SqlUtil.java\n    \n    \n         Line 611\n      in\n      1baee85\n    \n    \n    \n    \n\n        \n          \n           final int i = function.getParamNames().indexOf(argName.e); \n        \n    \n  \n\n\nSo at this point, we will have a list of functions, that have all parameter names from argNames list, if it is specified.", "author": "vvysotskyi", "createdAt": "2020-03-25T12:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMjQwOA==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r397832408", "bodyText": "Thanks for the explanation. The code is a mess. Maybe we should have a method named filterRoutinesByParameterName", "author": "danny0405", "createdAt": "2020-03-25T12:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2OTE5Ng==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r398469196", "bodyText": "I have renamed filterRoutinesByParameterType() method and excracted logic connected with types and names permutation.", "author": "vvysotskyi", "createdAt": "2020-03-26T10:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjczNA=="}], "type": "inlineReview"}, {"oid": "5820c21a21dcb759f044749bbddb739274626445", "url": "https://github.com/apache/calcite/commit/5820c21a21dcb759f044749bbddb739274626445", "message": "[CALCITE-3835] Rename filterRoutinesByParameterType method and small refactor", "committedDate": "2020-03-26T10:05:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0ODA4Ng==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r398548086", "bodyText": "I think we should keep the old name. The passed in param is not necessary to be an array, so it maybe not overloaded.", "author": "danny0405", "createdAt": "2020-03-26T12:53:37Z", "path": "core/src/test/java/org/apache/calcite/test/JdbcTest.java", "diffHunk": "@@ -568,36 +572,44 @@ private void addTableMacro(Connection connection, Method method) throws SQLExcep\n     checkTableFunctionInModel(Smalls.TestStaticTableFunction.class);\n   }\n \n-  private CalciteAssert.AssertThat assertWithMacro(Class clazz) {\n+  private CalciteAssert.AssertThat assertOverloadedWithMacro(Class<?>... clazz) {\n+    String prefix = \"\"", "originalCommit": "5820c21a21dcb759f044749bbddb739274626445", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwODM5OQ==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r398808399", "bodyText": "Ok, thanks for pointing this, reverted changing method name.", "author": "vvysotskyi", "createdAt": "2020-03-26T18:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0ODA4Ng=="}], "type": "inlineReview"}, {"oid": "e2853074ba4855ee7a4a484951422150074c73a1", "url": "https://github.com/apache/calcite/commit/e2853074ba4855ee7a4a484951422150074c73a1", "message": "[CALCITE-3835] Overloaded table functions fail with an assertion error if param types differ", "committedDate": "2020-03-26T18:41:05Z", "type": "commit"}, {"oid": "e2853074ba4855ee7a4a484951422150074c73a1", "url": "https://github.com/apache/calcite/commit/e2853074ba4855ee7a4a484951422150074c73a1", "message": "[CALCITE-3835] Overloaded table functions fail with an assertion error if param types differ", "committedDate": "2020-03-26T18:41:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwODMwNw==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r399008307", "bodyText": "How can we resolve \"View\"(r=>'6', s=>'5')) since both TableMacroFunctionWithNamedParameters\nand AnotherTableMacroFunctionWithNamedParameters match?", "author": "chunweilei", "createdAt": "2020-03-27T02:57:22Z", "path": "core/src/test/java/org/apache/calcite/util/Smalls.java", "diffHunk": "@@ -843,6 +843,30 @@ private void abc(StringBuilder sb, Object s) {\n     }\n   }\n \n+  /** User-defined table-macro function with named and optional parameters. */\n+  public static class AnotherTableMacroFunctionWithNamedParameters {\n+    public TranslatableTable eval(\n+        @Parameter(name = \"R\", optional = true) String r,\n+        @Parameter(name = \"S\") String s,\n+        @Parameter(name = \"T\", optional = true) Integer t,\n+        @Parameter(name = \"S2\", optional = true) String s2) {\n+      final StringBuilder sb = new StringBuilder();\n+      abc(sb, r);\n+      abc(sb, s);\n+      abc(sb, t);", "originalCommit": "e2853074ba4855ee7a4a484951422150074c73a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNDY4MQ==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r399104681", "bodyText": "In this case, will be used the first registered function. Here is the code which returns it: \n  \n    \n      calcite/core/src/main/java/org/apache/calcite/sql/SqlUtil.java\n    \n    \n         Line 451\n      in\n      1baee85\n    \n    \n    \n    \n\n        \n          \n           return list.next();", "author": "vvysotskyi", "createdAt": "2020-03-27T08:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwODMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNjgxOA==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r399116818", "bodyText": "Without your patch, will it happen too?", "author": "chunweilei", "createdAt": "2020-03-27T08:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwODMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExOTA2MA==", "url": "https://github.com/apache/calcite/pull/1837#discussion_r399119060", "bodyText": "Yes, the behavior would be the same without these changes.", "author": "vvysotskyi", "createdAt": "2020-03-27T09:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwODMwNw=="}], "type": "inlineReview"}]}