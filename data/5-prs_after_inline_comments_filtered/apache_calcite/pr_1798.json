{"pr_number": 1798, "pr_title": "[CALCITE-2442] Remove .toDelete cassandra temp folder on Windows after tests", "pr_createdAt": "2020-02-11T21:50:59Z", "pr_url": "https://github.com/apache/calcite/pull/1798", "timeline": [{"oid": "107531ab2eaf332c0e8ec892d1c61884d0a4c79d", "url": "https://github.com/apache/calcite/commit/107531ab2eaf332c0e8ec892d1c61884d0a4c79d", "message": "[CALCITE-2442] Remove .toDelete cassandra temp folder on Windows after tests", "committedDate": "2020-02-12T18:57:10Z", "type": "forcePushed"}, {"oid": "fac314f4b7aa557786fad2396711773a57d1a659", "url": "https://github.com/apache/calcite/commit/fac314f4b7aa557786fad2396711773a57d1a659", "message": "[CALCITE-2442] Remove .toDelete cassandra temp folder on Windows after tests", "committedDate": "2020-02-12T19:12:03Z", "type": "forcePushed"}, {"oid": "ce50456b616c95dfbc914f6137f83116ccee7ad4", "url": "https://github.com/apache/calcite/commit/ce50456b616c95dfbc914f6137f83116ccee7ad4", "message": "[CALCITE-2442] Remove .toDelete cassandra temp folder on Windows after tests", "committedDate": "2020-02-12T19:23:23Z", "type": "forcePushed"}, {"oid": "1108ac60a02f8a8b38300eac191b518e27589d80", "url": "https://github.com/apache/calcite/commit/1108ac60a02f8a8b38300eac191b518e27589d80", "message": "[CALCITE-2442] Remove .toDelete cassandra temp folder on Windows after tests", "committedDate": "2020-02-12T20:17:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTAzMA==", "url": "https://github.com/apache/calcite/pull/1798#discussion_r378509030", "bodyText": "Is this really required?\nI thought it should have a way to properly shutdown cassandra", "author": "vlsi", "createdAt": "2020-02-12T20:59:13Z", "path": "cassandra/src/test/java/org/apache/calcite/test/CassandraExtension.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.test;\n+\n+import org.apache.calcite.config.CalciteSystemProperty;\n+import org.apache.calcite.util.Bug;\n+import org.apache.calcite.util.Sources;\n+import org.apache.calcite.util.TestUtil;\n+\n+import org.apache.cassandra.concurrent.StageManager;\n+import org.apache.cassandra.config.DatabaseDescriptor;\n+import org.apache.cassandra.db.WindowsFailedSnapshotTracker;\n+import org.apache.cassandra.service.CassandraDaemon;\n+import org.apache.cassandra.service.StorageService;\n+import org.apache.cassandra.utils.FBUtilities;\n+import org.apache.thrift.transport.TTransportException;\n+\n+import com.datastax.driver.core.Cluster;\n+import com.datastax.driver.core.Session;\n+import com.google.common.collect.ImmutableMap;\n+\n+import org.cassandraunit.utils.EmbeddedCassandraServerHelper;\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.Field;\n+import java.time.Duration;\n+import java.util.Locale;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * JUnit5 extension to start and stop embedded cassandra server.\n+ *\n+ * <p>Note that tests will be skipped if running on JDK11+\n+ * (which is not yet supported by cassandra) see\n+ *  <a href=\"https://issues.apache.org/jira/browse/CASSANDRA-9608\">CASSANDRA-9608</a>.\n+ */\n+class CassandraExtension implements ParameterResolver, ExecutionCondition {\n+\n+  private static final ExtensionContext.Namespace NAMESPACE =\n+      ExtensionContext.Namespace.create(CassandraExtension.class);\n+\n+  private static final String KEY = \"cassandra\";\n+\n+  @Override public boolean supportsParameter(final ParameterContext parameterContext,\n+      final ExtensionContext extensionContext) throws ParameterResolutionException {\n+    final Class<?> type = parameterContext.getParameter().getType();\n+    return Session.class.isAssignableFrom(type) || Cluster.class.isAssignableFrom(type);\n+  }\n+\n+  @Override public Object resolveParameter(final ParameterContext parameterContext,\n+      final ExtensionContext extensionContext) throws ParameterResolutionException {\n+\n+    Class<?> type = parameterContext.getParameter().getType();\n+    if (Session.class.isAssignableFrom(type)) {\n+      return getOrCreate(extensionContext).session;\n+    } else if (Cluster.class.isAssignableFrom(type)) {\n+      return getOrCreate(extensionContext).cluster;\n+    }\n+\n+    throw new ExtensionConfigurationException(\n+        String.format(Locale.ROOT, \"%s supports only %s or %s but yours was %s\",\n+        CassandraExtension.class.getSimpleName(),\n+        Session.class.getName(), Cluster.class.getName(), type.getName()));\n+  }\n+\n+  static ImmutableMap<String, String> getDataset(String resourcePath) {\n+    return ImmutableMap.of(\"model\",\n+        Sources.of(CassandraExtension.class.getResource(resourcePath))\n+            .file().getAbsolutePath());\n+  }\n+\n+  /**\n+   * Register cassandra resource in root context so it can be shared with other tests\n+   */\n+  private static CassandraResource getOrCreate(ExtensionContext context) {\n+    // same cassandra instance should be shared across all extension instances\n+    return context.getRoot()\n+        .getStore(NAMESPACE)\n+        .getOrComputeIfAbsent(KEY, key -> new CassandraResource(), CassandraResource.class);\n+  }\n+\n+  /**\n+   * Whether to run this test.\n+   * <p>Enabled by default, unless explicitly disabled\n+   * from command line ({@code -Dcalcite.test.cassandra=false}) or running on incompatible JDK\n+   * version (see below).\n+   *\n+   * <p>As of this wiring Cassandra 4.x is not yet released and we're using 3.x\n+   * (which fails on JDK11+). All cassandra tests will be skipped if\n+   * running on JDK11+.\n+   *\n+   * @see <a href=\"https://issues.apache.org/jira/browse/CASSANDRA-9608\">CASSANDRA-9608</a>\n+   * @return {@code true} if test is compatible with current environment,\n+   *         {@code false} otherwise\n+   */\n+  @Override public ConditionEvaluationResult evaluateExecutionCondition(\n+      final ExtensionContext context) {\n+    boolean enabled = CalciteSystemProperty.TEST_CASSANDRA.value();\n+    Bug.upgrade(\"remove JDK version check once current adapter supports Cassandra 4.x\");\n+    boolean compatibleJdk = TestUtil.getJavaMajorVersion() < 11;\n+    if (enabled && compatibleJdk) {\n+      return ConditionEvaluationResult.enabled(\"Cassandra enabled\");\n+    }\n+    return ConditionEvaluationResult.disabled(\"Cassandra tests disabled\");\n+  }\n+\n+  private static class CassandraResource implements ExtensionContext.Store.CloseableResource {\n+    private final Session session;\n+    private final Cluster cluster;\n+\n+    private CassandraResource() {\n+      startCassandra();\n+      this.cluster = EmbeddedCassandraServerHelper.getCluster();\n+      this.session = EmbeddedCassandraServerHelper.getSession();\n+    }\n+\n+    /**\n+     * Best effort to gracefully shutdown <strong>embedded</strong> cassandra cluster.\n+     *\n+     * Since it uses many static variables as well as {@link System#exit(int)} during close,\n+     * clean shutdown (as part of unit test) is not straightforward.\n+     */\n+    @Override public void close() {\n+\n+      session.close();\n+      cluster.close();\n+\n+      CassandraDaemon daemon = extractDaemon();\n+      if (daemon.thriftServer != null) {\n+        daemon.thriftServer.stop();\n+      }\n+      daemon.stopNativeTransport();\n+\n+      StorageService storage = StorageService.instance;\n+      storage.setRpcReady(false);\n+      storage.stopClient();\n+      storage.stopTransports();\n+      try {\n+        storage.drain(); // try to close all resources\n+      } catch (IOException | ExecutionException e) {\n+        throw new RuntimeException(e);\n+      } catch (InterruptedException e) {\n+        Thread.currentThread().interrupt();\n+      }\n+      StageManager.shutdownNow();\n+\n+      if (FBUtilities.isWindows) {\n+        // for some reason .toDelete stale folder is not deleted on cassandra shutdown\n+        // doing it manually here\n+        WindowsFailedSnapshotTracker.resetForTests();\n+        WindowsFailedSnapshotTracker.deleteOldSnapshots();\n+      }\n+    }\n+\n+    private static void startCassandra() {\n+      // This static init is necessary otherwise tests fail with CassandraUnit in IntelliJ (jdk10)\n+      // should be called right after constructor\n+      // NullPointerException for DatabaseDescriptor.getDiskFailurePolicy\n+      // for more info see\n+      // https://github.com/jsevellec/cassandra-unit/issues/249\n+      // https://github.com/jsevellec/cassandra-unit/issues/221\n+      DatabaseDescriptor.daemonInitialization();\n+\n+      // Apache Jenkins often fails with\n+      // Cassandra daemon did not start within timeout (20 sec by default)\n+      try {\n+        EmbeddedCassandraServerHelper.startEmbeddedCassandra(Duration.ofMinutes(1).toMillis());\n+      } catch (TTransportException e) {\n+        throw new RuntimeException(e);\n+      } catch (IOException e) {\n+        throw new UncheckedIOException(e);\n+      }\n+    }\n+\n+    /**\n+     * Extract {@link CassandraDaemon} instance using reflection. It will be used\n+     * to shutdown the cluster\n+     */\n+    private static CassandraDaemon extractDaemon() {\n+      try {\n+        Field field = EmbeddedCassandraServerHelper.class.getDeclaredField(\"cassandraDaemon\");\n+        field.setAccessible(true);\n+        CassandraDaemon daemon = (CassandraDaemon) field.get(null);", "originalCommit": "1108ac60a02f8a8b38300eac191b518e27589d80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMzY2NQ==", "url": "https://github.com/apache/calcite/pull/1798#discussion_r378513665", "bodyText": "Well I'm not sure Cassandra was ever meant to be embedded (example from CassandraDaemon.java):\n// code from CassandraDaemon.java\n\npublic void stop() {\n// ... \n// On windows, we need to stop the entire system as prunsrv doesn't have the jsvc hooks\n// We rely on the shutdown hook to drain the node\n  if (FBUtilities.isWindows)\n         System.exit(0);\n// .... \n}\nSystem.exit() inside Service.stop/close is very telling. So one has to find work-arounds to correctly shutdown cassandra without stopping JVM", "author": "asereda-gs", "createdAt": "2020-02-12T21:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTExMA==", "url": "https://github.com/apache/calcite/pull/1798#discussion_r378515110", "bodyText": "We use cassandra-unit to manage cassandra unfortunately they don't expose CassandraDaemon.\nPerhaps one can start Cassandra manually without cassandra-unit but I didn't want to introduce too many changes.", "author": "asereda-gs", "createdAt": "2020-02-12T21:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTYwOQ==", "url": "https://github.com/apache/calcite/pull/1798#discussion_r378509609", "bodyText": "Is this still valid?\nDoes it probably support Java 11?", "author": "vlsi", "createdAt": "2020-02-12T21:00:33Z", "path": "cassandra/src/test/java/org/apache/calcite/test/CassandraExtension.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.test;\n+\n+import org.apache.calcite.config.CalciteSystemProperty;\n+import org.apache.calcite.util.Bug;\n+import org.apache.calcite.util.Sources;\n+import org.apache.calcite.util.TestUtil;\n+\n+import org.apache.cassandra.concurrent.StageManager;\n+import org.apache.cassandra.config.DatabaseDescriptor;\n+import org.apache.cassandra.db.WindowsFailedSnapshotTracker;\n+import org.apache.cassandra.service.CassandraDaemon;\n+import org.apache.cassandra.service.StorageService;\n+import org.apache.cassandra.utils.FBUtilities;\n+import org.apache.thrift.transport.TTransportException;\n+\n+import com.datastax.driver.core.Cluster;\n+import com.datastax.driver.core.Session;\n+import com.google.common.collect.ImmutableMap;\n+\n+import org.cassandraunit.utils.EmbeddedCassandraServerHelper;\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.Field;\n+import java.time.Duration;\n+import java.util.Locale;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * JUnit5 extension to start and stop embedded cassandra server.\n+ *\n+ * <p>Note that tests will be skipped if running on JDK11+\n+ * (which is not yet supported by cassandra) see\n+ *  <a href=\"https://issues.apache.org/jira/browse/CASSANDRA-9608\">CASSANDRA-9608</a>.\n+ */\n+class CassandraExtension implements ParameterResolver, ExecutionCondition {\n+\n+  private static final ExtensionContext.Namespace NAMESPACE =\n+      ExtensionContext.Namespace.create(CassandraExtension.class);\n+\n+  private static final String KEY = \"cassandra\";\n+\n+  @Override public boolean supportsParameter(final ParameterContext parameterContext,\n+      final ExtensionContext extensionContext) throws ParameterResolutionException {\n+    final Class<?> type = parameterContext.getParameter().getType();\n+    return Session.class.isAssignableFrom(type) || Cluster.class.isAssignableFrom(type);\n+  }\n+\n+  @Override public Object resolveParameter(final ParameterContext parameterContext,\n+      final ExtensionContext extensionContext) throws ParameterResolutionException {\n+\n+    Class<?> type = parameterContext.getParameter().getType();\n+    if (Session.class.isAssignableFrom(type)) {\n+      return getOrCreate(extensionContext).session;\n+    } else if (Cluster.class.isAssignableFrom(type)) {\n+      return getOrCreate(extensionContext).cluster;\n+    }\n+\n+    throw new ExtensionConfigurationException(\n+        String.format(Locale.ROOT, \"%s supports only %s or %s but yours was %s\",\n+        CassandraExtension.class.getSimpleName(),\n+        Session.class.getName(), Cluster.class.getName(), type.getName()));\n+  }\n+\n+  static ImmutableMap<String, String> getDataset(String resourcePath) {\n+    return ImmutableMap.of(\"model\",\n+        Sources.of(CassandraExtension.class.getResource(resourcePath))\n+            .file().getAbsolutePath());\n+  }\n+\n+  /**\n+   * Register cassandra resource in root context so it can be shared with other tests\n+   */\n+  private static CassandraResource getOrCreate(ExtensionContext context) {\n+    // same cassandra instance should be shared across all extension instances\n+    return context.getRoot()\n+        .getStore(NAMESPACE)\n+        .getOrComputeIfAbsent(KEY, key -> new CassandraResource(), CassandraResource.class);\n+  }\n+\n+  /**\n+   * Whether to run this test.\n+   * <p>Enabled by default, unless explicitly disabled\n+   * from command line ({@code -Dcalcite.test.cassandra=false}) or running on incompatible JDK\n+   * version (see below).\n+   *\n+   * <p>As of this wiring Cassandra 4.x is not yet released and we're using 3.x\n+   * (which fails on JDK11+). All cassandra tests will be skipped if\n+   * running on JDK11+.\n+   *\n+   * @see <a href=\"https://issues.apache.org/jira/browse/CASSANDRA-9608\">CASSANDRA-9608</a>\n+   * @return {@code true} if test is compatible with current environment,\n+   *         {@code false} otherwise\n+   */\n+  @Override public ConditionEvaluationResult evaluateExecutionCondition(\n+      final ExtensionContext context) {\n+    boolean enabled = CalciteSystemProperty.TEST_CASSANDRA.value();\n+    Bug.upgrade(\"remove JDK version check once current adapter supports Cassandra 4.x\");\n+    boolean compatibleJdk = TestUtil.getJavaMajorVersion() < 11;\n+    if (enabled && compatibleJdk) {\n+      return ConditionEvaluationResult.enabled(\"Cassandra enabled\");", "originalCommit": "1108ac60a02f8a8b38300eac191b518e27589d80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTc0OA==", "url": "https://github.com/apache/calcite/pull/1798#discussion_r378515748", "bodyText": "Cassandra support for JDK11 was introduced in 4.x (see CASSANDRA-9608) we still use 3.6", "author": "asereda-gs", "createdAt": "2020-02-12T21:14:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTYwOQ=="}], "type": "inlineReview"}, {"oid": "a005e96141235cedf4e55fe5cc9e73c7f552e51c", "url": "https://github.com/apache/calcite/commit/a005e96141235cedf4e55fe5cc9e73c7f552e51c", "message": "[CALCITE-2442] Remove .toDelete cassandra temp folder on Windows after tests\n\nMigrate JUnit4 base class to JUnit5 extension", "committedDate": "2020-02-12T21:15:33Z", "type": "forcePushed"}, {"oid": "f1da370e83e73d3427c2a0321011ad0f5cc3a379", "url": "https://github.com/apache/calcite/commit/f1da370e83e73d3427c2a0321011ad0f5cc3a379", "message": "[CALCITE-2442] Remove .toDelete cassandra temp folder on Windows after tests\n\nMigrate JUnit4 base class to JUnit5 extension", "committedDate": "2020-02-13T02:44:19Z", "type": "commit"}, {"oid": "f1da370e83e73d3427c2a0321011ad0f5cc3a379", "url": "https://github.com/apache/calcite/commit/f1da370e83e73d3427c2a0321011ad0f5cc3a379", "message": "[CALCITE-2442] Remove .toDelete cassandra temp folder on Windows after tests\n\nMigrate JUnit4 base class to JUnit5 extension", "committedDate": "2020-02-13T02:44:19Z", "type": "forcePushed"}]}