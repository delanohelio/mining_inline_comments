{"pr_number": 2272, "pr_title": "[CALCITE-4409] Improve exception when RelBuilder tries to create a field on a non-struct expression", "pr_createdAt": "2020-11-19T16:05:47Z", "pr_url": "https://github.com/apache/calcite/pull/2272", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528544841", "bodyText": "I am wondering where is it better to add this check here or inside RexBuilder#makeFieldAccess. Clients who call RexBuilder direclty will still get the NPE.", "author": "zabetak", "createdAt": "2020-11-23T08:50:34Z", "path": "core/src/main/java/org/apache/calcite/tools/RelBuilder.java", "diffHunk": "@@ -495,6 +495,10 @@ public RexNode field(int inputCount, String alias, String fieldName) {\n \n   /** Returns a reference to a given field of a record-valued expression. */\n   public RexNode field(RexNode e, String name) {\n+    if (!e.getType().isStruct()) {\n+      throw new IllegalArgumentException(\"Requested field \" + name + \" in non-struct expression \"\n+          + e.toString() + \" (type: \" + e.getType() + \")\");\n+    }", "originalCommit": "7ee85afae2e19f02113913b97a37e79b8ff956bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1OTgxNg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528559816", "bodyText": "I have the impression that the RelBuilder build rel trees based on all kinds of assumptions, it assumes that the invoker knows how to behave with the valid operands. We may need to check all the interfaces in RelBuilder, this PR is a good start.", "author": "danny0405", "createdAt": "2020-11-23T09:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2MzAzNw==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528563037", "bodyText": "Thanks for the feedback. Looking again at this code in particular, I have the impression that a simpler fix for this specific issue would be leaving RelBuilder untouched and modify this line in RelDataTypeImpl.getField:\n  @Override public RelDataTypeField getField(String fieldName, boolean caseSensitive,\n      boolean elideRecord) {\n    for (RelDataTypeField field : fieldList) {\n// =>\n  @Override public RelDataTypeField getField(String fieldName, boolean caseSensitive,\n      boolean elideRecord) {\n    for (RelDataTypeField field : getFieldList()) {  // change here\n\nWith this change, the scenario in the Jira would fail with an AssertionError (thrown by getFieldList()) instead of NPE.", "author": "rubenada", "createdAt": "2020-11-23T09:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2MzcxMg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528563712", "bodyText": "I believe this check should be moved to org.apache.calcite.rel.type.RelDataTypeImpl#getField\nThen all uses of RelDataTypeImpl#getField would get the proper exception rather than NPE.", "author": "vlsi", "createdAt": "2020-11-23T09:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2NTg3Ng==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528565876", "bodyText": "@vlsi we had the same thought :)", "author": "rubenada", "createdAt": "2020-11-23T09:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2NjM3MA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528566370", "bodyText": "With this change, the scenario in the Jira would fail with an AssertionError (thrown by getFieldList()) instead of NPE.\n\nPlease use the tailored null check and the proper exception so the user could know which field is wrong. Then user could relate the problematic field name to the input SQL.", "author": "vlsi", "createdAt": "2020-11-23T09:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5NjkxNQ==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528596915", "bodyText": "After a second thought, apart from changing RelDataTypeImpl to have an AssertionError instead of NPE, I added a specific check in RexBuilder, in order to have the same behavior in both public methods makeFieldAccess", "author": "rubenada", "createdAt": "2020-11-23T10:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNjgzNg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528606836", "bodyText": "An assertion in RelDataTypeImpl is enough. What is the purpose of duplicating the same check in multiple places?", "author": "vlsi", "createdAt": "2020-11-23T10:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNjQ3Nw==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528616477", "bodyText": "Just in case, there's org.apache.calcite.piglet.DynamicTupleRecordType which supports getField(String), and it is not struct at the same time.\nThat is why I'm inlined isStruct() check must not be added.", "author": "vlsi", "createdAt": "2020-11-23T10:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNzg4NA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528617884", "bodyText": "The reason would be having the same \"tailored check\" in both RexBuilder methods:\npublic RexNode makeFieldAccess(RexNode expr, String fieldName, boolean caseSensitive) {...}\npublic RexNode makeFieldAccess(RexNode expr,int i) {...}\n\nAlso, there is the fact that assertions can be deactivated, so I would lean towards an IllegalArgumentException in this case.\nFinally, we do know that RelDataTypeImpl has some assertions in place, but it is not defined the behavior that other RelDataType implementions may have in this situation.\nHaving said that, if the community thinks these checks are redundant, I am not against removing them, keeping both RexBuilder#makeFieldAccess methods as they are; and in case of incorrect calls they will both eventually fail with AssertionError thrown by RelDataTypeImpl when the try to call getField or getFieldList", "author": "rubenada", "createdAt": "2020-11-23T10:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMTgyNA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528621824", "bodyText": "@vlsi if I am not mistaken, org.apache.calcite.piglet.DynamicTupleRecordType inherits isStruct from org.apache.calcite.rel.type.DynamicRecordTypeImpl:\n  @Override public boolean isStruct() {\n    return true;\n  }\n\nBut, what you say is a valid point, if we have the assumption that a non-struct type can support getField, then isStruct() check must not be added. I'm not sure if this scenario makes sense at all (it seems to go against RelDataType methods' javadoc), but just in case perhaps the most conservative approach would be removing the  isStruct()  check and just rely on the AssertionError thrown by RelDataTypeImpl.\nHonestly, this is a minor change, I am open to any suggestion.", "author": "rubenada", "createdAt": "2020-11-23T11:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMjI2NQ==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528622265", "bodyText": "I'm inclined it should be IllegalStateException since any argument to RelDataTypeImpl#getField would result in an exception.", "author": "vlsi", "createdAt": "2020-11-23T11:03:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNzYzNA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528627634", "bodyText": "I proposed IllegalArgumentException, considering the first argument to be the illegal one (RexNode expr, having a non-struct type). But I can see IllegalStateException fitting here as well.\n@zabetak @danny0405 what are your thoughts regarding the new proposal? Are you against adding the check in RexBuilder#makefieldAccess (hence having an AssertionError from RelDataTypleImpl); or for adding check (in which case, would you see it as an IllegalArgumentException or IllegalStateException)?", "author": "rubenada", "createdAt": "2020-11-23T11:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyODg1OA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528628858", "bodyText": "Basically, I do not like to make RexBuilder aware of the ways getField can fail.\nIn other words, it is not RexBuilder's business to tell if non-structs are allowed to have fields or not.\nI've had a very similar discussion with @julianhyde in https://issues.apache.org/jira/browse/CALCITE-4217, and the takeaway was \"don't try to make sense of struct vs fieldList\".\nThat is why I believe the necessary and sufficient solution here is:\n\n\nDelegate the proper exception message to org.apache.calcite.rel.type.RelDataType#getField(String fieldName, ...) implementations. In other words, if someone implements RelDataType, then it is their business to throw the appropriate exception.\n\n\norg.apache.calcite.rex.RexBuilder#makeFieldAccess(org.apache.calcite.rex.RexNode, int) is slightly different since it can't delegate to RelDataType, and it has to call type.getFieldList(). It could be left as is, and the type implementation would throw \"type ... has no fields\" (which might be enough).\nIf you want to add clarification with the problematic RexNode, then you could use\n\n\ntry {\n  final List<RelDataTypeField> fields = type.getFieldList();\n} catch (RuntimeException e) {\n  e.addSuppressed(new Throwable(\"Unable to get field \" + i + \" from rexNode \" + rexNode\");\n  throw e\n}\nThe important point is in both cases RexBuilder makes no assumptions on struct vs non-struct.", "author": "vlsi", "createdAt": "2020-11-23T11:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYzMTA4OA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528631088", "bodyText": "Ah, indeed, RelCrossType is a case when isStruct == false and getFieldList() returns non-null, so .isStruct() check must not be added to RexBuilder.", "author": "vlsi", "createdAt": "2020-11-23T11:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYzNDI3Mg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528634272", "bodyText": "Ah, indeed, RelCrossType is a case when isStruct == false and getFieldList() returns non-null.\n\nWell spotted, thanks for the feedback. I'll revert the changes in RexBuilder", "author": "rubenada", "createdAt": "2020-11-23T11:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY0MjkzNw==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528642937", "bodyText": "Committed new proposal taking into account @vlsi 's input", "author": "rubenada", "createdAt": "2020-11-23T11:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDQ1Ng==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r528690456", "bodyText": "In which case, user can pass in a null fieldList ? I would rather to move the check to the builder that generate the RelDataTypeImpl instance.\nThe exception message is also confusing, we should tell user why he does wrong but not \"we got null field list\".", "author": "danny0405", "createdAt": "2020-11-23T13:08:34Z", "path": "core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java", "diffHunk": "@@ -79,6 +79,10 @@ protected RelDataTypeImpl() {\n \n   @Override public RelDataTypeField getField(String fieldName, boolean caseSensitive,\n       boolean elideRecord) {\n+    if (fieldList == null) {\n+      throw new IllegalStateException(\"Requested field \" + fieldName\n+          + \" in a type with null fieldList, type = \" + this);", "originalCommit": "e3e22b6ed37485affbf01ad89af5cd03c936585a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3MDYxOQ==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r529270619", "bodyText": "@danny0405 any \"simple\" (i.e. non-struct) type will have a null fieldList.\nThe problem is not having a null fieldList (which is valid), the problem is trying to access this list (e.g. via getField, but also getFieldList, getFieldNames, getFieldCount...) when this list is null", "author": "rubenada", "createdAt": "2020-11-24T08:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MzI5MA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530183290", "bodyText": "I agree that type with null fieldList is too low-level for RelDataType users, however, I don't know the better message.\nThe following might be slightly bit better: \"The current type \" + this + \" does not support named field lookup, so field \" + fieldName + \" can't be located\"", "author": "vlsi", "createdAt": "2020-11-25T08:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3NzI4NQ==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530277285", "bodyText": "Exception message reviewed to make it more high level", "author": "rubenada", "createdAt": "2020-11-25T10:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2MDY1Mg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530460652", "bodyText": "I\u2019d prefer a simpler error message, such as \u201cType does not support fields\u201d. Especially if it\u2019s emitted by RelDataType, which is a low level class and not supposed to be user-friendly.", "author": "julianhyde", "createdAt": "2020-11-25T15:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2Mzg5OA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530463898", "bodyText": "Exceptions should always be meaningful, even the low-level ones.", "author": "vlsi", "createdAt": "2020-11-25T15:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ3MzQwMg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530473402", "bodyText": "My suggestion is meaningful, too.\nThe verbose message says that the type doesn\u2019t support named field lookup. So the reader will wonder whether it supports field lookup by other means. No, it doesn\u2019t have fields. Just say that.\nA simple message is sufficient for the user to diagnose their problem.", "author": "julianhyde", "createdAt": "2020-11-25T15:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ3OTU5Mg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530479592", "bodyText": "Please suggest exact pattern to insert into new IllegalStateException(...)", "author": "vlsi", "createdAt": "2020-11-25T15:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDQ1Ng=="}], "type": "inlineReview"}, {"oid": "367181d776964196529377367f396ffe9f812d44", "url": "https://github.com/apache/calcite/commit/367181d776964196529377367f396ffe9f812d44", "message": "[CALCITE-4409] Improve exception when RelBuilder tries to create a field on a non-struct expression", "committedDate": "2020-11-25T10:45:30Z", "type": "forcePushed"}, {"oid": "7fc50b015bca2df4dbe41c7fd07bed6b5cf3c1ff", "url": "https://github.com/apache/calcite/commit/7fc50b015bca2df4dbe41c7fd07bed6b5cf3c1ff", "message": "[CALCITE-4409] Improve exception when RelBuilder tries to create a field on a non-struct expression", "committedDate": "2020-11-25T16:13:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjgyNg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530732826", "bodyText": "What is the purpose to split into two containsString here ?", "author": "danny0405", "createdAt": "2020-11-26T02:06:44Z", "path": "core/src/test/java/org/apache/calcite/test/RelBuilderTest.java", "diffHunk": "@@ -2577,6 +2577,22 @@ private RelNode buildRelWithDuplicateAggregates(\n     assertThat(ex.getMessage(), allOf(containsString(\"Expression\"), containsString(\"not found\")));\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4409\">[CALCITE-4409]\n+   * Improve exception when RelBuilder tries to create a field on a non-struct expression</a>. */\n+  @Test void testFieldOnNonStructExpression() {\n+    final RelBuilder builder = RelBuilder.create(config().build());\n+    IllegalStateException ex = assertThrows(IllegalStateException.class, () -> {\n+      builder.scan(\"EMP\")\n+          .project(\n+              builder.field(builder.field(\"EMPNO\"), \"abc\"))\n+          .build();\n+    }, \"Field should fail since we are trying access a field on expression with non-struct type\");\n+    assertThat(ex.getMessage(),\n+        allOf(containsString(\"Trying to access field\"),\n+            containsString(\"in a type with no fields\")));", "originalCommit": "7fc50b015bca2df4dbe41c7fd07bed6b5cf3c1ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzNjQ2Ng==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530836466", "bodyText": "Simply because the actual fieldName value goes in between, and it is not really relevant in order to verify the exception message. I just followed the same pattern as the test just above.", "author": "rubenada", "createdAt": "2020-11-26T08:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0MDg0MA==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530840840", "bodyText": "The field name does not change over time, so it would be better to use regular is(\"....\") matcher to get better feedback in IDE and CI", "author": "vlsi", "createdAt": "2020-11-26T08:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0MzAxNg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530843016", "bodyText": "Just to confirm, the verification with is(...) would look like:\nassertThat(ex.getMessage(), is(\"Trying to access field abc in a type with no fields: SMALLINT\"));\nIs that what you both would prefer?", "author": "rubenada", "createdAt": "2020-11-26T08:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0MzU2OQ==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530843569", "bodyText": "Exactly.", "author": "vlsi", "createdAt": "2020-11-26T08:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg1NDgwMg==", "url": "https://github.com/apache/calcite/pull/2272#discussion_r530854802", "bodyText": "Ok, changed.", "author": "rubenada", "createdAt": "2020-11-26T08:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjgyNg=="}], "type": "inlineReview"}, {"oid": "22646543a6aa28f24d136093f556ce7154eec528", "url": "https://github.com/apache/calcite/commit/22646543a6aa28f24d136093f556ce7154eec528", "message": "[CALCITE-4409] Improve exception when RelBuilder tries to create a field on a non-struct expression", "committedDate": "2020-11-26T08:35:35Z", "type": "commit"}, {"oid": "22646543a6aa28f24d136093f556ce7154eec528", "url": "https://github.com/apache/calcite/commit/22646543a6aa28f24d136093f556ce7154eec528", "message": "[CALCITE-4409] Improve exception when RelBuilder tries to create a field on a non-struct expression", "committedDate": "2020-11-26T08:35:35Z", "type": "forcePushed"}]}