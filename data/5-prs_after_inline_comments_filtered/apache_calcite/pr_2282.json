{"pr_number": 2282, "pr_title": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "pr_createdAt": "2020-11-27T04:28:51Z", "pr_url": "https://github.com/apache/calcite/pull/2282", "timeline": [{"oid": "f676ce4dc8cada556e66a43e82a8891e05f2ef93", "url": "https://github.com/apache/calcite/commit/f676ce4dc8cada556e66a43e82a8891e05f2ef93", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2020-11-27T04:45:51Z", "type": "forcePushed"}, {"oid": "1f832eea64b98c766d5cd750b341e7bb628afc30", "url": "https://github.com/apache/calcite/commit/1f832eea64b98c766d5cd750b341e7bb628afc30", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2020-11-27T05:53:58Z", "type": "forcePushed"}, {"oid": "16333305cc14637b854ad38cbb111ce7445ec1e2", "url": "https://github.com/apache/calcite/commit/16333305cc14637b854ad38cbb111ce7445ec1e2", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2020-11-27T06:22:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgzNTIwNQ==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r531835205", "bodyText": "It might not be true. Sometimes users may want it to throw an exception.", "author": "chunweilei", "createdAt": "2020-11-28T04:07:01Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -329,6 +336,93 @@ private RexNode simplifyGenericNode(RexCall e) {\n     return rexBuilder.makeCall(e.getType(), e.getOperator(), operands);\n   }\n \n+  /**\n+   * Try to find a literal with the given value in the input list.\n+   */\n+  private int findLiteralIndex(List<RexNode> operands, long value) {\n+    for (int i = 0; i < operands.size(); i++) {\n+      if (operands.get(i).isA(SqlKind.LITERAL)) {\n+        Comparable comparable = ((RexLiteral) operands.get(i)).getValue();\n+        if (comparable instanceof BigDecimal && ((BigDecimal) comparable).longValue() == value) {\n+          return i;\n+        }\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  private RexNode simplifyArithmetic(RexCall e) {\n+    if (e.getType().getSqlTypeName().getFamily() != SqlTypeFamily.NUMERIC\n+        || e.getOperands().stream()\n+        .anyMatch(o -> e.getType().getSqlTypeName().getFamily() != SqlTypeFamily.NUMERIC)) {\n+      // we only support simplifying numeric types\n+      return simplifyGenericNode(e);\n+    }\n+\n+    assert e.getOperands().size() == 2;\n+\n+    // if any operand is null, the result will be null\n+    if (RexUtil.isNullLiteral(e.operands.get(0), true)\n+        || RexUtil.isNullLiteral(e.operands.get(1), true)) {\n+      return rexBuilder.makeNullLiteral(e.type);\n+    }", "originalCommit": "16333305cc14637b854ad38cbb111ce7445ec1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM0NjU0OQ==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r532346549", "bodyText": "Thanks for your feedback. It makes sense. This logic is removed.", "author": "liyafan82", "createdAt": "2020-11-30T04:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgzNTIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgzNjIzOQ==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r531836239", "bodyText": "Can a - a be simplified to 0 if a is not nullable?", "author": "chunweilei", "createdAt": "2020-11-28T04:08:33Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -329,6 +336,93 @@ private RexNode simplifyGenericNode(RexCall e) {\n     return rexBuilder.makeCall(e.getType(), e.getOperator(), operands);\n   }\n \n+  /**\n+   * Try to find a literal with the given value in the input list.\n+   */\n+  private int findLiteralIndex(List<RexNode> operands, long value) {\n+    for (int i = 0; i < operands.size(); i++) {\n+      if (operands.get(i).isA(SqlKind.LITERAL)) {\n+        Comparable comparable = ((RexLiteral) operands.get(i)).getValue();\n+        if (comparable instanceof BigDecimal && ((BigDecimal) comparable).longValue() == value) {\n+          return i;\n+        }\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  private RexNode simplifyArithmetic(RexCall e) {\n+    if (e.getType().getSqlTypeName().getFamily() != SqlTypeFamily.NUMERIC\n+        || e.getOperands().stream()\n+        .anyMatch(o -> e.getType().getSqlTypeName().getFamily() != SqlTypeFamily.NUMERIC)) {\n+      // we only support simplifying numeric types\n+      return simplifyGenericNode(e);\n+    }\n+\n+    assert e.getOperands().size() == 2;\n+\n+    // if any operand is null, the result will be null\n+    if (RexUtil.isNullLiteral(e.operands.get(0), true)\n+        || RexUtil.isNullLiteral(e.operands.get(1), true)) {\n+      return rexBuilder.makeNullLiteral(e.type);\n+    }\n+\n+    switch (e.getKind()) {\n+    case PLUS:\n+      return simplifyPlus(e);\n+    case MINUS:\n+      return simplifyMinus(e);\n+    case TIMES:\n+      return simplifyMultiply(e);\n+    case DIVIDE:\n+      return simplifyDivide(e);\n+    default:\n+      throw new IllegalArgumentException(\"Unsupported arithmeitc operation \" + e.getKind());\n+    }\n+  }\n+\n+  private RexNode simplifyPlus(RexCall e) {\n+    int zeroIndex = findLiteralIndex(e.operands, 0L);\n+    if (zeroIndex >= 0) {\n+      // return the other operand\n+      RexNode other = e.getOperands().get((zeroIndex + 1) % 2);\n+      return other.getType().equals(e.getType())\n+          ? other : rexBuilder.makeCast(e.getType(), other);\n+    }\n+    return simplifyGenericNode(e);\n+  }\n+\n+  private RexNode simplifyMinus(RexCall e) {\n+    int zeroIndex = findLiteralIndex(e.operands, 0L);\n+    if (zeroIndex == 1) {\n+      RexNode leftOperand = e.getOperands().get(0);\n+      return leftOperand.getType().equals(e.getType())\n+          ? leftOperand : rexBuilder.makeCast(e.getType(), leftOperand);", "originalCommit": "16333305cc14637b854ad38cbb111ce7445ec1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM0NjkzNA==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r532346934", "bodyText": "Thanks for the suggestion.\nThere are some special cases for which this is not true. For example,\nNaN - NaN = NaN\nInf - Inf = NaN", "author": "liyafan82", "createdAt": "2020-11-30T04:51:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgzNjIzOQ=="}], "type": "inlineReview"}, {"oid": "68f497f4f08cde35f47c3777e90a21d4259ac1c3", "url": "https://github.com/apache/calcite/commit/68f497f4f08cde35f47c3777e90a21d4259ac1c3", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2020-11-30T04:47:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMDIwNA==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r533010204", "bodyText": "Make it final since it's our convention.", "author": "chunweilei", "createdAt": "2020-12-01T01:20:15Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -332,6 +339,87 @@ private RexNode simplifyGenericNode(RexCall e) {\n     return rexBuilder.makeCall(e.getType(), e.getOperator(), operands);\n   }\n \n+  /**\n+   * Try to find a literal with the given value in the input list.\n+   */\n+  private int findLiteralIndex(List<RexNode> operands, long value) {\n+    for (int i = 0; i < operands.size(); i++) {\n+      if (operands.get(i).isA(SqlKind.LITERAL)) {\n+        Comparable comparable = ((RexLiteral) operands.get(i)).getValue();\n+        if (comparable instanceof BigDecimal && ((BigDecimal) comparable).longValue() == value) {\n+          return i;\n+        }\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  private RexNode simplifyArithmetic(RexCall e) {\n+    if (e.getType().getSqlTypeName().getFamily() != SqlTypeFamily.NUMERIC\n+        || e.getOperands().stream()\n+        .anyMatch(o -> e.getType().getSqlTypeName().getFamily() != SqlTypeFamily.NUMERIC)) {\n+      // we only support simplifying numeric types\n+      return simplifyGenericNode(e);\n+    }\n+\n+    assert e.getOperands().size() == 2;\n+\n+    switch (e.getKind()) {\n+    case PLUS:\n+      return simplifyPlus(e);\n+    case MINUS:\n+      return simplifyMinus(e);\n+    case TIMES:\n+      return simplifyMultiply(e);\n+    case DIVIDE:\n+      return simplifyDivide(e);\n+    default:\n+      throw new IllegalArgumentException(\"Unsupported arithmeitc operation \" + e.getKind());\n+    }\n+  }\n+\n+  private RexNode simplifyPlus(RexCall e) {\n+    int zeroIndex = findLiteralIndex(e.operands, 0L);\n+    if (zeroIndex >= 0) {\n+      // return the other operand\n+      RexNode other = e.getOperands().get((zeroIndex + 1) % 2);\n+      return other.getType().equals(e.getType())\n+          ? other : rexBuilder.makeCast(e.getType(), other);\n+    }\n+    return simplifyGenericNode(e);\n+  }\n+\n+  private RexNode simplifyMinus(RexCall e) {\n+    int zeroIndex = findLiteralIndex(e.operands, 0L);\n+    if (zeroIndex == 1) {\n+      RexNode leftOperand = e.getOperands().get(0);\n+      return leftOperand.getType().equals(e.getType())\n+          ? leftOperand : rexBuilder.makeCast(e.getType(), leftOperand);\n+    }\n+    return simplifyGenericNode(e);\n+  }\n+\n+  private RexNode simplifyMultiply(RexCall e) {\n+    int oneIndex = findLiteralIndex(e.operands, 1L);\n+    if (oneIndex >= 0) {", "originalCommit": "68f497f4f08cde35f47c3777e90a21d4259ac1c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODQwMA==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r533098400", "bodyText": "Revised. Thanks for the good suggestion.", "author": "liyafan82", "createdAt": "2020-12-01T06:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMDIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMDg5MQ==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r533010891", "bodyText": "Add . to the end of the sentence.", "author": "chunweilei", "createdAt": "2020-12-01T01:22:22Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -332,6 +339,87 @@ private RexNode simplifyGenericNode(RexCall e) {\n     return rexBuilder.makeCall(e.getType(), e.getOperator(), operands);\n   }\n \n+  /**\n+   * Try to find a literal with the given value in the input list.\n+   */\n+  private int findLiteralIndex(List<RexNode> operands, long value) {\n+    for (int i = 0; i < operands.size(); i++) {\n+      if (operands.get(i).isA(SqlKind.LITERAL)) {\n+        Comparable comparable = ((RexLiteral) operands.get(i)).getValue();\n+        if (comparable instanceof BigDecimal && ((BigDecimal) comparable).longValue() == value) {\n+          return i;\n+        }\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  private RexNode simplifyArithmetic(RexCall e) {\n+    if (e.getType().getSqlTypeName().getFamily() != SqlTypeFamily.NUMERIC\n+        || e.getOperands().stream()\n+        .anyMatch(o -> e.getType().getSqlTypeName().getFamily() != SqlTypeFamily.NUMERIC)) {\n+      // we only support simplifying numeric types\n+      return simplifyGenericNode(e);", "originalCommit": "68f497f4f08cde35f47c3777e90a21d4259ac1c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODQ1Mg==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r533098452", "bodyText": "Done. Thanks.", "author": "liyafan82", "createdAt": "2020-12-01T06:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMDg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTI1MQ==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r533011251", "bodyText": "Could you mark it that it only supports numeric type?", "author": "chunweilei", "createdAt": "2020-12-01T01:23:39Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -332,6 +339,87 @@ private RexNode simplifyGenericNode(RexCall e) {\n     return rexBuilder.makeCall(e.getType(), e.getOperator(), operands);\n   }\n \n+  /**\n+   * Try to find a literal with the given value in the input list.\n+   */\n+  private int findLiteralIndex(List<RexNode> operands, long value) {\n+    for (int i = 0; i < operands.size(); i++) {\n+      if (operands.get(i).isA(SqlKind.LITERAL)) {\n+        Comparable comparable = ((RexLiteral) operands.get(i)).getValue();\n+        if (comparable instanceof BigDecimal && ((BigDecimal) comparable).longValue() == value) {\n+          return i;\n+        }", "originalCommit": "68f497f4f08cde35f47c3777e90a21d4259ac1c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5ODU3NA==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r533098574", "bodyText": "Sure. I've made it explicit in the JavaDoc.", "author": "liyafan82", "createdAt": "2020-12-01T06:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTI1MQ=="}], "type": "inlineReview"}, {"oid": "00b866e207d783a070d27921d114af660d0b1f96", "url": "https://github.com/apache/calcite/commit/00b866e207d783a070d27921d114af660d0b1f96", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2020-12-01T06:22:45Z", "type": "forcePushed"}, {"oid": "1edcd5adc5d674728aee6c4f35fcc971add611fb", "url": "https://github.com/apache/calcite/commit/1edcd5adc5d674728aee6c4f35fcc971add611fb", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2020-12-01T06:25:03Z", "type": "forcePushed"}, {"oid": "11add5bf0fa6b861f4b826f418bc6ea7a18565f6", "url": "https://github.com/apache/calcite/commit/11add5bf0fa6b861f4b826f418bc6ea7a18565f6", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2021-06-25T10:21:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTA4NjY5Nw==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r659086697", "bodyText": "Could you please add a test like add(zero, sub(vInt(0), vInt(0)))?\nThe expression should evaluate to null in case vInt(0) is null.", "author": "vlsi", "createdAt": "2021-06-25T23:53:46Z", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -3224,4 +3224,25 @@ private SqlSpecialOperatorWithPolicy(String name, SqlKind kind, int prec, boolea\n   @Test void testSimplifyVarbinary() {\n     checkSimplifyUnchanged(cast(cast(vInt(), tVarchar(true, 100)), tVarbinary(true)));\n   }\n+\n+  @Test void testSimplifySimpleArithmetic() {\n+    RexNode a = vIntNotNull(1);\n+    RexNode zero = literal(0);\n+    RexNode one = literal(1);\n+\n+    RexNode b = vDecimalNotNull(2);\n+    RexNode half = literal(new BigDecimal(0.5), b.getType());\n+\n+    checkSimplify(add(a, zero), \"?0.notNullInt1\");", "originalCommit": "11add5bf0fa6b861f4b826f418bc6ea7a18565f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTQ3NDM0Nw==", "url": "https://github.com/apache/calcite/pull/2282#discussion_r659474347", "bodyText": "Good point. Thanks. @vlsi\nI have added some test cases concerning null. Please check.", "author": "liyafan82", "createdAt": "2021-06-28T04:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTA4NjY5Nw=="}], "type": "inlineReview"}, {"oid": "2e2f331968fc3848c4a24e5d9042fa9854331578", "url": "https://github.com/apache/calcite/commit/2e2f331968fc3848c4a24e5d9042fa9854331578", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2021-06-28T04:42:20Z", "type": "commit"}, {"oid": "2e2f331968fc3848c4a24e5d9042fa9854331578", "url": "https://github.com/apache/calcite/commit/2e2f331968fc3848c4a24e5d9042fa9854331578", "message": "[CALCITE-4420] Some simple arithmetic operations can be simplified", "committedDate": "2021-06-28T04:42:20Z", "type": "forcePushed"}]}