{"pr_number": 1848, "pr_title": "[CALCITE-3845] CASE WHEN expression with nullability CAST is considered as reduced wrongly in ReduceExpressionsRule", "pr_createdAt": "2020-03-06T07:32:19Z", "pr_url": "https://github.com/apache/calcite/pull/1848", "timeline": [{"oid": "28d71548a51c2421ad1f0d74445b1c787fa38065", "url": "https://github.com/apache/calcite/commit/28d71548a51c2421ad1f0d74445b1c787fa38065", "message": "[CALCITE-3845] CASE WHEN expression with nullability CAST is considered as reduced wrongly in ReduceExpressionsRule", "committedDate": "2020-03-07T03:32:26Z", "type": "forcePushed"}, {"oid": "07468739d859f0221daa7eff7021d2ba6b1a1957", "url": "https://github.com/apache/calcite/commit/07468739d859f0221daa7eff7021d2ba6b1a1957", "message": "[CALCITE-3845] CASE WHEN expression with nullability CAST is considered as reduced wrongly in ReduceExpressionsRule", "committedDate": "2020-03-07T05:33:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwODAwNw==", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389708007", "bodyText": "Can you please add a message, so the failure looks human-readable?", "author": "vlsi", "createdAt": "2020-03-09T14:07:27Z", "path": "core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java", "diffHunk": "@@ -302,6 +302,7 @@ public ProjectReduceExpressionsRule(Class<? extends Project> projectClass,\n           Lists.newArrayList(project.getProjects());\n       if (reduceExpressions(project, expList, predicates, false,\n           matchNullability)) {\n+        assert !project.getProjects().equals(expList);", "originalCommit": "07468739d859f0221daa7eff7021d2ba6b1a1957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0ODAyNg==", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389748026", "bodyText": "Ok. Will do.", "author": "chunweilei", "createdAt": "2020-03-09T15:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwODAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjEyMA==", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389726120", "bodyText": "This looks way too verbose :-/", "author": "vlsi", "createdAt": "2020-03-09T14:29:45Z", "path": "core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java", "diffHunk": "@@ -3480,6 +3481,51 @@ private void checkReduceNullableToNotNull(ReduceExpressionsRule rule) {\n     sql(sql).with(program).check();\n   }\n \n+  @Test public void testReduceCaseWhenWithCast() {\n+    final RelBuilder relBuilder = RelBuilder.create(RelBuilderTest.config().build());\n+    final RexBuilder rexBuilder = relBuilder.getRexBuilder();\n+    final RelDataType type = rexBuilder.getTypeFactory().createSqlType(SqlTypeName.BIGINT);\n+\n+    RelNode left = relBuilder\n+        .values(new String[]{\"x\", \"y\"}, 1, 2).build();\n+    RexNode ref = rexBuilder.makeInputRef(left, 0);\n+    RexNode literal1 = rexBuilder.makeLiteral(1, type, false);\n+    RexNode literal2 = rexBuilder.makeLiteral(2, type, false);\n+    RexNode literal3 = rexBuilder.makeLiteral(3, type, false);\n+\n+    // CASE WHEN x % 2 = 1 THEN x < 2\n+    //      WHEN x % 3 = 2 THEN x < 1\n+    //      ELSE x < 3\n+    final RexNode caseRexNode = rexBuilder.makeCall(SqlStdOperatorTable.CASE,\n+        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,\n+            rexBuilder.makeCall(SqlStdOperatorTable.MOD, ref, literal2), literal1),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal2),\n+        rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,\n+            rexBuilder.makeCall(SqlStdOperatorTable.MOD, ref, literal3), literal2),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal1),\n+        rexBuilder.makeCall(SqlStdOperatorTable.LESS_THAN, ref, literal3));", "originalCommit": "07468739d859f0221daa7eff7021d2ba6b1a1957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0OTc0OQ==", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389749749", "bodyText": "I wish I can provide a more simple case, but I cannot.  Because CASE WHEN will be changed to OR in many cases and thus it will not reproduce the issue.", "author": "chunweilei", "createdAt": "2020-03-09T15:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1NDA5MA==", "url": "https://github.com/apache/calcite/pull/1848#discussion_r389754090", "bodyText": "What I mean is signal to noise ratio leaves much to be desired here.\nThe dance of rexBuilder.makeCall(SqlStdOperatorTable repeats again and again :(", "author": "vlsi", "createdAt": "2020-03-09T15:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjEyMA=="}], "type": "inlineReview"}, {"oid": "6051418a59b1dca289e6e73d73e61a5d8f57f1eb", "url": "https://github.com/apache/calcite/commit/6051418a59b1dca289e6e73d73e61a5d8f57f1eb", "message": "[CALCITE-3845] CASE WHEN expression with nullability CAST is considered as reduced wrongly in ReduceExpressionsRule", "committedDate": "2020-03-09T15:09:30Z", "type": "commit"}, {"oid": "6051418a59b1dca289e6e73d73e61a5d8f57f1eb", "url": "https://github.com/apache/calcite/commit/6051418a59b1dca289e6e73d73e61a5d8f57f1eb", "message": "[CALCITE-3845] CASE WHEN expression with nullability CAST is considered as reduced wrongly in ReduceExpressionsRule", "committedDate": "2020-03-09T15:09:30Z", "type": "forcePushed"}]}