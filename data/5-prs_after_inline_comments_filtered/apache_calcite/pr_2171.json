{"pr_number": 2171, "pr_title": "[CALCITE-4288] Create SqlTypeUtil#deriveType(SqlCallBinding) to make type computation simpler", "pr_createdAt": "2020-09-27T18:56:24Z", "pr_url": "https://github.com/apache/calcite/pull/2171", "timeline": [{"oid": "8beb3d576f4980ad46c4a817460e75f29700d5cd", "url": "https://github.com/apache/calcite/commit/8beb3d576f4980ad46c4a817460e75f29700d5cd", "message": "[CALCITE-4288] Create SqlTypeUtil#deriveType(SqlCallBinding) to make type computation simpler", "committedDate": "2020-09-27T18:55:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NzIwOQ==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495657209", "bodyText": "Maybe we can set a descriptive/imperative message here, like operands must not be null or operands is null, it will be more clear?\nSame for the call in other places.", "author": "liupc", "createdAt": "2020-09-28T02:15:08Z", "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");", "originalCommit": "8beb3d576f4980ad46c4a817460e75f29700d5cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMDg2OQ==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495730869", "bodyText": "Maybe we can set a descriptive/imperative message here, like operands must not be null or operands is null, it will be more clear?\n\nThe error message would be like NullPointerException: operands.\nI guess it is more-or-less clear.\nThere should be a separate PR that replaces requireNonNull(var); with requireNonNull(var, \"var\"); and assert var != null; with requireNonNull(var, \"var\");", "author": "vlsi", "createdAt": "2020-09-28T07:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NzIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0MTY2Mw==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r496341663", "bodyText": "@vlsi ok, maybe it's clear enough, but I still prefer a descriptive/imperative message, anyway, it just doesn't matters.", "author": "liupc", "createdAt": "2020-09-29T02:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NzIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495657777", "bodyText": "I think we should avoid the use of assert due to the assertion is usually disabled in a JVM.", "author": "liupc", "createdAt": "2020-09-28T02:18:11Z", "path": "core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java", "diffHunk": "@@ -123,21 +126,13 @@ public static boolean isCharTypeComparable(\n       SqlCallBinding binding,\n       List<SqlNode> operands,\n       boolean throwOnFailure) {\n-    final SqlValidator validator = binding.getValidator();\n-    final SqlValidatorScope scope = binding.getScope();\n-    assert operands != null;\n-    assert operands.size() >= 2;\n+    requireNonNull(operands, \"operands\");\n+    assert operands.size() >= 2", "originalCommit": "8beb3d576f4980ad46c4a817460e75f29700d5cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTgyNw==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495731827", "bodyText": "The code was there long ago (I guess before Objects.requireNonNull existed), so it was using asserts.\nHowever,\n\nSignificant rework of assert is out of the scope of this PR\nassert operands.size() >= 2 does not seem to have a corresponding Java API.", "author": "vlsi", "createdAt": "2020-09-28T07:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MzcxOA==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495983718", "bodyText": "assert operands.size() >= 2 does not seem to have a corresponding Java API.\n\nI agree that we should keep the scope of this PR minimal and clear, and maybe rework the assert in another PR,\nbut regrading to the above comments, I think we can use the guava's Preconditions.checkArgument to do this check.", "author": "liupc", "createdAt": "2020-09-28T14:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4ODE1MQ==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r495988151", "bodyText": "Preconditions.checkArgument allocates garbage even in case the error is not thrown (at least in Guava 19)", "author": "vlsi", "createdAt": "2020-09-28T14:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzODM1OA==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r496338358", "bodyText": "hi @vlsi , what do you mean by allocates garbage?", "author": "liupc", "createdAt": "2020-09-29T02:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3MDU1MQ==", "url": "https://github.com/apache/calcite/pull/2171#discussion_r496470551", "bodyText": "I mean primitive arguments boxing, and vararg array allocation.\nThis is missing in Guava 19: google/guava@892e323#diff-fe7358934fa6eba23c2791eb40cec030", "author": "vlsi", "createdAt": "2020-09-29T07:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1Nzc3Nw=="}], "type": "inlineReview"}]}