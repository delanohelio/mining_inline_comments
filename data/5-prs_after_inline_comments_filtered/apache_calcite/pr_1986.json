{"pr_number": 1986, "pr_title": "[CALCITE-4003] Disallow cross convention matching in TransformationRule", "pr_createdAt": "2020-05-20T14:51:06Z", "pr_url": "https://github.com/apache/calcite/pull/1986", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzI5Mw==", "url": "https://github.com/apache/calcite/pull/1986#discussion_r428807293", "bodyText": "Nit:  why not use checkArgument or something similar from Guava? Such that it can both check expected result, stop execute when not satisfying, and provide detailed description.", "author": "amaliujia", "createdAt": "2020-05-21T17:38:32Z", "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java", "diffHunk": "@@ -136,7 +155,9 @@ public void transformTo(RelNode rel, Map<RelNode, RelNode> equiv,\n         volcanoPlanner.ensureRegistered(\n             entry.getKey(), entry.getValue());\n       }\n-      volcanoPlanner.ensureRegistered(rel, rels[0]);\n+      RelSubset subset = volcanoPlanner.ensureRegistered(rel, rels[0]);\n+      // The subset is not used, but we need it, just for debugging\n+      assert subset != null;", "originalCommit": "e4f0054327846900bdb4be26f7f45e7419c8b3be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzgzOQ==", "url": "https://github.com/apache/calcite/pull/1986#discussion_r428807839", "bodyText": "Saying this just because the comment says this assert is for debugging, so I assumed some context will be more useful for people who don't have know this much.", "author": "amaliujia", "createdAt": "2020-05-21T17:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODYzOA==", "url": "https://github.com/apache/calcite/pull/1986#discussion_r428808638", "bodyText": "It is not intended to check null or not, just to silence the IDE that the 'subset' is used. But in fact it is useful to add a breakpoint there to see the content of subset.", "author": "hsyuan", "createdAt": "2020-05-21T17:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyNDI3NA==", "url": "https://github.com/apache/calcite/pull/1986#discussion_r428824274", "bodyText": "Gotcha. Now I see it is to suppress IDE, style checker, etc.\nThanks for clarification.", "author": "amaliujia", "createdAt": "2020-05-21T18:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNTIzMg==", "url": "https://github.com/apache/calcite/pull/1986#discussion_r428905232", "bodyText": "I find it confusing to use an assertion just to silence some warnings. Usually there are annotations for this kind of things. Apart from that if the content is useful for debugging then why not logging it for real.", "author": "zabetak", "createdAt": "2020-05-21T20:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMjk1NA==", "url": "https://github.com/apache/calcite/pull/1986#discussion_r429032954", "bodyText": "Good point, we can use annotations instead.\nBut logging is not what I want, I just want to add a debug point, check the returned subset for a specific rule match. Logging will print a lot of subsets for all the rule matches that I am not interested in.", "author": "hsyuan", "createdAt": "2020-05-22T04:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4MDMxNg==", "url": "https://github.com/apache/calcite/pull/1986#discussion_r505380316", "bodyText": "after udpate, this exception happend, this exception should not break OPTIMIZE process, JoinAssociateRule enable match EnumerableNestedLoopJoin. java.lang.RuntimeException: rel#3291:EnumerableHashJoin.ENUMERABLE.[](left=RelSubset#88,right=EnumerableNestedLoopJoin#3290,condition==($0, $3),joinType=inner) is a PhysicalNode, which is not allowed in JoinAssociateRule", "author": "mikasaakeman", "createdAt": "2020-10-15T09:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwNzI5Mw=="}], "type": "inlineReview"}, {"oid": "33a50b4fa91cb541b258e1b9b07d46edbbfa9334", "url": "https://github.com/apache/calcite/commit/33a50b4fa91cb541b258e1b9b07d46edbbfa9334", "message": "[CALCITE-4003] Disallow cross convention matching and generation in TransformationRule", "committedDate": "2020-06-09T22:07:30Z", "type": "forcePushed"}, {"oid": "a12141e7e26b15f0d5fd45c7b97821a4afa14b7b", "url": "https://github.com/apache/calcite/commit/a12141e7e26b15f0d5fd45c7b97821a4afa14b7b", "message": "[CALCITE-4003] Disallow cross convention matching and generation in TransformationRule", "committedDate": "2020-06-09T22:12:25Z", "type": "commit"}, {"oid": "a12141e7e26b15f0d5fd45c7b97821a4afa14b7b", "url": "https://github.com/apache/calcite/commit/a12141e7e26b15f0d5fd45c7b97821a4afa14b7b", "message": "[CALCITE-4003] Disallow cross convention matching and generation in TransformationRule", "committedDate": "2020-06-09T22:12:25Z", "type": "forcePushed"}]}