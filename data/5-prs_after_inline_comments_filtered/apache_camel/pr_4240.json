{"pr_number": 4240, "pr_title": "CAMEL-15531 - adding SolverManager", "pr_createdAt": "2020-09-17T09:14:08Z", "pr_url": "https://github.com/apache/camel/pull/4240", "timeline": [{"oid": "31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "url": "https://github.com/apache/camel/commit/31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "message": "CAMEL-15531 - adding SolverManager", "committedDate": "2020-09-17T10:18:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NTQwNw==", "url": "https://github.com/apache/camel/pull/4240#discussion_r490275407", "bodyText": "The callback must ALWAYS be called, so here is a few problems.\nThere is no return false for the async processing. And in case of an exception in try .. catch, you need to call callback.done(true) also (for example if mandatory body throws exception), which can be done in a finally block, or just above return true etc.", "author": "davsclaus", "createdAt": "2020-09-17T14:07:19Z", "path": "components/camel-optaplanner/src/main/java/org/apache/camel/component/optaplanner/OptaPlannerProducer.java", "diffHunk": "@@ -59,12 +63,38 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n-    public synchronized void process(Exchange exchange) throws Exception {\n-        final Object body = exchange.getIn().getMandatoryBody();\n-        final String solverId = getSolverId(exchange);\n+    public boolean process(Exchange exchange, AsyncCallback callback) {", "originalCommit": "31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NjMyOQ==", "url": "https://github.com/apache/camel/pull/4240#discussion_r490276329", "bodyText": "You may want to set that exception on exchange, so Camel can react upon that.", "author": "davsclaus", "createdAt": "2020-09-17T14:08:30Z", "path": "components/camel-optaplanner/src/main/java/org/apache/camel/component/optaplanner/OptaPlannerProducer.java", "diffHunk": "@@ -113,6 +143,54 @@ public void run() {\n         }\n     }\n \n+    /**\n+     * Using SolverManager\n+     *\n+     * @param  exchange\n+     * @param  body\n+     * @throws Exception\n+     */\n+    private void processWithSolverManager(Exchange exchange, Object body, AsyncCallback callback)\n+            throws Exception {\n+        final SolverManager solverManager = getSolverManager(exchange);\n+\n+        if (body.getClass().isAnnotationPresent(PlanningSolution.class)) {\n+            LOGGER.debug(\"Asynchronously solving problem: [{}] with id [{}]\", body);\n+            Long problemId = endpoint.getConfiguration().getProblemId();\n+            if (isAsync(exchange)) {\n+                executor.submit(() -> {\n+                    try {\n+                        // create a consumer for best solution\n+                        OptaplannerSolution consumer = endpoint.getOrCreateSolution(problemId);\n+                        consumer.bestSolution(body);\n+                        // start solving :: Solver Job is a thread\n+                        SolverJob solverJob = solverManager.solveAndListen(problemId, t -> body, consumer::bestSolution);\n+                        // wait for result\n+                        populateResultWithSolverManager(exchange, solverJob);\n+                    } catch (Throwable e) {\n+                        LOGGER.error(\"Asynchronously solving failed with SolverManager, for problemId ({})\", problemId, e);", "originalCommit": "31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NzA2OQ==", "url": "https://github.com/apache/camel/pull/4240#discussion_r490277069", "bodyText": "Here you need to return false after submit, as its another thread that continues this callback, so return false, and then return false from the process method that called this, then Camel knows its async now.", "author": "davsclaus", "createdAt": "2020-09-17T14:09:23Z", "path": "components/camel-optaplanner/src/main/java/org/apache/camel/component/optaplanner/OptaPlannerProducer.java", "diffHunk": "@@ -113,6 +143,54 @@ public void run() {\n         }\n     }\n \n+    /**\n+     * Using SolverManager\n+     *\n+     * @param  exchange\n+     * @param  body\n+     * @throws Exception\n+     */\n+    private void processWithSolverManager(Exchange exchange, Object body, AsyncCallback callback)\n+            throws Exception {\n+        final SolverManager solverManager = getSolverManager(exchange);\n+\n+        if (body.getClass().isAnnotationPresent(PlanningSolution.class)) {\n+            LOGGER.debug(\"Asynchronously solving problem: [{}] with id [{}]\", body);\n+            Long problemId = endpoint.getConfiguration().getProblemId();\n+            if (isAsync(exchange)) {\n+                executor.submit(() -> {", "originalCommit": "31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NzU2OA==", "url": "https://github.com/apache/camel/pull/4240#discussion_r490277568", "bodyText": "Yes this is correct, after we have the response we can tell Camel to continue by calling false on the callback", "author": "davsclaus", "createdAt": "2020-09-17T14:09:59Z", "path": "components/camel-optaplanner/src/main/java/org/apache/camel/component/optaplanner/OptaPlannerProducer.java", "diffHunk": "@@ -113,6 +143,54 @@ public void run() {\n         }\n     }\n \n+    /**\n+     * Using SolverManager\n+     *\n+     * @param  exchange\n+     * @param  body\n+     * @throws Exception\n+     */\n+    private void processWithSolverManager(Exchange exchange, Object body, AsyncCallback callback)\n+            throws Exception {\n+        final SolverManager solverManager = getSolverManager(exchange);\n+\n+        if (body.getClass().isAnnotationPresent(PlanningSolution.class)) {\n+            LOGGER.debug(\"Asynchronously solving problem: [{}] with id [{}]\", body);\n+            Long problemId = endpoint.getConfiguration().getProblemId();\n+            if (isAsync(exchange)) {\n+                executor.submit(() -> {\n+                    try {\n+                        // create a consumer for best solution\n+                        OptaplannerSolution consumer = endpoint.getOrCreateSolution(problemId);\n+                        consumer.bestSolution(body);\n+                        // start solving :: Solver Job is a thread\n+                        SolverJob solverJob = solverManager.solveAndListen(problemId, t -> body, consumer::bestSolution);\n+                        // wait for result\n+                        populateResultWithSolverManager(exchange, solverJob);\n+                    } catch (Throwable e) {\n+                        LOGGER.error(\"Asynchronously solving failed with SolverManager, for problemId ({})\", problemId, e);\n+                    } finally {\n+                        callback.done(false);", "originalCommit": "31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3ODM0Mg==", "url": "https://github.com/apache/camel/pull/4240#discussion_r490278342", "bodyText": "return true to know that it was processed sync", "author": "davsclaus", "createdAt": "2020-09-17T14:10:59Z", "path": "components/camel-optaplanner/src/main/java/org/apache/camel/component/optaplanner/OptaPlannerProducer.java", "diffHunk": "@@ -113,6 +143,54 @@ public void run() {\n         }\n     }\n \n+    /**\n+     * Using SolverManager\n+     *\n+     * @param  exchange\n+     * @param  body\n+     * @throws Exception\n+     */\n+    private void processWithSolverManager(Exchange exchange, Object body, AsyncCallback callback)\n+            throws Exception {\n+        final SolverManager solverManager = getSolverManager(exchange);\n+\n+        if (body.getClass().isAnnotationPresent(PlanningSolution.class)) {\n+            LOGGER.debug(\"Asynchronously solving problem: [{}] with id [{}]\", body);\n+            Long problemId = endpoint.getConfiguration().getProblemId();\n+            if (isAsync(exchange)) {\n+                executor.submit(() -> {\n+                    try {\n+                        // create a consumer for best solution\n+                        OptaplannerSolution consumer = endpoint.getOrCreateSolution(problemId);\n+                        consumer.bestSolution(body);\n+                        // start solving :: Solver Job is a thread\n+                        SolverJob solverJob = solverManager.solveAndListen(problemId, t -> body, consumer::bestSolution);\n+                        // wait for result\n+                        populateResultWithSolverManager(exchange, solverJob);\n+                    } catch (Throwable e) {\n+                        LOGGER.error(\"Asynchronously solving failed with SolverManager, for problemId ({})\", problemId, e);\n+                    } finally {\n+                        callback.done(false);\n+                    }\n+                });\n+            } else {\n+                // no need for a consumer for sync call\n+                SolverJob solverJob = solverManager.solve(problemId, body);\n+                // wait for result\n+                populateResultWithSolverManager(exchange, solverJob);\n+                callback.done(true);", "originalCommit": "31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3ODYzMQ==", "url": "https://github.com/apache/camel/pull/4240#discussion_r490278631", "bodyText": "Can we make a better exception message what this means?", "author": "davsclaus", "createdAt": "2020-09-17T14:11:20Z", "path": "components/camel-optaplanner/src/main/java/org/apache/camel/component/optaplanner/OptaPlannerProducer.java", "diffHunk": "@@ -113,6 +143,54 @@ public void run() {\n         }\n     }\n \n+    /**\n+     * Using SolverManager\n+     *\n+     * @param  exchange\n+     * @param  body\n+     * @throws Exception\n+     */\n+    private void processWithSolverManager(Exchange exchange, Object body, AsyncCallback callback)\n+            throws Exception {\n+        final SolverManager solverManager = getSolverManager(exchange);\n+\n+        if (body.getClass().isAnnotationPresent(PlanningSolution.class)) {\n+            LOGGER.debug(\"Asynchronously solving problem: [{}] with id [{}]\", body);\n+            Long problemId = endpoint.getConfiguration().getProblemId();\n+            if (isAsync(exchange)) {\n+                executor.submit(() -> {\n+                    try {\n+                        // create a consumer for best solution\n+                        OptaplannerSolution consumer = endpoint.getOrCreateSolution(problemId);\n+                        consumer.bestSolution(body);\n+                        // start solving :: Solver Job is a thread\n+                        SolverJob solverJob = solverManager.solveAndListen(problemId, t -> body, consumer::bestSolution);\n+                        // wait for result\n+                        populateResultWithSolverManager(exchange, solverJob);\n+                    } catch (Throwable e) {\n+                        LOGGER.error(\"Asynchronously solving failed with SolverManager, for problemId ({})\", problemId, e);\n+                    } finally {\n+                        callback.done(false);\n+                    }\n+                });\n+            } else {\n+                // no need for a consumer for sync call\n+                SolverJob solverJob = solverManager.solve(problemId, body);\n+                // wait for result\n+                populateResultWithSolverManager(exchange, solverJob);\n+                callback.done(true);\n+            }\n+        } else {\n+            throw new Exception(\"Unsuported type\");", "originalCommit": "31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MDUwMQ==", "url": "https://github.com/apache/camel/pull/4240#discussion_r490280501", "bodyText": "Can you please use something else as java.beans is some very old crap in Java that is bloated and may make quarkus pull in alot of extra classes.\nInstead add you own little event listener api", "author": "davsclaus", "createdAt": "2020-09-17T14:13:41Z", "path": "components/camel-optaplanner/src/main/java/org/apache/camel/component/optaplanner/OptaplannerSolution.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.optaplanner;\n+\n+import java.beans.PropertyChangeListener;", "originalCommit": "31f16b94e2de8b17caf9bd10a4ac1cada1e1044f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8489575aa20aeb062196937853b816aab02de2ec", "url": "https://github.com/apache/camel/commit/8489575aa20aeb062196937853b816aab02de2ec", "message": "CAMEL-15531 - adding SolverManager", "committedDate": "2020-09-18T15:19:52Z", "type": "commit"}, {"oid": "8489575aa20aeb062196937853b816aab02de2ec", "url": "https://github.com/apache/camel/commit/8489575aa20aeb062196937853b816aab02de2ec", "message": "CAMEL-15531 - adding SolverManager", "committedDate": "2020-09-18T15:19:52Z", "type": "forcePushed"}]}