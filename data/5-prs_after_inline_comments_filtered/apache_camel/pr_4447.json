{"pr_number": 4447, "pr_title": "CAMEL-15689 - Add camel-atlasmap component", "pr_createdAt": "2020-10-14T20:26:36Z", "pr_url": "https://github.com/apache/camel/pull/4447", "timeline": [{"oid": "0816227de94602e068fd9660fe55b4a9c6dd0c71", "url": "https://github.com/apache/camel/commit/0816227de94602e068fd9660fe55b4a9c6dd0c71", "message": "CAMEL-15689 - Add camel-atlasmap component", "committedDate": "2020-10-14T22:13:48Z", "type": "forcePushed"}, {"oid": "efeff50e60e172a8d0b9f47b910388149ce622d1", "url": "https://github.com/apache/camel/commit/efeff50e60e172a8d0b9f47b910388149ce622d1", "message": "CAMEL-15689 - Add camel-atlasmap component", "committedDate": "2020-10-14T23:40:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI5Nzg1NQ==", "url": "https://github.com/apache/camel/pull/4447#discussion_r505297855", "bodyText": "Do we have a mix here where last 2 params are ignored ?", "author": "aldettinger", "createdAt": "2020-10-15T07:57:26Z", "path": "components/camel-atlasmap/src/main/java/org/apache/camel/component/atlasmap/AtlasMapEndpoint.java", "diffHunk": "@@ -0,0 +1,444 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.atlasmap;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.atlasmap.api.AtlasContext;\n+import io.atlasmap.api.AtlasContextFactory;\n+import io.atlasmap.api.AtlasException;\n+import io.atlasmap.api.AtlasSession;\n+import io.atlasmap.core.DefaultAtlasContextFactory;\n+import io.atlasmap.v2.Audit;\n+import io.atlasmap.v2.DataSource;\n+import io.atlasmap.v2.DataSourceType;\n+import org.apache.camel.Category;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.ResourceEndpoint;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.support.ResourceHelper;\n+import org.apache.camel.util.IOHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.atlasmap.api.AtlasContextFactory.Format.ADM;\n+import static io.atlasmap.api.AtlasContextFactory.Format.JSON;\n+\n+/**\n+ * Transforms the message using an AtlasMap transformation.\n+ */\n+@UriEndpoint(firstVersion = \"3.7.0\", scheme = \"atlasmap\", title = \"AtlasMap\", syntax = \"atlasmap:resourceUri\",\n+             producerOnly = true, category = { Category.TRANSFORMATION })\n+public class AtlasMapEndpoint extends ResourceEndpoint {\n+\n+    public static final String CONTENT_TYPE_JSON = \"application/json\";\n+    public static final String CONTENT_TYPE_XML = \"application/xml\";\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AtlasMapEndpoint.class);\n+    private AtlasContextFactory atlasContextFactory;\n+    private AtlasContext atlasContext;\n+\n+    @UriParam(label = \"advanced\")\n+    private String propertiesFile;\n+    @UriParam\n+    private String sourceMapName;\n+    @UriParam\n+    private String targetMapName;\n+    @UriParam(defaultValue = \"MAP\")\n+    private TargetMapMode targetMapMode = TargetMapMode.MAP;\n+\n+    public enum TargetMapMode {\n+        MAP,\n+        MESSAGE_HEADER,\n+        EXCHANGE_PROPERTY;\n+    }\n+\n+    public AtlasMapEndpoint(String uri, AtlasMapComponent component, String resourceUri) {\n+        super(uri, component, resourceUri);\n+    }\n+\n+    @Override\n+    public boolean isSingleton() {\n+        return true;\n+    }\n+\n+    @Override\n+    public ExchangePattern getExchangePattern() {\n+        return ExchangePattern.InOut;\n+    }\n+\n+    @Override\n+    protected String createEndpointUri() {\n+        return \"atlasmap:\" + getResourceUri();\n+    }\n+\n+    public AtlasContextFactory getAtlasContextFactory() {\n+        return this.atlasContextFactory;\n+    }\n+\n+    public void setAtlasContextFactory(AtlasContextFactory atlasContextFactory) {\n+        this.atlasContextFactory = atlasContextFactory;\n+    }\n+\n+    public AtlasContext getAtlasContext() {\n+        return this.atlasContext;\n+    }\n+\n+    public void setAtlasContext(AtlasContext atlasContext) {\n+        this.atlasContext = atlasContext;\n+    }\n+\n+    /**\n+     * The URI of the properties file which is used for AtlasContextFactory initialization.\n+     * \n+     * @param file property file path\n+     */\n+    public void setPropertiesFile(String file) {\n+        propertiesFile = file;\n+    }\n+\n+    public String getPropertiesFile() {\n+        return propertiesFile;\n+    }\n+\n+    /**\n+     * The Exchange property name for a source message map which hold <code>java.util.Map&lt;String, Message&gt;</code>\n+     * where the key is AtlasMap Document ID. AtlasMap consumes Message bodies as source documents, as well as message\n+     * headers as source properties where the scope equals to Document ID.\n+     * \n+     * @param name Exchange property name for source map\n+     */\n+    public void setSourceMapName(String name) {\n+        this.sourceMapName = name;\n+    }\n+\n+    public String getSourceMapName() {\n+        return this.sourceMapName;\n+    }\n+\n+    /**\n+     * The Exchange property name for a target document map which hold <code>java.util.Map&lt;String, Object&gt;</code>\n+     * where the key is AtlasMap Document ID. AtlasMap populates multiple target documents into this map.\n+     * \n+     * @param name Exchange property name for target map\n+     */\n+    public void setTargetMapName(String name) {\n+        this.targetMapName = name;\n+    }\n+\n+    public String getTargetMapName() {\n+        return this.targetMapName;\n+    }\n+\n+    /**\n+     * {@link TargetMapMode} enum value to specify how multiple target documents are delivered if exist.\n+     * <ul>\n+     * <li>'MAP': Stores them into a java.util.Map, and the java.util.Map is set to an exchange\" property if\n+     * 'targetMapName' is specified, otherwise message body.</li>\"\n+     * <li>'MESSAGE_HEADER': Stores them into message headers.</li>\"\n+     * <li>'EXCHANGE_PROPERTY': Stores them into exchange properties.</li>\n+     * </ul>\n+     * \")\n+     * \n+     * @param mode {@link TargetMapMode}\n+     */\n+    public void setTargetMapMode(TargetMapMode mode) {\n+        this.targetMapMode = mode;\n+    }\n+\n+    public TargetMapMode getTargetMapMode() {\n+        return this.targetMapMode;\n+    }\n+\n+    public AtlasMapEndpoint findOrCreateEndpoint(String uri, String newResourceUri) {\n+        String newUri = uri.replace(getResourceUri(), newResourceUri);\n+        log.debug(\"Getting endpoint with URI: {}\", newUri);\n+        return getCamelContext().getEndpoint(newUri, AtlasMapEndpoint.class);\n+    }\n+\n+    @Override\n+    protected void onExchange(Exchange exchange) throws Exception {\n+        Message incomingMessage = exchange.getIn();\n+        String newResourceUri = incomingMessage.getHeader(AtlasMapConstants.ATLAS_RESOURCE_URI, String.class);\n+        if (newResourceUri != null) {\n+            incomingMessage.removeHeader(AtlasMapConstants.ATLAS_RESOURCE_URI);\n+\n+            log.debug(\"{} set to {} creating new endpoint to handle exchange\", AtlasMapConstants.ATLAS_RESOURCE_URI,\n+                    newResourceUri);\n+            AtlasMapEndpoint newEndpoint = findOrCreateEndpoint(getEndpointUri(), newResourceUri);\n+            newEndpoint.onExchange(exchange);\n+            return;\n+        }\n+\n+        AtlasSession atlasSession = getOrCreateAtlasContext(incomingMessage).createSession();\n+        populateSourceDocuments(exchange, atlasSession);\n+        atlasSession.getAtlasContext().process(atlasSession);\n+\n+        List<Audit> errors = new ArrayList<>();\n+        for (Audit audit : atlasSession.getAudits().getAudit()) {\n+            switch (audit.getStatus()) {\n+                case ERROR:\n+                    errors.add(audit);\n+                    break;\n+                case WARN:\n+                    LOG.warn(\"{}: Document='{}(ID:{})', path='{}'\",\n+                            audit.getMessage(), audit.getDocName(), audit.getDocId(), audit.getPath());\n+                    break;\n+                default:\n+                    LOG.info(\"{}: Document='{}(ID:{})', path='{}'\",\n+                            audit.getMessage(), audit.getDocName(), audit.getDocId(), audit.getPath());\n+            }\n+        }\n+        if (!errors.isEmpty()) {\n+            StringBuilder buf = new StringBuilder(\"Errors: \");\n+            errors.stream().forEach(a -> buf.append(\n+                    String.format(\"[%s: Document='{}(ID:{})', path='%s'], \",", "originalCommit": "efeff50e60e172a8d0b9f47b910388149ce622d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MzAzOA==", "url": "https://github.com/apache/camel/pull/4447#discussion_r505463038", "bodyText": "Doh good catch, thanks! fixed.", "author": "igarashitm", "createdAt": "2020-10-15T11:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI5Nzg1NQ=="}], "type": "inlineReview"}, {"oid": "908a1735ebcfbc1bc31a6fa8e5e618a16f8a8344", "url": "https://github.com/apache/camel/commit/908a1735ebcfbc1bc31a6fa8e5e618a16f8a8344", "message": "CAMEL-15689 - Add camel-atlasmap component", "committedDate": "2020-10-15T11:19:28Z", "type": "forcePushed"}, {"oid": "84ce099d94e3720f8050fed2ab01078afc8fc7ab", "url": "https://github.com/apache/camel/commit/84ce099d94e3720f8050fed2ab01078afc8fc7ab", "message": "CAMEL-15689 - Add camel-atlasmap component", "committedDate": "2020-10-15T13:12:31Z", "type": "commit"}, {"oid": "84ce099d94e3720f8050fed2ab01078afc8fc7ab", "url": "https://github.com/apache/camel/commit/84ce099d94e3720f8050fed2ab01078afc8fc7ab", "message": "CAMEL-15689 - Add camel-atlasmap component", "committedDate": "2020-10-15T13:12:31Z", "type": "forcePushed"}]}