{"pr_number": 4723, "pr_title": "CAMEL-15510: Add camel-vertx-kafka component", "pr_createdAt": "2020-12-04T12:53:57Z", "pr_url": "https://github.com/apache/camel/pull/4723", "timeline": [{"oid": "1766c2d7e0671e91baec81b6a761121ad7f2b1d0", "url": "https://github.com/apache/camel/commit/1766c2d7e0671e91baec81b6a761121ad7f2b1d0", "message": "Scaffold new camel-vertx-kafka project", "committedDate": "2020-11-19T09:03:07Z", "type": "commit"}, {"oid": "83103a8219acb467c950a033f621836a4cfa7046", "url": "https://github.com/apache/camel/commit/83103a8219acb467c950a033f621836a4cfa7046", "message": "Add ConfigField to the maven plugin", "committedDate": "2020-11-19T09:03:07Z", "type": "commit"}, {"oid": "8ee321c7feaa6eac922192b13a0d3e4e5a6addeb", "url": "https://github.com/apache/camel/commit/8ee321c7feaa6eac922192b13a0d3e4e5a6addeb", "message": "Add builder around to minimize the usage of constructors", "committedDate": "2020-11-19T09:03:07Z", "type": "commit"}, {"oid": "fb6518200330e1530b8495891c129c35ef5f7a99", "url": "https://github.com/apache/camel/commit/fb6518200330e1530b8495891c129c35ef5f7a99", "message": "Add builder java class", "committedDate": "2020-11-19T09:03:08Z", "type": "commit"}, {"oid": "a1cde74c7c877ed6d026043b4f2bcb3229e74f47", "url": "https://github.com/apache/camel/commit/a1cde74c7c877ed6d026043b4f2bcb3229e74f47", "message": "Finish up the JavaClass builder", "committedDate": "2020-11-19T09:03:08Z", "type": "commit"}, {"oid": "e5d40b6c6db1436ae7bd1dd36669f1614ffffcf7", "url": "https://github.com/apache/camel/commit/e5d40b6c6db1436ae7bd1dd36669f1614ffffcf7", "message": "Add more features to the Javaclass builder", "committedDate": "2020-11-19T09:03:08Z", "type": "commit"}, {"oid": "8515be3ec20dd6f46a0b0f1971c94e800d5f9f24", "url": "https://github.com/apache/camel/commit/8515be3ec20dd6f46a0b0f1971c94e800d5f9f24", "message": "Start working on the pojo", "committedDate": "2020-11-19T09:03:08Z", "type": "commit"}, {"oid": "3c02b062c95a750a1a1953e145aa43a7cbf7888e", "url": "https://github.com/apache/camel/commit/3c02b062c95a750a1a1953e145aa43a7cbf7888e", "message": "Add more customization", "committedDate": "2020-11-19T09:03:09Z", "type": "commit"}, {"oid": "4f899be1e0096a142c7f8513e2a3695bcf9e08b3", "url": "https://github.com/apache/camel/commit/4f899be1e0096a142c7f8513e2a3695bcf9e08b3", "message": "Finish up the maven plugin", "committedDate": "2020-11-19T09:03:09Z", "type": "commit"}, {"oid": "ebc460296a98d250c194de65ee6221ab41e03394", "url": "https://github.com/apache/camel/commit/ebc460296a98d250c194de65ee6221ab41e03394", "message": "Add missing license header", "committedDate": "2020-11-19T09:03:09Z", "type": "commit"}, {"oid": "3b96e023f6d808b6c5ae8a1963b33ca575caa214", "url": "https://github.com/apache/camel/commit/3b96e023f6d808b6c5ae8a1963b33ca575caa214", "message": "Start working on the actual VertxKafkaComponent", "committedDate": "2020-11-19T09:03:09Z", "type": "commit"}, {"oid": "84aa41cc618671a56471d2dc5e32c375285dad84", "url": "https://github.com/apache/camel/commit/84aa41cc618671a56471d2dc5e32c375285dad84", "message": "Add comments on fields in the KafkaConfiguration using the maven plugin", "committedDate": "2020-11-19T09:03:10Z", "type": "commit"}, {"oid": "8b5f7245259dbd3a25ef496a3e0f2deb1446985f", "url": "https://github.com/apache/camel/commit/8b5f7245259dbd3a25ef496a3e0f2deb1446985f", "message": "Add consumer and producer and rename the configuration", "committedDate": "2020-11-19T09:03:10Z", "type": "commit"}, {"oid": "15030269ac9a409e24ea800a9e1329924ea49e70", "url": "https://github.com/apache/camel/commit/15030269ac9a409e24ea800a9e1329924ea49e70", "message": "Add consumer and producer and rename the configuration", "committedDate": "2020-11-19T09:03:10Z", "type": "commit"}, {"oid": "0aec429bf9fc1771fbc1906307d6730b80240cdb", "url": "https://github.com/apache/camel/commit/0aec429bf9fc1771fbc1906307d6730b80240cdb", "message": "Initial progress on the vertx kafka component", "committedDate": "2020-11-19T09:03:10Z", "type": "commit"}, {"oid": "cae906aa1955480b2b96d049eb2ae4935d1c6ae2", "url": "https://github.com/apache/camel/commit/cae906aa1955480b2b96d049eb2ae4935d1c6ae2", "message": "Add KafkaProducer and use Flux and Mono to handle all async operations", "committedDate": "2020-11-19T09:03:11Z", "type": "commit"}, {"oid": "89e34031b0c471ba45638dc4fabee239bd0ef241", "url": "https://github.com/apache/camel/commit/89e34031b0c471ba45638dc4fabee239bd0ef241", "message": "Add missing configs", "committedDate": "2020-11-19T09:03:11Z", "type": "commit"}, {"oid": "33cc9e25f48ef8f125c9984ca8bde3e4c861d635", "url": "https://github.com/apache/camel/commit/33cc9e25f48ef8f125c9984ca8bde3e4c861d635", "message": "Start adding tests", "committedDate": "2020-11-19T09:03:11Z", "type": "commit"}, {"oid": "60a9ba24aefe97bd707eeea774c760e6d0f8334b", "url": "https://github.com/apache/camel/commit/60a9ba24aefe97bd707eeea774c760e6d0f8334b", "message": "Add more tests", "committedDate": "2020-11-19T09:03:11Z", "type": "commit"}, {"oid": "f0fbd665947a14a3dc00a06d0aabede58f472aa8", "url": "https://github.com/apache/camel/commit/f0fbd665947a14a3dc00a06d0aabede58f472aa8", "message": "Regen", "committedDate": "2020-11-19T09:32:29Z", "type": "commit"}, {"oid": "4a025eb3a9746f9a8c80a0e47c690272dff2d0cb", "url": "https://github.com/apache/camel/commit/4a025eb3a9746f9a8c80a0e47c690272dff2d0cb", "message": "Regen", "committedDate": "2020-11-19T09:58:46Z", "type": "commit"}, {"oid": "b8a7683d0faa0337927fd8aba7ab5073e9612906", "url": "https://github.com/apache/camel/commit/b8a7683d0faa0337927fd8aba7ab5073e9612906", "message": "Add more tests", "committedDate": "2020-11-20T15:41:59Z", "type": "commit"}, {"oid": "00c9c692cdf0dd686909ef7357d50dde3e588b1d", "url": "https://github.com/apache/camel/commit/00c9c692cdf0dd686909ef7357d50dde3e588b1d", "message": "Improve on the producer and add more tests", "committedDate": "2020-11-23T15:19:59Z", "type": "commit"}, {"oid": "4ce1ebe5098d3ccd33e146e479d1003b4a790121", "url": "https://github.com/apache/camel/commit/4ce1ebe5098d3ccd33e146e479d1003b4a790121", "message": "Start working on the consumer", "committedDate": "2020-11-24T14:40:04Z", "type": "commit"}, {"oid": "f7ff5c0a7b1cd76117db7e212a2b5285eec4410f", "url": "https://github.com/apache/camel/commit/f7ff5c0a7b1cd76117db7e212a2b5285eec4410f", "message": "Initial work on the consumer", "committedDate": "2020-11-25T12:44:47Z", "type": "commit"}, {"oid": "6852fef26737454da9742e3e936af8e258dfc3f0", "url": "https://github.com/apache/camel/commit/6852fef26737454da9742e3e936af8e258dfc3f0", "message": "Add initial consumer unit tests", "committedDate": "2020-11-25T15:23:03Z", "type": "commit"}, {"oid": "a4dc822cf79e0c8ad91463ea2938dfbfa8a9dd54", "url": "https://github.com/apache/camel/commit/a4dc822cf79e0c8ad91463ea2938dfbfa8a9dd54", "message": "Add seek to configs", "committedDate": "2020-11-26T11:30:13Z", "type": "commit"}, {"oid": "81b7944b163c6b813cf77c33b6dd0dad70ce99fb", "url": "https://github.com/apache/camel/commit/81b7944b163c6b813cf77c33b6dd0dad70ce99fb", "message": "Add proper seek operation", "committedDate": "2020-11-26T17:34:13Z", "type": "commit"}, {"oid": "28a809646e5436b2b7d420f2ab801264ae31a67f", "url": "https://github.com/apache/camel/commit/28a809646e5436b2b7d420f2ab801264ae31a67f", "message": "Use Mono/Flux in the consumer", "committedDate": "2020-11-27T16:28:50Z", "type": "commit"}, {"oid": "0124f4fa2a49bea38b7b567f3a344a950eedc89c", "url": "https://github.com/apache/camel/commit/0124f4fa2a49bea38b7b567f3a344a950eedc89c", "message": "Done with the consumer operation", "committedDate": "2020-11-30T15:30:39Z", "type": "commit"}, {"oid": "480fc40bf601368016b2285d07b51d77c1149f8f", "url": "https://github.com/apache/camel/commit/480fc40bf601368016b2285d07b51d77c1149f8f", "message": "Finish up the consumer operations unit tests", "committedDate": "2020-12-01T12:16:39Z", "type": "commit"}, {"oid": "351330d6b76724602a254d976a8d6d0379c5b73b", "url": "https://github.com/apache/camel/commit/351330d6b76724602a254d976a8d6d0379c5b73b", "message": "Complete the component", "committedDate": "2020-12-01T14:27:57Z", "type": "commit"}, {"oid": "603838a094bbf6fae4c4cf7a9bfaa2eacfdedbd7", "url": "https://github.com/apache/camel/commit/603838a094bbf6fae4c4cf7a9bfaa2eacfdedbd7", "message": "Add producer integration tests", "committedDate": "2020-12-02T12:01:56Z", "type": "commit"}, {"oid": "3fe1a5cd0bfecd278b0bcf88e9e38b725d98a756", "url": "https://github.com/apache/camel/commit/3fe1a5cd0bfecd278b0bcf88e9e38b725d98a756", "message": "Add consumer integration tests", "committedDate": "2020-12-02T13:43:03Z", "type": "commit"}, {"oid": "86edcba5f9cea2a5bc3981b8ea47a6b85f1d0c7a", "url": "https://github.com/apache/camel/commit/86edcba5f9cea2a5bc3981b8ea47a6b85f1d0c7a", "message": "Add more consumer integration tests", "committedDate": "2020-12-02T14:28:28Z", "type": "commit"}, {"oid": "19bc962b24ba697030f2e64663feed3a738d7659", "url": "https://github.com/apache/camel/commit/19bc962b24ba697030f2e64663feed3a738d7659", "message": "Add more unit tests", "committedDate": "2020-12-02T16:31:16Z", "type": "commit"}, {"oid": "601bdce4d3fef1abb55e49014987498dcd1649ec", "url": "https://github.com/apache/camel/commit/601bdce4d3fef1abb55e49014987498dcd1649ec", "message": "Finish up the tests and start working on the docs", "committedDate": "2020-12-03T14:17:22Z", "type": "commit"}, {"oid": "327d6a380025dd3890f6c994ecd4d7c72ad7331e", "url": "https://github.com/apache/camel/commit/327d6a380025dd3890f6c994ecd4d7c72ad7331e", "message": "Finish up the tests and start working on the docs", "committedDate": "2020-12-03T14:18:44Z", "type": "commit"}, {"oid": "05e3998015c11dcba704f9c3212bbb580df80bd9", "url": "https://github.com/apache/camel/commit/05e3998015c11dcba704f9c3212bbb580df80bd9", "message": "Add docs and fix sourcecheck", "committedDate": "2020-12-04T12:32:21Z", "type": "commit"}, {"oid": "ee4c1b0bd61291a2e89d317598b651ad639cf347", "url": "https://github.com/apache/camel/commit/ee4c1b0bd61291a2e89d317598b651ad639cf347", "message": "small polishing to the pom.xml", "committedDate": "2020-12-04T12:49:31Z", "type": "commit"}, {"oid": "a2365f0e6f66ecfd29df7228fc1fd1add5ba15be", "url": "https://github.com/apache/camel/commit/a2365f0e6f66ecfd29df7228fc1fd1add5ba15be", "message": "Fix CS", "committedDate": "2020-12-04T13:30:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTI0Ng==", "url": "https://github.com/apache/camel/pull/4723#discussion_r536161246", "bodyText": "Might be better to do like VertxComponent.doStop() and handle the case where the Vert.x instance was provided by the user. In that scenario you probably don't want to clean it up as there may be other things that depend on it.", "author": "jamesnetherton", "createdAt": "2020-12-04T15:01:24Z", "path": "components/camel-vertx-kafka/camel-vertx-kafka-component/src/main/java/org/apache/camel/component/vertx/kafka/VertxKafkaComponent.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.vertx.kafka;\n+\n+import java.util.Map;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.component.vertx.kafka.configuration.VertxKafkaConfiguration;\n+import org.apache.camel.spi.Metadata;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.DefaultComponent;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.PropertiesHelper;\n+\n+@Component(\"vertx-kafka\")\n+public class VertxKafkaComponent extends DefaultComponent {\n+\n+    @Metadata\n+    private VertxKafkaConfiguration configuration = new VertxKafkaConfiguration();\n+\n+    @Metadata(label = \"advanced\", autowired = true)\n+    private Vertx vertx;\n+    @Metadata(label = \"advanced\")\n+    private VertxOptions vertxOptions;\n+\n+    public VertxKafkaComponent() {\n+    }\n+\n+    public VertxKafkaComponent(CamelContext context) {\n+        super(context);\n+    }\n+\n+    @Override\n+    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {\n+\n+        if (ObjectHelper.isEmpty(remaining)) {\n+            throw new IllegalArgumentException(\"Topic must be configured on endpoint using syntax kafka:topic\");\n+        }\n+\n+        final VertxKafkaConfiguration configuration\n+                = this.configuration != null ? this.configuration.copy() : new VertxKafkaConfiguration();\n+\n+        configuration.setTopic(remaining);\n+\n+        final VertxKafkaEndpoint endpoint = new VertxKafkaEndpoint(uri, this, configuration);\n+\n+        // extract the additional properties map\n+        if (PropertiesHelper.hasProperties(parameters, \"additionalProperties.\")) {\n+            final Map<String, Object> additionalProperties = endpoint.getConfiguration().getAdditionalProperties();\n+\n+            // add and overwrite additional properties from endpoint to\n+            // pre-configured properties\n+            additionalProperties.putAll(PropertiesHelper.extractProperties(parameters, \"additionalProperties.\"));\n+        }\n+\n+        setProperties(endpoint, parameters);\n+\n+        validateConfigurations(configuration);\n+\n+        return endpoint;\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+\n+        if (vertx == null) {\n+            if (vertxOptions != null) {\n+                vertx = Vertx.vertx(vertxOptions);\n+            } else {\n+                vertx = Vertx.vertx();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        if (vertx != null) {\n+            vertx.close();\n+        }\n+        vertx = null;", "originalCommit": "a2365f0e6f66ecfd29df7228fc1fd1add5ba15be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY1OTYwNw==", "url": "https://github.com/apache/camel/pull/4723#discussion_r536659607", "bodyText": "Looks like here you need to set the exception on the created exchange as otherwise its null", "author": "davsclaus", "createdAt": "2020-12-05T10:28:13Z", "path": "components/camel-vertx-kafka/camel-vertx-kafka-component/src/main/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.vertx.kafka;\n+\n+import io.vertx.kafka.client.consumer.KafkaConsumer;\n+import io.vertx.kafka.client.consumer.KafkaConsumerRecord;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExtendedExchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.vertx.kafka.configuration.VertxKafkaConfiguration;\n+import org.apache.camel.component.vertx.kafka.operations.VertxKafkaConsumerOperations;\n+import org.apache.camel.spi.Synchronization;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class VertxKafkaConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(VertxKafkaConsumer.class);\n+\n+    private KafkaConsumer<Object, Object> kafkaConsumer;\n+\n+    public VertxKafkaConsumer(final VertxKafkaEndpoint endpoint, final Processor processor) {\n+        super(endpoint, processor);\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+\n+        // create the consumer client\n+        kafkaConsumer = KafkaConsumer.create(getEndpoint().getVertx(), getConfiguration().createConsumerConfiguration());\n+\n+        // create the consumer operation\n+        final VertxKafkaConsumerOperations consumerOperations\n+                = new VertxKafkaConsumerOperations(kafkaConsumer, getConfiguration());\n+\n+        // process our records\n+        consumerOperations.receiveEvents(this::onEventListener, this::onErrorListener);\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        if (kafkaConsumer != null) {\n+            kafkaConsumer.close();\n+        }\n+\n+        super.doStop();\n+    }\n+\n+    public VertxKafkaConfiguration getConfiguration() {\n+        return getEndpoint().getConfiguration();\n+    }\n+\n+    @Override\n+    public VertxKafkaEndpoint getEndpoint() {\n+        return (VertxKafkaEndpoint) super.getEndpoint();\n+    }\n+\n+    private void onEventListener(final KafkaConsumerRecord<Object, Object> record) {\n+        final Exchange exchange = getEndpoint().createVertxKafkaExchange(record);\n+        // set propagated headers\n+        VertxKafkaHeadersPropagation.getPropagatedHeaders(record.headers(), exchange.getIn())\n+                .forEach((key, value) -> exchange.getIn().setHeader(key, value));\n+\n+        // add exchange callback\n+        exchange.adapt(ExtendedExchange.class).addOnCompletion(new Synchronization() {\n+            @Override\n+            public void onComplete(Exchange exchange) {\n+                // at the moment we don't commit the offsets manually, we can add it in the future\n+            }\n+\n+            @Override\n+            public void onFailure(Exchange exchange) {\n+                // we do nothing here\n+                processRollback(exchange);\n+            }\n+        });\n+        // send message to next processor in the route\n+        getAsyncProcessor().process(exchange, doneSync -> LOG.trace(\"Processing exchange [{}] done.\", exchange));\n+    }\n+\n+    private void onErrorListener(final Throwable error) {\n+        final Exchange exchange = getEndpoint().createExchange();", "originalCommit": "a2365f0e6f66ecfd29df7228fc1fd1add5ba15be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjcwNjgxNg==", "url": "https://github.com/apache/camel/pull/4723#discussion_r536706816", "bodyText": "Ah good note. Didnt realize that it will be always null", "author": "omarsmak", "createdAt": "2020-12-05T11:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY1OTYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY1OTk3MA==", "url": "https://github.com/apache/camel/pull/4723#discussion_r536659970", "bodyText": "the name are createExchange on endpoints in the other components", "author": "davsclaus", "createdAt": "2020-12-05T10:28:48Z", "path": "components/camel-vertx-kafka/camel-vertx-kafka-component/src/main/java/org/apache/camel/component/vertx/kafka/VertxKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.vertx.kafka;\n+\n+import io.vertx.kafka.client.consumer.KafkaConsumer;\n+import io.vertx.kafka.client.consumer.KafkaConsumerRecord;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExtendedExchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.vertx.kafka.configuration.VertxKafkaConfiguration;\n+import org.apache.camel.component.vertx.kafka.operations.VertxKafkaConsumerOperations;\n+import org.apache.camel.spi.Synchronization;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class VertxKafkaConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(VertxKafkaConsumer.class);\n+\n+    private KafkaConsumer<Object, Object> kafkaConsumer;\n+\n+    public VertxKafkaConsumer(final VertxKafkaEndpoint endpoint, final Processor processor) {\n+        super(endpoint, processor);\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+\n+        // create the consumer client\n+        kafkaConsumer = KafkaConsumer.create(getEndpoint().getVertx(), getConfiguration().createConsumerConfiguration());\n+\n+        // create the consumer operation\n+        final VertxKafkaConsumerOperations consumerOperations\n+                = new VertxKafkaConsumerOperations(kafkaConsumer, getConfiguration());\n+\n+        // process our records\n+        consumerOperations.receiveEvents(this::onEventListener, this::onErrorListener);\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        if (kafkaConsumer != null) {\n+            kafkaConsumer.close();\n+        }\n+\n+        super.doStop();\n+    }\n+\n+    public VertxKafkaConfiguration getConfiguration() {\n+        return getEndpoint().getConfiguration();\n+    }\n+\n+    @Override\n+    public VertxKafkaEndpoint getEndpoint() {\n+        return (VertxKafkaEndpoint) super.getEndpoint();\n+    }\n+\n+    private void onEventListener(final KafkaConsumerRecord<Object, Object> record) {\n+        final Exchange exchange = getEndpoint().createVertxKafkaExchange(record);", "originalCommit": "a2365f0e6f66ecfd29df7228fc1fd1add5ba15be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY2MTIwOQ==", "url": "https://github.com/apache/camel/pull/4723#discussion_r536661209", "bodyText": "If you use the header filter strategy, then the endpoint implementation should implement an interface or extend another base class that has support for header filtering, where you can plugin a custom strategy.", "author": "davsclaus", "createdAt": "2020-12-05T10:30:54Z", "path": "components/camel-vertx-kafka/camel-vertx-kafka-component/src/main/java/org/apache/camel/component/vertx/kafka/VertxKafkaHeaderFilterStrategy.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.vertx.kafka;\n+\n+import java.util.regex.Pattern;\n+\n+import org.apache.camel.support.DefaultHeaderFilterStrategy;\n+\n+public class VertxKafkaHeaderFilterStrategy extends DefaultHeaderFilterStrategy {", "originalCommit": "a2365f0e6f66ecfd29df7228fc1fd1add5ba15be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c9a38a8ebb74f6e5ecba79f6ff4c7628c5f61cf", "url": "https://github.com/apache/camel/commit/0c9a38a8ebb74f6e5ecba79f6ff4c7628c5f61cf", "message": "Add ability to add custom filter strategy and fix vertx start", "committedDate": "2020-12-07T10:32:09Z", "type": "commit"}, {"oid": "08c146cfb7ac6ea96648f34616413ee201dc6f1b", "url": "https://github.com/apache/camel/commit/08c146cfb7ac6ea96648f34616413ee201dc6f1b", "message": "Add missing header", "committedDate": "2020-12-07T12:51:57Z", "type": "commit"}]}