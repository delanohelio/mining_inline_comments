{"pr_number": 1227, "pr_title": "Automating TestCase 833515", "pr_createdAt": "2020-11-12T17:43:05Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227", "timeline": [{"oid": "59dd1e031d34cb60b59fdbe99e28be7b1a8e7a68", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/59dd1e031d34cb60b59fdbe99e28be7b1a8e7a68", "message": "Automating TestCase 833515", "committedDate": "2020-11-12T17:41:36Z", "type": "commit"}, {"oid": "c58bfa23f56376e16598c7a93ddf9ed89dc34200", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/c58bfa23f56376e16598c7a93ddf9ed89dc34200", "message": "Merge branch 'dev' into kkoppart-TestCase833515", "committedDate": "2020-11-21T00:08:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODY5OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528038699", "bodyText": "will need to uninstall prior to install", "author": "shahzaibj", "createdAt": "2020-11-21T00:34:34Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833515.java", "diffHunk": "@@ -0,0 +1,179 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.annotations.SupportedBrokers;\n+import com.microsoft.identity.client.ui.automation.app.AzureSampleApp;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+// End My Shift - In Shared device mode, global sign out should work.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833515\n+@SupportedBrokers(brokers = {BrokerMicrosoftAuthenticator.class})\n+public class TestCase833515 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833515() throws MsalException, InterruptedException, UiObjectNotFoundException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        //creating a basic temp user account\n+        final String newUser = LabConstants.TempUserType.BASIC;\n+        final String username = LabUserHelper.loadTempUser(newUser);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(30));\n+\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        // try sign in with an account from the same tenant\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(latch));\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .loginHint(username)\n+                .sessionExpected(false)\n+                .consentPageExpected(false)\n+                .broker(mBroker)\n+                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .build();\n+\n+        AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        latch.await();\n+\n+        //launching azure sample app and confirming user signed in or not.\n+        final AzureSampleApp azureSampleApp = new AzureSampleApp();\n+        azureSampleApp.install();", "originalCommit": "c58bfa23f56376e16598c7a93ddf9ed89dc34200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0ODE1Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528748156", "bodyText": "added azureSampleapp.uninstall();", "author": "kkrishnareddy", "createdAt": "2020-11-23T14:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODkxMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528038910", "bodyText": "You don't need to launch and handle first run just to clear storage....you can just call clear directly.....and you already handle launch first run below so you don't need to do it twice", "author": "shahzaibj", "createdAt": "2020-11-21T00:35:32Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833515.java", "diffHunk": "@@ -0,0 +1,179 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.annotations.SupportedBrokers;\n+import com.microsoft.identity.client.ui.automation.app.AzureSampleApp;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+// End My Shift - In Shared device mode, global sign out should work.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833515\n+@SupportedBrokers(brokers = {BrokerMicrosoftAuthenticator.class})\n+public class TestCase833515 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833515() throws MsalException, InterruptedException, UiObjectNotFoundException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        //creating a basic temp user account\n+        final String newUser = LabConstants.TempUserType.BASIC;\n+        final String username = LabUserHelper.loadTempUser(newUser);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(30));\n+\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        // try sign in with an account from the same tenant\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(latch));\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .loginHint(username)\n+                .sessionExpected(false)\n+                .consentPageExpected(false)\n+                .broker(mBroker)\n+                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .build();\n+\n+        AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        latch.await();\n+\n+        //launching azure sample app and confirming user signed in or not.\n+        final AzureSampleApp azureSampleApp = new AzureSampleApp();\n+        azureSampleApp.install();\n+        azureSampleApp.launch();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(5));\n+        azureSampleApp.confirmSignedIn(username);\n+\n+        //signing in chrome browser.\n+        IBrowser chrome = new BrowserChrome();\n+        chrome.launch();\n+        chrome.handleFirstRun();", "originalCommit": "c58bfa23f56376e16598c7a93ddf9ed89dc34200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NzkzOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528747938", "bodyText": "whenever I cleared the history and launched the chrome app it is opening from accepting terms and conditions that's why I added chrome.handleFirstRun() method.", "author": "kkrishnareddy", "createdAt": "2020-11-23T14:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1MzM3OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r531253378", "bodyText": "As discussed the other day....doing the launch and handle first run should not be needed prior to doing the clear", "author": "shahzaibj", "createdAt": "2020-11-26T23:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3NDI4Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r533374282", "bodyText": "done.", "author": "kkrishnareddy", "createdAt": "2020-12-01T12:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTAxMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528039012", "bodyText": "navigateTo is not working....I see this method is TODO....do you have separate PR in common to implement this? Can you link these PRs?", "author": "shahzaibj", "createdAt": "2020-11-21T00:36:10Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833515.java", "diffHunk": "@@ -0,0 +1,179 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.annotations.SupportedBrokers;\n+import com.microsoft.identity.client.ui.automation.app.AzureSampleApp;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+// End My Shift - In Shared device mode, global sign out should work.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833515\n+@SupportedBrokers(brokers = {BrokerMicrosoftAuthenticator.class})\n+public class TestCase833515 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833515() throws MsalException, InterruptedException, UiObjectNotFoundException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        //creating a basic temp user account\n+        final String newUser = LabConstants.TempUserType.BASIC;\n+        final String username = LabUserHelper.loadTempUser(newUser);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(30));\n+\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        // try sign in with an account from the same tenant\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(latch));\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .loginHint(username)\n+                .sessionExpected(false)\n+                .consentPageExpected(false)\n+                .broker(mBroker)\n+                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .build();\n+\n+        AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        latch.await();\n+\n+        //launching azure sample app and confirming user signed in or not.\n+        final AzureSampleApp azureSampleApp = new AzureSampleApp();\n+        azureSampleApp.install();\n+        azureSampleApp.launch();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(5));\n+        azureSampleApp.confirmSignedIn(username);\n+\n+        //signing in chrome browser.\n+        IBrowser chrome = new BrowserChrome();\n+        chrome.launch();\n+        chrome.handleFirstRun();\n+        chrome.clear();\n+\n+        //relaunching chrome after clearing history of chrome.\n+        chrome.launch();\n+        chrome.handleFirstRun();\n+        chrome.navigateTo(\"https://myapps.microsoft.com\");", "originalCommit": "c58bfa23f56376e16598c7a93ddf9ed89dc34200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0Njc5Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528746793", "bodyText": "i added new function named navigateTo(string url);", "author": "kkrishnareddy", "createdAt": "2020-11-23T14:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyMzk4Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r530123983", "bodyText": "I have implemented the NavigatTo function in Browser Chrome and the link was provided in the description.", "author": "kkrishnareddy", "createdAt": "2020-11-25T05:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTAxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTE2OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528039169", "bodyText": "Let's use specific names like nextButton\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    UiObject button = UiAutomatorUtils.obtainUiObjectWithText(\"Next\");\n          \n          \n            \n                    UiObject nextButton = UiAutomatorUtils.obtainUiObjectWithText(\"Next\");", "author": "shahzaibj", "createdAt": "2020-11-21T00:37:01Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833515.java", "diffHunk": "@@ -0,0 +1,179 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.annotations.SupportedBrokers;\n+import com.microsoft.identity.client.ui.automation.app.AzureSampleApp;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+// End My Shift - In Shared device mode, global sign out should work.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833515\n+@SupportedBrokers(brokers = {BrokerMicrosoftAuthenticator.class})\n+public class TestCase833515 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833515() throws MsalException, InterruptedException, UiObjectNotFoundException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        //creating a basic temp user account\n+        final String newUser = LabConstants.TempUserType.BASIC;\n+        final String username = LabUserHelper.loadTempUser(newUser);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(30));\n+\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        // try sign in with an account from the same tenant\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(latch));\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .loginHint(username)\n+                .sessionExpected(false)\n+                .consentPageExpected(false)\n+                .broker(mBroker)\n+                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .build();\n+\n+        AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        latch.await();\n+\n+        //launching azure sample app and confirming user signed in or not.\n+        final AzureSampleApp azureSampleApp = new AzureSampleApp();\n+        azureSampleApp.install();\n+        azureSampleApp.launch();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(5));\n+        azureSampleApp.confirmSignedIn(username);\n+\n+        //signing in chrome browser.\n+        IBrowser chrome = new BrowserChrome();\n+        chrome.launch();\n+        chrome.handleFirstRun();\n+        chrome.clear();\n+\n+        //relaunching chrome after clearing history of chrome.\n+        chrome.launch();\n+        chrome.handleFirstRun();\n+        chrome.navigateTo(\"https://myapps.microsoft.com\");\n+        UiAutomatorUtils.handleInput(\"i0116\", username);\n+        UiObject button = UiAutomatorUtils.obtainUiObjectWithText(\"Next\");", "originalCommit": "c58bfa23f56376e16598c7a93ddf9ed89dc34200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NDgxMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528744812", "bodyText": "changed button to nextButton", "author": "kkrishnareddy", "createdAt": "2020-11-23T14:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTM3Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528039377", "bodyText": "This name is confusing....it saves account but the text on it seems to be No? Let's use more appropriate variable names", "author": "shahzaibj", "createdAt": "2020-11-21T00:38:02Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833515.java", "diffHunk": "@@ -0,0 +1,179 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.annotations.SupportedBrokers;\n+import com.microsoft.identity.client.ui.automation.app.AzureSampleApp;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+// End My Shift - In Shared device mode, global sign out should work.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833515\n+@SupportedBrokers(brokers = {BrokerMicrosoftAuthenticator.class})\n+public class TestCase833515 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833515() throws MsalException, InterruptedException, UiObjectNotFoundException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        //creating a basic temp user account\n+        final String newUser = LabConstants.TempUserType.BASIC;\n+        final String username = LabUserHelper.loadTempUser(newUser);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(30));\n+\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        // try sign in with an account from the same tenant\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(latch));\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .loginHint(username)\n+                .sessionExpected(false)\n+                .consentPageExpected(false)\n+                .broker(mBroker)\n+                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .build();\n+\n+        AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        latch.await();\n+\n+        //launching azure sample app and confirming user signed in or not.\n+        final AzureSampleApp azureSampleApp = new AzureSampleApp();\n+        azureSampleApp.install();\n+        azureSampleApp.launch();\n+        Thread.sleep(TimeUnit.SECONDS.toMillis(5));\n+        azureSampleApp.confirmSignedIn(username);\n+\n+        //signing in chrome browser.\n+        IBrowser chrome = new BrowserChrome();\n+        chrome.launch();\n+        chrome.handleFirstRun();\n+        chrome.clear();\n+\n+        //relaunching chrome after clearing history of chrome.\n+        chrome.launch();\n+        chrome.handleFirstRun();\n+        chrome.navigateTo(\"https://myapps.microsoft.com\");\n+        UiAutomatorUtils.handleInput(\"i0116\", username);\n+        UiObject button = UiAutomatorUtils.obtainUiObjectWithText(\"Next\");\n+        button.click();\n+        UiAutomatorUtils.handleInput(\"i0118\", password);\n+        UiAutomatorUtils.handleButtonClick(\"idSIButton9\");\n+        final UiObject saveAccount = UiAutomatorUtils.obtainUiObjectWithText(\"No\");", "originalCommit": "c58bfa23f56376e16598c7a93ddf9ed89dc34200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc0NTU0MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r528745541", "bodyText": "I change to noButton. I hope it is an appropriate name.", "author": "kkrishnareddy", "createdAt": "2020-11-23T14:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzOTM3Nw=="}], "type": "inlineReview"}, {"oid": "ee6dd3f3642379aa283e1f34d32db5a061a01457", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ee6dd3f3642379aa283e1f34d32db5a061a01457", "message": "resolving PR comments", "committedDate": "2020-11-23T14:31:56Z", "type": "commit"}, {"oid": "05f7bf17dcf5054fc68b751fe740ab02ccccf01c", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/05f7bf17dcf5054fc68b751fe740ab02ccccf01c", "message": "Merge branch 'kkoppart-TestCase833515' of https://github.com/AzureAD/microsoft-authentication-library-for-android into kkoppart-TestCase833515", "committedDate": "2020-11-23T14:32:13Z", "type": "commit"}, {"oid": "945ad644625bd5160754125d5e5135e83ac15b12", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/945ad644625bd5160754125d5e5135e83ac15b12", "message": "resolving PR comments", "committedDate": "2020-11-23T14:35:10Z", "type": "commit"}, {"oid": "f472e77bb977b8d42432c8b5c3fcadeedbe35df5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/f472e77bb977b8d42432c8b5c3fcadeedbe35df5", "message": "adding supported broker to the testcase", "committedDate": "2020-11-23T14:41:29Z", "type": "commit"}, {"oid": "62e32c6d05676ed224d8e52a468ff94774f4795d", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/62e32c6d05676ed224d8e52a468ff94774f4795d", "message": "NavigateTo using BrowserChrome", "committedDate": "2020-11-25T05:53:37Z", "type": "commit"}, {"oid": "551795a605b301f8cbbf24f80affb226923f24a2", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/551795a605b301f8cbbf24f80affb226923f24a2", "message": "Merge branch 'dev' into kkoppart-TestCase833515", "committedDate": "2020-11-26T20:05:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1NDQwOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1227#discussion_r531254408", "bodyText": "Can we avoid throwing the MsalException and UiObjectNotFoundException directly from the test? and rather just handle them within the test and throw it from the test by wrapping it into an AssertionError", "author": "shahzaibj", "createdAt": "2020-11-26T23:40:25Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833515.java", "diffHunk": "@@ -0,0 +1,184 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.annotations.SupportedBrokers;\n+import com.microsoft.identity.client.ui.automation.app.AzureSampleApp;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerHost;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+// End My Shift - In Shared device mode, global sign out should work.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833515\n+@SupportedBrokers(brokers = {BrokerMicrosoftAuthenticator.class, BrokerHost.class})\n+public class TestCase833515 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833515() throws MsalException, InterruptedException, UiObjectNotFoundException {", "originalCommit": "551795a605b301f8cbbf24f80affb226923f24a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "734dc2046f0b19fc45ae3d20b70bae3a80305982", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/734dc2046f0b19fc45ae3d20b70bae3a80305982", "message": "No need to launch Chrome for clearing chrome history", "committedDate": "2020-12-01T12:33:04Z", "type": "commit"}, {"oid": "7ed005ec26965bc815d39c006f097623f7541cbe", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/7ed005ec26965bc815d39c006f097623f7541cbe", "message": "Merge branch 'kkoppart-TestCase833515' of https://github.com/AzureAD/microsoft-authentication-library-for-android into kkoppart-TestCase833515", "committedDate": "2020-12-01T12:33:21Z", "type": "commit"}, {"oid": "ca15fdf3ef5a3ec75daccda43fda3070ae23edb4", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ca15fdf3ef5a3ec75daccda43fda3070ae23edb4", "message": "Asserting UI Objects", "committedDate": "2020-12-02T00:32:39Z", "type": "commit"}, {"oid": "20198a13aaa0c3575d667c4f56b995b25119ba65", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/20198a13aaa0c3575d667c4f56b995b25119ba65", "message": "Merge branch 'dev' into kkoppart-TestCase833515", "committedDate": "2020-12-12T18:25:43Z", "type": "commit"}, {"oid": "769f65f0b9c8e2339a56058ad46f9a70a2be48f9", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/769f65f0b9c8e2339a56058ad46f9a70a2be48f9", "message": "Improve test 833515", "committedDate": "2020-12-12T19:34:54Z", "type": "commit"}, {"oid": "209ea4372f2fdec3a544d0213881e24149449cde", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/209ea4372f2fdec3a544d0213881e24149449cde", "message": "Update common", "committedDate": "2020-12-12T22:45:53Z", "type": "commit"}]}