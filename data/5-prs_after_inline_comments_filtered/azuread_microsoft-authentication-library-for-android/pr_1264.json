{"pr_number": 1264, "pr_title": "Aymeghwa/add msalsdk testcases", "pr_createdAt": "2020-12-24T16:55:04Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264", "timeline": [{"oid": "c99ed2f4eac8064797044e573fcd976a11b101cb", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/c99ed2f4eac8064797044e573fcd976a11b101cb", "message": "add MSAL Sdk Wrapper for Automation Testcases", "committedDate": "2020-12-24T11:33:16Z", "type": "commit"}, {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/32457cb697599d08d9cfd8e5c9d53828e31d8f56", "message": "add MSAl Automation TestCases with MSAL Sdk Wrapper", "committedDate": "2020-12-24T16:52:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1ODM5Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552358392", "bodyText": "Remove this?", "author": "shahzaibj", "createdAt": "2021-01-06T04:10:41Z", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,\n+                                                     final String username) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getAccount(username, new IMultipleAccountPublicClientApplication.GetAccountCallback() {\n+            @Override\n+            public void onTaskCompleted(IAccount result) {\n+                future.setResult(result);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+//    private AuthenticationContext createAuthContext(final Context context, final String authority) {\n+//        return new AuthenticationContext(context, authority, true);\n+//    }\n+//\n+//    private AuthenticationCallback getAuthenticationCallback(\n+//            final ResultFuture<AuthenticationResult, Exception> future) {\n+//        return new AuthenticationCallback<AuthenticationResult>() {\n+//            @Override\n+//            public void onSuccess(final AuthenticationResult authenticationResult) {\n+//                upnUserIdMap.put(\n+//                        authenticationResult.getUserInfo().getDisplayableId(),\n+//                        authenticationResult.getUserInfo().getUserId()\n+//                );\n+//                future.setResult(authenticationResult);\n+//            }\n+//\n+//            @Override\n+//            public void onError(final Exception e) {\n+//                future.setException(e);\n+//            }\n+//        };\n+//    }", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNjA1OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552816059", "bodyText": "removed", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1ODM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1OTczMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552359733", "bodyText": "add new line at end of file", "author": "shahzaibj", "createdAt": "2021-01-06T04:16:10Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796048Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(false)\n+                        .speedBumpExpected(false)\n+                        .broker(mBroker)\n+                        .expectingBrokerAccountChooserActivity(false)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);\n+\n+        authResult.assertSuccess();\n+\n+        // now expire AT\n+\n+        TestContext.getTestContext().getTestDevice().getSettings().forwardDeviceTimeForOneDay();\n+\n+        // SILENT REQUEST\n+\n+        final MsalAuthTestParams authTestSilentParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .authority(getAuthority())\n+                .forceRefresh(true)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+        final MsalAuthResult silentAuthResult = msalSdk.acquireTokenSilent(authTestSilentParams, null);\n+\n+        silentAuthResult.assertSuccess();\n+    }\n+\n+\n+    @Override\n+    public LabUserQuery getLabUserQuery() {\n+        final LabUserQuery query = new LabUserQuery();\n+        query.azureEnvironment = LabConstants.AzureEnvironment.AZURE_GERMANY_CLOUD;\n+        return query;\n+    }\n+\n+    @Override\n+    public String getTempUserType() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String[] getScopes() {\n+        return new String[]{\"00000002-0000-0000-c000-000000000000\"};\n+    }\n+\n+    @Override\n+    public String getAuthority() {\n+        return \"https://login.microsoftonline.de/common\";\n+    }\n+\n+    @Override\n+    public int getConfigFileResourceId() {\n+        return R.raw.msal_config_instance_aware_common;\n+    }\n+\n+}", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNjE5Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552816192", "bodyText": "added.", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1OTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTE4NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552361184", "bodyText": "Can we move this as a generic interface to uiautomationutilities? that way it can used by both MSAL and ADAL automation", "author": "shahzaibj", "createdAt": "2021-01-06T04:23:06Z", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/IAuthSdk.java", "diffHunk": "@@ -0,0 +1,51 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+\n+/**\n+ * An interface describing methods of acquire token. Implementing this interface\n+ * on a test facilitates specifying the necessary parameters required to acquire\n+ * token either interactively or silently.\n+ */\n+public interface IAuthSdk {", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2Mjc0Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552362746", "bodyText": "you could do something like this:\npublic interface IAuthSdk<T extends AuthTestParams> {\n\n    /**\n     * Get the token interactively that can be used to access resources.\n     *\n     * @return A resultant token or an exception occurred while acquiring token interactively\n     */\n    AuthResult acquireTokenInteractive(@NonNull final T authTestParams,\n                                       final OnInteractionRequired interactionRequiredCallback, final TokenRequestTimeout tokenRequestTimeout) throws Throwable;\n\n    /**\n     * Get the token silently that can be used to access resources.\n     *\n     * @return A resultant token or an exception occurred while acquiring token silently\n     */\n    AuthResult acquireTokenSilent(@NonNull final T authTestParams, final TokenRequestTimeout tokenRequestTimeout) throws Throwable;\n}\nand then in the MSAL SDK you could do something like this:\npublic class MsalSdk implements IAuthSdk<MsalAuthTestParams> {\n // remaining code here won't need to change\n}\nThis would allow you to have a much more generic IAuthSdk and move it to uiautomationutilities", "author": "shahzaibj", "createdAt": "2021-01-06T04:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNzAzNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552817034", "bodyText": "added the generic Auth Sdk in uiautomation utilities (common) and using here now.", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTgyMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552361822", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception exception) {\n          \n          \n            \n                    } catch (final Exception exception) {", "author": "shahzaibj", "createdAt": "2021-01-06T04:25:58Z", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgzMDI3NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552830275", "bodyText": "added", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTg5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552361897", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n          \n          \n            \n                private IAccount getAccountForSingleAccountPca(@NonNull final SingleAccountPublicClientApplication pca) {", "author": "shahzaibj", "createdAt": "2021-01-06T04:26:16Z", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyNTQzNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552825437", "bodyText": "added", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTk2Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552361963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,\n          \n          \n            \n                private IAccount getAccountForMultipleAccountPca(@NonNull final MultipleAccountPublicClientApplication pca,", "author": "shahzaibj", "createdAt": "2021-01-06T04:26:33Z", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyNDk4MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552824981", "bodyText": "added", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjAxNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552362015", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception exception) {\n          \n          \n            \n                    } catch (final Exception exception) {", "author": "shahzaibj", "createdAt": "2021-01-06T04:26:42Z", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,\n+                                                     final String username) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getAccount(username, new IMultipleAccountPublicClientApplication.GetAccountCallback() {\n+            @Override\n+            public void onTaskCompleted(IAccount result) {\n+                future.setResult(result);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyNDU3Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552824577", "bodyText": "added", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjI0OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552362248", "bodyText": "I don't think we need this", "author": "shahzaibj", "createdAt": "2021-01-06T04:27:23Z", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyMzg2Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552823867", "bodyText": "removed.", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjkyNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552362925", "bodyText": "not needed?", "author": "shahzaibj", "createdAt": "2021-01-06T04:30:26Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+//        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+//                .startAuthorizationFromActivity(mActivity)\n+//                .withLoginHint(mLoginHint)\n+//                .withScopes(Arrays.asList(mScopes))\n+//                .withCallback(successfulInteractiveCallback(latch))\n+//                .withPrompt(Prompt.SELECT_ACCOUNT)\n+//                .build();", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyMDg1Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552820853", "bodyText": "removed.", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MzA5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552363097", "bodyText": "Can we just import the class directly at the top of the file?", "author": "shahzaibj", "createdAt": "2021-01-06T04:31:18Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+//        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+//                .startAuthorizationFromActivity(mActivity)\n+//                .withLoginHint(mLoginHint)\n+//                .withScopes(Arrays.asList(mScopes))\n+//                .withCallback(successfulInteractiveCallback(latch))\n+//                .withPrompt(Prompt.SELECT_ACCOUNT)\n+//                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired() {", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyMTMyMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552821320", "bodyText": "done.", "author": "ayushmeghwani", "createdAt": "2021-01-06T17:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MzA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NjA1Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552366056", "bodyText": "we should change the parent to make these private and the parent should initialize these...over here we would just call super", "author": "shahzaibj", "createdAt": "2021-01-06T04:43:53Z", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalAuthResult.java", "diffHunk": "@@ -0,0 +1,49 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.ui.automation.sdk.AuthResult;\n+\n+import java.util.Map;\n+\n+// MSAL Result Class to handle asserting success or failure on execution of Automated Test Cases\n+public class MsalAuthResult extends AuthResult {\n+\n+    private Map<String, ?> claims;\n+\n+    public MsalAuthResult(@NonNull final IAuthenticationResult authenticationResult) {\n+        this.accessToken = authenticationResult.getAccessToken();\n+        this.idToken = authenticationResult.getAccount().getIdToken();\n+        this.userId = authenticationResult.getAccount().getId();\n+        this.username = authenticationResult.getAccount().getUsername();\n+        this.authority = authenticationResult.getAccount().getAuthority();\n+        this.claims = authenticationResult.getAccount().getClaims();", "originalCommit": "32457cb697599d08d9cfd8e5c9d53828e31d8f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5NDQ0Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552894447", "bodyText": "calling super() of parent class's constructor now.", "author": "ayushmeghwani", "createdAt": "2021-01-06T18:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NjA1Ng=="}], "type": "inlineReview"}, {"oid": "18aa26cd15a852c3a965a162a6dabc7f905fa0ec", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/18aa26cd15a852c3a965a162a6dabc7f905fa0ec", "message": "remove extra comments and make some parameters final", "committedDate": "2021-01-06T16:22:12Z", "type": "commit"}, {"oid": "80f5f85f6e0db34e416e6f99b770bd8141ff4023", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/80f5f85f6e0db34e416e6f99b770bd8141ff4023", "message": "Merge branch 'aymeghwa/add-msal-wrapper' of https://github.com/AzureAD/microsoft-authentication-library-for-android into aymeghwa/add-msalsdk-testcases", "committedDate": "2021-01-06T16:24:00Z", "type": "commit"}, {"oid": "ccbb4d43bcd7308889dd52bb656ca430477fd2c7", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ccbb4d43bcd7308889dd52bb656ca430477fd2c7", "message": "add extra line at eof and remove comments", "committedDate": "2021-01-06T16:43:43Z", "type": "commit"}, {"oid": "3e2562572ff4247e81ca86a7f272bdeb81fcb23a", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/3e2562572ff4247e81ca86a7f272bdeb81fcb23a", "message": "make some parameters final", "committedDate": "2021-01-06T16:47:53Z", "type": "commit"}, {"oid": "248a7e6b957195e103816f08dadc4c6a93c7d3a6", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/248a7e6b957195e103816f08dadc4c6a93c7d3a6", "message": "use new generic Auth SDK from ui automation utilities", "committedDate": "2021-01-06T17:06:51Z", "type": "commit"}, {"oid": "6e9ba29f787afa7afa7affe0b28633829bf71b9f", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/6e9ba29f787afa7afa7affe0b28633829bf71b9f", "message": "Merge branch 'aymeghwa/add-msal-wrapper' of https://github.com/AzureAD/microsoft-authentication-library-for-android into aymeghwa/add-msalsdk-testcases", "committedDate": "2021-01-06T17:10:18Z", "type": "commit"}, {"oid": "7a131d5628a6164fc5bdd67cc9fecdbcf5475190", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/7a131d5628a6164fc5bdd67cc9fecdbcf5475190", "message": "make Exception parameter final", "committedDate": "2021-01-06T17:20:01Z", "type": "commit"}, {"oid": "0e7b07c65469da177456c149e4e89f96613a482e", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/0e7b07c65469da177456c149e4e89f96613a482e", "message": "Merge branch 'aymeghwa/add-msal-wrapper' of https://github.com/AzureAD/microsoft-authentication-library-for-android into aymeghwa/add-msalsdk-testcases", "committedDate": "2021-01-06T17:21:01Z", "type": "commit"}, {"oid": "21c155575b59d821385d81359db5f4225b477841", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/21c155575b59d821385d81359db5f4225b477841", "message": "remove MSAL specific SDK", "committedDate": "2021-01-06T17:31:13Z", "type": "commit"}, {"oid": "84d8aebd8c392c56f92ee0c714ee0f41b091b3f9", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/84d8aebd8c392c56f92ee0c714ee0f41b091b3f9", "message": "call super of parent class to initialize variables", "committedDate": "2021-01-06T18:38:02Z", "type": "commit"}, {"oid": "d449d6f01c04d653091ac18f088ad9b449d767d9", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/d449d6f01c04d653091ac18f088ad9b449d767d9", "message": "Merge branch 'aymeghwa/add-msal-wrapper' of https://github.com/AzureAD/microsoft-authentication-library-for-android into aymeghwa/add-msalsdk-testcases", "committedDate": "2021-01-06T18:40:28Z", "type": "commit"}, {"oid": "632d9c14700e355f95e1dc804712af55143c0a31", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/632d9c14700e355f95e1dc804712af55143c0a31", "message": "Revert \"make Exception parameter final\"\n\nThis reverts commit 7a131d5628a6164fc5bdd67cc9fecdbcf5475190.", "committedDate": "2021-01-06T18:42:33Z", "type": "commit"}, {"oid": "2604a0b36c2f394de80fb2bb9c4aacdb3a7ffcfe", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/2604a0b36c2f394de80fb2bb9c4aacdb3a7ffcfe", "message": "make exception parameter final", "committedDate": "2021-01-06T18:49:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwNjg0NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553106845", "bodyText": "Missing license", "author": "shahzaibj", "createdAt": "2021-01-07T04:47:05Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;", "originalCommit": "632d9c14700e355f95e1dc804712af55143c0a31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NDYzMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553844633", "bodyText": "added.", "author": "ayushmeghwani", "createdAt": "2021-01-08T09:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwNjg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTkzMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553111932", "bodyText": "Why no timeout supplied?", "author": "shahzaibj", "createdAt": "2021-01-07T05:09:08Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796048Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(false)\n+                        .speedBumpExpected(false)\n+                        .broker(mBroker)\n+                        .expectingBrokerAccountChooserActivity(false)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);", "originalCommit": "632d9c14700e355f95e1dc804712af55143c0a31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NDk1OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553844959", "bodyText": "added.", "author": "ayushmeghwani", "createdAt": "2021-01-08T09:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTk5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553111997", "bodyText": "Why no timeout supplied?", "author": "shahzaibj", "createdAt": "2021-01-07T05:09:25Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(true)\n+                        .speedBumpExpected(false)\n+                        .consentPageResponse(UiResponse.ACCEPT)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);", "originalCommit": "632d9c14700e355f95e1dc804712af55143c0a31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NDk5OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553844999", "bodyText": "added", "author": "ayushmeghwani", "createdAt": "2021-01-08T09:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTk5Nw=="}], "type": "inlineReview"}, {"oid": "0291d967412af4c9930e949d52d5c26342535fa0", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/0291d967412af4c9930e949d52d5c26342535fa0", "message": "make timeout required parameter for acquiring token", "committedDate": "2021-01-07T12:28:10Z", "type": "commit"}, {"oid": "492cfdf03a53a5938f36779fb4e3ddf94b3aee95", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/492cfdf03a53a5938f36779fb4e3ddf94b3aee95", "message": "Merge branch 'aymeghwa/add-msal-wrapper' of https://github.com/AzureAD/microsoft-authentication-library-for-android into aymeghwa/add-msalsdk-testcases", "committedDate": "2021-01-07T12:28:52Z", "type": "commit"}, {"oid": "625ab13d9753c852176129a1ce887d4b501c7886", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/625ab13d9753c852176129a1ce887d4b501c7886", "message": "add timeout to MSAL Automation Test Cases", "committedDate": "2021-01-07T12:33:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY2ODEzMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553668132", "bodyText": "add link to test case in ADO (can just copy from the non-clone test case)", "author": "shahzaibj", "createdAt": "2021-01-08T00:18:29Z", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {", "originalCommit": "625ab13d9753c852176129a1ce887d4b501c7886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NDcxNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553844717", "bodyText": "added.", "author": "ayushmeghwani", "createdAt": "2021-01-08T09:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY2ODEzMg=="}], "type": "inlineReview"}, {"oid": "5d76da022c9c04979e3a91c4e70bc10f54b02a05", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/5d76da022c9c04979e3a91c4e70bc10f54b02a05", "message": "add liscence and description of testcase", "committedDate": "2021-01-08T09:49:32Z", "type": "commit"}, {"oid": "eeca8935a20d560a934068ec4e2a453ad46f82a8", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/eeca8935a20d560a934068ec4e2a453ad46f82a8", "message": "remove old and add new wrapper test cases", "committedDate": "2021-01-08T09:56:11Z", "type": "commit"}]}