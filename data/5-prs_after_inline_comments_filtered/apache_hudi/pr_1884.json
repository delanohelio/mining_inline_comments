{"pr_number": 1884, "pr_title": "[HUDI-995] Use Transformations, Assertions and SchemaTestUtil", "pr_createdAt": "2020-07-28T23:41:46Z", "pr_url": "https://github.com/apache/hudi/pull/1884", "timeline": [{"oid": "a883343311ab20117e9c28b9132d468ddd4df438", "url": "https://github.com/apache/hudi/commit/a883343311ab20117e9c28b9132d468ddd4df438", "message": "[HUDI-995] Use Transformations, Assertions and SchemaTestUtil\n\n- Consolidate transform functions for tests in Transformations.java\n- Consolidate assertion functions for tests in Assertions.java\n- Make use of SchemaTestUtil for loading schema from resource", "committedDate": "2020-07-29T03:36:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNTExNA==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462015114", "bodyText": "moving message arg to the last, align with junit API style", "author": "xushiyan", "createdAt": "2020-07-29T03:23:41Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/timeline/TestHoodieActiveTimeline.java", "diffHunk": "@@ -94,17 +94,19 @@ public void testLoadingInstantsFromFiles() throws IOException {\n     timeline = timeline.reload();\n \n     assertEquals(5, timeline.countInstants(), \"Total instants should be 5\");\n-    HoodieTestUtils.assertStreamEquals(\"Check the instants stream\",\n+    assertStreamEquals(", "originalCommit": "ed48c2df4e7a9287a7062144c1b812cae26fc7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNjE4Nw==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462016187", "bodyText": "IMO not needing real randomness for caller's scenario", "author": "xushiyan", "createdAt": "2020-07-29T03:28:10Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {\n+    return keys.stream()\n+        .map(hr -> \"{\\\"_row_key\\\":\\\"\" + hr.getRecordKey() + \"\\\",\\\"partition\\\":\\\"\" + hr.getPartitionPath() + \"\\\"}\")\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static List<String> recordsToStrings(List<HoodieRecord> records) {\n+    return records.stream().map(Transformations::recordToString).filter(Option::isPresent).map(Option::get)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static Option<String> recordToString(HoodieRecord record) {\n+    try {\n+      String str = ((RawTripTestPayload) record.getData()).getJsonData();\n+      str = \"{\" + str.substring(str.indexOf(\"\\\"timestamp\\\":\"));\n+      // Remove the last } bracket\n+      str = str.substring(0, str.length() - 1);\n+      return Option.of(str + \", \\\"partition\\\": \\\"\" + record.getPartitionPath() + \"\\\"}\");\n+    } catch (IOException e) {\n+      return Option.empty();\n+    }\n+  }\n+\n+  /**\n+   * Pseudorandom: select even indices first, then select odd ones.\n+   */\n+  public static <T> List<T> randomSelect(List<T> items, int n) {", "originalCommit": "ed48c2df4e7a9287a7062144c1b812cae26fc7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNzA5MA==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462017090", "bodyText": "all methods moved to Transformations.java", "author": "xushiyan", "createdAt": "2020-07-29T03:31:46Z", "path": "hudi-spark/src/test/java/org/apache/hudi/testutils/DataSourceTestUtils.java", "diffHunk": "@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hudi.testutils;\n-\n-import org.apache.hudi.common.model.HoodieKey;\n-import org.apache.hudi.common.model.HoodieRecord;\n-import org.apache.hudi.common.model.HoodieRecordPayload;\n-import org.apache.hudi.common.testutils.RawTripTestPayload;\n-import org.apache.hudi.common.util.Option;\n-import org.apache.hudi.table.UserDefinedBulkInsertPartitioner;\n-\n-import org.apache.spark.api.java.JavaRDD;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-/**\n- * Test utils for data source tests.\n- */\n-public class DataSourceTestUtils {", "originalCommit": "ed48c2df4e7a9287a7062144c1b812cae26fc7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTM5MA==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462669390", "bodyText": "Considering _row_key is not a generic definition. IMO, we should put this method into a util class. The xxxs class should be more generic. WDYT?", "author": "yanghua", "createdAt": "2020-07-30T00:45:52Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {", "originalCommit": "a883343311ab20117e9c28b9132d468ddd4df438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NDc4Ng==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462674786", "bodyText": "make sense.. as this is only used by HoodieJavaApp#run and specific to its own logic, let's put it there for its own usage?", "author": "xushiyan", "createdAt": "2020-07-30T01:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTQ4NA==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462669484", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-07-30T00:46:18Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/Transformations.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieKey;\n+import org.apache.hudi.common.model.HoodieRecord;\n+import org.apache.hudi.common.util.Option;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Common transformations in test cases.\n+ */\n+public final class Transformations {\n+\n+  public static <T> List<T> flatten(Iterator<List<T>> iteratorOfLists) {\n+    List<T> flattened = new ArrayList<>();\n+    iteratorOfLists.forEachRemaining(flattened::addAll);\n+    return flattened;\n+  }\n+\n+  public static <T> Iterator<T> flattenAsIterator(Iterator<List<T>> iteratorOfLists) {\n+    return flatten(iteratorOfLists).iterator();\n+  }\n+\n+  public static Set<String> recordsToRecordKeySet(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getRecordKey).collect(Collectors.toSet());\n+  }\n+\n+  public static List<HoodieKey> recordsToHoodieKeys(List<HoodieRecord> records) {\n+    return records.stream().map(HoodieRecord::getKey).collect(Collectors.toList());\n+  }\n+\n+  public static List<String> hoodieKeysToStrings(List<HoodieKey> keys) {\n+    return keys.stream()\n+        .map(hr -> \"{\\\"_row_key\\\":\\\"\" + hr.getRecordKey() + \"\\\",\\\"partition\\\":\\\"\" + hr.getPartitionPath() + \"\\\"}\")\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static List<String> recordsToStrings(List<HoodieRecord> records) {\n+    return records.stream().map(Transformations::recordToString).filter(Option::isPresent).map(Option::get)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public static Option<String> recordToString(HoodieRecord record) {", "originalCommit": "a883343311ab20117e9c28b9132d468ddd4df438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NTMyNw==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462675327", "bodyText": "this method and Transformations#recordsToStrings work for HoodieRecord of RawTripTestPayload, how about moving them to RawTripTestPayload.java?", "author": "xushiyan", "createdAt": "2020-07-30T01:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MTgzMA==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462681830", "bodyText": "Sounds good.", "author": "yanghua", "createdAt": "2020-07-30T01:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2OTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3MDgwNw==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462670807", "bodyText": "It would be better to extract those file names into constant fields in this file. WDYT?", "author": "yanghua", "createdAt": "2020-07-30T00:51:21Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/SchemaTestUtil.java", "diffHunk": "@@ -66,12 +66,12 @@ public static Schema getSimpleSchema() throws IOException {\n       throws IOException, URISyntaxException {\n     GenericDatumReader<IndexedRecord> reader = new GenericDatumReader<>(writerSchema, readerSchema);\n     // Required to register the necessary JAR:// file system\n-    URI resource = SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI();\n+    URI resource = SchemaTestUtil.class.getResource(\"/sample.data\").toURI();", "originalCommit": "a883343311ab20117e9c28b9132d468ddd4df438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjUzNg==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r462676536", "bodyText": "yup fixing it", "author": "xushiyan", "createdAt": "2020-07-30T01:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3MDgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDM1Ng==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r463350356", "bodyText": "May it be TestHoodieBloomIndex.class?", "author": "yanghua", "createdAt": "2020-07-31T00:56:42Z", "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestHoodieBloomIndex.java", "diffHunk": "@@ -73,9 +72,7 @@\n \n public class TestHoodieBloomIndex extends HoodieClientTestHarness {\n \n-  private String schemaStr;\n-  private Schema schema;\n-\n+  private static final Schema SCHEMA = getSchemaFromResource(TestHoodieGlobalBloomIndex.class, \"/exampleSchema.txt\", true);", "originalCommit": "efc9057e17621e20b5fa3042f6e727bd1440ed36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NTQyOA==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r463355428", "bodyText": "fixed.", "author": "xushiyan", "createdAt": "2020-07-31T01:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTM1NQ==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r463351355", "bodyText": "Is the old simple_data.json not correct, right?", "author": "yanghua", "createdAt": "2020-07-31T01:00:38Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/SchemaTestUtil.java", "diffHunk": "@@ -66,24 +68,24 @@ public static Schema getSimpleSchema() throws IOException {\n       throws IOException, URISyntaxException {\n     GenericDatumReader<IndexedRecord> reader = new GenericDatumReader<>(writerSchema, readerSchema);\n     // Required to register the necessary JAR:// file system\n-    URI resource = SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI();\n+    URI resource = SchemaTestUtil.class.getResource(RESOURCE_SAMPLE_DATA).toURI();\n     Path dataPath;\n     if (resource.toString().contains(\"!\")) {\n       dataPath = uriToPath(resource);\n     } else {\n-      dataPath = Paths.get(SchemaTestUtil.class.getClass().getResource(\"/sample.data\").toURI());\n+      dataPath = Paths.get(SchemaTestUtil.class.getResource(RESOURCE_SAMPLE_DATA).toURI());\n     }\n \n     try (Stream<String> stream = Files.lines(dataPath)) {\n       return stream.skip(from).limit(limit).map(s -> {\n         try {\n           return reader.read(null, DecoderFactory.get().jsonDecoder(writerSchema, s));\n         } catch (IOException e) {\n-          throw new HoodieIOException(\"Could not read data from simple_data.json\", e);\n+          throw new HoodieIOException(\"Could not read data from \" + RESOURCE_SAMPLE_DATA, e);", "originalCommit": "efc9057e17621e20b5fa3042f6e727bd1440ed36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NTUwOQ==", "url": "https://github.com/apache/hudi/pull/1884#discussion_r463355509", "bodyText": "yea \"simple_data.json\" does not exist.", "author": "xushiyan", "createdAt": "2020-07-31T01:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTM1NQ=="}], "type": "inlineReview"}, {"oid": "783a3a1e6bbd11cf300000bed024617c00795046", "url": "https://github.com/apache/hudi/commit/783a3a1e6bbd11cf300000bed024617c00795046", "message": "[HUDI-995] Use Transformations, Assertions and SchemaTestUtil\n\n- Consolidate transform functions for tests in Transformations.java\n- Consolidate assertion functions for tests in Assertions.java\n- Make use of SchemaTestUtil for loading schema from resource", "committedDate": "2020-08-01T01:47:59Z", "type": "forcePushed"}, {"oid": "523df1166e0d7dcaab12ebb56fb05f3cb304be3a", "url": "https://github.com/apache/hudi/commit/523df1166e0d7dcaab12ebb56fb05f3cb304be3a", "message": "[HUDI-995] Use Transformations, Assertions and SchemaTestUtil\n\n- Consolidate transform functions for tests in Transformations.java\n- Consolidate assertion functions for tests in Assertions.java\n- Make use of SchemaTestUtil for loading schema from resource", "committedDate": "2020-08-01T01:55:04Z", "type": "forcePushed"}, {"oid": "3d6e60d29818af8595610048da4463e600c078a8", "url": "https://github.com/apache/hudi/commit/3d6e60d29818af8595610048da4463e600c078a8", "message": "[HUDI-995] Use Transformations, Assertions and SchemaTestUtil\n\n- Consolidate transform functions for tests in Transformations.java\n- Consolidate assertion functions for tests in Assertions.java\n- Make use of SchemaTestUtil for loading schema from resource", "committedDate": "2020-08-01T02:10:53Z", "type": "commit"}, {"oid": "3d6e60d29818af8595610048da4463e600c078a8", "url": "https://github.com/apache/hudi/commit/3d6e60d29818af8595610048da4463e600c078a8", "message": "[HUDI-995] Use Transformations, Assertions and SchemaTestUtil\n\n- Consolidate transform functions for tests in Transformations.java\n- Consolidate assertion functions for tests in Assertions.java\n- Make use of SchemaTestUtil for loading schema from resource", "committedDate": "2020-08-01T02:10:53Z", "type": "forcePushed"}]}