{"pr_number": 1645, "pr_title": "[HUDI-707]Add unit test for StatsCommand", "pr_createdAt": "2020-05-20T07:47:30Z", "pr_url": "https://github.com/apache/hudi/pull/1645", "timeline": [{"oid": "a33b5603a06c7e326dba5ce365a402a171540858", "url": "https://github.com/apache/hudi/commit/a33b5603a06c7e326dba5ce365a402a171540858", "message": "Add-test-StatsCommand rebase master", "committedDate": "2020-05-21T04:29:43Z", "type": "commit"}, {"oid": "a33b5603a06c7e326dba5ce365a402a171540858", "url": "https://github.com/apache/hudi/commit/a33b5603a06c7e326dba5ce365a402a171540858", "message": "Add-test-StatsCommand rebase master", "committedDate": "2020-05-21T04:29:43Z", "type": "forcePushed"}, {"oid": "a7d26cb278efb08b956f4c5ca92f245b1e57ee96", "url": "https://github.com/apache/hudi/commit/a7d26cb278efb08b956f4c5ca92f245b1e57ee96", "message": "Reset", "committedDate": "2020-05-21T05:39:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5MDA1MA==", "url": "https://github.com/apache/hudi/pull/1645#discussion_r428490050", "bodyText": "Can we remove stdout print?", "author": "yanghua", "createdAt": "2020-05-21T07:26:03Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java", "diffHunk": "@@ -64,8 +64,9 @@ public void init() throws IOException {\n     tablePath = basePath + File.separator + tableName;\n \n     // Create table and connect\n+    System.out.println(tablePath);", "originalCommit": "a7d26cb278efb08b956f4c5ca92f245b1e57ee96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5MDU2Ng==", "url": "https://github.com/apache/hudi/pull/1645#discussion_r428490566", "bodyText": "-> Map<String, Integer[]> data = new LinkedHashMap<>();", "author": "yanghua", "createdAt": "2020-05-21T07:27:27Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestStatsCommand.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import com.codahale.metrics.Histogram;\n+import com.codahale.metrics.Snapshot;\n+import com.codahale.metrics.UniformReservoir;\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.HoodieTableHeaderFields;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.HoodieTestDataGenerator;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.table.timeline.versioning.TimelineLayoutVersion;\n+import org.apache.hudi.common.util.Option;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.text.DecimalFormat;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class of {@link org.apache.hudi.cli.commands.StatsCommand}.\n+ */\n+public class TestStatsCommand extends AbstractShellIntegrationTest {\n+\n+  private String tablePath;\n+\n+  @BeforeEach\n+  public void init() throws IOException {\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+    // Create table and connect\n+    new TableCommand().createTable(\n+        tablePath, \"test_table\", HoodieTableType.COPY_ON_WRITE.name(),\n+        \"\", TimelineLayoutVersion.VERSION_1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+  }\n+\n+  /**\n+   * Test case for command 'stats wa'.\n+   */\n+  @Test\n+  public void testWriteAmplificationStats() {\n+    // generate data and metadata\n+    Map<String, Integer[]> data = new LinkedHashMap();", "originalCommit": "a7d26cb278efb08b956f4c5ca92f245b1e57ee96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5MTExNQ==", "url": "https://github.com/apache/hudi/pull/1645#discussion_r428491115", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-05-21T07:28:51Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestStatsCommand.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import com.codahale.metrics.Histogram;\n+import com.codahale.metrics.Snapshot;\n+import com.codahale.metrics.UniformReservoir;\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.HoodieTableHeaderFields;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.HoodieTestDataGenerator;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.table.timeline.versioning.TimelineLayoutVersion;\n+import org.apache.hudi.common.util.Option;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.text.DecimalFormat;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test class of {@link org.apache.hudi.cli.commands.StatsCommand}.\n+ */\n+public class TestStatsCommand extends AbstractShellIntegrationTest {\n+\n+  private String tablePath;\n+\n+  @BeforeEach\n+  public void init() throws IOException {\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+\n+    HoodieCLI.conf = jsc.hadoopConfiguration();\n+    // Create table and connect\n+    new TableCommand().createTable(\n+        tablePath, \"test_table\", HoodieTableType.COPY_ON_WRITE.name(),\n+        \"\", TimelineLayoutVersion.VERSION_1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+  }\n+\n+  /**\n+   * Test case for command 'stats wa'.\n+   */\n+  @Test\n+  public void testWriteAmplificationStats() {\n+    // generate data and metadata\n+    Map<String, Integer[]> data = new LinkedHashMap();\n+    data.put(\"100\", new Integer[] {15, 10});\n+    data.put(\"101\", new Integer[] {20, 10});\n+    data.put(\"102\", new Integer[] {15, 15});\n+\n+    data.forEach((key, value) -> {\n+      HoodieTestCommitMetadataGenerator.createCommitFileWithMetadata(tablePath, key, jsc.hadoopConfiguration(),\n+          Option.of(value[0]), Option.of(value[1]));\n+    });\n+\n+    CommandResult cr = getShell().executeCommand(\"stats wa\");\n+    assertTrue(cr.isSuccess());\n+\n+    // generate expect\n+    List<Comparable[]> rows = new ArrayList<>();\n+    DecimalFormat df = new DecimalFormat(\"#.00\");\n+    data.forEach((key, value) -> {\n+      // there are two partitions, so need to *2\n+      rows.add(new Comparable[]{key, value[1] * 2, value[0] * 2, df.format((float) value[0] / value[1])});\n+    });\n+    int totalWrite = data.values().stream().map(integers -> integers[0] * 2).mapToInt(s -> s).sum();\n+    int totalUpdate = data.values().stream().map(integers -> integers[1] * 2).mapToInt(s -> s).sum();\n+    rows.add(new Comparable[]{\"Total\", totalUpdate, totalWrite, df.format((float) totalWrite / totalUpdate)});\n+\n+    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_COMMIT_TIME)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_UPSERTED)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_WRITTEN)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_WRITE_AMPLIFICATION_FACTOR);\n+    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n+\n+    assertEquals(expected, cr.getResult().toString());\n+  }\n+\n+  /**\n+   * Test case for command 'stats filesizes'.\n+   */\n+  @Test\n+  public void testFileSizeStats() throws IOException {\n+    String commit1 = \"100\";\n+    String commit2 = \"101\";\n+    Map<String, Integer[]> data = new LinkedHashMap();", "originalCommit": "a7d26cb278efb08b956f4c5ca92f245b1e57ee96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5MTc4MA==", "url": "https://github.com/apache/hudi/pull/1645#discussion_r428491780", "bodyText": "Can we return a generic type Map<String, Function<Object, String>>?", "author": "yanghua", "createdAt": "2020-05-21T07:30:30Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/StatsCommand.java", "diffHunk": "@@ -138,6 +141,20 @@ public String fileSizeStats(\n     Snapshot s = globalHistogram.getSnapshot();\n     rows.add(printFileSizeHistogram(\"ALL\", s));\n \n+    TableHeader header = new TableHeader()\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_COMMIT_TIME)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_HISTOGRAM_MIN)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_HISTOGRAM_10TH)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_HISTOGRAM_50TH)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_HISTOGRAM_AVG)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_HISTOGRAM_95TH)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_HISTOGRAM_MAX)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_HISTOGRAM_NUM_FILES)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_HISTOGRAM_STD_DEV);\n+    return HoodiePrintHelper.print(header, getFieldNameToConverterMap(), sortByField, descending, limit, headerOnly, rows);\n+  }\n+\n+  public Map getFieldNameToConverterMap() {", "originalCommit": "a7d26cb278efb08b956f4c5ca92f245b1e57ee96", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5abfd69292c74e896f358f77c4a1bc98bf7b21f6", "url": "https://github.com/apache/hudi/commit/5abfd69292c74e896f358f77c4a1bc98bf7b21f6", "message": "fix", "committedDate": "2020-05-21T08:03:53Z", "type": "commit"}]}