{"pr_number": 2056, "pr_title": "[HUDI-1255] Add new Payload(OverwriteNonDefaultsWithLatestAvroPayload) for updating specified fields in storage", "pr_createdAt": "2020-08-31T08:34:14Z", "pr_url": "https://github.com/apache/hudi/pull/2056", "timeline": [{"oid": "91b6bf2ace1503ebb3133b312a51ed04c339e2a3", "url": "https://github.com/apache/hudi/commit/91b6bf2ace1503ebb3133b312a51ed04c339e2a3", "message": "add new Payload for updating specified fields in storage", "committedDate": "2020-08-31T08:13:10Z", "type": "commit"}, {"oid": "4a99f33168bcbe9be29cbb6411541184638db44e", "url": "https://github.com/apache/hudi/commit/4a99f33168bcbe9be29cbb6411541184638db44e", "message": "change precede", "committedDate": "2020-08-31T09:54:28Z", "type": "commit"}, {"oid": "46debafa5d3c57e7817f168a321c9fb0fe5400d0", "url": "https://github.com/apache/hudi/commit/46debafa5d3c57e7817f168a321c9fb0fe5400d0", "message": "Update OverwriteWithLatestAvroPayload.java", "committedDate": "2020-08-31T12:05:59Z", "type": "commit"}, {"oid": "15436a69440da2a52ba144835419d1dccbfd7d13", "url": "https://github.com/apache/hudi/commit/15436a69440da2a52ba144835419d1dccbfd7d13", "message": "change precede", "committedDate": "2020-08-31T12:13:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NjQzNQ==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480246435", "bodyText": "surprised checkstyle is happy with space after comma after Object value,", "author": "vinothchandar", "createdAt": "2020-08-31T16:31:04Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -79,8 +79,18 @@ public OverwriteWithLatestAvroPayload preCombine(OverwriteWithLatestAvroPayload\n    * @param genericRecord instance of {@link GenericRecord} of interest.\n    * @returns {@code true} if record represents a delete record. {@code false} otherwise.\n    */\n-  private boolean isDeleteRecord(GenericRecord genericRecord) {\n+  public boolean isDeleteRecord(GenericRecord genericRecord) {\n     Object deleteMarker = genericRecord.get(\"_hoodie_is_deleted\");\n     return (deleteMarker instanceof Boolean && (boolean) deleteMarker);\n   }\n+\n+  /**\n+   *\n+   * @param value value in Insert Value\n+   * @param defaultValue defaultValue of the field\n+   * @return {@code true} if value equals defaultValue {@code false} otherwise.\n+   */\n+  public Boolean fieldJudge(Object value,Object defaultValue) {", "originalCommit": "15436a69440da2a52ba144835419d1dccbfd7d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NzQyNw==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480267427", "bodyText": "would renaming to ovewriteField() be more understandable?", "author": "vinothchandar", "createdAt": "2020-08-31T17:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NjQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY3NTQ0Mg==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480675442", "bodyText": "done!", "author": "Karl-WangSK", "createdAt": "2020-09-01T03:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NjQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NTk1NA==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480265954", "bodyText": "can we name this something like OverwriteNonDefaultsWithLatestAvroPayload\nTrying to make sure it captures the fact that default value is used to decide whether we overwrite or not. Initially, I thought this was doing a partial merge (which is also something we should add IMO) - which just updates some columns. We eventually need soemthing like that to support a SQL MERGE", "author": "vinothchandar", "createdAt": "2020-08-31T17:05:15Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteMulColAvroPayload.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import org.apache.hudi.common.util.Option;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.IndexedRecord;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * subclass of OverwriteWithLatestAvroPayload used for delta streamer.\n+ * <p>\n+ * 1. preCombine - Picks the latest delta record for a key, based on an ordering field.\n+ * 2. combineAndGetUpdateValue/getInsertValue - overwrite storage for specified fields\n+ * that doesn't equal defaultValue.\n+ */\n+public class OverwriteMulColAvroPayload extends OverwriteWithLatestAvroPayload {", "originalCommit": "15436a69440da2a52ba144835419d1dccbfd7d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY3Mzc0MA==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480673740", "bodyText": "ok.I think it's great", "author": "Karl-WangSK", "createdAt": "2020-09-01T03:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NTk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NjMxNg==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480266316", "bodyText": "can we call super(..) here", "author": "vinothchandar", "createdAt": "2020-08-31T17:05:53Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteMulColAvroPayload.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import org.apache.hudi.common.util.Option;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.IndexedRecord;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * subclass of OverwriteWithLatestAvroPayload used for delta streamer.\n+ * <p>\n+ * 1. preCombine - Picks the latest delta record for a key, based on an ordering field.\n+ * 2. combineAndGetUpdateValue/getInsertValue - overwrite storage for specified fields\n+ * that doesn't equal defaultValue.\n+ */\n+public class OverwriteMulColAvroPayload extends OverwriteWithLatestAvroPayload {\n+\n+  /**\n+   * @param record      Generic record for the payload.\n+   * @param orderingVal {@link Comparable} to be used in pre combine.\n+   */\n+  public OverwriteMulColAvroPayload(GenericRecord record, Comparable orderingVal) {\n+    super(record, orderingVal);\n+  }\n+\n+  public OverwriteMulColAvroPayload(Option<GenericRecord> record) {\n+    this(record.isPresent() ? record.get() : null, (record1) -> 0); // natural order", "originalCommit": "15436a69440da2a52ba144835419d1dccbfd7d13", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2Njg2NA==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480266864", "bodyText": "this check can be done using the isDeleteRecord() method. we can make that protected . wdyt?", "author": "vinothchandar", "createdAt": "2020-08-31T17:06:57Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteMulColAvroPayload.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import org.apache.hudi.common.util.Option;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.IndexedRecord;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * subclass of OverwriteWithLatestAvroPayload used for delta streamer.\n+ * <p>\n+ * 1. preCombine - Picks the latest delta record for a key, based on an ordering field.\n+ * 2. combineAndGetUpdateValue/getInsertValue - overwrite storage for specified fields\n+ * that doesn't equal defaultValue.\n+ */\n+public class OverwriteMulColAvroPayload extends OverwriteWithLatestAvroPayload {\n+\n+  /**\n+   * @param record      Generic record for the payload.\n+   * @param orderingVal {@link Comparable} to be used in pre combine.\n+   */\n+  public OverwriteMulColAvroPayload(GenericRecord record, Comparable orderingVal) {\n+    super(record, orderingVal);\n+  }\n+\n+  public OverwriteMulColAvroPayload(Option<GenericRecord> record) {\n+    this(record.isPresent() ? record.get() : null, (record1) -> 0); // natural order\n+  }\n+\n+  @Override\n+  public Option<IndexedRecord> combineAndGetUpdateValue(IndexedRecord currentValue, Schema schema) throws IOException {\n+\n+    Option<IndexedRecord> recordOption = getInsertValue(schema);\n+    if (!recordOption.isPresent()) {\n+      return Option.empty();\n+    }\n+\n+    GenericRecord insertRecord = (GenericRecord) recordOption.get();\n+    GenericRecord currentRecord = (GenericRecord) currentValue;\n+\n+    Object deleteMarker = insertRecord.get(\"_hoodie_is_deleted\");", "originalCommit": "15436a69440da2a52ba144835419d1dccbfd7d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY3OTYwMA==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480679600", "bodyText": "done", "author": "Karl-WangSK", "createdAt": "2020-09-01T03:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2Njg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2ODExNg==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480268116", "bodyText": "would Objects.equals() help us compare more easily.. it can deal with one argument being null. we can then avoid this whole method.", "author": "vinothchandar", "createdAt": "2020-08-31T17:09:24Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -79,8 +79,18 @@ public OverwriteWithLatestAvroPayload preCombine(OverwriteWithLatestAvroPayload\n    * @param genericRecord instance of {@link GenericRecord} of interest.\n    * @returns {@code true} if record represents a delete record. {@code false} otherwise.\n    */\n-  private boolean isDeleteRecord(GenericRecord genericRecord) {\n+  public boolean isDeleteRecord(GenericRecord genericRecord) {\n     Object deleteMarker = genericRecord.get(\"_hoodie_is_deleted\");\n     return (deleteMarker instanceof Boolean && (boolean) deleteMarker);\n   }\n+\n+  /**\n+   *\n+   * @param value value in Insert Value\n+   * @param defaultValue defaultValue of the field\n+   * @return {@code true} if value equals defaultValue {@code false} otherwise.\n+   */\n+  public Boolean fieldJudge(Object value,Object defaultValue) {\n+    return  defaultValue == null ? value == defaultValue : value.toString().equals(defaultValue.toString());", "originalCommit": "15436a69440da2a52ba144835419d1dccbfd7d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2ODcwNg==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480268706", "bodyText": "can we just compare without the .toString() .. coz otherwise data type mismatches may be masked. i.e \"1\" vs 1L , which will both probably get the same string representation", "author": "vinothchandar", "createdAt": "2020-08-31T17:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2ODExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcxNTk2OQ==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r480715969", "bodyText": "Object.equals() is compare their memory address. So it will return false even though like value=\"1\" and defaultValue=\"1\"\n\npublic boolean equals(Object obj) {\n        return (this == obj);\n    }\n\n\nvalue and defaultValue they are same field from same schema, so their data type must be the same, and have checked data type before using this method. so we just simply check if their values are the same using toString().", "author": "Karl-WangSK", "createdAt": "2020-09-01T03:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2ODExNg=="}], "type": "inlineReview"}, {"oid": "b85cecc69574cc7b650253c3fbdcf10a860e6935", "url": "https://github.com/apache/hudi/commit/b85cecc69574cc7b650253c3fbdcf10a860e6935", "message": "update", "committedDate": "2020-09-01T03:41:10Z", "type": "commit"}, {"oid": "61ac5654570400a97d348c697e5ac2954a4874cb", "url": "https://github.com/apache/hudi/commit/61ac5654570400a97d348c697e5ac2954a4874cb", "message": "update", "committedDate": "2020-09-01T03:43:12Z", "type": "commit"}, {"oid": "c03852069603286dd70ab6a4054d2fea0c09c088", "url": "https://github.com/apache/hudi/commit/c03852069603286dd70ab6a4054d2fea0c09c088", "message": "fix test", "committedDate": "2020-09-01T05:48:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MDYxNg==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r481070616", "bodyText": "foreach  grammar is more graceful than for loop.", "author": "yanghua", "createdAt": "2020-09-01T11:34:29Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteNonDefaultsWithLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import org.apache.hudi.common.util.Option;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.IndexedRecord;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * subclass of OverwriteWithLatestAvroPayload used for delta streamer.\n+ * <p>\n+ * 1. preCombine - Picks the latest delta record for a key, based on an ordering field.\n+ * 2. combineAndGetUpdateValue/getInsertValue - overwrite storage for specified fields\n+ * that doesn't equal defaultValue.\n+ */\n+public class OverwriteNonDefaultsWithLatestAvroPayload extends OverwriteWithLatestAvroPayload {\n+\n+  /**\n+   * @param record      Generic record for the payload.\n+   * @param orderingVal {@link Comparable} to be used in pre combine.\n+   */\n+  public OverwriteNonDefaultsWithLatestAvroPayload(GenericRecord record, Comparable orderingVal) {\n+    super(record, orderingVal);\n+  }\n+\n+  public OverwriteNonDefaultsWithLatestAvroPayload(Option<GenericRecord> record) {\n+    super(record); // natural order\n+  }\n+\n+  @Override\n+  public Option<IndexedRecord> combineAndGetUpdateValue(IndexedRecord currentValue, Schema schema) throws IOException {\n+\n+    Option<IndexedRecord> recordOption = getInsertValue(schema);\n+    if (!recordOption.isPresent()) {\n+      return Option.empty();\n+    }\n+\n+    GenericRecord insertRecord = (GenericRecord) recordOption.get();\n+    GenericRecord currentRecord = (GenericRecord) currentValue;\n+\n+    if (isDeleteRecord(insertRecord)) {\n+      return Option.empty();\n+    } else {\n+      List<Schema.Field> fields = schema.getFields();\n+      for (int i = 0; i < fields.size(); i++) {", "originalCommit": "c03852069603286dd70ab6a4054d2fea0c09c088", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5ODEzNQ==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r481098135", "bodyText": "done!", "author": "Karl-WangSK", "createdAt": "2020-09-01T12:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MDYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MTExMA==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r481071110", "bodyText": "Here continue is unnecessary.", "author": "yanghua", "createdAt": "2020-09-01T11:35:24Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteNonDefaultsWithLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import org.apache.hudi.common.util.Option;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.IndexedRecord;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * subclass of OverwriteWithLatestAvroPayload used for delta streamer.\n+ * <p>\n+ * 1. preCombine - Picks the latest delta record for a key, based on an ordering field.\n+ * 2. combineAndGetUpdateValue/getInsertValue - overwrite storage for specified fields\n+ * that doesn't equal defaultValue.\n+ */\n+public class OverwriteNonDefaultsWithLatestAvroPayload extends OverwriteWithLatestAvroPayload {\n+\n+  /**\n+   * @param record      Generic record for the payload.\n+   * @param orderingVal {@link Comparable} to be used in pre combine.\n+   */\n+  public OverwriteNonDefaultsWithLatestAvroPayload(GenericRecord record, Comparable orderingVal) {\n+    super(record, orderingVal);\n+  }\n+\n+  public OverwriteNonDefaultsWithLatestAvroPayload(Option<GenericRecord> record) {\n+    super(record); // natural order\n+  }\n+\n+  @Override\n+  public Option<IndexedRecord> combineAndGetUpdateValue(IndexedRecord currentValue, Schema schema) throws IOException {\n+\n+    Option<IndexedRecord> recordOption = getInsertValue(schema);\n+    if (!recordOption.isPresent()) {\n+      return Option.empty();\n+    }\n+\n+    GenericRecord insertRecord = (GenericRecord) recordOption.get();\n+    GenericRecord currentRecord = (GenericRecord) currentValue;\n+\n+    if (isDeleteRecord(insertRecord)) {\n+      return Option.empty();\n+    } else {\n+      List<Schema.Field> fields = schema.getFields();\n+      for (int i = 0; i < fields.size(); i++) {\n+        Object value = insertRecord.get(fields.get(i).name());\n+        Object defaultValue = fields.get(i).defaultVal();\n+        if (ovewriteField(value, defaultValue)) {\n+          continue;", "originalCommit": "c03852069603286dd70ab6a4054d2fea0c09c088", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c74e3f0f8f9631aa51d69467584320e656d508e", "url": "https://github.com/apache/hudi/commit/8c74e3f0f8f9631aa51d69467584320e656d508e", "message": "update", "committedDate": "2020-09-01T12:26:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg5NzYyNA==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r482897624", "bodyText": "If you want to add java doc, it would be better to add a description for the method?", "author": "yanghua", "createdAt": "2020-09-03T11:11:36Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteNonDefaultsWithLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import org.apache.hudi.common.util.Option;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.IndexedRecord;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * subclass of OverwriteWithLatestAvroPayload used for delta streamer.\n+ * <p>\n+ * 1. preCombine - Picks the latest delta record for a key, based on an ordering field.\n+ * 2. combineAndGetUpdateValue/getInsertValue - overwrite storage for specified fields\n+ * that doesn't equal defaultValue.\n+ */\n+public class OverwriteNonDefaultsWithLatestAvroPayload extends OverwriteWithLatestAvroPayload {\n+\n+  /**\n+   * @param record      Generic record for the payload.", "originalCommit": "8c74e3f0f8f9631aa51d69467584320e656d508e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg5Nzc4Ng==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r482897786", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-09-03T11:11:54Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -79,8 +79,18 @@ public OverwriteWithLatestAvroPayload preCombine(OverwriteWithLatestAvroPayload\n    * @param genericRecord instance of {@link GenericRecord} of interest.\n    * @returns {@code true} if record represents a delete record. {@code false} otherwise.\n    */\n-  private boolean isDeleteRecord(GenericRecord genericRecord) {\n+  protected boolean isDeleteRecord(GenericRecord genericRecord) {\n     Object deleteMarker = genericRecord.get(\"_hoodie_is_deleted\");\n     return (deleteMarker instanceof Boolean && (boolean) deleteMarker);\n   }\n+\n+  /**\n+   *\n+   * @param value value in Insert Value", "originalCommit": "8c74e3f0f8f9631aa51d69467584320e656d508e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMTE1NA==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r482901154", "bodyText": "overwriteField?", "author": "yanghua", "createdAt": "2020-09-03T11:18:05Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -79,8 +79,18 @@ public OverwriteWithLatestAvroPayload preCombine(OverwriteWithLatestAvroPayload\n    * @param genericRecord instance of {@link GenericRecord} of interest.\n    * @returns {@code true} if record represents a delete record. {@code false} otherwise.\n    */\n-  private boolean isDeleteRecord(GenericRecord genericRecord) {\n+  protected boolean isDeleteRecord(GenericRecord genericRecord) {\n     Object deleteMarker = genericRecord.get(\"_hoodie_is_deleted\");\n     return (deleteMarker instanceof Boolean && (boolean) deleteMarker);\n   }\n+\n+  /**\n+   *\n+   * @param value value in Insert Value\n+   * @param defaultValue defaultValue of the field\n+   * @return {@code true} if value equals defaultValue {@code false} otherwise.\n+   */\n+  public Boolean ovewriteField(Object value, Object defaultValue) {", "originalCommit": "8c74e3f0f8f9631aa51d69467584320e656d508e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2NDAwOQ==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r482964009", "bodyText": "done", "author": "Karl-WangSK", "createdAt": "2020-09-03T13:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMTE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMTYwNw==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r482901607", "bodyText": "change to : return defaultValue == null ? value == null : defaultValue.toString().equals(value.toString());?", "author": "yanghua", "createdAt": "2020-09-03T11:18:58Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/model/OverwriteWithLatestAvroPayload.java", "diffHunk": "@@ -79,8 +79,18 @@ public OverwriteWithLatestAvroPayload preCombine(OverwriteWithLatestAvroPayload\n    * @param genericRecord instance of {@link GenericRecord} of interest.\n    * @returns {@code true} if record represents a delete record. {@code false} otherwise.\n    */\n-  private boolean isDeleteRecord(GenericRecord genericRecord) {\n+  protected boolean isDeleteRecord(GenericRecord genericRecord) {\n     Object deleteMarker = genericRecord.get(\"_hoodie_is_deleted\");\n     return (deleteMarker instanceof Boolean && (boolean) deleteMarker);\n   }\n+\n+  /**\n+   *\n+   * @param value value in Insert Value\n+   * @param defaultValue defaultValue of the field\n+   * @return {@code true} if value equals defaultValue {@code false} otherwise.\n+   */\n+  public Boolean ovewriteField(Object value, Object defaultValue) {\n+    return defaultValue == null ? value == defaultValue : defaultValue.toString().equals(value.toString());", "originalCommit": "8c74e3f0f8f9631aa51d69467584320e656d508e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2NDE2NQ==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r482964165", "bodyText": "ok!!!", "author": "Karl-WangSK", "createdAt": "2020-09-03T13:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMTYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMjc0OQ==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r482902749", "bodyText": "Can we add a use case for default value which neither null nor ''?", "author": "yanghua", "createdAt": "2020-09-03T11:20:49Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteNonDefaultsWithLatestAvroPayload.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.model;\n+\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericData;\n+import org.apache.avro.generic.GenericRecord;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+/**\n+ * Unit tests {@link TestOverwriteNonDefaultsWithLatestAvroPayload}.\n+ */\n+public class TestOverwriteNonDefaultsWithLatestAvroPayload {\n+  private Schema schema;\n+\n+  @BeforeEach\n+  public void setUp() throws Exception {\n+    schema = Schema.createRecord(Arrays.asList(\n+            new Schema.Field(\"id\", Schema.create(Schema.Type.STRING), \"\", null),\n+            new Schema.Field(\"partition\", Schema.create(Schema.Type.STRING), \"\", \"\"),\n+            new Schema.Field(\"ts\", Schema.create(Schema.Type.LONG), \"\", null),\n+            new Schema.Field(\"_hoodie_is_deleted\", Schema.create(Schema.Type.BOOLEAN), \"\", false)", "originalCommit": "8c74e3f0f8f9631aa51d69467584320e656d508e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2NDQxNw==", "url": "https://github.com/apache/hudi/pull/2056#discussion_r482964417", "bodyText": "ok! added", "author": "Karl-WangSK", "createdAt": "2020-09-03T13:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwMjc0OQ=="}], "type": "inlineReview"}, {"oid": "1acb278cc58f7e3522396892946d7f011ff647ef", "url": "https://github.com/apache/hudi/commit/1acb278cc58f7e3522396892946d7f011ff647ef", "message": "update", "committedDate": "2020-09-03T12:50:21Z", "type": "commit"}, {"oid": "aace5c077a1fe4298cfbac9d0316d054894c9f7e", "url": "https://github.com/apache/hudi/commit/aace5c077a1fe4298cfbac9d0316d054894c9f7e", "message": "update", "committedDate": "2020-09-03T12:51:55Z", "type": "commit"}]}