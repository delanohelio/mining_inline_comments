{"pr_number": 2350, "pr_title": "[HUDI-1493] Fixed schema compatibility check for fields.", "pr_createdAt": "2020-12-18T21:53:38Z", "pr_url": "https://github.com/apache/hudi/pull/2350", "timeline": [{"oid": "b50e71b8fd43f36da02765ea719e8de4633ce634", "url": "https://github.com/apache/hudi/commit/b50e71b8fd43f36da02765ea719e8de4633ce634", "message": "[HUDI-2063] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes.", "committedDate": "2020-12-18T21:53:50Z", "type": "forcePushed"}, {"oid": "3b7d30adf017914c090bd792dee5a093e3b9ce9e", "url": "https://github.com/apache/hudi/commit/3b7d30adf017914c090bd792dee5a093e3b9ce9e", "message": "[HUDI-2063] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes.", "committedDate": "2020-12-18T22:53:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDE0Ng==", "url": "https://github.com/apache/hudi/pull/2350#discussion_r548930146", "bodyText": "can we also add vice versa i.e. long to int, and similar evolutions and ensure schema compatibility returns false.", "author": "nsivabalan", "createdAt": "2020-12-26T01:36:00Z", "path": "hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/TestTableSchemaEvolution.java", "diffHunk": "@@ -107,10 +107,22 @@ public void testSchemaCompatibilityBasic() throws Exception {\n     assertFalse(TableSchemaResolver.isSchemaCompatible(TRIP_EXAMPLE_SCHEMA, swappedFieldSchema),\n         \"Swapped fields are not compatible\");\n \n-    String typeChangeSchema = TRIP_SCHEMA_PREFIX + MAP_TYPE_SCHEMA + FARE_NESTED_SCHEMA\n+    String typeChangeSchemaDisallowed = TRIP_SCHEMA_PREFIX + MAP_TYPE_SCHEMA + FARE_NESTED_SCHEMA\n         + TIP_NESTED_SCHEMA.replace(\"string\", \"boolean\") + TRIP_SCHEMA_SUFFIX;\n-    assertFalse(TableSchemaResolver.isSchemaCompatible(TRIP_EXAMPLE_SCHEMA, typeChangeSchema),\n-        \"Field type change is not compatible\");\n+    assertFalse(TableSchemaResolver.isSchemaCompatible(TRIP_EXAMPLE_SCHEMA, typeChangeSchemaDisallowed),\n+        \"Incompatible field type change is not allowed\");\n+\n+    // Array of allowed schema field type transitions\n+    String[][] allowedFieldChanges = {\n+        {\"string\", \"bytes\"}, {\"bytes\", \"string\"},\n+        {\"int\", \"long\"}, {\"int\", \"float\"}, {\"long\", \"float\"}, \n+        {\"int\", \"double\"}, {\"float\", \"double\"}, {\"long\", \"double\"}};\n+    for (String[] fieldChange : allowedFieldChanges) {", "originalCommit": "3b7d30adf017914c090bd792dee5a093e3b9ce9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3Njc0Mw==", "url": "https://github.com/apache/hudi/pull/2350#discussion_r549876743", "bodyText": "Done", "author": "prashantwason", "createdAt": "2020-12-29T22:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDI3OA==", "url": "https://github.com/apache/hudi/pull/2350#discussion_r548930278", "bodyText": "@prashantwason : doesn't line 299 needs fixing too? basically any calls to SchemaCompatibility.* should need a fix wrt reader and writer schema arg right?", "author": "nsivabalan", "createdAt": "2020-12-26T01:36:59Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -329,9 +329,11 @@ public static boolean isSchemaCompatible(Schema oldSchema, Schema newSchema) {\n       // All fields in the newSchema record can be populated from the oldSchema record\n       return true;\n     } else {\n-      // Use the checks implemented by\n+      // Use the checks implemented by Avro", "originalCommit": "3b7d30adf017914c090bd792dee5a093e3b9ce9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDMxMw==", "url": "https://github.com/apache/hudi/pull/2350#discussion_r548930313", "bodyText": "and if you agree on this, can we have a test to cover that scenario(which should fail if not for this patch)", "author": "nsivabalan", "createdAt": "2020-12-26T01:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3Njc1Ng==", "url": "https://github.com/apache/hudi/pull/2350#discussion_r549876756", "bodyText": "Done", "author": "prashantwason", "createdAt": "2020-12-29T22:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDI3OA=="}], "type": "inlineReview"}, {"oid": "624d9e8ad3b5edea23442e1485de0f209a18bd86", "url": "https://github.com/apache/hudi/commit/624d9e8ad3b5edea23442e1485de0f209a18bd86", "message": "[HUDI-1493] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes.", "committedDate": "2020-12-29T22:41:29Z", "type": "commit"}, {"oid": "624d9e8ad3b5edea23442e1485de0f209a18bd86", "url": "https://github.com/apache/hudi/commit/624d9e8ad3b5edea23442e1485de0f209a18bd86", "message": "[HUDI-1493] Fixed schema compatibility check for fields.\n\nSome field types changes are allowed (e.g. int -> long) while maintaining schema backward compatibility within HUDI. The check was reversed with the reader schema being passed for the write schema.\n\nAlso added a unit test to check for all the allowed field type changes.", "committedDate": "2020-12-29T22:41:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA3NzU1NA==", "url": "https://github.com/apache/hudi/pull/2350#discussion_r553077554", "bodyText": "Hi @nsivabalan @prashantwason ,I have test write a \"int\" type to \"long\" type.It fails in the the schema validate .\nHowever,I write a \"long\" to \"int\", it can pass the validate. So I think this \"reverse\" here introduce some problem. I have rollback the \"reverse\" in  #2334 and add some test case. It works well now. Can you take a look when you have time?", "author": "pengzhiwei2018", "createdAt": "2021-01-07T02:40:52Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/TableSchemaResolver.java", "diffHunk": "@@ -296,7 +296,7 @@ public MessageType convertAvroSchemaToParquet(Schema schema) {\n   public static boolean isSchemaCompatible(Schema oldSchema, Schema newSchema) {\n     if (oldSchema.getType() == newSchema.getType() && newSchema.getType() == Schema.Type.RECORD) {\n       // record names must match:\n-      if (!SchemaCompatibility.schemaNameEquals(oldSchema, newSchema)) {\n+      if (!SchemaCompatibility.schemaNameEquals(newSchema, oldSchema)) {", "originalCommit": "624d9e8ad3b5edea23442e1485de0f209a18bd86", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}