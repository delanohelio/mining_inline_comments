{"pr_number": 1424, "pr_title": "[HUDI-697]Add unit test for ArchivedCommitsCommand", "pr_createdAt": "2020-03-20T08:03:03Z", "pr_url": "https://github.com/apache/hudi/pull/1424", "timeline": [{"oid": "92d1ff3790291c4cab2a308b10dfb429ebddd328", "url": "https://github.com/apache/hudi/commit/92d1ff3790291c4cab2a308b10dfb429ebddd328", "message": "Add-test-ArchivedCommitsCommand", "committedDate": "2020-03-20T07:55:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4ODIzOQ==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r395688239", "bodyText": "Will we reuse this class in the future for other test cases? If no, can we move these utility methods into TestArchivedCommitsCommand. If yes, what do you think about renaming to HoodieTestCommitUtilities. It seems utility is more clear than operate here. WDYT?", "author": "yanghua", "createdAt": "2020-03-20T14:50:50Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/common/HoodieTestCommitOperate.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.common;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.hudi.avro.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieRollingStatMetadata;\n+\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Utility methods to commit instant for test.\n+ */\n+public class HoodieTestCommitOperate {", "originalCommit": "92d1ff3790291c4cab2a308b10dfb429ebddd328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NjkxNA==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396046914", "bodyText": "Will we reuse this class in the future for other test cases? If no, can we move these utility methods into TestArchivedCommitsCommand. If yes, what do you think about renaming to HoodieTestCommitUtilities. It seems utility is more clear than operate here. WDYT?\n\nYes, IMO, CommitsCommand may use this later. utility is better here.", "author": "hddong", "createdAt": "2020-03-22T02:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4ODIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5MjQ1MQ==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r395692451", "bodyText": "IIUC, converter is a noun while convert is a verb.  A method usually means a behavior that starts with a verb actively. So considering the function of this method, wdyt about renaming to convertCommitMetadata? It's an open topic, you can share your thought if you have.", "author": "yanghua", "createdAt": "2020-03-20T14:56:43Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/common/HoodieTestCommitOperate.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.common;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.hudi.avro.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieRollingStatMetadata;\n+\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Utility methods to commit instant for test.\n+ */\n+public class HoodieTestCommitOperate {\n+\n+  /**\n+   * Converter HoodieCommitMetadata to avro format and ordered by partition.\n+   */\n+  public static org.apache.hudi.avro.model.HoodieCommitMetadata commitMetadataConverterOrdered(\n+      HoodieCommitMetadata hoodieCommitMetadata) {\n+    return orderCommitMetadata(commitMetadataConverter(hoodieCommitMetadata));\n+  }\n+\n+  /**\n+   * Converter HoodieCommitMetadata to avro format.\n+   */\n+  public static org.apache.hudi.avro.model.HoodieCommitMetadata commitMetadataConverter(", "originalCommit": "92d1ff3790291c4cab2a308b10dfb429ebddd328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0NzM4Mg==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396047382", "bodyText": "IIUC, converter is a noun while convert is a verb. A method usually means a behavior that starts with a verb actively. So considering the function of this method, wdyt about renaming to convertCommitMetadata? It's an open topic, you can share your thought if you have.\n\nActually, it is a copy of HoodieCommitArchiveLog$commitMetadataConverter. Since HoodieCommitArchiveLog construct with HoodieTableMetaClient and HoodieWriteConfig, but test class and this mothod not need. Waht you said is right, but may be keep identical is better here.", "author": "hddong", "createdAt": "2020-03-22T02:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5MjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0ODk2Mg==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396048962", "bodyText": "IMO, we can move HoodieCommitArchiveLog$commitMetadataConverter to ClientUtils, as it is a pubilce mothod now, wdyt.", "author": "hddong", "createdAt": "2020-03-22T02:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5MjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MTcyOA==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396191728", "bodyText": "IMO, we can just make HoodieCommitArchiveLog#commitMetadataConverter a static method and rename it to convertCommitMetadata then you reuse it. WDYT?", "author": "yanghua", "createdAt": "2020-03-23T03:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5MjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNDI2MQ==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396204261", "bodyText": "IMO, we can just make HoodieCommitArchiveLog#commitMetadataConverter a static method and rename it to convertCommitMetadata then you reuse it. WDYT?\n\nYes, this is  a better solution.", "author": "hddong", "createdAt": "2020-03-23T04:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5MjQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5Mjk4Ng==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r395692986", "bodyText": "same thought about converter see other relevant comments in this class.", "author": "yanghua", "createdAt": "2020-03-20T14:57:27Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/common/HoodieTestCommitOperate.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.common;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.hudi.avro.model.HoodieWriteStat;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieRollingStatMetadata;\n+\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Utility methods to commit instant for test.\n+ */\n+public class HoodieTestCommitOperate {\n+\n+  /**\n+   * Converter HoodieCommitMetadata to avro format and ordered by partition.\n+   */\n+  public static org.apache.hudi.avro.model.HoodieCommitMetadata commitMetadataConverterOrdered(", "originalCommit": "92d1ff3790291c4cab2a308b10dfb429ebddd328", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5OTAyOQ==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r395699029", "bodyText": "Why we need to extends HoodieTestDataGenerator ? We only reused some static field here, right? And wdyt about renaming to HoodieTestCommitMetadataGenerator based on the implementation of this class.", "author": "yanghua", "createdAt": "2020-03-20T15:06:30Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/common/HoodieTestCommandDataGenerator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.common;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.HoodieTestDataGenerator;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTimeline;\n+import org.apache.hudi.common.util.FSUtils;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class to be used in tests to keep generating test inserts and updates against a corpus.\n+ */\n+public class HoodieTestCommandDataGenerator extends HoodieTestDataGenerator {", "originalCommit": "92d1ff3790291c4cab2a308b10dfb429ebddd328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0ODI4Mg==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396048282", "bodyText": "Why we need to extends HoodieTestDataGenerator ? We only reused some static field here, right? And wdyt about renaming to HoodieTestCommitMetadataGenerator based on the implementation of this class.\n\nIMO, this class is extension of HoodieTestDataGenerator , add some field and method for hudi-cli base on HoodieTestDataGenerator. Name you sugguested is better here.", "author": "hddong", "createdAt": "2020-03-22T02:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5OTAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MjU0NA==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396192544", "bodyText": "OK, just saw you reused the method from HoodieTestDataGenerator", "author": "yanghua", "createdAt": "2020-03-23T03:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5OTAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwMDcxMw==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r395700713", "bodyText": "can we modify the access modifier to private?", "author": "yanghua", "createdAt": "2020-03-20T15:08:59Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/common/HoodieTestCommandDataGenerator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.common;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hudi.common.HoodieTestDataGenerator;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.model.HoodieWriteStat;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTimeline;\n+import org.apache.hudi.common.util.FSUtils;\n+import org.apache.hudi.exception.HoodieIOException;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Class to be used in tests to keep generating test inserts and updates against a corpus.\n+ */\n+public class HoodieTestCommandDataGenerator extends HoodieTestDataGenerator {\n+\n+  // default commit metadata value\n+  public static final String DEFAULT_PATH = \"path\";\n+  public static final String DEFAULT_FILEID = \"fileId\";\n+  public static final int DEFAULT_TOTAL_WRITE_BYTES = 50;\n+  public static final String DEFAULT_PRE_COMMIT = \"commit-1\";\n+  public static final int DEFAULT_NUM_WRITES = 10;\n+  public static final int DEFAULT_NUM_UPDATE_WRITES = 15;\n+  public static final int DEFAULT_TOTAL_LOG_BLOCKS = 1;\n+  public static final int DEFAULT_TOTAL_LOG_RECORDS = 10;\n+  public static final int DEFAULT_OTHER_VALUE = 0;\n+  public static final String DEFAULT_NULL_VALUE = \"null\";\n+\n+  /**\n+   * Create a commit file with default CommitMetadata.\n+   */\n+  public static void createCommitFileWithMetadata(String basePath, String commitTime, Configuration configuration) {\n+    Arrays.asList(HoodieTimeline.makeCommitFileName(commitTime), HoodieTimeline.makeInflightCommitFileName(commitTime),\n+        HoodieTimeline.makeRequestedCommitFileName(commitTime))\n+        .forEach(f -> {\n+          Path commitFile = new Path(\n+              basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\" + f);\n+          FSDataOutputStream os = null;\n+          try {\n+            FileSystem fs = FSUtils.getFs(basePath, configuration);\n+            os = fs.create(commitFile, true);\n+            // Generate commitMetadata\n+            HoodieCommitMetadata commitMetadata = generateCommitMetadata(basePath);\n+            // Write empty commit metadata\n+            os.writeBytes(new String(commitMetadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n+          } catch (IOException ioe) {\n+            throw new HoodieIOException(ioe.getMessage(), ioe);\n+          } finally {\n+            if (null != os) {\n+              try {\n+                os.close();\n+              } catch (IOException e) {\n+                throw new HoodieIOException(e.getMessage(), e);\n+              }\n+            }\n+          }\n+        });\n+  }\n+\n+  /**\n+   * Generate commitMetadata in path.\n+   */\n+  public static HoodieCommitMetadata generateCommitMetadata(String basePath) throws IOException {\n+    String file1P0C0 =\n+        HoodieTestUtils.createNewDataFile(basePath, DEFAULT_FIRST_PARTITION_PATH, \"000\");\n+    String file1P1C0 =\n+        HoodieTestUtils.createNewDataFile(basePath, DEFAULT_SECOND_PARTITION_PATH, \"000\");\n+    return generateCommitMetadata(new ImmutableMap.Builder()\n+      .put(DEFAULT_FIRST_PARTITION_PATH, new ImmutableList.Builder<>().add(file1P0C0).build())\n+      .put(DEFAULT_SECOND_PARTITION_PATH, new ImmutableList.Builder<>().add(file1P1C0).build())\n+      .build());\n+  }\n+\n+\n+\n+  /**\n+   * Method to generate commit metadata.\n+   */\n+  public static HoodieCommitMetadata generateCommitMetadata(Map<String, List<String>> partitionToFilePaths) {", "originalCommit": "92d1ff3790291c4cab2a308b10dfb429ebddd328", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNDY3Mw==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r395704673", "bodyText": "Why we should use System.out.println? Do we need to get information from STDOUT?", "author": "yanghua", "createdAt": "2020-03-20T15:14:44Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestArchivedCommitsCommand.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommandDataGenerator;\n+import org.apache.hudi.cli.common.HoodieTestCommitOperate;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieCommitArchiveLog;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test Cases for {@link ArchivedCommitsCommand}.\n+ */\n+public class TestArchivedCommitsCommand extends AbstractShellIntegrationTest {\n+\n+  private String tablePath;\n+\n+  @Before\n+  public void init() throws IOException {\n+    initDFS();\n+    jsc.hadoopConfiguration().addResource(dfs.getConf());\n+    HoodieCLI.conf = dfs.getConf();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    // Generate archive\n+    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(tablePath)\n+        .withSchema(HoodieTestCommandDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2)\n+        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 3).build())\n+        .forTable(\"test-trip-table\").build();\n+\n+    // Create six commits\n+    for (int i = 100; i < 106; i++) {\n+      String timestamp = String.valueOf(i);\n+      // Requested Compaction\n+      HoodieTestCommandDataGenerator.createCompactionAuxiliaryMetadata(tablePath,\n+          new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, timestamp), dfs.getConf());\n+      // Inflight Compaction\n+      HoodieTestCommandDataGenerator.createCompactionAuxiliaryMetadata(tablePath,\n+          new HoodieInstant(HoodieInstant.State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, timestamp), dfs.getConf());\n+      HoodieTestCommandDataGenerator.createCommitFileWithMetadata(tablePath, timestamp, dfs.getConf());\n+    }\n+\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+    // reload the timeline and get all the commits before archive\n+    HoodieTimeline timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n+    assertEquals(\"Loaded 6 commits and the count should match\", 6, timeline.countInstants());\n+\n+    // archive\n+    HoodieCommitArchiveLog archiveLog = new HoodieCommitArchiveLog(cfg, metaClient);\n+    assertTrue(archiveLog.archiveIfRequired(jsc));\n+  }\n+\n+  @After\n+  public void clean() throws IOException {\n+    cleanupDFS();\n+  }\n+\n+  /**\n+   * Test for command: show archived commit stats.\n+   */\n+  @Test\n+  public void testShowArchivedCommits() {\n+    CommandResult cr = getShell().executeCommand(\"show archived commit stats\");\n+    assertTrue(cr.isSuccess());\n+\n+    TableHeader header = new TableHeader().addTableHeaderField(\"action\").addTableHeaderField(\"instant\")\n+        .addTableHeaderField(\"partition\").addTableHeaderField(\"file_id\").addTableHeaderField(\"prev_instant\")\n+        .addTableHeaderField(\"num_writes\").addTableHeaderField(\"num_inserts\").addTableHeaderField(\"num_deletes\")\n+        .addTableHeaderField(\"num_update_writes\").addTableHeaderField(\"total_log_files\")\n+        .addTableHeaderField(\"total_log_blocks\").addTableHeaderField(\"total_corrupt_log_blocks\")\n+        .addTableHeaderField(\"total_rollback_blocks\").addTableHeaderField(\"total_log_records\")\n+        .addTableHeaderField(\"total_updated_records_compacted\").addTableHeaderField(\"total_write_bytes\")\n+        .addTableHeaderField(\"total_write_errors\");\n+\n+    // Generate expected data\n+    final List<Comparable[]> rows = new ArrayList<>();\n+    for (int i = 100; i < 104; i++) {\n+      String instant = String.valueOf(i);\n+      for (int j = 0; j < 3; j++) {\n+        Comparable[] defaultComp = new Comparable[]{\"commit\", instant,\n+            HoodieTestCommandDataGenerator.DEFAULT_SECOND_PARTITION_PATH,\n+            HoodieTestCommandDataGenerator.DEFAULT_FILEID,\n+            HoodieTestCommandDataGenerator.DEFAULT_PRE_COMMIT,\n+            HoodieTestCommandDataGenerator.DEFAULT_NUM_WRITES,\n+            HoodieTestCommandDataGenerator.DEFAULT_OTHER_VALUE,\n+            HoodieTestCommandDataGenerator.DEFAULT_OTHER_VALUE,\n+            HoodieTestCommandDataGenerator.DEFAULT_NUM_UPDATE_WRITES,\n+            HoodieTestCommandDataGenerator.DEFAULT_NULL_VALUE,\n+            HoodieTestCommandDataGenerator.DEFAULT_TOTAL_LOG_BLOCKS,\n+            HoodieTestCommandDataGenerator.DEFAULT_OTHER_VALUE,\n+            HoodieTestCommandDataGenerator.DEFAULT_OTHER_VALUE,\n+            HoodieTestCommandDataGenerator.DEFAULT_TOTAL_LOG_RECORDS,\n+            HoodieTestCommandDataGenerator.DEFAULT_OTHER_VALUE,\n+            HoodieTestCommandDataGenerator.DEFAULT_TOTAL_WRITE_BYTES,\n+            HoodieTestCommandDataGenerator.DEFAULT_OTHER_VALUE};\n+        rows.add(defaultComp.clone());\n+        defaultComp[2] = HoodieTestCommandDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n+        rows.add(defaultComp);\n+      }\n+    }\n+\n+    String expectedResult = HoodiePrintHelper.print(\n+        header, new HashMap<>(), \"\", false, -1, false, rows);\n+    assertEquals(expectedResult, cr.getResult().toString());\n+  }\n+\n+  /**\n+   * Test for command: show archived commits.\n+   */\n+  @Test\n+  public void testShowCommits() throws IOException {\n+    CommandResult cr = getShell().executeCommand(\"show archived commits\");\n+    assertTrue(cr.isSuccess());\n+    System.out.println(cr.getResult().toString());", "originalCommit": "92d1ff3790291c4cab2a308b10dfb429ebddd328", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0ODMwMg==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396048302", "bodyText": "Why we should use System.out.println? Do we need to get information from STDOUT?\n\nRemoved it.", "author": "hddong", "createdAt": "2020-03-22T02:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwNDY3Mw=="}], "type": "inlineReview"}, {"oid": "e2605ab2f2db655b19c54dfe3025c41d48a8da5d", "url": "https://github.com/apache/hudi/commit/e2605ab2f2db655b19c54dfe3025c41d48a8da5d", "message": "update name", "committedDate": "2020-03-22T02:52:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5Mjg1OA==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396192858", "bodyText": "IMO, we'd better to use assertion in a method that marks with @Test annotation. WDYT?", "author": "yanghua", "createdAt": "2020-03-23T03:06:16Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestArchivedCommitsCommand.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.cli.common.HoodieTestCommitUtilities;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieCommitArchiveLog;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test Cases for {@link ArchivedCommitsCommand}.\n+ */\n+public class TestArchivedCommitsCommand extends AbstractShellIntegrationTest {\n+\n+  private String tablePath;\n+\n+  @Before\n+  public void init() throws IOException {\n+    initDFS();\n+    jsc.hadoopConfiguration().addResource(dfs.getConf());\n+    HoodieCLI.conf = dfs.getConf();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    // Generate archive\n+    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(tablePath)\n+        .withSchema(HoodieTestCommitMetadataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2)\n+        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 3).build())\n+        .forTable(\"test-trip-table\").build();\n+\n+    // Create six commits\n+    for (int i = 100; i < 106; i++) {\n+      String timestamp = String.valueOf(i);\n+      // Requested Compaction\n+      HoodieTestCommitMetadataGenerator.createCompactionAuxiliaryMetadata(tablePath,\n+          new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, timestamp), dfs.getConf());\n+      // Inflight Compaction\n+      HoodieTestCommitMetadataGenerator.createCompactionAuxiliaryMetadata(tablePath,\n+          new HoodieInstant(HoodieInstant.State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, timestamp), dfs.getConf());\n+      HoodieTestCommitMetadataGenerator.createCommitFileWithMetadata(tablePath, timestamp, dfs.getConf());\n+    }\n+\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+    // reload the timeline and get all the commits before archive\n+    HoodieTimeline timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n+    assertEquals(\"Loaded 6 commits and the count should match\", 6, timeline.countInstants());", "originalCommit": "e2605ab2f2db655b19c54dfe3025c41d48a8da5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMzA2OA==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396203068", "bodyText": "IMO, we'd better to use assertion in a method that marks with @Test annotation. WDYT?\n\nYes, I will remove assertion here.", "author": "hddong", "createdAt": "2020-03-23T04:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5Mjg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5Mjg3NQ==", "url": "https://github.com/apache/hudi/pull/1424#discussion_r396192875", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-03-23T03:06:24Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestArchivedCommitsCommand.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.cli.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.common.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.cli.common.HoodieTestCommitUtilities;\n+import org.apache.hudi.common.model.HoodieCommitMetadata;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.HoodieTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.table.HoodieCommitArchiveLog;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Test Cases for {@link ArchivedCommitsCommand}.\n+ */\n+public class TestArchivedCommitsCommand extends AbstractShellIntegrationTest {\n+\n+  private String tablePath;\n+\n+  @Before\n+  public void init() throws IOException {\n+    initDFS();\n+    jsc.hadoopConfiguration().addResource(dfs.getConf());\n+    HoodieCLI.conf = dfs.getConf();\n+\n+    // Create table and connect\n+    String tableName = \"test_table\";\n+    tablePath = basePath + File.separator + tableName;\n+    new TableCommand().createTable(\n+        tablePath, tableName,\n+        \"COPY_ON_WRITE\", \"\", 1, \"org.apache.hudi.common.model.HoodieAvroPayload\");\n+\n+    metaClient = HoodieCLI.getTableMetaClient();\n+\n+    // Generate archive\n+    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(tablePath)\n+        .withSchema(HoodieTestCommitMetadataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2)\n+        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 3).build())\n+        .forTable(\"test-trip-table\").build();\n+\n+    // Create six commits\n+    for (int i = 100; i < 106; i++) {\n+      String timestamp = String.valueOf(i);\n+      // Requested Compaction\n+      HoodieTestCommitMetadataGenerator.createCompactionAuxiliaryMetadata(tablePath,\n+          new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, timestamp), dfs.getConf());\n+      // Inflight Compaction\n+      HoodieTestCommitMetadataGenerator.createCompactionAuxiliaryMetadata(tablePath,\n+          new HoodieInstant(HoodieInstant.State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, timestamp), dfs.getConf());\n+      HoodieTestCommitMetadataGenerator.createCommitFileWithMetadata(tablePath, timestamp, dfs.getConf());\n+    }\n+\n+    metaClient = HoodieTableMetaClient.reload(metaClient);\n+    // reload the timeline and get all the commits before archive\n+    HoodieTimeline timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n+    assertEquals(\"Loaded 6 commits and the count should match\", 6, timeline.countInstants());\n+\n+    // archive\n+    HoodieCommitArchiveLog archiveLog = new HoodieCommitArchiveLog(cfg, metaClient);\n+    assertTrue(archiveLog.archiveIfRequired(jsc));", "originalCommit": "e2605ab2f2db655b19c54dfe3025c41d48a8da5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "081b2c16c8d7176e138db82cdc685b36d3d06da4", "url": "https://github.com/apache/hudi/commit/081b2c16c8d7176e138db82cdc685b36d3d06da4", "message": "remove assert in before", "committedDate": "2020-03-23T04:00:09Z", "type": "commit"}, {"oid": "51dfe2213b60199720d0d3e80761ab8555ce853e", "url": "https://github.com/apache/hudi/commit/51dfe2213b60199720d0d3e80761ab8555ce853e", "message": "change mothod name", "committedDate": "2020-03-23T04:05:32Z", "type": "commit"}, {"oid": "f23724fc949f692293f0171f43b17bd7db4df299", "url": "https://github.com/apache/hudi/commit/f23724fc949f692293f0171f43b17bd7db4df299", "message": "update", "committedDate": "2020-03-23T04:11:50Z", "type": "commit"}]}