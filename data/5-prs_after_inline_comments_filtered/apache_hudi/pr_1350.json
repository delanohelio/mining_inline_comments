{"pr_number": 1350, "pr_title": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java", "pr_createdAt": "2020-02-22T20:45:33Z", "pr_url": "https://github.com/apache/hudi/pull/1350", "timeline": [{"oid": "903224d0b3b2968905efba40309522f8cead8f6f", "url": "https://github.com/apache/hudi/commit/903224d0b3b2968905efba40309522f8cead8f6f", "message": "HUDI-", "committedDate": "2020-03-13T10:51:16Z", "type": "commit"}, {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "url": "https://github.com/apache/hudi/commit/ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "message": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java", "committedDate": "2020-03-13T23:58:34Z", "type": "commit"}, {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "url": "https://github.com/apache/hudi/commit/ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "message": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java", "committedDate": "2020-03-13T23:58:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392641969", "bodyText": "do we need & 0xFF ?\nwould it work if we do\nlong retVal = bytes[0] ?", "author": "s-sanjay", "createdAt": "2020-03-15T05:03:50Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,27 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    return asLong(Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8)));\n+  }\n+\n+  public static long asLong(byte[] bytes) {\n+    ValidationUtils.checkState(bytes.length >= 8, \"HashCode#asLong() requires >= 8 bytes.\");\n+    return padToLong(bytes);\n+  }\n+\n+  public static long padToLong(byte[] bytes) {\n+    long retVal = (bytes[0] & 0xFF);", "originalCommit": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMjYzMw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r393102633", "bodyText": "@s-sanjay do you see a specific problem? may be an example could help?", "author": "vinothchandar", "createdAt": "2020-03-16T15:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1OTIzNQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r394359235", "bodyText": "@vinothchandar this is a nitpick comment. there is nothing wrong in and with 0xFF but it is not really needed right ?\nI maybe wrong here but my understanding is\nlong retVal = bytes[0]\nand\nlong retVal = (bytes[0] & 0xFF) are the same", "author": "s-sanjay", "createdAt": "2020-03-18T13:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTcyNQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r396049725", "bodyText": "long retVal = (bytes[0] & 0xFF) are the same\nhmm yeah.. you are right..", "author": "vinothchandar", "createdAt": "2020-03-22T03:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjA3Mw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392642073", "bodyText": "wondering instead of making this public, if we can make it private and then test the asLong method\nalso would it help in readability if we unroll the for loop like this ?\nbyte[] padded = Arrays.copyOf(bytes, 8);\nlong retVal =  padded[0]\nretVal |= (padded[1] << i * 8)\nretVal |= (padded[2] << i * 16)\nretVal |= (padded[3] << i * 24)\nretVal |= (padded[4] << i * 32)\nretVal |= (padded[5] << i * 40)\nretVal |= (padded[6] << i * 48)\nretVal |= (padded[7] << i * 56)", "author": "s-sanjay", "createdAt": "2020-03-15T05:06:34Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,27 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    return asLong(Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8)));\n+  }\n+\n+  public static long asLong(byte[] bytes) {\n+    ValidationUtils.checkState(bytes.length >= 8, \"HashCode#asLong() requires >= 8 bytes.\");\n+    return padToLong(bytes);\n+  }\n+\n+  public static long padToLong(byte[] bytes) {\n+    long retVal = (bytes[0] & 0xFF);\n+    for (int i = 1; i < Math.min(bytes.length, 8); i++) {", "originalCommit": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTcxNQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r396049715", "bodyText": "I think modern compiler will do the unrolling by itself?\n+1 on making this private.. and adding a test..\nwould you like to take it up :)", "author": "vinothchandar", "createdAt": "2020-03-22T03:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0MzUxOA==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r396443518", "bodyText": "yes I can do it :D\nyeah modern JIT will unroll it, if all the time it is called with bytes.length > 8 I guess... this was more of a readability thing...", "author": "s-sanjay", "createdAt": "2020-03-23T13:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjA3Mw=="}], "type": "inlineReview"}]}