{"pr_number": 3057, "pr_title": "Add tlsNoVerifyHosts to disable TLS verification for certain hosts", "pr_createdAt": "2020-09-11T21:41:15Z", "pr_url": "https://github.com/line/armeria/pull/3057", "timeline": [{"oid": "6415a1730b9059f129c627ce3c6567a5d616d97a", "url": "https://github.com/line/armeria/commit/6415a1730b9059f129c627ce3c6567a5d616d97a", "message": "Add IgnoreHostsTrustManager", "committedDate": "2020-09-11T21:28:05Z", "type": "commit"}, {"oid": "60c34c1e74d7712a669c5c1215125a6eb962dd08", "url": "https://github.com/line/armeria/commit/60c34c1e74d7712a669c5c1215125a6eb962dd08", "message": "Test", "committedDate": "2020-09-17T05:44:28Z", "type": "commit"}, {"oid": "5f5e8f7d8dd8feb720220f04735961e42d1f4206", "url": "https://github.com/line/armeria/commit/5f5e8f7d8dd8feb720220f04735961e42d1f4206", "message": "Use a mock SSLEngine", "committedDate": "2020-09-17T17:37:47Z", "type": "commit"}, {"oid": "2b511b9dddd78cbe4ddf11c55eaf93d3471ee62a", "url": "https://github.com/line/armeria/commit/2b511b9dddd78cbe4ddf11c55eaf93d3471ee62a", "message": "Fix", "committedDate": "2020-09-17T18:09:52Z", "type": "commit"}, {"oid": "12713c332b0c043792243809e620f33ca057d71d", "url": "https://github.com/line/armeria/commit/12713c332b0c043792243809e620f33ca057d71d", "message": "Fix", "committedDate": "2020-09-17T18:41:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NzgyMw==", "url": "https://github.com/line/armeria/pull/3057#discussion_r490677823", "bodyText": "Could use ServerExtension", "author": "ikhoon", "createdAt": "2020-09-18T03:22:47Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Collections.singletonList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+import java.util.HashSet;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+import io.netty.handler.ssl.util.SelfSignedCertificate;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int port;\n+    private static Server server;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @BeforeAll\n+    static void init() {\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+        try {\n+            final SelfSignedCertificate ssc = new SelfSignedCertificate(\"localhost\");\n+            server = Server.builder()\n+                    .service(\"/\", (ctx, req) -> HttpResponse.of())\n+                    .tls(ssc.certificate(), ssc.privateKey())\n+                    .build();\n+            server.start().get();\n+            port = server.activePorts().values().stream()\n+                    .filter(ServerPort::hasHttps).findAny().get().localAddress()\n+                    .getPort();", "originalCommit": "12713c332b0c043792243809e620f33ca057d71d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NjEyMA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491086120", "bodyText": "I noticed it could be used in HttpClientSniTest as well so I rewrote this using ServerExtension.\n\n  \n    \n      armeria/core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java\n    \n    \n        Lines 54 to 58\n      in\n      198e2d9\n    \n    \n    \n    \n\n        \n          \n           static { \n        \n\n        \n          \n               try { \n        \n\n        \n          \n                   final ServerBuilder sb = Server.builder(); \n        \n\n        \n          \n                   sscA = new SelfSignedCertificate(\"a.com\"); \n        \n\n        \n          \n                   sscB = new SelfSignedCertificate(\"b.com\");", "author": "tumile", "createdAt": "2020-09-18T17:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NzgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3ODA2Mg==", "url": "https://github.com/line/armeria/pull/3057#discussion_r490678062", "bodyText": "We prefer Guava ImmutableList.of(\"localhost\"). \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-09-18T03:23:58Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Collections.singletonList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+import java.util.HashSet;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+import io.netty.handler.ssl.util.SelfSignedCertificate;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int port;\n+    private static Server server;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @BeforeAll\n+    static void init() {\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+        try {\n+            final SelfSignedCertificate ssc = new SelfSignedCertificate(\"localhost\");\n+            server = Server.builder()\n+                    .service(\"/\", (ctx, req) -> HttpResponse.of())\n+                    .tls(ssc.certificate(), ssc.privateKey())\n+                    .build();\n+            server.start().get();\n+            port = server.activePorts().values().stream()\n+                    .filter(ServerPort::hasHttps).findAny().get().localAddress()\n+                    .getPort();\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void destroy() throws IOException {\n+        defaultSocket.close();\n+        server.stop().join();\n+    }\n+\n+    @Test\n+    void testCreate() {\n+        assertThat(IgnoreHostsTrustManager.of(\"localhost\")).isNotNull();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted() throws Exception {\n+        final Socket socket = new Socket(\"localhost\", port);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, new HashSet<>(singletonList(\"localhost\")));", "originalCommit": "12713c332b0c043792243809e620f33ca057d71d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3ODc1NA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r490678754", "bodyText": "Could be replaced with:\nget(fqdn, clientFactory)", "author": "ikhoon", "createdAt": "2020-09-18T03:26:33Z", "path": "core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java", "diffHunk": "@@ -152,6 +142,40 @@ void testCustomAuthorityWithAdditionalHeaders() throws Exception {\n         }\n     }\n \n+    @Test\n+    void testTlsNoVerifyHosts() throws Exception {\n+        try (ClientFactory clientFactoryIgnoreHosts = ClientFactory.builder()\n+                .tlsNoVerifyHosts(\"a.com\", \"b.com\")\n+                .addressResolverGroupFactory(group -> MockAddressResolverGroup.localhost())\n+                .build()) {\n+            assertThat(get(\"a.com\", clientFactoryIgnoreHosts)).isEqualTo(\"a.com: CN=a.com\");\n+            assertThatThrownBy(() -> get(\"c.com\", clientFactoryIgnoreHosts))\n+                    .hasStackTraceContaining(\"javax.net.ssl.SSLHandshakeException\");\n+        }\n+    }\n+\n+    private static String get(String fqdn) throws Exception {\n+        final WebClient client = WebClient.builder(\"https://\" + fqdn + ':' + httpsPort)\n+                .factory(clientFactory)\n+                .build();\n+\n+        final AggregatedHttpResponse response = client.get(\"/\").aggregate().get();\n+\n+        assertThat(response.status()).isEqualTo(HttpStatus.OK);\n+        return response.contentUtf8();", "originalCommit": "12713c332b0c043792243809e620f33ca057d71d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "93d324ab7f992162533ef7b53c8dc3dd58607999", "url": "https://github.com/line/armeria/commit/93d324ab7f992162533ef7b53c8dc3dd58607999", "message": "Use ServerExtension", "committedDate": "2020-09-18T16:54:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ0MzQyOA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491443428", "bodyText": "Shouldn't we also implement this method?", "author": "minwoox", "createdAt": "2020-09-19T13:57:57Z", "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License\"); you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Socket;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ */\n+final class IgnoreHostsTrustManager extends X509ExtendedTrustManager {\n+\n+    private final X509ExtendedTrustManager delegate;\n+    private final Set<String> insecureHosts;\n+\n+    IgnoreHostsTrustManager(X509ExtendedTrustManager delegate, Set<String> insecureHosts) {\n+        this.delegate = delegate;\n+        this.insecureHosts = insecureHosts;\n+    }\n+\n+    /**\n+     * Returns new {@link IgnoreHostsTrustManager} instance.\n+     */\n+    static IgnoreHostsTrustManager of(String... insecureHosts) {\n+        X509ExtendedTrustManager delegate = null;\n+        try {\n+            final TrustManagerFactory trustManagerFactory = TrustManagerFactory\n+                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init((KeyStore) null);\n+            final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+            for (TrustManager tm : trustManagers) {\n+                if (tm instanceof X509ExtendedTrustManager) {\n+                    delegate = (X509ExtendedTrustManager) tm;\n+                    break;\n+                }\n+            }\n+        } catch (GeneralSecurityException ignored) {\n+            // ignore\n+        }\n+        requireNonNull(delegate, \"cannot resolve default trust manager\");\n+        return new IgnoreHostsTrustManager(delegate, ImmutableSet.copyOf(insecureHosts));\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] x509Certificates, String s, Socket socket)\n+            throws CertificateException {\n+        if (!insecureHosts.contains(socket.getInetAddress().getHostName())) {\n+            delegate.checkServerTrusted(x509Certificates, s, socket);\n+        }\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] x509Certificates, String s, SSLEngine sslEngine)\n+            throws CertificateException {\n+        if (!insecureHosts.contains(sslEngine.getPeerHost())) {\n+            delegate.checkServerTrusted(x509Certificates, s, sslEngine);\n+        }\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] x509Certificates, String s)\n+            throws CertificateException {\n+        throw new UnsupportedOperationException();", "originalCommit": "93d324ab7f992162533ef7b53c8dc3dd58607999", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3MTY2Mw==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491471663", "bodyText": "It does not give access to the hostname so I wasn't sure if it should be implemented.\nIt's just me if you think otherwise I'll add it \ud83d\ude03", "author": "tumile", "createdAt": "2020-09-19T16:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ0MzQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5OTQ1MQ==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491699451", "bodyText": "It's probably fine not to implement this method and the method that accepts Socket because we always use an SSLEngine for TLS communication. If we have to implement this, we could retrieve the host name from x509Certificates[0].", "author": "trustin", "createdAt": "2020-09-20T14:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ0MzQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczNTg0OA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491735848", "bodyText": "Thanks for chiming in. I'm not entirely familiar with TLS so advice is much appreciated here. But it looks to me that we don't need this right now, so maybe it can be added down the road if needed?", "author": "tumile", "createdAt": "2020-09-20T21:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ0MzQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1MzUyNA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491753524", "bodyText": "SGTM. \ud83d\udc4d", "author": "minwoox", "createdAt": "2020-09-21T00:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ0MzQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5ODIyMA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491698220", "bodyText": "key certificate chain -> TLS certificate chain?", "author": "trustin", "createdAt": "2020-09-20T14:44:16Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -254,6 +254,17 @@ public ClientFactoryBuilder tlsNoVerify() {\n         return this;\n     }\n \n+    /**\n+     * Disables the verification of server's key certificate chain for specific hosts.", "originalCommit": "93d324ab7f992162533ef7b53c8dc3dd58607999", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5ODYxMA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491698610", "bodyText": "A user might want to do the following:\ncfb.tlsNoVerifyHosts(\"a.com\");\ncfb.tlsNoVerifyHosts(\"b.com\");\n...\nHow about keeping the list of the insecure hosts and setting the trust manager when the ClientFactory is built? We will also have to make sure tlsNoVerify() and tlsNoVerifyHosts() are mutually exclusive, throwing an IllegalStateException (or should we make tlsNoVerifyHost() always win?)", "author": "trustin", "createdAt": "2020-09-20T14:48:32Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -254,6 +254,17 @@ public ClientFactoryBuilder tlsNoVerify() {\n         return this;\n     }\n \n+    /**\n+     * Disables the verification of server's key certificate chain for specific hosts.\n+     * <strong>Note:</strong> You should never use this in production but only for a testing purpose.\n+     *\n+     * @see #tlsCustomizer(Consumer)\n+     */\n+    public ClientFactoryBuilder tlsNoVerifyHosts(String... insecureHosts) {\n+        tlsCustomizer(b -> b.trustManager(IgnoreHostsTrustManager.of(insecureHosts)));\n+        return this;\n+    }", "originalCommit": "93d324ab7f992162533ef7b53c8dc3dd58607999", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTczMTAzMw==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491731033", "bodyText": "I agree with making them exclusive. Makes it less ambiguous about which hosts are being ignored (or all).", "author": "tumile", "createdAt": "2020-09-20T20:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5ODYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY5OTEwOQ==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491699109", "bodyText": "Should use socket.getRemoteSocketAddress(), downcast to InetSocketAddress and use getHostString(), because getHostName() can trigger a blocking reverse DNS lookup.", "author": "trustin", "createdAt": "2020-09-20T14:54:37Z", "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License\"); you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Socket;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ */\n+final class IgnoreHostsTrustManager extends X509ExtendedTrustManager {\n+\n+    private final X509ExtendedTrustManager delegate;\n+    private final Set<String> insecureHosts;\n+\n+    IgnoreHostsTrustManager(X509ExtendedTrustManager delegate, Set<String> insecureHosts) {\n+        this.delegate = delegate;\n+        this.insecureHosts = insecureHosts;\n+    }\n+\n+    /**\n+     * Returns new {@link IgnoreHostsTrustManager} instance.\n+     */\n+    static IgnoreHostsTrustManager of(String... insecureHosts) {\n+        X509ExtendedTrustManager delegate = null;\n+        try {\n+            final TrustManagerFactory trustManagerFactory = TrustManagerFactory\n+                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init((KeyStore) null);\n+            final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+            for (TrustManager tm : trustManagers) {\n+                if (tm instanceof X509ExtendedTrustManager) {\n+                    delegate = (X509ExtendedTrustManager) tm;\n+                    break;\n+                }\n+            }\n+        } catch (GeneralSecurityException ignored) {\n+            // ignore\n+        }\n+        requireNonNull(delegate, \"cannot resolve default trust manager\");\n+        return new IgnoreHostsTrustManager(delegate, ImmutableSet.copyOf(insecureHosts));\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] x509Certificates, String s, Socket socket)\n+            throws CertificateException {\n+        if (!insecureHosts.contains(socket.getInetAddress().getHostName())) {", "originalCommit": "93d324ab7f992162533ef7b53c8dc3dd58607999", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "url": "https://github.com/line/armeria/commit/3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "message": "Review", "committedDate": "2020-09-20T21:26:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1NTY0NA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491755644", "bodyText": "This is used only from test code. Could you remove this?", "author": "minwoox", "createdAt": "2020-09-21T00:44:44Z", "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License\"); you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ */\n+final class IgnoreHostsTrustManager extends X509ExtendedTrustManager {\n+\n+    private final X509ExtendedTrustManager delegate;\n+    private final Set<String> insecureHosts;\n+\n+    IgnoreHostsTrustManager(X509ExtendedTrustManager delegate, Set<String> insecureHosts) {\n+        this.delegate = delegate;\n+        this.insecureHosts = insecureHosts;\n+    }\n+\n+    /**\n+     * Returns new {@link IgnoreHostsTrustManager} instance.\n+     */\n+    static IgnoreHostsTrustManager of(String... insecureHosts) {", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1NTc0Ng==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491755746", "bodyText": "Could you move this up on the delegate field declaration?", "author": "minwoox", "createdAt": "2020-09-21T00:45:30Z", "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License\"); you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ */\n+final class IgnoreHostsTrustManager extends X509ExtendedTrustManager {\n+\n+    private final X509ExtendedTrustManager delegate;\n+    private final Set<String> insecureHosts;\n+\n+    IgnoreHostsTrustManager(X509ExtendedTrustManager delegate, Set<String> insecureHosts) {\n+        this.delegate = delegate;\n+        this.insecureHosts = insecureHosts;\n+    }\n+\n+    /**\n+     * Returns new {@link IgnoreHostsTrustManager} instance.\n+     */\n+    static IgnoreHostsTrustManager of(String... insecureHosts) {\n+        return of(ImmutableSet.copyOf(insecureHosts));\n+    }\n+\n+    /**\n+     * Returns new {@link IgnoreHostsTrustManager} instance.\n+     */\n+    static IgnoreHostsTrustManager of(Set<String> insecureHosts) {", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NTYyNw==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491765627", "bodyText": "nit: testCheckServerTrustedWithSSLEngine?", "author": "ikhoon", "createdAt": "2020-09-21T02:03:26Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int httpsPort;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) {\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of());\n+            sb.tlsSelfSigned();\n+        }\n+    };\n+\n+    @BeforeAll\n+    static void init() {\n+        httpsPort = server.httpsPort();\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+    }\n+\n+    @AfterAll\n+    static void destroy() throws IOException {\n+        defaultSocket.close();\n+    }\n+\n+    @Test\n+    void testCreate() {\n+        assertThat(IgnoreHostsTrustManager.of(\"localhost\")).isNotNull();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted() throws Exception {\n+        final Socket socket = new Socket(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isTrue();\n+\n+        socket.close();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted1() throws Exception {", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NTY4Ng==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491765686", "bodyText": "nit: testCheckServerTrustedWithSocket?", "author": "ikhoon", "createdAt": "2020-09-21T02:03:52Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int httpsPort;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) {\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of());\n+            sb.tlsSelfSigned();\n+        }\n+    };\n+\n+    @BeforeAll\n+    static void init() {\n+        httpsPort = server.httpsPort();\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+    }\n+\n+    @AfterAll\n+    static void destroy() throws IOException {\n+        defaultSocket.close();\n+    }\n+\n+    @Test\n+    void testCreate() {\n+        assertThat(IgnoreHostsTrustManager.of(\"localhost\")).isNotNull();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted() throws Exception {", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NjIwOA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491766208", "bodyText": "global comments: String s -> String authType for readability?", "author": "ikhoon", "createdAt": "2020-09-21T02:07:12Z", "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License\"); you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ */\n+final class IgnoreHostsTrustManager extends X509ExtendedTrustManager {\n+\n+    private final X509ExtendedTrustManager delegate;\n+    private final Set<String> insecureHosts;\n+\n+    IgnoreHostsTrustManager(X509ExtendedTrustManager delegate, Set<String> insecureHosts) {\n+        this.delegate = delegate;\n+        this.insecureHosts = insecureHosts;\n+    }\n+\n+    /**\n+     * Returns new {@link IgnoreHostsTrustManager} instance.\n+     */\n+    static IgnoreHostsTrustManager of(String... insecureHosts) {\n+        return of(ImmutableSet.copyOf(insecureHosts));\n+    }\n+\n+    /**\n+     * Returns new {@link IgnoreHostsTrustManager} instance.\n+     */\n+    static IgnoreHostsTrustManager of(Set<String> insecureHosts) {\n+        X509ExtendedTrustManager delegate = null;\n+        try {\n+            final TrustManagerFactory trustManagerFactory = TrustManagerFactory\n+                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init((KeyStore) null);\n+            final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+            for (TrustManager tm : trustManagers) {\n+                if (tm instanceof X509ExtendedTrustManager) {\n+                    delegate = (X509ExtendedTrustManager) tm;\n+                    break;\n+                }\n+            }\n+        } catch (GeneralSecurityException ignored) {\n+            // ignore\n+        }\n+        requireNonNull(delegate, \"cannot resolve default trust manager\");\n+        return new IgnoreHostsTrustManager(delegate, insecureHosts);\n+    }\n+\n+    @Override\n+    public void checkServerTrusted(X509Certificate[] x509Certificates, String s, Socket socket)", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NjMxNQ==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491766315", "bodyText": "nit: testCheckServerTrustedWithAuthType?", "author": "ikhoon", "createdAt": "2020-09-21T02:07:57Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int httpsPort;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) {\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of());\n+            sb.tlsSelfSigned();\n+        }\n+    };\n+\n+    @BeforeAll\n+    static void init() {\n+        httpsPort = server.httpsPort();\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+    }\n+\n+    @AfterAll\n+    static void destroy() throws IOException {\n+        defaultSocket.close();\n+    }\n+\n+    @Test\n+    void testCreate() {\n+        assertThat(IgnoreHostsTrustManager.of(\"localhost\")).isNotNull();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted() throws Exception {\n+        final Socket socket = new Socket(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isTrue();\n+\n+        socket.close();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted1() throws Exception {\n+        final MockSSLEngine sslEngine = new MockSSLEngine(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", sslEngine);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", sslEngine);\n+        assertThat(delegate.received).isTrue();\n+    }\n+\n+    @Test\n+    void testGetAcceptedIssuers() {\n+        final MockTrustManager delegate = new MockTrustManager();\n+        final IgnoreHostsTrustManager tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        assertThat(tm.getAcceptedIssuers()).isEqualTo(delegate.certificates);\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted2() {", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NjM2Nw==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491766367", "bodyText": "nit: testCheckClientTrustedWithSocket?", "author": "ikhoon", "createdAt": "2020-09-21T02:08:20Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int httpsPort;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) {\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of());\n+            sb.tlsSelfSigned();\n+        }\n+    };\n+\n+    @BeforeAll\n+    static void init() {\n+        httpsPort = server.httpsPort();\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+    }\n+\n+    @AfterAll\n+    static void destroy() throws IOException {\n+        defaultSocket.close();\n+    }\n+\n+    @Test\n+    void testCreate() {\n+        assertThat(IgnoreHostsTrustManager.of(\"localhost\")).isNotNull();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted() throws Exception {\n+        final Socket socket = new Socket(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isTrue();\n+\n+        socket.close();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted1() throws Exception {\n+        final MockSSLEngine sslEngine = new MockSSLEngine(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", sslEngine);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", sslEngine);\n+        assertThat(delegate.received).isTrue();\n+    }\n+\n+    @Test\n+    void testGetAcceptedIssuers() {\n+        final MockTrustManager delegate = new MockTrustManager();\n+        final IgnoreHostsTrustManager tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        assertThat(tm.getAcceptedIssuers()).isEqualTo(delegate.certificates);\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted2() {\n+        final IgnoreHostsTrustManager tm = IgnoreHostsTrustManager.of();\n+        assertThatThrownBy(() -> tm.checkServerTrusted(defaultCerts, \"\"))\n+                .isInstanceOf(UnsupportedOperationException.class);\n+    }\n+\n+    @Test\n+    void testCheckClientTrusted() {", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NjQyMA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491766420", "bodyText": "nit: testCheckClientTrustedWithSSLEngine?", "author": "ikhoon", "createdAt": "2020-09-21T02:08:49Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int httpsPort;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) {\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of());\n+            sb.tlsSelfSigned();\n+        }\n+    };\n+\n+    @BeforeAll\n+    static void init() {\n+        httpsPort = server.httpsPort();\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+    }\n+\n+    @AfterAll\n+    static void destroy() throws IOException {\n+        defaultSocket.close();\n+    }\n+\n+    @Test\n+    void testCreate() {\n+        assertThat(IgnoreHostsTrustManager.of(\"localhost\")).isNotNull();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted() throws Exception {\n+        final Socket socket = new Socket(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isTrue();\n+\n+        socket.close();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted1() throws Exception {\n+        final MockSSLEngine sslEngine = new MockSSLEngine(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", sslEngine);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", sslEngine);\n+        assertThat(delegate.received).isTrue();\n+    }\n+\n+    @Test\n+    void testGetAcceptedIssuers() {\n+        final MockTrustManager delegate = new MockTrustManager();\n+        final IgnoreHostsTrustManager tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        assertThat(tm.getAcceptedIssuers()).isEqualTo(delegate.certificates);\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted2() {\n+        final IgnoreHostsTrustManager tm = IgnoreHostsTrustManager.of();\n+        assertThatThrownBy(() -> tm.checkServerTrusted(defaultCerts, \"\"))\n+                .isInstanceOf(UnsupportedOperationException.class);\n+    }\n+\n+    @Test\n+    void testCheckClientTrusted() {\n+        final IgnoreHostsTrustManager tm = IgnoreHostsTrustManager.of();\n+        assertThatThrownBy(() -> tm.checkClientTrusted(defaultCerts, \"\", defaultSocket))\n+                .isInstanceOf(UnsupportedOperationException.class);\n+    }\n+\n+    @Test\n+    void testCheckClientTrusted1() {", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NjQ2OQ==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491766469", "bodyText": "nit: testCheckClientTrustedWithAuthType?", "author": "ikhoon", "createdAt": "2020-09-21T02:09:07Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int httpsPort;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) {\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of());\n+            sb.tlsSelfSigned();\n+        }\n+    };\n+\n+    @BeforeAll\n+    static void init() {\n+        httpsPort = server.httpsPort();\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+    }\n+\n+    @AfterAll\n+    static void destroy() throws IOException {\n+        defaultSocket.close();\n+    }\n+\n+    @Test\n+    void testCreate() {\n+        assertThat(IgnoreHostsTrustManager.of(\"localhost\")).isNotNull();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted() throws Exception {\n+        final Socket socket = new Socket(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", socket);\n+        assertThat(delegate.received).isTrue();\n+\n+        socket.close();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted1() throws Exception {\n+        final MockSSLEngine sslEngine = new MockSSLEngine(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];\n+        final MockTrustManager delegate = new MockTrustManager();\n+        IgnoreHostsTrustManager tm;\n+\n+        // if host is ignored, the check is not delegated, therefore delegate.received is false\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of(\"localhost\"));\n+        tm.checkServerTrusted(certs, \"\", sslEngine);\n+        assertThat(delegate.received).isFalse();\n+\n+        // if host is not ignored, the check is delegated\n+        tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        tm.checkServerTrusted(certs, \"\", sslEngine);\n+        assertThat(delegate.received).isTrue();\n+    }\n+\n+    @Test\n+    void testGetAcceptedIssuers() {\n+        final MockTrustManager delegate = new MockTrustManager();\n+        final IgnoreHostsTrustManager tm = new IgnoreHostsTrustManager(delegate, ImmutableSet.of());\n+        assertThat(tm.getAcceptedIssuers()).isEqualTo(delegate.certificates);\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted2() {\n+        final IgnoreHostsTrustManager tm = IgnoreHostsTrustManager.of();\n+        assertThatThrownBy(() -> tm.checkServerTrusted(defaultCerts, \"\"))\n+                .isInstanceOf(UnsupportedOperationException.class);\n+    }\n+\n+    @Test\n+    void testCheckClientTrusted() {\n+        final IgnoreHostsTrustManager tm = IgnoreHostsTrustManager.of();\n+        assertThatThrownBy(() -> tm.checkClientTrusted(defaultCerts, \"\", defaultSocket))\n+                .isInstanceOf(UnsupportedOperationException.class);\n+    }\n+\n+    @Test\n+    void testCheckClientTrusted1() {\n+        final IgnoreHostsTrustManager tm = IgnoreHostsTrustManager.of();\n+        assertThatThrownBy(() -> tm.checkClientTrusted(defaultCerts, \"\", defaultSslEngine))\n+                .isInstanceOf(UnsupportedOperationException.class);\n+    }\n+\n+    @Test\n+    void testCheckClientTrusted2() {", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NzYyNQ==", "url": "https://github.com/line/armeria/pull/3057#discussion_r491767625", "bodyText": "Could you introduce a static constant field to suppress the warning detected by the inspection on Allocation of zero length array in IntelliJ IDEA?", "author": "ikhoon", "createdAt": "2020-09-21T02:16:19Z", "path": "core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+import java.nio.ByteBuffer;\n+import java.security.cert.X509Certificate;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+\n+class IgnoreHostsTrustManagerTest {\n+\n+    private static int httpsPort;\n+    private static Socket defaultSocket;\n+    private static SSLEngine defaultSslEngine;\n+    private static X509Certificate[] defaultCerts;\n+\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) {\n+            sb.service(\"/\", (ctx, req) -> HttpResponse.of());\n+            sb.tlsSelfSigned();\n+        }\n+    };\n+\n+    @BeforeAll\n+    static void init() {\n+        httpsPort = server.httpsPort();\n+        defaultCerts = new X509Certificate[0];\n+        defaultSocket = new Socket();\n+        defaultSslEngine = new MockSSLEngine(\"localhost\", 0);\n+    }\n+\n+    @AfterAll\n+    static void destroy() throws IOException {\n+        defaultSocket.close();\n+    }\n+\n+    @Test\n+    void testCreate() {\n+        assertThat(IgnoreHostsTrustManager.of(\"localhost\")).isNotNull();\n+    }\n+\n+    @Test\n+    void testCheckServerTrusted() throws Exception {\n+        final Socket socket = new Socket(\"localhost\", httpsPort);\n+        final X509Certificate[] certs = new X509Certificate[0];", "originalCommit": "3bd2e8d94d2de4d1d88b409ef98b8c5393375b46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "beb97dd260fa119b109d874538a46ee714eb7e73", "url": "https://github.com/line/armeria/commit/beb97dd260fa119b109d874538a46ee714eb7e73", "message": "Clean up nits", "committedDate": "2020-09-21T04:02:08Z", "type": "commit"}, {"oid": "2de30e77c9945dd10bdf985d0a4f9ad26a2ee196", "url": "https://github.com/line/armeria/commit/2de30e77c9945dd10bdf985d0a4f9ad26a2ee196", "message": "Merge branch 'master' of github.com:line/armeria into tls-no-verify-hosts", "committedDate": "2020-09-21T04:18:06Z", "type": "commit"}, {"oid": "62c89ed7523f305147867ea011a5cf37dc910178", "url": "https://github.com/line/armeria/commit/62c89ed7523f305147867ea011a5cf37dc910178", "message": "Merge branch 'tls-no-verify-hosts' of github.com:tumile/armeria into tls-no-verify-hosts", "committedDate": "2020-09-21T04:18:57Z", "type": "commit"}, {"oid": "84c55ab9098c3582ade5ba21a5f922c4e9fd227f", "url": "https://github.com/line/armeria/commit/84c55ab9098c3582ade5ba21a5f922c4e9fd227f", "message": "Add license", "committedDate": "2020-09-21T04:35:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNTAxMA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r492435010", "bodyText": "Need to remove this line because IgnoreHostsTrustManager is not part of the public API.", "author": "trustin", "createdAt": "2020-09-22T01:44:48Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java", "diffHunk": "@@ -242,15 +247,30 @@ private void channelOptions(Map<ChannelOption<?>, Object> newChannelOptions) {\n     }\n \n     /**\n-     * Disables the verification of server's key certificate chain. This method is a shortcut for:\n-     * {@code tlsCustomizer(b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE))}.\n+     * Disables the verification of server's TLS certificate chain. If you want to disable verification for\n+     * only specific hosts, use {@link #tlsNoVerifyHosts(String...)}.\n      * <strong>Note:</strong> You should never use this in production but only for a testing purpose.\n      *\n      * @see InsecureTrustManagerFactory\n      * @see #tlsCustomizer(Consumer)\n      */\n     public ClientFactoryBuilder tlsNoVerify() {\n-        tlsCustomizer(b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE));\n+        checkState(insecureHosts.isEmpty(), \"tlsNoVerify() and tlsNoVerifyHosts() are mutually exclusive.\");\n+        tlsNoVerifySet = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Disables the verification of server's TLS certificate chain for specific hosts. If you want to disable\n+     * all verification, use {@link #tlsNoVerify()} .\n+     * <strong>Note:</strong> You should never use this in production but only for a testing purpose.\n+     *\n+     * @see IgnoreHostsTrustManager", "originalCommit": "84c55ab9098c3582ade5ba21a5f922c4e9fd227f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNTQ0Ng==", "url": "https://github.com/line/armeria/pull/3057#discussion_r492435446", "bodyText": "ImmutableSet.copyOf(insecureHosts), so that we are OK even if insecureHosts is modifed later?", "author": "trustin", "createdAt": "2020-09-22T01:46:54Z", "path": "core/src/main/java/com/linecorp/armeria/client/IgnoreHostsTrustManager.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright 2020 LINE Corporation\n+ *\n+ *  LINE Corporation licenses this file to you under the Apache License,\n+ *  version 2.0 (the \"License\"); you may not use this file except in compliance\n+ *  with the License. You may obtain a copy of the License at:\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  License for the specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+/*\n+ *  Copyright (C) 2020 Square, Inc.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+/**\n+ * An implementation of {@link X509ExtendedTrustManager} that skips verification on whitelisted hosts.\n+ */\n+final class IgnoreHostsTrustManager extends X509ExtendedTrustManager {\n+\n+    // Forked from okhttp-4.9.0\n+    // https://github.com/square/okhttp/blob/1364ea44ae1f1c4b5a1cc32e4e7b51d23cb78517/okhttp-tls/src/main/kotlin/okhttp3/tls/internal/InsecureExtendedTrustManager.kt\n+\n+    /**\n+     * Returns new {@link IgnoreHostsTrustManager} instance.\n+     */\n+    static IgnoreHostsTrustManager of(Set<String> insecureHosts) {\n+        X509ExtendedTrustManager delegate = null;\n+        try {\n+            final TrustManagerFactory trustManagerFactory = TrustManagerFactory\n+                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+            trustManagerFactory.init((KeyStore) null);\n+            final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+            for (TrustManager tm : trustManagers) {\n+                if (tm instanceof X509ExtendedTrustManager) {\n+                    delegate = (X509ExtendedTrustManager) tm;\n+                    break;\n+                }\n+            }\n+        } catch (GeneralSecurityException ignored) {\n+            // ignore\n+        }\n+        requireNonNull(delegate, \"cannot resolve default trust manager\");\n+        return new IgnoreHostsTrustManager(delegate, insecureHosts);", "originalCommit": "84c55ab9098c3582ade5ba21a5f922c4e9fd227f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNTU5OQ==", "url": "https://github.com/line/armeria/pull/3057#discussion_r492435599", "bodyText": "nit: Indentation", "author": "trustin", "createdAt": "2020-09-22T01:47:29Z", "path": "core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java", "diffHunk": "@@ -35,64 +36,42 @@\n import com.linecorp.armeria.common.util.SafeCloseable;\n import com.linecorp.armeria.internal.testing.MockAddressResolverGroup;\n import com.linecorp.armeria.server.AbstractHttpService;\n-import com.linecorp.armeria.server.Server;\n import com.linecorp.armeria.server.ServerBuilder;\n-import com.linecorp.armeria.server.ServerPort;\n import com.linecorp.armeria.server.ServiceRequestContext;\n-\n-import io.netty.handler.ssl.util.SelfSignedCertificate;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n \n class HttpClientSniTest {\n \n-    private static final Server server;\n-\n     private static int httpsPort;\n     private static ClientFactory clientFactory;\n-    private static final SelfSignedCertificate sscA;\n-    private static final SelfSignedCertificate sscB;\n-\n-    static {\n-        try {\n-            final ServerBuilder sb = Server.builder();\n-            sscA = new SelfSignedCertificate(\"a.com\");\n-            sscB = new SelfSignedCertificate(\"b.com\");\n \n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) {\n             sb.virtualHost(\"a.com\")\n-              .service(\"/\", new SniTestService(\"a.com\"))\n-              .tls(sscA.certificate(), sscA.privateKey())\n-              .and()\n-              .defaultVirtualHost()\n-              .defaultHostname(\"b.com\")\n-              .service(\"/\", new SniTestService(\"b.com\"))\n-              .tls(sscB.certificate(), sscB.privateKey());\n-\n-            server = sb.build();\n-        } catch (Exception e) {\n-            throw new Error(e);\n+                    .service(\"/\", new SniTestService(\"a.com\"))\n+                    .tlsSelfSigned()\n+                    .and()\n+                    .defaultVirtualHost()\n+                    .defaultHostname(\"b.com\")\n+                    .service(\"/\", new SniTestService(\"b.com\"))\n+                    .tlsSelfSigned();", "originalCommit": "84c55ab9098c3582ade5ba21a5f922c4e9fd227f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNTc1OA==", "url": "https://github.com/line/armeria/pull/3057#discussion_r492435758", "bodyText": "Could we also check \"b.com\" and \"c.com\", so that all hosts are added?", "author": "trustin", "createdAt": "2020-09-22T01:48:18Z", "path": "core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java", "diffHunk": "@@ -152,6 +120,34 @@ void testCustomAuthorityWithAdditionalHeaders() throws Exception {\n         }\n     }\n \n+    @Test\n+    void testTlsNoVerifyHosts() throws Exception {\n+        try (ClientFactory clientFactoryIgnoreHosts = ClientFactory.builder()\n+                .tlsNoVerifyHosts(\"a.com\", \"b.com\")\n+                .tlsNoVerifyHosts(\"c.com\")\n+                .addressResolverGroupFactory(group -> MockAddressResolverGroup.localhost())\n+                .build()) {\n+            assertThat(get(\"a.com\", clientFactoryIgnoreHosts)).isEqualTo(\"a.com: CN=a.com\");", "originalCommit": "84c55ab9098c3582ade5ba21a5f922c4e9fd227f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17d5e52e883d2cace129877a5d9f9d47a5e79dad", "url": "https://github.com/line/armeria/commit/17d5e52e883d2cace129877a5d9f9d47a5e79dad", "message": "Remove invalid reference", "committedDate": "2020-09-22T02:07:49Z", "type": "commit"}, {"oid": "c3abb871b2527bb1db8266d47f1c6e493d638267", "url": "https://github.com/line/armeria/commit/c3abb871b2527bb1db8266d47f1c6e493d638267", "message": "Address the comments by @trustin", "committedDate": "2020-09-22T02:15:57Z", "type": "commit"}]}