{"pr_number": 2471, "pr_title": "Preserve service binding order when building routers", "pr_createdAt": "2020-02-07T16:19:19Z", "pr_url": "https://github.com/line/armeria/pull/2471", "timeline": [{"oid": "6eb99a7c5e009b1a0dc5d91445a9b2420558f311", "url": "https://github.com/line/armeria/commit/6eb99a7c5e009b1a0dc5d91445a9b2420558f311", "message": "Preserve service binding order when building routers\n\nMotivation:\nAnnotated services are lazily bond to `VirtualHost` to apply `AnnotatedServiceExtensions` to them. #2316\nIt causes a change in the order of routing defined by the user.\nThis is critical if a user uses a global fallback service.\nIn the following example, the user added the fallback service in the last.\nHowever, the fallback will be added first and annotated services will be added later.\n\n```java\nsb.annotatedService(\"/api/v0/\", new Object() {\n    @Get(\"regex:/projects/(?<projectName>[^/]+)\")\n     ...\n});\nsb.annotatedService(\"/api/v0/\", new Object() {\n    @Get(\"/users/me\")\n    ...\n});\nsb.serviceUnder(\"/\", (ctx, req) -> HttpResponse.of(\"fallback\"));\n```\n\nModifications:\n* Make ServiceConfigBuilder implement ServiceConfigSetters\n* Remove unsed getters in ServiceConfigBuilder\n* Merge `addAnnotatedServiceBindingBuilder` and  `addServiceConfigBuilder` into `addServiceConfigSetters`\n* Remove `annotatedServiceBindingBuilders` and delegate to `virtualHostTemplate`\n\nResult:\nFix regression in service bindings.", "committedDate": "2020-02-07T16:21:57Z", "type": "commit"}, {"oid": "6eb99a7c5e009b1a0dc5d91445a9b2420558f311", "url": "https://github.com/line/armeria/commit/6eb99a7c5e009b1a0dc5d91445a9b2420558f311", "message": "Preserve service binding order when building routers\n\nMotivation:\nAnnotated services are lazily bond to `VirtualHost` to apply `AnnotatedServiceExtensions` to them. #2316\nIt causes a change in the order of routing defined by the user.\nThis is critical if a user uses a global fallback service.\nIn the following example, the user added the fallback service in the last.\nHowever, the fallback will be added first and annotated services will be added later.\n\n```java\nsb.annotatedService(\"/api/v0/\", new Object() {\n    @Get(\"regex:/projects/(?<projectName>[^/]+)\")\n     ...\n});\nsb.annotatedService(\"/api/v0/\", new Object() {\n    @Get(\"/users/me\")\n    ...\n});\nsb.serviceUnder(\"/\", (ctx, req) -> HttpResponse.of(\"fallback\"));\n```\n\nModifications:\n* Make ServiceConfigBuilder implement ServiceConfigSetters\n* Remove unsed getters in ServiceConfigBuilder\n* Merge `addAnnotatedServiceBindingBuilder` and  `addServiceConfigBuilder` into `addServiceConfigSetters`\n* Remove `annotatedServiceBindingBuilders` and delegate to `virtualHostTemplate`\n\nResult:\nFix regression in service bindings.", "committedDate": "2020-02-07T16:21:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Mzc3OA==", "url": "https://github.com/line/armeria/pull/2471#discussion_r376493778", "bodyText": "Error is too generic in here may be we should throw more specific Exception in here", "author": "mercanil", "createdAt": "2020-02-07T16:46:23Z", "path": "core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java", "diffHunk": "@@ -917,17 +911,24 @@ VirtualHost build(VirtualHostBuilder template) {\n         assert accessLoggerMapper != null;\n         assert extensions != null;\n \n-        virtualHostAnnotatedServiceBindingBuilders.stream()\n-                                                  .flatMap(b -> b.buildServiceConfigBuilder(extensions)\n-                                                                 .stream())\n-                                                  .forEach(this::addServiceConfigBuilder);\n-\n-        final List<ServiceConfigBuilder> serviceConfigBuilders =\n-                getServiceConfigBuilders(template);\n-        final List<ServiceConfig> serviceConfigs = serviceConfigBuilders.stream().map(cfgBuilder -> {\n-            return cfgBuilder.build(requestTimeoutMillis, maxRequestLength, verboseResponses,\n-                                    accessLogWriter, shutdownAccessLogWriterOnStop);\n-        }).collect(toImmutableList());\n+        final List<ServiceConfig> serviceConfigs = getServiceConfigSetters(template)\n+                .stream()\n+                .flatMap(cfgSetters -> {\n+                    if (cfgSetters instanceof VirtualHostAnnotatedServiceBindingBuilder) {\n+                        return ((VirtualHostAnnotatedServiceBindingBuilder) cfgSetters)\n+                                .buildServiceConfigBuilder(extensions).stream();\n+                    } else if (cfgSetters instanceof AnnotatedServiceBindingBuilder) {\n+                        return ((AnnotatedServiceBindingBuilder) cfgSetters)\n+                                .buildServiceConfigBuilder(extensions).stream();\n+                    } else if (cfgSetters instanceof ServiceConfigBuilder) {\n+                        return Stream.of((ServiceConfigBuilder) cfgSetters);\n+                    } else {\n+                        throw new Error(); // Should not reach here.", "originalCommit": "6eb99a7c5e009b1a0dc5d91445a9b2420558f311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMjk4Mg==", "url": "https://github.com/line/armeria/pull/2471#discussion_r376502982", "bodyText": "This is an internal API so users must not encounter this error. But, let me improve the error message.", "author": "ikhoon", "createdAt": "2020-02-07T17:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Mzc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NDA5Mw==", "url": "https://github.com/line/armeria/pull/2471#discussion_r376684093", "bodyText": "You sometimes return ServiceConfigSetters and sometimes ServiceConfigBuilder in this class. It doesn't hurt to return ServiceConfigSetters because it's package-private, but perhaps it's better returning ServiceConfigBuilder for consistency.", "author": "trustin", "createdAt": "2020-02-08T03:39:15Z", "path": "core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java", "diffHunk": "@@ -44,47 +47,47 @@\n         this.service = requireNonNull(service, \"service\");\n     }\n \n-    @Nullable\n-    Long requestTimeoutMillis() {\n-        return requestTimeoutMillis;\n+    @Override\n+    public ServiceConfigSetters requestTimeout(Duration requestTimeout) {", "originalCommit": "6eb99a7c5e009b1a0dc5d91445a9b2420558f311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NDE3Nw==", "url": "https://github.com/line/armeria/pull/2471#discussion_r376684177", "bodyText": "Oops.. Thanks for pointing!", "author": "ikhoon", "createdAt": "2020-02-08T03:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NDA5Mw=="}], "type": "inlineReview"}, {"oid": "ab089e6ab27d2f2c9f0a0e2c2fcce7899da06dfb", "url": "https://github.com/line/armeria/commit/ab089e6ab27d2f2c9f0a0e2c2fcce7899da06dfb", "message": "Address comments by @trustin", "committedDate": "2020-02-08T03:48:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NjczNQ==", "url": "https://github.com/line/armeria/pull/2471#discussion_r376686735", "bodyText": "nit: let's do this after adding the below annotated service so that two tri routers are made which is the regression case. never mind. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-02-08T04:36:02Z", "path": "core/src/test/java/com/linecorp/armeria/server/ServiceRoutingTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.annotation.Get;\n+import com.linecorp.armeria.server.annotation.Param;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+class ServiceRoutingTest {\n+    @RegisterExtension\n+    static ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.annotatedService(\"/api/v0/\", new Object() {", "originalCommit": "ab089e6ab27d2f2c9f0a0e2c2fcce7899da06dfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "87e7167e10b8f50d829b7590e3243d72c694ecc8", "url": "https://github.com/line/armeria/commit/87e7167e10b8f50d829b7590e3243d72c694ecc8", "message": "Add more test case", "committedDate": "2020-02-08T04:45:14Z", "type": "commit"}]}