{"pr_number": 2448, "pr_title": "Introduce Pooled* versions of APIs which delegate to the stand\u2026", "pr_createdAt": "2020-02-04T06:30:56Z", "pr_url": "https://github.com/line/armeria/pull/2448", "timeline": [{"oid": "f462202d128d1d231af2541bdf92a3a555ad239b", "url": "https://github.com/line/armeria/commit/f462202d128d1d231af2541bdf92a3a555ad239b", "message": "Introduce Pooled* versions of client APIs which delegate to the standard ones while assuring all operations use pooled objects.", "committedDate": "2020-02-04T06:24:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNzI4MQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r375627281", "bodyText": "It's now internal.common.", "author": "trustin", "createdAt": "2020-02-06T03:42:45Z", "path": "core/src/main/java/com/linecorp/armeria/internal/HttpRequestAggregator.java", "diffHunk": "@@ -14,22 +14,27 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.common;\n+package com.linecorp.armeria.internal;", "originalCommit": "f462202d128d1d231af2541bdf92a3a555ad239b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7d65399566217e46c91c1a627c3e699c2822ddc8", "url": "https://github.com/line/armeria/commit/7d65399566217e46c91c1a627c3e699c2822ddc8", "message": "Merge branch 'master' of github.com:line/armeria into pooled-web-client", "committedDate": "2020-02-11T09:25:30Z", "type": "commit"}, {"oid": "35ccbef756d019fbd5f8630fd112b5bdb5fc4b5f", "url": "https://github.com/line/armeria/commit/35ccbef756d019fbd5f8630fd112b5bdb5fc4b5f", "message": "Merge more", "committedDate": "2020-02-11T09:46:47Z", "type": "commit"}, {"oid": "d39238ecdb683b3112131ee2d912792d7e64b7ae", "url": "https://github.com/line/armeria/commit/d39238ecdb683b3112131ee2d912792d7e64b7ae", "message": "WIP", "committedDate": "2020-02-11T10:15:46Z", "type": "commit"}, {"oid": "564a1aced7d87c61d75c1585b3ae3f0667999ae2", "url": "https://github.com/line/armeria/commit/564a1aced7d87c61d75c1585b3ae3f0667999ae2", "message": "WIP", "committedDate": "2020-02-13T07:10:01Z", "type": "commit"}, {"oid": "f020cad1645e01abfb61bcd9bac95e7ba182d243", "url": "https://github.com/line/armeria/commit/f020cad1645e01abfb61bcd9bac95e7ba182d243", "message": "Type safety", "committedDate": "2020-02-13T07:19:45Z", "type": "commit"}, {"oid": "9195c8a7fb87c454190ce7a0baa857de97232363", "url": "https://github.com/line/armeria/commit/9195c8a7fb87c454190ce7a0baa857de97232363", "message": "Style", "committedDate": "2020-02-13T08:05:47Z", "type": "commit"}, {"oid": "4263c0b43f96b5c51efa9d171e9762c9b64c46b4", "url": "https://github.com/line/armeria/commit/4263c0b43f96b5c51efa9d171e9762c9b64c46b4", "message": "Style", "committedDate": "2020-02-13T08:05:58Z", "type": "commit"}, {"oid": "16506df7e3d312542fcfa28adc816dd258ba748e", "url": "https://github.com/line/armeria/commit/16506df7e3d312542fcfa28adc816dd258ba748e", "message": "Start tests", "committedDate": "2020-03-03T10:24:44Z", "type": "commit"}, {"oid": "300991f12028f8799a86427f5eb26a400485f2e3", "url": "https://github.com/line/armeria/commit/300991f12028f8799a86427f5eb26a400485f2e3", "message": "WIP", "committedDate": "2020-03-03T10:25:29Z", "type": "commit"}, {"oid": "805207fb3e820ac871cde570d65e8fb32620bb30", "url": "https://github.com/line/armeria/commit/805207fb3e820ac871cde570d65e8fb32620bb30", "message": "WIP", "committedDate": "2020-03-03T10:26:38Z", "type": "commit"}, {"oid": "dd1433d09e57e1e49b5396291ed00d69cf603ab2", "url": "https://github.com/line/armeria/commit/dd1433d09e57e1e49b5396291ed00d69cf603ab2", "message": "WIP", "committedDate": "2020-03-03T10:29:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNjYxNA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r394116614", "bodyText": "I think from is more suitable for our API style. What do you think? \ud83d\ude00\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static PooledHttpData convert(HttpData data) {\n          \n          \n            \n                static PooledHttpData from(HttpData data) {", "author": "ikhoon", "createdAt": "2020-03-18T05:40:57Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/ByteBufHttpData.java", "diffHunk": "@@ -20,30 +20,53 @@\n \n import java.io.InputStream;\n import java.nio.charset.Charset;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n \n import com.google.common.base.MoreObjects;\n \n import com.linecorp.armeria.common.AbstractHttpData;\n import com.linecorp.armeria.common.HttpData;\n-import com.linecorp.armeria.common.util.UnstableApi;\n \n import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.ByteBufHolder;\n import io.netty.buffer.ByteBufInputStream;\n import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.EmptyByteBuf;\n import io.netty.buffer.Unpooled;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n \n /**\n  * An {@link HttpData} that is backed by a {@link ByteBuf} for optimizing certain internal use cases. Not for\n  * general use.\n+ *\n+ * @deprecated Use {@link PooledHttpData}.\n  */\n-@UnstableApi\n-public final class ByteBufHttpData extends AbstractHttpData implements ByteBufHolder {\n+@Deprecated\n+public final class ByteBufHttpData extends AbstractHttpData implements PooledHttpData {\n+\n+    private static final AtomicIntegerFieldUpdater<ByteBufHttpData>\n+            closedUpdater = AtomicIntegerFieldUpdater.newUpdater(ByteBufHttpData.class, \"closed\");\n+\n+    static final ByteBufHttpData EMPTY = new ByteBufHttpData(\n+            new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT), false);\n+\n+    /**\n+     * Converts non-pooled {@link HttpData} into {@link PooledHttpData}.\n+     */\n+    static PooledHttpData convert(HttpData data) {", "originalCommit": "dd1433d09e57e1e49b5396291ed00d69cf603ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f66ab225e140fa078d46ade3c8ae6e351229400f", "url": "https://github.com/line/armeria/commit/f66ab225e140fa078d46ade3c8ae6e351229400f", "message": "Merge branch 'master' of github.com:line/armeria into pooled-web-client", "committedDate": "2020-04-27T08:24:58Z", "type": "commit"}, {"oid": "27e774c45d15ec73b9768513b582b4178e835aab", "url": "https://github.com/line/armeria/commit/27e774c45d15ec73b9768513b582b4178e835aab", "message": "Add pooled request implementations and decorator.", "committedDate": "2020-04-27T09:17:16Z", "type": "commit"}, {"oid": "60f19b3e39f44df0b141de69f8725bad177c76a1", "url": "https://github.com/line/armeria/commit/60f19b3e39f44df0b141de69f8725bad177c76a1", "message": "Don't throw if user hasn't downcasted pooled responses it shoould still work", "committedDate": "2020-05-05T05:36:55Z", "type": "commit"}, {"oid": "6b774d4bf7c0cfa7d0a4862737dc158b93e1b578", "url": "https://github.com/line/armeria/commit/6b774d4bf7c0cfa7d0a4862737dc158b93e1b578", "message": "Reorganize", "committedDate": "2020-05-05T06:08:46Z", "type": "commit"}, {"oid": "969d04b32e0cf812f03dfeaf3bd2ae50124d8a4d", "url": "https://github.com/line/armeria/commit/969d04b32e0cf812f03dfeaf3bd2ae50124d8a4d", "message": "Merge branch 'master' of github.com:line/armeria into pooled-web-client", "committedDate": "2020-05-05T06:08:50Z", "type": "commit"}, {"oid": "28bd91f758325229ba41b58766e26307de1f398c", "url": "https://github.com/line/armeria/commit/28bd91f758325229ba41b58766e26307de1f398c", "message": "Refactoring and add server side too.", "committedDate": "2020-05-05T07:52:00Z", "type": "commit"}, {"oid": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "url": "https://github.com/line/armeria/commit/4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "message": "Remove unused unpooled.", "committedDate": "2020-05-05T07:54:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NzY3Nw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420557677", "bodyText": "Could we add a little bit more information about pooling?", "author": "trustin", "createdAt": "2020-05-06T05:48:50Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/client/PooledHttpClient.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Unwrappable;\n+import com.linecorp.armeria.unsafe.common.PooledHttpRequest;\n+import com.linecorp.armeria.unsafe.common.PooledHttpResponse;\n+\n+/**\n+ * Sends an {@link HttpRequest} to a remote {@link Endpoint}.", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyNjc4Nw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r422026787", "bodyText": "Added links to PooledHttpData, our main doc on it, to various classes", "author": "anuraaga", "createdAt": "2020-05-08T08:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NzY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1ODY3NQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420558675", "bodyText": "nit: probably OK to remove this?", "author": "trustin", "createdAt": "2020-05-06T05:52:34Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/PooledHttpData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.unsafe.client.PooledWebClient;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufHolder;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * A {@link HttpData} that is backed by a pooled {@link ByteBuf} for optimizing certain internal use cases. Not\n+ * for general use.\n+ *\n+ * <h3>What are pooled buffers?</h3>\n+ *\n+ * <p>The buffer backing a {@link PooledHttpData} is a pooled buffer - this means that it does not use normal\n+ * Java garbage collection, and instead uses manual memory management using a reference count, similar to\n+ * some constructs in languages like C++. Manual memory management is more fragile and not idiomatic in Java -\n+ * you should only use this class in performance-sensitive situations and after being ready to deal with these\n+ * very hard-to-debug issues.\n+ *\n+ * <p>You may interact with {@link PooledHttpData} when using objects that return pooled objects, such as\n+ * {@link PooledWebClient}. If you don't use such objects, you will never see a {@link PooledHttpData} and don't\n+ * need to read further.\n+ *\n+ * <h3>Impact of pooled buffers</h3>\n+ *\n+ * <p>Any time you receive a {@link PooledHttpData} it will have a single reference that must be released -\n+ * failure to release the reference will result in a memory leak and poor performance. You must make sure to do\n+ * this by calling {@link PooledHttpData#close()}, usually in a try-with-resources structure to avoid side\n+ * effects.\n+ *\n+ * <p>For example, <pre>{@code\n+ *\n+ * HttpResponse response = client.get(\"/\");\n+ * response.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n+ *     .thenApply(aggResp -> {\n+ *         // try-with-resources here ensures the content is released if it is a ByteBufHttpData, or otherwise\n+ *         // is a no-op if it is not.\n+ *         try (HttpData content = aggResp.content()) {\n+ *             if (!aggResp.status().equals(HttpStatus.OK)) {\n+ *                 throw new IllegalStateException(\"Bad response\");\n+ *             }\n+ *             try {\n+ *                 return OBJECT_MAPPER.readValue(content.toInputStream(), Foo.class);\n+ *             } catch (IOException e) {\n+ *                 throw new IllegalArgumentException(\"Bad JSON: \" + content.toStringUtf8());\n+ *             }\n+ *         }\n+ *     });\n+ *\n+ * }</pre>\n+ *\n+ * <p>In this example, it is the initial {@code try (HttpData content = ...} that ensures the data is released.\n+ * Calls to methods on {@link HttpData} will all work and can be called any number of times within this block.\n+ * If called after the block, or a manual call to {@link PooledHttpData#close}, these methods will fail or\n+ * corrupt data.\n+ *\n+ * <h3>Even more advanced usage</h3>\n+ *\n+ * <p>In some cases, you may want to access the {@link ByteBuf} held by this {@link PooledHttpData}. This will\n+ * generally be used with a fallback to wrapping an unpooled {@link PooledHttpData}, e.g., <pre>{@code\n+ *\n+ * final ByteBuf buf;\n+ * if (data instanceof ByteBufHolder) {\n+ *     buf = ((ByteBufHolder) data).content();\n+ * } else {\n+ *     buf = Unpooled.wrappedBuffer(data.array());\n+ * }\n+ *\n+ * }</pre>\n+ *\n+ * <p>Using a {@link ByteBuf} directly is very advanced and can open up much more complicated management of\n+ * reference count. You should only ever do this if you are very comfortable with Netty.\n+ *\n+ * <p>It is recommended to also read through <a href=\"https://netty.io/wiki/reference-counted-objects.html\">\n+ * Reference counted objects</a> for more information on pooled objects.\n+ */\n+public interface PooledHttpData extends HttpData, ByteBufHolder, SafeCloseable {\n+\n+    /**\n+     * Converts non-pooled {@link HttpData} into {@link PooledHttpData}.\n+     */\n+    static PooledHttpData of(HttpData data) {\n+        requireNonNull(data, \"obj\");\n+        if (data instanceof PooledHttpData) {\n+            return (PooledHttpData) data;\n+        }\n+\n+        return new ByteBufHttpData(Unpooled.wrappedBuffer(data.array()), data.isEndOfStream());\n+    }\n+\n+    /**\n+     * Converts the specified Netty {@link ByteBuf} into an {@link PooledHttpData}. The buffer is not copied;\n+     * any changes made to it will be visible to {@link PooledHttpData}. The ownership of the buffer is\n+     * transferred to the {@link HttpData}. If you still need to use it after calling this method, make sure to\n+     * call {@link ByteBuf#retain()} first.\n+     *\n+     * @return a new {@link HttpData}. {@link #empty()} if the readable bytes of {@code buf} is 0.\n+     */\n+    static PooledHttpData wrap(ByteBuf buf) {\n+        requireNonNull(buf, \"buf\");\n+        if (!buf.isReadable()) {\n+            return ByteBufHttpData.EMPTY;\n+        }\n+        return new ByteBufHttpData(buf, false);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1NjY2NQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420556665", "bodyText": "Can remove Unwrappable.", "author": "minwoox", "createdAt": "2020-05-06T05:44:46Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/client/PooledHttpClient.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.util.Unwrappable;\n+import com.linecorp.armeria.unsafe.common.PooledHttpRequest;\n+import com.linecorp.armeria.unsafe.common.PooledHttpResponse;\n+\n+/**\n+ * Sends an {@link HttpRequest} to a remote {@link Endpoint}.\n+ */\n+public interface PooledHttpClient extends HttpClient, Unwrappable {", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1ODk1Mg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420558952", "bodyText": "nit: two space before options", "author": "minwoox", "createdAt": "2020-05-06T05:53:29Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/DefaultPooledHttpRequest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.google.common.collect.ObjectArrays;\n+\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultPooledHttpRequest extends FilteredHttpRequest implements PooledHttpRequest {\n+\n+    DefaultPooledHttpRequest(HttpRequest delegate) {\n+        super(delegate, true);\n+    }\n+\n+    @Override\n+    protected HttpObject filter(HttpObject obj) {\n+        if (!(obj instanceof HttpData)) {\n+            return obj;\n+        }\n+        return PooledHttpData.of((HttpData) obj);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber) {\n+        subscribe(subscriber, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            super.subscribe(subscriber,  options);", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1OTQzMA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420559430", "bodyText": "Could be static?\nI realized that we have containsWithPooledObjects in StreamMessageUtil. How about using it?", "author": "minwoox", "createdAt": "2020-05-06T05:55:02Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/DefaultPooledHttpRequest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.google.common.collect.ObjectArrays;\n+\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultPooledHttpRequest extends FilteredHttpRequest implements PooledHttpRequest {\n+\n+    DefaultPooledHttpRequest(HttpRequest delegate) {\n+        super(delegate, true);\n+    }\n+\n+    @Override\n+    protected HttpObject filter(HttpObject obj) {\n+        if (!(obj instanceof HttpData)) {\n+            return obj;\n+        }\n+        return PooledHttpData.of((HttpData) obj);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber) {\n+        subscribe(subscriber, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            super.subscribe(subscriber,  options);\n+        } else {\n+            super.subscribe(subscriber, withPooled(options));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            super.subscribe(subscriber, executor, options);\n+        } else {\n+            super.subscribe(subscriber, executor, withPooled(options));\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll() {\n+        return drainAll(SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            return super.drainAll(options);\n+        }\n+        return super.drainAll(withPooled(options));\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(EventExecutor executor) {\n+        return drainAll(executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(EventExecutor executor, SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            return super.drainAll(executor, options);\n+        }\n+        return super.drainAll(executor, withPooled(options));\n+    }\n+\n+    private boolean hasPooledObjects(SubscriptionOption... options) {", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1OTQ2Mw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420559463", "bodyText": "Could be static?", "author": "minwoox", "createdAt": "2020-05-06T05:55:08Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/DefaultPooledHttpRequest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.google.common.collect.ObjectArrays;\n+\n+import com.linecorp.armeria.common.FilteredHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultPooledHttpRequest extends FilteredHttpRequest implements PooledHttpRequest {\n+\n+    DefaultPooledHttpRequest(HttpRequest delegate) {\n+        super(delegate, true);\n+    }\n+\n+    @Override\n+    protected HttpObject filter(HttpObject obj) {\n+        if (!(obj instanceof HttpData)) {\n+            return obj;\n+        }\n+        return PooledHttpData.of((HttpData) obj);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber) {\n+        subscribe(subscriber, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            super.subscribe(subscriber,  options);\n+        } else {\n+            super.subscribe(subscriber, withPooled(options));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            super.subscribe(subscriber, executor, options);\n+        } else {\n+            super.subscribe(subscriber, executor, withPooled(options));\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll() {\n+        return drainAll(SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            return super.drainAll(options);\n+        }\n+        return super.drainAll(withPooled(options));\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(EventExecutor executor) {\n+        return drainAll(executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(EventExecutor executor, SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            return super.drainAll(executor, options);\n+        }\n+        return super.drainAll(executor, withPooled(options));\n+    }\n+\n+    private boolean hasPooledObjects(SubscriptionOption... options) {\n+        for (SubscriptionOption option : options) {\n+            if (option == SubscriptionOption.WITH_POOLED_OBJECTS) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private SubscriptionOption[] withPooled(SubscriptionOption[] options) {", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2MDY5Mw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420560693", "bodyText": "Can we move this to StreamMessageUtil so DefaultHttpRequest share this method?", "author": "minwoox", "createdAt": "2020-05-06T05:59:16Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/DefaultPooledHttpResponse.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.reactivestreams.Subscriber;\n+\n+import com.google.common.collect.ObjectArrays;\n+\n+import com.linecorp.armeria.common.FilteredHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+final class DefaultPooledHttpResponse extends FilteredHttpResponse implements PooledHttpResponse {\n+\n+    DefaultPooledHttpResponse(HttpResponse delegate) {\n+        super(delegate, true);\n+    }\n+\n+    @Override\n+    protected HttpObject filter(HttpObject obj) {\n+        if (!(obj instanceof HttpData)) {\n+            return obj;\n+        }\n+        return PooledHttpData.of((HttpData) obj);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber) {\n+        subscribe(subscriber, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            super.subscribe(subscriber,  options);\n+        } else {\n+            super.subscribe(subscriber, withPooled(options));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super HttpObject> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            super.subscribe(subscriber, executor, options);\n+        } else {\n+            super.subscribe(subscriber, executor, withPooled(options));\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll() {\n+        return drainAll(SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            return super.drainAll(options);\n+        }\n+        return super.drainAll(withPooled(options));\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(EventExecutor executor) {\n+        return drainAll(executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    @Override\n+    public CompletableFuture<List<HttpObject>> drainAll(EventExecutor executor, SubscriptionOption... options) {\n+        if (hasPooledObjects(options)) {\n+            return super.drainAll(executor, options);\n+        }\n+        return super.drainAll(executor, withPooled(options));\n+    }\n+\n+    private boolean hasPooledObjects(SubscriptionOption... options) {\n+        for (SubscriptionOption option : options) {\n+            if (option == SubscriptionOption.WITH_POOLED_OBJECTS) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private SubscriptionOption[] withPooled(SubscriptionOption[] options) {", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2MjIwNw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420562207", "bodyText": "Shouldn't we add @Override to all methods here?", "author": "minwoox", "createdAt": "2020-05-06T06:04:09Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/client/PooledWebClient.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.client;\n+\n+import java.nio.charset.Charset;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.unsafe.common.PooledHttpData;\n+import com.linecorp.armeria.unsafe.common.PooledHttpResponse;\n+\n+/**\n+ * An asynchronous web client which will return pooled buffers in its responses where possible. Before using\n+ * this class, please review the notes in {@link PooledHttpData}. Usage of this class is very advanced and while\n+ * it may unlock significant performance, has even more of a chance of introducing difficult to debug issues in\n+ * an application. If you are not comfortable with this, use {@link WebClient}.\n+ */\n+public interface PooledWebClient extends WebClient {\n+\n+    /**\n+     * Creates a {@link PooledWebClient} that delegates to the provided {@link WebClient} for issuing requests.\n+     */\n+    static PooledWebClient of(WebClient delegate) {\n+        return new DefaultPooledWebClient(delegate);\n+    }\n+\n+    /**\n+     * Sends the specified HTTP request.\n+     */\n+    PooledHttpResponse execute(HttpRequest req);", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2Njc1Nw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420566757", "bodyText": "Can remove this?", "author": "minwoox", "createdAt": "2020-05-06T06:19:06Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/PooledAggregatedHttpRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * An {@link AggregatedHttpRequest} using pooled buffers for the content. Make sure to call\n+ * {@link AutoCloseable#close()} on this response or the {@code content} to release pooled resources.\n+ */\n+public interface PooledAggregatedHttpRequest extends AggregatedHttpRequest, SafeCloseable {\n+\n+    /**\n+     * Returns a {@link PooledAggregatedHttpRequest} that wraps the {@link AggregatedHttpRequest}, ensuring all\n+     * published data is a {@link PooledHttpData}.\n+     */\n+    static PooledAggregatedHttpRequest of(AggregatedHttpRequest delegate) {\n+        requireNonNull(delegate, \"delegate\");\n+        if (delegate instanceof PooledAggregatedHttpRequest) {\n+            return (PooledAggregatedHttpRequest) delegate;\n+        }\n+        return new DefaultPooledAggregatedHttpRequest(delegate);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyOTE5OQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r422029199", "bodyText": "I'll confirm the javadoc output - I'm overriding the method to change the return type and figured I need it to make sure the method has javadoc (and notice that either I can remove it here, or I need to add it elsewhere...)", "author": "anuraaga", "createdAt": "2020-05-08T08:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2Njc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2NjkyMA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420566920", "bodyText": "ditto", "author": "minwoox", "createdAt": "2020-05-06T06:19:39Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/PooledAggregatedHttpResponse.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * An {@link AggregatedHttpResponse} using pooled buffers for the content. Make sure to call\n+ * {@link AutoCloseable#close()} on this response or the {@code content} to release pooled resources.\n+ */\n+public interface PooledAggregatedHttpResponse extends AggregatedHttpResponse, SafeCloseable {\n+\n+    /**\n+     * {@inheritDoc}\n+     */", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2NzE2Mw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420567163", "bodyText": "nit: An {@link HttpData}", "author": "minwoox", "createdAt": "2020-05-06T06:20:25Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/PooledHttpData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.unsafe.client.PooledWebClient;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufHolder;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * A {@link HttpData} that is backed by a pooled {@link ByteBuf} for optimizing certain internal use cases. Not", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODA3MQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420568071", "bodyText": "nit: a {@link PooledHttpData}", "author": "minwoox", "createdAt": "2020-05-06T06:23:21Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/PooledHttpData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+import com.linecorp.armeria.unsafe.client.PooledWebClient;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufHolder;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * A {@link HttpData} that is backed by a pooled {@link ByteBuf} for optimizing certain internal use cases. Not\n+ * for general use.\n+ *\n+ * <h3>What are pooled buffers?</h3>\n+ *\n+ * <p>The buffer backing a {@link PooledHttpData} is a pooled buffer - this means that it does not use normal\n+ * Java garbage collection, and instead uses manual memory management using a reference count, similar to\n+ * some constructs in languages like C++. Manual memory management is more fragile and not idiomatic in Java -\n+ * you should only use this class in performance-sensitive situations and after being ready to deal with these\n+ * very hard-to-debug issues.\n+ *\n+ * <p>You may interact with {@link PooledHttpData} when using objects that return pooled objects, such as\n+ * {@link PooledWebClient}. If you don't use such objects, you will never see a {@link PooledHttpData} and don't\n+ * need to read further.\n+ *\n+ * <h3>Impact of pooled buffers</h3>\n+ *\n+ * <p>Any time you receive a {@link PooledHttpData} it will have a single reference that must be released -\n+ * failure to release the reference will result in a memory leak and poor performance. You must make sure to do\n+ * this by calling {@link PooledHttpData#close()}, usually in a try-with-resources structure to avoid side\n+ * effects.\n+ *\n+ * <p>For example, <pre>{@code\n+ *\n+ * HttpResponse response = client.get(\"/\");\n+ * response.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n+ *     .thenApply(aggResp -> {\n+ *         // try-with-resources here ensures the content is released if it is a ByteBufHttpData, or otherwise\n+ *         // is a no-op if it is not.\n+ *         try (HttpData content = aggResp.content()) {\n+ *             if (!aggResp.status().equals(HttpStatus.OK)) {\n+ *                 throw new IllegalStateException(\"Bad response\");\n+ *             }\n+ *             try {\n+ *                 return OBJECT_MAPPER.readValue(content.toInputStream(), Foo.class);\n+ *             } catch (IOException e) {\n+ *                 throw new IllegalArgumentException(\"Bad JSON: \" + content.toStringUtf8());\n+ *             }\n+ *         }\n+ *     });\n+ *\n+ * }</pre>\n+ *\n+ * <p>In this example, it is the initial {@code try (HttpData content = ...} that ensures the data is released.\n+ * Calls to methods on {@link HttpData} will all work and can be called any number of times within this block.\n+ * If called after the block, or a manual call to {@link PooledHttpData#close}, these methods will fail or\n+ * corrupt data.\n+ *\n+ * <h3>Even more advanced usage</h3>\n+ *\n+ * <p>In some cases, you may want to access the {@link ByteBuf} held by this {@link PooledHttpData}. This will\n+ * generally be used with a fallback to wrapping an unpooled {@link PooledHttpData}, e.g., <pre>{@code\n+ *\n+ * final ByteBuf buf;\n+ * if (data instanceof ByteBufHolder) {\n+ *     buf = ((ByteBufHolder) data).content();\n+ * } else {\n+ *     buf = Unpooled.wrappedBuffer(data.array());\n+ * }\n+ *\n+ * }</pre>\n+ *\n+ * <p>Using a {@link ByteBuf} directly is very advanced and can open up much more complicated management of\n+ * reference count. You should only ever do this if you are very comfortable with Netty.\n+ *\n+ * <p>It is recommended to also read through <a href=\"https://netty.io/wiki/reference-counted-objects.html\">\n+ * Reference counted objects</a> for more information on pooled objects.\n+ */\n+public interface PooledHttpData extends HttpData, ByteBufHolder, SafeCloseable {\n+\n+    /**\n+     * Converts non-pooled {@link HttpData} into {@link PooledHttpData}.\n+     */\n+    static PooledHttpData of(HttpData data) {\n+        requireNonNull(data, \"obj\");\n+        if (data instanceof PooledHttpData) {\n+            return (PooledHttpData) data;\n+        }\n+\n+        return new ByteBufHttpData(Unpooled.wrappedBuffer(data.array()), data.isEndOfStream());\n+    }\n+\n+    /**\n+     * Converts the specified Netty {@link ByteBuf} into an {@link PooledHttpData}. The buffer is not copied;", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODQyMw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420568423", "bodyText": "Should we use HTTP instead of HTTP/2 because the client might use HTTP/1.1?", "author": "minwoox", "createdAt": "2020-05-06T06:24:32Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/common/PooledHttpRequest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.common;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.EventLoopCheckingFuture;\n+import com.linecorp.armeria.internal.common.HttpRequestAggregator;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * A streamed HTTP/2 {@link Request} which returns pooled buffers.", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyOTM3Ng==", "url": "https://github.com/line/armeria/pull/2448#discussion_r422029376", "bodyText": "I copied this from HttpRequest. I could update it there and here if it makes sense.", "author": "anuraaga", "createdAt": "2020-05-08T08:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0MzMxOA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r422043318", "bodyText": "Let's update both because we don't want to update again when HTTP/3 comes out. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-05-08T09:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2ODQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3MDU2Mg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420570562", "bodyText": "How about changing the order of methods parameters? execute(delegate(), ctx, req)) looks natural to me", "author": "minwoox", "createdAt": "2020-05-06T06:30:49Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/client/SimplePooledDecoratingHttpClient.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.unsafe.common.PooledHttpData;\n+import com.linecorp.armeria.unsafe.common.PooledHttpRequest;\n+import com.linecorp.armeria.unsafe.common.PooledHttpResponse;\n+\n+/**\n+ * Decorates an {@link HttpClient}, ensuring {@link HttpData} are all {@link PooledHttpData}.\n+ */\n+public abstract class SimplePooledDecoratingHttpClient extends SimpleDecoratingHttpClient\n+        implements PooledHttpClient {\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient}.\n+     */\n+    protected SimplePooledDecoratingHttpClient(HttpClient delegate) {\n+        super(PooledHttpClient.of(delegate));\n+    }\n+\n+    @Override\n+    public final HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return execute(ctx, PooledHttpRequest.of(req), delegate());\n+    }\n+\n+    @Override\n+    public PooledHttpResponse execute(ClientRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        return PooledHttpResponse.of(execute(ctx, req, delegate()));", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3MDY4Mg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r420570682", "bodyText": "ditto", "author": "minwoox", "createdAt": "2020-05-06T06:31:08Z", "path": "core/src/main/java/com/linecorp/armeria/unsafe/server/SimplePooledDecoratingHttpService.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.unsafe.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+import com.linecorp.armeria.unsafe.common.PooledHttpData;\n+import com.linecorp.armeria.unsafe.common.PooledHttpRequest;\n+import com.linecorp.armeria.unsafe.common.PooledHttpResponse;\n+\n+/**\n+ * An {@link HttpService} that decorates another {@link HttpService} publishing {@link PooledHttpData}.\n+ *\n+ * @see SimpleDecoratingHttpService\n+ */\n+public abstract class SimplePooledDecoratingHttpService extends SimpleDecoratingHttpService\n+        implements PooledHttpService {\n+\n+    private final PooledHttpService pooledDelegate;\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpService}.\n+     */\n+    protected SimplePooledDecoratingHttpService(HttpService delegate) {\n+        super(delegate);\n+        pooledDelegate = PooledHttpService.of(delegate);\n+    }\n+\n+    @Override\n+    public final HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+        return serve(ctx, PooledHttpRequest.of(req), pooledDelegate);\n+    }\n+\n+    @Override\n+    public PooledHttpResponse serve(ServiceRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        return PooledHttpResponse.of(serve(ctx, req, delegate()));", "originalCommit": "4a787f4bd228ff125b0b8fdc15ddebcbbebe801e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee91fd50b56cc65fd4ec0225f16f4a4169b047e5", "url": "https://github.com/line/armeria/commit/ee91fd50b56cc65fd4ec0225f16f4a4169b047e5", "message": "More links to the 'pooled docs'", "committedDate": "2020-05-08T08:31:11Z", "type": "commit"}, {"oid": "0e99ae736012b8fea28da9b9b24e0d56c5fca480", "url": "https://github.com/line/armeria/commit/0e99ae736012b8fea28da9b9b24e0d56c5fca480", "message": "Move stuff around", "committedDate": "2020-05-08T08:37:30Z", "type": "commit"}, {"oid": "ed8c5e3c92a6edede2804b611b2ed99080a13232", "url": "https://github.com/line/armeria/commit/ed8c5e3c92a6edede2804b611b2ed99080a13232", "message": "Cleanups", "committedDate": "2020-05-08T09:07:10Z", "type": "commit"}, {"oid": "8e1af6cab1f527680f403b896eee13581f080cb3", "url": "https://github.com/line/armeria/commit/8e1af6cab1f527680f403b896eee13581f080cb3", "message": "Header order", "committedDate": "2020-05-08T09:12:46Z", "type": "commit"}, {"oid": "748273f8f6ddaccf13f6a677c5f425e5d9b2f272", "url": "https://github.com/line/armeria/commit/748273f8f6ddaccf13f6a677c5f425e5d9b2f272", "message": "Header order", "committedDate": "2020-05-08T09:17:41Z", "type": "commit"}, {"oid": "fa3135f2591839a39671231ab922d7f781d29edd", "url": "https://github.com/line/armeria/commit/fa3135f2591839a39671231ab922d7f781d29edd", "message": "Header order", "committedDate": "2020-05-08T09:22:13Z", "type": "commit"}, {"oid": "d139c6302cfd64691fb73ce1d479bfbf5c4d4595", "url": "https://github.com/line/armeria/commit/d139c6302cfd64691fb73ce1d479bfbf5c4d4595", "message": "[WIP] Pass unpooled request to normal HttpService. Add unit tests for service classes.", "committedDate": "2020-05-10T09:16:51Z", "type": "commit"}, {"oid": "bcfd911875e7376ef764c99e87ea82bacb14b196", "url": "https://github.com/line/armeria/commit/bcfd911875e7376ef764c99e87ea82bacb14b196", "message": "Merge branch 'master' of github.com:line/armeria into pooled-web-client", "committedDate": "2020-05-23T04:28:31Z", "type": "commit"}, {"oid": "9072985c553aba3411c0ae4452aeb9231c0aedb3", "url": "https://github.com/line/armeria/commit/9072985c553aba3411c0ae4452aeb9231c0aedb3", "message": "Client unpooled", "committedDate": "2020-05-23T05:26:12Z", "type": "commit"}, {"oid": "37069c746ed4b49c0054214a67b43b2f7fb34810", "url": "https://github.com/line/armeria/commit/37069c746ed4b49c0054214a67b43b2f7fb34810", "message": "Fixes", "committedDate": "2020-05-24T06:55:27Z", "type": "commit"}, {"oid": "5216239a2c61bc9325c40cddbbbe0c95a5c1943d", "url": "https://github.com/line/armeria/commit/5216239a2c61bc9325c40cddbbbe0c95a5c1943d", "message": "Client test", "committedDate": "2020-05-24T13:53:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwODg1MA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431608850", "bodyText": "nit: How about moving this check to the constructor?", "author": "trustin", "createdAt": "2020-05-28T06:29:50Z", "path": "core/src/main/java/com/linecorp/armeria/client/unsafe/DefaultPooledHttpClient.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.unsafe;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.common.unsafe.PooledHttpRequest;\n+import com.linecorp.armeria.common.unsafe.PooledHttpResponse;\n+import com.linecorp.armeria.common.util.AbstractUnwrappable;\n+\n+final class DefaultPooledHttpClient extends AbstractUnwrappable<HttpClient> implements PooledHttpClient {\n+\n+    DefaultPooledHttpClient(HttpClient delegate) {\n+        super(delegate);\n+    }\n+\n+    @Override\n+    public PooledHttpResponse execute(ClientRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        // Always a wrapped non-pooled client, make sure it gets a normal request.\n+        assert !(delegate() instanceof PooledHttpClient);", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNDc4NA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r432814784", "bodyText": "I put it here more as documentation than anything so think it's better here. But if the comment is enough I can remove it?", "author": "anuraaga", "createdAt": "2020-05-30T06:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwODg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0OTAxNw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r433049017", "bodyText": "I don't mind. Fine with having it here.", "author": "trustin", "createdAt": "2020-06-01T05:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwODg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMzU4Mg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442003582", "bodyText": "Shouldn't we do something\nassert as(PooledHttpClient.class) == null;?", "author": "minwoox", "createdAt": "2020-06-18T06:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwODg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzMjk2Mg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442632962", "bodyText": "Don't think it matters so much - this is just a check against programming issue, the constructor is always called with something that isn't a PooledHttpClient My 20 days old comment still stands, I put it mainly as documentation ;)", "author": "anuraaga", "createdAt": "2020-06-19T05:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwODg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMTE0Mg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431611142", "bodyText": "OK to remove?", "author": "trustin", "createdAt": "2020-05-28T06:35:45Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledAggregatedHttpRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * An {@link AggregatedHttpRequest} using pooled buffers for the content. Make sure to call\n+ * {@link AutoCloseable#close()} on this response or the {@code content} to release pooled resources.\n+ */\n+public interface PooledAggregatedHttpRequest extends AggregatedHttpRequest, SafeCloseable {\n+\n+    /**\n+     * Returns a {@link PooledAggregatedHttpRequest} that wraps the {@link AggregatedHttpRequest}, ensuring all\n+     * published data is a {@link PooledHttpData}.\n+     */\n+    static PooledAggregatedHttpRequest of(AggregatedHttpRequest delegate) {\n+        requireNonNull(delegate, \"delegate\");\n+        if (delegate instanceof PooledAggregatedHttpRequest) {\n+            return (PooledAggregatedHttpRequest) delegate;\n+        }\n+        return new DefaultPooledAggregatedHttpRequest(delegate);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMTYyMg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431611622", "bodyText": "Perhaps OK to remove this?", "author": "trustin", "createdAt": "2020-05-28T06:37:00Z", "path": "core/src/main/java/com/linecorp/armeria/common/AggregatedHttpMessage.java", "diffHunk": "@@ -20,12 +20,15 @@\n \n import javax.annotation.Nullable;\n \n+import com.linecorp.armeria.common.util.UnstableApi;\n+\n /**\n  * A complete HTTP message whose content is readily available as a single {@link HttpData}. It can be an\n  * HTTP request or an HTTP response depending on what header values it contains. For example, having a\n  * {@link HttpHeaderNames#STATUS} header could mean it is an HTTP response.\n  */\n-interface AggregatedHttpMessage {\n+@UnstableApi", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNDgzNw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r432814837", "bodyText": "Yeah intended to mark that users shouldn't need to implement this but guess it doesn't hurt either", "author": "anuraaga", "createdAt": "2020-05-30T06:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMTYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMjcyMg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431612722", "bodyText": "No need to use @inheritDoc if you don't add anything to Javadoc", "author": "trustin", "createdAt": "2020-05-28T06:39:54Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledAggregatedHttpResponse.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * An {@link AggregatedHttpResponse} using pooled buffers for the content. Make sure to call\n+ * {@link AutoCloseable#close()} on this response or the {@code content} to release pooled resources.\n+ */\n+public interface PooledAggregatedHttpResponse extends AggregatedHttpResponse, SafeCloseable {\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    PooledHttpData content();\n+\n+    /**\n+     * {@inheritDoc}\n+     */", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMzIxOA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431613218", "bodyText": "This example needs an update because HttpData is not Closeable anymore.", "author": "trustin", "createdAt": "2020-05-28T06:41:11Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.client.unsafe.PooledWebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufHolder;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * An {@link HttpData} that is backed by a pooled {@link ByteBuf} for optimizing certain internal use cases. Not\n+ * for general use.\n+ *\n+ * <h3>What are pooled buffers?</h3>\n+ *\n+ * <p>The buffer backing a {@link PooledHttpData} is a pooled buffer - this means that it does not use normal\n+ * Java garbage collection, and instead uses manual memory management using a reference count, similar to\n+ * some constructs in languages like C++. Manual memory management is more fragile and not idiomatic in Java -\n+ * you should only use this class in performance-sensitive situations and after being ready to deal with these\n+ * very hard-to-debug issues.\n+ *\n+ * <p>You may interact with {@link PooledHttpData} when using objects that return pooled objects, such as\n+ * {@link PooledWebClient}. If you don't use such objects, you will never see a {@link PooledHttpData} and don't\n+ * need to read further.\n+ *\n+ * <h3>Impact of pooled buffers</h3>\n+ *\n+ * <p>Any time you receive a {@link PooledHttpData} it will have a single reference that must be released -\n+ * failure to release the reference will result in a memory leak and poor performance. You must make sure to do\n+ * this by calling {@link PooledHttpData#close()}, usually in a try-with-resources structure to avoid side\n+ * effects.\n+ *\n+ * <p>For example, <pre>{@code\n+ *\n+ * HttpResponse response = client.get(\"/\");\n+ * response.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n+ *     .thenApply(aggResp -> {\n+ *         // try-with-resources here ensures the content is released if it is a ByteBufHttpData, or otherwise\n+ *         // is a no-op if it is not.\n+ *         try (HttpData content = aggResp.content()) {", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMzUxOA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431613518", "bodyText": "toUnpooled or asUnpooled?", "author": "trustin", "createdAt": "2020-05-28T06:41:57Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpRequest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.common.util.EventLoopCheckingFuture;\n+import com.linecorp.armeria.internal.common.HttpRequestAggregator;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * A streamed HTTP/2 {@link Request} which returns pooled buffers.\n+ */\n+public interface PooledHttpRequest extends HttpRequest {\n+\n+    /**\n+     * Returns a {@link PooledHttpRequest} that wraps the {@link HttpRequest}, ensuring all published data\n+     * is a {@link PooledHttpData}.\n+     */\n+    static PooledHttpRequest of(HttpRequest delegate) {\n+        requireNonNull(delegate, \"delegate\");\n+        if (delegate instanceof PooledHttpRequest) {\n+            return (PooledHttpRequest) delegate;\n+        }\n+        return new DefaultPooledHttpRequest(delegate);\n+    }\n+\n+    /**\n+     * Aggregates this request. The returned {@link CompletableFuture} will be notified when the content and\n+     * the trailers of the response are received fully.\n+     */\n+    default CompletableFuture<PooledAggregatedHttpRequest> aggregateWithPooledObjects() {\n+        return aggregateWithPooledObjects(defaultSubscriberExecutor());\n+    }\n+\n+    /**\n+     * Aggregates this request. The returned {@link CompletableFuture} will be notified when the content and\n+     * the trailers of the request are received fully.\n+     */\n+    default CompletableFuture<PooledAggregatedHttpRequest> aggregateWithPooledObjects(ByteBufAllocator alloc) {\n+        requireNonNull(alloc);\n+        return aggregateWithPooledObjects(defaultSubscriberExecutor(), alloc);\n+    }\n+\n+    /**\n+     * Aggregates this request. The returned {@link CompletableFuture} will be notified when the content and\n+     * the trailers of the request are received fully.\n+     */\n+    default CompletableFuture<PooledAggregatedHttpRequest> aggregateWithPooledObjects(EventExecutor executor) {\n+        requireNonNull(executor);\n+        return aggregateWithPooledObjects(executor, PooledByteBufAllocator.DEFAULT);\n+    }\n+\n+    /**\n+     * Aggregates this request. The returned {@link CompletableFuture} will be notified when the content and\n+     * the trailers of the request are received fully.\n+     */\n+    default CompletableFuture<PooledAggregatedHttpRequest> aggregateWithPooledObjects(\n+            EventExecutor executor, ByteBufAllocator alloc) {\n+        final CompletableFuture<AggregatedHttpRequest> future = new EventLoopCheckingFuture<>();\n+        final HttpRequestAggregator aggregator = new HttpRequestAggregator(this, future, alloc);\n+        subscribe(aggregator, executor, SubscriptionOption.WITH_POOLED_OBJECTS);\n+        return future.thenApply(DefaultPooledAggregatedHttpRequest::new);\n+    }\n+\n+    /**\n+     * Aggregate this request without pooled objects. When operating on {@link PooledHttpRequest}, this should\n+     * be avoided.\n+     *\n+     * @deprecated Use {@link #aggregateWithPooledObjects()}.\n+     */\n+    @Override\n+    @Deprecated\n+    default CompletableFuture<AggregatedHttpRequest> aggregate() {\n+        return HttpRequest.super.aggregate();\n+    }\n+\n+    /**\n+     * Aggregate this request without pooled objects. When operating on {@link PooledHttpRequest}, this should\n+     * be avoided.\n+     *\n+     * @deprecated Use {@link #aggregateWithPooledObjects(EventExecutor)}.\n+     */\n+    @Override\n+    @Deprecated\n+    default CompletableFuture<AggregatedHttpRequest> aggregate(EventExecutor executor) {\n+        return HttpRequest.super.aggregate(executor);\n+    }\n+\n+    /**\n+     * Converts this {@link PooledHttpRequest} to an unpooled {@link HttpRequest}. Only one of this\n+     * {@link PooledHttpRequest} or the returned {@link HttpRequest} can be subscribed to, if both are attempted\n+     * to be used, it will cause an error or bad behavior.\n+     */\n+    HttpRequest toUnpooled();", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNDkxOA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r432814918", "bodyText": "We have others like toHttpResponse and I think I followed that. Not sure if either is better \ud83d\ude05", "author": "anuraaga", "createdAt": "2020-05-30T06:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMzUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNDAyNA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431614024", "bodyText": "Question: Should we add withEndOfStream(boolean) which returns this if endOfStream did not change?", "author": "trustin", "createdAt": "2020-05-28T06:43:12Z", "path": "core/src/main/java/com/linecorp/armeria/server/file/StreamingHttpFile.java", "diffHunk": "@@ -223,7 +224,7 @@ private void doRead(HttpResponseWriter res, T in, long offset, long end,\n \n                     final HttpFileBuilder builder =\n                             HttpFile.builder(array != null ? HttpData.wrap(array)\n-                                                           : new ByteBufHttpData(buf, true),\n+                                                           : PooledHttpData.wrap(buf).withEndOfStream(),", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNTE4MA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r432815180", "bodyText": "Yeah seems good", "author": "anuraaga", "createdAt": "2020-05-30T06:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNDAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNDM0Ng==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431614346", "bodyText": "nit: Should we check this in the constructor?", "author": "trustin", "createdAt": "2020-05-28T06:43:56Z", "path": "core/src/main/java/com/linecorp/armeria/server/unsafe/DefaultPooledHttpService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.unsafe;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.unsafe.PooledHttpRequest;\n+import com.linecorp.armeria.common.unsafe.PooledHttpResponse;\n+import com.linecorp.armeria.common.util.AbstractUnwrappable;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Route;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+final class DefaultPooledHttpService extends AbstractUnwrappable<HttpService> implements PooledHttpService {\n+\n+    DefaultPooledHttpService(HttpService delegate) {\n+        super(delegate);\n+    }\n+\n+    @Override\n+    public PooledHttpResponse serve(ServiceRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        // Always a wrapped non-pooled service, make sure it gets a normal request.\n+        assert !(delegate() instanceof PooledHttpService);", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNDc4MA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431614780", "bodyText": "Could use aggregate() instead of aggregateWithPooledObjects?", "author": "trustin", "createdAt": "2020-05-28T06:44:58Z", "path": "core/src/test/java/com/linecorp/armeria/internal/common/DefaultHttpRequestTest.java", "diffHunk": "@@ -53,19 +54,19 @@\n     void abortedAggregation(boolean executorSpecified, boolean withPooledObjects, Throwable abortCause) {\n         final Thread mainThread = Thread.currentThread();\n         final DefaultHttpRequest req = new DefaultHttpRequest(RequestHeaders.of(HttpMethod.GET, \"/foo\"));\n-        final CompletableFuture<AggregatedHttpRequest> future;\n+        final CompletableFuture<? extends AggregatedHttpRequest> future;\n \n         // Practically same execution, but we need to test the both case due to code duplication.\n         if (executorSpecified) {\n             if (withPooledObjects) {\n-                future = req.aggregateWithPooledObjects(\n+                future = PooledHttpRequest.of(req).aggregateWithPooledObjects(", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNTIwMg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r432815202", "bodyText": "Don't think so since this is withPooledObjects branch", "author": "anuraaga", "createdAt": "2020-05-30T06:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNDc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxNDg2MA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r431614860", "bodyText": "Ditto", "author": "trustin", "createdAt": "2020-05-28T06:45:07Z", "path": "core/src/test/java/com/linecorp/armeria/internal/common/DefaultHttpRequestTest.java", "diffHunk": "@@ -53,19 +54,19 @@\n     void abortedAggregation(boolean executorSpecified, boolean withPooledObjects, Throwable abortCause) {\n         final Thread mainThread = Thread.currentThread();\n         final DefaultHttpRequest req = new DefaultHttpRequest(RequestHeaders.of(HttpMethod.GET, \"/foo\"));\n-        final CompletableFuture<AggregatedHttpRequest> future;\n+        final CompletableFuture<? extends AggregatedHttpRequest> future;\n \n         // Practically same execution, but we need to test the both case due to code duplication.\n         if (executorSpecified) {\n             if (withPooledObjects) {\n-                future = req.aggregateWithPooledObjects(\n+                future = PooledHttpRequest.of(req).aggregateWithPooledObjects(\n                         CommonPools.workerGroup().next(), PooledByteBufAllocator.DEFAULT);\n             } else {\n                 future = req.aggregate(CommonPools.workerGroup().next());\n             }\n         } else {\n             if (withPooledObjects) {\n-                future = req.aggregateWithPooledObjects(PooledByteBufAllocator.DEFAULT);\n+                future = PooledHttpRequest.of(req).aggregateWithPooledObjects(PooledByteBufAllocator.DEFAULT);", "originalCommit": "37069c746ed4b49c0054214a67b43b2f7fb34810", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9991b46b959cc2dc4a078b3af8c18f06c3115721", "url": "https://github.com/line/armeria/commit/9991b46b959cc2dc4a078b3af8c18f06c3115721", "message": "Merge branch 'master' of github.com:line/armeria into pooled-web-client", "committedDate": "2020-05-30T06:04:42Z", "type": "commit"}, {"oid": "f7ef9615675dbc0c303837bdc3ad9e6657a6b552", "url": "https://github.com/line/armeria/commit/f7ef9615675dbc0c303837bdc3ad9e6657a6b552", "message": "Cleanups", "committedDate": "2020-05-30T06:17:42Z", "type": "commit"}, {"oid": "c95c7375ca818bb6fe190f7a1d44f01e23e57687", "url": "https://github.com/line/armeria/commit/c95c7375ca818bb6fe190f7a1d44f01e23e57687", "message": "Fix", "committedDate": "2020-05-30T11:11:16Z", "type": "commit"}, {"oid": "e43356ed4a5f9dc69edfb8da56c500bf2144c89d", "url": "https://github.com/line/armeria/commit/e43356ed4a5f9dc69edfb8da56c500bf2144c89d", "message": "subscribeWithPooledObjects and split up internal subscription options", "committedDate": "2020-06-06T07:57:38Z", "type": "commit"}, {"oid": "f80f2f077f4dfb51edf2ddb917aa054b5d98bb55", "url": "https://github.com/line/armeria/commit/f80f2f077f4dfb51edf2ddb917aa054b5d98bb55", "message": "Reenable reactor", "committedDate": "2020-06-06T08:00:10Z", "type": "commit"}, {"oid": "99eded6caf2a97a98a27ec97ed2fab7a5a140113", "url": "https://github.com/line/armeria/commit/99eded6caf2a97a98a27ec97ed2fab7a5a140113", "message": "Merge branch 'master' of github.com:line/armeria into pooled-web-client", "committedDate": "2020-06-07T03:01:32Z", "type": "commit"}, {"oid": "e1285a9a97896dfaf25a2104cd2e54a8bc7c1446", "url": "https://github.com/line/armeria/commit/e1285a9a97896dfaf25a2104cd2e54a8bc7c1446", "message": "More tests", "committedDate": "2020-06-07T05:29:27Z", "type": "commit"}, {"oid": "780644df80fea41f113f733540f0d35200ea55dd", "url": "https://github.com/line/armeria/commit/780644df80fea41f113f733540f0d35200ea55dd", "message": "Clenaups", "committedDate": "2020-06-07T06:39:14Z", "type": "commit"}, {"oid": "97746c36dcaf474be33ea44d358f50944c80b17c", "url": "https://github.com/line/armeria/commit/97746c36dcaf474be33ea44d358f50944c80b17c", "message": "Merge", "committedDate": "2020-06-07T08:38:23Z", "type": "commit"}, {"oid": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "url": "https://github.com/line/armeria/commit/2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "message": "Fixes", "committedDate": "2020-06-08T01:12:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNDg5NQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r436704895", "bodyText": "This is not normal behavior, however a IllegalReferenceCountException could be raised by:\nfinal ByteBuf byteBuf = Unpooled.wrappedBuffer(\"hello\".getBytes());\nfinal PooledHttpData pooledHttpData1 = PooledHttpData.wrap(byteBuf);\npooledHttpData1.close();\nfinal PooledHttpData polledHttpData2 = pooledHttpData1.withEndOfStream(true);\n// io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1\npolledHttpData2.close();\nSince this method does not copy the ByteBufHttpData.closed.", "author": "ikhoon", "createdAt": "2020-06-08T13:34:32Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/ByteBufHttpData.java", "diffHunk": "@@ -169,11 +181,22 @@ public String toString() {\n \n     @Override\n     public InputStream toInputStream() {\n-        return new ByteBufInputStream(buf.retainedDuplicate(), true);\n+        return new ByteBufInputStream(buf.duplicate(), false);\n     }\n \n     @Override\n-    public ByteBufHttpData withEndOfStream() {\n-        return new ByteBufHttpData(buf, true);\n+    public ByteBufHttpData withEndOfStream(boolean endOfStream) {\n+        if (endOfStream == this.endOfStream) {\n+            return this;\n+        }\n+        return new ByteBufHttpData(buf, endOfStream);\n+    }", "originalCommit": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NDU0MQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r437174541", "bodyText": "How about adding some Javadoc about this (i.e. refCnt not increased)?", "author": "trustin", "createdAt": "2020-06-09T06:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNDg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxODYxMg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r439718612", "bodyText": "Yup good idea", "author": "anuraaga", "createdAt": "2020-06-13T07:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNDg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Mjc3Mw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r437172773", "bodyText": "This opens two extension points, which can be confusing. How about keeping only the first one and letting a user wrap the response?", "author": "trustin", "createdAt": "2020-06-09T06:45:49Z", "path": "core/src/main/java/com/linecorp/armeria/client/unsafe/SimplePooledDecoratingHttpClient.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.unsafe;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.common.unsafe.PooledHttpRequest;\n+import com.linecorp.armeria.common.unsafe.PooledHttpResponse;\n+\n+/**\n+ * Decorates an {@link HttpClient}, ensuring {@link HttpData} are all {@link PooledHttpData}.\n+ */\n+public abstract class SimplePooledDecoratingHttpClient extends SimpleDecoratingHttpClient\n+        implements PooledHttpClient {\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient}.\n+     */\n+    protected SimplePooledDecoratingHttpClient(HttpClient delegate) {\n+        super(PooledHttpClient.of(delegate));\n+    }\n+\n+    @Override\n+    public final HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return execute(delegate(), ctx, PooledHttpRequest.of(req));\n+    }\n+\n+    @Override\n+    public PooledHttpResponse execute(ClientRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        return PooledHttpResponse.of(execute(delegate(), ctx, req));\n+    }\n+\n+    /**\n+     * Execute the {@code req} with the given {@code ctx}.\n+     *\n+     * @see SimpleDecoratingHttpClient#execute(ClientRequestContext, HttpRequest)\n+     */\n+    protected abstract HttpResponse execute(\n+            PooledHttpClient client, ClientRequestContext ctx, PooledHttpRequest req)\n+            throws Exception;", "originalCommit": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxODM2MQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r439718361", "bodyText": "Ah I think I meant to make the other one final too. Goal of this method was to remove some boilerplate in user code\n\nPooledHttpResponse.of(\n(PooledHttpClient) delegate()\n\nIf the other is final is it ok?", "author": "anuraaga", "createdAt": "2020-06-13T07:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Mjc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxOTIzMw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r439719233", "bodyText": "Ah speaking of this, I had noticed the same problem in AbstractHttpService while working on this but forgot to fix. Added a commit that makes serve final in it. Think it makes sense (I think it had some use way back in the day before HttpService interface but not anymore)", "author": "anuraaga", "createdAt": "2020-06-13T07:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Mjc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMzUyMQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r440803521", "bodyText": "Good point. Let me add the breaking change label, then.", "author": "trustin", "createdAt": "2020-06-16T12:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Mjc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3MzI3OA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r437173278", "bodyText": "Thanks!", "author": "trustin", "createdAt": "2020-06-09T06:47:08Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java", "diffHunk": "@@ -34,14 +34,14 @@\n  * <h3 id=\"reference-counted\">Life cycle of reference-counted objects</h3>\n  *\n  * <p>When the following methods are given with a {@link ReferenceCounted} object, such as {@link ByteBuf} and\n- * {@link ByteBufHttpData}, or the {@link Supplier} that provides such an object:\n+ * {@link PooledHttpData}, or the {@link Supplier} that provides such an object:\n  *\n  * <ul>\n  *   <li>{@link #tryWrite(Object)}</li>\n  *   <li>{@link #tryWrite(Supplier)}</li>\n  *   <li>{@link #write(Object)}</li>\n  *   <li>{@link #write(Supplier)}</li>\n- *   <li>{@link #close(Object)}</li>\n+ *   <li>{@link #close(Throwable)}</li>", "originalCommit": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Mzk2OQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r437173969", "bodyText": "How about following what we did for ClientOption ?", "author": "trustin", "createdAt": "2020-06-09T06:48:43Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/SubscriptionOption.java", "diffHunk": "@@ -19,27 +19,22 @@\n import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n \n-import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.ByteBufHolder;\n+import com.linecorp.armeria.internal.stream.InternalSubscriptionOption;\n+\n import io.netty.util.concurrent.EventExecutor;\n \n /**\n- * Options used when subscribing to a {@link StreamMessage}.\n+ * Options used when subscribing to a {@link StreamMessage}. This class is sealed to Armeria and can only be\n+ * implemented here.\n  *\n  * @see StreamMessage#subscribe(Subscriber, SubscriptionOption...)\n  * @see StreamMessage#subscribe(Subscriber, EventExecutor, SubscriptionOption...)\n  */\n-public enum SubscriptionOption {\n-\n-    /**\n-     * To receive the pooled {@link ByteBuf} and {@link ByteBufHolder} as is, without making a copy.\n-     * If you don't know what this means, do not specify this when you subscribe the {@link StreamMessage}.\n-     */\n-    WITH_POOLED_OBJECTS,\n+public interface SubscriptionOption {", "originalCommit": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxODU1Mg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r439718552", "bodyText": "Since the original options were effectively booleans (we only compare equality with an enum) I figured it's ok to use this pattern which replicates it. AbstractOption has a lot of complexity because it supports arbitrary types, but I don't think we need it here, it would just make the code in general more verbose / slower.", "author": "anuraaga", "createdAt": "2020-06-13T07:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Mzk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMTM5Nw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r440801397", "bodyText": "Ah, yeah. Forgot about the value part. \ud83d\ude05", "author": "trustin", "createdAt": "2020-06-16T12:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Mzk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Njk1NA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r437176954", "bodyText": "Shouldn't this be subscribeWithPooledObjects?", "author": "trustin", "createdAt": "2020-06-09T06:55:32Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpStreamMessage.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static com.linecorp.armeria.common.unsafe.UnsafeStreamUtil.withPooledObjects;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.HttpObject;\n+import com.linecorp.armeria.common.stream.AbortedStreamException;\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.internal.stream.InternalSubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * A {@link StreamMessage} of {@link HttpObject} which exposes unsafe APIs for subscribing to pooled objects\n+ * from the stream.\n+ */\n+public interface PooledHttpStreamMessage extends StreamMessage<HttpObject> {\n+\n+    /**\n+     * Requests to start streaming data to the specified {@link Subscriber}. If there is a problem subscribing,\n+     * {@link Subscriber#onError(Throwable)} will be invoked with one of the following exceptions:\n+     * <ul>\n+     *   <li>{@link IllegalStateException} if other {@link Subscriber} subscribed to this stream already.</li>\n+     *   <li>{@link AbortedStreamException} if this stream has been {@linkplain #abort() aborted}.</li>\n+     *   <li>{@link CancelledSubscriptionException} if this stream has been\n+     *       {@linkplain Subscription#cancel() cancelled} and {@link SubscriptionOption#NOTIFY_CANCELLATION} is\n+     *       specified when subscribed.</li>\n+     *   <li>Other exceptions that occurred due to an error while retrieving the elements.</li>\n+     * </ul>\n+     */\n+    default void subscribeWithPooledObjects(Subscriber<? super HttpObject> subscriber) {\n+        subscribeWithPooledObjects(subscriber, defaultSubscriberExecutor());\n+    }\n+\n+    /**\n+     * Requests to start streaming data to the specified {@link Subscriber}. If there is a problem subscribing,\n+     * {@link Subscriber#onError(Throwable)} will be invoked with one of the following exceptions:\n+     * <ul>\n+     *   <li>{@link IllegalStateException} if other {@link Subscriber} subscribed to this stream already.</li>\n+     *   <li>{@link AbortedStreamException} if this stream has been {@linkplain #abort() aborted}.</li>\n+     *   <li>{@link CancelledSubscriptionException} if this stream has been\n+     *       {@linkplain Subscription#cancel() cancelled} and {@link SubscriptionOption#NOTIFY_CANCELLATION} is\n+     *       specified when subscribed.</li>\n+     *   <li>Other exceptions that occurred due to an error while retrieving the elements.</li>\n+     * </ul>\n+     *\n+     * @param options {@link SubscriptionOption}s to subscribe with\n+     */\n+    default void subscribeWithPooledObjects(\n+            Subscriber<? super HttpObject> subscriber, SubscriptionOption... options) {\n+        subscribeWithPooledObjects(subscriber, defaultSubscriberExecutor(), options);\n+    }\n+\n+    /**\n+     * Requests to start streaming data to the specified {@link Subscriber}. If there is a problem subscribing,\n+     * {@link Subscriber#onError(Throwable)} will be invoked with one of the following exceptions:\n+     * <ul>\n+     *   <li>{@link IllegalStateException} if other {@link Subscriber} subscribed to this stream already.</li>\n+     *   <li>{@link AbortedStreamException} if this stream has been {@linkplain #abort() aborted}.</li>\n+     *   <li>{@link CancelledSubscriptionException} if this stream has been\n+     *       {@linkplain Subscription#cancel() cancelled} and {@link SubscriptionOption#NOTIFY_CANCELLATION} is\n+     *       specified when subscribed.</li>\n+     *   <li>Other exceptions that occurred due to an error while retrieving the elements.</li>\n+     * </ul>\n+     *\n+     * @param executor the executor to subscribe\n+     */\n+    default void subscribeWithPooledObjects(Subscriber<? super HttpObject> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, InternalSubscriptionOption.WITH_POOLED_OBJECTS);\n+    }\n+\n+    /**\n+     * Requests to start streaming data to the specified {@link Subscriber}. If there is a problem subscribing,\n+     * {@link Subscriber#onError(Throwable)} will be invoked with one of the following exceptions:\n+     * <ul>\n+     *   <li>{@link IllegalStateException} if other {@link Subscriber} subscribed to this stream already.</li>\n+     *   <li>{@link AbortedStreamException} if this stream has been {@linkplain #abort() aborted}.</li>\n+     *   <li>{@link CancelledSubscriptionException} if this stream has been\n+     *       {@linkplain Subscription#cancel() cancelled} and {@link SubscriptionOption#NOTIFY_CANCELLATION} is\n+     *       specified when subscribed.</li>\n+     *   <li>Other exceptions that occurred due to an error while retrieving the elements.</li>\n+     * </ul>\n+     *\n+     * @param executor the executor to subscribe\n+     * @param options {@link SubscriptionOption}s to subscribe with\n+     */\n+    default void subscribeWithPooledObjects(\n+            Subscriber<? super HttpObject> subscriber, EventExecutor executor, SubscriptionOption... options) {\n+        subscribe(subscriber, executor, withPooledObjects(options));\n+    }\n+\n+    /**\n+     * Requests to start streaming data to the specified {@link Subscriber} without pooled objects. When\n+     * operating on {@link PooledHttpStreamMessage} this should be avoided.\n+     *\n+     * @deprecated Use {@link #subscribeWithPooledObjects(Subscriber)}.\n+     */\n+    @Override\n+    @Deprecated\n+    default void subscribe(Subscriber<? super HttpObject> subscriber) {\n+        StreamMessage.super.subscribe(subscriber);\n+    }\n+\n+    /**\n+     * Requests to start streaming data to the specified {@link Subscriber} without pooled objects. When\n+     * operating on {@link PooledHttpStreamMessage} this should be avoided.\n+     *\n+     * @deprecated Use {@link #subscribe(Subscriber, SubscriptionOption...)}.", "originalCommit": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxODY0NA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r439718644", "bodyText": "Thanks!", "author": "anuraaga", "createdAt": "2020-06-13T07:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3Njk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3OTMzNg==", "url": "https://github.com/line/armeria/pull/2448#discussion_r437179336", "bodyText": "Ditto - two extension points that may be confusing", "author": "trustin", "createdAt": "2020-06-09T07:00:39Z", "path": "core/src/main/java/com/linecorp/armeria/server/unsafe/SimplePooledDecoratingHttpService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.unsafe;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.common.unsafe.PooledHttpRequest;\n+import com.linecorp.armeria.common.unsafe.PooledHttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * An {@link HttpService} that decorates another {@link HttpService} publishing {@link PooledHttpData}.\n+ *\n+ * @see SimpleDecoratingHttpService\n+ * @see PooledHttpData\n+ */\n+public abstract class SimplePooledDecoratingHttpService extends SimpleDecoratingHttpService\n+        implements PooledHttpService {\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpService}.\n+     */\n+    protected SimplePooledDecoratingHttpService(HttpService delegate) {\n+        super(PooledHttpService.of(delegate));\n+    }\n+\n+    @Override\n+    public final HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+        return serve(ctx, PooledHttpRequest.of(req));\n+    }\n+\n+    @Override\n+    public PooledHttpResponse serve(ServiceRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        return PooledHttpResponse.of(serve(delegate(), ctx, req));\n+    }\n+\n+    /**\n+     * Execute the {@code req} with the given {@code ctx}.\n+     *\n+     * @see SimpleDecoratingHttpService#serve(ServiceRequestContext, HttpRequest)\n+     */\n+    protected abstract HttpResponse serve(\n+            PooledHttpService delegate, ServiceRequestContext ctx, PooledHttpRequest req)\n+            throws Exception;", "originalCommit": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NjUxNQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r437186515", "bodyText": "This looks funny, just sayin' \ud83d\ude06", "author": "trustin", "createdAt": "2020-06-09T07:15:46Z", "path": "thrift/src/main/java/com/linecorp/armeria/internal/client/thrift/THttpClientDelegate.java", "diffHunk": "@@ -139,21 +141,24 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc\n                                   .authority(endpoint != null ? endpoint.authority() : \"UNKNOWN\")\n                                   .contentType(mediaType)\n                                   .build(),\n-                    new ByteBufHttpData(buf, true));\n+                    PooledHttpData.wrap(buf).withEndOfStream());\n \n             ctx.updateRequest(httpReq);\n             ctx.logBuilder().deferResponseContent();\n \n-            final CompletableFuture<AggregatedHttpResponse> future =\n-                    delegate().execute(ctx, httpReq).aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc());\n+            assert delegate() instanceof PooledHttpClient;\n+            final PooledHttpClient client = delegate();\n+            final CompletableFuture<PooledAggregatedHttpResponse> future =\n+                    client.execute(ctx, PooledHttpRequest.of(httpReq))\n+                          .aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc());\n \n             future.handle((res, cause) -> {\n                 if (cause != null) {\n                     handlePreDecodeException(ctx, reply, func, Exceptions.peel(cause));\n                     return null;\n                 }\n \n-                try {\n+                try (SafeCloseable unused = res) {", "originalCommit": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxODgzMw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r439718833", "bodyText": "Does give some credit to go's defer statement pattern :)", "author": "anuraaga", "createdAt": "2020-06-13T07:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NjUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NzczMQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r437187731", "bodyText": "This makes me wonder which is better - req.toPooled() vs. PooledHttpRequest.of(req). Should we make our users mention the type explicitly just because it's an advanced API? \ud83e\udd14", "author": "trustin", "createdAt": "2020-06-09T07:18:12Z", "path": "thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java", "diffHunk": "@@ -352,20 +353,20 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc\n         final HttpResponse res = HttpResponse.from(responseFuture);\n         ctx.logBuilder().serializationFormat(serializationFormat);\n         ctx.logBuilder().deferRequestContent();\n-        req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc()).handle((aReq, cause) -> {\n-            if (cause != null) {\n-                final HttpResponse errorRes;\n-                if (ctx.config().verboseResponses()) {\n-                    errorRes = HttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR,\n-                                               MediaType.PLAIN_TEXT_UTF_8,\n-                                               Exceptions.traceText(cause));\n-                } else {\n-                    errorRes = HttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR);\n-                }\n-                responseFuture.complete(errorRes);\n-                return null;\n-            }\n-\n+        PooledHttpRequest.of(req).aggregateWithPooledObjects(", "originalCommit": "2619fd2799e0bfa44d4d85023573ee9aac87c4e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxODkwOA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r439718908", "bodyText": "Yeah thought about this but lean towards PooledHttpRequest.of - a bit more verbose, but it's the only way to keep the concept of unsafe completely out of the standard packages. I think this is valuable.", "author": "anuraaga", "createdAt": "2020-06-13T07:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NzczMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMDg2Mw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r440800863", "bodyText": "I see. No problem.", "author": "trustin", "createdAt": "2020-06-16T12:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4NzczMQ=="}], "type": "inlineReview"}, {"oid": "4232c3c9798ff552275151d155b0897cfdd61c53", "url": "https://github.com/line/armeria/commit/4232c3c9798ff552275151d155b0897cfdd61c53", "message": "Cleanups", "committedDate": "2020-06-13T07:51:19Z", "type": "commit"}, {"oid": "6d967f8b0b21cc6226f9405474f7518d5794e6d4", "url": "https://github.com/line/armeria/commit/6d967f8b0b21cc6226f9405474f7518d5794e6d4", "message": "Merge branch 'pooled-web-client' of github.com:anuraaga/armeria into pooled-web-client", "committedDate": "2020-06-13T07:51:32Z", "type": "commit"}, {"oid": "52eb8c0ee51fa1e39525201d44bac6b61d770eed", "url": "https://github.com/line/armeria/commit/52eb8c0ee51fa1e39525201d44bac6b61d770eed", "message": "Only one extension point in HttpService too", "committedDate": "2020-06-13T07:57:10Z", "type": "forcePushed"}, {"oid": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "url": "https://github.com/line/armeria/commit/b68f514f6b46fcc2b3a4e6dffd082130687253aa", "message": "Only one extension point in HttpService too", "committedDate": "2020-06-13T08:00:05Z", "type": "commit"}, {"oid": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "url": "https://github.com/line/armeria/commit/b68f514f6b46fcc2b3a4e6dffd082130687253aa", "message": "Only one extension point in HttpService too", "committedDate": "2020-06-13T08:00:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNDQ0MQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r441314441", "bodyText": "Could you explain this change? retainedDuplicate() generates less garbage.", "author": "trustin", "createdAt": "2020-06-17T06:41:53Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/ByteBufHttpData.java", "diffHunk": "@@ -169,11 +181,22 @@ public String toString() {\n \n     @Override\n     public InputStream toInputStream() {\n-        return new ByteBufInputStream(buf.retainedDuplicate(), true);\n+        return new ByteBufInputStream(buf.duplicate(), false);", "originalCommit": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNjEwNA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r441316104", "bodyText": "I think we discussed this a long time ago, and ended up with it in #1938 (comment)\nWith HttpData closeable, it's simple for a user to reason about a reference needing to be contained in a single block and we're not working about InputStream moving out of the block, in other words, we don't want to create a new reference here that the user will have to close independenty of the HttpData.\nI don't think there's any relation to garbage, it's just about whether a user can transfer the InputStream to a different scope and close it manually.", "author": "anuraaga", "createdAt": "2020-06-17T06:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNDQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMTgwNQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r441321805", "bodyText": "Ah, OK. That's fine then. Thanks for elaboration. \ud83d\ude47", "author": "trustin", "createdAt": "2020-06-17T06:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNDQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwOTA5Ng==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442009096", "bodyText": "question: Shoudln't it better to make this return PooledHttpResponse?", "author": "minwoox", "createdAt": "2020-06-18T07:00:46Z", "path": "core/src/main/java/com/linecorp/armeria/client/unsafe/SimplePooledDecoratingHttpClient.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.unsafe;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.common.unsafe.PooledHttpRequest;\n+import com.linecorp.armeria.common.unsafe.PooledHttpResponse;\n+\n+/**\n+ * Decorates an {@link HttpClient}, ensuring {@link HttpData} are all {@link PooledHttpData}.\n+ */\n+public abstract class SimplePooledDecoratingHttpClient extends SimpleDecoratingHttpClient\n+        implements PooledHttpClient {\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient}.\n+     */\n+    protected SimplePooledDecoratingHttpClient(HttpClient delegate) {\n+        super(PooledHttpClient.of(delegate));\n+    }\n+\n+    @Override\n+    public final HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return execute(delegate(), ctx, PooledHttpRequest.of(req));\n+    }\n+\n+    @Override\n+    public final PooledHttpResponse execute(ClientRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        return PooledHttpResponse.of(execute(delegate(), ctx, req));\n+    }\n+\n+    /**\n+     * Execute the {@code req} with the given {@code ctx}.\n+     *\n+     * @see SimpleDecoratingHttpClient#execute(ClientRequestContext, HttpRequest)\n+     */\n+    protected abstract HttpResponse execute(", "originalCommit": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzMzM1Mw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442633353", "bodyText": "PooledHttpResponse is mainly a way to unlock the unsafe API but the semantics work the same as HttpResponse otherwise. I think it's restrictive to return PooledHttpResponse here without much benefit (if a user returns PooledHttpResponse there will be a no-op instanceof check", "author": "anuraaga", "createdAt": "2020-06-19T05:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwOTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY1NDMyNQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442654325", "bodyText": "Thanks for the explanation. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-06-19T06:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwOTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNzkxNw==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442017917", "bodyText": "nit: #close} -> #close()}", "author": "minwoox", "createdAt": "2020-06-18T07:19:30Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpData.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.client.unsafe.PooledWebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufHolder;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * An {@link HttpData} that is backed by a pooled {@link ByteBuf} for optimizing certain internal use cases. Not\n+ * for general use.\n+ *\n+ * <h3>What are pooled buffers?</h3>\n+ *\n+ * <p>The buffer backing a {@link PooledHttpData} is a pooled buffer - this means that it does not use normal\n+ * Java garbage collection, and instead uses manual memory management using a reference count, similar to\n+ * some constructs in languages like C++. Manual memory management is more fragile and not idiomatic in Java -\n+ * you should only use this class in performance-sensitive situations and after being ready to deal with these\n+ * very hard-to-debug issues.\n+ *\n+ * <p>You may interact with {@link PooledHttpData} when using objects that return pooled objects, such as\n+ * {@link PooledWebClient}. If you don't use such objects, you will never see a {@link PooledHttpData} and don't\n+ * need to read further.\n+ *\n+ * <h3>Impact of pooled buffers</h3>\n+ *\n+ * <p>Any time you receive a {@link PooledHttpData} it will have a single reference that must be released -\n+ * failure to release the reference will result in a memory leak and poor performance. You must make sure to do\n+ * this by calling {@link PooledHttpData#close()}, usually in a try-with-resources structure to avoid side\n+ * effects.\n+ *\n+ * <p>For example, <pre>{@code\n+ *\n+ * HttpResponse response = client.get(\"/\");\n+ * response.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n+ *     .thenApply(aggResp -> {\n+ *         // try-with-resources here ensures the content is released if it is a ByteBufHttpData, or otherwise\n+ *         // is a no-op if it is not.\n+ *         try (PooledHttpData content = aggResp.content()) {\n+ *             if (!aggResp.status().equals(HttpStatus.OK)) {\n+ *                 throw new IllegalStateException(\"Bad response\");\n+ *             }\n+ *             try {\n+ *                 return OBJECT_MAPPER.readValue(content.toInputStream(), Foo.class);\n+ *             } catch (IOException e) {\n+ *                 throw new IllegalArgumentException(\"Bad JSON: \" + content.toStringUtf8());\n+ *             }\n+ *         }\n+ *     });\n+ *\n+ * }</pre>\n+ *\n+ * <p>In this example, it is the initial {@code try (HttpData content = ...} that ensures the data is released.\n+ * Calls to methods on {@link HttpData} will all work and can be called any number of times within this block.\n+ * If called after the block, or a manual call to {@link PooledHttpData#close}, these methods will fail or", "originalCommit": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxODA4MA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442018080", "bodyText": "nit: HttpData -> PooledHttpData", "author": "minwoox", "createdAt": "2020-06-18T07:19:49Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpData.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.client.unsafe.PooledWebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufHolder;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * An {@link HttpData} that is backed by a pooled {@link ByteBuf} for optimizing certain internal use cases. Not\n+ * for general use.\n+ *\n+ * <h3>What are pooled buffers?</h3>\n+ *\n+ * <p>The buffer backing a {@link PooledHttpData} is a pooled buffer - this means that it does not use normal\n+ * Java garbage collection, and instead uses manual memory management using a reference count, similar to\n+ * some constructs in languages like C++. Manual memory management is more fragile and not idiomatic in Java -\n+ * you should only use this class in performance-sensitive situations and after being ready to deal with these\n+ * very hard-to-debug issues.\n+ *\n+ * <p>You may interact with {@link PooledHttpData} when using objects that return pooled objects, such as\n+ * {@link PooledWebClient}. If you don't use such objects, you will never see a {@link PooledHttpData} and don't\n+ * need to read further.\n+ *\n+ * <h3>Impact of pooled buffers</h3>\n+ *\n+ * <p>Any time you receive a {@link PooledHttpData} it will have a single reference that must be released -\n+ * failure to release the reference will result in a memory leak and poor performance. You must make sure to do\n+ * this by calling {@link PooledHttpData#close()}, usually in a try-with-resources structure to avoid side\n+ * effects.\n+ *\n+ * <p>For example, <pre>{@code\n+ *\n+ * HttpResponse response = client.get(\"/\");\n+ * response.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())\n+ *     .thenApply(aggResp -> {\n+ *         // try-with-resources here ensures the content is released if it is a ByteBufHttpData, or otherwise\n+ *         // is a no-op if it is not.\n+ *         try (PooledHttpData content = aggResp.content()) {\n+ *             if (!aggResp.status().equals(HttpStatus.OK)) {\n+ *                 throw new IllegalStateException(\"Bad response\");\n+ *             }\n+ *             try {\n+ *                 return OBJECT_MAPPER.readValue(content.toInputStream(), Foo.class);\n+ *             } catch (IOException e) {\n+ *                 throw new IllegalArgumentException(\"Bad JSON: \" + content.toStringUtf8());\n+ *             }\n+ *         }\n+ *     });\n+ *\n+ * }</pre>\n+ *\n+ * <p>In this example, it is the initial {@code try (HttpData content = ...} that ensures the data is released.", "originalCommit": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMTIxNQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442021215", "bodyText": "nit: on this request", "author": "minwoox", "createdAt": "2020-06-18T07:25:56Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledAggregatedHttpRequest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * An {@link AggregatedHttpRequest} using pooled buffers for the content. Make sure to call\n+ * {@link AutoCloseable#close()} on this response or the {@code content} to release pooled resources.", "originalCommit": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzU1OA==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442023558", "bodyText": "nit: response -> request", "author": "minwoox", "createdAt": "2020-06-18T07:30:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpRequest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.util.EventLoopCheckingFuture;\n+import com.linecorp.armeria.internal.common.HttpRequestAggregator;\n+\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * A streamed HTTP/2 {@link Request} which returns pooled buffers.\n+ */\n+public interface PooledHttpRequest extends HttpRequest, PooledHttpStreamMessage {\n+\n+    /**\n+     * Returns a {@link PooledHttpRequest} that wraps the {@link HttpRequest}, ensuring all published data\n+     * is a {@link PooledHttpData}.\n+     */\n+    static PooledHttpRequest of(HttpRequest delegate) {\n+        requireNonNull(delegate, \"delegate\");\n+        if (delegate instanceof PooledHttpRequest) {\n+            return (PooledHttpRequest) delegate;\n+        }\n+        return new DefaultPooledHttpRequest(delegate);\n+    }\n+\n+    /**\n+     * Aggregates this request. The returned {@link CompletableFuture} will be notified when the content and\n+     * the trailers of the response are received fully.", "originalCommit": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0NTQ3MQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442045471", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Execute the {@code req} with the given {@code ctx}.\n          \n          \n            \n                 * Executes the {@code req} with the given {@code ctx}.", "author": "ikhoon", "createdAt": "2020-06-18T08:09:35Z", "path": "core/src/main/java/com/linecorp/armeria/client/unsafe/SimplePooledDecoratingHttpClient.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.unsafe;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.common.unsafe.PooledHttpRequest;\n+import com.linecorp.armeria.common.unsafe.PooledHttpResponse;\n+\n+/**\n+ * Decorates an {@link HttpClient}, ensuring {@link HttpData} are all {@link PooledHttpData}.\n+ */\n+public abstract class SimplePooledDecoratingHttpClient extends SimpleDecoratingHttpClient\n+        implements PooledHttpClient {\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpClient}.\n+     */\n+    protected SimplePooledDecoratingHttpClient(HttpClient delegate) {\n+        super(PooledHttpClient.of(delegate));\n+    }\n+\n+    @Override\n+    public final HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+        return execute(delegate(), ctx, PooledHttpRequest.of(req));\n+    }\n+\n+    @Override\n+    public final PooledHttpResponse execute(ClientRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        return PooledHttpResponse.of(execute(delegate(), ctx, req));\n+    }\n+\n+    /**\n+     * Execute the {@code req} with the given {@code ctx}.", "originalCommit": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwNTYyOQ==", "url": "https://github.com/line/armeria/pull/2448#discussion_r442105629", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Execute the {@code req} with the given {@code ctx}.\n          \n          \n            \n                 * Executes the {@code req} with the given {@code ctx}.", "author": "ikhoon", "createdAt": "2020-06-18T09:48:37Z", "path": "core/src/main/java/com/linecorp/armeria/server/unsafe/SimplePooledDecoratingHttpService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.unsafe;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.common.unsafe.PooledHttpRequest;\n+import com.linecorp.armeria.common.unsafe.PooledHttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+\n+/**\n+ * An {@link HttpService} that decorates another {@link HttpService} publishing {@link PooledHttpData}.\n+ *\n+ * @see SimpleDecoratingHttpService\n+ * @see PooledHttpData\n+ */\n+public abstract class SimplePooledDecoratingHttpService extends SimpleDecoratingHttpService\n+        implements PooledHttpService {\n+\n+    /**\n+     * Creates a new instance that decorates the specified {@link HttpService}.\n+     */\n+    protected SimplePooledDecoratingHttpService(HttpService delegate) {\n+        super(PooledHttpService.of(delegate));\n+    }\n+\n+    @Override\n+    public final HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+        return serve(ctx, PooledHttpRequest.of(req));\n+    }\n+\n+    @Override\n+    public final PooledHttpResponse serve(ServiceRequestContext ctx, PooledHttpRequest req) throws Exception {\n+        return PooledHttpResponse.of(serve(delegate(), ctx, req));\n+    }\n+\n+    /**\n+     * Execute the {@code req} with the given {@code ctx}.", "originalCommit": "b68f514f6b46fcc2b3a4e6dffd082130687253aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "97276d47a70c998833a0d0cbec85a1fd2fd73b5c", "url": "https://github.com/line/armeria/commit/97276d47a70c998833a0d0cbec85a1fd2fd73b5c", "message": "Cleanups", "committedDate": "2020-06-19T05:15:32Z", "type": "commit"}, {"oid": "06b92f07eca9555ce0007c40f7a6a9a23dbfc9f1", "url": "https://github.com/line/armeria/commit/06b92f07eca9555ce0007c40f7a6a9a23dbfc9f1", "message": "Merge branch 'master' of github.com:line/armeria into pooled-web-client", "committedDate": "2020-06-19T07:26:57Z", "type": "commit"}, {"oid": "2da74a31b95f4fcc6b914617b561a7d6e566881e", "url": "https://github.com/line/armeria/commit/2da74a31b95f4fcc6b914617b561a7d6e566881e", "message": "Allow repeating eventExecutorAndAlloc test", "committedDate": "2020-06-19T07:51:10Z", "type": "commit"}, {"oid": "b7f3ffc212494a977561606e95a15b94856a587d", "url": "https://github.com/line/armeria/commit/b7f3ffc212494a977561606e95a15b94856a587d", "message": "Merge branch 'master' into pooled-web-client", "committedDate": "2020-06-19T12:44:35Z", "type": "commit"}, {"oid": "235c777a0402f3ebe7321a147849775cd6ca9917", "url": "https://github.com/line/armeria/commit/235c777a0402f3ebe7321a147849775cd6ca9917", "message": "Fix compilation errors and deprecation warnings", "committedDate": "2020-06-19T12:58:19Z", "type": "commit"}, {"oid": "4ef5bc1290b9f6e51c2cbb8f1519a89511d98eaa", "url": "https://github.com/line/armeria/commit/4ef5bc1290b9f6e51c2cbb8f1519a89511d98eaa", "message": "Do not check the event loop thread in the test\n\n.. because the future might be complete already and thus the callback\nmight be invoked from the main thread rather than an event loop thread.", "committedDate": "2020-06-19T13:35:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM5MzU0Ng==", "url": "https://github.com/line/armeria/pull/2448#discussion_r447393546", "bodyText": "this line drifted I think", "author": "codefromthecrypt", "createdAt": "2020-06-30T03:56:03Z", "path": "core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpData.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.unsafe;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.linecorp.armeria.client.unsafe.PooledWebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufHolder;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * An {@link HttpData} that is backed by a pooled {@link ByteBuf} for optimizing certain internal use cases. Not\n+ * for general use.\n+ *\n+ * <h3>What are pooled buffers?</h3>\n+ *\n+ * <p>The buffer backing a {@link PooledHttpData} is a pooled buffer - this means that it does not use normal\n+ * Java garbage collection, and instead uses manual memory management using a reference count, similar to\n+ * some constructs in languages like C++. Manual memory management is more fragile and not idiomatic in Java -\n+ * you should only use this class in performance-sensitive situations and after being ready to deal with these\n+ * very hard-to-debug issues.\n+ *\n+ * <p>You may interact with {@link PooledHttpData} when using objects that return pooled objects, such as\n+ * {@link PooledWebClient}. If you don't use such objects, you will never see a {@link PooledHttpData} and don't\n+ * need to read further.\n+ *\n+ * <h3>Impact of pooled buffers</h3>\n+ *\n+ * <p>Any time you receive a {@link PooledHttpData} it will have a single reference that must be released -\n+ * failure to release the reference will result in a memory leak and poor performance. You must make sure to do\n+ * this by calling {@link PooledHttpData#close()}, usually in a try-with-resources structure to avoid side\n+ * effects.\n+ *\n+ * <p>For example, <pre>{@code\n+ *\n+ * HttpResponse response = client.get(\"/\");\n+ * response.aggregateWithPooledObjects(ctx.alloc(), ctx.executor())", "originalCommit": "4ef5bc1290b9f6e51c2cbb8f1519a89511d98eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}