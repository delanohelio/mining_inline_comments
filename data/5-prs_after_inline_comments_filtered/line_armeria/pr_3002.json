{"pr_number": 3002, "pr_title": "Support Consul service discovery", "pr_createdAt": "2020-08-18T08:53:00Z", "pr_url": "https://github.com/line/armeria/pull/3002", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3ODkyMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472578920", "bodyText": "question: is this client communicating with the local agent only?", "author": "minwoox", "createdAt": "2020-08-19T01:15:49Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroup.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.ClientRequestContextCaptor;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A Consul-based {@link EndpointGroup} implementation that retrieves the list of {@link Endpoint}s\n+ * from Consul using <a href=\"https://www.consul.io/api\">Consul's RESTful HTTP API</a> and\n+ * updates the {@link Endpoint}s periodically.\n+ */\n+public final class ConsulEndpointGroup extends DynamicEndpointGroup {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConsulEndpointGroup.class);\n+\n+    /**\n+     * Returns a {@link ConsulEndpointGroup} with the specified {@code serviceName}.\n+     * The returned {@link ConsulEndpointGroup} will retrieve the list of {@link Endpoint}s from\n+     * a local Consul agent(using default Consul service port).", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NTQyMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472595420", "bodyText": "No, when we direct the server URI then this communicates with the Consul server. There is a no different way of communicating with the local agent or server.", "author": "eugene70", "createdAt": "2020-08-19T02:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3ODkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3OTUwMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472579503", "bodyText": "How about checking isClosing() here?", "author": "minwoox", "createdAt": "2020-08-19T01:18:00Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroup.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.ClientRequestContextCaptor;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A Consul-based {@link EndpointGroup} implementation that retrieves the list of {@link Endpoint}s\n+ * from Consul using <a href=\"https://www.consul.io/api\">Consul's RESTful HTTP API</a> and\n+ * updates the {@link Endpoint}s periodically.\n+ */\n+public final class ConsulEndpointGroup extends DynamicEndpointGroup {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConsulEndpointGroup.class);\n+\n+    /**\n+     * Returns a {@link ConsulEndpointGroup} with the specified {@code serviceName}.\n+     * The returned {@link ConsulEndpointGroup} will retrieve the list of {@link Endpoint}s from\n+     * a local Consul agent(using default Consul service port).\n+     */\n+    public static ConsulEndpointGroup of(String serviceName) {\n+        return builder(serviceName).build();\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link ConsulEndpointGroupBuilder} with the specified {@code serviceName}.\n+     */\n+    public static ConsulEndpointGroupBuilder builder(String serviceName) {\n+        return new ConsulEndpointGroupBuilder(serviceName);\n+    }\n+\n+    private final ConsulClient consulClient;\n+    private final String serviceName;\n+    private final long registryFetchIntervalSeconds;\n+    private final boolean useHealthyEndpoints;\n+\n+    @Nullable\n+    private volatile ScheduledFuture<?> scheduledFuture;\n+\n+    ConsulEndpointGroup(ConsulClient consulClient, String serviceName, long registryFetchIntervalSeconds,\n+                        boolean useHealthyEndpoints) {\n+        this.consulClient = consulClient;\n+        this.serviceName = serviceName;\n+        this.registryFetchIntervalSeconds = registryFetchIntervalSeconds;\n+        this.useHealthyEndpoints = useHealthyEndpoints;\n+\n+        update();\n+    }\n+\n+    private void update() {\n+        if (isClosing()) {\n+            return;\n+        }\n+\n+        final CompletableFuture<List<Endpoint>> response;\n+        final EventLoop eventLoop;\n+        try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {\n+            if (useHealthyEndpoints) {\n+                response = consulClient.healthyEndpoints(serviceName);\n+            } else {\n+                response = consulClient.endpoints(serviceName);\n+            }\n+            eventLoop = captor.get().eventLoop().withoutContext();\n+        }\n+\n+        response.handle((endpoints, cause) -> {\n+            if (cause != null) {", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk3Nzg5Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472977896", "bodyText": "You mean it needs to check again after query?\nIf so, is this good?\n        }\n\n        if (isClosing()) {\n            return;\n        }\n\n        response.handle((endpoints, cause) -> {\n            if (cause != null) {", "author": "eugene70", "createdAt": "2020-08-19T12:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3OTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwOTY4Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r473009687", "bodyText": "What I meant is:\nresponse.handle((endpoints, cause) -> {\n    if (isClosing()) {\n        return;\n    }\n    if (cause != null) {\n    ...", "author": "minwoox", "createdAt": "2020-08-19T12:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3OTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzODQ1Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r473538456", "bodyText": "Oop! I forgot that response is a future.\nOk.", "author": "eugene70", "createdAt": "2020-08-20T02:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3OTUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MTcyMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472581723", "bodyText": "How about checking whether consulUri is null and throwing an exception if it is?\nOr we can remove the ConsulClient setter which is only used in test and accept the uri in the constructor so that consulUri is not null.", "author": "minwoox", "createdAt": "2020-08-19T01:25:56Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder {\n+\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private final String serviceName;\n+\n+    @Nullable\n+    private URI consulUri;\n+    @Nullable\n+    private ConsulClient consulClient;\n+    @Nullable\n+    private String token;\n+\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the specified {@code consulUri}.\n+     */\n+    public ConsulEndpointGroupBuilder consulUri(URI consulUri) {\n+        this.consulUri = requireNonNull(consulUri, \"consulUri\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified {@code consulUri}.\n+     */\n+    public ConsulEndpointGroupBuilder consulUri(String consulUri) {\n+        requireNonNull(consulUri, \"consulUri\");\n+        checkArgument(!consulUri.isEmpty(), \"consulUri can't be empty\");\n+        this.consulUri = URI.create(consulUri);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set, {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchInterval(Duration registryFetchInterval) {\n+        requireNonNull(registryFetchInterval, \"registryFetchInterval\");\n+        final long seconds = registryFetchInterval.getSeconds();\n+        checkArgument(seconds > 0, \"registryFetchInterval.getSeconds(): %s (expected: > 0)\", seconds);\n+        return registryFetchIntervalSeconds(seconds);\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.he interval between fetching registry requests.\n+     * If not set {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchIntervalSeconds(long registryFetchIntervalSeconds) {\n+        checkArgument(registryFetchIntervalSeconds > 0, \"registryFetchIntervalSeconds: %s (expected: > 0)\",\n+                      registryFetchIntervalSeconds);\n+        this.registryFetchIntervalSeconds = registryFetchIntervalSeconds;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified {@code token} for accessing Consul server.\n+     */\n+    public ConsulEndpointGroupBuilder token(String token) {\n+        this.token = requireNonNull(token, \"token\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to use <a href=\"https://www.consul.io/api/health.html\">Health HTTP endpoint</a>.\n+     * Before enabling this feature, make sure that your target endpoints are health-checked by Consul.\n+     *\n+     * @see ConsulUpdatingListenerBuilder#checkUri(URI)\n+     */\n+    public ConsulEndpointGroupBuilder useHealthEndpoints(boolean useHealthyEndpoints) {\n+        this.useHealthyEndpoints = useHealthyEndpoints;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link ConsulEndpointGroup}.\n+     */\n+    public ConsulEndpointGroup build() {\n+        if (consulClient == null) {\n+            consulClient = new ConsulClient(consulUri, token);", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwMTMyNg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r478601326", "bodyText": "I refactored those codes.", "author": "eugene70", "createdAt": "2020-08-27T18:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MTcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MzEzMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472583130", "bodyText": "Let's add .omitNullValues().", "author": "minwoox", "createdAt": "2020-08-19T01:31:00Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/AgentServiceClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/agent/service.html\">Agent HTTP API</a>.\n+ */\n+final class AgentServiceClient {\n+\n+    static AgentServiceClient of(ConsulClient consulClient) {\n+        return new AgentServiceClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private AgentServiceClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Registers a service into the Consul agent.\n+     */\n+    HttpResponse register(String serviceId, String serviceName, String address, int port,\n+                          @Nullable Check check) {\n+        final Service service = new Service();\n+        service.id = serviceId;\n+        service.name = serviceName;\n+        service.address = address;\n+        service.port = port;\n+        if (check != null) {\n+            service.check = check;\n+        }\n+\n+        try {\n+            return client.put(\"/agent/service/register\", mapper.writeValueAsString(service));\n+        } catch (JsonProcessingException e) {\n+            return HttpResponse.ofFailure(e);\n+        }\n+    }\n+\n+    /**\n+     * De-registers a service from the Consul agent.\n+     */\n+    HttpResponse deregister(String serviceId) {\n+        requireNonNull(serviceId, \"serviceId\");\n+        return client.put(\"/agent/service/deregister/\" + serviceId, \"\");\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    @JsonInclude(Include.NON_NULL)\n+    public static final class Service {\n+\n+        @Nullable\n+        @JsonProperty(\"Service\")\n+        String service;\n+\n+        @Nullable\n+        @JsonProperty(\"Name\")\n+        String name;\n+\n+        @JsonProperty(\"ID\")\n+        String id;\n+\n+        @Nullable\n+        @JsonProperty(\"Tags\")\n+        String[] tags;\n+\n+        @Nullable\n+        @JsonProperty(\"Address\")\n+        String address;\n+\n+        @Nullable\n+        @JsonProperty(\"TaggedAddresses\")\n+        Map<String, Object> taggedAddresses;\n+\n+        @Nullable\n+        @JsonProperty(\"Meta\")\n+        Map<String, String> meta;\n+\n+        @JsonProperty(\"Port\")\n+        int port;\n+\n+        @Nullable\n+        @JsonProperty(\"Kind\")\n+        String kind;\n+\n+        @Nullable\n+        @JsonProperty(\"Proxy\")\n+        Object proxy;\n+\n+        @Nullable\n+        @JsonProperty(\"Connect\")\n+        Object connect;\n+\n+        @Nullable\n+        @JsonProperty(\"Check\")\n+        Check check;\n+\n+        @Nullable\n+        @JsonProperty(\"Checks\")\n+        List<Check> checks;\n+\n+        @JsonProperty(\"EnableTagOverride\")\n+        boolean enableTagOverride;\n+\n+        @Nullable\n+        @JsonProperty(\"Weights\")\n+        Map<String, Object> weights;\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5NjQ0Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r475596446", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-08-24T13:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MzEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MzU2OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472583569", "bodyText": "Question: Only id is not null?", "author": "minwoox", "createdAt": "2020-08-19T01:32:42Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/AgentServiceClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/agent/service.html\">Agent HTTP API</a>.\n+ */\n+final class AgentServiceClient {\n+\n+    static AgentServiceClient of(ConsulClient consulClient) {\n+        return new AgentServiceClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private AgentServiceClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Registers a service into the Consul agent.\n+     */\n+    HttpResponse register(String serviceId, String serviceName, String address, int port,\n+                          @Nullable Check check) {\n+        final Service service = new Service();\n+        service.id = serviceId;\n+        service.name = serviceName;\n+        service.address = address;\n+        service.port = port;\n+        if (check != null) {\n+            service.check = check;\n+        }\n+\n+        try {\n+            return client.put(\"/agent/service/register\", mapper.writeValueAsString(service));\n+        } catch (JsonProcessingException e) {\n+            return HttpResponse.ofFailure(e);\n+        }\n+    }\n+\n+    /**\n+     * De-registers a service from the Consul agent.\n+     */\n+    HttpResponse deregister(String serviceId) {\n+        requireNonNull(serviceId, \"serviceId\");\n+        return client.put(\"/agent/service/deregister/\" + serviceId, \"\");\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    @JsonInclude(Include.NON_NULL)\n+    public static final class Service {\n+\n+        @Nullable\n+        @JsonProperty(\"Service\")\n+        String service;\n+\n+        @Nullable\n+        @JsonProperty(\"Name\")\n+        String name;\n+\n+        @JsonProperty(\"ID\")\n+        String id;", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYxMDYxNw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r475610617", "bodyText": "I refactored the inner class Service for our use case.\n\nmake a constructor\nremove unused properties\nmake all fields not null except the check.", "author": "eugene70", "createdAt": "2020-08-24T13:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MzU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MzkzOA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472583938", "bodyText": "Let's use HttpData.empty() instead of \"\".", "author": "minwoox", "createdAt": "2020-08-19T01:34:00Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/AgentServiceClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/agent/service.html\">Agent HTTP API</a>.\n+ */\n+final class AgentServiceClient {\n+\n+    static AgentServiceClient of(ConsulClient consulClient) {\n+        return new AgentServiceClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private AgentServiceClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Registers a service into the Consul agent.\n+     */\n+    HttpResponse register(String serviceId, String serviceName, String address, int port,\n+                          @Nullable Check check) {\n+        final Service service = new Service();\n+        service.id = serviceId;\n+        service.name = serviceName;\n+        service.address = address;\n+        service.port = port;\n+        if (check != null) {\n+            service.check = check;\n+        }\n+\n+        try {\n+            return client.put(\"/agent/service/register\", mapper.writeValueAsString(service));\n+        } catch (JsonProcessingException e) {\n+            return HttpResponse.ofFailure(e);\n+        }\n+    }\n+\n+    /**\n+     * De-registers a service from the Consul agent.\n+     */\n+    HttpResponse deregister(String serviceId) {\n+        requireNonNull(serviceId, \"serviceId\");\n+        return client.put(\"/agent/service/deregister/\" + serviceId, \"\");", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyMTE0MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r475621141", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-08-24T13:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MzkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NDY5Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472584697", "bodyText": "Can we make AgentServiceClient once in the constructor and reuse it?", "author": "minwoox", "createdAt": "2020-08-19T01:36:34Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final HealthClient healthClient;\n+\n+    public ConsulClient(URI uri) {\n+        this(uri, null);\n+    }\n+\n+    public ConsulClient(URI uri, @Nullable String token) {\n+        final WebClientBuilder builder = WebClient.builder(uri);\n+        builder.options(retryingClientOptions);\n+        if (token != null) {\n+            // TODO(eugene70) test with token\n+            builder.addHeader(\"X-Consul-Token\", token);\n+        }\n+        webClient = builder.build();\n+        healthClient = HealthClient.of(this);\n+    }\n+\n+    /**\n+     * Returns an {@link ObjectMapper} that is used to encode and decode Consul requests and responses.\n+     */\n+    public ObjectMapper getObjectMapper() {\n+        return objectMapper;\n+    }\n+\n+    /**\n+     * Registers a service to Consul Agent with service ID.\n+     *\n+     * @param serviceId a service ID that identifying a service\n+     * @param serviceName a service name to register\n+     * @param endpoint an endpoint of service to register\n+     * @param check a check for the service\n+     * @return a {@link CompletableFuture} that will be completed with the registered service ID\n+     */\n+    public HttpResponse register(String serviceId, String serviceName, Endpoint endpoint,\n+                                 @Nullable Check check) {\n+        return AgentServiceClient.of(this)\n+                                 .register(serviceId, serviceName, endpoint.host(), endpoint.port(), check);\n+    }\n+\n+    /**\n+     * De-registers a service to Consul Agent.\n+     *\n+     * @param serviceId a service ID that identifying a service\n+     */\n+    public HttpResponse deregister(String serviceId) {\n+        return AgentServiceClient.of(this).deregister(serviceId);", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyMjY2NA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r475622664", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-08-24T13:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NDY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTI3NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472585275", "bodyText": "Can remove public?", "author": "minwoox", "createdAt": "2020-08-19T01:38:57Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final HealthClient healthClient;\n+\n+    public ConsulClient(URI uri) {", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTI5Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472585293", "bodyText": "Can remove public?", "author": "minwoox", "createdAt": "2020-08-19T01:39:02Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final HealthClient healthClient;\n+\n+    public ConsulClient(URI uri) {\n+        this(uri, null);\n+    }\n+\n+    public ConsulClient(URI uri, @Nullable String token) {", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwMzczMQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r478603731", "bodyText": "Ok, so I changed to use the builder.", "author": "eugene70", "createdAt": "2020-08-27T18:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTI5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTQxMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472585410", "bodyText": "Can remove public?", "author": "minwoox", "createdAt": "2020-08-19T01:39:25Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final HealthClient healthClient;\n+\n+    public ConsulClient(URI uri) {\n+        this(uri, null);\n+    }\n+\n+    public ConsulClient(URI uri, @Nullable String token) {\n+        final WebClientBuilder builder = WebClient.builder(uri);\n+        builder.options(retryingClientOptions);\n+        if (token != null) {\n+            // TODO(eugene70) test with token\n+            builder.addHeader(\"X-Consul-Token\", token);\n+        }\n+        webClient = builder.build();\n+        healthClient = HealthClient.of(this);\n+    }\n+\n+    /**\n+     * Returns an {@link ObjectMapper} that is used to encode and decode Consul requests and responses.\n+     */\n+    public ObjectMapper getObjectMapper() {", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwNDcyMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r478604723", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-08-27T18:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTc1Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472585753", "bodyText": "Can we make CatalogClient  once in the constructor and reuse it?", "author": "minwoox", "createdAt": "2020-08-19T01:40:40Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final HealthClient healthClient;\n+\n+    public ConsulClient(URI uri) {\n+        this(uri, null);\n+    }\n+\n+    public ConsulClient(URI uri, @Nullable String token) {\n+        final WebClientBuilder builder = WebClient.builder(uri);\n+        builder.options(retryingClientOptions);\n+        if (token != null) {\n+            // TODO(eugene70) test with token\n+            builder.addHeader(\"X-Consul-Token\", token);\n+        }\n+        webClient = builder.build();\n+        healthClient = HealthClient.of(this);\n+    }\n+\n+    /**\n+     * Returns an {@link ObjectMapper} that is used to encode and decode Consul requests and responses.\n+     */\n+    public ObjectMapper getObjectMapper() {\n+        return objectMapper;\n+    }\n+\n+    /**\n+     * Registers a service to Consul Agent with service ID.\n+     *\n+     * @param serviceId a service ID that identifying a service\n+     * @param serviceName a service name to register\n+     * @param endpoint an endpoint of service to register\n+     * @param check a check for the service\n+     * @return a {@link CompletableFuture} that will be completed with the registered service ID\n+     */\n+    public HttpResponse register(String serviceId, String serviceName, Endpoint endpoint,\n+                                 @Nullable Check check) {\n+        return AgentServiceClient.of(this)\n+                                 .register(serviceId, serviceName, endpoint.host(), endpoint.port(), check);\n+    }\n+\n+    /**\n+     * De-registers a service to Consul Agent.\n+     *\n+     * @param serviceId a service ID that identifying a service\n+     */\n+    public HttpResponse deregister(String serviceId) {\n+        return AgentServiceClient.of(this).deregister(serviceId);\n+    }\n+\n+    /**\n+     * Get registered endpoints with service name from Consul agent.\n+     */\n+    public CompletableFuture<List<Endpoint>> endpoints(String serviceName) {\n+        return CatalogClient.of(this).endpoints(serviceName);", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3MDgyOQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r475570829", "bodyText": "Yep.\nAgentServiceClient also.", "author": "eugene70", "createdAt": "2020-08-24T12:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NjA0MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472586041", "bodyText": "Can remove public?", "author": "minwoox", "createdAt": "2020-08-19T01:41:35Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final HealthClient healthClient;\n+\n+    public ConsulClient(URI uri) {\n+        this(uri, null);\n+    }\n+\n+    public ConsulClient(URI uri, @Nullable String token) {\n+        final WebClientBuilder builder = WebClient.builder(uri);\n+        builder.options(retryingClientOptions);\n+        if (token != null) {\n+            // TODO(eugene70) test with token\n+            builder.addHeader(\"X-Consul-Token\", token);\n+        }\n+        webClient = builder.build();\n+        healthClient = HealthClient.of(this);\n+    }\n+\n+    /**\n+     * Returns an {@link ObjectMapper} that is used to encode and decode Consul requests and responses.\n+     */\n+    public ObjectMapper getObjectMapper() {\n+        return objectMapper;\n+    }\n+\n+    /**\n+     * Registers a service to Consul Agent with service ID.\n+     *\n+     * @param serviceId a service ID that identifying a service\n+     * @param serviceName a service name to register\n+     * @param endpoint an endpoint of service to register\n+     * @param check a check for the service\n+     * @return a {@link CompletableFuture} that will be completed with the registered service ID\n+     */\n+    public HttpResponse register(String serviceId, String serviceName, Endpoint endpoint,\n+                                 @Nullable Check check) {\n+        return AgentServiceClient.of(this)\n+                                 .register(serviceId, serviceName, endpoint.host(), endpoint.port(), check);\n+    }\n+\n+    /**\n+     * De-registers a service to Consul Agent.\n+     *\n+     * @param serviceId a service ID that identifying a service\n+     */\n+    public HttpResponse deregister(String serviceId) {\n+        return AgentServiceClient.of(this).deregister(serviceId);\n+    }\n+\n+    /**\n+     * Get registered endpoints with service name from Consul agent.\n+     */\n+    public CompletableFuture<List<Endpoint>> endpoints(String serviceName) {\n+        return CatalogClient.of(this).endpoints(serviceName);\n+    }\n+\n+    /**\n+     * Returns the registered endpoints with the specified service name from Consul agent.\n+     */\n+    public CompletableFuture<List<Endpoint>> healthyEndpoints(String serviceName) {\n+        return healthClient.healthyEndpoints(serviceName);\n+    }\n+\n+    /**\n+     * Returns a {@code WebClient} for accessing to Consul server.\n+     */\n+    public WebClient consulWebClient() {", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3NjU4Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r475576583", "bodyText": "Ok, and then I removed a related trivial test.", "author": "eugene70", "createdAt": "2020-08-24T12:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NjA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NjQxNg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r472586416", "bodyText": "How about removing this method?\nI think ConsulEndpontGroup and ConsulUpdatingListener can have the URI when they are built.", "author": "minwoox", "createdAt": "2020-08-19T01:43:03Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final HealthClient healthClient;\n+\n+    public ConsulClient(URI uri) {\n+        this(uri, null);\n+    }\n+\n+    public ConsulClient(URI uri, @Nullable String token) {\n+        final WebClientBuilder builder = WebClient.builder(uri);\n+        builder.options(retryingClientOptions);\n+        if (token != null) {\n+            // TODO(eugene70) test with token\n+            builder.addHeader(\"X-Consul-Token\", token);\n+        }\n+        webClient = builder.build();\n+        healthClient = HealthClient.of(this);\n+    }\n+\n+    /**\n+     * Returns an {@link ObjectMapper} that is used to encode and decode Consul requests and responses.\n+     */\n+    public ObjectMapper getObjectMapper() {\n+        return objectMapper;\n+    }\n+\n+    /**\n+     * Registers a service to Consul Agent with service ID.\n+     *\n+     * @param serviceId a service ID that identifying a service\n+     * @param serviceName a service name to register\n+     * @param endpoint an endpoint of service to register\n+     * @param check a check for the service\n+     * @return a {@link CompletableFuture} that will be completed with the registered service ID\n+     */\n+    public HttpResponse register(String serviceId, String serviceName, Endpoint endpoint,\n+                                 @Nullable Check check) {\n+        return AgentServiceClient.of(this)\n+                                 .register(serviceId, serviceName, endpoint.host(), endpoint.port(), check);\n+    }\n+\n+    /**\n+     * De-registers a service to Consul Agent.\n+     *\n+     * @param serviceId a service ID that identifying a service\n+     */\n+    public HttpResponse deregister(String serviceId) {\n+        return AgentServiceClient.of(this).deregister(serviceId);\n+    }\n+\n+    /**\n+     * Get registered endpoints with service name from Consul agent.\n+     */\n+    public CompletableFuture<List<Endpoint>> endpoints(String serviceName) {\n+        return CatalogClient.of(this).endpoints(serviceName);\n+    }\n+\n+    /**\n+     * Returns the registered endpoints with the specified service name from Consul agent.\n+     */\n+    public CompletableFuture<List<Endpoint>> healthyEndpoints(String serviceName) {\n+        return healthClient.healthyEndpoints(serviceName);\n+    }\n+\n+    /**\n+     * Returns a {@code WebClient} for accessing to Consul server.\n+     */\n+    public WebClient consulWebClient() {\n+        return webClient;\n+    }\n+\n+    /**\n+     * Returns the {@link URI} of Consul agent.\n+     */\n+    public URI uri() {", "originalCommit": "8d3ef5d795d42d9ad22f5c3b838e8d44d3ccbe42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxNjQ3MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r478616471", "bodyText": "I refactored ConsulEndpointGroup, ConsulUpdatingListener, and their builders also. So please review again whether to have their own URI.", "author": "eugene70", "createdAt": "2020-08-27T18:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NjQxNg=="}], "type": "inlineReview"}, {"oid": "ca6814e442faa594225fbc7e85d66ae180fe14c8", "url": "https://github.com/line/armeria/commit/ca6814e442faa594225fbc7e85d66ae180fe14c8", "message": "Apply reviews\n\n- Check `isClosing` again after update on `ConsulEndpointGroup`\n- Reuse instace of `CatalogClient` and `AgentServiceClient`", "committedDate": "2020-08-24T12:40:43Z", "type": "forcePushed"}, {"oid": "a0c2bcfcfd2e862802a46682d84423d361b52cbb", "url": "https://github.com/line/armeria/commit/a0c2bcfcfd2e862802a46682d84423d361b52cbb", "message": "Apply reviews\n\n- Check `isClosing` again after update on `ConsulEndpointGroup`\n- Reuse instace of `CatalogClient` and `AgentServiceClient`\n- Remove `public` of `consulWebClient()` on `ConsulClient`\n- Refactor inner class `Service` on `AgentServiceClient`", "committedDate": "2020-08-24T13:44:09Z", "type": "forcePushed"}, {"oid": "ca0ec4a666802d3142f67d5c8e5752c74f5d494a", "url": "https://github.com/line/armeria/commit/ca0ec4a666802d3142f67d5c8e5752c74f5d494a", "message": "Refactor whole package\n\n  - Remove low level unit tests.\n  - Create ConsulClientBuilder.\n  - Sync the manner of creating ConsulClient.\n  - Remove 'public' from class CatalogClient.", "committedDate": "2020-08-27T14:08:12Z", "type": "forcePushed"}, {"oid": "1b38de13e8b5f605af7b47c0a9010aae362309f7", "url": "https://github.com/line/armeria/commit/1b38de13e8b5f605af7b47c0a9010aae362309f7", "message": "Refactor whole package\n\n  - Remove low level unit tests.\n  - Create ConsulClientBuilder.\n  - Sync the manner of creating ConsulClient.\n  - Remove 'public' from class CatalogClient.", "committedDate": "2020-08-27T18:34:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzOTE0Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r478839143", "bodyText": "nit: indent, could be joined", "author": "ikhoon", "createdAt": "2020-08-28T05:32:40Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/AgentServiceClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/agent/service.html\">Agent HTTP API</a>.\n+ */\n+final class AgentServiceClient {\n+\n+    static AgentServiceClient of(ConsulClient consulClient) {\n+        return new AgentServiceClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private AgentServiceClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Registers a service into the Consul agent.\n+     */\n+    HttpResponse register(String serviceId, String serviceName, String address, int port,\n+                          @Nullable Check check) {\n+        final Service service = new Service(serviceId, serviceName, address, port, check);\n+        try {\n+            return client.put(\"/agent/service/register\", mapper.writeValueAsString(service));\n+        } catch (JsonProcessingException e) {\n+            return HttpResponse.ofFailure(e);\n+        }\n+    }\n+\n+    /**\n+     * De-registers a service from the Consul agent.\n+     */\n+    HttpResponse deregister(String serviceId) {\n+        requireNonNull(serviceId, \"serviceId\");\n+        return client.put(\"/agent/service/deregister/\" + serviceId, HttpData.empty());\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    @JsonInclude(Include.NON_NULL)\n+    private static final class Service {\n+\n+        @JsonProperty(\"ID\")\n+        private final String id;\n+\n+        @JsonProperty(\"Name\")\n+        private final String name;\n+\n+        @JsonProperty(\"Address\")\n+        private final String address;\n+\n+        @JsonProperty(\"Port\")\n+        private final int port;\n+\n+        @Nullable\n+        @JsonProperty(\"Check\")\n+        private final Check check;\n+\n+        Service(String id, String name, String address, int port,\n+                       @Nullable Check check) {", "originalCommit": "1b38de13e8b5f605af7b47c0a9010aae362309f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4MDY2Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482680662", "bodyText": "Yup!", "author": "eugene70", "createdAt": "2020-09-03T03:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzOTE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzOTY5Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r478839697", "bodyText": "Add omitNullValues()?", "author": "ikhoon", "createdAt": "2020-08-28T05:34:14Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/CatalogClient.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.CollectionType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/catalog.html\">Catalog HTTP API</a>.\n+ */\n+final class CatalogClient {\n+\n+    private static final CollectionType collectionTypeForNode =\n+            TypeFactory.defaultInstance().constructCollectionType(List.class, Node.class);\n+\n+    static CatalogClient of(ConsulClient consulClient) {\n+        return new CatalogClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private CatalogClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Gets endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> endpoints(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        return service(serviceName)\n+                .thenApply(nodes -> {\n+                    final Function<Node, Endpoint> nodeEndpointFunction = node -> {\n+                        final String host;\n+                        if (!Strings.isNullOrEmpty(node.serviceAddress)) {\n+                            host = node.serviceAddress;\n+                        } else if (!Strings.isNullOrEmpty(node.address)) {\n+                            host = node.address;\n+                        } else {\n+                            host = \"127.0.0.1\";\n+                        }\n+                        return Endpoint.of(host, node.servicePort);\n+                    };\n+                    return nodes.stream()\n+                                .map(nodeEndpointFunction)\n+                                .collect(toImmutableList());\n+                });\n+    }\n+\n+    /**\n+     * Returns node list with service name.\n+     */\n+    @VisibleForTesting\n+    CompletableFuture<List<Node>> service(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+\n+        return client.get(\"/catalog/service/\" + serviceName)\n+                     .aggregate()\n+                     .thenApply(response -> {\n+                         try {\n+                             return mapper.readValue(response.content().toStringUtf8(), collectionTypeForNode);\n+                         } catch (JsonProcessingException e) {\n+                             return Exceptions.throwUnsafely(e);\n+                         }\n+                     });\n+    }\n+\n+    @JsonIgnoreProperties(ignoreUnknown = true)\n+    static final class Node {\n+        @Nullable\n+        @JsonProperty(\"ID\")\n+        String id;\n+\n+        @Nullable\n+        @JsonProperty(\"Node\")\n+        String node;\n+\n+        @Nullable\n+        @JsonProperty(\"Address\")\n+        String address;\n+\n+        @Nullable\n+        @JsonProperty(\"Datacenter\")\n+        String datacenter;\n+\n+        @Nullable\n+        @JsonProperty(\"TaggedAddresses\")\n+        Map<String, String> taggedAddresses;\n+\n+        @Nullable\n+        @JsonProperty(\"NodeMeta\")\n+        Map<String, Object> nodeMeta;\n+\n+        @JsonProperty(\"CreateIndex\")\n+        int createIndex;\n+\n+        @JsonProperty(\"ModifyIndex\")\n+        int modifyIndex;\n+\n+        @Nullable\n+        @JsonProperty(\"ServiceAddress\")\n+        String serviceAddress;\n+\n+        @JsonProperty(\"ServiceEnableTagOverride\")\n+        boolean serviceEnableTagOverride;\n+\n+        @Nullable\n+        @JsonProperty(\"ServiceID\")\n+        String serviceId;\n+\n+        @Nullable\n+        @JsonProperty(\"ServiceName\")\n+        String serviceName;\n+\n+        @JsonProperty(\"ServicePort\")\n+        int servicePort;\n+\n+        @Nullable\n+        @JsonProperty(\"ServiceMeta\")\n+        Map<String, Object> serviceMeta;\n+\n+        @Nullable\n+        @JsonProperty(\"ServiceTaggedAddresses\")\n+        Map<String, Object> serviceTaggedAddresses;\n+\n+        @Nullable\n+        @JsonProperty(\"ServiceTags\")\n+        String[] serviceTags;\n+\n+        @Nullable\n+        @JsonProperty(\"ServiceProxy\")\n+        Map<String, Object> serviceProxy;\n+\n+        @Nullable\n+        @JsonProperty(\"ServiceConnect\")\n+        Map<String, Object> serviceConnect;\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)", "originalCommit": "1b38de13e8b5f605af7b47c0a9010aae362309f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4MDkzMQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482680931", "bodyText": "Yep.", "author": "eugene70", "createdAt": "2020-09-03T03:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzOTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2OTg1Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482669857", "bodyText": "Change the modifier to public and move the documentation here?\nJavadoc is inherited.", "author": "ikhoon", "createdAt": "2020-09-03T02:44:31Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    protected ConsulClientBuilder consulProtocol(SessionProtocol consulProtocol) {", "originalCommit": "edf7653201bfa79a371084a683d51ec2263cbc1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4MjAyMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482682023", "bodyText": "Oh, sounds good.", "author": "eugene70", "createdAt": "2020-09-03T03:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2OTg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2OTkyNw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482669927", "bodyText": "Let's add final", "author": "ikhoon", "createdAt": "2020-09-03T02:44:47Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    protected ConsulClientBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        this.consulProtocol = requireNonNull(consulProtocol, \"consulProtocol\");\n+        return this;\n+    }\n+\n+    protected ConsulClientBuilder consulAddress(String consulAddress) {\n+        this.consulAddress = requireNonNull(consulAddress, \"consulAddress\");\n+        checkArgument(!consulAddress.isEmpty(), \"consulPort can't be empty\");\n+        return this;\n+    }\n+\n+    protected ConsulClientBuilder consulPort(int consulPort) {\n+        checkArgument(consulPort > 0, \"consulPort can't be zero or negative\");\n+        this.consulPort = consulPort;\n+        return this;\n+    }\n+\n+    protected ConsulClientBuilder consulApiVersion(String consulApiVersion) {\n+        this.consulApiVersion = requireNonNull(consulApiVersion, \"consulApiVersion\");\n+        checkArgument(!consulApiVersion.isEmpty(), \"consulApiVersion can't be empty\");\n+        return this;\n+    }\n+\n+    protected ConsulClientBuilder consulToken(String consulToken) {\n+        this.consulToken = requireNonNull(consulToken, \"consulToken\");\n+        checkArgument(!consulToken.isEmpty(), \"consulToken can't be empty\");\n+        return this;\n+    }\n+\n+    protected ConsulClient buildClient() {", "originalCommit": "edf7653201bfa79a371084a683d51ec2263cbc1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4MjM0OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482682349", "bodyText": "Yep.", "author": "eugene70", "createdAt": "2020-09-03T03:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2OTkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3Mjc1OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482672759", "bodyText": "Programatically build looks good. However, some users might want to load a Consul URI from their configuration files such as yml or properties and create this builder the URI string.\nDon't we need to offer consulUri(String) and consulUri(URI)? \ud83e\udd14", "author": "ikhoon", "createdAt": "2020-09-03T02:55:28Z", "path": "consul/src/test/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulTestBase;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListener;\n+\n+public class ConsulEndpointGroupTest extends ConsulTestBase {\n+\n+    static final List<Server> servers = new ArrayList<>();\n+\n+    @BeforeAll\n+    static void startServers() {\n+\n+        for (Endpoint endpoint : sampleEndpoints) {\n+            final Server server = Server.builder()\n+                                        .http(endpoint.port())\n+                                        .service(\"/\", new EchoService())\n+                                        .build();\n+            final ServerListener listener = ConsulUpdatingListener.builder(serviceName)\n+                                                                  .consulProtocol(SessionProtocol.HTTP)\n+                                                                  .consulAddress(consul().getAddress())\n+                                                                  .consulPort(consul().getHttpPort())\n+                                                                  .consulApiVersion(\"v1\")", "originalCommit": "edf7653201bfa79a371084a683d51ec2263cbc1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4NTQ5Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482685492", "bodyText": "Maybe there is a use case for that. If so I think the API version string is not included in the URI. What is your opinion?", "author": "eugene70", "createdAt": "2020-09-03T03:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3Mjc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNjA5Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482706096", "bodyText": "How about mentioning the Consul URI spec that should contain an API version in the Javadoc?", "author": "ikhoon", "createdAt": "2020-09-03T05:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3Mjc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNjA4Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r482836086", "bodyText": "I did. PTAL.", "author": "eugene70", "createdAt": "2020-09-03T09:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3Mjc1OQ=="}], "type": "inlineReview"}, {"oid": "db42d873beb45f41e66ee582210675bebaa5f4ec", "url": "https://github.com/line/armeria/commit/db42d873beb45f41e66ee582210675bebaa5f4ec", "message": "Refactor builders using inheritance\n\n  - Add consulUri() methods to builders", "committedDate": "2020-09-03T08:34:10Z", "type": "forcePushed"}, {"oid": "feebcd5497f9201e9efbf89653be5e0ab1dcf352", "url": "https://github.com/line/armeria/commit/feebcd5497f9201e9efbf89653be5e0ab1dcf352", "message": "Refactor builders using inheritance\n\n  - Add consulUri() methods to builders", "committedDate": "2020-09-03T08:36:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjM4OA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500702388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param consulProtocol the protocol scheme of Consul API service, default: HTTP\n          \n          \n            \n                 * @param consulProtocol the protocol scheme of Consul API service, default: {@link SessionProtocol#HTTP}", "author": "ikhoon", "createdAt": "2020-10-07T02:30:59Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean flagToPreventConflict;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        requireNonNull(consulUri, \"consulUri\");\n+        checkState(!flagToPreventConflict, \"consulUri can't comes with other addressing options\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(String consulUri) {\n+        return consulUri(URI.create(requireNonNull(consulUri, \"consulUri\")));\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service protocol scheme.\n+     * @param consulProtocol the protocol scheme of Consul API service, default: HTTP", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzU1Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501353552", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjQ5Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500702497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The URI should include the Consul API version at path, like: /v1\n          \n          \n            \n                 * The URI should include the Consul API version at path, like: {@code /v1}", "author": "ikhoon", "createdAt": "2020-10-07T02:31:25Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean flagToPreventConflict;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        requireNonNull(consulUri, \"consulUri\");\n+        checkState(!flagToPreventConflict, \"consulUri can't comes with other addressing options\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzU5NA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501353594", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjU1Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500702557", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n          \n          \n            \n                 * @param consulUri the URI of Consul API service, default: http://127.0.0.1:8500/v1", "author": "ikhoon", "createdAt": "2020-10-07T02:31:41Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean flagToPreventConflict;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        requireNonNull(consulUri, \"consulUri\");\n+        checkState(!flagToPreventConflict, \"consulUri can't comes with other addressing options\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzY0NA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501353644", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMjU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMzEzMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500703132", "bodyText": "Could we raise IllegalArgumentException if consulUri contains an empty or null path?", "author": "ikhoon", "createdAt": "2020-10-07T02:34:18Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean flagToPreventConflict;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        requireNonNull(consulUri, \"consulUri\");\n+        checkState(!flagToPreventConflict, \"consulUri can't comes with other addressing options\");\n+        this.consulUri = consulUri;", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzcyNA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501353724", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMzM4MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500703381", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param consulApiVersion the version of Consul API service, default: v1\n          \n          \n            \n                 * @param consulApiVersion the version of Consul API service, default: {@code v1}", "author": "ikhoon", "createdAt": "2020-10-07T02:35:12Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean flagToPreventConflict;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        requireNonNull(consulUri, \"consulUri\");\n+        checkState(!flagToPreventConflict, \"consulUri can't comes with other addressing options\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(String consulUri) {\n+        return consulUri(URI.create(requireNonNull(consulUri, \"consulUri\")));\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service protocol scheme.\n+     * @param consulProtocol the protocol scheme of Consul API service, default: HTTP\n+     */\n+    public ConsulClientBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        requireNonNull(consulProtocol, \"consulProtocol\");\n+        checkState(consulUri == null, \"consulProtocol can't comes with consulUri\");\n+        this.consulProtocol = consulProtocol;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service host address.\n+     * @param consulAddress the host address of Consul API service, default: 127.0.0.1\n+     */\n+    public ConsulClientBuilder consulAddress(String consulAddress) {\n+        requireNonNull(consulAddress, \"consulAddress\");\n+        checkArgument(!consulAddress.isEmpty(), \"consulAddress can't be empty\");\n+        checkState(consulUri == null, \"consulAddress can't comes with consulUri\");\n+        this.consulAddress = consulAddress;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's HTTP service port.\n+     * @param consulPort the port of Consul agent, default: 8500\n+     */\n+    public ConsulClientBuilder consulPort(int consulPort) {\n+        checkArgument(consulPort > 0, \"consulPort can't be zero or negative\");\n+        checkState(consulUri == null, \"consulPort can't comes with consulUri\");\n+        this.consulPort = consulPort;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API version.\n+     * @param consulApiVersion the version of Consul API service, default: v1", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzgwMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501353800", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMzM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMzczNg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500703736", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param consulToken the token for accessing Consul API, default: null\n          \n          \n            \n                 * @param consulToken the token for accessing Consul API, default: {@code null}", "author": "ikhoon", "createdAt": "2020-10-07T02:36:31Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean flagToPreventConflict;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        requireNonNull(consulUri, \"consulUri\");\n+        checkState(!flagToPreventConflict, \"consulUri can't comes with other addressing options\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(String consulUri) {\n+        return consulUri(URI.create(requireNonNull(consulUri, \"consulUri\")));\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service protocol scheme.\n+     * @param consulProtocol the protocol scheme of Consul API service, default: HTTP\n+     */\n+    public ConsulClientBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        requireNonNull(consulProtocol, \"consulProtocol\");\n+        checkState(consulUri == null, \"consulProtocol can't comes with consulUri\");\n+        this.consulProtocol = consulProtocol;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service host address.\n+     * @param consulAddress the host address of Consul API service, default: 127.0.0.1\n+     */\n+    public ConsulClientBuilder consulAddress(String consulAddress) {\n+        requireNonNull(consulAddress, \"consulAddress\");\n+        checkArgument(!consulAddress.isEmpty(), \"consulAddress can't be empty\");\n+        checkState(consulUri == null, \"consulAddress can't comes with consulUri\");\n+        this.consulAddress = consulAddress;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's HTTP service port.\n+     * @param consulPort the port of Consul agent, default: 8500\n+     */\n+    public ConsulClientBuilder consulPort(int consulPort) {\n+        checkArgument(consulPort > 0, \"consulPort can't be zero or negative\");\n+        checkState(consulUri == null, \"consulPort can't comes with consulUri\");\n+        this.consulPort = consulPort;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API version.\n+     * @param consulApiVersion the version of Consul API service, default: v1\n+     */\n+    public ConsulClientBuilder consulApiVersion(String consulApiVersion) {\n+        requireNonNull(consulApiVersion, \"consulApiVersion\");\n+        checkArgument(!consulApiVersion.isEmpty(), \"consulApiVersion can't be empty\");\n+        checkState(consulUri == null, \"consulApiVersion can't comes with consulUri\");\n+        this.consulApiVersion = consulApiVersion;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified token for Consul's API.\n+     * @param consulToken the token for accessing Consul API, default: null", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzgzNw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501353837", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:49:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMzczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNDQxNw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500704417", "bodyText": "How about isUriComponentSet?", "author": "ikhoon", "createdAt": "2020-10-07T02:39:30Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean flagToPreventConflict;", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzkzMQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501353931", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNDQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNTc1MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500705751", "bodyText": "Could be removed the duplicate he interval between fetching registry requests.?", "author": "ikhoon", "createdAt": "2020-10-07T02:44:52Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulUri(URI consulUri) {\n+        return (ConsulEndpointGroupBuilder) super.consulUri(consulUri);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulUri(String consulUri) {\n+        return (ConsulEndpointGroupBuilder) super.consulUri(consulUri);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        return (ConsulEndpointGroupBuilder) super.consulProtocol(consulProtocol);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulAddress(String consulAddress) {\n+        return (ConsulEndpointGroupBuilder) super.consulAddress(consulAddress);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulPort(int consulPort) {\n+        return (ConsulEndpointGroupBuilder) super.consulPort(consulPort);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulApiVersion(String consulApiVersion) {\n+        return (ConsulEndpointGroupBuilder) super.consulApiVersion(consulApiVersion);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulToken(String consulToken) {\n+        return (ConsulEndpointGroupBuilder) super.consulToken(consulToken);\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set, {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchInterval(Duration registryFetchInterval) {\n+        requireNonNull(registryFetchInterval, \"registryFetchInterval\");\n+        final long seconds = registryFetchInterval.getSeconds();\n+        checkArgument(seconds > 0, \"registryFetchInterval.getSeconds(): %s (expected: > 0)\", seconds);\n+        return registryFetchIntervalSeconds(seconds);\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.he interval between fetching registry requests.", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1Mzk5NA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501353994", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNTc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNzYxOA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500707618", "bodyText": "This function could be a static method. Could you make this function static?\nFor example:\nprivate static Endpoint convertToEndpoint(Node node) {\n    ...\n}\n\n...\nnodes.stream().map(CatalogClient::convertToEndpoint)", "author": "ikhoon", "createdAt": "2020-10-07T02:52:13Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/CatalogClient.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.CollectionType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/catalog.html\">Catalog HTTP API</a>.\n+ */\n+final class CatalogClient {\n+\n+    private static final CollectionType collectionTypeForNode =\n+            TypeFactory.defaultInstance().constructCollectionType(List.class, Node.class);\n+\n+    static CatalogClient of(ConsulClient consulClient) {\n+        return new CatalogClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private CatalogClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Gets endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> endpoints(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        return service(serviceName)\n+                .thenApply(nodes -> {\n+                    final Function<Node, Endpoint> nodeEndpointFunction = node -> {\n+                        final String host;\n+                        if (!Strings.isNullOrEmpty(node.serviceAddress)) {\n+                            host = node.serviceAddress;\n+                        } else if (!Strings.isNullOrEmpty(node.address)) {\n+                            host = node.address;\n+                        } else {\n+                            host = \"127.0.0.1\";\n+                        }\n+                        return Endpoint.of(host, node.servicePort);\n+                    };", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NDA2Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501354062", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwNzYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwODgzNg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500708836", "bodyText": "How about prepending '/' only if consulApiVersion does not start with /?", "author": "ikhoon", "createdAt": "2020-10-07T02:56:43Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean flagToPreventConflict;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        requireNonNull(consulUri, \"consulUri\");\n+        checkState(!flagToPreventConflict, \"consulUri can't comes with other addressing options\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: /v1\n+     * @param consulUri the URI of Consul API service, default: HTTP://127.0.0.1:8500/v1\n+     */\n+    public ConsulClientBuilder consulUri(String consulUri) {\n+        return consulUri(URI.create(requireNonNull(consulUri, \"consulUri\")));\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service protocol scheme.\n+     * @param consulProtocol the protocol scheme of Consul API service, default: HTTP\n+     */\n+    public ConsulClientBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        requireNonNull(consulProtocol, \"consulProtocol\");\n+        checkState(consulUri == null, \"consulProtocol can't comes with consulUri\");\n+        this.consulProtocol = consulProtocol;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service host address.\n+     * @param consulAddress the host address of Consul API service, default: 127.0.0.1\n+     */\n+    public ConsulClientBuilder consulAddress(String consulAddress) {\n+        requireNonNull(consulAddress, \"consulAddress\");\n+        checkArgument(!consulAddress.isEmpty(), \"consulAddress can't be empty\");\n+        checkState(consulUri == null, \"consulAddress can't comes with consulUri\");\n+        this.consulAddress = consulAddress;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's HTTP service port.\n+     * @param consulPort the port of Consul agent, default: 8500\n+     */\n+    public ConsulClientBuilder consulPort(int consulPort) {\n+        checkArgument(consulPort > 0, \"consulPort can't be zero or negative\");\n+        checkState(consulUri == null, \"consulPort can't comes with consulUri\");\n+        this.consulPort = consulPort;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API version.\n+     * @param consulApiVersion the version of Consul API service, default: v1\n+     */\n+    public ConsulClientBuilder consulApiVersion(String consulApiVersion) {\n+        requireNonNull(consulApiVersion, \"consulApiVersion\");\n+        checkArgument(!consulApiVersion.isEmpty(), \"consulApiVersion can't be empty\");\n+        checkState(consulUri == null, \"consulApiVersion can't comes with consulUri\");\n+        this.consulApiVersion = consulApiVersion;\n+        flagToPreventConflict = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified token for Consul's API.\n+     * @param consulToken the token for accessing Consul API, default: null\n+     */\n+    public ConsulClientBuilder consulToken(String consulToken) {\n+        requireNonNull(consulToken, \"consulToken\");\n+        checkArgument(!consulToken.isEmpty(), \"consulToken can't be empty\");\n+        this.consulToken = consulToken;\n+        return this;\n+    }\n+\n+    protected final ConsulClient buildClient() {\n+        final URI uri;\n+        if (consulUri != null) {\n+            uri = consulUri;\n+        } else {\n+            try {\n+                uri = new URI(consulProtocol.uriText(), null, consulAddress, consulPort,\n+                              '/' + consulApiVersion, null, null);", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0ODAzNQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501348035", "bodyText": "I added a checkArgument() at consulApiVersion() to prevent this.", "author": "eugene70", "createdAt": "2020-10-07T22:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwODgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1ODUwMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501358500", "bodyText": "Please take a look.\n\nSorry for the late review. \ud83d\ude4f\n\n\n\nPlease take a look.\n\nSorry for the late review. \ud83d\ude4f\n\nNot at all.", "author": "eugene70", "createdAt": "2020-10-07T23:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwODgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMTE1Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500711153", "bodyText": "For consistency with other Javadoc of service discovery\nServerBuilder sb = Server.builder();\nsb.serverListener(listener);", "author": "ikhoon", "createdAt": "2020-10-07T03:05:16Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListenerBuilder.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Builds a new {@link ConsulUpdatingListener}, which registers the server to Consul cluster.\n+ * <h3>Examples</h3>\n+ * <pre>{@code\n+ * ConsulUpdatingListener listener = ConsulUpdatingListener.builder(\"myService\")\n+ *                                                         .consulPort(8501\")\n+ *                                                         .build();\n+ * server.addListener(listener);", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MDk2NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501350965", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMTE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMTU4Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500711587", "bodyText": "Could you move these methods overridden only return type to the bottom of this class?", "author": "ikhoon", "createdAt": "2020-10-07T03:07:04Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListenerBuilder.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Builds a new {@link ConsulUpdatingListener}, which registers the server to Consul cluster.\n+ * <h3>Examples</h3>\n+ * <pre>{@code\n+ * ConsulUpdatingListener listener = ConsulUpdatingListener.builder(\"myService\")\n+ *                                                         .consulPort(8501\")\n+ *                                                         .build();\n+ * server.addListener(listener);\n+ * }</pre>\n+ */\n+public final class ConsulUpdatingListenerBuilder extends ConsulClientBuilder {\n+\n+    private static final String DEFAULT_CHECK_INTERVAL = \"10s\";\n+    private final String serviceName;\n+\n+    @Nullable\n+    private Endpoint serviceEndpoint;\n+    @Nullable\n+    private URI checkUri;\n+    @Nullable\n+    private String checkInterval;\n+    @Nullable\n+    private HttpMethod checkMethod;\n+\n+    /**\n+     * Creates a {@link ConsulUpdatingListenerBuilder} with a service name.\n+     *\n+     * @param serviceName the service name to register\n+     */\n+    ConsulUpdatingListenerBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!this.serviceName.isEmpty(), \"serviceName can't be empty\");\n+    }\n+\n+    @Override\n+    public ConsulUpdatingListenerBuilder consulUri(URI consulUri) {\n+        return (ConsulUpdatingListenerBuilder) super.consulUri(consulUri);\n+    }\n+\n+    @Override\n+    public ConsulUpdatingListenerBuilder consulUri(String consulUri) {\n+        return (ConsulUpdatingListenerBuilder) super.consulUri(consulUri);\n+    }\n+\n+    @Override\n+    public ConsulUpdatingListenerBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        return (ConsulUpdatingListenerBuilder) super.consulProtocol(consulProtocol);\n+    }\n+\n+    @Override\n+    public ConsulUpdatingListenerBuilder consulAddress(String consulAddress) {\n+        return (ConsulUpdatingListenerBuilder) super.consulAddress(consulAddress);\n+    }\n+\n+    @Override\n+    public ConsulUpdatingListenerBuilder consulPort(int consulPort) {\n+        return (ConsulUpdatingListenerBuilder) super.consulPort(consulPort);\n+    }\n+\n+    @Override\n+    public ConsulUpdatingListenerBuilder consulApiVersion(String consulApiVersion) {\n+        return (ConsulUpdatingListenerBuilder) super.consulApiVersion(consulApiVersion);\n+    }\n+\n+    @Override\n+    public ConsulUpdatingListenerBuilder consulToken(String consulToken) {\n+        return (ConsulUpdatingListenerBuilder) super.consulToken(consulToken);\n+    }", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MjQwNg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501352406", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMTU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMTk4Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r500711983", "bodyText": "Could you move these methods overridden only return type to the bottom of this class?", "author": "ikhoon", "createdAt": "2020-10-07T03:08:48Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulUri(URI consulUri) {\n+        return (ConsulEndpointGroupBuilder) super.consulUri(consulUri);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulUri(String consulUri) {\n+        return (ConsulEndpointGroupBuilder) super.consulUri(consulUri);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        return (ConsulEndpointGroupBuilder) super.consulProtocol(consulProtocol);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulAddress(String consulAddress) {\n+        return (ConsulEndpointGroupBuilder) super.consulAddress(consulAddress);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulPort(int consulPort) {\n+        return (ConsulEndpointGroupBuilder) super.consulPort(consulPort);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulApiVersion(String consulApiVersion) {\n+        return (ConsulEndpointGroupBuilder) super.consulApiVersion(consulApiVersion);\n+    }\n+\n+    @Override\n+    public ConsulEndpointGroupBuilder consulToken(String consulToken) {\n+        return (ConsulEndpointGroupBuilder) super.consulToken(consulToken);\n+    }", "originalCommit": "659a1856dfb1e535a1805db7a529c0ca531d83c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MjQ4Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501352482", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-07T22:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMTk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MTI2Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501561262", "bodyText": "How about replacing the default value (/v1) in Javadoc with v1 for reducing confusion.", "author": "ikhoon", "createdAt": "2020-10-08T09:03:26Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean isUriComponentSet;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: {@code /v1}\n+     * @param consulUri the URI of Consul API service, default: {@code http://127.0.0.1:8500/v1}\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        checkState(!isUriComponentSet, \"consulUri can't comes with other addressing options\");\n+        requireNonNull(consulUri, \"consulUri\");\n+        final String path = consulUri.getPath();\n+        checkArgument(!Strings.isNullOrEmpty(path) && !\"/\".equals(path),\n+                      \"consulUri has to contain version path\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: {@code /v1}\n+     * @param consulUri the URI of Consul API service, default: {@code http://127.0.0.1:8500/v1}\n+     */\n+    public ConsulClientBuilder consulUri(String consulUri) {\n+        return consulUri(URI.create(requireNonNull(consulUri, \"consulUri\")));\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service protocol scheme.\n+     * @param consulProtocol the protocol scheme of Consul API service, default: {@link SessionProtocol#HTTP}\n+     */\n+    public ConsulClientBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        checkState(consulUri == null, \"consulProtocol can't comes with consulUri\");\n+        requireNonNull(consulProtocol, \"consulProtocol\");\n+        this.consulProtocol = consulProtocol;\n+        isUriComponentSet = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service host address.\n+     * @param consulAddress the host address of Consul API service, default: {@code 127.0.0.1}\n+     */\n+    public ConsulClientBuilder consulAddress(String consulAddress) {\n+        checkState(consulUri == null, \"consulAddress can't comes with consulUri\");\n+        requireNonNull(consulAddress, \"consulAddress\");\n+        checkArgument(!consulAddress.isEmpty(), \"consulAddress can't be empty\");\n+        this.consulAddress = consulAddress;\n+        isUriComponentSet = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's HTTP service port.\n+     * @param consulPort the port of Consul agent, default: {@code 8500}\n+     */\n+    public ConsulClientBuilder consulPort(int consulPort) {\n+        checkState(consulUri == null, \"consulPort can't comes with consulUri\");\n+        checkArgument(consulPort > 0, \"consulPort can't be zero or negative\");\n+        this.consulPort = consulPort;\n+        isUriComponentSet = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API version.\n+     * @param consulApiVersion the version of Consul API service, default: {@code /v1}\n+     */\n+    public ConsulClientBuilder consulApiVersion(String consulApiVersion) {\n+        checkState(consulUri == null, \"consulApiVersion can't comes with consulUri\");\n+        requireNonNull(consulApiVersion, \"consulApiVersion\");\n+        checkArgument(!consulApiVersion.isEmpty(), \"consulApiVersion can't be empty\");\n+        checkArgument(consulApiVersion.charAt(0) != '/',\n+                      \"consulApiVersion can't starts with '/'\");", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5NjU0NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r502196545", "bodyText": "Oops! Ok.", "author": "eugene70", "createdAt": "2020-10-09T05:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA5NjYyOQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506096629", "bodyText": "How about checking using a regular expression? e.g. ^v[0-9][-._a-zA-Z0-9]*$", "author": "trustin", "createdAt": "2020-10-16T06:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MTI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NDAxOA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501564018", "bodyText": "Sorry, I missed the default values defined in this class.\nCould we use {@value ...} expression where possible. e.g. {@value #DEFAULT_CONSUL_ADDRESS}", "author": "ikhoon", "createdAt": "2020-10-08T09:07:42Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean isUriComponentSet;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: {@code /v1}\n+     * @param consulUri the URI of Consul API service, default: {@code http://127.0.0.1:8500/v1}\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        checkState(!isUriComponentSet, \"consulUri can't comes with other addressing options\");\n+        requireNonNull(consulUri, \"consulUri\");\n+        final String path = consulUri.getPath();\n+        checkArgument(!Strings.isNullOrEmpty(path) && !\"/\".equals(path),\n+                      \"consulUri has to contain version path\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: {@code /v1}\n+     * @param consulUri the URI of Consul API service, default: {@code http://127.0.0.1:8500/v1}\n+     */\n+    public ConsulClientBuilder consulUri(String consulUri) {\n+        return consulUri(URI.create(requireNonNull(consulUri, \"consulUri\")));\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service protocol scheme.\n+     * @param consulProtocol the protocol scheme of Consul API service, default: {@link SessionProtocol#HTTP}\n+     */\n+    public ConsulClientBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        checkState(consulUri == null, \"consulProtocol can't comes with consulUri\");\n+        requireNonNull(consulProtocol, \"consulProtocol\");\n+        this.consulProtocol = consulProtocol;\n+        isUriComponentSet = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service host address.\n+     * @param consulAddress the host address of Consul API service, default: {@code 127.0.0.1}", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5ODc0NA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r502198744", "bodyText": "Oh, that's great!", "author": "eugene70", "createdAt": "2020-10-09T05:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NDAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1MzA5OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501553099", "bodyText": "How about: a local Consul agent at the default Consul service port.?", "author": "trustin", "createdAt": "2020-10-08T08:50:53Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroup.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.ClientRequestContextCaptor;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A Consul-based {@link EndpointGroup} implementation that retrieves the list of {@link Endpoint}s\n+ * from Consul using <a href=\"https://www.consul.io/api\">Consul's RESTful HTTP API</a> and\n+ * updates the {@link Endpoint}s periodically.\n+ */\n+public final class ConsulEndpointGroup extends DynamicEndpointGroup {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConsulEndpointGroup.class);\n+\n+    /**\n+     * Returns a {@link ConsulEndpointGroup} with the specified {@code serviceName}.\n+     * The returned {@link ConsulEndpointGroup} will retrieve the list of {@link Endpoint}s from\n+     * a local Consul agent(using default Consul service port).", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwMDEzMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r502200132", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-09T05:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1MzA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1Nzk4MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501557981", "bodyText": "nit: {}. -> {}", "author": "trustin", "createdAt": "2020-10-08T08:58:25Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroup.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.ClientRequestContextCaptor;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A Consul-based {@link EndpointGroup} implementation that retrieves the list of {@link Endpoint}s\n+ * from Consul using <a href=\"https://www.consul.io/api\">Consul's RESTful HTTP API</a> and\n+ * updates the {@link Endpoint}s periodically.\n+ */\n+public final class ConsulEndpointGroup extends DynamicEndpointGroup {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConsulEndpointGroup.class);\n+\n+    /**\n+     * Returns a {@link ConsulEndpointGroup} with the specified {@code serviceName}.\n+     * The returned {@link ConsulEndpointGroup} will retrieve the list of {@link Endpoint}s from\n+     * a local Consul agent(using default Consul service port).\n+     */\n+    public static ConsulEndpointGroup of(String serviceName) {\n+        return builder(serviceName).build();\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link ConsulEndpointGroupBuilder} with the specified {@code serviceName}.\n+     */\n+    public static ConsulEndpointGroupBuilder builder(String serviceName) {\n+        return new ConsulEndpointGroupBuilder(serviceName);\n+    }\n+\n+    private final ConsulClient consulClient;\n+    private final String serviceName;\n+    private final long registryFetchIntervalSeconds;\n+    private final boolean useHealthyEndpoints;\n+\n+    @Nullable\n+    private volatile ScheduledFuture<?> scheduledFuture;\n+\n+    ConsulEndpointGroup(ConsulClient consulClient, String serviceName, long registryFetchIntervalSeconds,\n+                        boolean useHealthyEndpoints) {\n+        this.consulClient = requireNonNull(consulClient, \"consulClient\");\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+        this.registryFetchIntervalSeconds = registryFetchIntervalSeconds;\n+        this.useHealthyEndpoints = useHealthyEndpoints;\n+\n+        update();\n+    }\n+\n+    private void update() {\n+        if (isClosing()) {\n+            return;\n+        }\n+\n+        final CompletableFuture<List<Endpoint>> response;\n+        final EventLoop eventLoop;\n+        try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {\n+            if (useHealthyEndpoints) {\n+                response = consulClient.healthyEndpoints(serviceName);\n+            } else {\n+                response = consulClient.endpoints(serviceName);\n+            }\n+            eventLoop = captor.get().eventLoop().withoutContext();\n+        }\n+\n+        response.handle((endpoints, cause) -> {\n+            if (isClosing()) {\n+                return null;\n+            }\n+            if (cause != null) {\n+                logger.warn(\"Unexpected exception while fetching the registry from: {}.\" +\n+                            \" (serviceName: {})\", consulClient.uri(), serviceName, cause);", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIwMDI4Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r502200287", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-10-09T05:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1Nzk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1OTUxOQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501559519", "bodyText": "Could we keep the interval in milliseconds internally? A user may want to check service health at sub-second frequency.", "author": "trustin", "createdAt": "2020-10-08T09:00:41Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set, {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchInterval(Duration registryFetchInterval) {\n+        requireNonNull(registryFetchInterval, \"registryFetchInterval\");\n+        final long seconds = registryFetchInterval.getSeconds();\n+        checkArgument(seconds > 0, \"registryFetchInterval.getSeconds(): %s (expected: > 0)\", seconds);\n+        return registryFetchIntervalSeconds(seconds);\n+    }", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1OTkyNQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501559925", "bodyText": "requests. -> requests, in milliseconds.", "author": "trustin", "createdAt": "2020-10-08T09:01:20Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set, {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchInterval(Duration registryFetchInterval) {\n+        requireNonNull(registryFetchInterval, \"registryFetchInterval\");\n+        final long seconds = registryFetchInterval.getSeconds();\n+        checkArgument(seconds > 0, \"registryFetchInterval.getSeconds(): %s (expected: > 0)\", seconds);\n+        return registryFetchIntervalSeconds(seconds);\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NTkxNQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505645915", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-15T15:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1OTkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDExNg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501560116", "bodyText": "If not set,", "author": "trustin", "createdAt": "2020-10-08T09:01:37Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set, {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchInterval(Duration registryFetchInterval) {\n+        requireNonNull(registryFetchInterval, \"registryFetchInterval\");\n+        final long seconds = registryFetchInterval.getSeconds();\n+        checkArgument(seconds > 0, \"registryFetchInterval.getSeconds(): %s (expected: > 0)\", seconds);\n+        return registryFetchIntervalSeconds(seconds);\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyOTgzNw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505629837", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-10-15T15:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDgwNQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501560805", "bodyText": "Is there any reason why we are not using milliseconds here? It looks to me like we have control over the granularity of the interval.", "author": "trustin", "createdAt": "2020-10-08T09:02:41Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set, {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchInterval(Duration registryFetchInterval) {\n+        requireNonNull(registryFetchInterval, \"registryFetchInterval\");\n+        final long seconds = registryFetchInterval.getSeconds();\n+        checkArgument(seconds > 0, \"registryFetchInterval.getSeconds(): %s (expected: > 0)\", seconds);\n+        return registryFetchIntervalSeconds(seconds);\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchIntervalSeconds(long registryFetchIntervalSeconds) {", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzQwNA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r502183404", "bodyText": "Actually, this is my work. EurekaEndpointGroupBuilder takes the refresh interval as seconds precision. I'm not strong here and just followed the Eureka convension. :-)\n\n  \n    \n      armeria/eureka/src/main/java/com/linecorp/armeria/client/eureka/EurekaEndpointGroupBuilder.java\n    \n    \n         Line 205\n      in\n      e872d75\n    \n    \n    \n    \n\n        \n          \n           public EurekaEndpointGroupBuilder registryFetchIntervalSeconds(long registryFetchIntervalSeconds) {", "author": "ikhoon", "createdAt": "2020-10-09T04:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3MzA2Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503773066", "bodyText": "HealthCheckedEndpointGroup actually has retryIntervalMillis().. Perhaps we should deprecate one of them and use a unified unit? I'm slightly leaning towards milliseconds. Let me send a PR for EurekaEndpointGroup.", "author": "trustin", "createdAt": "2020-10-13T08:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4NjIzMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503786232", "bodyText": "#3108", "author": "trustin", "createdAt": "2020-10-13T09:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2Mzk5Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505663997", "bodyText": "Done.", "author": "eugene70", "createdAt": "2020-10-15T16:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MTM1Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501561357", "bodyText": "Make sure ... by Consul before enabling this feature.", "author": "trustin", "createdAt": "2020-10-08T09:03:35Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set, {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchInterval(Duration registryFetchInterval) {\n+        requireNonNull(registryFetchInterval, \"registryFetchInterval\");\n+        final long seconds = registryFetchInterval.getSeconds();\n+        checkArgument(seconds > 0, \"registryFetchInterval.getSeconds(): %s (expected: > 0)\", seconds);\n+        return registryFetchIntervalSeconds(seconds);\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchIntervalSeconds(long registryFetchIntervalSeconds) {\n+        checkArgument(registryFetchIntervalSeconds > 0, \"registryFetchIntervalSeconds: %s (expected: > 0)\",\n+                      registryFetchIntervalSeconds);\n+        this.registryFetchIntervalSeconds = registryFetchIntervalSeconds;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to use <a href=\"https://www.consul.io/api/health.html\">Health HTTP endpoint</a>.\n+     * Before enabling this feature, make sure that your target endpoints are health-checked by Consul.", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNzkzNA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r502707934", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-10-09T23:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MTM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MTY2MA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501561660", "bodyText": "Please move this method after all chaining methods for consistency with other builder classes.", "author": "trustin", "createdAt": "2020-10-08T09:04:06Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS = 10;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalSeconds = DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set, {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchInterval(Duration registryFetchInterval) {\n+        requireNonNull(registryFetchInterval, \"registryFetchInterval\");\n+        final long seconds = registryFetchInterval.getSeconds();\n+        checkArgument(seconds > 0, \"registryFetchInterval.getSeconds(): %s (expected: > 0)\", seconds);\n+        return registryFetchIntervalSeconds(seconds);\n+    }\n+\n+    /**\n+     * Sets the interval between fetching registry requests.\n+     * If not set {@value #DEFAULT_HEALTH_CHECK_INTERVAL_SECONDS} is used by default.\n+     */\n+    public ConsulEndpointGroupBuilder registryFetchIntervalSeconds(long registryFetchIntervalSeconds) {\n+        checkArgument(registryFetchIntervalSeconds > 0, \"registryFetchIntervalSeconds: %s (expected: > 0)\",\n+                      registryFetchIntervalSeconds);\n+        this.registryFetchIntervalSeconds = registryFetchIntervalSeconds;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets whether to use <a href=\"https://www.consul.io/api/health.html\">Health HTTP endpoint</a>.\n+     * Before enabling this feature, make sure that your target endpoints are health-checked by Consul.\n+     *\n+     * @see ConsulUpdatingListenerBuilder#checkUri(URI)\n+     */\n+    public ConsulEndpointGroupBuilder useHealthEndpoints(boolean useHealthyEndpoints) {\n+        this.useHealthyEndpoints = useHealthyEndpoints;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link ConsulEndpointGroup}.\n+     */\n+    public ConsulEndpointGroup build() {\n+        return new ConsulEndpointGroup(buildClient(), serviceName, registryFetchIntervalSeconds,\n+                                       useHealthyEndpoints);\n+    }", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwODI0NA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r502708244", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-09T23:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MzYwOQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501563609", "bodyText": "No URI encoding?", "author": "trustin", "createdAt": "2020-10-08T09:06:59Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/AgentServiceClient.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/agent/service.html\">Agent HTTP API</a>.\n+ */\n+final class AgentServiceClient {\n+\n+    static AgentServiceClient of(ConsulClient consulClient) {\n+        return new AgentServiceClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private AgentServiceClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Registers a service into the Consul agent.\n+     */\n+    HttpResponse register(String serviceId, String serviceName, String address, int port,\n+                          @Nullable Check check) {\n+        final Service service = new Service(serviceId, serviceName, address, port, check);\n+        try {\n+            return client.put(\"/agent/service/register\", mapper.writeValueAsString(service));\n+        } catch (JsonProcessingException e) {\n+            return HttpResponse.ofFailure(e);\n+        }\n+    }\n+\n+    /**\n+     * De-registers a service from the Consul agent.\n+     */\n+    HttpResponse deregister(String serviceId) {\n+        requireNonNull(serviceId, \"serviceId\");\n+        return client.put(\"/agent/service/deregister/\" + serviceId, HttpData.empty());", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4ODU1Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503888557", "bodyText": "I applied to encode.", "author": "eugene70", "createdAt": "2020-10-13T11:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MzYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NDIxNw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501564217", "bodyText": "Ditto - please make sure we do URI encoding for all path components.", "author": "trustin", "createdAt": "2020-10-08T09:08:00Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/CatalogClient.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.CollectionType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.util.Exceptions;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/catalog.html\">Catalog HTTP API</a>.\n+ */\n+final class CatalogClient {\n+\n+    private static final CollectionType collectionTypeForNode =\n+            TypeFactory.defaultInstance().constructCollectionType(List.class, Node.class);\n+\n+    static CatalogClient of(ConsulClient consulClient) {\n+        return new CatalogClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private CatalogClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Gets endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> endpoints(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        return service(serviceName)\n+                .thenApply(nodes -> nodes.stream()\n+                                         .map(CatalogClient::convertToEndpoint)\n+                                         .collect(toImmutableList()));\n+    }\n+\n+    /**\n+     * Returns node list with service name.\n+     */\n+    @VisibleForTesting\n+    CompletableFuture<List<Node>> service(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+\n+        return client.get(\"/catalog/service/\" + serviceName)", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4Nzk2NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503887965", "bodyText": "Ok, I applied.", "author": "eugene70", "createdAt": "2020-10-13T11:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NDIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkyODE3NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503928175", "bodyText": "Is there any smarter way to apply the encoding? URLEncoder.encode(path, \"UTF-8\") is a bit cumbersome.", "author": "eugene70", "createdAt": "2020-10-13T12:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NDIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzNDY5MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503934691", "bodyText": "PercentEncoder.encodeComponent() ?", "author": "trustin", "createdAt": "2020-10-13T13:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NDIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1MDI4OA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503950288", "bodyText": "Oh, I got it. Thanks.", "author": "eugene70", "createdAt": "2020-10-13T13:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NDIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NTQ0OA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501565448", "bodyText": "Please move before non-static members.", "author": "trustin", "createdAt": "2020-10-08T09:10:02Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final AgentServiceClient agentClient;\n+    private final CatalogClient catalogClient;\n+    private final HealthClient healthClient;\n+\n+    public static ConsulClientBuilder builder() {\n+        return new ConsulClientBuilder();\n+    }", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5NzUwMQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503897501", "bodyText": "Yep! Always confused.", "author": "eugene70", "createdAt": "2020-10-13T12:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NTQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NjI2Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501566263", "bodyText": "Could use HttpHeaderNames.of(\"x-consul-token\") instead. Should keep it as a static final field.", "author": "trustin", "createdAt": "2020-10-08T09:11:16Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final AgentServiceClient agentClient;\n+    private final CatalogClient catalogClient;\n+    private final HealthClient healthClient;\n+\n+    public static ConsulClientBuilder builder() {\n+        return new ConsulClientBuilder();\n+    }\n+\n+    ConsulClient(URI uri, @Nullable String token) {\n+        final WebClientBuilder builder = WebClient.builder(uri);\n+        builder.options(retryingClientOptions);\n+        if (token != null) {\n+            // TODO(eugene70) test with token\n+            builder.addHeader(\"X-Consul-Token\", token);", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkwNzIxOQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r503907219", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-10-13T12:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NjI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NjQ3OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501566479", "bodyText": "Could we add a test if we did not yet?", "author": "trustin", "createdAt": "2020-10-08T09:11:36Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.\n+ */\n+public final class ConsulClient {\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private static final ClientOptions retryingClientOptions =\n+            ClientOptions.of(ClientOptions.DECORATION.newValue(ClientDecoration.of(\n+                    RetryingClient.newDecorator(RetryRule.failsafe(), 3))));\n+\n+    private final WebClient webClient;\n+    private final AgentServiceClient agentClient;\n+    private final CatalogClient catalogClient;\n+    private final HealthClient healthClient;\n+\n+    public static ConsulClientBuilder builder() {\n+        return new ConsulClientBuilder();\n+    }\n+\n+    ConsulClient(URI uri, @Nullable String token) {\n+        final WebClientBuilder builder = WebClient.builder(uri);\n+        builder.options(retryingClientOptions);\n+        if (token != null) {\n+            // TODO(eugene70) test with token", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NDU1Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505564553", "bodyText": "Done!\nNow we use the token for the tests by default except testing 403.", "author": "eugene70", "createdAt": "2020-10-15T13:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2NjQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTE3OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501569179", "bodyText": "Could prepend ? here so we don't have to later.", "author": "trustin", "createdAt": "2020-10-08T09:15:53Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/HealthClient.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.QueryParams;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/health.html\">Health Endpoint API</a>.\n+ */\n+final class HealthClient {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HealthClient.class);\n+\n+    private static final String PASSING_PARAM = QueryParams.of(\"passing\", true).toQueryString();", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3MzQxOA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505573418", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-15T14:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTI5MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501569291", "bodyText": "URI encoding", "author": "trustin", "createdAt": "2020-10-08T09:16:05Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/HealthClient.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.QueryParams;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/health.html\">Health Endpoint API</a>.\n+ */\n+final class HealthClient {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HealthClient.class);\n+\n+    private static final String PASSING_PARAM = QueryParams.of(\"passing\", true).toQueryString();\n+\n+    static HealthClient of(ConsulClient consulClient) {\n+        return new HealthClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private HealthClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Returns a healthy endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> healthyEndpoints(String serviceName) {\n+        return client\n+                .get(\"/health/service/\" + serviceName + '?' + PASSING_PARAM)", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3MzI2MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505573261", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-10-15T14:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTUyNA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501569524", "bodyText": "{}. -> {}", "author": "trustin", "createdAt": "2020-10-08T09:16:25Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/HealthClient.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.QueryParams;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/health.html\">Health Endpoint API</a>.\n+ */\n+final class HealthClient {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HealthClient.class);\n+\n+    private static final String PASSING_PARAM = QueryParams.of(\"passing\", true).toQueryString();\n+\n+    static HealthClient of(ConsulClient consulClient) {\n+        return new HealthClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private HealthClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Returns a healthy endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> healthyEndpoints(String serviceName) {\n+        return client\n+                .get(\"/health/service/\" + serviceName + '?' + PASSING_PARAM)\n+                .aggregate()\n+                .handle((response, cause) -> {\n+                    if (cause != null) {\n+                        logger.warn(\"Unexpected exception while fetching the registry from Consul: {}.\" +", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NTgxMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505575813", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-15T14:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTczNw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501569737", "bodyText": "{}. -> {}", "author": "trustin", "createdAt": "2020-10-08T09:16:46Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/HealthClient.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.QueryParams;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/health.html\">Health Endpoint API</a>.\n+ */\n+final class HealthClient {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HealthClient.class);\n+\n+    private static final String PASSING_PARAM = QueryParams.of(\"passing\", true).toQueryString();\n+\n+    static HealthClient of(ConsulClient consulClient) {\n+        return new HealthClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private HealthClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Returns a healthy endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> healthyEndpoints(String serviceName) {\n+        return client\n+                .get(\"/health/service/\" + serviceName + '?' + PASSING_PARAM)\n+                .aggregate()\n+                .handle((response, cause) -> {\n+                    if (cause != null) {\n+                        logger.warn(\"Unexpected exception while fetching the registry from Consul: {}.\" +\n+                                    \" (serviceName: {})\", client.uri(), serviceName,\n+                                    cause);\n+                        return null;\n+                    }\n+\n+                    final HttpStatus status = response.status();\n+                    final String content = response.contentUtf8();\n+                    if (!status.isSuccess()) {\n+                        logger.warn(\"Unexpected response from Consul: {}. (status: {}, content: {}, \" +", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NTk4Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505575986", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-15T14:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2OTczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MDAyMQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501570021", "bodyText": "{}. -> {}", "author": "trustin", "createdAt": "2020-10-08T09:17:16Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/HealthClient.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.QueryParams;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/health.html\">Health Endpoint API</a>.\n+ */\n+final class HealthClient {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HealthClient.class);\n+\n+    private static final String PASSING_PARAM = QueryParams.of(\"passing\", true).toQueryString();\n+\n+    static HealthClient of(ConsulClient consulClient) {\n+        return new HealthClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private HealthClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Returns a healthy endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> healthyEndpoints(String serviceName) {\n+        return client\n+                .get(\"/health/service/\" + serviceName + '?' + PASSING_PARAM)\n+                .aggregate()\n+                .handle((response, cause) -> {\n+                    if (cause != null) {\n+                        logger.warn(\"Unexpected exception while fetching the registry from Consul: {}.\" +\n+                                    \" (serviceName: {})\", client.uri(), serviceName,\n+                                    cause);\n+                        return null;\n+                    }\n+\n+                    final HttpStatus status = response.status();\n+                    final String content = response.contentUtf8();\n+                    if (!status.isSuccess()) {\n+                        logger.warn(\"Unexpected response from Consul: {}. (status: {}, content: {}, \" +\n+                                    \"serviceName: {})\", client.uri(), status,\n+                                    content, serviceName);\n+                        return null;\n+                    }\n+\n+                    try {\n+                        return Arrays.stream(mapper.readValue(content, HealthService[].class))\n+                                     .map(HealthClient::toEndpoint)\n+                                     .collect(toImmutableList());\n+                    } catch (IOException e) {\n+                        logger.warn(\"Unexpected exception while parsing a response from Consul: {}. \" +", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NjA3Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505576072", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-15T14:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MDAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MDY2Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501570667", "bodyText": "final?", "author": "trustin", "createdAt": "2020-10-08T09:18:18Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListener.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Inet4Address;\n+import java.net.URI;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.util.SystemInfo;\n+import com.linecorp.armeria.internal.consul.Check;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.ServerListenerAdapter;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+/**\n+ * A {@link ServerListener} which registers the current {@link Server} to\n+ * <a href=\"https://www.consul.io\">Consul</a>.\n+ */\n+public class ConsulUpdatingListener extends ServerListenerAdapter {", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NjgwMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505576803", "bodyText": "Yep.", "author": "eugene70", "createdAt": "2020-10-15T14:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MDY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MTQwNg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501571406", "bodyText": ".name() because toString() is for human-friendly representation?", "author": "trustin", "createdAt": "2020-10-08T09:19:36Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListener.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Inet4Address;\n+import java.net.URI;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.util.SystemInfo;\n+import com.linecorp.armeria.internal.consul.Check;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.ServerListenerAdapter;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+/**\n+ * A {@link ServerListener} which registers the current {@link Server} to\n+ * <a href=\"https://www.consul.io\">Consul</a>.\n+ */\n+public class ConsulUpdatingListener extends ServerListenerAdapter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConsulUpdatingListener.class);\n+\n+    /**\n+     * Returns a {@link ConsulUpdatingListenerBuilder} that builds {@link ConsulUpdatingListener}.\n+     * @param serviceName the service name which is registered into Consul.\n+     */\n+    public static ConsulUpdatingListenerBuilder builder(String serviceName) {\n+        return new ConsulUpdatingListenerBuilder(serviceName);\n+    }\n+\n+    private final ConsulClient consulClient;\n+    private final String serviceName;\n+\n+    @Nullable\n+    private final Endpoint endpoint;\n+    @Nullable\n+    private final Check check;\n+    @Nullable\n+    private String serviceId;\n+\n+    ConsulUpdatingListener(ConsulClient consulClient, String serviceName, @Nullable Endpoint endpoint,\n+                           @Nullable URI checkUrl, @Nullable HttpMethod checkMethod, String checkInterval) {\n+        this.consulClient = requireNonNull(consulClient, \"consulClient\");\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+        this.endpoint = endpoint;\n+\n+        if (checkUrl != null) {\n+            final Check check = new Check();\n+            check.setHttp(checkUrl.toString());\n+            if (checkMethod != null) {\n+                check.setMethod(checkMethod.toString());", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3OTcwNQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505579705", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-10-15T14:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MTQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MjE5Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501572193", "bodyText": "{}. -> {}", "author": "trustin", "createdAt": "2020-10-08T09:20:52Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListener.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Inet4Address;\n+import java.net.URI;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.util.SystemInfo;\n+import com.linecorp.armeria.internal.consul.Check;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.ServerListenerAdapter;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+/**\n+ * A {@link ServerListener} which registers the current {@link Server} to\n+ * <a href=\"https://www.consul.io\">Consul</a>.\n+ */\n+public class ConsulUpdatingListener extends ServerListenerAdapter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConsulUpdatingListener.class);\n+\n+    /**\n+     * Returns a {@link ConsulUpdatingListenerBuilder} that builds {@link ConsulUpdatingListener}.\n+     * @param serviceName the service name which is registered into Consul.\n+     */\n+    public static ConsulUpdatingListenerBuilder builder(String serviceName) {\n+        return new ConsulUpdatingListenerBuilder(serviceName);\n+    }\n+\n+    private final ConsulClient consulClient;\n+    private final String serviceName;\n+\n+    @Nullable\n+    private final Endpoint endpoint;\n+    @Nullable\n+    private final Check check;\n+    @Nullable\n+    private String serviceId;\n+\n+    ConsulUpdatingListener(ConsulClient consulClient, String serviceName, @Nullable Endpoint endpoint,\n+                           @Nullable URI checkUrl, @Nullable HttpMethod checkMethod, String checkInterval) {\n+        this.consulClient = requireNonNull(consulClient, \"consulClient\");\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+        this.endpoint = endpoint;\n+\n+        if (checkUrl != null) {\n+            final Check check = new Check();\n+            check.setHttp(checkUrl.toString());\n+            if (checkMethod != null) {\n+                check.setMethod(checkMethod.toString());\n+            }\n+            check.setInterval(checkInterval);\n+            this.check = check;\n+        } else {\n+            check = null;\n+        }\n+    }\n+\n+    @Override\n+    public void serverStarted(Server server) throws Exception {\n+        final Endpoint endpoint = getEndpoint(server);\n+        final String serviceId = serviceName + '.' + Long.toHexString(ThreadLocalRandom.current().nextLong());\n+        consulClient.register(serviceId, serviceName, endpoint, check)\n+                    .aggregate()\n+                    .handle((res, cause) -> {\n+                  if (cause != null) {\n+                      logger.warn(\"Failed to register {}:{} to Consul: {}\",\n+                                  endpoint.host(), endpoint.port(), consulClient.uri(), cause);\n+                      return null;\n+                  }\n+\n+                  if (res.status() != HttpStatus.OK) {\n+                      logger.warn(\"Failed to register {}:{} to Consul: {}. (status: {}, content: {})\",", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU4MjQ1MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505582451", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-10-15T14:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MjE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MzA2NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501573065", "bodyText": "Missing return or else ?", "author": "trustin", "createdAt": "2020-10-08T09:22:13Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListener.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Inet4Address;\n+import java.net.URI;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.util.SystemInfo;\n+import com.linecorp.armeria.internal.consul.Check;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.ServerListenerAdapter;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+/**\n+ * A {@link ServerListener} which registers the current {@link Server} to\n+ * <a href=\"https://www.consul.io\">Consul</a>.\n+ */\n+public class ConsulUpdatingListener extends ServerListenerAdapter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConsulUpdatingListener.class);\n+\n+    /**\n+     * Returns a {@link ConsulUpdatingListenerBuilder} that builds {@link ConsulUpdatingListener}.\n+     * @param serviceName the service name which is registered into Consul.\n+     */\n+    public static ConsulUpdatingListenerBuilder builder(String serviceName) {\n+        return new ConsulUpdatingListenerBuilder(serviceName);\n+    }\n+\n+    private final ConsulClient consulClient;\n+    private final String serviceName;\n+\n+    @Nullable\n+    private final Endpoint endpoint;\n+    @Nullable\n+    private final Check check;\n+    @Nullable\n+    private String serviceId;\n+\n+    ConsulUpdatingListener(ConsulClient consulClient, String serviceName, @Nullable Endpoint endpoint,\n+                           @Nullable URI checkUrl, @Nullable HttpMethod checkMethod, String checkInterval) {\n+        this.consulClient = requireNonNull(consulClient, \"consulClient\");\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+        this.endpoint = endpoint;\n+\n+        if (checkUrl != null) {\n+            final Check check = new Check();\n+            check.setHttp(checkUrl.toString());\n+            if (checkMethod != null) {\n+                check.setMethod(checkMethod.toString());\n+            }\n+            check.setInterval(checkInterval);\n+            this.check = check;\n+        } else {\n+            check = null;\n+        }\n+    }\n+\n+    @Override\n+    public void serverStarted(Server server) throws Exception {\n+        final Endpoint endpoint = getEndpoint(server);\n+        final String serviceId = serviceName + '.' + Long.toHexString(ThreadLocalRandom.current().nextLong());\n+        consulClient.register(serviceId, serviceName, endpoint, check)\n+                    .aggregate()\n+                    .handle((res, cause) -> {\n+                  if (cause != null) {\n+                      logger.warn(\"Failed to register {}:{} to Consul: {}\",\n+                                  endpoint.host(), endpoint.port(), consulClient.uri(), cause);\n+                      return null;\n+                  }\n+\n+                  if (res.status() != HttpStatus.OK) {\n+                      logger.warn(\"Failed to register {}:{} to Consul: {}. (status: {}, content: {})\",\n+                                  endpoint.host(), endpoint.port(), consulClient.uri(), res.status(),\n+                                  res.contentUtf8());\n+                      return null;\n+                  }\n+\n+                  logger.info(\"Registered {}:{} to Consul: {}\",\n+                              endpoint.host(), endpoint.port(), consulClient.uri());\n+                  this.serviceId = serviceId;\n+                  return null;\n+              });\n+    }\n+\n+    private Endpoint getEndpoint(Server server) {\n+        if (endpoint != null) {\n+            if (endpoint.hasPort()) {\n+                warnIfInactivePort(server, endpoint.port());\n+            }\n+            return endpoint;\n+        }\n+        return defaultEndpoint(server);\n+    }\n+\n+    private static Endpoint defaultEndpoint(Server server) {\n+        final ServerPort serverPort = server.activePort();\n+        assert serverPort != null;\n+\n+        final Inet4Address inet4Address = SystemInfo.defaultNonLoopbackIpV4Address();\n+        final String host = inet4Address != null ? inet4Address.getHostAddress() : server.defaultHostname();\n+        return Endpoint.of(host, serverPort.localAddress().getPort());\n+    }\n+\n+    private static void warnIfInactivePort(Server server, int port) {\n+        for (ServerPort serverPort : server.activePorts().values()) {\n+            if (serverPort.localAddress().getPort() == port) {\n+                return;\n+            }\n+        }\n+        logger.warn(\"The specified port number {} does not exist. (expected one of activePorts: {})\",\n+                    port, server.activePorts());\n+    }\n+\n+    @Override\n+    public void serverStopping(Server server) {\n+        if (serviceId != null) {\n+            consulClient.deregister(serviceId)\n+                        .aggregate()\n+                        .handle((res, cause) -> {\n+                      if (cause != null) {\n+                          logger.warn(\"Failed to deregister {} from Consul: {}\",\n+                                      serviceId, consulClient.uri(), cause);\n+                      }", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5MDE0Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505590142", "bodyText": "Yes, I changed to else if structure.", "author": "eugene70", "createdAt": "2020-10-15T14:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MzA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NTE2Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r501575166", "bodyText": "Do you think it's a good idea to remove all these methods in favor of consulUri? Consul agent seems to run at localhost in most cases, so I guess these methods will not be used very often.", "author": "trustin", "createdAt": "2020-10-08T09:25:38Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean isUriComponentSet;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: {@code /v1}\n+     * @param consulUri the URI of Consul API service, default: {@code http://127.0.0.1:8500/v1}\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {\n+        checkState(!isUriComponentSet, \"consulUri can't comes with other addressing options\");\n+        requireNonNull(consulUri, \"consulUri\");\n+        final String path = consulUri.getPath();\n+        checkArgument(!Strings.isNullOrEmpty(path) && !\"/\".equals(path),\n+                      \"consulUri has to contain version path\");\n+        this.consulUri = consulUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: {@code /v1}\n+     * @param consulUri the URI of Consul API service, default: {@code http://127.0.0.1:8500/v1}\n+     */\n+    public ConsulClientBuilder consulUri(String consulUri) {\n+        return consulUri(URI.create(requireNonNull(consulUri, \"consulUri\")));\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service protocol scheme.\n+     * @param consulProtocol the protocol scheme of Consul API service, default: {@link SessionProtocol#HTTP}\n+     */\n+    public ConsulClientBuilder consulProtocol(SessionProtocol consulProtocol) {\n+        checkState(consulUri == null, \"consulProtocol can't comes with consulUri\");\n+        requireNonNull(consulProtocol, \"consulProtocol\");\n+        this.consulProtocol = consulProtocol;\n+        isUriComponentSet = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service host address.\n+     * @param consulAddress the host address of Consul API service, default: {@code 127.0.0.1}\n+     */\n+    public ConsulClientBuilder consulAddress(String consulAddress) {\n+        checkState(consulUri == null, \"consulAddress can't comes with consulUri\");\n+        requireNonNull(consulAddress, \"consulAddress\");\n+        checkArgument(!consulAddress.isEmpty(), \"consulAddress can't be empty\");\n+        this.consulAddress = consulAddress;\n+        isUriComponentSet = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's HTTP service port.\n+     * @param consulPort the port of Consul agent, default: {@code 8500}\n+     */\n+    public ConsulClientBuilder consulPort(int consulPort) {\n+        checkState(consulUri == null, \"consulPort can't comes with consulUri\");\n+        checkArgument(consulPort > 0, \"consulPort can't be zero or negative\");\n+        this.consulPort = consulPort;\n+        isUriComponentSet = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API version.\n+     * @param consulApiVersion the version of Consul API service, default: {@code /v1}\n+     */\n+    public ConsulClientBuilder consulApiVersion(String consulApiVersion) {\n+        checkState(consulUri == null, \"consulApiVersion can't comes with consulUri\");\n+        requireNonNull(consulApiVersion, \"consulApiVersion\");\n+        checkArgument(!consulApiVersion.isEmpty(), \"consulApiVersion can't be empty\");\n+        checkArgument(consulApiVersion.charAt(0) != '/',\n+                      \"consulApiVersion can't starts with '/'\");\n+        this.consulApiVersion = consulApiVersion;\n+        isUriComponentSet = true;\n+        return this;\n+    }", "originalCommit": "417f8a151a1ed25f9a7edc1f131db56c23e093ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMDI3Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505620277", "bodyText": "Does that mean it would be better to remove the alternative methods except for consul Uri?\nThese methods are designed for such cases, but if they are verbose we can safely delete them. However, it may be confusing to users regarding the version. Most users will not be interested in the API version. Would it be better to leave only the URI and version?", "author": "eugene70", "createdAt": "2020-10-15T15:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NTE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyODAwNg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r505628006", "bodyText": "Nonetheless, I think it wouldn't be bad to leave it as it is. Because in many cases we will only change the port or protocol, like this:\nConsulEndpointGroup endpointGroup =\n                     ConsulEndpointGroup.builder(SERVICE_NAME)\n                                        .consulPort(CONSUL_AGENT_PORT)\n                                        .consulToken(TOKEN)\n                                        .build();", "author": "eugene70", "createdAt": "2020-10-15T15:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NTE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA5MTMyOQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506091329", "bodyText": "OK. That's fine as well.", "author": "trustin", "createdAt": "2020-10-16T06:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NTE2Ng=="}], "type": "inlineReview"}, {"oid": "f3bd6a2ae4688bfd26d3aad30e335a68d3d344e9", "url": "https://github.com/line/armeria/commit/f3bd6a2ae4688bfd26d3aad30e335a68d3d344e9", "message": "Apply reviews\n\n- Milliseconds instead seconds\n- Path be URI encoded\n- ...", "committedDate": "2020-10-15T16:24:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA5NzgzMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506097830", "bodyText": "How about inlining a hard-coded string? i.e. path.append(\"?passing=true\")", "author": "trustin", "createdAt": "2020-10-16T06:52:06Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/HealthClient.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.QueryParams;\n+import com.linecorp.armeria.internal.common.PercentEncoder;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/health.html\">Health Endpoint API</a>.\n+ */\n+final class HealthClient {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HealthClient.class);\n+\n+    private static final String PASSING_PARAM = '?' +\n+                                                QueryParams.of(\"passing\", true).toQueryString();", "originalCommit": "f3bd6a2ae4688bfd26d3aad30e335a68d3d344e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExNjc0NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506116745", "bodyText": "Ok. Simple is good.", "author": "eugene70", "createdAt": "2020-10-16T07:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA5NzgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIxMjc5NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506212795", "bodyText": "regex also done.", "author": "eugene70", "createdAt": "2020-10-16T09:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA5NzgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMDc3Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506100776", "bodyText": "The second /** could be removed.", "author": "trustin", "createdAt": "2020-10-16T06:55:54Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/**\n+ /**", "originalCommit": "f3bd6a2ae4688bfd26d3aad30e335a68d3d344e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwNTM1Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506105356", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-16T07:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMDc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMjYxMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506102610", "bodyText": "What is the correct name of Consul token, just 'token', 'access token' or 'acl token'?", "author": "trustin", "createdAt": "2020-10-16T06:59:13Z", "path": "consul/src/test/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulTestBase;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListener;\n+\n+public class ConsulEndpointGroupTest extends ConsulTestBase {\n+\n+    static final List<Server> servers = new ArrayList<>();\n+\n+    @BeforeAll\n+    static void startServers() {\n+\n+        for (Endpoint endpoint : sampleEndpoints) {\n+            final Server server = Server.builder()\n+                                        .http(endpoint.port())\n+                                        .service(\"/\", new EchoService())\n+                                        .build();\n+            final ServerListener listener = ConsulUpdatingListener.builder(serviceName)\n+                                                                  .consulUri(\"http://127.0.0.1:\" +\n+                                                                             consul().getHttpPort() + \"/v1\")\n+                                                                  .consulToken(TOKEN)\n+                                                                  .build();\n+            server.addListener(listener);\n+            server.start().join();\n+            servers.add(server);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void stopServers() throws Exception {\n+        servers.forEach(Server::close);\n+        servers.clear();\n+    }\n+\n+    @Test\n+    void testConsulEndpointGroupWithClient() {\n+        try (ConsulEndpointGroup endpointGroup =\n+                     ConsulEndpointGroup.builder(serviceName)\n+                                        .consulProtocol(SessionProtocol.HTTP)\n+                                        .consulAddress(consul().getAddress())\n+                                        .consulPort(consul().getHttpPort())\n+                                        .consulApiVersion(\"v1\")\n+                                        .consulToken(TOKEN)", "originalCommit": "f3bd6a2ae4688bfd26d3aad30e335a68d3d344e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMzE4Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506113186", "bodyText": "Definitely, it may mean 'Consul ACL token', but hashicorp seems to use the three as synonyms: 'Consul token', 'ACL token', and just 'token'. There is no other meaning of token.", "author": "eugene70", "createdAt": "2020-10-16T07:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMjYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExNDk2Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506114967", "bodyText": "The constant will be changed to CONSUL_TOKEN.", "author": "eugene70", "createdAt": "2020-10-16T07:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMjYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzNjY3MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r506136671", "bodyText": "Ah, OK. Then fine with consulToken.", "author": "trustin", "createdAt": "2020-10-16T07:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMjYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyODkwMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r509028902", "bodyText": "This line can be removed.", "author": "trustin", "createdAt": "2020-10-21T06:50:10Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -116,8 +118,8 @@ public ConsulClientBuilder consulApiVersion(String consulApiVersion) {\n         checkState(consulUri == null, \"consulApiVersion can't comes with consulUri\");\n         requireNonNull(consulApiVersion, \"consulApiVersion\");\n         checkArgument(!consulApiVersion.isEmpty(), \"consulApiVersion can't be empty\");", "originalCommit": "45896effdaff94488af816685097a0d91ec6fb62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcxMjY4Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r509712686", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-10-21T21:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyODkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyOTIwOA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r509029208", "bodyText": "\"consulApiVersion: %s (expected: a version string that starts with 'v', e.g. 'v1')\", consulVersion", "author": "trustin", "createdAt": "2020-10-21T06:50:50Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -116,8 +118,8 @@ public ConsulClientBuilder consulApiVersion(String consulApiVersion) {\n         checkState(consulUri == null, \"consulApiVersion can't comes with consulUri\");\n         requireNonNull(consulApiVersion, \"consulApiVersion\");\n         checkArgument(!consulApiVersion.isEmpty(), \"consulApiVersion can't be empty\");\n-        checkArgument(consulApiVersion.charAt(0) != '/',\n-                      \"consulApiVersion can't starts with '/'\");\n+        checkArgument(CONSUL_VERSION_PATTERN.matcher(consulApiVersion).matches(),\n+                      \"consulApiVersion has unexpected format\");", "originalCommit": "45896effdaff94488af816685097a0d91ec6fb62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcxNDQ0OA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r509714448", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-21T21:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyOTIwOA=="}], "type": "inlineReview"}, {"oid": "a02470b585130671174b3d40bbd625f29d8255fa", "url": "https://github.com/line/armeria/commit/a02470b585130671174b3d40bbd625f29d8255fa", "message": "Fix consulApiVersion in ConsulClientBuilder\n- remove redundant check\n- change a check message\n- rename a constant", "committedDate": "2020-10-21T21:43:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4ODM3OA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r512388378", "bodyText": "RESTful and HTTP mean the same thing in this context so I think we can just use the word in the web site that is\nConsul's HTTP API", "author": "minwoox", "createdAt": "2020-10-27T03:01:48Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroup.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.ClientRequestContextCaptor;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A Consul-based {@link EndpointGroup} implementation that retrieves the list of {@link Endpoint}s\n+ * from Consul using <a href=\"https://www.consul.io/api\">Consul's RESTful HTTP API</a> and", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY4NDAxMQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r512684011", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-27T13:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4ODM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMTQwNQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519631405", "bodyText": "Gentle ping \ud83d\ude04", "author": "trustin", "createdAt": "2020-11-09T08:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4ODM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTU4Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r512389586", "bodyText": "I think we need a setter for the endpoint selection strategy.\nhttps://github.com/line/armeria/blob/master/eureka/src/main/java/com/linecorp/armeria/client/eureka/EurekaEndpointGroupBuilder.java#L101", "author": "minwoox", "createdAt": "2020-10-27T03:06:22Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ */\n+public final class ConsulEndpointGroupBuilder extends ConsulClientBuilder {\n+    private static final long DEFAULT_HEALTH_CHECK_INTERVAL_MILLIS = 10_000;\n+\n+    private final String serviceName;\n+    private long registryFetchIntervalMillis = DEFAULT_HEALTH_CHECK_INTERVAL_MILLIS;\n+    private boolean useHealthyEndpoints;\n+\n+    ConsulEndpointGroupBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+    }\n+", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2NzE2Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r513067162", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-10-27T22:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMjczOA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519632738", "bodyText": "You can copy from here: \n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroupBuilder.java\n    \n    \n         Line 173\n      in\n      c7edfb6\n    \n    \n    \n    \n\n        \n          \n           public DnsEndpointGroupBuilder selectionStrategy(EndpointSelectionStrategy selectionStrategy) {", "author": "trustin", "createdAt": "2020-11-09T08:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTcwOQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r512391709", "bodyText": "How about passing (URI)or (Strig uri) when creating this class and removing\nconsulUri(URI consulUri),\nconsulUri(String consulUri),\nconsulProtocol,\nconsulAddress,\nconsulPort,\nconsulAddress?\nIf we do that, we can remove the complex setting logic and simplify the uri setting.", "author": "minwoox", "createdAt": "2020-10-27T03:14:31Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.common.SessionProtocol;\n+\n+public class ConsulClientBuilder {\n+    private static final SessionProtocol DEFAULT_CONSUL_PROTOCOL = SessionProtocol.HTTP;\n+    private static final String DEFAULT_CONSUL_ADDRESS = \"127.0.0.1\";\n+    private static final int DEFAULT_CONSUL_PORT = 8500;\n+    private static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+    private static final Pattern CONSUL_API_VERSION_PATTERN = Pattern.compile(\"^v[0-9][-._a-zA-Z0-9]*$\");\n+\n+    @Nullable\n+    private URI consulUri;\n+    private SessionProtocol consulProtocol = DEFAULT_CONSUL_PROTOCOL;\n+    private String consulAddress = DEFAULT_CONSUL_ADDRESS;\n+    private int consulPort = DEFAULT_CONSUL_PORT;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+    private boolean isUriComponentSet;\n+\n+    protected ConsulClientBuilder() {\n+    }\n+\n+    /**\n+     * Sets the specified Consul's API service URI.\n+     * The URI should include the Consul API version at path, like: {@code /v1}\n+     * @param consulUri the URI of Consul API service, default: {@code http://127.0.0.1:8500/v1}\n+     */\n+    public ConsulClientBuilder consulUri(URI consulUri) {", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyOTk5MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r517929991", "bodyText": "We have discussed this above. I think that your opinion also is not bad. Shall I change it? As you said, the version seems to have to be separated.", "author": "eugene70", "createdAt": "2020-11-05T10:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzNjM2MA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r517936360", "bodyText": "Ah, I missed that. \ud83d\ude04\nI think if we just use the constructor which takes Strig consulUri that will greatly simplify the builder API. And also it will be consistent with the Eureka API.\nSo I prefer to use String consulUri but not super strong on it. So it's up to you. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-11-05T10:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNzAwMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r525117002", "bodyText": "Done.", "author": "eugene70", "createdAt": "2020-11-17T12:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTQ3MA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r512395470", "bodyText": "If serviceAddress and address are both null, I think we should return null (don't forget to mark @Nullable) and filter where this is called.\n.filter(Objects::nonNull)", "author": "minwoox", "createdAt": "2020-10-27T03:29:34Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/HealthClient.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.internal.common.PercentEncoder;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/health.html\">Health Endpoint API</a>.\n+ */\n+final class HealthClient {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(HealthClient.class);\n+\n+    private static final String PASSING_PARAM = \"?passing=true\";\n+\n+    static HealthClient of(ConsulClient consulClient) {\n+        return new HealthClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private HealthClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Returns a healthy endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> healthyEndpoints(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        final StringBuilder path = new StringBuilder(\"/health/service/\");\n+        PercentEncoder.encodeComponent(path, serviceName);\n+        path.append(PASSING_PARAM);\n+        return client\n+                .get(path.toString())\n+                .aggregate()\n+                .handle((response, cause) -> {\n+                    if (cause != null) {\n+                        logger.warn(\"Unexpected exception while fetching the registry from Consul: {}\" +\n+                                    \" (serviceName: {})\", client.uri(), serviceName,\n+                                    cause);\n+                        return null;\n+                    }\n+\n+                    final HttpStatus status = response.status();\n+                    final String content = response.contentUtf8();\n+                    if (!status.isSuccess()) {\n+                        logger.warn(\"Unexpected response from Consul: {} (status: {}, content: {},\" +\n+                                    \" serviceName: {})\", client.uri(), status,\n+                                    content, serviceName);\n+                        return null;\n+                    }\n+\n+                    try {\n+                        return Arrays.stream(mapper.readValue(content, HealthService[].class))\n+                                     .map(HealthClient::toEndpoint)\n+                                     .collect(toImmutableList());\n+                    } catch (IOException e) {\n+                        logger.warn(\"Unexpected exception while parsing a response from Consul: {}\" +\n+                                    \" (content: {}, serviceName: {})\",\n+                                    client.uri(), content, serviceName, e);\n+                        return null;\n+                    }\n+                });\n+    }\n+\n+    private static Endpoint toEndpoint(HealthService healthService) {\n+        final String host;\n+        if (!healthService.service.address.isEmpty()) {\n+            host = healthService.service.address;\n+        } else if (!healthService.node.address.isEmpty()) {\n+            host = healthService.node.address;\n+        } else {\n+            host = \"127.0.0.1\";", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NjQzMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r517366432", "bodyText": "@minwoox , how about using Optional?", "author": "eugene70", "createdAt": "2020-11-04T14:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MTEwMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r517371103", "bodyText": "Well, we prefer to use @Nullable instead of Optional for the API. So let's use just @Nullable for consistency. \ud83d\ude47", "author": "minwoox", "createdAt": "2020-11-04T14:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3MjIwMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r517372200", "bodyText": "Yes, I got it.", "author": "eugene70", "createdAt": "2020-11-04T14:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTcwMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r512395702", "bodyText": "ditto", "author": "minwoox", "createdAt": "2020-10-27T03:30:23Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/CatalogClient.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.CollectionType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.internal.common.PercentEncoder;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/catalog.html\">Catalog HTTP API</a>.\n+ */\n+final class CatalogClient {\n+\n+    private static final CollectionType collectionTypeForNode =\n+            TypeFactory.defaultInstance().constructCollectionType(List.class, Node.class);\n+\n+    static CatalogClient of(ConsulClient consulClient) {\n+        return new CatalogClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private CatalogClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Gets endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> endpoints(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        return service(serviceName)\n+                .thenApply(nodes -> nodes.stream()\n+                                         .map(CatalogClient::convertToEndpoint)\n+                                         .collect(toImmutableList()));\n+    }\n+\n+    /**\n+     * Returns node list with service name.\n+     */\n+    @VisibleForTesting\n+    CompletableFuture<List<Node>> service(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        final StringBuilder path = new StringBuilder(\"/catalog/service/\");\n+        PercentEncoder.encodeComponent(path, serviceName);\n+        return client.get(path.toString())\n+                     .aggregate()\n+                     .thenApply(response -> {\n+                         try {\n+                             return mapper.readValue(response.content().toStringUtf8(), collectionTypeForNode);\n+                         } catch (JsonProcessingException e) {\n+                             return Exceptions.throwUnsafely(e);\n+                         }\n+                     });\n+    }\n+\n+    private static Endpoint convertToEndpoint(Node node) {", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4NjY2MA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r517386660", "bodyText": "Fixed and renamed to toEndpoint()for consistency.", "author": "eugene70", "createdAt": "2020-11-04T14:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMzYyMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519633622", "bodyText": "I guess you forgot to push your commit \ud83d\ude09", "author": "trustin", "createdAt": "2020-11-09T08:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDcxNjY2Nw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r524716667", "bodyText": "I see. I didn't finish my homework.", "author": "eugene70", "createdAt": "2020-11-16T23:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjE5Mg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r512396192", "bodyText": "I think we can use byte[]\nreturn mapper.readValue(response.content().array(), collectionTypeForNode);", "author": "minwoox", "createdAt": "2020-10-27T03:32:13Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/CatalogClient.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.type.CollectionType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Strings;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.util.Exceptions;\n+import com.linecorp.armeria.internal.common.PercentEncoder;\n+\n+/**\n+ * A Consul client that is responsible for\n+ * <a href=\"https://www.consul.io/api/catalog.html\">Catalog HTTP API</a>.\n+ */\n+final class CatalogClient {\n+\n+    private static final CollectionType collectionTypeForNode =\n+            TypeFactory.defaultInstance().constructCollectionType(List.class, Node.class);\n+\n+    static CatalogClient of(ConsulClient consulClient) {\n+        return new CatalogClient(consulClient);\n+    }\n+\n+    private final WebClient client;\n+    private final ObjectMapper mapper;\n+\n+    private CatalogClient(ConsulClient client) {\n+        this.client = client.consulWebClient();\n+        mapper = client.getObjectMapper();\n+    }\n+\n+    /**\n+     * Gets endpoint list with service name.\n+     */\n+    CompletableFuture<List<Endpoint>> endpoints(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        return service(serviceName)\n+                .thenApply(nodes -> nodes.stream()\n+                                         .map(CatalogClient::convertToEndpoint)\n+                                         .collect(toImmutableList()));\n+    }\n+\n+    /**\n+     * Returns node list with service name.\n+     */\n+    @VisibleForTesting\n+    CompletableFuture<List<Node>> service(String serviceName) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        final StringBuilder path = new StringBuilder(\"/catalog/service/\");\n+        PercentEncoder.encodeComponent(path, serviceName);\n+        return client.get(path.toString())\n+                     .aggregate()\n+                     .thenApply(response -> {\n+                         try {\n+                             return mapper.readValue(response.content().toStringUtf8(), collectionTypeForNode);", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxNDc3MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r517314771", "bodyText": "Oh, it's good!", "author": "eugene70", "createdAt": "2020-11-04T12:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzODg1MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519638851", "bodyText": "will throw an", "author": "trustin", "createdAt": "2020-11-09T08:46:56Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListenerBuilder.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Builds a new {@link ConsulUpdatingListener}, which registers the server to Consul cluster.\n+ * <h3>Examples</h3>\n+ * <pre>{@code\n+ * ConsulUpdatingListener listener = ConsulUpdatingListener.builder(\"myService\")\n+ *                                                         .consulPort(8501\")\n+ *                                                         .build();\n+ * ServerBuilder sb = Server.builder();\n+ * sb.serverListener(listener);\n+ * }</pre>\n+ */\n+public final class ConsulUpdatingListenerBuilder extends ConsulClientBuilder {\n+\n+    private static final long DEFAULT_CHECK_INTERVAL_MILLIS = 10_000;\n+    private final String serviceName;\n+\n+    @Nullable\n+    private Endpoint serviceEndpoint;\n+    @Nullable\n+    private URI checkUri;\n+    private String checkInterval = DEFAULT_CHECK_INTERVAL_MILLIS + \"ms\";\n+    @Nullable\n+    private HttpMethod checkMethod;\n+\n+    /**\n+     * Creates a {@link ConsulUpdatingListenerBuilder} with a service name.\n+     *\n+     * @param serviceName the service name to register\n+     */\n+    ConsulUpdatingListenerBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!this.serviceName.isEmpty(), \"serviceName can't be empty\");\n+    }\n+\n+    /**\n+     * Sets URI for checking health by Consul agent.\n+     *\n+     * @param checkUri the URI for checking health of service\n+     */\n+    public ConsulUpdatingListenerBuilder checkUri(URI checkUri) {\n+        this.checkUri = requireNonNull(checkUri, \"checkUri\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets URI for checking health by Consul agent.\n+     *\n+     * @param checkUri the URI for checking health of service\n+     */\n+    public ConsulUpdatingListenerBuilder checkUri(String checkUri) {\n+        requireNonNull(checkUri, \"checkUri\");\n+        checkArgument(!checkUri.isEmpty(), \"checkUri can't be empty\");\n+        return checkUri(URI.create(checkUri));\n+    }\n+\n+    /**\n+     * Sets HTTP method for checking health by Consul agent.\n+     *\n+     * <p>Note that the {@code checkMethod} should be configured with {@link #checkUri(String)}.\n+     * Otherwise, the {@link #build()} method will throws {@link IllegalStateException}.", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxMzkxMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519713913", "bodyText": "Yep!", "author": "eugene70", "createdAt": "2020-11-09T10:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzODg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzODkyOQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519638929", "bodyText": "will throw an", "author": "trustin", "createdAt": "2020-11-09T08:47:03Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListenerBuilder.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Builds a new {@link ConsulUpdatingListener}, which registers the server to Consul cluster.\n+ * <h3>Examples</h3>\n+ * <pre>{@code\n+ * ConsulUpdatingListener listener = ConsulUpdatingListener.builder(\"myService\")\n+ *                                                         .consulPort(8501\")\n+ *                                                         .build();\n+ * ServerBuilder sb = Server.builder();\n+ * sb.serverListener(listener);\n+ * }</pre>\n+ */\n+public final class ConsulUpdatingListenerBuilder extends ConsulClientBuilder {\n+\n+    private static final long DEFAULT_CHECK_INTERVAL_MILLIS = 10_000;\n+    private final String serviceName;\n+\n+    @Nullable\n+    private Endpoint serviceEndpoint;\n+    @Nullable\n+    private URI checkUri;\n+    private String checkInterval = DEFAULT_CHECK_INTERVAL_MILLIS + \"ms\";\n+    @Nullable\n+    private HttpMethod checkMethod;\n+\n+    /**\n+     * Creates a {@link ConsulUpdatingListenerBuilder} with a service name.\n+     *\n+     * @param serviceName the service name to register\n+     */\n+    ConsulUpdatingListenerBuilder(String serviceName) {\n+        this.serviceName = requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!this.serviceName.isEmpty(), \"serviceName can't be empty\");\n+    }\n+\n+    /**\n+     * Sets URI for checking health by Consul agent.\n+     *\n+     * @param checkUri the URI for checking health of service\n+     */\n+    public ConsulUpdatingListenerBuilder checkUri(URI checkUri) {\n+        this.checkUri = requireNonNull(checkUri, \"checkUri\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets URI for checking health by Consul agent.\n+     *\n+     * @param checkUri the URI for checking health of service\n+     */\n+    public ConsulUpdatingListenerBuilder checkUri(String checkUri) {\n+        requireNonNull(checkUri, \"checkUri\");\n+        checkArgument(!checkUri.isEmpty(), \"checkUri can't be empty\");\n+        return checkUri(URI.create(checkUri));\n+    }\n+\n+    /**\n+     * Sets HTTP method for checking health by Consul agent.\n+     *\n+     * <p>Note that the {@code checkMethod} should be configured with {@link #checkUri(String)}.\n+     * Otherwise, the {@link #build()} method will throws {@link IllegalStateException}.\n+     *\n+     * @param checkMethod the {@link HttpMethod} for checking health of service\n+     */\n+    public ConsulUpdatingListenerBuilder checkMethod(HttpMethod checkMethod) {\n+        this.checkMethod = requireNonNull(checkMethod, \"checkMethod\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the specified {@link Duration} for checking health.\n+     * If not set {@value DEFAULT_CHECK_INTERVAL_MILLIS} milliseconds is used by default.\n+     *\n+     * <p>Note that the {@code checkInterval} should be configured with {@link #checkUri(URI)}.\n+     * Otherwise, the {@link #build()} method will throws {@link IllegalStateException}.", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxNDExMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519714112", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-11-09T10:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzODkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzOTQ5Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519639496", "bodyText": "Does it make sense to use HttpMethod.HEAD as the default?", "author": "trustin", "createdAt": "2020-11-09T08:48:10Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListenerBuilder.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Builds a new {@link ConsulUpdatingListener}, which registers the server to Consul cluster.\n+ * <h3>Examples</h3>\n+ * <pre>{@code\n+ * ConsulUpdatingListener listener = ConsulUpdatingListener.builder(\"myService\")\n+ *                                                         .consulPort(8501\")\n+ *                                                         .build();\n+ * ServerBuilder sb = Server.builder();\n+ * sb.serverListener(listener);\n+ * }</pre>\n+ */\n+public final class ConsulUpdatingListenerBuilder extends ConsulClientBuilder {\n+\n+    private static final long DEFAULT_CHECK_INTERVAL_MILLIS = 10_000;\n+    private final String serviceName;\n+\n+    @Nullable\n+    private Endpoint serviceEndpoint;\n+    @Nullable\n+    private URI checkUri;\n+    private String checkInterval = DEFAULT_CHECK_INTERVAL_MILLIS + \"ms\";\n+    @Nullable\n+    private HttpMethod checkMethod;", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyMjMyMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r523922322", "bodyText": "Yes, it makes sense. I tested this and applied it.", "author": "eugene70", "createdAt": "2020-11-16T06:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzOTQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MDMwMQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r519640301", "bodyText": "checkUri (not l but i)", "author": "trustin", "createdAt": "2020-11-09T08:49:31Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListener.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Inet4Address;\n+import java.net.URI;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.util.SystemInfo;\n+import com.linecorp.armeria.internal.consul.Check;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.ServerListenerAdapter;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+/**\n+ * A {@link ServerListener} which registers the current {@link Server} to\n+ * <a href=\"https://www.consul.io\">Consul</a>.\n+ */\n+public final class ConsulUpdatingListener extends ServerListenerAdapter {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ConsulUpdatingListener.class);\n+\n+    /**\n+     * Returns a {@link ConsulUpdatingListenerBuilder} that builds {@link ConsulUpdatingListener}.\n+     * @param serviceName the service name which is registered into Consul.\n+     */\n+    public static ConsulUpdatingListenerBuilder builder(String serviceName) {\n+        return new ConsulUpdatingListenerBuilder(serviceName);\n+    }\n+\n+    private final ConsulClient consulClient;\n+    private final String serviceName;\n+\n+    @Nullable\n+    private final Endpoint endpoint;\n+    @Nullable\n+    private final Check check;\n+    @Nullable\n+    private String serviceId;\n+\n+    ConsulUpdatingListener(ConsulClient consulClient, String serviceName, @Nullable Endpoint endpoint,\n+                           @Nullable URI checkUrl, @Nullable HttpMethod checkMethod, String checkInterval) {", "originalCommit": "a02470b585130671174b3d40bbd625f29d8255fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkyMTg5MA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r523921890", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-11-16T06:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0MDMwMQ=="}], "type": "inlineReview"}, {"oid": "6c51302cc21c8c4beaf4787bcc82df7d050a7f72", "url": "https://github.com/line/armeria/commit/6c51302cc21c8c4beaf4787bcc82df7d050a7f72", "message": "Apply reviews - use HEAD method as the default\n\n- use HEAD as the default method in `ConsulUpdatingListenerBuilder`\n- use byte[] instead of String return in `CatalogClient`\n- trivial modifications", "committedDate": "2020-11-16T22:59:19Z", "type": "forcePushed"}, {"oid": "f5cc84a764be9673f9f9dc2b394c848a93ec6062", "url": "https://github.com/line/armeria/commit/f5cc84a764be9673f9f9dc2b394c848a93ec6062", "message": "Simplify builder classes\n\n* pass URI on constructor of builders\n  - ConsulClientBuilder\n  - ConsulEndpointGroupBuilder\n  - ConsulUpdatingListenerBuilder", "committedDate": "2020-11-19T08:38:20Z", "type": "forcePushed"}, {"oid": "1bfc0b4d145dbc731ca0d834133b5c678e288092", "url": "https://github.com/line/armeria/commit/1bfc0b4d145dbc731ca0d834133b5c678e288092", "message": "Hide JavaDocs of internal APIs\n\nIntroduce a builder interface ConsulConfigSetters\nMake ConsulClientBuilder, ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder implement ConsulConfigSetters.\nMake ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder implement ConsulConfigSetters by forwarding the calls to ConsulClientBuilder.\nConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder do not extend ConsulClientBuilder anymore. They just have ConsulClientBuilder as a member field and delegate calls.", "committedDate": "2020-11-20T01:40:38Z", "type": "forcePushed"}, {"oid": "2d5afd82c48a9e5168cd0db8c88f3025c99c5363", "url": "https://github.com/line/armeria/commit/2d5afd82c48a9e5168cd0db8c88f3025c99c5363", "message": "Hide JavaDocs of internal APIs\n\n- Introduce a builder interface ConsulConfigSetters\n- Make ConsulClientBuilder, ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters.\n- Make ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters by forwarding the calls to ConsulClientBuilder.\n- ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder do not extend ConsulClientBuilder anymore.\n  They just have ConsulClientBuilder as a member field and delegate calls.", "committedDate": "2020-11-20T01:44:53Z", "type": "forcePushed"}, {"oid": "41c1bdf89aa4ed367cb977c4c7c443da007fa22d", "url": "https://github.com/line/armeria/commit/41c1bdf89aa4ed367cb977c4c7c443da007fa22d", "message": "Hide JavaDocs of internal APIs\n\n- Introduce a builder interface ConsulConfigSetters\n- Make ConsulClientBuilder, ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters.\n- Make ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters by forwarding the calls to ConsulClientBuilder.\n- ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder do not extend ConsulClientBuilder anymore.\n  They just have ConsulClientBuilder as a member field and delegate calls.", "committedDate": "2020-11-20T02:42:02Z", "type": "forcePushed"}, {"oid": "a177941e345c599eebe2fb1e1c6f5d964e828b94", "url": "https://github.com/line/armeria/commit/a177941e345c599eebe2fb1e1c6f5d964e828b94", "message": "Hide JavaDocs of internal APIs\n\n- Introduce a builder interface ConsulConfigSetters\n- Make ConsulClientBuilder, ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters.\n- Make ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters by forwarding the calls to ConsulClientBuilder.\n- ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder do not extend ConsulClientBuilder anymore.\n  They just have ConsulClientBuilder as a member field and delegate calls.", "committedDate": "2020-11-20T05:56:22Z", "type": "forcePushed"}, {"oid": "9ccb508c74ae372ba7f1702de405861d570f131a", "url": "https://github.com/line/armeria/commit/9ccb508c74ae372ba7f1702de405861d570f131a", "message": "Hide JavaDocs of internal APIs\n\n- Introduce a builder interface ConsulConfigSetters\n- Make ConsulClientBuilder, ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters.\n- Make ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters by forwarding the calls to ConsulClientBuilder.\n- ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder do not extend ConsulClientBuilder anymore.\n  They just have ConsulClientBuilder as a member field and delegate calls.", "committedDate": "2020-11-20T05:57:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3Mjc4Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530172786", "bodyText": "We should not mention a class in an internal package because we hide them all.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Sets properties for building {@code ConsulClient}.\n          \n          \n            \n             * Sets properties for building a Consul client.", "author": "trustin", "createdAt": "2020-11-25T08:03:20Z", "path": "consul/src/main/java/com/linecorp/armeria/common/consul/ConsulConfigSetters.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.consul;\n+\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+\n+/**\n+ * Sets properties for building {@code ConsulClient}.", "originalCommit": "9ccb508c74ae372ba7f1702de405861d570f131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MTgxMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530181810", "bodyText": "Done.", "author": "eugene70", "createdAt": "2020-11-25T08:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3Mjc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NDAyNQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530174025", "bodyText": "to -> a", "author": "trustin", "createdAt": "2020-11-25T08:05:49Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.annotation.Nullable;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.ClientDecoration;\n+import com.linecorp.armeria.client.ClientOptions;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.WebClientBuilder;\n+import com.linecorp.armeria.client.retry.RetryRule;\n+import com.linecorp.armeria.client.retry.RetryingClient;\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpResponse;\n+\n+/**\n+ * A client for accessing to Consul agent API server.", "originalCommit": "9ccb508c74ae372ba7f1702de405861d570f131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MTg5Ng==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530181896", "bodyText": "Yes.", "author": "eugene70", "createdAt": "2020-11-25T08:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NDAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NDQ0OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530174449", "bodyText": "Could be final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ConsulClientBuilder implements ConsulConfigSetters {\n          \n          \n            \n            public final class ConsulClientBuilder implements ConsulConfigSetters {", "author": "trustin", "createdAt": "2020-11-25T08:06:38Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.consul.ConsulConfigSetters;\n+\n+public class ConsulClientBuilder implements ConsulConfigSetters {", "originalCommit": "9ccb508c74ae372ba7f1702de405861d570f131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MjAyMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530182023", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-11-25T08:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NDQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NDY4NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530174685", "bodyText": "Could be package-local:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected ConsulClientBuilder(URI consulUri) {\n          \n          \n            \n                ConsulClientBuilder(URI consulUri) {", "author": "trustin", "createdAt": "2020-11-25T08:07:05Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.consul.ConsulConfigSetters;\n+\n+public class ConsulClientBuilder implements ConsulConfigSetters {\n+    public static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+    private static final Pattern CONSUL_API_VERSION_PATTERN = Pattern.compile(\"^v[0-9][-._a-zA-Z0-9]*$\");\n+\n+    private final URI consulUri;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+\n+    protected ConsulClientBuilder(URI consulUri) {", "originalCommit": "9ccb508c74ae372ba7f1702de405861d570f131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MjA5OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530182099", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-11-25T08:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NDY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NDk3OQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530174979", "bodyText": "final would be redundant if we make this class final.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final ConsulClient build() {\n          \n          \n            \n                public ConsulClient build() {", "author": "trustin", "createdAt": "2020-11-25T08:07:36Z", "path": "consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.consul.ConsulConfigSetters;\n+\n+public class ConsulClientBuilder implements ConsulConfigSetters {\n+    public static final String DEFAULT_CONSUL_API_VERSION = \"v1\";\n+    private static final Pattern CONSUL_API_VERSION_PATTERN = Pattern.compile(\"^v[0-9][-._a-zA-Z0-9]*$\");\n+\n+    private final URI consulUri;\n+    private String consulApiVersion = DEFAULT_CONSUL_API_VERSION;\n+    @Nullable\n+    private String consulToken;\n+\n+    protected ConsulClientBuilder(URI consulUri) {\n+        this.consulUri = requireNonNull(consulUri, \"consulUri\");\n+    }\n+\n+    @Override\n+    public ConsulClientBuilder consulApiVersion(String consulApiVersion) {\n+        requireNonNull(consulApiVersion, \"consulApiVersion\");\n+        checkArgument(CONSUL_API_VERSION_PATTERN.matcher(consulApiVersion).matches(),\n+                      \"consulApiVersion: %s (expected: a version string that starts with 'v', e.g. 'v1')\",\n+                      consulApiVersion);\n+        this.consulApiVersion = consulApiVersion;\n+        return this;\n+    }\n+\n+    @Override\n+    public ConsulClientBuilder consulToken(String consulToken) {\n+        requireNonNull(consulToken, \"consulToken\");\n+        checkArgument(!consulToken.isEmpty(), \"consulToken can't be empty\");\n+        this.consulToken = consulToken;\n+        return this;\n+    }\n+\n+    public final ConsulClient build() {", "originalCommit": "9ccb508c74ae372ba7f1702de405861d570f131a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MjIxMw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530182213", "bodyText": "Ok.", "author": "eugene70", "createdAt": "2020-11-25T08:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NDk3OQ=="}], "type": "inlineReview"}, {"oid": "84a5924fc66e99b5729311f8b5e864b50076b588", "url": "https://github.com/line/armeria/commit/84a5924fc66e99b5729311f8b5e864b50076b588", "message": "Bump embedded-consul 1.9.0\n\n- Bump embedded-consul 1.9.0\n- Make final ConsulClientBuilder\n- nit: Fix comments", "committedDate": "2020-11-25T08:43:36Z", "type": "forcePushed"}, {"oid": "acb45ac61b5e755baf997687d182fe1f27cdcb1b", "url": "https://github.com/line/armeria/commit/acb45ac61b5e755baf997687d182fe1f27cdcb1b", "message": "Bump Consul 1.9.0 for testing\n\n- Bump Consul 1.9.0 for testing\n- Make final ConsulClientBuilder\n- nit: Fix comments", "committedDate": "2020-11-25T08:46:26Z", "type": "forcePushed"}, {"oid": "2b1ce9a720d628559700169238a7d6b9770a91a1", "url": "https://github.com/line/armeria/commit/2b1ce9a720d628559700169238a7d6b9770a91a1", "message": "Bump Consul 1.9.0 for testing\n\n- Bump Consul 1.9.0 for testing\n- Make final ConsulClientBuilder\n- nit: Fix comments", "committedDate": "2020-11-25T08:48:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMTEwNQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530201105", "bodyText": "ConsulClient -> Consul client.", "author": "trustin", "createdAt": "2020-11-25T08:52:40Z", "path": "consul/src/main/java/com/linecorp/armeria/common/consul/ConsulConfigSetters.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.consul;\n+\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+\n+/**\n+ * Sets properties for building a ConsulClient.", "originalCommit": "2b1ce9a720d628559700169238a7d6b9770a91a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a973c7772da42f9ba587a3f8a691fdc1df818205", "url": "https://github.com/line/armeria/commit/a973c7772da42f9ba587a3f8a691fdc1df818205", "message": "Bump Consul 1.9.0 for testing\n\n- Bump Consul 1.9.0 for testing\n- Make final ConsulClientBuilder\n- nit: Fix comments", "committedDate": "2020-11-25T08:55:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMTcyOA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530201728", "bodyText": "Could you annotate this class with @UnstableApi?", "author": "trustin", "createdAt": "2020-11-25T08:53:42Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroup.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.ClientRequestContextCaptor;\n+import com.linecorp.armeria.client.Clients;\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+\n+import io.netty.channel.EventLoop;\n+\n+/**\n+ * A Consul-based {@link EndpointGroup} implementation that retrieves the list of {@link Endpoint}s\n+ * from Consul using <a href=\"https://www.consul.io/api\">Consul's HTTP API</a> and updates the\n+ * {@link Endpoint}s periodically.\n+ */\n+public final class ConsulEndpointGroup extends DynamicEndpointGroup {", "originalCommit": "2b1ce9a720d628559700169238a7d6b9770a91a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMTkwNA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530201904", "bodyText": "Could you annotate this class with @UnstableApi?", "author": "trustin", "createdAt": "2020-11-25T08:53:58Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;\n+import com.linecorp.armeria.common.consul.ConsulConfigSetters;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListenerBuilder;\n+\n+/**\n+ * A builder class for {@link ConsulEndpointGroup}.\n+ * <h3>Examples</h3>\n+ * <pre>{@code\n+ * ConsulEndpointGroup endpointGroup = ConsulEndpointGroup.builder(consulUri, \"myService\")\n+ *                                                        .build();\n+ * List<Endpoint> endpoints = endpointGroup.endpoints();\n+ * sb.serverListener(listener);\n+ * }</pre>\n+ */\n+public final class ConsulEndpointGroupBuilder implements ConsulConfigSetters {", "originalCommit": "2b1ce9a720d628559700169238a7d6b9770a91a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMjA0NA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530202044", "bodyText": "Could you annotate this package with @UnstableApi?", "author": "trustin", "createdAt": "2020-11-25T08:54:11Z", "path": "consul/src/main/java/com/linecorp/armeria/client/consul/package-info.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/**\n+ * Consul-based {@link com.linecorp.armeria.client.endpoint.EndpointGroup} implementation.\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.client.consul;", "originalCommit": "2b1ce9a720d628559700169238a7d6b9770a91a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMjE1NQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530202155", "bodyText": "Could you annotate this class with @UnstableApi?", "author": "trustin", "createdAt": "2020-11-25T08:54:20Z", "path": "consul/src/main/java/com/linecorp/armeria/common/consul/ConsulConfigSetters.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.consul;\n+\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+\n+/**\n+ * Sets properties for building a ConsulClient.\n+ */\n+public interface ConsulConfigSetters {", "originalCommit": "2b1ce9a720d628559700169238a7d6b9770a91a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMzc5Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530203793", "bodyText": "Could you annotate this package with @UnstableApi?", "author": "trustin", "createdAt": "2020-11-25T08:56:52Z", "path": "consul/src/main/java/com/linecorp/armeria/common/consul/package-info.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Various classes used internally. Anything in this package can be changed or removed at any time.\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.common.consul;", "originalCommit": "a973c7772da42f9ba587a3f8a691fdc1df818205", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNDM0Mw==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530204343", "bodyText": "Could you annotate this class with @UnstableApi?", "author": "trustin", "createdAt": "2020-11-25T08:57:46Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListener.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.Inet4Address;\n+import java.net.URI;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.util.SystemInfo;\n+import com.linecorp.armeria.internal.consul.Check;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.ServerListenerAdapter;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+/**\n+ * A {@link ServerListener} which registers the current {@link Server} to\n+ * <a href=\"https://www.consul.io\">Consul</a>.\n+ */\n+public final class ConsulUpdatingListener extends ServerListenerAdapter {", "originalCommit": "a973c7772da42f9ba587a3f8a691fdc1df818205", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNDQ0MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530204441", "bodyText": "Could you annotate this class with @UnstableApi?", "author": "trustin", "createdAt": "2020-11-25T08:57:57Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListenerBuilder.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.server.consul;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpMethod;\n+import com.linecorp.armeria.common.consul.ConsulConfigSetters;\n+import com.linecorp.armeria.internal.consul.ConsulClient;\n+import com.linecorp.armeria.internal.consul.ConsulClientBuilder;\n+import com.linecorp.armeria.server.Server;\n+\n+/**\n+ * Builds a new {@link ConsulUpdatingListener}, which registers the server to Consul cluster.\n+ * <h3>Examples</h3>\n+ * <pre>{@code\n+ * ConsulUpdatingListener listener = ConsulUpdatingListener.builder(consulUri, \"myService\")\n+ *                                                         .build();\n+ * ServerBuilder sb = Server.builder();\n+ * sb.serverListener(listener);\n+ * }</pre>\n+ */\n+public final class ConsulUpdatingListenerBuilder implements ConsulConfigSetters {", "originalCommit": "a973c7772da42f9ba587a3f8a691fdc1df818205", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNDYwMA==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530204600", "bodyText": "Could you annotate this package with @UnstableApi?", "author": "trustin", "createdAt": "2020-11-25T08:58:12Z", "path": "consul/src/main/java/com/linecorp/armeria/server/consul/package-info.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/**\n+ * Automatic service registration and discovery with <a href=\"https://consul.io/\">Consul</a>.\n+ **/\n+@NonNullByDefault\n+package com.linecorp.armeria.server.consul;", "originalCommit": "a973c7772da42f9ba587a3f8a691fdc1df818205", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNTE4MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530205181", "bodyText": "How about removing public if the test runs without it?", "author": "trustin", "createdAt": "2020-11-25T08:59:01Z", "path": "consul/src/test/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.internal.consul.ConsulTestBase;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListener;\n+\n+public class ConsulEndpointGroupTest extends ConsulTestBase {", "originalCommit": "a973c7772da42f9ba587a3f8a691fdc1df818205", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNTM4MQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530205381", "bodyText": "How about removing public if it's not necessary?", "author": "trustin", "createdAt": "2020-11-25T08:59:15Z", "path": "consul/src/test/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.client.consul;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.internal.consul.ConsulTestBase;\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.consul.ConsulUpdatingListener;\n+\n+public class ConsulEndpointGroupTest extends ConsulTestBase {\n+\n+    static final List<Server> servers = new ArrayList<>();\n+\n+    @BeforeAll\n+    static void startServers() {\n+\n+        for (Endpoint endpoint : sampleEndpoints) {\n+            final Server server = Server.builder()\n+                                        .http(endpoint.port())\n+                                        .service(\"/\", new EchoService())\n+                                        .build();\n+            final ServerListener listener =\n+                    ConsulUpdatingListener.builder(URI.create(\"http://127.0.0.1:\" + consul().getHttpPort()),\n+                                                   serviceName)\n+                                          .consulToken(CONSUL_TOKEN)\n+                                          .build();\n+            server.addListener(listener);\n+            server.start().join();\n+            servers.add(server);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void stopServers() throws Exception {\n+        servers.forEach(Server::close);\n+        servers.clear();\n+    }\n+\n+    @Test\n+    void testConsulEndpointGroupWithClient() {\n+        try (ConsulEndpointGroup endpointGroup =\n+                     ConsulEndpointGroup.builder(URI.create(\"http://127.0.0.1:\" + consul().getHttpPort()),\n+                                                 serviceName)\n+                                        .consulApiVersion(\"v1\")\n+                                        .consulToken(CONSUL_TOKEN)\n+                                        .registryFetchIntervalMillis(1000)\n+                                        .build()) {\n+            await().atMost(3, TimeUnit.SECONDS)\n+                   .untilAsserted(() ->\n+                                  assertThat(endpointGroup.endpoints()).hasSameSizeAs(sampleEndpoints));\n+            // stop a server\n+            servers.get(0).stop();\n+            await().atMost(3, TimeUnit.SECONDS)\n+                   .untilAsserted(() ->\n+                                  assertThat(endpointGroup.endpoints()).hasSize(sampleEndpoints.size() - 1));\n+            // restart the server\n+            servers.get(0).start();\n+            await().atMost(3, TimeUnit.SECONDS)\n+                   .untilAsserted(() ->\n+                                  assertThat(endpointGroup.endpoints()).hasSameSizeAs(sampleEndpoints));\n+        }\n+    }\n+\n+    @Test\n+    void testConsulEndpointGroupWithUrl() {\n+        try (ConsulEndpointGroup endpointGroup =\n+                     ConsulEndpointGroup.builder(URI.create(\"http://127.0.0.1:\" + consul().getHttpPort()),\n+                                                 serviceName)\n+                                        .consulToken(CONSUL_TOKEN)\n+                                        .registryFetchInterval(Duration.ofSeconds(1))\n+                                        .build()) {\n+            await().atMost(3, TimeUnit.SECONDS)\n+                   .untilAsserted(() ->\n+                                  assertThat(endpointGroup.endpoints()).hasSameSizeAs(sampleEndpoints));\n+            // stop a server\n+            servers.get(0).stop().join();\n+            await().atMost(3, TimeUnit.SECONDS)\n+                   .untilAsserted(() ->\n+                                  assertThat(endpointGroup.endpoints()).hasSize(sampleEndpoints.size() - 1));\n+            // restart the server\n+            servers.get(0).start().join();\n+            await().atMost(3, TimeUnit.SECONDS)\n+                   .untilAsserted(() ->\n+                                  assertThat(endpointGroup.endpoints()).hasSameSizeAs(sampleEndpoints));\n+        }\n+    }\n+\n+    @Test\n+    public void testSelectStrategy() {", "originalCommit": "a973c7772da42f9ba587a3f8a691fdc1df818205", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNjEzMg==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530206132", "bodyText": "Could be protected rather than public?", "author": "trustin", "createdAt": "2020-11-25T09:00:19Z", "path": "consul/src/test/java/com/linecorp/armeria/internal/consul/ConsulTestBase.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.consul;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.URI;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import javax.annotation.Nullable;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.pszymczyk.consul.ConsulProcess;\n+import com.pszymczyk.consul.ConsulStarterBuilder;\n+\n+import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.ResponseHeaders;\n+import com.linecorp.armeria.common.util.CompletionActions;\n+import com.linecorp.armeria.server.AbstractHttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+public abstract class ConsulTestBase {\n+\n+    protected static final String CONSUL_TOKEN = UUID.randomUUID().toString();\n+    protected static final String serviceName = \"testService\";\n+    protected static final Set<Endpoint> sampleEndpoints;\n+\n+    static {\n+        final int[] ports = unusedPorts(3);\n+        sampleEndpoints = ImmutableSet.of(Endpoint.of(\"localhost\", ports[0]).withWeight(2),\n+                                          Endpoint.of(\"127.0.0.1\", ports[1]).withWeight(4),\n+                                          Endpoint.of(\"127.0.0.1\", ports[2]).withWeight(2));\n+    }\n+\n+    protected ConsulTestBase() {\n+    }\n+\n+    @Nullable\n+    private static ConsulProcess consul;\n+\n+    @Nullable\n+    private static ConsulClient consulClient;\n+\n+    @BeforeAll\n+    static void start() throws Throwable {\n+        // Initialize Consul embedded server for testing\n+        // This EmbeddedConsul tested with Consul version above 1.4.0\n+        consul = ConsulStarterBuilder.consulStarter()\n+                                     .withConsulVersion(\"1.9.0\")\n+                                     .withCustomConfig(aclConfiguration(CONSUL_TOKEN))\n+                                     .withToken(CONSUL_TOKEN)\n+                                     .build().start();\n+        // Initialize Consul client\n+        consulClient = ConsulClient.builder(URI.create(\"http://127.0.0.1:\" + consul.getHttpPort()))\n+                                   .consulToken(CONSUL_TOKEN)\n+                                   .build();\n+    }\n+\n+    @AfterAll\n+    static void stop() throws Throwable {\n+        if (consul != null) {\n+            consul.close();\n+            consul = null;\n+        }\n+        if (consulClient != null) {\n+            consulClient = null;\n+        }\n+    }\n+\n+    protected static ConsulProcess consul() {\n+        if (consul == null) {\n+            throw new IllegalStateException(\"embedded consul has not initialized\");\n+        }\n+        return consul;\n+    }\n+\n+    protected static ConsulClient client() {\n+        if (consulClient == null) {\n+            throw new IllegalStateException(\"consul client has not initialized\");\n+        }\n+        return consulClient;\n+    }\n+\n+    protected static int[] unusedPorts(int numPorts) {\n+        final int[] ports = new int[numPorts];\n+        final Random random = ThreadLocalRandom.current();\n+        for (int i = 0; i < numPorts; i++) {\n+            for (;;) {\n+                final int candidatePort = random.nextInt(64512) + 1024;\n+                try (ServerSocket ss = new ServerSocket()) {\n+                    ss.bind(new InetSocketAddress(\"127.0.0.1\", candidatePort));\n+                    ports[i] = candidatePort;\n+                    break;\n+                } catch (IOException e) {\n+                    // Port in use or unable to bind.\n+                    continue;\n+                }\n+            }\n+        }\n+\n+        return ports;\n+    }\n+\n+    private static String aclConfiguration(String token) {\n+        return\n+                new StringBuilder()\n+                        .append('{')\n+                        .append(\"\\\"acl\\\": {\")\n+                        .append(\"\\\"enabled\\\": true, \")\n+                        .append(\"\\\"default_policy\\\": \\\"deny\\\", \")\n+                        .append(\"\\\"down_policy\\\": \\\"deny\\\", \")\n+                        .append(\"\\\"tokens\\\": {\")\n+                        .append(\"    \\\"agent\\\": \\\"\").append(token).append(\"\\\", \")\n+                        .append(\"    \\\"master\\\": \\\"\").append(token).append(\"\\\", \")\n+                        .append(\"    }\")\n+                        .append('}')\n+                        .toString();\n+    }\n+\n+    public static class EchoService extends AbstractHttpService {", "originalCommit": "a973c7772da42f9ba587a3f8a691fdc1df818205", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzNDUwMQ==", "url": "https://github.com/line/armeria/pull/3002#discussion_r530934501", "bodyText": "It can't be 'protected'. Otherwise, we have to make an empty public constructor.", "author": "eugene70", "createdAt": "2020-11-26T10:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNjEzMg=="}], "type": "inlineReview"}, {"oid": "e7ace34b03fb4bfce694436214493d4b3b2c9f27", "url": "https://github.com/line/armeria/commit/e7ace34b03fb4bfce694436214493d4b3b2c9f27", "message": "Annotate @UnstableApi, Add option starting Consul\n\n- Annotate @UnstableApi into all public objects\n- Add option withWaitTimeout(60), default is 60s", "committedDate": "2020-11-26T11:02:00Z", "type": "forcePushed"}, {"oid": "17b34413057e642c7847703da434ee8895abaaf3", "url": "https://github.com/line/armeria/commit/17b34413057e642c7847703da434ee8895abaaf3", "message": "Annotate @UnstableApi, Add option starting Consul\n\n- Annotate @UnstableApi into all public objects\n- Add option withWaitTimeout(120), default is 30s", "committedDate": "2020-11-26T11:16:17Z", "type": "forcePushed"}, {"oid": "3105754a9a3d3923fba7daa33e43ea42da5efacb", "url": "https://github.com/line/armeria/commit/3105754a9a3d3923fba7daa33e43ea42da5efacb", "message": "Replace deprecated RetryingClient.newDecorator()\n\nRetryingClient.newDecorator(\n  RetryConfig.builder\n    (RetryRule.failsafe())\n      .maxTotalAttempts(3).build())\n\ninstead of:\n\n  RetryingClient.newDecorator(RetryRule.failsafe(), 3)", "committedDate": "2020-11-28T02:38:02Z", "type": "forcePushed"}, {"oid": "c75b36af740d52c47317ac8f19f9abe80caf5c4c", "url": "https://github.com/line/armeria/commit/c75b36af740d52c47317ac8f19f9abe80caf5c4c", "message": "Replace deprecated RetryingClient.newDecorator()\n\nRetryingClient.newDecorator(\n  RetryConfig.builder\n    (RetryRule.failsafe())\n      .maxTotalAttempts(3).build())\n\ninstead of:\n\n  RetryingClient.newDecorator(RetryRule.failsafe(), 3)", "committedDate": "2020-11-28T14:50:27Z", "type": "forcePushed"}, {"oid": "bf71e04a998fc349c2db7afcc3d9f42502a48126", "url": "https://github.com/line/armeria/commit/bf71e04a998fc349c2db7afcc3d9f42502a48126", "message": "Replace deprecated RetryingClient.newDecorator()\n\nRetryingClient.newDecorator(RetryConfig.builder(RetryRule.failsafe())\n                                       .maxTotalAttempts(3)\n                                       .build());\n\ninstead of:\n\n  RetryingClient.newDecorator(RetryRule.failsafe(), 3)", "committedDate": "2020-11-28T16:06:16Z", "type": "forcePushed"}, {"oid": "eedd6197aaa54b8eacbaab92eac4264a39eff4c7", "url": "https://github.com/line/armeria/commit/eedd6197aaa54b8eacbaab92eac4264a39eff4c7", "message": "Replace deprecated RetryingClient.newDecorator()\n\nRetryingClient.newDecorator(RetryConfig.builder(RetryRule.failsafe())\n                                       .maxTotalAttempts(3)\n                                       .build());\n\ninstead of:\n\n  RetryingClient.newDecorator(RetryRule.failsafe(), 3)", "committedDate": "2020-11-29T14:30:29Z", "type": "forcePushed"}, {"oid": "f709c385c2ed72a847bfcf73a4b4f3588816d53e", "url": "https://github.com/line/armeria/commit/f709c385c2ed72a847bfcf73a4b4f3588816d53e", "message": "Support Consul service discovery\n\nMotivation:\n\n  - Issue: #194 Service discovery support (serversets, k8s, ..).\n  - Service discovery supports Consul.\n\nModifications:\n\n  - Creates consul module\n  - Add dependencies for consul and consul test server\n  - Add base client for consul\n  - Add test cases\n\nTo dos:\n\n  - Add detail clients corresponding to the each Consul API\n  - Add cached client for health checking\n  - Add ConsulEndpointGroup\n\nResult:\n\n  - Supports Consul discovery service", "committedDate": "2020-11-30T12:49:27Z", "type": "commit"}, {"oid": "195d469b6c8c595c1d2114c1446fddc3e3215699", "url": "https://github.com/line/armeria/commit/195d469b6c8c595c1d2114c1446fddc3e3215699", "message": "Use seconds for refreshing endpoints in ConsulEndpointGroup", "committedDate": "2020-11-30T12:49:27Z", "type": "commit"}, {"oid": "23a88ef255ed4512b9cf5cc53cfcf15f8128a086", "url": "https://github.com/line/armeria/commit/23a88ef255ed4512b9cf5cc53cfcf15f8128a086", "message": "Apply reviews\n\n- Check `isClosing` again after update on `ConsulEndpointGroup`\n- Reuse instace of `CatalogClient` and `AgentServiceClient`\n- Remove `public` of `consulWebClient()` on `ConsulClient`\n- Refactor inner class `Service` on `AgentServiceClient`\n- Replace `HttpData.empty()` instead of \"\"", "committedDate": "2020-11-30T12:49:28Z", "type": "commit"}, {"oid": "03abce85c25180eabb8963fa12995e77364b8606", "url": "https://github.com/line/armeria/commit/03abce85c25180eabb8963fa12995e77364b8606", "message": "Refactor whole package\n\n  - Remove low level unit tests.\n  - Create ConsulClientBuilder.\n  - Sync the manner of creating ConsulClient.\n  - Remove 'public' from class CatalogClient.", "committedDate": "2020-11-30T12:49:29Z", "type": "commit"}, {"oid": "272ef78e735df63fb946e305a00431da89aad1b5", "url": "https://github.com/line/armeria/commit/272ef78e735df63fb946e305a00431da89aad1b5", "message": "Refactor builders using inheritance\n\n  - Add consulUri() methods to builders", "committedDate": "2020-11-30T12:49:30Z", "type": "commit"}, {"oid": "d679781edb58ad1b51b1ab3366588b637506f26d", "url": "https://github.com/line/armeria/commit/d679781edb58ad1b51b1ab3366588b637506f26d", "message": "Support testing with v1.8.4", "committedDate": "2020-11-30T12:49:30Z", "type": "commit"}, {"oid": "5397ca390996a1ca0d90e7de58697428f3846c6b", "url": "https://github.com/line/armeria/commit/5397ca390996a1ca0d90e7de58697428f3846c6b", "message": "Apply reviews\n\n- Fix commnents\n- More checking consulUri argument\n- ...", "committedDate": "2020-11-30T12:49:31Z", "type": "commit"}, {"oid": "f73f88cda7fd3bb3ea2b8af17a529cb8e0e2cf79", "url": "https://github.com/line/armeria/commit/f73f88cda7fd3bb3ea2b8af17a529cb8e0e2cf79", "message": "Apply reviews\n\n- Milliseconds instead seconds\n- Path be URI encoded\n- ...", "committedDate": "2020-11-30T12:49:32Z", "type": "commit"}, {"oid": "d86e84aaf58d8102ae222d54834b5d4f359f522e", "url": "https://github.com/line/armeria/commit/d86e84aaf58d8102ae222d54834b5d4f359f522e", "message": "Apply reviews: regex for consulApiVersion...\n\n- check consulApiVersion with regex in ConsulClientBuilder\n- DEFAULT_CHECK_INTERVAL_MILLIS instead of DEFAULT_CHECK_INTERVAL in\n  ConsulUpdatingListenerBuilder\n- ...", "committedDate": "2020-11-30T12:49:33Z", "type": "commit"}, {"oid": "3fe88a584e00e1de21ab678269b939af1f81d4c5", "url": "https://github.com/line/armeria/commit/3fe88a584e00e1de21ab678269b939af1f81d4c5", "message": "Fix consulApiVersion in ConsulClientBuilder\n- remove redundant check\n- change a check message\n- rename a constant", "committedDate": "2020-11-30T12:49:34Z", "type": "commit"}, {"oid": "d3cfadfb7bb999d6a39a2222af8f36765077de09", "url": "https://github.com/line/armeria/commit/d3cfadfb7bb999d6a39a2222af8f36765077de09", "message": "Apply reviews - use HEAD method as the default\n\n- use HEAD as the default method in `ConsulUpdatingListenerBuilder`\n- use byte[] instead of String return in `CatalogClient`\n- trivial modifications", "committedDate": "2020-11-30T12:49:35Z", "type": "commit"}, {"oid": "bce8b1c6537d6f04eb4312096705c913e37571fe", "url": "https://github.com/line/armeria/commit/bce8b1c6537d6f04eb4312096705c913e37571fe", "message": "remove contant DEFAULT_CHECK_METHOD", "committedDate": "2020-11-30T12:49:35Z", "type": "commit"}, {"oid": "6c8d51e6856bb943b30ecd0aed723a4fa75a3bd1", "url": "https://github.com/line/armeria/commit/6c8d51e6856bb943b30ecd0aed723a4fa75a3bd1", "message": "Simplify builder classes\n\n* pass URI on constructor of builders\n  - ConsulClientBuilder\n  - ConsulEndpointGroupBuilder\n  - ConsulUpdatingListenerBuilder", "committedDate": "2020-11-30T12:49:36Z", "type": "commit"}, {"oid": "4cc847998bc469c134b786f51b0ce7756c5f5871", "url": "https://github.com/line/armeria/commit/4cc847998bc469c134b786f51b0ce7756c5f5871", "message": "Hide JavaDocs of internal APIs\n\n- Introduce a builder interface ConsulConfigSetters\n- Make ConsulClientBuilder, ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters.\n- Make ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder\n  implement ConsulConfigSetters by forwarding the calls to ConsulClientBuilder.\n- ConsulEndpointGroupBuilder and ConsulUpdatingListenerBuilder do not extend ConsulClientBuilder anymore.\n  They just have ConsulClientBuilder as a member field and delegate calls.", "committedDate": "2020-11-30T12:49:37Z", "type": "commit"}, {"oid": "1cbf8d2deab26bdb5d8a22c561d55385f25a7ed0", "url": "https://github.com/line/armeria/commit/1cbf8d2deab26bdb5d8a22c561d55385f25a7ed0", "message": "Bump Consul 1.9.0 for testing\n\n- Bump Consul 1.9.0 for testing\n- Make final ConsulClientBuilder\n- nit: Fix comments", "committedDate": "2020-11-30T12:49:38Z", "type": "commit"}, {"oid": "aef5deedda449053969650ac4d4eef24ee663b5b", "url": "https://github.com/line/armeria/commit/aef5deedda449053969650ac4d4eef24ee663b5b", "message": "Annotate @UnstableApi, Add option starting Consul\n\n- Annotate @UnstableApi into all public objects\n- Add option withWaitTimeout(120), default is 30s", "committedDate": "2020-11-30T12:49:38Z", "type": "commit"}, {"oid": "66c94b7261c9038e64acaddc35187b42fc6a4f7b", "url": "https://github.com/line/armeria/commit/66c94b7261c9038e64acaddc35187b42fc6a4f7b", "message": "Replace deprecated RetryingClient.newDecorator()\n\nRetryingClient.newDecorator(RetryConfig.builder(RetryRule.failsafe())\n                                       .maxTotalAttempts(3)\n                                       .build());\n\ninstead of:\n\n  RetryingClient.newDecorator(RetryRule.failsafe(), 3)", "committedDate": "2020-11-30T12:49:39Z", "type": "commit"}, {"oid": "49227c3be2865494485028827771eb44e7d9bc0b", "url": "https://github.com/line/armeria/commit/49227c3be2865494485028827771eb44e7d9bc0b", "message": "Nits", "committedDate": "2020-11-30T12:49:40Z", "type": "commit"}, {"oid": "49227c3be2865494485028827771eb44e7d9bc0b", "url": "https://github.com/line/armeria/commit/49227c3be2865494485028827771eb44e7d9bc0b", "message": "Nits", "committedDate": "2020-11-30T12:49:40Z", "type": "forcePushed"}, {"oid": "3b8dd0d7aea099971607c26c42a49e07fc15da77", "url": "https://github.com/line/armeria/commit/3b8dd0d7aea099971607c26c42a49e07fc15da77", "message": "Specifiy a download path for caching a embedded consul", "committedDate": "2020-12-01T06:31:26Z", "type": "commit"}, {"oid": "8064537a5f95bbb3ad245ad1fc0dde02cdc0dd17", "url": "https://github.com/line/armeria/commit/8064537a5f95bbb3ad245ad1fc0dde02cdc0dd17", "message": "Change cache directory", "committedDate": "2020-12-01T06:35:58Z", "type": "commit"}, {"oid": "8cf7763475f83a2c15b454cf5b87216b30efe470", "url": "https://github.com/line/armeria/commit/8cf7763475f83a2c15b454cf5b87216b30efe470", "message": "checkstyle", "committedDate": "2020-12-01T06:47:25Z", "type": "commit"}, {"oid": "6bd0d0048cab4f6c4995f4440e45b390bc4fa958", "url": "https://github.com/line/armeria/commit/6bd0d0048cab4f6c4995f4440e45b390bc4fa958", "message": "Change cache folder", "committedDate": "2020-12-01T07:29:45Z", "type": "commit"}, {"oid": "92fecdd905a73378945372f7a1c1a7ff92954cb2", "url": "https://github.com/line/armeria/commit/92fecdd905a73378945372f7a1c1a7ff92954cb2", "message": "Await until consul successfully start", "committedDate": "2020-12-01T10:42:33Z", "type": "commit"}]}