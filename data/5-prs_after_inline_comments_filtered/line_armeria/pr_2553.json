{"pr_number": 2553, "pr_title": "Handle exceptions from Subscribers", "pr_createdAt": "2020-03-05T09:01:18Z", "pr_url": "https://github.com/line/armeria/pull/2553", "timeline": [{"oid": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "url": "https://github.com/line/armeria/commit/d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "message": "Handle exceptions from Subscribers\nMotivation:\nAn exception raised by a `Subscriber`'s `onNext()` or other handler methods can cause an unexpected connection drop.\nWe should handle it.\n\nModifications:\n- Catch the exception thrown by `onSubscribe()` and `onNext()` from `Subscriber`s.\n  - Aabort the stream or call `onError` with the cause.\n- Catch the exception thrown by `onComplete()` and `onError()`, and log it.\n\nResult:\n- Close #2475\n- The connection is not closed by unhandled exceptions from `Subscriber`s anymore.", "committedDate": "2020-03-05T06:51:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4ODc2MQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388288761", "bodyText": "Maybe handleLateSubscriber()?", "author": "trustin", "createdAt": "2020-03-05T13:22:49Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -145,16 +149,23 @@ static void failLateSubscriber(SubscriptionImpl subscription, Subscriber<?> late\n         final Throwable cause = abortedOrLate(oldSubscriber);\n \n         if (subscription.needsDirectInvocation()) {\n-            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-            lateSubscriber.onError(cause);\n+            lateSubscriber(lateSubscriber, cause);\n         } else {\n             subscription.executor().execute(() -> {\n-                lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-                lateSubscriber.onError(cause);\n+                lateSubscriber(lateSubscriber, cause);\n             });\n         }\n     }\n \n+    private static void lateSubscriber(Subscriber<?> lateSubscriber, Throwable cause) {", "originalCommit": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMjgxMA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388722810", "bodyText": "Fixed. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-06T05:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4ODc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4OTIzNw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388289237", "bodyText": "Global comment: Should we catch a Throwable?", "author": "trustin", "createdAt": "2020-03-05T13:23:45Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -145,16 +149,23 @@ static void failLateSubscriber(SubscriptionImpl subscription, Subscriber<?> late\n         final Throwable cause = abortedOrLate(oldSubscriber);\n \n         if (subscription.needsDirectInvocation()) {\n-            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-            lateSubscriber.onError(cause);\n+            lateSubscriber(lateSubscriber, cause);\n         } else {\n             subscription.executor().execute(() -> {\n-                lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n-                lateSubscriber.onError(cause);\n+                lateSubscriber(lateSubscriber, cause);\n             });\n         }\n     }\n \n+    private static void lateSubscriber(Subscriber<?> lateSubscriber, Throwable cause) {\n+        try {\n+            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);\n+            lateSubscriber.onError(cause);\n+        } catch (Exception e) {", "originalCommit": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNDI4MQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388714281", "bodyText": "reactive-streams/reactive-streams-jvm#107 (comment)\nI think they are guiding not to catch the fatal ones. \ud83e\udd14", "author": "minwoox", "createdAt": "2020-03-06T05:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4OTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2OTU0OA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388769548", "bodyText": "I think there are Error that aren't fatal, so better to catch Throwable and we may need a propagateIfFatal like in zipkin\n// Taken from RxJava throwIfFatal, which was taken from scala\n  public static void propagateIfFatal(Throwable t) {\n    if (t instanceof VirtualMachineError) {\n      throw (VirtualMachineError) t;\n    } else if (t instanceof ThreadDeath) {\n      throw (ThreadDeath) t;\n    } else if (t instanceof LinkageError) {\n      throw (LinkageError) t;\n    }\n  }", "author": "anuraaga", "createdAt": "2020-03-06T08:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4OTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5ODA0Mg==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388798042", "bodyText": "Ah, let me add this method to Exceptions. Thanks!", "author": "minwoox", "createdAt": "2020-03-06T09:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4OTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3OTQyMA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388879420", "bodyText": "I think we don't have to follow the Reactive Streams TCK, just FYI, which also regards InterruptedException as fatal.\nhttps://github.com/reactive-streams/reactive-streams-jvm/blob/master/tck/src/main/java/org/reactivestreams/tck/flow/support/NonFatal.java#L35\nIt is copied from Scala code.\nhttps://github.com/scala/scala/blob/v2.13.1/src/library/scala/util/control/NonFatal.scala#L41", "author": "ikhoon", "createdAt": "2020-03-06T12:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4OTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4ODY5OQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388888699", "bodyText": "Ah yes, I saw it from ReactiveX/RxJava#748 (comment)\nand I think they intentionally omit that. But I didn't think about it deeply. \ud83d\ude06", "author": "minwoox", "createdAt": "2020-03-06T13:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4OTIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MDY4OQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388290689", "bodyText": "Probably OK without 0?", "author": "trustin", "createdAt": "2020-03-05T13:26:29Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java", "diffHunk": "@@ -228,110 +232,124 @@ private void doCancel() {\n \n     @Override\n     SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n-        if (!subscriptionUpdater.compareAndSet(this, null, subscription)) {\n-            final SubscriptionImpl oldSubscription = this.subscription;\n+        if (!downstreamSubscriptionUpdater.compareAndSet(this, null, subscription)) {\n+            final SubscriptionImpl oldSubscription = downstreamSubscription;\n             assert oldSubscription != null;\n             return oldSubscription;\n         }\n \n         final Subscriber<Object> subscriber = subscription.subscriber();\n         if (subscription.needsDirectInvocation()) {\n-            subscriber.onSubscribe(subscription);\n-            safeOnSubscribeToDelegate();\n+            subscribe0(subscription, subscriber);\n         } else {\n             subscription.executor().execute(() -> {\n-                subscriber.onSubscribe(subscription);\n-                safeOnSubscribeToDelegate();\n+                subscribe0(subscription, subscriber);\n             });\n         }\n \n         return subscription;\n     }\n \n-    private void safeOnSubscribeToDelegate() {\n-        if (delegate == null || subscription == null) {\n+    private void subscribe0(SubscriptionImpl subscription, Subscriber<Object> subscriber) {", "originalCommit": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMzI2Nw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388723267", "bodyText": "Ah yes. Thanks!", "author": "minwoox", "createdAt": "2020-03-06T05:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MDY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MjQyNQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388292425", "bodyText": "Could you explain why we need to pass them? Can't we access them via downstreamSubscription, since ForwardingSubscriber is not a static class?", "author": "trustin", "createdAt": "2020-03-05T13:29:46Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java", "diffHunk": "@@ -228,110 +232,124 @@ private void doCancel() {\n \n     @Override\n     SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n-        if (!subscriptionUpdater.compareAndSet(this, null, subscription)) {\n-            final SubscriptionImpl oldSubscription = this.subscription;\n+        if (!downstreamSubscriptionUpdater.compareAndSet(this, null, subscription)) {\n+            final SubscriptionImpl oldSubscription = downstreamSubscription;\n             assert oldSubscription != null;\n             return oldSubscription;\n         }\n \n         final Subscriber<Object> subscriber = subscription.subscriber();\n         if (subscription.needsDirectInvocation()) {\n-            subscriber.onSubscribe(subscription);\n-            safeOnSubscribeToDelegate();\n+            subscribe0(subscription, subscriber);\n         } else {\n             subscription.executor().execute(() -> {\n-                subscriber.onSubscribe(subscription);\n-                safeOnSubscribeToDelegate();\n+                subscribe0(subscription, subscriber);\n             });\n         }\n \n         return subscription;\n     }\n \n-    private void safeOnSubscribeToDelegate() {\n-        if (delegate == null || subscription == null) {\n+    private void subscribe0(SubscriptionImpl subscription, Subscriber<Object> subscriber) {\n+        try {\n+            subscriber.onSubscribe(subscription);\n+        } catch (Exception e) {\n+            abort(e);\n+            return;\n+        }\n+        safeOnSubscribeToUpstream();\n+    }\n+\n+    private void safeOnSubscribeToUpstream() {\n+        final StreamMessage<T> upstream = this.upstream;\n+        final SubscriptionImpl downstreamSubscription = this.downstreamSubscription;\n+        if (upstream == null || downstreamSubscription == null) {\n             return;\n         }\n \n-        if (!subscribedToDelegateUpdater.compareAndSet(this, 0, 1)) {\n+        if (!subscribedToUpstreamUpdater.compareAndSet(this, 0, 1)) {\n             return;\n         }\n \n         final Builder<SubscriptionOption> builder = ImmutableList.builder();\n-        if (subscription.withPooledObjects()) {\n+        if (downstreamSubscription.withPooledObjects()) {\n             builder.add(SubscriptionOption.WITH_POOLED_OBJECTS);\n         }\n-        if (subscription.notifyCancellation()) {\n+        if (downstreamSubscription.notifyCancellation()) {\n             builder.add(SubscriptionOption.NOTIFY_CANCELLATION);\n         }\n \n-        delegate.subscribe(new ForwardingSubscriber(),\n-                           subscription.executor(),\n+        upstream.subscribe(new ForwardingSubscriber(downstreamSubscription.subscriber()),\n+                           downstreamSubscription.executor(),", "originalCommit": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTc5OA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388711798", "bodyText": "We always have the reference of the downstreamSubscription at this time and it is a volatile field. Before I made this change, we always access this volatile field when we call methods on the subscriber. But now we don't have to. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-06T04:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MjQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MjU5NQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388292595", "bodyText": "Ditto - 0 could be removed?", "author": "trustin", "createdAt": "2020-03-05T13:30:07Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/FixedStreamMessage.java", "diffHunk": "@@ -112,14 +112,23 @@ final SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n \n         final Subscriber<Object> subscriber = subscription.subscriber();\n         if (subscription.needsDirectInvocation()) {\n-            subscriber.onSubscribe(subscription);\n+            subscribe0(subscription, subscriber);\n         } else {\n-            subscription.executor().execute(() -> subscriber.onSubscribe(subscription));\n+            subscription.executor().execute(() -> subscribe0(subscription, subscriber));\n         }\n \n         return subscription;\n     }\n \n+    private void subscribe0(SubscriptionImpl subscription, Subscriber<Object> subscriber) {", "originalCommit": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTg1Mg==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388711852", "bodyText": "I will. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-06T04:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MjU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NDY5Nw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388294697", "bodyText": "I wonder if we should move the tests to StreamMessageVerification.", "author": "trustin", "createdAt": "2020-03-05T13:34:04Z", "path": "core/src/test/java/com/linecorp/armeria/common/stream/SubscriberThrowingExceptionTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.stream;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.testing.AnticipatedException;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.util.concurrent.ImmediateEventExecutor;\n+\n+class SubscriberThrowingExceptionTest {", "originalCommit": "d0857ce69c2294ef360824b1cb7090a47b0a3cb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMzcwNA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388713704", "bodyText": "Currently, they don't have the TCK for this case and this is violating the spec, so the test will fail if they have, I think. \ud83e\udd14\nSo it's like more for our implementation.", "author": "minwoox", "createdAt": "2020-03-06T04:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NDY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyOTIyMQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389529221", "bodyText": "StreamMessageVerification is our class, so we can perhaps test the failure scenarios there?", "author": "trustin", "createdAt": "2020-03-09T08:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NDY5Nw=="}], "type": "inlineReview"}, {"oid": "e131ab1f81c276b8bc595b29bb722c58cbdf00fd", "url": "https://github.com/line/armeria/commit/e131ab1f81c276b8bc595b29bb722c58cbdf00fd", "message": "Address comments by @trustin", "committedDate": "2020-03-06T05:47:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTMyNw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388771327", "bodyText": "I think we should complete completionFuture with this error instead of treating this as a success scenario.", "author": "anuraaga", "createdAt": "2020-03-06T08:34:24Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -291,6 +295,9 @@ void notifySubscriber(SubscriptionImpl subscription, CompletableFuture<?> comple\n             if (cause == null) {\n                 try {\n                     subscriber.onComplete();\n+                } catch (Exception e) {\n+                    logger.warn(\"Subscriber.onComplete() should not raise an exception. subscriber: {}\",", "originalCommit": "e131ab1f81c276b8bc595b29bb722c58cbdf00fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388771447", "bodyText": "We can probably create an exception that wraps cause and complete the future with it for this case so the exception isn't lost.", "author": "anuraaga", "createdAt": "2020-03-06T08:34:44Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java", "diffHunk": "@@ -299,6 +306,9 @@ void notifySubscriber(SubscriptionImpl subscription, CompletableFuture<?> comple\n                     if (subscription.notifyCancellation || !(cause instanceof CancelledSubscriptionException)) {\n                         subscriber.onError(cause);\n                     }\n+                } catch (Exception e) {\n+                    logger.warn(\"Subscriber.onError() should not raise an exception. subscriber: {}\",", "originalCommit": "e131ab1f81c276b8bc595b29bb722c58cbdf00fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5NTIyNw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388795227", "bodyText": "Ah that's a good point. Let me fix this.", "author": "minwoox", "createdAt": "2020-03-06T09:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0MDI2Nw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388840267", "bodyText": "So you mean we have to define a new sort of composite exception which has the cause and e here, in this case?", "author": "minwoox", "createdAt": "2020-03-06T10:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg1Mjg4OQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388852889", "bodyText": "sort of this one?", "author": "minwoox", "createdAt": "2020-03-06T11:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg1NzQ0NQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388857445", "bodyText": "Yeah I was thinking something like that :)", "author": "anuraaga", "createdAt": "2020-03-06T11:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5MDM2OA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r388890368", "bodyText": "Just copied the code from them because it seems they implemented well. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-06T13:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyOTg1Mg==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389529852", "bodyText": "Can't we just use Throwable.addSuppressed()?", "author": "trustin", "createdAt": "2020-03-09T08:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMTIwOA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389531208", "bodyText": "What should we do if we catch a fatal exception? Perhaps add the less fatal one using addSuppressed() and throw?", "author": "trustin", "createdAt": "2020-03-09T09:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzNzUyOQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389537529", "bodyText": "Never mind. It looks OK.", "author": "trustin", "createdAt": "2020-03-09T09:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MTQ0Nw=="}], "type": "inlineReview"}, {"oid": "f3a464142074ed2f92f3c60f192ffd32549448ea", "url": "https://github.com/line/armeria/commit/f3a464142074ed2f92f3c60f192ffd32549448ea", "message": "Address comments by @anuraaga", "committedDate": "2020-03-06T13:01:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MDI2OA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389540268", "bodyText": "What about OutOfMemoryError?", "author": "trustin", "createdAt": "2020-03-09T09:21:57Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java", "diffHunk": "@@ -222,6 +222,38 @@ public static boolean isStreamCancelling(Throwable cause) {\n         return null; // Never reaches here.\n     }\n \n+    // This is copied from\n+    // https://github.com/ReactiveX/RxJava/blob/v3.0.0/src/main/java/io/reactivex/rxjava3/exceptions/Exceptions.java\n+\n+    /**\n+     * Throws a particular {@code Throwable} only if it belongs to a set of \"fatal\" error varieties. These\n+     * varieties are as follows:\n+     * <ul>\n+     * <li>{@code VirtualMachineError}</li>\n+     * <li>{@code ThreadDeath}</li>\n+     * <li>{@code LinkageError}</li>", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MTQ1NQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389541455", "bodyText": "Ah, it extends VirtualMachineError. \ud83d\ude05", "author": "trustin", "createdAt": "2020-03-09T09:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MDI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MTczMw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389541733", "bodyText": "2020", "author": "trustin", "createdAt": "2020-03-09T09:24:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2016 LINE Corporation", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0OTE4OQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389549189", "bodyText": "\ud83d\ude05", "author": "minwoox", "createdAt": "2020-03-09T09:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MjA0MQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389542041", "bodyText": "Could you update NOTICE.txt and licenses/ directory?", "author": "trustin", "createdAt": "2020-03-09T09:25:23Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2016-present, RxJava Contributors.", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0OTMzNA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389549334", "bodyText": "Oops, I thought we already had it.", "author": "minwoox", "createdAt": "2020-03-09T09:39:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MjA0MQ=="}], "type": "inlineReview"}, {"oid": "1f2b07612ad4b41d78497a14ec3d979c6462926b", "url": "https://github.com/line/armeria/commit/1f2b07612ad4b41d78497a14ec3d979c6462926b", "message": "Address comments by @trustin", "committedDate": "2020-03-09T09:38:43Z", "type": "commit"}, {"oid": "7b3e5ddf3c02382b8200039c0ae396281b6038b4", "url": "https://github.com/line/armeria/commit/7b3e5ddf3c02382b8200039c0ae396281b6038b4", "message": "Add to notice.txt", "committedDate": "2020-03-09T09:41:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwNTgwNg==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389605806", "bodyText": "This seems dead code.", "author": "ikhoon", "createdAt": "2020-03-09T11:36:27Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java", "diffHunk": "@@ -43,21 +45,23 @@\n @UnstableApi\n public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {\n \n+    private static final Logger logger = LoggerFactory.getLogger(DeferredStreamMessage.class);", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NjQyNg==", "url": "https://github.com/line/armeria/pull/2553#discussion_r390046426", "bodyText": "Oops Thanks! Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-10T01:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwNTgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwODIyNA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389608224", "bodyText": "nit: not related to this PR\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Builder<SubscriptionOption> builder = ImmutableList.builder();\n          \n          \n            \n                    final ImmutableList.Builder<SubscriptionOption> builder = ImmutableList.builder();", "author": "ikhoon", "createdAt": "2020-03-09T11:41:58Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java", "diffHunk": "@@ -228,110 +232,124 @@ private void doCancel() {\n \n     @Override\n     SubscriptionImpl subscribe(SubscriptionImpl subscription) {\n-        if (!subscriptionUpdater.compareAndSet(this, null, subscription)) {\n-            final SubscriptionImpl oldSubscription = this.subscription;\n+        if (!downstreamSubscriptionUpdater.compareAndSet(this, null, subscription)) {\n+            final SubscriptionImpl oldSubscription = downstreamSubscription;\n             assert oldSubscription != null;\n             return oldSubscription;\n         }\n \n         final Subscriber<Object> subscriber = subscription.subscriber();\n         if (subscription.needsDirectInvocation()) {\n-            subscriber.onSubscribe(subscription);\n-            safeOnSubscribeToDelegate();\n+            subscribe(subscription, subscriber);\n         } else {\n             subscription.executor().execute(() -> {\n-                subscriber.onSubscribe(subscription);\n-                safeOnSubscribeToDelegate();\n+                subscribe(subscription, subscriber);\n             });\n         }\n \n         return subscription;\n     }\n \n-    private void safeOnSubscribeToDelegate() {\n-        if (delegate == null || subscription == null) {\n+    private void subscribe(SubscriptionImpl subscription, Subscriber<Object> subscriber) {\n+        try {\n+            subscriber.onSubscribe(subscription);\n+        } catch (Exception e) {\n+            abort(e);\n+            return;\n+        }\n+        safeOnSubscribeToUpstream();\n+    }\n+\n+    private void safeOnSubscribeToUpstream() {\n+        final StreamMessage<T> upstream = this.upstream;\n+        final SubscriptionImpl downstreamSubscription = this.downstreamSubscription;\n+        if (upstream == null || downstreamSubscription == null) {\n             return;\n         }\n \n-        if (!subscribedToDelegateUpdater.compareAndSet(this, 0, 1)) {\n+        if (!subscribedToUpstreamUpdater.compareAndSet(this, 0, 1)) {\n             return;\n         }\n \n         final Builder<SubscriptionOption> builder = ImmutableList.builder();", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMjY0OQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389612649", "bodyText": "Join two lines?", "author": "ikhoon", "createdAt": "2020-03-09T11:52:18Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2016-present, RxJava Contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException}\n+ * does not modify the structure of any exception it wraps, but at print-time it iterates through the list of\n+ * Throwables contained in the composite in order to print them all.\n+ *\n+ * <p>Its invariant is to contain an immutable, ordered (by insertion order), unique list of non-composite\n+ * exceptions. You can retrieve individual exceptions in this list with {@link #getExceptions()}.\n+ *\n+ * <p>The {@link #printStackTrace()} implementation handles the StackTrace in a customized way instead of using\n+ * {@code getCause()} so that it can avoid circular references.\n+ *\n+ * <p>If you invoke {@link #getCause()}, it will lazily create the causal chain but will stop if it finds any\n+ * Throwable in the chain that it has already seen.\n+ */\n+public final class CompositeException extends RuntimeException {\n+\n+    // Forked from RxJava 3.0.0 at e793bc1d1a29dca18be795cf4a7628e2d44a4234\n+\n+    private static final long serialVersionUID = 3026362227162912146L;\n+\n+    private final List<Throwable> exceptions;\n+    private final String message;\n+\n+    @Nullable\n+    private Throwable cause;\n+\n+    /**\n+     * Constructs a CompositeException with the given array of Throwables as the\n+     * list of suppressed exceptions.\n+     * @param exceptions the Throwables to have as initially suppressed exceptions\n+     *\n+     * @throws IllegalArgumentException if <code>exceptions</code> is empty.\n+     */\n+    public CompositeException(Throwable... exceptions) {\n+        this(ImmutableList.copyOf(requireNonNull(exceptions, \"exceptions\")));\n+    }\n+\n+    /**\n+     * Constructs a CompositeException with the given array of Throwables as the\n+     * list of suppressed exceptions.\n+     * @param errors the Throwables to have as initially suppressed exceptions\n+     *\n+     * @throws IllegalArgumentException if <code>errors</code> is empty.\n+     */\n+    public CompositeException(Iterable<? extends Throwable> errors) {\n+        requireNonNull(errors, \"errors\");\n+        final Set<Throwable> deDupedExceptions = new LinkedHashSet<>();\n+        for (Throwable ex : errors) {\n+            if (ex instanceof CompositeException) {\n+                deDupedExceptions.addAll(((CompositeException) ex).getExceptions());\n+            } else if (ex != null) {\n+                deDupedExceptions.add(ex);\n+            } else {\n+                deDupedExceptions.add(new NullPointerException(\"Throwable was null!\"));\n+            }\n+        }\n+        if (deDupedExceptions.isEmpty()) {\n+            throw new IllegalArgumentException(\"errors is empty\");\n+        }\n+        final List<Throwable> localExceptions = new ArrayList<>(deDupedExceptions);\n+        exceptions = Collections.unmodifiableList(localExceptions);\n+        message = exceptions.size() + \" exceptions occurred. \";\n+    }\n+\n+    /**\n+     * Retrieves the list of exceptions that make up the {@code CompositeException}.\n+     *\n+     * @return the exceptions that make up the {@code CompositeException},\n+     *         as a {@link List} of {@link Throwable}s\n+     */\n+    public List<Throwable> getExceptions() {\n+        return exceptions;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    @Override\n+    public synchronized Throwable getCause() { // NOPMD\n+        if (cause == null) {\n+            final String separator = System.getProperty(\"line.separator\");\n+            if (exceptions.size() > 1) {\n+                final Map<Throwable, Boolean> seenCauses = new IdentityHashMap<>();\n+\n+                final StringBuilder aggregateMessage = new StringBuilder();\n+                aggregateMessage.append(\"Multiple exceptions (\").append(exceptions.size()).append(')').append(\n+                        separator);\n+\n+                for (Throwable inner : exceptions) {\n+                    int depth = 0;\n+                    while (inner != null) {\n+                        for (int i = 0; i < depth; i++) {\n+                            aggregateMessage.append(\"  \");\n+                        }\n+                        aggregateMessage.append(\"|-- \");\n+                        aggregateMessage.append(inner.getClass().getCanonicalName()).append(\": \");\n+                        final String innerMessage = inner.getMessage();\n+                        if (innerMessage != null && innerMessage.contains(separator)) {\n+                            aggregateMessage.append(separator);\n+                            for (String line : innerMessage.split(separator)) {\n+                                for (int i = 0; i < depth + 2; i++) {\n+                                    aggregateMessage.append(\"  \");\n+                                }\n+                                aggregateMessage.append(line).append(separator);\n+                            }\n+                        } else {\n+                            aggregateMessage.append(innerMessage);\n+                            aggregateMessage.append(separator);\n+                        }\n+\n+                        for (int i = 0; i < depth + 2; i++) {\n+                            aggregateMessage.append(\"  \");\n+                        }\n+                        final StackTraceElement[] st = inner.getStackTrace();\n+                        if (st.length > 0) {\n+                            aggregateMessage.append(\"at \").append(st[0]).append(separator);\n+                        }\n+\n+                        if (!seenCauses.containsKey(inner)) {\n+                            seenCauses.put(inner, true);\n+\n+                            inner = inner.getCause();\n+                            depth++;\n+                        } else {\n+                            inner = inner.getCause();\n+                            if (inner != null) {\n+                                for (int i = 0; i < depth + 2; i++) {\n+                                    aggregateMessage.append(\"  \");\n+                                }\n+                                aggregateMessage.append(\"|-- \");\n+                                aggregateMessage.append(\"(cause not expanded again) \");\n+                                aggregateMessage.append(inner.getClass().getCanonicalName()).append(\": \");\n+                                aggregateMessage.append(inner.getMessage());\n+                                aggregateMessage.append(separator);\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                cause = new ExceptionOverview(aggregateMessage.toString().trim());\n+            } else {\n+                cause = exceptions.get(0);\n+            }\n+        }\n+        return cause;\n+    }\n+\n+    /**\n+     * All of the following {@code printStackTrace} functionality is derived from JDK {@link Throwable}\n+     * {@code printStackTrace}. In particular, the {@code PrintStreamOrWriter} abstraction is copied wholesale.\n+     *\n+     * <p>Changes from the official JDK implementation:<ul>\n+     * <li>no infinite loop detection</li>\n+     * <li>smaller critical section holding {@link PrintStream} lock</li>\n+     * <li>explicit knowledge about the exceptions {@link List} that this loops through</li>\n+     * </ul>\n+     */\n+    @Override\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintStream s) {\n+        printStackTrace(new WrappedPrintStream(s));\n+    }\n+\n+    @Override\n+    public void printStackTrace(PrintWriter s) {\n+        printStackTrace(new WrappedPrintWriter(s));\n+    }\n+\n+    /**\n+     * Special handling for printing out a {@code CompositeException}.\n+     * Loops through all inner exceptions and prints them out.\n+     *\n+     * @param s\n+     *            stream to print to", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NjQ4Nw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r390046487", "bodyText": "All fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-10T01:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxMjY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNDQyMg==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389614422", "bodyText": "Could replace with?:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<Throwable> localExceptions = new ArrayList<>(deDupedExceptions);\n          \n          \n            \n                    exceptions = Collections.unmodifiableList(localExceptions);\n          \n          \n            \n                    exceptions = ImmutableList.copyOf(deDupedExceptions);", "author": "ikhoon", "createdAt": "2020-03-09T11:56:27Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Copyright 2016 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c) 2016-present, RxJava Contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.common.util;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException}\n+ * does not modify the structure of any exception it wraps, but at print-time it iterates through the list of\n+ * Throwables contained in the composite in order to print them all.\n+ *\n+ * <p>Its invariant is to contain an immutable, ordered (by insertion order), unique list of non-composite\n+ * exceptions. You can retrieve individual exceptions in this list with {@link #getExceptions()}.\n+ *\n+ * <p>The {@link #printStackTrace()} implementation handles the StackTrace in a customized way instead of using\n+ * {@code getCause()} so that it can avoid circular references.\n+ *\n+ * <p>If you invoke {@link #getCause()}, it will lazily create the causal chain but will stop if it finds any\n+ * Throwable in the chain that it has already seen.\n+ */\n+public final class CompositeException extends RuntimeException {\n+\n+    // Forked from RxJava 3.0.0 at e793bc1d1a29dca18be795cf4a7628e2d44a4234\n+\n+    private static final long serialVersionUID = 3026362227162912146L;\n+\n+    private final List<Throwable> exceptions;\n+    private final String message;\n+\n+    @Nullable\n+    private Throwable cause;\n+\n+    /**\n+     * Constructs a CompositeException with the given array of Throwables as the\n+     * list of suppressed exceptions.\n+     * @param exceptions the Throwables to have as initially suppressed exceptions\n+     *\n+     * @throws IllegalArgumentException if <code>exceptions</code> is empty.\n+     */\n+    public CompositeException(Throwable... exceptions) {\n+        this(ImmutableList.copyOf(requireNonNull(exceptions, \"exceptions\")));\n+    }\n+\n+    /**\n+     * Constructs a CompositeException with the given array of Throwables as the\n+     * list of suppressed exceptions.\n+     * @param errors the Throwables to have as initially suppressed exceptions\n+     *\n+     * @throws IllegalArgumentException if <code>errors</code> is empty.\n+     */\n+    public CompositeException(Iterable<? extends Throwable> errors) {\n+        requireNonNull(errors, \"errors\");\n+        final Set<Throwable> deDupedExceptions = new LinkedHashSet<>();\n+        for (Throwable ex : errors) {\n+            if (ex instanceof CompositeException) {\n+                deDupedExceptions.addAll(((CompositeException) ex).getExceptions());\n+            } else if (ex != null) {\n+                deDupedExceptions.add(ex);\n+            } else {\n+                deDupedExceptions.add(new NullPointerException(\"Throwable was null!\"));\n+            }\n+        }\n+        if (deDupedExceptions.isEmpty()) {\n+            throw new IllegalArgumentException(\"errors is empty\");\n+        }\n+        final List<Throwable> localExceptions = new ArrayList<>(deDupedExceptions);\n+        exceptions = Collections.unmodifiableList(localExceptions);", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNDc1OA==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389624758", "bodyText": "Just copied the code from RxJava in this class. So I didn't change it. But, Yes, I will make a change for this.", "author": "minwoox", "createdAt": "2020-03-09T12:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNDQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxNTg1Mw==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389615853", "bodyText": "nit: Merge two lines?", "author": "ikhoon", "createdAt": "2020-03-09T11:59:28Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java", "diffHunk": "@@ -222,6 +222,38 @@ public static boolean isStreamCancelling(Throwable cause) {\n         return null; // Never reaches here.\n     }\n \n+    // This is copied from\n+    // https://github.com/ReactiveX/RxJava/blob/v3.0.0/src/main/java/io/reactivex/rxjava3/exceptions/Exceptions.java\n+\n+    /**\n+     * Throws a particular {@code Throwable} only if it belongs to a set of \"fatal\" error varieties. These\n+     * varieties are as follows:\n+     * <ul>\n+     * <li>{@code VirtualMachineError}</li>\n+     * <li>{@code ThreadDeath}</li>\n+     * <li>{@code LinkageError}</li>\n+     * </ul>\n+     * This can be useful if you are writing an operator that calls user-supplied code, and you want to\n+     * notify subscribers of errors encountered in that code by calling their {@code onError} methods, but only\n+     * if the errors are not so catastrophic that such a call would be futile, in which case you simply want to\n+     * rethrow the error.\n+     *\n+     * @param t\n+     *         the {@code Throwable} to test and perhaps throw", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxODE1Ng==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389618156", "bodyText": "I'm not strong. I think we don't need to check null here. Because a user might not expect NPE here.", "author": "ikhoon", "createdAt": "2020-03-09T12:04:56Z", "path": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java", "diffHunk": "@@ -222,6 +222,38 @@ public static boolean isStreamCancelling(Throwable cause) {\n         return null; // Never reaches here.\n     }\n \n+    // This is copied from\n+    // https://github.com/ReactiveX/RxJava/blob/v3.0.0/src/main/java/io/reactivex/rxjava3/exceptions/Exceptions.java\n+\n+    /**\n+     * Throws a particular {@code Throwable} only if it belongs to a set of \"fatal\" error varieties. These\n+     * varieties are as follows:\n+     * <ul>\n+     * <li>{@code VirtualMachineError}</li>\n+     * <li>{@code ThreadDeath}</li>\n+     * <li>{@code LinkageError}</li>\n+     * </ul>\n+     * This can be useful if you are writing an operator that calls user-supplied code, and you want to\n+     * notify subscribers of errors encountered in that code by calling their {@code onError} methods, but only\n+     * if the errors are not so catastrophic that such a call would be futile, in which case you simply want to\n+     * rethrow the error.\n+     *\n+     * @param t\n+     *         the {@code Throwable} to test and perhaps throw\n+     * @see <a href=\"https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495\">\n+     *     RxJava: StackOverflowError is swallowed (Issue #748)</a>\n+     */\n+    public static void throwIfFatal(Throwable t) {\n+        requireNonNull(t, \"t\");", "originalCommit": "f3a464142074ed2f92f3c60f192ffd32549448ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNTMwNg==", "url": "https://github.com/line/armeria/pull/2553#discussion_r389625306", "bodyText": "When we provide a public API, we always don't want a user to call the API with null. But we always have a null check. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-09T12:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxODE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA1MzE0OQ==", "url": "https://github.com/line/armeria/pull/2553#discussion_r390053149", "bodyText": "OK, that is a good point, let keep it.", "author": "ikhoon", "createdAt": "2020-03-10T01:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYxODE1Ng=="}], "type": "inlineReview"}, {"oid": "3e2d5861207a3bec461e8ef4c47d4bd56785d696", "url": "https://github.com/line/armeria/commit/3e2d5861207a3bec461e8ef4c47d4bd56785d696", "message": "Address comments by @ikhoon and @trustin", "committedDate": "2020-03-10T01:24:04Z", "type": "commit"}, {"oid": "8893ee68857a79c51ac171fd7e9a178fb6d26cef", "url": "https://github.com/line/armeria/commit/8893ee68857a79c51ac171fd7e9a178fb6d26cef", "message": "Address comments by @ikhoon", "committedDate": "2020-03-10T01:54:57Z", "type": "commit"}]}