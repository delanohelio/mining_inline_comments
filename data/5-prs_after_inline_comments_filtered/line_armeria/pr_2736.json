{"pr_number": 2736, "pr_title": "Allow retrying when an `EndpointGroup` is empty.", "pr_createdAt": "2020-05-21T08:17:02Z", "pr_url": "https://github.com/line/armeria/pull/2736", "timeline": [{"oid": "a86524495fc851c3ac58c9fa1badbf2fae057fa2", "url": "https://github.com/line/armeria/commit/a86524495fc851c3ac58c9fa1badbf2fae057fa2", "message": "Allow retrying when an `EndpointGroup` is empty.\n\nRelated: #1910\n\nMotivation:\n\nA client request to an empty `EndpointGroup` fails immediately with an\n`EmptyEndpointGroupException`, even if there is a `Retrying(Rpc)Client`\nin the decorator chain. As a result, a user cannot recover from the case\nof an empty `EndpointGroup`.\n\nModifications:\n\n- Make `DefaultClientRequestContext` handle `EmptyEndpointGroupException`\n  specially so that `init()` does not treat is as failure.\n- Make `AbstractRetryingClient` handle `EmptyEndpointGroupException`\n  specially so that it can continue retrying.\n- Modify the signature of `ClientFactory.acquireEventLoop()` and\n  `EventLoopScheduler.acquire()` so that it's possible to acquire an\n  `EventLoop` even when `Endpoint` is not determined yet.\n\nResult:\n\n- A user can retry even when the current `EndpointGroup` is empty.\n\nDiscussion items:\n\n- Should we make `EndpointGroup.select()` return `null` instead of\n  throwing an `EmptyEndpointGroupException`? i.e. Instantiate\n  `EmptyEndpointGroupException` only when setting `responseCause`.", "committedDate": "2020-05-21T08:09:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxMzU1MA==", "url": "https://github.com/line/armeria/pull/2736#discussion_r428513550", "bodyText": "Unrelated with this PR, but this removes a deprecation warning during compilation. The comment block seems not relevant anymore.", "author": "trustin", "createdAt": "2020-05-21T08:21:07Z", "path": "brave/src/main/java/com/linecorp/armeria/server/brave/ServiceRequestContextAdapter.java", "diffHunk": "@@ -70,13 +68,6 @@ public String method() {\n             return ctx.method().name();\n         }\n \n-        /**\n-         * Original implementation is calling {@link HttpServerAdapter#url(Object)} which needs {@link\n-         * RequestLog#scheme()}, but because {@link RequestLog#scheme()} is not always available, we need to\n-         * use {@link RequestContext#path()} directly.\n-         *\n-         * @see brave.http.HttpServerRequest#path()\n-         */", "originalCommit": "a86524495fc851c3ac58c9fa1badbf2fae057fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxMzY0MA==", "url": "https://github.com/line/armeria/pull/2736#discussion_r428513640", "bodyText": "Unrelated with this PR - just fixed indentation", "author": "trustin", "createdAt": "2020-05-21T08:21:19Z", "path": "brave/src/main/java/com/linecorp/armeria/server/brave/ServiceRequestContextAdapter.java", "diffHunk": "@@ -56,8 +55,7 @@\n          */\n         @Override\n         public boolean parseClientIpAndPort(Span span) {\n-            return parseClientIpFromXForwardedFor(span) ||\n-                SpanTags.updateRemoteEndpoint(span, ctx);", "originalCommit": "a86524495fc851c3ac58c9fa1badbf2fae057fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxMzcyNQ==", "url": "https://github.com/line/armeria/pull/2736#discussion_r428513725", "bodyText": "Unrelated with this PR - just fixed indentation", "author": "trustin", "createdAt": "2020-05-21T08:21:32Z", "path": "brave/src/main/java/com/linecorp/armeria/server/brave/ServiceRequestContextAdapter.java", "diffHunk": "@@ -118,8 +109,8 @@ public long startTimestamp() {\n         }\n     }\n \n-    static brave.http.HttpServerResponse asHttpServerResponse(RequestLog log,\n-        brave.http.HttpServerRequest request) {", "originalCommit": "a86524495fc851c3ac58c9fa1badbf2fae057fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1NzM0Nw==", "url": "https://github.com/line/armeria/pull/2736#discussion_r428557347", "bodyText": "Is the write to stderr here on purpose or a leftover after a debugging session?", "author": "andrey-tpt", "createdAt": "2020-05-21T09:55:25Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java", "diffHunk": "@@ -62,12 +58,22 @@\n     public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n         final Endpoint endpoint = ctx.endpoint();\n         if (endpoint == null) {\n-            // Note that this response will be ignored because:\n-            // - `ClientRequestContext.endpoint()` returns `null` only when the context initialization failed.\n-            // - `ClientUtil.initContextAndExecuteWithFallback()` will use the fallback response rather than\n-            //   what we return here.\n-            req.abort(CONTEXT_INITIALIZATION_FAILED);\n-            return HttpResponse.ofFailure(CONTEXT_INITIALIZATION_FAILED);\n+            // It is possible that we reach here even when `EndpointGroup` is not empty,\n+            // because `endpoint` can be `null` for the following two cases:\n+            // - `EndpointGroup.select()` raised an `EmptyEndpointGroupException`.\n+            // - Other exception was raised while context initialization.\n+            //\n+            // Because all the clean-up is done by `DefaultClientRequestContext.failEarly()`\n+            // when context initialization fails with an exception other than `EmptyEndpointGroupException`,\n+            // we can assume that the exception and response created here will be exposed only\n+            // when context initialization failed due to an `EmptyEndpointGroupException`.\n+            //\n+            // See `DefaultClientRequestContext.init()` for more information.\n+            System.err.println(\"!!!!!!\");", "originalCommit": "a86524495fc851c3ac58c9fa1badbf2fae057fa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5ODg5Mg==", "url": "https://github.com/line/armeria/pull/2736#discussion_r428598892", "bodyText": "!!!!!!", "author": "trustin", "createdAt": "2020-05-21T11:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1NzM0Nw=="}], "type": "inlineReview"}, {"oid": "e3ca645301cd1b3d0765e26ca02008d4097cce1e", "url": "https://github.com/line/armeria/commit/e3ca645301cd1b3d0765e26ca02008d4097cce1e", "message": "Remove the cruft", "committedDate": "2020-05-21T11:33:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMjQ2Ng==", "url": "https://github.com/line/armeria/pull/2736#discussion_r429032466", "bodyText": "Maybe, is this a breaking change? Need a breaking-changes label?", "author": "ikhoon", "createdAt": "2020-05-22T04:08:51Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java", "diffHunk": "@@ -161,8 +162,15 @@ static void disableShutdownHook() {\n      * Acquires an {@link EventLoop} that is expected to handle a connection to the specified {@link Endpoint}.\n      * The caller must release the returned {@link EventLoop} back by calling {@link ReleasableHolder#release()}\n      * so that {@link ClientFactory} utilizes {@link EventLoop}s efficiently.\n+     *\n+     * @param sessionProtocol the {@link SessionProtocol} of the connection\n+     * @param endpointGroup the {@link EndpointGroup} where {@code endpoint} belongs to.\n+     * @param endpoint the {@link Endpoint} where a request is being sent.\n+     *                 {@code null} if the {@link Endpoint} is not known yet.\n      */\n-    ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint, SessionProtocol sessionProtocol);\n+    ReleasableHolder<EventLoop> acquireEventLoop(SessionProtocol sessionProtocol,\n+                                                 EndpointGroup endpointGroup,\n+                                                 @Nullable Endpoint endpoint);", "originalCommit": "e3ca645301cd1b3d0765e26ca02008d4097cce1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3OTAxMQ==", "url": "https://github.com/line/armeria/pull/2736#discussion_r429079011", "bodyText": "Good idea. Added the label.", "author": "trustin", "createdAt": "2020-05-22T07:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMjQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMjc4NA==", "url": "https://github.com/line/armeria/pull/2736#discussion_r429032784", "bodyText": "Ditto.", "author": "ikhoon", "createdAt": "2020-05-22T04:10:12Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -252,7 +250,7 @@ default ClientRequestContext newDerivedContext(RequestId id,\n      * <p>Note that this method does not copy the {@link RequestLog} properties to the derived context.\n      */\n     ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req, @Nullable RpcRequest rpcReq,\n-                                           Endpoint endpoint);\n+                                           @Nullable Endpoint endpoint);", "originalCommit": "e3ca645301cd1b3d0765e26ca02008d4097cce1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8772cec63eb8cc31f1e14ec374ecc9567d09148", "url": "https://github.com/line/armeria/commit/a8772cec63eb8cc31f1e14ec374ecc9567d09148", "message": "Merge branch 'master' into null_endpoint", "committedDate": "2020-05-22T06:11:34Z", "type": "commit"}, {"oid": "d3e67b3882f50d0b0d75d237cb9b0cc59b48453a", "url": "https://github.com/line/armeria/commit/d3e67b3882f50d0b0d75d237cb9b0cc59b48453a", "message": "Make `EndpointSelector.select()` return `null`", "committedDate": "2020-05-22T06:58:30Z", "type": "commit"}, {"oid": "a61a4009a880107f783ba63ba2ed2b698b226b77", "url": "https://github.com/line/armeria/commit/a61a4009a880107f783ba63ba2ed2b698b226b77", "message": "Checkstyle", "committedDate": "2020-05-22T07:08:03Z", "type": "commit"}]}