{"pr_number": 3220, "pr_title": "Fix invalid return types of overridden methods in builder classes", "pr_createdAt": "2020-12-12T08:40:46Z", "pr_url": "https://github.com/line/armeria/pull/3220", "timeline": [{"oid": "1cff25c961187475a6742b4181a8432540a6172c", "url": "https://github.com/line/armeria/commit/1cff25c961187475a6742b4181a8432540a6172c", "message": "Fix type", "committedDate": "2020-12-12T08:31:50Z", "type": "commit"}, {"oid": "c5688e8b3cf41f5d49785daf90a5990def924d9f", "url": "https://github.com/line/armeria/commit/c5688e8b3cf41f5d49785daf90a5990def924d9f", "message": "Add `MethodChainingTest`", "committedDate": "2020-12-14T13:03:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2Nzc1Mw==", "url": "https://github.com/line/armeria/pull/3220#discussion_r542367753", "bodyText": "I am not sure if this is the right way \ud83d\ude05\nThese classes should not be changed like the class I raised as an issue.", "author": "heowc", "createdAt": "2020-12-14T13:05:54Z", "path": "core/src/test/java/com/linecorp/armeria/MethodChainingTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.internal.testing.AbstractMethodChainingTest;\n+\n+class MethodChainingTest extends AbstractMethodChainingTest {\n+\n+    MethodChainingTest() {\n+        super(\"com.linecorp.armeria.common.DefaultQueryParamsBuilder\",\n+              \"com.linecorp.armeria.common.DefaultRequestHeadersBuilder\",\n+              \"com.linecorp.armeria.common.DefaultHttpHeadersBuilder\",\n+              \"com.linecorp.armeria.common.DefaultResponseHeadersBuilder\",\n+              \"com.linecorp.armeria.client.ClientBuilder\",\n+              \"com.linecorp.armeria.server.file.HttpFileBuilder$FileSystemHttpFileBuilder\",\n+              \"com.linecorp.armeria.server.file.HttpFileBuilder$ClassPathHttpFileBuilder\",\n+              \"com.linecorp.armeria.server.file.HttpFileBuilder$NonExistentHttpFileBuilder\",\n+              \"com.linecorp.armeria.server.file.HttpFileBuilder$HttpDataFileBuilder\",\n+              \"com.linecorp.armeria.server.DomainMappingBuilder\");", "originalCommit": "c5688e8b3cf41f5d49785daf90a5990def924d9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4NjEzNg==", "url": "https://github.com/line/armeria/pull/3220#discussion_r543086136", "bodyText": "Maybe could we generalize the test algorithm a little bit so the tests pass even for these classes?", "author": "trustin", "createdAt": "2020-12-15T06:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2Nzc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxNzI3NQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r543217275", "bodyText": "Hmm... From what I've been looking for, the difference is that the parent class has a build method.\nBut still not sure if this is correct \ud83d\ude05", "author": "heowc", "createdAt": "2020-12-15T10:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2Nzc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3MTAyNQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r542371025", "bodyText": "Exclude classes written from test code.\nExclude classes that are not suffixed with Builder.\nExclude classes to be ignored.", "author": "heowc", "createdAt": "2020-12-14T13:10:58Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+public abstract class AbstractMethodChainingTest {\n+\n+    private final List<String> ignoredClasses;\n+\n+    protected AbstractMethodChainingTest(String... ignoredClasses) {\n+        this.ignoredClasses = ImmutableList.copyOf(ignoredClasses);\n+    }\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(this::filterClass)\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = getAllMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final Reflections reflections = new Reflections(\n+                new ConfigurationBuilder()\n+                        .setUrls(ClasspathHelper.forPackage(packageName))\n+                        .setScanners(new SubTypesScanner(false))\n+        );\n+        return reflections.getStore().get(\"SubTypesScanner\").values();\n+    }\n+\n+    private boolean filterClass(Class<?> clazz) {\n+        return declaredInTestClass(clazz) &&\n+               clazz.getName().endsWith(\"Builder\") &&\n+               !ignoredClasses.contains(clazz.getName());", "originalCommit": "c5688e8b3cf41f5d49785daf90a5990def924d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "13f929a346fd44c81b659721b6f07513c3b4b3c9", "url": "https://github.com/line/armeria/commit/13f929a346fd44c81b659721b6f07513c3b4b3c9", "message": "Add condition if parent class has build method", "committedDate": "2020-12-15T10:08:48Z", "type": "commit"}, {"oid": "4dde00ce4e980217af2866de22fec04df1f4d8fe", "url": "https://github.com/line/armeria/commit/4dde00ce4e980217af2866de22fec04df1f4d8fe", "message": "Refactor", "committedDate": "2020-12-15T13:59:23Z", "type": "commit"}, {"oid": "83086b9bbccdde8742fb6120a59e539711b5c028", "url": "https://github.com/line/armeria/commit/83086b9bbccdde8742fb6120a59e539711b5c028", "message": "Add javadoc", "committedDate": "2020-12-16T02:07:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NzQyNA==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544077424", "bodyText": "We don't need to call this method because we always check if the name ends with \"Builder\"?\n(the method check if the name of the class ends with \"Test\" which is exclusive)", "author": "minwoox", "createdAt": "2020-12-16T07:41:39Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(AbstractMethodChainingTest::filterClass)\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static boolean filterClass(Class<?> clazz) {\n+        return declaredInTestClass(clazz) &&", "originalCommit": "83086b9bbccdde8742fb6120a59e539711b5c028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwMTY3OA==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544101678", "bodyText": "Removed", "author": "heowc", "createdAt": "2020-12-16T08:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NzQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NzUyNg==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544077526", "bodyText": "getSimpleName()?", "author": "minwoox", "createdAt": "2020-12-16T07:41:48Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(AbstractMethodChainingTest::filterClass)\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static boolean filterClass(Class<?> clazz) {\n+        return declaredInTestClass(clazz) &&\n+               clazz.getName().endsWith(\"Builder\");", "originalCommit": "83086b9bbccdde8742fb6120a59e539711b5c028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwMTc2NQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544101765", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-12-16T08:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NzUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MTA0OA==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544081048", "bodyText": "How about adding\n.filterInputsBy(filePath -> filePath != null && filePath.endsWith(\".class\"))\nso this does not run on a different file? (e.g. pavicon.png)", "author": "minwoox", "createdAt": "2020-12-16T07:48:55Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(AbstractMethodChainingTest::filterClass)\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())", "originalCommit": "83086b9bbccdde8742fb6120a59e539711b5c028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwMTg1Nw==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544101857", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-12-16T08:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MTA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MTMzMQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544081331", "bodyText": "Shouldn't we put this class to all modules?", "author": "minwoox", "createdAt": "2020-12-16T07:49:27Z", "path": "core/src/test/java/com/linecorp/armeria/MethodChainingTest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import com.linecorp.armeria.internal.testing.AbstractMethodChainingTest;\n+\n+class MethodChainingTest extends AbstractMethodChainingTest {}", "originalCommit": "83086b9bbccdde8742fb6120a59e539711b5c028", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwMzMwNA==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544103304", "bodyText": "If the abstract class was okay, I tried to write more. \ud83d\ude09", "author": "heowc", "createdAt": "2020-12-16T08:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MTMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNDgyMg==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544104822", "bodyText": "I think it's okay. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-12-16T08:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MTMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyOTcxOQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r544129719", "bodyText": "Thank you for the review. \ud83d\ude04\nI added test code to each module.", "author": "heowc", "createdAt": "2020-12-16T09:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MTMzMQ=="}], "type": "inlineReview"}, {"oid": "6f3d3f5489453e2777eec07968279730385f0ccf", "url": "https://github.com/line/armeria/commit/6f3d3f5489453e2777eec07968279730385f0ccf", "message": "Address comments by @minwoox", "committedDate": "2020-12-16T08:25:26Z", "type": "commit"}, {"oid": "fbfb44fc77681307b493e766cd99b0aa6d15d28b", "url": "https://github.com/line/armeria/commit/fbfb44fc77681307b493e766cd99b0aa6d15d28b", "message": "add `MethodChainingTest` for each module", "committedDate": "2020-12-16T09:06:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxMTU2OQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r545711569", "bodyText": "OverridenBuilderMethodsRetureTypeTest?", "author": "minwoox", "createdAt": "2020-12-18T09:34:48Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {", "originalCommit": "fbfb44fc77681307b493e766cd99b0aa6d15d28b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4MjU2Mw==", "url": "https://github.com/line/armeria/pull/3220#discussion_r546182563", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-12-19T03:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxMTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDA1Ng==", "url": "https://github.com/line/armeria/pull/3220#discussion_r545714056", "bodyText": "Shouldn't we fail in this case? \ud83e\udd14", "author": "minwoox", "createdAt": "2020-12-18T09:39:14Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(clazz -> clazz.getSimpleName().endsWith(\"Builder\"))\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored", "originalCommit": "fbfb44fc77681307b493e766cd99b0aa6d15d28b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4MTg4NA==", "url": "https://github.com/line/armeria/pull/3220#discussion_r546181884", "bodyText": "I think we can ignore this because we get the method through the parent class.", "author": "heowc", "createdAt": "2020-12-19T03:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDM1OA==", "url": "https://github.com/line/armeria/pull/3220#discussion_r545714358", "bodyText": "overriddenMethods?", "author": "minwoox", "createdAt": "2020-12-18T09:39:45Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(clazz -> clazz.getSimpleName().endsWith(\"Builder\"))\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .filterInputsBy(filePath -> filePath != null && filePath.endsWith(\".class\"))\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static List<Method> obtainMethods(Class<?> clazz) {", "originalCommit": "fbfb44fc77681307b493e766cd99b0aa6d15d28b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4MjU5MQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r546182591", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-12-19T03:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDY4MQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r545714681", "bodyText": "Could you give an example of this?", "author": "minwoox", "createdAt": "2020-12-18T09:40:25Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(clazz -> clazz.getSimpleName().endsWith(\"Builder\"))\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .filterInputsBy(filePath -> filePath != null && filePath.endsWith(\".class\"))\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static List<Method> obtainMethods(Class<?> clazz) {\n+        final Set<Class<?>> allSuperTypes = ReflectionUtils.getAllSuperTypes(clazz, input -> input != clazz);\n+        final ImmutableList<Method> methods = allSuperTypes.stream()\n+                                                           .flatMap(sc -> Arrays.stream(sc.getMethods()))\n+                                                           .distinct()\n+                                                           .collect(toImmutableList());\n+        // In general, if parent classes have a build method, did not override the method with that type.", "originalCommit": "fbfb44fc77681307b493e766cd99b0aa6d15d28b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4MTczNw==", "url": "https://github.com/line/armeria/pull/3220#discussion_r546181737", "bodyText": "The things mentioned here can be an example.", "author": "heowc", "createdAt": "2020-12-19T03:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNDY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNTI1OQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r545715259", "bodyText": "Could just buildMethodExists and remove \"build\"?", "author": "minwoox", "createdAt": "2020-12-18T09:41:24Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/AbstractMethodChainingTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+public abstract class AbstractMethodChainingTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();\n+        findAllClasses(packageName).stream()\n+                                   .map(ReflectionUtils::forName)\n+                                   .filter(clazz -> clazz.getSimpleName().endsWith(\"Builder\"))\n+                                   .forEach(clazz -> {\n+                                       final List<Method> methods = obtainMethods(clazz);\n+                                       for (Method m : methods) {\n+                                           try {\n+                                               final Method overriddenMethod =\n+                                                       clazz.getDeclaredMethod(m.getName(),\n+                                                                               m.getParameterTypes());\n+                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);\n+                                           } catch (NoSuchMethodException e) {\n+                                               // ignored\n+                                           }\n+                                       }\n+                                   });\n+    }\n+\n+    private static Collection<String> findAllClasses(String packageName) {\n+        final ConfigurationBuilder configuration = new ConfigurationBuilder()\n+                .filterInputsBy(filePath -> filePath != null && filePath.endsWith(\".class\"))\n+                .setUrls(ClasspathHelper.forPackage(packageName))\n+                .setScanners(new SubTypesScanner())\n+                .setMetadataAdapter(new JavaReflectionAdapter());\n+        final Reflections reflections = new Reflections(configuration);\n+        return reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values();\n+    }\n+\n+    private static List<Method> obtainMethods(Class<?> clazz) {\n+        final Set<Class<?>> allSuperTypes = ReflectionUtils.getAllSuperTypes(clazz, input -> input != clazz);\n+        final ImmutableList<Method> methods = allSuperTypes.stream()\n+                                                           .flatMap(sc -> Arrays.stream(sc.getMethods()))\n+                                                           .distinct()\n+                                                           .collect(toImmutableList());\n+        // In general, if parent classes have a build method, did not override the method with that type.\n+        if (existMethodName(methods, \"build\")) {", "originalCommit": "fbfb44fc77681307b493e766cd99b0aa6d15d28b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4MjAzMw==", "url": "https://github.com/line/armeria/pull/3220#discussion_r546182033", "bodyText": "Same as above.", "author": "heowc", "createdAt": "2020-12-19T03:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNTI1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQwMjkyNg==", "url": "https://github.com/line/armeria/pull/3220#discussion_r548402926", "bodyText": "Oops, I missed this comment.\nI was suggesting rename this method. \ud83d\ude04\nif (buildMethodExists(methods)) {...}", "author": "minwoox", "createdAt": "2020-12-24T06:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNTI1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQwNTgyNA==", "url": "https://github.com/line/armeria/pull/3220#discussion_r548405824", "bodyText": "Fixed \ud83d\ude04", "author": "heowc", "createdAt": "2020-12-24T06:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNTI1OQ=="}], "type": "inlineReview"}, {"oid": "23ca946f327b3b4f2cc99a3a02c6219d69110c40", "url": "https://github.com/line/armeria/commit/23ca946f327b3b4f2cc99a3a02c6219d69110c40", "message": "Address comments by @minwoox", "committedDate": "2020-12-19T03:13:16Z", "type": "commit"}, {"oid": "2fa51a5980401329b10d0938a9057077f545ae83", "url": "https://github.com/line/armeria/commit/2fa51a5980401329b10d0938a9057077f545ae83", "message": "Merge branch 'master' into fix_type", "committedDate": "2020-12-19T04:32:48Z", "type": "commit"}, {"oid": "5ce42134ab7a0972ec4705707519f495d6a0dc58", "url": "https://github.com/line/armeria/commit/5ce42134ab7a0972ec4705707519f495d6a0dc58", "message": "Address comments by @minwoox", "committedDate": "2020-12-24T06:19:18Z", "type": "commit"}, {"oid": "834f24bb33b8380990711389791db39f47cc6468", "url": "https://github.com/line/armeria/commit/834f24bb33b8380990711389791db39f47cc6468", "message": "Add module (`it/builders`)", "committedDate": "2020-12-24T08:15:54Z", "type": "commit"}, {"oid": "6e0624e35dc9270218de094ff329fcc8293a9a48", "url": "https://github.com/line/armeria/commit/6e0624e35dc9270218de094ff329fcc8293a9a48", "message": "Fix `build.gradle`", "committedDate": "2020-12-24T08:26:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwMjI4NA==", "url": "https://github.com/line/armeria/pull/3220#discussion_r549202284", "bodyText": "How about hardcoring this string instead of using the test's package? Then it allows the tests location to be decoupled from the test.", "author": "anuraaga", "createdAt": "2020-12-28T03:27:06Z", "path": "it/builders/src/test/java/com/linecorp/armeria/OverriddenBuilderMethodsReturnTypeTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reflections.ReflectionUtils;\n+import org.reflections.Reflections;\n+import org.reflections.adapters.JavaReflectionAdapter;\n+import org.reflections.scanners.SubTypesScanner;\n+import org.reflections.util.ClasspathHelper;\n+import org.reflections.util.ConfigurationBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Makes sure most builder overrides all overridden methods with the correct return type.\n+ */\n+class OverriddenBuilderMethodsReturnTypeTest {\n+\n+    @Test\n+    void methodChaining() {\n+        final String packageName = getClass().getPackage().getName();", "originalCommit": "6e0624e35dc9270218de094ff329fcc8293a9a48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwMzMzMQ==", "url": "https://github.com/line/armeria/pull/3220#discussion_r549203331", "bodyText": "Fixed to com.linecorp.armeria \ud83d\ude09", "author": "heowc", "createdAt": "2020-12-28T03:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwMjI4NA=="}], "type": "inlineReview"}, {"oid": "bbfaf2f0b01161c9bc87e9f9dae6b54914dcdac4", "url": "https://github.com/line/armeria/commit/bbfaf2f0b01161c9bc87e9f9dae6b54914dcdac4", "message": "Address comments by @anuraaga", "committedDate": "2020-12-28T03:35:11Z", "type": "commit"}]}