{"pr_number": 3254, "pr_title": "Add `ConcatArrayStreamMessage` which flattens an array of `StreamMessage`s (Multipart 2/4)", "pr_createdAt": "2020-12-30T07:55:03Z", "pr_url": "https://github.com/line/armeria/pull/3254", "timeline": [{"oid": "7bf3199f837fc58886ce146555707be66d1d41d5", "url": "https://github.com/line/armeria/commit/7bf3199f837fc58886ce146555707be66d1d41d5", "message": "Add `ConcatArrayStreamMessage` which flatten an array of `StreamMessage`s (Multipart 2/4)\n\nMotivation:\n\nA multipart message can consist of serveral body parts which are reactive publishers.\nBy providing a way of concatenating an array of `StreamMessage`,\nwe can subscribe to multiple publishers and sequentially relay the items to downstream.\nSee #253 #2894\n\nModifications:\n\n- Add `ConcatArrayStreamMessage`, which was forked from Helidon, and optimized it for `StreamMessage`\n  - Test `ConcatArrayStreamMessage` using Reactive Stream TCK\n- Add `SubscriptionArbiter` which help to changing a subscription and track requests\n- Move `StreamMessageUtil` into the internal package for reusing it multipart\n- Fix a bug where `invokedOnSubscribe` is set before `subscribe0()`.\n  - `invokedOnSubscribe` should be called right before `subscriber.onSubscribe()`\n- Push a request context when subscribing to HttpRequest\n\nResult:\n\n- An array of `StreaMessage` could be flatten by `StreamMessages.concat()`", "committedDate": "2020-12-30T07:52:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM2OTg5NQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r550369895", "bodyText": "We have NoopSubscription. How about using it?", "author": "minwoox", "createdAt": "2020-12-31T01:13:06Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/CancelledSubscription.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Helper enum with a singleton cancellation indicator and utility methods to perform\n+ * atomic actions on {@link Subscription}s.\n+ */\n+enum CancelledSubscription implements Subscription {", "originalCommit": "7bf3199f837fc58886ce146555707be66d1d41d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MTgxNg==", "url": "https://github.com/line/armeria/pull/3254#discussion_r550371816", "bodyText": "Question: is it guaranteed that only one subscriber subscribes to this?", "author": "minwoox", "createdAt": "2020-12-31T01:27:30Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);", "originalCommit": "7bf3199f837fc58886ce146555707be66d1d41d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE3ODYxNg==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551178616", "bodyText": "It is not. Let me add a flag for that.", "author": "ikhoon", "createdAt": "2021-01-04T08:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MjI0MA==", "url": "https://github.com/line/armeria/pull/3254#discussion_r550372240", "bodyText": "shouldn't we abort other unsubscribed stream messages?", "author": "minwoox", "createdAt": "2020-12-31T01:31:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);", "originalCommit": "7bf3199f837fc58886ce146555707be66d1d41d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MzExNg==", "url": "https://github.com/line/armeria/pull/3254#discussion_r550373116", "bodyText": "Is this for the case where nextSource() is called twice concurrently?\nThen, is it okay to call sources[0].subscribe(...) and sources[1].subscribe(...) together?\nAren't the elements from onNext mixed?", "author": "minwoox", "createdAt": "2020-12-31T01:38:05Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            final long produced = this.produced;\n+            if (produced != 0L) {\n+                this.produced = 0L;\n+                produced(produced);\n+            }\n+            nextSource();\n+        }\n+\n+        void nextSource() {\n+            if (wipUpdater.getAndIncrement(this) == 0) {", "originalCommit": "7bf3199f837fc58886ce146555707be66d1d41d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4Mjc5OQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551182799", "bodyText": "Is this for the case where nextSource() is called twice concurrently?\n\nI don't think so. The nextSource() should be called only when a source is completed.", "author": "ikhoon", "createdAt": "2021-01-04T08:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MzExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNjYzMQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551226631", "bodyText": "If so, I think we don't need wipUpdater. Do we?", "author": "minwoox", "createdAt": "2021-01-04T10:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MzExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MzE5Ng==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551283196", "bodyText": "wipUpdater could be removed. However, we still need wip counter because of an empty publisher that will call onComplete() while subscribing.", "author": "ikhoon", "createdAt": "2021-01-04T12:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3MzExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3Mzk2OQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r550373969", "bodyText": "What happens to the unsubscribed stream messages?", "author": "minwoox", "createdAt": "2020-12-31T01:45:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+        parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+        subscriber.onSubscribe(parent);\n+        parent.nextSource();\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        private static final long serialVersionUID = -9184116713095894096L;\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> wipUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"wip\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int wip;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled != 0) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);\n+            }\n+        }\n+\n+        @Override\n+        public void onNext(T item) {\n+            requireNonNull(item, \"item\");\n+            produced++;\n+            downstream.onNext(item);\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            downstream.onError(throwable);\n+        }\n+\n+        @Override\n+        public void onComplete() {\n+            final long produced = this.produced;\n+            if (produced != 0L) {\n+                this.produced = 0L;\n+                produced(produced);\n+            }\n+            nextSource();\n+        }\n+\n+        void nextSource() {\n+            if (wipUpdater.getAndIncrement(this) == 0) {\n+                do {\n+                    final int index = this.index;\n+                    if (index == sources.length) {\n+                        downstream.onComplete();\n+                    } else {\n+                        this.index++;\n+                        sources[index].subscribe(this, executor, options);\n+                    }\n+                } while (wipUpdater.decrementAndGet(this) != 0);\n+            }\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (n <= 0) {\n+                downstream.onError(new IllegalArgumentException(\n+                        \"Rule \u00a73.9 violated: non-positive requests are forbidden\"));\n+            } else {\n+                super.request(n);\n+            }\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (cancelledUpdater.compareAndSet(this, 0, 1)) {", "originalCommit": "7bf3199f837fc58886ce146555707be66d1d41d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4ODQ0NA==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551188444", "bodyText": "Did you mean that downstream is null?\nIgnore this comment. I understand it now. \ud83d\ude05", "author": "ikhoon", "createdAt": "2021-01-04T09:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3Mzk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM3NjIxMA==", "url": "https://github.com/line/armeria/pull/3254#discussion_r550376210", "bodyText": "Can remove this because we have SafeVarargs?", "author": "minwoox", "createdAt": "2020-12-31T02:03:17Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/StreamMessages.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+final class StreamMessages {\n+\n+    /**\n+     * Concatenates an array of source {@link StreamMessage}s by relaying items\n+     * in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\")", "originalCommit": "7bf3199f837fc58886ce146555707be66d1d41d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "977bfc8742bd68f4e4d117bc7158b9f988a639ee", "url": "https://github.com/line/armeria/commit/977bfc8742bd68f4e4d117bc7158b9f988a639ee", "message": "Address comments by @minwoox", "committedDate": "2021-01-04T09:04:43Z", "type": "commit"}, {"oid": "f0b41efd7f6fa9d02603deac306b7a458a3fbaf3", "url": "https://github.com/line/armeria/commit/f0b41efd7f6fa9d02603deac306b7a458a3fbaf3", "message": "Clean up", "committedDate": "2021-01-04T09:16:33Z", "type": "commit"}, {"oid": "69baf5e99438c438f010d5b7f0d01d121ffbf101", "url": "https://github.com/line/armeria/commit/69baf5e99438c438f010d5b7f0d01d121ffbf101", "message": "Abort unsubscribed sources", "committedDate": "2021-01-04T09:24:45Z", "type": "commit"}, {"oid": "5f4951276f1ed90bf07784163d953f68057adb71", "url": "https://github.com/line/armeria/commit/5f4951276f1ed90bf07784163d953f68057adb71", "message": "Remove wipUpdater", "committedDate": "2021-01-04T12:40:54Z", "type": "forcePushed"}, {"oid": "c492570561a7ad05571f49ff7194395c2993dbe3", "url": "https://github.com/line/armeria/commit/c492570561a7ad05571f49ff7194395c2993dbe3", "message": "Remove wipUpdater", "committedDate": "2021-01-04T12:41:43Z", "type": "commit"}, {"oid": "c492570561a7ad05571f49ff7194395c2993dbe3", "url": "https://github.com/line/armeria/commit/c492570561a7ad05571f49ff7194395c2993dbe3", "message": "Remove wipUpdater", "committedDate": "2021-01-04T12:41:43Z", "type": "forcePushed"}, {"oid": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6", "url": "https://github.com/line/armeria/commit/2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6", "message": "Fix a TCK fail", "committedDate": "2021-01-04T16:15:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMDY4Nw==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551730687", "bodyText": "Thanks! \ud83d\ude47", "author": "trustin", "createdAt": "2021-01-05T05:55:02Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -203,7 +203,10 @@ public void invoke(PooledChannel pooledChannel, ClientRequestContext ctx,\n         final HttpRequestSubscriber reqSubscriber =\n                 new HttpRequestSubscriber(channel, requestEncoder, responseDecoder,\n                                           req, res, ctx, writeTimeoutMillis);\n-        req.subscribe(reqSubscriber, channel.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n+        // StreamMessage of an request body uses RequestContext to get the default SubscriberExecutor.\n+        try (SafeCloseable ignored = ctx.push()) {\n+            req.subscribe(reqSubscriber, channel.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);\n+        }", "originalCommit": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMTcwMQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551731701", "bodyText": "Should we accept an empty sources?", "author": "trustin", "createdAt": "2021-01-05T05:58:22Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;", "originalCommit": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAwNTM0Mw==", "url": "https://github.com/line/armeria/pull/3254#discussion_r552005343", "bodyText": "Nope. It is checked by StreamMessages.concat(...)", "author": "ikhoon", "createdAt": "2021-01-05T15:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMTcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMTg1Mg==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551731852", "bodyText": "Should we just delegate to abort(Throwable) with AbortedStreamException.get(), so that AbortedStreamException.get() is not invoked multiple times?", "author": "trustin", "createdAt": "2021-01-05T05:58:54Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;\n+import com.linecorp.armeria.common.stream.NoopSubscriber;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+import com.linecorp.armeria.common.stream.SubscriptionOption;\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+\n+        if (subscribedUpdater.compareAndSet(this, 0, 1)) {\n+            parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+            subscriber.onSubscribe(parent);\n+            if (executor.inEventLoop()) {\n+                parent.nextSource();\n+            } else {\n+                executor.execute(() -> parent.nextSource());\n+            }\n+        } else {\n+            subscriber.onSubscribe(NoopSubscription.get());\n+            subscriber.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort();\n+        }\n+    }", "originalCommit": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczNDA2NQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551734065", "bodyText": "Should we move the methods in this class to StreamMessage? Like we have HttpResponse.of(Publisher<? extends HttpObject>), we could have:\n\nStreamMessage.of(Publisher<...>)\nStreamMessage.of(Publisher<...>...)\nStreamMessage.of(StreamMessage<...>)\nStreamMessage.of(StreamMessage<...>...)\n\nAnd maybe in a separate PR:\n\nHttpResponse.of(StreamMessage<? extends HttpObject>)\nHttpResponse.of(StreamMessage<? extends HttpObject>...)", "author": "trustin", "createdAt": "2021-01-05T06:07:09Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/StreamMessages.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.multipart;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import org.reactivestreams.Publisher;\n+\n+import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;\n+import com.linecorp.armeria.common.stream.StreamMessage;\n+\n+final class StreamMessages {", "originalCommit": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczNTU4MQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r551735581", "bodyText": "We could make all Atomic* fields volatile with Atomic*FieldUpdater.\nSimilarly, we don't need to extend AtomicInteger.", "author": "trustin", "createdAt": "2021-01-05T06:13:05Z", "path": "core/src/main/java/com/linecorp/armeria/common/multipart/SubscriptionArbiter.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.linecorp.armeria.common.multipart;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscription;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+/**\n+ * Allows changing the subscription, tracking requests and item\n+ * production in concurrent source-switching scenarios.\n+ * <p>\n+ *     {@code this} is the work-in-progress indicator for the\n+ *     subscriber-request-produced trampolining.\n+ * </p>\n+ * <p>\n+ *     Please override {@link #request(long)} and perform the n &lt;= 0L\n+ *     check in the context of the implementor because the TCK requires\n+ *     an onError signal and the arbiter has no contextual knowledge how\n+ *     and when to signal it.\n+ * </p>\n+ */\n+class SubscriptionArbiter extends AtomicInteger implements Subscription {", "originalCommit": "2aaebdb43fd854e6e66ccdd2d08c5163d2ce44f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c688c077feaade195869c8318caf97506c2d64ae", "url": "https://github.com/line/armeria/commit/c688c077feaade195869c8318caf97506c2d64ae", "message": "Move ConcatArrayStreamMessage to 'common.stream'", "committedDate": "2021-01-05T16:34:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1OTA1Nw==", "url": "https://github.com/line/armeria/pull/3254#discussion_r552459057", "bodyText": "Should we return an empty stream instead?", "author": "trustin", "createdAt": "2021-01-06T09:24:17Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -123,6 +127,50 @@\n         }\n     }\n \n+    /**\n+     * Creates a new {@link StreamMessage} from the specified {@link Publisher}.\n+     */\n+    static <T> StreamMessage<T> of(Publisher<? extends T> publisher) {\n+        requireNonNull(publisher, \"publisher\");\n+\n+        if (publisher instanceof StreamMessage) {\n+            @SuppressWarnings(\"unchecked\")\n+            final StreamMessage<T> cast = (StreamMessage<T>) publisher;\n+            return cast;\n+        } else {\n+            return new PublisherBasedStreamMessage<>(publisher);\n+        }\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link Publisher}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(Publisher<? extends T>... publishers) {\n+        requireNonNull(publishers, \"publishers\");\n+        checkArgument(publishers.length > 0, \"publishers is empty\");", "originalCommit": "c688c077feaade195869c8318caf97506c2d64ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1OTEwNQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r552459105", "bodyText": "Ditto", "author": "trustin", "createdAt": "2021-01-06T09:24:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -123,6 +127,50 @@\n         }\n     }\n \n+    /**\n+     * Creates a new {@link StreamMessage} from the specified {@link Publisher}.\n+     */\n+    static <T> StreamMessage<T> of(Publisher<? extends T> publisher) {\n+        requireNonNull(publisher, \"publisher\");\n+\n+        if (publisher instanceof StreamMessage) {\n+            @SuppressWarnings(\"unchecked\")\n+            final StreamMessage<T> cast = (StreamMessage<T>) publisher;\n+            return cast;\n+        } else {\n+            return new PublisherBasedStreamMessage<>(publisher);\n+        }\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link Publisher}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(Publisher<? extends T>... publishers) {\n+        requireNonNull(publishers, \"publishers\");\n+        checkArgument(publishers.length > 0, \"publishers is empty\");\n+        @SuppressWarnings(\"unchecked\")\n+        final StreamMessage<? extends T>[] streamMessages = ImmutableList.copyOf(publishers)\n+                                                                         .stream()\n+                                                                         .map(StreamMessage::of)\n+                                                                         .toArray(StreamMessage[]::new);\n+        return new ConcatArrayStreamMessage<>(streamMessages);\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link StreamMessage}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(StreamMessage<? extends T>... streamMessages) {\n+        requireNonNull(streamMessages, \"streamMessages\");\n+        checkArgument(streamMessages.length > 0, \"streamMessages is empty\");", "originalCommit": "c688c077feaade195869c8318caf97506c2d64ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MDgxMg==", "url": "https://github.com/line/armeria/pull/3254#discussion_r552460812", "bodyText": "How about adding an assertion?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.sources = sources;\n          \n          \n            \n                    assert sources.length != 0;\n          \n          \n            \n                    this.sources = sources;", "author": "trustin", "createdAt": "2021-01-06T09:27:37Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/28cb3e8a34bda691c035d21f90b6278c6a42007c/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        this.sources = sources;", "originalCommit": "c688c077feaade195869c8318caf97506c2d64ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "768ecb6369df10c368763d12c9be8b6c13c78957", "url": "https://github.com/line/armeria/commit/768ecb6369df10c368763d12c9be8b6c13c78957", "message": "Address comments by @trustin", "committedDate": "2021-01-08T07:48:36Z", "type": "commit"}, {"oid": "28770b600583ae362e9074842b934e83dd497f05", "url": "https://github.com/line/armeria/commit/28770b600583ae362e9074842b934e83dd497f05", "message": "Checkstyle", "committedDate": "2021-01-08T12:42:55Z", "type": "commit"}, {"oid": "b5dfe613b4642fce92573b5967895025248681f0", "url": "https://github.com/line/armeria/commit/b5dfe613b4642fce92573b5967895025248681f0", "message": "Fix TCK fail", "committedDate": "2021-01-08T14:56:24Z", "type": "commit"}, {"oid": "4660467718ced4cc6ce84f05c63d9153f5ecd37f", "url": "https://github.com/line/armeria/commit/4660467718ced4cc6ce84f05c63d9153f5ecd37f", "message": "Remove wip", "committedDate": "2021-01-11T10:22:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4OTk2Mw==", "url": "https://github.com/line/armeria/pull/3254#discussion_r555489963", "bodyText": "nit: how about setUpstreamSubscription?", "author": "minwoox", "createdAt": "2021-01-12T03:38:09Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {\n+        assert sources.length != 0;\n+        this.sources = sources;\n+    }\n+\n+    @Override\n+    public boolean isOpen() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (source.isOpen()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        for (StreamMessage<? extends T> source : sources) {\n+            if (!source.isEmpty()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public long demand() {\n+        if (parent == null) {\n+            return 0;\n+        }\n+        return sources[parent.index].demand();\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> whenComplete() {\n+        return sources[sources.length - 1].whenComplete();\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {\n+        subscribe(subscriber, executor, EMPTY_OPTIONS);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber, EventExecutor executor,\n+                          SubscriptionOption... options) {\n+        requireNonNull(subscriber, \"subscriber\");\n+        requireNonNull(executor, \"executor\");\n+        requireNonNull(options, \"options\");\n+\n+        if (subscribedUpdater.compareAndSet(this, 0, 1)) {\n+            parent = new ConcatArraySubscriber<>(subscriber, sources, executor, options);\n+            subscriber.onSubscribe(parent);\n+            if (executor.inEventLoop()) {\n+                parent.nextSource();\n+            } else {\n+                executor.execute(() -> parent.nextSource());\n+            }\n+        } else {\n+            subscriber.onSubscribe(NoopSubscription.get());\n+            subscriber.onError(new IllegalStateException(\"subscribed by other subscriber already\"));\n+        }\n+    }\n+\n+    @Override\n+    public void abort() {\n+        abort(AbortedStreamException.get());\n+    }\n+\n+    @Override\n+    public void abort(Throwable cause) {\n+        requireNonNull(cause, \"cause\");\n+        for (StreamMessage<? extends T> source : sources) {\n+            source.abort(cause);\n+        }\n+    }\n+\n+    private static final class ConcatArraySubscriber<T> extends SubscriptionArbiter implements Subscriber<T> {\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private static final AtomicIntegerFieldUpdater<ConcatArraySubscriber> cancelledUpdater =\n+                AtomicIntegerFieldUpdater.newUpdater(ConcatArraySubscriber.class, \"cancelled\");\n+\n+        private Subscriber<? super T> downstream;\n+        private final StreamMessage<? extends T>[] sources;\n+        private final EventExecutor executor;\n+        private final SubscriptionOption[] options;\n+\n+        private long produced;\n+\n+        private volatile int index;\n+        private volatile int cancelled;\n+\n+        ConcatArraySubscriber(Subscriber<? super T> downstream, StreamMessage<? extends T>[] sources,\n+                              EventExecutor executor, SubscriptionOption... options) {\n+            this.downstream = downstream;\n+            this.sources = sources;\n+            this.executor = executor;\n+            this.options = options;\n+        }\n+\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            if (cancelled()) {\n+                subscription.cancel();\n+            } else {\n+                setSubscription(subscription);", "originalCommit": "4660467718ced4cc6ce84f05c63d9153f5ecd37f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MDY2Mg==", "url": "https://github.com/line/armeria/pull/3254#discussion_r555490662", "bodyText": "How about just casting if the publisher is a StreamMessage?", "author": "minwoox", "createdAt": "2021-01-12T03:41:01Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java", "diffHunk": "@@ -123,6 +126,55 @@\n         }\n     }\n \n+    /**\n+     * Creates a new {@link StreamMessage} from the specified {@link Publisher}.\n+     */\n+    static <T> StreamMessage<T> of(Publisher<? extends T> publisher) {\n+        requireNonNull(publisher, \"publisher\");\n+\n+        if (publisher instanceof StreamMessage) {\n+            @SuppressWarnings(\"unchecked\")\n+            final StreamMessage<T> cast = (StreamMessage<T>) publisher;\n+            return cast;\n+        } else {\n+            return new PublisherBasedStreamMessage<>(publisher);\n+        }\n+    }\n+\n+    /**\n+     * Returns a concatenated {@link StreamMessage} which relays items of the specified array of\n+     * {@link Publisher}s in order, non-overlappingly, one after the other finishes.\n+     */\n+    @SafeVarargs\n+    static <T> StreamMessage<T> of(Publisher<? extends T>... publishers) {\n+        requireNonNull(publishers, \"publishers\");\n+        if (publishers.length == 0) {\n+            return of();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final StreamMessage<? extends T>[] streamMessages = ImmutableList.copyOf(publishers)\n+                                                                         .stream()\n+                                                                         .map(StreamMessage::of)", "originalCommit": "4660467718ced4cc6ce84f05c63d9153f5ecd37f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA4MzMxNw==", "url": "https://github.com/line/armeria/pull/3254#discussion_r557083317", "bodyText": "StreamMessage.of() already checks the Publisher is an instance of StreamMessage.", "author": "ikhoon", "createdAt": "2021-01-14T07:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA5OTY4OQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r557099689", "bodyText": "Ah thanks, I missed it. \ud83d\ude05", "author": "minwoox", "createdAt": "2021-01-14T07:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MDY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MTczMw==", "url": "https://github.com/line/armeria/pull/3254#discussion_r555491733", "bodyText": "We usually take Iterable or List instead of array. How about changing for consistency?", "author": "minwoox", "createdAt": "2021-01-12T03:44:08Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;\n+import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+import io.netty.util.concurrent.EventExecutor;\n+\n+/**\n+ * Relay items in order from subsequent {@link StreamMessage}s as a single {@link StreamMessage} source.\n+ */\n+final class ConcatArrayStreamMessage<T> implements StreamMessage<T> {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<ConcatArrayStreamMessage> subscribedUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(ConcatArrayStreamMessage.class, \"subscribed\");\n+\n+    private final StreamMessage<? extends T>[] sources;\n+\n+    @Nullable\n+    private ConcatArraySubscriber<T> parent;\n+\n+    private volatile int subscribed;\n+\n+    ConcatArrayStreamMessage(StreamMessage<? extends T>[] sources) {", "originalCommit": "4660467718ced4cc6ce84f05c63d9153f5ecd37f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA4Njg0Mg==", "url": "https://github.com/line/armeria/pull/3254#discussion_r557086842", "bodyText": "OK, let me pick List.", "author": "ikhoon", "createdAt": "2021-01-14T07:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA5NDgxOA==", "url": "https://github.com/line/armeria/pull/3254#discussion_r557094818", "bodyText": "I realized that RegularFixedStreamMessage internally hold objects as an array.", "author": "ikhoon", "createdAt": "2021-01-14T07:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MTczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzEwMDI0Mg==", "url": "https://github.com/line/armeria/pull/3254#discussion_r557100242", "bodyText": "Ah then it's fine as it is. \ud83d\ude04", "author": "minwoox", "createdAt": "2021-01-14T07:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5MTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5NTU1Nw==", "url": "https://github.com/line/armeria/pull/3254#discussion_r555495557", "bodyText": "missing copyright of this file?", "author": "minwoox", "createdAt": "2021-01-12T03:48:48Z", "path": "core/src/main/java/com/linecorp/armeria/common/stream/SubscriptionArbiter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.stream;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import javax.annotation.Nullable;\n+\n+import org.reactivestreams.Subscription;\n+\n+import com.google.common.math.LongMath;\n+\n+import com.linecorp.armeria.internal.common.stream.NoopSubscription;\n+\n+/**\n+ * Allows changing the subscription, tracking requests and item\n+ * production in concurrent source-switching scenarios.\n+ * <p>\n+ *     {@code this} is the work-in-progress indicator for the\n+ *     subscriber-request-produced trampolining.\n+ * </p>\n+ * <p>\n+ *     Please override {@link #request(long)} and perform the n &lt;= 0L\n+ *     check in the context of the implementor because the TCK requires\n+ *     an onError signal and the arbiter has no contextual knowledge how\n+ *     and when to signal it.\n+ * </p>\n+ */\n+class SubscriptionArbiter implements Subscription {\n+\n+    // Forked from https://github.com/oracle/helidon/blob/b64be21a5f5c7bbdecd6acf35339c6ee15da0af6/common\n+    // /reactive/src/main/java/io/helidon/common/reactive/SubscriptionArbiter.java", "originalCommit": "4660467718ced4cc6ce84f05c63d9153f5ecd37f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzA4ODEzOQ==", "url": "https://github.com/line/armeria/pull/3254#discussion_r557088139", "bodyText": "Oops... IntelliJ removes the duplicate copyright if the file is refactored. \ud83d\ude05", "author": "ikhoon", "createdAt": "2021-01-14T07:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ5NTU1Nw=="}], "type": "inlineReview"}, {"oid": "a5f0650893b60271773eedef2c6ffb637292d14b", "url": "https://github.com/line/armeria/commit/a5f0650893b60271773eedef2c6ffb637292d14b", "message": "Address comments by @minwoox", "committedDate": "2021-01-14T07:58:50Z", "type": "commit"}, {"oid": "78e868462dbd41c2272613101cac1c028b3ca7e7", "url": "https://github.com/line/armeria/commit/78e868462dbd41c2272613101cac1c028b3ca7e7", "message": "Add StreamMessage.concat()", "committedDate": "2021-01-15T03:58:21Z", "type": "commit"}, {"oid": "451babdda333845ad477fa4861fa1bcbf3f4abb5", "url": "https://github.com/line/armeria/commit/451babdda333845ad477fa4861fa1bcbf3f4abb5", "message": "Checkstyle", "committedDate": "2021-01-19T02:23:08Z", "type": "commit"}]}