{"pr_number": 2680, "pr_title": "Add APIs for setting OAuth and basic auth headers to the ClientBuilder", "pr_createdAt": "2020-04-24T07:50:32Z", "pr_url": "https://github.com/line/armeria/pull/2680", "timeline": [{"oid": "d3bd519b5fe52e6de515f3bb1d2a045639fe366d", "url": "https://github.com/line/armeria/commit/d3bd519b5fe52e6de515f3bb1d2a045639fe366d", "message": "Add APIs for setting OAuth and basic auth headers to the ClientBuilder\nMotivation:\nIt would be nice if we provide APIs for setting basic auth, OAuth 1.0 and OAuth 2.0 header as we support those in the server-side.\n\nModifications:\n- Add `basicAuth()`, `oAuth1a()` and `oAuth2()` to `AbstractClientOptionsBuilder`.\n- Fix a bug where OAuth1a paremters are not decoded when they are percent-encoded.\n\nResult:\n- You can now easily set the authorization header.\n- (Breaking) `OAuth1aToken` class is moved to `com.linecorp.armeria.common.auth`.", "committedDate": "2020-04-24T07:48:20Z", "type": "commit"}, {"oid": "a669ee7cc6a0d3437fe5c639c500558ec298113f", "url": "https://github.com/line/armeria/commit/a669ee7cc6a0d3437fe5c639c500558ec298113f", "message": "Use cached value", "committedDate": "2020-04-24T08:02:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1Njc0MQ==", "url": "https://github.com/line/armeria/pull/2680#discussion_r414456741", "bodyText": "Could break the line earlier, like after ,", "author": "trustin", "createdAt": "2020-04-24T10:07:25Z", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -294,6 +303,55 @@ public AbstractClientOptionsBuilder setHttpHeaders(\n         return this;\n     }\n \n+    /**\n+     * Sets the\n+     * <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP basic access authentication</a>\n+     * header using {@link StandardCharsets#UTF_8}.\n+     */\n+    public AbstractClientOptionsBuilder basicAuth(String username, String password) {\n+        return basicAuth(username, password, StandardCharsets.UTF_8);\n+    }\n+\n+    /**\n+     * Sets the\n+     * <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP basic access authentication</a>\n+     * header. The specified {@link Charset} must be compatible with US-ASCII.\n+     */\n+    public AbstractClientOptionsBuilder basicAuth(String username, String password, Charset charset) {\n+        requireNonNull(username, \"username\");\n+        requireNonNull(password, \"password\");\n+        requireNonNull(charset, \"charset\");\n+        checkState(!oAuth1aSet || !oAuth2Set, \"cannot set basic auth with %s.\", oAuth1aSet ? \"OAuth 1.0\"\n+                                                                                           : \"OAuth 2.0\");", "originalCommit": "a669ee7cc6a0d3437fe5c639c500558ec298113f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1ODA0MA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r414458040", "bodyText": "How about just toHeaderValue()?", "author": "trustin", "createdAt": "2020-04-24T10:09:29Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aToken.java", "diffHunk": "@@ -215,6 +223,47 @@ public String version() {\n         return builder.build();\n     }\n \n+    /**\n+     * Returns the string that is sent as the value of the authorization header.\n+     */\n+    public String toHeaderValueString() {", "originalCommit": "a669ee7cc6a0d3437fe5c639c500558ec298113f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4NDYxMg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r415484612", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-04-27T03:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1ODA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2MTQ1NA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r414461454", "bodyText": "How about providing the overloaded methods that accept BasicToken and OAuth2Token?\n.. or just auth(BasicToken|OAuth1aToken|OAuth2Token), so that an IDE gives the full choices when he or she types '.a`?\nbuilder.auth(BasicToken.of(...));\nbuilder.auth(OAuth2Token.of(...));", "author": "trustin", "createdAt": "2020-04-24T10:15:08Z", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -294,6 +303,55 @@ public AbstractClientOptionsBuilder setHttpHeaders(\n         return this;\n     }\n \n+    /**\n+     * Sets the\n+     * <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP basic access authentication</a>\n+     * header using {@link StandardCharsets#UTF_8}.\n+     */\n+    public AbstractClientOptionsBuilder basicAuth(String username, String password) {\n+        return basicAuth(username, password, StandardCharsets.UTF_8);\n+    }\n+\n+    /**\n+     * Sets the\n+     * <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">HTTP basic access authentication</a>\n+     * header. The specified {@link Charset} must be compatible with US-ASCII.\n+     */\n+    public AbstractClientOptionsBuilder basicAuth(String username, String password, Charset charset) {\n+        requireNonNull(username, \"username\");\n+        requireNonNull(password, \"password\");\n+        requireNonNull(charset, \"charset\");\n+        checkState(!oAuth1aSet || !oAuth2Set, \"cannot set basic auth with %s.\", oAuth1aSet ? \"OAuth 1.0\"\n+                                                                                           : \"OAuth 2.0\");\n+        httpHeaders.set(HttpHeaderNames.AUTHORIZATION,\n+                        \"Basic \" + Base64.getEncoder().encodeToString(\n+                                (username + ':' + password).getBytes(charset)));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the <a href=\"https://oauth.net/core/1.0a/\">OAuth Core 1.0 Revision A</a> header.\n+     */\n+    public AbstractClientOptionsBuilder oAuth1a(OAuth1aToken token) {\n+        requireNonNull(token, \"token\");\n+        checkState(!basicAuthSet || !oAuth2Set, \"cannot set OAuth 1.0 with %s.\", basicAuthSet ? \"basic auth\"\n+                                                                                              : \"OAuth 2.0\");\n+        httpHeaders.set(HttpHeaderNames.AUTHORIZATION, token.toHeaderValueString());\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the <a href=\"https://www.oauth.com/\">OAuth 2.0</a> header. Note that the specified\n+     * {@code accessToken} is sent using {@link HttpHeaderNames#AUTHORIZATION} header, not post body parameters.\n+     */\n+    public AbstractClientOptionsBuilder oAuth2(String accessToken) {", "originalCommit": "a669ee7cc6a0d3437fe5c639c500558ec298113f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxMjk5NQ==", "url": "https://github.com/line/armeria/pull/2680#discussion_r414512995", "bodyText": "builder.auth(BasicToken.of(...));\nbuilder.auth(OAuth2Token.of(...));\n\nThanks! I like this idea. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-04-24T11:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2MTQ1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4NDY4OQ==", "url": "https://github.com/line/armeria/pull/2680#discussion_r415484689", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-04-27T03:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2MTQ1NA=="}], "type": "inlineReview"}, {"oid": "77c0a34427092b32d2769288e36a3c4705ff223a", "url": "https://github.com/line/armeria/commit/77c0a34427092b32d2769288e36a3c4705ff223a", "message": "Address comments by @trustin", "committedDate": "2020-04-27T03:31:08Z", "type": "commit"}, {"oid": "0fc19841f9117268ec1f44d9a1100ad9974aa528", "url": "https://github.com/line/armeria/commit/0fc19841f9117268ec1f44d9a1100ad9974aa528", "message": "Move AithUtil", "committedDate": "2020-04-27T03:38:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NzE1NA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r415577154", "bodyText": "Could you explain why this class became a part of public API?", "author": "trustin", "createdAt": "2020-04-27T07:31:29Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/AuthUtil.java", "diffHunk": "@@ -14,16 +14,16 @@\n  * under the License.\n  */\n \n-package com.linecorp.armeria.internal.common.util;\n+package com.linecorp.armeria.common.auth;\n \n import javax.annotation.Nullable;\n \n-public final class AuthUtil {\n+final class AuthUtil {", "originalCommit": "0fc19841f9117268ec1f44d9a1100ad9974aa528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU5MDMyOQ==", "url": "https://github.com/line/armeria/pull/2680#discussion_r415590329", "bodyText": "It's package-private so not a part of the public APIs. \ud83d\ude04\nIf you think it's better to put secureEquals method to the BasicToken, then I will do.", "author": "minwoox", "createdAt": "2020-04-27T07:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NzQ2Mg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r417197462", "bodyText": "Doh! Sorry about missing that out. \ud83d\ude13", "author": "trustin", "createdAt": "2020-04-29T09:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3NzE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r415578316", "bodyText": "I think it's possible that a user can call auth() method multiple times with different tokens. For example, a user could set the default BasicToken and then override it as it reads some additional configuration file that specifies a different token.", "author": "trustin", "createdAt": "2020-04-27T07:33:39Z", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -42,6 +46,10 @@\n     private final ClientDecorationBuilder decoration = ClientDecoration.builder();\n     private final HttpHeadersBuilder httpHeaders = HttpHeaders.builder();\n \n+    private boolean basicAuthSet;\n+    private boolean oAuth1aSet;\n+    private boolean oAuth2Set;", "originalCommit": "0fc19841f9117268ec1f44d9a1100ad9974aa528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU5NTgwOA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r415595808", "bodyText": "If the client sets tokens for the same authentication, it does not throw an exception.\nIt's throwing an exception only when two different tokens for two different authentications such as basic and OAuth 2.0 are set.\nDo you think it's better not to throw an exception in that case?", "author": "minwoox", "createdAt": "2020-04-27T08:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NzMxOQ==", "url": "https://github.com/line/armeria/pull/2680#discussion_r417197319", "bodyText": "Yeah, that was what I meant. I think a user might want to override the authentication mechanism. For example, one module could return a pre-configured ClientBuilder, allowing a user to override some of its settings. Do you have any concern on this idea?", "author": "trustin", "createdAt": "2020-04-29T09:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNDk4MA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r417214980", "bodyText": "Just worried about a case where a user misconfigured, but it seems OK. Let me just remove this check to simplify, thanks!", "author": "minwoox", "createdAt": "2020-04-29T10:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMzIzMA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r417233230", "bodyText": "On my second thought, I think finding the cause is not as easy when accidentally two different auths are used if we don't throw an exception because:\n\nthe client should actually send a request\nit's hard to get to know right away that the authentication header is the problem from the response content.\n\nMeanwhile, fixing pre-configure ClientBuilder is really easy.\nSo can I keep it as it is?", "author": "minwoox", "createdAt": "2020-04-29T11:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxOTMzNQ==", "url": "https://github.com/line/armeria/pull/2680#discussion_r420519335", "bodyText": "I'm not sure if it's a good idea yet because:\n\nOur other setters do not prohibit setting more than once. Why should this method be special?\nA server will give a client 403 forbidden anyway when misconfigured (including bad password).", "author": "trustin", "createdAt": "2020-05-06T02:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyMjcxMg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r420522712", "bodyText": "Removed checking auth setting. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-05-06T03:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyMzY1NA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r420523654", "bodyText": "Thanks a lot!", "author": "trustin", "createdAt": "2020-05-06T03:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3ODMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MTcyMA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r416371720", "bodyText": "I don't think the factory of this class is user-friendly.\npublic static OAuth1aToken of(Map<String, String> params) {\n   return new OAuth1aToken(params);\n}\nHow about adding a builder for OAuth1aToken?", "author": "ikhoon", "createdAt": "2020-04-28T06:52:55Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aToken.java", "diffHunk": "@@ -109,6 +115,9 @@ public static OAuth1aToken of(Map<String, String> params) {\n \n     private final Map<String, String> params;\n \n+    @Nullable\n+    private String headerValue;\n+\n     private OAuth1aToken(Map<String, String> params) {", "originalCommit": "0fc19841f9117268ec1f44d9a1100ad9974aa528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NTUxNg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r417195516", "bodyText": "Sounds good to me. How about in a separate PR?", "author": "trustin", "createdAt": "2020-04-29T09:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MTcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMzgzNg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r417213836", "bodyText": "Oops, I missed this comment. Yeah, let me do it the separate PR.", "author": "minwoox", "createdAt": "2020-04-29T10:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3MTcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2ODAzMg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r419268032", "bodyText": "How about just taking char buf instead of TemporaryThreadLocals?", "author": "ikhoon", "createdAt": "2020-05-04T07:59:11Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/PercentDecoder.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2019 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common;\n+\n+import static io.netty.util.internal.StringUtil.SPACE;\n+\n+import java.util.Arrays;\n+\n+import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;\n+\n+public final class PercentDecoder {\n+\n+    // Forked from netty-4.1.43.\n+    // https://github.com/netty/netty/blob/7d6d953153697bd66c3b01ca8ec73c4494a81788/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java\n+\n+    @SuppressWarnings(\"checkstyle:AvoidEscapedUnicodeCharacters\")\n+    private static final char UNKNOWN_CHAR = '\\uFFFD';\n+    private static final byte[] OCTETS_TO_HEX = new byte[Character.MAX_VALUE + 1];\n+\n+    static {\n+        Arrays.fill(OCTETS_TO_HEX, (byte) -1);\n+        for (int i = '0'; i <= '9'; i++) {\n+            OCTETS_TO_HEX[i] = (byte) (i - '0');\n+        }\n+        for (int i = 'A'; i <= 'F'; i++) {\n+            OCTETS_TO_HEX[i] = (byte) (i - 'A' + 10);\n+        }\n+        for (int i = 'a'; i <= 'f'; i++) {\n+            OCTETS_TO_HEX[i] = (byte) (i - 'a' + 10);\n+        }\n+    }\n+\n+    /**\n+     * Decodes the specified string if it's\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Percent-Encoded</a>.\n+     */\n+    public static String decodeComponent(String s) {\n+        return decodeComponent(TemporaryThreadLocals.get(), s, 0, s.length());\n+    }\n+\n+    /**\n+     * Decodes the specified string from the index of {@code from} to the index of {@code toExcluded} if it's\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Percent-Encoded</a>.\n+     */\n+    public static String decodeComponent(TemporaryThreadLocals tempThreadLocals,\n+                                         String s, int from, int toExcluded) {\n+        if (from == toExcluded) {\n+            return \"\";\n+        }\n+\n+        for (int i = from; i < toExcluded; i++) {\n+            final char c = s.charAt(i);\n+            if ((c & 0xFFF1) != 0x21) {\n+                // We can skip with a single comparison because both\n+                // '%' (0b00100101) and '+' (0b00101011) has the same five bits (0b0010xxx1).\n+                continue;\n+            }\n+\n+            // At this point, `c` is one of the following characters: # % ' ) + - /\n+            if (c == '%' || c == '+') {\n+                return decodeUtf8Component(tempThreadLocals, s, from, toExcluded);\n+            }\n+        }\n+\n+        return s.substring(from, toExcluded);\n+    }\n+\n+    private static String decodeUtf8Component(TemporaryThreadLocals tempThreadLocals,\n+                                              String s, int from, int toExcluded) {\n+        final char[] buf = tempThreadLocals.charArray(toExcluded - from);", "originalCommit": "0fc19841f9117268ec1f44d9a1100ad9974aa528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5NjkxNg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r419296916", "bodyText": "Sounds good. Fixed.", "author": "minwoox", "createdAt": "2020-05-04T08:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2ODAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3MjkxNA==", "url": "https://github.com/line/armeria/pull/2680#discussion_r419272914", "bodyText": "Use TemporaryThreadLocals for consistancy?", "author": "ikhoon", "createdAt": "2020-05-04T08:09:54Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/PercentEncoder.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright (C) 2008 The Guava Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.linecorp.armeria.internal.common;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+public final class PercentEncoder {\n+\n+    // Forked from netty-4.1.43 and guava-28.1\n+    // https://github.com/netty/netty/blob/bd8cea644a07890f5bada18ddff0a849b58cd861/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java\n+    // https://github.com/google/guava/blob/13e39cd167a49aad525be462e61d9e5f2b1781ec/guava/src/com/google/common/net/PercentEscaper.java\n+\n+    private static final char[] UTF_UNKNOWN = { '%', '3', 'F' }; // Percent encoded question mark\n+    private static final char[] UPPER_HEX_DIGITS = \"0123456789ABCDEF\".toCharArray();\n+    private static final byte[] SAFE_OCTETS = new byte[Character.MAX_VALUE + 1];\n+\n+    static {\n+        // Unreserved characters with '*' because most browsers such as Chrome and Firefox do not encode '*'.\n+        // See https://tools.ietf.org/html/rfc3986#section-2.3\n+        final String safeOctetStr = \"-_.~*abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+        for (int i = 0; i < safeOctetStr.length(); i++) {\n+            SAFE_OCTETS[safeOctetStr.charAt(i)] = -1;\n+        }\n+    }\n+\n+    /**\n+     * Encodes the specified string using\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Percent-Encoding</a> and appends it to the\n+     * specified {@link StringBuilder}.\n+     */\n+    public static void encodeComponent(StringBuilder buf, String s) {", "originalCommit": "0fc19841f9117268ec1f44d9a1100ad9974aa528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5ODIyMQ==", "url": "https://github.com/line/armeria/pull/2680#discussion_r419298221", "bodyText": "It can't be because the callers mush pass StringBuilder.", "author": "minwoox", "createdAt": "2020-05-04T08:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3MjkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMwMDYwMg==", "url": "https://github.com/line/armeria/pull/2680#discussion_r419300602", "bodyText": "Ah, I see.", "author": "ikhoon", "createdAt": "2020-05-04T09:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3MjkxNA=="}], "type": "inlineReview"}, {"oid": "5755e308e7d8a64ae6cad963e59f1599d63deaa0", "url": "https://github.com/line/armeria/commit/5755e308e7d8a64ae6cad963e59f1599d63deaa0", "message": "Address the comment by @ikhoon", "committedDate": "2020-05-04T08:59:45Z", "type": "commit"}, {"oid": "faf997fc12ce315269ede5dd8174ca92a91ec96c", "url": "https://github.com/line/armeria/commit/faf997fc12ce315269ede5dd8174ca92a91ec96c", "message": "Remove checking auth set", "committedDate": "2020-05-06T03:09:50Z", "type": "commit"}]}