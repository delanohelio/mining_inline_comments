{"pr_number": 3005, "pr_title": "Add Reactor context-propagation example", "pr_createdAt": "2020-08-19T10:52:58Z", "pr_url": "https://github.com/line/armeria/pull/3005", "timeline": [{"oid": "07631950133a1a90bf9d96fd4c3fad7111beff31", "url": "https://github.com/line/armeria/commit/07631950133a1a90bf9d96fd4c3fad7111beff31", "message": "Add Reactor context-propagation example\nIt would be nice if we have the Reactor context-propagation example as we have one for Rxjava.", "committedDate": "2020-08-19T10:51:49Z", "type": "commit"}, {"oid": "e2a15ba7e79b9bdcbb8f5667041cb7b05c0063f9", "url": "https://github.com/line/armeria/commit/e2a15ba7e79b9bdcbb8f5667041cb7b05c0063f9", "message": "Merge branch 'master' into reactor_example", "committedDate": "2020-08-19T13:03:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyNTgxMg==", "url": "https://github.com/line/armeria/pull/3005#discussion_r473025812", "bodyText": "context executor -> context-aware event loop? (probably need to update other examples.)", "author": "trustin", "createdAt": "2020-08-19T13:23:58Z", "path": "examples/context-propagation/reactor/src/main/java/example/armeria/contextpropagation/reactor/MainService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package example.armeria.contextpropagation.reactor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.fromExecutor(ctx.eventLoop());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Flux<Long> fetchNumsFromFakeDb =\n+                Mono.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            assert ServiceRequestContext.current() == ctx;\n+                            assert !ctx.eventLoop().inEventLoop();\n+\n+                            try {\n+                                // Simulate a blocking API call.\n+                                Thread.sleep(50);\n+                            } catch (Exception ignored) {\n+                                // Do nothing.\n+                            }\n+                            return Arrays.asList(23L, -23L);\n+                        })\n+                    // Always run blocking logic on the blocking task executor. By using\n+                    // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                    // inside the logic (e.g., your DB call will be traced!).\n+                    .subscribeOn(Schedulers.fromExecutor(ctx.blockingTaskExecutor()))\n+                    .flatMapIterable(l -> l);\n+\n+        final Flux<Long> extractNumsFromRequest =\n+                Mono.fromCompletionStage(req.aggregate())\n+                    // Unless you know what you're doing, always use subscribeOn with the context\n+                    // executor to have the context mounted and stay on a single thread to reduce", "originalCommit": "e2a15ba7e79b9bdcbb8f5667041cb7b05c0063f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwMDM4NA==", "url": "https://github.com/line/armeria/pull/3005#discussion_r473500384", "bodyText": "Thanks! I used context-aware scheduler and executor depending on the types. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-20T01:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyNTgxMg=="}], "type": "inlineReview"}, {"oid": "aee3dfa2807d14468f87dc490d1237285d45f6d7", "url": "https://github.com/line/armeria/commit/aee3dfa2807d14468f87dc490d1237285d45f6d7", "message": "Address the comment by @trustin", "committedDate": "2020-08-20T01:11:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzODYxMg==", "url": "https://github.com/line/armeria/pull/3005#discussion_r473538612", "bodyText": "nit: Could be ignored :-)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .flatMapIterable(l -> l);\n          \n          \n            \n                                .flatMapIterable(Function.identity());", "author": "ikhoon", "createdAt": "2020-08-20T02:11:48Z", "path": "examples/context-propagation/reactor/src/main/java/example/armeria/contextpropagation/reactor/MainService.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package example.armeria.contextpropagation.reactor;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class MainService implements HttpService {\n+\n+    private final WebClient backendClient;\n+\n+    public MainService(WebClient backendClient) {\n+        this.backendClient = requireNonNull(backendClient, \"backendClient\");\n+    }\n+\n+    @Override\n+    public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final Scheduler contextAwareScheduler = Schedulers.fromExecutor(ctx.eventLoop());\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        final Flux<Long> fetchNumsFromFakeDb =\n+                Mono.fromCallable(\n+                        () -> {\n+                            // The context is mounted in a thread-local, meaning it is available to all\n+                            // logic such as tracing.\n+                            assert ServiceRequestContext.current() == ctx;\n+                            assert !ctx.eventLoop().inEventLoop();\n+\n+                            try {\n+                                // Simulate a blocking API call.\n+                                Thread.sleep(50);\n+                            } catch (Exception ignored) {\n+                                // Do nothing.\n+                            }\n+                            return Arrays.asList(23L, -23L);\n+                        })\n+                    // Always run blocking logic on the blocking task executor. By using\n+                    // ServiceRequestContext.blockingTaskExecutor, you also ensure the context is mounted\n+                    // inside the logic (e.g., your DB call will be traced!).\n+                    .subscribeOn(Schedulers.fromExecutor(ctx.blockingTaskExecutor()))\n+                    .flatMapIterable(l -> l);", "originalCommit": "aee3dfa2807d14468f87dc490d1237285d45f6d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU1OTI2OA==", "url": "https://github.com/line/armeria/pull/3005#discussion_r473559268", "bodyText": "Thanks fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-20T03:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzODYxMg=="}], "type": "inlineReview"}, {"oid": "f6018cdc6f31f7c7b53aeb92b283c528fba2c999", "url": "https://github.com/line/armeria/commit/f6018cdc6f31f7c7b53aeb92b283c528fba2c999", "message": "Address the comment by @ikhoon", "committedDate": "2020-08-20T03:00:56Z", "type": "commit"}]}