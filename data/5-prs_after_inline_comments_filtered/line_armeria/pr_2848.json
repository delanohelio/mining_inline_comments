{"pr_number": 2848, "pr_title": "Provide a utility that parses gRPC-Web trailers from a response content", "pr_createdAt": "2020-06-28T11:53:57Z", "pr_url": "https://github.com/line/armeria/pull/2848", "timeline": [{"oid": "1996d75e5b48138dd1d040872b66893c478ac729", "url": "https://github.com/line/armeria/commit/1996d75e5b48138dd1d040872b66893c478ac729", "message": "Provide a utility that parses gRPC-Web trailers from a response content\n\nMotivation:\n\nThe trailers of `a gRPC-Web` response must be the last message of the response, if a response has a body.\nThey don't get `tailers` via `RetryRule{WithContent}Builder.onResponseTrailers(...)`.\nThis could be a problem when they need `grpc-status` for retrying a gRPC-Web request.\nSlack thread: https://line-armeria.slack.com/archives/C1NGPBUH2/p1592985189001300?thread_ts=1591852559.452400&cid=C1NGPBUH2\n\nModifications:\n\n- Add a utility method that parses a trailers from the response content.\n\nResult:\n\nYou can now parse a response trailers from a response body for gRPC-Web using `GrpcWebUtil.parseTrailers(response)`\n\nNote:\n\nI'm not sure this is the best way.\nOn second thought, the problems of trailers in RetryRule could be solved by providing gRPC specific RetryRule such as `GrpcRetryRule`.", "committedDate": "2020-06-28T11:52:33Z", "type": "commit"}, {"oid": "dd725dcc33d2c1cb461abd90dd6bd9cfa7325f88", "url": "https://github.com/line/armeria/commit/dd725dcc33d2c1cb461abd90dd6bd9cfa7325f88", "message": "Update Javadoc", "committedDate": "2020-06-28T11:55:49Z", "type": "commit"}, {"oid": "2ae25fb186ee1a101bc763531aa4f1454413be50", "url": "https://github.com/line/armeria/commit/2ae25fb186ee1a101bc763531aa4f1454413be50", "message": "Wrap with try...finally", "committedDate": "2020-06-29T04:32:50Z", "type": "commit"}, {"oid": "3b26267d3a33704fe24473228be25d8a36251ebf", "url": "https://github.com/line/armeria/commit/3b26267d3a33704fe24473228be25d8a36251ebf", "message": "Clean up", "committedDate": "2020-06-29T04:34:21Z", "type": "commit"}, {"oid": "c3b947618c0013b79626140ef2b9f680b1c5c8bb", "url": "https://github.com/line/armeria/commit/c3b947618c0013b79626140ef2b9f680b1c5c8bb", "message": "Grammer", "committedDate": "2020-06-29T12:15:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NTMwOQ==", "url": "https://github.com/line/armeria/pull/2848#discussion_r447445309", "bodyText": "Isn't this public?", "author": "minwoox", "createdAt": "2020-06-30T06:41:56Z", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.grpc;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.internal.client.grpc.InternalGrpcWebUtil;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ */\n+public final class GrpcWebUtil {\n+\n+    private static final int HEADER_LENGTH = 5;\n+    private static final int RESERVED_MASK = 0x7E;\n+\n+    /**\n+     * Returns a gRPC-Web trailers parsed from the specified response body.\n+     * {@code null} if fail to parse a gRPC-Web trailers.\n+     *\n+     * <p>A gRPC-Web response does not contain a separated trailers according to the\n+     * <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\">\n+     * gRPC-Web spec</a>:\n+     * <ul>\n+     *   <li>Trailers must be the last message of the response.</li>\n+     *   <li>Trailers may be sent together with response headers, with no message in the body.</li>\n+     * </ul>\n+     * That means the response trailers should be pulled out from {@link AggregatedHttpResponse#headers()}}\n+     * or parsed from {@link AggregatedHttpResponse#content()}.\n+     *\n+     * <p>This method is useful when {@link RetryRuleWithContent} needs {@link GrpcHeaderNames#GRPC_STATUS}\n+     * to decide whether to retry. For example:\n+     * <pre>{@code\n+     * Clients.builder(grpcServerUri)\n+     *        .decorator(RetryingClient.newDecorator(\n+     *                RetryRuleWithContent.onResponse(response -> {\n+     *                    return response.aggregate().thenApply(aggregated -> {\n+     *                        HttpHeaders trailers = GrpcWebUtil.parseTrailers(aggregated.content());\n+     *                        // Retry if the 'grpc-status' is not equal to 0.\n+     *                        return trailers != null && trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+     *                    });\n+     *                })))\n+     *        .build(MyGrpcStub.class);\n+     * }</pre>\n+     */\n+    @Nullable\n+    static HttpHeaders parseTrailers(HttpData response) {", "originalCommit": "c3b947618c0013b79626140ef2b9f680b1c5c8bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0OTExNQ==", "url": "https://github.com/line/armeria/pull/2848#discussion_r447449115", "bodyText": "Oops!\ud83e\udd23", "author": "ikhoon", "createdAt": "2020-06-30T06:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NTMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NTM3MA==", "url": "https://github.com/line/armeria/pull/2848#discussion_r447445370", "bodyText": "rnn for response?", "author": "minwoox", "createdAt": "2020-06-30T06:42:04Z", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.grpc;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.internal.client.grpc.InternalGrpcWebUtil;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ */\n+public final class GrpcWebUtil {\n+\n+    private static final int HEADER_LENGTH = 5;\n+    private static final int RESERVED_MASK = 0x7E;\n+\n+    /**\n+     * Returns a gRPC-Web trailers parsed from the specified response body.\n+     * {@code null} if fail to parse a gRPC-Web trailers.\n+     *\n+     * <p>A gRPC-Web response does not contain a separated trailers according to the\n+     * <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\">\n+     * gRPC-Web spec</a>:\n+     * <ul>\n+     *   <li>Trailers must be the last message of the response.</li>\n+     *   <li>Trailers may be sent together with response headers, with no message in the body.</li>\n+     * </ul>\n+     * That means the response trailers should be pulled out from {@link AggregatedHttpResponse#headers()}}\n+     * or parsed from {@link AggregatedHttpResponse#content()}.\n+     *\n+     * <p>This method is useful when {@link RetryRuleWithContent} needs {@link GrpcHeaderNames#GRPC_STATUS}\n+     * to decide whether to retry. For example:\n+     * <pre>{@code\n+     * Clients.builder(grpcServerUri)\n+     *        .decorator(RetryingClient.newDecorator(\n+     *                RetryRuleWithContent.onResponse(response -> {\n+     *                    return response.aggregate().thenApply(aggregated -> {\n+     *                        HttpHeaders trailers = GrpcWebUtil.parseTrailers(aggregated.content());\n+     *                        // Retry if the 'grpc-status' is not equal to 0.\n+     *                        return trailers != null && trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+     *                    });\n+     *                })))\n+     *        .build(MyGrpcStub.class);\n+     * }</pre>\n+     */\n+    @Nullable\n+    static HttpHeaders parseTrailers(HttpData response) {\n+        final ByteBuf buf;", "originalCommit": "c3b947618c0013b79626140ef2b9f680b1c5c8bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0Nzc5Mw==", "url": "https://github.com/line/armeria/pull/2848#discussion_r447447793", "bodyText": "Could you leave a comment about what this is for?", "author": "minwoox", "createdAt": "2020-06-30T06:47:33Z", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.grpc;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpData;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+import com.linecorp.armeria.common.unsafe.PooledHttpData;\n+import com.linecorp.armeria.internal.client.grpc.InternalGrpcWebUtil;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ */\n+public final class GrpcWebUtil {\n+\n+    private static final int HEADER_LENGTH = 5;\n+    private static final int RESERVED_MASK = 0x7E;\n+\n+    /**\n+     * Returns a gRPC-Web trailers parsed from the specified response body.\n+     * {@code null} if fail to parse a gRPC-Web trailers.\n+     *\n+     * <p>A gRPC-Web response does not contain a separated trailers according to the\n+     * <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\">\n+     * gRPC-Web spec</a>:\n+     * <ul>\n+     *   <li>Trailers must be the last message of the response.</li>\n+     *   <li>Trailers may be sent together with response headers, with no message in the body.</li>\n+     * </ul>\n+     * That means the response trailers should be pulled out from {@link AggregatedHttpResponse#headers()}}\n+     * or parsed from {@link AggregatedHttpResponse#content()}.\n+     *\n+     * <p>This method is useful when {@link RetryRuleWithContent} needs {@link GrpcHeaderNames#GRPC_STATUS}\n+     * to decide whether to retry. For example:\n+     * <pre>{@code\n+     * Clients.builder(grpcServerUri)\n+     *        .decorator(RetryingClient.newDecorator(\n+     *                RetryRuleWithContent.onResponse(response -> {\n+     *                    return response.aggregate().thenApply(aggregated -> {\n+     *                        HttpHeaders trailers = GrpcWebUtil.parseTrailers(aggregated.content());\n+     *                        // Retry if the 'grpc-status' is not equal to 0.\n+     *                        return trailers != null && trailers.getInt(GrpcHeaderNames.GRPC_STATUS) != 0;\n+     *                    });\n+     *                })))\n+     *        .build(MyGrpcStub.class);\n+     * }</pre>\n+     */\n+    @Nullable\n+    static HttpHeaders parseTrailers(HttpData response) {\n+        final ByteBuf buf;\n+        if (response instanceof PooledHttpData) {\n+            buf = ((PooledHttpData) response).content();\n+        } else {\n+            buf = Unpooled.wrappedBuffer(response.array());\n+        }\n+        final int readerIndex = buf.readerIndex();\n+\n+        try {\n+            HttpHeaders trailers = null;\n+            while (buf.isReadable(HEADER_LENGTH)) {\n+                final short type = buf.readUnsignedByte();\n+                if ((type & RESERVED_MASK) != 0) {\n+                    // Malformed header\n+                    break;\n+                }\n+\n+                final int length = buf.readInt();\n+                if (type >> 7 == 1) {\n+                    trailers = InternalGrpcWebUtil.parseGrpcWebTrailers(buf);\n+                    break;\n+                } else {\n+                    buf.skipBytes(length);", "originalCommit": "c3b947618c0013b79626140ef2b9f680b1c5c8bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "59f6ae6c6d0090e3ed943511c026d3534e18456f", "url": "https://github.com/line/armeria/commit/59f6ae6c6d0090e3ed943511c026d3534e18456f", "message": "Address comments by @minwoox", "committedDate": "2020-06-30T06:59:44Z", "type": "commit"}, {"oid": "3a3e8c041c1e9201b38f97dc17a8eead011ac52b", "url": "https://github.com/line/armeria/commit/3a3e8c041c1e9201b38f97dc17a8eead011ac52b", "message": "Clean up", "committedDate": "2020-06-30T07:01:00Z", "type": "commit"}, {"oid": "f086c66e78b3d9e421b2421a68e8949b2f2f953f", "url": "https://github.com/line/armeria/commit/f086c66e78b3d9e421b2421a68e8949b2f2f953f", "message": "Add @UnstableApi and note", "committedDate": "2020-07-01T02:32:31Z", "type": "commit"}, {"oid": "3f6b4cadfbfd2f590657939c9a5d71805c186476", "url": "https://github.com/line/armeria/commit/3f6b4cadfbfd2f590657939c9a5d71805c186476", "message": "Merge branch 'master' into grpc-web-response-trailer", "committedDate": "2020-07-01T05:15:43Z", "type": "commit"}, {"oid": "e10a39c1727c5b55c83db5b779533b082af51d4b", "url": "https://github.com/line/armeria/commit/e10a39c1727c5b55c83db5b779533b082af51d4b", "message": "Fix compile error", "committedDate": "2020-07-01T05:16:46Z", "type": "commit"}]}