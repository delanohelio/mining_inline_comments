{"pr_number": 2954, "pr_title": "Add String-to-Duration converter on Spring Boot 1", "pr_createdAt": "2020-07-31T04:05:04Z", "pr_url": "https://github.com/line/armeria/pull/2954", "timeline": [{"oid": "cd42b2daf98fc562bba9247a353e76f74d56479c", "url": "https://github.com/line/armeria/commit/cd42b2daf98fc562bba9247a353e76f74d56479c", "message": "Fix bug that could not convert String to Duration", "committedDate": "2020-07-31T03:59:08Z", "type": "commit"}, {"oid": "cce9c9fd907d04a279151b75bc625ecd926934c7", "url": "https://github.com/line/armeria/commit/cce9c9fd907d04a279151b75bc625ecd926934c7", "message": "Add `@ConditionalOnMissingBean` / Cleanup", "committedDate": "2020-07-31T05:37:29Z", "type": "commit"}, {"oid": "0001df9ee9b0b45fef171807e23b2c108709b6e7", "url": "https://github.com/line/armeria/commit/0001df9ee9b0b45fef171807e23b2c108709b6e7", "message": "Cleanup", "committedDate": "2020-07-31T06:10:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTY4Mg==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463435682", "bodyText": "Could we use org.springframework.format.FormatterRegistrar just like  org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar did?", "author": "trustin", "createdAt": "2020-07-31T06:50:34Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConvertersConfiguration.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.util.List;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.support.ConversionServiceFactoryBean;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link Converter}s.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConvertersConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public ConversionServiceFactoryBean conversionService(List<Converter> converterList) {", "originalCommit": "0001df9ee9b0b45fef171807e23b2c108709b6e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTI4Mw==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463509283", "bodyText": "I added ArmeriaSpringBoot1FormatterRegistrar \ud83d\ude0a", "author": "heowc", "createdAt": "2020-07-31T09:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTk0Nw==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463435947", "bodyText": "Please add their license header after ours if you forked.", "author": "trustin", "createdAt": "2020-07-31T06:51:22Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "originalCommit": "0001df9ee9b0b45fef171807e23b2c108709b6e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTMyMQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463509321", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-07-31T09:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNTk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjIwNA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463436204", "bodyText": "Is it possible to hide this class from the public API, i.e. remove public?", "author": "trustin", "createdAt": "2020-07-31T06:52:06Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Convert {@link String} to {@link Duration}.\n+ */\n+public class StringToDurationConverter implements Converter<String, Duration> {", "originalCommit": "0001df9ee9b0b45fef171807e23b2c108709b6e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTM5Mg==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463509392", "bodyText": "Removed", "author": "heowc", "createdAt": "2020-07-31T09:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjc3Ng==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463436776", "bodyText": "Could we remove public from all members? DurationStyle is package-local, so there's no point of putting public in this class.", "author": "trustin", "createdAt": "2020-07-31T06:53:44Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+\n+        @Override\n+        public Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            }\n+            catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        public String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+\n+        @Override\n+        public Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            }\n+            catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        public String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    public Duration parse(String value) {", "originalCommit": "0001df9ee9b0b45fef171807e23b2c108709b6e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTQxMA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463509410", "bodyText": "Removed", "author": "heowc", "createdAt": "2020-07-31T09:36:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNjc3Ng=="}], "type": "inlineReview"}, {"oid": "28b288ae52ed9aaac37baf73c4b6c0d0fef5bbc1", "url": "https://github.com/line/armeria/commit/28b288ae52ed9aaac37baf73c4b6c0d0fef5bbc1", "message": "add copylight / remove `public`", "committedDate": "2020-07-31T08:06:15Z", "type": "commit"}, {"oid": "65abd723a14d76d358b2c797a78f9959f8931ccb", "url": "https://github.com/line/armeria/commit/65abd723a14d76d358b2c797a78f9959f8931ccb", "message": "Add `ArmeriaSpringBoot1FormatterRegistrar`", "committedDate": "2020-07-31T09:35:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODM1Mw==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463618353", "bodyText": "nit: Could remove empty lines", "author": "trustin", "createdAt": "2020-07-31T13:42:41Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;\n+            }\n+            for (Unit candidate : values()) {\n+                if (candidate.chronoUnit == chronoUnit) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit \" + chronoUnit);\n+        }\n+\n+        static Unit fromSuffix(String suffix) {\n+            for (Unit candidate : values()) {\n+                if (candidate.suffix.equalsIgnoreCase(suffix)) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit '\" + suffix + \"'\");\n+        }\n+\n+    }\n+\n+}", "originalCommit": "65abd723a14d76d358b2c797a78f9959f8931ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTYzMA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661630", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-07-31T14:58:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDg3NQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463624875", "bodyText": "Creates a new", "author": "trustin", "createdAt": "2020-07-31T13:53:46Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.", "originalCommit": "65abd723a14d76d358b2c797a78f9959f8931ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTY3MQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661671", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-07-31T14:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNDg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTU2MA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625560", "bodyText": "Creates a new\nI don't understand what the second sentence means. Could you explain?", "author": "trustin", "createdAt": "2020-07-31T13:54:53Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create an {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService() {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(new ArmeriaSpringBoot1FormatterRegistrar()));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create an {@link StringToDurationConverter} bean. If {@link ConversionService} is already registered,", "originalCommit": "65abd723a14d76d358b2c797a78f9959f8931ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTA1OQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661059", "bodyText": "Because ConversionService can only make one bean, StringToDurationConverter may not be registered if you add it in other settings. That's why I provided a way to register it with different settings.", "author": "heowc", "createdAt": "2020-07-31T14:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4MjI1NQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464182255", "bodyText": "I deleted this javadoc. \ud83d\ude04", "author": "heowc", "createdAt": "2020-08-03T03:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTc2NA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625764", "bodyText": "Could just inline this method?", "author": "trustin", "createdAt": "2020-07-31T13:55:14Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.FormatterRegistry;\n+\n+/**\n+ * Configures useful formatting system for use with Spring.\n+ */\n+class ArmeriaSpringBoot1FormatterRegistrar implements FormatterRegistrar {\n+\n+    @Override\n+    public void registerFormatters(FormatterRegistry registry) {\n+        registerConverters(registry);", "originalCommit": "65abd723a14d76d358b2c797a78f9959f8931ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTcxNw==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661717", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-07-31T14:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTk1Ng==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463625956", "bodyText": "Remove an empty line?", "author": "trustin", "createdAt": "2020-07-31T13:55:34Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ *", "originalCommit": "65abd723a14d76d358b2c797a78f9959f8931ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTc3MQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661771", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-07-31T14:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNTk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNjM1MQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463626351", "bodyText": "Could remove an empty line", "author": "trustin", "createdAt": "2020-07-31T13:56:21Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/StringToDurationConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+\n+import org.springframework.core.convert.converter.Converter;\n+\n+/**\n+ * Convert {@link String} to {@link Duration}.\n+ */\n+class StringToDurationConverter implements Converter<String, Duration> {\n+", "originalCommit": "65abd723a14d76d358b2c797a78f9959f8931ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2MTgxOQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r463661819", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-07-31T14:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNjM1MQ=="}], "type": "inlineReview"}, {"oid": "a2f61a9eab6f5d1105abb6bb015a33ad0e18f431", "url": "https://github.com/line/armeria/commit/a2f61a9eab6f5d1105abb6bb015a33ad0e18f431", "message": "Address comments from @trustin", "committedDate": "2020-07-31T14:54:57Z", "type": "commit"}, {"oid": "b937369194b3a4bc36961b52610fd0fa2ab854c1", "url": "https://github.com/line/armeria/commit/b937369194b3a4bc36961b52610fd0fa2ab854c1", "message": "Remove empty lines", "committedDate": "2020-07-31T14:58:00Z", "type": "commit"}, {"oid": "78567e320cc7f1d043a0450555a04425a5c74184", "url": "https://github.com/line/armeria/commit/78567e320cc7f1d043a0450555a04425a5c74184", "message": "Add converters to `FormatterRegistry`", "committedDate": "2020-08-01T01:25:17Z", "type": "commit"}, {"oid": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "url": "https://github.com/line/armeria/commit/a1ce21fc93c0110ac9745617bc1656aefdc34265", "message": "Address comments from @trustin", "committedDate": "2020-08-02T03:20:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE2ODg5Ng==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464168896", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Matcher matcher = matcher(value);\n          \n          \n            \n                            final Matcher matcher = matcher(value);", "author": "ikhoon", "createdAt": "2020-08-03T02:52:33Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDYzNg==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170636", "bodyText": "Use Preconditions.checkState()?", "author": "ikhoon", "createdAt": "2020-08-03T03:00:56Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDY3OA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170678", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String suffix = matcher.group(2);\n          \n          \n            \n                            final String suffix = matcher.group(2);", "author": "ikhoon", "createdAt": "2020-08-03T03:01:07Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDczOA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170738", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n          \n          \n            \n                            throw new IllegalArgumentException('\\'' + value + \"' is not a valid simple duration\", ex);", "author": "ikhoon", "createdAt": "2020-08-03T03:01:26Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MDkwMA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464170900", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n          \n          \n            \n                            throw new IllegalArgumentException('\\'' + value + \"' is not a valid ISO-8601 duration\", ex);", "author": "ikhoon", "createdAt": "2020-08-03T03:02:08Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTEwOQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171109", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.notNull(value, \"Value must not be null\");\n          \n          \n            \n                    requireNonNull(value, \"value\");", "author": "ikhoon", "createdAt": "2020-08-03T03:03:09Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTE0OQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171149", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-08-03T03:03:23Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTU4OA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171588", "bodyText": "Global comments: Could you use third-person singular verb -s and so on.", "author": "ikhoon", "createdAt": "2020-08-03T03:05:27Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTc3NA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171774", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-08-03T03:06:34Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;\n+            }\n+            for (Unit candidate : values()) {\n+                if (candidate.chronoUnit == chronoUnit) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit \" + chronoUnit);\n+        }\n+\n+        static Unit fromSuffix(String suffix) {\n+            for (Unit candidate : values()) {\n+                if (candidate.suffix.equalsIgnoreCase(suffix)) {\n+                    return candidate;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown unit '\" + suffix + \"'\");", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTkzMA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171930", "bodyText": "Could be removed?", "author": "ikhoon", "createdAt": "2020-08-03T03:07:23Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTk3Ng==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464171976", "bodyText": "Could be removed?", "author": "ikhoon", "createdAt": "2020-08-03T03:07:36Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MjE1Mg==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172152", "bodyText": "Could be removed?", "author": "ikhoon", "createdAt": "2020-08-03T03:08:33Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MjM0Mw==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172343", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return Unit.MILLIS;\n          \n          \n            \n                            return MILLIS;", "author": "ikhoon", "createdAt": "2020-08-03T03:09:37Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);\n+\n+    /**\n+     * Print the specified duration.\n+     * @param value the value to print\n+     * @return the printed result\n+     */\n+    String print(Duration value) {\n+        return print(value, null);\n+    }\n+\n+    /**\n+     * Print the specified duration using the given unit.\n+     * @param value the value to print\n+     * @param unit the value to use for printing\n+     * @return the printed result\n+     */\n+    abstract String print(Duration value, ChronoUnit unit);\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value) {\n+        return detectAndParse(value, null);\n+    }\n+\n+    /**\n+     * Detect the style then parse the value to return a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return the parsed duration\n+     * @throws IllegalArgumentException if the value is not a known style or cannot be\n+     * parsed\n+     */\n+    static Duration detectAndParse(String value, ChronoUnit unit) {\n+        return detect(value).parse(value, unit);\n+    }\n+\n+    /**\n+     * Detect the style from the given source value.\n+     * @param value the source value\n+     * @return the duration style\n+     * @throws IllegalArgumentException if the value is not a known style\n+     */\n+    static DurationStyle detect(String value) {\n+        Assert.notNull(value, \"Value must not be null\");\n+        for (DurationStyle candidate : values()) {\n+            if (candidate.matches(value)) {\n+                return candidate;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"'\" + value + \"' is not a valid duration\");\n+    }\n+\n+    /**\n+     * Units that we support.\n+     */\n+    enum Unit {\n+\n+        /**\n+         * Nanoseconds.\n+         */\n+        NANOS(ChronoUnit.NANOS, \"ns\", Duration::toNanos),\n+\n+        /**\n+         * Microseconds.\n+         */\n+        MICROS(ChronoUnit.MICROS, \"us\", (duration) -> duration.toMillis() * 1000L),\n+\n+        /**\n+         * Milliseconds.\n+         */\n+        MILLIS(ChronoUnit.MILLIS, \"ms\", Duration::toMillis),\n+\n+        /**\n+         * Seconds.\n+         */\n+        SECONDS(ChronoUnit.SECONDS, \"s\", Duration::getSeconds),\n+\n+        /**\n+         * Minutes.\n+         */\n+        MINUTES(ChronoUnit.MINUTES, \"m\", Duration::toMinutes),\n+\n+        /**\n+         * Hours.\n+         */\n+        HOURS(ChronoUnit.HOURS, \"h\", Duration::toHours),\n+\n+        /**\n+         * Days.\n+         */\n+        DAYS(ChronoUnit.DAYS, \"d\", Duration::toDays);\n+\n+        private final ChronoUnit chronoUnit;\n+\n+        private final String suffix;\n+\n+        private Function<Duration, Long> longValue;\n+\n+        Unit(ChronoUnit chronoUnit, String suffix, Function<Duration, Long> toUnit) {\n+            this.chronoUnit = chronoUnit;\n+            this.suffix = suffix;\n+            this.longValue = toUnit;\n+        }\n+\n+        Duration parse(String value) {\n+            return Duration.of(Long.parseLong(value), this.chronoUnit);\n+        }\n+\n+        String print(Duration value) {\n+            return longValue(value) + this.suffix;\n+        }\n+\n+        long longValue(Duration value) {\n+            return this.longValue.apply(value);\n+        }\n+\n+        static Unit fromChronoUnit(ChronoUnit chronoUnit) {\n+            if (chronoUnit == null) {\n+                return Unit.MILLIS;", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3Mjg2OA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464172868", "bodyText": "Could you create package-info.java that contains NonNullByDefault.\nAnd add\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract Duration parse(String value, ChronoUnit unit);\n          \n          \n            \n                abstract Duration parse(String value, @Nullable ChronoUnit unit);", "author": "ikhoon", "createdAt": "2020-08-03T03:12:00Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java\n+\n+    /**\n+     * Simple formatting, for example '1s'.\n+     */\n+    SIMPLE(\"^([+-]?\\\\d+)([a-zA-Z]{0,2})$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                Matcher matcher = matcher(value);\n+                Assert.state(matcher.matches(), \"Does not match simple duration pattern\");\n+                String suffix = matcher.group(2);\n+                return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit))\n+                        .parse(matcher.group(1));\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid simple duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return Unit.fromChronoUnit(unit).print(value);\n+        }\n+\n+    },\n+\n+    /**\n+     * ISO-8601 formatting.\n+     */\n+    ISO8601(\"^[+-]?P.*$\") {\n+        @Override\n+        Duration parse(String value, ChronoUnit unit) {\n+            try {\n+                return Duration.parse(value);\n+            } catch (Exception ex) {\n+                throw new IllegalArgumentException(\"'\" + value + \"' is not a valid ISO-8601 duration\", ex);\n+            }\n+        }\n+\n+        @Override\n+        String print(Duration value, ChronoUnit unit) {\n+            return value.toString();\n+        }\n+\n+    };\n+\n+    private final Pattern pattern;\n+\n+    DurationStyle(String pattern) {\n+        this.pattern = Pattern.compile(pattern);\n+    }\n+\n+    protected final boolean matches(String value) {\n+        return this.pattern.matcher(value).matches();\n+    }\n+\n+    protected final Matcher matcher(String value) {\n+        return this.pattern.matcher(value);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @return a duration\n+     */\n+    Duration parse(String value) {\n+        return parse(value, null);\n+    }\n+\n+    /**\n+     * Parse the given value to a duration.\n+     * @param value the value to parse\n+     * @param unit the duration unit to use if the value doesn't specify one ({@code null}\n+     * will default to ms)\n+     * @return a duration\n+     */\n+    abstract Duration parse(String value, ChronoUnit unit);", "originalCommit": "a1ce21fc93c0110ac9745617bc1656aefdc34265", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "056ccf8098a5de8c96648b5a8f2758bcbf8aa0ca", "url": "https://github.com/line/armeria/commit/056ccf8098a5de8c96648b5a8f2758bcbf8aa0ca", "message": "Revert \"Address comments from @trustin\"\n\nThis reverts commit a1ce21fc", "committedDate": "2020-08-03T03:34:28Z", "type": "commit"}, {"oid": "393fabbc7f7b6c68ba078ef1bb2a55bcc7b73289", "url": "https://github.com/line/armeria/commit/393fabbc7f7b6c68ba078ef1bb2a55bcc7b73289", "message": "Address comments from @ikhoon", "committedDate": "2020-08-03T03:44:24Z", "type": "commit"}, {"oid": "cb34c8df20f1000e7f0cb24cff43436bbe683208", "url": "https://github.com/line/armeria/commit/cb34c8df20f1000e7f0cb24cff43436bbe683208", "message": "Address comments from @ikhoon", "committedDate": "2020-08-03T03:47:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NDk1MA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464184950", "bodyText": "How about making this as singleton by using @Scope or making enum singleton?", "author": "minwoox", "createdAt": "2020-08-03T04:11:34Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create a new {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService(ListableBeanFactory beanFactory) {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        final FormatterRegistrar formatterRegistrar = new ArmeriaSpringBoot1FormatterRegistrar(beanFactory);\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(formatterRegistrar));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create a new {@link StringToDurationConverter} bean.\n+     */\n+    @Bean\n+    public StringToDurationConverter armeriaSpringBoot1StringDurationConverter() {\n+        return new StringToDurationConverter();", "originalCommit": "cb34c8df20f1000e7f0cb24cff43436bbe683208", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5ODMyMQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464198321", "bodyText": "Since we have to make it as Bean, we will use @Scope.\n@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)", "author": "heowc", "createdAt": "2020-08-03T05:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NDk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464185659", "bodyText": "Can we fork some tests as well to see what is possible?", "author": "minwoox", "createdAt": "2020-08-03T04:15:31Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/DurationStyle.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Copyright 2012-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linecorp.armeria.spring;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Duration format styles.\n+ */\n+enum DurationStyle {\n+\n+    // Forked from Spring Boot 2.3.1.\n+    // https://github.com/spring-projects/spring-boot/blob/b21c09020da7b237731d69c5c96b163e810c200f/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/DurationStyle.java", "originalCommit": "cb34c8df20f1000e7f0cb24cff43436bbe683208", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5NzQ0Ng==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464197446", "bodyText": "How about forking the test?", "author": "heowc", "createdAt": "2020-08-03T05:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5ODg3OA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464198878", "bodyText": "Yeah, let's do that. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-08-03T05:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2NTY5Nw==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464265697", "bodyText": "Add 2c08560", "author": "heowc", "createdAt": "2020-08-03T08:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4NTY1OQ=="}], "type": "inlineReview"}, {"oid": "8ec223b0aa73fb76f9d885f958603eaaf98305e2", "url": "https://github.com/line/armeria/commit/8ec223b0aa73fb76f9d885f958603eaaf98305e2", "message": "Address comments from @minwoox", "committedDate": "2020-08-03T05:16:24Z", "type": "commit"}, {"oid": "2c08560024f7b36ec8dd1e52f35de101a6774441", "url": "https://github.com/line/armeria/commit/2c08560024f7b36ec8dd1e52f35de101a6774441", "message": "Fork test for `DurationStyleTests`", "committedDate": "2020-08-03T08:24:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2ODY4NA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464268684", "bodyText": "nit: Returns the {@link StringToDurationConverter} bean because it's now a singleton. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-08-03T08:31:24Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1ConversionServiceConfiguration.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.support.FormattingConversionService;\n+import org.springframework.format.support.FormattingConversionServiceFactoryBean;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Provides useful {@link ConversionService}.\n+ */\n+@Configuration\n+public class ArmeriaSpringBoot1ConversionServiceConfiguration {\n+\n+    /**\n+     * Create a new {@link ConversionService} bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean(ConversionService.class)\n+    public FormattingConversionService conversionService(ListableBeanFactory beanFactory) {\n+        final FormattingConversionServiceFactoryBean factoryBean = new FormattingConversionServiceFactoryBean();\n+        final FormatterRegistrar formatterRegistrar = new ArmeriaSpringBoot1FormatterRegistrar(beanFactory);\n+        factoryBean.setFormatterRegistrars(Sets.newHashSet(formatterRegistrar));\n+        factoryBean.afterPropertiesSet();\n+        return factoryBean.getObject();\n+    }\n+\n+    /**\n+     * Create a new {@link StringToDurationConverter} bean.", "originalCommit": "2c08560024f7b36ec8dd1e52f35de101a6774441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3MDI3Nw==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464270277", "bodyText": "Fixed", "author": "heowc", "createdAt": "2020-08-03T08:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2ODY4NA=="}], "type": "inlineReview"}, {"oid": "3e4882039c57e32220f605b8747f31ac7e872639", "url": "https://github.com/line/armeria/commit/3e4882039c57e32220f605b8747f31ac7e872639", "message": "Cleanup", "committedDate": "2020-08-03T08:34:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Mjg4MA==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464282880", "bodyText": "nit: Add final?", "author": "ikhoon", "createdAt": "2020-08-03T08:58:16Z", "path": "spring/boot1-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSpringBoot1FormatterRegistrar.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring;\n+\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.format.FormatterRegistrar;\n+import org.springframework.format.FormatterRegistry;\n+\n+/**\n+ * Configures useful formatting system for use with Spring.\n+ */\n+class ArmeriaSpringBoot1FormatterRegistrar implements FormatterRegistrar {\n+\n+    private ListableBeanFactory beanFactory;", "originalCommit": "3e4882039c57e32220f605b8747f31ac7e872639", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwMzc4Ng==", "url": "https://github.com/line/armeria/pull/2954#discussion_r464303786", "bodyText": "Add c1be73a", "author": "heowc", "createdAt": "2020-08-03T09:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Mjg4MA=="}], "type": "inlineReview"}, {"oid": "c1be73affbb378b8fffee9b2bfe776cb3980bcf5", "url": "https://github.com/line/armeria/commit/c1be73affbb378b8fffee9b2bfe776cb3980bcf5", "message": "Add `final`", "committedDate": "2020-08-03T09:36:35Z", "type": "commit"}]}