{"pr_number": 2820, "pr_title": "Add `@ServiceName` annotation for annotated service", "pr_createdAt": "2020-06-19T13:24:18Z", "pr_url": "https://github.com/line/armeria/pull/2820", "timeline": [{"oid": "173de3301b3694a3153e7c0ded28bb792c4fdc2a", "url": "https://github.com/line/armeria/commit/173de3301b3694a3153e7c0ded28bb792c4fdc2a", "message": "Add `@ServiceName` annotation for annotated service\n\nMotivation:\n\n`RequestLog.serviceName()` is introduced in #2780\nTo override the service name in an annotated service, `@ServiceName` annotation would be useful.\nSee #2809\n\nModifications:\n\n- Add `@ServiceName` annotation for an annotated service class and method.\n  - method annotation has a higher priority than class annotation.\n- Update documentation\n\nResult:\n\nYou can now override the default service with `@ServiceName` annotation in annotated services.", "committedDate": "2020-06-19T13:23:50Z", "type": "commit"}, {"oid": "3ec80c49425fc18db2d81178f220cacd59b64586", "url": "https://github.com/line/armeria/commit/3ec80c49425fc18db2d81178f220cacd59b64586", "message": "Update Javadoc", "committedDate": "2020-06-19T13:30:34Z", "type": "commit"}, {"oid": "3ec80c49425fc18db2d81178f220cacd59b64586", "url": "https://github.com/line/armeria/commit/3ec80c49425fc18db2d81178f220cacd59b64586", "message": "Update Javadoc", "committedDate": "2020-06-19T13:30:34Z", "type": "forcePushed"}, {"oid": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9", "url": "https://github.com/line/armeria/commit/046e5b94c2dbc64502fac1dee1546f7d0932c5b9", "message": "Clean up", "committedDate": "2020-06-19T13:32:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0OTkxMQ==", "url": "https://github.com/line/armeria/pull/2820#discussion_r442849911", "bodyText": ".equals()?\nHow about using ensureAvailability(RequestLogProperty.NAME).serviceName()?", "author": "trustin", "createdAt": "2020-06-19T13:46:06Z", "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ServiceName.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for service name that is often used as a meter tag or distributed trace's span name.\n+ * You can override the default service name by annotating a class or method with {@link ServiceName}.\n+ * For example:<pre>{@code\n+ * > public class MyService {\n+ * >     @Get(\"/\")\n+ * >     public String get(ServiceRequestContext ctx) {\n+ * >         // The default service name\n+ * >         assert ctx.log().partial().serviceName() == MyService.class.getName();", "originalCommit": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2ODE4MQ==", "url": "https://github.com/line/armeria/pull/2820#discussion_r442868181", "bodyText": "or just ctx.log().whenComplete().thenAccept()", "author": "trustin", "createdAt": "2020-06-19T14:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0OTkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MDYxMQ==", "url": "https://github.com/line/armeria/pull/2820#discussion_r442850611", "bodyText": "?\nCould you check if the above example (assert ctx.log().partial().serviceName() == \"my-service\";) really works here? If not, please update them to use whenComplete().thenApply() which is the recommended way.", "author": "trustin", "createdAt": "2020-06-19T13:47:23Z", "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestLogNameTest.java", "diffHunk": "@@ -82,4 +75,56 @@ void logNameShouldBeSetOnEarlyFailure() throws Exception {\n         assertThat(log.name()).isEqualTo(\"bar\");\n         assertThat(log.responseHeaders().status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n+\n+    @Test\n+    void defaultServiceName() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/ok\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(FooService.class.getName());\n+    }\n+\n+    @Test\n+    void customServiceNameWithClass() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/serviceName/foo\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(\"MyBarService\");\n+    }\n+\n+    @Test\n+    void customServiceNameWithMethod() throws Exception {\n+        WebClient.of(server.httpUri()).get(\"/serviceName/bar\").aggregate().join();\n+\n+        final RequestLog log = logs.take().whenComplete().join();\n+        assertThat(log.serviceName()).isEqualTo(\"SecuredBarService\");\n+    }\n+\n+    private static class FooService {\n+        @Get(\"/ok\")\n+        public String foo() {\n+            return \"OK\";\n+        }\n+\n+        @Get(\"/fail_early\")\n+        public String bar() {\n+            return \"Not OK\";\n+        }\n+    }\n+\n+    @ServiceName(\"MyBarService\")\n+    private static class BarService {\n+        @Get(\"/foo\")\n+        public String foo() {\n+            return \"OK\";\n+        }\n+\n+        @ServiceName(\"SecuredBarService\")\n+        @Get(\"/bar\")\n+        public String secured(ServiceRequestContext ctx) {\n+            ctx.log();", "originalCommit": "046e5b94c2dbc64502fac1dee1546f7d0932c5b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2OTkzNg==", "url": "https://github.com/line/armeria/pull/2820#discussion_r442869936", "bodyText": "I think so because the names are set in\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java\n    \n    \n         Line 246\n      in\n      173de33\n    \n    \n    \n    \n\n        \n          \n           ctx.logBuilder().name(serviceName(), methodName()); \n        \n    \n  \n\n\nThe secured(ServiceRequestContext ctx) is called after this via invoke(...).\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java\n    \n    \n        Lines 258 to 263\n      in\n      173de33\n    \n    \n    \n    \n\n        \n          \n           switch (responseType) { \n        \n\n        \n          \n               case HTTP_RESPONSE: \n        \n\n        \n          \n                   final Function<AggregatedHttpRequest, HttpResponse> httpResponseApplyFunction = \n        \n\n        \n          \n                           msg -> new ExceptionFilteredHttpResponse( \n        \n\n        \n          \n                                   ctx, req, (HttpResponse) invoke(ctx, req, msg), exceptionHandler); \n        \n\n        \n          \n                   if (useBlockingTaskExecutor) {", "author": "ikhoon", "createdAt": "2020-06-19T14:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3MjE1OA==", "url": "https://github.com/line/armeria/pull/2820#discussion_r442872158", "bodyText": "By the way, I agreed that it is not a recommended way to use RequestLog because users might copy this code and used it in other places such as a decorator.\nLet me add an example for a decorator.", "author": "ikhoon", "createdAt": "2020-06-19T14:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MDYxMQ=="}], "type": "inlineReview"}, {"oid": "ec7b269b0ceaa54558c9f8212d6ba9d1a262ea63", "url": "https://github.com/line/armeria/commit/ec7b269b0ceaa54558c9f8212d6ba9d1a262ea63", "message": "Update documetation and add test", "committedDate": "2020-06-19T15:16:14Z", "type": "commit"}, {"oid": "1aa2d5486e9fa12cbc423346ad2e83f743aa38fb", "url": "https://github.com/line/armeria/commit/1aa2d5486e9fa12cbc423346ad2e83f743aa38fb", "message": "Add assertion", "committedDate": "2020-06-19T15:21:09Z", "type": "commit"}, {"oid": "8dd5f6edb65b0fa4b9f4d43ddaedde7bd9d5dfc9", "url": "https://github.com/line/armeria/commit/8dd5f6edb65b0fa4b9f4d43ddaedde7bd9d5dfc9", "message": "Checkstyle", "committedDate": "2020-06-19T15:25:22Z", "type": "commit"}, {"oid": "4b1063eb3ca80bf5f9ceb8da69ec4f56ade59e42", "url": "https://github.com/line/armeria/commit/4b1063eb3ca80bf5f9ceb8da69ec4f56ade59e42", "message": "Cleanup", "committedDate": "2020-06-19T15:27:46Z", "type": "commit"}, {"oid": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa", "url": "https://github.com/line/armeria/commit/28b7834ff9422f10fc9eef04abce5cbf740f4cfa", "message": "Add availability-of-properties link", "committedDate": "2020-06-19T16:13:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2MzU1Nw==", "url": "https://github.com/line/armeria/pull/2820#discussion_r443063557", "bodyText": "Better using AnnotationUtil: https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotationUtil.java", "author": "trustin", "createdAt": "2020-06-19T22:19:06Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java", "diffHunk": "@@ -141,6 +143,16 @@\n             responseType = ResponseType.OTHER_OBJECTS;\n         }\n \n+        ServiceName serviceName = method.getAnnotation(ServiceName.class);\n+        if (serviceName == null) {\n+            serviceName = object.getClass().getAnnotation(ServiceName.class);\n+        }", "originalCommit": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5NDY2MQ==", "url": "https://github.com/line/armeria/pull/2820#discussion_r443094661", "bodyText": "Thanks for the nice tip. \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-06-20T02:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2MzU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2MzY1OQ==", "url": "https://github.com/line/armeria/pull/2820#discussion_r443063659", "bodyText": "How about breaking the line before .serviceName()?", "author": "trustin", "createdAt": "2020-06-19T22:19:41Z", "path": "core/src/main/java/com/linecorp/armeria/server/annotation/ServiceName.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for service name that is often used as a meter tag or distributed trace's span name.\n+ * You can override the default service name by annotating a class or method with {@link ServiceName}.\n+ * For example:<pre>{@code\n+ * > public class MyService {\n+ * >     @Get(\"/\")\n+ * >     public String get(ServiceRequestContext ctx) {\n+ * >         // The default service name\n+ * >         assert ctx.log().ensureAvailable(RequestLogProperty.NAME).serviceName()\n+ * >                   .equals(MyService.class.getName());", "originalCommit": "28b7834ff9422f10fc9eef04abce5cbf740f4cfa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "357f125db2a2ab1e8062aa89f6fd2ae738abab37", "url": "https://github.com/line/armeria/commit/357f125db2a2ab1e8062aa89f6fd2ae738abab37", "message": "Address comments by @trustin / Use AnnotationUtil and update doc", "committedDate": "2020-06-20T03:13:24Z", "type": "commit"}, {"oid": "d119fafbcad412da3f44c4d4a0e71f5bf3cdd793", "url": "https://github.com/line/armeria/commit/d119fafbcad412da3f44c4d4a0e71f5bf3cdd793", "message": "Update Javadoc", "committedDate": "2020-06-20T03:24:44Z", "type": "commit"}]}