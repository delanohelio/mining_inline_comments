{"pr_number": 3135, "pr_title": "Expanding CircuitBreakerMapping to include request path as a key", "pr_createdAt": "2020-10-27T01:25:39Z", "pr_url": "https://github.com/line/armeria/pull/3135", "timeline": [{"oid": "963806e07c7b834dd62fb41c14a9b256bf2e3eae", "url": "https://github.com/line/armeria/commit/963806e07c7b834dd62fb41c14a9b256bf2e3eae", "message": "Expanding CircuitBreakerMapping to include request path as a key", "committedDate": "2020-10-27T01:22:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM2ODkxMQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r512368911", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            key = host + '#' + method + \"#\" + path;\n          \n          \n            \n                            key = host + '#' + method + '#' + path;", "author": "ikhoon", "createdAt": "2020-10-27T01:51:20Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -57,20 +57,47 @@ public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exceptio\n         final String key;\n         final String host;\n         final String method;\n+        final String path;\n         switch (mappingKey) {\n             case HOST:\n                 key = host = host(ctx);\n                 method = null;\n+                path = null;\n                 break;\n             case METHOD:\n                 host = null;\n                 key = method = method(ctx);\n+                path = null;\n+                break;\n+            case PATH:\n+                host = null;\n+                method = null;\n+                key = path = path(ctx);\n                 break;\n             case HOST_AND_METHOD:\n                 host = host(ctx);\n                 method = method(ctx);\n+                path = null;\n                 key = host + '#' + method;\n                 break;\n+            case HOST_AND_PATH:\n+                host = host(ctx);\n+                method = null;\n+                path = path(ctx);\n+                key = host + '#' + path;\n+                break;\n+            case METHOD_AND_PATH:\n+                host = null;\n+                method = method(ctx);\n+                path = path(ctx);\n+                key = method + '#' + path;\n+                break;\n+            case HOST_AND_METHOD_AND_PATH:\n+                host = host(ctx);\n+                method = method(ctx);\n+                path = path(ctx);\n+                key = host + '#' + method + \"#\" + path;", "originalCommit": "963806e07c7b834dd62fb41c14a9b256bf2e3eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg2NjI5Ng==", "url": "https://github.com/line/armeria/pull/3135#discussion_r512866296", "bodyText": "This part has now changed. I made sure to use the char.", "author": "haithamgabr", "createdAt": "2020-10-27T16:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM2ODkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTc4Mw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r512385783", "bodyText": "The factory methods in this class are overly crowded.\nI think we can introduce a builder class that builds a CircuitBreakerMapping fluently.\nFor example:\nCircuitBreakerMapping mapping = \n    CircuitBreakerMapping.builder()\n                         .perMethod()\n                         .perPath()\n                         ...\n                        .build()\n\nCircuitBreakerClient.newDecorator(mapping, rule);", "author": "ikhoon", "createdAt": "2020-10-27T02:52:23Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -183,6 +212,95 @@\n         return newDecorator(CircuitBreakerMapping.perHostAndMethod(factory), ruleWithContent);\n     }\n \n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host and request path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                               CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host and request path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                               CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndPath(factory), ruleWithContent);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per request method path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerMethodAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                                 CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perMethodAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per request method and path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerMethodAndPathDecorator(BiFunction<String, String, ? extends CircuitBreaker> factory,\n+                                 CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perMethodAndPath(factory), ruleWithContent);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host, request method and path with\n+     * the specified {@link CircuitBreakerRule}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndMethodAndPathDecorator(CircuitBreakerFactory factory, CircuitBreakerRule rule) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndMethodAndPath(factory), rule);\n+    }\n+\n+    /**\n+     * Creates a new decorator that binds one {@link CircuitBreaker} per host, request method and path with\n+     * the specified {@link CircuitBreakerRuleWithContent}.\n+     *\n+     * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for\n+     * unrelated services.\n+     *\n+     * @param factory a function that takes a host+method+path and creates a new {@link CircuitBreaker}.\n+     */\n+    public static Function<? super HttpClient, CircuitBreakerClient>\n+    newPerHostAndMethodAndPathDecorator(CircuitBreakerFactory factory,\n+                                        CircuitBreakerRuleWithContent<HttpResponse> ruleWithContent) {\n+        return newDecorator(CircuitBreakerMapping.perHostAndMethodAndPath(factory), ruleWithContent);\n+    }", "originalCommit": "963806e07c7b834dd62fb41c14a9b256bf2e3eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg2NjU4MA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r512866580", "bodyText": "Done.", "author": "haithamgabr", "createdAt": "2020-10-27T17:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTc4Mw=="}], "type": "inlineReview"}, {"oid": "d83df172c313134a06aa96c2d5f56d07e8eca357", "url": "https://github.com/line/armeria/commit/d83df172c313134a06aa96c2d5f56d07e8eca357", "message": "Replacing many decorator constructors with builder pattern", "committedDate": "2020-10-27T16:17:50Z", "type": "commit"}, {"oid": "080a3a1799e21948b9d43f0991138cdb639acd19", "url": "https://github.com/line/armeria/commit/080a3a1799e21948b9d43f0991138cdb639acd19", "message": "Deprecating newPerHostAndMethodDecorator in facor of the new builder pattern", "committedDate": "2020-10-27T16:54:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzODAwMA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r513138000", "bodyText": "Could you move this builder class to top-level for keeping consistency with other builders?\nAdd static builder() method for creating this builder?", "author": "ikhoon", "createdAt": "2020-10-28T02:12:21Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "diffHunk": "@@ -31,6 +30,62 @@\n @FunctionalInterface\n public interface CircuitBreakerMapping {\n \n+    /**\n+     * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+     */\n+    class Builder {", "originalCommit": "080a3a1799e21948b9d43f0991138cdb639acd19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NjkyNA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r513586924", "bodyText": "Done", "author": "haithamgabr", "createdAt": "2020-10-28T16:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzODAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTIxOQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r513139219", "bodyText": "How about raising an IllegalStateException if all per{Host,Method,Path} are false?", "author": "ikhoon", "createdAt": "2020-10-28T02:17:15Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "diffHunk": "@@ -31,6 +30,62 @@\n @FunctionalInterface\n public interface CircuitBreakerMapping {\n \n+    /**\n+     * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+     */\n+    class Builder {\n+        private boolean perHost;\n+        private boolean perMethod;\n+        private boolean perPath;\n+\n+        /**\n+         * Adds host dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perHost() {\n+            perHost = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds method dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perMethod() {\n+            perMethod = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds path dimension to the mapping Key.\n+         * @return this Builder.\n+         */\n+        public Builder perPath() {\n+            perPath = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+         * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+         */\n+        public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+            return new KeyedCircuitBreakerMapping(this, factory);", "originalCommit": "080a3a1799e21948b9d43f0991138cdb639acd19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NjQxOA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r513586418", "bodyText": "Done", "author": "haithamgabr", "createdAt": "2020-10-28T16:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MjU3Mw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r513142573", "bodyText": "I think we can drop # if one of isPer* flags is false.\nGuava Joiner could be useful for this case.\nstatic Joiner keyJoiner = Joiner.on('#').skipNulls();\nString key = keyJoiner.join(host, method, path);", "author": "ikhoon", "createdAt": "2020-10-28T02:29:48Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -20,66 +20,59 @@\n \n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            new CircuitBreakerMapping.Builder().perHost(),\n+            (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMapping.Builder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(CircuitBreakerMapping.Builder mappingBuilder, CircuitBreakerFactory factory) {\n+        requireNonNull(mappingBuilder, \"mappingBuilder\");\n+        isPerHost = mappingBuilder.isPerHost();\n+        isPerMethod = mappingBuilder.isPerMethod();\n+        isPerPath = mappingBuilder.isPerPath();\n         this.factory = requireNonNull(factory, \"factory\");\n     }\n \n     @Override\n     public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exception {\n-        final String key;\n-        final String host;\n-        final String method;\n-        switch (mappingKey) {\n-            case HOST:\n-                key = host = host(ctx);\n-                method = null;\n-                break;\n-            case METHOD:\n-                host = null;\n-                key = method = method(ctx);\n-                break;\n-            case HOST_AND_METHOD:\n-                host = host(ctx);\n-                method = method(ctx);\n-                key = host + '#' + method;\n-                break;\n-            default:\n-                // should never reach here.\n-                throw new Error();\n+        if (!isPerHost && !isPerMethod && !isPerPath) {\n+            // should never reach here.\n+            throw new Error();\n         }\n+        final String host = isPerHost ? host(ctx) : null;\n+        final String method = isPerMethod ? method(ctx) : null;\n+        final String path = isPerPath ? path(ctx) : null;\n+        final String key =\n+                (isPerHost ? host : \"\") + '#' + (isPerMethod ? method : \"\") + '#' + (isPerPath ? path : \"\");", "originalCommit": "080a3a1799e21948b9d43f0991138cdb639acd19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NjMxNg==", "url": "https://github.com/line/armeria/pull/3135#discussion_r513586316", "bodyText": "Done through java streams.", "author": "haithamgabr", "createdAt": "2020-10-28T16:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MjU3Mw=="}], "type": "inlineReview"}, {"oid": "8a1f667951bc8151921169feba8269038cdb6484", "url": "https://github.com/line/armeria/commit/8a1f667951bc8151921169feba8269038cdb6484", "message": "Extracting CircuitBreakerMapping.Builder into an outer class", "committedDate": "2020-10-28T16:26:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMDE2Ng==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515010166", "bodyText": "Need to hide the public constructor.", "author": "trustin", "createdAt": "2020-10-30T10:46:31Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNDE1Nw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515214157", "bodyText": "Done", "author": "haithamgabr", "createdAt": "2020-10-30T16:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMDE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyOTc0NA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515029744", "bodyText": "Thanks! \ud83d\ude47", "author": "trustin", "createdAt": "2020-10-30T11:24:50Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java", "diffHunk": "@@ -161,7 +190,10 @@\n      * unrelated services.\n      *\n      * @param factory a function that takes a host+method and creates a new {@link CircuitBreaker}.\n+     *\n+     * @deprecated Use newDecorator(), building a CircuitBreakerMapping using CircuitBreakerMapping.Builder().\n      */\n+    @Deprecated", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMzQyMw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515213423", "bodyText": "My pleasure :)", "author": "haithamgabr", "createdAt": "2020-10-30T16:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyOTc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDQyMA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515030420", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Given a combination of host, method and path, creates a CircuitBreaker.\n          \n          \n            \n                 * Given a combination of host, method and path, creates a {@link CircuitBreaker}.", "author": "trustin", "createdAt": "2020-10-30T11:26:03Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a CircuitBreaker.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {\n+    /**\n+     * Given a combination of host, method and path, creates a CircuitBreaker.", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDUxNQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515030515", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the CircuitBreaker instance corresponding to this combination.\n          \n          \n            \n                 * @return the {@link CircuitBreaker} instance corresponding to this combination.", "author": "trustin", "createdAt": "2020-10-30T11:26:13Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a CircuitBreaker.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {\n+    /**\n+     * Given a combination of host, method and path, creates a CircuitBreaker.\n+     * @param host the host of the context endpoint.\n+     * @param method the method of the context request.\n+     * @param path the path of the context request.\n+     * @return the CircuitBreaker instance corresponding to this combination.", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMDcwMA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515030700", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * to a CircuitBreaker.\n          \n          \n            \n             * to a {@link CircuitBreaker}.", "author": "trustin", "createdAt": "2020-10-30T11:26:35Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a CircuitBreaker.", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTEyOQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031129", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns a Builder that builds a CircuitBreakerMapping by setting host, method and/or path.\n          \n          \n            \n                 * Returns a builder that builds a {@link CircuitBreakerMapping} by setting host, method and/or path.", "author": "trustin", "createdAt": "2020-10-30T11:27:21Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java", "diffHunk": "@@ -22,30 +22,35 @@\n import java.util.function.Function;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n-import com.linecorp.armeria.client.circuitbreaker.KeyedCircuitBreakerMapping.MappingKey;\n import com.linecorp.armeria.common.Request;\n \n /**\n  * Returns a {@link CircuitBreaker} instance from remote invocation parameters.\n  */\n @FunctionalInterface\n public interface CircuitBreakerMapping {\n-\n     /**\n      * Returns the default {@link CircuitBreakerMapping}.\n      */\n     static CircuitBreakerMapping ofDefault() {\n         return KeyedCircuitBreakerMapping.hostMapping;\n     }\n \n+    /**\n+     * Returns a Builder that builds a CircuitBreakerMapping by setting host, method and/or path.", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTI5MQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031291", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n          \n          \n            \n             * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.", "author": "trustin", "createdAt": "2020-10-30T11:27:40Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTM4NQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return this Builder.\n          \n          \n            \n                 * @return this builder.", "author": "trustin", "createdAt": "2020-10-30T11:27:51Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this Builder.", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTQ0OQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031449", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return this Builder.\n          \n          \n            \n                 * @return this builder.", "author": "trustin", "createdAt": "2020-10-30T11:28:00Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this Builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this Builder.", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTQ5Mw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515031493", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return this Builder.\n          \n          \n            \n                 * @return this builder.", "author": "trustin", "createdAt": "2020-10-30T11:28:05Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a CircuitBreakerMapping based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this Builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this Builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this Builder.", "originalCommit": "8a1f667951bc8151921169feba8269038cdb6484", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b466bbd35b5fdfe4ac033d2478bfb3c4194cbec8", "url": "https://github.com/line/armeria/commit/b466bbd35b5fdfe4ac033d2478bfb3c4194cbec8", "message": "Update core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java\n\nCo-authored-by: Trustin Lee <t@motd.kr>", "committedDate": "2020-10-30T16:11:02Z", "type": "commit"}, {"oid": "8d91928636fd24bf9aaf2c2ff11ff91d26d84c77", "url": "https://github.com/line/armeria/commit/8d91928636fd24bf9aaf2c2ff11ff91d26d84c77", "message": "Update core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java\n\nCo-authored-by: Trustin Lee <t@motd.kr>", "committedDate": "2020-10-30T16:11:22Z", "type": "commit"}, {"oid": "0494e6e56484cc78a533b0ae9c8e4e65fbc50999", "url": "https://github.com/line/armeria/commit/0494e6e56484cc78a533b0ae9c8e4e65fbc50999", "message": "Apply suggestions from code review\n\nCo-authored-by: Trustin Lee <t@motd.kr>", "committedDate": "2020-10-30T16:12:23Z", "type": "commit"}, {"oid": "aabd94026f35ab0f43367673e2b2b4e28a9563cf", "url": "https://github.com/line/armeria/commit/aabd94026f35ab0f43367673e2b2b4e28a9563cf", "message": "Hiding default constructor of CircuitBreakerMappingBuilder", "committedDate": "2020-10-30T16:13:54Z", "type": "commit"}, {"oid": "988478ad563b081b191c9a0fa284d6b23e54a1c6", "url": "https://github.com/line/armeria/commit/988478ad563b081b191c9a0fa284d6b23e54a1c6", "message": "Hiding default constructor of CircuitBreakerMappingBuilder", "committedDate": "2020-10-30T16:15:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzExNQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515583115", "bodyText": "Could be private and moved right after the member fields?", "author": "trustin", "createdAt": "2020-11-01T06:42:35Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(this, factory);\n+    }\n+\n+    boolean isPerHost() {\n+        return perHost;\n+    }\n+\n+    boolean isPerMethod() {\n+        return perMethod;\n+    }\n+\n+    boolean isPerPath() {\n+        return perPath;\n+    }\n+\n+    CircuitBreakerMappingBuilder() {}", "originalCommit": "988478ad563b081b191c9a0fa284d6b23e54a1c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAwMjAwNw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r516002007", "bodyText": "Moved it to the top, but has to stay package-private since it's called from CircuitBreakerMapping.builder()", "author": "haithamgabr", "createdAt": "2020-11-02T14:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MzExNQ=="}], "type": "inlineReview"}, {"oid": "433ea841935ce25fe2c32b2b93ea6d9e473aff38", "url": "https://github.com/line/armeria/commit/433ea841935ce25fe2c32b2b93ea6d9e473aff38", "message": "Moving CircuitBreakerMappingBuilder constructor to top of class", "committedDate": "2020-11-02T14:17:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0ODY4Nw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r515848687", "bodyText": "Let's just remove this line. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-11-02T09:43:34Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.", "originalCommit": "988478ad563b081b191c9a0fa284d6b23e54a1c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjQzOA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517092438", "bodyText": "Done", "author": "haithamgabr", "createdAt": "2020-11-04T04:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0ODY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4OTk3NA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r516389974", "bodyText": "How about making all variables not nullable because it's not expensive to get these parameters?", "author": "minwoox", "createdAt": "2020-11-03T01:56:14Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a {@link CircuitBreaker}.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {\n+    /**\n+     * Given a combination of host, method and path, creates a {@link CircuitBreaker}.\n+     * @param host the host of the context endpoint.\n+     * @param method the method of the context request.\n+     * @param path the path of the context request.\n+     * @return the {@link CircuitBreaker} instance corresponding to this combination.\n+     */\n+    CircuitBreaker apply(@Nullable String host, @Nullable String method, @Nullable String path);", "originalCommit": "433ea841935ce25fe2c32b2b93ea6d9e473aff38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjEyNw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r516412127", "bodyText": "I am not sure I understand what you're suggesting. They are nullable because they can be absent. e.g. map by host only, or host and method, or host and path, or all three.. etc.", "author": "haithamgabr", "createdAt": "2020-11-03T03:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4OTk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxODMxMg==", "url": "https://github.com/line/armeria/pull/3135#discussion_r516418312", "bodyText": "Ah, I missed that we create the key as a combination of host, method and path.\nSo I think this is good as it is. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-11-03T04:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4OTk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MDcxNA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r516390714", "bodyText": "How about just accepting CircuitBreakerMapping?\nWe don't actually need to know whether perHost, perMethod and perPath.", "author": "minwoox", "createdAt": "2020-11-03T01:59:25Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -17,69 +17,66 @@\n package com.linecorp.armeria.client.circuitbreaker;\n \n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n \n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n+import java.util.stream.Stream;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            CircuitBreakerMapping.builder().perHost(),\n+            (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMappingBuilder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(CircuitBreakerMappingBuilder mappingBuilder, CircuitBreakerFactory factory) {", "originalCommit": "433ea841935ce25fe2c32b2b93ea6d9e473aff38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NjMzMw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517086333", "bodyText": "This is actually the concrete implementation of CircuitBreakerMapping, so it cannot have itself as a member.", "author": "haithamgabr", "createdAt": "2020-11-04T04:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyOTQ2Mw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517129463", "bodyText": "Yeah, I forgot to delete this comment after I left #3135 (comment)", "author": "minwoox", "createdAt": "2020-11-04T06:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MDcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MTEzNw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r516391137", "bodyText": "How about just:\nReturns a newly-created {@link CircuitBreakerMapping} with the specified {@link CircuitBreakerFactory} and properties set so far.", "author": "minwoox", "createdAt": "2020-11-03T02:01:20Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.", "originalCommit": "433ea841935ce25fe2c32b2b93ea6d9e473aff38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjQwMQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517092401", "bodyText": "Done.", "author": "haithamgabr", "createdAt": "2020-11-04T04:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5MTEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxODk0Ng==", "url": "https://github.com/line/armeria/pull/3135#discussion_r516418946", "bodyText": "How about just passing perHost, perMethod and perPath?\nThe builder is still mutable after CircuitBreakerMapping is created:\nCircuitBreakerMappingBuilder builder = ...\nbuilder.build(factory);\n// client makes a call\nbuilder.perPath() // This change the behavior.", "author": "minwoox", "createdAt": "2020-11-03T04:09:58Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     * @return this builder.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Builds the {@link CircuitBreakerMapping} using a three-dimensional factory.\n+     * @return a {@link CircuitBreakerMapping} based on the added dimensions.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(this, factory);", "originalCommit": "433ea841935ce25fe2c32b2b93ea6d9e473aff38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MjM1Mg==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517092352", "bodyText": "Done.", "author": "haithamgabr", "createdAt": "2020-11-04T04:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxODk0Ng=="}], "type": "inlineReview"}, {"oid": "c35f87c86902cfcac3a10e87931920395cc0eca4", "url": "https://github.com/line/armeria/commit/c35f87c86902cfcac3a10e87931920395cc0eca4", "message": "Minor refactorings, addressing comments", "committedDate": "2020-11-04T04:32:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyOTg0Nw==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517129847", "bodyText": "We can check this only once in the constructor.\nBut we already check this in build() method so I think we can completely remove this. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-11-04T06:57:13Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java", "diffHunk": "@@ -17,69 +17,65 @@\n package com.linecorp.armeria.client.circuitbreaker;\n \n import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.joining;\n \n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.function.BiFunction;\n+import java.util.stream.Stream;\n \n import com.linecorp.armeria.client.ClientRequestContext;\n import com.linecorp.armeria.client.Endpoint;\n+import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.Request;\n import com.linecorp.armeria.common.RpcRequest;\n \n /**\n- * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to its {@link MappingKey}.\n- * If there is no circuit breaker bound to the key, a new one is created by using the given circuit breaker\n- * factory.\n+ * A {@link CircuitBreakerMapping} that binds a {@link CircuitBreaker} to a combination of host, method and/or\n+ * path. If there is no circuit breaker bound to the key, a new one is created by using the given circuit\n+ * breaker factory.\n  */\n final class KeyedCircuitBreakerMapping implements CircuitBreakerMapping {\n \n-    static final CircuitBreakerMapping hostMapping =\n-            new KeyedCircuitBreakerMapping(MappingKey.HOST, (host, method) -> CircuitBreaker.of(host));\n+    static final CircuitBreakerMapping hostMapping = new KeyedCircuitBreakerMapping(\n+            true, false, false, (host, method, path) -> CircuitBreaker.of(host));\n \n     private final ConcurrentMap<String, CircuitBreaker> mapping = new ConcurrentHashMap<>();\n \n-    private final MappingKey mappingKey;\n-    private final BiFunction<String, String, ? extends CircuitBreaker> factory;\n+    private final boolean isPerHost;\n+    private final boolean isPerMethod;\n+    private final boolean isPerPath;\n+    private final CircuitBreakerFactory factory;\n \n     /**\n-     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link MappingKey} and\n+     * Creates a new {@link KeyedCircuitBreakerMapping} with the given {@link CircuitBreakerMappingBuilder} and\n      * {@link CircuitBreaker} factory.\n      */\n-    KeyedCircuitBreakerMapping(MappingKey mappingKey,\n-                               BiFunction<String, String, ? extends CircuitBreaker> factory) {\n-        this.mappingKey = requireNonNull(mappingKey, \"mappingKey\");\n+    KeyedCircuitBreakerMapping(\n+            boolean perHost, boolean perMethod, boolean perPath, CircuitBreakerFactory factory) {\n+        isPerHost = perHost;\n+        isPerMethod = perMethod;\n+        isPerPath = perPath;\n         this.factory = requireNonNull(factory, \"factory\");\n     }\n \n     @Override\n     public CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exception {\n-        final String key;\n-        final String host;\n-        final String method;\n-        switch (mappingKey) {\n-            case HOST:\n-                key = host = host(ctx);\n-                method = null;\n-                break;\n-            case METHOD:\n-                host = null;\n-                key = method = method(ctx);\n-                break;\n-            case HOST_AND_METHOD:\n-                host = host(ctx);\n-                method = method(ctx);\n-                key = host + '#' + method;\n-                break;\n-            default:\n-                // should never reach here.\n-                throw new Error();\n+        if (!isPerHost && !isPerMethod && !isPerPath) {", "originalCommit": "c35f87c86902cfcac3a10e87931920395cc0eca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NjYyNg==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517596626", "bodyText": "Done.", "author": "haithamgabr", "createdAt": "2020-11-04T19:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyOTg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzE4MQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517293181", "bodyText": "Don't we need public?", "author": "ikhoon", "createdAt": "2020-11-04T11:58:49Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A functional interface that represents a mapper factory, mapping a combination of host, method and path\n+ * to a {@link CircuitBreaker}.\n+ */\n+@FunctionalInterface\n+interface CircuitBreakerFactory {", "originalCommit": "c35f87c86902cfcac3a10e87931920395cc0eca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NjU2OA==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517596568", "bodyText": "Yes thanks a lot for spotting this. Done.", "author": "haithamgabr", "createdAt": "2020-11-04T19:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5MzE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTI0MQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517295241", "bodyText": "Could remove?", "author": "ikhoon", "createdAt": "2020-11-04T12:02:44Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMappingBuilder.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.circuitbreaker;\n+\n+/**\n+ * Builder class for building a {@link CircuitBreakerMapping} based on a combination of host, method and path.\n+ */\n+public final class CircuitBreakerMappingBuilder {\n+    private boolean perHost;\n+    private boolean perMethod;\n+    private boolean perPath;\n+\n+    CircuitBreakerMappingBuilder() {}\n+\n+    /**\n+     * Adds host dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perHost() {\n+        perHost = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds method dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perMethod() {\n+        perMethod = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Adds path dimension to the mapping Key.\n+     */\n+    public CircuitBreakerMappingBuilder perPath() {\n+        perPath = true;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link CircuitBreakerMapping} with the specified {@link CircuitBreakerFactory}\n+     * and properties set so far.\n+     */\n+    public CircuitBreakerMapping build(CircuitBreakerFactory factory) {\n+        if (!perHost && !perMethod && !perPath) {\n+            throw new IllegalStateException(\"A CircuitBreakerMapping must be per host, method and/or path\");\n+        }\n+        return new KeyedCircuitBreakerMapping(perHost, perMethod, perPath, factory);\n+    }\n+\n+    boolean isPerHost() {\n+        return perHost;\n+    }\n+\n+    boolean isPerMethod() {\n+        return perMethod;\n+    }\n+\n+    boolean isPerPath() {\n+        return perPath;\n+    }", "originalCommit": "c35f87c86902cfcac3a10e87931920395cc0eca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5NjQxOQ==", "url": "https://github.com/line/armeria/pull/3135#discussion_r517596419", "bodyText": "Done. Thanks.", "author": "haithamgabr", "createdAt": "2020-11-04T19:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTI0MQ=="}], "type": "inlineReview"}, {"oid": "556ebac80c38646a920179e579a864440a15e867", "url": "https://github.com/line/armeria/commit/556ebac80c38646a920179e579a864440a15e867", "message": "Minor refactoring, addressing comments", "committedDate": "2020-11-04T19:57:39Z", "type": "commit"}]}