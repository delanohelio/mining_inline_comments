{"pr_number": 2757, "pr_title": "Make the requests go to the URI that is specified when `WebClient` is\u2026", "pr_createdAt": "2020-06-02T01:44:16Z", "pr_url": "https://github.com/line/armeria/pull/2757", "timeline": [{"oid": "fd32cf0a52e306fba260bd3536dbbe1c200df247", "url": "https://github.com/line/armeria/commit/fd32cf0a52e306fba260bd3536dbbe1c200df247", "message": "Make the requests go to the URI that is specified when `WebClient` is created.\nMotivation:\nA user might implement a simple proxy server:\n```java\nWebClient webClient = WebClient.of(\"http://otherbackend.com\").build();\nServerBuilder proxyServerBuilder = ...\nproxyServerBuilder.serviceUnder(\"/\", (ctx, originalReq) -> webClient.execute(originalReq));\n```\nHowever, if the `originalReq` contains the authority header which points `proxyServerBuilder`,\nthen the request does not go to the `otherbackend.com` but to the proxy server again which incurs an infinite loop.\n\nModifications:\n- Make the requests always go to the backend If the `WebClient` is created with a backend URI.\n  - `IllegalArgumentException` is raised if a request whose path is an absolute path is sent with a `WebClient` which is created a base URI\n\nResult:\n- You no longer see infinite requests loop when building a proxy server.", "committedDate": "2020-06-01T14:08:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4MzczMw==", "url": "https://github.com/line/armeria/pull/2757#discussion_r433583733", "bodyText": "nit: How about abortRequest?", "author": "ikhoon", "createdAt": "2020-06-02T02:14:17Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -104,4 +94,9 @@ private HttpResponse execute(EndpointGroup endpointGroup, HttpRequest req) {\n     public HttpResponse execute(AggregatedHttpRequest aggregatedReq) {\n         return execute(aggregatedReq.toHttpRequest());\n     }\n+\n+    private static HttpResponse failureResponse(HttpRequest req, IllegalArgumentException cause) {", "originalCommit": "fd32cf0a52e306fba260bd3536dbbe1c200df247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3OTQ1NQ==", "url": "https://github.com/line/armeria/pull/2757#discussion_r433679455", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-02T07:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4MzczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwOTY0Ng==", "url": "https://github.com/line/armeria/pull/2757#discussion_r433609646", "bodyText": "How about \"A URI with scheme and authority must be specified: \"?", "author": "trustin", "createdAt": "2020-06-02T04:12:00Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -44,36 +39,32 @@\n \n     @Override\n     public HttpResponse execute(HttpRequest req) {\n-        URI uri;\n-\n-        if (isAbsoluteUri(req.path())) {\n-            try {\n-                uri = URI.create(req.path());\n-            } catch (Exception ex) {\n-                logger.warn(\"Failed to create URI: {}\", req.path(), ex);\n-                uri = null;\n-            }\n-        } else {\n-            if (req.scheme() != null && req.authority() != null) {\n+        if (Clients.isUndefinedUri(uri())) {\n+            final URI uri;\n+            if (isAbsoluteUri(req.path())) {\n+                try {\n+                    uri = URI.create(req.path());\n+                } catch (Exception ex) {\n+                    return failureResponse(req, new IllegalArgumentException(\n+                            \"Failed to create a URI: \" + req.path(), ex));\n+                }\n+            } else if (req.scheme() != null && req.authority() != null) {\n                 uri = req.uri();\n             } else {\n-                uri = null;\n+                return failureResponse(req, new IllegalArgumentException(\"no authority: \" + req.path()));", "originalCommit": "fd32cf0a52e306fba260bd3536dbbe1c200df247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3OTQ5Mw==", "url": "https://github.com/line/armeria/pull/2757#discussion_r433679493", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-02T07:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwOTY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwOTk3Mw==", "url": "https://github.com/line/armeria/pull/2757#discussion_r433609973", "bodyText": "Cannot send a request with a \":path\" header that contains a URI with authority, because the client was created with a base URI ?", "author": "trustin", "createdAt": "2020-06-02T04:13:37Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -44,36 +39,32 @@\n \n     @Override\n     public HttpResponse execute(HttpRequest req) {\n-        URI uri;\n-\n-        if (isAbsoluteUri(req.path())) {\n-            try {\n-                uri = URI.create(req.path());\n-            } catch (Exception ex) {\n-                logger.warn(\"Failed to create URI: {}\", req.path(), ex);\n-                uri = null;\n-            }\n-        } else {\n-            if (req.scheme() != null && req.authority() != null) {\n+        if (Clients.isUndefinedUri(uri())) {\n+            final URI uri;\n+            if (isAbsoluteUri(req.path())) {\n+                try {\n+                    uri = URI.create(req.path());\n+                } catch (Exception ex) {\n+                    return failureResponse(req, new IllegalArgumentException(\n+                            \"Failed to create a URI: \" + req.path(), ex));\n+                }\n+            } else if (req.scheme() != null && req.authority() != null) {\n                 uri = req.uri();\n             } else {\n-                uri = null;\n+                return failureResponse(req, new IllegalArgumentException(\"no authority: \" + req.path()));\n             }\n-        }\n-\n-        if (uri != null) {\n             final Endpoint endpoint = Endpoint.parse(uri.getAuthority());\n             final String query = uri.getRawQuery();\n             final String path = uri.getRawPath();\n             final HttpRequest newReq = req.withHeaders(req.headers().toBuilder()\n-                    .path(query == null ? path : path + '?' + query));\n+                                                          .path(query == null ? path : path + '?' + query));\n             return execute(endpoint, newReq);\n         }\n \n-        if (Clients.isUndefinedUri(uri())) {\n-            final IllegalArgumentException cause = new IllegalArgumentException(\"no authority: \" + req.path());\n-            req.abort(cause);\n-            return HttpResponse.ofFailure(cause);\n+        if (isAbsoluteUri(req.path())) {\n+            return failureResponse(req, new IllegalArgumentException(\n+                    \"Cannot send a request with an absolute path when the client is created with a base URI. \" +", "originalCommit": "fd32cf0a52e306fba260bd3536dbbe1c200df247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY3OTUyNQ==", "url": "https://github.com/line/armeria/pull/2757#discussion_r433679525", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-02T07:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwOTk3Mw=="}], "type": "inlineReview"}, {"oid": "8bedaa5daa8238dcd4e4a4f2788fadd94145d320", "url": "https://github.com/line/armeria/commit/8bedaa5daa8238dcd4e4a4f2788fadd94145d320", "message": "Address comments by @trustin and @ikhoon", "committedDate": "2020-06-02T07:38:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4NTg4Ng==", "url": "https://github.com/line/armeria/pull/2757#discussion_r433685886", "bodyText": "Realized that a user can specify scheme and authority in headers. How about this:\n\"Scheme and authority must be specified in \\\":path\\\" or in \\\":scheme\\\" and \\\":authority\\\". :path=\" + \nreq.path() + \", :scheme=\" + req.scheme() + \", :authority=\" + req.authority()", "author": "trustin", "createdAt": "2020-06-02T07:51:19Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java", "diffHunk": "@@ -44,36 +39,33 @@\n \n     @Override\n     public HttpResponse execute(HttpRequest req) {\n-        URI uri;\n-\n-        if (isAbsoluteUri(req.path())) {\n-            try {\n-                uri = URI.create(req.path());\n-            } catch (Exception ex) {\n-                logger.warn(\"Failed to create URI: {}\", req.path(), ex);\n-                uri = null;\n-            }\n-        } else {\n-            if (req.scheme() != null && req.authority() != null) {\n+        if (Clients.isUndefinedUri(uri())) {\n+            final URI uri;\n+            if (isAbsoluteUri(req.path())) {\n+                try {\n+                    uri = URI.create(req.path());\n+                } catch (Exception ex) {\n+                    return abortRequestAndReturnFailureResponse(req, new IllegalArgumentException(\n+                            \"Failed to create a URI: \" + req.path(), ex));\n+                }\n+            } else if (req.scheme() != null && req.authority() != null) {\n                 uri = req.uri();\n             } else {\n-                uri = null;\n+                return abortRequestAndReturnFailureResponse(req, new IllegalArgumentException(\n+                        \"A URI with scheme and authority must be specified. path: \" + req.path()));", "originalCommit": "8bedaa5daa8238dcd4e4a4f2788fadd94145d320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcxNzQ4MA==", "url": "https://github.com/line/armeria/pull/2757#discussion_r433717480", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-02T08:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4NTg4Ng=="}], "type": "inlineReview"}, {"oid": "e40f47ce3aa71b11534099030ef178d13ad7c2f6", "url": "https://github.com/line/armeria/commit/e40f47ce3aa71b11534099030ef178d13ad7c2f6", "message": "Address the comment by @trustin", "committedDate": "2020-06-02T08:44:36Z", "type": "commit"}]}