{"pr_number": 2646, "pr_title": "Add configurable realm cache timeout", "pr_createdAt": "2020-03-26T12:00:49Z", "pr_url": "https://github.com/wso2/carbon-kernel/pull/2646", "timeline": [{"oid": "32d40258d0458d4767b96e4e03ef9ded79b26128", "url": "https://github.com/wso2/carbon-kernel/commit/32d40258d0458d4767b96e4e03ef9ded79b26128", "message": "Added realm cache timeout", "committedDate": "2020-03-26T11:48:34Z", "type": "commit"}, {"oid": "cd3bbf853ded7b0128053c2757271da6b4f3a30e", "url": "https://github.com/wso2/carbon-kernel/commit/cd3bbf853ded7b0128053c2757271da6b4f3a30e", "message": "improved debug logs", "committedDate": "2020-03-26T11:48:42Z", "type": "commit"}, {"oid": "54d05c43ae9d8d1be795b0f5711574f7def5c0aa", "url": "https://github.com/wso2/carbon-kernel/commit/54d05c43ae9d8d1be795b0f5711574f7def5c0aa", "message": "Fix https://github.com/wso2/product-is/issues/7316, add realm cache timeout.", "committedDate": "2020-03-26T11:49:41Z", "type": "commit"}, {"oid": "bb5a44f90f96fed8f0211d233fb22bffcdb85e2b", "url": "https://github.com/wso2/carbon-kernel/commit/bb5a44f90f96fed8f0211d233fb22bffcdb85e2b", "message": "refactored", "committedDate": "2020-03-27T07:49:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0ODE4Mw==", "url": "https://github.com/wso2/carbon-kernel/pull/2646#discussion_r399948183", "bodyText": "Missing fullstop", "author": "pamodaaw", "createdAt": "2020-03-30T06:14:08Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/RealmCache.java", "diffHunk": "@@ -50,17 +53,27 @@ public synchronized static RealmCache getInstance() {\n             PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n             carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n             carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n-            Cache<RealmCacheKey, RealmCacheEntry> cache;\n+            Cache<RealmCacheKey, RealmCacheEntry> realmCache = null;\n             CacheManager cacheManager = Caching.getCacheManagerFactory().getCacheManager(CUSTOM_TENANT_CACHE_MANAGER);\n-            if (cacheManager != null) {\n-                cache = cacheManager.getCache(CUSTOM_TENANT_CACHE);\n-            } else {\n-                cache = Caching.getCacheManager().getCache(CUSTOM_TENANT_CACHE);\n+\n+            for (Cache cache : cacheManager.getCaches()) {\n+                if (StringUtils.equals(cache.getName(), CUSTOM_TENANT_CACHE) ||\n+                        StringUtils.equals(cache.getName(), CUSTOM_TENANT_CACHE)) {\n+                    realmCache = cache;\n+                }\n             }\n+            if (realmCache == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Realm cache is null\");", "originalCommit": "bb5a44f90f96fed8f0211d233fb22bffcdb85e2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0OTIxMQ==", "url": "https://github.com/wso2/carbon-kernel/pull/2646#discussion_r399949211", "bodyText": "missing fullstop", "author": "pamodaaw", "createdAt": "2020-03-30T06:17:09Z", "path": "core/javax.cache/src/main/java/org/wso2/carbon/caching/impl/Util.java", "diffHunk": "@@ -90,6 +91,22 @@ public static long getDefaultCacheTimeout() {\n         return CachingConstants.DEFAULT_CACHE_EXPIRY_MINS;\n     }\n \n+    /**\n+     * Return the default realm cache timeout value (Mins) specified in Carbon.xml", "originalCommit": "bb5a44f90f96fed8f0211d233fb22bffcdb85e2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0OTM2Mg==", "url": "https://github.com/wso2/carbon-kernel/pull/2646#discussion_r399949362", "bodyText": "please add a description of the return", "author": "pamodaaw", "createdAt": "2020-03-30T06:17:34Z", "path": "core/javax.cache/src/main/java/org/wso2/carbon/caching/impl/Util.java", "diffHunk": "@@ -90,6 +91,22 @@ public static long getDefaultCacheTimeout() {\n         return CachingConstants.DEFAULT_CACHE_EXPIRY_MINS;\n     }\n \n+    /**\n+     * Return the default realm cache timeout value (Mins) specified in Carbon.xml\n+     *\n+     * @return long\n+     */\n+    public static long getDefaultRealmCacheTimeout() {\n+", "originalCommit": "bb5a44f90f96fed8f0211d233fb22bffcdb85e2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1MTAxMA==", "url": "https://github.com/wso2/carbon-kernel/pull/2646#discussion_r399951010", "bodyText": "Add the fullstop to the debug log.", "author": "pamodaaw", "createdAt": "2020-03-30T06:22:14Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/RealmCache.java", "diffHunk": "@@ -50,17 +53,27 @@ public synchronized static RealmCache getInstance() {\n             PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n             carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n             carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n-            Cache<RealmCacheKey, RealmCacheEntry> cache;\n+            Cache<RealmCacheKey, RealmCacheEntry> realmCache = null;\n             CacheManager cacheManager = Caching.getCacheManagerFactory().getCacheManager(CUSTOM_TENANT_CACHE_MANAGER);\n-            if (cacheManager != null) {\n-                cache = cacheManager.getCache(CUSTOM_TENANT_CACHE);\n-            } else {\n-                cache = Caching.getCacheManager().getCache(CUSTOM_TENANT_CACHE);\n+\n+            for (Cache cache : cacheManager.getCaches()) {\n+                if (StringUtils.equals(cache.getName(), CUSTOM_TENANT_CACHE) ||\n+                        StringUtils.equals(cache.getName(), CUSTOM_TENANT_CACHE)) {\n+                    realmCache = cache;\n+                }\n             }\n+            if (realmCache == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Realm cache is null\");\n+                }\n+                cacheManager.createCacheBuilder(CUSTOM_TENANT_CACHE).setExpiry(CacheConfiguration.ExpiryType.MODIFIED,\n+                        new CacheConfiguration.Duration(TimeUnit.MINUTES, DefaultRealm.timeOut)).build();\n+            }\n+\n             if (log.isDebugEnabled()) {\n-                log.debug(\"created authorization cache : \" + cache);\n+                log.debug(\"Authorization cache is created, cache: \" + realmCache);", "originalCommit": "bb5a44f90f96fed8f0211d233fb22bffcdb85e2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "269faf4fe1fda4d413e31513b34dae15c9fcf452", "url": "https://github.com/wso2/carbon-kernel/commit/269faf4fe1fda4d413e31513b34dae15c9fcf452", "message": "fix review comments", "committedDate": "2020-03-30T06:24:59Z", "type": "commit"}, {"oid": "2a314eeb391497ae07dc3afa53955720a173efb8", "url": "https://github.com/wso2/carbon-kernel/commit/2a314eeb391497ae07dc3afa53955720a173efb8", "message": "fix review comments", "committedDate": "2020-03-30T07:01:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0OTI2MA==", "url": "https://github.com/wso2/carbon-kernel/pull/2646#discussion_r525749260", "bodyText": "Aren't both conditions in OR operation same here?", "author": "erandiganepola", "createdAt": "2020-11-18T03:45:56Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/RealmCache.java", "diffHunk": "@@ -50,17 +53,27 @@ public synchronized static RealmCache getInstance() {\n             PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n             carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n             carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n-            Cache<RealmCacheKey, RealmCacheEntry> cache;\n+            Cache<RealmCacheKey, RealmCacheEntry> realmCache = null;\n             CacheManager cacheManager = Caching.getCacheManagerFactory().getCacheManager(CUSTOM_TENANT_CACHE_MANAGER);\n-            if (cacheManager != null) {\n-                cache = cacheManager.getCache(CUSTOM_TENANT_CACHE);\n-            } else {\n-                cache = Caching.getCacheManager().getCache(CUSTOM_TENANT_CACHE);\n+\n+            for (Cache cache : cacheManager.getCaches()) {\n+                if (StringUtils.equals(cache.getName(), CUSTOM_TENANT_CACHE) ||", "originalCommit": "2a314eeb391497ae07dc3afa53955720a173efb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQzNDQ0Mw==", "url": "https://github.com/wso2/carbon-kernel/pull/2646#discussion_r532434443", "bodyText": "I assume we need to have a break statement here too.", "author": "manjulaRathnayaka", "createdAt": "2020-11-30T08:56:20Z", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/RealmCache.java", "diffHunk": "@@ -50,17 +53,27 @@ public synchronized static RealmCache getInstance() {\n             PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n             carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n             carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n-            Cache<RealmCacheKey, RealmCacheEntry> cache;\n+            Cache<RealmCacheKey, RealmCacheEntry> realmCache = null;\n             CacheManager cacheManager = Caching.getCacheManagerFactory().getCacheManager(CUSTOM_TENANT_CACHE_MANAGER);\n-            if (cacheManager != null) {\n-                cache = cacheManager.getCache(CUSTOM_TENANT_CACHE);\n-            } else {\n-                cache = Caching.getCacheManager().getCache(CUSTOM_TENANT_CACHE);\n+\n+            for (Cache cache : cacheManager.getCaches()) {\n+                if (StringUtils.equals(cache.getName(), CUSTOM_TENANT_CACHE) ||\n+                        StringUtils.equals(cache.getName(), CUSTOM_TENANT_CACHE)) {\n+                    realmCache = cache;", "originalCommit": "2a314eeb391497ae07dc3afa53955720a173efb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}