{"pr_number": 1545, "pr_title": "add baggage propagator to default propagators", "pr_createdAt": "2020-11-03T12:48:13Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545", "timeline": [{"oid": "1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b", "message": "add baggage propagators to default propagators\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-03T12:47:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMjUxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r516722517", "bodyText": "W3CBaggagePropagator shouldn't be registered as part of TraceMultiPropagator, i.e. it should be added directly through addTextMapPropagator() ;)", "author": "carlosalberto", "createdAt": "2020-11-03T14:48:03Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -49,7 +52,11 @@ public static void initializePropagators(List<String> propagators) {\n       //  https://github.com/open-telemetry/opentelemetry-java/issues/1742\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n-              .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(\n+                  TraceMultiPropagator.builder()\n+                      .addPropagator(HttpTraceContext.getInstance())\n+                      .addPropagator(W3CBaggagePropagator.getInstance())", "originalCommit": "1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1Mjk0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r516752948", "bodyText": "ups", "author": "malafeev", "createdAt": "2020-11-03T15:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMjUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1MzkwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r516753903", "bodyText": "fixed", "author": "malafeev", "createdAt": "2020-11-03T15:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMjUxNw=="}], "type": "inlineReview"}, {"oid": "dcd3f1efbde64b906977240fa73c8532159a9b75", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dcd3f1efbde64b906977240fa73c8532159a9b75", "message": "add W3CBaggagePropagator directly through addTextMapPropagator()\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-03T15:29:34Z", "type": "commit"}, {"oid": "7fd80137204475a76219c0e588d90609ee85a927", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7fd80137204475a76219c0e588d90609ee85a927", "message": "never add Baggage propagator to TraceMultiPropagator\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-05T16:01:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518219297", "bodyText": "@carlosalberto\nW3CBaggagePropagator should be first one or last one?\nit doesn't matter for inject but for extract we return context from last propagator.", "author": "malafeev", "createdAt": "2020-11-05T17:15:17Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "originalCommit": "7fd80137204475a76219c0e588d90609ee85a927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjU4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518262588", "bodyText": "It does't matter for the default configuration case \ud83d\ude04", "author": "carlosalberto", "createdAt": "2020-11-05T18:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NDUwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518374500", "bodyText": "@carlosalberto does it matter the order we add W3CBaggagePropagator for the non-default configuration case?", "author": "trask", "createdAt": "2020-11-05T21:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyNTc5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518425799", "bodyText": "@trask So Baggage propagators work just like the Trace ones (B3, TraceContext, etc), regarding the fact that, upon successful extraction, any previous value will be overridden (i.e. that last one wins).\nCurrently only the Jaeger propagator does Baggage extraction besides W3CBaggage, so the order may matter in such case, e.g. if the user explicitly specifies OTEL_PROPAGATORS=jaeger,baggage, then W3CBaggage will have higher priority, given the case that Baggage was propagated using both Jaeger and W3CBaggage formats.\nThen again, when users specify this, they should know what they are doing, IMHO \ud83d\ude09 (although maybe we should add a note in OTel Java regarding this, etc).", "author": "carlosalberto", "createdAt": "2020-11-05T23:10:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU1NDk1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518554955", "bodyText": "@carlosalberto do u know what we should do if the user specifies:\nOTEL_PROPAGATORS=jaeger,baggage,tracecontext\nShould we add both TraceMultiPropagator(jaeger,tracecontext) and W3BaggagePropagator? And if so, do u know whether we should add TraceMultiPropagator first or last?", "author": "trask", "createdAt": "2020-11-06T06:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMzQxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518723419", "bodyText": "After thinking a little bit more about this, I think we should leave JaegerPropagator out of the TraceMultiPropagator given that it not only extracts SpanContext. For example, TraceMultiPropagator with \"tracecontext,jaeger\" will stop if trace-context succeeded, without giving JaegerPropagator a chance to extract any existing Baggage ;)\nIt would mean, given your example, that you would end up with Jaeger + Baggage + TraceContext (no TraceMultiPropagator needed here).\nOther than that, the order doesn't matter much - although W3CBaggagePropagator should probably come after JaegerPropagator, as it can have more complex/complete values that Jaeger baggage lacks, e.g. metadata.\n(We could split JaegerPropagator into a trace AND a baggage propagators but that slightly seems like an overkill)", "author": "carlosalberto", "createdAt": "2020-11-06T12:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMzUzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518723530", "bodyText": "@malafeev ^ ;)", "author": "carlosalberto", "createdAt": "2020-11-06T12:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg2NDM5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r519864398", "bodyText": "so JaegerPropagator always should be added via addTextMapPropagator?\nAnd next example is valid?:\nDefaultContextPropagators.builder()\n    .addTextMapPropagator(JaegerPropagator.getInstance())\n    .addTextMapPropagator(W3CBaggagePropagator.getInstance()) \n    .addTextMapPropagator(TraceMultiPropagator.builder()\n        .addPropagator(HttpTraceContext.getInstance())\n        .addPropagator(AwsXRayPropagator.getInstance()).build())\n    ...\n\n?", "author": "malafeev", "createdAt": "2020-11-09T14:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NzM0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r519997341", "bodyText": "@malafeev  Yes ;) - and put a comment in the code on why we are doing it (i.e. Jaeger handles BOTH tracing and baggage, etc).", "author": "carlosalberto", "createdAt": "2020-11-09T17:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5NDAzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520394039", "bodyText": "done", "author": "malafeev", "createdAt": "2020-11-10T08:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0ODkyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520548927", "bodyText": "@malafeev I think both users and developers will have a hard time understanding how otel.propagators works now :) Please document the final result both in PropagatorsInitializer.java and in README. The latter, for example, currently does very poor job explaining the difference between trace context propagators and baggage ones.", "author": "iNikem", "createdAt": "2020-11-10T13:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MDUzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520580536", "bodyText": "@iNikem I added javadoc, is it clear enough?", "author": "malafeev", "createdAt": "2020-11-10T13:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTIwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599205", "bodyText": "Sorry, but no :) I will add comments to javadoc. And we still have to update README", "author": "iNikem", "createdAt": "2020-11-10T14:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}], "type": "inlineReview"}, {"oid": "d00845a8dd77249d96a651652ef3b245625cb5da", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d00845a8dd77249d96a651652ef3b245625cb5da", "message": "Merge branch 'master' into baggage-propagator\n\n# Conflicts:\n#\tREADME.md", "committedDate": "2020-11-09T13:26:53Z", "type": "commit"}, {"oid": "f550cdd37f6a27ec508a4b491080f4f5d58546da", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f550cdd37f6a27ec508a4b491080f4f5d58546da", "message": "leave JaegerPropagator out of the TraceMultiPropagator\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-10T08:59:10Z", "type": "commit"}, {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/40764886b20751cab9bb4db3ee5e60a825f834f5", "message": "add javadoc explaining rules for putting propagators\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-10T13:56:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTU2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599569", "bodyText": "Is it always added? Or only if baggage value is provided?", "author": "iNikem", "createdAt": "2020-11-10T14:22:56Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator", "originalCommit": "40764886b20751cab9bb4db3ee5e60a825f834f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0MzgxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520643817", "bodyText": "added can be ... only", "author": "malafeev", "createdAt": "2020-11-10T15:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTcyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599723", "bodyText": "Is it always added? Or only if jaeger value is provided?", "author": "iNikem", "createdAt": "2020-11-10T14:23:09Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator\n+   *       extract Context.\n+   *   <li>JaegerPropagator is added to DefaultContextPropagators because it extracts both Context", "originalCommit": "40764886b20751cab9bb4db3ee5e60a825f834f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0Mzg3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520643875", "bodyText": "added can be ... only", "author": "malafeev", "createdAt": "2020-11-10T15:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzY2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520603660", "bodyText": "Above you say \"returns first successful extracted Context\", here you seem to say that later Baggage extraction can enrich the previous one. If context and baggage extractions behave differently in this regard, we have to say so explicitly.", "author": "iNikem", "createdAt": "2020-11-10T14:28:13Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator\n+   *       extract Context.\n+   *   <li>JaegerPropagator is added to DefaultContextPropagators because it extracts both Context\n+   *       and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract any\n+   *       existing Baggage.\n+   *   <li>W3CBaggagePropagator comes after JaegerPropagator, as it can have more complex/complete", "originalCommit": "40764886b20751cab9bb4db3ee5e60a825f834f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0NjgyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520646824", "bodyText": "updated.", "author": "malafeev", "createdAt": "2020-11-10T15:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzY2MA=="}], "type": "inlineReview"}, {"oid": "8f4ada7a1de84c1fcb0cef80d0fc1809b915e6b6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f4ada7a1de84c1fcb0cef80d0fc1809b915e6b6", "message": "update javadoc explaining rules for putting propagators\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-10T15:17:46Z", "type": "commit"}, {"oid": "c78d5afdf892ce5e5c5102b62dd903d0e3b8bd1f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c78d5afdf892ce5e5c5102b62dd903d0e3b8bd1f", "message": "update javadoc explaining rules for putting propagators\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-10T15:22:20Z", "type": "commit"}, {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c08df3206a36545cdf20a2134bf5b3cd41311ae7", "message": "update README.md\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-12T15:28:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzOTU3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522439578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * extraction next rules applied:\n          \n          \n            \n               * extraction, these rules are applied:", "author": "trask", "createdAt": "2020-11-12T21:33:11Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,26 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:", "originalCommit": "c08df3206a36545cdf20a2134bf5b3cd41311ae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODQ4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522558480", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *   <li>W3CBaggagePropagator can be added to DefaultContextPropagators only to allow another\n          \n          \n            \n               *       propagator extract Context.\n          \n          \n            \n               *   <li>JaegerPropagator can be added to DefaultContextPropagators only because it extracts both\n          \n          \n            \n               *       Context and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract\n          \n          \n            \n               *       any existing Baggage.\n          \n          \n            \n               *   <li>W3CBaggagePropagator and JaegerPropagator are added outside of the multi-propagator so that they will always runs and extract baggage (note: JaegerPropagator extracts both baggage and context).", "author": "trask", "createdAt": "2020-11-13T01:52:14Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,26 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator can be added to DefaultContextPropagators only to allow another\n+   *       propagator extract Context.\n+   *   <li>JaegerPropagator can be added to DefaultContextPropagators only because it extracts both\n+   *       Context and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract\n+   *       any existing Baggage.", "originalCommit": "c08df3206a36545cdf20a2134bf5b3cd41311ae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwMzk0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522603943", "bodyText": "I don't see mention of supporting case-insensitivity in the spec, I would suggest leaving this out?", "author": "trask", "createdAt": "2020-11-13T04:15:02Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())", "originalCommit": "c08df3206a36545cdf20a2134bf5b3cd41311ae7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0NjIxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522946214", "bodyText": "it was from beginning I suppose, didn't want change behavior", "author": "malafeev", "createdAt": "2020-11-13T13:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwMzk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MDc3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r523280771", "bodyText": "ok, I created #1632 to track this", "author": "trask", "createdAt": "2020-11-13T23:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwMzk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwNDU1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522604554", "bodyText": "doesn't seem important enough to log by default (default is info)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");\n          \n          \n            \n                  log.debug(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");", "author": "trask", "createdAt": "2020-11-13T04:15:46Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())\n+            .collect(Collectors.toList());\n+\n+    if (propagatorIds.remove(JAEGER)) {\n+      // Jaeger handles both tracing and baggage\n+      propagatorsBuilder.addTextMapPropagator(JaegerPropagator.getInstance());\n+      log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");", "originalCommit": "c08df3206a36545cdf20a2134bf5b3cd41311ae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwNDY5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522604698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");\n          \n          \n            \n                  log.debug(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");", "author": "trask", "createdAt": "2020-11-13T04:15:55Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())\n+            .collect(Collectors.toList());\n+\n+    if (propagatorIds.remove(JAEGER)) {\n+      // Jaeger handles both tracing and baggage\n+      propagatorsBuilder.addTextMapPropagator(JaegerPropagator.getInstance());\n+      log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");\n+    }\n+    if (propagatorIds.remove(BAGGAGE)) {\n+      propagatorsBuilder.addTextMapPropagator(W3CBaggagePropagator.getInstance());\n+      log.info(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");", "originalCommit": "c08df3206a36545cdf20a2134bf5b3cd41311ae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2ebc480970dcec1a126ac8482da5da4941f4404", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b2ebc480970dcec1a126ac8482da5da4941f4404", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-11-13T13:22:58Z", "type": "commit"}, {"oid": "d46fba221f0dedcddb54d9f3772b3cf9b0db645b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d46fba221f0dedcddb54d9f3772b3cf9b0db645b", "message": "fix styling\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-13T14:14:54Z", "type": "commit"}, {"oid": "a678c7ef83a560e6ee6e9640fe0ea0c03703c69d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a678c7ef83a560e6ee6e9640fe0ea0c03703c69d", "message": "Merge branch 'master' into baggage-propagator\n\n# Conflicts:\n#\tREADME.md", "committedDate": "2020-11-18T12:34:20Z", "type": "commit"}, {"oid": "40a00e7a5ee72c1e51874e2e1b9b5f766a87ee2a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/40a00e7a5ee72c1e51874e2e1b9b5f766a87ee2a", "message": "Simplify the rules", "committedDate": "2020-11-19T07:26:13Z", "type": "commit"}, {"oid": "3569df1ea2429d9fed370d1874b51441cd6bc190", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3569df1ea2429d9fed370d1874b51441cd6bc190", "message": "Merge pull request #6 from trask/pr-baggage-propagator\n\nSimplify the rules", "committedDate": "2020-11-19T08:47:25Z", "type": "commit"}]}