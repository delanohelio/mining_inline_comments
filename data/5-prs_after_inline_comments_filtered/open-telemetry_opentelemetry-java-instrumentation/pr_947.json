{"pr_number": 947, "pr_title": "Instrument DefaultSpan.create to return a bridged span. ", "pr_createdAt": "2020-08-12T09:07:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/947", "timeline": [{"oid": "50b7947abb50782bef88fa3410e25f1b0d49220d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/50b7947abb50782bef88fa3410e25f1b0d49220d", "message": "Instrument DefaultSpan.create", "committedDate": "2020-08-07T06:20:30Z", "type": "commit"}, {"oid": "9e38dd3f5666af521f8b43324e4c78776080e2c6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9e38dd3f5666af521f8b43324e4c78776080e2c6", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into defaultspan-create", "committedDate": "2020-08-12T08:46:06Z", "type": "commit"}, {"oid": "20d4dbd3ff763062eb414228d33e005b92dd92a6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/20d4dbd3ff763062eb414228d33e005b92dd92a6", "message": "Instrument DefaultSpan.create to return a bridged span.", "committedDate": "2020-08-12T08:59:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExODc3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/947#discussion_r469118778", "bodyText": "\ud83d\ude2d", "author": "iNikem", "createdAt": "2020-08-12T09:11:43Z", "path": "instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/auto/instrumentation/opentelemetryapi/DefaultSpanInstrumentation.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.opentelemetryapi;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.instrumentation.opentelemetryapi.trace.Bridging;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.trace.DefaultSpan;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class DefaultSpanInstrumentation extends AbstractInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"unshaded.io.opentelemetry.trace.DefaultSpan\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod().and(isPublic()).and(isStatic()).and(named(\"create\")),\n+        DefaultSpanInstrumentation.class.getName() + \"$CreateAdvice\");\n+  }\n+\n+  public static class CreateAdvice {\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void methodExit(\n+        @Advice.Return(readOnly = false) unshaded.io.opentelemetry.trace.Span span) {\n+      span = Bridging.toUnshaded(DefaultSpan.create(Bridging.toShaded(span.getContext())));", "originalCommit": "20d4dbd3ff763062eb414228d33e005b92dd92a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}