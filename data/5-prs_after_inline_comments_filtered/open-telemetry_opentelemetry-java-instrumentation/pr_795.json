{"pr_number": 795, "pr_title": "Deprecate SpanWithScope", "pr_createdAt": "2020-07-26T05:56:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/795", "timeline": [{"oid": "0952cce0525562ed745fe59d7542552e371fb61b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0952cce0525562ed745fe59d7542552e371fb61b", "message": "Deprecate SpanWithScope", "committedDate": "2020-07-26T05:55:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4MzU0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/795#discussion_r460483546", "bodyText": "Don't think this is the old pattern, though it's not a big deal to document in detail either I think.", "author": "anuraaga", "createdAt": "2020-07-26T06:02:51Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/instrumentation/api/SpanWithScope.java", "diffHunk": "@@ -19,7 +19,62 @@\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.Span;\n \n-// intentionally (for now) not implementing Closeable since not clear what it would close\n+/**\n+ * This is deprecated.\n+ *\n+ * <p>Originally, we used {@code SpanWithScope} to pass the {@link Span} and {@link Scope} between\n+ * {@code @Advice.OnMethodEnter} and {@code @Advice.OnMethodExit}, e.g.\n+ *\n+ * <pre>\n+ *   &#64;Advice.OnMethodEnter(...)\n+ *   public static CallDepth onEnter(", "originalCommit": "0952cce0525562ed745fe59d7542552e371fb61b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4NDMxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/795#discussion_r460484310", "bodyText": "thx! bad copy-paste \ud83d\ude02", "author": "trask", "createdAt": "2020-07-26T06:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4MzU0Ng=="}], "type": "inlineReview"}, {"oid": "c32d1fa881439da74b5a68bf2c5163e526323af9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c32d1fa881439da74b5a68bf2c5163e526323af9", "message": "feedback", "committedDate": "2020-07-26T06:10:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4NTkxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/795#discussion_r460485913", "bodyText": "I think it deserves the explanation: why are we migrating? What was bad with old approach? Document your decisions, not actions :)", "author": "iNikem", "createdAt": "2020-07-26T06:30:21Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/instrumentation/api/SpanWithScope.java", "diffHunk": "@@ -19,7 +19,59 @@\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.Span;\n \n-// intentionally (for now) not implementing Closeable since not clear what it would close\n+/**\n+ * This is deprecated.\n+ *\n+ * <p>Originally, we used {@code SpanWithScope} to pass the {@link Span} and {@link Scope} between\n+ * {@code @Advice.OnMethodEnter} and {@code @Advice.OnMethodExit}, e.g.\n+ *\n+ * <pre>\n+ *   &#64;Advice.OnMethodEnter(...)\n+ *     public static SpanWithScope onEnter(...) {\n+ *     ...\n+ *     Span span = ...\n+ *     return new SpanWithScope(span, currentContextWith(span));\n+ *   }\n+ *\n+ *   &#64;Advice.OnMethodExit(...)\n+ *   public static void stopSpan(\n+ *       ...\n+ *       &#64;Advice.Enter final SpanWithScope spanWithScope) {\n+ *     Span span = spanWithScope.getSpan();\n+ *     ...\n+ *     span.end();\n+ *     spanWithScope.closeScope();\n+ *   }\n+ * </pre>\n+ *\n+ * But we are (slowly) migrating to a new style using {@code @Advice.Local} that doesn't require", "originalCommit": "c32d1fa881439da74b5a68bf2c5163e526323af9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f091dfbab3341e8c6d31347e087516449cf8b038", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f091dfbab3341e8c6d31347e087516449cf8b038", "message": "feedback", "committedDate": "2020-07-26T06:42:10Z", "type": "commit"}]}