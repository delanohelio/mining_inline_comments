{"pr_number": 1643, "pr_title": "Run tests with javaagent.", "pr_createdAt": "2020-11-16T09:14:14Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643", "timeline": [{"oid": "ed6a91aae0eef0b787c5b6e63a06958f24bbd757", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed6a91aae0eef0b787c5b6e63a06958f24bbd757", "message": "Maybe still seeing a deadlock", "committedDate": "2020-12-24T01:50:41Z", "type": "commit"}, {"oid": "a6c7b75d5c5f96206335f74dcd53803def6ed096", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a6c7b75d5c5f96206335f74dcd53803def6ed096", "message": "Extract unittest from mongo-3.1 and mongo-3.7", "committedDate": "2020-11-28T20:24:25Z", "type": "commit"}, {"oid": "64d675c611b465f050d8acdb3db240415add8692", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/64d675c611b465f050d8acdb3db240415add8692", "message": "Spotless", "committedDate": "2020-11-28T20:24:53Z", "type": "commit"}, {"oid": "78bd9496f54b54156b9a90cc7ca390f2a2fb14b8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78bd9496f54b54156b9a90cc7ca390f2a2fb14b8", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-11-28T20:30:21Z", "type": "commit"}, {"oid": "09f18c3569f7b129ea48e3ac10a5510febec336a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/09f18c3569f7b129ea48e3ac10a5510febec336a", "message": "Extract unittest from external-annotations", "committedDate": "2020-11-28T20:37:07Z", "type": "commit"}, {"oid": "a8b01d2103d33e71a747798ca30af8518cf91025", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a8b01d2103d33e71a747798ca30af8518cf91025", "message": "Consistency in unittests gradle files", "committedDate": "2020-11-28T20:40:06Z", "type": "commit"}, {"oid": "805b520ac09c120c4d77a3a02dbeb76e0ef1b092", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/805b520ac09c120c4d77a3a02dbeb76e0ef1b092", "message": "Codenarc", "committedDate": "2020-11-28T20:44:21Z", "type": "commit"}, {"oid": "9a52869d7f9973f96671322974ca3ac985ad6307", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a52869d7f9973f96671322974ca3ac985ad6307", "message": "Fix opentelemetry-api-1.0 test", "committedDate": "2020-11-28T21:03:55Z", "type": "commit"}, {"oid": "5ad267b87f0f881d8b2b62ddf738b8524c63bde7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5ad267b87f0f881d8b2b62ddf738b8524c63bde7", "message": "Temporarily ignore test", "committedDate": "2020-11-28T21:31:10Z", "type": "commit"}, {"oid": "6aabf27ecd972fe9cc1f59b4fc10bb9e1bf728ac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6aabf27ecd972fe9cc1f59b4fc10bb9e1bf728ac", "message": "Create javaagent dirs for all instrumentation", "committedDate": "2020-11-29T06:05:53Z", "type": "commit"}, {"oid": "7b1d8feb34ccdc933b6e3d9427e4a3c731cbd2b6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7b1d8feb34ccdc933b6e3d9427e4a3c731cbd2b6", "message": "Format groovy", "committedDate": "2020-11-29T06:13:33Z", "type": "commit"}, {"oid": "f3db271b632a2753fb14ae2895a90d6ed21e1798", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f3db271b632a2753fb14ae2895a90d6ed21e1798", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-11-29T06:40:29Z", "type": "commit"}, {"oid": "9a2bafaae171e132874411b81f3160648a21f355", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a2bafaae171e132874411b81f3160648a21f355", "message": "Remove no longer needed comment", "committedDate": "2020-11-29T06:40:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NTAwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r532165002", "bodyText": "any thoughts/preferences on this approach to making this class more testable?", "author": "trask", "createdAt": "2020-11-29T06:51:00Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/NetPeerUtils.java", "diffHunk": "@@ -17,13 +18,17 @@\n \n public final class NetPeerUtils {\n \n-  private static final Map<String, String> ENDPOINT_PEER_SERVICE_MAPPING =\n-      Collections.unmodifiableMap(\n-          Config.get().getMapProperty(\"otel.endpoint.peer.service.mapping\"));\n+  public static final NetPeerUtils INSTANCE = new NetPeerUtils(Config.get());\n \n-  private NetPeerUtils() {}\n+  private final Map<String, String> endpointPeerServiceMapping;\n \n-  public static void setNetPeer(Span span, @Nullable InetSocketAddress remoteConnection) {\n+  // visible for testing\n+  NetPeerUtils(Config config) {\n+    this.endpointPeerServiceMapping =\n+        Collections.unmodifiableMap(config.getMapProperty(\"otel.endpoint.peer.service.mapping\"));\n+  }\n+\n+  public void setNetPeer(Span span, @Nullable InetSocketAddress remoteConnection) {", "originalCommit": "9a2bafaae171e132874411b81f3160648a21f355", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2ODg0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r532168847", "bodyText": "Dependency injection like this is a standard approach I think \ud83d\udc4d", "author": "anuraaga", "createdAt": "2020-11-29T07:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NTAwMg=="}], "type": "inlineReview"}, {"oid": "42ed2c997dd62a4040518d46759b3314444b3048", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42ed2c997dd62a4040518d46759b3314444b3048", "message": "Cleanup", "committedDate": "2020-11-29T22:45:01Z", "type": "commit"}, {"oid": "5d1c3860703f3f34bd41f60b0299fb8cc6cc93b1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5d1c3860703f3f34bd41f60b0299fb8cc6cc93b1", "message": "Cleanup", "committedDate": "2020-11-29T23:19:18Z", "type": "commit"}, {"oid": "f8227997bf7c8532a323c1bfa9cc2d3f90f58671", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f8227997bf7c8532a323c1bfa9cc2d3f90f58671", "message": "Cleanup", "committedDate": "2020-11-30T00:00:07Z", "type": "commit"}, {"oid": "42517df3f686642ab1e43eb85bc56397e24f092d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42517df3f686642ab1e43eb85bc56397e24f092d", "message": "Cleanup", "committedDate": "2020-11-30T00:17:22Z", "type": "commit"}, {"oid": "fd75472e030d87ef66cd3755f9a2803a2bf324d4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fd75472e030d87ef66cd3755f9a2803a2bf324d4", "message": "Fixes", "committedDate": "2020-11-30T03:20:26Z", "type": "commit"}, {"oid": "dbf50bf8a0b92d1f6174c3357b82380106bbf40d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dbf50bf8a0b92d1f6174c3357b82380106bbf40d", "message": "Fix javaagent module tests", "committedDate": "2020-11-30T04:53:29Z", "type": "commit"}, {"oid": "456052572f6458b7b021886e9c18b5ec9d25769e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/456052572f6458b7b021886e9c18b5ec9d25769e", "message": "Fix javaagent-tooling module tests", "committedDate": "2020-11-30T05:03:44Z", "type": "commit"}, {"oid": "39b83907217845732a9f171c45a24ff5d8df97c9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/39b83907217845732a9f171c45a24ff5d8df97c9", "message": "Turn off debug logging", "committedDate": "2020-11-30T21:02:03Z", "type": "commit"}, {"oid": "115b6beeea6965297fda24e52c2287529770a1db", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/115b6beeea6965297fda24e52c2287529770a1db", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-12-02T01:21:11Z", "type": "commit"}, {"oid": "749086c1a596afd0f6f328c41696ada71298fc49", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/749086c1a596afd0f6f328c41696ada71298fc49", "message": "Merge cleanup", "committedDate": "2020-12-02T04:57:54Z", "type": "commit"}, {"oid": "0e0f1d26eb738cf4f2eac3265ba5c88160d2f41b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e0f1d26eb738cf4f2eac3265ba5c88160d2f41b", "message": "Revert \"Turn off debug logging\"\n\nThis reverts commit 39b83907217845732a9f171c45a24ff5d8df97c9.", "committedDate": "2020-12-02T04:58:00Z", "type": "commit"}, {"oid": "1813fe1990b862ae3246041cc4350cb2136788ed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1813fe1990b862ae3246041cc4350cb2136788ed", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-12-03T22:49:10Z", "type": "commit"}, {"oid": "09d02e75591f71e793bf20afd0f21b477a9fcf32", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/09d02e75591f71e793bf20afd0f21b477a9fcf32", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-12-16T00:42:07Z", "type": "commit"}, {"oid": "fc169ed226b6523d6fd352893eb1c9eb5f3127d7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc169ed226b6523d6fd352893eb1c9eb5f3127d7", "message": "Merge fixes", "committedDate": "2020-12-16T04:59:28Z", "type": "commit"}, {"oid": "0c6580382d7a2de9329b0c5e0cad515f13d7e120", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0c6580382d7a2de9329b0c5e0cad515f13d7e120", "message": "Fix metrics tests", "committedDate": "2020-12-16T05:31:19Z", "type": "commit"}, {"oid": "515f68ad9a5bf5088fa990c0b4bd3a5d24e3e61d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/515f68ad9a5bf5088fa990c0b4bd3a5d24e3e61d", "message": "METRICS", "committedDate": "2020-12-17T04:22:40Z", "type": "commit"}, {"oid": "f90b0567b0666345353dae192e2b1be04be81f2a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f90b0567b0666345353dae192e2b1be04be81f2a", "message": "fixup! METRICS", "committedDate": "2020-12-17T23:13:41Z", "type": "commit"}, {"oid": "1de976af2a5e95f7e45abb8b8035bb02090313ea", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1de976af2a5e95f7e45abb8b8035bb02090313ea", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-12-19T21:00:22Z", "type": "commit"}, {"oid": "d65463a08eb55e6c122b1abe6e3bdde9065142e1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d65463a08eb55e6c122b1abe6e3bdde9065142e1", "message": "Get tests compiling again", "committedDate": "2020-12-19T21:18:15Z", "type": "commit"}, {"oid": "dc492e734b902a9f25bb264059f0136ca6cf5811", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc492e734b902a9f25bb264059f0136ca6cf5811", "message": "Tests", "committedDate": "2020-12-19T22:08:27Z", "type": "commit"}, {"oid": "b4ff1241b3a2ea09a33ed7a152d0db6bd859081b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b4ff1241b3a2ea09a33ed7a152d0db6bd859081b", "message": "Consistent extra gradle test task", "committedDate": "2020-12-19T22:20:22Z", "type": "commit"}, {"oid": "4af856d639fcda6ed269bb100d093a871a8d5c2b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4af856d639fcda6ed269bb100d093a871a8d5c2b", "message": "Fix testing-common tests", "committedDate": "2020-12-20T19:12:44Z", "type": "commit"}, {"oid": "595bf1e1c6b76ed541c350eb549990d6177c4ca1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/595bf1e1c6b76ed541c350eb549990d6177c4ca1", "message": "Metrics test working", "committedDate": "2020-12-20T20:23:41Z", "type": "commit"}, {"oid": "22b000232cd54696910ebf648b04566d7cd24198", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/22b000232cd54696910ebf648b04566d7cd24198", "message": "Fix oshi test", "committedDate": "2020-12-20T21:16:28Z", "type": "commit"}, {"oid": "a48e2ed236b1a1bb2589cca9db485bc7541eb929", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a48e2ed236b1a1bb2589cca9db485bc7541eb929", "message": "Fix jsp test", "committedDate": "2020-12-20T21:27:47Z", "type": "commit"}, {"oid": "8f5a37bf0c3c9223db60acaa967f16e64cbfb658", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f5a37bf0c3c9223db60acaa967f16e64cbfb658", "message": "Also percentiles", "committedDate": "2020-12-20T21:39:12Z", "type": "commit"}, {"oid": "b638ea39e1f4fa44fb52810bd5831069f5015865", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b638ea39e1f4fa44fb52810bd5831069f5015865", "message": "Add TODO about more tests needed", "committedDate": "2020-12-20T22:07:50Z", "type": "commit"}, {"oid": "06cb3082117e1c98415272249ea17d9470115f52", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/06cb3082117e1c98415272249ea17d9470115f52", "message": "Bring back 2 more tests", "committedDate": "2020-12-20T22:11:21Z", "type": "commit"}, {"oid": "4f0574d59a70adee97ab7234d122ac67eb035ebc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4f0574d59a70adee97ab7234d122ac67eb035ebc", "message": "Wait for spans inside of traces", "committedDate": "2020-12-20T23:39:39Z", "type": "commit"}, {"oid": "e77f1ce3656773114358babe539c3b36027d234f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e77f1ce3656773114358babe539c3b36027d234f", "message": "A bit more review", "committedDate": "2020-12-21T00:39:29Z", "type": "commit"}, {"oid": "c6bb0230600e8fc54439f36d109d6463f1363b4e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c6bb0230600e8fc54439f36d109d6463f1363b4e", "message": "Spotless", "committedDate": "2020-12-21T00:39:29Z", "type": "commit"}, {"oid": "0a6a6e8b6d4cee30f42ce84541bcba64d83e7382", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0a6a6e8b6d4cee30f42ce84541bcba64d83e7382", "message": "One more comment", "committedDate": "2020-12-21T00:43:12Z", "type": "commit"}, {"oid": "5bfbb7e5e7e3f6a1305ef3beac262a67703c41f7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5bfbb7e5e7e3f6a1305ef3beac262a67703c41f7", "message": "Fix gradle logging deadlocks", "committedDate": "2020-12-21T01:07:32Z", "type": "commit"}, {"oid": "6befa8111afc32eb196deb5e066c5e0f8908d508", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6befa8111afc32eb196deb5e066c5e0f8908d508", "message": "Match comment in javaagent.gradle", "committedDate": "2020-12-21T01:08:24Z", "type": "commit"}, {"oid": "1e7576087ca05a4daf0e87fa2078394b6eb3dcb5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e7576087ca05a4daf0e87fa2078394b6eb3dcb5", "message": "Ooops", "committedDate": "2020-12-21T01:24:35Z", "type": "commit"}, {"oid": "35f0ae72a2f3704ca1c4ea317ac7bdd01c08a319", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/35f0ae72a2f3704ca1c4ea317ac7bdd01c08a319", "message": "More oops", "committedDate": "2020-12-21T01:37:22Z", "type": "commit"}, {"oid": "3ae6dfb8f6d59ee8cda683ef93015e0bd47790cc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ae6dfb8f6d59ee8cda683ef93015e0bd47790cc", "message": "Still fixing recent InMemoryExporter changes", "committedDate": "2020-12-21T01:43:24Z", "type": "commit"}, {"oid": "1f6313d24aa7e8b0631e49be39f0bb1152f14553", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1f6313d24aa7e8b0631e49be39f0bb1152f14553", "message": "Fix baggage test", "committedDate": "2020-12-21T02:43:31Z", "type": "commit"}, {"oid": "eec252bfbfb3c4fc5b9681bbd9ec96a0db3c602d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eec252bfbfb3c4fc5b9681bbd9ec96a0db3c602d", "message": "Fix the build", "committedDate": "2020-12-21T03:23:15Z", "type": "commit"}, {"oid": "3f582c01e5a720c8364707e06044dd87a49bc2c9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3f582c01e5a720c8364707e06044dd87a49bc2c9", "message": "Checkstyle", "committedDate": "2020-12-21T03:29:24Z", "type": "commit"}, {"oid": "2f26374d30789e8a159e7910d452d757aa64d876", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2f26374d30789e8a159e7910d452d757aa64d876", "message": "Remove code coverage check from testing-common", "committedDate": "2020-12-21T04:13:45Z", "type": "commit"}, {"oid": "a44cefd04e11ae646b56bc987eb64f9fac677cda", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a44cefd04e11ae646b56bc987eb64f9fac677cda", "message": "Spotless", "committedDate": "2020-12-21T04:30:38Z", "type": "commit"}, {"oid": "47e7701bb360a12dd80bcde2f5ff02f63deff7bc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/47e7701bb360a12dd80bcde2f5ff02f63deff7bc", "message": "Fix new gradle files", "committedDate": "2020-12-21T05:07:49Z", "type": "commit"}, {"oid": "584382e4ad249d0eaab6832185743148915cd1ce", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/584382e4ad249d0eaab6832185743148915cd1ce", "message": "Spotless", "committedDate": "2020-12-21T05:19:04Z", "type": "commit"}, {"oid": "2264e26f1ec3917b4d1c5a84dbb9b06237555063", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2264e26f1ec3917b4d1c5a84dbb9b06237555063", "message": "Fix kotlin coroutine test", "committedDate": "2020-12-21T06:42:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NzczMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546547733", "bodyText": "Hooray for better tests!", "author": "anuraaga", "createdAt": "2020-12-21T07:26:42Z", "path": "instrumentation/kotlinx-coroutines/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/kotlinxcoroutines/KotlinCoroutinesInstrumentationModule.java", "diffHunk": "@@ -28,6 +28,15 @@ public KotlinCoroutinesInstrumentationModule() {\n     super(\"kotlinx-coroutines\");\n   }\n \n+  @Override\n+  public String[] additionalHelperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.extension.kotlin.ContextExtensionsKt\",", "originalCommit": "2264e26f1ec3917b4d1c5a84dbb9b06237555063", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/21acc89ec7b325198b7d492b66cef3f7eeb5a2cd", "message": "Fix CI sporadic hanging", "committedDate": "2020-12-21T07:34:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NDI1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546584252", "bodyText": "What's this change for? Existing bug?", "author": "anuraaga", "createdAt": "2020-12-21T08:58:31Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -42,14 +42,17 @@ public boolean matches(T target) {\n         || name.startsWith(\"com.jayway.jsonpath.\")\n         || name.startsWith(\"com.lightbend.lagom.\")\n         || name.startsWith(\"javax.el.\")\n-        || name.startsWith(\"net.sf.cglib.\")\n         || name.startsWith(\"org.apache.lucene.\")\n         || name.startsWith(\"org.apache.tartarus.\")\n         || name.startsWith(\"org.json.simple.\")\n         || name.startsWith(\"org.yaml.snakeyaml.\")) {\n       return true;\n     }\n \n+    if (name.startsWith(\"net.sf.cglib.\")) {\n+      return !name.equals(\"net.sf.cglib.core.internal.LoadingCache$2\");", "originalCommit": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyMzQ0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546923449", "bodyText": "doesn't seem needed (anymore?), removed", "author": "trask", "createdAt": "2020-12-21T20:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NDI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwNjQyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547906426", "bodyText": "I still see it :)", "author": "iNikem", "createdAt": "2020-12-23T11:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NDI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyMTU4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r548321587", "bodyText": "I had to bring it back, :testing-common:integration-tests needs it to pass, same reason as other exclusions in here, some test triggers it to load, and our test verification complains that we transformed a class that would have been ignored via the AdditionalLibraryIgnoresMatcher", "author": "trask", "createdAt": "2020-12-23T23:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NDI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NTA5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546585095", "bodyText": "Is this needed even though we don't have a suppress? Well IIRC default of bytebuddy is to suppress, should we disable suppression instead and let it throw?", "author": "anuraaga", "createdAt": "2020-12-21T09:00:18Z", "path": "testing-common/integration-tests/src/main/java/context/ContextTestInstrumentationModule.java", "diffHunk": "@@ -87,10 +93,14 @@ public static void methodExit(@Advice.Return(readOnly = false) boolean isInstrum\n     @Advice.OnMethodExit\n     public static void methodExit(\n         @Advice.This KeyClass thiz, @Advice.Return(readOnly = false) int contextCount) {\n-      ContextStore<KeyClass, Context> contextStore =\n-          InstrumentationContext.get(KeyClass.class, Context.class);\n-      Context context = contextStore.putIfAbsent(thiz, new Context());\n-      contextCount = ++context.count;\n+      try {\n+        ContextStore<KeyClass, Context> contextStore =\n+            InstrumentationContext.get(KeyClass.class, Context.class);\n+        Context context = contextStore.putIfAbsent(thiz, new Context());\n+        contextCount = ++context.count;\n+      } catch (Throwable t) {\n+        t.printStackTrace();", "originalCommit": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxOTQ5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546919498", "bodyText": "oops, this was just debugging code that I forgot to remove \ud83d\udc4d", "author": "trask", "createdAt": "2020-12-21T20:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NTA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NzAyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546587020", "bodyText": "Technically it's not an exporter but we can cleanup in followups", "author": "anuraaga", "createdAt": "2020-12-21T09:04:37Z", "path": "testing-common/src/main/java/io/opentelemetry/instrumentation/test/InMemoryExporter.java", "diffHunk": "@@ -5,240 +5,93 @@\n \n package io.opentelemetry.instrumentation.test;\n \n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Stopwatch;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.TreeTraverser;\n-import com.google.common.primitives.Ints;\n-import com.google.common.primitives.Longs;\n import io.opentelemetry.api.trace.SpanId;\n-import io.opentelemetry.context.Context;\n-import io.opentelemetry.sdk.common.CompletableResultCode;\n-import io.opentelemetry.sdk.trace.ReadWriteSpan;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.javaagent.testing.common.AgentTestingExporterAccess;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.trace.data.SpanData;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class InMemoryExporter implements SpanProcessor {\n-\n-  private static final Logger log = LoggerFactory.getLogger(InMemoryExporter.class);\n-\n-  private final List<List<SpanData>> traces = new ArrayList<>(); // guarded by tracesLock\n-\n-  private boolean needsTraceSorting; // guarded by tracesLock\n-  private final Set<String> needsSpanSorting = new HashSet<>(); // guarded by tracesLock\n-\n-  private final Object tracesLock = new Object();\n-\n-  // not using span startEpochNanos since that is not strictly increasing so can lead to ties\n-  private final Map<String, Integer> spanOrders = new ConcurrentHashMap<>();\n-  private final AtomicInteger nextSpanOrder = new AtomicInteger();\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n-  private volatile boolean forceFlushCalled;\n+public class InMemoryExporter {", "originalCommit": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyMDExMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546920111", "bodyText": "\ud83d\udc4d #1955", "author": "trask", "createdAt": "2020-12-21T20:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NzAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NzY5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546587693", "bodyText": "Does this javadoc apply? I guess it's just to use in scala / kotlin tests", "author": "anuraaga", "createdAt": "2020-12-21T09:06:03Z", "path": "testing-common/src/main/java/io/opentelemetry/javaagent/testing/common/Java8BytecodeBridge.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing.common;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+\n+/**\n+ * A helper for accessing methods that rely on new Java 8 bytecode features such as calling a static\n+ * interface methods. In instrumentation, we may need to call these methods in code that is inlined", "originalCommit": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa41e7e07af664b273d08a7cafff5b25f7f977d5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa41e7e07af664b273d08a7cafff5b25f7f977d5", "message": "Feedback", "committedDate": "2020-12-21T20:39:50Z", "type": "commit"}, {"oid": "1bdec4b1ee8b8bbc58ef0b064feda2ccbdcf580c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1bdec4b1ee8b8bbc58ef0b064feda2ccbdcf580c", "message": "Unnecessary", "committedDate": "2020-12-21T20:50:22Z", "type": "commit"}, {"oid": "189a68f341d931c8158b370e953f5541724b16df", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/189a68f341d931c8158b370e953f5541724b16df", "message": "Spotless", "committedDate": "2020-12-21T22:32:33Z", "type": "commit"}, {"oid": "742474bcc15542e8d14eaef0b908a46e6cbd5ae9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/742474bcc15542e8d14eaef0b908a46e6cbd5ae9", "message": "Bring back deadlock", "committedDate": "2020-12-22T01:19:04Z", "type": "commit"}, {"oid": "e39246e78cc436ec7ed98465d90985a46d902bb3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e39246e78cc436ec7ed98465d90985a46d902bb3", "message": "Fix gradle output deadlock", "committedDate": "2020-12-22T01:19:04Z", "type": "commit"}, {"oid": "a117395a1e433b3e8b792371099201ee88319ce8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a117395a1e433b3e8b792371099201ee88319ce8", "message": "Look for new deadlock", "committedDate": "2020-12-22T04:58:07Z", "type": "commit"}, {"oid": "eb58976873752f8b868542c22dc25b67912a4b55", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eb58976873752f8b868542c22dc25b67912a4b55", "message": "To be reverted: --no-build-cache", "committedDate": "2020-12-22T05:08:29Z", "type": "commit"}, {"oid": "cbdeb7ac0f94b9fea27e969646b93a1abd996d7e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cbdeb7ac0f94b9fea27e969646b93a1abd996d7e", "message": "Revert \"To be reverted: --no-build-cache\"\n\nThis reverts commit eb58976873752f8b868542c22dc25b67912a4b55.", "committedDate": "2020-12-22T07:21:09Z", "type": "commit"}, {"oid": "4607cc34b42b6cac0ab1849611d1a498b307df64", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4607cc34b42b6cac0ab1849611d1a498b307df64", "message": "Revert \"Look for new deadlock\"\n\nThis reverts commit a117395a1e433b3e8b792371099201ee88319ce8.", "committedDate": "2020-12-22T07:21:11Z", "type": "commit"}, {"oid": "8a673ead51de1386f1eccc52024d646c7ef5a9bb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8a673ead51de1386f1eccc52024d646c7ef5a9bb", "message": "Revert \"Fix gradle output deadlock\"\n\nThis reverts commit e39246e78cc436ec7ed98465d90985a46d902bb3.", "committedDate": "2020-12-22T07:21:13Z", "type": "commit"}, {"oid": "1efdffe3e98d795531f4dcac25efd87b3a7e4a37", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1efdffe3e98d795531f4dcac25efd87b3a7e4a37", "message": "Revert \"Bring back deadlock\"\n\nThis reverts commit 742474bcc15542e8d14eaef0b908a46e6cbd5ae9.", "committedDate": "2020-12-22T07:21:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExMTExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547111118", "bodyText": "This seems like a reasonable addition even if it doesn't solve our deadlock. If nothing else, it could speed up the build a bit by having less to run instrumentation on?", "author": "anuraaga", "createdAt": "2020-12-22T07:24:11Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -57,8 +57,7 @@ public boolean matches(T target) {\n       return false;\n     }\n \n-    if (name.startsWith(\"org.gradle.\")", "originalCommit": "1efdffe3e98d795531f4dcac25efd87b3a7e4a37", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c684902cd11b0101dd5defd4d6540877c7775938", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c684902cd11b0101dd5defd4d6540877c7775938", "message": "Add org.gradle to GlobalIgnoresMatcher", "committedDate": "2020-12-22T07:34:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODU4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547108580", "bodyText": "skipAdditionalLibraryMatcher is now unused?", "author": "iNikem", "createdAt": "2020-12-22T07:16:56Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -109,7 +115,9 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n             .ignore(any(), skipClassLoader());\n \n     ignoredAgentBuilder =\n-        ignoredAgentBuilder.or(globalIgnoresMatcher(skipAdditionalLibraryMatcher));", "originalCommit": "eb58976873752f8b868542c22dc25b67912a4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEzNTU1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547135552", "bodyText": "\ud83d\udc4d removed", "author": "trask", "createdAt": "2020-12-22T08:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODg5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547108892", "bodyText": "What is this? :)", "author": "iNikem", "createdAt": "2020-12-22T07:17:47Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -143,6 +147,11 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n     agentBuilder = customizeByteBuddyAgent(agentBuilder);\n     log.debug(\"Installed {} instrumenter(s)\", numInstrumenters);\n     ResettableClassFileTransformer resettableClassFileTransformer = agentBuilder.installOn(inst);\n+    try {\n+      Class.forName(\"io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper\");", "originalCommit": "eb58976873752f8b868542c22dc25b67912a4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMzI4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547123285", "bodyText": "that was part of today's deadlock work, it's gone now", "author": "trask", "createdAt": "2020-12-22T07:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwOTc5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547109799", "bodyText": "Is this not needed anymore?", "author": "iNikem", "createdAt": "2020-12-22T07:20:25Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -123,10 +131,6 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n               .with(new TransformLoggingListener());\n     }\n \n-    for (AgentBuilder.Listener listener : listeners) {", "originalCommit": "eb58976873752f8b868542c22dc25b67912a4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEzODU0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547138545", "bodyText": "this was only used for tests, now there's TestAgentListenerAccess", "author": "trask", "createdAt": "2020-12-22T08:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwOTc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwOTkzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547109935", "bodyText": "why?", "author": "iNikem", "createdAt": "2020-12-22T07:20:54Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -42,7 +42,6 @@ public boolean matches(T target) {\n         || name.startsWith(\"com.jayway.jsonpath.\")\n         || name.startsWith(\"com.lightbend.lagom.\")\n         || name.startsWith(\"javax.el.\")\n-        || name.startsWith(\"net.sf.cglib.\")", "originalCommit": "eb58976873752f8b868542c22dc25b67912a4b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMzE0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547123140", "bodyText": "this was a mistake, just pushed it back \ud83d\udc4d", "author": "trask", "createdAt": "2020-12-22T07:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwOTkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExODA3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547118073", "bodyText": "Who does this now?", "author": "iNikem", "createdAt": "2020-12-22T07:42:31Z", "path": "testing-common/src/main/java/io/opentelemetry/instrumentation/test/InMemoryExporter.java", "diffHunk": "@@ -5,240 +5,93 @@\n \n package io.opentelemetry.instrumentation.test;\n \n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Stopwatch;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.TreeTraverser;\n-import com.google.common.primitives.Ints;\n-import com.google.common.primitives.Longs;\n import io.opentelemetry.api.trace.SpanId;\n-import io.opentelemetry.context.Context;\n-import io.opentelemetry.sdk.common.CompletableResultCode;\n-import io.opentelemetry.sdk.trace.ReadWriteSpan;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.javaagent.testing.common.AgentTestingExporterAccess;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.trace.data.SpanData;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class InMemoryExporter implements SpanProcessor {\n-\n-  private static final Logger log = LoggerFactory.getLogger(InMemoryExporter.class);\n-\n-  private final List<List<SpanData>> traces = new ArrayList<>(); // guarded by tracesLock\n-\n-  private boolean needsTraceSorting; // guarded by tracesLock\n-  private final Set<String> needsSpanSorting = new HashSet<>(); // guarded by tracesLock\n-\n-  private final Object tracesLock = new Object();\n-\n-  // not using span startEpochNanos since that is not strictly increasing so can lead to ties\n-  private final Map<String, Integer> spanOrders = new ConcurrentHashMap<>();\n-  private final AtomicInteger nextSpanOrder = new AtomicInteger();\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n-  private volatile boolean forceFlushCalled;\n+public class InMemoryExporter {\n \n-  @Override\n-  public void onStart(Context context, ReadWriteSpan readWriteSpan) {\n-    SpanData sd = readWriteSpan.toSpanData();\n-    log.debug(", "originalCommit": "c684902cd11b0101dd5defd4d6540877c7775938", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE0MDUxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547140513", "bodyText": "OtlpInMemorySpanExporter", "author": "trask", "createdAt": "2020-12-22T08:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExODA3Mw=="}], "type": "inlineReview"}, {"oid": "5f19bb225f7fa8a99b96fb0cafa2b6fab555885f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f19bb225f7fa8a99b96fb0cafa2b6fab555885f", "message": "Bring back cglib ignore", "committedDate": "2020-12-22T07:53:47Z", "type": "commit"}, {"oid": "ac643e67508e0c52902f68aea600608f67acba49", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac643e67508e0c52902f68aea600608f67acba49", "message": "Remove unused code", "committedDate": "2020-12-22T08:24:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1Mjk2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547252962", "bodyText": "The PR does not change this API, however could we keep it to make sure the existing tests in vendor distributions work?", "author": "pavolloffay", "createdAt": "2020-12-22T12:35:08Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -81,10 +87,7 @@ public static void installBytebuddyAgent(Instrumentation inst) {\n    * @return the agent's class transformer\n    */\n   public static ResettableClassFileTransformer installBytebuddyAgent(", "originalCommit": "ac643e67508e0c52902f68aea600608f67acba49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY1NDI4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547654282", "bodyText": "hey @pavolloffay, can you add some tests to the example distro? that will help clear up what impact this change has on them", "author": "trask", "createdAt": "2020-12-23T05:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1Mjk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUxODQ3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r548518474", "bodyText": "to do this I will have to copy some classes from the main project. Here is an example of what I use in the Hypertrace agent https://github.com/hypertrace/javaagent/blob/main/testing-common/src/main/java/org/hypertrace/agent/testing/AbstractInstrumenterTest.java#L83. We are not publishing the testing artifact #1644", "author": "pavolloffay", "createdAt": "2020-12-24T12:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1Mjk2Mg=="}], "type": "inlineReview"}, {"oid": "6aa1eaa836e7cfc72ff0c9c2e7ce2689e3b493bc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6aa1eaa836e7cfc72ff0c9c2e7ce2689e3b493bc", "message": "Fix FieldBackedProviderTest's cglib test", "committedDate": "2020-12-23T01:36:37Z", "type": "commit"}, {"oid": "063613d6d6024f8b13dbed7963e88879d78367b8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/063613d6d6024f8b13dbed7963e88879d78367b8", "message": "Enable debug logging", "committedDate": "2020-12-23T02:04:58Z", "type": "commit"}, {"oid": "839c55e2e4a9c2907f42894167dde2c9c6c91aa1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/839c55e2e4a9c2907f42894167dde2c9c6c91aa1", "message": "Fix gradle deadlocking", "committedDate": "2020-12-23T03:21:04Z", "type": "commit"}, {"oid": "782408062aa91228d925f79aba8c75fbe61b96c8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/782408062aa91228d925f79aba8c75fbe61b96c8", "message": "Set net.bytebuddy.raw earlier", "committedDate": "2020-12-23T03:41:26Z", "type": "commit"}, {"oid": "058225d1e412a38c60b680e35bb8a7e1f749badb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/058225d1e412a38c60b680e35bb8a7e1f749badb", "message": "Add doc", "committedDate": "2020-12-23T05:07:20Z", "type": "commit"}, {"oid": "c0775f531d85f5a14778ae67691a4c0b916c819e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c0775f531d85f5a14778ae67691a4c0b916c819e", "message": "Can't see github action output", "committedDate": "2020-12-23T05:11:28Z", "type": "commit"}, {"oid": "10b1acc03d40758532aaa456e059713e7734148d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/10b1acc03d40758532aaa456e059713e7734148d", "message": "Spotless", "committedDate": "2020-12-23T05:20:43Z", "type": "commit"}, {"oid": "5b031c41ca3f661004a6f2b9cdcfb2527e44395e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5b031c41ca3f661004a6f2b9cdcfb2527e44395e", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-12-23T05:32:19Z", "type": "commit"}, {"oid": "8652c1bf7c3b6623b47075e3575e796f379d6a33", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8652c1bf7c3b6623b47075e3575e796f379d6a33", "message": "Fix undertow tests", "committedDate": "2020-12-23T05:56:10Z", "type": "commit"}, {"oid": "b263ce30dfbf165e32c594182694f49a4bb7a391", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b263ce30dfbf165e32c594182694f49a4bb7a391", "message": "Fix undertow tests, take 2", "committedDate": "2020-12-23T06:33:26Z", "type": "commit"}, {"oid": "86568f2a2b9d2eed64a7cba238341fdf56a6dbf9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/86568f2a2b9d2eed64a7cba238341fdf56a6dbf9", "message": "Spotless", "committedDate": "2020-12-23T06:52:52Z", "type": "commit"}, {"oid": "473acce59118b1fc776578ee3c94136b88f15d4a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/473acce59118b1fc776578ee3c94136b88f15d4a", "message": "Simplify depedencies", "committedDate": "2020-12-23T07:04:55Z", "type": "commit"}, {"oid": "db5c58d9a0f9f45b92ce8e70d283c8abfcb88e4a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db5c58d9a0f9f45b92ce8e70d283c8abfcb88e4a", "message": "More doc", "committedDate": "2020-12-23T22:35:50Z", "type": "commit"}, {"oid": "0f7eaf5f17c68f98bef43a6133457d94694047c8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0f7eaf5f17c68f98bef43a6133457d94694047c8", "message": "Different fix for gradle deadlock", "committedDate": "2020-12-23T23:40:11Z", "type": "commit"}, {"oid": "c1991ee85715e1e6cab83eb7ad021d9317762833", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c1991ee85715e1e6cab83eb7ad021d9317762833", "message": "Add link from CONTRIBUTING", "committedDate": "2020-12-23T23:51:08Z", "type": "commit"}, {"oid": "b1d4171c0713aff6cdade1f96ff5dcdcfc7552d5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1d4171c0713aff6cdade1f96ff5dcdcfc7552d5", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-12-24T00:32:46Z", "type": "commit"}, {"oid": "f5e27895fef268ead369f4ad8a53c577d5687d77", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5e27895fef268ead369f4ad8a53c577d5687d77", "message": "Bump timeout for flaky test", "committedDate": "2020-12-24T00:55:33Z", "type": "commit"}, {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a2f1604e43052ce3c668e774f1826e9c1257b04e", "message": "Run tests with javaagent.", "committedDate": "2020-11-16T08:57:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwNTk0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524005947", "bodyText": "Quick and dirty - I think better is to have a otel_ flag to disable batch span processor since some people may want to do so.", "author": "anuraaga", "createdAt": "2020-11-16T09:14:59Z", "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/SpanExporterFactory.java", "diffHunk": "@@ -32,4 +32,9 @@\n    * @return The exporter names supported by this factory\n    */\n   Set<String> getNames();\n+\n+  /** Returns whether the batch span processor should not be used with this exporter. */", "originalCommit": "a2f1604e43052ce3c668e774f1826e9c1257b04e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwODg0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524008847", "bodyText": "Annoying - but seems a simple way to get exported spans across the classloader. However, I will play with whether Jackson can marshal them for free (the SpanWrapper worries me)", "author": "anuraaga", "createdAt": "2020-11-16T09:17:26Z", "path": "testing-common/src/main/java/io/opentelemetry/javaagent/testing/common/AgentTestingExporterAccess.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing.common;\n+\n+import static io.opentelemetry.api.common.AttributeKey.booleanArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.doubleArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.longArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.stringArrayKey;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.StatusCode;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.common.v1.AnyValue;\n+import io.opentelemetry.proto.common.v1.ArrayValue;\n+import io.opentelemetry.proto.common.v1.InstrumentationLibrary;\n+import io.opentelemetry.proto.common.v1.KeyValue;\n+import io.opentelemetry.proto.resource.v1.Resource;\n+import io.opentelemetry.proto.trace.v1.InstrumentationLibrarySpans;\n+import io.opentelemetry.proto.trace.v1.ResourceSpans;\n+import io.opentelemetry.proto.trace.v1.Span;\n+import io.opentelemetry.proto.trace.v1.Status;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.testing.trace.TestSpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class AgentTestingExporterAccess {\n+  private static final char TRACESTATE_KEY_VALUE_DELIMITER = '=';\n+  private static final char TRACESTATE_ENTRY_DELIMITER = ',';\n+  private static final Pattern TRACESTATE_ENTRY_DELIMITER_SPLIT_PATTERN =\n+      Pattern.compile(\"[ \\t]*\" + TRACESTATE_ENTRY_DELIMITER + \"[ \\t]*\");\n+\n+  private static final MethodHandle getExportRequests;\n+  private static final MethodHandle reset;\n+\n+  static {\n+    try {\n+      Class<?> agentTestingExporterFactoryClass =\n+          AgentClassLoaderAccess.loadClass(\n+              \"io.opentelemetry.javaagent.testing.exporter.AgentTestingExporterFactory\");\n+      getExportRequests =\n+          MethodHandles.lookup()\n+              .findStatic(\n+                  agentTestingExporterFactoryClass,\n+                  \"getExportRequests\",\n+                  MethodType.methodType(List.class));\n+      reset =\n+          MethodHandles.lookup()\n+              .findStatic(\n+                  agentTestingExporterFactoryClass, \"reset\", MethodType.methodType(void.class));\n+    } catch (Exception e) {\n+      throw new Error(\"Error accessing fields with reflection.\", e);\n+    }\n+  }\n+\n+  public static void reset() {\n+    try {\n+      reset.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke reset\", t);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static List<SpanData> getExportedSpans() {\n+    final List<byte[]> exportRequests;\n+    try {\n+      exportRequests = (List<byte[]>) getExportRequests.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke getExportRequests\", t);\n+    }\n+\n+    List<ResourceSpans> allResourceSpans =\n+        exportRequests.stream()\n+            .map(\n+                serialized -> {\n+                  try {\n+                    return ExportTraceServiceRequest.parseFrom(serialized);\n+                  } catch (InvalidProtocolBufferException e) {\n+                    throw new Error(e);\n+                  }\n+                })\n+            .flatMap(request -> request.getResourceSpansList().stream())\n+            .collect(Collectors.toList());\n+    List<SpanData> spans = new ArrayList<>();\n+    for (ResourceSpans resourceSpans : allResourceSpans) {", "originalCommit": "a2f1604e43052ce3c668e774f1826e9c1257b04e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwOTY3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524009671", "bodyText": "I realized this is why a lot of people have problems identifying local root in collector :O", "author": "anuraaga", "createdAt": "2020-11-16T09:18:11Z", "path": "testing-common/src/main/java/io/opentelemetry/javaagent/testing/common/AgentTestingExporterAccess.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing.common;\n+\n+import static io.opentelemetry.api.common.AttributeKey.booleanArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.doubleArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.longArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.stringArrayKey;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.StatusCode;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.common.v1.AnyValue;\n+import io.opentelemetry.proto.common.v1.ArrayValue;\n+import io.opentelemetry.proto.common.v1.InstrumentationLibrary;\n+import io.opentelemetry.proto.common.v1.KeyValue;\n+import io.opentelemetry.proto.resource.v1.Resource;\n+import io.opentelemetry.proto.trace.v1.InstrumentationLibrarySpans;\n+import io.opentelemetry.proto.trace.v1.ResourceSpans;\n+import io.opentelemetry.proto.trace.v1.Span;\n+import io.opentelemetry.proto.trace.v1.Status;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.testing.trace.TestSpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class AgentTestingExporterAccess {\n+  private static final char TRACESTATE_KEY_VALUE_DELIMITER = '=';\n+  private static final char TRACESTATE_ENTRY_DELIMITER = ',';\n+  private static final Pattern TRACESTATE_ENTRY_DELIMITER_SPLIT_PATTERN =\n+      Pattern.compile(\"[ \\t]*\" + TRACESTATE_ENTRY_DELIMITER + \"[ \\t]*\");\n+\n+  private static final MethodHandle getExportRequests;\n+  private static final MethodHandle reset;\n+\n+  static {\n+    try {\n+      Class<?> agentTestingExporterFactoryClass =\n+          AgentClassLoaderAccess.loadClass(\n+              \"io.opentelemetry.javaagent.testing.exporter.AgentTestingExporterFactory\");\n+      getExportRequests =\n+          MethodHandles.lookup()\n+              .findStatic(\n+                  agentTestingExporterFactoryClass,\n+                  \"getExportRequests\",\n+                  MethodType.methodType(List.class));\n+      reset =\n+          MethodHandles.lookup()\n+              .findStatic(\n+                  agentTestingExporterFactoryClass, \"reset\", MethodType.methodType(void.class));\n+    } catch (Exception e) {\n+      throw new Error(\"Error accessing fields with reflection.\", e);\n+    }\n+  }\n+\n+  public static void reset() {\n+    try {\n+      reset.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke reset\", t);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static List<SpanData> getExportedSpans() {\n+    final List<byte[]> exportRequests;\n+    try {\n+      exportRequests = (List<byte[]>) getExportRequests.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke getExportRequests\", t);\n+    }\n+\n+    List<ResourceSpans> allResourceSpans =\n+        exportRequests.stream()\n+            .map(\n+                serialized -> {\n+                  try {\n+                    return ExportTraceServiceRequest.parseFrom(serialized);\n+                  } catch (InvalidProtocolBufferException e) {\n+                    throw new Error(e);\n+                  }\n+                })\n+            .flatMap(request -> request.getResourceSpansList().stream())\n+            .collect(Collectors.toList());\n+    List<SpanData> spans = new ArrayList<>();\n+    for (ResourceSpans resourceSpans : allResourceSpans) {\n+      Resource resource = resourceSpans.getResource();\n+      for (InstrumentationLibrarySpans ilSpans :\n+          resourceSpans.getInstrumentationLibrarySpansList()) {\n+        InstrumentationLibrary instrumentationLibrary = ilSpans.getInstrumentationLibrary();\n+        for (Span span : ilSpans.getSpansList()) {\n+          spans.add(\n+              TestSpanData.builder()\n+                  .setTraceId(TraceId.bytesToHex(span.getTraceId().toByteArray()))\n+                  .setSpanId(SpanId.bytesToHex(span.getSpanId().toByteArray()))\n+                  .setTraceState(extractTraceState(span.getTraceState()))\n+                  .setParentSpanId(SpanId.bytesToHex(span.getParentSpanId().toByteArray()))\n+                  .setResource(\n+                      io.opentelemetry.sdk.resources.Resource.create(\n+                          fromProto(resource.getAttributesList())))\n+                  .setInstrumentationLibraryInfo(\n+                      InstrumentationLibraryInfo.create(\n+                          instrumentationLibrary.getName(), instrumentationLibrary.getVersion()))\n+                  .setName(span.getName())\n+                  .setStartEpochNanos(span.getStartTimeUnixNano())\n+                  .setEndEpochNanos(span.getEndTimeUnixNano())\n+                  .setAttributes(fromProto(span.getAttributesList()))\n+                  .setEvents(\n+                      span.getEventsList().stream()\n+                          .map(\n+                              event ->\n+                                  SpanData.Event.create(\n+                                      event.getTimeUnixNano(),\n+                                      event.getName(),\n+                                      fromProto(event.getAttributesList()),\n+                                      event.getDroppedAttributesCount()\n+                                          + event.getAttributesCount()))\n+                          .collect(Collectors.toList()))\n+                  .setStatus(fromProto(span.getStatus()))\n+                  .setKind(fromProto(span.getKind()))\n+                  .setLinks(\n+                      span.getLinksList().stream()\n+                          .map(\n+                              link ->\n+                                  SpanData.Link.create(\n+                                      SpanContext.create(\n+                                          TraceId.bytesToHex(link.getTraceId().toByteArray()),\n+                                          SpanId.bytesToHex(link.getSpanId().toByteArray()),\n+                                          TraceFlags.getDefault(),\n+                                          extractTraceState(link.getTraceState())),\n+                                      fromProto(link.getAttributesList()),\n+                                      link.getDroppedAttributesCount() + link.getAttributesCount()))\n+                          .collect(Collectors.toList()))\n+                  // OTLP doesn't have hasRemoteParent", "originalCommit": "a2f1604e43052ce3c668e774f1826e9c1257b04e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMTM4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524011382", "bodyText": "Realized I shouldn't drain here since we want to be able to wait for traces.", "author": "anuraaga", "createdAt": "2020-11-16T09:19:44Z", "path": "testing/agent-exporter/src/main/java/io/opentelemetry/javaagent/testing/exporter/OtlpInMemorySpanExporter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing.exporter;\n+\n+import io.grpc.Server;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.stub.StreamObserver;\n+import io.opentelemetry.exporter.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse;\n+import io.opentelemetry.proto.collector.trace.v1.TraceServiceGrpc;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+class OtlpInMemorySpanExporter implements SpanExporter {\n+\n+  private final BlockingQueue<ExportTraceServiceRequest> collectedRequests =\n+      new LinkedBlockingQueue<>();\n+\n+  List<byte[]> getCollectedExportRequests() {\n+    List<ExportTraceServiceRequest> collected = new ArrayList<>(collectedRequests.size());\n+    collectedRequests.drainTo(collected);", "originalCommit": "a2f1604e43052ce3c668e774f1826e9c1257b04e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMzE0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524013142", "bodyText": "Goes through instrumentation API bridge, comes back from the SDK exporter through the agent classloader access", "author": "anuraaga", "createdAt": "2020-11-16T09:21:20Z", "path": "testing/agent-for-testing/src/test/java/io/opentelemetry/javaagent/testing/AgentForTestingTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.javaagent.testing.common.AgentTestingExporterAccess;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class AgentForTestingTest {\n+\n+  @BeforeEach\n+  void reset() {\n+    AgentTestingExporterAccess.reset();\n+  }\n+\n+  @Test\n+  void empty() {\n+    assertEquals(0, AgentTestingExporterAccess.getExportedSpans().size());\n+  }\n+\n+  @Test\n+  void exportAndRetrieve() {", "originalCommit": "a2f1604e43052ce3c668e774f1826e9c1257b04e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyODAwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524828008", "bodyText": "\ud83d\udc4f", "author": "trask", "createdAt": "2020-11-17T01:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMzE0Mg=="}], "type": "inlineReview"}, {"oid": "02b72aab66d9c219a3f44289addf339cd6f8ba3b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/02b72aab66d9c219a3f44289addf339cd6f8ba3b", "message": "TransformationListener bridge.", "committedDate": "2020-11-16T09:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyNTc3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524825770", "bodyText": "do we still need this now that running with real javaagent which should call it already?", "author": "trask", "createdAt": "2020-11-17T01:29:24Z", "path": "testing-common/src/main/java/io/opentelemetry/javaagent/testing/common/AgentInstallerAccess.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.javaagent.testing.common;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import io.opentelemetry.javaagent.bootstrap.TransformationListener;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+\n+public final class AgentInstallerAccess {\n+\n+  private static final MethodHandle getInstrumentation;\n+  private static final MethodHandle installBytebuddyAgent;\n+\n+  static {\n+    try {\n+      Class<?> agentInstallerClass =\n+          AgentClassLoaderAccess.loadClass(\"io.opentelemetry.javaagent.tooling.AgentInstaller\");\n+      MethodHandles.Lookup lookup = MethodHandles.lookup();\n+      getInstrumentation =\n+          lookup.findStatic(\n+              agentInstallerClass, \"getInstrumentation\", methodType(Instrumentation.class));\n+\n+      installBytebuddyAgent =\n+          lookup.findStatic(\n+              agentInstallerClass,\n+              \"installBytebuddyAgent\",\n+              methodType(\n+                  ClassFileTransformer.class,\n+                  Instrumentation.class,\n+                  boolean.class,\n+                  TransformationListener[].class));\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not load agent installer.\", t);\n+    }\n+  }\n+\n+  public static Instrumentation getInstrumentation() {\n+    try {\n+      return (Instrumentation) getInstrumentation.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke getInstrumentation\", t);\n+    }\n+  }\n+\n+  public static ClassFileTransformer installBytebuddyAgent(", "originalCommit": "02b72aab66d9c219a3f44289addf339cd6f8ba3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3f13d7d54e583925cd8ad17d57ca126aa07aa4f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c3f13d7d54e583925cd8ad17d57ca126aa07aa4f", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into run-tests-with-agent", "committedDate": "2020-11-17T04:20:18Z", "type": "commit"}, {"oid": "dd1eff3977111121bbcd03a57cc04edb5ce5421c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dd1eff3977111121bbcd03a57cc04edb5ce5421c", "message": "Simple instrumentation (e.g. armeria) work", "committedDate": "2020-11-17T05:58:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwMzYwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524903604", "bodyText": "nice idea to push this down into the custom distro", "author": "trask", "createdAt": "2020-11-17T06:05:12Z", "path": "testing/agent-exporter/src/main/java/io/opentelemetry/javaagent/testing/bytebuddy/TestAgentListener.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package io.opentelemetry.javaagent.testing.bytebuddy;\n+\n+import io.opentelemetry.javaagent.tooling.matcher.AdditionalLibraryIgnoresMatcher;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.dynamic.DynamicType;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.utility.JavaModule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestAgentListener implements AgentBuilder.Listener {", "originalCommit": "dd1eff3977111121bbcd03a57cc04edb5ce5421c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwMzg1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524903856", "bodyText": "cc: @pavolloffay \ud83d\ude01", "author": "trask", "createdAt": "2020-11-17T06:06:03Z", "path": "testing/agent-exporter/src/main/java/io/opentelemetry/javaagent/testing/bytebuddy/TestByteBuddyAgentCustomizer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package io.opentelemetry.javaagent.testing.bytebuddy;\n+\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.spi.ByteBuddyAgentCustomizer;\n+\n+@AutoService(ByteBuddyAgentCustomizer.class)\n+public class TestByteBuddyAgentCustomizer implements ByteBuddyAgentCustomizer {", "originalCommit": "dd1eff3977111121bbcd03a57cc04edb5ce5421c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzNjA3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524936076", "bodyText": "wow that was fast :P. Accessing the engine seems to be useful :D", "author": "pavolloffay", "createdAt": "2020-11-17T07:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwMzg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNDg3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524904872", "bodyText": "looks like these can go away too \ud83c\udf89", "author": "trask", "createdAt": "2020-11-17T06:09:34Z", "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/AgentTestRunner.java", "diffHunk": "@@ -75,12 +68,6 @@\n \n   protected static final Tracer TEST_TRACER;\n \n-  protected static final Set<String> TRANSFORMED_CLASSES_NAMES = Sets.newConcurrentHashSet();\n-  protected static final Set<String> TRANSFORMED_CLASSES_NAMES_THAT_SHOULD_HAVE_BEEN_IGNORED =\n-      Sets.newConcurrentHashSet();\n-  private static final AtomicInteger INSTRUMENTATION_ERROR_COUNT = new AtomicInteger(0);\n-  private static final TestRunnerListener TEST_LISTENER = new TestRunnerListener();\n-\n   private static final Instrumentation INSTRUMENTATION;\n   private static volatile ClassFileTransformer activeTransformer = null;", "originalCommit": "dd1eff3977111121bbcd03a57cc04edb5ce5421c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNjYzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524906639", "bodyText": "maybe we need to add opentelemetry-api-beta as default instrumentation for all tests? lots of tests use TraceUtils.runUnderTrace()", "author": "trask", "createdAt": "2020-11-17T06:15:05Z", "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/AgentTestRunner.java", "diffHunk": "@@ -105,31 +92,13 @@\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n               .build());\n     }\n-    OpenTelemetrySdk.getGlobalTracerManagement().addSpanProcessor(TEST_WRITER);\n     TEST_TRACER = OpenTelemetry.getGlobalTracer(\"io.opentelemetry.auto\");", "originalCommit": "dd1eff3977111121bbcd03a57cc04edb5ce5421c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNzcyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524907728", "bodyText": "Ah I guess that's because previously SDK and API were in the same classloader without bridging so it wasn't necessary, now we do need it. Sounds good", "author": "anuraaga", "createdAt": "2020-11-17T06:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNjYzOQ=="}], "type": "inlineReview"}, {"oid": "d067842af91ce94aa841260ddd3693058aa3734e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d067842af91ce94aa841260ddd3693058aa3734e", "message": "Config updates work", "committedDate": "2020-11-17T07:48:20Z", "type": "commit"}, {"oid": "b1cacb1257333f9cf33e6fce772b286c15515eb4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1cacb1257333f9cf33e6fce772b286c15515eb4", "message": "Some cleanup", "committedDate": "2020-11-17T08:00:20Z", "type": "commit"}, {"oid": "ff513ae6e0b0a23cd9077194827fe46f390ce4c8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ff513ae6e0b0a23cd9077194827fe46f390ce4c8", "message": "Exclude bootstrap from the testRuntimeClasspath so tooling can continue to live on it.", "committedDate": "2020-11-17T08:17:49Z", "type": "commit"}, {"oid": "4e34a57573487606184c22bca71ce3c0e29e08a9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e34a57573487606184c22bca71ce3c0e29e08a9", "message": "Exclude bootstrap from all test runtime classpaths.", "committedDate": "2020-11-17T08:43:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk4NDQ5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524984494", "bodyText": "I copied the redefinition strategy from other usages in this file but have no clue what I'm doing :P", "author": "anuraaga", "createdAt": "2020-11-17T08:55:52Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -65,24 +72,29 @@ public static Instrumentation getInstrumentation() {\n \n   public static void installBytebuddyAgent(Instrumentation inst) {\n     if (Config.get().getBooleanProperty(TRACE_ENABLED_CONFIG, true)) {\n-      installBytebuddyAgent(inst, false);\n+      ACTIVE_TRANSFORMER = doInstallBytebuddyAgent(inst);\n     } else {\n       log.debug(\"Tracing is disabled, not installing instrumentations.\");\n     }\n   }\n \n+  public static void resetInstrumentation() {\n+    Instrumentation instrumentation = INSTRUMENTATION;\n+    ResettableClassFileTransformer activeTransformer = ACTIVE_TRANSFORMER;\n+    if (instrumentation != null && activeTransformer != null) {\n+      activeTransformer.reset(INSTRUMENTATION, AgentBuilder.RedefinitionStrategy.RETRANSFORMATION);", "originalCommit": "4e34a57573487606184c22bca71ce3c0e29e08a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "42d2c7ab0741b2f6f7aa340822a73bea1facd9b0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42d2c7ab0741b2f6f7aa340822a73bea1facd9b0", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into run-tests-with-agent", "committedDate": "2020-11-18T04:47:20Z", "type": "commit"}, {"oid": "388493b5637403698248c93a5228ae6ff1771c4b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/388493b5637403698248c93a5228ae6ff1771c4b", "message": "Clean", "committedDate": "2020-11-18T05:00:22Z", "type": "commit"}, {"oid": "6757a115d5dfb1d7c3a2d972f62817beb8cb1e5d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6757a115d5dfb1d7c3a2d972f62817beb8cb1e5d", "message": "testInstrumentation", "committedDate": "2020-11-18T06:02:27Z", "type": "commit"}, {"oid": "78ff98d586578f8f8de0184a754a1c108ec1b1c1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78ff98d586578f8f8de0184a754a1c108ec1b1c1", "message": "Shrink agent testing jar", "committedDate": "2020-11-18T08:31:22Z", "type": "commit"}, {"oid": "808028505e8d36cc6e5423e629d2b6e7443ab5d9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/808028505e8d36cc6e5423e629d2b6e7443ab5d9", "message": "Fixes", "committedDate": "2020-11-18T09:59:55Z", "type": "commit"}, {"oid": "ec435b69871db64fd850ed34dab18131e7e5317c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec435b69871db64fd850ed34dab18131e7e5317c", "message": "Fixes", "committedDate": "2020-11-20T11:37:28Z", "type": "commit"}, {"oid": "916fc2e87512df1d80a2bde2fa2161e882650645", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/916fc2e87512df1d80a2bde2fa2161e882650645", "message": "Remove iscompleted", "committedDate": "2020-11-20T11:43:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNTY0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r527635643", "bodyText": "After getting the shading working, I found the aws SDK instrumentation probably currently has a bug, because the helpers are injected when matching HTTP classes, so the first client in an app couldn't be instrumented. Hooray for running tests with real agent.", "author": "anuraaga", "createdAt": "2020-11-20T11:40:58Z", "path": "instrumentation/aws-sdk/aws-sdk-2.2/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/awssdk/v2_2/ExecutionInterceptorInstrumentation.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.awssdk.v2_2;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+final class ExecutionInterceptorInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // This is essentially the entry point of the AWS SDK, all clients implement it. We can ensure", "originalCommit": "ec435b69871db64fd850ed34dab18131e7e5317c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNzQ1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r527637452", "bodyText": "This statement is wrong I think - async instrumentation would have root spans completing early. I'm not sure why this seemed to work ok before my change, but I couldn't get most async tests to pass until changing the waiting logic to be closer to what we do in smoke tests.", "author": "anuraaga", "createdAt": "2020-11-20T11:44:39Z", "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/InMemoryExporter.java", "diffHunk": "@@ -290,37 +214,8 @@ private long getMinSpanOrder(List<SpanData> spans) {\n     return orderedSpans;\n   }\n \n-  private void sortOneLevel(List<Node> nodes) {\n-    Collections.sort(\n-        nodes,\n-        new Comparator<Node>() {\n-          @Override\n-          public int compare(Node node1, Node node2) {\n-            return Ints.compare(getSpanOrder(node1.span), getSpanOrder(node2.span));\n-          }\n-        });\n-  }\n-\n-  private int getSpanOrder(SpanData span) {\n-    Integer order = spanOrders.get(span.getSpanId());\n-    if (order == null) {\n-      throw new IllegalStateException(\"order not found for span: \" + span);\n-    }\n-    return order;\n-  }\n-\n-  // trace is completed if root span is present", "originalCommit": "916fc2e87512df1d80a2bde2fa2161e882650645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "06ca46962767f547a3c33e9abffd6d8ca1c62808", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/06ca46962767f547a3c33e9abffd6d8ca1c62808", "message": "Remove dependency on agent classes in tests.", "committedDate": "2020-11-21T10:17:26Z", "type": "commit"}, {"oid": "d229ab8454c734b32e287b6dc6142d32f6c225b2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d229ab8454c734b32e287b6dc6142d32f6c225b2", "message": "Merge remote-tracking branch 'upstream/master' into pr-run-tests-with-agent2", "committedDate": "2020-11-21T21:05:52Z", "type": "commit"}, {"oid": "1d3de5aaf24b6730546f7bc4b4e0eecfd7038495", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1d3de5aaf24b6730546f7bc4b4e0eecfd7038495", "message": "FIXUP", "committedDate": "2020-11-21T21:26:57Z", "type": "commit"}, {"oid": "3552033d6bc91636c17245fc1b1fc31d0e7d7db8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3552033d6bc91636c17245fc1b1fc31d0e7d7db8", "message": "Fix for no propagators being installed", "committedDate": "2020-11-21T22:15:11Z", "type": "commit"}, {"oid": "0e1cf896034025da3009081131bf855b1f7b9217", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e1cf896034025da3009081131bf855b1f7b9217", "message": "Partially fix opentelemetry-api instrumentation tests", "committedDate": "2020-11-22T00:56:58Z", "type": "commit"}, {"oid": "ca5a1189ae1f6f494165a9c55c47638acaf329f2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ca5a1189ae1f6f494165a9c55c47638acaf329f2", "message": "Rename", "committedDate": "2020-11-22T01:00:23Z", "type": "commit"}, {"oid": "2356d5b441cd08fffc006ba96680fe84644d3c4c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2356d5b441cd08fffc006ba96680fe84644d3c4c", "message": "fixup! Rename", "committedDate": "2020-11-22T01:27:47Z", "type": "commit"}, {"oid": "f90fdaa703c1f6d596c076f3d910f18b3f6b7880", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f90fdaa703c1f6d596c076f3d910f18b3f6b7880", "message": "Reduce test dependency on OpenTelemetry API", "committedDate": "2020-11-22T01:32:47Z", "type": "commit"}, {"oid": "58dae8a9b541eec29810f921d2a2f52553b2842f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/58dae8a9b541eec29810f921d2a2f52553b2842f", "message": "Revert \"Reduce test dependency on OpenTelemetry API\"\n\nThis reverts commit f90fdaa703c1f6d596c076f3d910f18b3f6b7880.", "committedDate": "2020-11-22T01:37:01Z", "type": "commit"}, {"oid": "8bd1a0dbbe7d9e3ca78d5ad702abeb633342160c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8bd1a0dbbe7d9e3ca78d5ad702abeb633342160c", "message": "No need to set propagators in AgentTestRunner", "committedDate": "2020-11-22T01:48:48Z", "type": "commit"}, {"oid": "c9e6cf72bf65abd607e064e49b0dca4757d35346", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c9e6cf72bf65abd607e064e49b0dca4757d35346", "message": "Remove no longer needed code", "committedDate": "2020-11-22T01:51:03Z", "type": "commit"}, {"oid": "af1b1a97789fa0e422de03b81b1a47116ff4af9c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/af1b1a97789fa0e422de03b81b1a47116ff4af9c", "message": "Basic ContextBridgeTest", "committedDate": "2020-11-22T02:46:54Z", "type": "commit"}, {"oid": "915767e648c85c5860db0a817316b5aa3ddbd17e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/915767e648c85c5860db0a817316b5aa3ddbd17e", "message": "Remove unnecessary verification", "committedDate": "2020-11-22T02:57:55Z", "type": "commit"}, {"oid": "da51582b3a7819905cc2b0f71d0404fdd97066ac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/da51582b3a7819905cc2b0f71d0404fdd97066ac", "message": "Revert \"Remove unnecessary verification\"\n\nThis reverts commit 915767e648c85c5860db0a817316b5aa3ddbd17e.", "committedDate": "2020-11-22T02:58:55Z", "type": "commit"}, {"oid": "678a868d9ec5a74bcd797cdcb7b55006b9e9eb6d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/678a868d9ec5a74bcd797cdcb7b55006b9e9eb6d", "message": "Remove mock context", "committedDate": "2020-11-22T03:10:16Z", "type": "commit"}, {"oid": "6b76dff8993ed400e152e968a28af59f8e831a7c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6b76dff8993ed400e152e968a28af59f8e831a7c", "message": "Spotless", "committedDate": "2020-11-22T03:11:27Z", "type": "commit"}, {"oid": "011b1063341c93dba3272184727c211f73bd295f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/011b1063341c93dba3272184727c211f73bd295f", "message": "Merge remote-tracking branch 'upstream/master' into pr-run-tests-with-agent", "committedDate": "2020-11-23T23:55:05Z", "type": "commit"}, {"oid": "c278b1345a1ef67e7748586a04f7c647998e6fe9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c278b1345a1ef67e7748586a04f7c647998e6fe9", "message": "Fix guava test\n\nThis behavior changed when removing the restriction for context\npropagation across executors only when context contains valid span.", "committedDate": "2020-11-24T01:48:03Z", "type": "commit"}, {"oid": "6b5d90ac247d36e3e6fb72ee597e3c6efc938d30", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6b5d90ac247d36e3e6fb72ee597e3c6efc938d30", "message": "Merge remote-tracking branch 'upstream/master' into pr-run-tests-with-agent", "committedDate": "2020-11-24T01:57:23Z", "type": "commit"}, {"oid": "b0d4249190716daa77934e0129fd32a40e94cbe5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b0d4249190716daa77934e0129fd32a40e94cbe5", "message": "Fix jdbc tests", "committedDate": "2020-11-24T03:58:47Z", "type": "commit"}, {"oid": "faf8e85ca61c36f76ea1f4a0401db21acad96126", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/faf8e85ca61c36f76ea1f4a0401db21acad96126", "message": "Compile failures", "committedDate": "2020-11-24T05:03:06Z", "type": "commit"}, {"oid": "57492db42615d9ec3683f23ac27432fef35a3d5e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/57492db42615d9ec3683f23ac27432fef35a3d5e", "message": "Fix cassandra test and jaxrs-1 compile failure.", "committedDate": "2020-11-24T05:52:11Z", "type": "commit"}, {"oid": "0c62f64f4cb44c5430477bd1d10d1ee5ec808b06", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0c62f64f4cb44c5430477bd1d10d1ee5ec808b06", "message": "Ignore kubernetes test for now", "committedDate": "2020-11-24T06:31:21Z", "type": "commit"}, {"oid": "ef55977c769cb50d38f2f7fa4354ac444e7bba53", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ef55977c769cb50d38f2f7fa4354ac444e7bba53", "message": "Disable oshi assertion.", "committedDate": "2020-11-24T06:41:31Z", "type": "commit"}, {"oid": "e66eb664d64b4d5f6a1202f4736b30b2f23e50cb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e66eb664d64b4d5f6a1202f4736b30b2f23e50cb", "message": "Comment out more unit tests", "committedDate": "2020-11-24T07:37:24Z", "type": "commit"}, {"oid": "c2e72263393eb94436c693edafd75b16c3695a04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c2e72263393eb94436c693edafd75b16c3695a04", "message": "Don't apply unnecessary plugins at top level.", "committedDate": "2020-11-24T07:39:54Z", "type": "commit"}, {"oid": "96a9ed1b56267cea2e92f55b8d5e35d5173078ab", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/96a9ed1b56267cea2e92f55b8d5e35d5173078ab", "message": "Merge branch 'top-level-less-plugins' into run-tests-with-agent", "committedDate": "2020-11-24T07:47:11Z", "type": "commit"}, {"oid": "066cf2919df0577f92801ca16ddc2ab4dd043955", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/066cf2919df0577f92801ca16ddc2ab4dd043955", "message": "Use agent way to set xray propagator.", "committedDate": "2020-11-24T08:10:46Z", "type": "commit"}, {"oid": "d3c5c8c95fbd3b448b7fa8a83aa16647283aad2c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d3c5c8c95fbd3b448b7fa8a83aa16647283aad2c", "message": "More", "committedDate": "2020-11-24T08:14:30Z", "type": "commit"}, {"oid": "15821e91ff8382cb09878105880fd7fa834b66b4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/15821e91ff8382cb09878105880fd7fa834b66b4", "message": "Almost there", "committedDate": "2020-11-24T09:23:32Z", "type": "commit"}, {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into run-tests-with-agent", "committedDate": "2020-11-24T09:25:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0NDExNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r529344117", "bodyText": "Test was failing since groovy eagerly calls getEnclosingClass() on almost everything! But technically this was a bug in our agent since there's nothing stopping (other than mostly having no use case for it) a user from calling getEnclsoingClass() too. As a general pattern we should avoid helper classes that are inner to the instrumentation.", "author": "anuraaga", "createdAt": "2020-11-24T09:28:18Z", "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/jaxrs-client-2.0-jersey-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrsclient/v2_0/JerseyClientInstrumentationModule.java", "diffHunk": "@@ -104,56 +101,4 @@ public static void handleError(\n     }\n   }\n \n-  public static class WrappedFuture<T> implements Future<T> {", "originalCommit": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e9507090449894f0e6a60331449e566e27812d45", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e9507090449894f0e6a60331449e566e27812d45", "message": "Merge remote-tracking branch 'upstream/master' into pr-run-tests-with-agent", "committedDate": "2020-11-24T19:14:15Z", "type": "commit"}, {"oid": "415d8f7fd267b97b9c7f574b60e23f91b36f743e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/415d8f7fd267b97b9c7f574b60e23f91b36f743e", "message": "Split out ConfigUtils for non-agent instrumentation tests.", "committedDate": "2020-11-25T05:18:12Z", "type": "commit"}, {"oid": "4e7fc8c89ca360eb0abd1825d5a504af1dfea6a4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e7fc8c89ca360eb0abd1825d5a504af1dfea6a4", "message": "Remove testing-bootstrap", "committedDate": "2020-11-25T05:20:25Z", "type": "commit"}, {"oid": "a3aa8c621c8fefc35b367392fcfc72de6f1de0c5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a3aa8c621c8fefc35b367392fcfc72de6f1de0c5", "message": "Remove Shaded SDK projects.", "committedDate": "2020-11-25T05:27:24Z", "type": "commit"}, {"oid": "1e72ea15f0506ae8f7cef4d9669075deebe0a375", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e72ea15f0506ae8f7cef4d9669075deebe0a375", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-11-27T22:15:54Z", "type": "commit"}, {"oid": "904382ab4ad46c0b2355b48671c83f953c375c1e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/904382ab4ad46c0b2355b48671c83f953c375c1e", "message": "Convert HibernateDecorator to HibernateTracer", "committedDate": "2020-11-27T23:36:56Z", "type": "commit"}, {"oid": "4b062bdecb7837ff45b3230ba698b6bba3e8874e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4b062bdecb7837ff45b3230ba698b6bba3e8874e", "message": "Convert TwilioDecorator to TwilioTracer", "committedDate": "2020-11-27T23:49:48Z", "type": "commit"}, {"oid": "6f7c19607c2e09e134b07d220789f47eae368a89", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6f7c19607c2e09e134b07d220789f47eae368a89", "message": "Delete BaseDecorator", "committedDate": "2020-11-28T00:06:24Z", "type": "commit"}, {"oid": "428e29f74a5e0d9e24e93eebf87b676682390d0f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/428e29f74a5e0d9e24e93eebf87b676682390d0f", "message": "Remove decorator package", "committedDate": "2020-11-28T00:08:38Z", "type": "commit"}, {"oid": "6148a2652c0c5b0fad6b89f19b3e31bc5a44796c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6148a2652c0c5b0fad6b89f19b3e31bc5a44796c", "message": "More renames", "committedDate": "2020-11-28T00:10:14Z", "type": "commit"}, {"oid": "d937ca60616b8fce1eb896fcfc43a9a388079966", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d937ca60616b8fce1eb896fcfc43a9a388079966", "message": "Improve tests that rely on config", "committedDate": "2020-11-28T00:25:23Z", "type": "commit"}, {"oid": "bef075ba31353fff7ff444d7cc63c6df8e92e882", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bef075ba31353fff7ff444d7cc63c6df8e92e882", "message": "RedisCommandNormalizerTest", "committedDate": "2020-11-28T00:28:13Z", "type": "commit"}, {"oid": "265c5ece366d1bd957e1f0049e6a8e75e2217ead", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/265c5ece366d1bd957e1f0049e6a8e75e2217ead", "message": "Fix", "committedDate": "2020-11-28T00:37:04Z", "type": "commit"}, {"oid": "5b12e118e686de4b0679d4605c115fe4c8bf78cc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5b12e118e686de4b0679d4605c115fe4c8bf78cc", "message": "Merge branch 'remove-decorators' into run-tests-with-agent", "committedDate": "2020-11-28T00:43:14Z", "type": "commit"}, {"oid": "d25cb3725c612f04a8ca83470d60eeee1513ede5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d25cb3725c612f04a8ca83470d60eeee1513ede5", "message": "Remove testing ConfigUtils", "committedDate": "2020-11-28T00:45:08Z", "type": "commit"}, {"oid": "af6953cd80dbea61d200d867c418ab21859b2d0f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/af6953cd80dbea61d200d867c418ab21859b2d0f", "message": "Update more config property names", "committedDate": "2020-11-28T01:06:26Z", "type": "commit"}, {"oid": "59d654e88238de03e5b167be58b0fee0735a6eaa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/59d654e88238de03e5b167be58b0fee0735a6eaa", "message": "Spotless", "committedDate": "2020-11-28T02:16:51Z", "type": "commit"}, {"oid": "adba247ce0a31137cbc268f36e56accd446479d1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/adba247ce0a31137cbc268f36e56accd446479d1", "message": "Split out methods and otel-annotations modules", "committedDate": "2020-11-28T02:51:54Z", "type": "commit"}, {"oid": "911f77451e48821e0dd05664aa9f275881f670d9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/911f77451e48821e0dd05664aa9f275881f670d9", "message": "Merge branch 'update-more-config-property-names' into run-tests-with-agent", "committedDate": "2020-11-28T03:03:46Z", "type": "commit"}, {"oid": "29002ead6473aa12648ec0981d0ceb553105f57a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/29002ead6473aa12648ec0981d0ceb553105f57a", "message": "Bring back hystrix internal prop, I thought it was instrumentation prop", "committedDate": "2020-11-28T03:07:50Z", "type": "commit"}, {"oid": "40cb995c037612cbfd05e6569c40450a16a436ad", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/40cb995c037612cbfd05e6569c40450a16a436ad", "message": "Hystrix config", "committedDate": "2020-11-28T03:10:04Z", "type": "commit"}, {"oid": "aea5afef03d1ae1520f26fe2b1fe9e98fa399000", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/aea5afef03d1ae1520f26fe2b1fe9e98fa399000", "message": "WORK", "committedDate": "2020-11-28T03:27:33Z", "type": "commit"}, {"oid": "72dde42582ea7d5e44a3080270891c51cde3f69f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72dde42582ea7d5e44a3080270891c51cde3f69f", "message": "Rename defaultEnabled property to default-enabled", "committedDate": "2020-11-28T03:30:26Z", "type": "commit"}, {"oid": "9c855ed4d7c4ce641dca4f9d790a59c58b7c871a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c855ed4d7c4ce641dca4f9d790a59c58b7c871a", "message": "Fix external-annotations test", "committedDate": "2020-11-28T03:36:33Z", "type": "commit"}, {"oid": "375ceae97117466e8418cdbe61cd5910195a9a9e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/375ceae97117466e8418cdbe61cd5910195a9a9e", "message": "Merge branch 'split-out-two-more-modules' into run-tests-with-agent", "committedDate": "2020-11-28T03:41:35Z", "type": "commit"}, {"oid": "b867b30d59601d3097badc4798c4d5826bc26ea7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b867b30d59601d3097badc4798c4d5826bc26ea7", "message": "Merge branch 'rename-default-enabled-prop' into run-tests-with-agent", "committedDate": "2020-11-28T03:43:05Z", "type": "commit"}, {"oid": "c1cb5695b275fdd306b46019cbd904d7bd53ff16", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c1cb5695b275fdd306b46019cbd904d7bd53ff16", "message": "morework", "committedDate": "2020-11-28T04:13:17Z", "type": "commit"}, {"oid": "987daf614100411fb7595e3f546ec00ff450cf73", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/987daf614100411fb7595e3f546ec00ff450cf73", "message": "Fix ConfiguredTraceAnnotationsTest", "committedDate": "2020-11-28T04:24:37Z", "type": "commit"}, {"oid": "4ab50b7992f242d7e4010c9fa5c526e4cfa31b79", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4ab50b7992f242d7e4010c9fa5c526e4cfa31b79", "message": "Merge branch 'split-out-two-more-modules' into run-tests-with-agent", "committedDate": "2020-11-28T04:33:25Z", "type": "commit"}, {"oid": "818b84e02549129b88084143afc27a1ffa24df5d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/818b84e02549129b88084143afc27a1ffa24df5d", "message": "Remove ConfigUtils", "committedDate": "2020-11-28T04:45:14Z", "type": "commit"}, {"oid": "fcb702678e66530a3922484d5b6df07830fed05f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fcb702678e66530a3922484d5b6df07830fed05f", "message": "Removing ConfigUtils still", "committedDate": "2020-11-28T04:46:55Z", "type": "commit"}, {"oid": "10e1903dad6a286856ab59bf66f1e485006e6255", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/10e1903dad6a286856ab59bf66f1e485006e6255", "message": "Fixing methods instrumentation test", "committedDate": "2020-11-28T05:42:19Z", "type": "commit"}, {"oid": "42c891f11ff4a7b14279466767d9590695e58ef1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42c891f11ff4a7b14279466767d9590695e58ef1", "message": "Fix external-annotations tests", "committedDate": "2020-11-28T05:58:03Z", "type": "commit"}, {"oid": "dec14a574f2a7e9536a4d6127e6b2b31eb9bfca5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dec14a574f2a7e9536a4d6127e6b2b31eb9bfca5", "message": "Fix opentelemetry-annotations-1.0 tests", "committedDate": "2020-11-28T06:03:08Z", "type": "commit"}, {"oid": "fd2f9b914b29c87a488c2621c379a0438081ebbe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fd2f9b914b29c87a488c2621c379a0438081ebbe", "message": "Less ConfigUtils", "committedDate": "2020-11-28T06:22:35Z", "type": "commit"}, {"oid": "17240a67c9a2600a949ffdae676e0ad159197769", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17240a67c9a2600a949ffdae676e0ad159197769", "message": "Working on testing-common", "committedDate": "2020-11-28T06:32:08Z", "type": "commit"}, {"oid": "ca24ed1226a42d7aaa6256c11bebdd8adde3b204", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ca24ed1226a42d7aaa6256c11bebdd8adde3b204", "message": "Remove ConfigUtils from kafka", "committedDate": "2020-11-28T07:34:16Z", "type": "commit"}, {"oid": "a13ef3ffefeddbb8f8127194ee1a0a9594ac82d2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a13ef3ffefeddbb8f8127194ee1a0a9594ac82d2", "message": "Remove ConfigUtils", "committedDate": "2020-11-28T07:36:19Z", "type": "commit"}, {"oid": "f83c8dacf0700c8219cd04cb1266fee65c53d77c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f83c8dacf0700c8219cd04cb1266fee65c53d77c", "message": "Delete AgentInstallerAccess and ConfigAccess", "committedDate": "2020-11-28T07:39:18Z", "type": "commit"}, {"oid": "4cfe7d93f4c93ac10a79fbbe8b31c9e4bd2768bd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4cfe7d93f4c93ac10a79fbbe8b31c9e4bd2768bd", "message": "Temporarily ignore some tests", "committedDate": "2020-11-28T07:41:24Z", "type": "commit"}, {"oid": "d4bda6a17b6c7da4854dca96609906b1b094f5c4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4bda6a17b6c7da4854dca96609906b1b094f5c4", "message": "Fix compilation errors", "committedDate": "2020-11-28T08:08:48Z", "type": "commit"}, {"oid": "05d6e5c82852291159a9644fce3f3421f609d4b9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/05d6e5c82852291159a9644fce3f3421f609d4b9", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent", "committedDate": "2020-11-28T19:15:33Z", "type": "commit"}, {"oid": "a781ce7d1c0586f4c936091855cea4003465b3ae", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a781ce7d1c0586f4c936091855cea4003465b3ae", "message": "Extract unittest from kubernetes-client", "committedDate": "2020-11-28T19:33:40Z", "type": "commit"}, {"oid": "a44d7ea47b084fa3d96f9874bdfdf1ade3c681fc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a44d7ea47b084fa3d96f9874bdfdf1ade3c681fc", "message": "Extract unittest from jdbc", "committedDate": "2020-11-28T19:38:33Z", "type": "commit"}]}