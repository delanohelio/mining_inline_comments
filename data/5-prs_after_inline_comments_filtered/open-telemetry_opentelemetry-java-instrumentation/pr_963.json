{"pr_number": 963, "pr_title": "add some JMS attributes", "pr_createdAt": "2020-08-13T15:36:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963", "timeline": [{"oid": "0391a06e0d9f6a24f5ed5fb8404f3f4715ca309c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0391a06e0d9f6a24f5ed5fb8404f3f4715ca309c", "message": "add some JMS attributes\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-08-13T15:35:57Z", "type": "commit"}, {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/11d3e435bf71d8e0c2006019b71a26b11f6a169b", "message": "remove semicolon\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-08-13T15:48:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODIzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470208239", "bodyText": "i think good to narrow down the try/catch, and log exception at debug level\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                    String messageID = message.getJMSMessageID();\n          \n          \n            \n                    if (messageID != null) {\n          \n          \n            \n                      SemanticAttributes.MESSAGING_MESSAGE_ID.set(span, messageID);\n          \n          \n            \n                    }\n          \n          \n            \n                  } catch (JMSException e) {\n          \n          \n            \n                  }\n          \n          \n            \n                  String messageID = null;\n          \n          \n            \n                  try {\n          \n          \n            \n                    messageID = message.getJMSMessageID();\n          \n          \n            \n                  } catch (JMSException e) {\n          \n          \n            \n                    log.debug(e.getMessage(), e);\n          \n          \n            \n                  }\n          \n          \n            \n                  if (messageID != null) {\n          \n          \n            \n                    SemanticAttributes.MESSAGING_MESSAGE_ID.set(span, messageID);\n          \n          \n            \n                  }", "author": "trask", "createdAt": "2020-08-13T19:51:01Z", "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSDecorator.java", "diffHunk": "@@ -80,4 +83,35 @@ public static String toSpanName(Destination destination) {\n     }\n     return \"destination\";\n   }\n+\n+  public void afterStart(Span span, String spanName, Message message) {\n+    if (spanName.startsWith(\"queue/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"queue\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"queue/\", \"\"));\n+    } else if (spanName.startsWith(\"topic/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"topic\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"topic/\", \"\"));\n+    }\n+    if (spanName.equals(\"queue/<temporary>\") || spanName.equals(\"topic/<temporary>\")) {\n+      SemanticAttributes.MESSAGING_TEMP_DESTINATION.set(span, true);\n+    }\n+\n+    if (message != null) {\n+      try {\n+        String messageID = message.getJMSMessageID();\n+        if (messageID != null) {\n+          SemanticAttributes.MESSAGING_MESSAGE_ID.set(span, messageID);\n+        }\n+      } catch (JMSException e) {\n+      }", "originalCommit": "11d3e435bf71d8e0c2006019b71a26b11f6a169b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzMjI0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470532249", "bodyText": "done", "author": "malafeev", "createdAt": "2020-08-14T10:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODM1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470208357", "bodyText": "same here", "author": "trask", "createdAt": "2020-08-13T19:51:14Z", "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSDecorator.java", "diffHunk": "@@ -80,4 +83,35 @@ public static String toSpanName(Destination destination) {\n     }\n     return \"destination\";\n   }\n+\n+  public void afterStart(Span span, String spanName, Message message) {\n+    if (spanName.startsWith(\"queue/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"queue\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"queue/\", \"\"));\n+    } else if (spanName.startsWith(\"topic/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"topic\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"topic/\", \"\"));\n+    }\n+    if (spanName.equals(\"queue/<temporary>\") || spanName.equals(\"topic/<temporary>\")) {\n+      SemanticAttributes.MESSAGING_TEMP_DESTINATION.set(span, true);\n+    }\n+\n+    if (message != null) {\n+      try {\n+        String messageID = message.getJMSMessageID();\n+        if (messageID != null) {\n+          SemanticAttributes.MESSAGING_MESSAGE_ID.set(span, messageID);\n+        }\n+      } catch (JMSException e) {\n+      }\n+\n+      try {\n+        String correlationID = message.getJMSCorrelationID();\n+        if (correlationID != null) {\n+          SemanticAttributes.MESSAGING_CONVERSATION_ID.set(span, correlationID);\n+        }\n+      } catch (JMSException e) {\n+      }", "originalCommit": "11d3e435bf71d8e0c2006019b71a26b11f6a169b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODkyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470208928", "bodyText": "and call super.afterStart(span) from inside afterStart(Span, String, Message)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  DECORATE.afterStart(span);\n          \n          \n            \n                  DECORATE.afterStart(span, spanName, message);\n          \n          \n            \n                  DECORATE.afterStart(span, spanName, message);", "author": "trask", "createdAt": "2020-08-13T19:52:29Z", "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSMessageListenerInstrumentation.java", "diffHunk": "@@ -79,12 +79,13 @@ public JMSMessageListenerInstrumentation() {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static SpanWithScope onEnter(@Advice.Argument(0) final Message message) {\n \n-      Span.Builder spanBuilder =\n-          TRACER.spanBuilder(DECORATE.spanNameForConsumer(message)).setSpanKind(CONSUMER);\n+      final String spanName = DECORATE.spanNameForConsumer(message);\n+      Span.Builder spanBuilder = TRACER.spanBuilder(spanName).setSpanKind(CONSUMER);\n       spanBuilder.setParent(extract(message, GETTER));\n \n       Span span = spanBuilder.startSpan();\n       DECORATE.afterStart(span);\n+      DECORATE.afterStart(span, spanName, message);", "originalCommit": "11d3e435bf71d8e0c2006019b71a26b11f6a169b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzMjMxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470532311", "bodyText": "done", "author": "malafeev", "createdAt": "2020-08-14T10:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTA2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470209068", "bodyText": "same", "author": "trask", "createdAt": "2020-08-13T19:52:43Z", "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSMessageProducerInstrumentation.java", "diffHunk": "@@ -105,12 +105,10 @@ public static SpanWithScope onEnter(\n         defaultDestination = null;\n       }\n \n-      Span span =\n-          TRACER\n-              .spanBuilder(DECORATE.spanNameForProducer(message, defaultDestination))\n-              .setSpanKind(PRODUCER)\n-              .startSpan();\n+      final String spanName = DECORATE.spanNameForProducer(message, defaultDestination);\n+      Span span = TRACER.spanBuilder(spanName).setSpanKind(PRODUCER).startSpan();\n       DECORATE.afterStart(span);\n+      DECORATE.afterStart(span, spanName, message);", "originalCommit": "11d3e435bf71d8e0c2006019b71a26b11f6a169b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzMjM3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470532370", "bodyText": "done", "author": "malafeev", "createdAt": "2020-08-14T10:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTE3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470209171", "bodyText": "same", "author": "trask", "createdAt": "2020-08-13T19:52:51Z", "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSMessageProducerInstrumentation.java", "diffHunk": "@@ -146,12 +144,11 @@ public static SpanWithScope onEnter(\n         return null;\n       }\n \n-      Span span =\n-          TRACER\n-              .spanBuilder(DECORATE.spanNameForProducer(message, destination))\n-              .setSpanKind(PRODUCER)\n-              .startSpan();\n+      final String spanName = DECORATE.spanNameForProducer(message, destination);\n+\n+      Span span = TRACER.spanBuilder(spanName).setSpanKind(PRODUCER).startSpan();\n       DECORATE.afterStart(span);\n+      DECORATE.afterStart(span, spanName, message);", "originalCommit": "11d3e435bf71d8e0c2006019b71a26b11f6a169b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzMjQ3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470532470", "bodyText": "done", "author": "malafeev", "createdAt": "2020-08-14T10:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNzE2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470237165", "bodyText": "when we move to the new Tracer design, and do both JMSDecorator.toSpanName() and afterStart() inside of startSpan, we can consolidate the conditionals between these two methods (and remove the startsWith logic)", "author": "trask", "createdAt": "2020-08-13T20:44:35Z", "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSDecorator.java", "diffHunk": "@@ -80,4 +83,35 @@ public static String toSpanName(Destination destination) {\n     }\n     return \"destination\";\n   }\n+\n+  public void afterStart(Span span, String spanName, Message message) {\n+    if (spanName.startsWith(\"queue/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"queue\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"queue/\", \"\"));\n+    } else if (spanName.startsWith(\"topic/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"topic\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"topic/\", \"\"));\n+    }\n+    if (spanName.equals(\"queue/<temporary>\") || spanName.equals(\"topic/<temporary>\")) {\n+      SemanticAttributes.MESSAGING_TEMP_DESTINATION.set(span, true);\n+    }", "originalCommit": "11d3e435bf71d8e0c2006019b71a26b11f6a169b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzMjgzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470532833", "bodyText": "yeah", "author": "malafeev", "createdAt": "2020-08-14T10:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNzE2NQ=="}], "type": "inlineReview"}, {"oid": "7c3814dc88381ac7bc5dffdbac4f1c444459791c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c3814dc88381ac7bc5dffdbac4f1c444459791c", "message": "Merge remote-tracking branch 'upstream/master' into malafeev-merge", "committedDate": "2020-08-14T06:26:27Z", "type": "commit"}, {"oid": "0e1b4048007603408ae5e97eb11c229648384865", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e1b4048007603408ae5e97eb11c229648384865", "message": "fix review comments\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-08-14T10:02:06Z", "type": "commit"}, {"oid": "9171eb07f7747a32001a79f8f69ff03ce8c3b9a2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9171eb07f7747a32001a79f8f69ff03ce8c3b9a2", "message": "get rid of unused imports\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-08-14T10:17:42Z", "type": "commit"}]}