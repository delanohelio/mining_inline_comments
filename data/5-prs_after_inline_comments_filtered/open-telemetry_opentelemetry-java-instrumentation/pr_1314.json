{"pr_number": 1314, "pr_title": "feat(cassandra4): more attributes", "pr_createdAt": "2020-10-03T00:56:26Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTk3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r499201971", "bodyText": "I think in parallel with the spec change we could proceed if this is scoped to cassandra. How about moving these into the cassandra package and prefixing with that for now? @trask what do you think?", "author": "anuraaga", "createdAt": "2020-10-04T03:32:30Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/MoreAttributes.java", "diffHunk": "@@ -21,4 +21,11 @@\n   public static final String HTTP_FRAGMENT = \"http.fragment.string\";\n \n   public static final String USER_NAME = \"user.principal\";\n+  public static final String QUERY_PAGE_SIZE = \"query.pageSize\";", "originalCommit": "39b9bdd054a5a401f1402ebcb4a135f8d9a8fd8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMzUwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r499203506", "bodyText": "I think in parallel with the spec change we could proceed if this is scoped to cassandra\n\nOnce a spec PR is opened, I'm good merging something here that implements the initial spec PR (and we can sync it up later with whatever ends up getting approved/merged in the spec).\n\nHow about moving these into the cassandra package and prefixing with that for now?\n\n\ud83d\udc4d", "author": "trask", "createdAt": "2020-10-04T04:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTk3MQ=="}], "type": "inlineReview"}, {"oid": "021c905751e5e796dfaec9bff9e14b131aef9965", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/021c905751e5e796dfaec9bff9e14b131aef9965", "message": "feat(cassandra4): more attributes\n\nfixes #1298", "committedDate": "2020-12-14T22:52:06Z", "type": "forcePushed"}, {"oid": "1fb4a47705cc1bc3ab313c40e6ca6a59c7cfcade", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1fb4a47705cc1bc3ab313c40e6ca6a59c7cfcade", "message": "feat(cassandra4): more attributes\n\nfixes #1298", "committedDate": "2020-12-28T18:52:58Z", "type": "forcePushed"}, {"oid": "78514e94819918f22884d690ef2a95acdf7b1dee", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78514e94819918f22884d690ef2a95acdf7b1dee", "message": "feat(cassandra4): more attributes\n\nfixes #1298", "committedDate": "2020-12-28T19:01:25Z", "type": "forcePushed"}, {"oid": "7280c2ab57d182c0c4fc93cc679082ecd468e854", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7280c2ab57d182c0c4fc93cc679082ecd468e854", "message": "feat(cassandra4): more attributes\n\nfixes #1298", "committedDate": "2020-12-28T20:50:47Z", "type": "forcePushed"}, {"oid": "3465108ed414963eeda05c1b14f593f2b30795a2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3465108ed414963eeda05c1b14f593f2b30795a2", "message": "feat(cassandra4): more attributes\n\nfixes #1298", "committedDate": "2020-12-28T21:03:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzM0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r551743348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Boolean idempotent = statement.isIdempotent();\n          \n          \n            \n                if (idempotent != null) {\n          \n          \n            \n                  return idempotent;\n          \n          \n            \n                }\n          \n          \n            \n                return false;\n          \n          \n            \n                return Boolean.TRUE.equals(Statement.isIdempotent());", "author": "anuraaga", "createdAt": "2021-01-05T06:40:21Z", "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -49,14 +62,85 @@ protected InetSocketAddress peerAddress(CqlSession cqlSession) {\n     return null;\n   }\n \n+  @Override\n+  protected Span onConnection(Span span, CqlSession cqlSession) {\n+    span = super.onConnection(span, cqlSession);\n+    DriverExecutionProfile config = cqlSession.getContext().getConfig().getDefaultProfile();\n+    // may be overwritten by statement, but take the default for now\n+    int pageSize = config.getInt(DefaultDriverOption.REQUEST_PAGE_SIZE);\n+    if (pageSize > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, pageSize);\n+    }\n+    // may be overwritten by statement, but take the default for now\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+        config.getString(DefaultDriverOption.REQUEST_CONSISTENCY));\n+    return span;\n+  }\n+\n   public void onResponse(Context context, ExecutionInfo executionInfo) {\n+    Span span = Span.fromContext(context);\n     Node coordinator = executionInfo.getCoordinator();\n     if (coordinator != null) {\n       SocketAddress socketAddress = coordinator.getEndPoint().resolve();\n       if (socketAddress instanceof InetSocketAddress) {\n-        Span span = Span.fromContext(context);\n         NetPeerUtils.INSTANCE.setNetPeer(span, ((InetSocketAddress) socketAddress));\n       }\n+      if (coordinator.getDatacenter() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_DC, coordinator.getDatacenter());\n+      }\n+      if (coordinator.getHostId() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID, coordinator.getHostId().toString());\n+      }\n+    }\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n+        executionInfo.getSpeculativeExecutionCount());\n+\n+    Statement<?> statement = executionInfo.getStatement();\n+    // override connection default if present\n+    if (statement.getConsistencyLevel() != null) {\n+      span.setAttribute(\n+          SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+          statement.getConsistencyLevel().name());\n+    }\n+    // override connection default if present\n+    if (statement.getPageSize() > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, statement.getPageSize());\n+    }\n+    span.setAttribute(SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE, isIdempotent(statement));\n+  }\n+\n+  @Override\n+  protected void onStatement(Span span, String statement) {\n+    super.onStatement(span, statement);\n+    String table = extractTableNameFromQuery(statement);\n+    if (table != null) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_TABLE, table);\n+    }\n+  }\n+\n+  @Nullable\n+  private static String extractTableNameFromQuery(String query) {\n+    String tableName = null;\n+    Matcher matcher = tableNameRegex.matcher(query);\n+    if (matcher.find()) {\n+      if (matcher.group(2) != null) {\n+        tableName = matcher.group(2);\n+      } else {\n+        tableName = matcher.group(1);\n+      }\n+    }\n+    return tableName;\n+  }\n+\n+  private static boolean isIdempotent(Statement<?> statement) {\n+    Boolean idempotent = statement.isIdempotent();\n+    if (idempotent != null) {\n+      return idempotent;\n     }\n+    return false;", "originalCommit": "3465108ed414963eeda05c1b14f593f2b30795a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzUwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r551743508", "bodyText": "Do we have a unit test for these two types of matches?", "author": "anuraaga", "createdAt": "2021-01-05T06:41:00Z", "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -49,14 +62,85 @@ protected InetSocketAddress peerAddress(CqlSession cqlSession) {\n     return null;\n   }\n \n+  @Override\n+  protected Span onConnection(Span span, CqlSession cqlSession) {\n+    span = super.onConnection(span, cqlSession);\n+    DriverExecutionProfile config = cqlSession.getContext().getConfig().getDefaultProfile();\n+    // may be overwritten by statement, but take the default for now\n+    int pageSize = config.getInt(DefaultDriverOption.REQUEST_PAGE_SIZE);\n+    if (pageSize > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, pageSize);\n+    }\n+    // may be overwritten by statement, but take the default for now\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+        config.getString(DefaultDriverOption.REQUEST_CONSISTENCY));\n+    return span;\n+  }\n+\n   public void onResponse(Context context, ExecutionInfo executionInfo) {\n+    Span span = Span.fromContext(context);\n     Node coordinator = executionInfo.getCoordinator();\n     if (coordinator != null) {\n       SocketAddress socketAddress = coordinator.getEndPoint().resolve();\n       if (socketAddress instanceof InetSocketAddress) {\n-        Span span = Span.fromContext(context);\n         NetPeerUtils.INSTANCE.setNetPeer(span, ((InetSocketAddress) socketAddress));\n       }\n+      if (coordinator.getDatacenter() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_DC, coordinator.getDatacenter());\n+      }\n+      if (coordinator.getHostId() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID, coordinator.getHostId().toString());\n+      }\n+    }\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n+        executionInfo.getSpeculativeExecutionCount());\n+\n+    Statement<?> statement = executionInfo.getStatement();\n+    // override connection default if present\n+    if (statement.getConsistencyLevel() != null) {\n+      span.setAttribute(\n+          SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+          statement.getConsistencyLevel().name());\n+    }\n+    // override connection default if present\n+    if (statement.getPageSize() > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, statement.getPageSize());\n+    }\n+    span.setAttribute(SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE, isIdempotent(statement));\n+  }\n+\n+  @Override\n+  protected void onStatement(Span span, String statement) {\n+    super.onStatement(span, statement);\n+    String table = extractTableNameFromQuery(statement);\n+    if (table != null) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_TABLE, table);\n+    }\n+  }\n+\n+  @Nullable\n+  private static String extractTableNameFromQuery(String query) {\n+    String tableName = null;\n+    Matcher matcher = tableNameRegex.matcher(query);\n+    if (matcher.find()) {\n+      if (matcher.group(2) != null) {", "originalCommit": "3465108ed414963eeda05c1b14f593f2b30795a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI0MTk2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r552241967", "bodyText": "I have added unit tests", "author": "FrankSpitulski", "createdAt": "2021-01-05T22:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI2OTY4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r552269689", "bodyText": "@anuraaga I can't figure out why the unit test is unable to see the public CassandraTableNameExtractor (and before that, the embedded extractor method). Am I missing some test directives in the gradle file?", "author": "FrankSpitulski", "createdAt": "2021-01-05T23:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3MDQzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r552270433", "bodyText": "for ref the task is :instrumentation:cassandra:cassandra-4.0:javaagent:test", "author": "FrankSpitulski", "createdAt": "2021-01-05T23:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIwNTAwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r553205002", "bodyText": "Sorry for the trouble - we merged a change which has our tests behave more like an instrumented app, meaning indeed they don't get access to the agent's classes. You'll need to split out a unit tests module for them (long term we should split out library instrumentation instead).\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/master/instrumentation/jdbc/javaagent-unittests", "author": "anuraaga", "createdAt": "2021-01-07T09:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY2OTQ3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r553669472", "bodyText": "should be good now @anuraaga", "author": "FrankSpitulski", "createdAt": "2021-01-08T00:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzUwOA=="}], "type": "inlineReview"}, {"oid": "e50164fbe66d56cd014489857e0b2f27630ca39e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e50164fbe66d56cd014489857e0b2f27630ca39e", "message": "extract CassandraTableNameExtractor to new class due to visibility issues", "committedDate": "2021-01-05T23:35:04Z", "type": "forcePushed"}, {"oid": "2e634fd92b0a732ac9b52168220380fee0a03150", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e634fd92b0a732ac9b52168220380fee0a03150", "message": "extract CassandraTableNameExtractor to new class due to visibility issues", "committedDate": "2021-01-08T00:01:30Z", "type": "forcePushed"}, {"oid": "f8907dfbf4994ce917db26e744fb65b3c0ba1408", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f8907dfbf4994ce917db26e744fb65b3c0ba1408", "message": "feat(cassandra4): more attributes\n\nfixes #1298\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2021-01-11T22:28:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555389448", "bodyText": "If Statement is provided with overridden consistency or page size, and then the query throws an exception, the instrumentation never calls onResponse, and I think we will be left capturing the wrong value?", "author": "trask", "createdAt": "2021-01-11T22:48:18Z", "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -49,14 +56,67 @@ protected InetSocketAddress peerAddress(CqlSession cqlSession) {\n     return null;\n   }\n \n+  @Override\n+  protected Span onConnection(Span span, CqlSession cqlSession) {\n+    span = super.onConnection(span, cqlSession);\n+    DriverExecutionProfile config = cqlSession.getContext().getConfig().getDefaultProfile();\n+    // may be overwritten by statement, but take the default for now\n+    int pageSize = config.getInt(DefaultDriverOption.REQUEST_PAGE_SIZE);\n+    if (pageSize > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, pageSize);\n+    }\n+    // may be overwritten by statement, but take the default for now\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+        config.getString(DefaultDriverOption.REQUEST_CONSISTENCY));", "originalCommit": "f8907dfbf4994ce917db26e744fb65b3c0ba1408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxNzM1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555417350", "bodyText": "that is correct", "author": "FrankSpitulski", "createdAt": "2021-01-12T00:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQyODY4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555428686", "bodyText": "it's a little less dire than that, on exception it will still attempt to extract the execution info and invoke onResponse", "author": "FrankSpitulski", "createdAt": "2021-01-12T00:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQyODc2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555428766", "bodyText": "can we avoid capturing the wrong value? In general it's better to capture no value than to capture the wrong value", "author": "trask", "createdAt": "2021-01-12T00:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzMDA3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555430071", "bodyText": "it seems that actually did not come over on the rebase, I'll add that back in", "author": "FrankSpitulski", "createdAt": "2021-01-12T00:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzMDcyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555430722", "bodyText": "it's a little less dire than that, on exception it will still attempt to extract the execution info and invoke onResponse\n\ncan you point me where you're seeing that? this is what I'm looking at in TracingCqlSession, and on exception it doesn't call onResponse:\n      try {\n        ResultSet resultSet = session.execute(query);\n        tracer().onResponse(context, resultSet.getExecutionInfo());\n        return resultSet;\n      } catch (RuntimeException e) {\n        tracer().endExceptionally(context, e);\n        throw e;\n      } finally {\n        tracer().end(context);\n      }", "author": "trask", "createdAt": "2021-01-12T00:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzMTA5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555431090", "bodyText": "it seems that actually did not come over on the rebase, I'll add that back in\n\n\ud83d\udc4d (ignore my last comment)", "author": "trask", "createdAt": "2021-01-12T00:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzMjE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555432189", "bodyText": "what is the best way to clear the attribute on a span @trask? The setAttribute method is annotated with not null.", "author": "FrankSpitulski", "createdAt": "2021-01-12T00:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzMzM3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555433372", "bodyText": "can we set the attributes only once we have the statement?", "author": "trask", "createdAt": "2021-01-12T00:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4OTU0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555489548", "bodyText": "the default values comes out of the session which is only available in onConnection, not in onResponse", "author": "FrankSpitulski", "createdAt": "2021-01-12T03:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUzMjAyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555532026", "bodyText": "can we pass the session in to onResponse?", "author": "trask", "createdAt": "2021-01-12T06:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MDQxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555550415", "bodyText": "we can, but it means the endExceptionally method no longer overrides the superclass method since it also needs the session. I have added that and an implementation that throws an illegal state exception if called.\nanother option would be to pass the session and execution info as a pair, but that may create undesired garbage.", "author": "FrankSpitulski", "createdAt": "2021-01-12T06:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQwMDU2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r560400566", "bodyText": "hey @trask, are you happy with the change to add the session into onResponse meaning it also needs to be passed into endExceptionally?", "author": "FrankSpitulski", "createdAt": "2021-01-19T18:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MDY4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555390682", "bodyText": "if we can't check for the default when isIdempotent returns null, then I think better to capture nothing when it's null (instead of a potentially incorrect value)", "author": "trask", "createdAt": "2021-01-11T22:51:20Z", "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -49,14 +56,67 @@ protected InetSocketAddress peerAddress(CqlSession cqlSession) {\n     return null;\n   }\n \n+  @Override\n+  protected Span onConnection(Span span, CqlSession cqlSession) {\n+    span = super.onConnection(span, cqlSession);\n+    DriverExecutionProfile config = cqlSession.getContext().getConfig().getDefaultProfile();\n+    // may be overwritten by statement, but take the default for now\n+    int pageSize = config.getInt(DefaultDriverOption.REQUEST_PAGE_SIZE);\n+    if (pageSize > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, pageSize);\n+    }\n+    // may be overwritten by statement, but take the default for now\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+        config.getString(DefaultDriverOption.REQUEST_CONSISTENCY));\n+    return span;\n+  }\n+\n   public void onResponse(Context context, ExecutionInfo executionInfo) {\n+    Span span = Span.fromContext(context);\n     Node coordinator = executionInfo.getCoordinator();\n     if (coordinator != null) {\n       SocketAddress socketAddress = coordinator.getEndPoint().resolve();\n       if (socketAddress instanceof InetSocketAddress) {\n-        Span span = Span.fromContext(context);\n         NetPeerUtils.INSTANCE.setNetPeer(span, ((InetSocketAddress) socketAddress));\n       }\n+      if (coordinator.getDatacenter() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_DC, coordinator.getDatacenter());\n+      }\n+      if (coordinator.getHostId() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID, coordinator.getHostId().toString());\n+      }\n     }\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n+        executionInfo.getSpeculativeExecutionCount());\n+\n+    Statement<?> statement = executionInfo.getStatement();\n+    // override connection default if present\n+    if (statement.getConsistencyLevel() != null) {\n+      span.setAttribute(\n+          SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+          statement.getConsistencyLevel().name());\n+    }\n+    // override connection default if present\n+    if (statement.getPageSize() > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, statement.getPageSize());\n+    }\n+    span.setAttribute(SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE, isIdempotent(statement));", "originalCommit": "f8907dfbf4994ce917db26e744fb65b3c0ba1408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQyNzg5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555427892", "bodyText": "statements are not idempotent by default. I can't think of a situation where it would be idempotent but not tagged as such. by default it isn't specified though so null should be treated as false. for example, I just tested out running an insert statement which is not idempotent. it had a null idempotent field.", "author": "FrankSpitulski", "createdAt": "2021-01-12T00:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MDY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQyOTIwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555429207", "bodyText": "the javadoc for isIdempotent() says it returns null to use the default value defined in the configuration and references DefaultDriverOption.REQUEST_DEFAULT_IDEMPOTENCE", "author": "trask", "createdAt": "2021-01-12T00:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MDY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4OTg1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555489850", "bodyText": "hmm, that's a good catch. I will add it into the same set as the other default driver options.", "author": "FrankSpitulski", "createdAt": "2021-01-12T03:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MDY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5ODIwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555398206", "bodyText": "from https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\n\nIt is not recommended to attempt any client-side parsing of db.statement just to get this property\n\nWe also parse jdbc SQL for the table name, though, violating this, so ??? <-- @mateuszrzeszutek @iNikem @johnbley @anuraaga\nIf we are going to parse/capture the table name, it would be great to use it in the span name: <db.operation> <db.name>.<db.sql.table>", "author": "trask", "createdAt": "2021-01-11T23:10:20Z", "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraTableNameExtractor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.cassandra.v4_0;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * this class is separate to enable testing. when the {@link #extractTableNameFromQuery} method was\n+ * embedded there was an issue with visibility, even if the method was public.\n+ */\n+public class CassandraTableNameExtractor {\n+\n+  private CassandraTableNameExtractor() {}\n+\n+  private static final Pattern tableNameRegex =\n+      Pattern.compile(\n+          \".*(?:FROM|INTO|UPDATE|TRUNCATE|(?:CREATE|ALTER|DROP) TABLE)\\\\s+(?:IF (?:NOT )?EXISTS\\\\s+)?([A-Z1-9_]+\\\\.([A-Z1-9_]+)|([A-Z1-9_]+))\",\n+          Pattern.CASE_INSENSITIVE);", "originalCommit": "f8907dfbf4994ce917db26e744fb65b3c0ba1408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxODIyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555418224", "bodyText": "we could extract the table name without parsing anything if the statement is a prepared statement, but if the statement is a simplestatement that's the only way I could find to get it out.", "author": "FrankSpitulski", "createdAt": "2021-01-12T00:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5ODIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDQ0MzAxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r564443018", "bodyText": "We already parse the cassandra query to sanitize it - once #2113 is in operation & table name will be available for free (although the current sanitizer implementation cannot extract table name from create/drop table statements, but I suspect that those are rare cases anyway).", "author": "mateuszrzeszutek", "createdAt": "2021-01-26T11:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5ODIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDkyMTkxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r564921914", "bodyText": "Okay, I'll have a look at refactoring and basing the table extraction on this.", "author": "FrankSpitulski", "createdAt": "2021-01-27T00:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5ODIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODMwMTU2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r568301563", "bodyText": "done", "author": "FrankSpitulski", "createdAt": "2021-02-02T03:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5ODIwNg=="}], "type": "inlineReview"}, {"oid": "ae24113b04332dfacf5babe250ed1e7689b5de78", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ae24113b04332dfacf5babe250ed1e7689b5de78", "message": "default idempotence", "committedDate": "2021-01-12T03:41:20Z", "type": "forcePushed"}, {"oid": "e05da4d91c7f372714461e2d022c4eae19f968d8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e05da4d91c7f372714461e2d022c4eae19f968d8", "message": "feat(cassandra4): more attributes\n\nfixes #1298\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2021-02-02T03:14:24Z", "type": "commit"}, {"oid": "ba8e13653421bf174491685ef88d1dd584d29b52", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ba8e13653421bf174491685ef88d1dd584d29b52", "message": "Update instrumentation/cassandra/cassandra-4.0/javaagent/src/test/groovy/CassandraClientTest.groovy\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2021-02-02T03:14:25Z", "type": "commit"}, {"oid": "84b1df681dcd3e7c7a5e67dc841a35f31c666edb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84b1df681dcd3e7c7a5e67dc841a35f31c666edb", "message": "add error handling", "committedDate": "2021-02-02T03:14:25Z", "type": "commit"}, {"oid": "3906903722afce1e0b5e14c5c5fb4d291959f2a5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3906903722afce1e0b5e14c5c5fb4d291959f2a5", "message": "default idempotence", "committedDate": "2021-02-02T03:14:25Z", "type": "commit"}, {"oid": "056800386f8f9d202ed7e1dca468221c4bdae930", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/056800386f8f9d202ed7e1dca468221c4bdae930", "message": "embed session into onResponse to prevent need to overwrite default tags", "committedDate": "2021-02-02T03:14:25Z", "type": "commit"}, {"oid": "f640dd1ab5eee58131b349c48bf102839ddd682f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f640dd1ab5eee58131b349c48bf102839ddd682f", "message": "change javadoc according to spotless", "committedDate": "2021-02-02T03:14:26Z", "type": "commit"}, {"oid": "f640dd1ab5eee58131b349c48bf102839ddd682f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f640dd1ab5eee58131b349c48bf102839ddd682f", "message": "change javadoc according to spotless", "committedDate": "2021-02-02T03:14:26Z", "type": "forcePushed"}, {"oid": "4696fab77392694befdfd2bd3e94cf51d3546ffe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4696fab77392694befdfd2bd3e94cf51d3546ffe", "message": "use shared table name extractor", "committedDate": "2021-02-02T03:34:42Z", "type": "commit"}, {"oid": "1dba7dc2ffcb78e092d49a6b707deabd434998b4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1dba7dc2ffcb78e092d49a6b707deabd434998b4", "message": "fix tests to account for SqlStatementSanitizer", "committedDate": "2021-02-02T04:08:39Z", "type": "commit"}, {"oid": "1dba7dc2ffcb78e092d49a6b707deabd434998b4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1dba7dc2ffcb78e092d49a6b707deabd434998b4", "message": "fix tests to account for SqlStatementSanitizer", "committedDate": "2021-02-02T04:08:39Z", "type": "forcePushed"}]}