{"pr_number": 1284, "pr_title": "Review DB semantic conventions", "pr_createdAt": "2020-09-29T07:52:37Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284", "timeline": [{"oid": "844c2ac2828458827e73f129735b01f2f85bdfa8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/844c2ac2828458827e73f129735b01f2f85bdfa8", "message": "Review DB semantic conventions", "committedDate": "2020-09-29T08:29:39Z", "type": "commit"}, {"oid": "844c2ac2828458827e73f129735b01f2f85bdfa8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/844c2ac2828458827e73f129735b01f2f85bdfa8", "message": "Review DB semantic conventions", "committedDate": "2020-09-29T08:29:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTQyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r496755423", "bodyText": "I realize this is just copied, but maybe remove TODO, it seems to be an implementation of the spec with no todos from what I can tell.", "author": "anuraaga", "createdAt": "2020-09-29T14:17:45Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/DatabaseClientTracer.java", "diffHunk": "@@ -111,32 +112,43 @@ protected void onError(Span span, Throwable throwable) {\n     }\n   }\n \n-  protected void onPeerConnection(Span span, CONNECTION connection) {\n+  protected void setNetSemanticConvention(Span span, CONNECTION connection) {\n     NetPeerUtils.setNetPeer(span, peerAddress(connection));\n   }\n \n   protected void onStatement(Span span, String statement) {\n     span.setAttribute(SemanticAttributes.DB_STATEMENT, statement);\n   }\n \n-  // TODO: \"When it's impossible to get any meaningful representation of the span name, it can be\n-  // populated using the same value as db.name\" (c) spec\n-  protected String spanName(String query) {\n-    return query == null ? DB_QUERY : query;\n-  }\n-\n-  protected abstract String normalizeQuery(QUERY query);\n+  protected abstract @NonNull String normalizeQuery(QUERY query);\n \n-  protected abstract String dbSystem(CONNECTION connection);\n+  protected abstract @NonNull String dbSystem(CONNECTION connection);\n \n-  protected abstract String dbUser(CONNECTION connection);\n+  protected String dbUser(CONNECTION connection) {\n+    return null;\n+  }\n \n-  protected abstract String dbName(CONNECTION connection);\n+  protected String dbName(CONNECTION connection) {\n+    return null;\n+  }\n \n-  // TODO make abstract after implementing in all subclasses\n   protected String dbConnectionString(CONNECTION connection) {\n     return null;\n   }\n \n   protected abstract InetSocketAddress peerAddress(CONNECTION connection);\n+\n+  // TODO: \"When it's impossible to get any meaningful representation of the span name, it can be", "originalCommit": "844c2ac2828458827e73f129735b01f2f85bdfa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNjgxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r497236811", "bodyText": "O yes, I have fixed this TODO in this PR. Will remove", "author": "iNikem", "createdAt": "2020-09-30T04:30:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzI1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r497033258", "bodyText": "I don't think @NonNull is needed in these cases since there aren't any callers of these methods who rely on this behavior (of overriding their @Nullable parents).\nMy preference is to only use @NonNull annotation where it's really needed (which is not often).", "author": "trask", "createdAt": "2020-09-29T20:39:43Z", "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/instrumentation/auto/cassandra/v3_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -34,23 +36,24 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n+  protected @NonNull String normalizeQuery(String query) {", "originalCommit": "844c2ac2828458827e73f129735b01f2f85bdfa8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNjQwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r497236401", "bodyText": "I added it here to be sure that no subclass return null.", "author": "iNikem", "createdAt": "2020-09-30T04:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4MzQ0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r497983448", "bodyText": "If a subclass returns null, would it lead to a NullPointerException? If not, I'd suggest we don't need the @NonNull annotation on the return type", "author": "trask", "createdAt": "2020-10-01T04:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwNjc1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r498206751", "bodyText": "Removed", "author": "iNikem", "createdAt": "2020-10-01T12:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzI1OA=="}], "type": "inlineReview"}, {"oid": "747c546cd45c6cd89588551fa77f53b7f024e5b2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/747c546cd45c6cd89588551fa77f53b7f024e5b2", "message": "Polish", "committedDate": "2020-10-01T12:13:20Z", "type": "commit"}, {"oid": "3c76b46f477e41fdb39fa2322fe6547dba7f319e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3c76b46f477e41fdb39fa2322fe6547dba7f319e", "message": "Test fix", "committedDate": "2020-10-01T12:31:30Z", "type": "commit"}]}