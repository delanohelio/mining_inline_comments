{"pr_number": 648, "pr_title": "[3.2] Create spring-webmvc-3.1-core project", "pr_createdAt": "2020-07-08T02:23:02Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648", "timeline": [{"oid": "25ffc2b64f88d9fd4706b211a0f51c25cf6af69d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/25ffc2b64f88d9fd4706b211a0f51c25cf6af69d", "message": "[3.2] create spring-webmvc-3.1-core project", "committedDate": "2020-07-08T02:28:41Z", "type": "forcePushed"}, {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/406a1f606ae035901fa95b05c9376f09a0f61905", "message": "[3.2] create spring-webmvc-3.1-core project", "committedDate": "2020-07-08T03:07:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDg3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451300875", "bodyText": "Our codes currently has 2 approaches for creating spans and setting attributes. One is using old-style \"Decorators\", another is newer one using \"Tracers\". It will take time, but the goal is to replaces Decorators with Tracers. As you extend from Tracer, please don't use \"Decorator\" in you class/field names to avoid confusion.", "author": "iNikem", "createdAt": "2020-07-08T05:58:34Z", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracerBase;\n+import io.opentelemetry.auto.instrumentation.servlet.HttpServletRequestGetter;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class SpringWebMvcDecorator\n+    extends HttpServerTracerBase<HttpServletRequest, HttpServletRequest, HttpServletRequest> {", "originalCommit": "406a1f606ae035901fa95b05c9376f09a0f61905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTYwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451301600", "bodyText": "There is no need to override and expose this method. Clients should use end or endExceptionally from the base class instead.", "author": "iNikem", "createdAt": "2020-07-08T06:00:49Z", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracerBase;\n+import io.opentelemetry.auto.instrumentation.servlet.HttpServletRequestGetter;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class SpringWebMvcDecorator\n+    extends HttpServerTracerBase<HttpServletRequest, HttpServletRequest, HttpServletRequest> {\n+\n+  public static final SpringWebMvcDecorator DECORATE = new SpringWebMvcDecorator();\n+\n+  public Span afterStart(final Span span) {\n+    assert span != null;\n+    return span;\n+  }\n+\n+  public Span beforeFinish(final Span span) {\n+    assert span != null;\n+    return span;\n+  }\n+\n+  @Override\n+  public void onError(final Span span, final Throwable throwable) {", "originalCommit": "406a1f606ae035901fa95b05c9376f09a0f61905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTk0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451301946", "bodyText": "Use endExceptionally here", "author": "iNikem", "createdAt": "2020-07-08T06:01:54Z", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcDecorator.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;\n+\n+    Span serverSpan = DECORATE.startSpan(tracer, req, req, FILTER_METHOD, FILTER_CLASS);\n+\n+    try (Scope scope = tracer.withSpan(serverSpan)) {\n+      filterChain.doFilter(req, response);\n+    } catch (Throwable t) {\n+      DECORATE.onError(serverSpan, t);", "originalCommit": "406a1f606ae035901fa95b05c9376f09a0f61905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNzMwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451307306", "bodyText": "I am not sure if my thoughts below are correct... @trask @anuraaga what do you think about it?\nAmong other things there are two objectives in introducing manual instrumentations in this repo.\n\nTo produce roughly the same result as auto-instrumentation does\nTo allow auto-instrumentation to reuse code from manual one, if possible.\n\nThis filter violates at least the first one. Auto-instrumentation for Spring MVC creates spans with Span.Kind=INTERNAL, this filter produces Span.King=SERVER.", "author": "iNikem", "createdAt": "2020-07-08T06:17:41Z", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcDecorator.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;\n+\n+    Span serverSpan = DECORATE.startSpan(tracer, req, req, FILTER_METHOD, FILTER_CLASS);", "originalCommit": "406a1f606ae035901fa95b05c9376f09a0f61905", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzNjI0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451636241", "bodyText": "The auto-instrumentation uses bytebuddy advice to add instrumentation to WebApplicationContexts, javax DispatchServerlets, and spring-web HandlerAdapters. I could mirror this approach by using spring aspects to keep things consistent. I thought a cleaner approach would be to use a spring-web filter to auto-configure traces. I'm still figuring out the pros and cons for each approach but using filters seems to be the most direct.", "author": "mabdinur", "createdAt": "2020-07-08T15:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNzMwNg=="}], "type": "inlineReview"}, {"oid": "2150498f6a7f26077bb352a871be454bb0c24b6d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2150498f6a7f26077bb352a871be454bb0c24b6d", "message": "address comments", "committedDate": "2020-07-08T14:09:47Z", "type": "forcePushed"}, {"oid": "7b13346c9f8ee09fd3f6088aa8d7e55d4128c2f2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7b13346c9f8ee09fd3f6088aa8d7e55d4128c2f2", "message": "rebase and fix conflicts", "committedDate": "2020-07-08T14:29:25Z", "type": "forcePushed"}, {"oid": "a707946a6015fd0b8523fa093463b33df5806978", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a707946a6015fd0b8523fa093463b33df5806978", "message": "rebase and fix conflicts", "committedDate": "2020-07-09T00:51:07Z", "type": "forcePushed"}, {"oid": "769ab4fa7c9edb2bb11fc15f93b29582466da6d9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/769ab4fa7c9edb2bb11fc15f93b29582466da6d9", "message": "renamed project and removed instrumentation:spring-webmv-3.1 -> instrumentation-core:spring-webmvc-3.1 dependency", "committedDate": "2020-07-09T15:01:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMjAzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r452512037", "bodyText": "need to re-throw t (otherwise exception will be suppressed and alter the application behavior)", "author": "trask", "createdAt": "2020-07-09T21:54:45Z", "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcServerTracer.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;\n+\n+    Span serverSpan = DECORATE.startSpan(tracer, req, req, FILTER_METHOD, FILTER_CLASS);\n+\n+    try (Scope scope = tracer.withSpan(serverSpan)) {\n+      filterChain.doFilter(req, response);\n+      DECORATE.end(serverSpan, response.getStatus());\n+    } catch (Throwable t) {\n+      DECORATE.endExceptionally(serverSpan, t, response.getStatus());", "originalCommit": "769ab4fa7c9edb2bb11fc15f93b29582466da6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMjE3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r452512176", "bodyText": "this cast is not needed", "author": "trask", "createdAt": "2020-07-09T21:55:02Z", "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcServerTracer.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;", "originalCommit": "769ab4fa7c9edb2bb11fc15f93b29582466da6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNDY2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r452624665", "bodyText": "i like the idea from an earlier review of keeping public api surface of manual instrumentation minimal \ud83d\udc4d\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SpringWebMvcServerTracer\n          \n          \n            \n            class SpringWebMvcServerTracer", "author": "trask", "createdAt": "2020-07-10T05:08:59Z", "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcServerTracer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.instrumentation.servlet.HttpServletRequestGetter;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class SpringWebMvcServerTracer", "originalCommit": "278801b0f3a5aae7f2a94cb1328ebe5a633b5de8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b592da3fb73e4e8113f8bb3754903136ca5a34aa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b592da3fb73e4e8113f8bb3754903136ca5a34aa", "message": "[3.2] create spring-webmvc-3.1-core project", "committedDate": "2020-07-10T16:07:51Z", "type": "commit"}, {"oid": "76b19bb7a328b62e5afd529bfdb26388973ba2b1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/76b19bb7a328b62e5afd529bfdb26388973ba2b1", "message": "rebase and fix conflicts", "committedDate": "2020-07-10T16:07:51Z", "type": "commit"}, {"oid": "d4da50ca0d84cac26b944d9f4a26ec0a9839d8c3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4da50ca0d84cac26b944d9f4a26ec0a9839d8c3", "message": "renamed project and removed instrumentation:spring-webmv-3.1 -> instrumentation-core:spring-webmvc-3.1 dependency", "committedDate": "2020-07-10T16:07:51Z", "type": "commit"}, {"oid": "de30e9779fa83b8b77f84c666ba7d9d91c86d564", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/de30e9779fa83b8b77f84c666ba7d9d91c86d564", "message": "update tracer", "committedDate": "2020-07-10T16:07:51Z", "type": "commit"}, {"oid": "8c353ba66fd54ebf1fcdb350acc1d41cb15786a7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8c353ba66fd54ebf1fcdb350acc1d41cb15786a7", "message": "ws", "committedDate": "2020-07-10T16:07:51Z", "type": "commit"}, {"oid": "db96c537039556660eecaccfc955d46706e7b12c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db96c537039556660eecaccfc955d46706e7b12c", "message": "Update instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcServerTracer.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-10T16:07:52Z", "type": "commit"}, {"oid": "3d2c7b81d6c0c8b261706c92a1d4671361698975", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3d2c7b81d6c0c8b261706c92a1d4671361698975", "message": "Update spring-webmvc-3.1.gradle", "committedDate": "2020-07-10T16:07:52Z", "type": "commit"}, {"oid": "3d2c7b81d6c0c8b261706c92a1d4671361698975", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3d2c7b81d6c0c8b261706c92a1d4671361698975", "message": "Update spring-webmvc-3.1.gradle", "committedDate": "2020-07-10T16:07:52Z", "type": "forcePushed"}]}