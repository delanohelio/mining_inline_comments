{"pr_number": 893, "pr_title": "Refactor HttpClient typed Decorators to Tracers", "pr_createdAt": "2020-08-05T02:18:45Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893", "timeline": [{"oid": "8ae72a9506b2a745885122842e7b1e77c83321e5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ae72a9506b2a745885122842e7b1e77c83321e5", "message": "Fix build", "committedDate": "2020-07-28T20:52:12Z", "type": "commit"}, {"oid": "5a6431c28007d73bcc958b4272dbd00385626600", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5a6431c28007d73bcc958b4272dbd00385626600", "message": "initial work", "committedDate": "2020-07-28T21:45:48Z", "type": "commit"}, {"oid": "2733a270e54f5b02a2c430b1a2f803ff9f6c8df0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2733a270e54f5b02a2c430b1a2f803ff9f6c8df0", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers", "committedDate": "2020-07-31T21:43:34Z", "type": "commit"}, {"oid": "64d94a0bce5aed36e26b4bee278b0592976ad0b7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/64d94a0bce5aed36e26b4bee278b0592976ad0b7", "message": "Change OkHttp decorators to tracers", "committedDate": "2020-08-04T02:31:24Z", "type": "commit"}, {"oid": "0ebff02d041c727c368ae42a25607c57103c096b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0ebff02d041c727c368ae42a25607c57103c096b", "message": "Change AkkaHttpClient decorator to tracer", "committedDate": "2020-08-04T15:33:25Z", "type": "commit"}, {"oid": "be1bdd3f7d80e579d75bae5fad0361fcc70a4c46", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/be1bdd3f7d80e579d75bae5fad0361fcc70a4c46", "message": "Change ClientDecorator to GrizzlyClientTracer", "committedDate": "2020-08-04T15:48:09Z", "type": "commit"}, {"oid": "256388685243e805ddcbce9027bd4e2f2d9f1f6f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/256388685243e805ddcbce9027bd4e2f2d9f1f6f", "message": "Change NettyClientDecorator to Tracer", "committedDate": "2020-08-04T17:08:56Z", "type": "commit"}, {"oid": "996c00bbe9c32ca37dbba5aab1b49d9ccd6750e3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/996c00bbe9c32ca37dbba5aab1b49d9ccd6750e3", "message": "Change netty3.8 client decorator to tracer", "committedDate": "2020-08-04T19:26:51Z", "type": "commit"}, {"oid": "ec93f437a5f185181137001f04a093563de3bf84", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec93f437a5f185181137001f04a093563de3bf84", "message": "Update netty4.1 client decorator to tracer", "committedDate": "2020-08-04T19:52:34Z", "type": "commit"}, {"oid": "9e7ee630db859eb540b5e2fb4bea6dc26a428396", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9e7ee630db859eb540b5e2fb4bea6dc26a428396", "message": "Override startScope in child tracers when applicable", "committedDate": "2020-08-04T22:58:04Z", "type": "commit"}, {"oid": "e95b26e2fa7217fd5e4dcf67fe4dc8503a212ad9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e95b26e2fa7217fd5e4dcf67fe4dc8503a212ad9", "message": "Change KHttpDecorator to tracer", "committedDate": "2020-08-05T01:54:00Z", "type": "commit"}, {"oid": "f401d6c079d0837a113c3ccddc371412552f4343", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f401d6c079d0837a113c3ccddc371412552f4343", "message": "Change HttpUrlConnectionDecorator to tracer", "committedDate": "2020-08-05T02:12:34Z", "type": "commit"}, {"oid": "2f0596beff28b80428ee4eb264dce79e0c6bc11b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2f0596beff28b80428ee4eb264dce79e0c6bc11b", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers", "committedDate": "2020-08-05T03:00:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1NDM5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465454395", "bodyText": "this should fix the muzzle failure \ud83d\udc4d\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new String[] {packageName + \".GrizzlyClientTracer\"};\n          \n          \n            \n                return new String[] {\n          \n          \n            \n                  packageName + \".GrizzlyClientTracer\", packageName + \".GrizzlyInjectAdapter\"\n          \n          \n            \n                };", "author": "trask", "createdAt": "2020-08-05T03:45:25Z", "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/client/GrizzlyClientResponseInstrumentation.java", "diffHunk": "@@ -60,7 +60,7 @@ protected boolean defaultEnabled() {\n \n   @Override\n   public String[] helperClassNames() {\n-    return new String[] {packageName + \".ClientDecorator\"};\n+    return new String[] {packageName + \".GrizzlyClientTracer\"};", "originalCommit": "2f0596beff28b80428ee4eb264dce79e0c6bc11b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxNTkxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465815919", "bodyText": "Updated.  Thanks @trask.", "author": "heyams", "createdAt": "2020-08-05T15:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1NDM5NQ=="}], "type": "inlineReview"}, {"oid": "833bf7a2edc8a569014bffdeaeba4e550fde5861", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/833bf7a2edc8a569014bffdeaeba4e550fde5861", "message": "Fix muzzle validation failure for grizzly client", "committedDate": "2020-08-05T15:31:45Z", "type": "commit"}, {"oid": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c358ef7a119f951df69eb5062f3c13ee2b7a5507", "message": "Fix a ratpack client test failure", "committedDate": "2020-08-05T18:37:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyODgxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465928816", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void onPeerConnection(final Span span, final CONNECTION connection) {\n          \n          \n            \n              protected void onPeerConnection(final Span span, final CONNECTION connection) {", "author": "trask", "createdAt": "2020-08-05T18:42:12Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "diffHunk": "@@ -120,23 +119,10 @@ protected void onError(final Span span, final Throwable throwable) {\n     }\n   }\n \n-  protected void onPeerConnection(Span span, final CONNECTION connection) {\n+  public void onPeerConnection(final Span span, final CONNECTION connection) {", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzNDU2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465934568", "bodyText": "use callDepth = TRACER.getCallDepth(); pattern here", "author": "trask", "createdAt": "2020-08-05T18:52:48Z", "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpClientInstrumentation.java", "diffHunk": "@@ -83,57 +81,51 @@ public AkkaHttpClientInstrumentation() {\n \n   public static class SingleRequestAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static SpanWithScope methodEnter(\n-        @Advice.Argument(value = 0, readOnly = false) HttpRequest request) {\n+    public static void methodEnter(\n+        @Advice.Argument(value = 0, readOnly = false) HttpRequest request,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n       /*\n       Versions 10.0 and 10.1 have slightly different structure that is hard to distinguish so here\n       we cast 'wider net' and avoid instrumenting twice.\n       In the future we may want to separate these, but since lots of code is reused we would need to come up\n       with way of continuing to reusing it.\n        */\n       int callDepth = CallDepthThreadLocalMap.incrementCallDepth(HttpExt.class);\n-      if (callDepth > 0) {\n-        return null;\n+      if (callDepth == 0) {", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzODI3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465938274", "bodyText": "we can get rid of this extra scope\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try (Scope scope = currentContextWith(errorSpan)) {\n          \n          \n            \n                    NettyHttpClientTracer.TRACER.endExceptionally(errorSpan, cause);\n          \n          \n            \n                  }\n          \n          \n            \n                  NettyHttpClientTracer.TRACER.endExceptionally(errorSpan, cause);", "author": "trask", "createdAt": "2020-08-05T18:59:20Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -111,14 +111,11 @@ public static Scope activateScope(@Advice.Argument(0) final ChannelFuture future\n       if (continuation == null) {\n         return null;\n       }\n-      Scope parentScope = NettyHttpClientDecorator.TRACER.withSpan(continuation);\n-\n-      Span errorSpan =\n-          NettyHttpClientDecorator.TRACER.spanBuilder(\"CONNECT\").setSpanKind(CLIENT).startSpan();\n-      try (Scope scope = NettyHttpClientDecorator.TRACER.withSpan(errorSpan)) {\n-        NettyHttpClientDecorator.DECORATE.onError(errorSpan, cause);\n-        NettyHttpClientDecorator.DECORATE.beforeFinish(errorSpan);\n-        errorSpan.end();\n+      Scope parentScope = currentContextWith(continuation);\n+\n+      Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\");\n+      try (Scope scope = currentContextWith(errorSpan)) {\n+        NettyHttpClientTracer.TRACER.endExceptionally(errorSpan, cause);\n       }", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzOTkwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465939905", "bodyText": "we can get rid of this extra scope too\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n          \n          \n            \n                    TRACER.end(span, (HttpResponse) msg.getMessage());\n          \n          \n            \n                  }\n          \n          \n            \n                  TRACER.end(span, (HttpResponse) msg.getMessage());", "author": "trask", "createdAt": "2020-08-05T19:02:17Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/client/HttpClientResponseTracingHandler.java", "diffHunk": "@@ -54,15 +54,13 @@ public void messageReceived(final ChannelHandlerContext ctx, final MessageEvent\n     boolean finishSpan = msg.getMessage() instanceof HttpResponse;\n \n     if (span != null && finishSpan) {\n-      try (Scope scope = TRACER.withSpan(span)) {\n-        DECORATE.onResponse(span, (HttpResponse) msg.getMessage());\n-        DECORATE.beforeFinish(span);\n-        span.end();\n+      try (Scope scope = TracingContextUtils.currentContextWith(span)) {\n+        TRACER.end(span, (HttpResponse) msg.getMessage());\n       }", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0MjgzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465942835", "bodyText": "we can get rid of this surrounding scope too \ud83d\udc4d", "author": "trask", "createdAt": "2020-08-05T19:07:59Z", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -105,12 +104,9 @@ public static Scope activateScope(@Advice.Argument(0) final ChannelFuture future\n       }\n       Scope parentScope = currentContextWith(parentSpan);\n \n-      Span errorSpan =\n-          NettyHttpClientDecorator.TRACER.spanBuilder(\"CONNECT\").setSpanKind(CLIENT).startSpan();\n+      Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\");\n       try (Scope ignored = currentContextWith(errorSpan)) {\n-        NettyHttpClientDecorator.DECORATE.onError(errorSpan, cause);\n-        NettyHttpClientDecorator.DECORATE.beforeFinish(errorSpan);\n-        errorSpan.end();\n+        NettyHttpClientTracer.TRACER.endExceptionally(errorSpan, cause);", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NTE2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465945169", "bodyText": "ah, this is another place where we can't do TRACER.startScope() because we need two return values Scope and, in this case, requestBuilder", "author": "trask", "createdAt": "2020-08-05T19:12:26Z", "path": "instrumentation/okhttp/okhttp-2.2/src/main/java/io/opentelemetry/auto/instrumentation/okhttp/v2_2/TracingInterceptor.java", "diffHunk": "@@ -54,13 +43,10 @@ public Response intercept(final Chain chain) throws IOException {\n     try (Scope scope = withScopedContext(context)) {", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwMzU3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466003571", "bodyText": "yup.", "author": "heyams", "createdAt": "2020-08-05T21:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NTE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NTU3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465945570", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Override\n          \n          \n            \n              protected Setter<Request> getSetter() {\n          \n          \n            \n                return null;\n          \n          \n            \n              }", "author": "trask", "createdAt": "2020-08-05T19:13:12Z", "path": "instrumentation/okhttp/okhttp-3.0/src/main/java/io/opentelemetry/auto/instrumentation/okhttp/v3_0/OkHttpClientTracer.java", "diffHunk": "@@ -53,4 +49,14 @@ protected String requestHeader(Request request, String name) {\n   protected String responseHeader(Response response, String name) {\n     return response.header(name);\n   }\n+\n+  @Override\n+  protected Setter<Request> getSetter() {\n+    return null;\n+  }\n+", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NjAzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465946035", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Response response = null;\n          \n          \n            \n                Response response;", "author": "trask", "createdAt": "2020-08-05T19:14:07Z", "path": "instrumentation/okhttp/okhttp-3.0/src/main/java/io/opentelemetry/auto/instrumentation/okhttp/v3_0/TracingInterceptor.java", "diffHunk": "@@ -35,33 +33,22 @@\n \n   @Override\n   public Response intercept(final Chain chain) throws IOException {\n-    Span span =\n-        TRACER\n-            .spanBuilder(DECORATE.spanNameForRequest(chain.request()))\n-            .setSpanKind(CLIENT)\n-            .startSpan();\n-\n-    DECORATE.afterStart(span);\n-    DECORATE.onRequest(span, chain.request());\n-\n+    Span span = TRACER.startSpan(chain.request());\n     Context context = withSpan(span, Context.current());\n \n     Request.Builder requestBuilder = chain.request().newBuilder();\n     OpenTelemetry.getPropagators()\n         .getHttpTextFormat()\n         .inject(context, requestBuilder, RequestBuilderInjectAdapter.SETTER);\n \n-    Response response;\n+    Response response = null;", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1NTA3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465955070", "bodyText": "scope is already started with this span above, i think don't use startScope here", "author": "trask", "createdAt": "2020-08-05T19:31:29Z", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/client/HttpClientRequestTracingHandler.java", "diffHunk": "@@ -59,29 +53,21 @@ public void write(final ChannelHandlerContext ctx, final Object msg, final Chann\n       ctx.channel().attr(AttributeKeys.CLIENT_PARENT_ATTRIBUTE_KEY).set(null);\n     }\n \n-    Span span =\n-        TRACER.spanBuilder(DECORATE.spanNameForRequest(request)).setSpanKind(CLIENT).startSpan();\n-    try (Scope scope = TRACER.withSpan(span)) {\n-      DECORATE.afterStart(span);\n-      DECORATE.onRequest(span, request);\n-      DECORATE.onPeerConnection(span, (InetSocketAddress) ctx.channel().remoteAddress());\n-\n+    Span span = TRACER.startSpan(request);\n+    TRACER.onPeerConnection(span, (InetSocketAddress) ctx.channel().remoteAddress());\n+    Scope currentScope = null;\n+    try (Scope scope = currentContextWith(span)) {\n       // AWS calls are often signed, so we can't add headers without breaking the signature.\n       if (!request.headers().contains(\"amz-sdk-invocation-id\")) {\n-        Context context = withSpan(span, Context.current());\n-        OpenTelemetry.getPropagators()\n-            .getHttpTextFormat()\n-            .inject(context, request.headers(), SETTER);\n+        currentScope = TRACER.startScope(span, request);", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1NTc2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r465955766", "bodyText": "can this be more consistent with the corresponding v4_1 instrumentation?", "author": "trask", "createdAt": "2020-08-05T19:33:00Z", "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_0/client/HttpClientRequestTracingHandler.java", "diffHunk": "@@ -59,35 +53,32 @@ public void write(final ChannelHandlerContext ctx, final Object msg, final Chann\n       ctx.channel().attr(AttributeKeys.CLIENT_PARENT_ATTRIBUTE_KEY).set(null);\n     }\n \n-    Span span =\n-        TRACER.spanBuilder(DECORATE.spanNameForRequest(request)).setSpanKind(CLIENT).startSpan();\n-    try (Scope scope = TRACER.withSpan(span)) {\n-      DECORATE.afterStart(span);\n-      DECORATE.onRequest(span, request);\n-      DECORATE.onPeerConnection(span, (InetSocketAddress) ctx.channel().remoteAddress());\n+    Scope scope = null;\n+    try {\n+      Span span = TRACER.startSpan(request);\n+      TRACER.onPeerConnection(span, (InetSocketAddress) ctx.channel().remoteAddress());", "originalCommit": "c358ef7a119f951df69eb5062f3c13ee2b7a5507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dff8a140fb943606ba191549cb763fbb249a785f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dff8a140fb943606ba191549cb763fbb249a785f", "message": "Address feedback", "committedDate": "2020-08-05T21:04:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwNjQyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466006425", "bodyText": "i think u can remove this nested try, e.g.\n    Span span = TRACER.startSpan(request);\n    TRACER.onPeerConnection(span, (InetSocketAddress) ctx.getChannel().getRemoteAddress());\n    Context context = withSpan(span, Context.current());\n    OpenTelemetry.getPropagators().getHttpTextFormat().inject(context, request.headers(), SETTER);\n\n    channelTraceContext.setClientSpan(span);\n\n    try (Scope scope = currentContextWith(span)) {\n      ctx.sendDownstream(msg);\n    } catch (final Throwable throwable) {\n      TRACER.endExceptionally(span, throwable);\n      throw throwable;\n    } finally {\n      if (parentScope != null) {\n        parentScope.close();\n      }\n    }", "author": "trask", "createdAt": "2020-08-05T21:11:21Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/client/HttpClientRequestTracingHandler.java", "diffHunk": "@@ -58,15 +62,20 @@ public void writeRequested(final ChannelHandlerContext ctx, final MessageEvent m\n     channelTraceContext.setClientParentSpan(TRACER.getCurrentSpan());\n \n     HttpRequest request = (HttpRequest) msg.getMessage();\n+\n     Span span = TRACER.startSpan(request);\n-    TRACER.onPeerConnection(span, (InetSocketAddress) ctx.getChannel().getRemoteAddress());\n+    try (Scope scope = currentContextWith(span)) {\n+      TRACER.onPeerConnection(span, (InetSocketAddress) ctx.getChannel().getRemoteAddress());\n+      Context context = withSpan(span, Context.current());\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(context, request.headers(), SETTER);\n \n-    try (Scope scope = TRACER.startScope(span, request)) {\n       channelTraceContext.setClientSpan(span);\n-      ctx.sendDownstream(msg);\n-    } catch (final Throwable throwable) {\n-      TRACER.endExceptionally(span, throwable);\n-      throw throwable;\n+      try {", "originalCommit": "dff8a140fb943606ba191549cb763fbb249a785f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxODg0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466018848", "bodyText": "channelTraceContext.setClientSpan(span);\ndoes this require scope?", "author": "heyams", "createdAt": "2020-08-05T21:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwNjQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxOTYxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466019612", "bodyText": "no, because it's only calling our internal code", "author": "trask", "createdAt": "2020-08-05T21:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwNjQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNDQwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466014403", "bodyText": "can you update the corresponding methods in BaseDecorator to delegate to these methods?\nand the same with the methods copied from HttpClientDecorator to HttpClientTracer where possible?", "author": "trask", "createdAt": "2020-08-05T21:27:49Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseTracer.java", "diffHunk": "@@ -127,7 +131,47 @@ public void addThrowable(final Span span, final Throwable throwable) {\n     span.recordException(throwable);\n   }\n \n-  public static void setPeer(final Span span, String peerName, String peerIp) {\n-    BaseDecorator.setPeer(span, peerName, peerIp);\n+  public void onPeerConnection(final Span span, final InetSocketAddress remoteConnection) {", "originalCommit": "dff8a140fb943606ba191549cb763fbb249a785f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyOTM0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466029349", "bodyText": "Updated.", "author": "heyams", "createdAt": "2020-08-05T22:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNDQwMw=="}], "type": "inlineReview"}, {"oid": "f03ad35bd6278559015b6e833cab17af6e802ed0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f03ad35bd6278559015b6e833cab17af6e802ed0", "message": "Update delegate for setPeer", "committedDate": "2020-08-05T21:49:30Z", "type": "commit"}, {"oid": "2c7e74381ac6ed73055dbe22bf725725a332d012", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c7e74381ac6ed73055dbe22bf725725a332d012", "message": "Remove nested try", "committedDate": "2020-08-05T21:52:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNTcxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466035712", "bodyText": "can you keep static import for all the BaseTracer.extract calls?", "author": "trask", "createdAt": "2020-08-05T22:19:05Z", "path": "instrumentation/rabbitmq-2.7/src/main/java/io/opentelemetry/auto/instrumentation/rabbitmq/amqp/RabbitChannelInstrumentation.java", "diffHunk": "@@ -253,7 +253,7 @@ public static void extractAndStartSpan(\n         Map<String, Object> headers = response.getProps().getHeaders();\n \n         if (headers != null) {\n-          SpanContext extractedContext = extract(headers, GETTER);\n+          SpanContext extractedContext = BaseTracer.extract(headers, GETTER);", "originalCommit": "593f9e1d40337812a1cddddf87d9dfd904f6c61b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MDkyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466060920", "bodyText": "throwable != null already checked above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (throwable != null) {\n          \n          \n            \n                        TRACER.endExceptionally(span, throwable);\n          \n          \n            \n                      }\n          \n          \n            \n                      TRACER.endExceptionally(span, throwable);", "author": "trask", "createdAt": "2020-08-05T23:33:43Z", "path": "instrumentation/http-url-connection/src/main/java/io/opentelemetry/auto/instrumentation/httpurlconnection/UrlInstrumentation.java", "diffHunk": "@@ -96,8 +93,9 @@ public static void errorSpan(\n             setPeer(span, host, null);\n           }\n \n-          DECORATE.onError(span, throwable);\n-          span.end();\n+          if (throwable != null) {\n+            TRACER.endExceptionally(span, throwable);\n+          }", "originalCommit": "5d0fc1a614699d3f8c161d28f7456f18df478f14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MTU5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466081592", "bodyText": "extract is related to SERVER and CONSUMER spans, while inject is related to CLIENT and PRODUCER spans, so not sure having extract method in ClientTracer makes sense", "author": "trask", "createdAt": "2020-08-06T00:47:24Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+\n+public abstract class ClientTracer extends BaseTracer {\n+\n+  public static <C> SpanContext extract(final C carrier, final HttpTextFormat.Getter<C> getter) {", "originalCommit": "d24c82b2d2cbba64f57021262eed69347ed83ad5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8366c3b35c5be3fac336d49a090c9831c22f2272", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8366c3b35c5be3fac336d49a090c9831c22f2272", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers", "committedDate": "2020-08-06T01:24:23Z", "type": "commit"}, {"oid": "8366c3b35c5be3fac336d49a090c9831c22f2272", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8366c3b35c5be3fac336d49a090c9831c22f2272", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers", "committedDate": "2020-08-06T01:24:23Z", "type": "forcePushed"}, {"oid": "d19b1b617b9d0a2f628678865ace725fc239cc75", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d19b1b617b9d0a2f628678865ace725fc239cc75", "message": "Remove unnecessary null check", "committedDate": "2020-08-06T01:30:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExODkyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466118929", "bodyText": "this should fix the muzzle failure, i will go ahead and commit this suggestion to validate\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  packageName + \".client.NettyHttpClientTracer\",\n          \n          \n            \n                  packageName + \".client.NettyHttpClientTracer\",\n          \n          \n            \n                  packageName + \".client.NettyResponseInjectAdapter\",", "author": "trask", "createdAt": "2020-08-06T03:09:07Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -66,7 +66,7 @@ public ChannelFutureListenerInstrumentation() {\n       packageName + \".AbstractNettyAdvice\",\n       packageName + \".ChannelTraceContext\",\n       packageName + \".ChannelTraceContext$Factory\",\n-      packageName + \".client.NettyHttpClientDecorator\",\n+      packageName + \".client.NettyHttpClientTracer\",", "originalCommit": "d19b1b617b9d0a2f628678865ace725fc239cc75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e2ca42e19f153e1e217ec16ad1de59a879a14800", "message": "Update instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/ChannelFutureListenerInstrumentation.java", "committedDate": "2020-08-06T03:09:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMTUyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466131521", "bodyText": "How about leaving this abstract? If it's because some libraries don't provide an easy way to abstract a Setter, it's probably still better to have them explicitly do this than having it as a default.", "author": "anuraaga", "createdAt": "2020-08-06T03:59:15Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class HttpClientTracer<REQUEST, RESPONSE> extends BaseTracer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(HttpClientTracer.class);\n+\n+  public static final String DEFAULT_SPAN_NAME = \"HTTP request\";\n+\n+  protected static final String USER_AGENT = \"User-Agent\";\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract Integer status(RESPONSE response);\n+\n+  protected abstract String requestHeader(REQUEST request, String name);\n+\n+  protected abstract String responseHeader(RESPONSE response, String name);\n+\n+  protected HttpTextFormat.Setter<REQUEST> getSetter() {", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMTc4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466131786", "bodyText": "Also, returning null may be better, see below comment.", "author": "anuraaga", "createdAt": "2020-08-06T04:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMTUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NjU1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466296552", "bodyText": "What do you mean \"some libraries don't provide an easy way to abstract a Setter\"? Are there libraries that cannot propagate trace context?", "author": "iNikem", "createdAt": "2020-08-06T09:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMTUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNDY2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466324664", "bodyText": "The example I saw in this PR was an immutable object - because Scala ;)", "author": "anuraaga", "createdAt": "2020-08-06T10:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMTUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzI4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466603287", "bodyText": "@anuraaga here are some examples:\nHttpHeadersInjectAdapter implements HttpTextFormat.Setter<HttpHeaders> or\nRequestBuilderInjectAdapter implements HttpTextFormat.Setter<Request.Builder> or\nclass InjectAdapter implements HttpTextFormat.Setter<ContextPayload>\nand etc.\ngetSetter() has the following signature in the super class:\nHttpTextFormat.Setter<REQUEST> getSetter()\nAnything that is not REQUEST typed, getSetter() doesn't make sense to override.\nHope this helps.", "author": "heyams", "createdAt": "2020-08-06T18:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMTUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMjE1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466132152", "bodyText": "If getSetter() returned null, we could probably provide a better error message\nSetter setter = getSetter();\nif (setter == null) {\n  throw new IllegalStateException(\"getSetter() not defined but calling startScope(), either getSetter must be implemented or the scope should be setup manually\");\n}", "author": "anuraaga", "createdAt": "2020-08-06T04:01:33Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class HttpClientTracer<REQUEST, RESPONSE> extends BaseTracer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(HttpClientTracer.class);\n+\n+  public static final String DEFAULT_SPAN_NAME = \"HTTP request\";\n+\n+  protected static final String USER_AGENT = \"User-Agent\";\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract Integer status(RESPONSE response);\n+\n+  protected abstract String requestHeader(REQUEST request, String name);\n+\n+  protected abstract String responseHeader(RESPONSE response, String name);\n+\n+  protected HttpTextFormat.Setter<REQUEST> getSetter() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public Span startSpan(REQUEST request) {\n+    return startSpan(request, spanNameForRequest(request));\n+  }\n+\n+  public Scope startScope(Span span, REQUEST request) {\n+    Context context = withSpan(span, Context.current());", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMjY1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466132650", "bodyText": "Should this be protected? How would we instrument an HTTP library with RPC semantics, e.g., Retrofit?\nProbably don't have to decide in this PR though.", "author": "anuraaga", "createdAt": "2020-08-06T04:03:33Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class HttpClientTracer<REQUEST, RESPONSE> extends BaseTracer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(HttpClientTracer.class);\n+\n+  public static final String DEFAULT_SPAN_NAME = \"HTTP request\";\n+\n+  protected static final String USER_AGENT = \"User-Agent\";\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract Integer status(RESPONSE response);\n+\n+  protected abstract String requestHeader(REQUEST request, String name);\n+\n+  protected abstract String responseHeader(RESPONSE response, String name);\n+\n+  protected HttpTextFormat.Setter<REQUEST> getSetter() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public Span startSpan(REQUEST request) {\n+    return startSpan(request, spanNameForRequest(request));\n+  }\n+\n+  public Scope startScope(Span span, REQUEST request) {\n+    Context context = withSpan(span, Context.current());\n+    OpenTelemetry.getPropagators().getHttpTextFormat().inject(context, request, getSetter());\n+    return withScopedContext(context);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, RESPONSE response) {\n+    onResponse(span, response);\n+    super.end(span);\n+  }\n+\n+  public void endExceptionally(Span span, RESPONSE response, Throwable throwable) {\n+    onResponse(span, response);\n+    super.endExceptionally(span, throwable);\n+  }\n+\n+  /**\n+   * Returns a new client {@link Span} if there is no client {@link Span} in the current {@link\n+   * Context}, or an invalid {@link Span} otherwise.\n+   */\n+  private Span startSpan(REQUEST request, String name) {\n+    Context context = Context.current();\n+    Span clientSpan = ClientDecorator.CONTEXT_CLIENT_SPAN_KEY.get(context);\n+\n+    if (clientSpan != null) {\n+      // We don't want to create two client spans for a given client call, suppress inner spans.\n+      return DefaultSpan.getInvalid();\n+    }\n+\n+    Span current = TracingContextUtils.getSpan(context);\n+    Span span = tracer.spanBuilder(name).setSpanKind(Kind.CLIENT).setParent(current).startSpan();\n+    onRequest(span, request);\n+    return span;\n+  }\n+\n+  private Span onRequest(final Span span, final REQUEST request) {\n+    assert span != null;\n+    if (request != null) {\n+      span.setAttribute(SemanticAttributes.HTTP_METHOD.key(), method(request));\n+\n+      String userAgent = requestHeader(request, USER_AGENT);\n+      if (userAgent != null) {\n+        SemanticAttributes.HTTP_USER_AGENT.set(span, userAgent);\n+      }\n+\n+      // Copy of HttpServerDecorator url handling\n+      try {\n+        URI url = url(request);\n+        if (url != null) {\n+          StringBuilder urlBuilder = new StringBuilder();\n+          if (url.getScheme() != null) {\n+            urlBuilder.append(url.getScheme());\n+            urlBuilder.append(\"://\");\n+          }\n+          if (url.getHost() != null) {\n+            urlBuilder.append(url.getHost());\n+            setPeer(span, url.getHost(), null);\n+            if (url.getPort() > 0) {\n+              span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), url.getPort());\n+              if (url.getPort() != 80 && url.getPort() != 443) {\n+                urlBuilder.append(\":\");\n+                urlBuilder.append(url.getPort());\n+              }\n+            }\n+          }\n+          String path = url.getPath();\n+          if (path.isEmpty()) {\n+            urlBuilder.append(\"/\");\n+          } else {\n+            urlBuilder.append(path);\n+          }\n+          String query = url.getQuery();\n+          if (query != null) {\n+            urlBuilder.append(\"?\").append(query);\n+          }\n+          String fragment = url.getFragment();\n+          if (fragment != null) {\n+            urlBuilder.append(\"#\").append(fragment);\n+          }\n+\n+          span.setAttribute(SemanticAttributes.HTTP_URL.key(), urlBuilder.toString());\n+\n+          if (Config.get().isHttpClientTagQueryString()) {\n+            span.setAttribute(MoreAttributes.HTTP_QUERY, query);\n+            span.setAttribute(MoreAttributes.HTTP_FRAGMENT, fragment);\n+          }\n+        }\n+      } catch (final Exception e) {\n+        log.debug(\"Error tagging url\", e);\n+      }\n+    }\n+    return span;\n+  }\n+\n+  private Span onResponse(final Span span, final RESPONSE response) {\n+    assert span != null;\n+    if (response != null) {\n+      Integer status = status(response);\n+      System.out.println(\"status: \" + status);\n+      if (status != null) {\n+        span.setAttribute(SemanticAttributes.HTTP_STATUS_CODE.key(), status);\n+        span.setStatus(HttpStatusConverter.statusFromHttpStatus(status));\n+      }\n+    }\n+    return span;\n+  }\n+\n+  private String spanNameForRequest(final REQUEST request) {", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNTM4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466605380", "bodyText": "If needed, i will change it later.. not sure which decorator is that?", "author": "heyams", "createdAt": "2020-08-06T18:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMjY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMzg3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466133874", "bodyText": "@trask Do we need this on client side even though we don't create duplicate client spans? Not something to fix in this PR though", "author": "anuraaga", "createdAt": "2020-08-06T04:08:36Z", "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpClientInstrumentation.java", "diffHunk": "@@ -83,57 +81,49 @@ public AkkaHttpClientInstrumentation() {\n \n   public static class SingleRequestAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static SpanWithScope methodEnter(\n-        @Advice.Argument(value = 0, readOnly = false) HttpRequest request) {\n+    public static void methodEnter(\n+        @Advice.Argument(value = 0, readOnly = false) HttpRequest request,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope,\n+        @Advice.Local(\"otelCallDepth\") Depth callDepth) {\n       /*\n       Versions 10.0 and 10.1 have slightly different structure that is hard to distinguish so here\n       we cast 'wider net' and avoid instrumenting twice.\n       In the future we may want to separate these, but since lots of code is reused we would need to come up\n       with way of continuing to reusing it.\n        */\n-      int callDepth = CallDepthThreadLocalMap.incrementCallDepth(HttpExt.class);\n-      if (callDepth > 0) {\n-        return null;\n+      callDepth = TRACER.getCallDepth();", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0MTIxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466141210", "bodyText": "oh that's a really good point, and will reduce the (growing) size of our \"instrumentation template\"!\ni'll open an issue for this", "author": "trask", "createdAt": "2020-08-06T04:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMzg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNDg0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466134845", "bodyText": "Can we extract a helper?", "author": "anuraaga", "createdAt": "2020-08-06T04:12:28Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class HttpClientTracer<REQUEST, RESPONSE> extends BaseTracer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(HttpClientTracer.class);\n+\n+  public static final String DEFAULT_SPAN_NAME = \"HTTP request\";\n+\n+  protected static final String USER_AGENT = \"User-Agent\";\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract Integer status(RESPONSE response);\n+\n+  protected abstract String requestHeader(REQUEST request, String name);\n+\n+  protected abstract String responseHeader(RESPONSE response, String name);\n+\n+  protected HttpTextFormat.Setter<REQUEST> getSetter() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public Span startSpan(REQUEST request) {\n+    return startSpan(request, spanNameForRequest(request));\n+  }\n+\n+  public Scope startScope(Span span, REQUEST request) {\n+    Context context = withSpan(span, Context.current());\n+    OpenTelemetry.getPropagators().getHttpTextFormat().inject(context, request, getSetter());\n+    return withScopedContext(context);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, RESPONSE response) {\n+    onResponse(span, response);\n+    super.end(span);\n+  }\n+\n+  public void endExceptionally(Span span, RESPONSE response, Throwable throwable) {\n+    onResponse(span, response);\n+    super.endExceptionally(span, throwable);\n+  }\n+\n+  /**\n+   * Returns a new client {@link Span} if there is no client {@link Span} in the current {@link\n+   * Context}, or an invalid {@link Span} otherwise.\n+   */\n+  private Span startSpan(REQUEST request, String name) {\n+    Context context = Context.current();\n+    Span clientSpan = ClientDecorator.CONTEXT_CLIENT_SPAN_KEY.get(context);\n+\n+    if (clientSpan != null) {\n+      // We don't want to create two client spans for a given client call, suppress inner spans.\n+      return DefaultSpan.getInvalid();\n+    }\n+\n+    Span current = TracingContextUtils.getSpan(context);\n+    Span span = tracer.spanBuilder(name).setSpanKind(Kind.CLIENT).setParent(current).startSpan();\n+    onRequest(span, request);\n+    return span;\n+  }\n+\n+  private Span onRequest(final Span span, final REQUEST request) {\n+    assert span != null;\n+    if (request != null) {\n+      span.setAttribute(SemanticAttributes.HTTP_METHOD.key(), method(request));\n+\n+      String userAgent = requestHeader(request, USER_AGENT);\n+      if (userAgent != null) {\n+        SemanticAttributes.HTTP_USER_AGENT.set(span, userAgent);\n+      }\n+\n+      // Copy of HttpServerDecorator url handling", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTk5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466299991", "bodyText": "And this is duplicated with HttpServerTracer. Certainly have to de-duplicate.", "author": "iNikem", "createdAt": "2020-08-06T09:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNDg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzEyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466607120", "bodyText": "Will clean it up later with de-duplicate client and server code.  I have noted it down as a reminder for myself. Can someone create a new issue for cleaning up common code between client and server tracers and assign it to me.  Thanks.", "author": "heyams", "createdAt": "2020-08-06T18:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNDg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI3MDMwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466270304", "bodyText": "Unless other maintainers object, I propose to remove all these asserts", "author": "iNikem", "createdAt": "2020-08-06T09:21:53Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseTracer.java", "diffHunk": "@@ -127,7 +131,47 @@ public void addThrowable(final Span span, final Throwable throwable) {\n     span.recordException(throwable);\n   }\n \n+  public void onPeerConnection(final Span span, final InetSocketAddress remoteConnection) {\n+    assert span != null;", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466293894", "bodyText": "HttpServerTracer and its subclasses tried to reduce public API as much as possible. This includes hiding all attribute setting behind startSpan method. So that end-users would need to call as few methods as possible. Ideally just startSpan and startScope. Please do the same here.\nPass an object, that represent a connection for a given library, into startSpan method and call onPeerConnection method (which should become protected) from startSpan. Also take a look, if HttpServerTracer.onConnection method should be pulled up into BaseTracer", "author": "iNikem", "createdAt": "2020-08-06T09:42:33Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseTracer.java", "diffHunk": "@@ -127,7 +131,47 @@ public void addThrowable(final Span span, final Throwable throwable) {\n     span.recordException(throwable);\n   }\n \n+  public void onPeerConnection(final Span span, final InetSocketAddress remoteConnection) {", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMwMDgwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466300800", "bodyText": "Ok, probably actual call to this method should happen in HttpServerTracer.startSpan and HttpClientTracer.startSpan", "author": "iNikem", "createdAt": "2020-08-06T09:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxMTMyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466611322", "bodyText": "this is only used in Cassandra, DatabaseClientTracer, HttpClientRequestTracingHandler.  is it generic enough to apply to all?", "author": "heyams", "createdAt": "2020-08-06T18:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NDA5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466654091", "bodyText": "Converted it to static for now and a todo #912, will consider to move it to somewhere else.", "author": "heyams", "createdAt": "2020-08-06T20:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NzA0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466297046", "bodyText": "This comment is not relevant here. You don't attach span to requests.", "author": "iNikem", "createdAt": "2020-08-06T09:48:17Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class HttpClientTracer<REQUEST, RESPONSE> extends BaseTracer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(HttpClientTracer.class);\n+\n+  public static final String DEFAULT_SPAN_NAME = \"HTTP request\";\n+\n+  protected static final String USER_AGENT = \"User-Agent\";\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract Integer status(RESPONSE response);\n+\n+  protected abstract String requestHeader(REQUEST request, String name);\n+\n+  protected abstract String responseHeader(RESPONSE response, String name);\n+\n+  protected HttpTextFormat.Setter<REQUEST> getSetter() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public Span startSpan(REQUEST request) {\n+    return startSpan(request, spanNameForRequest(request));\n+  }\n+\n+  public Scope startScope(Span span, REQUEST request) {\n+    Context context = withSpan(span, Context.current());\n+    OpenTelemetry.getPropagators().getHttpTextFormat().inject(context, request, getSetter());\n+    return withScopedContext(context);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyMzU1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466623553", "bodyText": "Sorry, @heyams, I don't understand how your comment is relevant to this comment on end method?", "author": "iNikem", "createdAt": "2020-08-06T19:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NzA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyNDYzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466624636", "bodyText": "to your first comment: some of the Setters are not REQUEST type, it failed to work for request.builder or HttpHeaders. There are quite a few. For those cases, getSetter() will simply return null. Initially i had it abstract, but then later realized it's better to provide a default implementation so that it's not a requires override method in the sub-tracers.", "author": "heyams", "createdAt": "2020-08-06T19:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NzA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTQ4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466299486", "bodyText": "@trask In case of SERVER spans you wanted to let instrumentations to check for a presence of SERVER span and for them to decide to skip the call to startSpan. Here it is left for the Tracer to decide. We have to choose one consistent pattern.\nI prefer to encapsulate this decision, as it is made here.", "author": "iNikem", "createdAt": "2020-08-06T09:52:53Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class HttpClientTracer<REQUEST, RESPONSE> extends BaseTracer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(HttpClientTracer.class);\n+\n+  public static final String DEFAULT_SPAN_NAME = \"HTTP request\";\n+\n+  protected static final String USER_AGENT = \"User-Agent\";\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract Integer status(RESPONSE response);\n+\n+  protected abstract String requestHeader(REQUEST request, String name);\n+\n+  protected abstract String responseHeader(RESPONSE response, String name);\n+\n+  protected HttpTextFormat.Setter<REQUEST> getSetter() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public Span startSpan(REQUEST request) {\n+    return startSpan(request, spanNameForRequest(request));\n+  }\n+\n+  public Scope startScope(Span span, REQUEST request) {\n+    Context context = withSpan(span, Context.current());\n+    OpenTelemetry.getPropagators().getHttpTextFormat().inject(context, request, getSetter());\n+    return withScopedContext(context);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, RESPONSE response) {\n+    onResponse(span, response);\n+    super.end(span);\n+  }\n+\n+  public void endExceptionally(Span span, RESPONSE response, Throwable throwable) {\n+    onResponse(span, response);\n+    super.endExceptionally(span, throwable);\n+  }\n+\n+  /**\n+   * Returns a new client {@link Span} if there is no client {@link Span} in the current {@link\n+   * Context}, or an invalid {@link Span} otherwise.\n+   */\n+  private Span startSpan(REQUEST request, String name) {\n+    Context context = Context.current();\n+    Span clientSpan = ClientDecorator.CONTEXT_CLIENT_SPAN_KEY.get(context);", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NDE1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466674158", "bodyText": "ok, i think you and @anuraaga (#904 (comment)) have convinced me", "author": "trask", "createdAt": "2020-08-06T20:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMwMzMxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466303315", "bodyText": "This already happens inside Tracer, right?", "author": "iNikem", "createdAt": "2020-08-06T09:59:49Z", "path": "instrumentation/http-url-connection/src/main/java/io/opentelemetry/auto/instrumentation/httpurlconnection/UrlInstrumentation.java", "diffHunk": "@@ -85,19 +83,17 @@ public static void errorSpan(\n         String protocol = url.getProtocol();\n         protocol = protocol != null ? protocol : \"url\";\n \n-        Span span = TRACER.spanBuilder(protocol + \".request\").setSpanKind(CLIENT).startSpan();\n-\n+        Span span = TRACER.startSpan(protocol + \".request\");\n         try (Scope scope = currentContextWith(span)) {\n           span.setAttribute(SemanticAttributes.HTTP_URL.key(), url.toString());\n           span.setAttribute(", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODk0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466658947", "bodyText": "Add a todo in #912.  Need to update tests for this change.", "author": "heyams", "createdAt": "2020-08-06T20:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMwMzMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTM5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466471399", "bodyText": "Should these be in a different package?", "author": "tylerbenson", "createdAt": "2020-08-06T14:52:58Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3MzU3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466573576", "bodyText": "Will update the package once i finish all the decorators in the follow-up PR.  Good point.", "author": "heyams", "createdAt": "2020-08-06T17:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NDYwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466474606", "bodyText": "This doesn't seem like something that should be on the Tracer since it only really applies to automatic instrumentation, right?", "author": "tylerbenson", "createdAt": "2020-08-06T14:57:25Z", "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpClientTracer.java", "diffHunk": "@@ -17,19 +17,21 @@\n package io.opentelemetry.auto.instrumentation.akkahttp;\n \n import akka.http.javadsl.model.HttpHeader;\n+import akka.http.scaladsl.HttpExt;\n import akka.http.scaladsl.model.HttpRequest;\n import akka.http.scaladsl.model.HttpResponse;\n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n-import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap.Depth;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientTracer;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class AkkaHttpClientDecorator extends HttpClientDecorator<HttpRequest, HttpResponse> {\n-  public static final AkkaHttpClientDecorator DECORATE = new AkkaHttpClientDecorator();\n+public class AkkaHttpClientTracer extends HttpClientTracer<HttpRequest, HttpResponse> {\n+  public static final AkkaHttpClientTracer TRACER = new AkkaHttpClientTracer();\n \n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.akka-http-10.0\");\n+  public Depth getCallDepth() {", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4NzI5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466487291", "bodyText": "not necessarily, you can get recursive calls on manual instrumentation as well, or?", "author": "iNikem", "createdAt": "2020-08-06T15:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NDYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MjEzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466672139", "bodyText": "planning to get rid of CallDepth for everything except INTERNAL spans anyways: #907", "author": "trask", "createdAt": "2020-08-06T20:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NDYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MDk1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466480955", "bodyText": "Consider adding a comment when this should be used vs the one from the parent.", "author": "tylerbenson", "createdAt": "2020-08-06T15:06:20Z", "path": "instrumentation/http-url-connection/src/main/java/io/opentelemetry/auto/instrumentation/httpurlconnection/HttpUrlConnectionTracer.java", "diffHunk": "@@ -53,4 +51,14 @@ protected String requestHeader(HttpURLConnection httpURLConnection, String name)\n   protected String responseHeader(Integer integer, String name) {\n     return null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.http-url-connection\";\n+  }\n+\n+  @Override\n+  public Span startSpan(String spanName) {", "originalCommit": "e2ca42e19f153e1e217ec16ad1de59a879a14800", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9ef5249f9015dd06009364286917171f00179f89", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9ef5249f9015dd06009364286917171f00179f89", "message": "Remove asserts", "committedDate": "2020-08-06T18:33:47Z", "type": "commit"}, {"oid": "a95cc31332223c70f60730f706c51fc103095e23", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a95cc31332223c70f60730f706c51fc103095e23", "message": "Add a comment for overriding startSpan(String spanName)", "committedDate": "2020-08-06T18:53:51Z", "type": "commit"}, {"oid": "8810fe64419671a0788940bffab3cd3904479a08", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8810fe64419671a0788940bffab3cd3904479a08", "message": "Merge branch 'heya/http-client-tracers' of https://github.com/heyams/opentelemetry-java-instrumentation into heya/http-client-tracers", "committedDate": "2020-08-06T18:57:50Z", "type": "commit"}, {"oid": "19faa2dc4a32e112fa8eae185744ec76c16dcaaf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/19faa2dc4a32e112fa8eae185744ec76c16dcaaf", "message": "Remove an irrelevant comment", "committedDate": "2020-08-06T19:05:01Z", "type": "commit"}, {"oid": "9fb48a7772203a1b5ba563e96057c27fa31741db", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9fb48a7772203a1b5ba563e96057c27fa31741db", "message": "Throw an exception when getSetter is null", "committedDate": "2020-08-06T19:16:48Z", "type": "commit"}, {"oid": "286328f2fcde74cf22827e06aee4ca69ac19e12c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/286328f2fcde74cf22827e06aee4ca69ac19e12c", "message": "Change onPeerConnection to static", "committedDate": "2020-08-06T20:11:30Z", "type": "commit"}, {"oid": "5f3bb12b8a244d7f98b4234d637a71efdf548dbe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f3bb12b8a244d7f98b4234d637a71efdf548dbe", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers", "committedDate": "2020-08-06T21:03:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNzk4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/893#discussion_r466727985", "bodyText": "I still think abstract is better than providing a default implementation here - it's easier to forget to implement this method for the common case where we do have setter right? Subclasses explicitly say they're not providing a setter.", "author": "anuraaga", "createdAt": "2020-08-06T22:54:12Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class HttpClientTracer<REQUEST, RESPONSE> extends BaseTracer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(HttpClientTracer.class);\n+\n+  public static final String DEFAULT_SPAN_NAME = \"HTTP request\";\n+\n+  protected static final String USER_AGENT = \"User-Agent\";\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract Integer status(RESPONSE response);\n+\n+  protected abstract String requestHeader(REQUEST request, String name);\n+\n+  protected abstract String responseHeader(RESPONSE response, String name);\n+\n+  protected HttpTextFormat.Setter<REQUEST> getSetter() {\n+    return null;", "originalCommit": "5f3bb12b8a244d7f98b4234d637a71efdf548dbe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ad96a25d53c2d0bc0b234727a1dc509573d658dc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad96a25d53c2d0bc0b234727a1dc509573d658dc", "message": "Change getSetter() to be abstract", "committedDate": "2020-08-06T23:38:18Z", "type": "commit"}]}