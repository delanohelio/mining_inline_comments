{"pr_number": 1830, "pr_title": "Update to SDK 0.12.0", "pr_createdAt": "2020-12-04T09:52:19Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1830", "timeline": [{"oid": "7224de82d5aa7440eeed12d317888685f3d042b8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7224de82d5aa7440eeed12d317888685f3d042b8", "message": "Update to SDK 0.12.0", "committedDate": "2020-12-04T09:49:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3Mzk0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1830#discussion_r535973946", "bodyText": "@jkwatson It pains me, but I'm leaning towards reverting the change from List to Collection - List is just easier to use", "author": "anuraaga", "createdAt": "2020-12-04T09:52:59Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -19,20 +20,24 @@\n \n abstract class ApiGatewayProxyRequest {\n \n-  private static boolean noHttpPropagationNeeded() {\n-    List<String> fields = OpenTelemetry.getGlobalPropagators().getTextMapPropagator().fields();\n-    return (fields.isEmpty() || xrayPropagationFieldsOnly(fields));\n+  private static final boolean noHttpPropagationNeeded;\n+\n+  static {\n+    Collection<String> fields =\n+        OpenTelemetry.getGlobalPropagators().getTextMapPropagator().fields();\n+    noHttpPropagationNeeded = fields.isEmpty() || xrayPropagationFieldsOnly(fields);\n   }\n \n-  private static boolean xrayPropagationFieldsOnly(List<String> fields) {\n+  private static boolean xrayPropagationFieldsOnly(Collection<String> fields) {\n     // ugly but faster than typical convert-to-set-and-check-contains-only\n     return (fields.size() == 1)\n-        && (ParentContextExtractor.AWS_TRACE_HEADER_PROPAGATOR_KEY.equalsIgnoreCase(fields.get(0)));\n+        && (ParentContextExtractor.AWS_TRACE_HEADER_PROPAGATOR_KEY.equalsIgnoreCase(\n+            fields.iterator().next()));", "originalCommit": "7224de82d5aa7440eeed12d317888685f3d042b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b62ab97cdda8b5e22dcdc382ce83acfa481df6cf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b62ab97cdda8b5e22dcdc382ce83acfa481df6cf", "message": "Update error message to the current world.", "committedDate": "2020-12-04T09:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3NjgwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1830#discussion_r535976805", "bodyText": "@jkwatson No clue what I'm doing here - running a callback with a lambda that itself runs a function seems really funky. I want my micrometer! \ud83d\ude3f", "author": "anuraaga", "createdAt": "2020-12-04T09:57:22Z", "path": "instrumentation/opentelemetry-api-1.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/metrics/ApplicationDoubleSumObserver.java", "diffHunk": "@@ -76,6 +76,14 @@ protected Builder(io.opentelemetry.api.metrics.DoubleSumObserver.Builder agentBu\n       return this;\n     }\n \n+    @Override\n+    public DoubleSumObserver.Builder setCallback(Callback<DoubleResult> callback) {\n+      agentBuilder.setCallback(", "originalCommit": "b62ab97cdda8b5e22dcdc382ce83acfa481df6cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3ODQzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1830#discussion_r535978439", "bodyText": "I don't think we supported this ever, it would just no-op into the application OpenTelemetry which is never used. I guess we would need an AgentContextPropatators(application.ContextPropagators) bridge class if we wanted to?", "author": "anuraaga", "createdAt": "2020-12-04T09:59:47Z", "path": "instrumentation/opentelemetry-api-1.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetryapi/ApplicationOpenTelemetry.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.opentelemetryapi;\n+\n+import application.io.opentelemetry.api.OpenTelemetry;\n+import application.io.opentelemetry.api.OpenTelemetryBuilder;\n+import application.io.opentelemetry.api.metrics.MeterProvider;\n+import application.io.opentelemetry.api.trace.TracerProvider;\n+import application.io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.javaagent.instrumentation.opentelemetryapi.context.propagation.ApplicationContextPropagators;\n+import io.opentelemetry.javaagent.instrumentation.opentelemetryapi.metrics.ApplicationMeterProvider;\n+import io.opentelemetry.javaagent.instrumentation.opentelemetryapi.trace.ApplicationTracerProvider;\n+\n+public class ApplicationOpenTelemetry implements OpenTelemetry {\n+\n+  public static final OpenTelemetry INSTANCE = new ApplicationOpenTelemetry();\n+\n+  private final TracerProvider applicationTracerProvider;\n+  private final MeterProvider applicationMeterProvider;\n+\n+  private final ContextPropagators applicationContextPropagators;\n+\n+  private ApplicationOpenTelemetry() {\n+    io.opentelemetry.api.OpenTelemetry agentOpenTelemetry =\n+        io.opentelemetry.api.OpenTelemetry.get();\n+    applicationTracerProvider =\n+        new ApplicationTracerProvider(agentOpenTelemetry.getTracerProvider());\n+    applicationMeterProvider = new ApplicationMeterProvider(agentOpenTelemetry.getMeterProvider());\n+    applicationContextPropagators =\n+        new ApplicationContextPropagators(agentOpenTelemetry.getPropagators());\n+  }\n+\n+  @Override\n+  public void setPropagators(ContextPropagators contextPropagators) {\n+    throw new UnsupportedOperationException(\"To be implemented?\");", "originalCommit": "b62ab97cdda8b5e22dcdc382ce83acfa481df6cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4MDkwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1830#discussion_r536280909", "bodyText": "how about no-op here instead of throwing exception, until/if we support it, so we don't crash user app?", "author": "trask", "createdAt": "2020-12-04T18:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3ODQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNTI1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1830#discussion_r536525254", "bodyText": "do we need to return no-op?", "author": "trask", "createdAt": "2020-12-05T06:16:35Z", "path": "instrumentation/opentelemetry-sdk-1.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/opentelemetrysdk/OpenTelemetrySdkInstrumentation.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.opentelemetrysdk;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public class OpenTelemetrySdkInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"io.opentelemetry.sdk.OpenTelemetrySdk\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(isStatic())\n+            .and(named(\"getGlobalTracerManagement\"))\n+            .and(takesArguments(0)),\n+        OpenTelemetrySdkInstrumentation.class.getName() + \"$GetGlobalTracerManagementAdvice\");\n+  }\n+\n+  public static class GetGlobalTracerManagementAdvice {\n+\n+    @Advice.OnMethodEnter(skipOn = Advice.OnDefaultValue.class)\n+    public static Object onEnter() {\n+      return null;\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void methodExit(@Advice.Return(readOnly = false) TracerSdkManagement management) {\n+      NoopTracerManagement.logCannotUseTracerManagementWarning();\n+      management = NoopTracerManagement.INSTANCE;", "originalCommit": "b62ab97cdda8b5e22dcdc382ce83acfa481df6cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk2Mjk4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1830#discussion_r536962984", "bodyText": "What do we return if not a no-op? It seems to also fit well with the \"not supported\" aspect, since we don't support it we make it a no-op", "author": "anuraaga", "createdAt": "2020-12-06T05:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUyNTI1NA=="}], "type": "inlineReview"}, {"oid": "05c148d3dd4c87bb7caa65c8f5f95402205a0e76", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/05c148d3dd4c87bb7caa65c8f5f95402205a0e76", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into sdk-0.12", "committedDate": "2020-12-06T05:17:15Z", "type": "commit"}, {"oid": "d751f06ddfa8a25d778ac716095fb503a8b2e000", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d751f06ddfa8a25d778ac716095fb503a8b2e000", "message": "Bump referenced smoke test versions", "committedDate": "2020-12-06T05:17:28Z", "type": "commit"}, {"oid": "200f70d751bf98dc09df73c049dcda5133fb6fa5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/200f70d751bf98dc09df73c049dcda5133fb6fa5", "message": "fixes", "committedDate": "2020-12-06T05:50:09Z", "type": "commit"}, {"oid": "26169cde9bfe27b823c835e845a811a258f7e766", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/26169cde9bfe27b823c835e845a811a258f7e766", "message": "dependency hell", "committedDate": "2020-12-06T06:57:13Z", "type": "commit"}, {"oid": "7cbbc26c6b3e81d118869c19e5b18c4d5b699752", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7cbbc26c6b3e81d118869c19e5b18c4d5b699752", "message": "Suppress unused call", "committedDate": "2020-12-06T07:02:52Z", "type": "commit"}, {"oid": "ae4ae21b8b6ddebbeed5974d404b9151f9dfcac2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ae4ae21b8b6ddebbeed5974d404b9151f9dfcac2", "message": "Bump missed smoke tests", "committedDate": "2020-12-07T02:08:47Z", "type": "commit"}, {"oid": "fda73633599be3db7e3dea64dbaee04dbbfdf55d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fda73633599be3db7e3dea64dbaee04dbbfdf55d", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into sdk-0.12", "committedDate": "2020-12-07T03:07:58Z", "type": "commit"}, {"oid": "5aedf03fdee4561c48cc54bd32a807ec2c8298a7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5aedf03fdee4561c48cc54bd32a807ec2c8298a7", "message": "Bump image, bump smoke tests gRPC version", "committedDate": "2020-12-07T03:18:37Z", "type": "commit"}, {"oid": "db335bb1e858e1950ce3e7b3a80164b9bf84e8a5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db335bb1e858e1950ce3e7b3a80164b9bf84e8a5", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into sdk-0.12", "committedDate": "2020-12-07T07:24:19Z", "type": "commit"}]}