{"pr_number": 768, "pr_title": "Add type matching benchmark", "pr_createdAt": "2020-07-23T06:47:30Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/768", "timeline": [{"oid": "aca347f112a2cb713d5822f197b8a210715a1c46", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/aca347f112a2cb713d5822f197b8a210715a1c46", "message": "Add type matching benchmark", "committedDate": "2020-07-23T06:43:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5ODc4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/768#discussion_r459298786", "bodyText": "I would create a list of classes to load in @Setup method and benchmark itself will just load classes. And as a baseline, add a benchmark which just iterates over list of classes", "author": "iNikem", "createdAt": "2020-07-23T08:42:12Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/TypeMatchingBenchmark.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.benchmark;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.File;\n+import java.util.Enumeration;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(5)\n+@Warmup(iterations = 0)\n+@Measurement(iterations = 1)\n+@OutputTimeUnit(MILLISECONDS)\n+@State(Scope.Thread)\n+public class TypeMatchingBenchmark {\n+\n+  @Benchmark\n+  public void loadLotsOfClasses() throws Exception {", "originalCommit": "aca347f112a2cb713d5822f197b8a210715a1c46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b66c1fc7652c0a66a3fb19b997d14dc1826a7f6e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b66c1fc7652c0a66a3fb19b997d14dc1826a7f6e", "message": "Separate out setup", "committedDate": "2020-07-24T18:41:51Z", "type": "commit"}, {"oid": "4b28d8656ec15095c44a4de2784fc9854ed55c1d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4b28d8656ec15095c44a4de2784fc9854ed55c1d", "message": "Model similar to existing ClassRetransformingBenchmark", "committedDate": "2020-07-24T18:49:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0NjEyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/768#discussion_r460346120", "bodyText": "Delete? Seems like it'd affect the benchmark result / be spammy", "author": "anuraaga", "createdAt": "2020-07-25T01:16:49Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/TypeMatchingBenchmark.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.benchmark;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(5)\n+@Warmup(iterations = 0)\n+@Measurement(iterations = 1)\n+@OutputTimeUnit(MILLISECONDS)\n+@State(Scope.Thread)\n+public class TypeMatchingBenchmark {\n+\n+  private Set<String> classNames;\n+\n+  @Setup\n+  public void setup() throws IOException {\n+    classNames = new HashSet<>();\n+    String classPath = System.getProperty(\"java.class.path\");\n+    for (String path : classPath.split(File.pathSeparator)) {\n+      if (!path.endsWith(\".jar\")) {\n+        continue;\n+      }\n+      JarFile jarFile = new JarFile(path);\n+      try {\n+        Enumeration<JarEntry> e = jarFile.entries();\n+        while (e.hasMoreElements()) {\n+          JarEntry jarEntry = e.nextElement();\n+          String name = jarEntry.getName();\n+          if (name.endsWith(\".class\")) {\n+            name = name.replace('/', '.');\n+            name = name.substring(0, name.length() - \".class\".length());\n+            classNames.add(name);\n+          }\n+        }\n+      } finally {\n+        jarFile.close();\n+      }\n+    }\n+  }\n+\n+  @Benchmark\n+  public void loadLotsOfClasses() {\n+    int successCount = 0;\n+    int errorCount = 0;\n+    for (String className : classNames) {\n+      try {\n+        Class.forName(className, false, TypeMatchingBenchmark.class.getClassLoader());\n+        successCount++;\n+      } catch (Throwable t) {\n+        errorCount++;\n+      }\n+    }\n+    System.out.println(\"[loaded: \" + successCount + \", failed to load: \" + errorCount + \"]\");", "originalCommit": "4b28d8656ec15095c44a4de2784fc9854ed55c1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0NjE5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/768#discussion_r460346190", "bodyText": "Ah just noticed maybe can stick with a static final. Find it makes benchmarks simpler not to worry aboutState unless really having to.", "author": "anuraaga", "createdAt": "2020-07-25T01:17:33Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/TypeMatchingBenchmark.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.benchmark;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(5)\n+@Warmup(iterations = 0)\n+@Measurement(iterations = 1)\n+@OutputTimeUnit(MILLISECONDS)\n+@State(Scope.Thread)\n+public class TypeMatchingBenchmark {\n+\n+  private Set<String> classNames;\n+\n+  @Setup\n+  public void setup() throws IOException {", "originalCommit": "4b28d8656ec15095c44a4de2784fc9854ed55c1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "afc1a5555c297d4b6b96263f81edf3251f69b00f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/afc1a5555c297d4b6b96263f81edf3251f69b00f", "message": "feedback", "committedDate": "2020-07-25T05:45:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5Mjg2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/768#discussion_r460392869", "bodyText": "What is agent master?", "author": "iNikem", "createdAt": "2020-07-25T10:51:20Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/TypeMatchingBenchmark.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.benchmark;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(5)\n+@Warmup(iterations = 0)\n+@Measurement(iterations = 1)\n+@OutputTimeUnit(MILLISECONDS)\n+public class TypeMatchingBenchmark {\n+\n+  private static final Set<String> classNames;\n+\n+  static {\n+    classNames = new HashSet<>();\n+    String classPath = System.getProperty(\"java.class.path\");\n+    for (String path : classPath.split(File.pathSeparator)) {\n+      if (!path.endsWith(\".jar\")) {\n+        continue;\n+      }\n+      try (JarFile jarFile = new JarFile(path)) {\n+        Enumeration<JarEntry> e = jarFile.entries();\n+        while (e.hasMoreElements()) {\n+          JarEntry jarEntry = e.nextElement();\n+          String name = jarEntry.getName();\n+          if (name.endsWith(\".class\")) {\n+            name = name.replace('/', '.');\n+            name = name.substring(0, name.length() - \".class\".length());\n+            classNames.add(name);\n+          }\n+        }\n+      } catch (IOException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+  }\n+\n+  @Benchmark\n+  public void loadLotsOfClasses() throws ClassNotFoundException {\n+    for (String className : classNames) {\n+      try {\n+        Class.forName(className, false, TypeMatchingBenchmark.class.getClassLoader());\n+      } catch (NoClassDefFoundError e) {\n+        // many classes in the jar files have optional dependencies which are not present\n+      }\n+    }\n+  }\n+\n+  @Fork(jvmArgsAppend = \"-javaagent:/path/to/opentelemetry-javaagent-master.jar\")\n+  public static class WithAgentMaster extends TypeMatchingBenchmark {}", "originalCommit": "afc1a5555c297d4b6b96263f81edf3251f69b00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyODA3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/768#discussion_r460428071", "bodyText": "i copied from another benchmark, i think the idea was to test against multiple versions of the agent, but i don't think needed so removed in both places", "author": "trask", "createdAt": "2020-07-25T17:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5Mjg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5MjkyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/768#discussion_r460392920", "bodyText": "java-agent->opentelemetry-agent", "author": "iNikem", "createdAt": "2020-07-25T10:52:01Z", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/TypeMatchingBenchmark.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.benchmark;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(5)\n+@Warmup(iterations = 0)\n+@Measurement(iterations = 1)\n+@OutputTimeUnit(MILLISECONDS)\n+public class TypeMatchingBenchmark {\n+\n+  private static final Set<String> classNames;\n+\n+  static {\n+    classNames = new HashSet<>();\n+    String classPath = System.getProperty(\"java.class.path\");\n+    for (String path : classPath.split(File.pathSeparator)) {\n+      if (!path.endsWith(\".jar\")) {\n+        continue;\n+      }\n+      try (JarFile jarFile = new JarFile(path)) {\n+        Enumeration<JarEntry> e = jarFile.entries();\n+        while (e.hasMoreElements()) {\n+          JarEntry jarEntry = e.nextElement();\n+          String name = jarEntry.getName();\n+          if (name.endsWith(\".class\")) {\n+            name = name.replace('/', '.');\n+            name = name.substring(0, name.length() - \".class\".length());\n+            classNames.add(name);\n+          }\n+        }\n+      } catch (IOException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+  }\n+\n+  @Benchmark\n+  public void loadLotsOfClasses() throws ClassNotFoundException {\n+    for (String className : classNames) {\n+      try {\n+        Class.forName(className, false, TypeMatchingBenchmark.class.getClassLoader());\n+      } catch (NoClassDefFoundError e) {\n+        // many classes in the jar files have optional dependencies which are not present\n+      }\n+    }\n+  }\n+\n+  @Fork(jvmArgsAppend = \"-javaagent:/path/to/opentelemetry-javaagent-master.jar\")\n+  public static class WithAgentMaster extends TypeMatchingBenchmark {}\n+\n+  @Fork(\n+      jvmArgsAppend =\n+          \"-javaagent:/path/to/opentelemetry-java-instrumentation/java-agent/build/libs/opentelemetry-javaagent.jar\")", "originalCommit": "afc1a5555c297d4b6b96263f81edf3251f69b00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9511b2946caf81d51719acf22188e504dd9f6f7c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9511b2946caf81d51719acf22188e504dd9f6f7c", "message": "feedback", "committedDate": "2020-07-25T17:48:26Z", "type": "commit"}]}