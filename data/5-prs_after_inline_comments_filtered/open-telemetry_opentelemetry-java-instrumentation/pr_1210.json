{"pr_number": 1210, "pr_title": "Add instrumentation of SQS.", "pr_createdAt": "2020-09-16T07:50:37Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210", "timeline": [{"oid": "24be1ef6c88b6c0804747b675aa4928e4f56b0d5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/24be1ef6c88b6c0804747b675aa4928e4f56b0d5", "message": "Add instrumentation of SQS.", "committedDate": "2020-09-16T07:50:14Z", "type": "commit"}, {"oid": "fbdf7b09160039a98aada397b2be23deed97860d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fbdf7b09160039a98aada397b2be23deed97860d", "message": "More play", "committedDate": "2020-09-17T04:32:07Z", "type": "commit"}, {"oid": "650d4d0537523b3b56a216fb0743f7373f093b6d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/650d4d0537523b3b56a216fb0743f7373f093b6d", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into sqs-instrumentation", "committedDate": "2020-09-18T05:51:10Z", "type": "commit"}, {"oid": "ad11320d95e7de22aff66932c7f2803abf0588f1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad11320d95e7de22aff66932c7f2803abf0588f1", "message": "Finish", "committedDate": "2020-09-18T07:11:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0ODg0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r490748848", "bodyText": "If I separated out a different module, though, not sure it'd be even possible to do this pattern.", "author": "anuraaga", "createdAt": "2020-09-18T07:15:27Z", "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AwsLambdaRequestHandlerInstrumentation.java", "diffHunk": "@@ -53,12 +56,28 @@\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-    return Collections.singletonMap(\n+    // Order of transformation matters. A bit fragile, but our unit tests will catch breakage\n+    // easily.\n+    Map<ElementMatcher<? super MethodDescription>, String> transformers = new LinkedHashMap<>();\n+\n+    // First instrument the function invocation itself.\n+    transformers.put(\n         isMethod()\n             .and(isPublic())\n             .and(named(\"handleRequest\"))\n             .and(takesArgument(1, named(\"com.amazonaws.services.lambda.runtime.Context\"))),\n         AwsLambdaRequestHandlerInstrumentation.class.getName() + \"$HandleRequestAdvice\");\n+\n+    // Then instrument message handling if appropriate.", "originalCommit": "ad11320d95e7de22aff66932c7f2803abf0588f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NDUzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r490874533", "bodyText": "I don't like this strict dependency between 2 instrumentations :(", "author": "iNikem", "createdAt": "2020-09-18T11:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0ODg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NTU1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r491285552", "bodyText": "I think it's similar to our servlet instrumentation - it seems to happen when there's an overall framework, with subframeworks built on top of it. Is it that bad?", "author": "anuraaga", "createdAt": "2020-09-19T06:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0ODg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMwMTcwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r491301703", "bodyText": "In general inter-instrumentation dependencies are Ok, I guess. But in this case they apply to the same method and the order is important. This seems fragile", "author": "iNikem", "createdAt": "2020-09-19T07:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0ODg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgwNzc3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r491807771", "bodyText": "i'm ok with current approach\nthe other option I see is to combine into a single advice, e.g.\n  public static class HandleEventAdvice {\n    @Advice.OnMethodEnter(suppress = Throwable.class)\n    public static void onEnter(\n        @Advice.Argument(value = 0, typing = Typing.DYNAMIC) Object arg,\n        @Advice.Argument(1) Context context,\n        @Advice.Local(\"otelFunctionSpan\") Span functionSpan,\n        @Advice.Local(\"otelFunctionScope\") Scope functionScope,\n        @Advice.Local(\"otelMessageSpan\") Span messageSpan,\n        @Advice.Local(\"otelMessageScope\") Scope messageScope) {\n      functionSpan = FUNCTION_TRACER.startSpan(context, Kind.SERVER);\n      functionScope = FUNCTION_TRACER.startScope(functionSpan);\n      if (arg instanceof SQSEvent) {\n        messageSpan = MESSAGE_TRACER.startSpan(context, (SQSEvent) arg);\n        messageScope = MESSAGE_TRACER.startScope(messageSpan);\n      }\n    }\n\n    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n    public static void stopSpan(\n        @Advice.Thrown Throwable throwable,\n        @Advice.Local(\"otelFunctionSpan\") Span functionSpan,\n        @Advice.Local(\"otelFunctionScope\") Scope functionScope,\n        @Advice.Local(\"otelMessageSpan\") Span messageSpan,\n        @Advice.Local(\"otelMessageScope\") Scope messageScope) {\n\n      if (messageScope != null) {\n        messageScope.close();\n        if (throwable != null) {\n          MESSAGE_TRACER.endExceptionally(messageSpan, throwable);\n        } else {\n          MESSAGE_TRACER.end(messageSpan);\n        }\n      }\n\n      functionScope.close();\n      if (throwable != null) {\n        FUNCTION_TRACER.endExceptionally(functionSpan, throwable);\n      } else {\n        FUNCTION_TRACER.end(functionSpan);\n      }\n      OpenTelemetrySdkAccess.forceFlush(1, TimeUnit.SECONDS);\n    }\n  }", "author": "trask", "createdAt": "2020-09-21T06:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0ODg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0NTg1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r493245854", "bodyText": "Thanks this is better!", "author": "anuraaga", "createdAt": "2020-09-23T07:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0ODg0OA=="}], "type": "inlineReview"}, {"oid": "b3bd8f598c3477c613a4aa5355ed6791584dc1e2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b3bd8f598c3477c613a4aa5355ed6791584dc1e2", "message": "process instead of weird", "committedDate": "2020-09-19T06:11:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDA3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r491174077", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-09-18T20:26:17Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -29,6 +29,8 @@\n \n public abstract class BaseTracer {\n   // Keeps track of the server span for the current trace.\n+  // TODO(anuraaga): Should probably be renamed to local root key since it could be a consumer span\n+  // or other non-server root.", "originalCommit": "ad11320d95e7de22aff66932c7f2803abf0588f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5Nzg3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r491797879", "bodyText": "this is odd because this class is not part of instrumentation-javaagent-instrumentation-api\nwhat do you think of requiring a javaagent running in lambda to be configured with the xray propagator, and then using normal extract?\nor if that's not good, maybe we can shade a copy of AwsXRayPropagator in this instrumentation (since it's an internal implementation detail of this particular instrumentation)?\nno need to change for now, maybe just a comment", "author": "trask", "createdAt": "2020-09-21T05:19:51Z", "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AbstractAwsLambdaInstrumentation.java", "diffHunk": "@@ -28,7 +28,10 @@ public AbstractAwsLambdaInstrumentation() {\n   public final String[] helperClassNames() {\n     return new String[] {\n       packageName + \".AwsLambdaInstrumentationHelper\",\n-      \"io.opentelemetry.instrumentation.awslambda.v1_0.AwsLambdaTracer\"\n+      \"io.opentelemetry.extensions.trace.propagation.AwsXRayPropagator\",", "originalCommit": "b3bd8f598c3477c613a4aa5355ed6791584dc1e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzODE2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r493238161", "bodyText": "Sounds like a good idea to me, it's a good idea when using AWS SDK instrumentation too", "author": "anuraaga", "createdAt": "2020-09-23T06:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5Nzg3OQ=="}], "type": "inlineReview"}, {"oid": "1f60541a9ae64a2289bf162f7a1ad03116b9c6c0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1f60541a9ae64a2289bf162f7a1ad03116b9c6c0", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into sqs-instrumentation", "committedDate": "2020-09-23T06:52:51Z", "type": "commit"}, {"oid": "85ed1d4ffa3ab6b92b9ff61492cd62caff7bc4bc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/85ed1d4ffa3ab6b92b9ff61492cd62caff7bc4bc", "message": "Cleanups", "committedDate": "2020-09-23T07:10:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NDUzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1210#discussion_r493884538", "bodyText": "I think can remove this now:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"io.opentelemetry.extensions.trace.propagation.AwsXRayPropagator\",", "author": "trask", "createdAt": "2020-09-23T20:45:57Z", "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AbstractAwsLambdaInstrumentation.java", "diffHunk": "@@ -28,7 +28,10 @@ public AbstractAwsLambdaInstrumentation() {\n   public final String[] helperClassNames() {\n     return new String[] {\n       packageName + \".AwsLambdaInstrumentationHelper\",\n-      \"io.opentelemetry.instrumentation.awslambda.v1_0.AwsLambdaTracer\"\n+      \"io.opentelemetry.extensions.trace.propagation.AwsXRayPropagator\",", "originalCommit": "85ed1d4ffa3ab6b92b9ff61492cd62caff7bc4bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "82225dcb1f5d64f2eac663521598ac043c676811", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/82225dcb1f5d64f2eac663521598ac043c676811", "message": "Update instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AbstractAwsLambdaInstrumentation.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-09-23T23:45:09Z", "type": "commit"}]}