{"pr_number": 401, "pr_title": "Support for khttp library", "pr_createdAt": "2020-05-12T17:40:45Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401", "timeline": [{"oid": "4b7220dd4a4d69078118e081b68554dbd26020a6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4b7220dd4a4d69078118e081b68554dbd26020a6", "message": "Support for khttp library", "committedDate": "2020-05-12T17:38:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyMTUwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r423921507", "bodyText": "This check shouldn't be needed unless there is an AWS SDK that has been built to use khttp as its engine. I can't find one but I could be wrong, or someone is manually doing the requests (probably unlikely due to complexity)", "author": "devinsba", "createdAt": "2020-05-12T17:49:15Z", "path": "instrumentation/khttp/src/main/java/io/opentelemetry/auto/instrumentation/khttp/KHttpAdvice.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.khttp;\n+\n+import static io.opentelemetry.auto.instrumentation.khttp.KHttpDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.khttp.KHttpDecorator.TRACER;\n+import static io.opentelemetry.auto.instrumentation.khttp.KHttpHeadersInjectAdapter.SETTER;\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.Span.Kind.CLIENT;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.trace.Span;\n+import java.util.HashMap;\n+import java.util.Map;\n+import khttp.KHttp;\n+import khttp.responses.Response;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+\n+public class KHttpAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static SpanWithScope methodEnter(\n+      @Advice.Argument(value = 0) String method,\n+      @Advice.Argument(value = 1) String uri,\n+      @Advice.Argument(\n+              value = 2,\n+              optional = true,\n+              typing = Assigner.Typing.DYNAMIC,\n+              readOnly = false)\n+          Map<String, String> headers) {\n+\n+    final int callDepth = CallDepthThreadLocalMap.incrementCallDepth(KHttp.class);\n+    if (callDepth > 0) {\n+      return null;\n+    }\n+\n+    final Span span = TRACER.spanBuilder(\"HTTP \" + method).setSpanKind(CLIENT).startSpan();\n+\n+    DECORATE.afterStart(span);\n+    DECORATE.onRequest(span, new RequestWrapper(method, uri));\n+\n+    final Context context = withSpan(span, Context.current());\n+    final boolean awsClientCall = headers.containsKey(\"amz-sdk-invocation-id\");", "originalCommit": "4b7220dd4a4d69078118e081b68554dbd26020a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyMzU5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r423923590", "bodyText": "This should probably be in KHttpHeadersInjectAdapter with a comment since it exists for functionality related to the headers", "author": "devinsba", "createdAt": "2020-05-12T17:52:25Z", "path": "instrumentation/khttp/src/main/java/io/opentelemetry/auto/instrumentation/khttp/KHttpDecorator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.khttp;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import khttp.responses.Response;\n+\n+public class KHttpDecorator extends HttpClientDecorator<RequestWrapper, Response> {\n+  public static final KHttpDecorator DECORATE = new KHttpDecorator();\n+\n+  public static final Tracer TRACER =\n+      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.khttp-0.1.0\");\n+\n+  public static Class emptyMap;\n+\n+  static {\n+    try {\n+      emptyMap = Class.forName(\"kotlin.collections.EmptyMap\");\n+    } catch (ClassNotFoundException e) {\n+    }\n+  }", "originalCommit": "4b7220dd4a4d69078118e081b68554dbd26020a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkyNTE4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r423925187", "bodyText": "This matcher is really expensive. You should also add a classLoaderMatcher() for this class to short circuit this matching logic", "author": "devinsba", "createdAt": "2020-05-12T17:54:46Z", "path": "instrumentation/khttp/src/main/java/io/opentelemetry/auto/instrumentation/khttp/KHttpInstrumentation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.khttp;\n+\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isAbstract;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class KHttpInstrumentation extends Instrumenter.Default {\n+\n+  public KHttpInstrumentation() {\n+    super(\"khttp\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"khttp.KHttp\"));", "originalCommit": "4b7220dd4a4d69078118e081b68554dbd26020a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9a29da29074c7597850fe11055fc673ffd8266a2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a29da29074c7597850fe11055fc673ffd8266a2", "message": "PR review comments", "committedDate": "2020-05-12T18:27:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODE3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r425398175", "bodyText": "this will format nicer if you don't nest the ands:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .and(not(isAbstract()))\n          \n          \n            \n                        .and(\n          \n          \n            \n                            named(\"request\")\n          \n          \n            \n                                .and(takesArgument(0, named(\"java.lang.String\")))\n          \n          \n            \n                                .and(takesArgument(1, named(\"java.lang.String\")))\n          \n          \n            \n                                .and(\n          \n          \n            \n                                    takesArgument(2, named(\"java.util.Map\"))\n          \n          \n            \n                                        .and(returns(named(\"khttp.responses.Response\"))))),\n          \n          \n            \n                        .and(not(isAbstract()))\n          \n          \n            \n                        .and(named(\"request\"))\n          \n          \n            \n                        .and(takesArgument(0, named(\"java.lang.String\")))\n          \n          \n            \n                        .and(takesArgument(1, named(\"java.lang.String\")))\n          \n          \n            \n                        .and(takesArgument(2, named(\"java.util.Map\")))\n          \n          \n            \n                        .and(returns(named(\"khttp.responses.Response\"))),", "author": "trask", "createdAt": "2020-05-14T20:04:18Z", "path": "instrumentation/khttp-0.1/src/main/java/io/opentelemetry/auto/instrumentation/khttp/KHttpInstrumentation.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.khttp;\n+\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isAbstract;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class KHttpInstrumentation extends Instrumenter.Default {\n+\n+  public KHttpInstrumentation() {\n+    super(\"khttp\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"khttp.KHttp\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"khttp.KHttp\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".KHttpHeadersInjectAdapter\",\n+      packageName + \".KHttpDecorator\",\n+      packageName + \".RequestWrapper\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(not(isAbstract()))\n+            .and(\n+                named(\"request\")\n+                    .and(takesArgument(0, named(\"java.lang.String\")))\n+                    .and(takesArgument(1, named(\"java.lang.String\")))\n+                    .and(\n+                        takesArgument(2, named(\"java.util.Map\"))\n+                            .and(returns(named(\"khttp.responses.Response\"))))),", "originalCommit": "9a29da29074c7597850fe11055fc673ffd8266a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwOTQ5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r425609496", "bodyText": "goJF does not agree with you on that :)", "author": "iNikem", "createdAt": "2020-05-15T07:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5NjE5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r426096198", "bodyText": "did u notice that i moved around the parentheses? I removed the nesting, which makes goJF format it nicer", "author": "trask", "createdAt": "2020-05-16T00:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNjYxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r426226614", "bodyText": "Indeed...", "author": "iNikem", "createdAt": "2020-05-17T07:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5ODE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5OTI2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r425399269", "bodyText": "can this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  @Advice.Argument(\n          \n          \n            \n                          value = 2,\n          \n          \n            \n                          optional = true,\n          \n          \n            \n                          typing = Assigner.Typing.DYNAMIC,\n          \n          \n            \n                          readOnly = false)\n          \n          \n            \n                      Map<String, String> headers) {\n          \n          \n            \n                  @Advice.Argument(2) Map<String, String> headers) {", "author": "trask", "createdAt": "2020-05-14T20:06:21Z", "path": "instrumentation/khttp-0.1/src/main/java/io/opentelemetry/auto/instrumentation/khttp/KHttpAdvice.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.khttp;\n+\n+import static io.opentelemetry.auto.instrumentation.khttp.KHttpDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.khttp.KHttpDecorator.TRACER;\n+import static io.opentelemetry.auto.instrumentation.khttp.KHttpHeadersInjectAdapter.SETTER;\n+import static io.opentelemetry.auto.instrumentation.khttp.KHttpHeadersInjectAdapter.asWritable;\n+import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.trace.Span.Kind.CLIENT;\n+import static io.opentelemetry.trace.TracingContextUtils.withSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.trace.Span;\n+import java.util.Map;\n+import khttp.KHttp;\n+import khttp.responses.Response;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+\n+public class KHttpAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static SpanWithScope methodEnter(\n+      @Advice.Argument(value = 0) String method,\n+      @Advice.Argument(value = 1) String uri,\n+      @Advice.Argument(\n+              value = 2,\n+              optional = true,\n+              typing = Assigner.Typing.DYNAMIC,\n+              readOnly = false)\n+          Map<String, String> headers) {", "originalCommit": "9a29da29074c7597850fe11055fc673ffd8266a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwMTA5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/401#discussion_r425401097", "bodyText": "just to follow convention:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.khttp-0.1.0\");\n          \n          \n            \n                  OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.khttp-0.1\");", "author": "trask", "createdAt": "2020-05-14T20:09:57Z", "path": "instrumentation/khttp-0.1/src/main/java/io/opentelemetry/auto/instrumentation/khttp/KHttpDecorator.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.khttp;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import khttp.responses.Response;\n+\n+public class KHttpDecorator extends HttpClientDecorator<RequestWrapper, Response> {\n+  public static final KHttpDecorator DECORATE = new KHttpDecorator();\n+\n+  public static final Tracer TRACER =\n+      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.khttp-0.1.0\");", "originalCommit": "9a29da29074c7597850fe11055fc673ffd8266a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f2c23268c24fc43a31c7d645f9a2bfd65f91c25", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0f2c23268c24fc43a31c7d645f9a2bfd65f91c25", "message": "Polish", "committedDate": "2020-05-15T07:40:23Z", "type": "commit"}, {"oid": "72a65e4b1e5f48b4d283c4d11013a7426aa31d32", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72a65e4b1e5f48b4d283c4d11013a7426aa31d32", "message": "Update instrumentation/khttp-0.1/src/main/java/io/opentelemetry/auto/instrumentation/khttp/KHttpInstrumentation.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-05-17T07:11:45Z", "type": "commit"}, {"oid": "ded149f29079685c13e2b8ae8052518f9cdbcec2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ded149f29079685c13e2b8ae8052518f9cdbcec2", "message": "Merge branch 'master' into khttp", "committedDate": "2020-05-17T17:19:53Z", "type": "commit"}]}