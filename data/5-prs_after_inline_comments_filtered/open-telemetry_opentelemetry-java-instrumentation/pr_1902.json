{"pr_number": 1902, "pr_title": "Tomcat server handlers", "pr_createdAt": "2020-12-14T18:28:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902", "timeline": [{"oid": "ca64f48f68d819128de659159763d25517d26ebb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ca64f48f68d819128de659159763d25517d26ebb", "message": "Tomcat server handler with passing integration and smoke tests.", "committedDate": "2020-12-14T14:46:35Z", "type": "commit"}, {"oid": "50b4e8d926a3b72a43d75afef7f1882356e1d100", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/50b4e8d926a3b72a43d75afef7f1882356e1d100", "message": "Update server span name from the servlet integration instead of trying to mimic it from the server handler.", "committedDate": "2020-12-14T18:11:30Z", "type": "commit"}, {"oid": "95ceae157b289d686aded7a9949b1f92a9a4c70f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/95ceae157b289d686aded7a9949b1f92a9a4c70f", "message": "Cleanup and more javadocs.", "committedDate": "2020-12-14T18:21:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcxNzY2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r542717665", "bodyText": "Why do you need this AppServerBridge.getUnhandledThrowable? You can record the exception on SERVER span write when it happened inside servlet instrumentation. You don't need to pass it up.", "author": "iNikem", "createdAt": "2020-12-14T20:01:14Z", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);", "originalCommit": "95ceae157b289d686aded7a9949b1f92a9a4c70f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNzYxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543117619", "bodyText": "Good point! Looks that this works. Will change.", "author": "vovencij", "createdAt": "2020-12-15T07:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcxNzY2NQ=="}], "type": "inlineReview"}, {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c7888b11f3e9ee4122fbb22b712b1209ac288be4", "message": "Use Java8BytecodeBridge in advice code.", "committedDate": "2020-12-14T20:01:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDE3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543040178", "bodyText": "Jetty and Servlet advice also does this, do you think applicable here also?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                  // Check again in case the request finished before adding the listener.\n          \n          \n            \n                  if (!request.isAsync() && responseHandled.compareAndSet(false, true)) {\n          \n          \n            \n                    tracer().end(context, response);\n          \n          \n            \n                  }\n          \n          \n            \n                }", "author": "trask", "createdAt": "2020-12-15T04:37:05Z", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);\n+      }\n+      return;\n+    }\n+\n+    if (response.isCommitted()) {\n+      tracer().end(context, response);\n+      return;\n+    }\n+\n+    Object note = request.getNote(1);\n+    if (note instanceof org.apache.catalina.connector.Request) {\n+      AtomicBoolean responseHandled = new AtomicBoolean(false);\n+\n+      org.apache.catalina.connector.Request servletRequest =\n+          (org.apache.catalina.connector.Request) note;\n+      if (servletRequest.isAsync()) {\n+        try {\n+          servletRequest\n+              .getAsyncContext()\n+              .addListener(new TagSettingAsyncListener(responseHandled, context));\n+        } catch (IllegalStateException e) {\n+          // thrown by tomcat if request was already handled while setting the listener.\n+          tracer().end(context, response);\n+        }\n+      }\n+    }", "originalCommit": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MTk4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544061985", "bodyText": "@vovencij ?", "author": "iNikem", "createdAt": "2020-12-16T07:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyODk3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544128977", "bodyText": "Checked Tomcat's source code, the check is relevant for older tomcats (7). Newer tomcats (e.g., 9) will throw IllegalStateException in this case, which is handled above. Added the check.", "author": "vovencij", "createdAt": "2020-12-16T09:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543040742", "bodyText": "can you add a comment here about why not passing response when it's not committed? it's not obvious to me at least", "author": "trask", "createdAt": "2020-12-15T04:38:52Z", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);", "originalCommit": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwODg2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543108867", "bodyText": "If the response is not yet committed, then response headers, including response code, are not yet written to the output stream. And the only reason response is passed to the endExceptionally is to read the response code.\n.... And after looking at the #894 and into endExceptionally I see that in this case http.status_code will be set to 500 even if it wasn't actually sent. Maybe this has to be fixed also, but I'm reluctant to change that logic in the current PR.", "author": "vovencij", "createdAt": "2020-12-15T07:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNDk4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543114986", "bodyText": "This comment better be in the code :)", "author": "iNikem", "createdAt": "2020-12-15T07:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNTYwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543135600", "bodyText": "Coming soon...", "author": "vovencij", "createdAt": "2020-12-15T08:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MTExMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543041110", "bodyText": "no need for this null check I think\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (context == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "author": "trask", "createdAt": "2020-12-15T04:40:09Z", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+", "originalCommit": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MjUzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543172534", "bodyText": "Removed.", "author": "vovencij", "createdAt": "2020-12-15T09:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MzI4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543043283", "bodyText": "the SERVER span name is also updated in several of the web framework instrumentations", "author": "trask", "createdAt": "2020-12-15T04:46:48Z", "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "diffHunk": "@@ -32,10 +36,18 @@ public static void onEnter(\n \n     Context attachedContext = tracer().getServerContext(httpServletRequest);\n     if (attachedContext != null) {\n-      if (tracer().needsRescoping(attachedContext)) {\n+      if (Servlet3HttpServerTracer.needsRescoping(attachedContext)) {\n         scope = attachedContext.makeCurrent();\n       }\n \n+      // We're interested only in the very first suggested name, as this is where the initial\n+      // request arrived. There are potential forward and other scenarios, where servlet path\n+      // may change, but we don't want this to be reflected in the span name.\n+      if (!AppServerBridge.isBetterNameSuggested(attachedContext)) {\n+        tracer().updateServerSpanName(httpServletRequest);\n+        AppServerBridge.setBetterNameSuggested(attachedContext, true);\n+      }", "originalCommit": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3OTI5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543079293", "bodyText": "Web Framework instrumentations are expecting the SERVER span to be present and to update the server span name unconditionally. Servlet integration was either creating a new SERVER span or exiting as soon as possible if a SERVER span was already present. This flag is actually needed for the Servlet instrumentation only to indicate that the servlet instrumentation itself has set the name. I probably should rename methods to better reflect what's happening.", "author": "vovencij", "createdAt": "2020-12-15T06:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MzI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3NDk3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543074978", "bodyText": "It's better if we can have a single key / object with multiple fields for any particular concern, rather than multiple keys", "author": "anuraaga", "createdAt": "2020-12-15T06:16:06Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =", "originalCommit": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNzEyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543137121", "bodyText": "Fixed.", "author": "vovencij", "createdAt": "2020-12-15T08:22:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3NDk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjU5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543112597", "bodyText": "Why exactly do we want to record exception in SERVER span if that was swallowed inside it?", "author": "iNikem", "createdAt": "2020-12-15T07:38:58Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-unhandled-throwable\");\n+  public static final ContextKey<AtomicBoolean> SERVLET_SUGGESTED_BETTER_NAME_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-better-name-suggested\");\n+\n+  public static Context init(Context ctx) {\n+    return ctx.with(AppServerBridge.THROWABLE_CONTEXT_KEY, new AtomicReference<>())\n+        .with(AppServerBridge.SERVLET_SUGGESTED_BETTER_NAME_KEY, new AtomicBoolean(false));\n+  }\n+\n+  /**\n+   * This is for servlet instrumentation to record exceptions unhandled by servlets and filters,\n+   * that app-server integrations are interested in (to fail the span exceptionally with attached\n+   * throwable), but which may be swallowed by an app-server before execution arrives to an", "originalCommit": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTk5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543131990", "bodyText": "I changed this part as you have suggested earlier - record throwable from the outermost servlet/filter instead of storing it in the context. Will push soon.", "author": "vovencij", "createdAt": "2020-12-15T08:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNTAyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543135025", "bodyText": "I don't like AppServerBridge at all. I have no better suggestions right now, but I will think about it...\n\nAfter removing throwables from this bridge, the only thing it has left is the flag for the updated name. The flag is only used by the servlet instrumentation, but it must have the same lifetime as the context created by the app server, so this bridge must be added to the context by the server instrumentation. You are welcome to suggest a better name or  more elegant approach altogether.", "author": "vovencij", "createdAt": "2020-12-15T08:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNjk0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543116949", "bodyText": "Why this change?", "author": "iNikem", "createdAt": "2020-12-15T07:46:50Z", "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "diffHunk": "@@ -32,10 +36,18 @@ public static void onEnter(\n \n     Context attachedContext = tracer().getServerContext(httpServletRequest);\n     if (attachedContext != null) {\n-      if (tracer().needsRescoping(attachedContext)) {\n+      if (Servlet3HttpServerTracer.needsRescoping(attachedContext)) {", "originalCommit": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTI2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543131263", "bodyText": "needsRescoping is a static method. IntelliJ suggested.", "author": "vovencij", "createdAt": "2020-12-15T08:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNjk0OQ=="}], "type": "inlineReview"}, {"oid": "4cff205f8d7173ab8ee5b3d752f85755293cf82c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4cff205f8d7173ab8ee5b3d752f85755293cf82c", "message": "Use Java8BytecodeBridge in advice code.", "committedDate": "2020-12-15T08:22:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0OTA5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543149096", "bodyText": "Should be \"io.opentelemetry.javaagent.tomcat\" to be consistent with other integrations", "author": "laurit", "createdAt": "2020-12-15T08:40:53Z", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {\n+    Context context =\n+        AppServerBridge.init(startSpan(request, request, request, adapterClassName + \".service\"));\n+\n+    // context must be reattached, because it has new attributes compared to the one returned from\n+    // startSpan().\n+    attachServerContext(context, request);\n+    return context;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"tomcat\";", "originalCommit": "4cff205f8d7173ab8ee5b3d752f85755293cf82c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MjI0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543172248", "bodyText": "Yes, fixed.", "author": "vovencij", "createdAt": "2020-12-15T09:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0OTA5Ng=="}], "type": "inlineReview"}, {"oid": "a0207a02a5bd1ec548c9ead2036708172c09919c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a0207a02a5bd1ec548c9ead2036708172c09919c", "message": "Use earliest version for compilation and muzzling.", "committedDate": "2020-12-15T08:57:26Z", "type": "commit"}, {"oid": "ccdf5da62123844efda179aa928d869426953ebb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ccdf5da62123844efda179aa928d869426953ebb", "message": "Use consistent instrumentation name.", "committedDate": "2020-12-15T09:15:03Z", "type": "commit"}, {"oid": "ed8ec354f3ccae910e37e6d5792fbecb23e29030", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed8ec354f3ccae910e37e6d5792fbecb23e29030", "message": "Record throwables only if the context is managed by something else.", "committedDate": "2020-12-15T12:30:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwNjYwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543406605", "bodyText": "I now seems to me that this whole logic can live in ServletHttpServerTracer. This will also remove some ifs from servlet advices.", "author": "iNikem", "createdAt": "2020-12-15T14:44:16Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Helper container for Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {", "originalCommit": "ed8ec354f3ccae910e37e6d5792fbecb23e29030", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "41edea5d294675ea2508887dee2d46363bb246b3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/41edea5d294675ea2508887dee2d46363bb246b3", "message": "Getting scope handling right. Moved server span renaming logic via AppServerBridge to the ServletHttpServerTracer.", "committedDate": "2020-12-15T15:11:46Z", "type": "commit"}, {"oid": "83b86f94b288697abc515545d9a353c6072e54e9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/83b86f94b288697abc515545d9a353c6072e54e9", "message": "codenarc", "committedDate": "2020-12-15T15:34:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzcxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544057718", "bodyText": "Is this isPresent needed here? The result of if is the same without it", "author": "iNikem", "createdAt": "2020-12-16T07:09:49Z", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -126,4 +131,12 @@ private static String getSpanName(HttpServletRequest request) {\n     }\n     return spanName;\n   }\n+\n+  public void updateServerSpanNameOnce(Context attachedContext, HttpServletRequest request) {\n+    if (AppServerBridge.isPresent(attachedContext)", "originalCommit": "83b86f94b288697abc515545d9a353c6072e54e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MDc2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544080766", "bodyText": "isPresent is for the cases, where there is no app-server specific tracer (and thus no AppServerBridge in the context) which actually needs this update. Without this check camel tests, for example, will fail because the name changes unexpectedly.", "author": "vovencij", "createdAt": "2020-12-16T07:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1OTEzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544059135", "bodyText": "Shouldn't this comment go to updateServerSpanNameOnce method declaration site?", "author": "iNikem", "createdAt": "2020-12-16T07:11:35Z", "path": "instrumentation/servlet/servlet-2.2/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v2_2/Servlet2Advice.java", "diffHunk": "@@ -24,14 +26,20 @@ public static void onEnter(\n       @Advice.Argument(value = 1, typing = Assigner.Typing.DYNAMIC) ServletResponse response,\n       @Advice.Local(\"otelContext\") Context context,\n       @Advice.Local(\"otelScope\") Scope scope) {\n+    CallDepthThreadLocalMap.incrementCallDepth(Servlet2Advice.class);\n \n     if (!(request instanceof HttpServletRequest) || !(response instanceof HttpServletResponse)) {\n       return;\n     }\n \n     HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n \n-    if (tracer().getServerContext(httpServletRequest) != null) {\n+    Context serverContext = tracer().getServerContext(httpServletRequest);\n+    if (serverContext != null) {\n+      // We're interested only in the very first suggested name, as this is where the initial", "originalCommit": "83b86f94b288697abc515545d9a353c6072e54e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MTE2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544061163", "bodyText": "scope can be null here", "author": "iNikem", "createdAt": "2020-12-16T07:13:58Z", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    scope.close();", "originalCommit": "83b86f94b288697abc515545d9a353c6072e54e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544063364", "bodyText": "Pass the whole Method here instead of adapterClassName. There is getSpanName(Method)", "author": "iNikem", "createdAt": "2020-12-16T07:16:24Z", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {", "originalCommit": "83b86f94b288697abc515545d9a353c6072e54e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzMDAxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544130013", "bodyText": "But I don't have the method \ud83e\udd14", "author": "vovencij", "createdAt": "2020-12-16T09:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzODk4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544138984", "bodyText": "But you can have :) Like servlet advices do", "author": "iNikem", "createdAt": "2020-12-16T09:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MTQ3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544161471", "bodyText": "Now you lost me. Servlet advices set server span name from the URL obtained from the Request. What method are you talking about?", "author": "vovencij", "createdAt": "2020-12-16T09:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxMDcxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544210713", "bodyText": "Take a look at io.opentelemetry.javaagent.instrumentation.servlet.http.HttpServletResponseInstrumentationModule.SendAdvice", "author": "iNikem", "createdAt": "2020-12-16T11:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI5ODY4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544298684", "bodyText": "ok", "author": "vovencij", "createdAt": "2020-12-16T13:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}], "type": "inlineReview"}, {"oid": "8d16daa9444b7d547812ea6d812ce568e90b38e5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8d16daa9444b7d547812ea6d812ce568e90b38e5", "message": "more PR comments addressed", "committedDate": "2020-12-16T09:58:26Z", "type": "commit"}, {"oid": "198ffc6cf5b07ed956a443fe0987b806b04f1250", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/198ffc6cf5b07ed956a443fe0987b806b04f1250", "message": "Pass Method to startServerSpan", "committedDate": "2020-12-16T13:30:14Z", "type": "commit"}]}