{"pr_number": 1442, "pr_title": "Proper scope handling for Resteasy instrumentations.", "pr_createdAt": "2020-10-21T14:39:30Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1442", "timeline": [{"oid": "3feb6a6c3959d2a91fe1a6768c6627a89f0dd97c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3feb6a6c3959d2a91fe1a6768c6627a89f0dd97c", "message": "Proper scope handling for Resteasy instrumentations.", "committedDate": "2020-10-21T16:00:05Z", "type": "commit"}, {"oid": "f6788213e200a1b39e7feeb10c65813c9aa9d91d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f6788213e200a1b39e7feeb10c65813c9aa9d91d", "message": "Format", "committedDate": "2020-10-21T16:00:05Z", "type": "commit"}, {"oid": "f6788213e200a1b39e7feeb10c65813c9aa9d91d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f6788213e200a1b39e7feeb10c65813c9aa9d91d", "message": "Format", "committedDate": "2020-10-21T16:00:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4NjM2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1442#discussion_r509886365", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * all requests through single point. Both sync ADN async! This allows for easy instrumentation and\n          \n          \n            \n             * all requests through single point. Both sync AND async! This allows for easy instrumentation and", "author": "trask", "createdAt": "2020-10-22T05:21:42Z", "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/jaxrs-client-2.0-resteasy-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrsclient/v2_0/ResteasyClientConnectionErrorInstrumentation.java", "diffHunk": "@@ -5,30 +5,32 @@\n \n package io.opentelemetry.javaagent.instrumentation.jaxrsclient.v2_0;\n \n-import static io.opentelemetry.javaagent.instrumentation.jaxrsclient.v2_0.JaxRsClientTracer.TRACER;\n+import static io.opentelemetry.javaagent.instrumentation.jaxrsclient.v2_0.ResteasyClientTracer.TRACER;\n import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n import static net.bytebuddy.matcher.ElementMatchers.named;\n-import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n import com.google.auto.service.AutoService;\n+import io.opentelemetry.context.Scope;\n import io.opentelemetry.javaagent.tooling.Instrumenter;\n import io.opentelemetry.trace.Span;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n+import javax.ws.rs.core.Response;\n import net.bytebuddy.asm.Advice;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n-import org.jboss.resteasy.client.jaxrs.internal.ClientConfiguration;\n+import org.jboss.resteasy.client.jaxrs.internal.ClientInvocation;\n \n /**\n- * JAX-RS Client API doesn't define a good point where we can handle connection failures, so we must\n- * handle these errors at the implementation level.\n+ * Unlike other supported JAX-RS Client implementations, Resteasy's one is very simple and passes\n+ * all requests through single point. Both sync ADN async! This allows for easy instrumentation and", "originalCommit": "f6788213e200a1b39e7feeb10c65813c9aa9d91d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}