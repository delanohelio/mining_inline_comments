{"pr_number": 1897, "pr_title": "Propagate context in Spring SimpleAsyncTaskExecutor", "pr_createdAt": "2020-12-14T10:48:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897", "timeline": [{"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5a519858af458f3d5191b206c901e2ff6570b5b5", "message": "Propagate context in Spring SimpleAsyncTaskExecutor", "committedDate": "2020-12-14T10:37:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyODM4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543028386", "bodyText": "Since this is protected on a public class, it's effectively not an internal API so seems like a great instrumentation point.", "author": "anuraaga", "createdAt": "2020-12-15T04:00:55Z", "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SimpleAsyncTaskExecutorInstrumentation.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public class SimpleAsyncTaskExecutorInstrumentation implements TypeInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.core.task.SimpleAsyncTaskExecutor\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isProtected())", "originalCommit": "5a519858af458f3d5191b206c901e2ff6570b5b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2ODYzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543068632", "bodyText": "Is it spring-core or something specific for executors?", "author": "iNikem", "createdAt": "2020-12-15T05:59:39Z", "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SpringCoreInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.core;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringCoreInstrumentationModule extends InstrumentationModule {\n+  public SpringCoreInstrumentationModule() {\n+    super(\"spring-core\", \"spring-core-2.0\");", "originalCommit": "5a519858af458f3d5191b206c901e2ff6570b5b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2MDAwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543260008", "bodyText": "spring-core is where the AsyncTaskExecutor interface is placed - most implementations are in some other modules though (spring-context, spring-security, ...)", "author": "mateuszrzeszutek", "createdAt": "2020-12-15T11:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2ODYzMg=="}], "type": "inlineReview"}, {"oid": "1ce8e40e281f3100c70bc3bc547ada9f337dfbad", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1ce8e40e281f3100c70bc3bc547ada9f337dfbad", "message": "Propagate context in Spring SimpleAsyncTaskExecutor: code review comments", "committedDate": "2020-12-15T11:21:37Z", "type": "commit"}]}