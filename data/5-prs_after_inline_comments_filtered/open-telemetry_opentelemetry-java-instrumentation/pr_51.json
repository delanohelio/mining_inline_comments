{"pr_number": 51, "pr_title": "Use OpenTelemetry API", "pr_createdAt": "2020-01-08T23:34:41Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51", "timeline": [{"oid": "7a037c092a8d1177a339cc0df8a2b418e8a3c037", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7a037c092a8d1177a339cc0df8a2b418e8a3c037", "message": "Remove dd-trace-ot", "committedDate": "2020-01-12T04:59:44Z", "type": "commit"}, {"oid": "d8890d27e2703018a688aef3c97c3a83deded5a9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d8890d27e2703018a688aef3c97c3a83deded5a9", "message": "Remove disableShadowRelocate", "committedDate": "2020-01-12T04:59:45Z", "type": "commit"}, {"oid": "2493557e16118e03b96c63c15aedff49c21064c5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2493557e16118e03b96c63c15aedff49c21064c5", "message": "Remove GlobalTracer and ScopeListener", "committedDate": "2020-01-12T05:05:29Z", "type": "commit"}, {"oid": "749b43b1d120c2ef883ebabef9140f6b9761fccd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/749b43b1d120c2ef883ebabef9140f6b9761fccd", "message": "Comment out instr depending on activeScope", "committedDate": "2020-01-12T05:08:17Z", "type": "commit"}, {"oid": "5379c7af84ee5b03a6548dec895e8e72581e67e1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5379c7af84ee5b03a6548dec895e8e72581e67e1", "message": "OpenTelemetry implementation", "committedDate": "2020-01-12T05:16:04Z", "type": "commit"}, {"oid": "d6bf010c67e9d7964f85cbf7749032b1357f7d95", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d6bf010c67e9d7964f85cbf7749032b1357f7d95", "message": "Update spring-webflux instrumentation", "committedDate": "2020-01-12T05:25:27Z", "type": "commit"}, {"oid": "d95dcce5b0db205322da24c809c0fa1716f65c27", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d95dcce5b0db205322da24c809c0fa1716f65c27", "message": "Update jax-rs-annotation instrumentation", "committedDate": "2020-01-12T05:25:27Z", "type": "commit"}, {"oid": "a7038b8c0aa6788145ac07735c78740291cfd39b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a7038b8c0aa6788145ac07735c78740291cfd39b", "message": "Update test infrastruture", "committedDate": "2020-01-12T05:25:27Z", "type": "commit"}, {"oid": "f2db585be56dc9b2fa63a094668db2edfb4ef5b6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f2db585be56dc9b2fa63a094668db2edfb4ef5b6", "message": "Update instrumentation tests to pass", "committedDate": "2020-01-12T05:25:27Z", "type": "commit"}, {"oid": "f48bc212e0c7265eabed7f023c413670c1cb02e0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f48bc212e0c7265eabed7f023c413670c1cb02e0", "message": "Fix ratpack failing test", "committedDate": "2020-01-12T05:27:03Z", "type": "commit"}, {"oid": "f48bc212e0c7265eabed7f023c413670c1cb02e0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f48bc212e0c7265eabed7f023c413670c1cb02e0", "message": "Fix ratpack failing test", "committedDate": "2020-01-12T05:27:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MDUyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51#discussion_r366090520", "bodyText": "Do you know if OpenTelemetry handles this edge case already?", "author": "tylerbenson", "createdAt": "2020-01-13T23:53:11Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTracerImpl.java", "diffHunk": "@@ -283,55 +269,54 @@ public boolean equals(final Object obj) {\n     @Override\n     public <C> void inject(final AgentSpan span, final C carrier, final Setter<C> setter) {\n       assert span instanceof AgentSpanImpl;\n-      tracer.inject(\n-          ((AgentSpanImpl) span).getSpan().context(),\n-          new AgentPropagationImpl.Injector<>(carrier, setter));\n+      tracer\n+          .getHttpTextFormat()\n+          .inject(\n+              ((AgentSpanImpl) span).getSpan().getContext(),\n+              carrier,\n+              new AgentPropagationImpl.Injector<>(setter));\n     }\n \n-    private final class Injector<C> implements TextMapInject {\n-      private final C carrier;\n+    private final class Injector<C> implements HttpTextFormat.Setter<C> {\n       private final Setter<C> setter;\n \n-      private Injector(final C carrier, final Setter<C> setter) {\n-        this.carrier = carrier;\n+      private Injector(final Setter<C> setter) {\n         this.setter = setter;\n       }\n \n       @Override\n-      public void put(final String key, final String value) {\n+      public void put(final C carrier, final String key, final String value) {\n         setter.set(carrier, key, value);\n       }\n     }\n \n     @Override\n     public <C> AgentSpan.Context extract(final C carrier, final Getter<C> getter) {\n-      return new AgentContextImpl(tracer.extract(new Extractor(carrier, getter)));\n+      SpanContext extract;\n+      try {\n+        extract = tracer.getHttpTextFormat().extract(carrier, new Extractor<>(getter));\n+      } catch (final IllegalArgumentException e) {\n+        extract = null;\n+      }\n+      return new AgentContextImpl(extract);\n     }\n   }\n \n-  private static final class Extractor<C> implements TextMapExtract {\n-    private final Map<String, String> extracted;\n-\n-    private Extractor(final C carrier, final Getter<C> getter) {\n-      extracted = new HashMap<>();\n-      for (final String key : getter.keys(carrier)) {\n-        // extracted header value\n-        String s = getter.get(carrier, key);\n-        // in case of multiple values in the header, need to parse", "originalCommit": "5379c7af84ee5b03a6548dec895e8e72581e67e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNDk4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51#discussion_r366104989", "bodyText": "I don't think so, but I'm not sure that it should? (e.g. Tracestate header value is comma-separated key-value pairs)", "author": "trask", "createdAt": "2020-01-14T00:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MDUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5Mjk1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51#discussion_r366092955", "bodyText": "This is going to cause some weirdness... I couldn't think of a better solution though.  Ideas?", "author": "tylerbenson", "createdAt": "2020-01-14T00:02:29Z", "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/main/java/datadog/trace/instrumentation/jaxrs2/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -63,11 +63,10 @@ public void onJaxRsSpan(\n     }\n   }\n \n-  private void updateParent(AgentSpan span, final String resourceName) {\n+  private void updateParent(final AgentSpan span, final String resourceName) {\n     if (span == null) {\n       return;\n     }\n-    span = span.getLocalRootSpan();", "originalCommit": "d95dcce5b0db205322da24c809c0fa1716f65c27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNTAyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51#discussion_r366105020", "bodyText": "I couldn't think of anything better either. I just added this to #50 so we can come back to it later.", "author": "trask", "createdAt": "2020-01-14T00:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5Mjk1NQ=="}], "type": "inlineReview"}]}