{"pr_number": 1967, "pr_title": "Start each server version once for smoke tests", "pr_createdAt": "2020-12-28T16:17:34Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1967", "timeline": [{"oid": "78eb8b7e47c4fba404a0480318187f6c266ff5e2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78eb8b7e47c4fba404a0480318187f6c266ff5e2", "message": "start each server version once for smoke tests", "committedDate": "2020-12-28T16:12:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MDk3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1967#discussion_r552250978", "bodyText": "can this be ThreadLocal<AppServer> currentAppServer?", "author": "trask", "createdAt": "2021-01-05T23:03:52Z", "path": "smoke-tests/src/test/java/io/opentelemetry/smoketest/AppServerTestRunner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.model.InitializationError;\n+import org.spockframework.runtime.Sputnik;\n+\n+/**\n+ * Customized spock test runner that runs tests on multiple app server versions based on {@link\n+ * AppServer} annotations. This runner selects first server based on {@link AppServer} annotation\n+ * calls setupSpec, all test method and cleanupSpec, selects next {@link AppServer} and calls the\n+ * same methods. This process is repeated until tests have run for all {@link AppServer}\n+ * annotations. Tests should start server in setupSpec and stop it in cleanupSpec.\n+ */\n+public class AppServerTestRunner extends Sputnik {\n+  private static final Map<Class<?>, AppServer> runningAppServer =\n+      Collections.synchronizedMap(new HashMap<>());", "originalCommit": "78eb8b7e47c4fba404a0480318187f6c266ff5e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3NDM1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1967#discussion_r552274357", "bodyText": "I didn't use ThreadLocal because of spockframework/spock#67 Apparently there is a way to run tests in parallel (which I believe we don't use). Using a Map seemed like a safer choice.", "author": "laurit", "createdAt": "2021-01-06T00:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MDk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MTM3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1967#discussion_r552251379", "bodyText": "we use \"standard\" Java verbosity level \ud83d\ude04\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  for (AppServer a : appServers) {\n          \n          \n            \n                  for (AppServer appServer : appServers) {", "author": "trask", "createdAt": "2021-01-05T23:05:03Z", "path": "smoke-tests/src/test/java/io/opentelemetry/smoketest/AppServerTestRunner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.model.InitializationError;\n+import org.spockframework.runtime.Sputnik;\n+\n+/**\n+ * Customized spock test runner that runs tests on multiple app server versions based on {@link\n+ * AppServer} annotations. This runner selects first server based on {@link AppServer} annotation\n+ * calls setupSpec, all test method and cleanupSpec, selects next {@link AppServer} and calls the\n+ * same methods. This process is repeated until tests have run for all {@link AppServer}\n+ * annotations. Tests should start server in setupSpec and stop it in cleanupSpec.\n+ */\n+public class AppServerTestRunner extends Sputnik {\n+  private static final Map<Class<?>, AppServer> runningAppServer =\n+      Collections.synchronizedMap(new HashMap<>());\n+  private static final ThreadLocal<Class<?>> currentTestClass = new ThreadLocal<>();\n+  private final Class<?> testClass;\n+  private final AppServer[] appServers;\n+\n+  public AppServerTestRunner(Class<?> clazz) throws InitializationError {\n+    super(clazz);\n+    testClass = clazz;\n+    appServers = clazz.getAnnotationsByType(AppServer.class);\n+    if (appServers.length == 0) {\n+      throw new IllegalStateException(\"Add AppServer or AppServers annotation to test class\");\n+    }\n+  }\n+\n+  @Override\n+  public void run(RunNotifier notifier) {\n+    // run tests for all app servers\n+    try {\n+      for (AppServer a : appServers) {", "originalCommit": "78eb8b7e47c4fba404a0480318187f6c266ff5e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MTYxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1967#discussion_r552251616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AppServer a = runningAppServer.get(testClass);\n          \n          \n            \n                AppServer appServer = runningAppServer.get(testClass);", "author": "trask", "createdAt": "2021-01-05T23:05:45Z", "path": "smoke-tests/src/test/java/io/opentelemetry/smoketest/AppServerTestRunner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.model.InitializationError;\n+import org.spockframework.runtime.Sputnik;\n+\n+/**\n+ * Customized spock test runner that runs tests on multiple app server versions based on {@link\n+ * AppServer} annotations. This runner selects first server based on {@link AppServer} annotation\n+ * calls setupSpec, all test method and cleanupSpec, selects next {@link AppServer} and calls the\n+ * same methods. This process is repeated until tests have run for all {@link AppServer}\n+ * annotations. Tests should start server in setupSpec and stop it in cleanupSpec.\n+ */\n+public class AppServerTestRunner extends Sputnik {\n+  private static final Map<Class<?>, AppServer> runningAppServer =\n+      Collections.synchronizedMap(new HashMap<>());\n+  private static final ThreadLocal<Class<?>> currentTestClass = new ThreadLocal<>();\n+  private final Class<?> testClass;\n+  private final AppServer[] appServers;\n+\n+  public AppServerTestRunner(Class<?> clazz) throws InitializationError {\n+    super(clazz);\n+    testClass = clazz;\n+    appServers = clazz.getAnnotationsByType(AppServer.class);\n+    if (appServers.length == 0) {\n+      throw new IllegalStateException(\"Add AppServer or AppServers annotation to test class\");\n+    }\n+  }\n+\n+  @Override\n+  public void run(RunNotifier notifier) {\n+    // run tests for all app servers\n+    try {\n+      for (AppServer a : appServers) {\n+        runningAppServer.put(testClass, a);\n+        super.run(notifier);\n+      }\n+    } finally {\n+      runningAppServer.remove(testClass);\n+    }\n+  }\n+\n+  @Override\n+  public Description getDescription() {\n+    //\n+    currentTestClass.set(testClass);\n+    try {\n+      return super.getDescription();\n+    } finally {\n+      currentTestClass.remove();\n+    }\n+  }\n+\n+  // expose currently running app server\n+  // used to get current server and jvm version inside the test class\n+  public static AppServer currentAppServer(Class<?> testClass) {\n+    AppServer a = runningAppServer.get(testClass);", "originalCommit": "78eb8b7e47c4fba404a0480318187f6c266ff5e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NDk2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1967#discussion_r552254960", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Class<?> c = currentTestClass.get();\n          \n          \n            \n                Class<?> testClass = currentTestClass.get();", "author": "trask", "createdAt": "2021-01-05T23:15:11Z", "path": "smoke-tests/src/test/java/io/opentelemetry/smoketest/AppServerTestRunner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runners.model.InitializationError;\n+import org.spockframework.runtime.Sputnik;\n+\n+/**\n+ * Customized spock test runner that runs tests on multiple app server versions based on {@link\n+ * AppServer} annotations. This runner selects first server based on {@link AppServer} annotation\n+ * calls setupSpec, all test method and cleanupSpec, selects next {@link AppServer} and calls the\n+ * same methods. This process is repeated until tests have run for all {@link AppServer}\n+ * annotations. Tests should start server in setupSpec and stop it in cleanupSpec.\n+ */\n+public class AppServerTestRunner extends Sputnik {\n+  private static final Map<Class<?>, AppServer> runningAppServer =\n+      Collections.synchronizedMap(new HashMap<>());\n+  private static final ThreadLocal<Class<?>> currentTestClass = new ThreadLocal<>();\n+  private final Class<?> testClass;\n+  private final AppServer[] appServers;\n+\n+  public AppServerTestRunner(Class<?> clazz) throws InitializationError {\n+    super(clazz);\n+    testClass = clazz;\n+    appServers = clazz.getAnnotationsByType(AppServer.class);\n+    if (appServers.length == 0) {\n+      throw new IllegalStateException(\"Add AppServer or AppServers annotation to test class\");\n+    }\n+  }\n+\n+  @Override\n+  public void run(RunNotifier notifier) {\n+    // run tests for all app servers\n+    try {\n+      for (AppServer a : appServers) {\n+        runningAppServer.put(testClass, a);\n+        super.run(notifier);\n+      }\n+    } finally {\n+      runningAppServer.remove(testClass);\n+    }\n+  }\n+\n+  @Override\n+  public Description getDescription() {\n+    //\n+    currentTestClass.set(testClass);\n+    try {\n+      return super.getDescription();\n+    } finally {\n+      currentTestClass.remove();\n+    }\n+  }\n+\n+  // expose currently running app server\n+  // used to get current server and jvm version inside the test class\n+  public static AppServer currentAppServer(Class<?> testClass) {\n+    AppServer a = runningAppServer.get(testClass);\n+    if (a == null) {\n+      throw new IllegalStateException(\"Test not running for \" + testClass);\n+    }\n+    return a;\n+  }\n+\n+  // expose current test class\n+  // used for ignoring tests defined in base class that are expected to fail\n+  // on currently running server\n+  public static Class<?> currentTestClass() {\n+    Class<?> c = currentTestClass.get();", "originalCommit": "78eb8b7e47c4fba404a0480318187f6c266ff5e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1722d03c0495eddc52bc85411b0aa95a82b40c6e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1722d03c0495eddc52bc85411b0aa95a82b40c6e", "message": "Update smoke-tests/src/test/java/io/opentelemetry/smoketest/AppServerTestRunner.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2021-01-05T23:54:40Z", "type": "commit"}, {"oid": "bb2dd1057d2dfb108caf6356a385070b1f75a8e4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb2dd1057d2dfb108caf6356a385070b1f75a8e4", "message": "Update smoke-tests/src/test/java/io/opentelemetry/smoketest/AppServerTestRunner.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2021-01-05T23:54:54Z", "type": "commit"}, {"oid": "9645cc11d41ff4e4ac681b097c12a1ff0496c641", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9645cc11d41ff4e4ac681b097c12a1ff0496c641", "message": "Update smoke-tests/src/test/java/io/opentelemetry/smoketest/AppServerTestRunner.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2021-01-05T23:55:05Z", "type": "commit"}, {"oid": "9dcc19fbd8c8e734afb32fe1b091c7dd85d9a3a0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9dcc19fbd8c8e734afb32fe1b091c7dd85d9a3a0", "message": "review fixes", "committedDate": "2021-01-06T00:37:18Z", "type": "commit"}, {"oid": "eaa97f884cf1c3478fd7f5792bc68439b0cad42e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eaa97f884cf1c3478fd7f5792bc68439b0cad42e", "message": "review fix", "committedDate": "2021-01-06T01:09:11Z", "type": "commit"}]}