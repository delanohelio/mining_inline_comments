{"pr_number": 1601, "pr_title": "Add support for Reactor Netty's HttpClient", "pr_createdAt": "2020-11-09T18:47:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601", "timeline": [{"oid": "d767b880d29a36f057e758d591686723302e6244", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d767b880d29a36f057e758d591686723302e6244", "message": "Add support for Reactor Netty's HttpClient", "committedDate": "2020-11-09T18:45:36Z", "type": "commit"}, {"oid": "a00daa7c6baf6e06d6676d6027e74442debcba5b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a00daa7c6baf6e06d6676d6027e74442debcba5b", "message": "Format", "committedDate": "2020-11-09T21:03:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMTQ3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520501476", "bodyText": "You basically just need to move typeMatcher() and transformers() into the new TypeInstrumentation implementation:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @AutoService(Instrumenter.class)\n          \n          \n            \n            public final class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n          \n          \n            \n            \n          \n          \n            \n              public ReactorHttpClientInstrumentation() {\n          \n          \n            \n                super(\"reactor-httpclient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public ElementMatcher<TypeDescription> typeMatcher() {\n          \n          \n            \n                return named(\"reactor.netty.http.client.HttpClient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n          \n          \n            \n                return singletonMap(\n          \n          \n            \n                    isStatic().and(named(\"create\")),\n          \n          \n            \n                    ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public String[] helperClassNames() {\n          \n          \n            \n                return new String[] {\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n          \n          \n            \n                  // these below a transitive dependencies of AttributeKeys from above\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n          \n          \n            \n                };\n          \n          \n            \n              }\n          \n          \n            \n            @AutoService(InstrumentationModule.class)\n          \n          \n            \n            public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n          \n          \n            \n            \n          \n          \n            \n              public ReactorHttpClientInstrumentationModule() {\n          \n          \n            \n                super(\"reactor-httpclient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public String[] helperClassNames() {\n          \n          \n            \n                return new String[] {\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n          \n          \n            \n                  // these below a transitive dependencies of AttributeKeys from above\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n          \n          \n            \n                };\n          \n          \n            \n              }\n          \n          \n            \n              \n          \n          \n            \n              @Override\n          \n          \n            \n              public List<TypeInstrumentation> typeInstrumentations() {\n          \n          \n            \n                return singletonList(new HttpClientInstrumentation());\n          \n          \n            \n              }\n          \n          \n            \n              \n          \n          \n            \n              private static final class HttpClientInstrumentation implements TypeInstrumentation {\n          \n          \n            \n                @Override\n          \n          \n            \n                public ElementMatcher<TypeDescription> typeMatcher() {\n          \n          \n            \n                  return named(\"reactor.netty.http.client.HttpClient\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n          \n          \n            \n                  return singletonMap(\n          \n          \n            \n                      isStatic().and(named(\"create\")),\n          \n          \n            \n                      ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n          \n          \n            \n                }\n          \n          \n            \n              }", "author": "mateuszrzeszutek", "createdAt": "2020-11-10T11:46:27Z", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHttpClientInstrumentation() {\n+    super(\"reactor-httpclient\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.netty.http.client.HttpClient\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isStatic().and(named(\"create\")),\n+        ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n+      ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }", "originalCommit": "a00daa7c6baf6e06d6676d6027e74442debcba5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f09a0f924f5552fb1d52c8298aa7e183abfa728", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0f09a0f924f5552fb1d52c8298aa7e183abfa728", "message": "Update instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentation.java\n\nCo-authored-by: Mateusz Rzeszutek <mrzeszutek@splunk.com>", "committedDate": "2020-11-10T12:34:21Z", "type": "commit"}, {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38a30cf0f79c8117238af05c646eb1280ec86106", "message": "Convert to InstrumentationModule", "committedDate": "2020-11-10T12:44:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520561201", "bodyText": "How about naming it ReactorNettyInstrumentationModule? And using the following instrumentation names: \"reactor-netty\", \"reactor-netty-0.9\" (naming in accordance with our discussion in #1579)", "author": "mateuszrzeszutek", "createdAt": "2020-11-10T13:29:09Z", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorHttpClientInstrumentationModule() {\n+    super(\"reactor-httpclient\");", "originalCommit": "38a30cf0f79c8117238af05c646eb1280ec86106", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5NzA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520597099", "bodyText": "Yeah, it does seem logical, but... :) This is Reactor's HttpClient instrumentation, not reactor-netty-core. I think I would prefer to change module name to reactor_httpclient :)", "author": "iNikem", "createdAt": "2020-11-10T14:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM3Mzc3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521373776", "bodyText": "@mateuszrzeszutek @trask please help me with names :)\nReactor Netty provides separate clients and servers for TCP, UDP and HTTP. Right now we instrument only HttpClient. I think we should leave module name as reactor-netty, because it may in the future collect instrumentation for all parts of it. But I don't know if this should be one module (and its name then should be reactor-netty) or it is better to have separate modules per client/server.", "author": "iNikem", "createdAt": "2020-11-11T13:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4MDM4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521380387", "bodyText": "I think we should leave module name as reactor-netty\n\nDefinitely, I agree \ud83d\udc4d\n\nI don't know if this should be one module (and its name then should be reactor-netty) or it is better to have separate modules per client/server.\n\nI think I would take the incremental approach: name the class ReactorNettyInstrumentationModule even if we only instrument HTTP right now; when we instrument TCP/UDP put them all in a single module; and if somebody wants to have them enabled/disabled separately then I'd split them into several InstrumentationModules.\nRight now we're instrumenting a single jar/library so I think it makes sense to keep it in once module.", "author": "mateuszrzeszutek", "createdAt": "2020-11-11T14:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ=="}], "type": "inlineReview"}, {"oid": "33cd6413b2489b69bf624c9d5e00e9e0ed6e651d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/33cd6413b2489b69bf624c9d5e00e9e0ed6e651d", "message": "Cleanup", "committedDate": "2020-11-11T13:55:26Z", "type": "commit"}, {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/08d6bdb8e657f29e41e2dba2950a580380cf4ae4", "message": "Rename module", "committedDate": "2020-11-11T14:18:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3MjcwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521872709", "bodyText": "other multi-word modules squish them together for package name, e.g.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n          \n          \n            \n            package io.opentelemetry.javaagent.instrumentation.reactornetty;", "author": "trask", "createdAt": "2020-11-12T06:46:59Z", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;", "originalCommit": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3MzQyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521873424", "bodyText": "decrement even if throwable != null?", "author": "trask", "createdAt": "2020-11-12T06:49:07Z", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {", "originalCommit": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521877777", "bodyText": "is this attribute name shared with any other instrumentation? if not, maybe name it reactor_netty_otel_context?", "author": "trask", "createdAt": "2020-11-12T07:01:31Z", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {\n+        client = client.doOnRequest(new OnRequest()).mapConnect(new MapConnect());\n+      }\n+    }\n+  }\n+\n+  public static class MapConnect\n+      implements BiFunction<Mono<? extends Connection>, Bootstrap, Mono<? extends Connection>> {\n+    @Override\n+    public Mono<? extends Connection> apply(Mono<? extends Connection> m, Bootstrap b) {\n+      return m.subscriberContext(s -> s.put(\"otel_context\", Context.current()));", "originalCommit": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1MzM1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r522253350", "bodyText": "Why, what difference does it make apart having longer key? :)", "author": "iNikem", "createdAt": "2020-11-12T16:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1NjUyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r522356528", "bodyText": "when I saw this, the general name gave me the impression that this (reactor) context key was being used to propagate the (otel) context more generally for all reactor instrumentation", "author": "trask", "createdAt": "2020-11-12T19:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4OTU2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r522389567", "bodyText": "Weeeeellll. That may be totally not a bad idea...", "author": "iNikem", "createdAt": "2020-11-12T20:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4NjUzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521886539", "bodyText": "Can we add at least a small comment on what this instrumentation does? Especially since it doesn't seem to be about creating spans, but only context propagation.", "author": "anuraaga", "createdAt": "2020-11-12T07:24:49Z", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {", "originalCommit": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "89abd194593ca1c8902eae398c26376f6718cd40", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/89abd194593ca1c8902eae398c26376f6718cd40", "message": "Polish", "committedDate": "2020-11-12T16:51:07Z", "type": "commit"}, {"oid": "590a68fb28af0dddbb5094891b9c5e38551d6937", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/590a68fb28af0dddbb5094891b9c5e38551d6937", "message": "Format", "committedDate": "2020-11-13T08:12:46Z", "type": "commit"}]}