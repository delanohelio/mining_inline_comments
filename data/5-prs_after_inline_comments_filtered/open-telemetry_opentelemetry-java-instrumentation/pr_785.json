{"pr_number": 785, "pr_title": "Update database semantic conventions", "pr_createdAt": "2020-07-24T23:38:42Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785", "timeline": [{"oid": "e11eb5604e72496c573095c2cad4d116f1bd2538", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e11eb5604e72496c573095c2cad4d116f1bd2538", "message": "Rename db.type to db.system, db.instance to db.name, db.url to db.connection_string", "committedDate": "2020-07-24T23:26:39Z", "type": "commit"}, {"oid": "ffcb3cb59631f223d589bc3710a6a5ccf9435a90", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ffcb3cb59631f223d589bc3710a6a5ccf9435a90", "message": "Update parser and tests", "committedDate": "2020-07-24T23:30:53Z", "type": "commit"}, {"oid": "73321903833367369e56bef0f62d383cf06f5298", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/73321903833367369e56bef0f62d383cf06f5298", "message": "Merge remote-tracking branch 'upstream/master' into heya/implement-database-semantic-conventions", "committedDate": "2020-07-24T23:33:56Z", "type": "commit"}, {"oid": "e7354416b5a5b58aef697cfef7bd7a1b8972b9bc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e7354416b5a5b58aef697cfef7bd7a1b8972b9bc", "message": "Add jdbc README and fix a typo", "committedDate": "2020-07-24T23:59:50Z", "type": "commit"}, {"oid": "e6a03c02c09b077e7b93bbd70c3610818c7d8bb1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e6a03c02c09b077e7b93bbd70c3610818c7d8bb1", "message": "Fix build failure", "committedDate": "2020-07-25T00:06:56Z", "type": "commit"}, {"oid": "ad807d35ab9e7e3bf6824276865250a08027ab8b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad807d35ab9e7e3bf6824276865250a08027ab8b", "message": "Move README.md", "committedDate": "2020-07-25T00:11:41Z", "type": "commit"}, {"oid": "edfccd38b9222c9441d61e5bebdbaf745ef32323", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/edfccd38b9222c9441d61e5bebdbaf745ef32323", "message": "Update jdbc README.md", "committedDate": "2020-07-25T00:34:00Z", "type": "commit"}, {"oid": "2215b0f4677a3acc53d33eca55a561fb182d43a1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2215b0f4677a3acc53d33eca55a561fb182d43a1", "message": "Use string constants", "committedDate": "2020-07-25T00:58:38Z", "type": "commit"}, {"oid": "cb9e3ef7c276e93ffcb31f5d25cf88eaf08e4aee", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cb9e3ef7c276e93ffcb31f5d25cf88eaf08e4aee", "message": "Fix PutGetTest failures", "committedDate": "2020-07-25T01:26:24Z", "type": "commit"}, {"oid": "23287bb054d7b0ac60632ba0f13f5e609b4c7114", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/23287bb054d7b0ac60632ba0f13f5e609b4c7114", "message": "Fix tests", "committedDate": "2020-07-25T02:04:23Z", "type": "commit"}, {"oid": "9541850bfc1d818bf9ff28f519dedcdc77326c4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9541850bfc1d818bf9ff28f519dedcdc77326c4d", "message": "Force CircleCI to rebuild", "committedDate": "2020-07-25T02:25:39Z", "type": "commit"}, {"oid": "e7e1a04f86e7f46d896384276a2aca79b2f85605", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e7e1a04f86e7f46d896384276a2aca79b2f85605", "message": "Fix instrumentation:spymemcached-2.12:codenarcLatestDepTest", "committedDate": "2020-07-25T17:21:09Z", "type": "commit"}, {"oid": "f7b06a69ab7f56140a228b7427a9f5f7f8a3786d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f7b06a69ab7f56140a228b7427a9f5f7f8a3786d", "message": "Fix missing import statements", "committedDate": "2020-07-25T18:02:34Z", "type": "commit"}, {"oid": "9f2fe9f19d2922852ba21117888cb402f2171857", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f2fe9f19d2922852ba21117888cb402f2171857", "message": "Fix missing import statements", "committedDate": "2020-07-25T18:20:40Z", "type": "commit"}, {"oid": "4c80902dc0a2b6620d3975243ad09dcab4a515b8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4c80902dc0a2b6620d3975243ad09dcab4a515b8", "message": "Fix lettuce-5.1 tests", "committedDate": "2020-07-25T18:55:27Z", "type": "commit"}, {"oid": "b1eb9f791c3fa40083fdefac9b26c33fb5361a9a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1eb9f791c3fa40083fdefac9b26c33fb5361a9a", "message": "Use SemanticAttribute instead of hardcoded strings", "committedDate": "2020-07-25T19:05:58Z", "type": "commit"}, {"oid": "c51182e0436b4a2edb3501275b25eaef0e4fbebf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c51182e0436b4a2edb3501275b25eaef0e4fbebf", "message": "Fix groovy MissingPropertyException", "committedDate": "2020-07-25T19:32:09Z", "type": "commit"}, {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e9be03d974acdd8feff39b3b12fab526ad0d308", "message": "Fix a typo", "committedDate": "2020-07-25T19:48:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NDM1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460444350", "bodyText": "i think rename to DbSystem, that way usages will be more descriptive, e.g. DbSystem.MYSQL", "author": "trask", "createdAt": "2020-07-25T20:37:26Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/Constants.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.jdbc;\n+\n+public final class Constants {", "originalCommit": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NTMxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460445319", "bodyText": "updateDbSystem --> toDbSystem (update... sounds like it has side effects)", "author": "trask", "createdAt": "2020-07-25T20:49:15Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +892,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/709293fe132709705f0e0dd4252992e87a6ec899/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String updateDbSystem(final String type) {", "originalCommit": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NTQyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460445429", "bodyText": "\ud83d\udc4d link to latest copy\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * see {@link <a\n          \n          \n            \n               * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/709293fe132709705f0e0dd4252992e87a6ec899/specification/trace/semantic_conventions/database.md\">specification</a>}\n          \n          \n            \n               * see {@link <a\n          \n          \n            \n               * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}", "author": "trask", "createdAt": "2020-07-25T20:50:22Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +892,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/709293fe132709705f0e0dd4252992e87a6ec899/specification/trace/semantic_conventions/database.md\">specification</a>}", "originalCommit": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NTY3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460445673", "bodyText": "i think we really do want type here (and not system) in order to construct the \"short url\" (which we then use as db.connection_string).\nit looks like this method is only called from one place, so you could pass in the real type here, so you don't have to add another field to DbInfo/Builder", "author": "trask", "createdAt": "2020-07-25T20:53:51Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -795,12 +802,12 @@ public static DBInfo parse(String connectionUrl, final Properties props) {\n \n   private static DBInfo withUrl(final DBInfo.Builder builder) {\n     DBInfo info = builder.build();\n-    String type = info.getType();\n-    if (type == null) {\n+    String system = info.getSystem();\n+    if (system == null) {\n       return builder.build();\n     }\n     StringBuilder url = new StringBuilder();\n-    url.append(type);\n+    url.append(system);", "originalCommit": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0ODcxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460448718", "bodyText": "this happens to match the constant, but is not really related to db_system (this is why I recommended to rename Constants to DbSystem above to make this more clear where to use it)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"jedis\", Constants.REDIS);\n          \n          \n            \n                super(\"jedis\", \"redis\");", "author": "trask", "createdAt": "2020-07-25T21:31:52Z", "path": "instrumentation/jedis/jedis-1.4/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v1_4/JedisInstrumentation.java", "diffHunk": "@@ -44,7 +45,7 @@\n public final class JedisInstrumentation extends Instrumenter.Default {\n \n   public JedisInstrumentation() {\n-    super(\"jedis\", \"redis\");\n+    super(\"jedis\", Constants.REDIS);", "originalCommit": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0OTE4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460449188", "bodyText": "this happens to match the constant, but is not really related to db_system\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"jedis\", Constants.REDIS);\n          \n          \n            \n                super(\"jedis\", \"redis\");", "author": "trask", "createdAt": "2020-07-25T21:38:28Z", "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v3_0/JedisInstrumentation.java", "diffHunk": "@@ -44,7 +45,7 @@\n public final class JedisInstrumentation extends Instrumenter.Default {\n \n   public JedisInstrumentation() {\n-    super(\"jedis\", \"redis\");\n+    super(\"jedis\", Constants.REDIS);", "originalCommit": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0OTIxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460449212", "bodyText": "this happens to match the constant, but is not really related to db_system\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"rediscala\", Constants.REDIS);\n          \n          \n            \n                super(\"rediscala\", \"redis\");", "author": "trask", "createdAt": "2020-07-25T21:38:50Z", "path": "instrumentation/rediscala-1.8/src/main/java/io/opentelemetry/auto/instrumentation/rediscala/RediscalaInstrumentation.java", "diffHunk": "@@ -49,7 +50,7 @@\n public final class RediscalaInstrumentation extends Instrumenter.Default {\n \n   public RediscalaInstrumentation() {\n-    super(\"rediscala\", \"redis\");\n+    super(\"rediscala\", Constants.REDIS);", "originalCommit": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ1MDE2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460450167", "bodyText": "something like (see comment below), also probably still want typeParsers key to be type and not system\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String baseSystem = jdbcUrl.substring(0, typeLoc);\n          \n          \n            \n                baseSystem = updateDbSystem(baseSystem);\n          \n          \n            \n                String type = jdbcUrl.substring(0, typeLoc); \n          \n          \n            \n                String system = updateDbSystem(type);", "author": "trask", "createdAt": "2020-07-25T21:52:30Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -777,14 +783,15 @@ public static DBInfo parse(String connectionUrl, final Properties props) {\n       return DEFAULT;\n     }\n \n-    String baseType = jdbcUrl.substring(0, typeLoc);\n-    DBInfo.Builder parsedProps = DEFAULT.toBuilder().type(baseType);\n+    String baseSystem = jdbcUrl.substring(0, typeLoc);\n+    baseSystem = updateDbSystem(baseSystem);", "originalCommit": "1e9be03d974acdd8feff39b3b12fab526ad0d308", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NzE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461067189", "bodyText": "typeParsers is using db.system as the key though.  I will show you offline.", "author": "heyams", "createdAt": "2020-07-27T17:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ1MDE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NzQ2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461067468", "bodyText": "can I rename it to dbSystemParsers?", "author": "heyams", "createdAt": "2020-07-27T17:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ1MDE2Nw=="}], "type": "inlineReview"}, {"oid": "a95e038cb7e23bee2ec130bf4e11e0cfa0e77d03", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a95e038cb7e23bee2ec130bf4e11e0cfa0e77d03", "message": "Rename Constants.java to DbSystem.java", "committedDate": "2020-07-27T16:53:00Z", "type": "commit"}, {"oid": "6668509213869bf23141f8255febf189cd34f3b0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6668509213869bf23141f8255febf189cd34f3b0", "message": "Rename updateDbSystem to toDbSystem", "committedDate": "2020-07-27T16:54:51Z", "type": "commit"}, {"oid": "15701f282f20999de06ffae82f803ea75333c7a2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/15701f282f20999de06ffae82f803ea75333c7a2", "message": "Link the latest copy of database.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-27T17:14:35Z", "type": "commit"}, {"oid": "c94175f03e1d9c0c21311aa4f2c730a2044ca996", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c94175f03e1d9c0c21311aa4f2c730a2044ca996", "message": "Only show differences in JDBC README.md", "committedDate": "2020-07-27T17:32:01Z", "type": "commit"}, {"oid": "c0484cec3e0c06c42b49baf8e98ba66fdd37851e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c0484cec3e0c06c42b49baf8e98ba66fdd37851e", "message": "Address code review comments", "committedDate": "2020-07-27T17:45:00Z", "type": "commit"}, {"oid": "28203368adc82fabed0fae8adb664f24cb7eb224", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/28203368adc82fabed0fae8adb664f24cb7eb224", "message": "Merge branch 'heya/implement-database-semantic-conventions' of https://github.com/heyams/opentelemetry-java-instrumentation into heya/implement-database-semantic-conventions", "committedDate": "2020-07-27T17:45:18Z", "type": "commit"}, {"oid": "a90fc8168dc0e06639e7d10359985aa12db08ea0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a90fc8168dc0e06639e7d10359985aa12db08ea0", "message": "Reformat groovy files", "committedDate": "2020-07-27T18:46:38Z", "type": "commit"}, {"oid": "72b73a12b2baa62754eaf25dbde053df84617043", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72b73a12b2baa62754eaf25dbde053df84617043", "message": "Keep type to parsers\n\nKeep subtype for mssqlparser and update its tests\n\nAddress other code review comments", "committedDate": "2020-07-27T22:27:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNzQ2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461207467", "bodyText": "i think better not to compare driver type to db.system constant, e.g. if the spec could change the db.system constant, but that wouldn't change the driver type\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (type.equals(DbSystem.DB2) || type.equals(DbSystem.AS400)) {\n          \n          \n            \n                  if (type.equals(\"db2\") || type.equals(\"as400\")) {", "author": "trask", "createdAt": "2020-07-27T22:31:04Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -138,7 +138,7 @@\n       type = jdbcUrl.substring(0, hostIndex);\n \n       String[] split;\n-      if (type.equals(\"db2\") || type.equals(\"as400\")) {\n+      if (type.equals(DbSystem.DB2) || type.equals(DbSystem.AS400)) {", "originalCommit": "72b73a12b2baa62754eaf25dbde053df84617043", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNzI2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461217267", "bodyText": "i think this matches other parsing a bit better:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  int typeLoc = jdbcUrl.indexOf(\":\"); // type\n          \n          \n            \n                  int subtypeLoc = jdbcUrl.indexOf(\":\", typeLoc + 1); // subtype\n          \n          \n            \n                  int hostLoc = jdbcUrl.indexOf(\"//\");\n          \n          \n            \n                  if (subtypeLoc != -1 && typeLoc != -1 && typeLoc < subtypeLoc && subtypeLoc < hostLoc) {\n          \n          \n            \n                    String subtype = jdbcUrl.substring(typeLoc + 1, subtypeLoc);\n          \n          \n            \n                  int protoLoc = jdbcUrl.indexOf(\"://\");\n          \n          \n            \n                  int typeEndLoc = jdbcUrl.indexOf(':');\n          \n          \n            \n                  if (protoLoc > typeEndLoc) {\n          \n          \n            \n                    String subtype = jdbcUrl.substring(typeEndLoc + 1, protoLoc);", "author": "trask", "createdAt": "2020-07-27T22:57:44Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -367,13 +367,16 @@\n         builder.port(DEFAULT_PORT);\n       }\n \n-      if (jdbcUrl.startsWith(\"microsoft:\")) {\n-        jdbcUrl = jdbcUrl.substring(\"microsoft:\".length());\n-      } else if (jdbcUrl.startsWith(\"jtds:\")) {\n-        return JTDS_URL_LIKE.doParse(jdbcUrl, builder);\n+      int typeLoc = jdbcUrl.indexOf(\":\"); // type\n+      int subtypeLoc = jdbcUrl.indexOf(\":\", typeLoc + 1); // subtype\n+      int hostLoc = jdbcUrl.indexOf(\"//\");\n+      if (subtypeLoc != -1 && typeLoc != -1 && typeLoc < subtypeLoc && subtypeLoc < hostLoc) {\n+        String subtype = jdbcUrl.substring(typeLoc + 1, subtypeLoc);", "originalCommit": "72b73a12b2baa62754eaf25dbde053df84617043", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxODk2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461218965", "bodyText": "Intellij flags this as unused, can be used in GeodeDecorator", "author": "trask", "createdAt": "2020-07-27T23:02:26Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/DbSystem.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.jdbc;\n+\n+public final class DbSystem {\n+\n+  public static final String AS400 = \"as400\";\n+  public static final String CASSANDRA = \"cassandra\";\n+  public static final String COSMOSDB = \"cosmosdb\";\n+  public static final String COUCHBASE = \"couchbase\";\n+  public static final String COUCHDB = \"couchdb\";\n+  public static final String DB2 = \"db2\";\n+  public static final String DERBY = \"derby\";\n+  public static final String DYNAMODB = \"dynamodb\";\n+  public static final String GEODE = \"geode\";", "originalCommit": "72b73a12b2baa62754eaf25dbde053df84617043", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTI0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461219240", "bodyText": "let's only include jdbc drivers here that we have parsing/tests for now\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case DbSystem.CASSANDRA: // Cassandra\n          \n          \n            \n                  case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n          \n          \n            \n                  case DbSystem.COUCHBASE: // Couchbase\n          \n          \n            \n                  case DbSystem.COUCHDB: // CouchDB", "author": "trask", "createdAt": "2020-07-27T23:03:13Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB", "originalCommit": "72b73a12b2baa62754eaf25dbde053df84617043", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTMzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461219338", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case DbSystem.MONGODB: // MongoDB", "author": "trask", "createdAt": "2020-07-27T23:03:29Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB\n+      case DbSystem.DB2: // IBM Db2\n+      case DbSystem.DERBY: // Apache Derby\n+      case DbSystem.H2: // H2 Database\n+      case DbSystem.HSQLDB: // Hyper SQL Database\n+      case DbSystem.MARIADB: // MariaDB\n+      case DbSystem.MONGODB: // MongoDB", "originalCommit": "72b73a12b2baa62754eaf25dbde053df84617043", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTY0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461219643", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case DbSystem.NEO4J: // Neo4j", "author": "trask", "createdAt": "2020-07-27T23:04:17Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB\n+      case DbSystem.DB2: // IBM Db2\n+      case DbSystem.DERBY: // Apache Derby\n+      case DbSystem.H2: // H2 Database\n+      case DbSystem.HSQLDB: // Hyper SQL Database\n+      case DbSystem.MARIADB: // MariaDB\n+      case DbSystem.MONGODB: // MongoDB\n+      case DbSystem.MYSQL: // MySQL\n+      case DbSystem.NEO4J: // Neo4j", "originalCommit": "72b73a12b2baa62754eaf25dbde053df84617043", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDI4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461220286", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case DbSystem.REDIS: // Redis\n          \n          \n            \n                  case DbSystem.SAP: // SAP HANA\n          \n          \n            \n                  case DbSystem.SQLITE: // SQLite\n          \n          \n            \n                  case DbSystem.TERADATA: // Teradata", "author": "trask", "createdAt": "2020-07-27T23:06:07Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB\n+      case DbSystem.DB2: // IBM Db2\n+      case DbSystem.DERBY: // Apache Derby\n+      case DbSystem.H2: // H2 Database\n+      case DbSystem.HSQLDB: // Hyper SQL Database\n+      case DbSystem.MARIADB: // MariaDB\n+      case DbSystem.MONGODB: // MongoDB\n+      case DbSystem.MYSQL: // MySQL\n+      case DbSystem.NEO4J: // Neo4j\n+      case DbSystem.ORACLE: // Oracle Database\n+      case DbSystem.POSTGRESQL: // PostgreSQL\n+      case DbSystem.REDIS: // Redis\n+      case DbSystem.SAP: // SAP HANA\n+      case DbSystem.SQLITE: // SQLite\n+      case DbSystem.TERADATA: // Teradata", "originalCommit": "72b73a12b2baa62754eaf25dbde053df84617043", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDQ2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461220461", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case \"apachehbase\": // Apache HBase\n          \n          \n            \n                    return DbSystem.HBASE;\n          \n          \n            \n                  case \"amazondynamodb\": // Amazon DynamoDB\n          \n          \n            \n                    return DbSystem.DYNAMODB;\n          \n          \n            \n                  case \"hive2\": // Apache Hive\n          \n          \n            \n                    return DbSystem.HIVE;", "author": "trask", "createdAt": "2020-07-27T23:06:36Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB\n+      case DbSystem.DB2: // IBM Db2\n+      case DbSystem.DERBY: // Apache Derby\n+      case DbSystem.H2: // H2 Database\n+      case DbSystem.HSQLDB: // Hyper SQL Database\n+      case DbSystem.MARIADB: // MariaDB\n+      case DbSystem.MONGODB: // MongoDB\n+      case DbSystem.MYSQL: // MySQL\n+      case DbSystem.NEO4J: // Neo4j\n+      case DbSystem.ORACLE: // Oracle Database\n+      case DbSystem.POSTGRESQL: // PostgreSQL\n+      case DbSystem.REDIS: // Redis\n+      case DbSystem.SAP: // SAP HANA\n+      case DbSystem.SQLITE: // SQLite\n+      case DbSystem.TERADATA: // Teradata\n+        return type;\n+      case \"apachehbase\": // Apache HBase\n+        return DbSystem.HBASE;\n+      case \"amazondynamodb\": // Amazon DynamoDB\n+        return DbSystem.DYNAMODB;\n+      case \"hive2\": // Apache Hive\n+        return DbSystem.HIVE;", "originalCommit": "72b73a12b2baa62754eaf25dbde053df84617043", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5f6c1a6a16c0bdc4d30c79d9699b1991894fdb9a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f6c1a6a16c0bdc4d30c79d9699b1991894fdb9a", "message": "Separate driver type from db.system.\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-27T23:22:57Z", "type": "commit"}, {"oid": "778a6ab6d1231ee5d217749fd93b113809bc8fa0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/778a6ab6d1231ee5d217749fd93b113809bc8fa0", "message": "Use a consistent parsing for subtype.\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-07-27T23:24:35Z", "type": "commit"}, {"oid": "6c49ba6adfc24a70712abb0e72bdd650650cc6da", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6c49ba6adfc24a70712abb0e72bdd650650cc6da", "message": "Keep db.system for jdcb drivers only\n\nMap as400 to db2", "committedDate": "2020-07-27T23:47:35Z", "type": "commit"}, {"oid": "c9c05014c1265af2ffa064b050b94b5e6f63e7ff", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c9c05014c1265af2ffa064b050b94b5e6f63e7ff", "message": "Fix SlickTest failure", "committedDate": "2020-07-27T23:58:42Z", "type": "commit"}, {"oid": "13bbedecc10872787392775d6e94564f1d708ea8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/13bbedecc10872787392775d6e94564f1d708ea8", "message": "Update JDBC README.md", "committedDate": "2020-07-28T00:02:26Z", "type": "commit"}, {"oid": "5e1a495d9af44c8731663d3de10f6b96e58bbfe1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5e1a495d9af44c8731663d3de10f6b96e58bbfe1", "message": "Delete unused DbSystem", "committedDate": "2020-07-28T00:07:23Z", "type": "commit"}, {"oid": "b7a0a8f3f05a3f7b277bc8f4993a840d9e2fb9e8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b7a0a8f3f05a3f7b277bc8f4993a840d9e2fb9e8", "message": "Don't use DbSystem constants for jdbc driver types", "committedDate": "2020-07-28T00:25:59Z", "type": "commit"}, {"oid": "8578b8b45f3070006e717565e0ac6cbc28425953", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8578b8b45f3070006e717565e0ac6cbc28425953", "message": "Remove unused AS400 string constant", "committedDate": "2020-07-28T00:29:06Z", "type": "commit"}, {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "message": "Fix hibernate test failures", "committedDate": "2020-07-28T01:00:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzgwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461273802", "bodyText": "since not really tied to DbSystem constant\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.CASSANDRA);\n          \n          \n            \n                super(\"cassandra\");", "author": "trask", "createdAt": "2020-07-28T02:06:01Z", "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v3_0/CassandraClientInstrumentation.java", "diffHunk": "@@ -35,7 +36,7 @@\n public class CassandraClientInstrumentation extends Instrumenter.Default {\n \n   public CassandraClientInstrumentation() {\n-    super(\"cassandra\");\n+    super(DbSystem.CASSANDRA);", "originalCommit": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzkyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461273928", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.CASSANDRA);\n          \n          \n            \n                super(\"cassandra\");", "author": "trask", "createdAt": "2020-07-28T02:06:28Z", "path": "instrumentation/cassandra/cassandra-4.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v4_0/CassandraClientInstrumentation.java", "diffHunk": "@@ -33,7 +34,7 @@\n public class CassandraClientInstrumentation extends Instrumenter.Default {\n \n   public CassandraClientInstrumentation() {\n-    super(\"cassandra\");\n+    super(DbSystem.CASSANDRA);", "originalCommit": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDA1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274051", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.COUCHBASE);\n          \n          \n            \n                super(\"couchbase\");", "author": "trask", "createdAt": "2020-07-28T02:06:50Z", "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_0/CouchbaseBucketInstrumentation.java", "diffHunk": "@@ -40,7 +41,7 @@\n public class CouchbaseBucketInstrumentation extends Instrumenter.Default {\n \n   public CouchbaseBucketInstrumentation() {\n-    super(\"couchbase\");\n+    super(DbSystem.COUCHBASE);", "originalCommit": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDExMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274112", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.COUCHBASE);\n          \n          \n            \n                super(\"couchbase\");", "author": "trask", "createdAt": "2020-07-28T02:07:04Z", "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_0/CouchbaseClusterInstrumentation.java", "diffHunk": "@@ -40,7 +41,7 @@\n public class CouchbaseClusterInstrumentation extends Instrumenter.Default {\n \n   public CouchbaseClusterInstrumentation() {\n-    super(\"couchbase\");\n+    super(DbSystem.COUCHBASE);", "originalCommit": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDIwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.COUCHBASE);\n          \n          \n            \n                super(\"couchbase\");", "author": "trask", "createdAt": "2020-07-28T02:07:25Z", "path": "instrumentation/couchbase/couchbase-2.6/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_6/CouchbaseCoreInstrumentation.java", "diffHunk": "@@ -40,7 +41,7 @@\n public class CouchbaseCoreInstrumentation extends Instrumenter.Default {\n \n   public CouchbaseCoreInstrumentation() {\n-    super(\"couchbase\");\n+    super(DbSystem.COUCHBASE);", "originalCommit": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDI1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274253", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.COUCHBASE);\n          \n          \n            \n                super(\"couchbase\");", "author": "trask", "createdAt": "2020-07-28T02:07:37Z", "path": "instrumentation/couchbase/couchbase-2.6/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_6/CouchbaseNetworkInstrumentation.java", "diffHunk": "@@ -43,7 +44,7 @@\n @AutoService(Instrumenter.class)\n public class CouchbaseNetworkInstrumentation extends Instrumenter.Default {\n   public CouchbaseNetworkInstrumentation() {\n-    super(\"couchbase\");\n+    super(DbSystem.COUCHBASE);", "originalCommit": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDg3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274878", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"jedis\", DbSystem.REDIS);\n          \n          \n            \n                super(\"jedis\", \"redis\");", "author": "trask", "createdAt": "2020-07-28T02:10:04Z", "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v3_0/JedisInstrumentation.java", "diffHunk": "@@ -44,7 +45,7 @@\n public final class JedisInstrumentation extends Instrumenter.Default {\n \n   public JedisInstrumentation() {\n-    super(\"jedis\", \"redis\");\n+    super(\"jedis\", DbSystem.REDIS);", "originalCommit": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NTExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461275118", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          .spanBuilder(DbSystem.REDIS)\n          \n          \n            \n                          .spanBuilder(\"REDIS\")", "author": "trask", "createdAt": "2020-07-28T02:10:53Z", "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -167,10 +169,10 @@ public OpenTelemetrySpan nextSpan(TraceContext traceContext) {\n       // the span starts.\n       spanBuilder =\n           TRACER\n-              .spanBuilder(\"REDIS\")\n+              .spanBuilder(DbSystem.REDIS)", "originalCommit": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "389e1e9cf824558a2fc85022695ffed93864b68a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/389e1e9cf824558a2fc85022695ffed93864b68a", "message": "Fix misusing DbSystem constants", "committedDate": "2020-07-28T16:52:28Z", "type": "commit"}, {"oid": "e6f33cde46dd21ad3c29950e55fb8e17ad340859", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e6f33cde46dd21ad3c29950e55fb8e17ad340859", "message": "Fix misusing DbSystem.REDIS", "committedDate": "2020-07-28T16:55:51Z", "type": "commit"}, {"oid": "d0ad7324c49722b02f8b090a386aea5af8a81ae1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d0ad7324c49722b02f8b090a386aea5af8a81ae1", "message": "Merge remote-tracking branch 'upstream/master' into heya/implement-database-semantic-conventions", "committedDate": "2020-07-28T16:59:42Z", "type": "commit"}, {"oid": "80c55914a2fab04dd411b4d416d5b167e20b612a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/80c55914a2fab04dd411b4d416d5b167e20b612a", "message": "Fix mongodb tests", "committedDate": "2020-07-28T17:51:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NTkzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461785931", "bodyText": "This seems to be used in a lot of places.  Perhaps it should be created once somewhere and reused?", "author": "tylerbenson", "createdAt": "2020-07-28T18:28:09Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "diffHunk": "@@ -18,26 +18,27 @@\n \n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import io.opentelemetry.trace.attributes.StringAttributeSetter;\n \n /** @deprecated use {@link DatabaseClientTracer} instead. */\n @Deprecated\n public abstract class DatabaseClientDecorator<CONNECTION> extends ClientDecorator {\n \n-  protected abstract String dbType();\n+  protected abstract String dbSystem();\n \n   protected abstract String dbUser(CONNECTION connection);\n \n-  protected abstract String dbInstance(CONNECTION connection);\n+  protected abstract String dbName(CONNECTION connection);\n \n   // TODO make abstract after implementing in all subclasses\n-  protected String dbUrl(final CONNECTION connection) {\n+  protected String dbConnectionString(final CONNECTION connection) {\n     return null;\n   }\n \n   @Override\n   public Span afterStart(final Span span) {\n     assert span != null;\n-    span.setAttribute(SemanticAttributes.DB_TYPE.key(), dbType());\n+    span.setAttribute(StringAttributeSetter.create(\"db.system\").key(), dbSystem());", "originalCommit": "80c55914a2fab04dd411b4d416d5b167e20b612a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4Nzc1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461787751", "bodyText": "oh, I see... that's a subject for a follow on PR.", "author": "tylerbenson", "createdAt": "2020-07-28T18:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5MzkyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461793926", "bodyText": "Yup, it will be replaced with SemanticAttributes.DB_SYSTEM.", "author": "heyams", "createdAt": "2020-07-28T18:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NTkzMQ=="}], "type": "inlineReview"}]}