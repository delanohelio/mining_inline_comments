{"pr_number": 1621, "pr_title": "Add example of creating custom vendor distribution", "pr_createdAt": "2020-11-11T15:16:06Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621", "timeline": [{"oid": "717b5d96bad27568a002443969a3d2621f00fd01", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/717b5d96bad27568a002443969a3d2621f00fd01", "message": "Add example of creating custom vendor distribution", "committedDate": "2020-11-11T15:05:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0Njc3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521646770", "bodyText": "just to return valid span id\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return String.valueOf(spanId.incrementAndGet());\n          \n          \n            \n                return String.format(\"%016d\", spanId.incrementAndGet());", "author": "trask", "createdAt": "2020-11-11T21:23:42Z", "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoIdGenerator.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.demo;\n+\n+import io.opentelemetry.sdk.trace.IdGenerator;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Custom {@link IdGenerator} which provides span and trace ids.\n+ *\n+ * @see io.opentelemetry.sdk.trace.TracerSdkProvider\n+ * @see DemoTracerCustomizer\n+ */\n+public class DemoIdGenerator implements IdGenerator {\n+  private static final AtomicLong traceId = new AtomicLong(0);\n+  private static final AtomicLong spanId = new AtomicLong(0);\n+\n+  @Override\n+  public String generateSpanId() {\n+    return String.valueOf(spanId.incrementAndGet());", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0ODUyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521648527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return null;\n          \n          \n            \n                return \"DemoSampler\";", "author": "trask", "createdAt": "2020-11-11T21:27:12Z", "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoSampler.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.opentelemetry.demo;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n+import io.opentelemetry.sdk.trace.samplers.SamplingResult;\n+import java.util.List;\n+\n+/**\n+ * This demo sampler filters out all internal spans whose name contains string \"greeting\".\n+ *\n+ * See <a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling\">\n+ * OpenTelemetry Specification</a> for more information about span sampling.\n+ *\n+ * @see DemoTracerCustomizer\n+ */\n+public class DemoSampler implements Sampler {\n+  @Override\n+  public SamplingResult shouldSample(Context parentContext, String traceId, String name, Span.Kind spanKind, ReadableAttributes attributes, List<SpanData.Link> parentLinks) {\n+    if (spanKind == Span.Kind.INTERNAL && name.contains(\"greeting\")) {\n+      return SamplingResult.create(SamplingResult.Decision.DROP);\n+    } else {\n+      return SamplingResult.create(SamplingResult.Decision.RECORD_AND_SAMPLE);\n+    }\n+  }\n+\n+  @Override\n+  public String getDescription() {\n+    return null;", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0OTQ4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521649485", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Just read the {@link #configure(TracerSdkManagement)} method.\n          \n          \n            \n             * See the {@link #configure(TracerSdkManagement)} method below.", "author": "trask", "createdAt": "2020-11-11T21:29:20Z", "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoTracerCustomizer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.opentelemetry.demo;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.javaagent.spi.TracerCustomizer;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+\n+/**\n+ * This is the main entry point for the majority of Instrumentation Agent's customizations.\n+ * It allows for configuring various aspects of OpenTelemetrySdk.\n+ * Just read the {@link #configure(TracerSdkManagement)} method.", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MjcxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521652713", "bodyText": "I don't think muzzle will like this since the Advice class itself lives in AgentClassLoader, maybe add helper class and helperClassNames() since that's a common need", "author": "trask", "createdAt": "2020-11-11T21:36:23Z", "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/instrumentation/DemoServlet3Instrumentation.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.opentelemetry.demo.instrumentation;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.safeHasSuperType;\n+import static io.opentelemetry.javaagent.tooling.matcher.NameMatchers.namedOneOf;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Map;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * This is a demo instrumentation which hooks into servlet invocation and modifies the http response.\n+ */\n+@AutoService(Instrumenter.class)\n+public final class DemoServlet3Instrumentation extends Instrumenter.Default {\n+  public DemoServlet3Instrumentation() {\n+    super(\"servlet-demo\", \"servlet-3\");\n+  }\n+\n+  /*\n+  We want this instrumentation to be applied after the standard servlet instrumentation.\n+  The latter creates a server span around http request.\n+  This instrumentation needs access to that server span.\n+   */\n+  @Override\n+  public int getOrder() {\n+    return 1;\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"javax.servlet.http.HttpServlet\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(\n+        namedOneOf(\"javax.servlet.FilterChain\", \"javax.servlet.http.HttpServlet\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        namedOneOf(\"doFilter\", \"service\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletRequest\")))\n+            .and(takesArgument(1, named(\"javax.servlet.ServletResponse\")))\n+            .and(isPublic()),\n+        DemoServlet3Instrumentation.class.getName() + \"$DemoServlet3Advice\");\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  public static class DemoServlet3Advice {\n+\n+    public static final String X_SERVER_ID = \"X-server-id\";", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4OTIwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521889203", "bodyText": "Muzzle is not configured in this example. Since there are compile-time dependencies and can it can result in runtime errors I would document this in a readme and add links to issues.", "author": "pavolloffay", "createdAt": "2020-11-12T07:31:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNjYxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r522316619", "bodyText": "I don't understand the concern, tbh :) Do you mean static field in Advice?", "author": "iNikem", "createdAt": "2020-11-12T18:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MjgwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r522382803", "bodyText": "Oh good point about no muzzle here.\nI think the only reason this example works is because javac is inlining the string constant.\nIf doesn't inline the string constant, this should fail, because the advice class itself lives in the AgentClassLoader, while the bytecode inside of the advice methods is injected into the instrumented class, which lives in the user class loader, and so the bytecode inside of the advice methods should not be allowed to reference a static field in the advice class, and you should get a runtime error.\nI'd suggest inlining the string here, otherwise it may give the impression that this is a valid pattern (e.g. for Loggers, Tracers, other static fields on Advice).", "author": "trask", "createdAt": "2020-11-12T19:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4ODg2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r522388868", "bodyText": "Done", "author": "iNikem", "createdAt": "2020-11-12T20:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MjcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NDEwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521654103", "bodyText": "spotlessApply?", "author": "trask", "createdAt": "2020-11-11T21:38:49Z", "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/OkHttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Splunk Inc.", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NzA4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521897080", "bodyText": "Don't think this example has it :) We should remove copyright headers from sample code.", "author": "anuraaga", "createdAt": "2020-11-12T07:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NDEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NDU4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521654582", "bodyText": "com.example.javaagent.smoketest?", "author": "trask", "createdAt": "2020-11-11T21:39:37Z", "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/OkHttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Splunk Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.splunk.opentelemetry;", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NTE0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521655146", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .withEnv(\"OTEL_INTEGRATION_GEODE_ENABLED\",\"false\")", "author": "trask", "createdAt": "2020-11-11T21:40:47Z", "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/SmokeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright Splunk Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.splunk.opentelemetry;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.util.JsonFormat;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.common.v1.AnyValue;\n+import io.opentelemetry.proto.common.v1.KeyValue;\n+import io.opentelemetry.proto.trace.v1.Span;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.ResponseBody;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.utility.MountableFile;\n+\n+abstract class SmokeTest {\n+  private static final Logger logger = LoggerFactory.getLogger(SmokeTest.class);\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  protected static OkHttpClient client = OkHttpUtils.client();\n+\n+  private static final Network network = Network.newNetwork();\n+  protected static final String agentPath =\n+      System.getProperty(\"io.opentelemetry.smoketest.agent.shadowJar.path\");\n+\n+  protected abstract String getTargetImage(int jdk);\n+\n+  /**\n+   * Subclasses can override this method to customise target application's environment\n+   */\n+  protected Map<String, String> getExtraEnv() {\n+    return Collections.emptyMap();\n+  }\n+\n+  private static GenericContainer backend;\n+  private static GenericContainer collector;\n+\n+  @BeforeAll\n+  static void setupSpec() {\n+    backend =\n+        new GenericContainer<>(\n+            \"open-telemetry-docker-dev.bintray.io/java/smoke-fake-backend:latest\")\n+            .withExposedPorts(8080)\n+            .waitingFor(Wait.forHttp(\"/health\").forPort(8080))\n+            .withNetwork(network)\n+            .withNetworkAliases(\"backend\")\n+            .withLogConsumer(new Slf4jLogConsumer(logger));\n+    backend.start();\n+\n+    collector =\n+        new GenericContainer<>(\"otel/opentelemetry-collector-dev:latest\")\n+            .dependsOn(backend)\n+            .withNetwork(network)\n+            .withNetworkAliases(\"collector\")\n+            .withLogConsumer(new Slf4jLogConsumer(logger))\n+            .withCopyFileToContainer(\n+                MountableFile.forClasspathResource(\"/otel.yaml\"), \"/etc/otel.yaml\")\n+            .withCommand(\"--config /etc/otel.yaml\");\n+    collector.start();\n+  }\n+\n+  protected GenericContainer target;\n+\n+  void startTarget(int jdk) {\n+    target =\n+        new GenericContainer<>(getTargetImage(jdk))\n+            .withExposedPorts(8080)\n+            .withNetwork(network)\n+            .withLogConsumer(new Slf4jLogConsumer(logger))\n+            .withCopyFileToContainer(\n+                MountableFile.forHostPath(agentPath), \"/opentelemetry-javaagent.jar\")\n+            .withEnv(\"JAVA_TOOL_OPTIONS\", \"-javaagent:/opentelemetry-javaagent.jar\")\n+            .withEnv(\"OTEL_BSP_MAX_EXPORT_BATCH\", \"1\")\n+            .withEnv(\"OTEL_BSP_SCHEDULE_DELAY\", \"10\")\n+            .withEnv(\"OTEL_INTEGRATION_GEODE_ENABLED\",\"false\")", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NjAxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521656019", "bodyText": "Very nice test of so many things \ud83d\udc4d", "author": "trask", "createdAt": "2020-11-11T21:42:46Z", "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/SpringBootSmokeTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Splunk Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.splunk.opentelemetry;\n+\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarFile;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class SpringBootSmokeTest extends SmokeTest {\n+\n+  protected String getTargetImage(int jdk) {\n+    return \"open-telemetry-docker-dev.bintray.io/java/smoke-springboot-jdk\" + jdk + \":latest\";\n+  }\n+\n+  @Test\n+  public void springBootSmokeTestOnJDK() throws IOException, InterruptedException {\n+    startTarget(11);\n+    String url = String.format(\"http://localhost:%d/greeting\", target.getMappedPort(8080));\n+    Request request = new Request.Builder().url(url).get().build();\n+\n+    String currentAgentVersion =\n+        (String) new JarFile(agentPath)\n+            .getManifest()\n+            .getMainAttributes()\n+            .get(Attributes.Name.IMPLEMENTATION_VERSION);\n+\n+    Response response = client.newCall(request).execute();\n+    System.out.println(response.headers().toString());\n+\n+    Collection<ExportTraceServiceRequest> traces = waitForTraces();\n+\n+    Assertions.assertNotNull(response.header(\"X-server-id\"));\n+    Assertions.assertEquals(1, response.headers(\"X-server-id\").size());\n+    Assertions.assertTrue(TraceId.isValid(response.header(\"X-server-id\")));\n+    Assertions.assertEquals(response.body().string(), \"Hi!\");\n+    Assertions.assertEquals(1, countSpansByName(traces, \"/greeting\"));\n+    Assertions.assertEquals(0, countSpansByName(traces, \"WebController.greeting\"));\n+    Assertions.assertEquals(1, countSpansByName(traces, \"WebController.withSpan\"));\n+    Assertions.assertEquals(2, countSpansByAttributeValue(traces, \"custom\", \"demo\"));\n+    Assertions.assertEquals(1, countResourcesByValue(traces, \"telemetry.auto.version\", currentAgentVersion));\n+    Assertions.assertEquals(1, countResourcesByValue(traces, \"custom.resource\", \"demo\"));", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NjQzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521656438", "bodyText": "can we publish artifact with our SmokeTest and reuse this and OkHttpUtils? (not in this PR)", "author": "trask", "createdAt": "2020-11-11T21:43:48Z", "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/SmokeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright Splunk Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.splunk.opentelemetry;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.util.JsonFormat;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.common.v1.AnyValue;\n+import io.opentelemetry.proto.common.v1.KeyValue;\n+import io.opentelemetry.proto.trace.v1.Span;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.ResponseBody;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.utility.MountableFile;\n+\n+abstract class SmokeTest {", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NTA5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521665095", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return String.valueOf(traceId.incrementAndGet());\n          \n          \n            \n                return String.format(\"%032d\", spanId.incrementAndGet());", "author": "trask", "createdAt": "2020-11-11T22:02:14Z", "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoIdGenerator.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.demo;\n+\n+import io.opentelemetry.sdk.trace.IdGenerator;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Custom {@link IdGenerator} which provides span and trace ids.\n+ *\n+ * @see io.opentelemetry.sdk.trace.TracerSdkProvider\n+ * @see DemoTracerCustomizer\n+ */\n+public class DemoIdGenerator implements IdGenerator {\n+  private static final AtomicLong traceId = new AtomicLong(0);\n+  private static final AtomicLong spanId = new AtomicLong(0);\n+\n+  @Override\n+  public String generateSpanId() {\n+    return String.valueOf(spanId.incrementAndGet());\n+  }\n+\n+  @Override\n+  public String generateTraceId() {\n+    return String.valueOf(traceId.incrementAndGet());", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NzQ4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521667488", "bodyText": "what do u think of putting everything under com.example.javaagent instead of io.opentelemetry.demo?", "author": "trask", "createdAt": "2020-11-11T22:07:49Z", "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoIdGenerator.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.demo;", "originalCommit": "717b5d96bad27568a002443969a3d2621f00fd01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a84714a5aa2cd3bf5aa564a5998eed35b032bd8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1a84714a5aa2cd3bf5aa564a5998eed35b032bd8", "message": "Update examples/distro/custom/build.gradle\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-11-12T08:39:09Z", "type": "commit"}, {"oid": "afd46d5a21140fba5f85e31532817c40772d3975", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/afd46d5a21140fba5f85e31532817c40772d3975", "message": "Apply suggestions from code review\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-11-12T08:41:41Z", "type": "commit"}, {"oid": "ae37a84a08bc1b0c138a59515821a39ed73ec9c5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ae37a84a08bc1b0c138a59515821a39ed73ec9c5", "message": "Polish", "committedDate": "2020-11-12T19:24:17Z", "type": "commit"}, {"oid": "d8d1b1be79a1f6f6e5d916ac747b28fd589cc4f8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d8d1b1be79a1f6f6e5d916ac747b28fd589cc4f8", "message": "Remove constant", "committedDate": "2020-11-12T20:06:14Z", "type": "commit"}, {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df3ad0e2af2cb65dd9475f76197efbaf35a7a89a", "message": "Extract instrumentation into separate module", "committedDate": "2020-11-16T09:39:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMTk0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r525121946", "bodyText": "What do you think about adding // given // when // then comments?", "author": "mateuszrzeszutek", "createdAt": "2020-11-17T12:37:54Z", "path": "examples/distro/smoke-tests/src/test/java/com/example/javaagent/smoketest/SpringBootSmokeTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.example.javaagent.smoketest;\n+\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarFile;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class SpringBootSmokeTest extends SmokeTest {\n+\n+  protected String getTargetImage(int jdk) {\n+    return \"open-telemetry-docker-dev.bintray.io/java/smoke-springboot-jdk\" + jdk + \":latest\";\n+  }\n+\n+  @Test\n+  public void springBootSmokeTestOnJDK() throws IOException, InterruptedException {\n+    startTarget(11);\n+    String url = String.format(\"http://localhost:%d/greeting\", target.getMappedPort(8080));\n+    Request request = new Request.Builder().url(url).get().build();\n+\n+    String currentAgentVersion =\n+        (String) new JarFile(agentPath)\n+            .getManifest()\n+            .getMainAttributes()\n+            .get(Attributes.Name.IMPLEMENTATION_VERSION);\n+\n+    Response response = client.newCall(request).execute();\n+    System.out.println(response.headers().toString());\n+\n+    Collection<ExportTraceServiceRequest> traces = waitForTraces();", "originalCommit": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1fa78cd88e3afc4f74615d7ca19693a4b12e1117", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1fa78cd88e3afc4f74615d7ca19693a4b12e1117", "message": "Polish documentation", "committedDate": "2020-11-19T08:12:40Z", "type": "commit"}, {"oid": "2a7ec232b8f46479d407b2d1ee3cedc9c80ff744", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2a7ec232b8f46479d407b2d1ee3cedc9c80ff744", "message": "Merge remote-tracking branch 'upstream/master' into vendor-example", "committedDate": "2020-11-20T13:15:42Z", "type": "commit"}]}