{"pr_number": 509, "pr_title": "New sample: Animate images image overlay", "pr_createdAt": "2020-05-04T15:52:33Z", "pr_url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509", "timeline": [{"oid": "79ef77db49178c8a6873ce7585b7f312c74e8ef3", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/79ef77db49178c8a6873ce7585b7f312c74e8ef3", "message": "set up", "committedDate": "2020-04-29T14:42:09Z", "type": "commit"}, {"oid": "a2ab9be9fe7c500093edec9001c3605d2d99c0ed", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/a2ab9be9fe7c500093edec9001c3605d2d99c0ed", "message": "ensure data is downloaded correctly", "committedDate": "2020-04-29T15:25:25Z", "type": "commit"}, {"oid": "af830aaa543a23a436d7e37b3dbb1343df2a2146", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/af830aaa543a23a436d7e37b3dbb1343df2a2146", "message": "get the scene view and initial starting position in place", "committedDate": "2020-04-29T17:14:02Z", "type": "commit"}, {"oid": "a4708b4ab583618585d78d84e74262dbbcf67630", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/a4708b4ab583618585d78d84e74262dbbcf67630", "message": "get UI in place", "committedDate": "2020-04-30T11:43:11Z", "type": "commit"}, {"oid": "7f7f9da90a95f3e14c3bf02ba2de96c9a5d16989", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/7f7f9da90a95f3e14c3bf02ba2de96c9a5d16989", "message": "get image frame set up for each png file", "committedDate": "2020-04-30T13:53:53Z", "type": "commit"}, {"oid": "3f5e31753e74b96ae9a59b408d6e90dea602a409", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3f5e31753e74b96ae9a59b408d6e90dea602a409", "message": "set up logic for image overlay opacity change", "committedDate": "2020-04-30T14:02:24Z", "type": "commit"}, {"oid": "5ddbeba0e7a38abefffd4a1dcfb97dd6573618d8", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/5ddbeba0e7a38abefffd4a1dcfb97dd6573618d8", "message": "handle timer for displaying image frames", "committedDate": "2020-04-30T17:00:14Z", "type": "commit"}, {"oid": "d110a2a1902557dae4b4abd7b8514d0f9506953b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/d110a2a1902557dae4b4abd7b8514d0f9506953b", "message": "wire up combobox to timer to change speed", "committedDate": "2020-05-01T10:40:26Z", "type": "commit"}, {"oid": "647a0c58d636f6855e88cc76433077f4cef47300", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/647a0c58d636f6855e88cc76433077f4cef47300", "message": "add photo and gif", "committedDate": "2020-05-01T10:57:27Z", "type": "commit"}, {"oid": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/cd746edf263b3b09435b732cdfa09fbac0752eb4", "message": "tidy ups", "committedDate": "2020-05-04T15:49:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNTgyNg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419925826", "bodyText": "I'm not 100% sure any more, but I think the standard order for the imports is:\njava.*\n<newline>\njavafx.*\n<newline>\ncom.esri.*", "author": "JonLavi", "createdAt": "2020-05-05T07:54:16Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIwMDk4NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420200984", "bodyText": "yes that's it, good spot!", "author": "Rachael-E", "createdAt": "2020-05-05T15:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNTgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNjM0MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419926341", "bodyText": "I think in most samples we didn't do the newline after the @FXML annotation. It's a bit annoying since the IntelliJ auto-foratting will muck this up again at some point.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @FXML\n          \n          \n            \n              private SceneView sceneView;\n          \n          \n            \n              @FXML\n          \n          \n            \n              private Button controlAnimationButton;\n          \n          \n            \n              @FXML\n          \n          \n            \n              private Slider opacitySlider;\n          \n          \n            \n              @FXML\n          \n          \n            \n              private ComboBox<String> framesComboBox;\n          \n          \n            \n              @FXML private SceneView sceneView;\n          \n          \n            \n              @FXML private Button controlAnimationButton;\n          \n          \n            \n              @FXML private Slider opacitySlider;\n          \n          \n            \n              @FXML private ComboBox<String> framesComboBox;", "author": "JonLavi", "createdAt": "2020-05-05T07:55:15Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNzI5NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419927294", "bodyText": "We might not need this as a member variable, could just make it a var inside addNextImageFrameToImageOverlay?", "author": "JonLavi", "createdAt": "2020-05-05T07:57:06Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzOTQ3Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419939472", "bodyText": "It might also make more sense to call it 'frameIndex', since we use it to pick an entry from List<ImageFrame> imageFrames, not from imageFiles[]", "author": "JonLavi", "createdAt": "2020-05-05T08:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNzI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNDAyNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420214024", "bodyText": "this has to be a member variable so that the count is tracked correctly: instantiating it as 0 inside the variable just makes the index set to 0 everytime. If I'm misunderstanding, could you let me know what you were thinking please?", "author": "Rachael-E", "createdAt": "2020-05-05T15:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNzI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0NTA3OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420245078", "bodyText": "I got mixed up, I meant perhaps instantiate it in the initialize method, but really it makes sense where it is just now, so lets leave it as is.", "author": "JonLavi", "createdAt": "2020-05-05T16:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyNzI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyODQ1MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419928451", "bodyText": "I think the samples convention was not to instantiate class members when we declare them, but do either in the main method, with a comment about what they are for, or ideally  just before you use them. I don't actually mind them being instantiated here, but best check what the common pattern is.", "author": "JonLavi", "createdAt": "2020-05-05T07:59:24Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyOTc4Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419929782", "bodyText": "Can we just define an envelope straight away with four corner points, instead of Evelope(center, width, height)?", "author": "JonLavi", "createdAt": "2020-05-05T08:01:57Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTAxNg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420229016", "bodyText": "so the current implementation ensures the image frame and viewpoint sits exactly in the correct geographic location for the data provided. I could change it to an envelope with four corners if you thought there was a significant benefit in doing so over the existing implementation, though it ends up in the same lines of code plus a change in setting up the viewpoint logic. As always there's more than one way to skin a cat! I'm just not sure of the benefit of the 4 point envelope over the existing implementation.", "author": "Rachael-E", "createdAt": "2020-05-05T16:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyOTc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDM2Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420240362", "bodyText": "I just find the constructur Envelope(center, width, height) incredibly unintuitive. We aren't extracting the geographic location from the images or any other data source, so there's not really much of a point in doing it that way.The way we are creating the envelope up there is essentially the same as adding/subtracting 15.09589635986124, -14.3770441522488 from the x/y of the centre-point, respectively. We could just write these values out so it's clearer where in the world these corner points are. But yeah, a matter of preference!", "author": "JonLavi", "createdAt": "2020-05-05T16:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyOTc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzMDgxMg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419930812", "bodyText": "There's only one ImageOverlay being used in this sample, so we can make it a class member instead of repeating sceneView.getImageOverlays().get(0) here and below?", "author": "JonLavi", "createdAt": "2020-05-05T08:03:54Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjc4MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419936781", "bodyText": "Some suggestions for the comments in this section. We should specify how we're sorting the file paths and ideall why (so that they display in order). Did you try without sorting? I would have thought the files are read in alphabetically when you do .listFiles().\nIn the last section we're not actually creating an image in the intermediate step, we're using the ImageFrame(URI, Envelope) constructor, so we should specify that there. Perhaps it's worth adding a comment somewhere that we can do ImageFrame(Image, Envelope)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // instantiate a new empty list to hold image frames\n          \n          \n            \n                  imageFrames = new ArrayList<>();\n          \n          \n            \n                  // get the image files from local storage as an unordered list\n          \n          \n            \n                  File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n          \n          \n            \n                  // sort the list of image files\n          \n          \n            \n                  if (imageFiles != null) {\n          \n          \n            \n                    Arrays.sort(imageFiles);\n          \n          \n            \n                    // create an image with the given path and use it to create an image frame\n          \n          \n            \n                    for (File file : imageFiles) {\n          \n          \n            \n                      ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n          \n          \n            \n                      imageFrames.add(imageFrame);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  // instantiate a new array to hold image frames\n          \n          \n            \n                  imageFrames = new ArrayList<>();\n          \n          \n            \n                  \n          \n          \n            \n                  // get the image files from local storage\n          \n          \n            \n                  File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n          \n          \n            \n                  \n          \n          \n            \n                  // sort the list of image files by file name in ascending order\n          \n          \n            \n                  if (imageFiles != null) {\n          \n          \n            \n                    Arrays.sort(imageFiles);\n          \n          \n            \n                    \n          \n          \n            \n                    // create an image frame with the file path URI and add it to the array of image frames\n          \n          \n            \n                    for (File file : imageFiles) {\n          \n          \n            \n                      ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n          \n          \n            \n                      imageFrames.add(imageFrame);\n          \n          \n            \n                    }\n          \n          \n            \n                  }", "author": "JonLavi", "createdAt": "2020-05-05T08:15:01Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0ODUwNQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420248505", "bodyText": "Great thanks for the comment improvement suggestions. And yep, so we do need to sort to be on the safe side - here's the doc from the .listFiles():\n\nThere is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular,guaranteed to appear in alphabetical order.", "author": "Rachael-E", "createdAt": "2020-05-05T16:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NzA4Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420597082", "bodyText": "Good find!", "author": "JonLavi", "createdAt": "2020-05-06T07:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNzcwMw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419937703", "bodyText": "This is UI stuff so perhaps it's better to do it before we get to setting up the Scene/SceneView. It might be even possible to define all these things in the FXML file, might be worth having a look?\nI also think it's counterintuitive to have the high values at the top rather than the bottom.", "author": "JonLavi", "createdAt": "2020-05-05T08:16:47Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2MjAxMw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420262013", "bodyText": "I spent a while researching about how to define the above in the FXML but had no success :( if you know of a way could you let me know please?", "author": "Rachael-E", "createdAt": "2020-05-05T16:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNzcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NjgwNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420596804", "bodyText": "I don't know whether this is possible off the top of my head, it was just a passing thought! If you couldn't find any way then I doubt I'll find anything either, so no worries leaving it like this", "author": "JonLavi", "createdAt": "2020-05-06T07:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNzcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODE3Mw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419938173", "bodyText": "This method is being called at the end of initialize so maybe we can put it directly after initialize, that way we're not making readers scroll past the two other methods first.", "author": "JonLavi", "createdAt": "2020-05-05T08:17:43Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));\n+    // increment the index to keep track of which image to load next\n+    imageIndex++;\n+    // reset index once all files have been loaded\n+    if (imageIndex == imageFrames.size())\n+      imageIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzOTgyMw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419939823", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Create a new image frame from the image at the current index and add it to the image overlay.\n          \n          \n            \n               * Sets the next image frame from the array of image frames to the image overlay.", "author": "JonLavi", "createdAt": "2020-05-05T08:20:50Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MDYwNg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419940606", "bodyText": "It's not technically adding the next image frame, but repalcing the previous one, so maybe we should call it:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void addNextImageFrameToImageOverlay() {\n          \n          \n            \n              private void setNextImageFrameToImageOverlay() {", "author": "JonLavi", "createdAt": "2020-05-05T08:22:16Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MTQzOA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419941438", "bodyText": "Same here, if you make a class member ImageOverlay imageOverlay, you can avoid interrogating the sceneView:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());\n          \n          \n            \n                imageOverlay.setOpacity((float) opacitySlider.getValue());", "author": "JonLavi", "createdAt": "2020-05-05T08:23:55Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));\n+    // increment the index to keep track of which image to load next\n+    imageIndex++;\n+    // reset index once all files have been loaded\n+    if (imageIndex == imageFrames.size())\n+      imageIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MzY5OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r419943698", "bodyText": "If you wanted, you could add Key-Value pairs of String-Int to the ComboBox, and use a cell factory to display the key (15/30/60 fps), and then on selection just put in the corresponding value (17/33/67) straight into the startNewAnimationTimer. Let me know if you want me to walk you through it.", "author": "JonLavi", "createdAt": "2020-05-05T08:27:51Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML\n+  private SceneView sceneView;\n+  @FXML\n+  private Button controlAnimationButton;\n+  @FXML\n+  private Slider opacitySlider;\n+  @FXML\n+  private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+\n+  private Integer imageIndex = 0;\n+  private Integer period = 67;\n+\n+  private Timer timer = null;\n+  private boolean isTimerRunning = true;\n+\n+  public void initialize() {\n+\n+    try {\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image with the given path and use it to create an image frame\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Create a new image frame from the image at the current index and add it to the image overlay.\n+   */\n+  private void addNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    sceneView.getImageOverlays().get(0).setImageFrame(imageFrames.get(imageIndex));\n+    // increment the index to keep track of which image to load next\n+    imageIndex++;\n+    // reset index once all files have been loaded\n+    if (imageIndex == imageFrames.size())\n+      imageIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    sceneView.getImageOverlays().get(0).setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);\n+    TimerTask timerTask = new TimerTask() {\n+      @Override\n+      public void run() {\n+        addNextImageFrameToImageOverlay();\n+      }\n+    };\n+    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleframesComboBoxInteraction() {\n+    // set the period for the chosen fps \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {", "originalCommit": "cd746edf263b3b09435b732cdfa09fbac0752eb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2NjE4Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420266187", "bodyText": "Thanks, I'd considered the use of a cell factory but then decided to go for the switch since it's a fairly basic set up and we can comment to show the conversion \"maths\". We have other Java samples that use the switch for similar \"simplicity\" so it seemed fitting. Though we also have cell factory for simple conversions too! Unless you have strong feelings about it we can leave as is.", "author": "Rachael-E", "createdAt": "2020-05-05T17:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MzY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NTk3Ng==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r420595976", "bodyText": "I think the whole conversion stuff distracts from the actual sample's intentions, but if there's other samples that do this too then you can just leave it.\nI think having this at the beginning of the sample and then using a cell factory is just as informative:\nframesComboBox.getItems().addAll(\nnew ImmutablePair(\"60 frames per second\", \"17\"), // 1000ms/17 = 60 fps\nnew ImmutablePair( \"30 frames per second\", \"33\"), // 1000ms/30 = 30 fps\nnew ImmutablePair( \"15 frames per second\", \"67\") // 1000ms/15 = 15 fps\n);", "author": "JonLavi", "createdAt": "2020-05-06T07:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MzY5OA=="}], "type": "inlineReview"}, {"oid": "3ae764db7d75825eea0068861daed630e4d7393d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3ae764db7d75825eea0068861daed630e4d7393d", "message": "review updates", "committedDate": "2020-05-05T15:48:26Z", "type": "commit"}, {"oid": "7d796033b570e1c0be5d4b714342daab685a3469", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/7d796033b570e1c0be5d4b714342daab685a3469", "message": "update method name and make imageoverlay class variable", "committedDate": "2020-05-05T16:38:57Z", "type": "commit"}, {"oid": "715f0f37aee0391ed5b9c95b1f3216693aa578dd", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/715f0f37aee0391ed5b9c95b1f3216693aa578dd", "message": "move fxml style logic to css", "committedDate": "2020-05-05T16:52:16Z", "type": "commit"}, {"oid": "988b06220e3fb69e61b4610347c806a3a03baa47", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/988b06220e3fb69e61b4610347c806a3a03baa47", "message": "move combobox logic, update JavaDoc and move timer method up", "committedDate": "2020-05-05T17:02:53Z", "type": "commit"}, {"oid": "99f6b5cc05d12a37df18eeda9ca60e8435afbca2", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/99f6b5cc05d12a37df18eeda9ca60e8435afbca2", "message": "remove cursor from gif", "committedDate": "2020-05-06T09:14:40Z", "type": "commit"}, {"oid": "5108fdb1157e73245e5f3ea0936ee47ed7cc5ca1", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/5108fdb1157e73245e5f3ea0936ee47ed7cc5ca1", "message": "use css for fxml styling", "committedDate": "2020-05-06T17:36:50Z", "type": "commit"}, {"oid": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ef34fd591bd9d159daa881da1ce1f0f4bf85e97e", "message": "make redirect_from property blank", "committedDate": "2020-05-07T18:23:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Mzc4OQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r432353789", "bodyText": "@Rachael-E regarding the performance aspect of this, have you tried holding on to an ArrayList<Image> and creating the ImageFrame ad-hoc, only when it needs to be displayed? There seems to be quite a difference in memory consumption between a collection of Image and ImageFrame, as other platforms are reporting", "author": "JonLavi", "createdAt": "2020-05-29T09:05:17Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);", "originalCommit": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczNDE1Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r433734157", "bodyText": "thanks @JonLavi no haven't tried this: is this the agreed way forward from the samples team perspective? I've been out the loop :D just waiting on @tschie 2nd review and I can make changes then: I know we're already going to change the drop down text from \"xx fps\" to \"slow\" etc. If there's anything else to go in I'd be grateful to hear it!", "author": "Rachael-E", "createdAt": "2020-06-02T09:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Mzc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MDk4MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r433740981", "bodyText": "There's no concensus as of yet for which way is to be chosen across all platforms. It looks like for some, an ArrayList<Image> provies a less smooth animation. I think it would be a matter of testing it out and seeing whether it runs smoothly still and consumes less memory. Hopefully the team can agree to add some info to the 'Additional Information' section of the Readme - it's still in PR.", "author": "JonLavi", "createdAt": "2020-06-02T09:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Mzc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1OTI3Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426959272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // instantiate a new empty list to hold image frames\n          \n          \n            \n                  imageFrames = new ArrayList<>();\n          \n          \n            \n                  // get the image files from local storage as an unordered list\n          \n          \n            \n                  File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n          \n          \n            \n                  // sort the list of image files by file name in ascending order\n          \n          \n            \n                  if (imageFiles != null) {\n          \n          \n            \n                    Arrays.sort(imageFiles);\n          \n          \n            \n                    // create an image frame from the file path and add it to the list of image frames\n          \n          \n            \n                    for (File file : imageFiles) {\n          \n          \n            \n                      ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n          \n          \n            \n                      imageFrames.add(imageFrame);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  \n          \n          \n            \n                  // get the image files from local storage as an unordered list\n          \n          \n            \n                  File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n          \n          \n            \n                  // sort the list of image files by file name in ascending order\n          \n          \n            \n                  if (imageFiles != null) {\n          \n          \n            \n                    imageFrames = Arrays.stream(imageFiles)\n          \n          \n            \n                            .sorted()\n          \n          \n            \n                            .map(f -> new ImageFrame(f.getAbsolutePath(), imageFrameEnvelope))\n          \n          \n            \n                            .collect(Collectors.toList());\n          \n          \n            \n                  }", "author": "tschie", "createdAt": "2020-05-19T00:14:42Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }", "originalCommit": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1OTQyMA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426959420", "bodyText": "Should also handle the case of missing data with an alert.", "author": "tschie", "createdAt": "2020-05-19T00:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1OTI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MjY5OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426962698", "bodyText": "I think the Timeline API we use in other samples would work well here:\nanimation = new Timeline();\nanimation.setCycleCount(-1); // loop animation\nanimation.getKeyFrames().add(new KeyFrame(Duration.millis(Math.round(1000 / fps)), e -> {\n  imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n  // update to the next frame\n  frameIndex = (frameIndex + 1) % imageFrames.size();\n}));\nYou only need to create it once when you create the frames and your start/stop button could then just do animation.play() and animation.pause().", "author": "tschie", "createdAt": "2020-05-19T00:27:37Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);", "originalCommit": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MjgxNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426962814", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void handleframesComboBoxInteraction() {\n          \n          \n            \n              private void handleFramesComboBoxInteraction() {", "author": "tschie", "createdAt": "2020-05-19T00:28:00Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);\n+    TimerTask timerTask = new TimerTask() {\n+      @Override\n+      public void run() {\n+        setNextImageFrameToImageOverlay();\n+      }\n+    };\n+    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+  }\n+  \n+  /**\n+   * Sets the next image frame from the array of image frames to the image overlay.\n+   */\n+  private void setNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+    // increment the index to keep track of which image to load next\n+    frameIndex++;\n+    // reset index once all files have been loaded\n+    if (frameIndex == imageFrames.size())\n+      frameIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    imageOverlay.setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleframesComboBoxInteraction() {", "originalCommit": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2Mjg1NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r426962854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void handlecontrolAnimationButtonClicked() {\n          \n          \n            \n              private void handleControlAnimationButtonClicked() {", "author": "tschie", "createdAt": "2020-05-19T00:28:11Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timer timer;\n+  private boolean isTimerRunning;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with values\n+      framesComboBox.getItems().addAll(\"60 frames per second\", \"30 frames per second\", \"15 frames per second\");\n+      // open the sample at 15fps\n+      framesComboBox.getSelectionModel().select(2);\n+      // set timer running tracker to true when sample loads\n+      isTimerRunning = true;\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // instantiate a new empty list to hold image frames\n+      imageFrames = new ArrayList<>();\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        Arrays.sort(imageFiles);\n+        // create an image frame from the file path and add it to the list of image frames\n+        for (File file : imageFiles) {\n+          ImageFrame imageFrame = new ImageFrame(file.getAbsolutePath(), imageFrameEnvelope);\n+          imageFrames.add(imageFrame);\n+        }\n+      }\n+\n+      startNewAnimationTimer();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   */\n+  private void startNewAnimationTimer() {\n+\n+    timer = new Timer(true);\n+    TimerTask timerTask = new TimerTask() {\n+      @Override\n+      public void run() {\n+        setNextImageFrameToImageOverlay();\n+      }\n+    };\n+    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+  }\n+  \n+  /**\n+   * Sets the next image frame from the array of image frames to the image overlay.\n+   */\n+  private void setNextImageFrameToImageOverlay() {\n+\n+    // set image frame to image overlay\n+    imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+    // increment the index to keep track of which image to load next\n+    frameIndex++;\n+    // reset index once all files have been loaded\n+    if (frameIndex == imageFrames.size())\n+      frameIndex = 0;\n+  }\n+\n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    imageOverlay.setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleframesComboBoxInteraction() {\n+    // set the period for the chosen fps \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {\n+      case \"60 frames per second\":\n+        period = 17; // 1000ms/17 = 60 fps\n+        break;\n+      case \"30 frames per second\":\n+        period = 33; // 1000ms/33 = 30 fps\n+        break;\n+      case \"15 frames per second\":\n+        period = 67; // 1000ms/67 = 15 fps\n+        break;\n+    }\n+\n+    if (isTimerRunning) {\n+      timer.cancel();\n+      startNewAnimationTimer();\n+    }\n+  }\n+\n+  /**\n+   * Stops/starts the animation of the image frames on the image overlay.\n+   */\n+  @FXML\n+  private void handlecontrolAnimationButtonClicked() {", "originalCommit": "ef34fd591bd9d159daa881da1ce1f0f4bf85e97e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3857bf700ef4015e6e978c6784f18042baa3ecd2", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3857bf700ef4015e6e978c6784f18042baa3ecd2", "message": "Merge branch 'master' into animate_images_image_overlay", "committedDate": "2020-07-02T13:33:17Z", "type": "commit"}, {"oid": "f0df2753ff04d3b3a09387f0125f05dcfec13a18", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/f0df2753ff04d3b3a09387f0125f05dcfec13a18", "message": "address review comments", "committedDate": "2020-07-02T15:02:37Z", "type": "commit"}, {"oid": "807737801596e3927eafd71c022c431ed86d29c3", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/807737801596e3927eafd71c022c431ed86d29c3", "message": "update timeline method description", "committedDate": "2020-07-02T16:44:26Z", "type": "commit"}, {"oid": "6c938017d74ceba8cd141314f580af0614fb8707", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/6c938017d74ceba8cd141314f580af0614fb8707", "message": "update metadata", "committedDate": "2020-07-02T16:58:27Z", "type": "commit"}, {"oid": "532c0c6fc3a9d311dfbd0875bf42b9f904849034", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/532c0c6fc3a9d311dfbd0875bf42b9f904849034", "message": "update image and gif", "committedDate": "2020-07-03T09:52:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMTc1MA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449521750", "bodyText": "I'm surprised this can't be done with just frameIndex++. The modulo operation looks a bit funky \ud83d\ude04", "author": "JonLavi", "createdAt": "2020-07-03T10:56:33Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -120,34 +115,22 @@ public void initialize() {\n   }\n \n   /**\n-   * Set up a timer to display the images at the specified frame rate from the combobox.\n+   * Set up a timer to display the images at the specified speed from the combobox.\n    */\n   private void startNewAnimationTimer() {\n \n-    timer = new Timer(true);\n-    TimerTask timerTask = new TimerTask() {\n-      @Override\n-      public void run() {\n-        setNextImageFrameToImageOverlay();\n-      }\n-    };\n-    timer.scheduleAtFixedRate(timerTask, 1L, period);\n+    animation = new Timeline();\n+    animation.setCycleCount(-1); // loop animation\n+    animation.getKeyFrames().add(new KeyFrame(Duration.millis(period), e -> {\n+      // set image frame to image overlay\n+      imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+      // update to the next frame\n+      frameIndex = (frameIndex + 1) % imageFrames.size();", "originalCommit": "f0df2753ff04d3b3a09387f0125f05dcfec13a18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwOTY1Mw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449609653", "bodyText": "this won't work because it would just count up infinitely: going beyond the total size of the array which is 240. The modulo here keeps the logic concise and neat, otherwise we'd have to do as I had before which adds more codelines:\n    frameIndex++;\t\n    // reset index once all files have been loaded\t\n    if (frameIndex == imageFrames.size())\t\n      frameIndex = 0;", "author": "Rachael-E", "createdAt": "2020-07-03T14:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMTc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyNDU5NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449624594", "bodyText": "True, but at the cost of 2 extra lines of code and a comment, that is much more easy to comprehend", "author": "JonLavi", "createdAt": "2020-07-03T15:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMTc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyODAxNQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449528015", "bodyText": "we should really have a default case in this switch, you could just put it on 'slow'?", "author": "JonLavi", "createdAt": "2020-07-03T11:12:50Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javafx.animation.Animation;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+import javafx.util.Duration;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;\n+  private ImageOverlay imageOverlay;\n+\n+  private Integer frameIndex = 0;\n+  private Integer period = 67;\n+  private Timeline animation;\n+\n+  public void initialize() {\n+\n+    try {\n+      \n+      // populate the frames combo box with speed descriptions\n+      framesComboBox.getItems().addAll(\"Fast\", \"Medium\", \"Slow\");\n+      // open the sample at slow speed\n+      framesComboBox.getSelectionModel().select(2);\n+\n+      // create a new ArcGISScene and set it to the scene view\n+      ArcGISScene scene = new ArcGISScene();\n+      sceneView.setArcGISScene(scene);\n+\n+      // create a camera, looking at the pacific southwest sector\n+      Point observationPoint = new Point(-116.621, 24.7773, 856977.0);\n+      Camera camera = new Camera(observationPoint, 353.994, 48.5495, 0.0);\n+\n+      // create an envelope of the pacific southwest sector for displaying the image frame\n+      Point pointForImageFrame = new Point(-120.0724273439448, 35.131016955536694, SpatialReferences.getWgs84());\n+      Envelope imageFrameEnvelope = new Envelope(pointForImageFrame, 15.09589635986124, -14.3770441522488);\n+      scene.setInitialViewpoint(new Viewpoint(imageFrameEnvelope, camera));\n+\n+      // create a new tiled layer from the World Dark Gray Base REST service and set it as the scene's basemap\n+      Basemap basemap = new Basemap(new ArcGISTiledLayer(\"https://services.arcgisonline\" +\n+        \".com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer\"));\n+      scene.setBasemap(basemap);\n+\n+      // create a new elevation source from the Terrain3D REST service and set it as the scene's base surface\n+      Surface surface = new Surface();\n+      surface.getElevationSources().add(new ArcGISTiledElevationSource(\"https://elevation3d.arcgis\" +\n+        \".com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"));\n+      scene.setBaseSurface(surface);\n+\n+      // create and append an image overlay to the scene view\n+      sceneView.getImageOverlays().add(new ImageOverlay());\n+      // store the newly created image overlay\n+      imageOverlay = sceneView.getImageOverlays().get(0);\n+\n+      // get the image files from local storage as an unordered list\n+      File[] imageFiles = new File(System.getProperty(\"data.dir\"), \"./samples-data/PacificSouthWest\").listFiles();\n+      // sort the list of image files by file name in ascending order\n+      if (imageFiles != null) {\n+        imageFrames = Arrays.stream(imageFiles)\n+          .sorted()\n+          .map(f -> new ImageFrame(f.getAbsolutePath(), imageFrameEnvelope))\n+          .collect(Collectors.toList());\n+      }\n+\n+      startNewAnimationTimeline();\n+\n+    } catch (Exception e) {\n+      // on any exception, print the stack trace\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Set up a timeline to display the images at the specified speed from the combobox.\n+   */\n+  private void startNewAnimationTimeline() {\n+\n+    animation = new Timeline();\n+    animation.setCycleCount(-1); // loop animation\n+    animation.getKeyFrames().add(new KeyFrame(Duration.millis(period), e -> {\n+      // set image frame to image overlay\n+      imageOverlay.setImageFrame(imageFrames.get(frameIndex));\n+      // update to the next frame\n+      frameIndex = (frameIndex + 1) % imageFrames.size();\n+    }));\n+    animation.play();\n+  }\n+  \n+  /**\n+   * Controls the opacity of the image overlay using the slider.\n+   */\n+  @FXML\n+  private void changeImageOverlayOpacity() {\n+    imageOverlay.setOpacity((float) opacitySlider.getValue());\n+  }\n+\n+  /**\n+   * Handles the rate at which the image frames are displayed using the combo box.\n+   */\n+  @FXML\n+  private void handleFramesComboBoxInteraction() {\n+    // set the period for the chosen frame display speed \n+    switch (framesComboBox.getSelectionModel().getSelectedItem()) {\n+      case \"Fast\":\n+        period = 17;\n+        break;\n+      case \"Medium\":\n+        period = 33;\n+        break;\n+      case \"Slow\":\n+        period = 67;\n+        break;", "originalCommit": "532c0c6fc3a9d311dfbd0875bf42b9f904849034", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMTg0MA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449611840", "bodyText": "I think because there's no other way any other value can be chosen in the combobox, we don't need a default here: it can only be one of \"fast\", \"medium\" or \"slow\".  In the code at the beginning we select index 2 from the combo box, and don't set that to anything else in the code (it would throw an error if we tried to set it to something beyond that index).", "author": "Rachael-E", "createdAt": "2020-07-03T14:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyODAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyODM1OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/509#discussion_r449528358", "bodyText": "In theory this could be a local var. Are we worried about GC being a problem here?", "author": "JonLavi", "createdAt": "2020-07-03T11:13:46Z", "path": "scene/animate-images-with-image-overlay/src/main/java/com/esri/samples/animate_images_with_image_overlay/AnimateImagesWithImageOverlayController.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.animate_images_with_image_overlay;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javafx.animation.Animation;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Slider;\n+import javafx.util.Duration;\n+\n+import com.esri.arcgisruntime.geometry.Envelope;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.layers.ArcGISTiledLayer;\n+import com.esri.arcgisruntime.mapping.ArcGISScene;\n+import com.esri.arcgisruntime.mapping.ArcGISTiledElevationSource;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Surface;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Camera;\n+import com.esri.arcgisruntime.mapping.view.ImageFrame;\n+import com.esri.arcgisruntime.mapping.view.ImageOverlay;\n+import com.esri.arcgisruntime.mapping.view.SceneView;\n+\n+public class AnimateImagesWithImageOverlayController {\n+\n+  @FXML private SceneView sceneView;\n+  @FXML private Button controlAnimationButton;\n+  @FXML private Slider opacitySlider;\n+  @FXML private ComboBox<String> framesComboBox;\n+\n+  private List<ImageFrame> imageFrames;", "originalCommit": "532c0c6fc3a9d311dfbd0875bf42b9f904849034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ffb507a7944416256232a27c42d92bb652f2e49", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3ffb507a7944416256232a27c42d92bb652f2e49", "message": "update readme, metadata and css", "committedDate": "2020-07-03T15:40:39Z", "type": "commit"}, {"oid": "e4f96f87f729cdd3d937c88a22dcee969728aae3", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/e4f96f87f729cdd3d937c88a22dcee969728aae3", "message": "add missing gradle task", "committedDate": "2020-07-03T16:24:40Z", "type": "commit"}, {"oid": "ee9f5413f6ba95f39a23c060497ae4c28f2d8e06", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ee9f5413f6ba95f39a23c060497ae4c28f2d8e06", "message": "update css and fxml for sample viewer rendering", "committedDate": "2020-07-03T17:10:55Z", "type": "commit"}, {"oid": "20f7c4a0d585978c94cc67f912e18985ccd20db5", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/20f7c4a0d585978c94cc67f912e18985ccd20db5", "message": "add additional directory for images to go in for sample viewer", "committedDate": "2020-07-03T17:55:50Z", "type": "commit"}, {"oid": "639c59c6af8595112b5f527ed41529e82e3db1b4", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/639c59c6af8595112b5f527ed41529e82e3db1b4", "message": "remove additional directory path", "committedDate": "2020-07-06T11:45:51Z", "type": "commit"}, {"oid": "383f27e4df999eca1b73bae5720507d1d56856fb", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/383f27e4df999eca1b73bae5720507d1d56856fb", "message": "move show labels to fxml", "committedDate": "2020-07-06T13:02:31Z", "type": "commit"}, {"oid": "5fe3a6dd06754212d71b7ed3d539894ed623be9e", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/5fe3a6dd06754212d71b7ed3d539894ed623be9e", "message": "update metadata", "committedDate": "2020-07-06T13:16:09Z", "type": "commit"}]}