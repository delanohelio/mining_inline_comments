{"pr_number": 449, "pr_title": "New sample: Perform valve isolation trace", "pr_createdAt": "2020-03-11T20:27:44Z", "pr_url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449", "timeline": [{"oid": "84e4dd403c13b557837e2e19321ec148406ba09d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/84e4dd403c13b557837e2e19321ec148406ba09d", "message": "project setup", "committedDate": "2020-02-12T12:36:54Z", "type": "commit"}, {"oid": "c1741017c3f6e3350025bb49e28526a592e2f71c", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c1741017c3f6e3350025bb49e28526a592e2f71c", "message": "add basic ui", "committedDate": "2020-02-12T12:50:04Z", "type": "commit"}, {"oid": "1dfe4ad30661c85955e7ffda95eda337e3c84601", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/1dfe4ad30661c85955e7ffda95eda337e3c84601", "message": "add sample", "committedDate": "2020-02-12T14:45:56Z", "type": "commit"}, {"oid": "49e20101a3a417e1d555a6ad0f54cfe1016dfc5b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/49e20101a3a417e1d555a6ad0f54cfe1016dfc5b", "message": "add list cell, improve UI", "committedDate": "2020-02-12T14:59:34Z", "type": "commit"}, {"oid": "e6e348b24f80dd6f6ccf9972f612c73eb80ed536", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/e6e348b24f80dd6f6ccf9972f612c73eb80ed536", "message": "UI polishing", "committedDate": "2020-02-12T15:08:56Z", "type": "commit"}, {"oid": "8a99590171fb9c6522f7ac20e4fef38f392f6120", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8a99590171fb9c6522f7ac20e4fef38f392f6120", "message": "update to use gas network", "committedDate": "2020-02-17T10:32:54Z", "type": "commit"}, {"oid": "da4d04d6f22c2e6a38ecb946d0db0637e0f46379", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/da4d04d6f22c2e6a38ecb946d0db0637e0f46379", "message": "var naming typo", "committedDate": "2020-02-18T11:08:14Z", "type": "commit"}, {"oid": "688b9b1edfcd1300c3e6d7d633dd7bc4e5f587e9", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/688b9b1edfcd1300c3e6d7d633dd7bc4e5f587e9", "message": "improve label text", "committedDate": "2020-02-18T11:12:31Z", "type": "commit"}, {"oid": "486e8f43282110aa295024d26d8eb07b0a2da8cc", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/486e8f43282110aa295024d26d8eb07b0a2da8cc", "message": "update runtime version, javafx dependency, launcher class", "committedDate": "2020-02-26T11:40:35Z", "type": "commit"}, {"oid": "761d7dc2513b60dca3cb64a9979de9bc0c4b398b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/761d7dc2513b60dca3cb64a9979de9bc0c4b398b", "message": "move to UN category, activate isolation trace, improvements", "committedDate": "2020-03-10T23:41:28Z", "type": "commit"}, {"oid": "bf7a1a68e191d1c1cfb6cabcbd80db22fef431f4", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/bf7a1a68e191d1c1cfb6cabcbd80db22fef431f4", "message": "deal with trace returning 0 results", "committedDate": "2020-03-10T23:51:57Z", "type": "commit"}, {"oid": "0b4123761bf6170fd7ff6050c23e6fd919398857", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0b4123761bf6170fd7ff6050c23e6fd919398857", "message": "update error/info text", "committedDate": "2020-03-10T23:54:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUzOTQ5OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416539498", "bodyText": "looking at our doc for utility network, I'm not convinced this is the best sample to show this constructor. The doc says the following for the constructor that takes a URL and a map:\n\nUsually used when instantiating a UtilityNetwork object from a web map.\n\nSince we aren't doing this, I think it's more appropriate here to use the basic constructor which just takes the URL, unless there was a specific reason you chose this constructor? if so a comment as to why is probably good.", "author": "Rachael-E", "createdAt": "2020-04-28T11:31:24Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);", "originalCommit": "0b4123761bf6170fd7ff6050c23e6fd919398857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU2OTk4MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416569981", "bodyText": "I didn't make any conscious choice here, but just followed the design. Anyway, I've made this use the regular constructor", "author": "JonLavi", "createdAt": "2020-04-28T12:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUzOTQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MDkwMg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416540902", "bodyText": "to avoid repeating the code in line 141, looks like we could use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();\n          \n          \n            \n                              Point startingLocationGeometryPoint = (Point) startingLocationGeometry;", "author": "Rachael-E", "createdAt": "2020-04-28T11:34:06Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();", "originalCommit": "0b4123761bf6170fd7ff6050c23e6fd919398857", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MTcyNQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416541725", "bodyText": "Android's implementation came across a time issue where the sample wouldn't always load at this viewpoint due to async call backs with the loading listener. We instead hard coded the starting location point to avoid this and set the viewpoint for the mapview at the start of the code. It's probably worth doing the same thing here.", "author": "Rachael-E", "createdAt": "2020-04-28T11:35:37Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));", "originalCommit": "0b4123761bf6170fd7ff6050c23e6fd919398857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3NzI0OQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416577249", "bodyText": "Do you have any details on this bug? Would be good to understand why this happens. I find hard-coding the starting viewpoint isn't the ideal way", "author": "JonLavi", "createdAt": "2020-04-28T12:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MTcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0Mjk3Mw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416542973", "bodyText": "missing Javadoc for this method", "author": "Rachael-E", "createdAt": "2020-04-28T11:37:45Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));\n+\n+                // build the choice list for categories populated with the 'Name' property of each 'UtilityCategory' in the 'UtilityNetworkDefinition'\n+                categorySelectionComboBox.getItems().addAll(networkDefinition.getCategories());\n+                categorySelectionComboBox.getSelectionModel().select(0);\n+                categorySelectionComboBox.setCellFactory(param -> new UtilityCategoryListCell());\n+                categorySelectionComboBox.setButtonCell(new UtilityCategoryListCell());\n+\n+                // enable the UI\n+                enableUI();\n+\n+                // hide the progress indicator\n+                progressIndicator.setVisible(false);\n+\n+                // update the status text\n+                statusLabel.setText(\"Utility network loaded. Ready to perform trace...\");\n+                }\n+\n+              } else {\n+                new Alert(Alert.AlertType.ERROR, \"Error getting starting location geometry.\").show();\n+              }\n+            } catch (ExecutionException | InterruptedException e) {\n+              new Alert(Alert.AlertType.ERROR, \"Error getting starting location feature.\").show();\n+            }\n+          });\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  @FXML", "originalCommit": "0b4123761bf6170fd7ff6050c23e6fd919398857", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDYzNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416544634", "bodyText": "with a slight tweak of the enableUI method to remove the progress indicator and take a boolean as a parameter, these lines could be neatened up with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  traceButton.setDisable(true);\n          \n          \n            \n                     `enableUI(true)`;\n          \n      \n    \n    \n  \n\njust a suggestion to consider since it would mean tweaking of code elsewhere: not a must!", "author": "Rachael-E", "createdAt": "2020-04-28T11:40:53Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL, map);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationFeatures.get(0).getGeometry();\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));\n+\n+                // build the choice list for categories populated with the 'Name' property of each 'UtilityCategory' in the 'UtilityNetworkDefinition'\n+                categorySelectionComboBox.getItems().addAll(networkDefinition.getCategories());\n+                categorySelectionComboBox.getSelectionModel().select(0);\n+                categorySelectionComboBox.setCellFactory(param -> new UtilityCategoryListCell());\n+                categorySelectionComboBox.setButtonCell(new UtilityCategoryListCell());\n+\n+                // enable the UI\n+                enableUI();\n+\n+                // hide the progress indicator\n+                progressIndicator.setVisible(false);\n+\n+                // update the status text\n+                statusLabel.setText(\"Utility network loaded. Ready to perform trace...\");\n+                }\n+\n+              } else {\n+                new Alert(Alert.AlertType.ERROR, \"Error getting starting location geometry.\").show();\n+              }\n+            } catch (ExecutionException | InterruptedException e) {\n+              new Alert(Alert.AlertType.ERROR, \"Error getting starting location feature.\").show();\n+            }\n+          });\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  @FXML\n+  private void handleTraceClick() {\n+    try {\n+      // clear previous selection from the layers\n+      mapView.getMap().getOperationalLayers().forEach(layer -> {\n+        if (layer instanceof FeatureLayer) {\n+          ((FeatureLayer) layer).clearSelection();\n+        }\n+      });\n+\n+      // show the progress indicator and update the status text\n+      progressIndicator.setVisible(true);\n+      statusLabel.setText(\"Running isolation trace...\");\n+\n+      // disable the UI\n+      traceButton.setDisable(true);", "originalCommit": "0b4123761bf6170fd7ff6050c23e6fd919398857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3MTczMw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416571733", "bodyText": "good idea, we can leave the progressIndicator in that method and just have it switch to the oposite of the param: rogressIndicator.setVisible(!enable);", "author": "JonLavi", "createdAt": "2020-04-28T12:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDYzNA=="}], "type": "inlineReview"}, {"oid": "938c046101e7256e1cfc8152cee437532647af52", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/938c046101e7256e1cfc8152cee437532647af52", "message": "update with review suggestions", "committedDate": "2020-04-28T12:42:28Z", "type": "commit"}, {"oid": "cc3833730c79b135c553e2ff7bde30688b922bec", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/cc3833730c79b135c553e2ff7bde30688b922bec", "message": "update to newer 100.8 build", "committedDate": "2020-04-28T12:50:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNTI4MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416615281", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Enables/disable the UI and hides/shows the progress indicator.\n          \n          \n            \n               * Enables/disables the UI and hides/shows the progress indicator.", "author": "Rachael-E", "createdAt": "2020-04-28T13:32:06Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -256,44 +252,47 @@ private void handleTraceClick() {\n                   featureQueryResultListenableFuture.addDoneListener(() -> {\n                     // update the status text, enable the buttons and hide the progress indicator\n                     statusLabel.setText(\"Isolation trace completed.\");\n-                    enableUI();\n+                    enableUI(true);\n                   });\n                 }\n               });\n \n             } else {\n               statusLabel.setText(\"Isolation trace completed.\");\n               new Alert(Alert.AlertType.INFORMATION, \"Isolation trace returned no elements.\").show();\n-              enableUI();\n+              enableUI(true);\n             }\n \n           } else {\n             statusLabel.setText(\"Trace failed.\");\n             new Alert(Alert.AlertType.ERROR, \"Isolation trace result is not a utility element.\").show();\n-            enableUI();\n+            enableUI(true);\n           }\n \n         } catch (Exception e) {\n           statusLabel.setText(\"Trace failed.\");\n           new Alert(Alert.AlertType.ERROR, \"Error getting isolation trace result.\").show();\n-          enableUI();\n+          enableUI(true);\n         }\n       });\n \n     } catch (Exception e) {\n       new Alert(Alert.AlertType.ERROR, \"Error performing isolation trace.\").show();\n-      enableUI();\n+      enableUI(true);\n     }\n   }\n \n+\n   /**\n-   * Enables the UI and hides the progress indicator.\n+   * Enables/disable the UI and hides/shows the progress indicator.", "originalCommit": "cc3833730c79b135c553e2ff7bde30688b922bec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyMTA2Ng==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r416621066", "bodyText": "Thanks! One day I'll learn to spell!", "author": "JonLavi", "createdAt": "2020-04-28T13:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNTI4MQ=="}], "type": "inlineReview"}, {"oid": "ea12e481344e040ba791eafb52baba1a0abf50f1", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ea12e481344e040ba791eafb52baba1a0abf50f1", "message": "Update utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>", "committedDate": "2020-04-28T13:39:30Z", "type": "commit"}, {"oid": "f9dc6a3eb6453b48c63ea5448291bc2f7ab22660", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/f9dc6a3eb6453b48c63ea5448291bc2f7ab22660", "message": "improve CSS usage", "committedDate": "2020-05-05T09:09:52Z", "type": "commit"}, {"oid": "d7016b11259c2aef68b46c09027c7dbf2e545146", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/d7016b11259c2aef68b46c09027c7dbf2e545146", "message": "Merge branch 'perform_valve_isolation_trace' of github.com:Esri/arcgis-runtime-samples-java into perform_valve_isolation_trace", "committedDate": "2020-05-05T09:10:51Z", "type": "commit"}, {"oid": "8d91a47c03c57e91760e9d5bd14634f87c4a131b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8d91a47c03c57e91760e9d5bd14634f87c4a131b", "message": "add newline", "committedDate": "2020-05-05T09:11:59Z", "type": "commit"}, {"oid": "ccac8f5a9237715b13ef44c8a0cd219ce76a46ee", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ccac8f5a9237715b13ef44c8a0cd219ce76a46ee", "message": "indentation", "committedDate": "2020-05-05T09:12:34Z", "type": "commit"}, {"oid": "8ec1462fa948b8a7b186bcbb26c012a3a738b581", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8ec1462fa948b8a7b186bcbb26c012a3a738b581", "message": "change version to 100.8.0", "committedDate": "2020-05-07T17:03:21Z", "type": "commit"}, {"oid": "cc2067a076c496ec97004bee26a1d9911d3fa2ef", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/cc2067a076c496ec97004bee26a1d9911d3fa2ef", "message": "Merge remote-tracking branch 'origin/master' into perform_valve_isolation_trace", "committedDate": "2020-07-15T12:29:02Z", "type": "commit"}, {"oid": "0d39f4347415968f7efc61e298daa445aabd346a", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0d39f4347415968f7efc61e298daa445aabd346a", "message": "update gradle and javafx versions", "committedDate": "2020-07-15T12:30:05Z", "type": "commit"}, {"oid": "485d37314d96bce2f2b364107541eebde2335ce7", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/485d37314d96bce2f2b364107541eebde2335ce7", "message": "update README.metadata.json with script", "committedDate": "2020-07-15T12:37:00Z", "type": "commit"}, {"oid": "ceab44edceab74a8564083b6f10f7f8e54f85fbd", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ceab44edceab74a8564083b6f10f7f8e54f85fbd", "message": "update file paths", "committedDate": "2020-07-15T12:45:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEyMTM0NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487121344", "bodyText": "renderers -> a renderer", "author": "alan-edi", "createdAt": "2020-09-11T15:27:37Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay", "originalCommit": "ceab44edceab74a8564083b6f10f7f8e54f85fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0ODU0OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487148548", "bodyText": "Space missing here and indentation does awry a couple of lines below", "author": "alan-edi", "createdAt": "2020-09-11T16:14:24Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){", "originalCommit": "ceab44edceab74a8564083b6f10f7f8e54f85fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3ODQwMw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487178403", "bodyText": "Could move this before the if and avoid calling categorySelectionComboBox.getSelectionModel().getSelectedItem() twice", "author": "alan-edi", "createdAt": "2020-09-11T17:10:43Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationGeometry;\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));\n+\n+                // build the choice list for categories populated with the 'Name' property of each 'UtilityCategory' in the 'UtilityNetworkDefinition'\n+                categorySelectionComboBox.getItems().addAll(networkDefinition.getCategories());\n+                categorySelectionComboBox.getSelectionModel().select(0);\n+                categorySelectionComboBox.setCellFactory(param -> new UtilityCategoryListCell());\n+                categorySelectionComboBox.setButtonCell(new UtilityCategoryListCell());\n+\n+                // enable the UI\n+                enableUI(true);\n+\n+                // update the status text\n+                statusLabel.setText(\"Utility network loaded. Ready to perform trace...\");\n+                }\n+\n+              } else {\n+                new Alert(Alert.AlertType.ERROR, \"Error getting starting location geometry.\").show();\n+              }\n+            } catch (ExecutionException | InterruptedException e) {\n+              new Alert(Alert.AlertType.ERROR, \"Error getting starting location feature.\").show();\n+            }\n+          });\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Uses the starting location and the selected filter barrier category to perform a valve isolation trace, then\n+   * selects all connected elements found in the trace to highlight them.\n+   */\n+  @FXML\n+  private void handleTraceClick() {\n+    try {\n+      // clear previous selection from the layers\n+      mapView.getMap().getOperationalLayers().forEach(layer -> {\n+        if (layer instanceof FeatureLayer) {\n+          ((FeatureLayer) layer).clearSelection();\n+        }\n+      });\n+\n+      // disable the UI, show the progress indicator and update the status text\n+      enableUI(false);\n+      statusLabel.setText(\"Running isolation trace...\");\n+\n+      // get the selected utility category\n+      if (categorySelectionComboBox.getSelectionModel().getSelectedItem() != null) {\n+        UtilityCategory selectedCategory = categorySelectionComboBox.getSelectionModel().getSelectedItem();", "originalCommit": "ceab44edceab74a8564083b6f10f7f8e54f85fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNjkzOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r489426939", "bodyText": "Thanks, updated!", "author": "JonLavi", "createdAt": "2020-09-16T13:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3ODQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MTY4OQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487181689", "bodyText": "I find that !enable needs to be passed to all 4 lines above", "author": "alan-edi", "createdAt": "2020-09-11T17:17:08Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceController.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.paint.Color;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.ArcGISFeature;\n+import com.esri.arcgisruntime.data.FeatureQueryResult;\n+import com.esri.arcgisruntime.data.QueryParameters;\n+import com.esri.arcgisruntime.data.ServiceFeatureTable;\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.layers.FeatureLayer;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.ColorUtil;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkDefinition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceFilter;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+\n+public class PerformValveIsolationTraceController {\n+\n+  @FXML private MapView mapView;\n+  @FXML private ProgressIndicator progressIndicator;\n+  @FXML private ComboBox<UtilityCategory> categorySelectionComboBox;\n+  @FXML private Button traceButton;\n+  @FXML private Label statusLabel;\n+  @FXML private CheckBox includeIsolatedFeaturesCheckbox;\n+\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTraceConfiguration traceConfiguration;\n+  private UtilityElement startingLocation;\n+\n+  public void initialize() {\n+    try {\n+\n+      // create a basemap and set it to the map view\n+      ArcGISMap map = new ArcGISMap(Basemap.createStreetsNightVector());\n+      mapView.setMap(map);\n+\n+      // load the utility network data from the feature service and create feature layers\n+      String featureServiceURL =\n+              \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleGas/FeatureServer\";\n+\n+      ServiceFeatureTable distributionLineFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/3\");\n+      FeatureLayer distributionLineLayer = new FeatureLayer(distributionLineFeatureTable);\n+\n+      ServiceFeatureTable deviceFeatureTable = new ServiceFeatureTable(featureServiceURL + \"/0\");\n+      FeatureLayer deviceLayer = new FeatureLayer(deviceFeatureTable);\n+\n+      // add the feature layers to the map\n+      map.getOperationalLayers().addAll(Arrays.asList(distributionLineLayer, deviceLayer));\n+\n+      // create a graphics overlay for the starting location and add it to the map view\n+      GraphicsOverlay startingLocationGraphicsOverlay = new GraphicsOverlay();\n+      mapView.getGraphicsOverlays().add(startingLocationGraphicsOverlay);\n+\n+      // create and apply renderers for the starting point graphics overlay\n+      SimpleMarkerSymbol startingPointSymbol =\n+              new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.CROSS, ColorUtil.colorToArgb(Color.LIGHTGREEN), 25);\n+      startingLocationGraphicsOverlay.setRenderer(new SimpleRenderer(startingPointSymbol));\n+\n+      // create and load the utility network\n+      utilityNetwork = new UtilityNetwork(featureServiceURL);\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // get a trace configuration from a tier\n+          UtilityNetworkDefinition networkDefinition = utilityNetwork.getDefinition();\n+          UtilityDomainNetwork domainNetwork = networkDefinition.getDomainNetwork(\"Pipeline\");\n+          UtilityTier tier = domainNetwork.getTier(\"Pipe Distribution System\");\n+          traceConfiguration = tier.getTraceConfiguration();\n+\n+          // create a trace filter\n+          traceConfiguration.setFilter(new UtilityTraceFilter());\n+\n+          // get a default starting location\n+          UtilityNetworkSource networkSource = networkDefinition.getNetworkSource(\"Gas Device\");\n+          UtilityAssetGroup assetGroup = networkSource.getAssetGroup(\"Meter\");\n+          UtilityAssetType assetType = assetGroup.getAssetType(\"Customer\");\n+          startingLocation = utilityNetwork.createElement(assetType, UUID.fromString(\"98A06E95-70BE-43E7-91B7-E34C9D3CB9FF\"));\n+\n+          // get the first feature for the starting location, and get its geometry\n+          ListenableFuture<List<ArcGISFeature>> elementFeaturesFuture =\n+                  utilityNetwork.fetchFeaturesForElementsAsync(Collections.singletonList(startingLocation));\n+\n+          elementFeaturesFuture.addDoneListener(() -> {\n+            try {\n+              List<ArcGISFeature> startingLocationFeatures = elementFeaturesFuture.get();\n+\n+              if (!startingLocationFeatures.isEmpty()) {\n+                Geometry startingLocationGeometry = startingLocationFeatures.get(0).getGeometry();\n+\n+                if (startingLocationGeometry instanceof Point){\n+                  Point startingLocationGeometryPoint = (Point) startingLocationGeometry;\n+\n+                // create a graphic for the starting location and add it to the graphics overlay\n+                Graphic startingLocationGraphic = new Graphic(startingLocationGeometry, startingPointSymbol);\n+                startingLocationGraphicsOverlay.getGraphics().add(startingLocationGraphic);\n+\n+                // set the map's viewpoint to the starting location\n+                mapView.setViewpointAsync(new Viewpoint(startingLocationGeometryPoint, 3000));\n+\n+                // build the choice list for categories populated with the 'Name' property of each 'UtilityCategory' in the 'UtilityNetworkDefinition'\n+                categorySelectionComboBox.getItems().addAll(networkDefinition.getCategories());\n+                categorySelectionComboBox.getSelectionModel().select(0);\n+                categorySelectionComboBox.setCellFactory(param -> new UtilityCategoryListCell());\n+                categorySelectionComboBox.setButtonCell(new UtilityCategoryListCell());\n+\n+                // enable the UI\n+                enableUI(true);\n+\n+                // update the status text\n+                statusLabel.setText(\"Utility network loaded. Ready to perform trace...\");\n+                }\n+\n+              } else {\n+                new Alert(Alert.AlertType.ERROR, \"Error getting starting location geometry.\").show();\n+              }\n+            } catch (ExecutionException | InterruptedException e) {\n+              new Alert(Alert.AlertType.ERROR, \"Error getting starting location feature.\").show();\n+            }\n+          });\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Uses the starting location and the selected filter barrier category to perform a valve isolation trace, then\n+   * selects all connected elements found in the trace to highlight them.\n+   */\n+  @FXML\n+  private void handleTraceClick() {\n+    try {\n+      // clear previous selection from the layers\n+      mapView.getMap().getOperationalLayers().forEach(layer -> {\n+        if (layer instanceof FeatureLayer) {\n+          ((FeatureLayer) layer).clearSelection();\n+        }\n+      });\n+\n+      // disable the UI, show the progress indicator and update the status text\n+      enableUI(false);\n+      statusLabel.setText(\"Running isolation trace...\");\n+\n+      // get the selected utility category\n+      if (categorySelectionComboBox.getSelectionModel().getSelectedItem() != null) {\n+        UtilityCategory selectedCategory = categorySelectionComboBox.getSelectionModel().getSelectedItem();\n+        // create a category comparison for the trace\n+        // NOTE: UtilityNetworkAttributeComparison or UtilityCategoryComparison with Operator.DoesNotExists\n+        // can also be used. These conditions can be joined with either UtilityTraceOrCondition or UtilityTraceAndCondition.\n+        UtilityCategoryComparison categoryComparison = new UtilityCategoryComparison(selectedCategory, UtilityCategoryComparisonOperator.EXISTS);\n+        // set the category comparison to the barriers of the configuration's trace filter\n+        traceConfiguration.getFilter().setBarriers(categoryComparison);\n+      }\n+\n+      // set the configuration to include or leave out isolated features\n+      traceConfiguration.setIncludeIsolatedFeatures(includeIsolatedFeaturesCheckbox.isSelected());\n+\n+      // build parameters for the isolation trace\n+      UtilityTraceParameters traceParameters = new UtilityTraceParameters(UtilityTraceType.ISOLATION, Collections.singletonList(startingLocation));\n+      traceParameters.setTraceConfiguration(traceConfiguration);\n+\n+      // run the trace and get the result\n+      ListenableFuture<List<UtilityTraceResult>> utilityTraceResultsFuture = utilityNetwork.traceAsync(traceParameters);\n+      utilityTraceResultsFuture.addDoneListener(() -> {\n+        try {\n+          List<UtilityTraceResult> utilityTraceResults = utilityTraceResultsFuture.get();\n+\n+          if (utilityTraceResults.get(0) instanceof UtilityElementTraceResult) {\n+            UtilityElementTraceResult utilityElementTraceResult = (UtilityElementTraceResult) utilityTraceResults.get(0);\n+\n+            if (!utilityElementTraceResult.getElements().isEmpty()) {\n+\n+              // iterate through the map's feature layers\n+              mapView.getMap().getOperationalLayers().forEach(layer -> {\n+                if (layer instanceof FeatureLayer) {\n+\n+                  // create query parameters to find features whose network source name matches the layer's feature\n+                  // table name\n+                  QueryParameters queryParameters = new QueryParameters();\n+                  utilityElementTraceResult.getElements().forEach(utilityElement -> {\n+\n+                    String networkSourceName = utilityElement.getNetworkSource().getName();\n+                    String featureTableName = ((FeatureLayer) layer).getFeatureTable().getTableName();\n+\n+                    if (networkSourceName.equals(featureTableName)) {\n+                      queryParameters.getObjectIds().add(utilityElement.getObjectId());\n+                    }\n+                  });\n+\n+                  // select features that match the query\n+                  ListenableFuture<FeatureQueryResult> featureQueryResultListenableFuture =\n+                          ((FeatureLayer) layer).selectFeaturesAsync(queryParameters, FeatureLayer.SelectionMode.NEW);\n+\n+                  // wait for the selection to finish\n+                  featureQueryResultListenableFuture.addDoneListener(() -> {\n+                    // update the status text, enable the buttons and hide the progress indicator\n+                    statusLabel.setText(\"Isolation trace completed.\");\n+                    enableUI(true);\n+                  });\n+                }\n+              });\n+\n+            } else {\n+              statusLabel.setText(\"Isolation trace completed.\");\n+              new Alert(Alert.AlertType.INFORMATION, \"Isolation trace returned no elements.\").show();\n+              enableUI(true);\n+            }\n+\n+          } else {\n+            statusLabel.setText(\"Trace failed.\");\n+            new Alert(Alert.AlertType.ERROR, \"Isolation trace result is not a utility element.\").show();\n+            enableUI(true);\n+          }\n+\n+        } catch (Exception e) {\n+          statusLabel.setText(\"Trace failed.\");\n+          new Alert(Alert.AlertType.ERROR, \"Error getting isolation trace result.\").show();\n+          enableUI(true);\n+        }\n+      });\n+\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error performing isolation trace.\").show();\n+      enableUI(true);\n+    }\n+  }\n+\n+\n+  /**\n+   * Enables/disables the UI and hides/shows the progress indicator.\n+   *\n+   * @param enable whether to enable or disable the UI\n+   */\n+  private void enableUI(boolean enable) {\n+    progressIndicator.setVisible(!enable);\n+    traceButton.setDisable(enable);\n+    categorySelectionComboBox.setDisable(enable);\n+    includeIsolatedFeaturesCheckbox.setDisable(enable);", "originalCommit": "ceab44edceab74a8564083b6f10f7f8e54f85fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMTM0NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r489431344", "bodyText": "Thanks for spotting that! I think the delay during the traces was quite short so I've never really noticed this misbehaving.", "author": "JonLavi", "createdAt": "2020-09-16T13:20:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MTY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MTk4NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487181984", "bodyText": "Copyright missing", "author": "alan-edi", "createdAt": "2020-09-11T17:17:45Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/PerformValveIsolationTraceLauncher.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.esri.samples.perform_valve_isolation_trace;", "originalCommit": "ceab44edceab74a8564083b6f10f7f8e54f85fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyMTQ2MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r489421461", "bodyText": "Good eye. We don't generally put a copyright in the Launcher class. I wonder if we should?", "author": "JonLavi", "createdAt": "2020-09-16T13:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MTk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNzU4Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r491007582", "bodyText": "I'd say definitely yes. What difference is there between this java file and the other java files?", "author": "alan-edi", "createdAt": "2020-09-18T14:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MTk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MzE4Mw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/449#discussion_r487183183", "bodyText": "Delete blank lines", "author": "alan-edi", "createdAt": "2020-09-11T17:20:08Z", "path": "utility_network/perform-valve-isolation-trace/src/main/java/com/esri/samples/perform_valve_isolation_trace/UtilityCategoryListCell.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.perform_valve_isolation_trace;\n+\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategory;\n+import javafx.scene.control.ListCell;\n+\n+/**\n+ * Shows the name of the UtilityCategory in the selection combobox.\n+ */\n+public class UtilityCategoryListCell extends ListCell<UtilityCategory> {\n+    @Override\n+    protected void updateItem(UtilityCategory item, boolean empty) {\n+        super.updateItem(item, empty);\n+        if (empty) {\n+            setText(null);\n+        } else {\n+            setText(item.getName());\n+        }\n+    }\n+}\n+\n+\n+\n+", "originalCommit": "ceab44edceab74a8564083b6f10f7f8e54f85fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3e7ea9835f60dfa9748928ed8a2ac1b6f7eeb186", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3e7ea9835f60dfa9748928ed8a2ac1b6f7eeb186", "message": "Merge remote-tracking branch 'origin/master' into perform_valve_isolation_trace", "committedDate": "2020-09-16T13:08:32Z", "type": "commit"}, {"oid": "84757e619317e5848a163f45dbbda425188dc848", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/84757e619317e5848a163f45dbbda425188dc848", "message": "update with review comments", "committedDate": "2020-09-16T13:31:08Z", "type": "commit"}, {"oid": "242773a8c608aae2e9617541234bdc2582811f7a", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/242773a8c608aae2e9617541234bdc2582811f7a", "message": "update README.md", "committedDate": "2020-09-16T14:39:13Z", "type": "commit"}, {"oid": "c16290a75579e9d4c806347f4c5a6a1ead9a30fc", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c16290a75579e9d4c806347f4c5a6a1ead9a30fc", "message": "update readme with review suggestions", "committedDate": "2020-09-22T12:27:51Z", "type": "commit"}, {"oid": "48b8bd72aa8f834605a9959ba59c2ead27077e54", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/48b8bd72aa8f834605a9959ba59c2ead27077e54", "message": "update 'How it works'", "committedDate": "2020-09-23T08:16:15Z", "type": "commit"}]}