{"pr_number": 571, "pr_title": "New sample: Display device location with autopan modes", "pr_createdAt": "2020-10-14T10:45:38Z", "pr_url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571", "timeline": [{"oid": "ef9e1f045e999b7910dabc5c6723422ba07be476", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ef9e1f045e999b7910dabc5c6723422ba07be476", "message": "Set up test sample", "committedDate": "2020-09-28T12:38:58Z", "type": "commit"}, {"oid": "19603747ae2aae39f35ce34e90a1945562d0e715", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/19603747ae2aae39f35ce34e90a1945562d0e715", "message": "Update DisplayMapSample.java", "committedDate": "2020-09-28T19:45:14Z", "type": "commit"}, {"oid": "fcb5fc0fd3bf1935a4ec98fd74025f71f37460b1", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/fcb5fc0fd3bf1935a4ec98fd74025f71f37460b1", "message": "Re order imports", "committedDate": "2020-10-01T10:10:42Z", "type": "commit"}, {"oid": "677b32534680635862ea3e0430102a700cd1e683", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/677b32534680635862ea3e0430102a700cd1e683", "message": "Set up sample", "committedDate": "2020-10-05T12:35:36Z", "type": "commit"}, {"oid": "c2c42d39516eb058d977ae9363548b8e2c2f6cac", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c2c42d39516eb058d977ae9363548b8e2c2f6cac", "message": "Add screenshot", "committedDate": "2020-10-09T10:25:26Z", "type": "commit"}, {"oid": "2e2e236f4a70a95a4e99ea86d09eb99df58cea7b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/2e2e236f4a70a95a4e99ea86d09eb99df58cea7b", "message": "Edit README", "committedDate": "2020-10-09T10:25:38Z", "type": "commit"}, {"oid": "f159dacdaf599d16cd9330d1a5737c0c9a0b3d7d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/f159dacdaf599d16cd9330d1a5737c0c9a0b3d7d", "message": "Add checkbox and combobox", "committedDate": "2020-10-09T10:27:30Z", "type": "commit"}, {"oid": "b88604db988e58b9d2d610ee86908fe5d7ea98ee", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/b88604db988e58b9d2d610ee86908fe5d7ea98ee", "message": "Edit README", "committedDate": "2020-10-13T17:03:31Z", "type": "commit"}, {"oid": "8657bedb277debbb655d84768978791f1a28bdc7", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8657bedb277debbb655d84768978791f1a28bdc7", "message": "Add IO dependency", "committedDate": "2020-10-13T17:04:03Z", "type": "commit"}, {"oid": "d888d623298e470c2937bce6ea976fdaa9ce2061", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/d888d623298e470c2937bce6ea976fdaa9ce2061", "message": "Add polyline data", "committedDate": "2020-10-13T17:08:33Z", "type": "commit"}, {"oid": "0246023190298626a3cbfc976cfbbe8b99304406", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0246023190298626a3cbfc976cfbbe8b99304406", "message": "Add simulation parameters and parse polyline data", "committedDate": "2020-10-13T17:09:08Z", "type": "commit"}, {"oid": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "message": "Remove unused CSS", "committedDate": "2020-10-14T10:47:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MjU2Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504762567", "bodyText": "Alan suggested adding a copyright statement to these files in a previous review. Something to consider @Rachael-E @TADraeseke ?", "author": "JonLavi", "createdAt": "2020-10-14T15:16:43Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationLauncher.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.esri.samples.display_device_location;", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MzQyOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504763429", "bodyText": "I'm a bit puzzled why in the app, when setting this to compass, the movement seems to switch to a more step-by-step style rather than a fluid movement of the position. Is this on purpose?", "author": "JonLavi", "createdAt": "2020-10-14T15:17:51Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationSample.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Display Device Location Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location/style.css\").toExternalForm());\n+\n+      // create ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Off\", \"Recenter\", \"Navigation\", \"Compass\");", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NDg2MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504764861", "bodyText": "@jenmerritt has recently made some of these comments more 'plain english', and I would agree that it makes it a bit nicer:\nhttps://github.com/Esri/arcgis-runtime-samples-java/pull/562/files#diff-233d54d978f8d006706bc3736efd6f05f86d772aff9079b897c9f9fa12c33a88R55\nMight be good to update these here too?", "author": "JonLavi", "createdAt": "2020-10-14T15:19:49Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationSample.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2OTE5OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504769198", "bodyText": "I think it'd be nice to start the sample with the box getting ticked and the location showing, and one of the auto-pan modes enabled (as soon as the map is loaded, of course). That way we're going straight into the action, rather than showing no location at all on startup? Personal preference though, so just proceed as designed.", "author": "JonLavi", "createdAt": "2020-10-14T15:25:24Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationSample.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Display Device Location Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location/style.css\").toExternalForm());\n+\n+      // create ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Off\", \"Recenter\", \"Navigation\", \"Compass\");\n+      comboBox.setValue(\"Off\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkbox = new CheckBox(\"Show device location\");\n+      checkbox.setDisable(true);", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3MzkyNw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504773927", "bodyText": "I don't think it's necessary to add the listener again every time the checkbox is ticked.\nWe could simply put this block of code on line 147, and then this listener is added to the combobox on startup. When we enable/disable the combobox through the checkbox, we effectively block the user from changing the autopan mode, and there's no extra listener added every time.", "author": "JonLavi", "createdAt": "2020-10-14T15:31:24Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationSample.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Display Device Location Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location/style.css\").toExternalForm());\n+\n+      // create ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Off\", \"Recenter\", \"Navigation\", \"Compass\");\n+      comboBox.setValue(\"Off\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkbox = new CheckBox(\"Show device location\");\n+      checkbox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/display_device_location/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+\n+      // toggle the location display visibility on check\n+      checkbox.setOnAction(event -> {\n+        if (checkbox.isSelected()) {\n+          // enable to combo box interactions\n+          comboBox.setDisable(false);\n+\n+          // start the location display\n+          locationDisplay.startAsync();\n+\n+          // set the autopan mode of the location display based on the mode chosen from the combo box\n+          comboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+\n+            // set the scale that the map view will zoom to when the autopan mode is changed\n+            locationDisplay.setInitialZoomScale(1000);\n+\n+            // set the iteration rate to control the time between location updates\n+            simulatedLocationDataSource.setIterationRate(1.0);\n+\n+            switch (comboBox.getSelectionModel().getSelectedItem()) {\n+              case \"Off\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.OFF);\n+                break;\n+              case \"Recenter\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+                break;\n+              case \"Navigation\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.NAVIGATION);\n+                break;\n+              case \"Compass\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.COMPASS_NAVIGATION);\n+                simulatedLocationDataSource.setIterationRate(0.5);\n+                break;\n+            }\n+          });", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NDc0Ng==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504774746", "bodyText": "I see now where the step-by-step movement is coming from. From my perspective this is a little misleading to a user, because they might think using this auto-pan-mode has some sort of effect on how the movement is displayed. Might be worth discussing in a review session, if this design isn't finalised yet?", "author": "JonLavi", "createdAt": "2020-10-14T15:32:31Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationSample.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Display Device Location Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location/style.css\").toExternalForm());\n+\n+      // create ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Off\", \"Recenter\", \"Navigation\", \"Compass\");\n+      comboBox.setValue(\"Off\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkbox = new CheckBox(\"Show device location\");\n+      checkbox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/display_device_location/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+\n+      // toggle the location display visibility on check\n+      checkbox.setOnAction(event -> {\n+        if (checkbox.isSelected()) {\n+          // enable to combo box interactions\n+          comboBox.setDisable(false);\n+\n+          // start the location display\n+          locationDisplay.startAsync();\n+\n+          // set the autopan mode of the location display based on the mode chosen from the combo box\n+          comboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+\n+            // set the scale that the map view will zoom to when the autopan mode is changed\n+            locationDisplay.setInitialZoomScale(1000);\n+\n+            // set the iteration rate to control the time between location updates\n+            simulatedLocationDataSource.setIterationRate(1.0);\n+\n+            switch (comboBox.getSelectionModel().getSelectedItem()) {\n+              case \"Off\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.OFF);\n+                break;\n+              case \"Recenter\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+                break;\n+              case \"Navigation\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.NAVIGATION);\n+                break;\n+              case \"Compass\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.COMPASS_NAVIGATION);\n+                simulatedLocationDataSource.setIterationRate(0.5);", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0NzkyNw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r505747927", "bodyText": "I think this is a good point. I will show this off at the samples review.", "author": "sclaridge", "createdAt": "2020-10-15T18:17:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NDc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NjQ5Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504776497", "bodyText": "If you move adding the listener to the combobox outside of the interaction with the checkbox, you could do a little bit of refactoring:\n      // toggle the location display visibility on check\n      checkbox.setOnAction(event -> {\n        if (checkbox.isSelected()) {\n          // start the location display\n          locationDisplay.startAsync();\n\n        } else {\n          // turn off the location display\n          locationDisplay.stop();\n        }\n\n        // toggle the combo box interactions\n        comboBox.setDisable(!checkbox.isSelected());\n      });\n\nSince you always want to toggle the disabled property pf the combobox in line with the is selected property of the checkbox, you can do this outside of the if/else statement:\ncomboBox.setDisable(!checkbox.isSelected());\nMight not be everyone's cup of tea though, so I'll leave that to you and @Rachael-E to decide.", "author": "JonLavi", "createdAt": "2020-10-14T15:34:48Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationSample.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Display Device Location Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location/style.css\").toExternalForm());\n+\n+      // create ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Off\", \"Recenter\", \"Navigation\", \"Compass\");\n+      comboBox.setValue(\"Off\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkbox = new CheckBox(\"Show device location\");\n+      checkbox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/display_device_location/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+\n+      // toggle the location display visibility on check\n+      checkbox.setOnAction(event -> {\n+        if (checkbox.isSelected()) {\n+          // enable to combo box interactions\n+          comboBox.setDisable(false);\n+\n+          // start the location display\n+          locationDisplay.startAsync();\n+\n+          // set the autopan mode of the location display based on the mode chosen from the combo box\n+          comboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+\n+            // set the scale that the map view will zoom to when the autopan mode is changed\n+            locationDisplay.setInitialZoomScale(1000);\n+\n+            // set the iteration rate to control the time between location updates\n+            simulatedLocationDataSource.setIterationRate(1.0);\n+\n+            switch (comboBox.getSelectionModel().getSelectedItem()) {\n+              case \"Off\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.OFF);\n+                break;\n+              case \"Recenter\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+                break;\n+              case \"Navigation\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.NAVIGATION);\n+                break;\n+              case \"Compass\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.COMPASS_NAVIGATION);\n+                simulatedLocationDataSource.setIterationRate(0.5);\n+                break;\n+            }\n+          });\n+        } else {\n+          // turn off the location display\n+          locationDisplay.stop();\n+          comboBox.setDisable(true);\n+        }\n+      });", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxNjY2Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r505316667", "bodyText": "I'm noticing another thing here, a better variable name would be checkBox.\nAnd another alternative for enabling/disabling the checkbox and combobox in tandem would be to use something called property binding:\n      checkbox.selectedProperty().bindBidirectional(comboBox.disableProperty());\n\nIt's quite a useful concept, so worth looking into a little!", "author": "JonLavi", "createdAt": "2020-10-15T08:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NjQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NzU4Mw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504777583", "bodyText": "I'd personally have the tickbox ticked here, and put one of the auto-pan-modes on (e.g. recenter), so that the user is taken straight to the action.", "author": "JonLavi", "createdAt": "2020-10-14T15:36:17Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationSample.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Display Device Location Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location/style.css\").toExternalForm());\n+\n+      // create ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Off\", \"Recenter\", \"Navigation\", \"Compass\");\n+      comboBox.setValue(\"Off\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkbox = new CheckBox(\"Show device location\");\n+      checkbox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/display_device_location/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+\n+      // toggle the location display visibility on check\n+      checkbox.setOnAction(event -> {\n+        if (checkbox.isSelected()) {\n+          // enable to combo box interactions\n+          comboBox.setDisable(false);\n+\n+          // start the location display\n+          locationDisplay.startAsync();\n+\n+          // set the autopan mode of the location display based on the mode chosen from the combo box\n+          comboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+\n+            // set the scale that the map view will zoom to when the autopan mode is changed\n+            locationDisplay.setInitialZoomScale(1000);\n+\n+            // set the iteration rate to control the time between location updates\n+            simulatedLocationDataSource.setIterationRate(1.0);\n+\n+            switch (comboBox.getSelectionModel().getSelectedItem()) {\n+              case \"Off\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.OFF);\n+                break;\n+              case \"Recenter\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+                break;\n+              case \"Navigation\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.NAVIGATION);\n+                break;\n+              case \"Compass\":\n+                locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.COMPASS_NAVIGATION);\n+                simulatedLocationDataSource.setIterationRate(0.5);\n+                break;\n+            }\n+          });\n+        } else {\n+          // turn off the location display\n+          locationDisplay.stop();\n+          comboBox.setDisable(true);\n+        }\n+      });\n+\n+      // enable the checkbox interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          checkbox.setDisable(false);", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3OTAyOA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r504779028", "bodyText": "Personally I find it a bit more intuitive to use a streets basemap for navigation, rather than satellite imagery (because it shows roads and road names more clearly), but that's a matter of preference!", "author": "JonLavi", "createdAt": "2020-10-14T15:38:17Z", "path": "map_view/display-device-location/src/main/java/com/esri/samples/display_device_location/DisplayDeviceLocationSample.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Display Device Location Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location/style.css\").toExternalForm());\n+\n+      // create ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());", "originalCommit": "077ae8abdc6c7ad784ce8c3987e8965877e25ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "95c7dc52b784f0e1de7050e6546caa96f3992dfd", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/95c7dc52b784f0e1de7050e6546caa96f3992dfd", "message": "Update README", "committedDate": "2020-10-15T12:03:39Z", "type": "commit"}, {"oid": "1db1d32ee0bb91f08b23de78b1a3097e0a382eae", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/1db1d32ee0bb91f08b23de78b1a3097e0a382eae", "message": "Fix comments from PR", "committedDate": "2020-10-15T12:03:54Z", "type": "commit"}, {"oid": "a7d3cf2fdec18ac8181df221e744ba97f8034d9a", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/a7d3cf2fdec18ac8181df221e744ba97f8034d9a", "message": "Rename sample", "committedDate": "2020-10-15T18:27:43Z", "type": "commit"}, {"oid": "08ed6b90885c628d9f99fa2479f5e60f608fd44b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/08ed6b90885c628d9f99fa2479f5e60f608fd44b", "message": "Fix name of class", "committedDate": "2020-10-16T14:54:37Z", "type": "commit"}, {"oid": "2cd48e7c626c17f94f078c4dbc36e66e90dcca3c", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/2cd48e7c626c17f94f078c4dbc36e66e90dcca3c", "message": "Remove unused dependency", "committedDate": "2020-10-20T15:19:22Z", "type": "commit"}, {"oid": "26160ec0e2af56c93a02352cc21d27255812e98f", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/26160ec0e2af56c93a02352cc21d27255812e98f", "message": "Remove the iteration rate", "committedDate": "2020-10-20T15:19:42Z", "type": "commit"}, {"oid": "4801248e5606b2ce9fba9a21b2daaa755c189495", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/4801248e5606b2ce9fba9a21b2daaa755c189495", "message": "Rename resources", "committedDate": "2020-10-20T15:22:05Z", "type": "commit"}, {"oid": "8d4dd6d5927515180a47bd01a3fbc311650a8d51", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8d4dd6d5927515180a47bd01a3fbc311650a8d51", "message": "Add alt text", "committedDate": "2020-10-20T15:23:59Z", "type": "commit"}, {"oid": "caf9f064be95a97bac497e30e8fac14ce47b733a", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/caf9f064be95a97bac497e30e8fac14ce47b733a", "message": "Set initial zoom and autopan mode", "committedDate": "2020-10-20T16:10:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3OTYwNw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515179607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // create a view and add the ArcGISMap to it\n          \n          \n            \n                  // create a map view and add the map to it", "author": "Rachael-E", "createdAt": "2020-10-30T15:25:34Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4NzEyNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515187124", "bodyText": "since this is quite a bunch of UI steps up front that aren't directly related to the important API parts of this sample, I'd be happy to move these into a setupUI method.  So the user can get straight to the important bits.", "author": "Rachael-E", "createdAt": "2020-10-30T15:34:01Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MzE1MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515193151", "bodyText": "let's try out var again here: there are A LOT of simulatedlocationdatasources here and this is exactly the sort of thing local variable type inference was introduced to help with readability. It's obvious from variable name that it is a simulated location data source so is a good var candidate.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n          \n          \n            \n                  var simulatedLocationDataSource = new SimulatedLocationDataSource();", "author": "Rachael-E", "createdAt": "2020-10-30T15:41:43Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\n+        \"/display_device_location_with_autopan_modes/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5NTI4Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515195287", "bodyText": "we could also opt for var here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LocationDisplay locationDisplay = mapView.getLocationDisplay();\n          \n          \n            \n                  var locationDisplay = mapView.getLocationDisplay();", "author": "Rachael-E", "createdAt": "2020-10-30T15:44:53Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\n+        \"/display_device_location_with_autopan_modes/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwNTQ0Ng==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515205446", "bodyText": "these comments aren't entirely accurate as to what the API is doing.\nWhilst startAsync() and stop() do indeed show/hide the location display, what it's doing at an API level is initializing and then receiving location data source updates. When stopping, it ceases to receive the location updates.\nI'd therefore suggest the following:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // toggle the location display visibility on check\n          \n          \n            \n                  // control location display updates and visibility", "author": "Rachael-E", "createdAt": "2020-10-30T16:00:07Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\n+        \"/display_device_location_with_autopan_modes/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      locationDisplay.setInitialZoomScale(1000);\n+\n+      // toggle the location display visibility on check", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMTYxMA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515211610", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // start the location display\n          \n          \n            \n                      // start receiving location updates and display the current location with a default round blue symbol", "author": "Rachael-E", "createdAt": "2020-10-30T16:09:37Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\n+        \"/display_device_location_with_autopan_modes/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      locationDisplay.setInitialZoomScale(1000);\n+\n+      // toggle the location display visibility on check\n+      checkBox.setOnAction(event -> {\n+        if (checkBox.isSelected()) {\n+          // start the location display", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNTY3MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515215671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // turn off the location display\n          \n          \n            \n                      // stop receiving location updates and displaying location symbol", "author": "Rachael-E", "createdAt": "2020-10-30T16:16:33Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\n+        \"/display_device_location_with_autopan_modes/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      locationDisplay.setInitialZoomScale(1000);\n+\n+      // toggle the location display visibility on check\n+      checkBox.setOnAction(event -> {\n+        if (checkBox.isSelected()) {\n+          // start the location display\n+          locationDisplay.startAsync();\n+\n+        } else {\n+          // turn off the location display", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODYzMA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515218630", "bodyText": "just to keep this naming in keeping with how the API documentation has it and the readme.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      case \"Recenter\":\n          \n          \n            \n                      case \"Re-center\":", "author": "Rachael-E", "createdAt": "2020-10-30T16:21:28Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\n+        \"/display_device_location_with_autopan_modes/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      locationDisplay.setInitialZoomScale(1000);\n+\n+      // toggle the location display visibility on check\n+      checkBox.setOnAction(event -> {\n+        if (checkBox.isSelected()) {\n+          // start the location display\n+          locationDisplay.startAsync();\n+\n+        } else {\n+          // turn off the location display\n+          locationDisplay.stop();\n+        }\n+        // toggle the combo box interactions\n+        comboBox.setDisable(!checkBox.isSelected());\n+      });\n+\n+      // set the autopan mode of the location display based on the mode chosen from the combo box\n+      comboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+\n+        // set the scale that the map view will zoom to when the autopan mode is changed\n+        locationDisplay.setInitialZoomScale(1000);\n+\n+        switch (comboBox.getSelectionModel().getSelectedItem()) {\n+          case \"Off\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.OFF);\n+            break;\n+          case \"Recenter\":", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMTM3MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515221371", "bodyText": "since this is what happens right after loading the sample, it makes sense to move this just after the locationDisplay initializer steps (and before the checkBox on action events).", "author": "Rachael-E", "createdAt": "2020-10-30T16:26:07Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\n+        \"/display_device_location_with_autopan_modes/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      locationDisplay.setInitialZoomScale(1000);\n+\n+      // toggle the location display visibility on check\n+      checkBox.setOnAction(event -> {\n+        if (checkBox.isSelected()) {\n+          // start the location display\n+          locationDisplay.startAsync();\n+\n+        } else {\n+          // turn off the location display\n+          locationDisplay.stop();\n+        }\n+        // toggle the combo box interactions\n+        comboBox.setDisable(!checkBox.isSelected());\n+      });\n+\n+      // set the autopan mode of the location display based on the mode chosen from the combo box\n+      comboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+\n+        // set the scale that the map view will zoom to when the autopan mode is changed\n+        locationDisplay.setInitialZoomScale(1000);\n+\n+        switch (comboBox.getSelectionModel().getSelectedItem()) {\n+          case \"Off\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.OFF);\n+            break;\n+          case \"Recenter\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+            break;\n+          case \"Navigation\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.NAVIGATION);\n+            break;\n+          case \"Compass\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.COMPASS_NAVIGATION);\n+            break;\n+        }\n+      });\n+\n+      // enable the checkbox and combo box interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          checkBox.setDisable(false);\n+          checkBox.setSelected(true);\n+          comboBox.setDisable(false);\n+\n+          // start the location display\n+          locationDisplay.startAsync();\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load: \" + map.getLoadError().getCause().getMessage()).show();\n+        }\n+      });", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMjY4MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r515222681", "bodyText": "something I noticed is that when clicking and dragging the map, the autopan mode stops but remains stuck on e.g. compass without being able to activate it again without clicking to another mode, and back to compass.\nWe could add in a mapview mouse listener whereby if a user clicks on the map, it will remove the autopan mode by selecting \"Off\" from the combobox with something like follows: open to other suggestions here too if you think there is a better solution!\n      mapView.setOnMousePressed(event -> {\n        if (event.getButton() == MouseButton.PRIMARY) {\n          comboBox.setValue(\"Off\");\n        }\n      });", "author": "Rachael-E", "createdAt": "2020-10-30T16:28:09Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.esri.samples.display_device_location_with_autopan_modes;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Paint;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class DisplayDeviceLocationWithAutopanModesSample extends Application {\n+\n+  private MapView mapView;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create the stack pane and the application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set a title, size, and add the scene to stage\n+      stage.setTitle(\"Display Device Location With Autopan Modes Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+      scene.getStylesheets().add(getClass().getResource(\"/display_device_location_with_autopan_modes/style.css\").toExternalForm());\n+\n+      // create an ArcGISMap with the imagery basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createImagery());\n+\n+      // create a view and add the ArcGISMap to it\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // create a combo box\n+      ComboBox<String> comboBox = new ComboBox<>();\n+      comboBox.setMaxWidth(Double.MAX_VALUE);\n+      comboBox.setDisable(true);\n+      // add the autopan modes to the combo box\n+      comboBox.getItems().addAll(\"Recenter\", \"Navigation\", \"Compass\", \"Off\");\n+      comboBox.setValue(\"Recenter\");\n+\n+      // add a label\n+      Label autopanModeLabel = new Label(\"Choose an autopan mode:\");\n+      // add a checkbox that toggles the visibility of the location display\n+      CheckBox checkBox = new CheckBox(\"Show device location\");\n+      checkBox.setDisable(true);\n+\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\n+        \"/display_device_location_with_autopan_modes/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline locations = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWgs84());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        locations, new SimulationParameters(Calendar.getInstance(), 5.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      locationDisplay.setInitialZoomScale(1000);\n+\n+      // toggle the location display visibility on check\n+      checkBox.setOnAction(event -> {\n+        if (checkBox.isSelected()) {\n+          // start the location display\n+          locationDisplay.startAsync();\n+\n+        } else {\n+          // turn off the location display\n+          locationDisplay.stop();\n+        }\n+        // toggle the combo box interactions\n+        comboBox.setDisable(!checkBox.isSelected());\n+      });\n+\n+      // set the autopan mode of the location display based on the mode chosen from the combo box\n+      comboBox.getSelectionModel().selectedItemProperty().addListener(e -> {\n+\n+        // set the scale that the map view will zoom to when the autopan mode is changed\n+        locationDisplay.setInitialZoomScale(1000);\n+\n+        switch (comboBox.getSelectionModel().getSelectedItem()) {\n+          case \"Off\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.OFF);\n+            break;\n+          case \"Recenter\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+            break;\n+          case \"Navigation\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.NAVIGATION);\n+            break;\n+          case \"Compass\":\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.COMPASS_NAVIGATION);\n+            break;\n+        }\n+      });\n+\n+      // enable the checkbox and combo box interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          checkBox.setDisable(false);\n+          checkBox.setSelected(true);\n+          comboBox.setDisable(false);\n+\n+          // start the location display\n+          locationDisplay.startAsync();\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load: \" + map.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+", "originalCommit": "caf9f064be95a97bac497e30e8fac14ce47b733a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "38ff854065c0a2f491f696e1cba98c99f207599c", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/38ff854065c0a2f491f696e1cba98c99f207599c", "message": "Update readme and readme metadata", "committedDate": "2020-11-03T10:47:43Z", "type": "commit"}, {"oid": "525840c048dca0ee0932679727b0280b3e15306f", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/525840c048dca0ee0932679727b0280b3e15306f", "message": "Add changes from PR", "committedDate": "2020-11-03T15:16:28Z", "type": "commit"}, {"oid": "8a2f60ee2604fa4405beeef269296067b0854388", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8a2f60ee2604fa4405beeef269296067b0854388", "message": "Move listener", "committedDate": "2020-11-03T15:17:03Z", "type": "commit"}, {"oid": "9ef8af10ce0a5a3a67c43ac00212de30f0798143", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/9ef8af10ce0a5a3a67c43ac00212de30f0798143", "message": "Update gif and screenshot", "committedDate": "2020-11-03T16:48:23Z", "type": "commit"}, {"oid": "33652e3581a7e798964936d0afd54dc39a0c8718", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/33652e3581a7e798964936d0afd54dc39a0c8718", "message": "Remove unused api", "committedDate": "2020-11-03T16:51:07Z", "type": "commit"}, {"oid": "6194b23eba890b2059b90fe0db645cb24880428f", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/6194b23eba890b2059b90fe0db645cb24880428f", "message": "Update combo box", "committedDate": "2020-11-03T16:51:21Z", "type": "commit"}, {"oid": "c8c9c7834e47bb5234ad8ffd4e5978edab1bba67", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c8c9c7834e47bb5234ad8ffd4e5978edab1bba67", "message": "Tidy comment", "committedDate": "2020-11-03T16:54:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MjE2Mw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/571#discussion_r518282163", "bodyText": "nearly! With mouse pressed, a user can press and then click away, and the drop down box won't be updated.\nThis is because when the user presses, the locationDisplay mode is still active. When they release (click), the locationDisplay is off but the comboBox still shows the results of the first press. The second press picks up the locationDisplay off, and then the release (click) updates the combobox).\nWe can simply change this to setOnMouseClicked so that when the user clicks, it updates the combobox correctly.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  mapView.setOnMousePressed(event -> {\n          \n          \n            \n                  mapView.setOnMouseClicked(event -> {", "author": "Rachael-E", "createdAt": "2020-11-05T18:46:58Z", "path": "map_view/display-device-location-with-autopan-modes/src/main/java/com/esri/samples/display_device_location_with_autopan_modes/DisplayDeviceLocationWithAutopanModesSample.java", "diffHunk": "@@ -143,17 +159,13 @@ public void start(Stage stage) {\n         }\n       });\n \n-      // enable the checkbox and combo box interactions when the map is loaded\n-      map.addDoneLoadingListener(() -> {\n-        if (map.getLoadStatus() == LoadStatus.LOADED) {\n-          checkBox.setDisable(false);\n-          checkBox.setSelected(true);\n-          comboBox.setDisable(false);\n-\n-          // start the location display\n-          locationDisplay.startAsync();\n-        } else {\n-          new Alert(Alert.AlertType.ERROR, \"Map failed to load: \" + map.getLoadError().getCause().getMessage()).show();\n+      mapView.setOnMousePressed(event -> {", "originalCommit": "c8c9c7834e47bb5234ad8ffd4e5978edab1bba67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fc0e0e03841869f0e333025faf6c5f75b8083e19", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/fc0e0e03841869f0e333025faf6c5f75b8083e19", "message": "Remove deprecated gradle features", "committedDate": "2020-11-10T18:33:43Z", "type": "commit"}, {"oid": "0570f41115e9efaa8231a7d71dfff529cb065ad7", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0570f41115e9efaa8231a7d71dfff529cb065ad7", "message": "Change mouse listener", "committedDate": "2020-11-10T18:35:20Z", "type": "commit"}, {"oid": "7ffa0964806ef4989d4b1c40f9a89d2e21c281eb", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/7ffa0964806ef4989d4b1c40f9a89d2e21c281eb", "message": "Add image and gif", "committedDate": "2020-11-12T12:21:55Z", "type": "commit"}, {"oid": "038a9c0c3305e5bfe22a473e8d5b59289ba02163", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/038a9c0c3305e5bfe22a473e8d5b59289ba02163", "message": "Update README.metadata.json", "committedDate": "2020-11-12T12:29:38Z", "type": "commit"}, {"oid": "74909d7e8eb7ba05f47827579813edbabb49bce2", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/74909d7e8eb7ba05f47827579813edbabb49bce2", "message": "Update README.metadata.json", "committedDate": "2020-11-12T12:42:13Z", "type": "commit"}, {"oid": "e930f7d8513d32a1980aaee83a4cbadb91da0869", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/e930f7d8513d32a1980aaee83a4cbadb91da0869", "message": "Tidy README.metadata.json", "committedDate": "2020-11-12T13:02:27Z", "type": "commit"}, {"oid": "5068caff1233c8a9ea77204fa84a70b351c2774e", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/5068caff1233c8a9ea77204fa84a70b351c2774e", "message": "Update README.metadata.json", "committedDate": "2020-11-12T13:06:06Z", "type": "commit"}]}