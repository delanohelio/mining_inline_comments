{"pr_number": 1432, "pr_title": "Make new krun replacement work with haskell backend", "pr_createdAt": "2020-07-16T15:54:07Z", "pr_url": "https://github.com/kframework/k/pull/1432", "timeline": [{"oid": "6989848f73d501e940513d90d04a9ca65bfc34c1", "url": "https://github.com/kframework/k/commit/6989848f73d501e940513d90d04a9ca65bfc34c1", "message": "add support for --statistics", "committedDate": "2020-07-16T15:52:37Z", "type": "commit"}, {"oid": "a62e0240244801a56ea20dcb68eca9690865eb82", "url": "https://github.com/kframework/k/commit/a62e0240244801a56ea20dcb68eca9690865eb82", "message": "add (internal) tool to compile k search pattern", "committedDate": "2020-07-16T15:52:37Z", "type": "commit"}, {"oid": "e4ebe8520421035e2f7e28bf0d2ecc3752115ee7", "url": "https://github.com/kframework/k/commit/e4ebe8520421035e2f7e28bf0d2ecc3752115ee7", "message": "haskell backend --search and --pattern", "committedDate": "2020-07-16T15:52:37Z", "type": "commit"}, {"oid": "200350598bfdfbdd425d50e19a56168a67c8f94b", "url": "https://github.com/kframework/k/commit/200350598bfdfbdd425d50e19a56168a67c8f94b", "message": "--pattern without --search", "committedDate": "2020-07-16T15:52:37Z", "type": "commit"}, {"oid": "c000f709b75c8798e741edd06f4c7ff72de13c28", "url": "https://github.com/kframework/k/commit/c000f709b75c8798e741edd06f4c7ff72de13c28", "message": "fix bugs", "committedDate": "2020-07-16T15:52:37Z", "type": "commit"}, {"oid": "304ff2c8ad75529092b453b1381cd6f7c977c877", "url": "https://github.com/kframework/k/commit/304ff2c8ad75529092b453b1381cd6f7c977c877", "message": "fix bug involving result.kore not existing", "committedDate": "2020-07-16T15:52:37Z", "type": "commit"}, {"oid": "52fc6ddf2ab5748757269a0306b676d73b632e5d", "url": "https://github.com/kframework/k/commit/52fc6ddf2ab5748757269a0306b676d73b632e5d", "message": "fix bug in format attribute involving kprint", "committedDate": "2020-07-16T15:52:37Z", "type": "commit"}, {"oid": "2f943cdbb571dc174bb6ad066a34f45655b3abf8", "url": "https://github.com/kframework/k/commit/2f943cdbb571dc174bb6ad066a34f45655b3abf8", "message": "make DotVar start with _", "committedDate": "2020-07-16T15:52:37Z", "type": "commit"}, {"oid": "387b66a528ffda9e8439b265befb07b3629146a5", "url": "https://github.com/kframework/k/commit/387b66a528ffda9e8439b265befb07b3629146a5", "message": "use kx on haskell backend also", "committedDate": "2020-07-16T15:53:22Z", "type": "commit"}, {"oid": "d2132aebba09283815db750d5dd68035d1d1929c", "url": "https://github.com/kframework/k/commit/d2132aebba09283815db750d5dd68035d1d1929c", "message": "fix test output", "committedDate": "2020-07-16T16:10:19Z", "type": "commit"}, {"oid": "33a26b3355fe9a3176bf5b12b634145cb5790080", "url": "https://github.com/kframework/k/commit/33a26b3355fe9a3176bf5b12b634145cb5790080", "message": "update test output", "committedDate": "2020-07-17T16:47:51Z", "type": "commit"}, {"oid": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc", "url": "https://github.com/kframework/k/commit/e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc", "message": "fix shebang", "committedDate": "2020-07-20T17:45:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NzYzOQ==", "url": "https://github.com/kframework/k/pull/1432#discussion_r457597639", "bodyText": "This doesn't result in too many % being added? It looks something like %3 could get turned into %%cSOME_TERMINAL, where maybe it should be %cSOME_TERMINAL.\nAlso, why use replace for the last two instead of replaceAll? Just want you to double-check that this is correct.", "author": "ehildenb", "createdAt": "2020-07-20T18:08:14Z", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -1374,7 +1374,7 @@ private Att addKoreAttributes(Production prod, SetMultimap<KLabel, Rule> functio\n           if (prod.items().apply(i) instanceof NonTerminal) {\n             format = format.replaceAll(\"%\" + (i+1) + \"(?![0-9])\", \"%\" + (nt++));\n           } else if (prod.items().apply(i) instanceof Terminal) {\n-            format = format.replaceAll(\"%\" + (i+1) + \"(?![0-9])\", \"%c\" + ((Terminal)prod.items().apply(i)).value().replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\") + \"%r\");\n+            format = format.replaceAll(\"%\" + (i+1) + \"(?![0-9])\", \"%c\" + ((Terminal)prod.items().apply(i)).value().replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\").replace(\"%\", \"%%\") + \"%r\");", "originalCommit": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwMzE4Ng==", "url": "https://github.com/kframework/k/pull/1432#discussion_r457603186", "bodyText": "%c and %r are not part of the string passed to replace. We use replace because replace replaces a string everywhere with another string, whereas replaceAll replaces a regular expression with a string containing backreferences. We need the regular expressions in one case, but not the other, thus, we use replaceAll only in that one place.", "author": "dwightguth", "createdAt": "2020-07-20T18:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NzYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODI4MA==", "url": "https://github.com/kframework/k/pull/1432#discussion_r457608280", "bodyText": "Ah sorry, I misread.", "author": "ehildenb", "createdAt": "2020-07-20T18:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NzYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5ODA0Nw==", "url": "https://github.com/kframework/k/pull/1432#discussion_r457598047", "bodyText": "This looks like a very short kompile pipeline? Could it be framed as such? Mostly curious.", "author": "ehildenb", "createdAt": "2020-07-20T18:08:58Z", "path": "kernel/src/main/java/org/kframework/ksearchpattern/KSearchPatternFrontEnd.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2020 K Team. All Rights Reserved.\n+package org.kframework.ksearchpattern;\n+\n+import com.google.inject.Provider;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Module;\n+import org.kframework.attributes.Source;\n+import org.kframework.backend.kore.ModuleToKORE;\n+import org.kframework.builtin.BooleanUtils;\n+import org.kframework.compile.AddSortInjections;\n+import org.kframework.compile.ExpandMacros;\n+import org.kframework.compile.RewriteToTop;\n+import org.kframework.definition.Rule;\n+import org.kframework.kompile.CompiledDefinition;\n+import org.kframework.kompile.KompileOptions;\n+import org.kframework.kore.K;\n+import org.kframework.main.FrontEnd;\n+import org.kframework.main.GlobalOptions;\n+import org.kframework.utils.errorsystem.KExceptionManager;\n+import org.kframework.utils.file.FileUtil;\n+import org.kframework.utils.file.JarInfo;\n+import org.kframework.utils.file.KompiledDir;\n+import org.kframework.utils.inject.CommonModule;\n+import org.kframework.utils.inject.DefinitionScope;\n+import org.kframework.utils.inject.JCommanderModule;\n+import org.kframework.utils.inject.JCommanderModule.ExperimentalUsage;\n+import org.kframework.utils.inject.JCommanderModule.Usage;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Frontend for k-compiled-search-pattern tool.\n+ * <p>\n+ * k-compile-search-patterrn is used by the new krun frontend in order to\n+ * convert a search pattern written as a rule bubble into a KORE search pattern\n+ * for the Haskell backend.\n+ */\n+public class KSearchPatternFrontEnd extends FrontEnd {\n+\n+    private final KSearchPatternOptions options;\n+    private final Provider<KompileOptions> kompileOptions;\n+    private final KExceptionManager kem;\n+    private final Provider<FileUtil> files;\n+    private final GlobalOptions globalOptions;\n+    private final DefinitionScope scope;\n+    private final Provider<File> kompiledDir;\n+    private final Provider<CompiledDefinition> compiledDef;\n+\n+    @Inject\n+    public KSearchPatternFrontEnd(\n+            KSearchPatternOptions options,\n+            KExceptionManager kem,\n+            Provider<KompileOptions> kompileOptions,\n+            GlobalOptions globalOptions,\n+            @Usage String usage,\n+            @ExperimentalUsage String experimentalUsage,\n+            JarInfo jarInfo,\n+            Provider<FileUtil> files,\n+            @KompiledDir Provider<File> kompiledDir,\n+            Provider<CompiledDefinition> compiledDef,\n+            DefinitionScope scope) {\n+        super(kem, globalOptions, usage, experimentalUsage, jarInfo, files);\n+        this.options = options;\n+        this.kompileOptions = kompileOptions;\n+        this.globalOptions = globalOptions;\n+        this.kem = kem;\n+        this.files = files;\n+        this.scope = scope;\n+        this.kompiledDir = kompiledDir;\n+        this.compiledDef = compiledDef;\n+    }\n+\n+    public static List<Module> getModules() {\n+        List<Module> modules = new ArrayList<>();\n+        modules.add(new KSearchPatternModule());\n+        modules.add(new JCommanderModule());\n+        modules.add(new CommonModule());\n+        return modules;\n+    }\n+\n+    @Override\n+    protected int run() {\n+        scope.enter(kompiledDir.get());\n+        try {\n+          FileUtil files = this.files.get();\n+          CompiledDefinition compiledDef = this.compiledDef.get();\n+          KompileOptions kompileOptions = this.kompileOptions.get();\n+          Rule pattern = compiledDef.compilePatternIfAbsent(files, kem, options.pattern(), Source.apply(\"<command line>\"));\n+          K patternTerm = RewriteToTop.toLeft(pattern.body());\n+          K patternCondition = pattern.requires();\n+          org.kframework.definition.Module mod = compiledDef.executionModule();\n+          ModuleToKORE converter = new ModuleToKORE(mod, files, compiledDef.topCellInitializer, kompileOptions);\n+          StringBuilder sb = new StringBuilder();\n+          ExpandMacros macroExpander = ExpandMacros.forNonSentences(mod, files, kompileOptions, false);\n+          K withMacros = macroExpander.expand(patternTerm);\n+          K kWithInjections = new AddSortInjections(mod).addInjections(withMacros);", "originalCommit": "e86d69b99dacfb7e1cdf7a288a19d7c65365cdcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNDAwNA==", "url": "https://github.com/kframework/k/pull/1432#discussion_r457604004", "bodyText": "What do you mean by \"framed as\"? Like, what change are you suggesting? It is correct that we are essentially taking a single pattern with a single optional side condition and parsing and kompiling it to kore.", "author": "dwightguth", "createdAt": "2020-07-20T18:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5ODA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNzA5Mw==", "url": "https://github.com/kframework/k/pull/1432#discussion_r457607093", "bodyText": "Not suggesting a change, just want to understand (should have made that clear). The main reason I'm thinking is because we've discussed changes to the kompile pipeline (ie framing it more declaratively using dependencies/checks interface), and if that happens the question is should this also happen here, or not?\nNothing actionable, just want to make sure it's been noted.", "author": "ehildenb", "createdAt": "2020-07-20T18:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5ODA0Nw=="}], "type": "inlineReview"}, {"oid": "9ab58130d0d29fa63f9e08dfda7ff60f63cabb20", "url": "https://github.com/kframework/k/commit/9ab58130d0d29fa63f9e08dfda7ff60f63cabb20", "message": "rename $cmd", "committedDate": "2020-07-20T18:20:01Z", "type": "commit"}, {"oid": "1ff87b08fa3393f7490a8a69f569a19a38a0b69a", "url": "https://github.com/kframework/k/commit/1ff87b08fa3393f7490a8a69f569a19a38a0b69a", "message": "Merge branch 'master' into kx2", "committedDate": "2020-07-20T19:51:02Z", "type": "commit"}]}