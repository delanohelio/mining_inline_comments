{"pr_number": 1225, "pr_title": "Simplify handling #Ceil(_Map_)", "pr_createdAt": "2020-04-22T00:42:22Z", "pr_url": "https://github.com/kframework/k/pull/1225", "timeline": [{"oid": "a876102b2e9372ef95e93b793ed71f2adfeef2a7", "url": "https://github.com/kframework/k/commit/a876102b2e9372ef95e93b793ed71f2adfeef2a7", "message": "ModuleToKORE: Remove generated MAP.in_keys axioms\n\nEvaluating this function must be handled internally by the backend due to a bad\ninteraction with the generated \\ceil rules.", "committedDate": "2020-04-21T14:47:58Z", "type": "commit"}, {"oid": "557e1dd6ee6743bae9ce44a0ca4fc246628f1836", "url": "https://github.com/kframework/k/commit/557e1dd6ee6743bae9ce44a0ca4fc246628f1836", "message": "ModuleToKORE: Simplify generated #Ceil axiom for MAP.concat", "committedDate": "2020-04-21T15:21:24Z", "type": "commit"}, {"oid": "f8ca65f5c6ff32c1a55c72c4555108e32fc4d0c5", "url": "https://github.com/kframework/k/commit/f8ca65f5c6ff32c1a55c72c4555108e32fc4d0c5", "message": "ModuleToKORE: Use KLabels.ML_EQUALS", "committedDate": "2020-04-21T15:21:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4OTk0MQ==", "url": "https://github.com/kframework/k/pull/1225#discussion_r412689941", "bodyText": "I agree with you that the in_keys condition would require the variables to be defined anyway.\nWhy then keep the definedness conditions?", "author": "traiansf", "createdAt": "2020-04-22T05:54:24Z", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -598,69 +598,33 @@ private void genMapCeilAxioms(Production prod, Collection<Rule> rules) {\n         Seq<NonTerminal> nonterminals = elementProd.nonterminals();\n         Sort sortParam = Sort(AddSortInjections.SORTPARAM_NAME, Sort(\"Q\"));\n \n-        List<K> args = new ArrayList<>();\n-        for (int i = 0; i< nonterminals.length(); i++) {\n-            Sort sort = nonterminals.apply(i).sort();\n-            args.add(KVariable(\"K\" + i, Att.empty().add(Sort.class, sort)));\n-        } // variable arguments for MapItem (K1 is the key)\n-        Seq<K> argsSeq = JavaConverters.iterableAsScalaIterable(args).toSeq();\n-        K restMap = KVariable(\"Rest\", Att.empty().add(Sort.class, mapSort));\n-\n-        // rule K1:KItem in_keys(MapItem(K1, K2, .., Kn) Rest:Map) => true\n-        Rule inKeysRule1 = Rule(\n-                KRewrite(\n-                        KApply(prod.klabel().get(),\n-                                args.get(0),\n-                                KApply(concatProd.klabel().get(),\n-                                        KApply(elementProd.klabel().get(),\n-                                                argsSeq,\n-                                                Att.empty()\n-                                        ),\n-                                        restMap\n-                                )\n-                        ),\n-                        BooleanUtils.TRUE\n-                ),\n-                BooleanUtils.TRUE,\n-                BooleanUtils.TRUE\n-        );\n-        rules.add(inKeysRule1);\n-\n-        // rule K1:KItem in_keys(Rest:Map) => false [owise]\n-        Rule inKeysRule2 = Rule(\n-                KRewrite(\n-                        KApply(prod.klabel().get(),\n-                                args.get(0),\n-                                restMap\n-                        ),\n-                        BooleanUtils.FALSE\n-                ),\n-                BooleanUtils.TRUE,\n-                BooleanUtils.TRUE,\n-                Att.empty().add(\"owise\")\n-        );\n-        rules.add(inKeysRule2);\n+        // rule\n+        //   #Ceil(MapItem(K1, K2, ..., Kn) Rest:Map)\n+        // =>\n+        //  {(@K1 in_keys(@Rest)) #Equals false} #And ... #And #Ceil(@Kn)\n+        // Note: The {_ in_Keys(_) #Equals false} condition implies\n+        // #Ceil(@K1) and #Ceil(@Rest).", "originalCommit": "f8ca65f5c6ff32c1a55c72c4555108e32fc4d0c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzMTEwNQ==", "url": "https://github.com/kframework/k/pull/1225#discussion_r413031105", "bodyText": "Only the definedness conditions #Ceil(@K2) #And ... #And #Ceil(@Kn) are present; I will update the comment to clarify.", "author": "ttuegel", "createdAt": "2020-04-22T14:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4OTk0MQ=="}], "type": "inlineReview"}, {"oid": "32469ca1d26325f731023dca81ef0173b4a24f59", "url": "https://github.com/kframework/k/commit/32469ca1d26325f731023dca81ef0173b4a24f59", "message": "ModuleToKORE: Clarify comment on definedness of MapItem arguments", "committedDate": "2020-04-22T14:28:01Z", "type": "commit"}, {"oid": "bb958a38a3a158027966d32363a3a7cd0e14da68", "url": "https://github.com/kframework/k/commit/bb958a38a3a158027966d32363a3a7cd0e14da68", "message": "Merge branch 'master' into bug--Map-in_keys", "committedDate": "2020-05-15T14:41:45Z", "type": "commit"}]}