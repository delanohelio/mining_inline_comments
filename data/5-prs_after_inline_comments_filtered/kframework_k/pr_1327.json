{"pr_number": 1327, "pr_title": "generalize strictness to multiple aliases", "pr_createdAt": "2020-06-09T18:56:14Z", "pr_url": "https://github.com/kframework/k/pull/1327", "timeline": [{"oid": "5748ef6675351403072804245270a303b6b02fcd", "url": "https://github.com/kframework/k/commit/5748ef6675351403072804245270a303b6b02fcd", "message": "add tests", "committedDate": "2020-06-09T18:50:27Z", "type": "commit"}, {"oid": "e62f23d5e7fc0c5c8eacdd31fccd7c711c1cb3da", "url": "https://github.com/kframework/k/commit/e62f23d5e7fc0c5c8eacdd31fccd7c711c1cb3da", "message": "fix cache bug with att", "committedDate": "2020-06-09T18:50:44Z", "type": "commit"}, {"oid": "051b1b2878ad81218f57ff9dee3960f8af829a51", "url": "https://github.com/kframework/k/commit/051b1b2878ad81218f57ff9dee3960f8af829a51", "message": "generalize strict to multiple aliases", "committedDate": "2020-06-09T18:50:53Z", "type": "commit"}, {"oid": "2edf2390ae2cea8ea78dc81d9240adc9f5dc8238", "url": "https://github.com/kframework/k/commit/2edf2390ae2cea8ea78dc81d9240adc9f5dc8238", "message": "documentation", "committedDate": "2020-06-09T18:53:50Z", "type": "commit"}, {"oid": "fcb368a2ee53881ef50df67999ea4c403a2044b4", "url": "https://github.com/kframework/k/commit/fcb368a2ee53881ef50df67999ea4c403a2044b4", "message": "fix bug", "committedDate": "2020-06-09T19:07:55Z", "type": "commit"}, {"oid": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f", "url": "https://github.com/kframework/k/commit/bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f", "message": "another bug fix", "committedDate": "2020-06-09T19:11:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDAwNQ==", "url": "https://github.com/kframework/k/pull/1327#discussion_r437784005", "bodyText": "Do we have a wrapper for 1-dimensional attribute arrays? I know it would just be attribute.split(\";\") still, but maybe it would be good to call that function if it exists for semantic readability.", "author": "ehildenb", "createdAt": "2020-06-09T23:50:54Z", "path": "kernel/src/main/java/org/kframework/compile/ResolveStrict.java", "diffHunk": "@@ -193,6 +159,55 @@ public K apply(KVariable var) {\n                 sentences.add(ctx);\n             }\n         }\n+    }\n+\n+    public Set<Sentence> resolve(Production production, boolean sequential) {\n+        long arity = production.nonterminals().size();\n+        List<Integer> strictnessPositions = new ArrayList<>();\n+        List<Integer> allPositions = new ArrayList<>();\n+        Set<ContextAlias> aliases = new HashSet<>();\n+        String attribute;\n+        Set<Sentence> sentences = new HashSet<>();\n+        if (sequential) {\n+            attribute = production.att().get(Att.SEQSTRICT());\n+        } else {\n+            attribute = production.att().get(Att.STRICT());\n+        }\n+        if (attribute.isEmpty()) {\n+            for (int i = 1; i <= arity; i++) {\n+                strictnessPositions.add(i);\n+            }\n+            aliases.add(DEFAULT_ALIAS);\n+            resolve(sequential, sentences, arity, strictnessPositions, allPositions, aliases, production);\n+            allPositions.addAll(strictnessPositions);\n+        } else {\n+            String[] components = attribute.split(\";\");", "originalCommit": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5OTE3MA==", "url": "https://github.com/kframework/k/pull/1327#discussion_r438299170", "bodyText": "We cannot call that function because this is actually a 2d attribute array. Calliing the 2d function could theoretically work, but it would require substantially refactoring this method, so I'd rather just leave the code like this.", "author": "dwightguth", "createdAt": "2020-06-10T17:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDc0OQ==", "url": "https://github.com/kframework/k/pull/1327#discussion_r437784749", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else\n          \n          \n            \n                            kem.addAllKException(parse.getWarnings().stream().map(e -> e.getKException()).collect(Collectors.toList()));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            kem.addAllKException(parse.getWarnings().stream().map(e -> e.getKException()).collect(Collectors.toList()));\n          \n          \n            \n                        }", "author": "ehildenb", "createdAt": "2020-06-09T23:53:25Z", "path": "kernel/src/main/java/org/kframework/kompile/DefinitionParsing.java", "diffHunk": "@@ -487,21 +489,17 @@ private boolean equalsSyntax(Module _this, Module that) {\n         Tuple2<Either<java.util.Set<KEMException>, K>, java.util.Set<KEMException>> result;\n         if (cache.containsKey(b.contents())) {\n             ParsedSentence parse = cache.get(b.contents());\n-            Optional<Source> cacheSource = parse.getParse().source();\n-            //Cache might contain content from an identical file but another source path.\n-            //The content will have wrong Source attribute and must be invalidated.\n-            if (cacheSource.isPresent() && cacheSource.get().equals(source)) {\n-                cachedBubbles.getAndIncrement();\n-                if (kem.options.warnings2errors) {\n-                    for (KEMException err : parse.getWarnings().stream().map(e -> (KEMException) e).collect(Collectors.toList())) {\n-                        if (kem.options.warnings.includesExceptionType(err.exception.getType())) {\n-                            errors.add(KEMException.asError(err));\n-                        }\n+            cachedBubbles.getAndIncrement();\n+            if (kem.options.warnings2errors) {\n+                for (KEMException err : parse.getWarnings().stream().map(e -> (KEMException) e).collect(Collectors.toList())) {\n+                    if (kem.options.warnings.includesExceptionType(err.exception.getType())) {\n+                        errors.add(KEMException.asError(err));\n                     }\n-                } else\n-                    kem.addAllKException(parse.getWarnings().stream().map(e -> e.getKException()).collect(Collectors.toList()));\n-                return Stream.of(parse.getParse());\n-            }\n+                }\n+            } else\n+                kem.addAllKException(parse.getWarnings().stream().map(e -> e.getKException()).collect(Collectors.toList()));", "originalCommit": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1NjYyMA==", "url": "https://github.com/kframework/k/pull/1327#discussion_r438056620", "bodyText": "This error message doesn't really reflect the code, let alone the user input.\nSee my other comment.", "author": "radumereuta", "createdAt": "2020-06-10T11:37:59Z", "path": "kernel/src/main/java/org/kframework/compile/ResolveStrict.java", "diffHunk": "@@ -193,6 +159,55 @@ public K apply(KVariable var) {\n                 sentences.add(ctx);\n             }\n         }\n+    }\n+\n+    public Set<Sentence> resolve(Production production, boolean sequential) {\n+        long arity = production.nonterminals().size();\n+        List<Integer> strictnessPositions = new ArrayList<>();\n+        List<Integer> allPositions = new ArrayList<>();\n+        Set<ContextAlias> aliases = new HashSet<>();\n+        String attribute;\n+        Set<Sentence> sentences = new HashSet<>();\n+        if (sequential) {\n+            attribute = production.att().get(Att.SEQSTRICT());\n+        } else {\n+            attribute = production.att().get(Att.STRICT());\n+        }\n+        if (attribute.isEmpty()) {\n+            for (int i = 1; i <= arity; i++) {\n+                strictnessPositions.add(i);\n+            }\n+            aliases.add(DEFAULT_ALIAS);\n+            resolve(sequential, sentences, arity, strictnessPositions, allPositions, aliases, production);\n+            allPositions.addAll(strictnessPositions);\n+        } else {\n+            String[] components = attribute.split(\";\");\n+            if (components.length == 1) {\n+                if (Character.isDigit(components[0].trim().charAt(0))) {\n+                    aliases.add(DEFAULT_ALIAS);\n+                    setPositions(components[0].trim(), strictnessPositions, arity, production);\n+                } else {\n+                    for (int i = 1; i <= arity; i++) {\n+                        strictnessPositions.add(i);\n+                    }\n+                    setAliases(components[0].trim(), aliases, production);\n+                }\n+                resolve(sequential, sentences, arity, strictnessPositions, allPositions, aliases, production);\n+                allPositions.addAll(strictnessPositions);\n+            } else if (components.length % 2 == 0) {\n+                for (int i = 0; i < components.length; i+=2) {\n+                    setAliases(components[i].trim(), aliases, production);\n+                    setPositions(components[i+1].trim(), strictnessPositions, arity, production);\n+                    resolve(sequential, sentences, arity, strictnessPositions, allPositions, aliases, production);\n+                    aliases.clear();\n+                    allPositions.addAll(strictnessPositions);\n+                    strictnessPositions.clear();\n+                }\n+            } else {\n+                throw KEMException.compilerError(\"Invalid strict attribute containing multiple semicolons.\", production);", "originalCommit": "bd3c7ca39dcca44e0cc4b35ab8998b1c2ee61b4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ec076cd077b3b7cc7629a8907b41c1e1574a9ccc", "url": "https://github.com/kframework/k/commit/ec076cd077b3b7cc7629a8907b41c1e1574a9ccc", "message": "Update kernel/src/main/java/org/kframework/kompile/DefinitionParsing.java\n\nCo-authored-by: Everett Hildenbrandt <everett.hildenbrandt@gmail.com>", "committedDate": "2020-06-10T17:41:23Z", "type": "commit"}, {"oid": "f4c557103201c9374f3778a405379ae4899b733d", "url": "https://github.com/kframework/k/commit/f4c557103201c9374f3778a405379ae4899b733d", "message": "update error msg", "committedDate": "2020-06-10T17:54:44Z", "type": "commit"}, {"oid": "70e44497487f7f30ebb0d03bf0dd738ec9606e46", "url": "https://github.com/kframework/k/commit/70e44497487f7f30ebb0d03bf0dd738ec9606e46", "message": "update test", "committedDate": "2020-06-10T17:54:44Z", "type": "commit"}, {"oid": "b0e48c7d3d3360b43783466f1d9e151a284bc392", "url": "https://github.com/kframework/k/commit/b0e48c7d3d3360b43783466f1d9e151a284bc392", "message": "Merge branch 'master' into alias", "committedDate": "2020-06-11T14:12:57Z", "type": "commit"}, {"oid": "0200cfcade4774b9ecb9539329e40ea1d1be623b", "url": "https://github.com/kframework/k/commit/0200cfcade4774b9ecb9539329e40ea1d1be623b", "message": "add tests", "committedDate": "2020-06-11T14:20:41Z", "type": "commit"}, {"oid": "1410a2d82507accf8070aef10e792fb3f47210a2", "url": "https://github.com/kframework/k/commit/1410a2d82507accf8070aef10e792fb3f47210a2", "message": "make test not flaky", "committedDate": "2020-06-11T16:45:15Z", "type": "commit"}, {"oid": "e68cccb3574da0da21faec3b8703743108cff077", "url": "https://github.com/kframework/k/commit/e68cccb3574da0da21faec3b8703743108cff077", "message": "update test output", "committedDate": "2020-06-11T16:45:23Z", "type": "commit"}, {"oid": "afb7166c2ff76c7ae1a505b2ba847fcc21931547", "url": "https://github.com/kframework/k/commit/afb7166c2ff76c7ae1a505b2ba847fcc21931547", "message": "update 3_lambda++", "committedDate": "2020-06-11T17:49:45Z", "type": "commit"}, {"oid": "b0a4579aacb6dfaf93da632201df0ffef3684d67", "url": "https://github.com/kframework/k/commit/b0a4579aacb6dfaf93da632201df0ffef3684d67", "message": "uypdate 4_imp++", "committedDate": "2020-06-11T17:49:45Z", "type": "commit"}, {"oid": "ade5c0f437b65ed5360e184188edf4de9fd26769", "url": "https://github.com/kframework/k/commit/ade5c0f437b65ed5360e184188edf4de9fd26769", "message": "update 3_fun", "committedDate": "2020-06-11T17:51:05Z", "type": "commit"}, {"oid": "9f5dde48050e5e3d4baa20f29a630b11b9537c1f", "url": "https://github.com/kframework/k/commit/9f5dde48050e5e3d4baa20f29a630b11b9537c1f", "message": "1_lambda exercises updated outputs", "committedDate": "2020-06-11T21:04:10Z", "type": "commit"}, {"oid": "4aa56b75c74951d4b01a43846da3f9509f4df4bc", "url": "https://github.com/kframework/k/commit/4aa56b75c74951d4b01a43846da3f9509f4df4bc", "message": "2_imp exercises updated outputs", "committedDate": "2020-06-11T21:04:22Z", "type": "commit"}, {"oid": "86151810d63279167a38bbb834e8f261dda7fb32", "url": "https://github.com/kframework/k/commit/86151810d63279167a38bbb834e8f261dda7fb32", "message": "3_lambda++ exercises updated outputs", "committedDate": "2020-06-11T21:04:31Z", "type": "commit"}, {"oid": "c2569efda9f83890e1d36d3039ac78ad8e57f2e8", "url": "https://github.com/kframework/k/commit/c2569efda9f83890e1d36d3039ac78ad8e57f2e8", "message": "4_imp++ exercises updated outputs", "committedDate": "2020-06-11T21:04:40Z", "type": "commit"}, {"oid": "9d20e60b68340d162ed64cbf3bdf6aa0a51fb56d", "url": "https://github.com/kframework/k/commit/9d20e60b68340d162ed64cbf3bdf6aa0a51fb56d", "message": "3_fun exercises updated outputs", "committedDate": "2020-06-11T21:04:56Z", "type": "commit"}, {"oid": "409491049ac158e8683bc6bf7c8d4565462fcae6", "url": "https://github.com/kframework/k/commit/409491049ac158e8683bc6bf7c8d4565462fcae6", "message": "Merge branch 'master' into alias", "committedDate": "2020-06-12T21:51:03Z", "type": "commit"}]}