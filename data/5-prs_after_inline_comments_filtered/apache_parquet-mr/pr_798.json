{"pr_number": 798, "pr_title": "PARQUET-1879 MapKeyValue is not a valid Logical Type", "pr_createdAt": "2020-06-23T12:15:12Z", "pr_url": "https://github.com/apache/parquet-mr/pull/798", "timeline": [{"oid": "e3d075ab55cde82e0637fce171b19bc076520339", "url": "https://github.com/apache/parquet-mr/commit/e3d075ab55cde82e0637fce171b19bc076520339", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type", "committedDate": "2020-06-23T12:21:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0MTk2Mw==", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r444841963", "bodyText": "I would suggest using ConverstionPatterns.MAP_REPEATED_NAME here as well.", "author": "gszadovszky", "createdAt": "2020-06-24T11:58:51Z", "path": "parquet-column/src/main/java/org/apache/parquet/schema/Types.java", "diffHunk": "@@ -1179,18 +1181,18 @@ protected Type build(String name) {\n         keyType = STRING_KEY;\n       }\n \n-      GroupBuilder<GroupType> builder = buildGroup(repetition).as(OriginalType.MAP);\n+      GroupBuilder<GroupType> builder = buildGroup(repetition).as(mapType());\n       if (id != null) {\n         builder.id(id.intValue());\n       }\n \n       if (valueType != null) {\n         return builder\n-            .repeatedGroup().addFields(keyType, valueType).named(\"map\")\n+            .repeatedGroup().addFields(keyType, valueType).named(\"key_value\")", "originalCommit": "e3d075ab55cde82e0637fce171b19bc076520339", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5Mzc1OQ==", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r445293759", "bodyText": "\ud83d\udc4d updated", "author": "maccamlc", "createdAt": "2020-06-25T04:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0MTk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjE2OQ==", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r444852169", "bodyText": "Please, do not organize imports. It makes merge conflicts hard to resolve.", "author": "gszadovszky", "createdAt": "2020-06-24T12:19:02Z", "path": "parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java", "diffHunk": "@@ -18,57 +18,9 @@\n  */\n package org.apache.parquet.format.converter;\n \n-import static java.util.Collections.emptyList;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.filterFileMetaDataByStart;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.MICROS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.MILLIS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.TimeUnit.NANOS;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.bsonType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.dateType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.decimalType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.enumType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.intType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.jsonType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.listType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.mapType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.stringType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.timeType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.timestampType;\n-import static org.apache.parquet.schema.LogicalTypeAnnotation.uuidType;\n-import static org.apache.parquet.schema.MessageTypeParser.parseMessageType;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.apache.parquet.format.CompressionCodec.UNCOMPRESSED;\n-import static org.apache.parquet.format.Type.INT32;\n-import static org.apache.parquet.format.Util.readPageHeader;\n-import static org.apache.parquet.format.Util.writePageHeader;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.filterFileMetaDataByMidpoint;\n-import static org.apache.parquet.format.converter.ParquetMetadataConverter.getOffset;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n-import java.security.SecureRandom;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n+import com.google.common.collect.Lists;", "originalCommit": "e3d075ab55cde82e0637fce171b19bc076520339", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NDc4NA==", "url": "https://github.com/apache/parquet-mr/pull/798#discussion_r445294784", "bodyText": "Didn't notice. Sorry, should be reverted now", "author": "maccamlc", "createdAt": "2020-06-25T04:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjE2OQ=="}], "type": "inlineReview"}, {"oid": "cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a", "url": "https://github.com/apache/parquet-mr/commit/cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type", "committedDate": "2020-06-25T03:59:26Z", "type": "commit"}, {"oid": "cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a", "url": "https://github.com/apache/parquet-mr/commit/cc9cc5f1fc45fa53d2c14f3c2e048ac898c52a4a", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type", "committedDate": "2020-06-25T03:59:26Z", "type": "forcePushed"}, {"oid": "da1d65747d8145e08e0509b0e8bf2abfac9e8b66", "url": "https://github.com/apache/parquet-mr/commit/da1d65747d8145e08e0509b0e8bf2abfac9e8b66", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type", "committedDate": "2020-06-25T11:16:00Z", "type": "forcePushed"}, {"oid": "bbd7d653b8f29129cf61f84f728a904113ecf4db", "url": "https://github.com/apache/parquet-mr/commit/bbd7d653b8f29129cf61f84f728a904113ecf4db", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type", "committedDate": "2020-06-25T11:25:01Z", "type": "forcePushed"}, {"oid": "7eddaec3966b3d92b94d992f86ed82fa68a45d0c", "url": "https://github.com/apache/parquet-mr/commit/7eddaec3966b3d92b94d992f86ed82fa68a45d0c", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type", "committedDate": "2020-06-25T11:29:43Z", "type": "commit"}, {"oid": "7eddaec3966b3d92b94d992f86ed82fa68a45d0c", "url": "https://github.com/apache/parquet-mr/commit/7eddaec3966b3d92b94d992f86ed82fa68a45d0c", "message": "PARQUET-1879 MapKeyValue is not a valid Logical Type\n\n* Writing UNKNOWN logical type into the schema, causes a breakage\n  when parsing the file with Apache Arrow\n* Instead use the default, of falling back to null when that\n  backwards-compatibility only logical type is present, but still\n  write the original type", "committedDate": "2020-06-25T11:29:43Z", "type": "forcePushed"}]}