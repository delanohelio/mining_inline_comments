{"pr_number": 1487, "pr_title": "Only requiring that the input VCF be indexed if an INTERVAL is provided", "pr_createdAt": "2020-03-16T22:09:40Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1487", "timeline": [{"oid": "214e79ffbec5da74efaaf1317a9378f394fb38d5", "url": "https://github.com/broadinstitute/picard/commit/214e79ffbec5da74efaaf1317a9378f394fb38d5", "message": "- only requiring that the input VCF be indexed if an INTERVAL is also provided (since only then the vcf qill be queried)\n- fixed the testing so it's a bit quicker\n- fixed the javaDoc to describe when index is needed", "committedDate": "2020-03-16T22:07:33Z", "type": "commit"}, {"oid": "48462507746637f721f1ab6e2291b236ca9a44c9", "url": "https://github.com/broadinstitute/picard/commit/48462507746637f721f1ab6e2291b236ca9a44c9", "message": "Merge branch 'master' into yf_make_CollectSamErrorMetrics_work_with_unindexed_vcf", "committedDate": "2020-03-16T22:10:46Z", "type": "commit"}, {"oid": "da796190d15e7494aac31607e5df9dddf9825040", "url": "https://github.com/broadinstitute/picard/commit/da796190d15e7494aac31607e5df9dddf9825040", "message": "- forgot to update one test", "committedDate": "2020-03-19T15:33:27Z", "type": "commit"}, {"oid": "dbfb94c8c14765ad49b8194740054663b4aebe55", "url": "https://github.com/broadinstitute/picard/commit/dbfb94c8c14765ad49b8194740054663b4aebe55", "message": "- @BeforeTest more appropriate than @BeforeClass?", "committedDate": "2020-03-19T19:46:30Z", "type": "commit"}, {"oid": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39", "url": "https://github.com/broadinstitute/picard/commit/be91bf4c6d67b570de1ea0d9ba13d2c1720eca39", "message": "Merge branch 'master' into yf_make_CollectSamErrorMetrics_work_with_unindexed_vcf", "committedDate": "2020-03-25T19:23:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMDU2Mg==", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403010562", "bodyText": "Odd indent, or maybe github is showing the diff wrong?", "author": "pshapiro4broad", "createdAt": "2020-04-03T13:37:30Z", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -294,14 +323,9 @@ public void testOneCovariateErrorMetrics(final String errorSubscript, final File\n         Assert.assertEquals(metric, expectedMetric);\n     }\n \n-    @DataProvider(name = \"OneCovariateIndelErrorMetricsDataProvider\")\n+    @DataProvider()\n     public Object[][] oneCovariateIndelErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+                final int priorQ = 30;", "originalCommit": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMTQxNg==", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403011416", "bodyText": "It's hard to see in the diff but it looks like this file is no longer deleted on exit, is that correct?", "author": "pshapiro4broad", "createdAt": "2020-04-03T13:38:50Z", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -422,28 +446,10 @@ public void testOneCovariateErrorMetrics(final String errorSubscript, final File\n         };\n     }\n \n-    @Test(dataProvider = \"OneCovariateIndelErrorMetricsDataProvider\")\n+    @Test(dataProvider = \"oneCovariateIndelErrorMetricsDataProvider\")\n     public void testOneCovariateIndelErrorMetrics(final String errorSubscript, final File samFile, final int priorQ, BaseErrorMetric expectedMetric) {\n-        final File referenceFile = CHR_M_REFERENCE;\n-        final File vcf = new File(TEST_DIR, \"NIST.selected.vcf\");\n \n-        final File outputBaseFileName = new File(OUTPUT_DATA_PATH, \"test\");\n-        final File errorByAll = new File(outputBaseFileName.getAbsolutePath() + errorSubscript);\n-        errorByAll.deleteOnExit();", "originalCommit": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMzg3Mw==", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403013873", "bodyText": "This is run before every test, so this will create a new temp dir for each test, and store it in a static field. Is that what you want to do here? If each test gets its own temp dir, using a non-static field would make that clearer.", "author": "pshapiro4broad", "createdAt": "2020-04-03T13:42:41Z", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n+    private final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n+    private final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n+    private final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n+    private final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n+\n+    @BeforeTest()\n+    public void samMetricsProvider() {\n+        final File[] files = new File[]{\n+                simpleSamWithBaseErrors1,\n+                simpleSamWithBaseErrors2,\n+                simpleSingleStrandConsensusSamWithBaseErrors,\n+                simpleDuplexConsensusSamWithBaseErrors,\n+                chrMReadsWithClips};\n+\n+        OUTPUT_DATA_PATH = IOUtil.createTempDir(\"CollectSamErrorMetricsTest\", null);", "originalCommit": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NjUwNQ==", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403246505", "bodyText": "hmmmm, my understanding is that what you described is the case of @BeforeMethod.  but that @BeforeTest is only run once per test-file, not test-method.", "author": "yfarjoun", "createdAt": "2020-04-03T18:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMzg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxNDI2Ng==", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403014266", "bodyText": "these can all be static", "author": "pshapiro4broad", "createdAt": "2020-04-03T13:43:20Z", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");", "originalCommit": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTc0OA==", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403019748", "bodyText": "Does this mean that testdata/picard/sam/BamErrorMetrics/NIST.selected.vcf.idx can be deleted?", "author": "pshapiro4broad", "createdAt": "2020-04-03T13:51:25Z", "path": "src/test/java/picard/sam/SamErrorMetric/CollectSamErrorMetricsTest.java", "diffHunk": "@@ -128,15 +140,52 @@ private static void parseDirective0(final String directive, final String extensi\n         }\n     }\n \n-    @DataProvider(name = \"OneCovariateErrorMetricsDataProvider\")\n-    public Object[][] oneCovariateErrorMetricsDataProvider() {\n-        final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n-        final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n-        final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n-        final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n-        final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n-        final int priorQ = 30;\n+    private final Map<File, File> errorMetrics = new HashMap<>();\n+\n+    private final File simpleSamWithBaseErrors1 = new File(TEST_DIR, \"simpleSamWithBaseErrors1.sam\");\n+    private final File simpleSamWithBaseErrors2 = new File(TEST_DIR, \"simpleSamWithBaseErrors2.sam\");\n+    private final File simpleSingleStrandConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleSingleStrandConsensusSamWithBaseErrors.sam\");\n+    private final File simpleDuplexConsensusSamWithBaseErrors = new File(TEST_DIR, \"simpleDuplexConsensusSamWithBaseErrors.sam\");\n+    private final File chrMReadsWithClips = new File(TEST_DIR, \"chrMReadsWithClips.sam\");\n+\n+    @BeforeTest()\n+    public void samMetricsProvider() {\n+        final File[] files = new File[]{\n+                simpleSamWithBaseErrors1,\n+                simpleSamWithBaseErrors2,\n+                simpleSingleStrandConsensusSamWithBaseErrors,\n+                simpleDuplexConsensusSamWithBaseErrors,\n+                chrMReadsWithClips};\n+\n+        OUTPUT_DATA_PATH = IOUtil.createTempDir(\"CollectSamErrorMetricsTest\", null);\n+\n+        for (final File file : files) {\n+            final File vcf = new File(TEST_DIR, \"NIST.selected.vcf\");", "originalCommit": "be91bf4c6d67b570de1ea0d9ba13d2c1720eca39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTkwMw==", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403251903", "bodyText": "yes...but a slightly different path will be tested....", "author": "yfarjoun", "createdAt": "2020-04-03T19:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MjY2MA==", "url": "https://github.com/broadinstitute/picard/pull/1487#discussion_r403252660", "bodyText": "will do.", "author": "yfarjoun", "createdAt": "2020-04-03T19:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTc0OA=="}], "type": "inlineReview"}, {"oid": "a2513df8b0242407036a276e17479808d59f1153", "url": "https://github.com/broadinstitute/picard/commit/a2513df8b0242407036a276e17479808d59f1153", "message": "- responding to review comments", "committedDate": "2020-04-03T20:20:12Z", "type": "commit"}, {"oid": "918ba53e2c8f81e35ef3affad11ca5cd3546a0cd", "url": "https://github.com/broadinstitute/picard/commit/918ba53e2c8f81e35ef3affad11ca5cd3546a0cd", "message": "Merge branch 'master' into yf_make_CollectSamErrorMetrics_work_with_unindexed_vcf", "committedDate": "2020-04-03T20:20:47Z", "type": "commit"}]}