{"pr_number": 1531, "pr_title": "SortGff tool", "pr_createdAt": "2020-06-24T21:49:35Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1531", "timeline": [{"oid": "9c81b47002a4234edc85c09a18273ddddd7a233e", "url": "https://github.com/broadinstitute/picard/commit/9c81b47002a4234edc85c09a18273ddddd7a233e", "message": "add more tests", "committedDate": "2020-07-21T15:38:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2ODY0OA==", "url": "https://github.com/broadinstitute/picard/pull/1531#discussion_r465968648", "bodyText": "consider adding input and output checking before computing\nIOUtil.assertFileIsReadable(INPUT);\nIOUtil.assertFileIsWritable(OUTPUT);", "author": "jessicaway", "createdAt": "2020-08-05T19:58:00Z", "path": "src/main/java/picard/annotation/SortGff.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package picard.annotation;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.samtools.util.SortingCollection;\n+import htsjdk.tribble.AbstractFeatureReader;\n+import htsjdk.tribble.gff.Gff3Codec;\n+import htsjdk.tribble.gff.Gff3Feature;\n+import htsjdk.tribble.gff.Gff3Writer;\n+import htsjdk.tribble.gff.SequenceRegion;\n+import htsjdk.tribble.readers.LineIterator;\n+import htsjdk.variant.utils.SAMSequenceDictionaryExtractor;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+\n+import picard.PicardException;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+import picard.cmdline.programgroups.OtherProgramGroup;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * <h3> Summary </h3>\n+ * <p> This tool sorts a gff3 file by coordinates, so that it can be indexed.\n+ * It additionally adds flush directives where possible, which can significantly reduce the memory footprint of downstream tools.\n+ * Sorting of multiple contigs can be specified by a sequence dictionary; if no sequence dictionary is specified, contigs are sorted lexicographically. </p>\n+ *\n+ * <h3> Usage Examples </h3>\n+ * <h4> 1. Sort gff3 file, add flush directives.  Contigs will be sorted lexicographically.</h4>\n+ * <pre>\n+ * java -jar picard.jar SortGff\n+ *      I=input.gff3\n+ *      O=output.gff3\n+ * </pre>\n+ *\n+ * <h4> 2. Sort gff3 file, add flush directives.  Contigs will be sorted according to order in sequence dictionary</h4>\n+ * <pre>\n+ * java -jar picard.jar SortGff\n+ *      I=input.gff3\n+ *      O=output.gff3\n+ *      SD=dictionary.dict\n+ * </pre>\n+ *\n+ */\n+\n+@CommandLineProgramProperties(\n+        summary = SortGff.USAGE_DETAILS,\n+        oneLineSummary = SortGff.USAGE_SUMMARY,\n+        programGroup = OtherProgramGroup.class)\n+public class SortGff extends CommandLineProgram {\n+    static final String USAGE_SUMMARY = \"Sorts a gff3 file, and adds flush directives\";\n+    static final String USAGE_DETAILS = \"<h3> Summary </h3>\\n\" +\n+            \"  <p> This tool sorts a gff3 file by coordinates, so that it can be indexed.\\n\" +\n+            \" It additionally adds flush directives where possible, which can significantly reduce the memory footprint of downstream tools.\\n\" +\n+            \" Sorting of multiple contigs can be specified by a sequence dictionary; if no sequence dictionary is specified, contigs are sorted lexicographically. </p>\\n\" +\n+            \"\\n\" +\n+            \" <h3> Usage Examples </h3>\\n\" +\n+            \" <h4> 1. Sort gff3 file, add flush directives.  Contigs will be sorted lexicographically.</h4>\\n\" +\n+            \" <pre>\\n\" +\n+            \" java -jar picard.jar SortGff\\n\" +\n+            \"      I=input.gff3\\n\" +\n+            \"      O=output.gff3\\n\" +\n+            \" </pre>\\n\" +\n+            \"\\n\" +\n+            \" <h4> 2. Sort gff3 file, add flush directives.  Contigs will be sorted according to order of sequence dictionary</h4>\\n\" +\n+            \" <pre>\\n\" +\n+            \" java -jar picard.jar SortGff\\n\" +\n+            \"      I=input.gff3\\n\" +\n+            \"      O=output.gff3\\n\" +\n+            \"      SD=dictionary.dict\\n\" +\n+            \" </pre>\";\n+\n+    @Argument(doc = \"Input Gff3 file to sort.\", shortName = StandardOptionDefinitions.INPUT_SHORT_NAME)\n+    public File INPUT;\n+\n+    @Argument(doc = \"Sorted Gff3 output file.\", shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME)\n+    public File OUTPUT;\n+\n+    @Argument(doc = \"Dictionary to sort contigs by.  If dictionary is not provided, contigs are sorted lexicographically.\", shortName = StandardOptionDefinitions.SEQUENCE_DICTIONARY_SHORT_NAME, optional = true)\n+    public File SEQUENCE_DICTIONARY;\n+\n+    @Argument(doc = \"Number of records to hold in memory before spilling to disk\", optional = true)\n+    public int nRecordsInMemory = 50000;\n+\n+    private final Log log = Log.getInstance(SortGff.class);\n+\n+    private final Map<String, Integer> latestStartMap = new HashMap<>();\n+    private int latestStart = 0;\n+    String latestChrom;\n+\n+    private static class FeatureComparator implements Comparator<Gff3Feature> {\n+        final SAMSequenceDictionary dict;\n+\n+        FeatureComparator(final SAMSequenceDictionary dict) {\n+            this.dict = dict;\n+        }\n+\n+        public int compare(final Gff3Feature f1, final Gff3Feature f2) {\n+            int comp = dict == null ? f1.getContig().compareTo(f2.getContig()) : dict.getSequenceIndex(f1.getContig()) - dict.getSequenceIndex(f2.getContig());\n+            if (comp == 0) {\n+                comp = f1.getStart() - f2.getStart();\n+            }\n+\n+            return comp;\n+        }\n+    }\n+\n+    @Override\n+    protected int doWork() {\n+        final Gff3Codec inputCodec = new Gff3Codec(Gff3Codec.DecodeDepth.SHALLOW);", "originalCommit": "9c81b47002a4234edc85c09a18273ddddd7a233e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c07de4abb939a75ef5206c3a0d10ecf0632a715b", "url": "https://github.com/broadinstitute/picard/commit/c07de4abb939a75ef5206c3a0d10ecf0632a715b", "message": "input/output checks", "committedDate": "2021-02-22T20:17:47Z", "type": "forcePushed"}, {"oid": "7c1be12cec0111259b761dbadf095c4f9cabe684", "url": "https://github.com/broadinstitute/picard/commit/7c1be12cec0111259b761dbadf095c4f9cabe684", "message": "input/output checks", "committedDate": "2021-02-22T20:20:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjI5Mjc1Nw==", "url": "https://github.com/broadinstitute/picard/pull/1531#discussion_r596292757", "bodyText": "Can this be private?", "author": "gbggrant", "createdAt": "2021-03-17T18:44:45Z", "path": "src/main/java/picard/annotation/SortGff.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package picard.annotation;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.samtools.util.ProgressLogger;\n+import htsjdk.samtools.util.SortingCollection;\n+import htsjdk.tribble.AbstractFeatureReader;\n+import htsjdk.tribble.gff.Gff3Codec;\n+import htsjdk.tribble.gff.Gff3Feature;\n+import htsjdk.tribble.gff.Gff3Writer;\n+import htsjdk.tribble.gff.SequenceRegion;\n+import htsjdk.tribble.readers.LineIterator;\n+import htsjdk.variant.utils.SAMSequenceDictionaryExtractor;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+\n+import picard.PicardException;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+import picard.cmdline.programgroups.OtherProgramGroup;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * <h3> Summary </h3>\n+ * <p> This tool sorts a gff3 file by coordinates, so that it can be indexed.\n+ * It additionally adds flush directives where possible, which can significantly reduce the memory footprint of downstream tools.\n+ * Sorting of multiple contigs can be specified by a sequence dictionary; if no sequence dictionary is specified, contigs are sorted lexicographically. </p>\n+ *\n+ * <h3> Usage Examples </h3>\n+ * <h4> 1. Sort gff3 file, add flush directives.  Contigs will be sorted lexicographically.</h4>\n+ * <pre>\n+ * java -jar picard.jar SortGff\n+ *      I=input.gff3\n+ *      O=output.gff3\n+ * </pre>\n+ *\n+ * <h4> 2. Sort gff3 file, add flush directives.  Contigs will be sorted according to order in sequence dictionary</h4>\n+ * <pre>\n+ * java -jar picard.jar SortGff\n+ *      I=input.gff3\n+ *      O=output.gff3\n+ *      SD=dictionary.dict\n+ * </pre>\n+ *\n+ */\n+\n+@CommandLineProgramProperties(\n+        summary = SortGff.USAGE_DETAILS,\n+        oneLineSummary = SortGff.USAGE_SUMMARY,\n+        programGroup = OtherProgramGroup.class)\n+public class SortGff extends CommandLineProgram {\n+    static final String USAGE_SUMMARY = \"Sorts a gff3 file, and adds flush directives\";\n+    static final String USAGE_DETAILS = \"<h3> Summary </h3>\\n\" +\n+            \"  <p> This tool sorts a gff3 file by coordinates, so that it can be indexed.\\n\" +\n+            \" It additionally adds flush directives where possible, which can significantly reduce the memory footprint of downstream tools.\\n\" +\n+            \" Sorting of multiple contigs can be specified by a sequence dictionary; if no sequence dictionary is specified, contigs are sorted lexicographically. </p>\\n\" +\n+            \"\\n\" +\n+            \" <h3> Usage Examples </h3>\\n\" +\n+            \" <h4> 1. Sort gff3 file, add flush directives.  Contigs will be sorted lexicographically.</h4>\\n\" +\n+            \" <pre>\\n\" +\n+            \" java -jar picard.jar SortGff\\n\" +\n+            \"      I=input.gff3\\n\" +\n+            \"      O=output.gff3\\n\" +\n+            \" </pre>\\n\" +\n+            \"\\n\" +\n+            \" <h4> 2. Sort gff3 file, add flush directives.  Contigs will be sorted according to order of sequence dictionary</h4>\\n\" +\n+            \" <pre>\\n\" +\n+            \" java -jar picard.jar SortGff\\n\" +\n+            \"      I=input.gff3\\n\" +\n+            \"      O=output.gff3\\n\" +\n+            \"      SD=dictionary.dict\\n\" +\n+            \" </pre>\";\n+\n+    @Argument(doc = \"Input Gff3 file to sort.\", shortName = StandardOptionDefinitions.INPUT_SHORT_NAME)\n+    public File INPUT;\n+\n+    @Argument(doc = \"Sorted Gff3 output file.\", shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME)\n+    public File OUTPUT;\n+\n+    @Argument(doc = \"Dictionary to sort contigs by.  If dictionary is not provided, contigs are sorted lexicographically.\", shortName = StandardOptionDefinitions.SEQUENCE_DICTIONARY_SHORT_NAME, optional = true)\n+    public File SEQUENCE_DICTIONARY;\n+\n+    @Argument(doc = \"Number of records to hold in memory before spilling to disk\", optional = true)\n+    public int nRecordsInMemory = 50000;\n+\n+    private final Log log = Log.getInstance(SortGff.class);\n+\n+    private final Map<String, Integer> latestStartMap = new HashMap<>();\n+    private int latestStart = 0;\n+    String latestChrom;", "originalCommit": "e3321e9d564289e5a543c268073f6cdb5aa473c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e1d4b2f441c62b703aa1882a71c3e328840e7db7", "url": "https://github.com/broadinstitute/picard/commit/e1d4b2f441c62b703aa1882a71c3e328840e7db7", "message": "SortGff", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "361bad18ff729fcd17e82fe0dd461b43c2a090ea", "url": "https://github.com/broadinstitute/picard/commit/361bad18ff729fcd17e82fe0dd461b43c2a090ea", "message": "sortGff", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "749a400e06ca3aea2519e459e54d09d8c3a66e10", "url": "https://github.com/broadinstitute/picard/commit/749a400e06ca3aea2519e459e54d09d8c3a66e10", "message": "tests", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "d42772106e91eb8cfd78f9e4e1725d69a8161aca", "url": "https://github.com/broadinstitute/picard/commit/d42772106e91eb8cfd78f9e4e1725d69a8161aca", "message": "tests", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "b406e1762bdf3006d782b0caed33ab0824db1ede", "url": "https://github.com/broadinstitute/picard/commit/b406e1762bdf3006d782b0caed33ab0824db1ede", "message": "cleaning up SortGff", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "cc3b8d00c3173aed9f6d7ea407e44467a444b933", "url": "https://github.com/broadinstitute/picard/commit/cc3b8d00c3173aed9f6d7ea407e44467a444b933", "message": "documentation, more tests, and some cleanup", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "24d329e6f7d08ea70d57fc1613c53b5e78956f8a", "url": "https://github.com/broadinstitute/picard/commit/24d329e6f7d08ea70d57fc1613c53b5e78956f8a", "message": "fixing bug", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "716c53e78370cf04da862f0d06a515e16d40e2bb", "url": "https://github.com/broadinstitute/picard/commit/716c53e78370cf04da862f0d06a515e16d40e2bb", "message": "add more tests", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "5a8d3a4c60468ed156ddae8ca6a61f1b7e1a7b8b", "url": "https://github.com/broadinstitute/picard/commit/5a8d3a4c60468ed156ddae8ca6a61f1b7e1a7b8b", "message": "input/output checks", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "019cb5831c5993cd45e043433636f58d6883a2ef", "url": "https://github.com/broadinstitute/picard/commit/019cb5831c5993cd45e043433636f58d6883a2ef", "message": "output is file not directory", "committedDate": "2021-05-13T19:07:46Z", "type": "commit"}, {"oid": "019cb5831c5993cd45e043433636f58d6883a2ef", "url": "https://github.com/broadinstitute/picard/commit/019cb5831c5993cd45e043433636f58d6883a2ef", "message": "output is file not directory", "committedDate": "2021-05-13T19:07:46Z", "type": "forcePushed"}, {"oid": "0897b35b722fda1c7e7fee0d2afb107e141d576f", "url": "https://github.com/broadinstitute/picard/commit/0897b35b722fda1c7e7fee0d2afb107e141d576f", "message": "private field", "committedDate": "2021-05-13T19:12:08Z", "type": "commit"}]}