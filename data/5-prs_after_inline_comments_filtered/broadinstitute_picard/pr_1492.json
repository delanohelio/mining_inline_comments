{"pr_number": 1492, "pr_title": "Add arguments for inputs and output to the ConvertSequencingArtifactToOxoG command", "pr_createdAt": "2020-04-01T20:18:13Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1492", "timeline": [{"oid": "3a87f8a3a53048002d3dfaad388715c4c2536f1a", "url": "https://github.com/broadinstitute/picard/commit/3a87f8a3a53048002d3dfaad388715c4c2536f1a", "message": "Add explicit command line arguments for input and output files to ConvertSequencingArtifactToOxoG. Deriving input and output locations based on INPUT_BASE is still supported.", "committedDate": "2020-04-01T15:54:11Z", "type": "commit"}, {"oid": "3201a421cc0a2bb56946b5190942106ce0a04e64", "url": "https://github.com/broadinstitute/picard/commit/3201a421cc0a2bb56946b5190942106ce0a04e64", "message": "Fix bugs and add a test", "committedDate": "2020-04-01T18:44:22Z", "type": "commit"}, {"oid": "cf296ef910ba90b59002a85e07aa4e40699e486b", "url": "https://github.com/broadinstitute/picard/commit/cf296ef910ba90b59002a85e07aa4e40699e486b", "message": "Merge branch 'master' into ps_add_input_args_CSATOG", "committedDate": "2020-04-03T17:27:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyOTE2MQ==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403129161", "bodyText": "Not sure we need a separate file output specification, this bypasses the addition of the standardized file extension", "author": "jessicaway", "createdAt": "2020-04-03T16:29:46Z", "path": "src/main/java/picard/analysis/artifacts/ConvertSequencingArtifactToOxoG.java", "diffHunk": "@@ -26,48 +29,90 @@\n \n @DocumentedFeature\n public class ConvertSequencingArtifactToOxoG extends CommandLineProgram {\n-static final String USAGE_SUMMARY = \"Extract OxoG metrics from generalized artifacts metrics.  \";\n-static final String USAGE_DETAILS = \"<p>This tool extracts 8-oxoguanine (OxoG) artifact metrics from the output of \" +\n-\"CollectSequencingArtifactsMetrics (a tool that provides detailed information on a variety of artifacts found in sequencing \" +\n-\"libraries) and converts them to the CollectOxoGMetrics tool's output format. This conveniently eliminates the need to run \" +\n-\"CollectOxoGMetrics if we already ran CollectSequencingArtifactsMetrics in our pipeline. See the documentation for \" +\n-\"<a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectSequencingArtifactsMetrics'>CollectSequencingArtifactsMetrics</a> \"+\n-\"and <a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectOxoGMetrics'>CollectOxoGMetrics</a> \"+\n-\"for additional information on these tools.</p>.\" +\n-\n-\"<p>Note that only the base of the CollectSequencingArtifactsMetrics output file name is required for the (INPUT_BASE) \"+\n-\"parameter. For example, if the file name is artifact_metrics.txt.bait_bias_detail_metrics or \"+\n-\"artifact_metrics.txt.pre_adapter_detail_metrics, only the file name base 'artifact_metrics' is \" +\n-\"required on the command line for this parameter.  An output file called 'artifact_metrics.oxog_metrics' will be generated \"+\n-\"automatically.  Finally, to run this tool successfully, the REFERENCE_SEQUENCE must be provided.</p>\"+\n-\"<h4>Usage example:</h4>\" +\n-\"<pre>\" +\n-\"java -jar picard.jar ConvertSequencingArtifactToOxoG \\\\<br />\" +\n-\"     I=artifact_metrics \\\\<br />\" +\n-\"     R=reference.fasta\" +\n-\"</pre>\" +\n-\"Please see the metrics definitions page at \" +\n-\"<a href='http://broadinstitute.github.io/picard/picard-metric-definitions.html#CollectOxoGMetrics.CpcgMetrics'>ConvertSequencingArtifactToOxoG</a> \"+\n-\"for detailed descriptions of the output metrics produced by this tool.\"+\n-\"<hr />\"\n-;\n+\n+    static final String USAGE_SUMMARY = \"Extract OxoG metrics from generalized artifacts metrics.  \";\n+    static final String USAGE_DETAILS = \"<p>This tool extracts 8-oxoguanine (OxoG) artifact metrics from the output of \" +\n+            \"CollectSequencingArtifactsMetrics (a tool that provides detailed information on a variety of artifacts found in sequencing \" +\n+            \"libraries) and converts them to the CollectOxoGMetrics tool's output format. This conveniently eliminates the need to run \" +\n+            \"CollectOxoGMetrics if we already ran CollectSequencingArtifactsMetrics in our pipeline. See the documentation for \" +\n+            \"<a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectSequencingArtifactsMetrics'>CollectSequencingArtifactsMetrics</a> \" +\n+            \"and <a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectOxoGMetrics'>CollectOxoGMetrics</a> \" +\n+            \"for additional information on these tools.</p>.\" +\n+\n+            \"<p>Note that only the base of the CollectSequencingArtifactsMetrics output file name is required for the (INPUT_BASE) \" +\n+            \"parameter. For example, if the file name is artifact_metrics.txt.bait_bias_detail_metrics or \" +\n+            \"artifact_metrics.txt.pre_adapter_detail_metrics, only the file name base 'artifact_metrics' is \" +\n+            \"required on the command line for this parameter.  An output file called 'artifact_metrics.oxog_metrics' will be generated \" +\n+            \"automatically.  Finally, to run this tool successfully, the REFERENCE_SEQUENCE must be provided.</p>\" +\n+            \"<h4>Usage example:</h4>\" +\n+            \"<pre>\" +\n+            \"java -jar picard.jar ConvertSequencingArtifactToOxoG \\\\<br />\" +\n+            \"     I=artifact_metrics \\\\<br />\" +\n+            \"     R=reference.fasta\" +\n+            \"</pre>\" +\n+            \"Please see the metrics definitions page at \" +\n+            \"<a href='http://broadinstitute.github.io/picard/picard-metric-definitions.html#CollectOxoGMetrics.CpcgMetrics'>ConvertSequencingArtifactToOxoG</a> \" +\n+            \"for detailed descriptions of the output metrics produced by this tool.\" +\n+            \"<hr />\";\n+\n+    public static final String OXOG_METRICS_EXT = \".oxog_metrics\";\n+\n     @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME,\n-            doc = \"Basename of the input artifact metrics file (output by CollectSequencingArtifactMetrics)\")\n+            doc = \"Basename of the input artifact metrics file (output by CollectSequencingArtifactMetrics). If this is not \" +\n+                    \" specified, you must specifcy PRE_ADAPTER_IN and BAIT_BIAS_IN\",\n+            optional = true)\n     public File INPUT_BASE;\n \n+    @Argument(doc = \"The pre adapter details input file. Defaults to a filename based on the input basename\",\n+            optional = true)\n+    public File PRE_ADAPTER_IN;\n+\n+    @Argument(doc = \"The bait bias input file. Defaults to a filename based on the input basename\",\n+            optional = true)\n+    public File BAIT_BIAS_IN;\n+\n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME,\n             doc = \"Basename for output OxoG metrics. Defaults to same basename as input metrics\",\n             optional = true)\n     public File OUTPUT_BASE;\n \n+    @Argument(doc = \"File for the output OxoG metrics. Defaults to same basename as input metrics\",\n+            optional = true)\n+    public File OXOG_OUT;", "originalCommit": "3201a421cc0a2bb56946b5190942106ce0a04e64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MTM3NQ==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403261375", "bodyText": "Like the inputs, this is another case where the caller of the tool needs to know exactly how the tool is going to name a file. Allowing the user to override the default means that the user of the tool no longer needs to know this, and won't be affected if the tool changes the extension in the future.\nIn any event, the parameter is optional and users can continue to use the tool without it if they like.", "author": "pshapiro4broad", "createdAt": "2020-04-03T19:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyOTE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNjQ4OA==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403236488", "bodyText": "Update the doc to include the new optional inputs", "author": "jessicaway", "createdAt": "2020-04-03T18:42:49Z", "path": "src/main/java/picard/analysis/artifacts/ConvertSequencingArtifactToOxoG.java", "diffHunk": "@@ -26,48 +29,90 @@\n \n @DocumentedFeature\n public class ConvertSequencingArtifactToOxoG extends CommandLineProgram {\n-static final String USAGE_SUMMARY = \"Extract OxoG metrics from generalized artifacts metrics.  \";\n-static final String USAGE_DETAILS = \"<p>This tool extracts 8-oxoguanine (OxoG) artifact metrics from the output of \" +\n-\"CollectSequencingArtifactsMetrics (a tool that provides detailed information on a variety of artifacts found in sequencing \" +\n-\"libraries) and converts them to the CollectOxoGMetrics tool's output format. This conveniently eliminates the need to run \" +\n-\"CollectOxoGMetrics if we already ran CollectSequencingArtifactsMetrics in our pipeline. See the documentation for \" +\n-\"<a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectSequencingArtifactsMetrics'>CollectSequencingArtifactsMetrics</a> \"+\n-\"and <a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectOxoGMetrics'>CollectOxoGMetrics</a> \"+\n-\"for additional information on these tools.</p>.\" +\n-\n-\"<p>Note that only the base of the CollectSequencingArtifactsMetrics output file name is required for the (INPUT_BASE) \"+\n-\"parameter. For example, if the file name is artifact_metrics.txt.bait_bias_detail_metrics or \"+\n-\"artifact_metrics.txt.pre_adapter_detail_metrics, only the file name base 'artifact_metrics' is \" +\n-\"required on the command line for this parameter.  An output file called 'artifact_metrics.oxog_metrics' will be generated \"+\n-\"automatically.  Finally, to run this tool successfully, the REFERENCE_SEQUENCE must be provided.</p>\"+\n-\"<h4>Usage example:</h4>\" +\n-\"<pre>\" +\n-\"java -jar picard.jar ConvertSequencingArtifactToOxoG \\\\<br />\" +\n-\"     I=artifact_metrics \\\\<br />\" +\n-\"     R=reference.fasta\" +\n-\"</pre>\" +\n-\"Please see the metrics definitions page at \" +\n-\"<a href='http://broadinstitute.github.io/picard/picard-metric-definitions.html#CollectOxoGMetrics.CpcgMetrics'>ConvertSequencingArtifactToOxoG</a> \"+\n-\"for detailed descriptions of the output metrics produced by this tool.\"+\n-\"<hr />\"\n-;\n+\n+    static final String USAGE_SUMMARY = \"Extract OxoG metrics from generalized artifacts metrics.  \";\n+    static final String USAGE_DETAILS = \"<p>This tool extracts 8-oxoguanine (OxoG) artifact metrics from the output of \" +\n+            \"CollectSequencingArtifactsMetrics (a tool that provides detailed information on a variety of artifacts found in sequencing \" +\n+            \"libraries) and converts them to the CollectOxoGMetrics tool's output format. This conveniently eliminates the need to run \" +\n+            \"CollectOxoGMetrics if we already ran CollectSequencingArtifactsMetrics in our pipeline. See the documentation for \" +\n+            \"<a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectSequencingArtifactsMetrics'>CollectSequencingArtifactsMetrics</a> \" +\n+            \"and <a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectOxoGMetrics'>CollectOxoGMetrics</a> \" +\n+            \"for additional information on these tools.</p>.\" +\n+\n+            \"<p>Note that only the base of the CollectSequencingArtifactsMetrics output file name is required for the (INPUT_BASE) \" +", "originalCommit": "cf296ef910ba90b59002a85e07aa4e40699e486b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTc4Mg==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403249782", "bodyText": "A combination new and old style should also be supported", "author": "jessicaway", "createdAt": "2020-04-03T19:02:04Z", "path": "src/test/java/picard/analysis/artifacts/ConvertSequencingArtifactToOxoGTest.java", "diffHunk": "@@ -60,74 +77,78 @@ public void testEquivalence() throws IOException, NoSuchFieldException {\n         args.add(\"REFERENCE_SEQUENCE=\" + REFERENCE_SEQUENCE.getAbsolutePath());\n \n         CollectSequencingArtifactMetrics collectArtifactMetrics = new CollectSequencingArtifactMetrics();\n-        Assert.assertEquals(collectArtifactMetrics.instanceMain(args.toArray(new String[args.size()])), 0,\n+        Assert.assertEquals(collectArtifactMetrics.instanceMain(args.toArray(new String[0])), 0,\n                 \"CollectSequencingArtifactMetrics can't process \" + SAM_FILE.getAbsolutePath() + \" correctly\");\n \n         args.clear();\n-        args.add(\"OUTPUT_BASE=\" + convertedArtifacts.getAbsolutePath());\n-        args.add(\"INPUT_BASE=\" + outputFileArtifacts.getAbsolutePath());\n-\n+        if (newArgStyle) {", "originalCommit": "cf296ef910ba90b59002a85e07aa4e40699e486b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1OTUyNg==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403259526", "bodyText": "It's supported but I didn't think it was worth writing a test for each of the possible cases.", "author": "pshapiro4broad", "createdAt": "2020-04-03T19:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MjQ2MA==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403262460", "bodyText": "Fair enough", "author": "jessicaway", "createdAt": "2020-04-03T19:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTc4Mg=="}], "type": "inlineReview"}, {"oid": "e2a066c43eb5a3739272d6280741a4aaac81a5f2", "url": "https://github.com/broadinstitute/picard/commit/e2a066c43eb5a3739272d6280741a4aaac81a5f2", "message": "Add new parameters to documentation string for command", "committedDate": "2020-04-03T19:38:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NDAzMg==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403274032", "bodyText": "\"specify\"", "author": "gbggrant", "createdAt": "2020-04-03T19:41:48Z", "path": "src/main/java/picard/analysis/artifacts/ConvertSequencingArtifactToOxoG.java", "diffHunk": "@@ -26,48 +29,94 @@\n \n @DocumentedFeature\n public class ConvertSequencingArtifactToOxoG extends CommandLineProgram {\n-static final String USAGE_SUMMARY = \"Extract OxoG metrics from generalized artifacts metrics.  \";\n-static final String USAGE_DETAILS = \"<p>This tool extracts 8-oxoguanine (OxoG) artifact metrics from the output of \" +\n-\"CollectSequencingArtifactsMetrics (a tool that provides detailed information on a variety of artifacts found in sequencing \" +\n-\"libraries) and converts them to the CollectOxoGMetrics tool's output format. This conveniently eliminates the need to run \" +\n-\"CollectOxoGMetrics if we already ran CollectSequencingArtifactsMetrics in our pipeline. See the documentation for \" +\n-\"<a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectSequencingArtifactsMetrics'>CollectSequencingArtifactsMetrics</a> \"+\n-\"and <a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectOxoGMetrics'>CollectOxoGMetrics</a> \"+\n-\"for additional information on these tools.</p>.\" +\n-\n-\"<p>Note that only the base of the CollectSequencingArtifactsMetrics output file name is required for the (INPUT_BASE) \"+\n-\"parameter. For example, if the file name is artifact_metrics.txt.bait_bias_detail_metrics or \"+\n-\"artifact_metrics.txt.pre_adapter_detail_metrics, only the file name base 'artifact_metrics' is \" +\n-\"required on the command line for this parameter.  An output file called 'artifact_metrics.oxog_metrics' will be generated \"+\n-\"automatically.  Finally, to run this tool successfully, the REFERENCE_SEQUENCE must be provided.</p>\"+\n-\"<h4>Usage example:</h4>\" +\n-\"<pre>\" +\n-\"java -jar picard.jar ConvertSequencingArtifactToOxoG \\\\<br />\" +\n-\"     I=artifact_metrics \\\\<br />\" +\n-\"     R=reference.fasta\" +\n-\"</pre>\" +\n-\"Please see the metrics definitions page at \" +\n-\"<a href='http://broadinstitute.github.io/picard/picard-metric-definitions.html#CollectOxoGMetrics.CpcgMetrics'>ConvertSequencingArtifactToOxoG</a> \"+\n-\"for detailed descriptions of the output metrics produced by this tool.\"+\n-\"<hr />\"\n-;\n+\n+    static final String USAGE_SUMMARY = \"Extract OxoG metrics from generalized artifacts metrics.  \";\n+    static final String USAGE_DETAILS = \"<p>This tool extracts 8-oxoguanine (OxoG) artifact metrics from the output of \" +\n+            \"CollectSequencingArtifactsMetrics (a tool that provides detailed information on a variety of artifacts found in sequencing \" +\n+            \"libraries) and converts them to the CollectOxoGMetrics tool's output format. This conveniently eliminates the need to run \" +\n+            \"CollectOxoGMetrics if we already ran CollectSequencingArtifactsMetrics in our pipeline. See the documentation for \" +\n+            \"<a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectSequencingArtifactsMetrics'>CollectSequencingArtifactsMetrics</a> \" +\n+            \"and <a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectOxoGMetrics'>CollectOxoGMetrics</a> \" +\n+            \"for additional information on these tools. \" +\n+\n+            \"<p>Note that only the base of the CollectSequencingArtifactsMetrics output file name is required for the (INPUT_BASE) \" +\n+            \"parameter. For example, if the file name is artifact_metrics.txt.bait_bias_detail_metrics or \" +\n+            \"artifact_metrics.txt.pre_adapter_detail_metrics, only the file name base 'artifact_metrics' is \" +\n+            \"required on the command line for this parameter.  An output file called 'artifact_metrics.oxog_metrics' will be generated \" +\n+            \"automatically.  Finally, to run this tool successfully, the REFERENCE_SEQUENCE must be provided.\" +\n+            \"<p>This command also lets you specify the detail metrics files by name, if files are not in the usual location \" +\n+            \"or have different names. For example, the arguments PRE_ADAPTER_IN and BAIT_BIAS_IN specify the file location of the  \" +\n+            \"pre adapter detail metrics and the bait bias detail metrics respectively. If these arguments are provided then the \" +\n+            \"value of INPUT_BASE is ignored. \" +\n+            \"<h4>Usage example:</h4>\" +\n+            \"<pre>\" +\n+            \"java -jar picard.jar ConvertSequencingArtifactToOxoG \\\\<br />\" +\n+            \"     I=artifact_metrics \\\\<br />\" +\n+            \"     R=reference.fasta\" +\n+            \"</pre>\" +\n+            \"Please see the metrics definitions page at \" +\n+            \"<a href='http://broadinstitute.github.io/picard/picard-metric-definitions.html#CollectOxoGMetrics.CpcgMetrics'>ConvertSequencingArtifactToOxoG</a> \" +\n+            \"for detailed descriptions of the output metrics produced by this tool.\" +\n+            \"<hr />\";\n+\n+    public static final String OXOG_METRICS_EXT = \".oxog_metrics\";\n+\n     @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME,\n-            doc = \"Basename of the input artifact metrics file (output by CollectSequencingArtifactMetrics)\")\n+            doc = \"Basename of the input artifact metrics file (output by CollectSequencingArtifactMetrics). If this is not \" +\n+                    \" specified, you must specifcy PRE_ADAPTER_IN and BAIT_BIAS_IN\",", "originalCommit": "e2a066c43eb5a3739272d6280741a4aaac81a5f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NTAyNA==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403275024", "bodyText": "final", "author": "gbggrant", "createdAt": "2020-04-03T19:43:10Z", "path": "src/main/java/picard/analysis/artifacts/ConvertSequencingArtifactToOxoG.java", "diffHunk": "@@ -26,48 +29,94 @@\n \n @DocumentedFeature\n public class ConvertSequencingArtifactToOxoG extends CommandLineProgram {\n-static final String USAGE_SUMMARY = \"Extract OxoG metrics from generalized artifacts metrics.  \";\n-static final String USAGE_DETAILS = \"<p>This tool extracts 8-oxoguanine (OxoG) artifact metrics from the output of \" +\n-\"CollectSequencingArtifactsMetrics (a tool that provides detailed information on a variety of artifacts found in sequencing \" +\n-\"libraries) and converts them to the CollectOxoGMetrics tool's output format. This conveniently eliminates the need to run \" +\n-\"CollectOxoGMetrics if we already ran CollectSequencingArtifactsMetrics in our pipeline. See the documentation for \" +\n-\"<a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectSequencingArtifactsMetrics'>CollectSequencingArtifactsMetrics</a> \"+\n-\"and <a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectOxoGMetrics'>CollectOxoGMetrics</a> \"+\n-\"for additional information on these tools.</p>.\" +\n-\n-\"<p>Note that only the base of the CollectSequencingArtifactsMetrics output file name is required for the (INPUT_BASE) \"+\n-\"parameter. For example, if the file name is artifact_metrics.txt.bait_bias_detail_metrics or \"+\n-\"artifact_metrics.txt.pre_adapter_detail_metrics, only the file name base 'artifact_metrics' is \" +\n-\"required on the command line for this parameter.  An output file called 'artifact_metrics.oxog_metrics' will be generated \"+\n-\"automatically.  Finally, to run this tool successfully, the REFERENCE_SEQUENCE must be provided.</p>\"+\n-\"<h4>Usage example:</h4>\" +\n-\"<pre>\" +\n-\"java -jar picard.jar ConvertSequencingArtifactToOxoG \\\\<br />\" +\n-\"     I=artifact_metrics \\\\<br />\" +\n-\"     R=reference.fasta\" +\n-\"</pre>\" +\n-\"Please see the metrics definitions page at \" +\n-\"<a href='http://broadinstitute.github.io/picard/picard-metric-definitions.html#CollectOxoGMetrics.CpcgMetrics'>ConvertSequencingArtifactToOxoG</a> \"+\n-\"for detailed descriptions of the output metrics produced by this tool.\"+\n-\"<hr />\"\n-;\n+\n+    static final String USAGE_SUMMARY = \"Extract OxoG metrics from generalized artifacts metrics.  \";\n+    static final String USAGE_DETAILS = \"<p>This tool extracts 8-oxoguanine (OxoG) artifact metrics from the output of \" +\n+            \"CollectSequencingArtifactsMetrics (a tool that provides detailed information on a variety of artifacts found in sequencing \" +\n+            \"libraries) and converts them to the CollectOxoGMetrics tool's output format. This conveniently eliminates the need to run \" +\n+            \"CollectOxoGMetrics if we already ran CollectSequencingArtifactsMetrics in our pipeline. See the documentation for \" +\n+            \"<a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectSequencingArtifactsMetrics'>CollectSequencingArtifactsMetrics</a> \" +\n+            \"and <a href='http://broadinstitute.github.io/picard/command-line-overview.html#CollectOxoGMetrics'>CollectOxoGMetrics</a> \" +\n+            \"for additional information on these tools. \" +\n+\n+            \"<p>Note that only the base of the CollectSequencingArtifactsMetrics output file name is required for the (INPUT_BASE) \" +\n+            \"parameter. For example, if the file name is artifact_metrics.txt.bait_bias_detail_metrics or \" +\n+            \"artifact_metrics.txt.pre_adapter_detail_metrics, only the file name base 'artifact_metrics' is \" +\n+            \"required on the command line for this parameter.  An output file called 'artifact_metrics.oxog_metrics' will be generated \" +\n+            \"automatically.  Finally, to run this tool successfully, the REFERENCE_SEQUENCE must be provided.\" +\n+            \"<p>This command also lets you specify the detail metrics files by name, if files are not in the usual location \" +\n+            \"or have different names. For example, the arguments PRE_ADAPTER_IN and BAIT_BIAS_IN specify the file location of the  \" +\n+            \"pre adapter detail metrics and the bait bias detail metrics respectively. If these arguments are provided then the \" +\n+            \"value of INPUT_BASE is ignored. \" +\n+            \"<h4>Usage example:</h4>\" +\n+            \"<pre>\" +\n+            \"java -jar picard.jar ConvertSequencingArtifactToOxoG \\\\<br />\" +\n+            \"     I=artifact_metrics \\\\<br />\" +\n+            \"     R=reference.fasta\" +\n+            \"</pre>\" +\n+            \"Please see the metrics definitions page at \" +\n+            \"<a href='http://broadinstitute.github.io/picard/picard-metric-definitions.html#CollectOxoGMetrics.CpcgMetrics'>ConvertSequencingArtifactToOxoG</a> \" +\n+            \"for detailed descriptions of the output metrics produced by this tool.\" +\n+            \"<hr />\";\n+\n+    public static final String OXOG_METRICS_EXT = \".oxog_metrics\";\n+\n     @Argument(shortName = StandardOptionDefinitions.INPUT_SHORT_NAME,\n-            doc = \"Basename of the input artifact metrics file (output by CollectSequencingArtifactMetrics)\")\n+            doc = \"Basename of the input artifact metrics file (output by CollectSequencingArtifactMetrics). If this is not \" +\n+                    \" specified, you must specifcy PRE_ADAPTER_IN and BAIT_BIAS_IN\",\n+            optional = true)\n     public File INPUT_BASE;\n \n+    @Argument(doc = \"The pre adapter details input file. Defaults to a filename based on the input basename\",\n+            optional = true)\n+    public File PRE_ADAPTER_IN;\n+\n+    @Argument(doc = \"The bait bias input file. Defaults to a filename based on the input basename\",\n+            optional = true)\n+    public File BAIT_BIAS_IN;\n+\n     @Argument(shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME,\n             doc = \"Basename for output OxoG metrics. Defaults to same basename as input metrics\",\n             optional = true)\n     public File OUTPUT_BASE;\n \n+    @Argument(doc = \"File for the output OxoG metrics. Defaults to a filename based on the output basename\",\n+            optional = true)\n+    public File OXOG_OUT;\n+\n     @Override\n-    protected int doWork() {\n-        if (OUTPUT_BASE == null) { OUTPUT_BASE = INPUT_BASE; }\n+    protected String[] customCommandLineValidation() {\n+        List<String> errors = new ArrayList<>();", "originalCommit": "e2a066c43eb5a3739272d6280741a4aaac81a5f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NjU5OA==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r403276598", "bodyText": "final, final", "author": "gbggrant", "createdAt": "2020-04-03T19:45:09Z", "path": "src/test/java/picard/analysis/artifacts/ConvertSequencingArtifactToOxoGTest.java", "diffHunk": "@@ -60,74 +77,78 @@ public void testEquivalence() throws IOException, NoSuchFieldException {\n         args.add(\"REFERENCE_SEQUENCE=\" + REFERENCE_SEQUENCE.getAbsolutePath());\n \n         CollectSequencingArtifactMetrics collectArtifactMetrics = new CollectSequencingArtifactMetrics();\n-        Assert.assertEquals(collectArtifactMetrics.instanceMain(args.toArray(new String[args.size()])), 0,\n+        Assert.assertEquals(collectArtifactMetrics.instanceMain(args.toArray(new String[0])), 0,\n                 \"CollectSequencingArtifactMetrics can't process \" + SAM_FILE.getAbsolutePath() + \" correctly\");\n \n         args.clear();\n-        args.add(\"OUTPUT_BASE=\" + convertedArtifacts.getAbsolutePath());\n-        args.add(\"INPUT_BASE=\" + outputFileArtifacts.getAbsolutePath());\n-\n+        if (newArgStyle) {\n+            args.add(\"OXOG_OUT=\" + oxogMetricsOutput);\n+            args.add(\"BAIT_BIAS_IN=\" + baitBiasDetails);\n+            args.add(\"PRE_ADAPTER_IN=\" + preAdapterDetails);\n+        } else {\n+            args.add(\"OUTPUT_BASE=\" + convertedArtifacts.getAbsolutePath());\n+            args.add(\"INPUT_BASE=\" + outputFileArtifacts.getAbsolutePath());\n+        }\n         ConvertSequencingArtifactToOxoG convertSequencingArtifactToOxoG = new ConvertSequencingArtifactToOxoG();\n-        Assert.assertEquals(convertSequencingArtifactToOxoG.instanceMain(args.toArray(new String[args.size()])), 0,\n+        Assert.assertEquals(convertSequencingArtifactToOxoG.instanceMain(args.toArray(new String[0])), 0,\n                 \"ConvertSequencingArtifactToOxoG can't process base input\" + outputFileArtifacts.getAbsolutePath() + \" correctly\");\n \n-        String[] columnToCompare=new String[]{\n-                \"SAMPLE_ALIAS\", \"LIBRARY\", \"CONTEXT\", \"TOTAL_BASES\", \"REF_NONOXO_BASES\", \"REF_OXO_BASES\", \"REF_TOTAL_BASES\", \"ALT_NONOXO_BASES\", \"ALT_OXO_BASES\", \"OXIDATION_ERROR_RATE\", \"OXIDATION_Q\", \"C_REF_REF_BASES\", \"G_REF_REF_BASES\", \"C_REF_ALT_BASES\", \"G_REF_ALT_BASES\", \"C_REF_OXO_ERROR_RATE\", \"C_REF_OXO_Q\", \"G_REF_OXO_ERROR_RATE\", \"G_REF_OXO_Q\"};\n-\n-        Assert.assertTrue(areMetricsEqual(outputFileOxoG, new File(convertedArtifacts + \".oxog_metrics\"), columnToCompare), \"Metrics differ\");\n+        Assert.assertTrue(areMetricsEqual(outputFileOxoG, oxogMetricsOutput, COLUMNS_TO_COMPARE), \"Metrics differ\");\n     }\n \n     /**\n      * Compare the metrics in two files, ignoring headers and histograms.\n      */\n     public static boolean areMetricsEqual(final File file1, final File file2, final String[] columnsToCompare) throws NoSuchFieldException {\n-        try {\n+        try (Reader reader1 = new FileReader(file1);", "originalCommit": "e2a066c43eb5a3739272d6280741a4aaac81a5f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NjU0NQ==", "url": "https://github.com/broadinstitute/picard/pull/1492#discussion_r404146545", "bodyText": "They already are! Resources declared in a try are final by default. https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.20.3", "author": "pshapiro4broad", "createdAt": "2020-04-06T14:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NjU5OA=="}], "type": "inlineReview"}, {"oid": "520090679e10c27efdd964dd23ae61d4648a2664", "url": "https://github.com/broadinstitute/picard/commit/520090679e10c27efdd964dd23ae61d4648a2664", "message": "typos and missing `final`", "committedDate": "2020-04-06T14:43:05Z", "type": "commit"}, {"oid": "35b5d33eb3a8e90f909368c5938944d1f26ebddd", "url": "https://github.com/broadinstitute/picard/commit/35b5d33eb3a8e90f909368c5938944d1f26ebddd", "message": "Merge branch 'master' into ps_add_input_args_CSATOG", "committedDate": "2020-04-06T14:45:08Z", "type": "commit"}, {"oid": "29431062a2ff7a84da71e9ce10751b43e0361ca3", "url": "https://github.com/broadinstitute/picard/commit/29431062a2ff7a84da71e9ce10751b43e0361ca3", "message": "Merge branch 'master' into ps_add_input_args_CSATOG", "committedDate": "2020-04-06T18:06:56Z", "type": "commit"}, {"oid": "3464629facab3a4487b40502cf7978b1261ad8be", "url": "https://github.com/broadinstitute/picard/commit/3464629facab3a4487b40502cf7978b1261ad8be", "message": "Merge branch 'master' into ps_add_input_args_CSATOG", "committedDate": "2020-04-06T18:21:04Z", "type": "commit"}]}