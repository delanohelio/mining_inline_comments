{"pr_number": 2013, "pr_title": "#1308 Switch to JUnit Jupiter and do not use Toolchains for the integration tests", "pr_createdAt": "2020-02-01T10:01:33Z", "pr_url": "https://github.com/mapstruct/mapstruct/pull/2013", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4MzA3Mg==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373783072", "bodyText": "is this really the author?", "author": "sjaakd", "createdAt": "2020-02-01T14:35:13Z", "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/FullFeatureCompilationExclusionCliEnhancer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.itest.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.condition.JRE;\n+import org.mapstruct.itest.testutil.extension.ProcessorTest;\n+\n+/**\n+ * Adds explicit exclusions of test mappers that are known or expected to not work with specific compilers.\n+ *\n+ * @author Andreas Gudian", "originalCommit": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NjUxMA==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373846510", "bodyText": "Yes this was within the FullFeatureTest and was written by Andreas", "author": "filiphr", "createdAt": "2020-02-02T13:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4MzA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTc2NQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373829765", "bodyText": "did you investigate this?", "author": "sjaakd", "createdAt": "2020-02-02T08:50:53Z", "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/FullFeatureCompilationExclusionCliEnhancer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.itest.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.condition.JRE;\n+import org.mapstruct.itest.testutil.extension.ProcessorTest;\n+\n+/**\n+ * Adds explicit exclusions of test mappers that are known or expected to not work with specific compilers.\n+ *\n+ * @author Andreas Gudian\n+ */\n+public final class FullFeatureCompilationExclusionCliEnhancer implements ProcessorTest.CommandLineEnhancer {\n+    @Override\n+    public Collection<String> getAdditionalCommandLineArguments(ProcessorTest.ProcessorType processorType,\n+        JRE currentJreVersion) {\n+        List<String> additionalExcludes = new ArrayList<>();\n+\n+        // SPI not working correctly here.. (not picked up)\n+        additionalExcludes.add( \"org/mapstruct/ap/test/bugs/_1596/*.java\" );\n+        additionalExcludes.add( \"org/mapstruct/ap/test/bugs/_1801/*.java\" );\n+\n+        switch ( currentJreVersion ) {\n+            case JAVA_9:\n+                // TODO find out why this fails:", "originalCommit": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NjUyNg==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373846526", "bodyText": "Nope, this is an old TODO :), so I left it", "author": "filiphr", "createdAt": "2020-02-02T13:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTkwNw==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373829907", "bodyText": "should we fix this in a later phase? Make an issue? I guess we rely heavily on SPI.. I guess somewhere the META_INF is not on the classpath.", "author": "sjaakd", "createdAt": "2020-02-02T08:52:37Z", "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/FullFeatureCompilationExclusionCliEnhancer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.itest.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.condition.JRE;\n+import org.mapstruct.itest.testutil.extension.ProcessorTest;\n+\n+/**\n+ * Adds explicit exclusions of test mappers that are known or expected to not work with specific compilers.\n+ *\n+ * @author Andreas Gudian\n+ */\n+public final class FullFeatureCompilationExclusionCliEnhancer implements ProcessorTest.CommandLineEnhancer {\n+    @Override\n+    public Collection<String> getAdditionalCommandLineArguments(ProcessorTest.ProcessorType processorType,\n+        JRE currentJreVersion) {\n+        List<String> additionalExcludes = new ArrayList<>();\n+\n+        // SPI not working correctly here.. (not picked up)", "originalCommit": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NjY1MQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373846651", "bodyText": "This comes from earlier, I didn't write a single new line in this class. Just pulled it outside of the deleted FullFeatureTest. I actually have a better idea now with Jupiter instead of doing what we are doing here.", "author": "filiphr", "createdAt": "2020-02-02T13:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMDAwOQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373830009", "bodyText": "cool, I guess this is the trick that allows you to scrap a lot of plumbing..", "author": "sjaakd", "createdAt": "2020-02-02T08:54:40Z", "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/GradleIncrementalCompilationTest.java", "diffHunk": "@@ -24,40 +18,40 @@\n import org.gradle.testkit.runner.BuildResult;\n import org.gradle.testkit.runner.GradleRunner;\n import org.gradle.testkit.runner.TaskOutcome;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.condition.DisabledForJreRange;\n+import org.junit.jupiter.api.condition.JRE;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.junit.runners.Parameterized.Parameters;\n \n+import static org.gradle.testkit.runner.TaskOutcome.SUCCESS;\n+import static org.gradle.testkit.runner.TaskOutcome.UP_TO_DATE;\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n /**\n  * <p>This is supposed to be run from the mapstruct root project folder.\n  * Otherwise, use <code>-Dmapstruct_root=path_to_project</code>.\n  */\n-@RunWith( Parameterized.class )\n+@DisabledForJreRange(min = JRE.JAVA_11)", "originalCommit": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NjgwOQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373846809", "bodyText": "Yup this is a Jupiter annotation which disables the test to run on Java 11+. Which is not correct, I should disable it from 12+. But yes it has a lot of good conditions that can be used. Have a look at the package and the other conditions.", "author": "filiphr", "createdAt": "2020-02-02T13:40:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMDAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMDAyNw==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373830027", "bodyText": "cool feature..", "author": "sjaakd", "createdAt": "2020-02-02T08:55:11Z", "path": "integrationtest/src/test/java/org/mapstruct/itest/tests/GradleIncrementalCompilationTest.java", "diffHunk": "@@ -81,49 +75,62 @@ private void assertRecompiled(BuildResult result, int recompiledCount) {\n         assertCompileOutcome( result, recompiledCount > 0 ? SUCCESS : UP_TO_DATE );\n         assertThat(\n             result.getOutput(),\n-            containsString( String.format( \"Incremental compilation of %d classes completed\", recompiledCount ) ) );\n+            containsString( String.format( \"Incremental compilation of %d classes completed\", recompiledCount ) )\n+        );\n     }\n \n     private List<String> buildCompileArgs() {\n         // Make Gradle use the temporary build folder by overriding the buildDir property\n-        String buildDirPropertyArg = \"-PbuildDir=\" + testBuildDir.getRoot().getAbsolutePath();\n+        String buildDirPropertyArg = \"-PbuildDir=\" + testBuildDir.getAbsolutePath();\n \n         // Inject the path to the folder containing the mapstruct-processor JAR\n         String jarDirectoryArg = \"-PmapstructRootPath=\" + rootPath.toString();\n         return Arrays.asList( compileTaskName, buildDirPropertyArg, jarDirectoryArg );\n     }\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setupClass() throws Exception {\n         rootPath = Paths.get( System.getProperty( \"mapstruct_root\", \".\" ) ).toAbsolutePath();\n     }\n \n-    @Before\n-    public void setup() throws IOException {\n+    public void setup(String gradleVersion) throws IOException {\n+        if ( !testBuildDir.exists() ) {\n+            testBuildDir.mkdirs();\n+        }\n+\n+        if ( !testProjectDir.exists() ) {\n+            testProjectDir.mkdirs();\n+        }\n         // Copy test project files to the temp dir\n         Path gradleProjectPath = rootPath.resolve( projectDir );\n-        FileUtils.copyDirectory( gradleProjectPath.toFile(), testProjectDir.getRoot() );\n+        FileUtils.copyDirectory( gradleProjectPath.toFile(), testProjectDir );\n         compileArgs = buildCompileArgs();\n-        sourceDirectory = new File( testProjectDir.getRoot(), \"src/main/java\" );\n-        runner = GradleRunner.create().withGradleVersion( gradleVersion ).withProjectDir( testProjectDir.getRoot() );\n+        sourceDirectory = new File( testProjectDir, \"src/main/java\" );\n+        runner = GradleRunner.create().withGradleVersion( gradleVersion ).withProjectDir( testProjectDir );\n     }\n \n-    @Test\n-    public void testBuildSucceeds() throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"gradleVersions\")\n+    public void testBuildSucceeds(String gradleVersion) throws IOException {\n+        setup( gradleVersion );\n         // Make sure the test build setup actually compiles\n         BuildResult buildResult = getRunner().build();\n         assertCompileOutcome( buildResult, SUCCESS );\n     }\n \n-    @Test\n-    public void testUpToDate() throws IOException {\n+    @ParameterizedTest", "originalCommit": "ee95b2ac54b1ce614037cb8afb440a52713d6c0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0Njg2OA==", "url": "https://github.com/mapstruct/mapstruct/pull/2013#discussion_r373846868", "bodyText": "Oh yes, I love the JUnit Jupiter parametrized tests. They are extremely powerful.", "author": "filiphr", "createdAt": "2020-02-02T13:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMDAyNw=="}], "type": "inlineReview"}, {"oid": "49413d4fc46f8f0f734a342b26a6fae5116ae6ed", "url": "https://github.com/mapstruct/mapstruct/commit/49413d4fc46f8f0f734a342b26a6fae5116ae6ed", "message": "Remove toolchains and not needed mapstruct artifact id property", "committedDate": "2020-02-02T13:57:34Z", "type": "forcePushed"}, {"oid": "2f8bcf44c190915404946039340baed53b325fb8", "url": "https://github.com/mapstruct/mapstruct/commit/2f8bcf44c190915404946039340baed53b325fb8", "message": "#1308 Switch to JUnit Jupiter and do not use Toolchains for the integration tests\n\nThe CI should be setup to run on different Java versions, for which the integration tests are going to be run", "committedDate": "2020-02-02T13:57:34Z", "type": "commit"}, {"oid": "49413d4fc46f8f0f734a342b26a6fae5116ae6ed", "url": "https://github.com/mapstruct/mapstruct/commit/49413d4fc46f8f0f734a342b26a6fae5116ae6ed", "message": "Remove toolchains and not needed mapstruct artifact id property", "committedDate": "2020-02-02T13:57:34Z", "type": "commit"}]}