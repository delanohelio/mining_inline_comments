{"pr_number": 2270, "pr_title": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "pr_createdAt": "2020-03-18T15:41:36Z", "pr_url": "https://github.com/oracle/graal/pull/2270", "timeline": [{"oid": "9ded9fada13ccf7ca6af53b0c013053be35ab94b", "url": "https://github.com/oracle/graal/commit/9ded9fada13ccf7ca6af53b0c013053be35ab94b", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-03-18T15:50:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NTg0OA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r394575848", "bodyText": "I think NativeImageAgentHandles would be a better name.", "author": "peter-hofer", "createdAt": "2020-03-18T19:03:18Z", "path": "substratevm/src/com.oracle.svm.agent/src/com/oracle/svm/agent/NIHandles.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent;\n+\n+import com.oracle.svm.agent.core.JavaHandles;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+public class NIHandles extends JavaHandles {", "originalCommit": "9ded9fada13ccf7ca6af53b0c013053be35ab94b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNDM1MA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r395024350", "bodyText": "I agree, will change it.", "author": "gradinac", "createdAt": "2020-03-19T13:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NTg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NjM2Nw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r394576367", "bodyText": "Perhaps rename this to NativeImageAgent too. Then you could also rename AgentBase to Agent if you'd like.", "author": "peter-hofer", "createdAt": "2020-03-18T19:04:15Z", "path": "substratevm/src/com.oracle.svm.agent/src/com/oracle/svm/agent/Agent.java", "diffHunk": "@@ -88,37 +72,34 @@\n import com.oracle.svm.configure.config.ConfigurationSet;\n import com.oracle.svm.configure.filters.FilterConfigurationParser;\n import com.oracle.svm.configure.filters.RuleNode;\n+import com.oracle.svm.configure.json.JsonPrintable;\n import com.oracle.svm.configure.json.JsonWriter;\n import com.oracle.svm.configure.trace.AccessAdvisor;\n import com.oracle.svm.configure.trace.TraceProcessor;\n import com.oracle.svm.core.FallbackExecutor;\n import com.oracle.svm.core.SubstrateUtil;\n-import com.oracle.svm.core.c.function.CEntryPointOptions;\n-import com.oracle.svm.core.c.function.CEntryPointSetup;\n import com.oracle.svm.core.configure.ConfigurationFiles;\n import com.oracle.svm.driver.NativeImage;\n import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n-import com.oracle.svm.jni.nativeapi.JNIErrors;\n import com.oracle.svm.jni.nativeapi.JNIJavaVM;\n import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n-import com.oracle.svm.jni.nativeapi.JNIVersion;\n \n-public final class Agent {\n+public final class Agent extends AgentBase {", "originalCommit": "9ded9fada13ccf7ca6af53b0c013053be35ab94b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNDQ4MQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r395024481", "bodyText": "Yes, that would be perfect. Changing it.", "author": "gradinac", "createdAt": "2020-03-19T13:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NjM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NzIzNQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r394577235", "bodyText": "Our style checking gate will likely complain that this could be declared static, perhaps other methods too.", "author": "peter-hofer", "createdAt": "2020-03-18T19:05:57Z", "path": "substratevm/src/com.oracle.svm.agent/src/com/oracle/svm/agent/Agent.java", "diffHunk": "@@ -345,27 +324,19 @@ public static int onLoad(JNIJavaVM vm, CCharPointer options, @SuppressWarnings(\"\n             }\n         }\n \n-        check(jvmti.getFunctions().SetEventCallbacks().invoke(jvmti, callbacks, SizeOf.get(JvmtiEventCallbacks.class)));\n-        UnmanagedMemory.free(callbacks);\n-\n-        check(jvmti.getFunctions().SetEventNotificationMode().invoke(jvmti, JVMTI_ENABLE, JVMTI_EVENT_VM_START, nullHandle()));\n-        check(jvmti.getFunctions().SetEventNotificationMode().invoke(jvmti, JVMTI_ENABLE, JVMTI_EVENT_VM_INIT, nullHandle()));\n-        check(jvmti.getFunctions().SetEventNotificationMode().invoke(jvmti, JVMTI_ENABLE, JVMTI_EVENT_VM_DEATH, nullHandle()));\n-        check(jvmti.getFunctions().SetEventNotificationMode().invoke(jvmti, JVMTI_ENABLE, JVMTI_EVENT_THREAD_END, nullHandle()));\n-\n         setupExecutorServiceForPeriodicConfigurationCapture(configWritePeriod, configWritePeriodInitialDelay);\n         return 0;\n     }\n \n-    private static int parseIntegerOrNegative(String number) {\n+    private int parseIntegerOrNegative(String number) {", "originalCommit": "9ded9fada13ccf7ca6af53b0c013053be35ab94b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNDc1NQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r395024755", "bodyText": "I will make them static again.", "author": "gradinac", "createdAt": "2020-03-19T13:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NzIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4ODEzNg==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r394588136", "bodyText": "You can make this field non-static and access it via singleton(). In order to avoid casts, you could introduce a type parameter <H extends JavaHandles> that subclasses can specify for the field type and the return type of constructJavaHandles, but that might be overkill.", "author": "peter-hofer", "createdAt": "2020-03-18T19:26:39Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/AgentBase.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.agent.core.Support.check;\n+import static com.oracle.svm.agent.core.Support.checkJni;\n+import static com.oracle.svm.agent.core.Support.fromCString;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_THREAD_END;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_DEATH;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_INIT;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_START;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEventMode.JVMTI_ENABLE;\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+import static org.graalvm.word.WordFactory.nullPointer;\n+\n+import com.oracle.svm.core.annotate.AutomaticFeature;\n+import com.oracle.svm.core.util.VMError;\n+import com.oracle.svm.hosted.FeatureImpl;\n+import com.oracle.svm.jni.nativeapi.JNIErrors;\n+import com.oracle.svm.jni.nativeapi.JNIVersion;\n+import org.graalvm.compiler.api.replacements.Fold;\n+import org.graalvm.nativeimage.CurrentIsolate;\n+import org.graalvm.nativeimage.ImageSingletons;\n+import org.graalvm.nativeimage.Platform;\n+import org.graalvm.nativeimage.Platforms;\n+import org.graalvm.nativeimage.StackValue;\n+import org.graalvm.nativeimage.UnmanagedMemory;\n+import org.graalvm.nativeimage.c.function.CEntryPoint;\n+import org.graalvm.nativeimage.c.function.CEntryPointLiteral;\n+import org.graalvm.nativeimage.c.function.CFunctionPointer;\n+import org.graalvm.nativeimage.c.struct.SizeOf;\n+import org.graalvm.nativeimage.c.type.CCharPointer;\n+import org.graalvm.nativeimage.c.type.WordPointer;\n+import org.graalvm.nativeimage.hosted.Feature;\n+import org.graalvm.word.PointerBase;\n+\n+import com.oracle.svm.agent.core.jvmti.JvmtiEnv;\n+import com.oracle.svm.agent.core.jvmti.JvmtiEventCallbacks;\n+import com.oracle.svm.core.c.function.CEntryPointOptions;\n+import com.oracle.svm.core.c.function.CEntryPointSetup;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIJavaVM;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+import java.util.List;\n+\n+public abstract class AgentBase {\n+\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMInitLiteral = CEntryPointLiteral.create(AgentBase.class, \"onVMInit\", JvmtiEnv.class, JNIEnvironment.class, JNIObjectHandle.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMStartLiteral = CEntryPointLiteral.create(AgentBase.class, \"onVMStart\", JvmtiEnv.class, JNIEnvironment.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMDeathLiteral = CEntryPointLiteral.create(AgentBase.class, \"onVMDeath\", JvmtiEnv.class, JNIEnvironment.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onThreadEndLiteral = CEntryPointLiteral.create(AgentBase.class, \"onThreadEnd\", JvmtiEnv.class, JNIEnvironment.class,\n+                    JNIObjectHandle.class);\n+\n+    protected abstract JavaHandles constructJavaHandles(JNIEnvironment env);\n+\n+    protected abstract int onLoadCallback(JNIJavaVM vm, JvmtiEnv jvmti, JvmtiEventCallbacks callbacks, String options);\n+\n+    protected abstract int onUnloadCallback(JNIJavaVM vm);\n+\n+    protected abstract void onVMStartCallback(JvmtiEnv jvmti, JNIEnvironment jni);\n+\n+    protected abstract void onVMInitCallback(JvmtiEnv jvmti, JNIEnvironment jni, @SuppressWarnings(\"unused\") JNIObjectHandle thread);\n+\n+    protected abstract void onVmDeathCallback(JvmtiEnv jvmti, @SuppressWarnings(\"unused\") JNIEnvironment jni);\n+\n+    protected abstract int getRequiredJVMTIVersion();\n+\n+    protected static JavaHandles handles;", "originalCommit": "9ded9fada13ccf7ca6af53b0c013053be35ab94b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNDIwNw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r395024207", "bodyText": "I agree with this, however, I think we can't get away from having a static method in each agent subclass. Right now, NativeImageAgent has a static handles() method that does the type cast. For this approach, we would either have to re-implement singleton in the subclass with the appropriate cast, or keep a static handles method. If there are no other ways, I would go with reimplementing the singleton() method.", "author": "gradinac", "createdAt": "2020-03-19T13:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4ODEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4ODYxOA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r394588618", "bodyText": "On second thought, perhaps HandleSet would be a better name.", "author": "peter-hofer", "createdAt": "2020-03-18T19:27:39Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JavaHandles.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+public abstract class JavaHandles {", "originalCommit": "9ded9fada13ccf7ca6af53b0c013053be35ab94b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNTQwNQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r395025405", "bodyText": "I agree, will take care of it.", "author": "gradinac", "createdAt": "2020-03-19T13:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4ODYxOA=="}], "type": "inlineReview"}, {"oid": "91423d22e1025de2249613bf55f7b8c0d9a7e59e", "url": "https://github.com/oracle/graal/commit/91423d22e1025de2249613bf55f7b8c0d9a7e59e", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-03-19T15:54:30Z", "type": "forcePushed"}, {"oid": "a714cc99e55d261d45ebdd16918e9de5adc446d1", "url": "https://github.com/oracle/graal/commit/a714cc99e55d261d45ebdd16918e9de5adc446d1", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-03-19T16:12:02Z", "type": "forcePushed"}, {"oid": "ee7483e51f177a610d106999b72a79348c09f097", "url": "https://github.com/oracle/graal/commit/ee7483e51f177a610d106999b72a79348c09f097", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-06T12:47:40Z", "type": "forcePushed"}, {"oid": "2299bd6244b57f7604d699cce3c8609d5a60f448", "url": "https://github.com/oracle/graal/commit/2299bd6244b57f7604d699cce3c8609d5a60f448", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-06T14:40:03Z", "type": "forcePushed"}, {"oid": "70aefe0f8e19cb341e85717b58bbfb3b2dbdf2e7", "url": "https://github.com/oracle/graal/commit/70aefe0f8e19cb341e85717b58bbfb3b2dbdf2e7", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-06T14:51:10Z", "type": "forcePushed"}, {"oid": "b873f5324697222428fbf12c5761761669dbfb05", "url": "https://github.com/oracle/graal/commit/b873f5324697222428fbf12c5761761669dbfb05", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-06T16:12:25Z", "type": "forcePushed"}, {"oid": "1bc2ffe02be8f8bebeba7a911bdc392119410b2c", "url": "https://github.com/oracle/graal/commit/1bc2ffe02be8f8bebeba7a911bdc392119410b2c", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-06T16:48:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTE3Nw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404305177", "bodyText": "I find HandleSet is an overly generic name. Can we give a name to this set that describes all the handles well.", "author": "vjovanov", "createdAt": "2020-04-06T18:35:45Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/HandleSet.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+public abstract class HandleSet {", "originalCommit": "1bc2ffe02be8f8bebeba7a911bdc392119410b2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwOTk4NA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404309984", "bodyText": "How about JNIHandleSet?", "author": "gradinac", "createdAt": "2020-04-06T18:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMDA5NA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404610094", "bodyText": "Would BaseJVMTIHandleSet or JVMTIHandleSetBase describe it well?", "author": "vjovanov", "createdAt": "2020-04-07T07:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMzE0Nw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404623147", "bodyText": "At least having a javadoc comment for the class would help clarify what kind of handles this class manages.", "author": "dougxc", "createdAt": "2020-04-07T08:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1Njc4NQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404756785", "bodyText": "@vjovanov I can rename it to JVMTIHandleSetBase. The reason for the JNIHandleSet is because the class manages JNI such as JNIObjectHandle/JNIMethodId. It could also be JNIHandleSetBase.\n@dougxc I agree, I will add documentation for the class.", "author": "gradinac", "createdAt": "2020-04-07T12:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NDYyNw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r405684627", "bodyText": "They are not JVMTI handles though (there is no such thing), these are a set of JNI handles frequently used by the agent, so I propose AgentHandleSet.", "author": "peter-hofer", "createdAt": "2020-04-08T17:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTQyMw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404305423", "bodyText": "What is 16?", "author": "vjovanov", "createdAt": "2020-04-06T18:36:12Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/HandleSet.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+public abstract class HandleSet {\n+    private final ReentrantLock globalRefsLock = new ReentrantLock();\n+    private JNIObjectHandle[] globalRefs = new JNIObjectHandle[16];", "originalCommit": "1bc2ffe02be8f8bebeba7a911bdc392119410b2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxMzAzOQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404313039", "bodyText": "The initial number of global references that are tracked. This array can grow dynamically, I think the size was chosen in accordance with the JVMTI per-thread guaranteed local handle capacity. but it could be different? CC @peter-hofer", "author": "gradinac", "createdAt": "2020-04-06T18:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwOTYxNw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404609617", "bodyText": "It would be better to make it a const and give it a descriptive name.", "author": "vjovanov", "createdAt": "2020-04-07T07:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1NzA0OQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404757049", "bodyText": "I agree, I will take care of it.", "author": "gradinac", "createdAt": "2020-04-07T12:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTQyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NTE5MA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r405685190", "bodyText": "INITIAL_GLOBAL_REFS_SIZE or just a comment // grows should be fine.", "author": "peter-hofer", "createdAt": "2020-04-08T17:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNTQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMjcyMQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404622721", "bodyText": "Where's the javadoc comment explaining the purpose and usage of this class?", "author": "dougxc", "createdAt": "2020-04-07T08:17:21Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JvmtiAgentBase.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright (c) 2020, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.agent.core.Support.check;\n+import static com.oracle.svm.agent.core.Support.checkJni;\n+import static com.oracle.svm.agent.core.Support.fromCString;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_THREAD_END;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_DEATH;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_INIT;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_START;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEventMode.JVMTI_ENABLE;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+import static org.graalvm.word.WordFactory.nullPointer;\n+\n+import org.graalvm.nativeimage.CurrentIsolate;\n+import org.graalvm.nativeimage.StackValue;\n+import org.graalvm.nativeimage.UnmanagedMemory;\n+import org.graalvm.nativeimage.c.function.CEntryPoint;\n+import org.graalvm.nativeimage.c.function.CEntryPointLiteral;\n+import org.graalvm.nativeimage.c.function.CFunctionPointer;\n+import org.graalvm.nativeimage.c.struct.SizeOf;\n+import org.graalvm.nativeimage.c.type.CCharPointer;\n+import org.graalvm.nativeimage.c.type.WordPointer;\n+import org.graalvm.word.PointerBase;\n+\n+import com.oracle.svm.agent.core.jvmti.JvmtiEnv;\n+import com.oracle.svm.agent.core.jvmti.JvmtiEventCallbacks;\n+import com.oracle.svm.core.c.function.CEntryPointOptions;\n+import com.oracle.svm.core.c.function.CEntryPointSetup;\n+import com.oracle.svm.core.util.VMError;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIErrors;\n+import com.oracle.svm.jni.nativeapi.JNIJavaVM;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+import com.oracle.svm.jni.nativeapi.JNIVersion;\n+\n+public abstract class JvmtiAgentBase<T extends HandleSet> {", "originalCommit": "1bc2ffe02be8f8bebeba7a911bdc392119410b2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1ODA0OA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r404758048", "bodyText": "I will add documentation for this class.", "author": "gradinac", "createdAt": "2020-04-07T12:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMjcyMQ=="}], "type": "inlineReview"}, {"oid": "8fab53480ffcb0b9142541835f6350dd7d1fd889", "url": "https://github.com/oracle/graal/commit/8fab53480ffcb0b9142541835f6350dd7d1fd889", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-07T16:32:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTg1NA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r405489854", "bodyText": "In this API I find inconsistencies with capitalization: why is VM here, and Vm later. Why is it JNIJavaVM but then we have a JvmtiEnv. We should stick to one naming convention in this API, whichever it is. \\CC @peter-hofer", "author": "vjovanov", "createdAt": "2020-04-08T12:35:42Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JvmtiAgentBase.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * Copyright (c) 2020, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.agent.core.Support.check;\n+import static com.oracle.svm.agent.core.Support.checkJni;\n+import static com.oracle.svm.agent.core.Support.fromCString;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_THREAD_END;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_DEATH;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_INIT;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_START;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEventMode.JVMTI_ENABLE;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+import static org.graalvm.word.WordFactory.nullPointer;\n+\n+import org.graalvm.nativeimage.CurrentIsolate;\n+import org.graalvm.nativeimage.StackValue;\n+import org.graalvm.nativeimage.UnmanagedMemory;\n+import org.graalvm.nativeimage.c.function.CEntryPoint;\n+import org.graalvm.nativeimage.c.function.CEntryPointLiteral;\n+import org.graalvm.nativeimage.c.function.CFunctionPointer;\n+import org.graalvm.nativeimage.c.struct.SizeOf;\n+import org.graalvm.nativeimage.c.type.CCharPointer;\n+import org.graalvm.nativeimage.c.type.WordPointer;\n+import org.graalvm.word.PointerBase;\n+\n+import com.oracle.svm.agent.core.jvmti.JvmtiEnv;\n+import com.oracle.svm.agent.core.jvmti.JvmtiEventCallbacks;\n+import com.oracle.svm.core.c.function.CEntryPointOptions;\n+import com.oracle.svm.core.c.function.CEntryPointSetup;\n+import com.oracle.svm.core.util.VMError;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIErrors;\n+import com.oracle.svm.jni.nativeapi.JNIJavaVM;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+import com.oracle.svm.jni.nativeapi.JNIVersion;\n+\n+/**\n+ * Base class for a JVMTI agent.\n+ *\n+ * In order to create a new JVMTI agent, you must:\n+ * <ol>\n+ * <li>Subclass {@link JNIHandleSetBase}.</li>\n+ * <li>Subclass this class and parametrize it with your @{link {@link JNIHandleSetBase} class}.</li>\n+ * <li>Create a {@link org.graalvm.nativeimage.hosted.Feature} that will register the agent using\n+ * {@link #registerAgent(JvmtiAgentBase)} in its'\n+ * {@link org.graalvm.nativeimage.hosted.Feature#afterRegistration} callback.</li>\n+ * </ol>\n+ * The created feature must then be passed to native-image on creation of shared library.\n+ *\n+ * This agent contains the bare minimum of the JVMTI events. In order to receive a a JVMTI event\n+ * that is not implemented here, you must:\n+ * <ol>\n+ * <li>Create a callback method annotated with {@link CEntryPoint} that matches the signature\n+ * (parameters and the return type) of the desired JVMTI event. The method must also be annotated\n+ * with {@link CEntryPointOptions} and must use the\n+ * {@link com.oracle.svm.agent.core.AgentIsolate.Prologue} prologue.</li>\n+ * <li>Create a {@link CEntryPointLiteral} from your callback method.</li>\n+ * <li>Set the callback in the callbacks argument of your {@link #onLoadCallback} method.</li>\n+ * <lI>Enable the event using {@link com.oracle.svm.agent.core.jvmti.JvmtiEventMode}.</lI>\n+ * </ol>\n+ *\n+ * Only one agent can be created in a single native image.\n+ *\n+ * @param <T> The subclass of {@link JNIHandleSetBase} containg the JNI handles this agent requires.\n+ */\n+@SuppressWarnings(\"JavadocReference\")\n+public abstract class JvmtiAgentBase<T extends JNIHandleSetBase> {\n+\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMInitLiteral = CEntryPointLiteral.create(JvmtiAgentBase.class, \"onVMInit\", JvmtiEnv.class, JNIEnvironment.class,\n+                    JNIObjectHandle.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMStartLiteral = CEntryPointLiteral.create(JvmtiAgentBase.class, \"onVMStart\", JvmtiEnv.class, JNIEnvironment.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMDeathLiteral = CEntryPointLiteral.create(JvmtiAgentBase.class, \"onVMDeath\", JvmtiEnv.class, JNIEnvironment.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onThreadEndLiteral = CEntryPointLiteral.create(JvmtiAgentBase.class, \"onThreadEnd\", JvmtiEnv.class, JNIEnvironment.class,\n+                    JNIObjectHandle.class);\n+\n+    @SuppressWarnings({\"rawtypes\"}) private static JvmtiAgentBase singleton;\n+\n+    /**\n+     * Callback method that should create your subclass of {@link JNIHandleSetBase}.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @return An instance of your {@link JNIHandleSetBase} subclass.\n+     */\n+    protected abstract JNIHandleSetBase constructJavaHandles(JNIEnvironment env);\n+\n+    /**\n+     * JVMTI Agent_OnLoad callback.\n+     *\n+     * @param vm The JNI Java VM.\n+     * @param jvmti The JVMTI environment.\n+     * @param callbacks A structure that allows setting the callbacks for JVMTI events.\n+     * @param options Command line options passed to the agent.\n+     * @return 0 on success, anything else on failure.\n+     */\n+    protected abstract int onLoadCallback(JNIJavaVM vm, JvmtiEnv jvmti, JvmtiEventCallbacks callbacks, String options);\n+\n+    /**\n+     * JVMTI Agent_OnUnload callback.\n+     *\n+     * @param vm The JNI Java VM.\n+     * @return 0 on success, anything else on failure.\n+     */\n+    protected abstract int onUnloadCallback(JNIJavaVM vm);\n+\n+    /**\n+     * JVMTI VMStart event callback.\n+     *\n+     * @param jvmti The JVMTI environment.\n+     * @param jni The JNI environment of the thread running the JVMTI callback.\n+     */\n+    protected abstract void onVMStartCallback(JvmtiEnv jvmti, JNIEnvironment jni);", "originalCommit": "8fab53480ffcb0b9142541835f6350dd7d1fd889", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4Mjc5NA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r405682794", "bodyText": "JNIEnvironment, JNIJavaVM etc. are classes from our JNI implementation. JNI and JVMTI identifiers themselves also differ in that aspect: jvmtiEnv vs JNIEnv.", "author": "peter-hofer", "createdAt": "2020-04-08T17:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2MTk3MQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406061971", "bodyText": "Well, if it is onVMStartCallback then it should be onVMDeathCallback instead of onVmDeathCallback. I will change this when merging.", "author": "vjovanov", "createdAt": "2020-04-09T09:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2NTU1MQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406065551", "bodyText": "No argument there.", "author": "peter-hofer", "createdAt": "2020-04-09T09:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyNDUzMQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406124531", "bodyText": "I have updated it to onVMDeathCallback, that was an oversight on my part. I have also fixed some javadoc related warnings for @link embedded inside a @see.", "author": "gradinac", "createdAt": "2020-04-09T10:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4OTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3OTE4MQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406179181", "bodyText": "with the creation and management of", "author": "peter-hofer", "createdAt": "2020-04-09T12:48:28Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JNIHandleSetBase.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.JNIObjectHandles;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+/**\n+ * Helps with creation and manages JNI handles for JVMTI agents.", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjQ1NQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406212455", "bodyText": "I agree, will change it.", "author": "gradinac", "createdAt": "2020-04-09T13:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3OTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3OTQ3Ng==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406179476", "bodyText": "You can use @see for this.", "author": "peter-hofer", "createdAt": "2020-04-09T12:48:59Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JNIHandleSetBase.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.JNIObjectHandles;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+/**\n+ * Helps with creation and manages JNI handles for JVMTI agents.\n+ *\n+ * A JVMTI agent must provide a subclass of this class. It should contain handles to classes and\n+ * methods that are needed across different JVMTI calls (for example, a JNIObjectHandle to\n+ * java/lang/Class).\n+ *\n+ * For JNI handles that are created in a JVMTI callback and that should survive a return from native\n+ * code, a helper method {@link #newTrackedGlobalRef} is provided.\n+ *\n+ * See also: {@link com.oracle.svm.agent.core.JvmtiAgentBase}.", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjg5NQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406212895", "bodyText": "That's a good point, changed. I had tried {@see {@link}} but that didn't work - hence why it was this way.", "author": "gradinac", "createdAt": "2020-04-09T13:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3OTQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4MTM4NQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406181385", "bodyText": "guarantee at runtime is substituted and aborts the entire VM, see the substitution in Target_com_oracle_svm_core_util_VMError.shouldNotReachHere. The class must exist.", "author": "peter-hofer", "createdAt": "2020-04-09T12:52:24Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JNIHandleSetBase.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.JNIObjectHandles;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+/**\n+ * Helps with creation and manages JNI handles for JVMTI agents.\n+ *\n+ * A JVMTI agent must provide a subclass of this class. It should contain handles to classes and\n+ * methods that are needed across different JVMTI calls (for example, a JNIObjectHandle to\n+ * java/lang/Class).\n+ *\n+ * For JNI handles that are created in a JVMTI callback and that should survive a return from native\n+ * code, a helper method {@link #newTrackedGlobalRef} is provided.\n+ *\n+ * See also: {@link com.oracle.svm.agent.core.JvmtiAgentBase}.\n+ */\n+public abstract class JNIHandleSetBase {\n+    private static final int INITIAL_GLOBAL_HANDLE_CAPACITY = 16;\n+    private final ReentrantLock globalRefsLock = new ReentrantLock();\n+    private JNIObjectHandle[] globalRefs = new JNIObjectHandle[INITIAL_GLOBAL_HANDLE_CAPACITY];\n+    private int globalRefCount = 0;\n+\n+    JNIMethodId javaLangClassGetName;\n+\n+    public JNIHandleSetBase(JNIEnvironment env) {\n+        JNIObjectHandle javaLangClass = findClass(env, \"java/lang/Class\");\n+        try (CTypeConversion.CCharPointerHolder name = Support.toCString(\"getName\"); CTypeConversion.CCharPointerHolder signature = Support.toCString(\"()Ljava/lang/String;\")) {\n+            javaLangClassGetName = Support.jniFunctions().getGetMethodID().invoke(env, javaLangClass, name.get(), signature.get());\n+            guarantee(javaLangClassGetName.isNonNull());\n+        }\n+    }\n+\n+    /**\n+     * Returns a local handle to a Java class object.\n+     *\n+     * If the class is not found, a RuntimeException is thrown. If the handle must survive a return\n+     * from native code, {@link #newTrackedGlobalRef} should be used on the returned handle.", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMzUwMA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406213500", "bodyText": "I agree, the substitution changes the exception and that exception cannot be caught. I will update the docs.", "author": "gradinac", "createdAt": "2020-04-09T13:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4MTM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4MjY2NQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406182665", "bodyText": "This documentation doesn't mention that the reference is freed eventually by this class and a user might believe they are responsible for freeing it. I would just the public method newTrackedGlobalRef here.", "author": "peter-hofer", "createdAt": "2020-04-09T12:54:43Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JNIHandleSetBase.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.JNIObjectHandles;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+/**\n+ * Helps with creation and manages JNI handles for JVMTI agents.\n+ *\n+ * A JVMTI agent must provide a subclass of this class. It should contain handles to classes and\n+ * methods that are needed across different JVMTI calls (for example, a JNIObjectHandle to\n+ * java/lang/Class).\n+ *\n+ * For JNI handles that are created in a JVMTI callback and that should survive a return from native\n+ * code, a helper method {@link #newTrackedGlobalRef} is provided.\n+ *\n+ * See also: {@link com.oracle.svm.agent.core.JvmtiAgentBase}.\n+ */\n+public abstract class JNIHandleSetBase {\n+    private static final int INITIAL_GLOBAL_HANDLE_CAPACITY = 16;\n+    private final ReentrantLock globalRefsLock = new ReentrantLock();\n+    private JNIObjectHandle[] globalRefs = new JNIObjectHandle[INITIAL_GLOBAL_HANDLE_CAPACITY];\n+    private int globalRefCount = 0;\n+\n+    JNIMethodId javaLangClassGetName;\n+\n+    public JNIHandleSetBase(JNIEnvironment env) {\n+        JNIObjectHandle javaLangClass = findClass(env, \"java/lang/Class\");\n+        try (CTypeConversion.CCharPointerHolder name = Support.toCString(\"getName\"); CTypeConversion.CCharPointerHolder signature = Support.toCString(\"()Ljava/lang/String;\")) {\n+            javaLangClassGetName = Support.jniFunctions().getGetMethodID().invoke(env, javaLangClass, name.get(), signature.get());\n+            guarantee(javaLangClassGetName.isNonNull());\n+        }\n+    }\n+\n+    /**\n+     * Returns a local handle to a Java class object.\n+     *\n+     * If the class is not found, a RuntimeException is thrown. If the handle must survive a return\n+     * from native code, {@link #newTrackedGlobalRef} should be used on the returned handle.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param className The VM type signature of the class.\n+     * @return Local JNI handle representing the class object.\n+     */\n+    protected static JNIObjectHandle findClass(JNIEnvironment env, String className) {\n+        try (CTypeConversion.CCharPointerHolder name = Support.toCString(className)) {\n+            JNIObjectHandle h = Support.jniFunctions().getFindClass().invoke(env, name.get());\n+            guarantee(h.notEqual(nullHandle()));\n+            return h;\n+        }\n+    }\n+\n+    /**\n+     * A convenience method to return a global handle to a Java class object.", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxOTE4MA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406219180", "bodyText": "I agree, will add a note for this.", "author": "gradinac", "createdAt": "2020-04-09T13:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4MjY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4MzYzNQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406183635", "bodyText": "Document that this instance remembers the reference and destroys it in destroy.", "author": "peter-hofer", "createdAt": "2020-04-09T12:56:30Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JNIHandleSetBase.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.JNIObjectHandles;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+/**\n+ * Helps with creation and manages JNI handles for JVMTI agents.\n+ *\n+ * A JVMTI agent must provide a subclass of this class. It should contain handles to classes and\n+ * methods that are needed across different JVMTI calls (for example, a JNIObjectHandle to\n+ * java/lang/Class).\n+ *\n+ * For JNI handles that are created in a JVMTI callback and that should survive a return from native\n+ * code, a helper method {@link #newTrackedGlobalRef} is provided.\n+ *\n+ * See also: {@link com.oracle.svm.agent.core.JvmtiAgentBase}.\n+ */\n+public abstract class JNIHandleSetBase {\n+    private static final int INITIAL_GLOBAL_HANDLE_CAPACITY = 16;\n+    private final ReentrantLock globalRefsLock = new ReentrantLock();\n+    private JNIObjectHandle[] globalRefs = new JNIObjectHandle[INITIAL_GLOBAL_HANDLE_CAPACITY];\n+    private int globalRefCount = 0;\n+\n+    JNIMethodId javaLangClassGetName;\n+\n+    public JNIHandleSetBase(JNIEnvironment env) {\n+        JNIObjectHandle javaLangClass = findClass(env, \"java/lang/Class\");\n+        try (CTypeConversion.CCharPointerHolder name = Support.toCString(\"getName\"); CTypeConversion.CCharPointerHolder signature = Support.toCString(\"()Ljava/lang/String;\")) {\n+            javaLangClassGetName = Support.jniFunctions().getGetMethodID().invoke(env, javaLangClass, name.get(), signature.get());\n+            guarantee(javaLangClassGetName.isNonNull());\n+        }\n+    }\n+\n+    /**\n+     * Returns a local handle to a Java class object.\n+     *\n+     * If the class is not found, a RuntimeException is thrown. If the handle must survive a return\n+     * from native code, {@link #newTrackedGlobalRef} should be used on the returned handle.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param className The VM type signature of the class.\n+     * @return Local JNI handle representing the class object.\n+     */\n+    protected static JNIObjectHandle findClass(JNIEnvironment env, String className) {\n+        try (CTypeConversion.CCharPointerHolder name = Support.toCString(className)) {\n+            JNIObjectHandle h = Support.jniFunctions().getFindClass().invoke(env, name.get());\n+            guarantee(h.notEqual(nullHandle()));\n+            return h;\n+        }\n+    }\n+\n+    /**\n+     * A convenience method to return a global handle to a Java class object.\n+     *\n+     * If the class is not found, a RuntimeException is thrown.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param className Java VM type signature of the class.\n+     * @return Global JNI handle representing the class object.\n+     */\n+    protected JNIObjectHandle newClassGlobalRef(JNIEnvironment env, String className) {\n+        return newTrackedGlobalRef(env, findClass(env, className));\n+    }\n+\n+    /**\n+     * Returns a JNI method ID of a Java method.\n+     *\n+     * If the method is not found, a RuntimeException is thrown.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param clazz Handle to the class containing the method.\n+     * @param name Name of the method.\n+     * @param signature Signature of the method. See the JNI specification for more details.\n+     * @param isStatic Specifies whether the method is static or not.\n+     * @return JNI method ID of the Java method.\n+     */\n+    protected static JNIMethodId getMethodId(JNIEnvironment env, JNIObjectHandle clazz, String name, String signature, boolean isStatic) {\n+        JNIMethodId id = getMethodIdOptional(env, clazz, name, signature, isStatic);\n+        guarantee(id.isNonNull());\n+        return id;\n+    }\n+\n+    /**\n+     * Returns a JNI method ID of a Java method. If the method is not found, returns a\n+     * {@link JNIObjectHandles#nullHandle()}.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param clazz Handle to the class containing the method.\n+     * @param name Name of the method.\n+     * @param signature Signature of the method. See the JNI specification for more details.\n+     * @param isStatic Specifies whether the method is static or not.\n+     * @return JNI method ID of the Java method if found, {@link JNIObjectHandles#nullHandle}\n+     *         otherwise.\n+     */\n+    protected static JNIMethodId getMethodIdOptional(JNIEnvironment env, JNIObjectHandle clazz, String name, String signature, boolean isStatic) {\n+        try (CTypeConversion.CCharPointerHolder cname = Support.toCString(name); CTypeConversion.CCharPointerHolder csignature = Support.toCString(signature)) {\n+            if (isStatic) {\n+                return Support.jniFunctions().getGetStaticMethodID().invoke(env, clazz, cname.get(), csignature.get());\n+            } else {\n+                return Support.jniFunctions().getGetMethodID().invoke(env, clazz, cname.get(), csignature.get());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a global JNI handle of the specified local JNI handle.", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxOTMyMQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406219321", "bodyText": "Will document this part here too.", "author": "gradinac", "createdAt": "2020-04-09T13:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4MzYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4NDg4OA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406184888", "bodyText": "This might be worth a boolean destroyed to check in asserts in the methods.", "author": "peter-hofer", "createdAt": "2020-04-09T12:58:36Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JNIHandleSetBase.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.JNIObjectHandles;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+/**\n+ * Helps with creation and manages JNI handles for JVMTI agents.\n+ *\n+ * A JVMTI agent must provide a subclass of this class. It should contain handles to classes and\n+ * methods that are needed across different JVMTI calls (for example, a JNIObjectHandle to\n+ * java/lang/Class).\n+ *\n+ * For JNI handles that are created in a JVMTI callback and that should survive a return from native\n+ * code, a helper method {@link #newTrackedGlobalRef} is provided.\n+ *\n+ * See also: {@link com.oracle.svm.agent.core.JvmtiAgentBase}.\n+ */\n+public abstract class JNIHandleSetBase {\n+    private static final int INITIAL_GLOBAL_HANDLE_CAPACITY = 16;\n+    private final ReentrantLock globalRefsLock = new ReentrantLock();\n+    private JNIObjectHandle[] globalRefs = new JNIObjectHandle[INITIAL_GLOBAL_HANDLE_CAPACITY];\n+    private int globalRefCount = 0;\n+\n+    JNIMethodId javaLangClassGetName;\n+\n+    public JNIHandleSetBase(JNIEnvironment env) {\n+        JNIObjectHandle javaLangClass = findClass(env, \"java/lang/Class\");\n+        try (CTypeConversion.CCharPointerHolder name = Support.toCString(\"getName\"); CTypeConversion.CCharPointerHolder signature = Support.toCString(\"()Ljava/lang/String;\")) {\n+            javaLangClassGetName = Support.jniFunctions().getGetMethodID().invoke(env, javaLangClass, name.get(), signature.get());\n+            guarantee(javaLangClassGetName.isNonNull());\n+        }\n+    }\n+\n+    /**\n+     * Returns a local handle to a Java class object.\n+     *\n+     * If the class is not found, a RuntimeException is thrown. If the handle must survive a return\n+     * from native code, {@link #newTrackedGlobalRef} should be used on the returned handle.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param className The VM type signature of the class.\n+     * @return Local JNI handle representing the class object.\n+     */\n+    protected static JNIObjectHandle findClass(JNIEnvironment env, String className) {\n+        try (CTypeConversion.CCharPointerHolder name = Support.toCString(className)) {\n+            JNIObjectHandle h = Support.jniFunctions().getFindClass().invoke(env, name.get());\n+            guarantee(h.notEqual(nullHandle()));\n+            return h;\n+        }\n+    }\n+\n+    /**\n+     * A convenience method to return a global handle to a Java class object.\n+     *\n+     * If the class is not found, a RuntimeException is thrown.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param className Java VM type signature of the class.\n+     * @return Global JNI handle representing the class object.\n+     */\n+    protected JNIObjectHandle newClassGlobalRef(JNIEnvironment env, String className) {\n+        return newTrackedGlobalRef(env, findClass(env, className));\n+    }\n+\n+    /**\n+     * Returns a JNI method ID of a Java method.\n+     *\n+     * If the method is not found, a RuntimeException is thrown.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param clazz Handle to the class containing the method.\n+     * @param name Name of the method.\n+     * @param signature Signature of the method. See the JNI specification for more details.\n+     * @param isStatic Specifies whether the method is static or not.\n+     * @return JNI method ID of the Java method.\n+     */\n+    protected static JNIMethodId getMethodId(JNIEnvironment env, JNIObjectHandle clazz, String name, String signature, boolean isStatic) {\n+        JNIMethodId id = getMethodIdOptional(env, clazz, name, signature, isStatic);\n+        guarantee(id.isNonNull());\n+        return id;\n+    }\n+\n+    /**\n+     * Returns a JNI method ID of a Java method. If the method is not found, returns a\n+     * {@link JNIObjectHandles#nullHandle()}.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param clazz Handle to the class containing the method.\n+     * @param name Name of the method.\n+     * @param signature Signature of the method. See the JNI specification for more details.\n+     * @param isStatic Specifies whether the method is static or not.\n+     * @return JNI method ID of the Java method if found, {@link JNIObjectHandles#nullHandle}\n+     *         otherwise.\n+     */\n+    protected static JNIMethodId getMethodIdOptional(JNIEnvironment env, JNIObjectHandle clazz, String name, String signature, boolean isStatic) {\n+        try (CTypeConversion.CCharPointerHolder cname = Support.toCString(name); CTypeConversion.CCharPointerHolder csignature = Support.toCString(signature)) {\n+            if (isStatic) {\n+                return Support.jniFunctions().getGetStaticMethodID().invoke(env, clazz, cname.get(), csignature.get());\n+            } else {\n+                return Support.jniFunctions().getGetMethodID().invoke(env, clazz, cname.get(), csignature.get());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a global JNI handle of the specified local JNI handle.\n+     *\n+     * If the specified handle is a {@link JNIObjectHandles#nullHandle} a RuntimeException is\n+     * thrown.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @param ref A local JNI object handle.\n+     * @return A global JNI object handle.\n+     */\n+    public JNIObjectHandle newTrackedGlobalRef(JNIEnvironment env, JNIObjectHandle ref) {\n+        JNIObjectHandle global = Support.jniFunctions().getNewGlobalRef().invoke(env, ref);\n+        guarantee(global.notEqual(nullHandle()));\n+        globalRefsLock.lock();\n+        try {\n+            if (globalRefCount == globalRefs.length) {\n+                globalRefs = Arrays.copyOf(globalRefs, globalRefs.length * 2);\n+            }\n+            globalRefs[globalRefCount] = global;\n+            globalRefCount++;\n+        } finally {\n+            globalRefsLock.unlock();\n+        }\n+        return global;\n+    }\n+\n+    /**\n+     * Releases all global JNI handles. This class and the handles must not be used after a call to\n+     * this method.", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMTQ3NQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406221475", "bodyText": "I agree, will add it. The user should not call destroy manually, it should be called from the agent framework once the agent unloads. Will add a note.", "author": "gradinac", "createdAt": "2020-04-09T13:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4NDg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4NjI0OA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406186248", "bodyText": "Wasn't there a check that the agent hasn't been set before? I think it should stay.", "author": "peter-hofer", "createdAt": "2020-04-09T13:00:55Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JvmtiAgentBase.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * Copyright (c) 2020, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.agent.core.Support.check;\n+import static com.oracle.svm.agent.core.Support.checkJni;\n+import static com.oracle.svm.agent.core.Support.fromCString;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_THREAD_END;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_DEATH;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_INIT;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEvent.JVMTI_EVENT_VM_START;\n+import static com.oracle.svm.agent.core.jvmti.JvmtiEventMode.JVMTI_ENABLE;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+import static org.graalvm.word.WordFactory.nullPointer;\n+\n+import org.graalvm.nativeimage.CurrentIsolate;\n+import org.graalvm.nativeimage.StackValue;\n+import org.graalvm.nativeimage.UnmanagedMemory;\n+import org.graalvm.nativeimage.c.function.CEntryPoint;\n+import org.graalvm.nativeimage.c.function.CEntryPointLiteral;\n+import org.graalvm.nativeimage.c.function.CFunctionPointer;\n+import org.graalvm.nativeimage.c.struct.SizeOf;\n+import org.graalvm.nativeimage.c.type.CCharPointer;\n+import org.graalvm.nativeimage.c.type.WordPointer;\n+import org.graalvm.word.PointerBase;\n+\n+import com.oracle.svm.agent.core.jvmti.JvmtiEnv;\n+import com.oracle.svm.agent.core.jvmti.JvmtiEventCallbacks;\n+import com.oracle.svm.core.c.function.CEntryPointOptions;\n+import com.oracle.svm.core.c.function.CEntryPointSetup;\n+import com.oracle.svm.core.util.VMError;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIErrors;\n+import com.oracle.svm.jni.nativeapi.JNIJavaVM;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+import com.oracle.svm.jni.nativeapi.JNIVersion;\n+\n+/**\n+ * Base class for a JVMTI agent.\n+ *\n+ * In order to create a new JVMTI agent, you must:\n+ * <ol>\n+ * <li>Subclass {@link JNIHandleSetBase}.</li>\n+ * <li>Subclass this class and parametrize it with your @{link {@link JNIHandleSetBase} class}.</li>\n+ * <li>Create a {@link org.graalvm.nativeimage.hosted.Feature} that will register the agent using\n+ * {@link #registerAgent(JvmtiAgentBase)} in its'\n+ * {@link org.graalvm.nativeimage.hosted.Feature#afterRegistration} callback.</li>\n+ * </ol>\n+ * The created feature must then be passed to native-image on creation of shared library.\n+ *\n+ * This agent contains the bare minimum of the JVMTI events. In order to receive a a JVMTI event\n+ * that is not implemented here, you must:\n+ * <ol>\n+ * <li>Create a callback method annotated with {@link CEntryPoint} that matches the signature\n+ * (parameters and the return type) of the desired JVMTI event. The method must also be annotated\n+ * with {@link CEntryPointOptions} and must use the\n+ * {@link com.oracle.svm.agent.core.AgentIsolate.Prologue} prologue.</li>\n+ * <li>Create a {@link CEntryPointLiteral} from your callback method.</li>\n+ * <li>Set the callback in the callbacks argument of your {@link #onLoadCallback} method.</li>\n+ * <lI>Enable the event using {@link com.oracle.svm.agent.core.jvmti.JvmtiEventMode}.</lI>\n+ * </ol>\n+ *\n+ * Only one agent can be created in a single native image.\n+ *\n+ * @param <T> The subclass of {@link JNIHandleSetBase} containg the JNI handles this agent requires.\n+ */\n+@SuppressWarnings(\"JavadocReference\")\n+public abstract class JvmtiAgentBase<T extends JNIHandleSetBase> {\n+\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMInitLiteral = CEntryPointLiteral.create(JvmtiAgentBase.class, \"onVMInit\", JvmtiEnv.class, JNIEnvironment.class,\n+                    JNIObjectHandle.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMStartLiteral = CEntryPointLiteral.create(JvmtiAgentBase.class, \"onVMStart\", JvmtiEnv.class, JNIEnvironment.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onVMDeathLiteral = CEntryPointLiteral.create(JvmtiAgentBase.class, \"onVMDeath\", JvmtiEnv.class, JNIEnvironment.class);\n+    private static final CEntryPointLiteral<CFunctionPointer> onThreadEndLiteral = CEntryPointLiteral.create(JvmtiAgentBase.class, \"onThreadEnd\", JvmtiEnv.class, JNIEnvironment.class,\n+                    JNIObjectHandle.class);\n+\n+    @SuppressWarnings({\"rawtypes\"}) private static JvmtiAgentBase singleton;\n+\n+    /**\n+     * Callback method that should create your subclass of {@link JNIHandleSetBase}.\n+     *\n+     * @param env JNI environment of the thread running the JVMTI callback.\n+     * @return An instance of your {@link JNIHandleSetBase} subclass.\n+     */\n+    protected abstract JNIHandleSetBase constructJavaHandles(JNIEnvironment env);\n+\n+    /**\n+     * JVMTI Agent_OnLoad callback.\n+     *\n+     * @param vm The JNI Java VM.\n+     * @param jvmti The JVMTI environment.\n+     * @param callbacks A structure that allows setting the callbacks for JVMTI events.\n+     * @param options Command line options passed to the agent.\n+     * @return 0 on success, anything else on failure.\n+     */\n+    protected abstract int onLoadCallback(JNIJavaVM vm, JvmtiEnv jvmti, JvmtiEventCallbacks callbacks, String options);\n+\n+    /**\n+     * JVMTI Agent_OnUnload callback.\n+     *\n+     * @param vm The JNI Java VM.\n+     * @return 0 on success, anything else on failure.\n+     */\n+    protected abstract int onUnloadCallback(JNIJavaVM vm);\n+\n+    /**\n+     * JVMTI VMStart event callback.\n+     *\n+     * @param jvmti The JVMTI environment.\n+     * @param jni The JNI environment of the thread running the JVMTI callback.\n+     */\n+    protected abstract void onVMStartCallback(JvmtiEnv jvmti, JNIEnvironment jni);\n+\n+    /**\n+     * JVMTI VMInit event callback.\n+     *\n+     * @param jvmti The JVMTI environment.\n+     * @param jni The JNI environment of the thread running the JVMTI callback.\n+     * @param thread The initial thread.\n+     */\n+    protected abstract void onVMInitCallback(JvmtiEnv jvmti, JNIEnvironment jni, @SuppressWarnings(\"unused\") JNIObjectHandle thread);\n+\n+    /**\n+     * JVMTI VMDeath event callback.\n+     *\n+     * @param jvmti The JVMTI environment.\n+     * @param jni The JNi environment of the thead running the JVMTI callback.\n+     */\n+    protected abstract void onVMDeathCallback(JvmtiEnv jvmti, @SuppressWarnings(\"unused\") JNIEnvironment jni);\n+\n+    /**\n+     * Returns the JVMTI version required by the agent.\n+     *\n+     * See also: {@link com.oracle.svm.agent.core.jvmti.JvmtiInterface}\n+     *\n+     * @return The JVMTI version required by the agent.\n+     */\n+    protected abstract int getRequiredJvmtiVersion();\n+\n+    private T handles;\n+\n+    /**\n+     * Returns the JNI handle set constructed with {@link #constructJavaHandles}. The handles are\n+     * guaranteed to be created before {@link #onLoadCallback} is called.\n+     *\n+     * @return The JNI handle set constructed with {@link #constructJavaHandles}.\n+     */\n+    public T handles() {\n+        return handles;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends JNIHandleSetBase, U extends JvmtiAgentBase<T>> U singleton() {\n+        VMError.guarantee(singleton != null, \"The singleton class must be initialized.\");\n+        return (U) singleton;\n+    }\n+\n+    /**\n+     * Registers the agent singleton. This method must be called only once during a native image\n+     * build.\n+     *\n+     * @param agentSingleton The agent implementation.\n+     */\n+    @SuppressWarnings({\"rawtypes\"})\n+    protected static <T extends JNIHandleSetBase> void registerAgent(JvmtiAgentBase<T> agentSingleton) {\n+        singleton = agentSingleton;", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNDQzMw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406224433", "bodyText": "I agree, will add the check.", "author": "gradinac", "createdAt": "2020-04-09T13:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4NjI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4NzE1Nw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406187157", "bodyText": "Why are these no longer final?", "author": "peter-hofer", "createdAt": "2020-04-09T13:02:35Z", "path": "substratevm/src/com.oracle.svm.agent/src/com/oracle/svm/agent/NativeImageAgentJNIHandleSet.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent;\n+\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import com.oracle.svm.agent.core.JNIHandleSetBase;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+public class NativeImageAgentJNIHandleSet extends JNIHandleSetBase {\n+\n+    JNIMethodId javaLangClassForName3;\n+    JNIMethodId javaLangReflectMemberGetName;\n+    JNIMethodId javaLangReflectMemberGetDeclaringClass;\n+    JNIMethodId javaUtilEnumerationHasMoreElements;\n+    JNIMethodId javaUtilMissingResourceExceptionCtor3;\n+    JNIObjectHandle javaLangClassLoader;\n+    public JNIObjectHandle javaLangSecurityException;\n+    public JNIObjectHandle javaLangNoClassDefFoundError;\n+    public JNIObjectHandle javaLangNoSuchMethodError;\n+    JNIObjectHandle javaLangNoSuchMethodException;\n+    public JNIObjectHandle javaLangNoSuchFieldError;\n+    JNIObjectHandle javaLangNoSuchFieldException;\n+    JNIObjectHandle javaLangClassNotFoundException;\n+    JNIObjectHandle javaLangRuntimeException;\n+    JNIObjectHandle javaUtilMissingResourceException;", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNjI2Mw==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406226263", "bodyText": "This might've been lost when I was tweaking the modifiers. I have re-added final.", "author": "gradinac", "createdAt": "2020-04-09T14:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4NzE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4ODUyNA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406188524", "bodyText": "That's more about JVMTI agents in general. Leaving Agent shutdown [...] or using JVMTI agent shutdown [...] would be better.", "author": "peter-hofer", "createdAt": "2020-04-09T13:04:59Z", "path": "substratevm/src/com.oracle.svm.agent/src/com/oracle/svm/agent/NativeImageTracingAgent.java", "diffHunk": "@@ -644,10 +605,10 @@ public static void onUnload(@SuppressWarnings(\"unused\") JNIJavaVM vm) {\n         }\n \n         /*\n-         * Agent shutdown is tricky: apparently we can still have events at the same time as this\n-         * function executes, so we would need to synchronize. We could do this with a combined\n-         * shared+exclusive lock, but that adds some cost to all events. We choose to leak a few\n-         * handles and some memory for now -- this agent isn't supposed to be attached only\n+         * JvmtiAgentBase shutdown is tricky: apparently we can still have events at the same time", "originalCommit": "c05bedf8886e75e0389d509e7603d572dc3a5ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNzYxMQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r406227611", "bodyText": "I have changed it back to Agent shutdown [...].", "author": "gradinac", "createdAt": "2020-04-09T14:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE4ODUyNA=="}], "type": "inlineReview"}, {"oid": "e33f53fb08dc85597dd0bb94125e0f104f662e6e", "url": "https://github.com/oracle/graal/commit/e33f53fb08dc85597dd0bb94125e0f104f662e6e", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-09T14:18:30Z", "type": "forcePushed"}, {"oid": "805f2bf1bbe35c8b4baab0861cae1767af5ecef3", "url": "https://github.com/oracle/graal/commit/805f2bf1bbe35c8b4baab0861cae1767af5ecef3", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-09T15:19:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMDA0Mg==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r408010042", "bodyText": "I think this class is useful even without subclassing (although at least one instance is needed for the agent). I'd consider dropping the Base name suffix and change some methods from protected to public.", "author": "peter-hofer", "createdAt": "2020-04-14T09:51:02Z", "path": "substratevm/src/com.oracle.svm.agent.core/src/com/oracle/svm/agent/core/JNIHandleSetBase.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.agent.core;\n+\n+import static com.oracle.svm.core.util.VMError.guarantee;\n+import static com.oracle.svm.jni.JNIObjectHandles.nullHandle;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.graalvm.nativeimage.c.type.CTypeConversion;\n+\n+import com.oracle.svm.jni.JNIObjectHandles;\n+import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n+import com.oracle.svm.jni.nativeapi.JNIMethodId;\n+import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n+\n+/**\n+ * Helps with creation and management of JNI handles for JVMTI agents.\n+ *\n+ * A JVMTI agent must provide a subclass of this class. It should contain handles to classes and\n+ * methods that are needed across different JVMTI calls (for example, a JNIObjectHandle to\n+ * java/lang/Class).\n+ *\n+ * For JNI handles that are created in a JVMTI callback and that should survive a return from native\n+ * code, a helper method {@link #newTrackedGlobalRef} is provided.\n+ *\n+ * @see com.oracle.svm.agent.core.JvmtiAgentBase\n+ */\n+public abstract class JNIHandleSetBase {", "originalCommit": "805f2bf1bbe35c8b4baab0861cae1767af5ecef3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTQ5OQ==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r408095499", "bodyText": "I agree, I have dropped the base and changed the methods from protected to public.", "author": "gradinac", "createdAt": "2020-04-14T12:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMDA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMTU3OA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r408011578", "bodyText": "I'd rather keep the name NativeImageAgent, which is also consistent with the name of the build artifact. Tracing is only part of the agent functionality, the other major part being the restriction mode.", "author": "peter-hofer", "createdAt": "2020-04-14T09:53:34Z", "path": "substratevm/src/com.oracle.svm.agent/src/com/oracle/svm/agent/NativeImageTracingAgent.java", "diffHunk": "@@ -88,53 +70,58 @@\n import com.oracle.svm.configure.config.ConfigurationSet;\n import com.oracle.svm.configure.filters.FilterConfigurationParser;\n import com.oracle.svm.configure.filters.RuleNode;\n+import com.oracle.svm.configure.json.JsonPrintable;\n import com.oracle.svm.configure.json.JsonWriter;\n import com.oracle.svm.configure.trace.AccessAdvisor;\n import com.oracle.svm.configure.trace.TraceProcessor;\n import com.oracle.svm.core.FallbackExecutor;\n import com.oracle.svm.core.SubstrateUtil;\n-import com.oracle.svm.core.c.function.CEntryPointOptions;\n-import com.oracle.svm.core.c.function.CEntryPointSetup;\n import com.oracle.svm.core.configure.ConfigurationFiles;\n import com.oracle.svm.driver.NativeImage;\n import com.oracle.svm.jni.nativeapi.JNIEnvironment;\n-import com.oracle.svm.jni.nativeapi.JNIErrors;\n import com.oracle.svm.jni.nativeapi.JNIJavaVM;\n import com.oracle.svm.jni.nativeapi.JNIObjectHandle;\n-import com.oracle.svm.jni.nativeapi.JNIVersion;\n+import org.graalvm.nativeimage.hosted.Feature;\n \n-public final class Agent {\n-    public static final String AGENT_NAME = \"native-image-agent\";\n+public final class NativeImageTracingAgent extends JvmtiAgentBase<NativeImageAgentJNIHandleSet> {", "originalCommit": "805f2bf1bbe35c8b4baab0861cae1767af5ecef3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5NTc5MA==", "url": "https://github.com/oracle/graal/pull/2270#discussion_r408095790", "bodyText": "I agree with you, I have changed the name.", "author": "gradinac", "createdAt": "2020-04-14T12:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMTU3OA=="}], "type": "inlineReview"}, {"oid": "df4be6c15525eeb69f6c8f7128b26e9bc4347332", "url": "https://github.com/oracle/graal/commit/df4be6c15525eeb69f6c8f7128b26e9bc4347332", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-14T12:22:00Z", "type": "forcePushed"}, {"oid": "3f13c2ddd1ac34ded54bd4a838c1619bdf7d6dfa", "url": "https://github.com/oracle/graal/commit/3f13c2ddd1ac34ded54bd4a838c1619bdf7d6dfa", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-14T12:27:07Z", "type": "forcePushed"}, {"oid": "d80732e8ebb3007aaf92520999cd7f85c4c0c882", "url": "https://github.com/oracle/graal/commit/d80732e8ebb3007aaf92520999cd7f85c4c0c882", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-14T17:33:53Z", "type": "commit"}, {"oid": "d80732e8ebb3007aaf92520999cd7f85c4c0c882", "url": "https://github.com/oracle/graal/commit/d80732e8ebb3007aaf92520999cd7f85c4c0c882", "message": "Introduced a small JVMTI agent framework and refactored native-image-agent.", "committedDate": "2020-04-14T17:33:53Z", "type": "forcePushed"}]}