{"pr_number": 2403, "pr_title": "Expect AVX3Threshold on all JDKs >= 11", "pr_createdAt": "2020-04-27T12:07:19Z", "pr_url": "https://github.com/oracle/graal/pull/2403", "timeline": [{"oid": "ef17bb8f409868eb0871455dd7f47e4608f0b38c", "url": "https://github.com/oracle/graal/commit/ef17bb8f409868eb0871455dd7f47e4608f0b38c", "message": "Expect AVX3Threshold on all JDKs >= 11.0.6 or JDK >= 14\n\nInstead of conditionalizing flag AVX3Threshold on a JVMCI-versioned\nJDK 11, expect it for any JDK 11 >= 11.0.6\n\nCloses #2402", "committedDate": "2020-04-27T15:01:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMTgzMg==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r415901832", "bodyText": "You should use a regular expression to parse the value of the java.vm.version system property. Here are some sample values:\n11.0.7+8-LTS-jvmci-20.1-b02\n25.241-b07-jvmci-20.1-b01", "author": "dougxc", "createdAt": "2020-04-27T15:15:59Z", "path": "compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfigAccess.java", "diffHunk": "@@ -146,6 +149,19 @@ public static boolean jvmciGE(Version v) {\n         JVMCI_VERSION = Version.parse(vmVersion);\n         JVMCI_PRERELEASE = vmVersion.contains(\"SNAPSHOT\") || vmVersion.contains(\"internal\") || vmVersion.contains(\"-dev\");\n         JVMCI = JVMCI_VERSION != null || JVMCI_PRERELEASE;\n+        int jdkUpdateVers = UNSET;", "originalCommit": "ef17bb8f409868eb0871455dd7f47e4608f0b38c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0NTE5OA==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r415945198", "bodyText": "UNSET is just the default. I was trying to avoid all this version parsing mess. In particular, for this issue I'm not sure it's worth doing the right thing for JDK 8, is it? If that's needed, I'd rather have a specialized class which only deals with that and is unit-tested.\nSo if Runtime.version().update() cannot be used, how about Runtime.Version.parse(<value>) where <value> could be coming from java.vm.version property as you say?", "author": "jerboaa", "createdAt": "2020-04-27T16:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk1NjM5OA==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r415956398", "bodyText": "So I'd be something like: http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/e6178063e9dd/test/sun/misc/Version/Version.java#l139 for java.vm.version parsing for JDK 8. For JDK 9+ we really should leverage the JDK for the parsing rather than writing our own.", "author": "jerboaa", "createdAt": "2020-04-27T16:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk2NTgxNQ==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r415965815", "bodyText": "For 8, only JVMCI JDKs can be used (currently) so we can rely on JVMCI versions there.", "author": "dougxc", "createdAt": "2020-04-27T16:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk2NjUyOQ==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r415966529", "bodyText": "I think it's simplest to just use regular expressions. Something like this:\ndiff --git a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java\nindex 45eeb0aff99..4d02f306304 100644\n--- a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java\n+++ b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java\n@@ -154,7 +154,7 @@ public class GraalHotSpotVMConfig extends GraalHotSpotVMConfigAccess {\n     private final boolean useSquareToLenIntrinsic = getFlag(\"UseSquareToLenIntrinsic\", Boolean.class, false, isJDK8OrJDK11Plus);\n     public final boolean useVectorizedMismatchIntrinsic = getFlag(\"UseVectorizedMismatchIntrinsic\", Boolean.class, false, isJDK11Plus);\n     public final boolean useFMAIntrinsics = getFlag(\"UseFMA\", Boolean.class, false, JDK >= 9);\n-    public final int useAVX3Threshold = getFlag(\"AVX3Threshold\", Integer.class, 4096, osArch.equals(\"amd64\") && (JVMCI ? JDK >= 11 : JDK >= 14));\n+    public final int useAVX3Threshold = getFlag(\"AVX3Threshold\", Integer.class, 4096, osArch.equals(\"amd64\") && (JVMCI ? JDK >= 11 : JDK == 11 ? JDK_UPDATE >= 6 : JDK >= 14));\n \n     public final boolean preserveFramePointer = getFlag(\"PreserveFramePointer\", Boolean.class);\n \ndiff --git a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfigAccess.java b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfigAccess.java\nindex b99cbd6975b..b9f84d97132 100644\n--- a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfigAccess.java\n+++ b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfigAccess.java\n@@ -30,6 +30,8 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n import org.graalvm.compiler.debug.Assertions;\n@@ -137,6 +139,7 @@ public class GraalHotSpotVMConfigAccess {\n     }\n \n     public static final int JDK = JavaVersionUtil.JAVA_SPEC;\n+    public static final int JDK_UPDATE;\n     public static final boolean IS_OPENJDK = getProperty(\"java.vm.name\", \"\").startsWith(\"OpenJDK\");\n     public static final Version JVMCI_VERSION;\n     public static final boolean JVMCI;\n@@ -146,6 +149,13 @@ public class GraalHotSpotVMConfigAccess {\n         JVMCI_VERSION = Version.parse(vmVersion);\n         JVMCI_PRERELEASE = vmVersion.contains(\"SNAPSHOT\") || vmVersion.contains(\"internal\") || vmVersion.contains(\"-dev\");\n         JVMCI = JVMCI_VERSION != null || JVMCI_PRERELEASE;\n+\n+        String javaVersion = getProperty(\"java.vm.version\");\n+        Matcher m = Pattern.compile(\"(?:1.8.0_(\\\\d+))|(?:(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+))\").matcher(javaVersion);\n+        if (!m.matches()) {\n+            throw new JVMCIError(\"Unexpected java.version value: \" + javaVersion);\n+        }\n+        JDK_UPDATE = Integer.parseInt(m.group(1) != null ? m.group(1) : m.group(4));\n     }\n \n     private final List<String> missing = new ArrayList<>();", "author": "dougxc", "createdAt": "2020-04-27T16:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NDYwMw==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r415974603", "bodyText": "That's what I mean. It'll fail for all sorts of weird versions. I'm pretty sure this fails for my hypothetical JDK 8 here: java.vm.version = 25.242-b08. Since we don't need to cover JDK 8 - covered by jvmci, why would we want to craft a custom parser which then fails in strange ways. Example for JDK 14 I have here: java.vm.version = 14+36.", "author": "jerboaa", "createdAt": "2020-04-27T16:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5Mjk3Mg==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r415992972", "bodyText": "Can there really be a lot of variation in values for the java.version system property? The specification for Runtime.Version includes a regular expression for a version number and I think java.version will always be a version number as opposed a more variable version string. In any case a version string is specified to always start with a version number.\nIf your really want to rely on using Runtime.Version for parsing java.version (which I'm not objecting to), then you will have to use an overlay which is a larger change.", "author": "dougxc", "createdAt": "2020-04-27T17:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwMTgzMg=="}], "type": "inlineReview"}, {"oid": "23c482549d0022d87900a135efb6757db60027df", "url": "https://github.com/oracle/graal/commit/23c482549d0022d87900a135efb6757db60027df", "message": "Expect AVX3Threshold on all JDKs >= 11.0.6 or JDK >= 14\n\nInstead of conditionalizing flag AVX3Threshold on a JVMCI-versioned\nJDK 11, expect it for any JDK 11 >= 11.0.6\n\nCloses #2402", "committedDate": "2020-04-27T17:08:54Z", "type": "forcePushed"}, {"oid": "1567028a6320597bf1cf277e58dcdeff2ef1573b", "url": "https://github.com/oracle/graal/commit/1567028a6320597bf1cf277e58dcdeff2ef1573b", "message": "Expect AVX3Threshold on all JDKs >= 11.0.6 or JDK >= 14\n\nInstead of conditionalizing flag AVX3Threshold on a JVMCI-versioned\nJDK 11, expect it for any JDK 11 >= 11.0.6\n\nCloses #2402", "committedDate": "2020-04-28T14:00:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY1NTA4OA==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r416655088", "bodyText": "@dougxc Not sure if you rather wanted Runtime.Version.parse(System.getProperty(\"java.vm.version\")).update() here. Let me know if so.", "author": "jerboaa", "createdAt": "2020-04-28T14:23:09Z", "path": "compiler/src/org.graalvm.compiler.serviceprovider.jdk11/src/org/graalvm/compiler/serviceprovider/GraalServices.java", "diffHunk": "@@ -437,4 +437,8 @@ public static VirtualObject createVirtualObject(ResolvedJavaType type, int id, b\n         }\n         return VirtualObject.get(type, id);\n     }\n+\n+    public static int getJavaUpdateVersion() {\n+        return Runtime.version().update();", "originalCommit": "1567028a6320597bf1cf277e58dcdeff2ef1573b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2ODExNw==", "url": "https://github.com/oracle/graal/pull/2403#discussion_r416668117", "bodyText": "No, this is exactly what we want. If Runtime.Version.parse(System.getProperty(\"java.vm.version\")).update() != Runtime.version().update(), then I'd say there are bigger problems.", "author": "dougxc", "createdAt": "2020-04-28T14:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY1NTA4OA=="}], "type": "inlineReview"}, {"oid": "d6f415f48b6cc8c12182e1dd1025099b5bcf253a", "url": "https://github.com/oracle/graal/commit/d6f415f48b6cc8c12182e1dd1025099b5bcf253a", "message": "Expect AVX3Threshold on all JDKs >= 11.0.6 or JDK >= 14\n\nInstead of conditionalizing flag AVX3Threshold on a JVMCI-versioned\nJDK 11, expect it for any JDK 11 >= 11.0.6\n\nCloses #2402", "committedDate": "2020-04-28T15:05:49Z", "type": "commit"}, {"oid": "d6f415f48b6cc8c12182e1dd1025099b5bcf253a", "url": "https://github.com/oracle/graal/commit/d6f415f48b6cc8c12182e1dd1025099b5bcf253a", "message": "Expect AVX3Threshold on all JDKs >= 11.0.6 or JDK >= 14\n\nInstead of conditionalizing flag AVX3Threshold on a JVMCI-versioned\nJDK 11, expect it for any JDK 11 >= 11.0.6\n\nCloses #2402", "committedDate": "2020-04-28T15:05:49Z", "type": "forcePushed"}]}