{"pr_number": 241, "pr_title": "HH-108725 move unit tests to junit 5", "pr_createdAt": "2020-05-03T10:47:59Z", "pr_url": "https://github.com/hhru/nuts-and-bolts/pull/241", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NTc4MA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r419085780", "bodyText": "\u043c\u043e\u043a\u0438\u0442\u043e \u043d\u0435 \u0443\u043c\u0435\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438\nPowerMockito \u043d\u0435 \u0445\u043e\u0442\u044f\u0442, \u0438\u043b\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0434\u043b\u044f 5 \u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0435\u0437\u0442\u0438\n\u0432 \u0446\u0435\u043b\u043e\u043c \u0442\u0435\u0441\u0442\u044b \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0440\u0435\u0448\u0438\u043b \u0443\u0434\u0430\u043b\u0438\u0442\u044c", "author": "SCREEN88", "createdAt": "2020-05-03T10:56:37Z", "path": "nab-hibernate/src/test/java/ru/hh/nab/hibernate/routing/DataSourceRoutingFilterTest.java", "diffHunk": "@@ -1,98 +0,0 @@\n-package ru.hh.nab.hibernate.routing;\n-\n-import java.io.IOException;\n-import java.util.function.Supplier;\n-import javax.servlet.FilterChain;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletResponse;\n-import javax.servlet.http.HttpServletRequest;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import ru.hh.nab.datasource.DataSourceType;\n-import ru.hh.nab.hibernate.transaction.DataSourceContext;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.verifyStatic;\n-\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(DataSourceContext.class)\n-public class DataSourceRoutingFilterTest {", "originalCommit": "839e815e81bd82da9f4b7bb42c8fbe5b4ef19ecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5MzA5NA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420693094", "bodyText": "\u0442\u0435\u0441\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439. \u043d\u0435\u043b\u044c\u0437\u044f \u0443\u0434\u043e\u043b\u044f\u0442\u044c", "author": "dzharikhin", "createdAt": "2020-05-06T10:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3ODU4NQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420978585", "bodyText": "\u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043b \u0442\u0435\u0441\u0442", "author": "SCREEN88", "createdAt": "2020-05-06T17:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NTc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NTkzMA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r419085930", "bodyText": "\u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f", "author": "SCREEN88", "createdAt": "2020-05-03T10:58:03Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/extensions/HHJettyExtension.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package ru.hh.nab.testbase.extensions;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Predicate;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotatedFields;\n+import org.junit.platform.commons.util.ExceptionUtils;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;\n+import static org.junit.platform.commons.util.ReflectionUtils.makeAccessible;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.web.context.WebApplicationContext;\n+import ru.hh.nab.starter.server.jetty.JettyServer;\n+import ru.hh.nab.testbase.ResourceHelper;\n+\n+public class HHJettyExtension implements BeforeEachCallback, ParameterResolver {", "originalCommit": "839e815e81bd82da9f4b7bb42c8fbe5b4ef19ecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcwMjQ3MQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420702471", "bodyText": "\u043a\u0440\u0443\u0442\u043e, \u0447\u0442\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043d\u044f\u0442\u044c \u043e\u0431\u0432\u0435\u0441, \u043f\u043e\u0442\u043e\u043c \u043e\u0431\u043c\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0432\u0435\u0441\u043e\u043c \u0438\u043d\u0441\u0442\u0430\u043d\u0441 \u0438 \u0443\u0436\u0435 \u043f\u043e\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u044b. \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u044f\u043c \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u043b\u043e - \u0432\u0441\u0435 \u043a\u043e\u0441\u0442\u044b\u043b\u0438 \u0432\u043e\u043a\u0440\u0443\u0433 \u0443\u0435\u0445\u0430\u043b\u0438.\n\u043d\u043e \u043c\u0435\u043d\u044f \u043d\u0430\u043f\u0440\u044f\u0433\u0430\u0435\u0442, \u0447\u0442\u043e \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u0440\u0430\u043d\u044c\u0448\u0435\n\u043c\u044b \u043d\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0440\u0442\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043d\u0430 0 \u0438 \u043f\u043e\u0442\u043e\u043c \u0443\u0436\u0435 \u043a\u043e\u0433\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0441\u0442\u0430\u0440\u0442\u0443\u0435\u0442 \u043c\u043e\u0436\u0435\u043c \u0443\u0437\u043d\u0430\u0442\u044c \u043f\u043e\u0440\u0442. \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a\n\u043f\u043e\u0440\u0442 \u043a\u0430\u043a \u043a\u043b\u044e\u0447 - \u043f\u043b\u043e\u0445\u0430\u044f \u0438\u0434\u0435\u044f \u0438\u043c\u0445\u043e. \u043a\u043b\u044e\u0447 \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441, \u043f\u0440\u0438\u0447\u0435\u043c \u044f \u043d\u0435 \u043d\u0430\u0448\u0435\u043b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 findMostGenericBaseClass - \u044d\u0442\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0442\u044c \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432. \u0445\u0437 \u043a\u0430\u043a \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043d\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e, \u0442.\u043a. \u0442\u0430\u043c \u0432\u0435\u0442\u043e\u043a \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e", "author": "dzharikhin", "createdAt": "2020-05-06T10:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NTkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4OTc5Mg==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420689792", "bodyText": "\u0447\u0442\u043e \u0437\u0430 \u0437\u0430\u0445\u0430\u0440\u0434\u043a\u043e\u0436\u0435\u043d\u044b\u0439 \u043f\u043e\u0440\u0442?", "author": "dzharikhin", "createdAt": "2020-05-06T10:29:16Z", "path": "nab-tests/src/test/java/ru/hh/nab/starter/ServletContextHandlerTest.java", "diffHunk": "@@ -1,33 +1,34 @@\n package ru.hh.nab.starter;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.ArgumentCaptor;\n-import org.springframework.test.context.ContextConfiguration;\n-import ru.hh.nab.testbase.NabTestBase;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig;\n import ru.hh.nab.testbase.NabTestConfig;\n+import ru.hh.nab.testbase.ResourceHelper;\n+import ru.hh.nab.testbase.extensions.HHJetty;\n+import ru.hh.nab.testbase.extensions.HHJettyExtension;\n+import ru.hh.nab.testbase.extensions.OverrideNabApplication;\n \n-@ContextConfiguration(classes = {NabTestConfig.class})\n-public class ServletContextHandlerTest extends NabTestBase {\n-\n-  private ServletContextListener listener;\n-  private ClassLoader cl = new ClassLoader(getClass().getClassLoader()) {};\n+@ExtendWith({\n+    HHJettyExtension.class,\n+})\n+@SpringJUnitWebConfig({\n+    NabTestConfig.class\n+})\n+public class ServletContextHandlerTest {\n+  private static ServletContextListener listener;\n+  private static ClassLoader cl = new ClassLoader(ServletContextHandlerTest.class.getClassLoader()) {};\n \n-  @Override\n-  protected NabApplication getApplication() {\n-    listener = mock(ServletContextListener.class);\n-    return NabApplication.builder()\n-      .addListenerBean(ctx -> listener)\n-      .setContextPath(\"test\")\n-      .setClassLoader(cl)\n-      .build();\n-  }\n+  @HHJetty(port = 9007, overrideApplication = ServletContextApplication.class)", "originalCommit": "839e815e81bd82da9f4b7bb42c8fbe5b4ef19ecd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5MDM1MA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420690350", "bodyText": "\u044d\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u0435\u043d\u044c\u043a\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442)", "author": "dzharikhin", "createdAt": "2020-05-06T10:30:16Z", "path": "nab-tests/src/test/java/ru/hh/nab/starter/ServletContextHandlerTest.java", "diffHunk": "@@ -37,4 +38,16 @@ public void testServletContextInitialization() {\n     assertEquals(\"test\", servletContext.getContextPath());\n     assertEquals(cl, servletContext.getClassLoader());\n   }\n+\n+  public static class ServletContextApplication implements OverrideNabApplication {\n+    @Override\n+    public NabApplication getNabApplication() {\n+      listener = mock(ServletContextListener.class);", "originalCommit": "839e815e81bd82da9f4b7bb42c8fbe5b4ef19ecd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5Mzg2OA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420693868", "bodyText": "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f?", "author": "dzharikhin", "createdAt": "2020-05-06T10:37:10Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/extensions/HHJettyExtension.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package ru.hh.nab.testbase.extensions;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Predicate;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotatedFields;\n+import org.junit.platform.commons.util.ExceptionUtils;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;\n+import static org.junit.platform.commons.util.ReflectionUtils.makeAccessible;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.web.context.WebApplicationContext;\n+import ru.hh.nab.starter.server.jetty.JettyServer;\n+import ru.hh.nab.testbase.ResourceHelper;\n+\n+public class HHJettyExtension implements BeforeEachCallback, ParameterResolver {\n+  private static final Namespace NAMESPACE = Namespace.create(HHJettyExtension.class);", "originalCommit": "839e815e81bd82da9f4b7bb42c8fbe5b4ef19ecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcwODcwOQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420708709", "bodyText": "\u043d\u0435\u0442, \u043d\u0443\u0436\u0435\u043d \u0435\u0441\u043b\u0438 \u0437\u0430\u0445\u043e\u0442\u0438\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u0440\u0435, \u043c\u043e\u0433\u0443 \u0443\u0431\u0440\u0430\u0442\u044c", "author": "SCREEN88", "createdAt": "2020-05-06T11:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5Mzg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5NTQ1NQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420695455", "bodyText": "\u043f\u043e\u0440\u0442 \u043d\u0430\u0434\u043e \u043d\u0435 \u0445\u0430\u0440\u0434\u043a\u043e\u0434\u0438\u0442\u044c - \u0430 \u0431\u0440\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439, \u0442.\u0435. 0", "author": "dzharikhin", "createdAt": "2020-05-06T10:40:16Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/extensions/HHJettyExtension.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package ru.hh.nab.testbase.extensions;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Predicate;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotatedFields;\n+import org.junit.platform.commons.util.ExceptionUtils;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;\n+import static org.junit.platform.commons.util.ReflectionUtils.makeAccessible;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.web.context.WebApplicationContext;\n+import ru.hh.nab.starter.server.jetty.JettyServer;\n+import ru.hh.nab.testbase.ResourceHelper;\n+\n+public class HHJettyExtension implements BeforeEachCallback, ParameterResolver {\n+  private static final Namespace NAMESPACE = Namespace.create(HHJettyExtension.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(HHJettyExtension.class);\n+\n+  private static final ConcurrentMap<Integer, JettyServer> SERVERS = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void beforeEach(ExtensionContext context) {\n+    context.getRequiredTestInstances().getAllInstances()\n+        .forEach(instance -> injectInstanceFields(context, instance));\n+  }\n+\n+  @Override\n+  public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n+    boolean annotated = parameterContext.isAnnotated(HHJetty.class);\n+    if (annotated && parameterContext.getDeclaringExecutable() instanceof Constructor) {\n+      throw new ParameterResolutionException(\n+          \"@HHJetty is not supported on constructor parameters. Please use field injection instead.\");\n+    }\n+    return annotated;\n+  }\n+\n+  @Override\n+  public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n+    Class<?> parameterType = parameterContext.getParameter().getType();\n+    extensionContext.getRequiredTestClass();\n+    assertSupportedType(\"parameter\", parameterType);\n+    HHJetty annotation = parameterContext.getParameter().getAnnotation(HHJetty.class);\n+    JettyServer jettyServer = getJettyInstanceForPort(extensionContext, getOverrideNabApplication(annotation), annotation.port());\n+    if (parameterType == JettyServer.class) {\n+      return jettyServer;\n+    } else if (parameterType == ResourceHelper.class) {\n+      return new ResourceHelper(jettyServer);\n+    }\n+    throw new IllegalArgumentException();\n+  }\n+\n+  @NotNull\n+  private OverrideNabApplication getOverrideNabApplication(HHJetty annotation) {\n+    Class<? extends OverrideNabApplication> aClass = annotation.overrideApplication();\n+    if (aClass.isInterface()) {\n+      return new OverrideNabApplication() {\n+      };\n+    }\n+    try {\n+      return aClass.getDeclaredConstructor().newInstance();\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Failed to initiate OverrideNabApplication instance!\");\n+    }\n+  }\n+\n+  private void injectInstanceFields(ExtensionContext context, Object instance) {\n+    injectFields(context, instance, instance.getClass(), ReflectionUtils::isNotStatic);\n+  }\n+\n+  private void injectFields(ExtensionContext context, Object testInstance,\n+                            Class<?> testClass, Predicate<Field> predicate) {\n+    findAnnotatedFields(testClass, HHJetty.class, predicate).forEach(field -> {\n+      assertValidFieldCandidate(field);\n+      try {\n+        HHJetty annotation = field.getAnnotation(HHJetty.class);\n+        JettyServer jettyServer = getJettyInstanceForPort(context, getOverrideNabApplication(annotation), annotation.port());", "originalCommit": "839e815e81bd82da9f4b7bb42c8fbe5b4ef19ecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcwOTk1OA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420709958", "bodyText": "\u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0435\u043c\u043e", "author": "SCREEN88", "createdAt": "2020-05-06T11:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY5NTQ1NQ=="}], "type": "inlineReview"}, {"oid": "04f807fae67382fde34d5fa985aee6eb1c2895a9", "url": "https://github.com/hhru/nuts-and-bolts/commit/04f807fae67382fde34d5fa985aee6eb1c2895a9", "message": "HH-108725 fixes after review - 1", "committedDate": "2020-05-06T17:46:04Z", "type": "forcePushed"}, {"oid": "ff9a24ce16c606f28fab17aa2929614496e5791e", "url": "https://github.com/hhru/nuts-and-bolts/commit/ff9a24ce16c606f28fab17aa2929614496e5791e", "message": "HH-108725 fixes after rebase", "committedDate": "2020-05-06T18:22:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MDcwMw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420980703", "bodyText": "\u043c\u0435\u0442\u043e\u0434 \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435 \u043f\u0440\u043e \u043f\u043e\u0440\u0442", "author": "dzharikhin", "createdAt": "2020-05-06T17:52:20Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/extensions/NabTestServerExtension.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package ru.hh.nab.testbase.extensions;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Predicate;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotatedFields;\n+import org.junit.platform.commons.util.ExceptionUtils;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;\n+import static org.junit.platform.commons.util.ReflectionUtils.makeAccessible;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.web.context.WebApplicationContext;\n+import ru.hh.nab.starter.server.jetty.JettyServer;\n+import ru.hh.nab.testbase.ResourceHelper;\n+\n+public class NabTestServerExtension implements BeforeEachCallback, ParameterResolver {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(NabTestServerExtension.class);\n+\n+  private static final ConcurrentMap<String, JettyServer> SERVERS = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void beforeEach(ExtensionContext context) {\n+    context.getRequiredTestInstances().getAllInstances()\n+        .forEach(instance -> injectInstanceFields(context, instance));\n+  }\n+\n+  @Override\n+  public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n+    boolean annotated = parameterContext.isAnnotated(NabTestServer.class);\n+    if (annotated && parameterContext.getDeclaringExecutable() instanceof Constructor) {\n+      throw new ParameterResolutionException(\n+          \"@NabTestServer is not supported on constructor parameters. Please use field injection instead.\");\n+    }\n+    return annotated;\n+  }\n+\n+  @Override\n+  public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n+    Class<?> parameterType = parameterContext.getParameter().getType();\n+    extensionContext.getRequiredTestClass();\n+    assertSupportedType(\"parameter\", parameterType);\n+    NabTestServer annotation = parameterContext.getParameter().getAnnotation(NabTestServer.class);\n+    JettyServer jettyServer = getJettyInstanceForPort(extensionContext, annotation);\n+    if (parameterType == JettyServer.class) {\n+      return jettyServer;\n+    } else if (parameterType == ResourceHelper.class) {\n+      return new ResourceHelper(jettyServer);\n+    }\n+    throw new IllegalArgumentException();\n+  }\n+\n+  private void injectInstanceFields(ExtensionContext context, Object instance) {\n+    injectFields(context, instance, instance.getClass(), ReflectionUtils::isNotStatic);\n+  }\n+\n+  private void injectFields(ExtensionContext context, Object testInstance,\n+                            Class<?> testClass, Predicate<Field> predicate) {\n+    findAnnotatedFields(testClass, NabTestServer.class, predicate).forEach(field -> {\n+      assertValidFieldCandidate(field);\n+      try {\n+        NabTestServer annotation = field.getAnnotation(NabTestServer.class);\n+        JettyServer jettyServer = getJettyInstanceForPort(context, annotation);\n+        if (field.getType() == JettyServer.class) {\n+          makeAccessible(field).set(testInstance, jettyServer);\n+        } else if (field.getType() == ResourceHelper.class) {\n+          makeAccessible(field).set(testInstance, new ResourceHelper(jettyServer));\n+        } else {\n+          throw new IllegalArgumentException();\n+        }\n+      } catch (Throwable t) {\n+        ExceptionUtils.throwAsUncheckedException(t);\n+      }\n+    });\n+  }\n+\n+  private JettyServer getJettyInstanceForPort(ExtensionContext context, NabTestServer annotation) {", "originalCommit": "04f807fae67382fde34d5fa985aee6eb1c2895a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MTQ3OA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r420981478", "bodyText": "\u0430 \u0447\u0435 \u043f\u0440\u044f\u043c \u043a\u043b\u0430\u0441\u0441 \u0438 \u043d\u0435 \u0437\u0430\u044e\u0437\u0430\u0442\u044c? \u0443 \u043d\u0435\u0433\u043e \u0432\u0440\u043e\u0434\u0435 \u0441 \u0445\u044d\u0448\u043e\u043c \u0432\u0441\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0435?", "author": "dzharikhin", "createdAt": "2020-05-06T17:53:30Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/extensions/NabTestServerExtension.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package ru.hh.nab.testbase.extensions;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Predicate;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import static org.junit.platform.commons.util.AnnotationUtils.findAnnotatedFields;\n+import org.junit.platform.commons.util.ExceptionUtils;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import static org.junit.platform.commons.util.ReflectionUtils.isPrivate;\n+import static org.junit.platform.commons.util.ReflectionUtils.makeAccessible;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.web.context.WebApplicationContext;\n+import ru.hh.nab.starter.server.jetty.JettyServer;\n+import ru.hh.nab.testbase.ResourceHelper;\n+\n+public class NabTestServerExtension implements BeforeEachCallback, ParameterResolver {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(NabTestServerExtension.class);\n+\n+  private static final ConcurrentMap<String, JettyServer> SERVERS = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public void beforeEach(ExtensionContext context) {\n+    context.getRequiredTestInstances().getAllInstances()\n+        .forEach(instance -> injectInstanceFields(context, instance));\n+  }\n+\n+  @Override\n+  public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n+    boolean annotated = parameterContext.isAnnotated(NabTestServer.class);\n+    if (annotated && parameterContext.getDeclaringExecutable() instanceof Constructor) {\n+      throw new ParameterResolutionException(\n+          \"@NabTestServer is not supported on constructor parameters. Please use field injection instead.\");\n+    }\n+    return annotated;\n+  }\n+\n+  @Override\n+  public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n+    Class<?> parameterType = parameterContext.getParameter().getType();\n+    extensionContext.getRequiredTestClass();\n+    assertSupportedType(\"parameter\", parameterType);\n+    NabTestServer annotation = parameterContext.getParameter().getAnnotation(NabTestServer.class);\n+    JettyServer jettyServer = getJettyInstanceForPort(extensionContext, annotation);\n+    if (parameterType == JettyServer.class) {\n+      return jettyServer;\n+    } else if (parameterType == ResourceHelper.class) {\n+      return new ResourceHelper(jettyServer);\n+    }\n+    throw new IllegalArgumentException();\n+  }\n+\n+  private void injectInstanceFields(ExtensionContext context, Object instance) {\n+    injectFields(context, instance, instance.getClass(), ReflectionUtils::isNotStatic);\n+  }\n+\n+  private void injectFields(ExtensionContext context, Object testInstance,\n+                            Class<?> testClass, Predicate<Field> predicate) {\n+    findAnnotatedFields(testClass, NabTestServer.class, predicate).forEach(field -> {\n+      assertValidFieldCandidate(field);\n+      try {\n+        NabTestServer annotation = field.getAnnotation(NabTestServer.class);\n+        JettyServer jettyServer = getJettyInstanceForPort(context, annotation);\n+        if (field.getType() == JettyServer.class) {\n+          makeAccessible(field).set(testInstance, jettyServer);\n+        } else if (field.getType() == ResourceHelper.class) {\n+          makeAccessible(field).set(testInstance, new ResourceHelper(jettyServer));\n+        } else {\n+          throw new IllegalArgumentException();\n+        }\n+      } catch (Throwable t) {\n+        ExceptionUtils.throwAsUncheckedException(t);\n+      }\n+    });\n+  }\n+\n+  private JettyServer getJettyInstanceForPort(ExtensionContext context, NabTestServer annotation) {\n+    WebApplicationContext webApplicationContext = (WebApplicationContext) SpringExtension.getApplicationContext(context);\n+    Class<? extends OverrideNabApplication> aClass = annotation.overrideApplication();\n+    return SERVERS.compute(aClass.getName(), (key, value) -> {", "originalCommit": "04f807fae67382fde34d5fa985aee6eb1c2895a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MzU5Ng==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r421353596", "bodyText": "\u044f \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0430\u043a \u0438 \u0441\u0434\u0435\u043b\u0430\u043b, \u043d\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u0434\u0443\u043c\u0430\u043b \u0447\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u0435\u0449\u0435 \u0438 \u0438\u043c\u044f \u0442\u0440\u0435\u0434\u0430 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c, \u043d\u043e \u043f\u043e\u043a\u0430 \u043d\u0435 \u0443\u0432\u0435\u0440\u0435\u043d", "author": "SCREEN88", "createdAt": "2020-05-07T09:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MTQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1NzcyNw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r421357727", "bodyText": "\u0434\u0435\u043b\u043e \u0432 \u0442\u043e\u043c \u0447\u0442\u043e \u043f\u0440\u0438 \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u0438 \u043d\u0430 \u0441\u0442\u0430\u0440\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f n \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0432\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043a \u043a\u043b\u0430\u0441\u0441\u0443 \u0442\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0441\u0442\u044c, \u0430 \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u0442\u044c \u043a \u0442\u0440\u0435\u0434\u0443 \u0442\u043e \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0432 n \u0440\u0430\u0437 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432, \u043d\u043e \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443 \u043d\u0430\u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0438 \u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 \u0440\u0435\u0434\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c.", "author": "SCREEN88", "createdAt": "2020-05-07T09:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MTQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODk4NA==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r421418984", "bodyText": "\u0434\u0430 \u043a\u0442\u043e \u0436 \u0435\u0433\u043e \u0437\u043d\u0430\u0435\u0442 - \u0431\u0443\u0434\u0443\u0442 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u0431\u0438\u043d\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0438\u043b\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442. \u043f\u043e \u0438\u0434\u0435\u0435 \u043d\u0435 \u043a\u0440\u0443\u0442\u043e, \u0435\u0441\u043b\u0438 \u0443 \u0442\u0435\u0431\u044f \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442.\n\u043c\u0431 \u0440\u0443\u0447\u043a\u0443 \u0434\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430 \u043d\u0438\u043a\u043e\u0433\u0434\u0430? \u043d\u0443 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0438 \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443, \u0430 \u0435\u0441\u043b\u0438 \u0432\u0434\u0440\u0443\u0433 \u0443 \u0442\u0435\u0431\u044f \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0442\u043e\u0447\u043d\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c - \u043d\u0443 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439", "author": "dzharikhin", "createdAt": "2020-05-07T11:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MTQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNTg3Mw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r421335873", "bodyText": "\u0430 \u044d\u0442\u043e \u043a\u0430\u043a \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c?)", "author": "dzharikhin", "createdAt": "2020-05-07T08:38:26Z", "path": "nab-testbase/src/main/java/ru/hh/nab/testbase/extensions/NabJunitWebConfig.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ru.hh.nab.testbase.extensions;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.core.annotation.AliasFor;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+//mostly copy of SpringJUnitWebConfig\n+@ExtendWith({NabTestServerExtension.class, SpringExtension.class})\n+@ContextConfiguration\n+@WebAppConfiguration\n+@Documented\n+@Inherited\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface NabJunitWebConfig {", "originalCommit": "2d0aebe0b24e95b0e0da6294aff7adb3fc91f8d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNzU1NQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r421337555", "bodyText": "\u0430 \u044d\u0442\u043e \u0437\u0430\u043a\u043e\u043d\u043d\u043e, \u0447\u0442\u043e \u043e\u043d\u0438 \u044e\u0437\u0430\u044e\u0442 AbstractJUnit4SpringContextTests?", "author": "dzharikhin", "createdAt": "2020-05-07T08:41:02Z", "path": "nab-tests/src/test/java/ru/hh/nab/kafka/consumer/KafkaConsumerTestbase.java", "diffHunk": "@@ -4,11 +4,17 @@\n import java.util.concurrent.TimeUnit;\n import javax.inject.Inject;\n import static org.awaitility.Awaitility.await;\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Before;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;\n import ru.hh.kafka.test.TestKafkaWithJsonMessages;\n+import ru.hh.nab.kafka.KafkaTestConfig;\n \n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(classes = {KafkaTestConfig.class})\n public abstract class KafkaConsumerTestbase extends AbstractJUnit4SpringContextTests {", "originalCommit": "2d0aebe0b24e95b0e0da6294aff7adb3fc91f8d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1Mjg2MQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/241#discussion_r421352861", "bodyText": "\u043d\u0435 \u043a\u0440\u0438\u043c\u0438\u043d\u0430\u043b, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0443\u0431\u0440\u0430\u0442\u044c, \u043f\u0440\u043e\u043c\u043e\u0440\u0433\u0430\u043b", "author": "SCREEN88", "createdAt": "2020-05-07T09:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNzU1NQ=="}], "type": "inlineReview"}, {"oid": "c01facf0040069f87d9df9b176faa40204abc444", "url": "https://github.com/hhru/nuts-and-bolts/commit/c01facf0040069f87d9df9b176faa40204abc444", "message": "HH-108725 fixes after review - 2", "committedDate": "2020-05-08T12:38:58Z", "type": "forcePushed"}, {"oid": "ed1e508530dea8a8c410a926eed1da7331e5f389", "url": "https://github.com/hhru/nuts-and-bolts/commit/ed1e508530dea8a8c410a926eed1da7331e5f389", "message": "HH-108725 move unit tests to junit 5", "committedDate": "2020-05-11T14:32:19Z", "type": "commit"}, {"oid": "c6e2378b8b5cda79a6448a0508b95a7bc2421fe7", "url": "https://github.com/hhru/nuts-and-bolts/commit/c6e2378b8b5cda79a6448a0508b95a7bc2421fe7", "message": "HH-108725 fixes after rebase", "committedDate": "2020-05-11T14:32:19Z", "type": "commit"}, {"oid": "8ff7c6a387ffa345515a90beec3f958ee457aa12", "url": "https://github.com/hhru/nuts-and-bolts/commit/8ff7c6a387ffa345515a90beec3f958ee457aa12", "message": "HH-108725 add nab-testBase-old module with junit4", "committedDate": "2020-05-11T14:32:19Z", "type": "commit"}, {"oid": "a5939ecc70d512ff488264cc77e83d79f4d6ad13", "url": "https://github.com/hhru/nuts-and-bolts/commit/a5939ecc70d512ff488264cc77e83d79f4d6ad13", "message": "HH-108725 fixes after review - 2", "committedDate": "2020-05-11T14:32:19Z", "type": "commit"}, {"oid": "a5939ecc70d512ff488264cc77e83d79f4d6ad13", "url": "https://github.com/hhru/nuts-and-bolts/commit/a5939ecc70d512ff488264cc77e83d79f4d6ad13", "message": "HH-108725 fixes after review - 2", "committedDate": "2020-05-11T14:32:19Z", "type": "forcePushed"}, {"oid": "f16ad31d17bd8b267d99c116d483af8aba563e51", "url": "https://github.com/hhru/nuts-and-bolts/commit/f16ad31d17bd8b267d99c116d483af8aba563e51", "message": "[maven-release-plugin] prepare release nuts-and-bolts-parent-4.24.0", "committedDate": "2020-05-11T14:40:28Z", "type": "commit"}, {"oid": "5830f88233e399114b328c9bc3834191464ca3cb", "url": "https://github.com/hhru/nuts-and-bolts/commit/5830f88233e399114b328c9bc3834191464ca3cb", "message": "[maven-release-plugin] prepare for next development iteration", "committedDate": "2020-05-11T14:40:38Z", "type": "commit"}]}