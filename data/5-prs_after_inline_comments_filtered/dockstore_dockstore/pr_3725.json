{"pr_number": 3725, "pr_title": "Delete non-approved organizations", "pr_createdAt": "2020-08-07T23:44:43Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3725", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNTkzNw==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r467335937", "bodyText": "Path should simply be /{organizationId}. The @DELETE already says what it is doing to the org. In REST, think of paths as resources, not actions. The resource is the organization, specified by the id.", "author": "coverbeck", "createdAt": "2020-08-08T00:21:33Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -409,6 +410,31 @@ private Organization getOrganizationByIdOptionalAuth(Optional<User> user, Long o\n         }\n     }\n \n+    @DELETE\n+    @Path(\"/{organizationId}/deleteNonApprovedOrg\")", "originalCommit": "5904406f6c2e5af519ff1314145deb6aabcdc6bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMTU1OQ==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468731559", "bodyText": "Done. Changed the path to be simply /{organizationId}", "author": "ByteMap", "createdAt": "2020-08-11T17:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNTkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0Mzg2OA==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468043868", "bodyText": "Why do you have two flushes here?\nWhy do have them at all? Is it because you need it to execute before the deleting of the org?\nIf you need either or both, can you please add a code comment explaining why.", "author": "coverbeck", "createdAt": "2020-08-10T16:52:59Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/jdbi/EventDAO.java", "diffHunk": "@@ -91,6 +91,14 @@ public void deleteEventByEntryID(long entryId) {\n         currentSession().flush();\n     }\n \n+    public void deleteEventByOrganizationID(long organizationId) {\n+        currentSession().flush();\n+        Query<Event> query = this.currentSession().getNamedQuery(\"io.dockstore.webservice.core.Event.deleteByOrganizationId\");\n+        query.setParameter(\"organizationId\", organizationId);\n+        query.executeUpdate();\n+        currentSession().flush();", "originalCommit": "5904406f6c2e5af519ff1314145deb6aabcdc6bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyODM0Nw==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468728347", "bodyText": "Removed the first flush() as it was not necessary and added a comment for the second flush()", "author": "ByteMap", "createdAt": "2020-08-11T16:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0Mzg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0NDEwMg==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468044102", "bodyText": "There is a namedQuery method you should be able to use.", "author": "coverbeck", "createdAt": "2020-08-10T16:53:26Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/jdbi/EventDAO.java", "diffHunk": "@@ -91,6 +91,14 @@ public void deleteEventByEntryID(long entryId) {\n         currentSession().flush();\n     }\n \n+    public void deleteEventByOrganizationID(long organizationId) {\n+        currentSession().flush();\n+        Query<Event> query = this.currentSession().getNamedQuery(\"io.dockstore.webservice.core.Event.deleteByOrganizationId\");", "originalCommit": "5904406f6c2e5af519ff1314145deb6aabcdc6bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMDEyMg==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468730122", "bodyText": "Changed the this.currentSession().getNamedQuery() to nameQuery()", "author": "ByteMap", "createdAt": "2020-08-11T17:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0NDEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDE1MA==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468050150", "bodyText": "You are checking that it is not approved, not that it is rejected. We had some discussion about whether to also support allowing the deletion of pending organizations; if your intent is to support, which I guess it, based on the method name, then:\n\nYour error message and the annotations on line 417 and 418 should reflect both deleted and rejected.\nIt would be better to explicitly check for the states we allow deletion for rather than the states we don't allow deletion for. IOW, check for the org being rejected or pending, instead of checking that is approved. This may sound silly, since they are today logically equivalent, but maybe someday we'll add a new state, I don't know, like SUSPENDED, which we wouldn't want to be deletable. This code as is would by default allow deletion of any new states.", "author": "coverbeck", "createdAt": "2020-08-10T17:03:44Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -409,6 +410,31 @@ private Organization getOrganizationByIdOptionalAuth(Optional<User> user, Long o\n         }\n     }\n \n+    @DELETE\n+    @Path(\"/{organizationId}/deleteNonApprovedOrg\")\n+    @Timed\n+    @UnitOfWork\n+    @ApiOperation(value = \"Deletes an organization that has been rejected\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = void.class, hidden = true)\n+    @Operation(operationId = \"deleteRejectedOrPendingOrganization\", summary = \"Delete rejected organization\", description = \"Delete rejected organization\")\n+    public void deleteRejectedOrPendingOrganization(\n+            @ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\") @Auth Optional<User> user,\n+            @Parameter(description = \"Organization ID.\", name = \"organizationId\", in = ParameterIn.PATH, required = true) @PathParam(\"organizationId\") Long organizationId) {\n+        Organization organization = organizationDAO.findById(organizationId);\n+\n+        if (organization.getStatus() == Organization.ApplicationState.APPROVED) {", "originalCommit": "5904406f6c2e5af519ff1314145deb6aabcdc6bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyOTQ0NQ==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468729445", "bodyText": "Reworked the messages and descriptions to better reflect on the intentions of the endpoint. Also changed the logic to only delete if the state is at PENDING or REJECTED instead of not ACCEPTED.", "author": "ByteMap", "createdAt": "2020-08-11T17:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDQyMw==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468050423", "bodyText": "User must be required", "author": "coverbeck", "createdAt": "2020-08-10T17:04:17Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -409,6 +410,31 @@ private Organization getOrganizationByIdOptionalAuth(Optional<User> user, Long o\n         }\n     }\n \n+    @DELETE\n+    @Path(\"/{organizationId}/deleteNonApprovedOrg\")\n+    @Timed\n+    @UnitOfWork\n+    @ApiOperation(value = \"Deletes an organization that has been rejected\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = void.class, hidden = true)\n+    @Operation(operationId = \"deleteRejectedOrPendingOrganization\", summary = \"Delete rejected organization\", description = \"Delete rejected organization\")\n+    public void deleteRejectedOrPendingOrganization(\n+            @ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\") @Auth Optional<User> user,", "originalCommit": "5904406f6c2e5af519ff1314145deb6aabcdc6bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMDM4MQ==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468730381", "bodyText": "Done. User is now required.", "author": "ByteMap", "createdAt": "2020-08-11T17:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MDQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MTAwOA==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468051008", "bodyText": "You need to check if user owns the org and/or is an admin or curator. Otherwise any user could delete any org. In fixing this, please add a test that ensures a user cannot delete an org they don't have permissions to.", "author": "coverbeck", "createdAt": "2020-08-10T17:05:21Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -409,6 +410,31 @@ private Organization getOrganizationByIdOptionalAuth(Optional<User> user, Long o\n         }\n     }\n \n+    @DELETE\n+    @Path(\"/{organizationId}/deleteNonApprovedOrg\")\n+    @Timed\n+    @UnitOfWork\n+    @ApiOperation(value = \"Deletes an organization that has been rejected\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = void.class, hidden = true)\n+    @Operation(operationId = \"deleteRejectedOrPendingOrganization\", summary = \"Delete rejected organization\", description = \"Delete rejected organization\")\n+    public void deleteRejectedOrPendingOrganization(\n+            @ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\") @Auth Optional<User> user,\n+            @Parameter(description = \"Organization ID.\", name = \"organizationId\", in = ParameterIn.PATH, required = true) @PathParam(\"organizationId\") Long organizationId) {\n+        Organization organization = organizationDAO.findById(organizationId);\n+", "originalCommit": "5904406f6c2e5af519ff1314145deb6aabcdc6bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczMTM0Nw==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468731347", "bodyText": "Reworked on the endpoint so that it now features additional privileges for admin/curator; they can now delete any organizations that is rejected/pending. Normal users can only delete their organizations if and only if they are MAINTAINERS of that organization. Other normal users cannot delete other organizations that they are not a part of.", "author": "ByteMap", "createdAt": "2020-08-11T17:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MTAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2ODk4OA==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468768988", "bodyText": "I think these two lines are redundant.", "author": "coverbeck", "createdAt": "2020-08-11T18:08:16Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/jdbi/EventDAO.java", "diffHunk": "@@ -91,6 +91,17 @@ public void deleteEventByEntryID(long entryId) {\n         currentSession().flush();\n     }\n \n+    public void deleteEventByOrganizationID(long organizationId) {\n+        Query query = namedQuery(\"io.dockstore.webservice.core.Event.deleteByOrganizationId\");\n+        query.setParameter(\"organizationId\", organizationId);\n+        query.executeUpdate();\n+        // Flush after executing the DELETE query. This would force Hibernate to synchronize the state of the\n+        // current session with the database so the session can see that an organization has been deleted\n+        // NOTE: Flushing does not commit the changes; manually accessing the DB will result with no changes to the", "originalCommit": "2fc56e081f6d3fcc14b928bd0113a16abb29c13a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjg5Nw==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468822897", "bodyText": "Removed the second 'Note' line", "author": "ByteMap", "createdAt": "2020-08-11T19:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2ODk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2OTMxMw==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468769313", "bodyText": "You're deleting events here, not an organization.", "author": "coverbeck", "createdAt": "2020-08-11T18:08:53Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/jdbi/EventDAO.java", "diffHunk": "@@ -91,6 +91,17 @@ public void deleteEventByEntryID(long entryId) {\n         currentSession().flush();\n     }\n \n+    public void deleteEventByOrganizationID(long organizationId) {\n+        Query query = namedQuery(\"io.dockstore.webservice.core.Event.deleteByOrganizationId\");\n+        query.setParameter(\"organizationId\", organizationId);\n+        query.executeUpdate();\n+        // Flush after executing the DELETE query. This would force Hibernate to synchronize the state of the\n+        // current session with the database so the session can see that an organization has been deleted", "originalCommit": "2fc56e081f6d3fcc14b928bd0113a16abb29c13a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMzQxOA==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468823418", "bodyText": "Whoops, was thinking about organizations while writing that comment down. Corrected the keyword to events.", "author": "ByteMap", "createdAt": "2020-08-11T19:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2OTMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3MTI5Ng==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468771296", "bodyText": "Do you need this line? May be necessary because of the interaction with related entities, but it seems weird that you have to update it in order to delete it.\nNot 100% sure of this, but I like it better how for users you don't have to explicitly delete (clear) them here any more. For lines 433 and 434, could you accomplish via annotations instead, and just have lines 436 and 438 in this block?", "author": "coverbeck", "createdAt": "2020-08-11T18:12:27Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -409,6 +410,37 @@ private Organization getOrganizationByIdOptionalAuth(Optional<User> user, Long o\n         }\n     }\n \n+    @DELETE\n+    @Path(\"/{organizationId}\")\n+    @Timed\n+    @UnitOfWork\n+    @ApiOperation(value = \"Deletes an organization that is pending or rejected\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, hidden = true)\n+    @Operation(operationId = \"deleteRejectedOrPendingOrganization\", summary = \"Delete pending or rejected organization\", description = \"Delete pending or rejected organization\", security = @SecurityRequirement(name = \"bearer\"))\n+    public void deleteRejectedOrPendingOrganization(\n+            @Parameter(hidden = true, name = \"user\") @Auth User user,\n+            @Parameter(description = \"Organization ID.\", name = \"organizationId\", in = ParameterIn.PATH, required = true) @PathParam(\"organizationId\") Long organizationId) {\n+        Organization organization = organizationDAO.findById(organizationId);\n+        OrganizationUser orgUser = getUserOrgRole(organization, user.getId());\n+\n+        // If the user does not belong to the organization or if the user is not a maintainer of the organization\n+        // and if the user is neither an admin nor curator, then throw an error\n+        if ((orgUser == null || orgUser.getRole() != OrganizationUser.Role.MAINTAINER) && (!user.isCurator() && !user.getIsAdmin())) {\n+            throw new CustomWebApplicationException(\"You do not have access to delete this organization\", HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        // If the organization to be deleted is pending or has been rejected, then delete the organization\n+        if (organization.getStatus() == Organization.ApplicationState.PENDING || organization.getStatus() == Organization.ApplicationState.REJECTED) {\n+            organization.getStarredUsers().clear();\n+            organization.getAliases().clear();\n+\n+            eventDAO.deleteEventByOrganizationID(organizationId);\n+            organizationDAO.update(organization);", "originalCommit": "2fc56e081f6d3fcc14b928bd0113a16abb29c13a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMTYyNw==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468821627", "bodyText": "Turns out that update() is not necessary as the session has the \"up-to-date\" database changes due to flush() from eventDAO.deleteEventByOrganization. As for lines 433 and 434, I have just removed them as it is not possible to create an alias or star an organization that has not been approved.\nI had added some new tests to ensure that the rows using the FKEYS would be deleted in organization_alias, and it turns out that the API call to get the organizationByAlias checks if the organization has been approved first. Assuming the same for starred_organizations since the feature to star will not appear until the organization has been approved. However, admins/curators can bypass the restrictions and star or add an alias to an unapproved organization through swagger (not sure if this is intended)", "author": "ByteMap", "createdAt": "2020-08-11T19:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3MTI5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3MzI5OA==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468773298", "bodyText": "You have a double negative, and it's generally easier to understand positive statements, so I suggest \"You can only delete pending or rejected organizations\".", "author": "coverbeck", "createdAt": "2020-08-11T18:15:48Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -409,6 +410,37 @@ private Organization getOrganizationByIdOptionalAuth(Optional<User> user, Long o\n         }\n     }\n \n+    @DELETE\n+    @Path(\"/{organizationId}\")\n+    @Timed\n+    @UnitOfWork\n+    @ApiOperation(value = \"Deletes an organization that is pending or rejected\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, hidden = true)\n+    @Operation(operationId = \"deleteRejectedOrPendingOrganization\", summary = \"Delete pending or rejected organization\", description = \"Delete pending or rejected organization\", security = @SecurityRequirement(name = \"bearer\"))\n+    public void deleteRejectedOrPendingOrganization(\n+            @Parameter(hidden = true, name = \"user\") @Auth User user,\n+            @Parameter(description = \"Organization ID.\", name = \"organizationId\", in = ParameterIn.PATH, required = true) @PathParam(\"organizationId\") Long organizationId) {\n+        Organization organization = organizationDAO.findById(organizationId);\n+        OrganizationUser orgUser = getUserOrgRole(organization, user.getId());\n+\n+        // If the user does not belong to the organization or if the user is not a maintainer of the organization\n+        // and if the user is neither an admin nor curator, then throw an error\n+        if ((orgUser == null || orgUser.getRole() != OrganizationUser.Role.MAINTAINER) && (!user.isCurator() && !user.getIsAdmin())) {\n+            throw new CustomWebApplicationException(\"You do not have access to delete this organization\", HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        // If the organization to be deleted is pending or has been rejected, then delete the organization\n+        if (organization.getStatus() == Organization.ApplicationState.PENDING || organization.getStatus() == Organization.ApplicationState.REJECTED) {\n+            organization.getStarredUsers().clear();\n+            organization.getAliases().clear();\n+\n+            eventDAO.deleteEventByOrganizationID(organizationId);\n+            organizationDAO.update(organization);\n+            organizationDAO.delete(organization);\n+        } else { // else if the organization is not pending nor rejected, then throw an error\n+            throw new CustomWebApplicationException(\"You cannot delete an organization that is not currently pending or rejected\", HttpStatus.SC_BAD_REQUEST);", "originalCommit": "2fc56e081f6d3fcc14b928bd0113a16abb29c13a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMTg3OQ==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468821879", "bodyText": "Reworded the exception message to be more straightforward.", "author": "ByteMap", "createdAt": "2020-08-11T19:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3MzI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NDk4Mg==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468794982", "bodyText": "I think this annotation may be confusing (people may be under the impression that adding/removing anything here will have some effect.  Just make it @ApiOperation(value = \"hidden\", hidden = true)", "author": "garyluu", "createdAt": "2020-08-11T18:51:05Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -409,6 +410,37 @@ private Organization getOrganizationByIdOptionalAuth(Optional<User> user, Long o\n         }\n     }\n \n+    @DELETE\n+    @Path(\"/{organizationId}\")\n+    @Timed\n+    @UnitOfWork\n+    @ApiOperation(value = \"Deletes an organization that is pending or rejected\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, hidden = true)", "originalCommit": "2fc56e081f6d3fcc14b928bd0113a16abb29c13a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjc3NQ==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r468822775", "bodyText": "Removed the authorization of @ApiOperation and simplified it to just display hidden for its value", "author": "ByteMap", "createdAt": "2020-08-11T19:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5NDk4Mg=="}], "type": "inlineReview"}, {"oid": "91a6dea323cc950c05de68cbb090a74d7d4ca2ba", "url": "https://github.com/dockstore/dockstore/commit/91a6dea323cc950c05de68cbb090a74d7d4ca2ba", "message": "Fixed openAPI empty response body", "committedDate": "2020-08-11T21:31:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5OTYwNA==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r469399604", "bodyText": "Should be \"have been rejected\" -- the subject is plural -- \"organizations\".", "author": "coverbeck", "createdAt": "2020-08-12T16:48:33Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/OrganizationResource.java", "diffHunk": "@@ -409,6 +412,38 @@ private Organization getOrganizationByIdOptionalAuth(Optional<User> user, Long o\n         }\n     }\n \n+    @DELETE\n+    @Path(\"/{organizationId}\")\n+    @Timed\n+    @UnitOfWork\n+    @ApiOperation(value = \"hidden\", hidden = true)\n+    @Operation(operationId = \"deleteRejectedOrPendingOrganization\", summary = \"Delete pending or rejected organization\", description = \"Delete pending or rejected organization\", security = @SecurityRequirement(name = \"bearer\"))\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"204\", description = \"NO CONTENT\"),\n+            @ApiResponse(responseCode = \"400\", description = \"BAD REQUEST\"),\n+            @ApiResponse(responseCode = \"403\", description = \"FORBIDDEN\")\n+    })\n+    public void deleteRejectedOrPendingOrganization(\n+            @Parameter(hidden = true, name = \"user\") @Auth User user,\n+            @Parameter(description = \"Organization ID.\", name = \"organizationId\", in = ParameterIn.PATH, required = true) @PathParam(\"organizationId\") Long organizationId) {\n+        Organization organization = organizationDAO.findById(organizationId);\n+        OrganizationUser orgUser = getUserOrgRole(organization, user.getId());\n+\n+        // If the user does not belong to the organization or if the user is not a maintainer of the organization\n+        // and if the user is neither an admin nor curator, then throw an error\n+        if ((orgUser == null || orgUser.getRole() != OrganizationUser.Role.MAINTAINER) && (!user.isCurator() && !user.getIsAdmin())) {\n+            throw new CustomWebApplicationException(\"You do not have access to delete this organization\", HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        // If the organization to be deleted is pending or has been rejected, then delete the organization\n+        if (organization.getStatus() == Organization.ApplicationState.PENDING || organization.getStatus() == Organization.ApplicationState.REJECTED) {\n+            eventDAO.deleteEventByOrganizationID(organizationId);\n+            organizationDAO.delete(organization);\n+        } else { // else if the organization is not pending nor rejected, then throw an error\n+            throw new CustomWebApplicationException(\"You can only delete organizations that are pending or has been rejected\", HttpStatus.SC_BAD_REQUEST);", "originalCommit": "cf3bbd7083e84bad20d4ae3cab0c21a10c920b13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NjI5NQ==", "url": "https://github.com/dockstore/dockstore/pull/3725#discussion_r469576295", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-08-12T22:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5OTYwNA=="}], "type": "inlineReview"}, {"oid": "1a488988a7b66617b4043c1168d3a1e1e8ed2a7e", "url": "https://github.com/dockstore/dockstore/commit/1a488988a7b66617b4043c1168d3a1e1e8ed2a7e", "message": "Delete non-approved organizations\n\ndockstore/dockstore#3254\n\nImplemented a new endpoint '/{organizationId}/deleteNonApprovedOrg' in\nOrganizationResource to delete a non-approved organization\n\nNew endpoint would delete all rows from multiple tables using\norganizationId before deleting the organization to avoid an FKEY error\n\nAdded a cascade parameter to 'users' in Organization.java in order\nto address and delete the organizationid FKEY\n\nImplemented a new method in EventDAO.java to delete a list of events\nhaving a specific organizationId\n\nAdded a new NamedQuery to Event.java to execute the SQL statement of\ndeleting events based on a given organizationId\n\nAdded a @Consumes annotation for 'createOrganization' in order to\nspecify the content-type header as application/json so the test would\npass\n\nAdded a new test and stubObject for the new endpoint", "committedDate": "2020-08-12T22:19:27Z", "type": "commit"}, {"oid": "a93a636dee4d770338e8e5768a40ad70b53520cc", "url": "https://github.com/dockstore/dockstore/commit/a93a636dee4d770338e8e5768a40ad70b53520cc", "message": "Addressed comments and improved endpoint\n\nAPI call now allows for admins/curators to delete any rejected or\npending organizations regardless whether or not the admins/curators are\npart of\n\nRemoved 'getUsers().clear()'' and 'getCollections().clear()' from\nendpoint as the functionality of getDataFromColumn() only applies\nto those columns who have the '@JoinTable' annotation\n\nMigrated from cascade to orphanRemoval for oganization.users as\nCascadeType.REMOVE or CascadeType.ALL does not always remove\nchild entities using organizationid, which causes FKEY errors\n\nRefactored endpoint path name to be more RESTful\n\nRefactored endpoint description to match the functionality of the API\ncall\n\nRemoved the first flush() for 'deleteEventByOrganizationID' as it was\nnot necessary and included a comment for the purpose of the second\nflush()\n\nMigrated to using 'namedQuery()' for deleteEventByOrganizationID\n\nIncluded additional tests for functionality with admins/curators", "committedDate": "2020-08-12T22:19:27Z", "type": "commit"}, {"oid": "724afc88d04cb2d86322994689892d21eb6673f2", "url": "https://github.com/dockstore/dockstore/commit/724afc88d04cb2d86322994689892d21eb6673f2", "message": "Addressed PR comments", "committedDate": "2020-08-12T22:19:27Z", "type": "commit"}, {"oid": "90e00824a6a01155d527eafd4df9980057840476", "url": "https://github.com/dockstore/dockstore/commit/90e00824a6a01155d527eafd4df9980057840476", "message": "Fixed openAPI empty response body", "committedDate": "2020-08-12T22:19:27Z", "type": "commit"}, {"oid": "d572bcceb244742cf8ba53a2c2479c65d020a1f2", "url": "https://github.com/dockstore/dockstore/commit/d572bcceb244742cf8ba53a2c2479c65d020a1f2", "message": "Fixed response code description", "committedDate": "2020-08-12T22:19:27Z", "type": "commit"}, {"oid": "de2e50778cee5e844e52f06bf2f0dcabeb1cc225", "url": "https://github.com/dockstore/dockstore/commit/de2e50778cee5e844e52f06bf2f0dcabeb1cc225", "message": "Updated openapi.yaml and fixed grammar", "committedDate": "2020-08-12T22:19:27Z", "type": "commit"}, {"oid": "de2e50778cee5e844e52f06bf2f0dcabeb1cc225", "url": "https://github.com/dockstore/dockstore/commit/de2e50778cee5e844e52f06bf2f0dcabeb1cc225", "message": "Updated openapi.yaml and fixed grammar", "committedDate": "2020-08-12T22:19:27Z", "type": "forcePushed"}]}