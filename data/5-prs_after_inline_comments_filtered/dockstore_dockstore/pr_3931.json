{"pr_number": 3931, "pr_title": "feature/1781/upgrade to elasticsearch 7", "pr_createdAt": "2020-11-17T17:15:09Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3931", "timeline": [{"oid": "0e54537147e95a20d73dd5c232c129e6848b0a50", "url": "https://github.com/dockstore/dockstore/commit/0e54537147e95a20d73dd5c232c129e6848b0a50", "message": "separate endpoints for searching individual index", "committedDate": "2020-11-13T22:30:12Z", "type": "commit"}, {"oid": "b62d8d7ae568e0d529770e86e06384736ccc3b88", "url": "https://github.com/dockstore/dockstore/commit/b62d8d7ae568e0d529770e86e06384736ccc3b88", "message": "Merge branch 'develop' into feature/1781/elasticsearch7", "committedDate": "2020-11-17T18:51:58Z", "type": "commit"}, {"oid": "f258b07a2211074690b7eded772bd08249687b0a", "url": "https://github.com/dockstore/dockstore/commit/f258b07a2211074690b7eded772bd08249687b0a", "message": "update circleci ES version", "committedDate": "2020-11-17T20:43:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU3ODU0OQ==", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525578549", "bodyText": "Response is kinda redundant in these two methods (can return directly)", "author": "denis-yuen", "createdAt": "2020-11-17T22:52:00Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "diffHunk": "@@ -197,41 +197,25 @@ public Response toolsIndexGet(SecurityContext securityContext) {\n         return Response.ok().entity(0).build();\n     }\n \n+    @Override\n+    public Response entriesIndexSearch(String query, MultivaluedMap<String, String> queryParameters, SecurityContext securityContext) {\n+        final String index = \"tools,workflows\";\n+        Response response = searchIndex(query, queryParameters, index);\n+        return response;\n+    }\n+\n     @Override\n     public Response toolsIndexSearch(String query, MultivaluedMap<String, String> queryParameters, SecurityContext securityContext) {\n-        if (!config.getEsConfiguration().getHostname().isEmpty()) {\n-            try (RestClient restClient = RestClient\n-                    .builder(new HttpHost(config.getEsConfiguration().getHostname(), config.getEsConfiguration().getPort(), \"http\"))\n-                    .build()) {\n-                HttpEntity entity = query == null ? null : new NStringEntity(query, ContentType.APPLICATION_JSON);\n-                Map<String, String> parameters = new HashMap<>();\n-                // TODO: note that this is lossy if there are repeated parameters\n-                // but it looks like the elastic search http client classes don't handle it\n-                if (queryParameters != null) {\n-                    queryParameters.forEach((key, value) -> parameters.put(key, value.get(0)));\n-                }\n-                org.elasticsearch.client.Response get = restClient.performRequest(\"GET\", \"/tools,workflows/_search\", parameters, entity);\n-                if (get.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n-                    throw new CustomWebApplicationException(\"Could not submit index to elastic search\",\n-                            HttpStatus.SC_INTERNAL_SERVER_ERROR);\n-                }\n-                return Response.ok().entity(get.getEntity().getContent()).build();\n-            } catch (ResponseException e) {\n-                // Only surface these codes to the user, everything else is not entirely obvious so returning 500 instead.\n-                int[] codesToResurface = {HttpStatus.SC_BAD_REQUEST};\n-                int statusCode = e.getResponse().getStatusLine().getStatusCode();\n-                LOG.error(\"Could not use Elasticsearch search\", e);\n-                if (ArrayUtils.contains(codesToResurface, statusCode)) {\n-                    throw new CustomWebApplicationException(e.getMessage(), statusCode);\n-                } else {\n-                    throw new CustomWebApplicationException(e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n-                }\n-            } catch (IOException e2) {\n-                LOG.error(\"Could not use Elasticsearch search\", e2);\n-                throw new CustomWebApplicationException(e2.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n-            }\n-        }\n-        return Response.ok().entity(0).build();\n+        final String index = \"tools\";\n+        Response response = searchIndex(query, queryParameters, index);", "originalCommit": "f258b07a2211074690b7eded772bd08249687b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MjczNw==", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525582737", "bodyText": "The main TRS repo has the concept of a toolClass https://github.com/ga4gh/tool-registry-service-schemas/blob/develop/openapi/ga4gh-tool-discovery.yaml#L147\nThis is a parameter which filters down tools by subclass (DockstoreTool, Workflow).\nWould it be possible to have the same parameter here for consistency (leaving it blank or null to get entries/all)\nThe Strings for the ToolClasses are available here \n  \n    \n      dockstore/dockstore-webservice/src/main/java/io/openapi/api/impl/ToolClassesApiServiceImpl.java\n    \n    \n         Line 34\n      in\n      b64cb4e\n    \n    \n    \n    \n\n        \n          \n           public static final String COMMAND_LINE_TOOL = \"CommandLineTool\";", "author": "denis-yuen", "createdAt": "2020-11-17T23:01:01Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsExtendedApi.java", "diffHunk": "@@ -83,32 +83,58 @@ public Response toolsOrgGet(\n     }\n \n     @POST\n-    @Path(\"/tools/entry/_search\")\n+    @Path(\"/entries/all/_search\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    @ApiOperation(nickname = EntriesIndexSearch.OPERATION_ID, value = EntriesIndexSearch.SUMMARY, notes = EntriesIndexSearch.DESCRIPTION, response = String.class)\n+    @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = EntriesIndexSearch.OK_RESPONSE, response = String.class) })\n+    @Operation(operationId = EntriesIndexSearch.OPERATION_ID, summary = EntriesIndexSearch.SUMMARY, description = EntriesIndexSearch.DESCRIPTION, responses = {\n+            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = EntriesIndexSearch.OK_RESPONSE, content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(implementation = String.class)))\n+    })\n+    public Response entriesIndexSearch(@ApiParam(value = \"elastic search query\", required = true) String query,\n+        @Context UriInfo uriInfo, @Context SecurityContext securityContext) {\n+        return delegate.entriesIndexSearch(query, uriInfo != null ? uriInfo.getQueryParameters() : null, securityContext);\n+    }\n+\n+    @POST\n+    @Path(\"/entries/tools/_search\")\n     @Produces({ MediaType.APPLICATION_JSON })\n     @ApiOperation(nickname = ToolsIndexSearch.OPERATION_ID, value = ToolsIndexSearch.SUMMARY, notes = ToolsIndexSearch.DESCRIPTION, response = String.class)\n     @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = ToolsIndexSearch.OK_RESPONSE, response = String.class) })\n     @Operation(operationId = ToolsIndexSearch.OPERATION_ID, summary = ToolsIndexSearch.SUMMARY, description = ToolsIndexSearch.DESCRIPTION, responses = {\n             @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = ToolsIndexSearch.OK_RESPONSE, content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(implementation = String.class)))\n     })\n-    public Response toolsIndexSearch(@ApiParam(value = \"elastic search query\", required = true) String query, @Context UriInfo uriInfo,\n-        @Context SecurityContext securityContext) {\n+    public Response toolsIndexSearch(@ApiParam(value = \"elastic search query\", required = true) String query,\n+                                       @Context UriInfo uriInfo, @Context SecurityContext securityContext) {\n         return delegate.toolsIndexSearch(query, uriInfo != null ? uriInfo.getQueryParameters() : null, securityContext);\n     }\n \n     @POST\n-    @Path(\"/tools/index\")\n+    @Path(\"/entries/workflows/_search\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    @ApiOperation(nickname = WorkflowsIndexSearch.OPERATION_ID, value = WorkflowsIndexSearch.SUMMARY, notes = WorkflowsIndexSearch.DESCRIPTION, response = String.class)\n+    @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = WorkflowsIndexSearch.OK_RESPONSE, response = String.class) })\n+    @Operation(operationId = WorkflowsIndexSearch.OPERATION_ID, summary = WorkflowsIndexSearch.SUMMARY, description = WorkflowsIndexSearch.DESCRIPTION, responses = {\n+            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = WorkflowsIndexSearch.OK_RESPONSE, content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(implementation = String.class)))\n+    })\n+    public Response workflowsIndexSearch(@ApiParam(value = \"elastic search query\", required = true) String query,\n+                                     @Context UriInfo uriInfo, @Context SecurityContext securityContext) {\n+        return delegate.workflowsIndexSearch(query, uriInfo != null ? uriInfo.getQueryParameters() : null, securityContext);\n+    }\n+\n+    @POST\n+    @Path(\"/entries/index\")\n     @UnitOfWork\n     @RolesAllowed({\"curator\", \"admin\"})\n     @Produces({ MediaType.TEXT_PLAIN })\n-    @ApiOperation(value = ToolsIndexGet.SUMMARY, notes = ToolsIndexGet.DESCRIPTION, authorizations = {\n+    @ApiOperation(value = EntriesIndexGet.SUMMARY, notes = EntriesIndexGet.DESCRIPTION, authorizations = {\n         @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = Integer.class)\n-    @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = ToolsIndexGet.OK_RESPONSE) })\n-    @Operation(operationId = ToolsIndexGet.SUMMARY, summary = ToolsIndexGet.SUMMARY, description = ToolsIndexGet.DESCRIPTION, security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME), responses = {\n-        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = ToolsIndexGet.OK_RESPONSE, content = @Content(mediaType = MediaType.TEXT_PLAIN, schema = @Schema(implementation = Integer.class)))\n+    @ApiResponses(value = { @ApiResponse(code = HttpStatus.SC_OK, message = EntriesIndexGet.OK_RESPONSE) })\n+    @Operation(operationId = EntriesIndexGet.SUMMARY, summary = EntriesIndexGet.SUMMARY, description = EntriesIndexGet.DESCRIPTION, security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME), responses = {\n+        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = HttpStatus.SC_OK + \"\", description = EntriesIndexGet.OK_RESPONSE, content = @Content(mediaType = MediaType.TEXT_PLAIN, schema = @Schema(implementation = Integer.class)))\n     })\n-    public Response toolsIndexGet(@ApiParam(hidden = true) @Parameter(hidden = true) @Auth User user, @Context SecurityContext securityContext)\n+    public Response entriesIndexGet(@ApiParam(hidden = true) @Parameter(hidden = true) @Auth User user, @Context SecurityContext securityContext)", "originalCommit": "f258b07a2211074690b7eded772bd08249687b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxMTYxNw==", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525611617", "bodyText": "I don't know ES terminology very well, but it seems like you're querying an index, not submitting one.", "author": "coverbeck", "createdAt": "2020-11-18T00:18:53Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "diffHunk": "@@ -290,4 +274,41 @@ private void deleteIndex(RestClient restClient, String index) {\n             LOG.warn(\"Could not delete previous elastic search \" + index + \" index, not an issue if this is cold start\", e);\n         }\n     }\n+\n+    private Response searchIndex(String query, MultivaluedMap<String, String> queryParameters, String index) {\n+        if (!config.getEsConfiguration().getHostname().isEmpty()) {\n+            try (RestClient restClient = RestClient\n+                    .builder(new HttpHost(config.getEsConfiguration().getHostname(), config.getEsConfiguration().getPort(), \"http\"))\n+                    .build()) {\n+                HttpEntity entity = query == null ? null : new NStringEntity(query, ContentType.APPLICATION_JSON);\n+                Map<String, String> parameters = new HashMap<>();\n+                // TODO: note that this is lossy if there are repeated parameters\n+                // but it looks like the elastic search http client classes don't handle it\n+                if (queryParameters != null) {\n+                    queryParameters.forEach((key, value) -> parameters.put(key, value.get(0)));\n+                }\n+                org.elasticsearch.client.Response get = restClient.performRequest(\"GET\", \"/\" + index + \"/_search\", parameters, entity);\n+                if (get.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n+                    throw new CustomWebApplicationException(\"Could not submit \" + index + \"index to elastic search\",", "originalCommit": "f258b07a2211074690b7eded772bd08249687b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxNzI3NQ==", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r525617275", "bodyText": "This is minor, but since we someday might have dedicated indexes for services and/or notebooks, I would move this up to the top along with constants for tools and workflows. Actually it looks like you also have the index names in ElasticListener -- the index names should be defined once, ideally.", "author": "coverbeck", "createdAt": "2020-11-18T00:34:35Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java", "diffHunk": "@@ -197,41 +197,25 @@ public Response toolsIndexGet(SecurityContext securityContext) {\n         return Response.ok().entity(0).build();\n     }\n \n+    @Override\n+    public Response entriesIndexSearch(String query, MultivaluedMap<String, String> queryParameters, SecurityContext securityContext) {\n+        final String index = \"tools,workflows\";", "originalCommit": "f258b07a2211074690b7eded772bd08249687b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5e0ff15a32a0b7006321ad0da994f37128702c4", "url": "https://github.com/dockstore/dockstore/commit/d5e0ff15a32a0b7006321ad0da994f37128702c4", "message": "back to one search endpoint", "committedDate": "2020-11-18T21:59:06Z", "type": "commit"}, {"oid": "61a5cd2162834752bd3912997fec6520496129b1", "url": "https://github.com/dockstore/dockstore/commit/61a5cd2162834752bd3912997fec6520496129b1", "message": "change ES index settings, update test", "committedDate": "2020-11-19T20:08:41Z", "type": "commit"}, {"oid": "ae39f265f7e98ac9ad6092330d1c8ea490a86783", "url": "https://github.com/dockstore/dockstore/commit/ae39f265f7e98ac9ad6092330d1c8ea490a86783", "message": "Merge branch 'develop' into feature/1781/elasticsearch7", "committedDate": "2020-11-19T20:12:40Z", "type": "commit"}, {"oid": "0757aa669cdce28e3a49d90636766d1e8818b637", "url": "https://github.com/dockstore/dockstore/commit/0757aa669cdce28e3a49d90636766d1e8818b637", "message": "update endpoints for update and bulk update", "committedDate": "2020-11-19T21:25:58Z", "type": "commit"}, {"oid": "95da927ad090b4d15d61a6f3c198373a319b0f90", "url": "https://github.com/dockstore/dockstore/commit/95da927ad090b4d15d61a6f3c198373a319b0f90", "message": "Merge branch 'feature/1781/elasticsearch7' of github.com:dockstore/dockstore into feature/1781/elasticsearch7", "committedDate": "2020-11-19T21:26:09Z", "type": "commit"}, {"oid": "be429c79ad43457a71a2a7d2e833ddf355a5cac5", "url": "https://github.com/dockstore/dockstore/commit/be429c79ad43457a71a2a7d2e833ddf355a5cac5", "message": "Merge branch 'develop' into feature/1781/elasticsearch7", "committedDate": "2020-11-20T15:31:33Z", "type": "commit"}, {"oid": "3a9e2702500e0392fcbbabde0b93a7952fead650", "url": "https://github.com/dockstore/dockstore/commit/3a9e2702500e0392fcbbabde0b93a7952fead650", "message": "Merge branch 'develop' into feature/1781/elasticsearch7", "committedDate": "2020-11-24T20:52:19Z", "type": "commit"}, {"oid": "3115b79534433ca99ddd7a8e19472155f214ef31", "url": "https://github.com/dockstore/dockstore/commit/3115b79534433ca99ddd7a8e19472155f214ef31", "message": "Merge branch 'develop' into feature/1781/elasticsearch7", "committedDate": "2020-11-25T15:17:42Z", "type": "commit"}, {"oid": "1c90f3b2c75819ef384b5e161dd00f6501fec593", "url": "https://github.com/dockstore/dockstore/commit/1c90f3b2c75819ef384b5e161dd00f6501fec593", "message": "random commit for circleci", "committedDate": "2020-11-25T16:24:12Z", "type": "commit"}, {"oid": "2588b24e608833fc43d739c222cbac8c520e05b6", "url": "https://github.com/dockstore/dockstore/commit/2588b24e608833fc43d739c222cbac8c520e05b6", "message": "Merge branch 'develop' into feature/1781/elasticsearch7", "committedDate": "2020-11-25T17:52:43Z", "type": "commit"}, {"oid": "da525848f349c086c53f85992ca93d3f1cce21fd", "url": "https://github.com/dockstore/dockstore/commit/da525848f349c086c53f85992ca93d3f1cce21fd", "message": "commit for circleci", "committedDate": "2020-11-25T17:53:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTk0Nw==", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530595947", "bodyText": "Does the new ES take longer to start up?\nA more reliable way would be to run a command against the container, but probably not worth the effort. I think this is only called for a few tests. But if it's called by every test, it's going to significantly increase our build time (100 tests * 10 seconds) = 16 minutes (although we run in parallel).", "author": "coverbeck", "createdAt": "2020-11-25T19:21:24Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/common/CommonTestUtilities.java", "diffHunk": "@@ -357,9 +357,9 @@ public static void restartElasticsearch() throws Exception {\n             Container container = elasticsearch.get();\n             try {\n                 docker.restartContainer(container.id());\n-                // Wait 15 seconds for elasticsearch to become ready\n+                // Wait 25 seconds for elasticsearch to become ready\n                 // TODO: Replace with better wait\n-                Thread.sleep(15000);\n+                Thread.sleep(25000);", "originalCommit": "da525848f349c086c53f85992ca93d3f1cce21fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMTQ3OA==", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530601478", "bodyText": "Yup, the new ES wasn't starting within 15 seconds", "author": "nrzhao4", "createdAt": "2020-11-25T19:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5ODM0Mg==", "url": "https://github.com/dockstore/dockstore/pull/3931#discussion_r530598342", "bodyText": "I'd probably make these public and reference them from dockstore-webservice/src/main/java/io/dockstore/webservice/resources/proposedGA4GH/ToolsApiExtendedServiceImpl.java.", "author": "coverbeck", "createdAt": "2020-11-25T19:26:30Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/statelisteners/ElasticListener.java", "diffHunk": "@@ -63,6 +63,8 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(ElasticListener.class);\n     private static final ObjectMapper MAPPER = Jackson.newObjectMapper();\n     private static final String MAPPER_ERROR = \"Could not convert Dockstore entry to Elasticsearch object\";\n+    private static final String TOOLS_INDEX = \"tools\";", "originalCommit": "da525848f349c086c53f85992ca93d3f1cce21fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9066e17f047176c4c045b0d7f1e2d5352f4773e3", "url": "https://github.com/dockstore/dockstore/commit/9066e17f047176c4c045b0d7f1e2d5352f4773e3", "message": "changes", "committedDate": "2020-11-25T20:00:24Z", "type": "commit"}, {"oid": "ae5281f8a47c9508318a3d3e86f41891c5da9dbc", "url": "https://github.com/dockstore/dockstore/commit/ae5281f8a47c9508318a3d3e86f41891c5da9dbc", "message": "Merge branch 'develop' into feature/1781/elasticsearch7", "committedDate": "2020-11-26T21:13:19Z", "type": "commit"}, {"oid": "0a92fc7695bfe91cc445c5f2cab11cdebfb60581", "url": "https://github.com/dockstore/dockstore/commit/0a92fc7695bfe91cc445c5f2cab11cdebfb60581", "message": "Merge branch 'develop' into feature/1781/elasticsearch7", "committedDate": "2020-12-01T15:42:15Z", "type": "commit"}]}