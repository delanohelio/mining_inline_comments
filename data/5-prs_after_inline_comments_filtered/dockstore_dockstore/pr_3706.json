{"pr_number": 3706, "pr_title": "Gather remaining GitHub emails", "pr_createdAt": "2020-07-30T22:01:55Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3706", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxOTAzMA==", "url": "https://github.com/dockstore/dockstore/pull/3706#discussion_r463319030", "bodyText": "Given that you explicitly specifying the parameter here that it should throw an exception, does anybody still call the method on line 235 of User.java? If not then delete it.", "author": "coverbeck", "createdAt": "2020-07-30T23:05:34Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -751,7 +751,7 @@ public User updateLoggedInUserMetadata(@ApiParam(hidden = true)@Parameter(hidden\n         if (source.equals(TokenType.GOOGLE_COM)) {\n             updateGoogleAccessToken(user.getId());\n         }\n-        dbuser.updateUserMetadata(tokenDAO, source);\n+        dbuser.updateUserMetadata(tokenDAO, source, true);", "originalCommit": "cdebbbd88464bedf4bd702bc874291058d0a858d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNjA1Mg==", "url": "https://github.com/dockstore/dockstore/pull/3706#discussion_r463326052", "bodyText": "There are still uses of the method in line 235. The method in line 235 is only used when there is no source specified, but in this case, a source exists so dbuser is calling directly on updateUserMetadata on line 250. As for the test, I don't see any existing tests for updateUserMetadata. I have started with adding a new test for the endpoint.", "author": "ByteMap", "createdAt": "2020-07-30T23:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxOTAzMA=="}], "type": "inlineReview"}, {"oid": "b553d02c1a42fa4e0737f65714afd52aec0ebe55", "url": "https://github.com/dockstore/dockstore/commit/b553d02c1a42fa4e0737f65714afd52aec0ebe55", "message": "Gather remaining GitHub emails\n\nSEAB-1532\n\nThe API method updateUserMetadata() will no longer throw an error\nwhen no GitHub or Google tokens are found to ensure that the metadata\nis updated for users with tokens\n\nIncluded a new updateUserMetadata() signature that is only affiliated\nwith the endpoint /users/updateUserMetadata\n\nIncluded a boolean parameter to the main updateUserMetadata() method\nto toggle the option to throw an error when no GitHub or Google tokens\nare found\n\nAdded a check in the if-statements of the main updateUserMetadata()\nmethod to see if errors should be thrown if tokens do not exist\n\nRefactored existing calls to updateUserMetadata() to include a boolean\nparameter", "committedDate": "2020-08-03T01:58:39Z", "type": "commit"}, {"oid": "db81f65b26c513376199a8f4905a0a090023f4e3", "url": "https://github.com/dockstore/dockstore/commit/db81f65b26c513376199a8f4905a0a090023f4e3", "message": "Reformatted logic for toggling throwing exceptions and added tests", "committedDate": "2020-08-03T01:58:39Z", "type": "commit"}, {"oid": "db81f65b26c513376199a8f4905a0a090023f4e3", "url": "https://github.com/dockstore/dockstore/commit/db81f65b26c513376199a8f4905a0a090023f4e3", "message": "Reformatted logic for toggling throwing exceptions and added tests", "committedDate": "2020-08-03T01:58:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NDQ3OQ==", "url": "https://github.com/dockstore/dockstore/pull/3706#discussion_r464564479", "bodyText": "Document new parameter", "author": "coverbeck", "createdAt": "2020-08-03T17:41:08Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -243,28 +247,34 @@ public void updateUserMetadata(final TokenDAO tokenDAO) {\n      * @param tokenDAO The TokenDAO to access the user's tokens\n      * @param source   The source to update the user's profile (GITHUB_COM, GOOGLE_COM, NULL)\n      */", "originalCommit": "db81f65b26c513376199a8f4905a0a090023f4e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYzOTc2Ng==", "url": "https://github.com/dockstore/dockstore/pull/3706#discussion_r464639766", "bodyText": "Done, somehow overlooked this comment.", "author": "ByteMap", "createdAt": "2020-08-03T20:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NDQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2ODYyMQ==", "url": "https://github.com/dockstore/dockstore/pull/3706#discussion_r464568621", "bodyText": "If you delete the Dockstore token, then all authenticated endpoints are going to fail; it shouldn't even get into UserResource.updateUserMetadata. So then you are testing that the method is not being called at all, which isn't that useful in this scenario.\nNote: if you were debugging this and seeing the method get invoked and seeming to contradict my previous statement, that would have been because the token is cached, and so even after you delete the token, calls may work for a bit. But it's not deterministic and you shouldn't rely on it.\nThis is a long-winded way of saying you should just delete the GitHub and/or Google tokens, not the Dockstore tokens.", "author": "coverbeck", "createdAt": "2020-08-03T17:48:04Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -562,4 +562,71 @@ public void testSetUserPrivilege() {\n             assertEquals(HttpStatus.SC_FORBIDDEN, ex.getCode());\n         }\n     }\n+\n+    /**\n+     * Tests the endpoint used to sync all users' Github information called by a user who has a valid GitHub token\n+     * and one user who has a missing or outdated GitHub token\n+     */\n+    @Test\n+    public void testUpdateUserMetadataWithTokens() {\n+        io.dockstore.openapi.client.ApiClient adminWebClient = getOpenAPIWebClient(ADMIN_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.ApiClient userWebClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.api.UsersApi adminApi = new io.dockstore.openapi.client.api.UsersApi(adminWebClient);\n+        io.dockstore.openapi.client.api.UsersApi userApi = new io.dockstore.openapi.client.api.UsersApi(userWebClient);\n+        io.dockstore.openapi.client.model.User admin = adminApi.getUser();\n+        io.dockstore.openapi.client.model.Profile userProfile = userApi.getUser().getUserProfiles().get(\"github.com\");\n+\n+        // Should add a test above this to check that the API call should pass once the admin tokens are up to date\n+        // Testing that the updateLoggedInUserMetadata() should fail if GitHub tokens are expired or absent\n+        testingPostgres.runUpdateStatement(String.format(\"DELETE FROM token WHERE userid = %d\", admin.getId()));\n+        try {\n+            adminApi.updateLoggedInUserMetadata(\"github.com\");\n+            fail(\"API call should fail and throw an error when no GitHub tokens are found or if tokens are out of date\");\n+        } catch (io.dockstore.openapi.client.ApiException ex) {\n+            assertEquals(HttpStatus.SC_FORBIDDEN, ex.getCode());\n+        }\n+\n+        // DockstoreUser2's profile elements should be initially set to null since the GitHub metadata isn't synced yet\n+        assertNull(userProfile.getEmail());\n+        assertNull(userProfile.getAvatarURL());\n+        assertNull(userProfile.getLocation());\n+\n+        // The API call updateUserMetadata() should not throw an error and exit if any users' tokens are out of date or absent\n+        // Additionally, the API call should go through and sync DockstoreTestUser2's GitHub data\n+        userApi.updateUserMetadata();\n+\n+        userProfile = userApi.getUser().getUserProfiles().get(\"github.com\");\n+        assertEquals(\"dockstore.test.user2@gmail.com\", userProfile.getEmail());\n+        assertEquals(\"https://avatars1.githubusercontent.com/u/17859829?v=4\", userProfile.getAvatarURL());\n+        assertEquals(\"Toronto\", userProfile.getLocation());\n+    }\n+\n+    /**\n+     * Tests the endpoint while all users have no valid GitHub token and the caller also does not have a valid token\n+     */\n+    @Test\n+    public void testUpdateUserMetadataWithoutTokens() {\n+        io.dockstore.openapi.client.ApiClient adminWebClient = getOpenAPIWebClient(ADMIN_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.ApiClient userWebClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.api.UsersApi adminApi = new io.dockstore.openapi.client.api.UsersApi(adminWebClient);\n+        io.dockstore.openapi.client.api.UsersApi userApi = new io.dockstore.openapi.client.api.UsersApi(userWebClient);\n+        io.dockstore.openapi.client.model.User admin = adminApi.getUser();\n+        io.dockstore.openapi.client.model.Profile userProfile = userApi.getUser().getUserProfiles().get(\"github.com\");\n+\n+        // Delete all of the tokens for every user\n+        testingPostgres.runUpdateStatement(\"DELETE FROM token\");", "originalCommit": "db81f65b26c513376199a8f4905a0a090023f4e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYzMzI3OQ==", "url": "https://github.com/dockstore/dockstore/pull/3706#discussion_r464633279", "bodyText": "Done. Dockstore tokens are now left alone so the authenticated endpoints can be called successfully.", "author": "ByteMap", "createdAt": "2020-08-03T20:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2ODYyMQ=="}], "type": "inlineReview"}, {"oid": "86b1a47558f5ab870a128a8c7b4a56a3c96dfb4a", "url": "https://github.com/dockstore/dockstore/commit/86b1a47558f5ab870a128a8c7b4a56a3c96dfb4a", "message": "Updated test to not delete dockstore tokens", "committedDate": "2020-08-03T18:19:24Z", "type": "commit"}, {"oid": "347d5a8b67aafbbe0a7264c0aa031699a744b2d4", "url": "https://github.com/dockstore/dockstore/commit/347d5a8b67aafbbe0a7264c0aa031699a744b2d4", "message": "Documented new parameter", "committedDate": "2020-08-03T20:17:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc5ODIzMg==", "url": "https://github.com/dockstore/dockstore/pull/3706#discussion_r464798232", "bodyText": "Comment is not quite correct, but I would only fix if you have to make other changes.", "author": "coverbeck", "createdAt": "2020-08-04T04:53:17Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -562,4 +562,71 @@ public void testSetUserPrivilege() {\n             assertEquals(HttpStatus.SC_FORBIDDEN, ex.getCode());\n         }\n     }\n+\n+    /**\n+     * Tests the endpoint used to sync all users' Github information called by a user who has a valid GitHub token\n+     * and one user who has a missing or outdated GitHub token\n+     */\n+    @Test\n+    public void testUpdateUserMetadataWithTokens() {\n+        io.dockstore.openapi.client.ApiClient adminWebClient = getOpenAPIWebClient(ADMIN_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.ApiClient userWebClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.api.UsersApi adminApi = new io.dockstore.openapi.client.api.UsersApi(adminWebClient);\n+        io.dockstore.openapi.client.api.UsersApi userApi = new io.dockstore.openapi.client.api.UsersApi(userWebClient);\n+        io.dockstore.openapi.client.model.User admin = adminApi.getUser();\n+        io.dockstore.openapi.client.model.Profile userProfile = userApi.getUser().getUserProfiles().get(\"github.com\");\n+\n+        // Should add a test above this to check that the API call should pass once the admin tokens are up to date\n+        // Testing that the updateLoggedInUserMetadata() should fail if GitHub tokens are expired or absent\n+        testingPostgres.runUpdateStatement(String.format(\"DELETE FROM token WHERE userid = %d\", admin.getId()));\n+        try {\n+            adminApi.updateLoggedInUserMetadata(\"github.com\");\n+            fail(\"API call should fail and throw an error when no GitHub tokens are found or if tokens are out of date\");\n+        } catch (io.dockstore.openapi.client.ApiException ex) {\n+            assertEquals(HttpStatus.SC_FORBIDDEN, ex.getCode());\n+        }\n+\n+        // DockstoreUser2's profile elements should be initially set to null since the GitHub metadata isn't synced yet\n+        assertNull(userProfile.getEmail());\n+        assertNull(userProfile.getAvatarURL());\n+        assertNull(userProfile.getLocation());\n+\n+        // The API call updateUserMetadata() should not throw an error and exit if any users' tokens are out of date or absent\n+        // Additionally, the API call should go through and sync DockstoreTestUser2's GitHub data\n+        userApi.updateUserMetadata();\n+\n+        userProfile = userApi.getUser().getUserProfiles().get(\"github.com\");\n+        assertEquals(\"dockstore.test.user2@gmail.com\", userProfile.getEmail());\n+        assertEquals(\"https://avatars1.githubusercontent.com/u/17859829?v=4\", userProfile.getAvatarURL());\n+        assertEquals(\"Toronto\", userProfile.getLocation());\n+    }\n+\n+    /**\n+     * Tests the endpoint while all users have no valid GitHub token and the caller also does not have a valid token\n+     */\n+    @Test\n+    public void testUpdateUserMetadataWithoutTokens() {\n+        io.dockstore.openapi.client.ApiClient adminWebClient = getOpenAPIWebClient(ADMIN_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.ApiClient userWebClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.api.UsersApi adminApi = new io.dockstore.openapi.client.api.UsersApi(adminWebClient);\n+        io.dockstore.openapi.client.api.UsersApi userApi = new io.dockstore.openapi.client.api.UsersApi(userWebClient);\n+        io.dockstore.openapi.client.model.User admin = adminApi.getUser();\n+        io.dockstore.openapi.client.model.Profile userProfile = userApi.getUser().getUserProfiles().get(\"github.com\");\n+\n+        // Delete all of the tokens for every user", "originalCommit": "347d5a8b67aafbbe0a7264c0aa031699a744b2d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae62285332f0b277a47a9e89555152610cfa458c", "url": "https://github.com/dockstore/dockstore/commit/ae62285332f0b277a47a9e89555152610cfa458c", "message": "Merge branch 'develop' into feature/SEAB-1532/gatherRemainingEmails", "committedDate": "2020-08-04T22:44:45Z", "type": "commit"}, {"oid": "9daae10481f15a943ec0108be0b41f08096cddba", "url": "https://github.com/dockstore/dockstore/commit/9daae10481f15a943ec0108be0b41f08096cddba", "message": "Updated comment and rebased from develop", "committedDate": "2020-08-04T22:53:14Z", "type": "commit"}]}