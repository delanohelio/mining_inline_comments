{"pr_number": 3693, "pr_title": "Feature/3574/update admin curator status", "pr_createdAt": "2020-07-24T21:18:49Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3693", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDU4OA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460294588", "bodyText": "Think this will pass if no exception is thrown", "author": "denis-yuen", "createdAt": "2020-07-24T21:24:21Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -513,4 +513,41 @@ public void testUpdateUserMetadataFromGithub() {\n         assertEquals(\"DockstoreTestUser2\", userProfile.getUsername());\n     }\n \n+    @Test\n+    public void testSetUserPrivilege() {\n+        ApiClient adminWebClient = getWebClient(ADMIN_USERNAME, testingPostgres);\n+        ApiClient userWebClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+\n+        PrivilegeRequest privilegeRequest = new PrivilegeRequest();\n+        UsersApi adminApi = new UsersApi(adminWebClient);\n+        UsersApi userApi = new UsersApi(userWebClient);\n+        User admin = adminApi.getUser();\n+        User user = userApi.getUser();\n+\n+        privilegeRequest.setAdmin(false);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertFalse(userApi.getUser().isCurator());\n+\n+        privilegeRequest.setCurator(true);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertTrue(userApi.getUser().isCurator());\n+\n+        try {\n+            userApi.setUserPrivilege(admin.getId(), privilegeRequest);\n+        } catch (ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);", "originalCommit": "06100d7decc5bba2dd8fe74bf7923e6cb3c064ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwMzU5NA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460303594", "bodyText": "Not sure what you mean exactly. Im testing if the exception is thrown correctly if a curator tries to add admin privileges, since a curator should not be able to add/remove admin privileges.", "author": "ByteMap", "createdAt": "2020-07-24T21:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNTc5Nw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460305797", "bodyText": "If your\ntry {\n  userApi.setUserPrivilege(admin.getId(), privilegeRequest);\n}\n\nwas instead\ntry {\n  // Do absolutely nothing\n}\n\nyour test still passes.\nSo you need to:\ntry {\n  userApi.setUserPrivilege(admin.getId(), privilegeRequest);\n  assertFail(\"Should have triggered an exception\");\n}", "author": "garyluu", "createdAt": "2020-07-24T21:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNzU3Mw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460307573", "bodyText": "Ah gotcha, thanks for the clarification!", "author": "ByteMap", "createdAt": "2020-07-24T22:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDYzNw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460294637", "bodyText": "Ditto", "author": "denis-yuen", "createdAt": "2020-07-24T21:24:30Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -513,4 +513,41 @@ public void testUpdateUserMetadataFromGithub() {\n         assertEquals(\"DockstoreTestUser2\", userProfile.getUsername());\n     }\n \n+    @Test\n+    public void testSetUserPrivilege() {\n+        ApiClient adminWebClient = getWebClient(ADMIN_USERNAME, testingPostgres);\n+        ApiClient userWebClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+\n+        PrivilegeRequest privilegeRequest = new PrivilegeRequest();\n+        UsersApi adminApi = new UsersApi(adminWebClient);\n+        UsersApi userApi = new UsersApi(userWebClient);\n+        User admin = adminApi.getUser();\n+        User user = userApi.getUser();\n+\n+        privilegeRequest.setAdmin(false);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertFalse(userApi.getUser().isCurator());\n+\n+        privilegeRequest.setCurator(true);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertTrue(userApi.getUser().isCurator());\n+\n+        try {\n+            userApi.setUserPrivilege(admin.getId(), privilegeRequest);\n+        } catch (ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        privilegeRequest.setAdmin(true);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertTrue(userApi.getUser().isIsAdmin());\n+\n+        privilegeRequest.setAdmin(false);\n+        try {\n+            adminApi.setUserPrivilege(admin.getId(), privilegeRequest);\n+        } catch (ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);", "originalCommit": "06100d7decc5bba2dd8fe74bf7923e6cb3c064ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNDEyNg==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460304126", "bodyText": "Same for above, but in the case where the admin tries to remove themselves. Talked to Charles about it and it may be an issue if an admin were to accidentally remove admin privileges for themselves, which is why an error is thrown if an admin were to try and remove themselves.", "author": "ByteMap", "createdAt": "2020-07-24T21:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Njg1Nw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460296857", "bodyText": "Not sure I'm reading correctly\nIt seems possible to simplify, is this something akin to :\nonly admins can create admins, curators and admins can create curators?", "author": "denis-yuen", "createdAt": "2020-07-24T21:30:57Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -747,6 +748,33 @@ public User updateLoggedInUserMetadata(@ApiParam(hidden = true)@Parameter(hidden\n         return dbuser;\n     }\n \n+    @PUT\n+    @Timed\n+    @UnitOfWork\n+    @RolesAllowed({\"admin\", \"curator\"})\n+    @Path(\"/user/{userId}/privileges\")\n+    @Operation(operationId = \"addUserPrivileges\", description = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = User.class)\n+    public User setUserPrivilege(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\")@Auth User authUser,\n+                                 @ApiParam(value = \"User ID\", required = true) @PathParam(\"userId\") Long userID,\n+                                 @ApiParam(value = \"Set privilege for a user\", required = true) PrivilegeRequest privilegeRequest) {\n+        User user = userDAO.findById(userID);\n+        if (user == null) {\n+            throw new CustomWebApplicationException(\"User not found\", HttpStatus.SC_NOT_FOUND);\n+        }\n+\n+        if (privilegeRequest.isAdmin() != user.getIsAdmin() && !authUser.getIsAdmin()) {", "originalCommit": "06100d7decc5bba2dd8fe74bf7923e6cb3c064ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwMjU5Ng==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460302596", "bodyText": "Right, only admins can create/remove admins with the exception of the admin removing admin privileges for themselves, but both admins and curators can create/remove curators.", "author": "ByteMap", "createdAt": "2020-07-24T21:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Njg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwOTk3Ng==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460309976", "bodyText": "Agreed, it is a little complex and a little hard to read.\nI suggest just not allowing a user to modify their own privileges, period. Add that as a test after line 764. Then  the logic is not buried in another else if.", "author": "coverbeck", "createdAt": "2020-07-24T22:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Njg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyOTc1Ng==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461129756", "bodyText": "Added the logic to prevent a user to modify their own privileges after line 764.", "author": "ByteMap", "createdAt": "2020-07-27T19:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5Njg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwOTI5MA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460309290", "bodyText": "authUser == user is not correct; that verifies if they are the same objects, not if they are equal. You need to compare ids.", "author": "coverbeck", "createdAt": "2020-07-24T22:10:57Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -747,6 +748,33 @@ public User updateLoggedInUserMetadata(@ApiParam(hidden = true)@Parameter(hidden\n         return dbuser;\n     }\n \n+    @PUT\n+    @Timed\n+    @UnitOfWork\n+    @RolesAllowed({\"admin\", \"curator\"})\n+    @Path(\"/user/{userId}/privileges\")\n+    @Operation(operationId = \"addUserPrivileges\", description = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = User.class)\n+    public User setUserPrivilege(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\")@Auth User authUser,\n+                                 @ApiParam(value = \"User ID\", required = true) @PathParam(\"userId\") Long userID,\n+                                 @ApiParam(value = \"Set privilege for a user\", required = true) PrivilegeRequest privilegeRequest) {\n+        User user = userDAO.findById(userID);\n+        if (user == null) {\n+            throw new CustomWebApplicationException(\"User not found\", HttpStatus.SC_NOT_FOUND);\n+        }\n+\n+        if (privilegeRequest.isAdmin() != user.getIsAdmin() && !authUser.getIsAdmin()) {\n+            throw new CustomWebApplicationException(\"You do not have privileges to set/remove administrative rights\", HttpStatus.SC_FORBIDDEN);\n+        } else if (privilegeRequest.isAdmin() != user.getIsAdmin() && authUser == user) {", "originalCommit": "06100d7decc5bba2dd8fe74bf7923e6cb3c064ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODg5NQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461128895", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-27T19:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwOTI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxMDc3OA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460310778", "bodyText": "Instead of set/remove, I suggest modify", "author": "coverbeck", "createdAt": "2020-07-24T22:15:44Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -747,6 +748,33 @@ public User updateLoggedInUserMetadata(@ApiParam(hidden = true)@Parameter(hidden\n         return dbuser;\n     }\n \n+    @PUT\n+    @Timed\n+    @UnitOfWork\n+    @RolesAllowed({\"admin\", \"curator\"})\n+    @Path(\"/user/{userId}/privileges\")\n+    @Operation(operationId = \"addUserPrivileges\", description = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = User.class)\n+    public User setUserPrivilege(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\")@Auth User authUser,\n+                                 @ApiParam(value = \"User ID\", required = true) @PathParam(\"userId\") Long userID,\n+                                 @ApiParam(value = \"Set privilege for a user\", required = true) PrivilegeRequest privilegeRequest) {\n+        User user = userDAO.findById(userID);\n+        if (user == null) {\n+            throw new CustomWebApplicationException(\"User not found\", HttpStatus.SC_NOT_FOUND);\n+        }\n+\n+        if (privilegeRequest.isAdmin() != user.getIsAdmin() && !authUser.getIsAdmin()) {\n+            throw new CustomWebApplicationException(\"You do not have privileges to set/remove administrative rights\", HttpStatus.SC_FORBIDDEN);", "originalCommit": "06100d7decc5bba2dd8fe74bf7923e6cb3c064ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyOTA3NQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461129075", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-27T19:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxMDc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxMjE4OQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r460312189", "bodyText": "There already is a setCurator; you shouldn't add another setter.", "author": "coverbeck", "createdAt": "2020-07-24T22:20:58Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -327,6 +327,10 @@ public void setIsAdmin(boolean isAdmin) {\n         this.isAdmin = isAdmin;\n     }\n \n+    public void setIsCurator(boolean isCurator) {", "originalCommit": "06100d7decc5bba2dd8fe74bf7923e6cb3c064ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyOTQxNQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461129415", "bodyText": "Removed setIsCurator() and refactored to using setCurator()", "author": "ByteMap", "createdAt": "2020-07-27T19:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxMjE4OQ=="}], "type": "inlineReview"}, {"oid": "37ea2eaa68c21a5c0a513fb28a708b7428af29ca", "url": "https://github.com/dockstore/dockstore/commit/37ea2eaa68c21a5c0a513fb28a708b7428af29ca", "message": "Enable easy access to updating admin/curator status\n\ndockstore/dockstore#3574\n\nCreated a new API call at a new endpoint for users with admin/curator\nstatus to update the privileges of other users\n\nCreated a new method setIsCurator() in User.java to set the curator\nstatus of a user.", "committedDate": "2020-07-27T19:04:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjY3Mg==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461172672", "bodyText": "Should add a comment on both clauses, conditions are better but still not arguably simply readable", "author": "denis-yuen", "createdAt": "2020-07-27T21:11:46Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -747,6 +748,35 @@ public User updateLoggedInUserMetadata(@ApiParam(hidden = true)@Parameter(hidden\n         return dbuser;\n     }\n \n+    @PUT\n+    @Timed\n+    @UnitOfWork\n+    @RolesAllowed({\"admin\", \"curator\"})\n+    @Path(\"/user/{userId}/privileges\")\n+    @Operation(operationId = \"addUserPrivileges\", description = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = User.class)\n+    public User setUserPrivilege(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\")@Auth User authUser,\n+                                 @ApiParam(value = \"User ID\", required = true) @PathParam(\"userId\") Long userID,\n+                                 @ApiParam(value = \"Set privilege for a user\", required = true) PrivilegeRequest privilegeRequest) {\n+        User user = userDAO.findById(userID);\n+        if (user == null) {\n+            throw new CustomWebApplicationException(\"User not found\", HttpStatus.SC_NOT_FOUND);\n+        }\n+\n+        if (authUser.getId() == user.getId()) {\n+            throw new CustomWebApplicationException(\"You cannot modify your own privileges\", HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        if (privilegeRequest.isAdmin() != user.getIsAdmin() && !authUser.getIsAdmin()) {", "originalCommit": "37ea2eaa68c21a5c0a513fb28a708b7428af29ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDQwNQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461174405", "bodyText": "I might be overlooking something, but is (privilegeRequest.isAdmin() != user.getIsAdmin() && !authUser.getIsAdmin())  simpler as (privilegeRequest.isAdmin()  && !authUser.getIsAdmin())", "author": "denis-yuen", "createdAt": "2020-07-27T21:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMDUwNg==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461200506", "bodyText": "I think the original logic is that an error should be thrown if the user admin status is different from the privilege request and that the authuser is not an admin. That way a curator can set the curator status only for an admin and not get blocked by it. Also, with (privilegeRequest.isAdmin() && !authUser.getIsAdmin()), the curator would be able to remove adminship since privilegeRequest.isAdmin() would be false and the error would not be thrown.", "author": "ByteMap", "createdAt": "2020-07-27T22:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMDYzMA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461200630", "bodyText": "Added a comment on both clauses.", "author": "ByteMap", "createdAt": "2020-07-27T22:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwODg4OQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461208889", "bodyText": "Ok, thanks for the explanation. I think I'm not reading the curator logic properly here.\nThis code might be more readable with one branch for curator logic and one branch for admin logic.", "author": "denis-yuen", "createdAt": "2020-07-27T22:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTIwNw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461221207", "bodyText": "There isn't really an admin logic branch. It's more of the first branch checking for curator status and creating restrictions and the second branch setting the privileges since no errors were thrown. I have created two if statements instead of doing an if - else if and added additional comments. Hopefully that will make the logic more clear to read.", "author": "ByteMap", "createdAt": "2020-07-27T23:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNjY2OA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461136668", "bodyText": "FYI, you could just save the result instead of making 2 api calls, but this is fine.", "author": "coverbeck", "createdAt": "2020-07-27T20:02:48Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -513,4 +513,43 @@ public void testUpdateUserMetadataFromGithub() {\n         assertEquals(\"DockstoreTestUser2\", userProfile.getUsername());\n     }\n \n+    @Test\n+    public void testSetUserPrivilege() {\n+        ApiClient adminWebClient = getWebClient(ADMIN_USERNAME, testingPostgres);\n+        ApiClient userWebClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+\n+        PrivilegeRequest privilegeRequest = new PrivilegeRequest();\n+        UsersApi adminApi = new UsersApi(adminWebClient);\n+        UsersApi userApi = new UsersApi(userWebClient);\n+        User admin = adminApi.getUser();\n+        User user = userApi.getUser();\n+\n+        privilegeRequest.setAdmin(false);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertFalse(userApi.getUser().isIsAdmin());", "originalCommit": "37ea2eaa68c21a5c0a513fb28a708b7428af29ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTM3Ng==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461171376", "bodyText": "Use fail instead of assertFalse.\nYour error message should better indicate the problem to somebody looking at the code for the first time, e.g, fail(\"Curator should not be able to create an admin\")", "author": "coverbeck", "createdAt": "2020-07-27T21:09:07Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -513,4 +513,43 @@ public void testUpdateUserMetadataFromGithub() {\n         assertEquals(\"DockstoreTestUser2\", userProfile.getUsername());\n     }\n \n+    @Test\n+    public void testSetUserPrivilege() {\n+        ApiClient adminWebClient = getWebClient(ADMIN_USERNAME, testingPostgres);\n+        ApiClient userWebClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+\n+        PrivilegeRequest privilegeRequest = new PrivilegeRequest();\n+        UsersApi adminApi = new UsersApi(adminWebClient);\n+        UsersApi userApi = new UsersApi(userWebClient);\n+        User admin = adminApi.getUser();\n+        User user = userApi.getUser();\n+\n+        privilegeRequest.setAdmin(false);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertFalse(userApi.getUser().isCurator());\n+\n+        privilegeRequest.setCurator(true);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertTrue(userApi.getUser().isCurator());\n+\n+        try {\n+            userApi.setUserPrivilege(admin.getId(), privilegeRequest);\n+            assertFalse(\"Should have triggered an exception\", false);", "originalCommit": "37ea2eaa68c21a5c0a513fb28a708b7428af29ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NzI1OA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461197258", "bodyText": "Used fail() instead of assertFalse() and specified error message.", "author": "ByteMap", "createdAt": "2020-07-27T22:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTU5Mg==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461171592", "bodyText": "Same as other comment", "author": "coverbeck", "createdAt": "2020-07-27T21:09:31Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -513,4 +513,43 @@ public void testUpdateUserMetadataFromGithub() {\n         assertEquals(\"DockstoreTestUser2\", userProfile.getUsername());\n     }\n \n+    @Test\n+    public void testSetUserPrivilege() {\n+        ApiClient adminWebClient = getWebClient(ADMIN_USERNAME, testingPostgres);\n+        ApiClient userWebClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+\n+        PrivilegeRequest privilegeRequest = new PrivilegeRequest();\n+        UsersApi adminApi = new UsersApi(adminWebClient);\n+        UsersApi userApi = new UsersApi(userWebClient);\n+        User admin = adminApi.getUser();\n+        User user = userApi.getUser();\n+\n+        privilegeRequest.setAdmin(false);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertFalse(userApi.getUser().isCurator());\n+\n+        privilegeRequest.setCurator(true);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertTrue(userApi.getUser().isCurator());\n+\n+        try {\n+            userApi.setUserPrivilege(admin.getId(), privilegeRequest);\n+            assertFalse(\"Should have triggered an exception\", false);\n+        } catch (ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        privilegeRequest.setAdmin(true);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertTrue(userApi.getUser().isIsAdmin());\n+\n+        privilegeRequest.setAdmin(false);\n+        try {\n+            adminApi.setUserPrivilege(admin.getId(), privilegeRequest);\n+            assertFalse(\"Should have triggered an exception\", false);", "originalCommit": "37ea2eaa68c21a5c0a513fb28a708b7428af29ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NzMyMA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461197320", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-27T22:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjY2Mg==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461172662", "bodyText": "You should also assert the user is not an admin.", "author": "coverbeck", "createdAt": "2020-07-27T21:11:45Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -513,4 +513,43 @@ public void testUpdateUserMetadataFromGithub() {\n         assertEquals(\"DockstoreTestUser2\", userProfile.getUsername());\n     }\n \n+    @Test\n+    public void testSetUserPrivilege() {\n+        ApiClient adminWebClient = getWebClient(ADMIN_USERNAME, testingPostgres);\n+        ApiClient userWebClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+\n+        PrivilegeRequest privilegeRequest = new PrivilegeRequest();\n+        UsersApi adminApi = new UsersApi(adminWebClient);\n+        UsersApi userApi = new UsersApi(userWebClient);\n+        User admin = adminApi.getUser();\n+        User user = userApi.getUser();\n+\n+        privilegeRequest.setAdmin(false);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertFalse(userApi.getUser().isCurator());\n+\n+        privilegeRequest.setCurator(true);\n+        adminApi.setUserPrivilege(user.getId(), privilegeRequest);\n+        assertTrue(userApi.getUser().isCurator());", "originalCommit": "37ea2eaa68c21a5c0a513fb28a708b7428af29ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NjE5MQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461196191", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-27T22:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3Mzc5NQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461173795", "bodyText": "The API also supports removing user privileges. I would call this setUserPrivileges", "author": "coverbeck", "createdAt": "2020-07-27T21:14:02Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -747,6 +748,35 @@ public User updateLoggedInUserMetadata(@ApiParam(hidden = true)@Parameter(hidden\n         return dbuser;\n     }\n \n+    @PUT\n+    @Timed\n+    @UnitOfWork\n+    @RolesAllowed({\"admin\", \"curator\"})\n+    @Path(\"/user/{userId}/privileges\")\n+    @Operation(operationId = \"addUserPrivileges\", description = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))", "originalCommit": "37ea2eaa68c21a5c0a513fb28a708b7428af29ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NjM0Nw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461196347", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-27T22:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3Mzc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0MTU5Mw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461941593", "bodyText": "You should remove this; see Gary's comment about both adding OpenAPI and removing Swagger", "author": "coverbeck", "createdAt": "2020-07-28T23:01:30Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -747,6 +749,42 @@ public User updateLoggedInUserMetadata(@ApiParam(hidden = true)@Parameter(hidden\n         return dbuser;\n     }\n \n+    @PUT\n+    @Timed\n+    @UnitOfWork\n+    @RolesAllowed({\"admin\", \"curator\"})\n+    @Path(\"/user/{userId}/privileges\")\n+    @Consumes(\"application/json\")\n+    @Operation(operationId = \"setUserPrivileges\", description = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = User.class, hidden = true)", "originalCommit": "a344f9baa26762f3574fc165db8206a54690e52d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1MzI1Mg==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r462553252", "bodyText": "Removing @ApiOperation would enable the method to be written into the swagger.yaml file since the hidden field in the annotation is preventing that from happening.", "author": "ByteMap", "createdAt": "2020-07-29T20:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0MTU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MzM3MA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r462563370", "bodyText": "You can remove the bulk of the annotation (@Authorization, response) to avoid confusion. Example: @ApiOperation(value = \"hidden\", hidden = true)", "author": "garyluu", "createdAt": "2020-07-29T20:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0MTU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0MjEzNQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461942135", "bodyText": "Can you assert that the user is both not an admin nor a curator? I have to follow your code from above to figure that out; and what if that code changes? -- it could have a side effect on this test. Just to make sure you are testing with the right thing.", "author": "coverbeck", "createdAt": "2020-07-28T23:03:11Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -513,4 +513,54 @@ public void testUpdateUserMetadataFromGithub() {\n         assertEquals(\"DockstoreTestUser2\", userProfile.getUsername());\n     }\n \n+    @Test\n+    public void testSetUserPrivilege() {\n+        io.dockstore.openapi.client.ApiClient adminWebClient = getOpenAPIWebClient(ADMIN_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.ApiClient userWebClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+\n+        io.dockstore.openapi.client.model.PrivilegeRequest privilegeRequest = new PrivilegeRequest();\n+        io.dockstore.openapi.client.api.UsersApi adminApi = new io.dockstore.openapi.client.api.UsersApi(adminWebClient);\n+        io.dockstore.openapi.client.api.UsersApi userApi = new io.dockstore.openapi.client.api.UsersApi(userWebClient);\n+        io.dockstore.openapi.client.model.User admin = adminApi.getUser();\n+        io.dockstore.openapi.client.model.User user = userApi.getUser();\n+\n+        privilegeRequest.setAdmin(false);\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertFalse(userApi.getUser().isCurator());\n+\n+        privilegeRequest.setCurator(true);\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertTrue(userApi.getUser().isCurator());\n+\n+        try {\n+            userApi.setUserPrivileges(privilegeRequest, admin.getId());\n+            fail(\"Curator should not be able to set admin permissions\");\n+        } catch (ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        privilegeRequest.setAdmin(true);\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        assertTrue(userApi.getUser().isIsAdmin());\n+\n+        privilegeRequest.setAdmin(false);\n+        try {\n+            adminApi.setUserPrivileges(privilegeRequest, admin.getId());\n+            fail(\"User should not be able to set their own permissions\");\n+        } catch (ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        privilegeRequest.setCurator(false);\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        try {", "originalCommit": "a344f9baa26762f3574fc165db8206a54690e52d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzUxNA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461963514", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-29T00:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0MjEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0MzAyMA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461943020", "bodyText": "This real nit-picky, and I'm surprised the checkstyle isn't flagging it already (maybe it only catches it in TypeScript, because I'm pretty sure I've seen it in my code), but you can put a space before \"Else\" --> // Else...", "author": "coverbeck", "createdAt": "2020-07-28T23:05:53Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -747,6 +749,42 @@ public User updateLoggedInUserMetadata(@ApiParam(hidden = true)@Parameter(hidden\n         return dbuser;\n     }\n \n+    @PUT\n+    @Timed\n+    @UnitOfWork\n+    @RolesAllowed({\"admin\", \"curator\"})\n+    @Path(\"/user/{userId}/privileges\")\n+    @Consumes(\"application/json\")\n+    @Operation(operationId = \"setUserPrivileges\", description = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"Updates the provided userID to admin or curator status, ADMIN or CURATOR only\", authorizations = { @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = User.class, hidden = true)\n+    public User setUserPrivilege(@Parameter(hidden = true, name = \"user\")@Auth User authUser,\n+                                 @Parameter(name = \"User ID\", required = true) @PathParam(\"userId\") Long userID,\n+                                 @Parameter(name = \"Set privilege for a user\", required = true) PrivilegeRequest privilegeRequest) {\n+        User user = userDAO.findById(userID);\n+        if (user == null) {\n+            throw new CustomWebApplicationException(\"User not found\", HttpStatus.SC_NOT_FOUND);\n+        }\n+\n+        //This ensures that the user cannot modify their own privileges.\n+        if (authUser.getId() == user.getId()) {\n+            throw new CustomWebApplicationException(\"You cannot modify your own privileges\", HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        //If the request's admin setting is different than the admin status of the user that is being modified, and the auth user is not an admin: Throw an error.\n+        //This ensures that a curator cannot modify the admin status of any user.\n+        if (privilegeRequest.isAdmin() != user.getIsAdmin() && !authUser.getIsAdmin()) {\n+            throw new CustomWebApplicationException(\"You do not have privileges to modify administrative rights\", HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        //Else if the request's settings is different from the privileges of the user that is being modified: update the privileges with the request", "originalCommit": "a344f9baa26762f3574fc165db8206a54690e52d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzU1Nw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r461963557", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-29T00:09:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0MzAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDYzMQ==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r462570631", "bodyText": "assertEquals(expected, actual).  here and everywhere", "author": "garyluu", "createdAt": "2020-07-29T20:32:19Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -513,4 +513,56 @@ public void testUpdateUserMetadataFromGithub() {\n         assertEquals(\"DockstoreTestUser2\", userProfile.getUsername());\n     }\n \n+    @Test\n+    public void testSetUserPrivilege() {\n+        io.dockstore.openapi.client.ApiClient adminWebClient = getOpenAPIWebClient(ADMIN_USERNAME, testingPostgres);\n+        io.dockstore.openapi.client.ApiClient userWebClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+\n+        io.dockstore.openapi.client.model.PrivilegeRequest privilegeRequest = new PrivilegeRequest();\n+        io.dockstore.openapi.client.api.UsersApi adminApi = new io.dockstore.openapi.client.api.UsersApi(adminWebClient);\n+        io.dockstore.openapi.client.api.UsersApi userApi = new io.dockstore.openapi.client.api.UsersApi(userWebClient);\n+        io.dockstore.openapi.client.model.User admin = adminApi.getUser();\n+        io.dockstore.openapi.client.model.User user = userApi.getUser();\n+\n+        privilegeRequest.setAdmin(false);\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertFalse(userApi.getUser().isCurator());\n+\n+        privilegeRequest.setCurator(true);\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertTrue(userApi.getUser().isCurator());\n+\n+        try {\n+            userApi.setUserPrivileges(privilegeRequest, admin.getId());\n+            fail(\"Curator should not be able to set admin permissions\");\n+        } catch (io.dockstore.openapi.client.ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        privilegeRequest.setAdmin(true);\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        assertTrue(userApi.getUser().isIsAdmin());\n+\n+        privilegeRequest.setAdmin(false);\n+        try {\n+            adminApi.setUserPrivileges(privilegeRequest, admin.getId());\n+            fail(\"User should not be able to set their own permissions\");\n+        } catch (io.dockstore.openapi.client.ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);\n+        }\n+\n+        privilegeRequest.setCurator(false);\n+        adminApi.setUserPrivileges(privilegeRequest, user.getId());\n+        assertFalse(userApi.getUser().isIsAdmin());\n+        assertFalse(userApi.getUser().isCurator());\n+        try {\n+            userApi.setUserPrivileges(privilegeRequest, admin.getId());\n+            fail(\"User with no curator or admin rights should not be able to access the API call\");\n+        } catch (io.dockstore.openapi.client.ApiException ex) {\n+            assertEquals(ex.getCode(), HttpStatus.SC_FORBIDDEN);", "originalCommit": "078a90da9e14bfa05d646c5cd4db718be26fca62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNDAzMw==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r462634033", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-29T22:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MTc1OA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r462571758", "bodyText": "make this endpoint /users/{userId}/privledges to be more restful", "author": "garyluu", "createdAt": "2020-07-29T20:34:25Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/api/PrivilegeRequest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.dockstore.webservice.api;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.annotations.ApiModel;\n+\n+/**\n+ * This is an object to encapsulate the privilege request. Used for requests in\n+ * /users/user/{userid}/privileges", "originalCommit": "078a90da9e14bfa05d646c5cd4db718be26fca62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNDA2MA==", "url": "https://github.com/dockstore/dockstore/pull/3693#discussion_r462634060", "bodyText": "Done.", "author": "ByteMap", "createdAt": "2020-07-29T22:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MTc1OA=="}], "type": "inlineReview"}, {"oid": "a349b71fd9006959296a25221384a72aba8cb538", "url": "https://github.com/dockstore/dockstore/commit/a349b71fd9006959296a25221384a72aba8cb538", "message": "Enable easy access to updating admin/curator status\n\ndockstore/dockstore#3574\n\nCreated a new API call at a new endpoint for users with admin/curator\nstatus to update the privileges of other users\n\nCreated a new method setIsCurator() in User.java to set the curator\nstatus of a user.", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "637c31b6ac784b7aa3a4acae4482c073d31cdd44", "url": "https://github.com/dockstore/dockstore/commit/637c31b6ac784b7aa3a4acae4482c073d31cdd44", "message": "Fixed indentations", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "d599a1dd1f6f3937ef93a0317f9d18bc88674474", "url": "https://github.com/dockstore/dockstore/commit/d599a1dd1f6f3937ef93a0317f9d18bc88674474", "message": "Fixed compilation errors", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "6299e5b0beb33985243b96f3f6f08793c47cc36f", "url": "https://github.com/dockstore/dockstore/commit/6299e5b0beb33985243b96f3f6f08793c47cc36f", "message": "Added a new API object and refactored code\n\nIncluded PrivilegeRequest.java to the webservice api objects which\nencapsulates the request to set admin/curator privileges to a user\n\nRefactored setUserPrivilege() to utilize the new PrivilegeRequest\nobject instead of using string inputs\n\nImplemented and refactored integration tests for setUserPrivilege()", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "22f65594a8b11abcda3fcbe144a9c979b78543c3", "url": "https://github.com/dockstore/dockstore/commit/22f65594a8b11abcda3fcbe144a9c979b78543c3", "message": "Ensure try catch works in integration test\n\nIncluded false assertions to try catch blocks to ensure that the\ntry will fail if the catch isn't reached", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "ea5f014489ccdbc0345033292119e639ad235f0f", "url": "https://github.com/dockstore/dockstore/commit/ea5f014489ccdbc0345033292119e639ad235f0f", "message": "Addressed PR comments\n\nRemoved 'setIsCurator()' and instead use 'setCurator()'\n\nRepositioned logic to check if authuser is the user, and deny\naccess to modifying own privileges", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "23fd58d79bc61626a6c6ff3d9f9133b380e78b81", "url": "https://github.com/dockstore/dockstore/commit/23fd58d79bc61626a6c6ff3d9f9133b380e78b81", "message": "Enable easy access to updating admin/curator status\n\ndockstore/dockstore#3574\n\nCreated a new API call at a new endpoint for users with admin/curator\nstatus to update the privileges of other users\n\nCreated a new method setIsCurator() in User.java to set the curator\nstatus of a user.", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "7a370c4486b1453878e46e67a3e31997fe728bb7", "url": "https://github.com/dockstore/dockstore/commit/7a370c4486b1453878e46e67a3e31997fe728bb7", "message": "Addressed PR comments", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "69b3748e48bb116215149ac526233a13d78c6e6e", "url": "https://github.com/dockstore/dockstore/commit/69b3748e48bb116215149ac526233a13d78c6e6e", "message": "Added comments and clarified logic", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "f8328d11d51804aa77c3cc4435b271e2ba80cf33", "url": "https://github.com/dockstore/dockstore/commit/f8328d11d51804aa77c3cc4435b271e2ba80cf33", "message": "Included a fix and additional test\n\nIncluded @Consumes to API call since request content type is\nset to '*/*' by default, causing a 415 error.\n\nIncluded an additional test to ensure that a non privileged user cannot\naccess the API call", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "711a6b116867253f17a6b707b4bd064d1f1d7564", "url": "https://github.com/dockstore/dockstore/commit/711a6b116867253f17a6b707b4bd064d1f1d7564", "message": "Fix CypressCI unit test", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "80591178b5a19f7ed103ce6ff2324e692e29a46e", "url": "https://github.com/dockstore/dockstore/commit/80591178b5a19f7ed103ce6ff2324e692e29a46e", "message": "Deleting .DS_Store", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "67018cba043c1f36aa4aa0be389ce95698ada116", "url": "https://github.com/dockstore/dockstore/commit/67018cba043c1f36aa4aa0be389ce95698ada116", "message": "Remove Swagger\n\nRemoved Swagger annotations from setUserPrivilege() and replaced them\nwith OAS annotations, with the exception of @ApiOperation\n\nModified tests to rely on OAS rather than to rely on Swagger\ndependencies", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "276052aa3caa390e8923495ae1923290d6812c6c", "url": "https://github.com/dockstore/dockstore/commit/276052aa3caa390e8923495ae1923290d6812c6c", "message": "Fixed failing integration test", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "b3f4241d58980dda77c5a394b62ab5457444121a", "url": "https://github.com/dockstore/dockstore/commit/b3f4241d58980dda77c5a394b62ab5457444121a", "message": "Addressed comments\n\nAddressed checkstyle regarding to comments\n\nAsserted that the test user has no privileges before testing that\nthe API call would fail in the integration test", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "731dda2f73d0276e1e552d9d9a4145c5038e8757", "url": "https://github.com/dockstore/dockstore/commit/731dda2f73d0276e1e552d9d9a4145c5038e8757", "message": "Including openapi.yaml to the PR", "committedDate": "2020-07-30T18:37:40Z", "type": "commit"}, {"oid": "afc1fb53cdb4c170d45b53b0fe2cee92797a382c", "url": "https://github.com/dockstore/dockstore/commit/afc1fb53cdb4c170d45b53b0fe2cee92797a382c", "message": "Addressed PR comments\n\nUpdated yq to fix indentation\n\nRefactored the endpoint of setUserPrivilege to\n'/user/{userid}/privileges'\n\nRepositioned parameters of AssertEquals() to reflect correctly on\nAssertEquals(Expected, Actual)", "committedDate": "2020-07-30T18:37:41Z", "type": "commit"}, {"oid": "841ae4a1e396fb162b8d1712c8e00f1e2fca22b5", "url": "https://github.com/dockstore/dockstore/commit/841ae4a1e396fb162b8d1712c8e00f1e2fca22b5", "message": "Update openapi.yaml", "committedDate": "2020-07-30T18:37:41Z", "type": "commit"}, {"oid": "841ae4a1e396fb162b8d1712c8e00f1e2fca22b5", "url": "https://github.com/dockstore/dockstore/commit/841ae4a1e396fb162b8d1712c8e00f1e2fca22b5", "message": "Update openapi.yaml", "committedDate": "2020-07-30T18:37:41Z", "type": "forcePushed"}, {"oid": "f65739fd6392def0eb70aa49700dff01cac066bc", "url": "https://github.com/dockstore/dockstore/commit/f65739fd6392def0eb70aa49700dff01cac066bc", "message": "Git rebased and mvn build. Updated openapi.yaml", "committedDate": "2020-07-30T20:58:45Z", "type": "commit"}]}