{"pr_number": 3812, "pr_title": "Catroid 779 JSON Extractor Functionality", "pr_createdAt": "2020-09-18T13:39:08Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3812", "timeline": [{"oid": "3d2a6b539c67ecfb00d1bddf35abacd49a4cca9e", "url": "https://github.com/Catrobat/Catroid/commit/3d2a6b539c67ecfb00d1bddf35abacd49a4cca9e", "message": "CATROID-762 - Regex. Assistant Output\n\n-add Regex creator from given keyword in html text\n-add Unit tests", "committedDate": "2020-09-18T12:22:48Z", "type": "commit"}, {"oid": "e473a185a17be96b2dfdc1462c6e12b82ab37137", "url": "https://github.com/Catrobat/Catroid/commit/e473a185a17be96b2dfdc1462c6e12b82ab37137", "message": "CATROID-763 - Result of generated Regex is insert into first parameter\n\n- HtmlExtractorDialogTest: UI Test for inserted text into first parameter\n- HtmlExtractorDialog: String from keyword is insert into first parameter", "committedDate": "2020-09-18T12:30:29Z", "type": "commit"}, {"oid": "c721204f0ba38fbbc5392bad5c51d6de64b9158e", "url": "https://github.com/Catrobat/Catroid/commit/c721204f0ba38fbbc5392bad5c51d6de64b9158e", "message": "Merge branch 'develop' into Catroid-763", "committedDate": "2020-09-18T12:37:08Z", "type": "commit"}, {"oid": "2ce1b5d5c423d63b4fb77dc8c29ad68a017d4015", "url": "https://github.com/Catrobat/Catroid/commit/2ce1b5d5c423d63b4fb77dc8c29ad68a017d4015", "message": "CATROID-764 - Assistant - Smart assistant button in function list (Id: 1.3.1.1)\n\n-add Unit-Tests\n-add functionality to check if selection is in part of regular expression function\n-add functionality to select correct parameter on assistant button click\n-change behavior of assistant button in function list when to add regular expression", "committedDate": "2020-09-18T13:39:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3OTg4MQ==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r491479881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\": (?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n      \n    \n    \n  \n\nSpaces may or may not occur before and after the \":\", see https://www.json.org/json-en.html --- case in point is our default URL for the \"Send web request\" brick which is https://catrob.at/joke which uses no spaces and looks for instance like this:\n{\"id\":378,\"type\":\"programming\",\"setup\":\"What's the best part about TCP jokes?\",\"punchline\":\"I get to keep telling them until you get them.\"}\nor https://geocode.xyz/api that returns json with spaces before the \":\", e.g.,\n{   \"statename\" : {},   \"distance\" : \"0.000\",   \"elevation\" : \"20\", \"state\" : \"UK\",   \"latt\" : \"51.50354\",   \"city\" : \"LONDON\",   \"prov\" : \"UK\",   \"geocode\" : \"LONDON-MCRXA\",   \"geonumber\" : \"3154700960970\", \"country\" : \"United Kingdom\",   \"stnumber\" : \"10\",   \"staddress\" : \"DOWNING STREET\",   \"inlatt\" : \"51.50354\",   \"alt\" : {      \"loc\" : { \"staddress\" : \"DOWNING STREET\",         \"stnumber\" : \"10\", \"postal\" : \"SW1A 2AA\",         \"latt\" : \"51.50354\",         \"city\" : \"LONDON\",         \"prov\" : \"UK\",         \"longt\" : \"-0.12768\", \"class\" : {}      }   },   \"timezone\" : \"Europe/London\", \"region\" : \"Greater London, England\",   \"postal\" : \"SW1A 2AA\",   \"longt\" : \"-0.12768\",   \"remaining_credits\" : {},   \"confidence\" : \"1\", \"inlongt\" : \"-0.12768\",   \"class\" : {},   \"altgeocode\" : \"SYNERGY-MCRXA\"}", "author": "wslany", "createdAt": "2020-09-19T18:18:49Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\": (?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";", "originalCommit": "3d798d117c8bd2c7eacfc38e0dbc94d2f8874e37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwMDk3Mg==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r491900972", "bodyText": "Maybe even add a \\\\ in the backward negated non-capturing parentheses before the closing \" so that \" cannot occur in front of the \" in the data field. Would need some testing though whether it actually works ;)", "author": "wslany", "createdAt": "2020-09-21T09:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3OTg4MQ=="}], "type": "inlineReview"}, {"oid": "c62e866598510adb92d6f80bbc31007d5816f0b3", "url": "https://github.com/Catrobat/Catroid/commit/c62e866598510adb92d6f80bbc31007d5816f0b3", "message": "CATROID-754 - JSON extractor dialog\n\n- implements CATROID-753\n- JsonExtractorDialog.java: Creation of new class for JSON extractor\n- strings.xml: Creation of new string for JSON extractor\n- dialog_regex_json_extractor.xml: Creation of new layout for JSON extractor", "committedDate": "2020-09-23T13:21:03Z", "type": "commit"}, {"oid": "551773c624aaa99cfb5ecd2478e70844f839139f", "url": "https://github.com/Catrobat/Catroid/commit/551773c624aaa99cfb5ecd2478e70844f839139f", "message": "CATROID-779 - JSON Extractor Functionality\n\n- ADD Regular expression parser\n- ADD Test for Regular expression parser", "committedDate": "2020-09-23T13:21:03Z", "type": "commit"}, {"oid": "551773c624aaa99cfb5ecd2478e70844f839139f", "url": "https://github.com/Catrobat/Catroid/commit/551773c624aaa99cfb5ecd2478e70844f839139f", "message": "CATROID-779 - JSON Extractor Functionality\n\n- ADD Regular expression parser\n- ADD Test for Regular expression parser", "committedDate": "2020-09-23T13:21:03Z", "type": "forcePushed"}, {"oid": "c4777dbc4f3df21077ae89e1d0e3de01360ad3d2", "url": "https://github.com/Catrobat/Catroid/commit/c4777dbc4f3df21077ae89e1d0e3de01360ad3d2", "message": "Optional spaces before and after colon character.", "committedDate": "2020-10-09T18:19:46Z", "type": "commit"}, {"oid": "c937bd62da940e8b8bc4d6283659f2aec694f9ca", "url": "https://github.com/Catrobat/Catroid/commit/c937bd62da940e8b8bc4d6283659f2aec694f9ca", "message": "Merge branch 'develop' into CATROID-779", "committedDate": "2020-10-09T18:33:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYxMzA4NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502613085", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t  listOfFeatures.add(new HtmlExtractorDialog(fragmentManager));\n          \n          \n            \n            \t\tlistOfFeatures.add(new HtmlExtractorDialog(fragmentManager));", "author": "wslany", "createdAt": "2020-10-09T18:46:57Z", "path": "catroid/src/main/java/org/catrobat/catroid/ui/dialogs/regexassistant/RegularExpressionAssistantDialog.java", "diffHunk": "@@ -79,10 +79,8 @@ public void onClick(DialogInterface dialog, int indexInList) {\n \n \tprivate void createListOfFeatures() {\n \t\tlistOfFeatures = new ArrayList<>();\n-\t\tif (BuildConfig.FEATURE_REGULAR_EXPRESSION_ASSISTANT_ENABLED) {\n-\t\t\tlistOfFeatures.add(new HtmlExtractorDialog(fragmentManager));\n-\t\t\tlistOfFeatures.add(new JsonExtractorDialog());\n-\t\t}\n+\t  listOfFeatures.add(new HtmlExtractorDialog(fragmentManager));", "originalCommit": "c937bd62da940e8b8bc4d6283659f2aec694f9ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e5c0a8fd199caef64c37d2df2e13555a1f1d2391", "url": "https://github.com/Catrobat/Catroid/commit/e5c0a8fd199caef64c37d2df2e13555a1f1d2391", "message": "Corrected indentation.", "committedDate": "2020-10-09T18:47:35Z", "type": "commit"}, {"oid": "25563a6cc37f529e6dc77232a952ec02b39591f2", "url": "https://github.com/Catrobat/Catroid/commit/25563a6cc37f529e6dc77232a952ec02b39591f2", "message": "Eliminate regex feature flag", "committedDate": "2020-10-09T18:57:48Z", "type": "commit"}, {"oid": "125e6ed1c96594623f79d8d43ac97ef8f619eada", "url": "https://github.com/Catrobat/Catroid/commit/125e6ed1c96594623f79d8d43ac97ef8f619eada", "message": "Eliminate static analysis warning on CollapsibleIfStatements", "committedDate": "2020-10-09T19:22:17Z", "type": "commit"}, {"oid": "ef80d93ecd224852ae35e018d3419829693f5f75", "url": "https://github.com/Catrobat/Catroid/commit/ef80d93ecd224852ae35e018d3419829693f5f75", "message": "No feature flag for regex anymore.", "committedDate": "2020-10-09T19:51:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTIxNw==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502721217", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";\n          \n          \n            \n            \t\treturn \"(?x) # with comments & spaces ignored\\n\"\n          \n          \n            \n            \t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n          \n          \n            \n            \t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n          \n          \n            \n            \t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n          \n          \n            \n            \t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n          \n          \n            \n            \t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n          \n          \n            \n            \t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n          \n          \n            \n            \t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n          \n          \n            \n            \t\t\t+ \")\\\"? # end of captured return value\\n\" \n          \n          \n            \n            \t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";\n          \n      \n    \n    \n  \n\nSimplify start and end, but also allow more of the cases as listed in https://www.json.org/json-en.html\nResults in the following regex expression, if the keyword is for instance keyword:\n(?x) # with comments & spaces ignored\n\"keyword\" \\s* : \\s* \"? # find keyword\n( # start capturing, see https://www.json.org/json-en.html :\n(?<=\") (\\\\\"|[^\"])* (?=\") # text\n| ((?<!\") # other cases:\n  [+-]?(0|[1-9]\\d*)(\\.\\d+)?([eE][+-]?\\d+)? # numbers\n| ( true | false | null ) # logical values\n| \\{ [^{]* \\} # un-nested object\n| \\[ [^\\[]* \\] # un-nested array\n(?!\") ) # end of other cases\n)\"? # end of captured return value\n(?=\\s*[,\\]}]) # correct ending of json", "author": "wslany", "createdAt": "2020-10-10T00:28:33Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"[\\\\{,]\\\\s*\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*(?![\\\\[\\\\{])\\\"?(.*?)\\\"?\\\\s*[,\\\\}]\";", "originalCommit": "ef80d93ecd224852ae35e018d3419829693f5f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODEwMg==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738102", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"size\\\": 36,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"", "author": "wslany", "createdAt": "2020-10-10T03:06:08Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"", "originalCommit": "ef80d93ecd224852ae35e018d3419829693f5f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODIyMw==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738223", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"36\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"-36.45e-45\", matcher.group(1));", "author": "wslany", "createdAt": "2020-10-10T03:07:58Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"36\", matcher.group(1));", "originalCommit": "ef80d93ecd224852ae35e018d3419829693f5f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczODM4Nw==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502738387", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n          \n      \n    \n    \n  \n\nThis is the second match, but the first match, 250 higher up, should be the one returned.", "author": "wslany", "createdAt": "2020-10-10T03:10:07Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"", "originalCommit": "ef80d93ecd224852ae35e018d3419829693f5f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczOTU4Nw==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502739587", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"    }\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"\n          \n          \n            \n            \t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n          \n          \n            \n            \t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"", "author": "wslany", "createdAt": "2020-10-10T03:24:23Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"", "originalCommit": "ef80d93ecd224852ae35e018d3419829693f5f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MDI2MA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502740260", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t}\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionLogic() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"true\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionArray() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionObject() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\n          \n          \n            \n            \t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t}", "author": "wslany", "createdAt": "2020-10-10T03:31:46Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\": 36,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"36\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}", "originalCommit": "ef80d93ecd224852ae35e018d3419829693f5f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e1ae5e2d46ea0b34d75d86315750071045940973", "url": "https://github.com/Catrobat/Catroid/commit/e1ae5e2d46ea0b34d75d86315750071045940973", "message": "More json patterns & tests", "committedDate": "2020-10-10T03:52:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NjU4Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502746586", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            }\", matcher.group(1));\n          \n      \n    \n    \n  \n\nFix static analysis indentation warning.", "author": "wslany", "createdAt": "2020-10-10T04:56:44Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\"{ \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\", matcher.group(1));", "originalCommit": "e1ae5e2d46ea0b34d75d86315750071045940973", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MTYwNQ==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502751605", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"(?x) # with comments & spaces ignored\\n\"\n          \n          \n            \n            \t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n          \n          \n            \n            \t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n          \n          \n            \n            \t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n          \n          \n            \n            \t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n          \n          \n            \n            \t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n          \n          \n            \n            \t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n          \n          \n            \n            \t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n          \n          \n            \n            \t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n          \n          \n            \n            \t\t\t+ \")\\\"? # end of captured return value\\n\" \n          \n          \n            \n            \t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";\n          \n          \n            \n            \t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n          \n          \n            \n            \t\t\t\t+ \"\\\"?((?<=\\\")(\\\\\\\\\\\"|[^\\\"])*(?=\\\")\" // string\n          \n          \n            \n            \t\t\t\t+ \"|(?<!\\\")([+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\" // number\n          \n          \n            \n            \t\t\t\t+ \"|(true|false|null)\" // boolean\n          \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array\n          \n          \n            \n            \t\t\t\t+ \"(?!\\\"))\\\"?(?=\\\\s*[,\\\\]}])\"; // correct json expression format\n          \n      \n    \n    \n  \n\nMoved comments inside the regex to the code, since otherwise spaces in the keyword would be ignored.", "author": "wslany", "createdAt": "2020-10-10T06:01:20Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"(?x) # with comments & spaces ignored\\n\"\n+\t\t\t+ \"\\\"\" + keyword + \"\\\" \\\\s* : \\\\s* \\\"? # find keyword\\n\"\n+\t\t\t+ \"( # start capturing, see https://www.json.org/json-en.html :\\n\"\n+\t\t\t+ \"(?<=\\\") (\\\\\\\\\\\"|[^\\\"])* (?=\\\") # text\\n\"\n+\t\t\t+ \"| ((?<!\\\") # other cases:\\n\"\n+\t\t\t+ \"  [+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? # numbers\\n\"\n+\t\t\t+ \"| ( true | false | null ) # logical values\\n\"\n+\t\t\t+ \"| \\\\{ [^{]* \\\\} # un-nested object\\n\"\n+\t\t\t+ \"| \\\\[ [^\\\\[]* \\\\] # un-nested array\\n\"\n+\t\t\t+ \"(?!\\\") ) # end of other cases\\n\"\n+\t\t\t+ \")\\\"? # end of captured return value\\n\" \n+\t\t\t+ \"(?=\\\\s*[,\\\\]}]) # correct ending of json\";", "originalCommit": "e1ae5e2d46ea0b34d75d86315750071045940973", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "abdd180efa6bf0898870d3fcc8c35d5108874e91", "url": "https://github.com/Catrobat/Catroid/commit/abdd180efa6bf0898870d3fcc8c35d5108874e91", "message": "Fixed regex and indentations", "committedDate": "2020-10-10T06:10:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjE0NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502756145", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n          \n          \n            \n            \t\treturn \"\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword", "author": "wslany", "createdAt": "2020-10-10T06:56:12Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"\\\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword", "originalCommit": "abdd180efa6bf0898870d3fcc8c35d5108874e91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "71c3978d07bdda037328817f31345ed15e8b56e5", "url": "https://github.com/Catrobat/Catroid/commit/71c3978d07bdda037328817f31345ed15e8b56e5", "message": "Missed \"", "committedDate": "2020-10-10T06:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NjQ0MA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502756440", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import android.content.Context;\n          \n          \n            \n            \n          \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            \tprivate Context context;\n          \n          \n            \n            \tpublic JsonRegexExtractor(Context context) {\n          \n          \n            \n            \t\tthis.context = context;\n          \n          \n            \n            \t}\n          \n          \n            \n            public class JsonRegexExtractor {\n          \n      \n    \n    \n  \n\nContext is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "author": "wslany", "createdAt": "2020-10-10T06:59:58Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+import android.content.Context;\n+\n+public class JsonRegexExtractor {\n+\tprivate Context context;\n+\tpublic JsonRegexExtractor(Context context) {\n+\t\tthis.context = context;\n+\t}", "originalCommit": "71c3978d07bdda037328817f31345ed15e8b56e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzE4Mg==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502757182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import android.app.Activity;\n          \n      \n    \n    \n  \n\nActivity is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "author": "wslany", "createdAt": "2020-10-10T07:08:43Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+", "originalCommit": "71c3978d07bdda037328817f31345ed15e8b56e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NzI0Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502757246", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tActivity context = new Activity();\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor();\n          \n      \n    \n    \n  \n\nContext is not used. This is part of the fix to solve the static analysis warning \"Avoid unused private fields such as 'context'.\"", "author": "wslany", "createdAt": "2020-10-10T07:09:22Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);", "originalCommit": "71c3978d07bdda037328817f31345ed15e8b56e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1OTQ5MA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502759490", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            }\", matcher.group(1));\n          \n          \n            \n            \t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            \\}\", matcher.group(1));", "author": "wslany", "createdAt": "2020-10-10T07:35:31Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import android.app.Activity;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tActivity context = new Activity();\n+\t\tthis.jsonExtractor = new JsonRegexExtractor(context);\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\t\"{ \\\"number\\\": 0, \\n\"\n+\t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t\t+ \"            }\", matcher.group(1));", "originalCommit": "71c3978d07bdda037328817f31345ed15e8b56e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9", "url": "https://github.com/Catrobat/Catroid/commit/5d66a15bd1093286977cdfe33f1f393d9df3f9d9", "message": "Apply suggestions from code review", "committedDate": "2020-10-10T07:38:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2Mjk0Mw==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502762943", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n          \n          \n            \n            \t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t+ \"            }\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"", "author": "wslany", "createdAt": "2020-10-10T08:14:18Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"", "originalCommit": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2MzE1Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502763156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\n          \n          \n            \n            \t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n          \n          \n            \n            \t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n          \n          \n            \n            \t\t\t\t+ \"            \\}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "author": "wslany", "createdAt": "2020-10-10T08:16:50Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\" : \\n\"\n+\t\t\t+ \"            { \\\"number\\\": 0, \\n\"\n+\t\t\t+ \"              \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t+ \"            }\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\n+\t\t\t\t\"\\{ \\\"number\\\": 0, \\n\"\n+\t\t\t\t+ \"             \\\"some array\\\" : [ \\\"string\\\", null ]\\n\"\n+\t\t\t\t+ \"            \\}\", matcher.group(1));", "originalCommit": "5d66a15bd1093286977cdfe33f1f393d9df3f9d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2bfcd984946cb4ac986bb975d3e3bcc2ac63c6c9", "url": "https://github.com/Catrobat/Catroid/commit/2bfcd984946cb4ac986bb975d3e3bcc2ac63c6c9", "message": "Apply suggestions from code review", "committedDate": "2020-10-10T08:18:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2NTA0Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502765046", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "author": "wslany", "createdAt": "2020-10-10T08:38:54Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals({\"\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "originalCommit": "2bfcd984946cb4ac986bb975d3e3bcc2ac63c6c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b1ad344587cfd009fc7320237112c18315b2929a", "url": "https://github.com/Catrobat/Catroid/commit/b1ad344587cfd009fc7320237112c18315b2929a", "message": "Typo", "committedDate": "2020-10-10T08:39:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3Mjk1OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502772959", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            \n          \n          \n            \n            \tprivate JsonRegexExtractor() {\n          \n          \n            \n            \t\tthrow new IllegalStateException(\"Utility class\");\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nAccording to https://rules.sonarsource.com/java/tag/design/RSPEC-1118", "author": "wslany", "createdAt": "2020-10-10T10:04:17Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public class JsonRegexExtractor {", "originalCommit": "b1ad344587cfd009fc7320237112c18315b2929a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzE1Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void setUp() {\n          \n          \n            \n            \t\tthis.jsonExtractor = new JsonRegexExtractor();\n          \n          \n            \n            \t}\n          \n          \n            \n            \tpublic void setUp() {}", "author": "wslany", "createdAt": "2020-10-10T10:06:31Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}", "originalCommit": "b1ad344587cfd009fc7320237112c18315b2929a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzQ5Nw==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"", "author": "wslany", "createdAt": "2020-10-10T10:10:34Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"", "originalCommit": "b1ad344587cfd009fc7320237112c18315b2929a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3MzUzMg==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502773532", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));", "author": "wslany", "createdAt": "2020-10-10T10:11:02Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t\tthis.jsonExtractor = new JsonRegexExtractor();\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "originalCommit": "b1ad344587cfd009fc7320237112c18315b2929a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f", "url": "https://github.com/Catrobat/Catroid/commit/d6cf8ed304334dfdabf0a8259b96bbd44c69d53f", "message": "Apply suggestions from code review", "committedDate": "2020-10-10T10:12:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTgwNA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502779804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"\t\t\t\n          \n          \n            \n            \t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"else\\\":null\\n\"\n          \n          \n            \n            \t\t\t+ \"    }\\n\"", "author": "wslany", "createdAt": "2020-10-10T11:21:06Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t", "originalCommit": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3OTgzMA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502779830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "author": "wslany", "createdAt": "2020-10-10T11:21:30Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"\\{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]\\}\", matcher.group(1));", "originalCommit": "d6cf8ed304334dfdabf0a8259b96bbd44c69d53f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0", "url": "https://github.com/Catrobat/Catroid/commit/c1ad000a4bbcb65f6eb9df037cbc2322131d12f0", "message": "Apply suggestions from code review", "committedDate": "2020-10-10T11:21:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDAwNQ==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794005", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class JsonRegexExtractor {\n          \n          \n            \n            public final class JsonRegexExtractor {", "author": "wslany", "createdAt": "2020-10-10T14:03:59Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public class JsonRegexExtractor {", "originalCommit": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDI5NA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794294", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void setUp() {}\n          \n          \n            \n            \tpublic void setUp() {\n          \n          \n            \n            \t}", "author": "wslany", "createdAt": "2020-10-10T14:06:58Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}", "originalCommit": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NDU3Mg==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502794572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n          \n      \n    \n    \n  \n\nJust to test why??? the two strings are reported as different by junit (it works fine inside the app!)", "author": "wslany", "createdAt": "2020-10-10T14:09:49Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "originalCommit": "c1ad000a4bbcb65f6eb9df037cbc2322131d12f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b", "url": "https://github.com/Catrobat/Catroid/commit/77083ac1609e4dc2b17cb4c2cef12f16348d3a5b", "message": "Remove static anal warnings, and test junit", "committedDate": "2020-10-10T14:12:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NjM0Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502796346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testParserExpressionStringWithEscapedQuotationMark() {\n          \n          \n            \n            \t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"escaped\"));\n          \n          \n            \n            \t\tMatcher matcher = regexPattern.matcher(jsonExample);\n          \n          \n            \n            \t\tmatcher.find();\n          \n          \n            \n            \t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));\n          \n          \n            \n            \t}\n          \n          \n            \n            }", "author": "wslany", "createdAt": "2020-10-10T14:29:07Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n+\t}\n+}", "originalCommit": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NjY2MA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502796660", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"else\\\":null\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"", "author": "wslany", "createdAt": "2020-10-10T14:31:48Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"", "originalCommit": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NzIxMA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502797210", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array\n          \n          \n            \n            \t\t\t\t+ \"|\\\\{[^{]*?\\\\}\" // un-nested object\n          \n          \n            \n            \t\t\t\t+ \"|\\\\[[^\\\\[]*?\\\\])\" // un-nested array", "author": "wslany", "createdAt": "2020-10-10T14:37:53Z", "path": "catroid/src/main/java/org/catrobat/catroid/utils/JsonRegexExtractor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.utils;\n+\n+public final class JsonRegexExtractor {\n+\n+\tprivate JsonRegexExtractor() {\n+\t\tthrow new IllegalStateException(\"Utility class\");\n+\t}\n+\n+\tpublic static String getJsonParserRegex(String keyword) {\n+\t\treturn \"\\\"\" + keyword + \"\\\"\\\\s*:\\\\s*\" // find keyword\n+\t\t\t\t+ \"\\\"?((?<=\\\")(\\\\\\\\\\\"|[^\\\"])*(?=\\\")\" // string\n+\t\t\t\t+ \"|(?<!\\\")([+-]?(0|[1-9]\\\\d*)(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\" // number\n+\t\t\t\t+ \"|(true|false|null)\" // boolean\n+\t\t\t\t+ \"|\\\\{[^{]*\\\\}\" // un-nested object\n+\t\t\t\t+ \"|\\\\[[^\\\\[]*\\\\])\" // un-nested array", "originalCommit": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc5NzMzMQ==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502797331", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");\n          \n          \n            \n            \t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));", "author": "wslany", "createdAt": "2020-10-10T14:38:59Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"else\\\":null\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", \"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\");", "originalCommit": "77083ac1609e4dc2b17cb4c2cef12f16348d3a5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6ccd8283c3a22130fd77a24e33f234e12828e953", "url": "https://github.com/Catrobat/Catroid/commit/6ccd8283c3a22130fd77a24e33f234e12828e953", "message": "Added test, and corrected test and regex", "committedDate": "2020-10-10T14:40:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwMjk2NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502802965", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"\n          \n          \n            \n            \t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\\\"hello world\\\\\\\"\\\"\\n\"", "author": "wslany", "createdAt": "2020-10-10T15:39:12Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\"hello world\\\\\"\\\"\\n\"", "originalCommit": "6ccd8283c3a22130fd77a24e33f234e12828e953", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c09128eac3f625d1d5abaf99ab5433c59bf2b552", "url": "https://github.com/Catrobat/Catroid/commit/c09128eac3f625d1d5abaf99ab5433c59bf2b552", "message": "Quotes must also be escaped...", "committedDate": "2020-10-10T15:40:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwNDg2OA==", "url": "https://github.com/Catrobat/Catroid/pull/3812#discussion_r502804868", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));\n          \n          \n            \n            \t\tassertEquals(\"\\\\\\\"hello world\\\\\\\"\", matcher.group(1));", "author": "wslany", "createdAt": "2020-10-10T15:59:08Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/ui/regexassistant/JsonRegexExtractorTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.test.ui.regexassistant;\n+\n+import org.catrobat.catroid.utils.JsonRegexExtractor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class JsonRegexExtractorTest {\n+\t@Before\n+\tpublic void setUp() {\n+\t}\n+\tprivate JsonRegexExtractor jsonExtractor;\n+\tprivate String jsonExample = \"{\\\"widget\\\": {\\n\"\n+\t\t\t+ \"    \\\"debug\\\": \\\"on\\\",\\n\"\n+\t\t\t+ \"    \\\"window\\\": {\\n\"\n+\t\t\t+ \"        \\\"title\\\": \\\"Sample Konfabulator Widget\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"main_window\\\",\\n\"\n+\t\t\t+ \"        \\\"width\\\": 500,\\n\"\n+\t\t\t+ \"        \\\"height\\\": 500\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"image\\\": { \\n\"\n+\t\t\t+ \"        \\\"src\\\": \\\"Images/Sun.png\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"sun1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 250,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\"\\n\"\n+\t\t\t+ \"    },\\n\"\n+\t\t\t+ \"    \\\"text\\\": {\\n\"\n+\t\t\t+ \"        \\\"data\\\": \\\"Click Here\\\",\\n\"\n+\t\t\t+ \"        \\\"size\\\":-36.45e-45,\\n\"\n+\t\t\t+ \"        \\\"style\\\": \\\"bold\\\",\\n\"\n+\t\t\t+ \"        \\\"name\\\": \\\"text1\\\",\\n\"\n+\t\t\t+ \"        \\\"hOffset\\\": 251,\\n\"\n+\t\t\t+ \"        \\\"vOffset\\\": 100,\\n\"\n+\t\t\t+ \"        \\\"alignment\\\": \\\"center\\\",\\n\"\n+\t\t\t+ \"        \\\"onMouseUp\\\": \\\"sun1.opacity = (sun1.opacity / 100) * 90;\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\n+\t\t\t+ \"    \\\"other recognized json expressions\\\": {\\n\"\n+\t\t\t+ \"        \\\"logic\\\" :true ,\\n\"\n+\t\t\t+ \"        \\\"un-nested array\\\" : [ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ] ,\\n\"\n+\t\t\t+ \"        \\\"un-nested object\\\":{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]},\\n\"\n+\t\t\t+ \"        \\\"escaped\\\" : \\\"\\\\\\\"hello world\\\\\\\"\\\"\\n\"\n+\t\t\t+ \"    }\\n\"\t\t\t\n+\t\t\t+ \"}} \";\n+\n+\t@Test\n+\tpublic void testParserExpressionNumericalParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"size\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"-36.45e-45\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"style\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"bold\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionDoubleParameter() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"vOffset\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"250\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionLogic() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"logic\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"true\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionArray() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested array\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"[ 45, 17, \\\"string\\\", { \\\"some object\\\" : \\\"else\\\"}, null ]\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionObject() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"un-nested object\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"{\\\"x\\\":0,\\\"array\\\":[\\\"y\\\",null]}\", matcher.group(1));\n+\t}\n+\n+\t@Test\n+\tpublic void testParserExpressionStringWithEscapedQuotationMark() {\n+\t\tPattern regexPattern = Pattern.compile(jsonExtractor.getJsonParserRegex(\"escaped\"));\n+\t\tMatcher matcher = regexPattern.matcher(jsonExample);\n+\t\tmatcher.find();\n+\t\tassertEquals(\"\\\"hello world\\\"\", matcher.group(1));", "originalCommit": "c09128eac3f625d1d5abaf99ab5433c59bf2b552", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dcb28f96dc63cff1e30d5c5f9f66bfe0ebb7d4d8", "url": "https://github.com/Catrobat/Catroid/commit/dcb28f96dc63cff1e30d5c5f9f66bfe0ebb7d4d8", "message": "Correctly escaped quotation marks in result", "committedDate": "2020-10-10T15:59:43Z", "type": "commit"}]}