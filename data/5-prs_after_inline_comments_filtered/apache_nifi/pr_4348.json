{"pr_number": 4348, "pr_title": "NIFI-7523: Use SSL Context Service for Atlas HTTPS connection in Atla\u2026", "pr_createdAt": "2020-06-18T06:50:44Z", "pr_url": "https://github.com/apache/nifi/pull/4348", "timeline": [{"oid": "e60668e9bdf16fd79090e102677f11c9784aa7d5", "url": "https://github.com/apache/nifi/commit/e60668e9bdf16fd79090e102677f11c9784aa7d5", "message": "NIFI-7523: Use SSL Context Service for Atlas HTTPS connection in Atlas reporting task\n\nAlso fixing ControllerServiceDisabledException-s when validating the Kerberos config", "committedDate": "2020-06-18T06:47:19Z", "type": "commit"}, {"oid": "edd8871bcf1446f589b0b542459942199dea2b63", "url": "https://github.com/apache/nifi/commit/edd8871bcf1446f589b0b542459942199dea2b63", "message": "NIFI-7523: Fixed test failure on Windows", "committedDate": "2020-06-19T19:36:15Z", "type": "commit"}, {"oid": "f493894db4deaab2e47889f534a49341c0f40d47", "url": "https://github.com/apache/nifi/commit/f493894db4deaab2e47889f534a49341c0f40d47", "message": "NIFI-7523: Fixed another test failure on Windows", "committedDate": "2020-06-20T15:20:15Z", "type": "commit"}, {"oid": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "url": "https://github.com/apache/nifi/commit/9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "message": "NIFI-7523: Added license headers.", "committedDate": "2020-06-20T15:20:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNzM2Ng==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443637366", "bodyText": "Could we use the Atlas constants instead?", "author": "tpalfy", "createdAt": "2020-06-22T15:19:31Z", "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java", "diffHunk": "@@ -322,9 +328,19 @@\n     private static final String ATLAS_PROPERTY_CLUSTER_NAME = \"atlas.cluster.name\";\n     private static final String ATLAS_PROPERTY_REST_ADDRESS = \"atlas.rest.address\";\n     private static final String ATLAS_PROPERTY_ENABLE_TLS = \"atlas.enableTLS\";\n+    private static final String ATLAS_PROPERTY_TRUSTSTORE_FILE = \"truststore.file\";", "originalCommit": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4OTI2Nw==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444389267", "bodyText": "Replaced the literals with the Atlas constants but keeping the local constants because the Atlas names are not really straightforward.", "author": "turcsanyip", "createdAt": "2020-06-23T17:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNzM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMDY3NQ==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443600675", "bodyText": "Is it possible it would still would work by falling back to the system truststore, or is it required to provide the truststore from the SSLContext?", "author": "bbende", "createdAt": "2020-06-22T14:29:41Z", "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java", "diffHunk": "@@ -385,31 +401,50 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(String proper\n     protected Collection<ValidationResult> customValidate(ValidationContext context) {\n         final Collection<ValidationResult> results = new ArrayList<>();\n \n-        final boolean isSSLContextServiceSet = context.getProperty(KAFKA_SSL_CONTEXT_SERVICE).isSet();\n+        final SSLContextService sslContextService = context.getProperty(SSL_CONTEXT_SERVICE).asControllerService(SSLContextService.class);\n         final ValidationResult.Builder invalidSSLService = new ValidationResult.Builder()\n-                .subject(KAFKA_SSL_CONTEXT_SERVICE.getDisplayName()).valid(false);\n+                .subject(SSL_CONTEXT_SERVICE.getDisplayName()).valid(false);\n \n+        AtomicBoolean isAtlasApiSecure = new AtomicBoolean(false);\n         String atlasUrls = context.getProperty(ATLAS_URLS).evaluateAttributeExpressions().getValue();\n         if (!StringUtils.isEmpty(atlasUrls)) {\n             Arrays.stream(atlasUrls.split(ATLAS_URL_DELIMITER))\n                 .map(String::trim)\n                 .forEach(input -> {\n-                    final ValidationResult.Builder builder = new ValidationResult.Builder().subject(ATLAS_URLS.getDisplayName()).input(input);\n                     try {\n-                        new URL(input);\n-                        results.add(builder.explanation(\"Valid URI\").valid(true).build());\n+                        final URL url = new URL(input);\n+                        if (\"https\".equalsIgnoreCase(url.getProtocol())) {\n+                            isAtlasApiSecure.set(true);\n+                        }\n                     } catch (Exception e) {\n-                        results.add(builder.explanation(\"Contains invalid URI: \" + e).valid(false).build());\n+                        results.add(new ValidationResult.Builder().subject(ATLAS_URLS.getDisplayName()).input(input)\n+                                .explanation(\"contains invalid URI: \" + e).valid(false).build());\n                     }\n                 });\n         }\n \n+        if (isAtlasApiSecure.get()) {\n+            if (sslContextService == null) {\n+                results.add(invalidSSLService.explanation(\"required for connecting to Atlas via HTTPS.\").build());", "originalCommit": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczOTAyNg==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443739026", "bodyText": "I'll remove these checks from customValidate().\nThere are also runtime checks with warning messages and fallback to system truststore in setAtlasSSLConfig(). These were used only when the Atlas URL was configured in the Atlas property file (not on the reporting task) and customValidate() did not check the SSL config.\nHowever, it is more consistent if there is only one check (with system truststore fallback) for all cases, regardless where the Atlas url has been configured.", "author": "turcsanyip", "createdAt": "2020-06-22T18:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMDY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MDg4OA==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444390888", "bodyText": "Removed the checks from customValidate(). Tested the fallback mechanism to the system truststore with -Djavax.net.ssl.trustStore* system properties and also with a custom jssecacerts.", "author": "turcsanyip", "createdAt": "2020-06-23T17:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwMDY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxOTg2Mw==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443719863", "bodyText": "Could use the Hadoop constants.", "author": "tpalfy", "createdAt": "2020-06-22T17:34:24Z", "path": "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/credstore/HadoopCredentialStore.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.credstore;\n+\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.KeyStore;\n+import java.util.Map;\n+\n+public class HadoopCredentialStore {\n+\n+    private static final String CRED_STORE_PASSWORD_ENVVAR = \"HADOOP_CREDSTORE_PASSWORD\";", "originalCommit": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MTI2Mg==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444391262", "bodyText": "Class has been removed (see comments below).", "author": "turcsanyip", "createdAt": "2020-06-23T17:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxOTg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNDA3MQ==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443724071", "bodyText": "We could initialize a collection in @OnScheduled instread.", "author": "tpalfy", "createdAt": "2020-06-22T17:42:16Z", "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java", "diffHunk": "@@ -385,31 +401,50 @@ protected PropertyDescriptor getSupportedDynamicPropertyDescriptor(String proper\n     protected Collection<ValidationResult> customValidate(ValidationContext context) {\n         final Collection<ValidationResult> results = new ArrayList<>();\n \n-        final boolean isSSLContextServiceSet = context.getProperty(KAFKA_SSL_CONTEXT_SERVICE).isSet();\n+        final SSLContextService sslContextService = context.getProperty(SSL_CONTEXT_SERVICE).asControllerService(SSLContextService.class);\n         final ValidationResult.Builder invalidSSLService = new ValidationResult.Builder()\n-                .subject(KAFKA_SSL_CONTEXT_SERVICE.getDisplayName()).valid(false);\n+                .subject(SSL_CONTEXT_SERVICE.getDisplayName()).valid(false);\n \n+        AtomicBoolean isAtlasApiSecure = new AtomicBoolean(false);\n         String atlasUrls = context.getProperty(ATLAS_URLS).evaluateAttributeExpressions().getValue();\n         if (!StringUtils.isEmpty(atlasUrls)) {\n             Arrays.stream(atlasUrls.split(ATLAS_URL_DELIMITER))\n                 .map(String::trim)\n                 .forEach(input -> {\n-                    final ValidationResult.Builder builder = new ValidationResult.Builder().subject(ATLAS_URLS.getDisplayName()).input(input);\n                     try {\n-                        new URL(input);\n-                        results.add(builder.explanation(\"Valid URI\").valid(true).build());\n+                        final URL url = new URL(input);\n+                        if (\"https\".equalsIgnoreCase(url.getProtocol())) {\n+                            isAtlasApiSecure.set(true);\n+                        }\n                     } catch (Exception e) {\n-                        results.add(builder.explanation(\"Contains invalid URI: \" + e).valid(false).build());\n+                        results.add(new ValidationResult.Builder().subject(ATLAS_URLS.getDisplayName()).input(input)\n+                                .explanation(\"contains invalid URI: \" + e).valid(false).build());\n                     }\n                 });\n         }\n \n+        if (isAtlasApiSecure.get()) {\n+            if (sslContextService == null) {\n+                results.add(invalidSSLService.explanation(\"required for connecting to Atlas via HTTPS.\").build());\n+            } else if (context.getControllerServiceLookup().isControllerServiceEnabled(sslContextService)) {\n+                if (!sslContextService.isTrustStoreConfigured()) {\n+                    results.add(invalidSSLService.explanation(\"no truststore configured which is required for connecting to Atlas via HTTPS.\").build());\n+                } else if (!KEYSTORE_TYPE_JKS.equalsIgnoreCase(sslContextService.getTrustStoreType())) {\n+                    results.add(invalidSSLService.explanation(\"truststore type is not JKS. Atlas client supports JKS truststores only.\").build());\n+                }\n+            }\n+        }\n+\n         final String atlasAuthNMethod = context.getProperty(ATLAS_AUTHN_METHOD).getValue();\n         final AtlasAuthN atlasAuthN = getAtlasAuthN(atlasAuthNMethod);\n         results.addAll(atlasAuthN.validate(context));\n \n-\n-        namespaceResolverLoader.forEach(resolver -> results.addAll(resolver.validate(context)));\n+        synchronized (namespaceResolverLoader) {", "originalCommit": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MjY3MQ==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444392671", "bodyText": "customValidate() runs before @OnScheduled gets called so that point is too late.\nI tried init() but ran into classloader issues with NamespaceResolver interface and its implementations.", "author": "turcsanyip", "createdAt": "2020-06-23T17:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNDA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTIzOA==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443675238", "bodyText": "This looks very similar to the added validation in ReportLineageToAtlas. Would it make sense to extract?", "author": "simonbence", "createdAt": "2020-06-22T16:16:10Z", "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/security/Kerberos.java", "diffHunk": "@@ -49,22 +49,24 @@\n \n         final KerberosCredentialsService credentialsService = context.getProperty(ReportLineageToAtlas.KERBEROS_CREDENTIALS_SERVICE).asControllerService(KerberosCredentialsService.class);\n \n-        final String resolvedPrincipal;\n-        final String resolvedKeytab;\n-        if (credentialsService == null) {\n-            resolvedPrincipal = explicitPrincipal;\n-            resolvedKeytab = explicitKeytab;\n-        } else {\n-            resolvedPrincipal = credentialsService.getPrincipal();\n-            resolvedKeytab = credentialsService.getKeytab();\n-        }\n-\n-        if (resolvedPrincipal == null || resolvedKeytab == null) {\n-            problems.add(new ValidationResult.Builder()\n-                .subject(\"Kerberos Credentials\")\n-                .valid(false)\n-                .explanation(\"Both the Principal and the Keytab must be specified when using Kerberos authentication, either via the explicit properties or the Kerberos Credentials Service.\")\n-                .build());\n+        if (credentialsService == null || context.getControllerServiceLookup().isControllerServiceEnabled(credentialsService)) {", "originalCommit": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5Mzc5NA==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444393794", "bodyText": "Yes, that would make sense. However, I just wanted to fix the ControllerServiceDisabledException stacktraces in the log for now. Leaving as it was.", "author": "turcsanyip", "createdAt": "2020-06-23T17:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NzkyMQ==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r443677921", "bodyText": "Is not that necessary to use allMatch? (I am not 100% sure though)", "author": "simonbence", "createdAt": "2020-06-22T16:20:23Z", "path": "nifi-nar-bundles/nifi-atlas-bundle/nifi-atlas-reporting-task/src/main/java/org/apache/nifi/atlas/reporting/ReportLineageToAtlas.java", "diffHunk": "@@ -632,10 +667,37 @@ private void setValue(Consumer<String> setter, Runnable emptyHandler, PropertyVa\n         }\n     }\n \n-    private void checkAtlasUrls(List<String> urlStrings, ConfigurationContext context) {\n-        if (urlStrings.isEmpty()) {\n-            throw new ProcessException(\"No Atlas URL has been specified! Set either the '\" + ATLAS_URLS.getDisplayName() + \"' \" +\n-                \"property on the processor or the 'atlas.rest.address' porperty in the atlas configuration file.\");\n+    private void setAtlasSSLConfig(Properties atlasProperties, ConfigurationContext context, List<String> urls, File confDir) throws IOException {\n+        boolean isAtlasApiSecure = urls.stream().anyMatch(url -> url.toLowerCase().startsWith(\"https\"));", "originalCommit": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5NjQ4NQ==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444396485", "bodyText": "It is a preexisting line relocated between methods. It is supposed here that all the URLs have the same scheme so it is enough to check if there is one https:// (and in this case all the others are https://).\nBut it was not checked anywhere. Added the check to customValidate().", "author": "turcsanyip", "createdAt": "2020-06-23T17:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NzkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMjYxOA==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444222618", "bodyText": "Taking a closer look, I think we would be better off using the hadoop library for this.\nThis module already depends on hadoop-commons and the API between NiFi and Atlas solidifies this dependency - although not explicitly through code, but through the constraints of how to create the keystore.\nI don't think it's worth having our own version but @bbende, I'd give you the final word on this one.", "author": "tpalfy", "createdAt": "2020-06-23T13:27:36Z", "path": "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/credstore/HadoopCredentialStore.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.nifi.security.credstore;\n+\n+import org.apache.nifi.processor.exception.ProcessException;\n+\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.KeyStore;\n+import java.util.Map;\n+\n+public class HadoopCredentialStore {", "originalCommit": "9c9a61190d43ea616f3b49219b5ec6dfa28dc10a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMDQ5NQ==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444230495", "bodyText": "I didn't realize the Atlas bundle already had hadoop-common so originally I thought it was better to not add that dependency and just have our own version of this class, but if it is already there then I'm indifferent.", "author": "bbende", "createdAt": "2020-06-23T13:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMjYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNzQ3MQ==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444237471", "bodyText": "I had troubles with running the tests on Windows. I managed to fix them but some other problems may occur later. So now I would also vote for not maintaining our custom solution but using the one from hadoop-common.", "author": "turcsanyip", "createdAt": "2020-06-23T13:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMjYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5NzIxNQ==", "url": "https://github.com/apache/nifi/pull/4348#discussion_r444397215", "bodyText": "Refactored to use LocalJavaKeyStoreProvider from hadoop-common.", "author": "turcsanyip", "createdAt": "2020-06-23T17:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyMjYxOA=="}], "type": "inlineReview"}, {"oid": "dc0c937e567835339b7048382bda74aeea79492e", "url": "https://github.com/apache/nifi/commit/dc0c937e567835339b7048382bda74aeea79492e", "message": "NIFI-7523: Review changes", "committedDate": "2020-06-23T15:54:52Z", "type": "commit"}]}