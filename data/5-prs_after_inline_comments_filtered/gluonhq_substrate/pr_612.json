{"pr_number": 612, "pr_title": "Use official Android Gradle plugin", "pr_createdAt": "2020-05-23T12:52:34Z", "pr_url": "https://github.com/gluonhq/substrate/pull/612", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NjY5Nw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429546697", "bodyText": "If projectLibsLocation doesn't exist, the folder is not created.\nThis fixes it:\nif (!Files.exists(projectLibsLocation)) {\n        Files.createDirectories(projectLibsLocation);\n}", "author": "jperedadnr", "createdAt": "2020-05-23T13:33:32Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,122 +300,27 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n-\n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n-    }\n-\n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n-\n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../attach.jar\", \".\");\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzI0OQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567249", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-05-23T18:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NjY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODI3Mw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429548273", "bodyText": "If targetFolder doesn't exist, the folder is not created.\nThis fixes it:\nif (!Files.exists(targetFolder)) {\n        Files.createDirectories(targetFolder);\n}", "author": "jperedadnr", "createdAt": "2020-05-23T13:55:38Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -300,94 +263,24 @@ boolean useGraalVMJavaStaticLibraries() {\n         return false;\n     }\n \n-    private Path getApkPath() {\n-        return paths.getGvmPath().resolve(Constants.APK_PATH);\n-    }\n-\n-    private Path getApkBinPath() {\n-        return getApkPath().resolve(\"bin\");\n-    }\n-\n-    private Path getApkClassesPath() {\n-        return getApkPath().resolve(\"classes\");\n-    }\n-\n-    private Path getApkLibPath() {\n-        return getApkPath().resolve(\"lib\");\n-    }\n-\n-    private Path getApkLibArm64Path() {\n-        return getApkLibPath().resolve(\"arm64-v8a\");\n-    }\n-\n-    private Path getApkAndroidSourcePath() {\n-        return getApkPath().resolve(\"android-source\");\n+    Path getAndroidProjectPath() {\n+        return paths.getGvmPath().resolve(\"android_project\");\n     }\n \n-    private void ensureApkOutputDirectoriesExist() throws IOException {\n-        Files.createDirectories(getApkPath());\n-        Files.createDirectories(getApkBinPath());\n-        Files.createDirectories(getApkClassesPath());\n-        Files.createDirectories(getApkLibPath());\n-        Files.createDirectories(getApkLibArm64Path());\n-    }\n-\n-    private boolean processPrecompiledClasses(String androidJar) throws IOException, InterruptedException {\n-        String androidCodeLocation = \"/native/android/dalvik\";\n-\n-        copyOtherDalvikClasses();\n-        if (projectConfiguration.isUsePrecompiledCode()) {\n-            copyPrecompiledClasses(androidCodeLocation + DALVIK_PRECOMPILED_CLASSES);\n-        } else {\n-            return compileDalvikCode(androidCodeLocation + \"/source/\", androidJar) == 0;\n-        }\n-\n-        return true;\n-    }\n-\n-    private void copyPrecompiledClasses(String androidPrecompiled) throws IOException {\n-        for (String classFile : compiledGlueCodeActivity) {\n-            FileOps.copyResource(androidPrecompiled + DALVIK_ACTIVITY_PACKAGE + classFile + \".class\",\n-                    getApkClassesPath().resolve(DALVIK_ACTIVITY_PACKAGE + classFile + \".class\"));\n-        }\n-        for (String classFile : compiledGlueCodeJavaFX) {\n-            FileOps.copyResource(androidPrecompiled + DALVIK_JAVAFX_PACKAGE + classFile + \".class\",\n-                    getApkClassesPath().resolve(DALVIK_JAVAFX_PACKAGE + classFile + \".class\"));\n-        }\n-    }\n-\n-    private int compileDalvikCode(String androidSrc, String androidJar) throws IOException, InterruptedException {\n-        Files.createDirectories(getApkAndroidSourcePath());\n-\n-        for (String srcFile : sourceGlueCode) {\n-            FileOps.copyResource(androidSrc + srcFile + \".java\", getApkAndroidSourcePath().resolve(srcFile + \".java\"));\n-        }\n-\n-        List<String> sources = new ArrayList<>();\n-\n-        for (String srcFile : sourceGlueCode) {\n-            sources.add(getApkAndroidSourcePath().resolve(srcFile + \".java\").toString());\n-        }\n-\n-        ProcessRunner processRunner = new ProcessRunner(projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"javac\").toString(),\n-                \"-d\", getApkClassesPath().toString(),\n-                \"-source\", \"1.7\", \"-target\", \"1.7\",\n-                \"-cp\", getApkAndroidSourcePath().toString() + File.pathSeparator + getApkClassesPath().toString(),\n-                \"-bootclasspath\", androidJar);\n-        processRunner.addArgs(sources);\n-        return processRunner.runProcess(\"dalvikCompilation\");\n+    Path getAndroidProjectMainPath() {\n+        return getAndroidProjectPath().resolve(\"app\").resolve(\"src\").resolve(\"main\");\n     }\n \n     /**\n      * Walks through the jars in the classpath, excluding the JavaFX ones,\n      * and looks for META-INF/substrate/dalvik/*.class files.\n      *\n-     * The method will copy all the class files found into the target folder\n+     * The method will copy all the class files found into jar in the target folder\n      *\n      * @throws IOException\n      */\n     private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n-        Path targetFolder = getApkClassesPath();\n+        Path targetFolder = getAndroidProjectPath().resolve(\"libs\").resolve(\"tmp\");", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzI2NA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567264", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-05-23T18:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDc0Ng==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429550746", "bodyText": "Once you have a path to the source, can't you use FileOps::copyDirectory?", "author": "jperedadnr", "createdAt": "2020-05-23T14:28:53Z", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -141,6 +148,44 @@ public static Path copyResource(String resource, Path destination) throws IOExce\n         return copyStream(is, destination);\n     }\n \n+    /**\n+     * Copies directory from resources into destination path\n+     * @param source\n+     * @param target\n+     * @throws IOException\n+     */\n+    public static void copyDirectoryFromResources(String source, final Path target) throws IOException {\n+        // https://stackoverflow.com/a/24316335\n+        FileSystem fileSystem;\n+        try {\n+            URI resource = SubstrateDispatcher.class.getResource(\"\").toURI();\n+            fileSystem = FileSystems.newFileSystem(resource, Collections.<String, String>emptyMap());\n+        } catch(URISyntaxException e) {\n+            throw new IOException(e.toString());\n+        }\n+\n+        final Path jarPath = fileSystem.getPath(source);", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NTAyOQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429565029", "bodyText": "I believe that calling FileOps::copyDirectory in preVisitDirectory would copy all directories several times (for every node depth)?\nIf that is what you meant?", "author": "lazar-mitrovic", "createdAt": "2020-05-23T17:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NTk3OA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429565978", "bodyText": "I meant that we already have copyDirectory(Path, Path), so you could replace the whole Files.walkFileTree(...) part with it. I haven't tested it though.", "author": "jperedadnr", "createdAt": "2020-05-23T18:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTU4NQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429571585", "bodyText": "This fails with java.nio.file.ProviderMismatchException", "author": "lazar-mitrovic", "createdAt": "2020-05-23T19:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDk5OA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429550998", "bodyText": "can you use a different line for each operation?", "author": "jperedadnr", "createdAt": "2020-05-23T14:31:05Z", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -264,6 +309,28 @@ public static void copyDirectory(Path source, Path destination) throws IOExcepti\n             copyFile(source, destination);\n     }\n \n+    /**\n+     * Recursively list files with spectified extension from directory\n+     * @param directory directory to be searched\n+     * @param extension extension by which to filter files\n+     * @throws IOException if an exception happens when listing the content\n+     */\n+    public static List<String> listFilesWithExtensionInDirectory(Path directory, String extension) throws IOException {\n+        try (Stream<Path> walk = Files.walk(directory)) {\n+            return walk.filter(Files::isRegularFile).map(x -> x.toString())", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzM5MQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567391", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-05-23T18:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjEwOA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429552108", "bodyText": "Maybe you can use projectConfiguration.isUseLLVM(). So far, backend is not set, but gives the possibility to change that if needed.", "author": "jperedadnr", "createdAt": "2020-05-23T14:45:26Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -221,22 +173,33 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n         return processResult == 0;\n     }\n \n+    boolean useLLVM = false;\n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-        return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        ArrayList<String> flags = new ArrayList<String>(Arrays.asList(\n                 \"-H:-SpawnIsolates\",\n                 \"-Dsvm.targetArch=\" + projectConfiguration.getTargetTriplet().getArch(),\n                 \"-H:+UseOnlyWritableBootImageHeap\",\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n-                \"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+                \"-H:+UseBionicC\"));\n+        if (useLLVM) {", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzQyMA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567420", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-05-23T18:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjEzNg==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429552136", "bodyText": "Same here", "author": "jperedadnr", "createdAt": "2020-05-23T14:45:34Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -221,22 +173,33 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n         return processResult == 0;\n     }\n \n+    boolean useLLVM = false;\n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-        return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        ArrayList<String> flags = new ArrayList<String>(Arrays.asList(\n                 \"-H:-SpawnIsolates\",\n                 \"-Dsvm.targetArch=\" + projectConfiguration.getTargetTriplet().getArch(),\n                 \"-H:+UseOnlyWritableBootImageHeap\",\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n-                \"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+                \"-H:+UseBionicC\"));\n+        if (useLLVM) {\n+            flags.add(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM);\n+            flags.add(\"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+        }\n+        return flags;\n     }\n \n     @Override\n     List<String> getTargetSpecificObjectFiles() throws IOException {\n-        return FileOps.findFile( paths.getGvmPath(), \"llvm.o\").map( objectFile ->\n-                Collections.singletonList(objectFile.toAbsolutePath().toString())\n-        ).orElseThrow();\n+        if (useLLVM) {", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjQ3Nw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429552477", "bodyText": "this jar will contain dalvik classes found in the classpath, so far probably only from Attach. However probably better give it another name?", "author": "jperedadnr", "createdAt": "2020-05-23T14:49:56Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,122 +300,27 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n-\n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n-    }\n-\n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n-\n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../attach.jar\", \".\");", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzUxMQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567511", "bodyText": "I renamed it to additional_classes.jar, if you have better idea let me know :)", "author": "lazar-mitrovic", "createdAt": "2020-05-23T18:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429553081", "bodyText": "So gensrc is not used anymore? The developer still can pick the manifest to perform further changes if needed from the new folder, of course, but this changes the idea of having this intermediate location.", "author": "jperedadnr", "createdAt": "2020-05-23T14:58:04Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -532,86 +330,58 @@ private int sign(Path buildToolsPath, String alignedApk) throws IOException, Int\n     private Path getCapCacheDir() throws IOException {\n         Path capPath = paths.getGvmPath().resolve(\"capcache\");\n         if (!Files.exists(capPath)) {\n-            Files.createDirectory(capPath);\n-        }\n-        for (String cap : capFiles) {\n-            FileOps.copyResource(capLocation+cap, capPath.resolve(cap));\n+            FileOps.copyDirectoryFromResources(capLocation, capPath);\n         }\n         return capPath;\n     }\n \n-    private Path createDevelopKeystore() throws IOException, InterruptedException {\n-        Path keystore = Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE);\n-\n-        if (Files.exists(keystore)) {\n-            Logger.logDebug(\"The \" + Constants.ANDROID_KEYSTORE + \" file already exists, skipping\");\n-            return keystore;\n-        }\n-\n-        int processResult;\n-\n-        ProcessRunner generateTestKey = new ProcessRunner(\"keytool\", \"-genkey\", \"-v\", \"-keystore\", keystore.toString(), \"-storepass\",\n-                DEFAULT_DEBUG_KEY_STORE_PASSWORD, \"-alias\", DEFAULT_DEBUG_KEY_ALIAS, \"-keypass\", DEFAULT_DEBUG_KEY_ALIAS_PASSWORD, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-validity\", \"10000\", \"-dname\", \"CN=Android Debug,O=Android,C=US\", \"-noprompt\");\n-        processResult = generateTestKey.runProcess(\"generateTestKey\");\n-        if (processResult != 0) {\n-            throw new IllegalArgumentException(\"fatal, can not create a keystore\");\n-        }\n-\n-        Logger.logDebug(\"Done creating \" + Constants.ANDROID_KEYSTORE);\n-        return keystore;\n-    }\n-\n-    private String findLatestBuildTool(Path sdkPath) throws IOException {\n-        Objects.requireNonNull(sdkPath);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\");\n-        if (Files.exists(buildToolsPath)) {\n-            return Files.walk(buildToolsPath, 1)\n-                    .filter(file -> Files.isDirectory(file) && !file.equals(buildToolsPath))\n-                    .map(file -> new Version(file.getFileName().toString()))\n-                    .max(Version::compareTo)\n-                    .map(Version::toString)\n-                    .orElseThrow(BuildToolNotFoundException::new);\n+    /*\n+     * Copies the Android project from the jar resource and stores it in\n+     * a directory. Return that directory\n+     */\n+    private Path prepareAndroidProject() throws IOException {\n+        Path androidProject = getAndroidProjectPath();\n+        if (!Files.exists(androidProject)) {\n+            FileOps.copyDirectoryFromResources(\"/native/android/android_project\", androidProject);\n         }\n-        throw new BuildToolNotFoundException();\n+        getAndroidProjectPath().resolve(\"gradlew\").toFile().setExecutable(true);\n+        return androidProject;\n     }\n \n     /**\n-     * If android manifest is present in src/android, then, this\n-     * path will be returned.\n+     * If android manifest is present in src/android, it will be copied to\n+     * android project.\n      *\n-     * Else, default android manifest is copied into gvm/genSrc/android and\n-     * this path is returned\n+     * Else, default android manifest is adjusted and used in project", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzU1Mw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567553", "bodyText": "I agree, I moved android_project directory to gensrc since it seems more appropriate", "author": "lazar-mitrovic", "createdAt": "2020-05-23T18:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODI2OQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429578269", "bodyText": "About that... gensrc should be just an intermediate folder for source files that might be modified by the developer if needed. Initially it was meant for AndroidManifest.xml or Default-info.plist, so these could be copied to src/android or src/ios. If the latter were present then these will be used.\nMy earlier comment was about keeping the manifest accessible, but the project could be still part of gvm, as it was before.\nI understand that now we have a more complex situation, as we have a whole gradle project, and it doesn't make sense that the developer moves the whole project to src/android.\nI'd say we need to keep in gensrc only the files that can be copied to src/android for further modifications: AndroidManifest, and maybe build.gradle?", "author": "jperedadnr", "createdAt": "2020-05-23T21:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjM1OA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429772358", "bodyText": "why would anyone want to modify those files manually?", "author": "johanvos", "createdAt": "2020-05-25T07:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MjU4Mg==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429952582", "bodyText": "Should be fixed now", "author": "lazar-mitrovic", "createdAt": "2020-05-25T14:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzQ5MQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429553491", "bodyText": "I take that assembleDebug will sign internally the apk for debug, and the debug.keystore we created is no longer required, right?\nWhat about signing for release? I see that you have removed the sign method. What is the alternative? Could we create the signing configuration in the build.gradle file, with the release data?", "author": "jperedadnr", "createdAt": "2020-05-23T15:03:48Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -124,80 +106,50 @@ public boolean compile() throws IOException, InterruptedException {\n     public boolean link() throws IOException, InterruptedException {\n         // we override link as we need to do some checks first. If we have no clang in android_ndk, we should not start linking\n         if (ndk == null) throw new IOException (\"Can't find an Android NDK on your system. Set the environment property ANDROID_NDK\");\n-        if (clang == null) throw new IOException (\"You specified an android ndk, but it doesn't contain \"+ndk+\"/toolchains/llvm/prebuilt/\"+hostPlatformFolder+\"/bin/clang\");\n+        if (clang == null) throw new IOException (\"You specified an android NDK, but it doesn't contain \"+ndk+\"/toolchains/llvm/prebuilt/\"+hostPlatformFolder+\"/bin/clang\");\n         if (sdk == null) throw new IOException (\"Can't find an Android SDK on your system. Set the environment property ANDROID_SDK\");\n \n         return super.link();\n     }\n \n     @Override\n     public boolean packageApp() throws IOException, InterruptedException {\n-        Path androidPathForManifest = prepareAndroidManifest();\n-        Path androidPathForRes = prepareAndroidResources();\n-\n-        ensureApkOutputDirectoriesExist();\n-\n-        Path sdkPath = Paths.get(sdk);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\").resolve(findLatestBuildTool(sdkPath));\n-        String androidJar = sdkPath.resolve(\"platforms\").resolve(\"android-27\").resolve(\"android.jar\").toString();\n-\n-        String unalignedApk = getApkBinPath().resolve(projectConfiguration.getAppName() + \".unaligned.apk\").toString();\n-        String alignedApk = getApkBinPath().resolve(projectConfiguration.getAppName() + \".apk\").toString();\n-\n-        if (!processPrecompiledClasses(androidJar)) {\n-            return false;\n-        }\n-\n-        copyAndroidManifest(androidPathForManifest);\n-        copyAssets(androidPathForRes);\n-\n-        int processResult = dx(buildToolsPath);\n-        if (processResult != 0) {\n-            return false;\n-        }\n-\n-        processResult = aapt(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return false;\n-        }\n-\n-        processResult = zipAlign(buildToolsPath, unalignedApk, alignedApk);\n-        if (processResult != 0) {\n-            return false;\n-        }\n+        prepareAndroidProject();\n+        prepareAndroidManifest();\n+        prepareAndroidResources();\n+        copyOtherDalvikClasses();\n+        copySubstrateLibraries();\n \n-        processResult = sign(buildToolsPath, alignedApk);\n-        return processResult == 0;\n+        ProcessRunner assembleDebug = new ProcessRunner(", "originalCommit": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTMxNA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429571314", "bodyText": "This should be fixed in latest commit", "author": "lazar-mitrovic", "createdAt": "2020-05-23T19:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODY3Ng==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429568676", "bodyText": "This is public API (that can be accessed by the client plugins). However we already have private API: https://github.com/gluonhq/substrate/blob/master/src/main/java/com/gluonhq/substrate/model/InternalProjectConfiguration.java#L299\nSo far I don't think we need this.", "author": "jperedadnr", "createdAt": "2020-05-23T18:39:38Z", "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -46,6 +46,7 @@\n     private String javafxStaticSdkVersion;\n     private String javaStaticSdkVersion;\n \n+    private boolean useLLVM = false;", "originalCommit": "59caa0438b68e980a686ad2e075de9d4a1e1d41d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODgyOA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429568828", "bodyText": "This is correct, as it points to https://github.com/gluonhq/substrate/blob/master/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java#L100", "author": "jperedadnr", "createdAt": "2020-05-23T18:41:48Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -183,7 +182,7 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n                 \"-H:+UseBionicC\"));\n-        if (useLLVM) {\n+        if (projectConfiguration.isUseLLVM()) {", "originalCommit": "59caa0438b68e980a686ad2e075de9d4a1e1d41d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MjgxOQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429572819", "bodyText": "Should be fixed now", "author": "lazar-mitrovic", "createdAt": "2020-05-23T19:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY1Nw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429571657", "bodyText": "I get this warning at the end of the package task:\nWARNING: No version of NDK matched the required version 21.1.6352462. Versions available locally: \n\nI have installed the ndk-bundle, but somehow it doesn't find it. Not sure if this is an issue?", "author": "jperedadnr", "createdAt": "2020-05-23T19:24:26Z", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -75,7 +75,7 @@\n \n     private static final String ANDROID_KEY = \"24333f8a63b6825ea9c5514f83c2829b004d1fee\";\n     private static final String[] ANDROID_SDK_PACKAGES = {\n-            \"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \n+            \"platforms;android-27\", \"build-tools;29.0.2\", \"platform-tools\",", "originalCommit": "59caa0438b68e980a686ad2e075de9d4a1e1d41d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzI2MQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429573261", "bodyText": "It is known issue at Google's end https://issuetracker.google.com/issues/144111441#comment16\nIf package task doesn't fail I think we can safely ignore it.", "author": "lazar-mitrovic", "createdAt": "2020-05-23T19:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzU0Nw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429573547", "bodyText": "Also, Gradle doesn't actually use NDK in this project configuration, since we are linking everything in AbstractTarget and just copying result as shared library.", "author": "lazar-mitrovic", "createdAt": "2020-05-23T19:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMTQ5MQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429811491", "bodyText": "This fails on GraalVM 20.1\nCan we make this optional until there is a GraalVM release that has this flag?", "author": "johanvos", "createdAt": "2020-05-25T08:44:51Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -223,20 +182,30 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n \n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-        return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        ArrayList<String> flags = new ArrayList<String>(Arrays.asList(\n                 \"-H:-SpawnIsolates\",\n                 \"-Dsvm.targetArch=\" + projectConfiguration.getTargetTriplet().getArch(),\n                 \"-H:+UseOnlyWritableBootImageHeap\",\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n-                \"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+                \"-H:+UseBionicC\",", "originalCommit": "a7b459c05e09575f6990687659f7dcf7485b56d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MTc2Ng==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429951766", "bodyText": "Maybe we should add GraalVM version detection for this kind of things?", "author": "lazar-mitrovic", "createdAt": "2020-05-25T14:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMTQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMzQ5Nw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429813497", "bodyText": "This won't work on 20.1, as it requires oracle/graal@879a752", "author": "johanvos", "createdAt": "2020-05-25T08:48:46Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -108,14 +94,16 @@ public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfigurat\n \n         Path clangguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", hostPlatformFolder, \"bin\", \"clang\");\n         this.clang = Files.exists(clangguess) ? clangguess : null;\n+\n+        projectConfiguration.setBackend(Constants.BACKEND_AARCH64);", "originalCommit": "a7b459c05e09575f6990687659f7dcf7485b56d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMzk4OA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429903988", "bodyText": "#615 should fix this.", "author": "johanvos", "createdAt": "2020-05-25T12:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMzQ5Nw=="}], "type": "inlineReview"}, {"oid": "c15f85adefb26c101516f8e4a49a7dd92f238c2e", "url": "https://github.com/gluonhq/substrate/commit/c15f85adefb26c101516f8e4a49a7dd92f238c2e", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse `-H:+RemoveSaturatedTypeFlows` flag\n\nUse ARM64 backend\n\n\n\n\nTools version bump, create missing directories\n\nNewer build tools version\n\n\nUnused import\n\n\nGenerate release signing configuration\n\n\nOld typo\n\n\nUse internal api for backend lookup\n\n\nKeystore config file, target sdk, generated resources", "committedDate": "2020-05-25T13:58:45Z", "type": "forcePushed"}, {"oid": "202c81cbcf190544df670692146bd9b1cd182814", "url": "https://github.com/gluonhq/substrate/commit/202c81cbcf190544df670692146bd9b1cd182814", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse `-H:+RemoveSaturatedTypeFlows` flag\n\nUse ARM64 backend\n\n\n\n\nTools version bump, create missing directories\n\nNewer build tools version\n\n\nUnused import\n\n\nGenerate release signing configuration\n\n\nOld typo\n\n\nUse internal api for backend lookup\n\n\nKeystore config file, target sdk, generated resources\n\n\nKeystore template", "committedDate": "2020-05-25T14:12:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429970106", "bodyText": "The file is not created, is it?", "author": "jperedadnr", "createdAt": "2020-05-25T14:41:29Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "originalCommit": "202c81cbcf190544df670692146bd9b1cd182814", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwMjQ4NA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430002484", "bodyText": "It is copied from here\n\n  \n    \n      substrate/src/main/resources/native/android/android_project/keystore.properties\n    \n    \n        Lines 1 to 4\n      in\n      12fe324\n    \n    \n    \n    \n\n        \n          \n           storeFile=KEYSTORE_FILE \n        \n\n        \n          \n           storePassword=KEYSTORE_PASSWORD \n        \n\n        \n          \n           keyAlias=KEY_ALIAS \n        \n\n        \n          \n           keyPassword=KEY_PASSWORD", "author": "lazar-mitrovic", "createdAt": "2020-05-25T16:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwODQ1NA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430008454", "bodyText": "I saw that, but what I meant is that the file is not created under gensrc/android_project.\nAlso I don't see where we call release, all the tasks are assembleDebug or installDebug, and the generated apk is under outputs/apk/debug/apk-debug.", "author": "jperedadnr", "createdAt": "2020-05-25T16:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAxNjczNw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430016737", "bodyText": "That file is copied to /gvm/android_project/keystore.properties. I don't think it should be in gensrc, since keystore.properties is auto-generated from ReleaseConfiguration, on each package task.\nI don't call release since ./gradlew assembleRelease is a lot slower, requires release keystore and isn't required for debugging. I believe that client:publish task or something similar might be better path moving forward.", "author": "lazar-mitrovic", "createdAt": "2020-05-25T16:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAxODU4Ng==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430018586", "bodyText": "Hmm, I still have gensrc/android_project, so I've must missed one of your latest commits (hard to say since you squash them ;) ). Will checkout again.\nAbout publish, precisely we have added releaseConfiguration to the plugin: if you have it, you want to release, so package should do that.", "author": "jperedadnr", "createdAt": "2020-05-25T16:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMDk5OA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430030998", "bodyText": "I added check if releaseConfiguration is set to switch between Debug and Release", "author": "lazar-mitrovic", "createdAt": "2020-05-25T17:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMTM5Mw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430031393", "bodyText": "Ok, works now under gvm. However, I still think we should use assembleRelease if developer provides releaseConfiguration and calls client:package.\nIn order to test it, I'm using assembleRelease, and I got an exception:\nExecution failed for task ':app:validateSigningRelease'.\n> Keystore file not set for signing config release\n\nI've done some changes:\n\nmoved keystore.properties to app,\nchanged in generateSigningConfiguration:\n\nPath settingsFile = getAndroidProjectPath().resolve(\"app\").resolve(\"keystore.properties\");\n\n\nchanged the app's build to:\n\nrelease {\n            if (file(\"keystore.properties\").exists()) {\n                Properties keystoreSettings = new Properties()\n                keystoreSettings.load(new FileInputStream(file(\"keystore.properties\")))\n\n                storeFile = file(keystoreSettings['storeFile'])\n                storePassword = keystoreSettings['storePassword']\n                keyAlias = keystoreSettings['keyAlias']\n                keyPassword = keystoreSettings['keyPassword']\n            }\n        }\n\nbuildTypes {\n        release {\n            signingConfig signingConfigs.release\n        }\n    }\n\n\nThis works fine now (and it takes a few more seconds).", "author": "jperedadnr", "createdAt": "2020-05-25T17:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NzAxNg==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430047016", "bodyText": "I've added those changes in latest commit.\nAs for client:package, \n  \n    \n      substrate/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n    \n    \n        Lines 367 to 374\n      in\n      bf585c5\n    \n    \n    \n    \n\n        \n          \n           if (keyStorePath == null || \n        \n\n        \n          \n                   !keyStorePath.endsWith(\".keystore\") || !Files.exists(Path.of(keyStorePath)) || \n        \n\n        \n          \n                   keyAlias == null || keyStorePass == null || keyPass == null) { \n        \n\n        \n          \n               if (keyStorePath != null) { \n        \n\n        \n          \n                   Logger.logSevere(\"The key store path \" + keyStorePath + \" is not valid.\"); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return \"Debug\"; \n        \n\n        \n          \n           } \n        \n    \n  \n\n should be false if releaseConfiguration is provided, so \"Release\" should be returned and \"assembleRelease\" emitted.", "author": "lazar-mitrovic", "createdAt": "2020-05-25T18:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}], "type": "inlineReview"}, {"oid": "12fe324a2336c5cbea8aefb29ddcf834001e012a", "url": "https://github.com/gluonhq/substrate/commit/12fe324a2336c5cbea8aefb29ddcf834001e012a", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse `-H:+RemoveSaturatedTypeFlows` flag\n\nUse ARM64 backend\n\n\n\n\nTools version bump, create missing directories\n\nNewer build tools version\n\n\nUnused import\n\n\nGenerate release signing configuration\n\n\nOld typo\n\n\nUse internal api for backend lookup\n\n\nKeystore config file, target sdk, generated resources\n\n\nKeystore template\n\n\nDetect GraalVM version", "committedDate": "2020-05-25T15:54:46Z", "type": "forcePushed"}, {"oid": "0fb238bbebadaed07078da7a3efa27bbd2e032e0", "url": "https://github.com/gluonhq/substrate/commit/0fb238bbebadaed07078da7a3efa27bbd2e032e0", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse `-H:+RemoveSaturatedTypeFlows` flag\n\nUse ARM64 backend\n\n\n\n\nTools version bump, create missing directories\n\nNewer build tools version\n\n\nUnused import\n\n\nGenerate release signing configuration\n\n\nOld typo\n\n\nUse internal api for backend lookup\n\n\nKeystore config file, target sdk, generated resources\n\n\nKeystore template\n\n\nDetect GraalVM version\n\n\nCodacy fixes", "committedDate": "2020-05-25T16:05:53Z", "type": "forcePushed"}, {"oid": "9757e9ba5cc93cc8fa0232d173aa3d9b17afc494", "url": "https://github.com/gluonhq/substrate/commit/9757e9ba5cc93cc8fa0232d173aa3d9b17afc494", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse `-H:+RemoveSaturatedTypeFlows` flag\n\nUse ARM64 backend\n\nTools version bump, create missing directories\n\nNewer build tools version\n\nUnused import\n\nGenerate release signing configuration\n\nOld typo\n\nUse internal api for backend lookup\n\nKeystore config file, target sdk, generated resources\n\nKeystore template\n\nDetect GraalVM version\n\nCodacy fixes", "committedDate": "2020-05-25T16:07:10Z", "type": "forcePushed"}, {"oid": "0151ffbd7da92195627c14a4ffb7847bdd45aa92", "url": "https://github.com/gluonhq/substrate/commit/0151ffbd7da92195627c14a4ffb7847bdd45aa92", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse `-H:+RemoveSaturatedTypeFlows` flag\n\nUse ARM64 backend\n\nTools version bump, create missing directories\n\nNewer build tools version\n\nUnused import\n\nGenerate release signing configuration\n\nOld typo\n\nUse internal api for backend lookup\n\nKeystore config file, target sdk, generated resources\n\nKeystore template\n\nDetect GraalVM version\n\nCodacy fixes\n\nFix GraalVM version detection", "committedDate": "2020-05-25T16:35:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMjcwMA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430022700", "bodyText": "This fails for me, as I have installed graalvm-ce-java11-20.2.0-dev, and that produces  GraalVM CE 20.2.0-dev, that doesn't follow the current pattern (but this is a different issue though, I filed #617 for it).", "author": "jperedadnr", "createdAt": "2020-05-25T17:10:40Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -108,14 +95,17 @@ public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfigurat\n \n         Path clangguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", hostPlatformFolder, \"bin\", \"clang\");\n         this.clang = Files.exists(clangguess) ? clangguess : null;\n+        if (projectConfiguration.getGraalVersion().compareTo(new Version(\"20.1.0\")) > 0) {", "originalCommit": "0151ffbd7da92195627c14a4ffb7847bdd45aa92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMDY1MA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430030650", "bodyText": "Can you check if it works for you now?", "author": "lazar-mitrovic", "createdAt": "2020-05-25T17:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMjcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0OTYwOQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430049609", "bodyText": "Use toLowerCase(Locale.ROOT).\nCan you also check if Files.exists(generatedApk) before copying it to gvm? In case, for any reason, the process ends successfully but the apk file is not found?", "author": "jperedadnr", "createdAt": "2020-05-25T19:04:12Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -127,23 +123,32 @@ public boolean packageApp() throws IOException, InterruptedException {\n         prepareAndroidResources();\n         copyOtherDalvikClasses();\n         copySubstrateLibraries();\n-        generateSigningConfiguration();\n+        String configuration = generateSigningConfiguration();\n \n         ProcessRunner assembleDebug = new ProcessRunner(\n                             getAndroidProjectPath().resolve(\"gradlew\").toString(),\n                             \"-p\", getAndroidProjectPath().toString(),\n-                            \"assembleDebug\");\n+                            \"assemble\" + configuration);\n         assembleDebug.addToEnv(\"ANDROID_HOME\", sdk);\n         assembleDebug.addToEnv(\"JAVA_HOME\", projectConfiguration.getGraalPath().toString());\n-        return assembleDebug.runProcess(\"package-task\") == 0;\n+        if (assembleDebug.runProcess(\"package-task\") != 0) {\n+            return false;\n+        }\n+        Path generatedApk = getAndroidProjectPath().resolve(\"app\").resolve(\"build\")\n+                            .resolve(\"outputs\").resolve(\"apk\").resolve(configuration.toLowerCase())", "originalCommit": "c1189f8571bad4400efbf4651f2255aa2789667a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3MTQwNQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430071405", "bodyText": "Should be fixed now", "author": "lazar-mitrovic", "createdAt": "2020-05-25T20:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0OTYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5NTg0MA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430195840", "bodyText": "This would be better in a separate PR, as it affects all platforms.", "author": "johanvos", "createdAt": "2020-05-26T07:01:41Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -89,7 +89,8 @@\n             \"-H:+AddAllCharsets\",\n             \"-H:+ReportExceptionStackTraces\",\n             \"-H:-DeadlockWatchdogExitOnTimeout\",\n-            \"-H:DeadlockWatchdogInterval=0\"\n+            \"-H:DeadlockWatchdogInterval=0\",\n+            \"-H:+RemoveSaturatedTypeFlows\"", "originalCommit": "02f22bb09f553a9731e54ddff1fa88a8660cb389", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5NzM5NA==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430197394", "bodyText": "/native/android/android_project can be a constant (error-prone to spell it)", "author": "johanvos", "createdAt": "2020-05-26T07:05:09Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -532,86 +389,61 @@ private int sign(Path buildToolsPath, String alignedApk) throws IOException, Int\n     private Path getCapCacheDir() throws IOException {\n         Path capPath = paths.getGvmPath().resolve(\"capcache\");\n         if (!Files.exists(capPath)) {\n-            Files.createDirectory(capPath);\n-        }\n-        for (String cap : capFiles) {\n-            FileOps.copyResource(capLocation+cap, capPath.resolve(cap));\n+            FileOps.copyDirectoryFromResources(capLocation, capPath);\n         }\n         return capPath;\n     }\n \n-    private Path createDevelopKeystore() throws IOException, InterruptedException {\n-        Path keystore = Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE);\n-\n-        if (Files.exists(keystore)) {\n-            Logger.logDebug(\"The \" + Constants.ANDROID_KEYSTORE + \" file already exists, skipping\");\n-            return keystore;\n-        }\n-\n-        int processResult;\n-\n-        ProcessRunner generateTestKey = new ProcessRunner(\"keytool\", \"-genkey\", \"-v\", \"-keystore\", keystore.toString(), \"-storepass\",\n-                DEFAULT_DEBUG_KEY_STORE_PASSWORD, \"-alias\", DEFAULT_DEBUG_KEY_ALIAS, \"-keypass\", DEFAULT_DEBUG_KEY_ALIAS_PASSWORD, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-validity\", \"10000\", \"-dname\", \"CN=Android Debug,O=Android,C=US\", \"-noprompt\");\n-        processResult = generateTestKey.runProcess(\"generateTestKey\");\n-        if (processResult != 0) {\n-            throw new IllegalArgumentException(\"fatal, can not create a keystore\");\n-        }\n-\n-        Logger.logDebug(\"Done creating \" + Constants.ANDROID_KEYSTORE);\n-        return keystore;\n-    }\n-\n-    private String findLatestBuildTool(Path sdkPath) throws IOException {\n-        Objects.requireNonNull(sdkPath);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\");\n-        if (Files.exists(buildToolsPath)) {\n-            return Files.walk(buildToolsPath, 1)\n-                    .filter(file -> Files.isDirectory(file) && !file.equals(buildToolsPath))\n-                    .map(file -> new Version(file.getFileName().toString()))\n-                    .max(Version::compareTo)\n-                    .map(Version::toString)\n-                    .orElseThrow(BuildToolNotFoundException::new);\n+    /*\n+     * Copies the Android project from the jar resource and stores it in\n+     * a directory. Return that directory\n+     */\n+    private Path prepareAndroidProject() throws IOException {\n+        Path androidProject = getAndroidProjectPath();\n+        if (Files.exists(androidProject)) {\n+            FileOps.deleteDirectory(androidProject);\n         }\n-        throw new BuildToolNotFoundException();\n+        FileOps.copyDirectoryFromResources(\"/native/android/android_project\", androidProject);", "originalCommit": "02f22bb09f553a9731e54ddff1fa88a8660cb389", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "39379e252096a95e6337aeae94f69113f4905ea2", "url": "https://github.com/gluonhq/substrate/commit/39379e252096a95e6337aeae94f69113f4905ea2", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse ARM64 backend\n\nTools version bump, create missing directories\n\nNewer build tools version\n\nGenerate release signing configuration\n\nUse internal api for backend lookup\n\nKeystore config file, target sdk, generated resources\n\nDetect GraalVM version\n\nassemble/release check\n\nCopy generated apk to gvm folder\n\nKeyStore properties location\n\nBetter android logging, constant for android_project\n\nLogcat unused flag\n\nAndroid platform bump", "committedDate": "2020-05-26T12:32:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MzAwNg==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430553006", "bodyText": "Unused constants, first one can be used in prepareAndroidManifest. Second one can be removed", "author": "jperedadnr", "createdAt": "2020-05-26T16:38:41Z", "path": "src/main/java/com/gluonhq/substrate/Constants.java", "diffHunk": "@@ -138,6 +139,7 @@\n     public static final String DALVIK_PRECOMPILED_CLASSES = \"/precompiled/classes/\";\n     public static final String DALVIK_ACTIVITY_PACKAGE = \"com/gluonhq/helloandroid/\";\n     public static final String DALVIK_JAVAFX_PACKAGE = \"javafx/scene/input/\";", "originalCommit": "39379e252096a95e6337aeae94f69113f4905ea2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjUyOQ==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430592529", "bodyText": "Manifest uses package name with dots as placeholder, so I removed this completely", "author": "lazar-mitrovic", "createdAt": "2020-05-26T17:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MzAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1Njk0Nw==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430556947", "bodyText": "Can you refactor the path /native/android/ to one constant, and then only the name to another one? There are few uses for the former and also for the latter.", "author": "jperedadnr", "createdAt": "2020-05-26T16:43:03Z", "path": "src/main/java/com/gluonhq/substrate/Constants.java", "diffHunk": "@@ -138,6 +139,7 @@\n     public static final String DALVIK_PRECOMPILED_CLASSES = \"/precompiled/classes/\";\n     public static final String DALVIK_ACTIVITY_PACKAGE = \"com/gluonhq/helloandroid/\";\n     public static final String DALVIK_JAVAFX_PACKAGE = \"javafx/scene/input/\";\n+    public static final String DALVIK_PROJECT_PATH = \"/native/android/android_project\";", "originalCommit": "39379e252096a95e6337aeae94f69113f4905ea2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MTk2Mg==", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430591962", "bodyText": "Fixed", "author": "lazar-mitrovic", "createdAt": "2020-05-26T17:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1Njk0Nw=="}], "type": "inlineReview"}, {"oid": "779cdab61bdac5cb8f0c53715c5b4549ae3e0df7", "url": "https://github.com/gluonhq/substrate/commit/779cdab61bdac5cb8f0c53715c5b4549ae3e0df7", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse ARM64 backend\n\nTools version bump, create missing directories\n\nNewer build tools version\n\nGenerate release signing configuration\n\nUse internal api for backend lookup\n\nKeystore config file, target sdk, generated resources\n\nDetect GraalVM version\n\nassemble/release check\n\nCopy generated apk to gvm folder\n\nKeyStore properties location\n\nBetter android logging, constant for android_project\n\nLogcat unused flag\n\nAndroid platform bump\n\n\nAndroid constants\n\n\nBackend fix", "committedDate": "2020-05-26T18:41:04Z", "type": "commit"}, {"oid": "779cdab61bdac5cb8f0c53715c5b4549ae3e0df7", "url": "https://github.com/gluonhq/substrate/commit/779cdab61bdac5cb8f0c53715c5b4549ae3e0df7", "message": "Use official gradle wrapper for Android building\n\nUse `+UseBionicC` flag\n\nUse ARM64 backend\n\nTools version bump, create missing directories\n\nNewer build tools version\n\nGenerate release signing configuration\n\nUse internal api for backend lookup\n\nKeystore config file, target sdk, generated resources\n\nDetect GraalVM version\n\nassemble/release check\n\nCopy generated apk to gvm folder\n\nKeyStore properties location\n\nBetter android logging, constant for android_project\n\nLogcat unused flag\n\nAndroid platform bump\n\n\nAndroid constants\n\n\nBackend fix", "committedDate": "2020-05-26T18:41:04Z", "type": "forcePushed"}]}