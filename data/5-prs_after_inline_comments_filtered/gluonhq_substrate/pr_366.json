{"pr_number": 366, "pr_title": "Add build support for Fedora, get linker flags from pkg-config", "pr_createdAt": "2020-02-19T19:52:21Z", "pr_url": "https://github.com/gluonhq/substrate/pull/366", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r382483128", "bodyText": "In this case, should there be some message to the caller that something went wrong?", "author": "johanvos", "createdAt": "2020-02-21T09:38:22Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "originalCommit": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNTY4OA==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r382515688", "bodyText": "There is. In the caller (handed off to printUpdateInstructionsAndFail)\nThe information is summarized, so you get a list of all packages to install, instead of doing repeated failed builds, adding a missing package each time.\nI think it might even be worth calling this code from the checkLinker method, so you get a list of missing OS packages to install, before having waited for the slow compilation step.", "author": "jskov-jyskebank-dk", "createdAt": "2020-02-21T10:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNjU3Ng==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r382516576", "bodyText": "And btw, I think the build timed out because you had a build running at the same time.\nMy plan is to squash the commits and thus trigger a rebuild during the weekend.", "author": "jskov-jyskebank-dk", "createdAt": "2020-02-21T10:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3MDU5MQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387470591", "bodyText": "@johanvos do I need to do something more to get this landed?", "author": "jskov", "createdAt": "2020-03-04T06:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNzQ3MQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387527471", "bodyText": "@abhinayagarwal is doing a review.\nIn general, I think this is a good step.\nHowever, there is a deeper issue that is unsolved yet, and that has to tackled one day too. The JavaFX SDK will create 3 versions of libavplugin.so: libavplugin-54.so, libavplugin-56.so and libavplugin-57.so. There versions each depend on specific corresponding versions of libavcodec-XX.so. At runtime, if libavplugin-57.so can be loaded (e.g. if libavcodec-57.so is on the system), that one is used. Otherwise, lower versions are tried.\nWe don't have this logic yet in our static builds. But I think this should be dealt with in another issue.", "author": "johanvos", "createdAt": "2020-03-04T09:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTA0Mw==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387849043", "bodyText": "@jskov but in general, this looks very good!", "author": "johanvos", "createdAt": "2020-03-04T18:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5ODIyMA==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r388098220", "bodyText": "@johanvos thanks! I will take time to address the last comments in the weekend.", "author": "jskov-jyskebank-dk", "createdAt": "2020-03-05T06:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NjkwNw==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389366907", "bodyText": "@johanvos I have pushed a new version which addressed the comments (except for @jperedadnr 's about exception handling).\nThe Travis setup has some problems with stability.\nMy first push failed, I believe because another PR submission was building at the same time.\nI pushed a whitespace-only change and the new build was allowed to run alone and succeeded.\nCheers!", "author": "jskov", "createdAt": "2020-03-08T12:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg0ODkzNg==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390848936", "bodyText": "@jskov You say you have pushed new changes? I only see one commit from 21 days ago. Can you verify?", "author": "jperedadnr", "createdAt": "2020-03-11T09:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg1MzE2MQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390853161", "bodyText": "@jperedadnr\nYes the current diff reflects the changes I made Sunday (e.g.  \"-Wl,--no-whole-archive\" added in LinuxTargetConfiguration.java).\nI flattened the changes into a single commit - and that is probably the original one.\nSorry, did not realize this would happen. Somewhat hides the changes I made along the way.\nBut that was how quarkus people wanted PRs, so I just repeated here. My bad.", "author": "jskov-jyskebank-dk", "createdAt": "2020-03-11T09:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg1NTA4Ng==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390855086", "bodyText": "We usually squash at the end right before merging, otherwise it is hard to see the changes in the revision process.", "author": "jperedadnr", "createdAt": "2020-03-11T09:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg1NjMyOQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390856329", "bodyText": "Which is the sensible way to do it :) Also what I do at work.\nMy apologies.", "author": "jskov-jyskebank-dk", "createdAt": "2020-03-11T09:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}], "type": "inlineReview"}, {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d", "url": "https://github.com/gluonhq/substrate/commit/55aedf768d1010ec2661e8843ac2d3a0802bb74d", "message": "Add build support for Fedora, get linker flags from pkg-config", "committedDate": "2020-02-28T06:16:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzOTI0Mw==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387539243", "bodyText": "I think the -Wl,--no-whole-archive should be here, to clearly close the block of libs we need completely", "author": "johanvos", "createdAt": "2020-03-04T09:23:05Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java", "diffHunk": "@@ -59,18 +58,11 @@\n             \"java\", \"nio\", \"zip\", \"net\", \"prefs\", \"jvm\", \"strictmath\", \"j2pkcs11\", \"sunec\", \"extnet\", \"libchelper\"\n     );\n \n-    private static final List<String> linuxfxlibs = Arrays.asList( \"-Wl,--whole-archive\",\n+    private static final List<String> linuxfxlibs = List.of(\n+            \"-Wl,--whole-archive\",\n             \"-lprism_es2\", \"-lglass\", \"-lglassgtk3\", \"-ljavafx_font\",\n             \"-ljavafx_font_freetype\", \"-ljavafx_font_pango\", \"-ljavafx_iio\",\n-            \"-ljfxmedia\", \"-lfxplugins\", \"-lavplugin\",\n-            \"-Wl,--no-whole-archive\", \"-lGL\", \"-lX11\",\"-lgtk-3\", \"-lgdk-3\",\n-            \"-lpangocairo-1.0\", \"-lpango-1.0\", \"-latk-1.0\",\n-            \"-lcairo-gobject\", \"-lcairo\", \"-lgdk_pixbuf-2.0\",\n-            \"-lgio-2.0\", \"-lgobject-2.0\", \"-lglib-2.0\", \"-lfreetype\",\n-            \"-lpangoft2-1.0\", \"-lgstreamer-lite\",\n-            \"-lgthread-2.0\", \"-lstdc++\", \"-lz\", \"-lXtst\",\n-            \"-lavcodec\", \"-lavformat\", \"-lavutil\",\n-            \"-lasound\", \"-lm\", \"-lgmodule-2.0\"\n+            \"-ljfxmedia\", \"-lfxplugins\", \"-lavplugin\"", "originalCommit": "55aedf768d1010ec2661e8843ac2d3a0802bb74d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzMzOQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389353339", "bodyText": "added", "author": "jskov", "createdAt": "2020-03-08T09:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzOTI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3ODM0Mw==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387578343", "bodyText": "Missing javadoc", "author": "jperedadnr", "createdAt": "2020-03-04T10:31:46Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {", "originalCommit": "55aedf768d1010ec2661e8843ac2d3a0802bb74d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzM0NQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389353345", "bodyText": "added", "author": "jskov", "createdAt": "2020-03-08T09:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3ODM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMjgxMg==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387602812", "bodyText": "Usually we run the process without try-catch and send the possible exceptions to the caller, mostly if these are somehow critical and the process should stop.", "author": "jperedadnr", "createdAt": "2020-03-04T11:19:31Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {", "originalCommit": "55aedf768d1010ec2661e8843ac2d3a0802bb74d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MTczNw==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389351737", "bodyText": "Not possible because I call it from a stream.\nI can use UncheckedIOException instead, if that makes a difference.\nOr rewrite to avoid stream, if you prefer that.", "author": "jskov", "createdAt": "2020-03-08T09:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMjgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg0OTQ3Mg==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390849472", "bodyText": "Yes, the latter. We have done the same (sadly), moving some streams to for-loops.", "author": "jperedadnr", "createdAt": "2020-03-11T09:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMjgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMzEzMg==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387603132", "bodyText": "Remove main?", "author": "jperedadnr", "createdAt": "2020-03-04T11:20:13Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            throw new IllegalStateException(\"Failed to lookup linker flags\", e);\n+        }\n+\n+        List<String> flags = List.of(process.getResponse().trim().split(\" \"));\n+        Logger.logDebug(\"Pkg \" + pkgName + \" provided flags: \" + flags);\n+        return flags;\n+    }\n+\n+    private void printUpdateInstructionsAndFail(List<String> missingPackages) {\n+        String nl = System.lineSeparator();\n+        String nlIndent = nl + \"  \";\n+        String instructions = missingPackages.stream()\n+                .sorted()\n+                .distinct()\n+                .collect(Collectors.joining(nlIndent));\n+\n+        Logger.logInfo(\"Cannot link because some development libraries are missing.\"\n+                + nl + \"Please install OS packages:\"\n+                + nlIndent + instructions);\n+        throw new IllegalStateException(\"Missing linker libraries\");\n+    }\n+\n+    public static void main(String[] args) {", "originalCommit": "55aedf768d1010ec2661e8843ac2d3a0802bb74d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzM1NQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389353355", "bodyText": "done", "author": "jskov", "createdAt": "2020-03-08T09:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMzg1Nw==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387603857", "bodyText": "At some point we should cache this check, once all the packages are found, it doesn't make sense to check on every run, does it? It could be done in a follow-up PR, of course.", "author": "jperedadnr", "createdAt": "2020-03-04T11:21:47Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())", "originalCommit": "55aedf768d1010ec2661e8843ac2d3a0802bb74d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ba82233f223c97df1c9204113f5471bdc0830285", "url": "https://github.com/gluonhq/substrate/commit/ba82233f223c97df1c9204113f5471bdc0830285", "message": "Add build support for Fedora, get linker flags from pkg-config", "committedDate": "2020-03-08T09:47:41Z", "type": "forcePushed"}, {"oid": "ad19297d04cea58c0b023f0ff1c8fb95c194b4d1", "url": "https://github.com/gluonhq/substrate/commit/ad19297d04cea58c0b023f0ff1c8fb95c194b4d1", "message": "Add build support for Fedora, get linker flags from pkg-config", "committedDate": "2020-03-08T12:21:00Z", "type": "commit"}, {"oid": "ad19297d04cea58c0b023f0ff1c8fb95c194b4d1", "url": "https://github.com/gluonhq/substrate/commit/ad19297d04cea58c0b023f0ff1c8fb95c194b4d1", "message": "Add build support for Fedora, get linker flags from pkg-config", "committedDate": "2020-03-08T12:21:00Z", "type": "forcePushed"}, {"oid": "b9fc80e7b860afbc5f20e04cf1ec8771322af220", "url": "https://github.com/gluonhq/substrate/commit/b9fc80e7b860afbc5f20e04cf1ec8771322af220", "message": "Let caller deal with exceptions", "committedDate": "2020-03-12T17:29:57Z", "type": "commit"}, {"oid": "82c96432763e6195ca3d48219906c91d9659c17d", "url": "https://github.com/gluonhq/substrate/commit/82c96432763e6195ca3d48219906c91d9659c17d", "message": "Merge branch 'master' into addFedoraBuildSupport", "committedDate": "2020-03-12T18:04:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzODIzOQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392138239", "bodyText": "This method name looks odd to me. A better alternative can be isOSPackageMissing.", "author": "abhinayagarwal", "createdAt": "2020-03-13T10:14:14Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -127,28 +139,28 @@\n      *\n      * If pkg-config fails, adds amendment instructions to missingPackages.\n      */\n-    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo) throws IOException, InterruptedException {\n         if (pkgInfo.hardwired != null) {\n             return List.of(pkgInfo.hardwired);\n         }\n \n         String pkgName = pkgInfo.pkgName;\n         ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n-        try {\n-            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n-                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n-                return List.of();\n-            }\n-        } catch (IOException | InterruptedException e) {\n-            throw new IllegalStateException(\"Failed to lookup linker flags\", e);\n+        if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+            missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+            return List.of();\n         }\n \n         List<String> flags = List.of(process.getResponse().trim().split(\" \"));\n         Logger.logDebug(\"Pkg \" + pkgName + \" provided flags: \" + flags);\n         return flags;\n     }\n \n-    private void printUpdateInstructionsAndFail(List<String> missingPackages) {\n+    private boolean anyOsPackageIsMissing() {", "originalCommit": "b9fc80e7b860afbc5f20e04cf1ec8771322af220", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTQ3NQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392145475", "bodyText": "A better location for the helper classes would be com.gluonhq.substrate.util.linux. We have all helper files for iOS in a similar directory.", "author": "abhinayagarwal", "createdAt": "2020-03-13T10:28:35Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxFlavor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;", "originalCommit": "b9fc80e7b860afbc5f20e04cf1ec8771322af220", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTU4MQ==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392145581", "bodyText": "Same goes for this class", "author": "abhinayagarwal", "createdAt": "2020-03-13T10:28:49Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;", "originalCommit": "b9fc80e7b860afbc5f20e04cf1ec8771322af220", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjAwNw==", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392146007", "bodyText": "readOsRelease -> readOSRelease", "author": "abhinayagarwal", "createdAt": "2020-03-13T10:29:45Z", "path": "src/main/java/com/gluonhq/substrate/target/LinuxFlavor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Determines flavor of linux from os-release\n+ */\n+public class LinuxFlavor {\n+    private static final Pattern OS_RELEASE_PROPERTY_PATTERN = Pattern.compile(\"([A-Z_-]+)=\\\"?(.+)\\\"?\");\n+\n+    public enum PackagingSystem {\n+        DEB,\n+        RPM\n+    }\n+\n+    public enum Flavor {\n+        DEBIAN(PackagingSystem.DEB),\n+        FEDORA(PackagingSystem.RPM);\n+\n+        private final PackagingSystem packagingSystem;\n+\n+        private Flavor(PackagingSystem packagingSystem) {\n+            this.packagingSystem = packagingSystem;\n+        }\n+\n+        public boolean isDebNaming() {\n+            return packagingSystem == PackagingSystem.DEB;\n+        }\n+\n+        public boolean isRpmNaming() {\n+            return packagingSystem == PackagingSystem.RPM;\n+        }\n+    }\n+    \n+    private LinuxFlavor() {}\n+\n+    /**\n+     * Returns flavor of linux system, based on os-release\n+     *\n+     * @return flavor of linux system\n+     */\n+    public static Flavor getFlavor() {\n+        return new LinuxFlavor().doGetFlavor();\n+    }\n+    \n+    private Flavor doGetFlavor() {\n+        List<String> osReleaseLines = readOsRelease();\n+        if (osReleaseLines.stream().anyMatch(l -> isFedora(l))) {\n+            return Flavor.FEDORA;\n+        }\n+        return Flavor.DEBIAN;\n+    }\n+\n+    private List<String> readOsRelease() {", "originalCommit": "b9fc80e7b860afbc5f20e04cf1ec8771322af220", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "14b543a6f0984227d2f6559128a73f9d58abd988", "url": "https://github.com/gluonhq/substrate/commit/14b543a6f0984227d2f6559128a73f9d58abd988", "message": "Merge branch 'master' into addFedoraBuildSupport\n\n# Conflicts:\n#\tsrc/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java", "committedDate": "2020-03-13T18:44:14Z", "type": "commit"}, {"oid": "6643dbf2e11da2c5358a99aad2b401973a6108ec", "url": "https://github.com/gluonhq/substrate/commit/6643dbf2e11da2c5358a99aad2b401973a6108ec", "message": "Also add libgl-dev to github action", "committedDate": "2020-03-13T18:46:41Z", "type": "commit"}, {"oid": "5f64d60f1a4fe94bf495673e272c65e4ab099408", "url": "https://github.com/gluonhq/substrate/commit/5f64d60f1a4fe94bf495673e272c65e4ab099408", "message": "Address comments from abhinayagarwal", "committedDate": "2020-03-13T18:52:24Z", "type": "commit"}]}