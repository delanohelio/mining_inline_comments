{"pr_number": 895, "pr_title": "Add a sanitizer for service mesh image attribute.", "pr_createdAt": "2020-08-07T04:30:23Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/895", "timeline": [{"oid": "2ac4995ba306634acb8cfb3b83fdd9308b273b7f", "url": "https://github.com/Netflix/titus-control-plane/commit/2ac4995ba306634acb8cfb3b83fdd9308b273b7f", "message": "Add a sanitizer for service mesh image attribute.\n\nWe expect the gateway to replace tags with digest when launching a\njob with service mesh container specified.\n\nThis allows the service networking team to have customers launch a\nservice job with a release build, while making sure that all tasks\nlaunched for the job use the same version of proxyd.", "committedDate": "2020-08-07T04:24:53Z", "type": "commit"}, {"oid": "e10c2728c2e04a136cfe8b772e29412ddadc5be1", "url": "https://github.com/Netflix/titus-control-plane/commit/e10c2728c2e04a136cfe8b772e29412ddadc5be1", "message": "Install ServiceMeshImageSanitizer.", "committedDate": "2020-08-07T06:13:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2OTQ0Mw==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r466869443", "bodyText": "s/AdmissionValidator/AdmissionSanitizer/", "author": "joshi-keyur", "createdAt": "2020-08-07T07:27:24Z", "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.AdmissionValidator;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionValidator} implementation validates and sanitizes Job image information.", "originalCommit": "e10c2728c2e04a136cfe8b772e29412ddadc5be1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MzMxNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467193317", "bodyText": "a33f69c", "author": "alekar", "createdAt": "2020-08-07T18:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2OTQ0Mw=="}], "type": "inlineReview"}, {"oid": "a33f69c043f67713c0880113ea863c7505f45500", "url": "https://github.com/Netflix/titus-control-plane/commit/a33f69c043f67713c0880113ea863c7505f45500", "message": "Fix description of ServiceMeshImageSanitizer.", "committedDate": "2020-08-07T18:03:32Z", "type": "commit"}, {"oid": "ca976ce5761504e3633ce4091ddc6422aba6b8d5", "url": "https://github.com/Netflix/titus-control-plane/commit/ca976ce5761504e3633ce4091ddc6422aba6b8d5", "message": "Fix injection, code gardening.", "committedDate": "2020-08-07T18:55:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMjg4NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467232885", "bodyText": "Use CollectionsExt.asMap or Guave map builder.", "author": "tbak", "createdAt": "2020-08-07T19:36:11Z", "path": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/ServiceMeshImageSanitizerTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.gateway.service.v3.internal;\n+\n+import com.netflix.spectator.api.DefaultRegistry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.common.model.sanitizer.ValidationError;\n+import com.netflix.titus.common.util.CollectionsExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizer;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizerConfiguration;\n+import com.netflix.titus.testkit.model.job.JobDescriptorGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceMeshImageSanitizerTest {\n+\n+    private static final String repo = \"proxydRepo/proxydImage\";\n+    private static final String tag = \"proxydTag\";\n+    private static final String digest = \"sha256:f9f5bb506406b80454a4255b33ed2e4383b9e4a32fb94d6f7e51922704e818fa\";\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration = mock(ServiceMeshImageSanitizerConfiguration.class);\n+    private final RegistryClient registryClient = mock(RegistryClient.class);\n+    private ServiceMeshImageSanitizer sanitizer;\n+\n+    private final String imageNameDigest = String.format(\"%s@%s\", repo, digest);\n+    private final Map<String, String> digestAttrs = new HashMap<String, String>() {", "originalCommit": "ca976ce5761504e3633ce4091ddc6422aba6b8d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MjYwMw==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467242603", "bodyText": "abc5774", "author": "alekar", "createdAt": "2020-08-07T19:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMjg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMzM5OA==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467233398", "bodyText": "These fields could be static as the model entities are not mutable.", "author": "tbak", "createdAt": "2020-08-07T19:37:26Z", "path": "titus-server-gateway/src/test/java/com/netflix/titus/gateway/service/v3/internal/ServiceMeshImageSanitizerTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.gateway.service.v3.internal;\n+\n+import com.netflix.spectator.api.DefaultRegistry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.common.model.sanitizer.ValidationError;\n+import com.netflix.titus.common.util.CollectionsExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizer;\n+import com.netflix.titus.runtime.endpoint.admission.ServiceMeshImageSanitizerConfiguration;\n+import com.netflix.titus.testkit.model.job.JobDescriptorGenerator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ServiceMeshImageSanitizerTest {\n+\n+    private static final String repo = \"proxydRepo/proxydImage\";\n+    private static final String tag = \"proxydTag\";\n+    private static final String digest = \"sha256:f9f5bb506406b80454a4255b33ed2e4383b9e4a32fb94d6f7e51922704e818fa\";\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration = mock(ServiceMeshImageSanitizerConfiguration.class);\n+    private final RegistryClient registryClient = mock(RegistryClient.class);\n+    private ServiceMeshImageSanitizer sanitizer;\n+\n+    private final String imageNameDigest = String.format(\"%s@%s\", repo, digest);\n+    private final Map<String, String> digestAttrs = new HashMap<String, String>() {\n+        {\n+            put(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_ENABLED, \"true\");\n+            put(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER, imageNameDigest);\n+        }\n+    };\n+    private final JobDescriptor<?> jobDescriptorWithDigest = JobDescriptorGenerator.batchJobDescriptors()", "originalCommit": "ca976ce5761504e3633ce4091ddc6422aba6b8d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MjY3MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467242670", "bodyText": "abc5774", "author": "alekar", "createdAt": "2020-08-07T19:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMzM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNDA0NA==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467234044", "bodyText": "Check tagStart < 0?", "author": "tbak", "createdAt": "2020-08-07T19:39:06Z", "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionSanitizer} implementation validates and sanitizes service mesh image attributes.\n+ */\n+@Singleton\n+public class ServiceMeshImageSanitizer implements AdmissionSanitizer<JobDescriptor> {\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceMeshImageSanitizer.class);\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration;\n+    private final RegistryClient registryClient;\n+    private final ValidatorMetrics validatorMetrics;\n+\n+    @Inject\n+    public ServiceMeshImageSanitizer(ServiceMeshImageSanitizerConfiguration configuration, RegistryClient registryClient, Registry spectatorRegistry) {\n+        this.configuration = configuration;\n+        this.registryClient = registryClient;\n+        this.validatorMetrics = new ValidatorMetrics(this.getClass().getSimpleName(), spectatorRegistry);\n+    }\n+\n+    /**\n+     * @return a {@link UnaryOperator} that adds a sanitized Image or job attributes when sanitization was skipped\n+     */\n+    @Override\n+    public Mono<UnaryOperator<JobDescriptor>> sanitize(JobDescriptor jobDescriptor) {\n+        if (isDisabled()) {\n+            return Mono.just(ServiceMeshImageSanitizer::skipSanitization);\n+        }\n+\n+        if (!serviceMeshIsEnabled(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotEnabled\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        if (!serviceMeshIsPinned(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotPinned\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        Image image = getServiceMeshImage(jobDescriptor);\n+        return sanitizeServiceMeshImage(image)\n+                .map(ServiceMeshImageSanitizer::setMeshImageFunction)\n+                .timeout(Duration.ofMillis(configuration.getServiceMeshImageValidationTimeoutMs()))\n+                .doOnSuccess(j -> validatorMetrics.incrementValidationSuccess(image.getName()))\n+                .onErrorReturn(throwable -> isAllowedException(throwable, image), ServiceMeshImageSanitizer::skipSanitization);\n+    }\n+\n+    private static UnaryOperator<JobDescriptor> setMeshImageFunction(Image image) {\n+        String imageName = toImageName(image);\n+        return jobDescriptor -> JobFunctions.appendJobDescriptorAttribute(jobDescriptor,\n+                JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER, imageName);\n+    }\n+\n+    private Mono<Image> sanitizeServiceMeshImage(Image image) {\n+        if (StringExt.isNotEmpty(image.getDigest())) {\n+            return checkImageDigestExist(image).then(Mono.empty());\n+        }\n+\n+        return registryClient.getImageDigest(image.getName(), image.getTag())\n+                .map(digest -> image.toBuilder().withDigest(digest).build());\n+    }\n+\n+    private Mono<String> checkImageDigestExist(Image image) {\n+        return registryClient.getImageDigest(image.getName(), image.getDigest());\n+    }\n+\n+    private boolean isDisabled() {\n+        return !configuration.isEnabled();\n+    }\n+\n+    private boolean serviceMeshIsEnabled(JobDescriptor<?> jobDescriptor) {\n+        String enabled = jobDescriptor\n+                .getAttributes()\n+                .get(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_ENABLED);\n+\n+        if (enabled == null) {\n+            return false;\n+        }\n+\n+        return Boolean.parseBoolean(enabled);\n+    }\n+\n+    private boolean serviceMeshIsPinned(JobDescriptor<?> jobDescriptor) {\n+        return jobDescriptor\n+                .getAttributes()\n+                .containsKey(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER);\n+    }\n+\n+    private Image getServiceMeshImage(JobDescriptor<?> jobDescriptor) {\n+        String image = jobDescriptor\n+                .getAttributes()\n+                .get(JobAttributes.JOB_CONTAINER_ATTRIBUTE_SERVICEMESH_CONTAINER);\n+\n+        return parseImageName(image);\n+    }\n+\n+    private static Image parseImageName(String imageName) {\n+        // Grammar\n+        //\n+        //  reference                       := name [ \":\" tag ] [ \"@\" digest ]\n+        //  name                            := [hostname '/'] component ['/' component]*\n+        //  hostname                        := hostcomponent ['.' hostcomponent]* [':' port-number]\n+        //  hostcomponent                   := /([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])/\n+        //  port-number                     := /[0-9]+/\n+        //  component                       := alpha-numeric [separator alpha-numeric]*\n+        //  alpha-numeric                   := /[a-z0-9]+/\n+        //  separator                       := /[_.]|__|[-]*/\n+        //\n+        //  tag                             := /[\\w][\\w.-]{0,127}/\n+        //\n+        //  digest                          := digest-algorithm \":\" digest-hex\n+        //  digest-algorithm                := digest-algorithm-component [ digest-algorithm-separator digest-algorithm-component ]\n+        //  digest-algorithm-separator      := /[+.-_]/\n+        //  digest-algorithm-component      := /[A-Za-z][A-Za-z0-9]*/\n+        //  digest-hex                      := /[0-9a-fA-F]{32,}/ ; At least 128 bit digest value\n+\n+\n+        int digestStart = imageName.lastIndexOf(\"@\");\n+        if (digestStart < 0) {\n+            int tagStart = imageName.lastIndexOf(\":\");", "originalCommit": "ca976ce5761504e3633ce4091ddc6422aba6b8d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MjcyNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467242725", "bodyText": "abc5774", "author": "alekar", "createdAt": "2020-08-07T19:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNDA0NA=="}], "type": "inlineReview"}, {"oid": "abc57742021bfb70e9a571456a463fd440dd58ba", "url": "https://github.com/Netflix/titus-control-plane/commit/abc57742021bfb70e9a571456a463fd440dd58ba", "message": "Refuse to sanitize if we cannot parse imageName. Clean up test code.", "committedDate": "2020-08-07T19:58:38Z", "type": "commit"}, {"oid": "1f1157bbcb971af7e30ec978798f6bc9a54930ba", "url": "https://github.com/Netflix/titus-control-plane/commit/1f1157bbcb971af7e30ec978798f6bc9a54930ba", "message": "Refuse to admit jobs with invalid service mesh image names.", "committedDate": "2020-08-07T20:24:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NzIwNA==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467257204", "bodyText": "@tbak I want to call this change to your attention, in case you missed it", "author": "alekar", "createdAt": "2020-08-07T20:36:28Z", "path": "titus-server-runtime/src/main/java/com/netflix/titus/runtime/endpoint/admission/ServiceMeshImageSanitizer.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2018 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.runtime.endpoint.admission;\n+\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Image;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.model.job.JobFunctions;\n+import com.netflix.titus.common.model.admission.AdmissionSanitizer;\n+import com.netflix.titus.common.model.admission.ValidatorMetrics;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.runtime.connector.registry.RegistryClient;\n+import com.netflix.titus.runtime.connector.registry.TitusRegistryException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.time.Duration;\n+import java.util.function.UnaryOperator;\n+\n+/**\n+ * This {@link AdmissionSanitizer} implementation validates and sanitizes service mesh image attributes.\n+ */\n+@Singleton\n+public class ServiceMeshImageSanitizer implements AdmissionSanitizer<JobDescriptor> {\n+    private static final Logger logger = LoggerFactory.getLogger(ServiceMeshImageSanitizer.class);\n+\n+    private final ServiceMeshImageSanitizerConfiguration configuration;\n+    private final RegistryClient registryClient;\n+    private final ValidatorMetrics validatorMetrics;\n+\n+    @Inject\n+    public ServiceMeshImageSanitizer(ServiceMeshImageSanitizerConfiguration configuration, RegistryClient registryClient, Registry spectatorRegistry) {\n+        this.configuration = configuration;\n+        this.registryClient = registryClient;\n+        this.validatorMetrics = new ValidatorMetrics(this.getClass().getSimpleName(), spectatorRegistry);\n+    }\n+\n+    /**\n+     * @return a {@link UnaryOperator} that adds a sanitized Image or job attributes when sanitization was skipped\n+     */\n+    @Override\n+    public Mono<UnaryOperator<JobDescriptor>> sanitize(JobDescriptor jobDescriptor) {\n+        if (isDisabled()) {\n+            return Mono.just(ServiceMeshImageSanitizer::skipSanitization);\n+        }\n+\n+        if (!serviceMeshIsEnabled(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotEnabled\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        if (!serviceMeshIsPinned(jobDescriptor)) {\n+            validatorMetrics.incrementValidationSkipped(\"serviceMeshNotPinned\");\n+            return Mono.just(UnaryOperator.identity());\n+        }\n+\n+        try {\n+            Image image = getServiceMeshImage(jobDescriptor);\n+            return sanitizeServiceMeshImage(image)\n+                    .map(ServiceMeshImageSanitizer::setMeshImageFunction)\n+                    .timeout(Duration.ofMillis(configuration.getServiceMeshImageValidationTimeoutMs()))\n+                    .doOnSuccess(j -> validatorMetrics.incrementValidationSuccess(image.getName()))\n+                    .onErrorReturn(throwable -> isAllowedException(throwable, image), ServiceMeshImageSanitizer::skipSanitization);\n+        } catch (Throwable t) {\n+            return Mono.error(t);", "originalCommit": "1f1157bbcb971af7e30ec978798f6bc9a54930ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NzAxMw==", "url": "https://github.com/Netflix/titus-control-plane/pull/895#discussion_r467267013", "bodyText": "Yes, I have seen it. It is a good safety net.", "author": "tbak", "createdAt": "2020-08-07T21:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NzIwNA=="}], "type": "inlineReview"}]}