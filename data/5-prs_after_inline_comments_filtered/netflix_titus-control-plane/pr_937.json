{"pr_number": 937, "pr_title": "node taints condition check", "pr_createdAt": "2020-10-09T21:48:00Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/937", "timeline": [{"oid": "854bac94409f719f3985ff94edcb8491c2c9f06f", "url": "https://github.com/Netflix/titus-control-plane/commit/854bac94409f719f3985ff94edcb8491c2c9f06f", "message": "node taints condition check", "committedDate": "2020-10-09T21:41:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4OTYzOA==", "url": "https://github.com/Netflix/titus-control-plane/pull/937#discussion_r502689638", "bodyText": "isNodeConditionBad -> isNodeBad", "author": "corindwyer", "createdAt": "2020-10-09T22:11:20Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/AgentManagementNodeDataResolver.java", "diffHunk": "@@ -95,9 +99,15 @@ private Node toNode(AgentInstanceGroup serverGroup, AgentInstance instance) {\n         boolean serverGroupRelocationRequired = serverGroup.getLifecycleStatus().getState() == InstanceGroupLifecycleState.Removable;\n         boolean isNodeConditionBad = false;\n         V1Node k8sNode = k8sNodeIndexer.getByKey(instance.getId());\n+\n         if (k8sNode != null) {\n-            isNodeConditionBad = NodePredicates.hasBadCondition(k8sNode, badConditionMatcherFactory,\n+            boolean hasBadNodeCondition = NodePredicates.hasBadCondition(k8sNode, badConditionMatcherFactory,\n                     relocationConfiguration.getNodeConditionTransitionTimeThresholdSeconds());\n+\n+            boolean hasBadTaint = NodePredicates.hasBadTaint(k8sNode, badTaintMatcherFactory,\n+                    relocationConfiguration.getNodeTaintTransitionTimeThresholdSeconds());\n+\n+            isNodeConditionBad = hasBadNodeCondition || hasBadTaint;", "originalCommit": "854bac94409f719f3985ff94edcb8491c2c9f06f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDE5Ng==", "url": "https://github.com/Netflix/titus-control-plane/pull/937#discussion_r502690196", "bodyText": "I prefer Boolean.TRUE.toString() over Boolean.toString(true). I also use a static import to get rid of the Boolean.", "author": "corindwyer", "createdAt": "2020-10-09T22:14:18Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -64,11 +65,39 @@ static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditi\n         return false;\n     }\n \n+    @VisibleForTesting\n+    static boolean hasBadTaint(V1Node node, Function<String, Matcher> badTaintExpression,\n+                                   int nodeTaintTransitionTimeThresholdSeconds) {\n+        if (node.getSpec() != null && node.getSpec().getTaints() != null) {\n+            return node.getSpec().getTaints().stream()\n+                    .anyMatch(v1Taint -> badTaintExpression.apply(v1Taint.getKey()).matches() &&\n+                            matchesTaintValueIfAvailable(v1Taint, Boolean.toString(true)) &&", "originalCommit": "854bac94409f719f3985ff94edcb8491c2c9f06f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDY3NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/937#discussion_r502690675", "bodyText": "by using the Titus commons Clock here, you will have more flexibility over injecting in and manipulating the time.", "author": "corindwyer", "createdAt": "2020-10-09T22:16:29Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -64,11 +65,39 @@ static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditi\n         return false;\n     }\n \n+    @VisibleForTesting\n+    static boolean hasBadTaint(V1Node node, Function<String, Matcher> badTaintExpression,\n+                                   int nodeTaintTransitionTimeThresholdSeconds) {\n+        if (node.getSpec() != null && node.getSpec().getTaints() != null) {\n+            return node.getSpec().getTaints().stream()\n+                    .anyMatch(v1Taint -> badTaintExpression.apply(v1Taint.getKey()).matches() &&\n+                            matchesTaintValueIfAvailable(v1Taint, Boolean.toString(true)) &&\n+                            !isTransitionedRecently(v1Taint.getTimeAdded(), nodeTaintTransitionTimeThresholdSeconds));\n+        }\n+        return false;\n+    }\n+\n+    static boolean matchesTaintValueIfAvailable(V1Taint taint, String value) {\n+        if (taint.getValue() != null) {\n+            return taint.getValue().equalsIgnoreCase(value);\n+        }\n+        return true;\n+    }\n+\n+\n     static boolean isNodeConditionTransitionedRecently(V1NodeCondition nodeCondition, int thresholdSeconds) {\n         DateTime threshold = DateTime.now().minusSeconds(thresholdSeconds);", "originalCommit": "854bac94409f719f3985ff94edcb8491c2c9f06f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDcyMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/937#discussion_r502690721", "bodyText": "same as above.", "author": "corindwyer", "createdAt": "2020-10-09T22:16:41Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -64,11 +65,39 @@ static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditi\n         return false;\n     }\n \n+    @VisibleForTesting\n+    static boolean hasBadTaint(V1Node node, Function<String, Matcher> badTaintExpression,\n+                                   int nodeTaintTransitionTimeThresholdSeconds) {\n+        if (node.getSpec() != null && node.getSpec().getTaints() != null) {\n+            return node.getSpec().getTaints().stream()\n+                    .anyMatch(v1Taint -> badTaintExpression.apply(v1Taint.getKey()).matches() &&\n+                            matchesTaintValueIfAvailable(v1Taint, Boolean.toString(true)) &&\n+                            !isTransitionedRecently(v1Taint.getTimeAdded(), nodeTaintTransitionTimeThresholdSeconds));\n+        }\n+        return false;\n+    }\n+\n+    static boolean matchesTaintValueIfAvailable(V1Taint taint, String value) {\n+        if (taint.getValue() != null) {\n+            return taint.getValue().equalsIgnoreCase(value);\n+        }\n+        return true;\n+    }\n+\n+\n     static boolean isNodeConditionTransitionedRecently(V1NodeCondition nodeCondition, int thresholdSeconds) {\n         DateTime threshold = DateTime.now().minusSeconds(thresholdSeconds);\n         if (nodeCondition.getLastTransitionTime() != null) {\n             return nodeCondition.getLastTransitionTime().isAfter(threshold);\n         }\n         return false;\n     }\n+\n+    static boolean isTransitionedRecently(DateTime nodeTransitionTime, int thresholdSeconds) {\n+        DateTime threshold = DateTime.now().minusSeconds(thresholdSeconds);", "originalCommit": "854bac94409f719f3985ff94edcb8491c2c9f06f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dba4a63b2f5de93227fdc9cdc5d4c0a5d897b301", "url": "https://github.com/Netflix/titus-control-plane/commit/dba4a63b2f5de93227fdc9cdc5d4c0a5d897b301", "message": "minor fixes", "committedDate": "2020-10-12T17:30:00Z", "type": "commit"}]}