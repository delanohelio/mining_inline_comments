{"pr_number": 967, "pr_title": "Adding counter to track conflicts between user and Titus provided env", "pr_createdAt": "2020-12-22T08:03:43Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/967", "timeline": [{"oid": "2057f6b9cbe9f58e95eff8acbe16ddaf7283f8ea", "url": "https://github.com/Netflix/titus-control-plane/commit/2057f6b9cbe9f58e95eff8acbe16ddaf7283f8ea", "message": "Adding counter to track conflicts between user and Titus provided env variables when pod is created", "committedDate": "2020-12-22T07:53:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMjc3Nw==", "url": "https://github.com/Netflix/titus-control-plane/pull/967#discussion_r547402777", "bodyText": "Is there a value in extracting it as an abstract class?", "author": "tbak", "createdAt": "2020-12-22T17:23:58Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/env/AggregatingContainerEnvFactory.java", "diffHunk": "@@ -17,31 +17,17 @@\n package com.netflix.titus.master.mesos.kubeapiserver.direct.env;\n \n import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n-\n-import com.netflix.titus.api.jobmanager.model.job.Job;\n-import com.netflix.titus.api.jobmanager.model.job.Task;\n \n /**\n  * Aggregate container environment variables from many sources. Evaluation happens from left to right, with the\n  * next item overriding entries from previous evaluations if there is a collision.\n  */\n-public class AggregatingContainerEnvFactory implements ContainerEnvFactory {\n+public abstract class AggregatingContainerEnvFactory implements ContainerEnvFactory {", "originalCommit": "2057f6b9cbe9f58e95eff8acbe16ddaf7283f8ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ3NTk1NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/967#discussion_r547475955", "bodyText": "I will refactor and embed the initialization in the default implementation and remove this class for brevity. Thank you!", "author": "joshi-keyur", "createdAt": "2020-12-22T19:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMjc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNTc0OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/967#discussion_r547405749", "bodyText": "The this. prefixes don't seem needed.", "author": "andrew-leung", "createdAt": "2020-12-22T17:29:51Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/env/DefaultAggregatingContainerEnvFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct.env;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.spectator.api.Id;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+\n+@Singleton\n+public class DefaultAggregatingContainerEnvFactory extends AggregatingContainerEnvFactory {\n+\n+    private static final String CONFLICT_COUNTER = \"titus.aggregatingContainerEnv.conflict\";\n+\n+    private final Registry registry;\n+\n+    private final Id conflictId;\n+\n+    @Inject\n+    public DefaultAggregatingContainerEnvFactory(TitusRuntime titusRuntime) {\n+        super(UserProvidedContainerEnvFactory.getInstance(), TitusProvidedContainerEnvFactory.getInstance());\n+        this.registry = titusRuntime.getRegistry();\n+        this.conflictId = registry.createId(CONFLICT_COUNTER);\n+    }\n+\n+    @Override\n+    public Map<String, String> buildContainerEnv(Job<?> job, Task task) {\n+        Map<String, String> env = new HashMap<>();\n+        for (ContainerEnvFactory factory : factories) {\n+            Map<String, String> envMap = factory.buildContainerEnv(job, task);\n+            // Tracking conflicting env var for any two given factories\n+            env.keySet().stream().filter(envMap::containsKey).forEach(this::incrementConflictCounter);\n+            env.putAll(envMap);\n+        }\n+        return env;\n+    }\n+\n+    private void incrementConflictCounter(String envVarName) {\n+        this.registry.counter(this.conflictId.withTags(\"env\", envVarName)).increment();", "originalCommit": "2057f6b9cbe9f58e95eff8acbe16ddaf7283f8ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNzA0OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/967#discussion_r547407049", "bodyText": "It seems like we're depending on the order here to make sure that factories with higher precedence override others. If that's the case, maybe we should add a comment here or where we do the put()/overwrite?", "author": "andrew-leung", "createdAt": "2020-12-22T17:32:43Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/env/DefaultAggregatingContainerEnvFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct.env;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.spectator.api.Id;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+\n+@Singleton\n+public class DefaultAggregatingContainerEnvFactory extends AggregatingContainerEnvFactory {\n+\n+    private static final String CONFLICT_COUNTER = \"titus.aggregatingContainerEnv.conflict\";\n+\n+    private final Registry registry;\n+\n+    private final Id conflictId;\n+\n+    @Inject\n+    public DefaultAggregatingContainerEnvFactory(TitusRuntime titusRuntime) {\n+        super(UserProvidedContainerEnvFactory.getInstance(), TitusProvidedContainerEnvFactory.getInstance());", "originalCommit": "2057f6b9cbe9f58e95eff8acbe16ddaf7283f8ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NTIyMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/967#discussion_r547465220", "bodyText": "Good point.", "author": "joshi-keyur", "createdAt": "2020-12-22T19:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNzA0OQ=="}], "type": "inlineReview"}, {"oid": "05cb51d33969474951930c0184b66741df6dd3ed", "url": "https://github.com/Netflix/titus-control-plane/commit/05cb51d33969474951930c0184b66741df6dd3ed", "message": "Addressing code review comments", "committedDate": "2020-12-22T19:50:13Z", "type": "commit"}]}