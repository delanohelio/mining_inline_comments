{"pr_number": 778, "pr_title": "Fix discrepancy in Gauge Metrics in PartitionMetrics and KafkaBasedConnectorTaskMetrics", "pr_createdAt": "2020-11-06T23:15:44Z", "pr_url": "https://github.com/linkedin/brooklin/pull/778", "timeline": [{"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "message": "Merge pull request #1 from linkedin/master\n\nPull latest", "committedDate": "2019-11-18T20:06:44Z", "type": "commit"}, {"oid": "79ffa91188aa16ebcb2e9c1e55d4b9a8911b9c36", "url": "https://github.com/linkedin/brooklin/commit/79ffa91188aa16ebcb2e9c1e55d4b9a8911b9c36", "message": "Merge branch 'master' of github.com:linkedin/brooklin", "committedDate": "2020-11-02T20:44:50Z", "type": "commit"}, {"oid": "7c47e8db35da7f88ba331cae00cc408fa0081ca0", "url": "https://github.com/linkedin/brooklin/commit/7c47e8db35da7f88ba331cae00cc408fa0081ca0", "message": "Fix Gauge metrics in KafkaBasedConnectorTaskMetrics", "committedDate": "2020-11-06T19:39:11Z", "type": "commit"}, {"oid": "f4dae044620138e3dc622545cae02825530ca4e8", "url": "https://github.com/linkedin/brooklin/commit/f4dae044620138e3dc622545cae02825530ca4e8", "message": "Fix unit-tests", "committedDate": "2020-11-06T23:07:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MTE3MA==", "url": "https://github.com/linkedin/brooklin/pull/778#discussion_r520781170", "bodyText": "Once concern I have here is what if two threads update these metrics at the same time? Since these aren't atomic anymore, will that be something to worry about? Same for the numTopics variable for the numTopics metric.", "author": "somandal", "createdAt": "2020-11-10T18:33:23Z", "path": "datastream-common/src/main/java/com/linkedin/datastream/connectors/CommonConnectorMetrics.java", "diffHunk": "@@ -186,23 +187,30 @@ protected void deregisterAggregates() {\n     static final String NUM_PARTITIONS = \"numPartitions\";\n \n     // Per consumer metrics\n-    final AtomicLong _numStuckPartitions = new AtomicLong(0);\n-    final AtomicLong _numPartitions = new AtomicLong(0);\n     final Meter _rebalanceRate;\n \n     // Aggregated metrics\n     final Meter _aggregatedRebalanceRate;\n \n+    final String _fullMetricsKey;\n+\n     // Map from connector class name to its stuck and total partition counter\n     // This is needed for Gauge metrics which need long-typed suppliers.\n+    static final Map<String, AtomicLong> NUM_STUCK_PARTITIONS_PER_METRIC_KEY = new ConcurrentHashMap<>();\n+    static final Map<String, AtomicLong> NUM_PARTITIONS_PER_METRIC_KEY = new ConcurrentHashMap<>();\n     static final Map<String, AtomicLong> AGGREGATED_NUM_STUCK_PARTITIONS = new ConcurrentHashMap<>();\n     static final Map<String, AtomicLong> AGGREGATED_NUM_PARTITIONS = new ConcurrentHashMap<>();\n+    private long _numStuckPartitions = 0;\n+    private long _numPartitions = 0;", "originalCommit": "f4dae044620138e3dc622545cae02825530ca4e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNDUxNQ==", "url": "https://github.com/linkedin/brooklin/pull/778#discussion_r520814515", "bodyText": "changed it to AtomicLong.", "author": "vmaheshw", "createdAt": "2020-11-10T19:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MTE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MzQ1NQ==", "url": "https://github.com/linkedin/brooklin/pull/778#discussion_r520783455", "bodyText": "Same concern about these no longer being atomic, and what happens if multiple threads try to update any of these at the same time? Can't they race and cause incorrect updates?", "author": "somandal", "createdAt": "2020-11-10T18:37:25Z", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/KafkaBasedConnectorTaskMetrics.java", "diffHunk": "@@ -54,28 +55,48 @@\n   private static final Map<String, AtomicLong> AGGREGATED_NUM_AUTO_PAUSED_PARTITIONS_WAITING_FOR_DEST_TOPIC =\n       new ConcurrentHashMap<>();\n \n-  private final AtomicLong _numConfigPausedPartitions = new AtomicLong(0);\n-  private final AtomicLong _numAutoPausedPartitionsOnError = new AtomicLong(0);\n-  private final AtomicLong _numAutoPausedPartitionsOnInFlightMessages = new AtomicLong(0);\n-  private final AtomicLong _numAutoPausedPartitionsAwaitingDestTopic = new AtomicLong(0);\n-  private final AtomicLong _numTopics = new AtomicLong(0);\n+  private static final Map<String, AtomicLong> NUM_TOPICS_PER_METRIC_KEY = new ConcurrentHashMap<>();\n+  private static final Map<String, AtomicLong> NUM_CONFIG_PAUSED_PARTITIONS_PER_METRIC_KEY = new ConcurrentHashMap<>();\n+  private static final Map<String, AtomicLong> NUM_AUTO_PAUSED_PARTITIONS_ON_ERROR_PER_METRIC_KEY =\n+      new ConcurrentHashMap<>();\n+  private static final Map<String, AtomicLong> NUM_AUTO_PAUSED_PARTITIONS_ON_INFLIGHT_MESSAGES_PER_METRIC_KEY =\n+      new ConcurrentHashMap<>();\n+  private static final Map<String, AtomicLong> NUM_AUTO_PAUSED_PARTITIONS_WAITING_FOR_DEST_TOPIC_PER_METRIC_KEY =\n+      new ConcurrentHashMap<>();\n+\n+  private long _numConfigPausedPartitions = 0;\n+  private long _numAutoPausedPartitionsOnError = 0;\n+  private long _numAutoPausedPartitionsOnInFlightMessages = 0;\n+  private long _numAutoPausedPartitionsAwaitingDestTopic = 0;\n+  private long _numTopics = 0;", "originalCommit": "f4dae044620138e3dc622545cae02825530ca4e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNDU4Ng==", "url": "https://github.com/linkedin/brooklin/pull/778#discussion_r520814586", "bodyText": "changed it to AtomicLong.", "author": "vmaheshw", "createdAt": "2020-11-10T19:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MzQ1NQ=="}], "type": "inlineReview"}, {"oid": "9daffe5d54e5bee8ea9d4350bb2884bd2a74f31f", "url": "https://github.com/linkedin/brooklin/commit/9daffe5d54e5bee8ea9d4350bb2884bd2a74f31f", "message": "Change local state from long to AtomicLong", "committedDate": "2020-11-10T18:54:16Z", "type": "commit"}]}