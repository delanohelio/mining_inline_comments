{"pr_number": 785, "pr_title": "Fix the ConcurrentModificationException on the _trackEventsOutsideAltSlaMap in the EventProducer", "pr_createdAt": "2020-12-10T01:23:28Z", "pr_url": "https://github.com/linkedin/brooklin/pull/785", "timeline": [{"oid": "8a056756df28623ed09b6f0b13e444a0cbf80e26", "url": "https://github.com/linkedin/brooklin/commit/8a056756df28623ed09b6f0b13e444a0cbf80e26", "message": "Fix eventProducer warning log to fix ConcurrentModificationException on the _trackEventsOutsideAltSlaMap", "committedDate": "2020-12-10T00:21:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MzcyMA==", "url": "https://github.com/linkedin/brooklin/pull/785#discussion_r540393720", "bodyText": "ConcurrentHashMap will not throw ConcurrentModificationException. You can get rid of it.", "author": "vmaheshw", "createdAt": "2020-12-10T18:18:19Z", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/EventProducer.java", "diffHunk": "@@ -272,20 +273,28 @@ private void performSlaRelatedLogging(DatastreamRecordMetadata metadata, long ev\n     }\n \n     if (_numEventsOutsideAltSlaLogEnabled) {\n-      if (sourceToDestinationLatencyMs > _availabilityThresholdAlternateSlaMs) {\n-        TopicPartition topicPartition = new TopicPartition(metadata.getTopic(), metadata.getSourcePartition());\n-        int numEvents = _trackEventsOutsideAltSlaMap.getOrDefault(topicPartition, 0);\n-        _trackEventsOutsideAltSlaMap.put(topicPartition, numEvents + 1);\n-      }\n+      try {\n+        if (sourceToDestinationLatencyMs > _availabilityThresholdAlternateSlaMs) {\n+          TopicPartition topicPartition = new TopicPartition(metadata.getTopic(), metadata.getSourcePartition());\n+          int numEvents = _trackEventsOutsideAltSlaMap.getOrDefault(topicPartition, 0);\n+          _trackEventsOutsideAltSlaMap.put(topicPartition, numEvents + 1);\n+        }\n \n-      long timeSinceLastLog = System.currentTimeMillis() - _lastEventsOutsideAltSlaLogTimeMs;\n-      if (timeSinceLastLog >= _numEventsOutsideAltSlaFrequencyMs) {\n-        _trackEventsOutsideAltSlaMap.forEach((topicPartition, numEvents) ->\n-            _logger.warn(\"{} had {} event(s) with latency greater than alternate SLA of {} ms in the last {} ms for \"\n-                    + \"datastream {}\", topicPartition, numEvents, _availabilityThresholdAlternateSlaMs,\n-                timeSinceLastLog, getDatastreamName()));\n-        _trackEventsOutsideAltSlaMap.clear();\n-        _lastEventsOutsideAltSlaLogTimeMs = System.currentTimeMillis();\n+        long timeSinceLastLog = System.currentTimeMillis() - _lastEventsOutsideAltSlaLogTimeMs;\n+        if (timeSinceLastLog >= _numEventsOutsideAltSlaFrequencyMs) {\n+          _trackEventsOutsideAltSlaMap.forEach((topicPartition, numEvents) -> _logger.warn(\n+              \"{} had {} event(s) with latency greater than alternate SLA of {} ms in the last {} ms for \"\n+                  + \"datastream {}\", topicPartition, numEvents, _availabilityThresholdAlternateSlaMs, timeSinceLastLog,\n+              getDatastreamName()));\n+          _trackEventsOutsideAltSlaMap.clear();\n+          _lastEventsOutsideAltSlaLogTimeMs = System.currentTimeMillis();\n+        }\n+      } catch (ConcurrentModificationException | NullPointerException | IllegalArgumentException | ClassCastException", "originalCommit": "8a056756df28623ed09b6f0b13e444a0cbf80e26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0MDY4MA==", "url": "https://github.com/linkedin/brooklin/pull/785#discussion_r540440680", "bodyText": "done", "author": "somandal", "createdAt": "2020-12-10T19:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MzcyMA=="}], "type": "inlineReview"}, {"oid": "60bc23f356339d7a2832105695218178b25c8b9f", "url": "https://github.com/linkedin/brooklin/commit/60bc23f356339d7a2832105695218178b25c8b9f", "message": "Address review comments", "committedDate": "2020-12-10T19:31:34Z", "type": "commit"}]}