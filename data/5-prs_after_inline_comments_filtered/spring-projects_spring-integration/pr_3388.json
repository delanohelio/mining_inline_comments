{"pr_number": 3388, "pr_title": "INT-3045: Add in & out ZeroMq channel adapters", "pr_createdAt": "2020-09-22T21:38:59Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3388", "timeline": [{"oid": "87abd0eff35342d3ed29f466936d0b3e7ec8012b", "url": "https://github.com/spring-projects/spring-integration/commit/87abd0eff35342d3ed29f466936d0b3e7ec8012b", "message": "INT-3045: Add in & out ZeroMq channel adapters\n\nJIRA: https://jira.spring.io/browse/INT-3045\n\n* Add `ZeroMqMessageHandler` to produce messages into one-way ZeroMq sockets\n* Add `ZeroMqMessageProducer` to consumer messages from one-way ZeroMq sockets\n* Add `ConvertingBytesMessageMapper` impl for the `BytesMessageMapper` to\ndelegate an actual conversion into the provided `MessageConverter`\n* Add `ZeroMqHeaders` for message headers constants representing ZeroMq message attributes\n* Fix `ZeroMqChannel` for the proper deferred `zeroMqProxy` evaluation\n* Add more JavaDocs\n* Fix `ZeroMqChannelTests.testPubSubBind()` to be sure that really all the\nsubscribed channels get the same message from the `PUB` socket", "committedDate": "2020-09-22T21:38:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMjA4NQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r493702085", "bodyText": "con version?", "author": "garyrussell", "createdAt": "2020-09-23T15:49:37Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/mapping/ConvertingBytesMessageMapper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.mapping;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHeaders;\n+import org.springframework.messaging.converter.MessageConverter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * The {@link BytesMessageMapper} implementation to delegate to/from {@link Message}\n+ * con version into the provided {@link MessageConverter}.", "originalCommit": "87abd0eff35342d3ed29f466936d0b3e7ec8012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d156b5645ac076ff0730390a5bb53cf8af4b971", "url": "https://github.com/spring-projects/spring-integration/commit/5d156b5645ac076ff0730390a5bb53cf8af4b971", "message": "* Fix typo in the `ConvertingBytesMessageMapper`\n* Add `this` for `doOnError()` in the `ZeroMqChannel` & `ZeroMqMessageProducer`\n* Change the bind logic in the `ZeroMqMessageProducer` to `port` and let it to\nbind to random port.\nThe actual port is available later via `getBoundPort()`\n* Introduce a `ZeroMqMessageProducer.receiveRaw()` to let received `ZMsg` to\nbe produce as a `payload`\n* Add a logic into `ZeroMqMessageHandler` to treat `ZMsg` in the payload of\nrequest message as is without any conversion\n* Fix race condition in the `ZeroMqMessageProducer` to destroy `consumerScheduler`\nwhen the main `Flux` is complete", "committedDate": "2020-09-23T18:13:48Z", "type": "commit"}, {"oid": "0492c45553bc9412c0b92a37bf714c87d72d8f08", "url": "https://github.com/spring-projects/spring-integration/commit/0492c45553bc9412c0b92a37bf714c87d72d8f08", "message": "* Add Java DSL for ZeroMq components\n* Extract `ReactiveMessageHandlerSpec` for `ReactiveMessageHandler` impls\n* Add debug message into `EmbeddedJsonHeadersMessageMapper` when cannot `decodeNativeFormat()`\n* Make `ReactiveMongoDbMessageHandlerSpec` extending `ReactiveMessageHandlerSpec`\n* Make `ZeroMqProxy` `autoStartup` by default\n* Add `ZeroMqDslTests` to cover all the Java DSL for ZeroMq\n* Introduce a `MimeTypeSerializer`  to serialize a `MimeType` into JSON as a plain string;\nuse it as extra serializer in the `JacksonJsonUtils.messagingAwareMapper()`\n* Fix typo for the `AllowListTypeResolverBuilder` inner class", "committedDate": "2020-09-24T17:04:29Z", "type": "commit"}, {"oid": "5e36c1c07463ab92d3b2a56e5c2c11361ebaf091", "url": "https://github.com/spring-projects/spring-integration/commit/5e36c1c07463ab92d3b2a56e5c2c11361ebaf091", "message": "* Add some docs\n* Fix Checkstyle violations", "committedDate": "2020-09-24T20:02:01Z", "type": "commit"}, {"oid": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "url": "https://github.com/spring-projects/spring-integration/commit/73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "message": "* More docs", "committedDate": "2020-09-25T14:48:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NzAyNA==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495077024", "bodyText": "Should we publish an ApplicationEvent?", "author": "garyrussell", "createdAt": "2020-09-25T15:47:19Z", "path": "spring-integration-zeromq/src/test/java/org/springframework/integration/zeromq/dsl/ZeroMqDslTests.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.zeromq.dsl;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.time.Duration;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Test;\n+import org.zeromq.SocketType;\n+import org.zeromq.ZContext;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.integration.config.EnableIntegration;\n+import org.springframework.integration.dsl.IntegrationFlow;\n+import org.springframework.integration.dsl.IntegrationFlows;\n+import org.springframework.integration.dsl.Transformers;\n+import org.springframework.integration.dsl.context.IntegrationFlowContext;\n+import org.springframework.integration.zeromq.ZeroMqHeaders;\n+import org.springframework.integration.zeromq.ZeroMqProxy;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.support.GenericMessage;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+import org.springframework.util.SocketUtils;\n+\n+/**\n+ * @author Artem Bilan\n+ *\n+ * @since 5.4\n+ */\n+@SpringJUnitConfig\n+@DirtiesContext\n+public class ZeroMqDslTests {\n+\n+\tprivate static final int PROXY_PUB_PORT = SocketUtils.findAvailableTcpPort();\n+\n+\t@Autowired\n+\tZContext context;\n+\n+\t@Autowired\n+\t@Qualifier(\"publishToZeroMqPubSubFlow.input\")\n+\tMessageChannel publishToZeroMqPubSubFlowInput;\n+\n+\t@Autowired\n+\tZeroMqProxy subPubZeroMqProxy;\n+\n+\t@Autowired\n+\tZeroMqProxy pullPushZeroMqProxy;\n+\n+\t@Autowired\n+\tIntegrationFlowContext integrationFlowContext;\n+\n+\t@Test\n+\tvoid testZeroMqDslIntegration() throws InterruptedException {\n+\t\tBlockingQueue<Message<?>> results = new LinkedBlockingQueue<>();\n+\n+\t\tawait().until(() -> this.subPubZeroMqProxy.getBackendPort() > 0);\n+\n+\t\tfor (int i = 0; i < 2; i++) {\n+\t\t\tIntegrationFlow consumerFlow =\n+\t\t\t\t\tIntegrationFlows.from(\n+\t\t\t\t\t\t\tZeroMq.inboundChannelAdapter(this.context, SocketType.SUB)\n+\t\t\t\t\t\t\t\t\t.connectUrl(\"tcp://localhost:\" + this.subPubZeroMqProxy.getBackendPort())\n+\t\t\t\t\t\t\t\t\t.topics(\"someTopic\")\n+\t\t\t\t\t\t\t\t\t.consumeDelay(Duration.ofMillis(100)))\n+\t\t\t\t\t\t\t.channel(ZeroMq.zeroMqChannel(this.context).zeroMqProxy(this.pullPushZeroMqProxy))\n+\t\t\t\t\t\t\t.transform(Transformers.objectToString())\n+\t\t\t\t\t\t\t.handle(results::offer)\n+\t\t\t\t\t\t\t.get();\n+\n+\t\t\tthis.integrationFlowContext.registration(consumerFlow).register();\n+\t\t}\n+\n+\t\t// Give it some time to connect and subscribe\n+\t\tThread.sleep(2000);", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNDUyOQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495134529", "bodyText": "Well, we can't: the ZMQ.Socket.subscribe() is an async operation and there is no way on the PUB side to track it.\nWe can do that with XPUB, but that's not an intention of our solution...", "author": "artembilan", "createdAt": "2020-09-25T17:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NzAyNA=="}], "type": "inlineReview"}, {"oid": "fe71e687dd700ac963ed582532d1a757e07d63d3", "url": "https://github.com/spring-projects/spring-integration/commit/fe71e687dd700ac963ed582532d1a757e07d63d3", "message": "Fix language in Docs\n\nCo-authored-by: Gary Russell <grussell@vmware.com>", "committedDate": "2020-09-25T17:36:57Z", "type": "commit"}]}