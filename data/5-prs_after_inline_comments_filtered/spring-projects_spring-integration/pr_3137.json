{"pr_number": 3137, "pr_title": "Infrastructure for ReactiveMessageHandler", "pr_createdAt": "2020-01-08T22:17:55Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3137", "timeline": [{"oid": "ff2d900ecb625fb682581a5b8eece11a7e449920", "url": "https://github.com/spring-projects/spring-integration/commit/ff2d900ecb625fb682581a5b8eece11a7e449920", "message": "Infrastructure for ReactiveMessageHandler\n\nWe have now a `ReactiveMongoDbStoringMessageHandler` which implements\na `ReactiveMessageHandler`, but not a `MessageHandler` for possible\ndeferred subscriptions to the returned Reactor type\n\nWe don't have a proper application context processing for this\nnew type of message handlers\n\n* Change a  `ConsumerEndpointFactoryBean` to apply an `MH` and `RMH`\nas possible types for handler\n* Introduce a `ReactiveMessageHandlerAdapter` to wrap an `RMH`\ninto a `MH` for synchronous calls in the regular consumer endpoints\n* Wrap an `RMH` into a `ReactiveMessageHandlerAdapter` for regular\nendpoints and unwrap for `ReactiveStreamsConsumer`\n* Add `RMH`-based ctor into `ReactiveStreamsConsumer` for target\nreactive streams composition (`flatMap()` on the `RMH`)\n* Remove a `DelegatingSubscriber` from the `ReactiveStreamsConsumer`\nin favor of direct calls from the `doOnSubscribe()`, `doOnComplete()`\n& `doOnNext()`\n* Add an `onErrorContinue()` to handle per-message errors, but don't\ncancel the whole source `Publisher`\n* Use `Disposable` from the `subscribe()` to cancel in the `stop()`\n- recommended way in Reactor\n* Use `onErrorContinue()` in the `FluxMessageChannel` instead of\n`try..catch` in the `doOnNext()` - for possible `onErrorStop()`\nin the provided upstream `Publisher`\n* Handle `RMH` in the `ServiceActivatorFactoryBean` as a direct handler\nas well with wrapping into `ReactiveMessageHandlerAdapter` for return.\nThe `ConsumerEndpointFactoryBean` extracts an `RMH` from the adapter\nfor the `ReactiveStreamsConsumer` anyway\n* Add XML parsing test for `ReactiveMongoDbStoringMessageHandler`\n* Add `log4j-slf4j-impl` for all the test runtime since `slf4j-api`\ncomes as a transitive dependency from many places", "committedDate": "2020-01-08T22:25:45Z", "type": "forcePushed"}, {"oid": "7aac3063da2e43b357a58f46e6a9c4bb283dacbc", "url": "https://github.com/spring-projects/spring-integration/commit/7aac3063da2e43b357a58f46e6a9c4bb283dacbc", "message": "* Fix conflicts after rebasing to master", "committedDate": "2020-01-09T16:36:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0NzY4Mw==", "url": "https://github.com/spring-projects/spring-integration/pull/3137#discussion_r364847683", "bodyText": "Why ISE instead of IAE? This is a setter. Assert.isTrue() ?", "author": "garyrussell", "createdAt": "2020-01-09T16:46:48Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/config/ConsumerEndpointFactoryBean.java", "diffHunk": "@@ -112,11 +114,17 @@\n \n \tprivate volatile boolean initialized;\n \n-\tpublic void setHandler(MessageHandler handler) {\n-\t\tAssert.notNull(handler, \"handler must not be null\");\n+\tpublic void setHandler(Object handler) {\n+\t\tAssert.state(handler instanceof MessageHandler || handler instanceof ReactiveMessageHandler,", "originalCommit": "7aac3063da2e43b357a58f46e6a9c4bb283dacbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0ODAwNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3137#discussion_r364848006", "bodyText": "s/for/to a/", "author": "garyrussell", "createdAt": "2020-01-09T16:47:28Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/config/ConsumerEndpointFactoryBean.java", "diffHunk": "@@ -210,7 +218,12 @@ public void afterPropertiesSet() {\n \t\t\t}\n \t\t}\n \n-\t\tadviceChain();\n+\t\tif (!(this.handler instanceof ReactiveMessageHandlerAdapter)) {\n+\t\t\tadviceChain();\n+\t\t}\n+\t\telse {\n+\t\t\tLOGGER.warn(\"the advice chain cannot be applied for 'ReactiveMessageHandler'\");", "originalCommit": "7aac3063da2e43b357a58f46e6a9c4bb283dacbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ec27bab4e9f89f529368a1260d4268c3b8c4f8fe", "url": "https://github.com/spring-projects/spring-integration/commit/ec27bab4e9f89f529368a1260d4268c3b8c4f8fe", "message": "Infrastructure for ReactiveMessageHandler\n\nWe have now a `ReactiveMongoDbStoringMessageHandler` which implements\na `ReactiveMessageHandler`, but not a `MessageHandler` for possible\ndeferred subscriptions to the returned Reactor type\n\nWe don't have a proper application context processing for this\nnew type of message handlers\n\n* Change a  `ConsumerEndpointFactoryBean` to apply an `MH` and `RMH`\nas possible types for handler\n* Introduce a `ReactiveMessageHandlerAdapter` to wrap an `RMH`\ninto a `MH` for synchronous calls in the regular consumer endpoints\n* Wrap an `RMH` into a `ReactiveMessageHandlerAdapter` for regular\nendpoints and unwrap for `ReactiveStreamsConsumer`\n* Add `RMH`-based ctor into `ReactiveStreamsConsumer` for target\nreactive streams composition (`flatMap()` on the `RMH`)\n* Remove a `DelegatingSubscriber` from the `ReactiveStreamsConsumer`\nin favor of direct calls from the `doOnSubscribe()`, `doOnComplete()`\n& `doOnNext()`\n* Add an `onErrorContinue()` to handle per-message errors, but don't\ncancel the whole source `Publisher`\n* Use `Disposable` from the `subscribe()` to cancel in the `stop()`\n- recommended way in Reactor\n* Use `onErrorContinue()` in the `FluxMessageChannel` instead of\n`try..catch` in the `doOnNext()` - for possible `onErrorStop()`\nin the provided upstream `Publisher`\n* Handle `RMH` in the `ServiceActivatorFactoryBean` as a direct handler\nas well with wrapping into `ReactiveMessageHandlerAdapter` for return.\nThe `ConsumerEndpointFactoryBean` extracts an `RMH` from the adapter\nfor the `ReactiveStreamsConsumer` anyway\n* Add XML parsing test for `ReactiveMongoDbStoringMessageHandler`\n* Add `log4j-slf4j-impl` for all the test runtime since `slf4j-api`\ncomes as a transitive dependency from many places", "committedDate": "2020-01-10T19:31:30Z", "type": "commit"}, {"oid": "fb975e0cca52726f48bd80e2f385637da1b7edcc", "url": "https://github.com/spring-projects/spring-integration/commit/fb975e0cca52726f48bd80e2f385637da1b7edcc", "message": "* Fix conflicts after rebasing to master", "committedDate": "2020-01-10T19:31:30Z", "type": "commit"}, {"oid": "677fe5732774603f95409d70c6d054e1cf6531ca", "url": "https://github.com/spring-projects/spring-integration/commit/677fe5732774603f95409d70c6d054e1cf6531ca", "message": "* Fix typo in warn message\n* Change `Assert.state()` to `Assert.isTrue()`\nfor `ConsumerEndpointFactoryBean.setHandler()`", "committedDate": "2020-01-10T19:31:30Z", "type": "commit"}, {"oid": "dada67a5339d880002783191b3e9bd4fd1f963d9", "url": "https://github.com/spring-projects/spring-integration/commit/dada67a5339d880002783191b3e9bd4fd1f963d9", "message": "* Fix `ConsumerEndpointFactoryBean` when reactive and no advice-chain\n* Fix race condition in the\n`ReactiveMongoDbStoringMessageHandlerTests.testReactiveMongoMessageHandlerFromApplicationContext()`", "committedDate": "2020-01-10T19:31:31Z", "type": "commit"}, {"oid": "4c1e4da9700033aae47998b4c4e2c9b1471c1f64", "url": "https://github.com/spring-projects/spring-integration/commit/4c1e4da9700033aae47998b4c4e2c9b1471c1f64", "message": "* Handle `ReactiveMessageHandler` in Java DSL.\nEssentially request a wrapping into `ReactiveMessageHandlerAdapter`.\nDescribe such a requirements in the `ReactiveMessageHandlerAdapter` JavaDocs\n* Some Java DSL test polishing\n* Add Java DSL for `ReactiveMongoDbStoringMessageHandler`\n* Propagate missed `ApplicationContext` population into an internally\ncreated `ReactiveMongoTemplate` in the `ReactiveMongoDbStoringMessageHandler`", "committedDate": "2020-01-10T22:04:17Z", "type": "commit"}, {"oid": "4c1e4da9700033aae47998b4c4e2c9b1471c1f64", "url": "https://github.com/spring-projects/spring-integration/commit/4c1e4da9700033aae47998b4c4e2c9b1471c1f64", "message": "* Handle `ReactiveMessageHandler` in Java DSL.\nEssentially request a wrapping into `ReactiveMessageHandlerAdapter`.\nDescribe such a requirements in the `ReactiveMessageHandlerAdapter` JavaDocs\n* Some Java DSL test polishing\n* Add Java DSL for `ReactiveMongoDbStoringMessageHandler`\n* Propagate missed `ApplicationContext` population into an internally\ncreated `ReactiveMongoTemplate` in the `ReactiveMongoDbStoringMessageHandler`", "committedDate": "2020-01-10T22:04:17Z", "type": "forcePushed"}]}