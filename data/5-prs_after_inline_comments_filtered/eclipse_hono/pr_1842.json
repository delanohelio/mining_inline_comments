{"pr_number": 1842, "pr_title": "[#1679] Add mongodb based implementation of device registration and management services", "pr_createdAt": "2020-03-17T17:37:50Z", "pr_url": "https://github.com/eclipse/hono/pull/1842", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MjMzNg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394152336", "bodyText": "we already have FIELD_PAYLOAD_DEVICE_ID for the device identifier. Either this field is used for something different than the device ID or it should be removed ...", "author": "sophokles73", "createdAt": "2020-03-18T07:37:44Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -213,6 +213,10 @@\n      * all devices to authenticate.\n      */\n     public static final String FIELD_ADAPTERS_DEVICE_AUTHENTICATION_REQUIRED = \"device-authentication-required\";\n+    /**\n+     * The name of the JSON property containing the device identifier.\n+     */\n+    public static final String FIELD_DEVICE = \"device\";", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5NTgwNQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394195805", "bodyText": "The value corresponds to FIELD_DEVICE is \"device\" and not \"device-id\" and  I don't find any such field under constants class and hence I added one.", "author": "kaniyan", "createdAt": "2020-03-18T09:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MjMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NDI5MQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394154291", "bodyText": "FMPOV this should be changed to hono.registry.http as it is not strictly a RESTful interface ...", "author": "sophokles73", "createdAt": "2020-03-18T07:42:33Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.hono.config.ApplicationConfigProperties;\n+import org.eclipse.hono.config.ServerConfig;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.config.VertxProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.service.MongoDbBasedRegistrationService;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.service.credentials.AutowiredCredentialsAmqpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.credentials.AutowiredCredentialsManagementHttpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.device.AutowiredDeviceManagementHttpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.device.AutowiredRegistrationAmqpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.deviceconnection.MapBasedDeviceConnectionsConfigProperties;\n+import org.eclipse.hono.deviceregistry.service.tenant.AutowiredTenantAmqpEndpoint;\n+import org.eclipse.hono.deviceregistry.service.tenant.AutowiredTenantManagementHttpEndpoint;\n+import org.eclipse.hono.service.HealthCheckServer;\n+import org.eclipse.hono.service.VertxBasedHealthCheckServer;\n+import org.eclipse.hono.service.amqp.AmqpEndpoint;\n+import org.eclipse.hono.service.deviceconnection.DeviceConnectionAmqpEndpoint;\n+import org.eclipse.hono.service.http.HttpEndpoint;\n+import org.eclipse.hono.service.metric.MetricsTags;\n+import org.eclipse.hono.util.Constants;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.opentracing.Tracer;\n+import io.opentracing.contrib.tracerresolver.TracerResolver;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+\n+/**\n+ * Spring Boot configuration for the mongodb based device registry application.\n+ */\n+@Configuration\n+public class ApplicationConfig {\n+\n+    /**\n+     * Exposes a Vert.x instance as a Spring bean.\n+     * <p>\n+     * This method creates new Vert.x default options and invokes\n+     * {@link VertxProperties#configureVertx(VertxOptions)} on the object returned\n+     * by {@link #vertxProperties()}.\n+     *\n+     * @return The Vert.x instance.\n+     */\n+    @Bean\n+    public Vertx vertx() {\n+        return Vertx.vertx(vertxProperties().configureVertx(new VertxOptions()));\n+    }\n+\n+    /**\n+     * Exposes configuration properties for Vert.x.\n+     *\n+     * @return The properties.\n+     */\n+    @ConfigurationProperties(\"hono.vertx\")\n+    @Bean\n+    public VertxProperties vertxProperties() {\n+        return new VertxProperties();\n+    }\n+\n+    /**\n+     * Exposes an OpenTracing {@code Tracer} as a Spring Bean.\n+     * <p>\n+     * The Tracer will be resolved by means of a Java service lookup.\n+     * If no tracer can be resolved this way, the {@code NoopTracer} is\n+     * returned.\n+     *\n+     * @return The tracer.\n+     */\n+    @Bean\n+    public Tracer getTracer() {\n+\n+        return Optional.ofNullable(TracerResolver.resolveTracer())\n+                .orElse(NoopTracerFactory.create());\n+    }\n+\n+    /**\n+     * Gets general properties for configuring the Device Registry Spring Boot application.\n+     *\n+     * @return The properties.\n+     */\n+    @Bean\n+    @ConfigurationProperties(prefix = \"hono.app\")\n+    public ApplicationConfigProperties applicationConfigProperties() {\n+        return new ApplicationConfigProperties();\n+    }\n+\n+    /**\n+     * Exposes properties for configuring the health check as a Spring bean.\n+     *\n+     * @return The health check configuration properties.\n+     */\n+    @Bean\n+    @ConfigurationProperties(prefix = \"hono.health-check\")\n+    public ServerConfig healthCheckConfigProperties() {\n+        return new ServerConfig();\n+    }\n+\n+    /**\n+     * Gets properties for configuring the Device Registry's AMQP 1.0 endpoint.\n+     *\n+     * @return The properties.\n+     */\n+    @Qualifier(Constants.QUALIFIER_AMQP)\n+    @Bean\n+    @ConfigurationProperties(prefix = \"hono.registry.amqp\")\n+    public ServiceConfigProperties amqpServerProperties() {\n+        final ServiceConfigProperties props = new ServiceConfigProperties();\n+        return props;\n+    }\n+\n+    /**\n+     * Creates a new instance of an AMQP 1.0 protocol handler for Hono's <em>Device Registration</em> API.\n+     *\n+     * @return The handler.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public AmqpEndpoint registrationAmqpEndpoint() {\n+        return new AutowiredRegistrationAmqpEndpoint(vertx());\n+    }\n+\n+    /**\n+     * Creates a new instance of an AMQP 1.0 protocol handler for Hono's <em>Credentials</em> API.\n+     * \n+     * @return The handler.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public AmqpEndpoint credentialsAmqpEndpoint() {\n+        return new AutowiredCredentialsAmqpEndpoint(vertx());\n+    }\n+\n+    /**\n+     * Creates a new instance of an AMQP 1.0 protocol handler for Hono's <em>Tenant</em> API.\n+     *\n+     * @return The handler.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public AmqpEndpoint tenantAmqpEndpoint() {\n+        return new AutowiredTenantAmqpEndpoint(vertx());\n+    }\n+\n+    /**\n+     * Creates a new instance of an AMQP 1.0 protocol handler for Hono's <em>Device Connection</em> API.\n+     *\n+     * @return The handler.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public AmqpEndpoint deviceConnectionAmqpEndpoint() {\n+        return new DeviceConnectionAmqpEndpoint(vertx());\n+    }\n+\n+    /**\n+     * Gets properties for configuring the HTTP based Device Registry Management endpoint.\n+     *\n+     * @return The properties.\n+     */\n+    @Qualifier(Constants.QUALIFIER_REST)\n+    @Bean\n+    @ConfigurationProperties(prefix = \"hono.registry.rest\")", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5Njc3NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394196774", "bodyText": "I tired to keep it in align with the existing file based device registry that we have and there it is declared as hono.registry.rest. I can change it here to hono.registry.http.", "author": "kaniyan", "createdAt": "2020-03-18T09:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NDI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzODA5OQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394338099", "bodyText": "I would suggest raising a separate PR fixing this also in the file and mongodb based device registry, docs and also the corresponding helm charts for device registry in IoT packages. WDYT?", "author": "kaniyan", "createdAt": "2020-03-18T13:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NDI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MDQ3NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394340474", "bodyText": "I would rather not change the prefix for the existing example registry in order to keep existing config yaml files working. However, this is a newly introduced registry so we can do what we want here...", "author": "sophokles73", "createdAt": "2020-03-18T13:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NDI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3MjMwMA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394372300", "bodyText": "\ud83d\udc4d Done.", "author": "kaniyan", "createdAt": "2020-03-18T14:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NDI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjEwNA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156104", "bodyText": "I don't quite see why the number of devices per tenant should be limited by default. Is there also a value that indicates unlimited?", "author": "sophokles73", "createdAt": "2020-03-18T07:46:54Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedRegistrationConfigProperties.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+/**\n+ * Configuration properties for Hono's device registry tenant API.\n+ */\n+public final class MongoDbBasedRegistrationConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The default number of devices that can be registered for each tenant.\n+     */\n+    public static final int DEFAULT_MAX_DEVICES_PER_TENANT = 100;\n+    private static final String DEFAULT_DEVICE_COLLECTION_NAME = \"devices\";\n+\n+    private int maxDevicesPerTenant = DEFAULT_MAX_DEVICES_PER_TENANT;", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwNjkyMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394206922", "bodyText": "In our documentation we have specified already that the default value is 100 and so our file based device registry. At the first  iteration, I tried to keep it in sync with that and then add more optimised values. It makes sense to make it unlimited now for mongodb based in comparison with the file based.", "author": "kaniyan", "createdAt": "2020-03-18T09:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjU1MQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156551", "bodyText": "either the class or all of its methods that are not supposed to be overridden should be final", "author": "sophokles73", "createdAt": "2020-03-18T07:47:56Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjcwOA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156708", "bodyText": "can I set this to null?", "author": "sophokles73", "createdAt": "2020-03-18T07:48:20Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1Njg4MQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156881", "bodyText": "reasonable port range check?", "author": "sophokles73", "createdAt": "2020-03-18T07:48:40Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1Njk4OA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394156988", "bodyText": "can I set this to null?", "author": "sophokles73", "createdAt": "2020-03-18T07:48:53Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NzEzNQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394157135", "bodyText": "null check?", "author": "sophokles73", "createdAt": "2020-03-18T07:49:12Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NzIyNQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394157225", "bodyText": "null check?", "author": "sophokles73", "createdAt": "2020-03-18T07:49:24Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1Nzk5NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394157995", "bodyText": "null check?", "author": "sophokles73", "createdAt": "2020-03-18T07:51:12Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1ODA5MA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394158090", "bodyText": "range check?", "author": "sophokles73", "createdAt": "2020-03-18T07:51:25Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @param timeout timeout in milliseconds. Setting to zero means the default", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1ODE3NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394158175", "bodyText": "range check?", "author": "sophokles73", "createdAt": "2020-03-18T07:51:36Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @param timeout timeout in milliseconds. Setting to zero means the default\n+     *                value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setServerSelectionTimeout(final int timeout) {\n+        this.serverSelectionTimeoutMS = timeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getConnectTimeout() {\n+        return connectTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @param connectTimeout timeout in milliseconds. Setting to zero means the default", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1ODI4OA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394158288", "bodyText": "range check?", "author": "sophokles73", "createdAt": "2020-03-18T07:51:52Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @param timeout timeout in milliseconds. Setting to zero means the default\n+     *                value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setServerSelectionTimeout(final int timeout) {\n+        this.serverSelectionTimeoutMS = timeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getConnectTimeout() {\n+        return connectTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @param connectTimeout timeout in milliseconds. Setting to zero means the default\n+     *                       value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectTimeout(final int connectTimeout) {\n+        this.connectTimeoutMS = connectTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to create indices during startup.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getCreateIndicesTimeout() {\n+        return createIndicesTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the startup will try to create indices\n+     * during startup.\n+     *\n+     * @param timeout timeout in milliseconds.", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MDAzMw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394160033", "bodyText": "literal String version should be replaced with constant", "author": "sophokles73", "createdAt": "2020-03-18T07:55:52Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BaseDto {\n+\n+    @JsonProperty(value = \"version\", required = true)", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MDExMQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394160111", "bodyText": "replace with constant", "author": "sophokles73", "createdAt": "2020-03-18T07:56:05Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BaseDto {\n+\n+    @JsonProperty(value = \"version\", required = true)\n+    protected String version;\n+    @JsonProperty(\"updatedOn\")", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MDcyMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394160722", "bodyText": "is this class supposed to be instantiated? if not, it should be declared abstract ...\nIts methods should probably be final ..", "author": "sophokles73", "createdAt": "2020-03-18T07:57:24Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class BaseDto {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MDkyOQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394160929", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-03-18T07:57:52Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/DeviceDto.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+public class DeviceDto extends BaseDto {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MTI4Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394161283", "bodyText": "please put annotations on their own line", "author": "sophokles73", "createdAt": "2020-03-18T07:58:42Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.service.credentials.CredentialsService;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CredentialsManagementService;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * This is an implementation of the credentials service and the credentials management service where data is \n+ * stored in a mongodb database.\n+ * \n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">Credentials API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedCredentialsService extends AbstractVerticle\n+        implements CredentialsManagementService, CredentialsService {\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MTc5MQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394161791", "bodyText": "add aan empty line between description and param declaration", "author": "sophokles73", "createdAt": "2020-03-18T07:59:57Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.service.credentials.CredentialsService;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CredentialsManagementService;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * This is an implementation of the credentials service and the credentials management service where data is \n+ * stored in a mongodb database.\n+ * \n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">Credentials API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedCredentialsService extends AbstractVerticle\n+        implements CredentialsManagementService, CredentialsService {\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId, final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId,\n+            final JsonObject clientContext, final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    @Override public Future<OperationResult<Void>> updateCredentials(final String tenantId, final String deviceId,\n+            final List<CommonCredential> credentials, final Optional<String> resourceVersion, final Span span) {\n+        //TODO\n+        return Future.succeededFuture(\n+                OperationResult.ok(HttpURLConnection.HTTP_NO_CONTENT, null, Optional.empty(), Optional.empty()));\n+    }\n+\n+    @Override public Future<OperationResult<List<CommonCredential>>> readCredentials(final String tenantId,\n+            final String deviceId,\n+            final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    /**\n+     * Remove all the credentials for the given device ID.\n+     * @param tenantId the Id of the tenant which the device belongs to.", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MTk3Nw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394161977", "bodyText": "@throws NullPointerException ...?", "author": "sophokles73", "createdAt": "2020-03-18T08:00:22Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.service.credentials.CredentialsService;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CredentialsManagementService;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * This is an implementation of the credentials service and the credentials management service where data is \n+ * stored in a mongodb database.\n+ * \n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">Credentials API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedCredentialsService extends AbstractVerticle\n+        implements CredentialsManagementService, CredentialsService {\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId, final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    @Override public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId,\n+            final JsonObject clientContext, final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    @Override public Future<OperationResult<Void>> updateCredentials(final String tenantId, final String deviceId,\n+            final List<CommonCredential> credentials, final Optional<String> resourceVersion, final Span span) {\n+        //TODO\n+        return Future.succeededFuture(\n+                OperationResult.ok(HttpURLConnection.HTTP_NO_CONTENT, null, Optional.empty(), Optional.empty()));\n+    }\n+\n+    @Override public Future<OperationResult<List<CommonCredential>>> readCredentials(final String tenantId,\n+            final String deviceId,\n+            final Span span) {\n+        //TODO\n+        return null;\n+    }\n+\n+    /**\n+     * Remove all the credentials for the given device ID.\n+     * @param tenantId the Id of the tenant which the device belongs to.\n+     * @param deviceId the id of the device that is deleted.\n+     * @param span The active OpenTracing span for this operation.\n+     * @return A future indicating the outcome of the operation.", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MjQ1NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394162455", "bodyText": "This annotation should be removed FMPOV", "author": "sophokles73", "createdAt": "2020-03-18T08:01:26Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedDeviceBackend.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.net.HttpURLConnection;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.device.AutoProvisioningEnabledDeviceBackend;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CredentialsConstants;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Repository;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import io.opentracing.Span;\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A device backend that leverages and unifies {@link MongoDbBasedRegistrationService} and\n+ * {@link MongoDbBasedCredentialsService}.\n+ */\n+@Repository\n+@Qualifier(\"backend\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"file\", matchIfMissing = true)", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2Mzk2NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394163964", "bodyText": "this seems to be the same code as in the file bsaed registry, isn't it?", "author": "sophokles73", "createdAt": "2020-03-18T08:05:01Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedDeviceBackend.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.net.HttpURLConnection;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.device.AutoProvisioningEnabledDeviceBackend;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CredentialsConstants;\n+import org.eclipse.hono.util.CredentialsResult;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Repository;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+import io.opentracing.Span;\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A device backend that leverages and unifies {@link MongoDbBasedRegistrationService} and\n+ * {@link MongoDbBasedCredentialsService}.\n+ */\n+@Repository\n+@Qualifier(\"backend\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"file\", matchIfMissing = true)\n+public class MongoDbBasedDeviceBackend implements AutoProvisioningEnabledDeviceBackend {\n+\n+    private final MongoDbBasedRegistrationService registrationService;\n+    private final MongoDbBasedCredentialsService credentialsService;\n+\n+    /**\n+     * Create a new instance.\n+     * \n+     * @param registrationService an implementation of registration service.\n+     * @param credentialsService an implementation of credentials service.\n+     */\n+    @Autowired\n+    public MongoDbBasedDeviceBackend(\n+            @Qualifier(\"serviceImpl\") final MongoDbBasedRegistrationService registrationService,\n+            @Qualifier(\"serviceImpl\") final MongoDbBasedCredentialsService credentialsService) {\n+        this.registrationService = registrationService;\n+        this.credentialsService = credentialsService;\n+    }\n+\n+    // DEVICES\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId) {\n+        return registrationService.assertRegistration(tenantId, deviceId);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId,\n+            final String gatewayId) {\n+        return registrationService.assertRegistration(tenantId, deviceId, gatewayId);\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Device>> readDevice(final String tenantId, final String deviceId, final Span span) {\n+        return registrationService.readDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<Result<Void>> deleteDevice(final String tenantId, final String deviceId,\n+            final Optional<String> resourceVersion,\n+            final Span span) {\n+\n+        return registrationService.deleteDevice(tenantId, deviceId, resourceVersion, span)\n+                .compose(result -> {\n+                    if (result.getStatus() != HttpURLConnection.HTTP_NO_CONTENT) {\n+                        return Future.succeededFuture(result);\n+                    }\n+                    // now delete the credentials set and pass on the original result\n+                    return credentialsService.removeCredentials(\n+                            tenantId,\n+                            deviceId,\n+                            span)\n+                            .map(result);\n+                });\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> createDevice(\n+            final String tenantId,\n+            final Optional<String> deviceId,\n+            final Device device,\n+            final Span span) {\n+\n+        return registrationService.createDevice(tenantId, deviceId, device, span)\n+                .compose(result -> {\n+                    if (result.getStatus() != HttpURLConnection.HTTP_CREATED) {\n+                        return Future.succeededFuture(result);\n+                    }\n+                    // now create the empty credentials set and pass on the original result\n+                    return credentialsService.updateCredentials(\n+                            tenantId,\n+                            result.getPayload().getId(),\n+                            Collections.emptyList(),\n+                            Optional.empty(),\n+                            span\n+                    ).map(result);\n+                });\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> updateDevice(final String tenantId, final String deviceId, final Device device,\n+            final Optional<String> resourceVersion, final Span span) {\n+        return registrationService.updateDevice(tenantId, deviceId, device, resourceVersion, span);\n+    }\n+\n+    // CREDENTIALS\n+\n+    @Override\n+    public final Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId) {\n+        return credentialsService.get(tenantId, type, authId);\n+    }\n+\n+    @Override\n+    public Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type, final String authId,\n+            final Span span) {\n+        return credentialsService.get(tenantId, type, authId, span);\n+    }\n+\n+    @Override\n+    public final Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type,\n+            final String authId, final JsonObject clientContext) {\n+        return get(tenantId, type, authId, clientContext, NoopSpan.INSTANCE);\n+    }\n+\n+    @Override\n+    public  Future<CredentialsResult<JsonObject>> get(final String tenantId, final String type, final String authId, final JsonObject clientContext,\n+            final Span span) {\n+        return credentialsService.get(tenantId, type, authId, clientContext, span)\n+                .compose(result -> {\n+                    if (result.getStatus() == HttpURLConnection.HTTP_NOT_FOUND\n+                            && isAutoProvisioningEnabled(type, clientContext)) {\n+                        return provisionDevice(tenantId, authId, clientContext, span);\n+                    }\n+                    return Future.succeededFuture(result);\n+                });\n+    }\n+\n+    /**\n+     * Parses certificate, provisions device and returns the new credentials.\n+     */\n+    private Future<CredentialsResult<JsonObject>> provisionDevice(final String tenantId, final String authId,\n+            final JsonObject clientContext,\n+            final Span span) {\n+\n+        final X509Certificate cert;\n+        try {\n+            final byte[] bytes = clientContext.getBinary(CredentialsConstants.FIELD_CLIENT_CERT);\n+            final CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n+            cert = (X509Certificate) factory.generateCertificate(new ByteArrayInputStream(bytes));\n+\n+            if (!cert.getSubjectX500Principal().getName(X500Principal.RFC2253).equals(authId)) {\n+                throw new IllegalArgumentException(\"Subject DN of the client certificate does not match authId\");\n+            }\n+        } catch (final CertificateException | ClassCastException | IllegalArgumentException e) {\n+            TracingHelper.logError(span, e);\n+            final int status = HttpURLConnection.HTTP_BAD_REQUEST;\n+            return Future.succeededFuture(createErrorCredentialsResult(status, e.getMessage()));\n+        }", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NDM4Ng==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394274386", "bodyText": "Yes. My plan is to pull up commonly used properties and such reusable codes to the base module.", "author": "kaniyan", "createdAt": "2020-03-18T11:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5OTE1OA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394399158", "bodyText": "@sophokles73 I could imagine pulling up this method to the AutoProvisioningEnabledDeviceBackend as given below. WDYT?\n    /**\n     * Registers a device together with a set of credentials for the given client certificate.\n     *\n     * @param tenantId The tenant to which the device belongs.\n     * @param authId The authentication identifier.\n     * @param clientContext The client context that can be used to get the X.509 certificate \n     *                      of the device to be provisioned.\n     * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n     *            implementation should log (error) events on this span and it may set tags and use this span as the\n     *            parent for any spans created in this method.\n     * @return A (succeeded) future containing the result of the operation. The <em>status</em> will be\n     *         <ul>\n     *         <li><em>201 CREATED</em> if the device has successfully been provisioned.</li>\n     *         <li><em>4XX</em> if the provisioning failed. The payload may contain an error description.</li>\n     *         </ul>\n     * @throws NullPointerException if any of the parameters is {@code null}.\n     */\n    default Future<OperationResult<String>> provisionDevice(\n            final String tenantId,\n            final String authId,\n            final JsonObject clientContext,\n            final Span span) {\n        // TODO.\n        return null;\n\n    }", "author": "kaniyan", "createdAt": "2020-03-18T14:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3OTMxMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394479312", "bodyText": "I was more thinking about pulling up a utility method for parsing the client context ...", "author": "sophokles73", "createdAt": "2020-03-18T16:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2Mzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4ODUzMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394988532", "bodyText": "I have now pulled up a utility method for getting the certificate from the client context. Once this is merged, I will raise a separate PR for refactoring the file based device registry with this new utility method.", "author": "kaniyan", "createdAt": "2020-03-19T12:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2Mzk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2NTA0NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394165045", "bodyText": "What purpose does this serve? FMPOV this can be removed ..", "author": "sophokles73", "createdAt": "2020-03-18T08:07:23Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODAyNA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168024", "bodyText": "this will be very hard to test. why don't you simply extend AbstractRegistrationService and also implement Verticle?", "author": "sophokles73", "createdAt": "2020-03-18T08:13:27Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODIzNQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168235", "bodyText": "can this be null?", "author": "sophokles73", "createdAt": "2020-03-18T08:13:55Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODM4NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168385", "bodyText": "javadoc?", "author": "sophokles73", "createdAt": "2020-03-18T08:14:15Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODU3Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168573", "bodyText": "is this going to be used?", "author": "sophokles73", "createdAt": "2020-03-18T08:14:39Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MDE3NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394280174", "bodyText": "This method getConfig()is already being used instead of directly using the instance variable config.", "author": "kaniyan", "createdAt": "2020-03-18T11:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0MTcxOA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394341718", "bodyText": "But that is not necessary, is it?\nThe question is: will any other class be required to get access to this service's configuration using this method? If not (which I assume) we should remove the method, shouldn't we?", "author": "sophokles73", "createdAt": "2020-03-18T13:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2OTMxMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394369312", "bodyText": "It makes sense and I will remove it.", "author": "kaniyan", "createdAt": "2020-03-18T14:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODY2NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394168664", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-03-18T08:14:51Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTQ4Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394169483", "bodyText": "if this is what I think it is ((re-)creating indices), then I believe it should be run periodically and independently from the start-up of this verticle", "author": "sophokles73", "createdAt": "2020-03-18T08:16:29Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) {\n+\n+        mongoDbCallExecutor.createCollectionIndex(getConfig().getCollectionName(),", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2NDY3NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394464675", "bodyText": "@sophokles73 I understood from the above code, that they try creating indices during the startup of the component. If it doesn't succeed even after retries, then the component also fails to start up.\n\nindependently from the start-up of this verticle\n\nDo you mean that even though the index creation fails, the component should start up?\n\nthen I believe it should be run periodically\n\nDo you mean it should periodically try to create indexes until it is successfully created?", "author": "kaniyan", "createdAt": "2020-03-18T16:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3NzM0Ng==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394477346", "bodyText": "I am not familiar with how indices are being created in maintained in Mongo DB. However, in general with DBMS, indices need to be created as part of the logical data model, e.g. when creating a table in a relational system. I wonder if this is a one time activity only or if Mongo requires the indices to be refreshed periodically. If so, I think this should be done e.g. from a side-car container cron job ...", "author": "sophokles73", "createdAt": "2020-03-18T16:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkwNTExMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394905112", "bodyText": "@sophokles73 As I understood from the MongoDB documentation and what I have tested locally,  the indices once created remains there. Also MongoDB does not recreate an index, if the index already exists for the same keys. I couldn't think of any place where we could run the index creation only once in our setup. Hence the start-up section of the component seems to be the next appropriate place for me.\nAlso what I understood from the MongoDB docs is that the index creation process holds an exclusive lock on the specified collection at the start and end of the index build. All subsequent operations on the collection must wait until the exclusive lock is released. But it allows interleaving read and write operations during the majority of the index build. This tells me that its slightly better to run it during the start-up of the component rather independently from the start-up.", "author": "kaniyan", "createdAt": "2020-03-19T09:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5MTM5NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396291395", "bodyText": "@sophokles7 Would you mind taking a look at the above comment? WDYT about it?", "author": "kaniyan", "createdAt": "2020-03-23T08:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwNjIyNw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396406227", "bodyText": "Then let's keep it like it is ...", "author": "sophokles73", "createdAt": "2020-03-23T12:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3MDg3MQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394170871", "bodyText": "how about encapsulating the generating of (unique) identifiers in a utility method so that the strategy can be implemented/modified in a single place?", "author": "sophokles73", "createdAt": "2020-03-18T08:19:30Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) {\n+\n+        mongoDbCallExecutor.createCollectionIndex(getConfig().getCollectionName(),\n+                new JsonObject().put(RegistrationConstants.FIELD_PAYLOAD_TENANT_ID, 1)\n+                        .put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, 1),\n+                new IndexOptions().unique(true))\n+                .map(success -> {\n+                    startPromise.complete();\n+                    return null;\n+                })\n+                .onFailure(error -> {\n+                    log.error(\"Index creation failed\", error);\n+                    startPromise.fail(error);\n+                });\n+    }\n+\n+    @Override\n+    public void stop(final Promise<Void> stopPromise) {\n+        mongoClient.close();\n+        stopPromise.complete();\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> createDevice(final String tenantId, final Optional<String> deviceId,\n+            final Device device, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        final String deviceIdValue = deviceId.orElse(UUID.randomUUID().toString());", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3MjE3Ng==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394172176", "bodyText": "processUpdateDevice", "author": "sophokles73", "createdAt": "2020-03-18T08:22:18Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) {\n+\n+        mongoDbCallExecutor.createCollectionIndex(getConfig().getCollectionName(),\n+                new JsonObject().put(RegistrationConstants.FIELD_PAYLOAD_TENANT_ID, 1)\n+                        .put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, 1),\n+                new IndexOptions().unique(true))\n+                .map(success -> {\n+                    startPromise.complete();\n+                    return null;\n+                })\n+                .onFailure(error -> {\n+                    log.error(\"Index creation failed\", error);\n+                    startPromise.fail(error);\n+                });\n+    }\n+\n+    @Override\n+    public void stop(final Promise<Void> stopPromise) {\n+        mongoClient.close();\n+        stopPromise.complete();\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> createDevice(final String tenantId, final Optional<String> deviceId,\n+            final Device device, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        final String deviceIdValue = deviceId.orElse(UUID.randomUUID().toString());\n+        final Versioned<Device> versionedDevice = new Versioned<>(device);\n+        final DeviceDto deviceDto = new DeviceDto(tenantId, deviceIdValue, versionedDevice.getValue(),\n+                versionedDevice.getVersion(), Instant.now());\n+\n+        final Promise<Long> findExistingNoOfDevicesPromise = Promise.promise();\n+        mongoClient.count(getConfig().getCollectionName(), new JsonObject(), findExistingNoOfDevicesPromise);\n+        return findExistingNoOfDevicesPromise.future()\n+                .compose(existingNoOfDevices -> {\n+                    if (existingNoOfDevices >= getConfig().getMaxDevicesPerTenant()) {\n+                        log.debug(\"Maximum number of devices limit already reached for the tenant [{}]\", tenantId);\n+                        TracingHelper.logError(span, String.format(\n+                                \"Maximum number of devices limit already reached for the tenant [%s]\", tenantId));\n+                        return Future\n+                                .succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n+                    } else {\n+                        return processCreateDevice(deviceDto, span);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Device>> readDevice(final String tenantId, final String deviceId, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        return processReadDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> updateDevice(final String tenantId, final String deviceId, final Device device,\n+            final Optional<String> resourceVersion, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        if (!getConfig().isModificationEnabled()) {\n+            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n+            TracingHelper.logError(span, errorMsg);\n+            log.debug(errorMsg);\n+            return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n+        }\n+        // TODO: To check for the version mismatch.\n+\n+        final Versioned<Device> versionedDevice = new Versioned<>(device);\n+        final DeviceDto deviceDto = new DeviceDto(tenantId, deviceId, versionedDevice.getValue(),\n+                versionedDevice.getVersion(), Instant.now());\n+\n+        return ProcessUpdateDevice(tenantId, deviceId, deviceDto, span);\n+    }\n+\n+    @Override\n+    public Future<Result<Void>> deleteDevice(final String tenantId, final String deviceId,\n+            final Optional<String> resourceVersion, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        if (!config.isModificationEnabled()) {\n+            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n+            TracingHelper.logError(span, errorMsg);\n+            log.debug(errorMsg);\n+            return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_FORBIDDEN));\n+        }\n+\n+        // TODO: To check for the version mismatch.\n+\n+        return processDeleteDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId) {\n+        return registrationService.assertRegistration(tenantId, deviceId);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId,\n+            final String gatewayId) {\n+        return registrationService.assertRegistration(tenantId, deviceId, gatewayId);\n+    }\n+\n+    private JsonObject convertDevice(final String deviceId, final Device payload) {\n+\n+        if (payload == null) {\n+            return null;\n+        }\n+\n+        final JsonObject data = JsonObject.mapFrom(payload);\n+\n+        return new JsonObject()\n+                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n+                .put(\"data\", data);\n+    }\n+\n+    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+        final JsonObject findDeviceQuery = new MongoDbDocumentBuilder()\n+                .withTenantId(tenantId)\n+                .withDeviceId(deviceId)\n+                .create();\n+        final Promise<JsonObject> readDevicePromise = Promise.promise();\n+        mongoClient.findOne(getConfig().getCollectionName(), findDeviceQuery, null, readDevicePromise);\n+        return readDevicePromise.future()\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(ok -> result.mapTo(DeviceDto.class))\n+                        .map(Future::succeededFuture)\n+                        .orElseGet(() -> {\n+                            log.debug(\"Device [{}] not found.\", deviceId);\n+                            return Future.succeededFuture(null);\n+                        }));\n+    }\n+\n+    private Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+\n+        return processReadDevice(tenantId, deviceId, span)\n+                .compose(result -> Future.succeededFuture(RegistrationResult.from(result.getStatus(),\n+                        convertDevice(deviceId, result.getPayload()), result.getCacheDirective().orElse(null))));\n+\n+    }\n+\n+    private boolean ifDuplicateKeyError(final Throwable throwable) {\n+        if (throwable instanceof MongoException) {\n+            final MongoException mongoException = (MongoException) throwable;\n+            return ErrorCategory.fromErrorCode(mongoException.getCode()) == ErrorCategory.DUPLICATE_KEY;\n+        }\n+        return false;\n+    }\n+\n+    private Future<OperationResult<Id>> processCreateDevice(final DeviceDto device, final Span span) {\n+        final Promise<String> addDevicePromise = Promise.promise();\n+        mongoClient.insert(getConfig().getCollectionName(), JsonObject.mapFrom(device), addDevicePromise);\n+        return addDevicePromise.future()\n+                .map(success -> OperationResult.ok(\n+                        HttpURLConnection.HTTP_CREATED,\n+                        Id.of(device.getDeviceId()),\n+                        Optional.empty(),\n+                        Optional.of(device.getVersion())))\n+                .recover(error -> {\n+                    if (ifDuplicateKeyError(error)) {\n+                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId(),\n+                                device.getTenantId(), error);\n+                        TracingHelper.logError(span, String.format(\"Device [%s] already exists for the tenant [%s]\",\n+                                device.getDeviceId(), device.getTenantId()));\n+                        return Future.succeededFuture(\n+                                OperationResult.empty(HttpURLConnection.HTTP_CONFLICT));\n+                    } else {\n+                        log.error(\"Error adding device [{}] for the tenant [{}]\", device.getDeviceId(),\n+                                device.getTenantId(), error);\n+                        TracingHelper.logError(span, String.format(\"Error adding device [%s] for the tenant [%s]\",\n+                                device.getDeviceId(), device.getTenantId()), error);\n+                        return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_INTERNAL_ERROR));\n+                    }\n+                });\n+    }\n+\n+    private Future<Result<Void>> processDeleteDevice(final String tenantId, final String deviceId, final Span span) {\n+        final Promise<MongoClientDeleteResult> deleteDevicePromise = Promise.promise();\n+        final JsonObject removeDeviceQuery = new MongoDbDocumentBuilder()\n+                .withTenantId(tenantId)\n+                .withDeviceId(deviceId)\n+                .create();\n+        mongoClient.removeDocument(getConfig().getCollectionName(), removeDeviceQuery, deleteDevicePromise);\n+        return deleteDevicePromise.future()\n+                .compose(successDeleteDevice -> {\n+                    if (successDeleteDevice.getRemovedCount() == 1) {\n+                        return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_NO_CONTENT));\n+                    } else {\n+                        log.debug(\"Device [{}] not found.\", deviceId);\n+                        TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceId));\n+                        return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_NOT_FOUND));\n+                    }\n+                });\n+    }\n+\n+    private Future<OperationResult<Device>> processReadDevice(final String tenantId, final String deviceId,\n+            final Span span) {\n+        return findDevice(tenantId, deviceId)\n+                .compose(deviceDto -> Optional.ofNullable(deviceDto)\n+                        .map(ok -> Future.succeededFuture(\n+                                OperationResult.ok(\n+                                        HttpURLConnection.HTTP_OK,\n+                                        deviceDto.getDevice(),\n+                                        Optional.ofNullable(\n+                                                DeviceRegistryUtils.getCacheDirective(getConfig().getCacheMaxAge())),\n+                                        Optional.ofNullable(deviceDto.getVersion()))))\n+                        .orElseGet(() -> {\n+                            TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceId));\n+                            return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_NOT_FOUND));\n+                        }));\n+    }\n+\n+    private Future<OperationResult<Id>> ProcessUpdateDevice(final String tenantId, final String deviceId,", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3MzgyOA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394173828", "bodyText": "isDuplicateKeyError", "author": "sophokles73", "createdAt": "2020-03-18T08:25:40Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.service;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbBasedRegistrationConfigProperties;\n+import org.eclipse.hono.deviceregistry.mongodb.model.DeviceDto;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbCallExecutor;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDocumentBuilder;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.Versioned;\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.Result;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.registration.AbstractRegistrationService;\n+import org.eclipse.hono.service.registration.RegistrationService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.eclipse.hono.util.RegistrationResult;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.stereotype.Component;\n+\n+import com.mongodb.ErrorCategory;\n+import com.mongodb.MongoException;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.AbstractVerticle;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+import io.vertx.ext.mongo.MongoClientDeleteResult;\n+import io.vertx.ext.mongo.MongoClientUpdateResult;\n+\n+/**\n+ * This is an implementation of the device registration service and the device management service where data \n+ * is stored in a mongodb database.\n+ *\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/device-registration/\">Device Registration API</a>\n+ * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n+ */\n+@Component\n+@Qualifier(\"serviceImpl\")\n+@ConditionalOnProperty(name = \"hono.app.type\", havingValue = \"mongodb\", matchIfMissing = true)\n+public class MongoDbBasedRegistrationService extends AbstractVerticle\n+        implements DeviceManagementService, RegistrationService {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbBasedRegistrationService.class);\n+    private MongoClient mongoClient;\n+    private MongoDbBasedRegistrationConfigProperties config;\n+    private MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Registration service, based on {@link AbstractRegistrationService}.\n+     * <p>\n+     * This helps work around Java's inability to inherit from multiple base classes. We create a new Registration\n+     * service, overriding the implementation of {@link AbstractRegistrationService} with the implementation of our\n+     * {@link MongoDbBasedRegistrationService#getDevice(String, String, Span)}.\n+     */\n+    private final AbstractRegistrationService registrationService = new AbstractRegistrationService() {\n+\n+        @Override\n+        public Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+            return MongoDbBasedRegistrationService.this.getDevice(tenantId, deviceId, span);\n+        }\n+\n+        @Override\n+        public Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+            return MongoDbBasedRegistrationService.this.resolveGroupMembers(tenantId, viaGroups);\n+        }\n+    };\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param mongoDbCallExecutor An instance of the mongoDbCallExecutor.\n+     */\n+    @Autowired\n+    public void setExecutor(final MongoDbCallExecutor mongoDbCallExecutor) {\n+        this.mongoDbCallExecutor = mongoDbCallExecutor;\n+        this.mongoClient = this.mongoDbCallExecutor.getMongoClient();\n+    }\n+\n+    @Autowired\n+    public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n+        this.config = config;\n+    }\n+\n+    public MongoDbBasedRegistrationConfigProperties getConfig() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) {\n+\n+        mongoDbCallExecutor.createCollectionIndex(getConfig().getCollectionName(),\n+                new JsonObject().put(RegistrationConstants.FIELD_PAYLOAD_TENANT_ID, 1)\n+                        .put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, 1),\n+                new IndexOptions().unique(true))\n+                .map(success -> {\n+                    startPromise.complete();\n+                    return null;\n+                })\n+                .onFailure(error -> {\n+                    log.error(\"Index creation failed\", error);\n+                    startPromise.fail(error);\n+                });\n+    }\n+\n+    @Override\n+    public void stop(final Promise<Void> stopPromise) {\n+        mongoClient.close();\n+        stopPromise.complete();\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> createDevice(final String tenantId, final Optional<String> deviceId,\n+            final Device device, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        final String deviceIdValue = deviceId.orElse(UUID.randomUUID().toString());\n+        final Versioned<Device> versionedDevice = new Versioned<>(device);\n+        final DeviceDto deviceDto = new DeviceDto(tenantId, deviceIdValue, versionedDevice.getValue(),\n+                versionedDevice.getVersion(), Instant.now());\n+\n+        final Promise<Long> findExistingNoOfDevicesPromise = Promise.promise();\n+        mongoClient.count(getConfig().getCollectionName(), new JsonObject(), findExistingNoOfDevicesPromise);\n+        return findExistingNoOfDevicesPromise.future()\n+                .compose(existingNoOfDevices -> {\n+                    if (existingNoOfDevices >= getConfig().getMaxDevicesPerTenant()) {\n+                        log.debug(\"Maximum number of devices limit already reached for the tenant [{}]\", tenantId);\n+                        TracingHelper.logError(span, String.format(\n+                                \"Maximum number of devices limit already reached for the tenant [%s]\", tenantId));\n+                        return Future\n+                                .succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n+                    } else {\n+                        return processCreateDevice(deviceDto, span);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Device>> readDevice(final String tenantId, final String deviceId, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        return processReadDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<OperationResult<Id>> updateDevice(final String tenantId, final String deviceId, final Device device,\n+            final Optional<String> resourceVersion, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        if (!getConfig().isModificationEnabled()) {\n+            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n+            TracingHelper.logError(span, errorMsg);\n+            log.debug(errorMsg);\n+            return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n+        }\n+        // TODO: To check for the version mismatch.\n+\n+        final Versioned<Device> versionedDevice = new Versioned<>(device);\n+        final DeviceDto deviceDto = new DeviceDto(tenantId, deviceId, versionedDevice.getValue(),\n+                versionedDevice.getVersion(), Instant.now());\n+\n+        return ProcessUpdateDevice(tenantId, deviceId, deviceDto, span);\n+    }\n+\n+    @Override\n+    public Future<Result<Void>> deleteDevice(final String tenantId, final String deviceId,\n+            final Optional<String> resourceVersion, final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(deviceId);\n+\n+        if (!config.isModificationEnabled()) {\n+            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n+            TracingHelper.logError(span, errorMsg);\n+            log.debug(errorMsg);\n+            return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_FORBIDDEN));\n+        }\n+\n+        // TODO: To check for the version mismatch.\n+\n+        return processDeleteDevice(tenantId, deviceId, span);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId) {\n+        return registrationService.assertRegistration(tenantId, deviceId);\n+    }\n+\n+    @Override\n+    public Future<RegistrationResult> assertRegistration(final String tenantId, final String deviceId,\n+            final String gatewayId) {\n+        return registrationService.assertRegistration(tenantId, deviceId, gatewayId);\n+    }\n+\n+    private JsonObject convertDevice(final String deviceId, final Device payload) {\n+\n+        if (payload == null) {\n+            return null;\n+        }\n+\n+        final JsonObject data = JsonObject.mapFrom(payload);\n+\n+        return new JsonObject()\n+                .put(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId)\n+                .put(\"data\", data);\n+    }\n+\n+    private Future<DeviceDto> findDevice(final String tenantId, final String deviceId) {\n+        final JsonObject findDeviceQuery = new MongoDbDocumentBuilder()\n+                .withTenantId(tenantId)\n+                .withDeviceId(deviceId)\n+                .create();\n+        final Promise<JsonObject> readDevicePromise = Promise.promise();\n+        mongoClient.findOne(getConfig().getCollectionName(), findDeviceQuery, null, readDevicePromise);\n+        return readDevicePromise.future()\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(ok -> result.mapTo(DeviceDto.class))\n+                        .map(Future::succeededFuture)\n+                        .orElseGet(() -> {\n+                            log.debug(\"Device [{}] not found.\", deviceId);\n+                            return Future.succeededFuture(null);\n+                        }));\n+    }\n+\n+    private Future<RegistrationResult> getDevice(final String tenantId, final String deviceId, final Span span) {\n+\n+        return processReadDevice(tenantId, deviceId, span)\n+                .compose(result -> Future.succeededFuture(RegistrationResult.from(result.getStatus(),\n+                        convertDevice(deviceId, result.getPayload()), result.getCacheDirective().orElse(null))));\n+\n+    }\n+\n+    private boolean ifDuplicateKeyError(final Throwable throwable) {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3NjE3Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394176173", "bodyText": "the format returned by this method seems to be specific to the Mongo DB driver being actually used while the properties of this class seem to be generic. I would therefore propose to move this method to the MongoDbExecutor service which is already tied to the specific MongoDB driver ...", "author": "sophokles73", "createdAt": "2020-03-18T08:30:22Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A POJO for configuring MongoDB properties used by the\n+ * MongoDbBasedRegistrationService.\n+ */\n+public class MongoDbConfigProperties {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbConfigProperties.class);\n+\n+    private String host;\n+    private int port = 0;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutMS = 0;\n+    private int connectTimeoutMS = 0;\n+    private int createIndicesTimeoutMS = 3000;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @return host name\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the MongoDB instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = host;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the ports the MongoDB is listening on.\n+     *\n+     * @return port number\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the ports the MongoDB is listening on.\n+     *\n+     * @param port port number\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        this.port = port;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return database name\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName database name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = dbName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return user name\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username user name\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = username;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return password\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = password;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the MongoDB client.\n+     *\n+     * @return connection string\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the MongoDB client. If set, the connection\n+     * string overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString connection string\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = connectionString;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @param timeout timeout in milliseconds. Setting to zero means the default\n+     *                value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setServerSelectionTimeout(final int timeout) {\n+        this.serverSelectionTimeoutMS = timeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getConnectTimeout() {\n+        return connectTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds to attempt a connection before timing out.\n+     *\n+     * @param connectTimeout timeout in milliseconds. Setting to zero means the default\n+     *                       value of Vert.x should be used.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setConnectTimeout(final int connectTimeout) {\n+        this.connectTimeoutMS = connectTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds to create indices during startup.\n+     *\n+     * @return time in milliseconds\n+     */\n+    public int getCreateIndicesTimeout() {\n+        return createIndicesTimeoutMS;\n+    }\n+\n+    /**\n+     * Sets the time in milliseconds that the startup will try to create indices\n+     * during startup.\n+     *\n+     * @param timeout timeout in milliseconds.\n+     * @return This instance for setter chaining.\n+     */\n+    public MongoDbConfigProperties setCreateIndicesTimeout(final int timeout) {\n+        this.createIndicesTimeoutMS = timeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the properties of this instance in a JsonObject suitable for\n+     * initializing a Vertx MongoClient object. Note: if the connectionString is\n+     * set, it will override all other connection settings.\n+     *\n+     * @return MongoDB client config object\n+     */\n+    public JsonObject asMongoClientConfigJson() {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3NjYxOQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394176619", "bodyText": "I don't think that there is a tenant being created, is there?", "author": "sophokles73", "createdAt": "2020-03-18T08:31:14Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbCallExecutor.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.utils;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbConfigProperties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.mongodb.MongoSocketException;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+\n+/**\n+ * Utility for vertx mongodb client access.\n+ */\n+public final class MongoDbCallExecutor {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbCallExecutor.class);\n+\n+    private final MongoClient mongoClient;\n+    private final MongoDbConfigProperties mongoDbConfig;\n+    private final Vertx vertx;\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param vertx         The Vert.x instance to use.\n+     * @param mongoDbConfig The mongodb configuration properties to use.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     */\n+    public MongoDbCallExecutor(final Vertx vertx, final MongoDbConfigProperties mongoDbConfig) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+        this.mongoDbConfig = Objects.requireNonNull(mongoDbConfig);\n+        final JsonObject mongoConfigJson = this.mongoDbConfig.asMongoClientConfigJson();\n+        this.mongoClient = MongoClient.createShared(vertx, mongoConfigJson);\n+    }\n+\n+    /**\n+     * Gets the mongo client.\n+     *\n+     * @return The mongo client.\n+     */\n+    public MongoClient getMongoClient() {\n+        return mongoClient;\n+    }\n+\n+    /**\n+     * Creates mongodb collection index. Wrapper of {@link #createIndex(String, JsonObject, IndexOptions, Handler)}\n+     *\n+     * @param collectionName The name of the collection of documents.\n+     * @param keys           The keys to be indexed.\n+     * @param options        The options used to configure index, which is optional.\n+     * @return A succeeded Future if the tenant creation is successful,", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3Nzk5Mg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394177992", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-03-18T08:33:50Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.utils;\n+\n+import org.eclipse.hono.util.RegistrationConstants;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * Utility class for building Json documents for mongodb.\n+ */\n+public class MongoDbDocumentBuilder {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3ODI4OQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394178289", "bodyText": "document()? There is nothing being created here ..", "author": "sophokles73", "createdAt": "2020-03-18T08:34:30Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.utils;\n+\n+import org.eclipse.hono.util.RegistrationConstants;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * Utility class for building Json documents for mongodb.\n+ */\n+public class MongoDbDocumentBuilder {\n+\n+    private final JsonObject document = new JsonObject();\n+\n+    /**\n+     * Sets the json object with the given tenant id.\n+     *\n+     * @param tenantId The tenant id.\n+     * @return a reference to this for fluent use.\n+     */\n+    public MongoDbDocumentBuilder withTenantId(final String tenantId) {\n+        document.put(RegistrationConstants.FIELD_PAYLOAD_TENANT_ID, tenantId);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the json object with the given device id.\n+     *\n+     * @param deviceId The device id.\n+     * @return a reference to this for fluent use.\n+     */\n+    public MongoDbDocumentBuilder withDeviceId(final String deviceId) {\n+        document.put(RegistrationConstants.FIELD_PAYLOAD_DEVICE_ID, deviceId);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the json object.\n+     * \n+     * @return the json document.\n+     */\n+    public JsonObject create() {", "originalCommit": "09027c05d2210e26042e5ec4970233e64ad1fbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d57334af3e86b922f8f5a9de5fe145d1415ced6", "url": "https://github.com/eclipse/hono/commit/6d57334af3e86b922f8f5a9de5fe145d1415ced6", "message": "[#1679] Refactor by extending AbstractRegistrationService so that it can be easily tested.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-19T08:58:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzA1OQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394897059", "bodyText": "this method is not necessary, vert.x will invoke init with the vert.x instance and the event-loop context during deployment of the verticle. So, instead, you should implement the init method accordingly ...", "author": "sophokles73", "createdAt": "2020-03-19T09:37:45Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -114,6 +95,30 @@ public void setConfig(final MongoDbBasedRegistrationConfigProperties config) {\n         this.config = Objects.requireNonNull(config);\n     }\n \n+    /**\n+     * Sets the Vert.x instance to deploy the service to.\n+     *\n+     * @param vertx The vertx instance.\n+     * @throws NullPointerException if vertx is {@code null}.\n+     */\n+    @Autowired\n+    public void setVertx(final Vertx vertx) {", "originalCommit": "6d57334af3e86b922f8f5a9de5fe145d1415ced6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkzOTc4Ng==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394939786", "bodyText": "So, instead, you should implement the init method accordingly ...\n\nDo you mean something like below.\n    @Override\n    public void init(final Vertx vertx, final Context context) {\n        this.vertx = vertx;\n    }\n\n    @Override\n    public Vertx getVertx() {\n        return vertx;\n    }", "author": "kaniyan", "createdAt": "2020-03-19T10:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjgwMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r395672802", "bodyText": "@sophokles73 I have pushed the changes except the above one and regarding indices. Would you mind taking a look again?", "author": "kaniyan", "createdAt": "2020-03-20T14:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2Mzk0MA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396463940", "bodyText": "@Sophokles When you said implement the init method accordingly, is it as below?\n@Override\n   public void init(final Vertx vertx, final Context context) {\n     this.vertx = Objects.requireNonNull(vertx);\n   }\n\nOr should I create a vertx instance with the given vertx properties inside the init method?\n@Override\n   public void init(final Vertx vertx, final Context context) {\n     this.vertx = Vertx.vertx(vertxProperties().configureVertx(new VertxOptions()));\n   }\n\nWould you mind giving some more insights for me?", "author": "kaniyan", "createdAt": "2020-03-23T13:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNTIxOA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396515218", "bodyText": "The former", "author": "sophokles73", "createdAt": "2020-03-23T14:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzUxNw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394897517", "bodyText": "there seems to be a parameter missing", "author": "sophokles73", "createdAt": "2020-03-19T09:38:29Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -285,15 +290,14 @@ private boolean isDuplicateKeyError(final Throwable throwable) {\n                         Optional.of(device.getVersion())))\n                 .recover(error -> {\n                     if (isDuplicateKeyError(error)) {\n-                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId(),\n-                                device.getTenantId(), error);\n+                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId());", "originalCommit": "6d57334af3e86b922f8f5a9de5fe145d1415ced6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxMzAzNg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394913036", "bodyText": "My bad, I will update it.", "author": "kaniyan", "createdAt": "2020-03-19T10:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5NzUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5Nzg2Nw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394897867", "bodyText": "why don't you want to log the exception anymore?", "author": "sophokles73", "createdAt": "2020-03-19T09:39:03Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -285,15 +290,14 @@ private boolean isDuplicateKeyError(final Throwable throwable) {\n                         Optional.of(device.getVersion())))\n                 .recover(error -> {\n                     if (isDuplicateKeyError(error)) {\n-                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId(),\n-                                device.getTenantId(), error);\n+                        log.debug(\"Device [{}] already exists for the tenant [{}]\", device.getDeviceId());\n                         TracingHelper.logError(span, String.format(\"Device [%s] already exists for the tenant [%s]\",\n                                 device.getDeviceId(), device.getTenantId()));\n                         return Future.succeededFuture(\n                                 OperationResult.empty(HttpURLConnection.HTTP_CONFLICT));\n                     } else {\n                         log.error(\"Error adding device [{}] for the tenant [{}]\", device.getDeviceId(),\n-                                device.getTenantId(), error);\n+                                device.getTenantId());", "originalCommit": "6d57334af3e86b922f8f5a9de5fe145d1415ced6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxODA5Ng==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394918096", "bodyText": "In the logs, the entire stack traces are getting logged. Since it is also being logged in span, I removed it here. If you think its better to have it there, I could add it again.", "author": "kaniyan", "createdAt": "2020-03-19T10:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5Nzg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0MzIyMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r394943222", "bodyText": "The tracing need not be always enabled. For better debugging, it is better to have the error there. I will add it again.", "author": "kaniyan", "createdAt": "2020-03-19T10:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5Nzg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTEwMA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396245100", "bodyText": "what if the client context doesn't contain a certificate?", "author": "sophokles73", "createdAt": "2020-03-23T07:07:11Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -134,4 +149,48 @@ public static CacheDirective getCacheDirective(final int cacheMaxAge) {\n     public static String getUniqueIdentifier() {\n         return UUID.randomUUID().toString();\n     }\n+\n+    /**\n+     * Gets the certificate of the device to be provisioned from the client context.\n+     *\n+     * @param tenantId The tenant to which the device belongs.\n+     * @param authId The authentication identifier.\n+     * @param clientContext The client context that can be used to get the X.509 certificate \n+     *                      of the device to be provisioned.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n+     *             implementation should log (error) events on this span and it may set tags and use this span \n+     *             as the parent for any spans created in this method.\n+     * @return the certificate of the device to be provisioned.\n+     * @throws NullPointerException if any of the parameters except span is {@code null}.\n+     * @throws ClientErrorException if error getting the certificate from the given client context.\n+     */\n+    public static X509Certificate getCertificateFromClientContext(\n+            final String tenantId,\n+            final String authId,\n+            final JsonObject clientContext,\n+            final Span span) throws ClientErrorException {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(authId);\n+        Objects.requireNonNull(clientContext);\n+\n+        try {\n+            final byte[] bytes = clientContext.getBinary(CredentialsConstants.FIELD_CLIENT_CERT);", "originalCommit": "1abdf43952626e15971225e044b495bb8bab34dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4OTMzNA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396289334", "bodyText": "@sophokles73 I just pulled up the already existing code to a utility class and didn't go through the details inside the method assuming that it has been already checked. How about adding a null check and throwing IllegalArgumentException saying that the certificate is not available?", "author": "kaniyan", "createdAt": "2020-03-23T08:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTEwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMzcyMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396413722", "bodyText": "that would only make sense if the client has a chance of preventing it to be thrown. For that, it would need to check for the presence of the JSON property, right? That, however, is what we are trying to encapsulate here, isn't it?\nHow about returning a Future<Optional<X509Certificate>> and let the client only process the result if it is not empty?", "author": "sophokles73", "createdAt": "2020-03-23T12:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0NTEwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwOTgwMw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396409803", "bodyText": "IMHO a link to the resource where the connection string format is defined would be helpful ...", "author": "sophokles73", "createdAt": "2020-03-23T12:21:04Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.PortConfigurationHelper;\n+\n+/**\n+ * A POJO for configuring mongodb properties used by the\n+ * {@link org.eclipse.hono.deviceregistry.mongodb.service.MongoDbBasedRegistrationService}.\n+ */\n+public final class MongoDbConfigProperties {\n+\n+    private static final int DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS = 3000;\n+    private static final int DEFAULT_PORT = 27017;\n+\n+    private String host = \"localhost\";\n+    private int port = DEFAULT_PORT;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutInMs = 0;\n+    private int connectionTimeoutInMs = 0;\n+    private int createIndicesTimeoutInMs = DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @return The host name.\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if host is {@code null}.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = Objects.requireNonNull(host);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the TCP port that the mongodb is listening on.\n+     *\n+     * @return The port number.\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the TCP port that the mongodb is listening on.\n+     * <p>\n+     * The default port value is {@link #DEFAULT_PORT}.\n+     *\n+     * @param port The port number.\n+     * @return A reference to this for fluent use.\n+     * @throws IllegalArgumentException if port &lt; 1000 or port &gt; 65535.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        if (PortConfigurationHelper.isValidPort(port)) {\n+            this.port = port;\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port number\");\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return The database name.\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName The database name\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if dbName is {@code null}.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = Objects.requireNonNull(dbName);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return The user name.\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username The user name.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the username is {@code null}.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = Objects.requireNonNull(username);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return The password.\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if password is {@code null}.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = Objects.requireNonNull(password);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the mongodb client.\n+     *\n+     * @return The connection string.\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the mongodb client. If set, the connection string\n+     * overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]", "originalCommit": "1abdf43952626e15971225e044b495bb8bab34dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NjY1OA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396566658", "bodyText": "Done.", "author": "kaniyan", "createdAt": "2020-03-23T16:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwOTgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMDM2Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396410363", "bodyText": "plaess document the default value as well", "author": "sophokles73", "createdAt": "2020-03-23T12:22:07Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.PortConfigurationHelper;\n+\n+/**\n+ * A POJO for configuring mongodb properties used by the\n+ * {@link org.eclipse.hono.deviceregistry.mongodb.service.MongoDbBasedRegistrationService}.\n+ */\n+public final class MongoDbConfigProperties {\n+\n+    private static final int DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS = 3000;\n+    private static final int DEFAULT_PORT = 27017;\n+\n+    private String host = \"localhost\";\n+    private int port = DEFAULT_PORT;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutInMs = 0;\n+    private int connectionTimeoutInMs = 0;\n+    private int createIndicesTimeoutInMs = DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @return The host name.\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if host is {@code null}.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = Objects.requireNonNull(host);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the TCP port that the mongodb is listening on.\n+     *\n+     * @return The port number.\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the TCP port that the mongodb is listening on.\n+     * <p>\n+     * The default port value is {@link #DEFAULT_PORT}.\n+     *\n+     * @param port The port number.\n+     * @return A reference to this for fluent use.\n+     * @throws IllegalArgumentException if port &lt; 1000 or port &gt; 65535.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        if (PortConfigurationHelper.isValidPort(port)) {\n+            this.port = port;\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port number\");\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return The database name.\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName The database name\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if dbName is {@code null}.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = Objects.requireNonNull(dbName);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return The user name.\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username The user name.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the username is {@code null}.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = Objects.requireNonNull(username);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return The password.\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if password is {@code null}.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = Objects.requireNonNull(password);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the mongodb client.\n+     *\n+     * @return The connection string.\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the mongodb client. If set, the connection string\n+     * overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString The connection string.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the connectionString is {@code null}.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = Objects.requireNonNull(connectionString);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *", "originalCommit": "1abdf43952626e15971225e044b495bb8bab34dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzYzMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396523632", "bodyText": "I have mentioned that in the setter method and now I will add that to the getter method too.", "author": "kaniyan", "createdAt": "2020-03-23T15:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMDM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NDE0Mg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400844142", "bodyText": "and what is the default value of the mongodb client?", "author": "sophokles73", "createdAt": "2020-03-31T11:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMDM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMDYyMQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396410621", "bodyText": "please document the default value and its semantics as well", "author": "sophokles73", "createdAt": "2020-03-23T12:22:35Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.PortConfigurationHelper;\n+\n+/**\n+ * A POJO for configuring mongodb properties used by the\n+ * {@link org.eclipse.hono.deviceregistry.mongodb.service.MongoDbBasedRegistrationService}.\n+ */\n+public final class MongoDbConfigProperties {\n+\n+    private static final int DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS = 3000;\n+    private static final int DEFAULT_PORT = 27017;\n+\n+    private String host = \"localhost\";\n+    private int port = DEFAULT_PORT;\n+    private String dbName;\n+    private String username;\n+    private String password;\n+    private String connectionString;\n+    private int serverSelectionTimeoutInMs = 0;\n+    private int connectionTimeoutInMs = 0;\n+    private int createIndicesTimeoutInMs = DEFAULT_CREATE_INDICES_TIMEOUT_IN_MS;\n+\n+    /**\n+     * Gets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @return The host name.\n+     */\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    /**\n+     * Sets the name or literal IP address of the host the mongodb instance is\n+     * running on.\n+     *\n+     * @param host host name or IP address\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if host is {@code null}.\n+     */\n+    public MongoDbConfigProperties setHost(final String host) {\n+        this.host = Objects.requireNonNull(host);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the TCP port that the mongodb is listening on.\n+     *\n+     * @return The port number.\n+     */\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    /**\n+     * Sets the TCP port that the mongodb is listening on.\n+     * <p>\n+     * The default port value is {@link #DEFAULT_PORT}.\n+     *\n+     * @param port The port number.\n+     * @return A reference to this for fluent use.\n+     * @throws IllegalArgumentException if port &lt; 1000 or port &gt; 65535.\n+     */\n+    public MongoDbConfigProperties setPort(final int port) {\n+        if (PortConfigurationHelper.isValidPort(port)) {\n+            this.port = port;\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port number\");\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the database name.\n+     *\n+     * @return The database name.\n+     */\n+    public String getDbName() {\n+        return dbName;\n+    }\n+\n+    /**\n+     * Sets the database name.\n+     *\n+     * @param dbName The database name\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if dbName is {@code null}.\n+     */\n+    public MongoDbConfigProperties setDbName(final String dbName) {\n+        this.dbName = Objects.requireNonNull(dbName);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the user name used for authentication.\n+     *\n+     * @return The user name.\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Sets the user name used for authentication.\n+     *\n+     * @param username The user name.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the username is {@code null}.\n+     */\n+    public MongoDbConfigProperties setUsername(final String username) {\n+        this.username = Objects.requireNonNull(username);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the password used for authentication.\n+     *\n+     * @return The password.\n+     */\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    /**\n+     * Sets the password used for authentication.\n+     *\n+     * @param password the password\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if password is {@code null}.\n+     */\n+    public MongoDbConfigProperties setPassword(final String password) {\n+        this.password = Objects.requireNonNull(password);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the connection string for the mongodb client.\n+     *\n+     * @return The connection string.\n+     */\n+    public String getConnectionString() {\n+        return connectionString;\n+    }\n+\n+    /**\n+     * Sets the connection string for the mongodb client. If set, the connection string\n+     * overrides the other connection settings. Format:\n+     * mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n+     *\n+     * @param connectionString The connection string.\n+     * @return A reference to this for fluent use.\n+     * @throws NullPointerException if the connectionString is {@code null}.\n+     */\n+    public MongoDbConfigProperties setConnectionString(final String connectionString) {\n+        this.connectionString = Objects.requireNonNull(connectionString);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time in milliseconds that the mongo driver will wait to select a\n+     * server for an operation before raising an error.\n+     *\n+     * @return The server selection timeout in milliseconds.\n+     */\n+    public int getServerSelectionTimeout() {\n+        return serverSelectionTimeoutInMs;\n+    }\n+\n+    /**\n+     * Sets the timeout in milliseconds that the mongo driver will wait to select a server \n+     * for an operation before raising an error.\n+     * <p>\n+     * When this property is set to 0, the default value of Vert.x should be used.\n+     * \n+     * @param serverSelectionTimeoutInMs The server selection timeout in milliseconds.\n+     * @return A reference to this for fluent use.\n+     * @throws IllegalArgumentException if the timeout is set to &lt;= 0.\n+     */\n+    public MongoDbConfigProperties setServerSelectionTimeout(final int serverSelectionTimeoutInMs) {\n+        if (serverSelectionTimeoutInMs <= 0) {\n+            throw new IllegalArgumentException(\"server selection timeout must be greater than zero\");\n+        }\n+        this.serverSelectionTimeoutInMs = serverSelectionTimeoutInMs;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the timeout in milliseconds to attempt a connection before timing out.\n+     *", "originalCommit": "1abdf43952626e15971225e044b495bb8bab34dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396411485", "bodyText": "do we need an explicit version if we already have the last updated timestamp?", "author": "sophokles73", "createdAt": "2020-03-23T12:24:05Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * TODO.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_VERSION, required = true)\n+    protected String version;\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_UPDATED_ON, required = true)\n+    @HonoTimestamp\n+    protected Instant updatedOn;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     * \n+     * @return The version of the document or {@code null} if not set.\n+     */\n+    public final String getVersion() {", "originalCommit": "1abdf43952626e15971225e044b495bb8bab34dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyOTg2NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396429865", "bodyText": "The version is mapped to Etags and also used to verify them.", "author": "kaniyan", "createdAt": "2020-03-23T12:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzMzQyNA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396433424", "bodyText": "I know, that's why I am asking. We can simply use the last updated timestamp as the version ...", "author": "sophokles73", "createdAt": "2020-03-23T13:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNDY1Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396514653", "bodyText": "I guess that is as unique as the UUID. In that case, we can use it.", "author": "kaniyan", "createdAt": "2020-03-23T14:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NjU5OQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396596599", "bodyText": "Neither the version nor the timestamp are nor need to be unique. Their only purpose is to serve as a reference for implementing optimistic locking for specific DTO instances.", "author": "sophokles73", "createdAt": "2020-03-23T16:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzOTQ0Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396639443", "bodyText": "May be I should have added more info instead of just mentioning it to be unique. It need not be unique always and it could be reused. My point was in order to have a strong validator, the RFC spec suggests that it should be unique across all versions of all representations associated with a particular resource over time. My concern was, what if a resource has been updated more than one time within a very short span of time lets say a millisecond (eg. Automated scripts to update resources). I think this could be effectively handled by also making use of the nanoseconds as below.\nfinal String version = String.format(\"%d-%d\", lastUpdatedOn.toEpochMilli(), lastUpdatedOn.getNano())", "author": "kaniyan", "createdAt": "2020-03-23T17:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzMTU1OQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396931559", "bodyText": "good point :-) no matter how fine the resolution of the timestamp used will be, we might still run into the problem of having two updates occurring at (almost) the same time ... based on that it is probably better to keep the strictly increasing sequence number as the version. Thanks for pointing that out \ud83d\udc4d", "author": "sophokles73", "createdAt": "2020-03-24T06:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NzUwNQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400147505", "bodyText": "@sophokles73 I have used now an increasing sequence number as the version and also implemented other comments. I have rebased with the master and pushed the changes now. Last 3 commits are the new ones for review. Would you mind taking a look again?", "author": "kaniyan", "createdAt": "2020-03-30T12:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjk4MQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396416981", "bodyText": "I believe this can be done more elegantly using recursion, can't it?", "author": "sophokles73", "createdAt": "2020-03-23T12:34:27Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbCallExecutor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.mongodb.utils;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.config.MongoDbConfigProperties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.mongodb.MongoSocketException;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.mongo.IndexOptions;\n+import io.vertx.ext.mongo.MongoClient;\n+\n+/**\n+ * Utility class for Vert.x mongodb client access.\n+ */\n+public final class MongoDbCallExecutor {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MongoDbCallExecutor.class);\n+\n+    private final MongoDbConfigProperties config;\n+    private final MongoClient mongoClient;\n+    private final Vertx vertx;\n+\n+    /**\n+     * Creates an instance of the {@link MongoDbCallExecutor}.\n+     *\n+     * @param vertx         The Vert.x instance to use.\n+     * @param config The mongodb configuration properties to use.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     */\n+    public MongoDbCallExecutor(final Vertx vertx, final MongoDbConfigProperties config) {\n+        this.vertx = Objects.requireNonNull(vertx);\n+        this.config = Objects.requireNonNull(config);\n+        this.mongoClient = MongoClient.createShared(vertx, getMongoClientConfigAsJson());\n+    }\n+\n+    /**\n+     * Gets the mongo client.\n+     *\n+     * @return The mongo client.\n+     */\n+    public MongoClient getMongoClient() {\n+        return mongoClient;\n+    }\n+\n+    /**\n+     * Creates mongodb collection index. Wrapper of {@link #createIndex(String, JsonObject, IndexOptions, Handler)}\n+     *\n+     * @param collectionName The name of the collection of documents.\n+     * @param keys           The keys to be indexed.\n+     * @param options        The options used to configure index, which is optional.\n+     * @return  A future indicating the outcome of the indices creation operation.\n+     */\n+    public Future<Void> createCollectionIndex(final String collectionName, final JsonObject keys,\n+                                              final IndexOptions options) {\n+        final Promise<Void> indexCreationPromise = Promise.promise();\n+        createIndex(collectionName, keys, options, res -> {\n+            if (res.succeeded()) {\n+                indexCreationPromise.complete();\n+            } else if (res.cause() instanceof MongoSocketException) {\n+                log.info(\"Create indices failed, wait for retry, cause:\", res.cause());\n+                vertx.setTimer(this.config.getCreateIndicesTimeout(),\n+                        timer -> createIndex(collectionName, keys, options, res2 -> {\n+                            if (res2.succeeded()) {\n+                                indexCreationPromise.complete();\n+                            } else if (res2.cause() instanceof MongoSocketException) {\n+                                log.info(\"Create indices failed, wait for second retry, cause:\", res2.cause());\n+                                vertx.setTimer(this.config.getCreateIndicesTimeout(),\n+                                        timer2 -> createIndex(collectionName, keys, options, res3 -> {\n+                                            if (res3.succeeded()) {\n+                                                indexCreationPromise.complete();\n+                                            } else {\n+                                                log.error(\"Error creating index\", res3.cause());\n+                                                indexCreationPromise.fail(res3.cause());\n+                                            }\n+                                        }));\n+                            } else {\n+                                log.error(\"Error creating index\", res2.cause());\n+                                indexCreationPromise.fail(res2.cause());\n+                            }\n+                        }));\n+            } else {\n+                log.error(\"Error creating index\", res.cause());\n+                indexCreationPromise.fail(res.cause());\n+            }\n+        });", "originalCommit": "1abdf43952626e15971225e044b495bb8bab34dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyODM1OA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396428358", "bodyText": "This is the contribution code from the hub and the next step is making optimisations as you suggested.", "author": "kaniyan", "createdAt": "2020-03-23T12:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzMzgxNw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396433817", "bodyText": "I assume you have made a note to your journal so that you don't forget it ;-)", "author": "sophokles73", "createdAt": "2020-03-23T13:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzNDYyMw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r396434623", "bodyText": "sure :-)", "author": "kaniyan", "createdAt": "2020-03-23T13:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMjc4NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401702784", "bodyText": "@sophokles73 As we discussed above, I have now refactored the index creation code using recursion and pushed the changes.", "author": "kaniyan", "createdAt": "2020-04-01T15:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjk4MQ=="}], "type": "inlineReview"}, {"oid": "4988fbfead555a25b1f12e83fa0ff4f8c7c1079a", "url": "https://github.com/eclipse/hono/commit/4988fbfead555a25b1f12e83fa0ff4f8c7c1079a", "message": "[#1679] Pull up utility methods.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-30T12:13:42Z", "type": "forcePushed"}, {"oid": "d6e0e0da429f323b5d72df723e6e4478ac3e78b7", "url": "https://github.com/eclipse/hono/commit/d6e0e0da429f323b5d72df723e6e4478ac3e78b7", "message": "[#1679] Pull up utility methods.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-30T12:17:24Z", "type": "forcePushed"}, {"oid": "781582769bcf075bd813bdc4d499d26fa200c518", "url": "https://github.com/eclipse/hono/commit/781582769bcf075bd813bdc4d499d26fa200c518", "message": "[#1679] Pull up utility methods.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-30T12:33:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyODMzOA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400228338", "bodyText": "why is it a bad request if the client context does not contain a certificate? Maybe the adapter doesn't want to support auto provisioning?", "author": "sophokles73", "createdAt": "2020-03-30T14:18:28Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedDeviceBackend.java", "diffHunk": "@@ -161,23 +159,23 @@ public MongoDbBasedDeviceBackend(\n                 .compose(result -> {\n                     if (result.getStatus() == HttpURLConnection.HTTP_NOT_FOUND\n                             && isAutoProvisioningEnabled(type, clientContext)) {\n-                        try {\n-                            final X509Certificate cert = DeviceRegistryUtils\n-                                    .getCertificateFromClientContext(tenantId, authId, clientContext, span);\n-                            return provisionDevice(tenantId, cert, span)\n-                                    .compose(r -> {\n-                                        if (r.isError()) {\n-                                            TracingHelper.logError(span, r.getPayload());\n-                                            return Future.succeededFuture(\n-                                                    createErrorCredentialsResult(r.getStatus(), r.getPayload()));\n-                                        } else {\n-                                            return getNewCredentials(tenantId, authId, span);\n-                                        }\n-                                    });\n-                        } catch (final ClientErrorException e) {\n-                            return Future\n-                                    .succeededFuture(createErrorCredentialsResult(e.getErrorCode(), e.getMessage()));\n-                        }\n+                        return DeviceRegistryUtils\n+                                .getCertificateFromClientContext(tenantId, authId, clientContext, span)\n+                                .compose(optionalCert -> optionalCert\n+                                        .map(ok -> provisionDevice(tenantId, optionalCert.get(), span)\n+                                                .compose(r -> {\n+                                                    if (r.isError()) {\n+                                                        TracingHelper.logError(span, r.getPayload());\n+                                                        return Future.succeededFuture(\n+                                                                createErrorCredentialsResult(r.getStatus(),\n+                                                                        r.getPayload()));\n+                                                    } else {\n+                                                        return getNewCredentials(tenantId, authId, span);\n+                                                    }\n+                                                }))\n+                                        .orElse(Future.succeededFuture(\n+                                                createErrorCredentialsResult(HttpURLConnection.HTTP_BAD_REQUEST,\n+                                                        \"Not able to get the certificate from the client context\"))));", "originalCommit": "4ba0c1a41d79c75dadb2871dea78513e1ce82211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2ODYyMQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400268621", "bodyText": "I see the point. If the client context does not contain a certificate, instead of BAD_REQUEST, I will pass the original result which is HTTP_NOT_FOUND as below.\norElse(Future.succeededFuture(result)));", "author": "kaniyan", "createdAt": "2020-03-30T15:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyODMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMDMwMw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400230303", "bodyText": "this just means that the adapter doesn't support auto provisioning, right? So, FMPOV this should result in\nreturn Optional.empty();", "author": "sophokles73", "createdAt": "2020-03-30T14:21:08Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -160,22 +159,26 @@ public static String getUniqueIdentifier() {\n      * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n      *             implementation should log (error) events on this span and it may set tags and use this span \n      *             as the parent for any spans created in this method.\n-     * @return the certificate of the device to be provisioned.\n+     * @return A future indicating the outcome of the operation. If the operation succeeds, the\n+     *         retrieved certificate is returned. Else {@link Optional#empty()} is returned.\n      * @throws NullPointerException if any of the parameters except span is {@code null}.\n-     * @throws ClientErrorException if error getting the certificate from the given client context.\n      */\n-    public static X509Certificate getCertificateFromClientContext(\n+    public static Future<Optional<X509Certificate>> getCertificateFromClientContext(\n             final String tenantId,\n             final String authId,\n             final JsonObject clientContext,\n-            final Span span) throws ClientErrorException {\n+            final Span span) {\n \n         Objects.requireNonNull(tenantId);\n         Objects.requireNonNull(authId);\n         Objects.requireNonNull(clientContext);\n \n         try {\n             final byte[] bytes = clientContext.getBinary(CredentialsConstants.FIELD_CLIENT_CERT);\n+            if (bytes == null) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"The client context doesn't contain a certificate for tenant [%s]\", tenantId));", "originalCommit": "4ba0c1a41d79c75dadb2871dea78513e1ce82211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NDMzNQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400254335", "bodyText": "I am not deep into this auto-provisioning topic. As per my understanding, we are checking first if  auto-provisioning is enabled using isAutoProvisioningEnabled(...). If it is enabled, then  getCertificateFromClientContext(...) is being invoked. Since it is already enabled, I thought  that the client context should return a certificate and hence I made it so.\nI will replace it with  return Optional.empty();", "author": "kaniyan", "createdAt": "2020-03-30T14:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMDMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTI3Nw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400231277", "bodyText": "this means that the adapter supports auto provisioning but the data is malformed. Thus, this should result in a failed future with a ClientErrorException(400), right?", "author": "sophokles73", "createdAt": "2020-03-30T14:22:21Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/util/DeviceRegistryUtils.java", "diffHunk": "@@ -184,13 +187,13 @@ public static X509Certificate getCertificateFromClientContext(\n                         String.format(\"Subject DN of the client certificate does not match authId [%s] for tenant [%s]\",\n                                 authId, tenantId));\n             }\n-            return cert;\n+            return Future.succeededFuture(Optional.of(cert));\n         } catch (final CertificateException | ClassCastException | IllegalArgumentException error) {\n             final String errorMessage = String.format(\n                     \"Error getting certificate from client context with authId [%s] for tenant [%s]\", authId, tenantId);\n             LOG.error(errorMessage, error);\n             TracingHelper.logError(span, errorMessage, error);\n-            throw new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST, error.getMessage());\n+            return Future.succeededFuture(Optional.empty());", "originalCommit": "4ba0c1a41d79c75dadb2871dea78513e1ce82211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4NzY5NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400287694", "bodyText": "I have fixed now this utility method for getting a certificate from the client context according to your comments and pushed the commit.", "author": "kaniyan", "createdAt": "2020-03-30T15:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjI0OQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400236249", "bodyText": "you really want to compute this every time this method is invoked?", "author": "sophokles73", "createdAt": "2020-03-30T14:28:27Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -43,22 +45,56 @@ public BaseDto() {\n     }\n \n     /**\n-     * Gets the version of the document.\n+     * Gets the version number of the document.\n      * \n+     * @return The version number of the document or {@code null} if not set.\n+     */\n+    public final long getVersionNo() {\n+        return versionNo;\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     *\n      * @return The version of the document or {@code null} if not set.\n      */\n+    @JsonIgnore\n     public final String getVersion() {\n-        return version;\n+        return String.format(\"%d\", versionNo);", "originalCommit": "a4e3e3489742683602fead8171cf92c6cbdee32d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNjAyNw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400326027", "bodyText": "As I thought through it, FMPOV normally the read operations in device registry are performed more frequently than the write operations. Every time type casting or formatting during read operation is not so efficient. So, I would replace the data type of the version to String. The typecasting could be performed during add/update operations. WDYT?", "author": "kaniyan", "createdAt": "2020-03-30T16:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzMzgxNw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400833817", "bodyText": "Why do we need a String valued property at all? Why can't we just use the long?", "author": "sophokles73", "createdAt": "2020-03-31T11:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0OTg0Ng==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400849846", "bodyText": "In many device registration operations, Future<OperationResult> is being returned. When an operation is successful OperationResult.ok(...) is being used for that and it expects the version to be String.\nOperationResult<T> ok(final int status, final T payload,\n            final Optional<CacheDirective> directive, final Optional<String> resourceVersion)", "author": "kaniyan", "createdAt": "2020-03-31T11:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwNzkyOQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400907929", "bodyText": "I see. So let's go with a String valued version field then and do the serialization as part of the setter, ok?", "author": "sophokles73", "createdAt": "2020-03-31T13:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNzU3Nw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400237577", "bodyText": "is it helpful to use a Long here instead of a String, i.e. does the Mongo DB driver update this field automatically or do you need to set this value manually whenever you save a modified object instance?", "author": "sophokles73", "createdAt": "2020-03-30T14:30:02Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/BaseDto.java", "diffHunk": "@@ -14,23 +14,25 @@\n \n import java.time.Instant;\n import java.util.Objects;\n+import java.util.Optional;\n \n import org.eclipse.hono.annotation.HonoTimestamp;\n import org.eclipse.hono.util.RegistryManagementConstants;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n /**\n- * TODO.\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in mongodb.\n  */\n @JsonIgnoreProperties(ignoreUnknown = true)\n @JsonInclude(JsonInclude.Include.NON_NULL)\n public abstract class BaseDto {\n \n     @JsonProperty(value = RegistryManagementConstants.FIELD_VERSION, required = true)\n-    protected String version;\n+    protected Long versionNo;", "originalCommit": "a4e3e3489742683602fead8171cf92c6cbdee32d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzE3Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400297173", "bodyText": "Since it is a sequence number, I thought its safe and better to use the Long instead of storing as a String. Mongo DB driver update this field automatically based on the value store in the database. But the version number is being incremented manually before the database update.", "author": "kaniyan", "createdAt": "2020-03-30T15:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NTM4NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400845384", "bodyText": "I agree and I wonder why we have a getVersion method that returns a String. Do we need such a method?\nDoes the null value have any special semantics for this property?", "author": "sophokles73", "createdAt": "2020-03-31T11:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MDE4Mw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400860183", "bodyText": "In many device registration operations, Future<OperationResult> is being returned. When an operation is successful OperationResult.ok(...) is being used for that and it expects the version to be String.\nOperationResult<T> ok(final int status, final T payload,\n            final Optional<CacheDirective> directive, final Optional<String> resourceVersion)\n\nFor that purpose, getVersion() is needed and it returns a String.", "author": "kaniyan", "createdAt": "2020-03-31T12:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjQ3Nw==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400862477", "bodyText": "Does the null value have any special semantics for this property?\n\nActually not, since we always store the version eventhough the incoming requests do not contain any version.", "author": "kaniyan", "createdAt": "2020-03-31T12:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNzU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MTI0NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400241245", "bodyText": "this doesn't seem to account for the tenant given but seems to count the number of elements in the collection for all tenants, doesn't it?", "author": "sophokles73", "createdAt": "2020-03-30T14:34:46Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -364,15 +317,32 @@ private boolean isDuplicateKeyError(final Throwable throwable) {\n         return updateDevicePromise.future()\n                 .map(updateResult -> {\n                     if (updateResult.getDocMatched() == 0) {\n-                        TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceId));\n+                        TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceDto.getDeviceId()));\n                         return OperationResult.empty(HttpURLConnection.HTTP_NOT_FOUND);\n                     } else {\n                         return OperationResult.ok(\n                                 HttpURLConnection.HTTP_NO_CONTENT,\n-                                Id.of(deviceId),\n+                                Id.of(deviceDto.getDeviceId()),\n                                 Optional.empty(),\n                                 Optional.of(deviceDto.getVersion()));\n                     }\n                 });\n     }\n+\n+    private <T> Future<T> isMaxDevicesLimitReached(final String tenantId) {\n+        final Promise<Long> findExistingNoOfDevicesPromise = Promise.promise();\n+        mongoClient.count(config.getCollectionName(), new JsonObject(), findExistingNoOfDevicesPromise);", "originalCommit": "781582769bcf075bd813bdc4d499d26fa200c518", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzM4OQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400297389", "bodyText": "My bad. I fixed it now.", "author": "kaniyan", "createdAt": "2020-03-30T15:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MTI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NjcxMg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400846712", "bodyText": "did you?", "author": "sophokles73", "createdAt": "2020-03-31T11:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MTI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NzYzMA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400857630", "bodyText": "I fixed it locally. I didn't push it yet. I will include in the next commit and push it.", "author": "kaniyan", "createdAt": "2020-03-31T12:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MTI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjU0NA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400246544", "bodyText": "my understanding of this code is that we first load the entity, then check if the resource version is correct, then modify the entity and then write it back to the database. I am no expert in Mongo but I would assume that you can simply invoke an update operation providing filter criteria in order to do that in one go, can't you?\nThis approach here also seems to have the problem that after you retrieved the device and verified that the version matches, another update could take place which changes the version before you are writing back the object, or does the Mongo DB driver prevent this somehow?", "author": "sophokles73", "createdAt": "2020-03-30T14:41:36Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -179,28 +171,11 @@ public void stop(final Promise<Void> stopPromise) {\n         Objects.requireNonNull(deviceId);\n         Objects.requireNonNull(resourceVersion);\n \n-        if (!config.isModificationEnabled()) {\n-            final String errorMsg = String.format(\"Modification is disabled for tenant [%s]\", tenantId);\n-            TracingHelper.logError(span, errorMsg);\n-            log.debug(errorMsg);\n-            return Future.succeededFuture(Result.from(HttpURLConnection.HTTP_FORBIDDEN, OperationResult::empty));\n-        }\n-\n-        return findDevice(tenantId, deviceId)\n-                .compose(deviceDto -> {\n-                    if (deviceDto == null) {\n-                        final String errorMsg = String.format(\"Device [%s] not found.\", deviceId);\n-                        log.debug(errorMsg);\n-                        TracingHelper.logError(span, errorMsg);\n-                        return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_NOT_FOUND));\n-                    }\n-                    if (!deviceDto.isVersionMatch(resourceVersion)) {\n-                        log.debug(\"Resource Version mismatch\");\n-                        TracingHelper.logError(span, \"Resource Version mismatch\");\n-                        return Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_PRECON_FAILED));\n-                    }\n-                    return processUpdateDevice(tenantId, deviceId, deviceDto, span);\n-                });\n+        return MongoDbServiceUtils.isAllowedToModify(config, tenantId)\n+                .compose(ok -> findDevice(tenantId, deviceId))\n+                .compose(deviceDto -> MongoDbServiceUtils.checkResourceVersion(deviceDto, resourceVersion))\n+                .compose(deviceDto -> processUpdateDevice(tenantId, deviceDto, span))\n+                .recover(error -> Future.succeededFuture(MongoDbServiceUtils.mapErrorToResult(error, span)));", "originalCommit": "781582769bcf075bd813bdc4d499d26fa200c518", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1NzkwOA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400957908", "bodyText": "I see the point regarding another update between the retrieval of the device and updating the retrieved device. I don't see any explicit locking mechanisms with the library that we use to lock more than one transactions. In that case, we can also include  version in the filter criteria for the update. The update will be performed only when the version also matches or no version is available in the request. The current code for retrieval of the device and the version check before performing update operation could be removed.\nIn this approach, when no resource(device) is updated, there are atleast two possible reasons. Once is \"device not found\" and the other is \"resource version mismatch\". In order to report the response code accordingly, a find query need to be executed to retrieve the device followed by version check.\n\nI see. So let's go with a String valued version field then and do the serialization as part of the setter, ok?\n\nPreviously we discussed to make the version in the BaseDto class as String. This approach somehow forces us to declare the version as long. When a request to update a device arrives, it may not contain a version and in that case, we simply update with the given device information and increment the version value by one. In this approach, during the update operation, we don't know what is the version of the resource and hence we cannot manually increment to one unless queried from the database. For that purpose, we could use \"$inc\" operator from MongoDB. Using this, we could instruct the MongoDB to increment the version field by one during update operation. One prerequisite is, that this field should be a number.", "author": "kaniyan", "createdAt": "2020-03-31T14:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk2NjExNg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r400966116", "bodyText": "I guess that is the reason why the example registry uses UUID for the version in the first place :-) A new UUID can be computed independently from the existing version ...\nSo where does this leave us? We stick with the UUID or do you want to use the auto increment feature of MongoDB?", "author": "sophokles73", "createdAt": "2020-03-31T14:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1MTUxMA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401051510", "bodyText": "As  I understood from the gitter chat, we would like to stick to passing the version using String data type. IMHO allowing the version as string and then enforcing that the string should be a valid number doesn't look so nice and also we could avoid the typecasting concerns. Hence I would prefer using UUID.", "author": "kaniyan", "createdAt": "2020-03-31T16:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyOTIyMA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401229220", "bodyText": "Now I use UUID and pushed the corresponding changes. Pls take a look :-)", "author": "kaniyan", "createdAt": "2020-03-31T21:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NjU0NA=="}], "type": "inlineReview"}, {"oid": "95952df5ccd643e279e6e2dd63789d18bd398219", "url": "https://github.com/eclipse/hono/commit/95952df5ccd643e279e6e2dd63789d18bd398219", "message": "[#1679] Use UUID for resource version and minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-03-31T21:34:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3ODMzOQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401378339", "bodyText": "are the params allowed to be null or not (as indicated by the JavaDoc)?", "author": "sophokles73", "createdAt": "2020-04-01T06:16:13Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/DeviceDto.java", "diffHunk": "@@ -44,18 +44,16 @@ public DeviceDto() {\n     /**\n      * @param tenantId The tenant identifier.\n      * @param deviceId The device identifier.\n-     * @param device The device.\n+     * @param device The device information.\n      * @param version The version of tenant to be sent as request header.\n-     * @param updatedOn The date and time of last update.\n      * @throws NullPointerException if any of the parameters except the device are {@code null}\n      */\n-    public DeviceDto(final String tenantId, final String deviceId, final Device device, final long version,\n-            final Instant updatedOn) {\n-        this.tenantId = Objects.requireNonNull(tenantId);\n-        this.deviceId = Objects.requireNonNull(deviceId);\n-        this.device = device;\n-        this.versionNo = version;\n-        this.updatedOn = Objects.requireNonNull(updatedOn);\n+    public DeviceDto(final String tenantId, final String deviceId, final Device device, final String version) {\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+        setDevice(device);\n+        setVersion(version);\n+        setUpdatedOn(Instant.now());", "originalCommit": "95952df5ccd643e279e6e2dd63789d18bd398219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyMzgzMA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401423830", "bodyText": "As indicated by the JavaDoc, the params are not allowed to be null except the device. The checks are being done in the respective setters. Checking for null again in this constructor seemed to me repetitive and hence I have removed it and then retained the JavaDoc.", "author": "kaniyan", "createdAt": "2020-04-01T07:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3ODMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MDYzOQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401380639", "bodyText": "looks like this is the same code as for the delete case, isn't it?", "author": "sophokles73", "createdAt": "2020-04-01T06:22:41Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedRegistrationService.java", "diffHunk": "@@ -304,39 +323,67 @@ private boolean isDuplicateKeyError(final Throwable throwable) {\n                                 Optional.ofNullable(deviceDto.getVersion()))));\n     }\n \n-    private Future<OperationResult<Id>> processUpdateDevice(final String tenantId, final DeviceDto deviceDto,\n-            final Span span) {\n-        final JsonObject updateDeviceQuery = new MongoDbDocumentBuilder()\n+    private Future<OperationResult<Id>> processUpdateDevice(final String tenantId, final String deviceId,\n+            final Device device, final Optional<String> resourceVersion, final Span span) {\n+        final JsonObject updateDeviceQuery = resourceVersion\n+                .map(version -> new MongoDbDocumentBuilder().withVersion(version))\n+                .orElse(new MongoDbDocumentBuilder())\n                 .withTenantId(tenantId)\n-                .withDeviceId(deviceDto.getDeviceId())\n+                .withDeviceId(deviceId)\n                 .document();\n-        final Promise<MongoClientUpdateResult> updateDevicePromise = Promise.promise();\n-        deviceDto.incrementVersionNo();\n-        mongoClient.updateCollection(config.getCollectionName(), updateDeviceQuery,\n-                new JsonObject().put(\"$set\", JsonObject.mapFrom(deviceDto)), updateDevicePromise);\n+        final Promise<JsonObject> updateDevicePromise = Promise.promise();\n+\n+        mongoClient.findOneAndReplace(config.getCollectionName(), updateDeviceQuery,\n+                JsonObject.mapFrom(new DeviceDto(tenantId, deviceId, device, new Versioned<>(device).getVersion())),\n+                updateDevicePromise);\n+\n         return updateDevicePromise.future()\n-                .map(updateResult -> {\n-                    if (updateResult.getDocMatched() == 0) {\n-                        TracingHelper.logError(span, String.format(\"Device [%s] not found.\", deviceDto.getDeviceId()));\n-                        return OperationResult.empty(HttpURLConnection.HTTP_NOT_FOUND);\n-                    } else {\n-                        return OperationResult.ok(\n-                                HttpURLConnection.HTTP_NO_CONTENT,\n-                                Id.of(deviceDto.getDeviceId()),\n-                                Optional.empty(),\n-                                Optional.of(deviceDto.getVersion()));\n-                    }\n-                });\n+                .compose(result -> Optional.ofNullable(result)\n+                        .map(updated -> {\n+                            span.log(String.format(\"successfully updated device [%s]\", deviceId));\n+                            return Future.succeededFuture(OperationResult.ok(\n+                                    HttpURLConnection.HTTP_NO_CONTENT,\n+                                    Id.of(deviceId),\n+                                    Optional.empty(),\n+                                    Optional.of(result.getString(RegistryManagementConstants.FIELD_VERSION))));\n+                        })\n+                        .orElseGet(() -> {\n+                            // If the version is provided in the request, the reason for no update could be\n+                            // that the device is not found or version mismatch.\n+                            if (resourceVersion.isPresent()) {\n+                                return findDevice(tenantId, deviceId)\n+                                        .compose(foundDevice -> checkForVersionMismatchAndFail(deviceId,\n+                                                foundDevice.getVersion(), resourceVersion.get()));\n+                            } else {\n+                                return Future.failedFuture(new ClientErrorException(HttpURLConnection.HTTP_NOT_FOUND,\n+                                        String.format(\"Device [%s] not found.\", deviceId)));\n+                            }\n+                        }));", "originalCommit": "95952df5ccd643e279e6e2dd63789d18bd398219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NDI4OQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401554289", "bodyText": "I have extracted this code to a method and use it.", "author": "kaniyan", "createdAt": "2020-04-01T11:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MDYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjA3Ng==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401382076", "bodyText": "is this field used by the Device Registry Management API types? If not, then I believe it belongs into the MongoDB module as it is implementation specific, isn't it?", "author": "sophokles73", "createdAt": "2020-04-01T06:26:39Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -213,6 +213,10 @@\n      * all devices to authenticate.\n      */\n     public static final String FIELD_ADAPTERS_DEVICE_AUTHENTICATION_REQUIRED = \"device-authentication-required\";\n+    /**\n+     * The name of the JSON property containing the device identifier.\n+     */\n+    public static final String FIELD_DEVICE = \"device\";", "originalCommit": "95952df5ccd643e279e6e2dd63789d18bd398219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NDAzNA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401554034", "bodyText": "I have moved this to the utility class inside the MongoDB module.", "author": "kaniyan", "createdAt": "2020-04-01T11:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNDgyMA==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r402134820", "bodyText": "have you?", "author": "sophokles73", "createdAt": "2020-04-02T08:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MzY0Mg==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r402153642", "bodyText": "I am sorry. I have moved the fields updatedOn and the version and somehow missed this. I have changed now and pushed a commit for it.", "author": "kaniyan", "createdAt": "2020-04-02T08:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjQwOQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401382409", "bodyText": "are these fields used by the Device Registry Management API types? If not, then I believe they belong into the MongoDB module as they are implementation specific, aren't they?", "author": "sophokles73", "createdAt": "2020-04-01T06:27:37Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -271,6 +275,16 @@\n      */\n     public static final String FIELD_TRACING_SAMPLING_MODE_PER_AUTH_ID = \"sampling-mode-per-auth-id\";\n \n+    /**\n+     * The name of the JSON property containing the last modification date and time.\n+     */\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+\n+    /**\n+     * The name of the JSON property containing the version of the tenant or device or credentials information.\n+     */\n+    public static final String FIELD_VERSION = \"version\";", "originalCommit": "95952df5ccd643e279e6e2dd63789d18bd398219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1Mzk3NQ==", "url": "https://github.com/eclipse/hono/pull/1842#discussion_r401553975", "bodyText": "I have moved this to the utility class inside the MongoDB module.", "author": "kaniyan", "createdAt": "2020-04-01T11:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4MjQwOQ=="}], "type": "inlineReview"}, {"oid": "1fe95e1666ea1df48822750e19a15a89bc16c4b0", "url": "https://github.com/eclipse/hono/commit/1fe95e1666ea1df48822750e19a15a89bc16c4b0", "message": "[#1679] Minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-04-01T11:44:32Z", "type": "forcePushed"}, {"oid": "6800e13eb979bdc4dbd8a55752d7ab0224fe95dc", "url": "https://github.com/eclipse/hono/commit/6800e13eb979bdc4dbd8a55752d7ab0224fe95dc", "message": "[#1679] Refactor index creation using recursion.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-04-01T15:22:04Z", "type": "forcePushed"}, {"oid": "28a48c192970a1b4b6a1770544be0686909ec846", "url": "https://github.com/eclipse/hono/commit/28a48c192970a1b4b6a1770544be0686909ec846", "message": "[#1679] Prepare for mongodb based device registry implementation.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-04-02T11:57:28Z", "type": "commit"}, {"oid": "da52f31f782404cf701f5054c19cf99c82163a89", "url": "https://github.com/eclipse/hono/commit/da52f31f782404cf701f5054c19cf99c82163a89", "message": "[#1679] Add utility classes for mongodb based device registry\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>\nAlso-by: Ahmad Almheidat  ahmad.almheidat@bosch-si.com\nAlso-by: Alexander Mack  alexander.mack2@bosch-si.com\nAlso-by: Bala Azhagappan  balasubramanian.azhagappan@bosch-si.com\nAlso-by: Balasubramanian  balasubramanian.azhagappan@bosch-si.com\nAlso-by: Christian Schmid  Christian.Schmid3@bosch-si.com\nAlso-by: Daniel Maier  daniel.maier@bosch-si.com\nAlso-by: Marian B\u00e4uerle  marian.baeuerle@bosch-si.com\nAlso-by: Marko Pascan marko.pascan@bosch-si.com\nAlso-by: Sebastian Poehn  sebastian.poehn@bosch-si.com", "committedDate": "2020-04-02T11:57:28Z", "type": "commit"}, {"oid": "6808fa8e972efd998203c587b50e280be0ec27e1", "url": "https://github.com/eclipse/hono/commit/6808fa8e972efd998203c587b50e280be0ec27e1", "message": "[#1679] Add device registration and management service implementation.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-04-02T11:57:28Z", "type": "commit"}, {"oid": "4e59b31988745f4e61df4f1b1b8fcb5612e2bc30", "url": "https://github.com/eclipse/hono/commit/4e59b31988745f4e61df4f1b1b8fcb5612e2bc30", "message": "[#1679] Pull up a utility method to get the certificate of the device to be provisioned from the client context.\n\n- It also includes minor code improvements and other fixes.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-04-02T11:57:28Z", "type": "commit"}, {"oid": "372ee8e0811cbabbd1ce035df3e1f81c7c0f0c53", "url": "https://github.com/eclipse/hono/commit/372ee8e0811cbabbd1ce035df3e1f81c7c0f0c53", "message": "[#1679] Use UUID for resource version, pull up utility methods and other minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-04-02T11:57:28Z", "type": "commit"}, {"oid": "372ee8e0811cbabbd1ce035df3e1f81c7c0f0c53", "url": "https://github.com/eclipse/hono/commit/372ee8e0811cbabbd1ce035df3e1f81c7c0f0c53", "message": "[#1679] Use UUID for resource version, pull up utility methods and other minor improvements.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-04-02T11:57:28Z", "type": "forcePushed"}]}