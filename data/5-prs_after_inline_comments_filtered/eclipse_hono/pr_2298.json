{"pr_number": 2298, "pr_title": "[#2029] Add Command Router component", "pr_createdAt": "2020-11-13T16:21:16Z", "pr_url": "https://github.com/eclipse/hono/pull/2298", "timeline": [{"oid": "334f109479a4bf6f549e057f9a957f714a4d7f92", "url": "https://github.com/eclipse/hono/commit/334f109479a4bf6f549e057f9a957f714a4d7f92", "message": "[#2029] Add certificate for Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-13T10:34:41Z", "type": "commit"}, {"oid": "8181de43b0a85e51c0a0c729f3467492c7027635", "url": "https://github.com/eclipse/hono/commit/8181de43b0a85e51c0a0c729f3467492c7027635", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-13T16:36:12Z", "type": "forcePushed"}, {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d", "url": "https://github.com/eclipse/hono/commit/2ade679c042a2baf31fe10b165988b1b4be5814d", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-16T06:12:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1Mjk0NQ==", "url": "https://github.com/eclipse/hono/pull/2298#discussion_r523952945", "bodyText": "it doesn't send messages on the event bus, does it?", "author": "sophokles73", "createdAt": "2020-11-16T07:59:59Z", "path": "service-base/src/main/java/org/eclipse/hono/service/commandrouter/DelegatingCommandRouterAmqpEndpoint.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.commandrouter;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.amqp.AbstractDelegatingRequestResponseEndpoint;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CommandRouterConstants;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+\n+/**\n+ * An {@code AmqpEndpoint} for managing command router information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router/\">Command\n+ * Router API</a>. It receives AMQP 1.0 messages representing requests and sends them to an address on the vertx\n+ * event bus for processing. The outcome is then returned to the peer in a response message.", "originalCommit": "2ade679c042a2baf31fe10b165988b1b4be5814d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MzY4OQ==", "url": "https://github.com/eclipse/hono/pull/2298#discussion_r523953689", "bodyText": "based on processSetLastKnownGatewayRequest we should also check targetAddress for null or at least handle a null address accordingly in processSetLastKnownGatewayRequest ...", "author": "sophokles73", "createdAt": "2020-11-16T08:01:41Z", "path": "service-base/src/main/java/org/eclipse/hono/service/commandrouter/DelegatingCommandRouterAmqpEndpoint.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.commandrouter;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.amqp.AbstractDelegatingRequestResponseEndpoint;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CommandRouterConstants;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+\n+/**\n+ * An {@code AmqpEndpoint} for managing command router information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router/\">Command\n+ * Router API</a>. It receives AMQP 1.0 messages representing requests and sends them to an address on the vertx\n+ * event bus for processing. The outcome is then returned to the peer in a response message.\n+ *\n+ * @param <S> The type of service this endpoint delegates to.\n+ */\n+public class DelegatingCommandRouterAmqpEndpoint<S extends CommandRouterService> extends AbstractDelegatingRequestResponseEndpoint<S, ServiceConfigProperties> {\n+\n+    private static final String SPAN_NAME_SET_LAST_GATEWAY = \"set last known gateway\";\n+    private static final String SPAN_NAME_REGISTER_COMMAND_CONSUMER = \"register command consumer\";\n+    private static final String SPAN_NAME_UNREGISTER_COMMAND_CONSUMER = \"unregister command consumer\";\n+\n+    /**\n+     * Creates an endpoint for a service instance.\n+     *\n+     * @param vertx The vert.x instance to use.\n+     * @param service The service to delegate to.\n+     * @throws NullPointerException if any of the parameters is {@code null};\n+     */\n+    public DelegatingCommandRouterAmqpEndpoint(final Vertx vertx, final S service) {\n+        super(vertx, service);\n+    }\n+\n+    @Override\n+    protected Future<Message> handleRequestMessage(final Message requestMessage, final ResourceIdentifier targetAddress,\n+            final SpanContext spanContext) {\n+        Objects.requireNonNull(requestMessage);", "originalCommit": "2ade679c042a2baf31fe10b165988b1b4be5814d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2MzIyMw==", "url": "https://github.com/eclipse/hono/pull/2298#discussion_r523963223", "bodyText": "CacheBasedDeviceConnectionInfo is no longer an instance of ConnectionLifecycle but is an instance of org.eclipse.hono.util.Lifecylce instead ...", "author": "sophokles73", "createdAt": "2020-11-16T08:21:18Z", "path": "services/command-router/src/main/java/org/eclipse/hono/commandrouter/impl/CommandRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,394 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.commandrouter.impl;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.adapter.client.registry.DeviceRegistrationClient;\n+import org.eclipse.hono.adapter.client.util.ServiceClient;\n+import org.eclipse.hono.client.CommandTargetMapper;\n+import org.eclipse.hono.client.ConnectionLifecycle;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.commandrouter.CommandConsumerFactory;\n+import org.eclipse.hono.commandrouter.CommandRouterServiceConfigProperties;\n+import org.eclipse.hono.deviceconnection.infinispan.client.DeviceConnectionInfo;\n+import org.eclipse.hono.service.HealthCheckProvider;\n+import org.eclipse.hono.service.commandrouter.CommandRouterResult;\n+import org.eclipse.hono.service.commandrouter.CommandRouterService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.ConfigurationSupportingVerticle;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.RegistrationAssertion;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Context;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.healthchecks.HealthCheckHandler;\n+import io.vertx.ext.healthchecks.Status;\n+\n+/**\n+ * An implementation of Hono's <em>Command Router</em> API.\n+ */\n+public class CommandRouterServiceImpl extends ConfigurationSupportingVerticle<CommandRouterServiceConfigProperties>\n+        implements CommandRouterService, HealthCheckProvider {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CommandRouterServiceImpl.class);\n+\n+    private DeviceRegistrationClient registrationClient;\n+    private DeviceConnectionInfo deviceConnectionInfo;\n+    private CommandConsumerFactory commandConsumerFactory;\n+    private CommandTargetMapper commandTargetMapper;\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    @Autowired\n+    @Override\n+    public void setConfig(final CommandRouterServiceConfigProperties configuration) {\n+        setSpecificConfig(configuration);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());\n+        this.tracer = Objects.requireNonNull(opentracingTracer);\n+    }\n+\n+    /**\n+     * Sets the client for accessing device connection data.\n+     *\n+     * @param deviceConnectionInfo The client object.\n+     * @throws NullPointerException if deviceConnectionInfo is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDeviceConnectionInfo(final DeviceConnectionInfo deviceConnectionInfo) {\n+        this.deviceConnectionInfo = Objects.requireNonNull(deviceConnectionInfo);\n+    }\n+\n+    /**\n+     * Sets the client to use for accessing the Device Registration service.\n+     *\n+     * @param client The client.\n+     * @throws NullPointerException if the client is {@code null}.\n+     */\n+    @Qualifier(RegistrationConstants.REGISTRATION_ENDPOINT)\n+    @Autowired\n+    public final void setRegistrationClient(final DeviceRegistrationClient client) {\n+        this.registrationClient = Objects.requireNonNull(client);\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating clients to receive commands.\n+     *\n+     * @param factory The factory.\n+     * @throws NullPointerException if factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setCommandConsumerFactory(final CommandConsumerFactory factory) {\n+        this.commandConsumerFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the component for mapping an incoming command to the gateway (if applicable)\n+     * and protocol adapter instance that can handle it.\n+     *\n+     * @param commandTargetMapper The mapper component.\n+     * @throws NullPointerException if commandTargetMapper is {@code null}.\n+     */\n+    @Autowired\n+    public final void setCommandTargetMapper(final CommandTargetMapper commandTargetMapper) {\n+        this.commandTargetMapper = Objects.requireNonNull(commandTargetMapper);\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) throws Exception {\n+\n+        if (registrationClient == null) {\n+            startPromise.fail(new IllegalStateException(\"Device Registration client must be set\"));\n+        } else if (deviceConnectionInfo == null) {\n+            startPromise.fail(new IllegalStateException(\"Device Connection info client must be set\"));\n+        } else {\n+            startServiceClient(registrationClient, \"Device Registration service\");\n+            if (deviceConnectionInfo instanceof ConnectionLifecycle) {", "originalCommit": "2ade679c042a2baf31fe10b165988b1b4be5814d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aadc41f784d60169be5e8fb3c42ef5205229a738", "url": "https://github.com/eclipse/hono/commit/aadc41f784d60169be5e8fb3c42ef5205229a738", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-16T09:38:17Z", "type": "commit"}, {"oid": "aadc41f784d60169be5e8fb3c42ef5205229a738", "url": "https://github.com/eclipse/hono/commit/aadc41f784d60169be5e8fb3c42ef5205229a738", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-11-16T09:38:17Z", "type": "forcePushed"}]}