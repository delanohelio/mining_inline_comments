{"pr_number": 1936, "pr_title": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance", "pr_createdAt": "2020-05-04T05:54:23Z", "pr_url": "https://github.com/eclipse/hono/pull/1936", "timeline": [{"oid": "0818b7d7f144c3d606b2275da26bcfee298bd0e1", "url": "https://github.com/eclipse/hono/commit/0818b7d7f144c3d606b2275da26bcfee298bd0e1", "message": "[#1858] Add 'onlyUpdate' param to setCommandHandlingAdapterInstance.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-05-04T07:45:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3Mjk5MQ==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419272991", "bodyText": "what if any of the params are null?", "author": "sophokles73", "createdAt": "2020-05-04T08:10:05Z", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Cache.java", "diffHunk": "@@ -61,6 +61,19 @@\n      */\n     Future<V> put(K key, V value, long lifespan, TimeUnit lifespanUnit);\n \n+    /**\n+     * Replaces the entry for a key only if currently mapped to a given value.\n+     *\n+     * @param key The key.\n+     * @param oldValue The value to overwrite.\n+     * @param newValue The value to store.\n+     * @param lifespan The lifespan of the entry. A negative value is interpreted as an unlimited lifespan.\n+     * @param lifespanUnit The time unit for the lifespan.\n+     * @return A succeeded future containing a boolean, indicating whether the value was replaced or not.\n+     *         A failed future if the value could not be stored in the cache.\n+     */\n+    Future<Boolean> replace(K key, V oldValue, V newValue, long lifespan, TimeUnit lifespanUnit);", "originalCommit": "0818b7d7f144c3d606b2275da26bcfee298bd0e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2OTAyOA==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419369028", "bodyText": "I've added checks and adapted the javadoc (also for the other methods).", "author": "calohmn", "createdAt": "2020-05-04T11:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI3Mjk5MQ=="}], "type": "inlineReview"}, {"oid": "54a44ceb2dafb88567641894bef3e8467d2ed609", "url": "https://github.com/eclipse/hono/commit/54a44ceb2dafb88567641894bef3e8467d2ed609", "message": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-05-04T09:56:56Z", "type": "forcePushed"}, {"oid": "7cc4db1ac61e44b610ad96bac3b2e5a87dd3535d", "url": "https://github.com/eclipse/hono/commit/7cc4db1ac61e44b610ad96bac3b2e5a87dd3535d", "message": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-05-04T11:26:13Z", "type": "forcePushed"}, {"oid": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae", "url": "https://github.com/eclipse/hono/commit/29c2b7acd8a5fbabb274eedb8e869e1f78061eae", "message": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-05-04T14:45:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNDc5Mg==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419934792", "bodyText": "don't we expect the updateOnly param to be false here?", "author": "sophokles73", "createdAt": "2020-05-05T08:11:13Z", "path": "client/src/test/java/org/eclipse/hono/client/impl/ProtocolAdapterCommandConsumerFactoryImplTest.java", "diffHunk": "@@ -187,7 +187,7 @@ public void testCreateCommandConsumerSucceeds(final VertxTestContext ctx) {\n                 ctx.verify(() -> {\n                     verify(connection).createReceiver(eq(tenantCommandAddress), eq(ProtonQoS.AT_LEAST_ONCE), any(), anyInt(),\n                             eq(false), any());\n-                    verify(devConClient).setCommandHandlingAdapterInstance(eq(deviceId), anyString(), any(), any());\n+                    verify(devConClient).setCommandHandlingAdapterInstance(eq(deviceId), anyString(), any(), anyBoolean(), any());", "originalCommit": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNDkyNg==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419934926", "bodyText": "don't we expect the updateOnly param to be false here?", "author": "sophokles73", "createdAt": "2020-05-05T08:11:28Z", "path": "client/src/test/java/org/eclipse/hono/client/impl/ProtocolAdapterCommandConsumerFactoryImplTest.java", "diffHunk": "@@ -211,7 +211,7 @@ public void testCreateTimeLimitedCommandConsumerSucceeds(final VertxTestContext\n             ctx.verify(() -> {\n                 verify(connection).createReceiver(eq(tenantCommandAddress), eq(ProtonQoS.AT_LEAST_ONCE), any(), anyInt(),\n                         eq(false), any());\n-                verify(devConClient).setCommandHandlingAdapterInstance(eq(deviceId), anyString(), any(), any());\n+                verify(devConClient).setCommandHandlingAdapterInstance(eq(deviceId), anyString(), any(), anyBoolean(), any());", "originalCommit": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjIzMw==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419936233", "bodyText": "how about\nfinal boolean updateOnly = Optional.ofNullable(MessageHelper.getApplicationProperty(request.getApplicationProperties(), MessageHelper.APP_PROPERTY_UPDATE_ONLY, Boolean.class))\n  .orElse(false);", "author": "sophokles73", "createdAt": "2020-05-05T08:14:01Z", "path": "service-base/src/main/java/org/eclipse/hono/service/deviceconnection/DelegatingDeviceConnectionAmqpEndpoint.java", "diffHunk": "@@ -241,6 +241,7 @@ public DelegatingDeviceConnectionAmqpEndpoint(final Vertx vertx, final S service\n         final String deviceId = MessageHelper.getDeviceId(request);\n         final String adapterInstanceId = MessageHelper.getApplicationProperty(request.getApplicationProperties(), MessageHelper.APP_PROPERTY_ADAPTER_INSTANCE_ID, String.class);\n         final Integer lifespanSecondsOrNull = MessageHelper.getApplicationProperty(request.getApplicationProperties(), MessageHelper.APP_PROPERTY_LIFESPAN, Integer.class);\n+        final Boolean updateOnlyOrNull = MessageHelper.getApplicationProperty(request.getApplicationProperties(), MessageHelper.APP_PROPERTY_UPDATE_ONLY, Boolean.class);", "originalCommit": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r419938653", "bodyText": "I think we need to also remove an expired existing value if the adapter instance doesn't match ...", "author": "sophokles73", "createdAt": "2020-05-05T08:18:42Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -128,9 +129,26 @@ public MapBasedDeviceConnectionsConfigProperties getConfig() {\n         final int currentMapSize = adapterInstancesForTenantMap.size();\n         if (currentMapSize < getConfig().getMaxDevicesPerTenant()\n                 || (currentMapSize == getConfig().getMaxDevicesPerTenant() && adapterInstancesForTenantMap.containsKey(deviceId))) {\n-            adapterInstancesForTenantMap.put(deviceId,\n-                    new ExpiringValue<>(createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan)));\n-            result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+            final ExpiringValue<JsonObject> newValue = new ExpiringValue<>(\n+                    createAdapterInstanceIdJson(protocolAdapterInstanceId), getLifespanNanos(lifespan));\n+            if (updateOnly) {\n+                final ExpiringValue<JsonObject> resultingValue = adapterInstancesForTenantMap\n+                        .computeIfPresent(deviceId, (key, oldValue) -> {\n+                            if (protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(oldValue.getValue()))) {\n+                                return newValue;\n+                            } else {\n+                                return oldValue;\n+                            }\n+                        });\n+                if (resultingValue != null && protocolAdapterInstanceId.equals(getAdapterInstanceIdFromJson(resultingValue.getValue()))) {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_NO_CONTENT);\n+                } else {\n+                    result = DeviceConnectionResult.from(HttpURLConnection.HTTP_PRECON_FAILED);\n+                }", "originalCommit": "29c2b7acd8a5fbabb274eedb8e869e1f78061eae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MDE0Nw==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420080147", "bodyText": "@calohmn WDYT?", "author": "sophokles73", "createdAt": "2020-05-05T12:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MzAwMg==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420083002", "bodyText": "Removing an expired entry here is something I don't quite understand - the removal of an expired entry is done under the hood by the Caffeine cache.\nHowever, I've found two other issues here: one (updated lifespan wasn't taken into account) is already fixed (along with an added test), the other (a failed update influences lifespan of existing entry) is something I'm currently working on.", "author": "calohmn", "createdAt": "2020-05-05T12:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjgyOA==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420086828", "bodyText": "But we are using a simple Map here for keeping the data, not a Caffeine Cache, or am I mistaken?", "author": "sophokles73", "createdAt": "2020-05-05T12:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5MTQ0MQ==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420091441", "bodyText": "The adapterInstancesForTenantMap is a Caffeine Cache under the hood (using cache.asMap()).", "author": "calohmn", "createdAt": "2020-05-05T13:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMDk4MA==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420110980", "bodyText": "I see", "author": "sophokles73", "createdAt": "2020-05-05T13:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE0ODkwMQ==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420148901", "bodyText": "2nd issue is fixed now.", "author": "calohmn", "createdAt": "2020-05-05T14:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzODY1Mw=="}], "type": "inlineReview"}, {"oid": "31052fb230de6bf05b0f2d457b2070338954ba26", "url": "https://github.com/eclipse/hono/commit/31052fb230de6bf05b0f2d457b2070338954ba26", "message": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-05-05T12:07:49Z", "type": "forcePushed"}, {"oid": "b5641b3c7c8fd008beda6e9c2ffdb120026437d4", "url": "https://github.com/eclipse/hono/commit/b5641b3c7c8fd008beda6e9c2ffdb120026437d4", "message": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-05-05T14:21:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDE2NA==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420574164", "bodyText": "My understanding is that we do not want to change an existing value's lifespan on reading, right? Does currentDuration contain the object's remaining lifetime based on the lifetime determined at creation/update time?", "author": "sophokles73", "createdAt": "2020-05-06T06:41:18Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -159,13 +171,13 @@ public long expireAfterCreate(final String key, final ExpiringValue<JsonObject>\n                     @Override\n                     public long expireAfterUpdate(final String key, final ExpiringValue<JsonObject> value,\n                             final long currentTime, final long currentDuration) {\n-                        return Long.MAX_VALUE;\n+                        return value.getLifespanNanos();\n                     }\n \n                     @Override\n                     public long expireAfterRead(final String key, final ExpiringValue<JsonObject> value,\n                             final long currentTime, final long currentDuration) {\n-                        return Long.MAX_VALUE;\n+                        return currentDuration;", "originalCommit": "b5641b3c7c8fd008beda6e9c2ffdb120026437d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NjQxNQ==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420576415", "bodyText": "Yes. As the javadoc states: The {@code currentDuration} may be returned to not modify the expiration time.. So using Long.MAX_VALUE was wrong here.", "author": "calohmn", "createdAt": "2020-05-06T06:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDI4NQ==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420574285", "bodyText": "java.util.function.Predicate ?", "author": "sophokles73", "createdAt": "2020-05-06T06:41:36Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/deviceconnection/MapBasedDeviceConnectionService.java", "diffHunk": "@@ -300,6 +312,22 @@ private String getAdapterInstanceIdFromJson(final JsonObject adapterInstanceIdJs\n         return expiringValue != null ? expiringValue.getValue() : null;\n     }\n \n+    /**\n+     * Replaces the entry for a key only if the matching function applied to the current value returns {@code true}.\n+     */\n+    private static <V, K> boolean replaceIfMatching(final ConcurrentMap<K, V> map, final K key, final V newValue,\n+            final Function<? super V, Boolean> matchingFunction) {", "originalCommit": "b5641b3c7c8fd008beda6e9c2ffdb120026437d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3OTgxOQ==", "url": "https://github.com/eclipse/hono/pull/1936#discussion_r420579819", "bodyText": "Yes, that's better.", "author": "calohmn", "createdAt": "2020-05-06T06:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDI4NQ=="}], "type": "inlineReview"}, {"oid": "79542f6e090d35f8492e15ec03cfc2c275a8bbe7", "url": "https://github.com/eclipse/hono/commit/79542f6e090d35f8492e15ec03cfc2c275a8bbe7", "message": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-05-06T06:54:50Z", "type": "commit"}, {"oid": "79542f6e090d35f8492e15ec03cfc2c275a8bbe7", "url": "https://github.com/eclipse/hono/commit/79542f6e090d35f8492e15ec03cfc2c275a8bbe7", "message": "[#1858] Add 'updateOnly' param to setCommandHandlingAdapterInstance.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-05-06T06:54:50Z", "type": "forcePushed"}]}