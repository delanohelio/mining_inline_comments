{"pr_number": 1828, "pr_title": "[#1272] Implement new Device Connection API methods", "pr_createdAt": "2020-03-11T12:41:28Z", "pr_url": "https://github.com/eclipse/hono/pull/1828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjExOA==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390946118", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-03-11T12:48:52Z", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+/**\n+ * A versioned entry.\n+ * \n+ * @param <T> The payload type.\n+ */\n+public class Versioned<T> {", "originalCommit": "0f22270cce271059d9003e3d48adf421458d03bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzI2OQ==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390947269", "bodyText": "Since the HotrodCache class uses a org.infinispan.client.hotrod.RemoteCache field now (instead of org.infinispan.commons.api.BasicCache), this mock had to be changed.\nUnfortunately, the org.infinispan.client.hotrod.RemoteCache has a dependency on the infinispan-query-dsl module (for the retrieveEntriesByQuery method) and without having that module integrated, creating the mock here will fail.\nTherefore I've added infinispan-query-dsl as a test-only dependency (CQ still needed for that). As alternative option, I only see removing this test class.", "author": "calohmn", "createdAt": "2020-03-11T12:50:56Z", "path": "client-device-connection-infinispan/src/test/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCacheTest.java", "diffHunk": "@@ -152,10 +161,149 @@ void testPutFails(final VertxTestContext ctx) {\n             }));\n     }\n \n-    private BasicCache<Object, Object> givenAConnectedCache() {\n+    /**\n+     * Verifies that a request to remove a cache entry with a version\n+     * results in the value being removed in the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testRemoveWithVersionSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.removeWithVersion(anyString(), anyLong())).thenReturn(true);\n+        cache.connect()\n+                .compose(c -> c.removeWithVersion(\"key\", 1L))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).removeWithVersion(\"key\", 1L);\n+                        assertThat(v).isTrue();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to remove a cache entry with a version\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testRemoveWithVersionFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.removeWithVersion(anyString(), anyLong())).thenThrow(new IllegalStateException());\n+        cache.connect()\n+                .compose(c -> c.removeWithVersion(\"key\", 1L))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).removeWithVersion(\"key\", 1L);\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a cache entry along with its version\n+     * results in the value being retrieved from the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetWithVersionSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        @SuppressWarnings(\"unchecked\")\n+        final MetadataValue<Object> metadataValue = mock(MetadataValue.class);\n+        final Object value = \"testValue\";\n+        when(metadataValue.getValue()).thenReturn(value);\n+        final long version = 1L;\n+        when(metadataValue.getVersion()).thenReturn(version);\n+        when(grid.getWithMetadata(anyString())).thenReturn(metadataValue);\n+        cache.connect()\n+                .compose(c -> c.getWithVersion(\"key\"))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getWithMetadata(\"key\");\n+                        assertThat(v.getVersion()).isEqualTo(version);\n+                        assertThat(v.getValue()).isEqualTo(value);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a cache entry along with its version\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetWithVersionFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.getWithMetadata(anyString())).thenThrow(new IllegalStateException());\n+        cache.connect()\n+                .compose(c -> c.getWithVersion(\"key\"))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getWithMetadata(\"key\");\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a map of all cache entries with given keys\n+     * results in the map value being retrieved from the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetAllSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        final Map<Object, Object> mapValue = new HashMap<>();\n+        when(grid.getAll(anySet())).thenReturn(mapValue);\n+        final Set<String> keys = Set.of(\"key\");\n+        cache.connect()\n+                .compose(c -> c.getAll(keys))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getAll(keys);\n+                        assertThat(v).isEqualTo(mapValue);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a map of all cache entries with given keys\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetAllFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.getAll(anySet())).thenThrow(new IllegalStateException());\n+        final Set<String> keys = Set.of(\"key\");\n+        cache.connect()\n+                .compose(c -> c.getAll(keys))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getAll(keys);\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    private org.infinispan.client.hotrod.RemoteCache<Object, Object> givenAConnectedCache() {\n+        final Configuration configuration = mock(Configuration.class);\n         @SuppressWarnings(\"unchecked\")\n-        final BasicCache<Object, Object> result = mock(BasicCache.class);\n-        when(remoteCacheManager.getCache(anyString())).thenReturn(result);\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> result = mock(org.infinispan.client.hotrod.RemoteCache.class);", "originalCommit": "0f22270cce271059d9003e3d48adf421458d03bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66147524277f3efefad19f2c67040ae81b90b6ea", "url": "https://github.com/eclipse/hono/commit/66147524277f3efefad19f2c67040ae81b90b6ea", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-11T14:46:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkxNg==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391659916", "bodyText": "the last known gateway id ?", "author": "sophokles73", "createdAt": "2020-03-12T14:29:16Z", "path": "services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java", "diffHunk": "@@ -139,4 +139,28 @@ public void testGetLastKnownGatewayForDeviceNotFound(final VertxTestContext ctx)\n             ctx.completeNow();\n         }));\n     }\n+\n+    /**\n+     * Verifies that the last known gateway id can be set via the <em>setCommandHandlingAdapterInstance</em> operation.", "originalCommit": "66147524277f3efefad19f2c67040ae81b90b6ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5MDMwNQ==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391790305", "bodyText": "Fixed.", "author": "calohmn", "createdAt": "2020-03-12T17:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkxNg=="}], "type": "inlineReview"}, {"oid": "48812c147d8ec2a2ade479217cf30df9aa96caf4", "url": "https://github.com/eclipse/hono/commit/48812c147d8ec2a2ade479217cf30df9aa96caf4", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-12T17:46:56Z", "type": "commit"}, {"oid": "48812c147d8ec2a2ade479217cf30df9aa96caf4", "url": "https://github.com/eclipse/hono/commit/48812c147d8ec2a2ade479217cf30df9aa96caf4", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-12T17:46:56Z", "type": "forcePushed"}]}