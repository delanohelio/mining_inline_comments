{"pr_number": 2189, "pr_title": "[#1960] Implementing status property for device registrations.", "pr_createdAt": "2020-09-17T13:50:06Z", "pr_url": "https://github.com/eclipse/hono/pull/2189", "timeline": [{"oid": "926511c335791fbb71a9650fe377087d113669e6", "url": "https://github.com/eclipse/hono/commit/926511c335791fbb71a9650fe377087d113669e6", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-09-18T08:02:36Z", "type": "forcePushed"}, {"oid": "024ad73fefed865751d22b56e47946fe79ffab30", "url": "https://github.com/eclipse/hono/commit/024ad73fefed865751d22b56e47946fe79ffab30", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-09-18T09:02:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzMzg2Nw==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r494133867", "bodyText": "What about JavaDocs for these?", "author": "dejanb", "createdAt": "2020-09-24T08:30:03Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(value = FIELD_VERSION, required = true)\n+    private String version;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)\n+    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)\n+    @HonoTimestamp\n+    private Instant creationTime;\n+\n+    @JsonProperty(value = FIELD_UPDATED_ON, required = true)\n+    @HonoTimestamp\n+    private Instant updatedOn;\n+\n+    private T data;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new DTO object holding the given data with its creation time initialized at <pre>now</pre>.\n+     *\n+     * @param data The data object\n+     */\n+    public BaseDto(final T data) {\n+        this(Instant.now(), null, data);\n+    }\n+\n+    /**\n+     * Creates a new DTO object.\n+     *\n+     * @param creationTime The time when the data object was created.\n+     * @param updatedOn The time when the data object was most recently updated.\n+     * @param data The data object.\n+     */\n+    public BaseDto(final Instant creationTime, final Instant updatedOn, final T data) {\n+        this.creationTime = creationTime;\n+        this.updatedOn = updatedOn;\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     *\n+     * @return The version of the document.\n+     */\n+    public final String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Sets the version of the document.\n+     *\n+     * @param version The version of the document or {@code null} if not set.\n+     * @throws NullPointerException if the version is {@code null}.\n+     */\n+    public final void setVersion(final String version) {\n+        this.version = Objects.requireNonNull(version);\n+    }\n+\n+    /**\n+     * Gets the date and time of last modification.\n+     *\n+     * @return The date and time of last modification.\n+     */\n+    public final Instant getUpdatedOn() {\n+        return updatedOn;\n+    }\n+\n+    /**\n+     * Sets the date and time of last modification.\n+     *\n+     * @param updatedOn The date and time of last modification.\n+     * @throws NullPointerException if the last modification date and time is {@code null}.\n+     */\n+    public final void setUpdatedOn(final Instant updatedOn) {\n+        this.updatedOn = Objects.requireNonNull(updatedOn);\n+    }\n+\n+    public Instant getLastUpdate() {", "originalCommit": "024ad73fefed865751d22b56e47946fe79ffab30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIzNDkwNQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r494234905", "bodyText": "Updated docs.", "author": "fkaltner", "createdAt": "2020-09-24T11:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzMzg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzNjAzOQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r494136039", "bodyText": "Can this be a more generic class, that could probably be reused for other implementation? I don't see anything specific to File implementation.", "author": "dejanb", "createdAt": "2020-09-24T08:33:31Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -538,12 +551,33 @@ public String toString() {\n      */\n     private String generateDeviceId(final String tenantId) {\n \n-        final ConcurrentMap<String, Versioned<Device>> devices = getDevicesForTenant(tenantId);\n+        final ConcurrentMap<String, FileBasedDeviceDto> devices = getDevicesForTenant(tenantId);\n         String tempDeviceId;\n         do {\n             tempDeviceId = UUID.randomUUID().toString();\n         } while (devices.containsKey(tempDeviceId));\n         return tempDeviceId;\n     }\n \n+    private static final class FileBasedDeviceDto extends BaseDto<Versioned<Device>> {", "originalCommit": "024ad73fefed865751d22b56e47946fe79ffab30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0MjA3OQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r494142079", "bodyText": "Actually there is a small, specific part: the call to getValue() in final DeviceWithStatus deviceWithStatus = new DeviceWithStatus(getData().getValue());\nThe base class BaseDto from which this class is derived was envisioned as the generic class which is reused by other implementations.", "author": "fkaltner", "createdAt": "2020-09-24T08:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzNjAzOQ=="}], "type": "inlineReview"}, {"oid": "9307d19843e2529c90e3ce0abd57c6d097607b59", "url": "https://github.com/eclipse/hono/commit/9307d19843e2529c90e3ce0abd57c6d097607b59", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-09-25T08:39:14Z", "type": "forcePushed"}, {"oid": "5a77d35480ff029a8d5f8f41deb810370a867398", "url": "https://github.com/eclipse/hono/commit/5a77d35480ff029a8d5f8f41deb810370a867398", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-09-29T08:08:40Z", "type": "forcePushed"}, {"oid": "2f7d39016477f0b3ae26c86af4f15d5c37f47993", "url": "https://github.com/eclipse/hono/commit/2f7d39016477f0b3ae26c86af4f15d5c37f47993", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-09-29T12:30:47Z", "type": "forcePushed"}, {"oid": "337c3193dfce1294b123f1da33e128e3d85cf789", "url": "https://github.com/eclipse/hono/commit/337c3193dfce1294b123f1da33e128e3d85cf789", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-09-29T13:54:48Z", "type": "forcePushed"}, {"oid": "1ce0f3d4b2a44325174d13edbf95f6ae65dd8014", "url": "https://github.com/eclipse/hono/commit/1ce0f3d4b2a44325174d13edbf95f6ae65dd8014", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-09-29T14:00:20Z", "type": "forcePushed"}, {"oid": "fa4babfa962986fc5123a4c432313ec1309472d4", "url": "https://github.com/eclipse/hono/commit/fa4babfa962986fc5123a4c432313ec1309472d4", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-05T14:53:16Z", "type": "forcePushed"}, {"oid": "aedbda1806521d612ac98ddf849a95eeca10d57d", "url": "https://github.com/eclipse/hono/commit/aedbda1806521d612ac98ddf849a95eeca10d57d", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-05T15:20:04Z", "type": "forcePushed"}, {"oid": "225bffae5df807fa4d8a9afa319e0ea8e7dc64d5", "url": "https://github.com/eclipse/hono/commit/225bffae5df807fa4d8a9afa319e0ea8e7dc64d5", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-06T07:28:21Z", "type": "forcePushed"}, {"oid": "cbef61b521732623eecc82ddc5731adf0c71df43", "url": "https://github.com/eclipse/hono/commit/cbef61b521732623eecc82ddc5731adf0c71df43", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-06T12:14:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNTE3MQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500935171", "bodyText": "IMHO we should not decide on this here but let subclasses decide whether they want to ignore unknown properties or not.", "author": "sophokles73", "createdAt": "2020-10-07T11:24:46Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)", "originalCommit": "cbef61b521732623eecc82ddc5731adf0c71df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwNzMxMg==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501607312", "bodyText": "I think the reason why this property is there (this is also only migrated from the old BaseDto class) is: all of our MongoDb collections have an \"_id\" property. When reading data from MongoDb JsonObject.mapTo() is called which then would fail without that annotation.\nHence allowing sub-classes to decide on their own would be possible, but all DTOs (except the one for the file-based implementation would require adding at least @JsonIgnoreProperties(\"_id\") or we introduce a \"MongoDbBaseDto\" from which the other MongoDb DTOs are derived which I would do rather than duplicating this in every DTO.", "author": "fkaltner", "createdAt": "2020-10-08T10:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNTE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNTg1MA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500935850", "bodyText": "setting required = true has no meaning when annotating a property. If you want an exception to be thrown if this JSON property is missing, then you need to use the constructor for setting the property.", "author": "sophokles73", "createdAt": "2020-10-07T11:26:03Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(value = FIELD_VERSION, required = true)", "originalCommit": "cbef61b521732623eecc82ddc5731adf0c71df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2NDkxMA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500964910", "bodyText": "Good point, wasn't aware of that. Basically I moved the code of the old BaseDto (org.eclipse.hono.deviceregistry.mongodb.model.BaseDto) where this was already in place. The old BaseDto also allowed to create an instance even if those properties were null.\nSo I guess required = True can be removed. @kaniyan am I right about this?", "author": "fkaltner", "createdAt": "2020-10-07T12:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAzNjczNg==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501036736", "bodyText": "The classes that extend abstract BaseDto such as TenantDto and DeviceDto uses BaseDto.setVersion(...) in their constructors to set the version. We can remove the required = True here.", "author": "kaniyan", "createdAt": "2020-10-07T14:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNTg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNjAwNw==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500936007", "bodyText": "see above", "author": "sophokles73", "createdAt": "2020-10-07T11:26:19Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(value = FIELD_VERSION, required = true)\n+    private String version;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)\n+    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)\n+    @HonoTimestamp\n+    private Instant creationTime;\n+\n+    @JsonProperty(value = FIELD_UPDATED_ON, required = true)", "originalCommit": "cbef61b521732623eecc82ddc5731adf0c71df43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0MjQ1OA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500942458", "bodyText": "New classes usually only sport the current year in the header ...", "author": "sophokles73", "createdAt": "2020-10-07T11:39:00Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceWithStatus.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation", "originalCommit": "cbef61b521732623eecc82ddc5731adf0c71df43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0NTA5Mg==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500945092", "bodyText": "why don't we use aggregation instead of inheritance here? Wouldn't that improve decoupling and would also allow to use the Device class as-is (apart from moving the status property, of course)?", "author": "sophokles73", "createdAt": "2020-10-07T11:44:00Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceWithStatus.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.device;\n+\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Device Information.\n+ */\n+@JsonIgnoreProperties()\n+@JsonInclude(value = Include.NON_NULL)\n+public class DeviceWithStatus extends Device {", "originalCommit": "cbef61b521732623eecc82ddc5731adf0c71df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYxNjQ1OQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501616459", "bodyText": "We could use aggregation here having two properties in DeviceWithStatus: a device property (of type Device) and a status property (of type Status). Since the \"status\" JSON property needs to be on the same level as the other properties of a device, we would need to add @JsonUnwrapped on the device property.", "author": "fkaltner", "createdAt": "2020-10-08T10:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0NTA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyMjYwMw==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501622603", "bodyText": "After doing some more research I found the allowGetters field in the JsonIgnoreProperties annotation. I think this is exactly what we need and actually could make the second class obsolete.\nI'll take a closer look if I can put this to work.", "author": "fkaltner", "createdAt": "2020-10-08T10:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0NTA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5NDk0NQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501694945", "bodyText": "Actually this worked and turned out to be the better solution in my opinion.", "author": "fkaltner", "createdAt": "2020-10-08T12:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0NTA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTY5MA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500951690", "bodyText": "it looks like this method is suppose to be used with arbitrary types of data, e.g. Device, Tenant, CommonCredential, right? If so, then the field name used here should not be specific to the Device class, shouldn't it?", "author": "sophokles73", "createdAt": "2020-10-07T11:56:01Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -56,6 +57,36 @@ public static MongoDbDocumentBuilder builder() {\n         return new MongoDbDocumentBuilder();\n     }\n \n+    /**\n+     * Creates a MongoDb update document for the update of the given DTO.\n+     *\n+     * @param baseDto The DTO for which an update should be generated.\n+     *\n+     * @return a reference to this for fluent use.\n+     */\n+    public MongoDbDocumentBuilder forUpdateOf(final BaseDto<?> baseDto) {\n+        final JsonObject updates = new JsonObject();\n+\n+        if (baseDto.getData() != null) {\n+            updates.put(MongoDbDeviceRegistryUtils.FIELD_DEVICE, JsonObject.mapFrom(baseDto.getData()));", "originalCommit": "cbef61b521732623eecc82ddc5731adf0c71df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAyOTg4MQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501029881", "bodyText": "Yes, that was why I put it there. Right now the other DTOs do not make use of the status yet which is why I left it like this for now.\nI implemented reading the property name view reflection from the @JsonProperty annotation of the getData method to make it generic.", "author": "fkaltner", "createdAt": "2020-10-07T13:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mjg2MA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500952860", "bodyText": "I see value in having this kind of factory methods in the subclasses in order to know in which context we want to create the instance. But in this class, a simple constructor accepting the parameters that are managed by this abstract class would suffice.", "author": "sophokles73", "createdAt": "2020-10-07T11:58:18Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(value = FIELD_VERSION, required = true)\n+    private String version;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)\n+    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)\n+    @HonoTimestamp\n+    private Instant creationTime;\n+\n+    @JsonProperty(value = FIELD_UPDATED_ON, required = true)\n+    @HonoTimestamp\n+    private Instant updatedOn;\n+\n+    private T data;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>creation of a new</b> persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for creating a new entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forCreation(final Supplier<T> supplier, final P data, final String version) {", "originalCommit": "cbef61b521732623eecc82ddc5731adf0c71df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4ODc3Ng==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r500988776", "bodyText": "In the end the idea was to encapsulate the timestamp setting for subclasses: forCreation() makes sure that the created timestamp ist set while forUpdate() takes care of the updated timestamp. Since both methods take the same arguments I think this can't be implemented using a constructor?", "author": "fkaltner", "createdAt": "2020-10-07T12:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mjg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYxMDE4NA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501610184", "bodyText": "why not? simply use two parameters in the constructor, one for the createdOn timestamp and another for the updatedOn timestamp, or wouldn't that work?", "author": "sophokles73", "createdAt": "2020-10-08T10:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mjg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3NDEzOQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501774139", "bodyText": "Sure! :-) But, what I meant was: then it's the subclass' responsibility again to properly set the timestamps as they will pass both parameters to the constructor.", "author": "fkaltner", "createdAt": "2020-10-08T14:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mjg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4NTEyNA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r502285124", "bodyText": "I created a draft PR to illustrate what I mean (and to verify that I got you right): 9120c2e\nPersonally I do not see why having the constructor is better, besides that the implementation of the factory methods in BaseDto is slightly more complex as it uses generics. The downside is though that now setting the proper created and updated timestamps is done in the subclasses meaning it is duplicated. Also the FileBasedDto cannot reuse the static factory methods of the base class.", "author": "fkaltner", "createdAt": "2020-10-09T08:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mjg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0NDAyNw==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501044027", "bodyText": "Do we need this here? FMPOV Device has no property named status defined. In order to include the status we have a new class DeviceWithStatus. If needed, then RegistryManagementConstants.FIELD_STATUS could be used instead of the string literal \"status\".", "author": "kaniyan", "createdAt": "2020-10-07T14:09:55Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -33,6 +34,7 @@\n  * Device Information.\n  */\n @JsonInclude(value = Include.NON_NULL)\n+@JsonIgnoreProperties({ \"status\" })", "originalCommit": "cbef61b521732623eecc82ddc5731adf0c71df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4NjE1MQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r501086151", "bodyText": "The reason why I added this is: if a client sends an update via a PUT request and uses copy&paste from a previous GET request to get the body's content it will have the status property in it. In order to make this convenient and not requiring the status property to be removed I set it to ignore here.\nI'll use the literal as suggested.", "author": "fkaltner", "createdAt": "2020-10-07T15:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0NDAyNw=="}], "type": "inlineReview"}, {"oid": "9c34194ea5331343513ba233adf79f0d07300c6c", "url": "https://github.com/eclipse/hono/commit/9c34194ea5331343513ba233adf79f0d07300c6c", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-13T09:54:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIwMzExNA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r505203114", "bodyText": "I think it may good to avoid null cases here. Having an empty object object is better IMHO than null.", "author": "ctron", "createdAt": "2020-10-15T06:32:51Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -63,7 +65,7 @@\n \n     @JsonProperty(RegistryManagementConstants.FIELD_STATUS)\n     @JsonInclude(value = Include.NON_EMPTY)\n-    private Status status = new Status();\n+    private Status status;", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyNjc4Mw==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r512026783", "bodyText": "The reason why I removed this is that @JsonInclude(value = Include.NON_EMPTY) does only work with null values for Status objects (unless we would write a custom serializer).\nSince I wanted the status property not to show up at all in the JSON responses instead of an empty status property as below\n   ...\n   \"status\": {}\n   ...\n\nI decided to remove that line.", "author": "fkaltner", "createdAt": "2020-10-26T14:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIwMzExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyMTQ5NQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511821495", "bodyText": "are these methods supposed to be overridden? If not, I would suggest to make them final ...", "author": "sophokles73", "createdAt": "2020-10-26T09:28:34Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Device.java", "diffHunk": "@@ -280,4 +283,23 @@ public String getMapper() {\n         return mapper;\n     }\n \n+    /**\n+     * Sets the registry internal status information of this device.\n+     *\n+     * @param status The status information to be set or {@code null} if there is none.\n+     * @return A reference to this for fluent use.\n+     */\n+    public Device setStatus(final Status status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the registry internal status information of this device.\n+     *\n+     * @return The registry internal status information or {@code null} if there is none.\n+     */\n+    public Status getStatus() {", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNTA0Mg==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511825042", "bodyText": "Will this constructor ever be invoked from anywhere but a subclass?", "author": "sophokles73", "createdAt": "2020-10-26T09:33:56Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(FIELD_VERSION)\n+    private String version;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)\n+    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)\n+    @HonoTimestamp\n+    private Instant creationTime;\n+\n+    @JsonProperty(FIELD_UPDATED_ON)\n+    @HonoTimestamp\n+    private Instant updatedOn;\n+\n+    private T data;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NTM3NA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r512075374", "bodyText": "Not right now, so I made it final.", "author": "fkaltner", "createdAt": "2020-10-26T15:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNTA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNjUxNw==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511826517", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-10-26T09:36:19Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(FIELD_VERSION)\n+    private String version;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)\n+    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)\n+    @HonoTimestamp\n+    private Instant creationTime;\n+\n+    @JsonProperty(FIELD_UPDATED_ON)\n+    @HonoTimestamp\n+    private Instant updatedOn;\n+\n+    private T data;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>creation of a new</b> persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for creating a new entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forCreation(final Supplier<T> supplier, final P data, final String version) {\n+        final T dto = supplier.get();\n+        dto.setCreationTime(Instant.now());\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO for <b>updating</b> a persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forUpdate(final Supplier<T> supplier, final P data, final String version) {\n+        final T dto = supplier.get();\n+        dto.setUpdatedOn(Instant.now());\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO to be returned by a read operation.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param created The instant when the object was created.\n+     * @param updated The instant of the most recent update.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forRead(final Supplier<T> supplier, final P data, final Instant created, final Instant updated, final String version) {\n+        final T dto = supplier.get();\n+        dto.setCreationTime(created);\n+        dto.setUpdatedOn(updated);\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     *\n+     * @return The version of the document.\n+     */\n+    public final String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Sets the version of the document.\n+     *\n+     * @param version The version of the document or {@code null} if not set.\n+     */\n+    protected final void setVersion(final String version) {\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the date and time of last modification.\n+     *\n+     * @return The date and time of last modification.\n+     */\n+    public final Instant getUpdatedOn() {\n+        return updatedOn;\n+    }\n+\n+    /**\n+     * Sets the date and time of last modification.\n+     *\n+     * @param updatedOn The date and time of last modification.\n+     */\n+    protected final void setUpdatedOn(final Instant updatedOn) {\n+        this.updatedOn = updatedOn;\n+    }\n+\n+    /**\n+     * Gets the date and time when the entity detailed by this status was created.\n+     *\n+     * @return The entity's creation time.\n+     */\n+    public Instant getCreationTime() {", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNjU4NA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511826584", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-10-26T09:36:27Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(FIELD_VERSION)\n+    private String version;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)\n+    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)\n+    @HonoTimestamp\n+    private Instant creationTime;\n+\n+    @JsonProperty(FIELD_UPDATED_ON)\n+    @HonoTimestamp\n+    private Instant updatedOn;\n+\n+    private T data;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>creation of a new</b> persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for creating a new entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forCreation(final Supplier<T> supplier, final P data, final String version) {\n+        final T dto = supplier.get();\n+        dto.setCreationTime(Instant.now());\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO for <b>updating</b> a persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forUpdate(final Supplier<T> supplier, final P data, final String version) {\n+        final T dto = supplier.get();\n+        dto.setUpdatedOn(Instant.now());\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO to be returned by a read operation.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param created The instant when the object was created.\n+     * @param updated The instant of the most recent update.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forRead(final Supplier<T> supplier, final P data, final Instant created, final Instant updated, final String version) {\n+        final T dto = supplier.get();\n+        dto.setCreationTime(created);\n+        dto.setUpdatedOn(updated);\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     *\n+     * @return The version of the document.\n+     */\n+    public final String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Sets the version of the document.\n+     *\n+     * @param version The version of the document or {@code null} if not set.\n+     */\n+    protected final void setVersion(final String version) {\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the date and time of last modification.\n+     *\n+     * @return The date and time of last modification.\n+     */\n+    public final Instant getUpdatedOn() {\n+        return updatedOn;\n+    }\n+\n+    /**\n+     * Sets the date and time of last modification.\n+     *\n+     * @param updatedOn The date and time of last modification.\n+     */\n+    protected final void setUpdatedOn(final Instant updatedOn) {\n+        this.updatedOn = updatedOn;\n+    }\n+\n+    /**\n+     * Gets the date and time when the entity detailed by this status was created.\n+     *\n+     * @return The entity's creation time.\n+     */\n+    public Instant getCreationTime() {\n+        return creationTime;\n+    }\n+\n+    /**\n+     * Sets the date and time when the entity detailed by this status was created.\n+     *\n+     * @param creationTime The entity's creation time.\n+     */\n+    protected void setCreationTime(final Instant creationTime) {", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNzM2Mw==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511827363", "bodyText": "final ?", "author": "sophokles73", "createdAt": "2020-10-26T09:37:43Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(FIELD_VERSION)\n+    private String version;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)\n+    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)\n+    @HonoTimestamp\n+    private Instant creationTime;\n+\n+    @JsonProperty(FIELD_UPDATED_ON)\n+    @HonoTimestamp\n+    private Instant updatedOn;\n+\n+    private T data;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>creation of a new</b> persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for creating a new entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forCreation(final Supplier<T> supplier, final P data, final String version) {\n+        final T dto = supplier.get();\n+        dto.setCreationTime(Instant.now());\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO for <b>updating</b> a persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forUpdate(final Supplier<T> supplier, final P data, final String version) {\n+        final T dto = supplier.get();\n+        dto.setUpdatedOn(Instant.now());\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO to be returned by a read operation.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param created The instant when the object was created.\n+     * @param updated The instant of the most recent update.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forRead(final Supplier<T> supplier, final P data, final Instant created, final Instant updated, final String version) {\n+        final T dto = supplier.get();\n+        dto.setCreationTime(created);\n+        dto.setUpdatedOn(updated);\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     *\n+     * @return The version of the document.\n+     */\n+    public final String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Sets the version of the document.\n+     *\n+     * @param version The version of the document or {@code null} if not set.\n+     */\n+    protected final void setVersion(final String version) {\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the date and time of last modification.\n+     *\n+     * @return The date and time of last modification.\n+     */\n+    public final Instant getUpdatedOn() {\n+        return updatedOn;\n+    }\n+\n+    /**\n+     * Sets the date and time of last modification.\n+     *\n+     * @param updatedOn The date and time of last modification.\n+     */\n+    protected final void setUpdatedOn(final Instant updatedOn) {\n+        this.updatedOn = updatedOn;\n+    }\n+\n+    /**\n+     * Gets the date and time when the entity detailed by this status was created.\n+     *\n+     * @return The entity's creation time.\n+     */\n+    public Instant getCreationTime() {\n+        return creationTime;\n+    }\n+\n+    /**\n+     * Sets the date and time when the entity detailed by this status was created.\n+     *\n+     * @param creationTime The entity's creation time.\n+     */\n+    protected void setCreationTime(final Instant creationTime) {\n+        this.creationTime = creationTime;\n+    }\n+\n+    /**\n+     * Gets the data object (i.e. what should be editable by clients) of this DTO.\n+     * This method may be overridden by subclasses to set the JSON property name to a more meaningful one.\n+     *\n+     * @return The data object.\n+     */\n+    @JsonProperty(FIELD_DATA)\n+    public T getData() {\n+        return data;\n+    }\n+\n+    /**\n+     * Sets the data object of this DTO.\n+     *\n+     * @param data The data object.\n+     */\n+    protected void setData(final T data) {", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNzYxMg==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511827612", "bodyText": "does this return null by intention?", "author": "sophokles73", "createdAt": "2020-10-26T09:38:13Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/BaseDto.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management;\n+\n+import java.time.Instant;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The base class for implementing a DTO (Data Transfer Object) to store data in registry implementations.\n+ *\n+ * @param <T> The type of the data object\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public abstract class BaseDto<T> {\n+\n+    public static final String FIELD_UPDATED_ON = \"updatedOn\";\n+    public static final String FIELD_VERSION = \"version\";\n+    public static final String FIELD_DATA = \"data\";\n+\n+    @JsonProperty(FIELD_VERSION)\n+    private String version;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)\n+    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)\n+    @HonoTimestamp\n+    private Instant creationTime;\n+\n+    @JsonProperty(FIELD_UPDATED_ON)\n+    @HonoTimestamp\n+    private Instant updatedOn;\n+\n+    private T data;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public BaseDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>creation of a new</b> persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for creating a new entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forCreation(final Supplier<T> supplier, final P data, final String version) {\n+        final T dto = supplier.get();\n+        dto.setCreationTime(Instant.now());\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO for <b>updating</b> a persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forUpdate(final Supplier<T> supplier, final P data, final String version) {\n+        final T dto = supplier.get();\n+        dto.setUpdatedOn(Instant.now());\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO to be returned by a read operation.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param data The data of the DTO.\n+     * @param created The instant when the object was created.\n+     * @param updated The instant of the most recent update.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P, T extends BaseDto<P>> T forRead(final Supplier<T> supplier, final P data, final Instant created, final Instant updated, final String version) {\n+        final T dto = supplier.get();\n+        dto.setCreationTime(created);\n+        dto.setUpdatedOn(updated);\n+        dto.setData(data);\n+        dto.setVersion(version);\n+\n+        return dto;\n+    }\n+\n+    /**\n+     * Gets the version of the document.\n+     *\n+     * @return The version of the document.\n+     */\n+    public final String getVersion() {\n+        return version;\n+    }\n+\n+    /**\n+     * Sets the version of the document.\n+     *\n+     * @param version The version of the document or {@code null} if not set.\n+     */\n+    protected final void setVersion(final String version) {\n+        this.version = version;\n+    }\n+\n+    /**\n+     * Gets the date and time of last modification.\n+     *\n+     * @return The date and time of last modification.\n+     */\n+    public final Instant getUpdatedOn() {\n+        return updatedOn;\n+    }\n+\n+    /**\n+     * Sets the date and time of last modification.\n+     *\n+     * @param updatedOn The date and time of last modification.\n+     */\n+    protected final void setUpdatedOn(final Instant updatedOn) {\n+        this.updatedOn = updatedOn;\n+    }\n+\n+    /**\n+     * Gets the date and time when the entity detailed by this status was created.\n+     *\n+     * @return The entity's creation time.\n+     */\n+    public Instant getCreationTime() {\n+        return creationTime;\n+    }\n+\n+    /**\n+     * Sets the date and time when the entity detailed by this status was created.\n+     *\n+     * @param creationTime The entity's creation time.\n+     */\n+    protected void setCreationTime(final Instant creationTime) {\n+        this.creationTime = creationTime;\n+    }\n+\n+    /**\n+     * Gets the data object (i.e. what should be editable by clients) of this DTO.\n+     * This method may be overridden by subclasses to set the JSON property name to a more meaningful one.\n+     *\n+     * @return The data object.\n+     */\n+    @JsonProperty(FIELD_DATA)\n+    public T getData() {\n+        return data;\n+    }\n+\n+    /**\n+     * Sets the data object of this DTO.\n+     *\n+     * @param data The data object.\n+     */\n+    protected void setData(final T data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Gets the name of the user who did the most recent modification.\n+     *\n+     * @return The user's name.\n+     */\n+    public String getLastUser() {\n+        return null;", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MjMzMQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r512052331", "bodyText": "Actually, yes. I will add a comment that it is not implemented yet.\nThe \"last-user\" property actually is/was already defined (in the Device Registry Management API Specification and in the Status class) but I decided not to implement this in the scope of this PR since I would need to adapt even more classes adding the authenticated user which is performing the change...", "author": "fkaltner", "createdAt": "2020-10-26T15:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNzYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MTcyOQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r512061729", "bodyText": "Ok, I see.", "author": "sophokles73", "createdAt": "2020-10-26T15:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNzYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyODQxNQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511828415", "bodyText": "<p>", "author": "sophokles73", "createdAt": "2020-10-26T09:39:32Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceDto.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.service.management.BaseDto;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A base class for a device DTO.\n+ */\n+public class DeviceDto extends BaseDto<Device> {\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public DeviceDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>creation of a new</b> persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param tenantId The id of the tenant.\n+     * @param deviceId The id of the device.\n+     * @param device The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for creating a new entry.\n+     */\n+    public static <P extends Device, T extends DeviceDto> T forCreation(final Supplier<T> supplier, final String tenantId, final String deviceId, final Device device, final String version) {\n+        final T deviceDto = BaseDto.forCreation(supplier,\n+                withoutStatus(device),\n+                version);\n+        deviceDto.setTenantId(tenantId);\n+        deviceDto.setDeviceId(deviceId);\n+\n+        return deviceDto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO to be returned by a read operation.\n+     *\n+     * @param tenantId The id of the tenant.\n+     * @param deviceId The id of the device.\n+     * @param device The data of the DTO.\n+     * @param created The instant when the object was created.\n+     * @param updated The instant of the most recent update.\n+     * @param version The version of the DTO\n+     *\n+     * @return A DTO instance for reading an entry.\n+     */\n+    public static DeviceDto forRead(final String tenantId, final String deviceId, final Device device,\n+                                    final Instant created, final Instant updated, final String version) {\n+        final DeviceDto deviceDto = BaseDto.forRead(DeviceDto::new, device, created, updated, version);\n+        deviceDto.setTenantId(tenantId);\n+        deviceDto.setDeviceId(deviceId);\n+\n+        return deviceDto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>updating</b> a persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param tenantId The id of the tenant.\n+     * @param deviceId The id of the device.\n+     * @param device The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P extends Device, T extends DeviceDto> T forUpdate(final Supplier<T> supplier, final String tenantId, final String deviceId, final Device device, final String version) {\n+        final T deviceDto = BaseDto.forUpdate(supplier, withoutStatus(device), version);\n+        deviceDto.setTenantId(tenantId);\n+        deviceDto.setDeviceId(deviceId);\n+\n+        return deviceDto;\n+    }\n+\n+    /**\n+     * Returns a new device without internal status.\n+     * <br><br>", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyOTcxNA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511829714", "bodyText": "required = true has no effect here, Jackson will only enforce this if used on an argument to a constructor/factory method ...", "author": "sophokles73", "createdAt": "2020-10-26T09:41:37Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceDto.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.service.management.BaseDto;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A base class for a device DTO.\n+ */\n+public class DeviceDto extends BaseDto<Device> {\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMDMxMQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511830311", "bodyText": "are the getters and setters supposed to be overridden?", "author": "sophokles73", "createdAt": "2020-10-26T09:42:37Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceDto.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.hono.service.management.BaseDto;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A base class for a device DTO.\n+ */\n+public class DeviceDto extends BaseDto<Device> {\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public DeviceDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>creation of a new</b> persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param tenantId The id of the tenant.\n+     * @param deviceId The id of the device.\n+     * @param device The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for creating a new entry.\n+     */\n+    public static <P extends Device, T extends DeviceDto> T forCreation(final Supplier<T> supplier, final String tenantId, final String deviceId, final Device device, final String version) {\n+        final T deviceDto = BaseDto.forCreation(supplier,\n+                withoutStatus(device),\n+                version);\n+        deviceDto.setTenantId(tenantId);\n+        deviceDto.setDeviceId(deviceId);\n+\n+        return deviceDto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO to be returned by a read operation.\n+     *\n+     * @param tenantId The id of the tenant.\n+     * @param deviceId The id of the device.\n+     * @param device The data of the DTO.\n+     * @param created The instant when the object was created.\n+     * @param updated The instant of the most recent update.\n+     * @param version The version of the DTO\n+     *\n+     * @return A DTO instance for reading an entry.\n+     */\n+    public static DeviceDto forRead(final String tenantId, final String deviceId, final Device device,\n+                                    final Instant created, final Instant updated, final String version) {\n+        final DeviceDto deviceDto = BaseDto.forRead(DeviceDto::new, device, created, updated, version);\n+        deviceDto.setTenantId(tenantId);\n+        deviceDto.setDeviceId(deviceId);\n+\n+        return deviceDto;\n+    }\n+\n+    /**\n+     * Constructs a new DTO for use with the <b>updating</b> a persistent entry.\n+     *\n+     * @param supplier A DTO subclass' constructor of which a new instance shall be created.\n+     * @param tenantId The id of the tenant.\n+     * @param deviceId The id of the device.\n+     * @param device The data of the DTO.\n+     * @param version The version of the DTO\n+     *\n+     * @param <P> The type of the DTO's payload.\n+     * @param <T> The type of the DTO subclass.\n+     *\n+     * @return A DTO instance for updating an entry.\n+     */\n+    public static <P extends Device, T extends DeviceDto> T forUpdate(final Supplier<T> supplier, final String tenantId, final String deviceId, final Device device, final String version) {\n+        final T deviceDto = BaseDto.forUpdate(supplier, withoutStatus(device), version);\n+        deviceDto.setTenantId(tenantId);\n+        deviceDto.setDeviceId(deviceId);\n+\n+        return deviceDto;\n+    }\n+\n+    /**\n+     * Returns a new device without internal status.\n+     * <br><br>\n+     * The status should be null anyway, since it should not be deserialized in the given device value object.\n+     * Also it will be overwritten with the actual internal status when devices are retrieved.\n+     * Nevertheless this makes sure that status information will never be persisted.\n+     *\n+     * @param device The device which should be copied without status.\n+     *\n+     * @return The copied device.\n+     */\n+    protected static Device withoutStatus(final Device device) {\n+        return new Device(device).setStatus(null);\n+    }\n+\n+    /**\n+     * Gets the identifier of the tenant.\n+     *\n+     * @return The identifier of the tenant.\n+     */\n+    public String getTenantId() {", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NjI4OA==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r512076288", "bodyText": "No, so I made them final.", "author": "fkaltner", "createdAt": "2020-10-26T16:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMDMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMTE2MQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511831161", "bodyText": "testEncodeStatus", "author": "sophokles73", "createdAt": "2020-10-26T09:44:05Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/device/DeviceTest.java", "diffHunk": "@@ -185,4 +185,30 @@ public void testEncodeMapper() {\n         assertThat(json).isNotNull();\n         assertThat(json.getString(\"mapper\")).isEqualTo(\"test\");\n     }\n+\n+    /**\n+     * Tests that the status property is serialized to JSON.\n+     */\n+    @Test\n+    public void testDecodeStatus() {", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMTQ2Mg==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511831462", "bodyText": "whenDecoding", "author": "sophokles73", "createdAt": "2020-10-26T09:44:34Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/management/device/DeviceTest.java", "diffHunk": "@@ -185,4 +185,30 @@ public void testEncodeMapper() {\n         assertThat(json).isNotNull();\n         assertThat(json.getString(\"mapper\")).isEqualTo(\"test\");\n     }\n+\n+    /**\n+     * Tests that the status property is serialized to JSON.\n+     */\n+    @Test\n+    public void testDecodeStatus() {\n+        final var device = new Device();\n+        device.setStatus(new Status().setCreationTime(Instant.now()));\n+        final var json = JsonObject.mapFrom(device);\n+        assertThat(json).isNotNull();\n+        assertThat(json.getJsonObject(\"status\")).isNotNull();\n+        assertThat(json.getJsonObject(\"status\").getString(\"created\")).isNotEmpty();\n+    }\n+\n+    /**\n+     * Tests that the status property is ignored on deserialization, since it should not be editable by a user of the\n+     * device management API.\n+     */\n+    @Test\n+    public void testStatusIsIgnoredWhenEncoding() {", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0MDI0Mg==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r511840242", "bodyText": "looks like all of this is only needed if baseDto.getData() != null ....", "author": "sophokles73", "createdAt": "2020-10-26T09:58:46Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -56,6 +64,41 @@ public static MongoDbDocumentBuilder builder() {\n         return new MongoDbDocumentBuilder();\n     }\n \n+    /**\n+     * Creates a MongoDb update document for the update of the given DTO.\n+     *\n+     * @param baseDto The DTO for which an update should be generated.\n+     *\n+     * @return a reference to this for fluent use.\n+     */\n+    public MongoDbDocumentBuilder forUpdateOf(final BaseDto<?> baseDto) {\n+        final JsonObject updates = new JsonObject();\n+\n+        final JavaType baseDtoJavaType = OBJECT_MAPPER.getTypeFactory().constructType(baseDto.getClass());\n+        final BeanDescription beanDescription = OBJECT_MAPPER.getSerializationConfig().introspect(baseDtoJavaType);\n+        final AnnotatedMethod getDataMethod = beanDescription.findMethod(\"getData\", null);\n+        final JsonProperty jsonProperty = getDataMethod.getAnnotation(JsonProperty.class);", "originalCommit": "859ed92f1cbd62c23f7c42c0fb9457b031a36c48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NjY3NQ==", "url": "https://github.com/eclipse/hono/pull/2189#discussion_r512076675", "bodyText": "Good catch! \ud83d\ude04", "author": "fkaltner", "createdAt": "2020-10-26T16:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0MDI0Mg=="}], "type": "inlineReview"}, {"oid": "801022e974ff8fadcc3af42acaf07f9be207a87f", "url": "https://github.com/eclipse/hono/commit/801022e974ff8fadcc3af42acaf07f9be207a87f", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-26T16:25:59Z", "type": "commit"}, {"oid": "1be622f59a99404a8bb92cf642b620c6fb68a21b", "url": "https://github.com/eclipse/hono/commit/1be622f59a99404a8bb92cf642b620c6fb68a21b", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-26T16:26:06Z", "type": "commit"}, {"oid": "39fd7d21a1ca7c5799c6a48f645810fa6690b3ed", "url": "https://github.com/eclipse/hono/commit/39fd7d21a1ca7c5799c6a48f645810fa6690b3ed", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-26T16:26:06Z", "type": "commit"}, {"oid": "da5c493881815e35dacf5d34fb46c39cc6e34444", "url": "https://github.com/eclipse/hono/commit/da5c493881815e35dacf5d34fb46c39cc6e34444", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-26T16:30:55Z", "type": "commit"}, {"oid": "da5c493881815e35dacf5d34fb46c39cc6e34444", "url": "https://github.com/eclipse/hono/commit/da5c493881815e35dacf5d34fb46c39cc6e34444", "message": "[#1960] Implementing status property for device registrations.\n\nPutting the status property to work which now properly indicates when a device was created and updated.\n\nThis fixes #1960\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-10-26T16:30:55Z", "type": "forcePushed"}]}