{"pr_number": 1724, "pr_title": "[#1646] Add documentation how to implement a third party protocol adapter", "pr_createdAt": "2020-01-28T13:51:38Z", "pr_url": "https://github.com/eclipse/hono/pull/1724", "timeline": [{"oid": "57fee7a208067213837e73b62dea762bb238ea6d", "url": "https://github.com/eclipse/hono/commit/57fee7a208067213837e73b62dea762bb238ea6d", "message": "[#1646] add thirdparty adapter example\n\nWith contributions of Johannes.kristan@bosch.io:\nsite/documentation/content/dev-guide/third_party_adapter.md#L1-L35\n\nWith contributions of carsten.lohmann@bosch.io:\nsite/documentation/content/dev-guide/third_party_adapter.png\n\nSigned-off-by: Jan kostulski (INST-CSS/BSV-OS2) <jan.kostulski@bosch.io>", "committedDate": "2020-01-29T08:34:30Z", "type": "forcePushed"}, {"oid": "d2571f9e968f5f3a4578f94bad5b9258407f8215", "url": "https://github.com/eclipse/hono/commit/d2571f9e968f5f3a4578f94bad5b9258407f8215", "message": "[#1646] reformat\n\nigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-07T14:08:05Z", "type": "forcePushed"}, {"oid": "6927f577c1f5d01b14dbdae8743c754d39891bad", "url": "https://github.com/eclipse/hono/commit/6927f577c1f5d01b14dbdae8743c754d39891bad", "message": "[#1646] resolve conflict\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-07T14:21:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDIyMA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420220", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:32:45Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/DemoTCPApplication.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.eclipse.hono.example.protocoladapter;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDI5OQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420299", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:32:52Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/ServiceProperties.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.eclipse.hono.example.protocoladapter;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDM2NQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420365", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:33:00Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/adapter/CommandAndControlReceiver.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.eclipse.hono.example.protocoladapter.adapter;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDUxMw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420513", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:33:18Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/adapter/TelemetryAndEventSender.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.eclipse.hono.example.protocoladapter.adapter;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDYzMQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420631", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:33:30Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/controller/ProtocolAdapterExample.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.eclipse.hono.example.protocoladapter.controller;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDczNA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420734", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:33:42Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/interfaces/ICommandHandler.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.eclipse.hono.example.protocoladapter.interfaces;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDk4Mw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420983", "bodyText": "we do not use a special prefix character for interfaces", "author": "sophokles73", "createdAt": "2020-02-07T14:34:10Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/interfaces/ICommandHandler.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.eclipse.hono.example.protocoladapter.interfaces;\n+\n+public interface ICommandHandler {", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMTE3Nw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376421177", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:34:32Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/interfaces/ICommandHandler.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.eclipse.hono.example.protocoladapter.interfaces;\n+\n+public interface ICommandHandler {\n+    /**\n+     * Pass through function to handle commands and return response body\n+     *\n+     * @param commandPayload body of command\n+     * @param subject        subject of command\n+     * @param contentType    HTML content type\n+     * @param isOneWay       signals if response string necessary\n+     * @return\n+     */\n+    String handleCommand(String commandPayload, String subject, String contentType, boolean isOneWay);\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMTMzMg==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376421332", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:34:51Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/controller/ProtocolAdapterExample.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.eclipse.hono.example.protocoladapter.controller;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.proton.ProtonDelivery;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.eclipse.hono.example.protocoladapter.adapter.CommandAndControlReceiver;\n+import org.eclipse.hono.example.protocoladapter.adapter.TelemetryAndEventSender;\n+import org.eclipse.hono.example.protocoladapter.interfaces.ICommandHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Example protocol adapter service to send AMQP messages to Hono amqp adapter using Hono cli module classes\n+ */\n+@Service\n+public class ProtocolAdapterExample {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ProtocolAdapterExample.class);\n+\n+    private final TelemetryAndEventSender telemetryAndEventSender;\n+    private final CommandAndControlReceiver commandAndControlReceiver;\n+\n+    @Autowired\n+    public ProtocolAdapterExample(final TelemetryAndEventSender telemetryAndEventSender,\n+                                  final CommandAndControlReceiver commandAndControlReceiver) {\n+        this.telemetryAndEventSender = telemetryAndEventSender;\n+        this.commandAndControlReceiver = commandAndControlReceiver;\n+    }\n+\n+    /**\n+     * Sets AMQP client properties and command handler {@link ICommandHandler}\n+     *\n+     * @param host           AMQP Hono adapter IP address\n+     * @param port           AMQP Hono adapter port\n+     * @param username       username consists of DEVICE_ID@TENANT_ID\n+     * @param password       device credentials\n+     * @param commandHandler function to process incoming commands\n+     */\n+    public void setAMQPClientProps(final String host, final int port, final String username, final String password, final ICommandHandler commandHandler) {\n+        telemetryAndEventSender.setAMQPClientProps(host, port, username, password);\n+        commandAndControlReceiver.setAMQPClientProps(host, port, username, password, commandHandler);\n+    }\n+\n+    /**\n+     * Sends AMQP message to Hono AMQP adapter\n+     * <p>\n+     * Connection properties have to be set with {@link #setAMQPClientProps(String, int, String, String, ICommandHandler) } beforehand\n+     *\n+     * @param messagePayload Message payload\n+     * @param messageAddress \"telemetry\" (\"t\") or \"event\" (\"e\")\n+     * @return response from Hono AMQP adapter\n+     */\n+    public Future<String> sendAMQPMessage(final String messagePayload, final String messageAddress) {\n+        final CompletableFuture<ProtonDelivery> messageSent = new CompletableFuture<>();\n+        final Promise<String> messageResponse = Promise.promise();\n+\n+        try {\n+            telemetryAndEventSender.sendMessage(messagePayload, messageAddress, messageSent);\n+        } catch (final IllegalArgumentException e) {\n+            messageResponse.fail(e.getCause());\n+            log.error(String.format(\"Sending message failed [reason: %s] %n\", e.getMessage()));\n+            return messageResponse.future();\n+        }\n+\n+        try {\n+            final ProtonDelivery delivery = messageSent.join();\n+            // Logs the delivery state to the console\n+            final DeliveryState state = delivery.getRemoteState();\n+            messageResponse.complete(state.getType().toString());\n+            log.info(String.format(\"Delivery State: %s\", state.getType()));\n+        } catch (final CompletionException e) {\n+            log.error(String.format(\"Sending message failed [reason: %s] %n\", e.getMessage()));\n+            messageResponse.fail(e.getCause());\n+        } catch (final CancellationException e) {\n+            // do-nothing\n+            messageResponse.fail(e.getCause());\n+        }\n+        return messageResponse.future();\n+    }\n+\n+    /**\n+     * Start listening for commands\n+     * <p>\n+     * Connection properties have to be set with {@link #setAMQPClientProps(String, int, String, String, ICommandHandler) } beforehand\n+     */\n+    public void listenCommands() {\n+        commandAndControlReceiver.listenCommands();\n+    }\n+\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjA3Ng==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376422076", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:36:06Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/adapter/CommandAndControlReceiver.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.eclipse.hono.example.protocoladapter.adapter;\n+\n+import io.vertx.core.Promise;\n+import io.vertx.proton.*;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.cli.adapter.AmqpCliClient;\n+import org.eclipse.hono.config.ClientConfigProperties;\n+import org.eclipse.hono.example.protocoladapter.interfaces.ICommandHandler;\n+import org.eclipse.hono.util.CommandConstants;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.net.HttpURLConnection;\n+\n+/**\n+ * Command and receiver listener using methods and properties from {@link AmqpCliClient} to simplify handling\n+ * <p>\n+ * based loosely on {@link org.eclipse.hono.cli.adapter.CommandAndControlClient}\n+ *\n+ * @see org.eclipse.hono.cli.adapter.CommandAndControlClient\n+ */\n+@Component\n+public class CommandAndControlReceiver extends AmqpCliClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(CommandAndControlReceiver.class);\n+    private ProtonSender sender;\n+    private ICommandHandler commandHandler;\n+\n+    /**\n+     * Listen for incoming commands\n+     */\n+    public void listenCommands() {\n+        final ProtonMessageHandler messageHandler = (d, m) -> {\n+            String commandPayload = null;\n+            if (m.getBody() instanceof Data) {\n+                final byte[] body = (((Data) m.getBody()).getValue()).getArray();\n+                commandPayload = new String(body);\n+            }\n+            final boolean isOneWay = m.getReplyTo() == null;\n+            if (isOneWay) {\n+                log.info(String.format(\"received one-way command [name: %s]: %s%n\", m.getSubject(), commandPayload));\n+                this.commandHandler.handleCommand(commandPayload, m.getSubject(), m.getContentType(), isOneWay);\n+            } else {\n+                log.info(String.format(\"received command [name: %s]: %s%n\", m.getSubject(), commandPayload));\n+                final String responseMessagePayload = this.commandHandler.handleCommand(commandPayload, m.getSubject(), m.getContentType(), isOneWay);\n+\n+                final Message commandResponse = ProtonHelper.message(m.getReplyTo(), responseMessagePayload);\n+                commandResponse.setCorrelationId(m.getCorrelationId());\n+                MessageHelper.addProperty(commandResponse, MessageHelper.APP_PROPERTY_STATUS, HttpURLConnection.HTTP_OK);\n+                commandResponse.setContentType(m.getContentType());\n+                this.sender.send(commandResponse, delivery -> {\n+                    if (delivery.remotelySettled()) {\n+                        log.info(String.format(\"sent response to command [name: %s, outcome: %s]%n\", m.getSubject(), delivery.getRemoteState().getType()));\n+                    } else {\n+                        log.info(\"application did not settle command response message\");\n+                    }\n+                });\n+            }\n+        };\n+\n+        connectToAdapter()\n+                .compose(con -> {\n+                    this.adapterConnection = con;\n+                    return createSender();\n+                }).map(s -> {\n+            this.sender = s;\n+            final Promise<ProtonReceiver> result = Promise.promise();\n+            final ProtonReceiver receiver = adapterConnection.createReceiver(CommandConstants.COMMAND_ENDPOINT);\n+            receiver.setQoS(ProtonQoS.AT_LEAST_ONCE);\n+            receiver.handler(messageHandler);\n+            receiver.openHandler(result);\n+            receiver.open();\n+            return result.future().map(recver -> {\n+                log.info(\"Command receiver ready\");\n+                return recver;\n+            });\n+        });\n+\n+    }\n+\n+    /**\n+     * Sets AMQP client connection properties and command handler {@link ICommandHandler}\n+     *\n+     * @param host           AMQP Hono adapter IP address\n+     * @param port           AMQP Hono adapter port\n+     * @param username       username consists of DEVICE_ID@TENANT_ID\n+     * @param password       device credentials\n+     * @param commandHandler handler for incoming commands\n+     */\n+    public void setAMQPClientProps(final String host, final int port, final String username, final String password, final ICommandHandler commandHandler) {\n+        final ClientConfigProperties props = new ClientConfigProperties();\n+        props.setHost(host);\n+        props.setPort(port);\n+        props.setUsername(username);\n+        props.setPassword(password);\n+        setClientConfig(props);\n+        this.commandHandler = commandHandler;\n+    }\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjE5Ng==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376422196", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:36:19Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/ServiceProperties.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.eclipse.hono.example.protocoladapter;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Configure vertx, which is used in {@link org.eclipse.hono.cli.adapter.AmqpCliClient}\n+ */\n+@Configuration\n+public class ServiceProperties {\n+    /**\n+     * Exposes a Vert.x instance as a Spring bean.\n+     *\n+     * @return The Vert.x instance.\n+     */\n+    @Bean\n+    public Vertx vertx() {\n+        final VertxOptions options = new VertxOptions().setWarningExceptionTime(1500000000);\n+        return Vertx.vertx(options);\n+    }\n+\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjI5Nw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376422297", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:36:30Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/DemoTCPApplication.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.eclipse.hono.example.protocoladapter;\n+\n+import io.vertx.core.Future;\n+import org.eclipse.hono.example.protocoladapter.controller.ProtocolAdapterExample;\n+import org.eclipse.hono.example.protocoladapter.interfaces.ICommandHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * Example Tcp server to send event and telemetry messages to Hono AMQP adapter and receives commands\n+ */\n+@SpringBootApplication\n+@ConfigurationProperties(\"app\")\n+public class DemoTCPApplication {\n+\n+    private static final Logger log = LoggerFactory.getLogger(DemoTCPApplication.class);\n+    private final ProtocolAdapterExample protocolAdapterExample;\n+    // TCP server properties\n+    private int serverPort;\n+    private ServerSocket serverSocket;\n+    private Socket clientSocket;\n+    private PrintWriter out;\n+    private BufferedReader in;\n+\n+    public DemoTCPApplication(ProtocolAdapterExample protocolAdapterExample) throws IOException {\n+        this.protocolAdapterExample = protocolAdapterExample;\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        SpringApplication.run(DemoTCPApplication.class, args);\n+        log.info(\"Start DemoTCPApplication\");\n+    }\n+\n+    public void setServerPort(int serverPort) {\n+        this.serverPort = serverPort;\n+    }\n+\n+    /**\n+     * Starts example tcp server listening to command to be relayed to the AMQP adapter\n+     */\n+    @PostConstruct\n+    public void startTcpServer() throws IOException {\n+        serverSocket = new ServerSocket(this.serverPort);\n+\n+        while (true) {\n+            clientSocket = serverSocket.accept();\n+            out = new PrintWriter(clientSocket.getOutputStream(), true);\n+            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n+            String greeting;\n+\n+            while (clientSocket.isConnected()) {\n+                greeting = in.readLine();\n+                if (greeting == null) {\n+                    close();\n+                    break;\n+                }\n+\n+                switch (greeting) {\n+                    case \"initConnection\":\n+                        log.info(\"Command: initConnection\");\n+                        out.println(\"host:\");\n+                        String host = in.readLine();\n+                        out.println(\"port:\");\n+                        int port = Integer.parseInt(in.readLine());\n+                        out.println(\"username (DEVICE_ID@TENANT_ID):\");\n+                        String username = in.readLine();\n+                        out.println(\"password:\");\n+                        String password = in.readLine();\n+                        initConnection(host, port, username, password);\n+                        out.println(\"OK\");\n+                        break;\n+                    case \"listenCommands\":\n+                        log.info(\"Command: listenCommands\");\n+                        listenCommands();\n+                        out.println(\"OK\");\n+                        break;\n+                    case \"sendAMQPMessage\":\n+                        log.info(\"Command: sendAMQPMessage\");\n+                        out.println(\"message address (\\\"telemetry\\\"/\\\"event\\\"):\");\n+                        String messageAddress = in.readLine();\n+                        out.println(\"payload:\");\n+                        String payload = in.readLine();\n+                        Future<String> amqpResponse = sendAMQPMessage(payload, messageAddress);\n+                        amqpResponse.setHandler(response -> {\n+                            if (response.succeeded()) {\n+                                out.println(\"OK\");\n+                                log.info(String.format(\"sendAMQPMessage result: \\\"%s\\\"\", response.result()));\n+                                out.println(\"response: \" + response.result());\n+                            } else {\n+                                out.println(\"FAIL\");\n+                            }\n+                        });\n+                        break;\n+                    default:\n+                        out.println(\"Unrecognized Command.\\nCommands:\\n - \\\"initConnection\\\"\\n - \\\"listenCommands\\\"\\n - \\\"sendAMQPMessage\\\"\");\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Closes sockets and streams if client is disconnected\n+     */\n+    private void close() {\n+        try {\n+            in.close();\n+            out.close();\n+            clientSocket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     * Sets connection properties, sets a commandHandler for incoming commands\n+     *\n+     * @param host     AMQP Hono adapter IP address\n+     * @param port     AMQP Hono adapter port\n+     * @param username username consists of DEVICE_ID@TENANT_ID\n+     * @param password device credentials\n+     */\n+    public void initConnection(String host, int port, String username, String password) {\n+\n+        // Example command handler responds with time if incoming subject is \"tellTime\"\n+        ICommandHandler commandHandler = (commandPayload, subject, contentType, isOneWay) -> {\n+            log.info(String.format(\"Got now command: \\\"%s\\\" for subject \\\"%s\\\"\", commandPayload, subject));\n+            if (!isOneWay && subject.contains(\"tellTime\")) {\n+                return String.format(\"myCurrentTime: %s\",\n+                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").format(LocalDateTime.now())\n+                );\n+            }\n+            return \"{}\";\n+        };\n+        this.protocolAdapterExample.setAMQPClientProps(host, port, username, password, commandHandler);\n+    }\n+\n+    /**\n+     * Starts listening to commands\n+     * <p>\n+     * Connection properties have to be set with {@link #initConnection(String, int, String, String) } beforehand\n+     */\n+    public void listenCommands() {\n+        this.protocolAdapterExample.listenCommands();\n+    }\n+\n+    /**\n+     * Sends telemtry or event message to Hono AMQP adapter\n+     * <p>\n+     * Connection properties have to be set with {@link #initConnection(String, int, String, String) } beforehand\n+     *\n+     * @param payload        message payload\n+     * @param messageAddress address can be either \"telemetry\" or \"event\"\n+     * @return\n+     */\n+    public Future<String> sendAMQPMessage(String payload, String messageAddress) {\n+        return protocolAdapterExample.sendAMQPMessage(payload, messageAddress);\n+    }\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "942c008864eee1bd5f1f6e3c3999c5e8d2f5ee3b", "url": "https://github.com/eclipse/hono/commit/942c008864eee1bd5f1f6e3c3999c5e8d2f5ee3b", "message": "[#1646] add thirdparty adapter example\n\nWith contributions of Johannes.kristan@bosch.io:\nsite/documentation/content/dev-guide/third_party_adapter.md#L1-L35\n\nWith contributions of carsten.lohmann@bosch.io:\nsite/documentation/content/dev-guide/third_party_adapter.png\n\nSigned-off-by: Jan kostulski (INST-CSS/BSV-OS2) <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "dcf6a09b8a5414a6fb81ced56c88a29300b72f52", "url": "https://github.com/eclipse/hono/commit/dcf6a09b8a5414a6fb81ced56c88a29300b72f52", "message": "[#1646] alter docu protocol adapter to a more gerneral one\n\nA more general docu about device connection methods, instead of a single dev guide documentation about the protocol adapter.\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "3b5cf1a1efa708b0d1276b337ebd8222e2418194", "url": "https://github.com/eclipse/hono/commit/3b5cf1a1efa708b0d1276b337ebd8222e2418194", "message": "[#1646] fix missing \")\"\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "5eb072b2fc0f11fdc3e33abd0b0418d914a1d382", "url": "https://github.com/eclipse/hono/commit/5eb072b2fc0f11fdc3e33abd0b0418d914a1d382", "message": "[#1646] mv Hono client example in subfolder, add example TCP to AMQP protocol adapter\n\nTCP protocol adapter added to example module to illustrate how exisiting Hono classes utilized\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "1afd6bc25fc432d4bea583b5d4a71b56d48b7e29", "url": "https://github.com/eclipse/hono/commit/1afd6bc25fc432d4bea583b5d4a71b56d48b7e29", "message": "[#1646] reformat\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "a94ddb5f88a23598bcfa807c1bdf17a8c4e212be", "url": "https://github.com/eclipse/hono/commit/a94ddb5f88a23598bcfa807c1bdf17a8c4e212be", "message": "[#1646] PR fixes\n\n- mv hono-client-examples in a src folder\n- extract device creation from readme into sh file\n- append EOLs\n- add licenses\n- update parent in POM\n- rn CommandHandler\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T09:19:20Z", "type": "commit"}, {"oid": "a94ddb5f88a23598bcfa807c1bdf17a8c4e212be", "url": "https://github.com/eclipse/hono/commit/a94ddb5f88a23598bcfa807c1bdf17a8c4e212be", "message": "[#1646] PR fixes\n\n- mv hono-client-examples in a src folder\n- extract device creation from readme into sh file\n- append EOLs\n- add licenses\n- update parent in POM\n- rn CommandHandler\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T09:19:20Z", "type": "forcePushed"}, {"oid": "3747c7af8a0c53a769929b54e4c661274c57461a", "url": "https://github.com/eclipse/hono/commit/3747c7af8a0c53a769929b54e4c661274c57461a", "message": "[#1646] update version to 1.2.0-SNAPSHOT\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T12:00:13Z", "type": "commit"}, {"oid": "24e9cd92871fe26af3160db73d5de80a1a3cd71a", "url": "https://github.com/eclipse/hono/commit/24e9cd92871fe26af3160db73d5de80a1a3cd71a", "message": "[#1646] PR fixes\n\n- rn \"protocol adapter\" occurences -> \"protocol gateway\"\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T15:42:29Z", "type": "commit"}]}