{"pr_number": 2360, "pr_title": "#2053 implicit device registration mongodb registry", "pr_createdAt": "2020-12-09T15:28:10Z", "pr_url": "https://github.com/eclipse/hono/pull/2360", "timeline": [{"oid": "18fbbc8015540970723bf6936022235e5d9ac4f2", "url": "https://github.com/eclipse/hono/commit/18fbbc8015540970723bf6936022235e5d9ac4f2", "message": "[#2053] Adding capability to auto-provision devices to MongoDb-based device registry.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2020-12-16T14:38:19Z", "type": "forcePushed"}, {"oid": "69dca12b69675f9640b27b1f0532870dbdeed43b", "url": "https://github.com/eclipse/hono/commit/69dca12b69675f9640b27b1f0532870dbdeed43b", "message": "[#2053] Adding capability to auto-provision devices to MongoDb-based device registry.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-05T08:44:01Z", "type": "forcePushed"}, {"oid": "bc3f8d1477c1031c58a0bbce3b3c6df1ce388130", "url": "https://github.com/eclipse/hono/commit/bc3f8d1477c1031c58a0bbce3b3c6df1ce388130", "message": "[#2053] Adding capability to auto-provision devices to MongoDb-based device registry.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-05T10:25:36Z", "type": "forcePushed"}, {"oid": "96eb8dc4410e48e0a3c84bd53477c0b05917f98e", "url": "https://github.com/eclipse/hono/commit/96eb8dc4410e48e0a3c84bd53477c0b05917f98e", "message": "[#2053] Adding capability to auto-provision devices to MongoDb-based device registry.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-05T11:28:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkwMDA2OQ==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r551900069", "bodyText": "shouldn't this be either forCreate or forUpdate if the test is about verifying the document structure that is to be persisted as indicated in the JavaDoc?", "author": "sophokles73", "createdAt": "2021-01-05T12:24:57Z", "path": "services/device-registry-mongodb/src/test/java/org/eclipse/hono/deviceregistry/mongodb/model/MongoDbBasedDeviceDtoTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.service.management.BaseDto;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.junit.jupiter.api.Test;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+\n+class MongoDbBasedDeviceDtoTest {\n+\n+    /**\n+     * Tests that the DTO is serialized to JSON as expected in order to verify that the document persisted is\n+     * written as expected.\n+     */\n+    @Test\n+    public void testEncode() {\n+        final String tenantId = \"barfoo\";\n+        final String deviceId = \"foobar\";\n+        final Device device = new Device();\n+        final DeviceStatus deviceStatus = new DeviceStatus()\n+                .setAutoProvisioned(true)\n+                .setAutoProvisioningNotificationSent(true)\n+                // make sure that these values do not interfere with the corresponding properties of DeviceDto's parent classes\n+                .setCreationTime(Instant.now().plusSeconds(3600))\n+                .setLastUpdate(Instant.now().plusSeconds(3600));\n+        final Instant created = Instant.now().minusSeconds(1).truncatedTo(ChronoUnit.SECONDS);\n+        final Instant updated = Instant.now().truncatedTo(ChronoUnit.SECONDS);;\n+        final String version = \"spam\";\n+\n+        final var deviceDto = MongoDbBasedDeviceDto.forRead(MongoDbBasedDeviceDto::new, tenantId, deviceId, device, deviceStatus,", "originalCommit": "96eb8dc4410e48e0a3c84bd53477c0b05917f98e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3NDI1MA==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r553374250", "bodyText": "The reason I didn't use one of those is that I wanted to test if every property of the DTO is serialised as expected. If I had used forCreate() or forUpdate() not all fields would be populated and the test code would be partially duplicated.\nMaybe it would help if I put what I stated above into a comment?", "author": "fkaltner", "createdAt": "2021-01-07T14:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkwMDA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAwMzY2OA==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r554003668", "bodyText": "FMPOV it would be more helpful to have separate test methods which test the DTO in the way(s) that it is supposed to be used by client code ...", "author": "sophokles73", "createdAt": "2021-01-08T15:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkwMDA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkwMDUzNw==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r551900537", "bodyText": "DownstreamSenderFactory is deprecated. Can you please use the new client's ProtonBasedDownstreamSender instead?", "author": "sophokles73", "createdAt": "2021-01-05T12:25:58Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/ApplicationConfig.java", "diffHunk": "@@ -286,19 +291,87 @@ public ObjectFactoryCreatingFactoryBean amqpServerFactory() {\n         return factory;\n     }\n \n+    /**\n+     * Exposes a factory for creating clients for the <em>AMQP Messaging Network</em> as a Spring bean.\n+     * <p>\n+     * The factory is initialized with the connection provided by {@link #downstreamConnection(Vertx)}.\n+     *\n+     * @param vertx The vert.x instance to run on.\n+     *\n+     * @return The factory.\n+     */\n+    @Bean\n+    @Scope(\"prototype\")\n+    public DownstreamSenderFactory downstreamSenderFactory(final Vertx vertx) {", "originalCommit": "96eb8dc4410e48e0a3c84bd53477c0b05917f98e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxMjUyNQ==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r552012525", "bodyText": "Do you mind if I create an issue and do this after this PR, the JDBC PR and especially the integration tests are merged, so that I can test the migration more easily?\nAs this involves changing the AutoProvisioner this will not only affect the MongoDb registry but also the JDBC and File registry and would involve semi-manual re-testing on my machine for all of them.", "author": "fkaltner", "createdAt": "2021-01-05T15:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkwMDUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxOTc0NA==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r552019744", "bodyText": "sure", "author": "sophokles73", "createdAt": "2021-01-05T15:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkwMDUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzMTUyNw==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r552031527", "bodyText": "Created #2393", "author": "fkaltner", "createdAt": "2021-01-05T16:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkwMDUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5Mzg3Nw==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r553993877", "bodyText": "is this used anywhere in this test?", "author": "sophokles73", "createdAt": "2021-01-08T15:01:01Z", "path": "services/device-registry-mongodb/src/test/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialServiceTest.java", "diffHunk": "@@ -69,6 +74,9 @@ public void startService(final VertxTestContext testContext) {\n \n         vertx = Vertx.vertx();\n         mongoClient = MongoDbTestUtils.getMongoClient(vertx, \"hono-credentials-test\");\n+        final DownstreamSenderFactory downstreamSenderFactoryMock = mock(DownstreamSenderFactory.class);", "originalCommit": "96eb8dc4410e48e0a3c84bd53477c0b05917f98e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxMDY3Mw==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r554910673", "bodyText": "Yes in the line below:\nwhen(downstreamSenderFactoryMock.connect()).thenReturn(Future.succeededFuture());", "author": "fkaltner", "createdAt": "2021-01-11T09:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5Mzg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxNjAyOQ==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r554916029", "bodyText": "Sure, but why should downstreamSenderFactoryMock.connect() ever be invoked? I do not see any place where the created downstreamSenderFactoryMock is being used by or injected into any of the objects under test. Or am I mistaken?", "author": "sophokles73", "createdAt": "2021-01-11T09:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5Mzg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk0NDQ4MQ==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r554944481", "bodyText": "Sorry - didn't see the wood before the trees. You're right that is obsolete.", "author": "fkaltner", "createdAt": "2021-01-11T10:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5Mzg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5NDM3Mg==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r553994372", "bodyText": "is this used anywhere?", "author": "sophokles73", "createdAt": "2021-01-08T15:01:51Z", "path": "services/device-registry-mongodb/src/test/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDBBasedDeviceManagementSearchDevicesTest.java", "diffHunk": "@@ -66,6 +71,8 @@ public void setup(final VertxTestContext testContext) {\n                 mongoClient,\n                 config,\n                 new NoopTenantInformationService());\n+        final DownstreamSenderFactory downstreamSenderFactoryMock = mock(DownstreamSenderFactory.class);", "originalCommit": "96eb8dc4410e48e0a3c84bd53477c0b05917f98e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxMDc1NQ==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r554910755", "bodyText": "See #2360 (comment)", "author": "fkaltner", "createdAt": "2021-01-11T09:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk5NDM3Mg=="}], "type": "inlineReview"}, {"oid": "25c79131972e77f935a57da526f55b74e284bcb7", "url": "https://github.com/eclipse/hono/commit/25c79131972e77f935a57da526f55b74e284bcb7", "message": "[#2053] Adding capability to auto-provision devices to MongoDb-based device registry.\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-11T07:29:13Z", "type": "commit"}, {"oid": "76a98d2429a26979d542aea6b747c68391c69336", "url": "https://github.com/eclipse/hono/commit/76a98d2429a26979d542aea6b747c68391c69336", "message": "Review suggestions:\n- Using forCreation()/forUpdate() in MongoDbBasedDeviceDtoTest\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-11T09:20:12Z", "type": "commit"}, {"oid": "76a98d2429a26979d542aea6b747c68391c69336", "url": "https://github.com/eclipse/hono/commit/76a98d2429a26979d542aea6b747c68391c69336", "message": "Review suggestions:\n- Using forCreation()/forUpdate() in MongoDbBasedDeviceDtoTest\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-11T09:20:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxNzU3NA==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r554917574", "bodyText": "should this be related to the instant set in the DeviceStatus?", "author": "sophokles73", "createdAt": "2021-01-11T09:34:07Z", "path": "services/device-registry-mongodb/src/test/java/org/eclipse/hono/deviceregistry/mongodb/model/MongoDbBasedDeviceDtoTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.service.management.BaseDto;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.junit.jupiter.api.Test;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+\n+class MongoDbBasedDeviceDtoTest {\n+\n+    /**\n+     * Tests that a DTO created for inserting a new entry is serialized to JSON as expected in order to verify that\n+     * the document to be persisted is written as expected.\n+     */\n+    @Test\n+    public void testEncodeForCreate() {\n+        final String tenantId = \"barfoo\";\n+        final String deviceId = \"foobar\";\n+        final DeviceStatus deviceStatus = new DeviceStatus()\n+                // make sure that these values do not interfere with the corresponding properties of DeviceDto's parent classes\n+                .setAutoProvisioned(true)\n+                .setCreationTime(Instant.now().plusSeconds(3600));\n+        final Device device = new Device();\n+        device.setStatus(deviceStatus);\n+        final String version = \"spam\";\n+\n+        final var deviceDto = MongoDbBasedDeviceDto.forCreation(MongoDbBasedDeviceDto::new, tenantId, deviceId, true, device, version);\n+        final var json = JsonObject.mapFrom(deviceDto);\n+\n+        assertThat(json).isNotNull();\n+        // size should match number of assertions below, to make sure no unexpected properties are serialized\n+        assertThat(json.getMap()).hasSize(7);\n+\n+        assertThat(json.getString(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID)).isEqualTo(tenantId);\n+        assertThat(json.getString(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID)).isEqualTo(deviceId);\n+        assertThat(json.getInstant(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)).isNotNull();", "originalCommit": "76a98d2429a26979d542aea6b747c68391c69336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxODM4NQ==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r554918385", "bodyText": "what about the updated on field? Shouldn't that contain the same instant as the created on field in this case?", "author": "sophokles73", "createdAt": "2021-01-11T09:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxNzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE0MDkzNw==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r555140937", "bodyText": "should this be related to the instant set in the DeviceStatus?\n\nNo, actually the device status should be ignored.\nI added a DeviceStatus object to the test since the properties of DeviceStatus partially have the same name as the properties in the DTO subclasses. Before adding the @JsonIgnore annotation to the deviceStatus property in DeviceDto they were accidentally serialised but the error was hard to spot since everything was still working but there was an additional, unwanted property being serialized.\nTo make sure this doesn't accidentally happen in future (e.g. when someone changes the Jackson annotation again), I added that to the test case as well.\n\nwhat about the updated on field? Shouldn't that contain the same instant as the created on field in this case?\n\nIf the DTO was created by using forCreation() it can't have been updated yet which is why there is no update timestamp set. We could also set the same timestamp for created and updated but it is more cumbersome for someone viewing the entry to spot whether it has been updated at all yet (one needs to compare the created and updated timestamp for equality then).", "author": "fkaltner", "createdAt": "2021-01-11T15:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxNzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1Njc4MA==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r555156780", "bodyText": "No, actually the device status should be ignored.\nI added a DeviceStatus object to the test since the properties of DeviceStatus partially have the same name as the properties in the DTO subclasses. Before adding the @JsonIgnore annotation to the deviceStatus property in DeviceDto they were accidentally serialised but the error was hard to spot since everything was still working but there was an additional, unwanted property being serialized.\n\nThat's a good idea \ud83d\udc4d  IMHO we should make it explicit then and add corresponding assertions as well.", "author": "sophokles73", "createdAt": "2021-01-11T16:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxNzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE4NzI0Nw==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r555187247", "bodyText": "It's already there (if I got you right):\n// size should match number of assertions below, to make sure no unexpected properties are serialized assertThat(json.getMap()).hasSize(7);\nBy that it is made sure there is no other property serialized besides the one for which the test case contains assertions.", "author": "fkaltner", "createdAt": "2021-01-11T16:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxNzU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU2NTE4OA==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r555565188", "bodyText": "I was thinking about\n// make sure that the creation date set on the new device is not the one contained in the DeviceStatus\nassertThat(json.getInstant(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)).isBefore(deviceStatus.getCreationTime());", "author": "sophokles73", "createdAt": "2021-01-12T07:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxNzU3NA=="}], "type": "inlineReview"}, {"oid": "b834d6255730949066d1b1525d2b1fa87b9107c8", "url": "https://github.com/eclipse/hono/commit/b834d6255730949066d1b1525d2b1fa87b9107c8", "message": "Review suggestions:\n- Removing obsolete mocks\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-11T10:18:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1Njc0Nw==", "url": "https://github.com/eclipse/hono/pull/2360#discussion_r555156747", "bodyText": "but this is supposed to be the same value as in the DeviceStatus, right? If so, we could also make it more explicit by comparing to DeviceStatus.isAutoProvisioned(). WDYT?", "author": "sophokles73", "createdAt": "2021-01-11T16:01:11Z", "path": "services/device-registry-mongodb/src/test/java/org/eclipse/hono/deviceregistry/mongodb/model/MongoDbBasedDeviceDtoTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.service.management.BaseDto;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceStatus;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+import org.junit.jupiter.api.Test;\n+\n+import io.vertx.core.json.JsonObject;\n+\n+\n+class MongoDbBasedDeviceDtoTest {\n+\n+    /**\n+     * Tests that a DTO created for inserting a new entry is serialized to JSON as expected in order to verify that\n+     * the document to be persisted is written as expected.\n+     */\n+    @Test\n+    public void testEncodeForCreate() {\n+        final String tenantId = \"barfoo\";\n+        final String deviceId = \"foobar\";\n+        final DeviceStatus deviceStatus = new DeviceStatus()\n+                // make sure that these values do not interfere with the corresponding properties of DeviceDto's parent classes\n+                .setAutoProvisioned(true)\n+                .setCreationTime(Instant.now().plusSeconds(3600));\n+        final Device device = new Device();\n+        device.setStatus(deviceStatus);\n+        final String version = \"spam\";\n+\n+        final var deviceDto = MongoDbBasedDeviceDto.forCreation(MongoDbBasedDeviceDto::new, tenantId, deviceId, true, device, version);\n+        final var json = JsonObject.mapFrom(deviceDto);\n+\n+        assertThat(json).isNotNull();\n+        // size should match number of assertions below, to make sure no unexpected properties are serialized\n+        assertThat(json.getMap()).hasSize(7);\n+\n+        assertThat(json.getString(RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID)).isEqualTo(tenantId);\n+        assertThat(json.getString(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID)).isEqualTo(deviceId);\n+        assertThat(json.getInstant(RegistryManagementConstants.FIELD_STATUS_CREATION_DATE)).isNotNull();\n+        assertThat(json.getString(BaseDto.FIELD_VERSION)).isEqualTo(version);\n+        assertThat(json.getBoolean(RegistryManagementConstants.FIELD_AUTO_PROVISIONED)).isTrue();", "originalCommit": "b834d6255730949066d1b1525d2b1fa87b9107c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e2a3413b8025e9ecf041ee6edab7a4649c1bf28", "url": "https://github.com/eclipse/hono/commit/1e2a3413b8025e9ecf041ee6edab7a4649c1bf28", "message": "Review suggestions:\n- Verifying autoProvisioning and autoProvisioningSent flags against DeviceStatus object in unit test\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-11T16:44:54Z", "type": "commit"}, {"oid": "0dd7e689c7c2d2647487a50d6ee30048b08e64e2", "url": "https://github.com/eclipse/hono/commit/0dd7e689c7c2d2647487a50d6ee30048b08e64e2", "message": "Review suggestions:\n- Improving creationDate assertion\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-12T08:08:46Z", "type": "commit"}, {"oid": "0dd7e689c7c2d2647487a50d6ee30048b08e64e2", "url": "https://github.com/eclipse/hono/commit/0dd7e689c7c2d2647487a50d6ee30048b08e64e2", "message": "Review suggestions:\n- Improving creationDate assertion\n\nSigned-off-by: Florian Kaltner <florian.kaltner@bosch.io>", "committedDate": "2021-01-12T08:08:46Z", "type": "forcePushed"}]}