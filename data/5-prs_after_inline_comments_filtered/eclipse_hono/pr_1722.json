{"pr_number": 1722, "pr_title": "[#1716] Add new resource-limits based on the device connection duration", "pr_createdAt": "2020-01-24T17:42:26Z", "pr_url": "https://github.com/eclipse/hono/pull/1722", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNDU5OQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371104599", "bodyText": "this should also have a default implementation in order to not break backward compatibility ...", "author": "sophokles73", "createdAt": "2020-01-27T08:15:32Z", "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/ResourceLimitChecks.java", "diffHunk": "@@ -86,4 +86,20 @@\n      *         if the check could not be performed.\n      */\n     Future<Boolean> isMessageLimitReached(TenantObject tenantObject, long payloadSize, SpanContext spanContext);\n+\n+    /**\n+     * Checks if the maximum limit of device connection duration configured for a tenant\n+     * have been reached.\n+     *\n+     * @param tenantObject The tenant configuration to check the limit against.\n+     * @param spanContext The currently active OpenTracing span context that is used to\n+     *                    trace the limits verification or {@code null}\n+     *                    if no span is currently active.\n+     * @return A future indicating the outcome of the check.\n+     *         <p>\n+     *         The future will be failed with a {@link ServiceInvocationException}\n+     *         if the check could not be performed.\n+     * @throws NullPointerException if the tenant object is null.\n+     */\n+    Future<Boolean> isConnectionDurationLimitReached(TenantObject tenantObject, SpanContext spanContext);", "originalCommit": "0b531467a5efe6a3d0ad01f59c7309d09e5b5fae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIwMDQ5Mw==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371200493", "bodyText": "I will add it.", "author": "kaniyan", "createdAt": "2020-01-27T11:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNDU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNjU3OQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371106579", "bodyText": "this looks very similar to DataVolumePeriod, doesn't it?", "author": "sophokles73", "createdAt": "2020-01-27T08:21:49Z", "path": "core/src/main/java/org/eclipse/hono/util/ResourceLimitsPeriod.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The period definition corresponding to a resource limit for a tenant.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ResourceLimitsPeriod {", "originalCommit": "0b531467a5efe6a3d0ad01f59c7309d09e5b5fae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNzI2NQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371107265", "bodyText": "Yes. My idea is to deprecate DataVolumePeriod and use this in future for the DataVolume.", "author": "kaniyan", "createdAt": "2020-01-27T08:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNjU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNzczNQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371107735", "bodyText": "sounds reasonable, the deprecation should then also be part of this PR, I guess", "author": "sophokles73", "createdAt": "2020-01-27T08:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNjU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwODEwOQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371108109", "bodyText": "yes, I will add it.", "author": "kaniyan", "createdAt": "2020-01-27T08:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNjU3OQ=="}], "type": "inlineReview"}, {"oid": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "url": "https://github.com/eclipse/hono/commit/99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "message": "[#1716] Extend resource limit checks for connection duration.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>", "committedDate": "2020-01-27T12:15:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MzczNQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371253735", "bodyText": "did you omit a getter/setter for period by intention?", "author": "sophokles73", "createdAt": "2020-01-27T13:59:05Z", "path": "core/src/main/java/org/eclipse/hono/util/ConnectionDuration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * The resource limits definition corresponding to the connection duration.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ConnectionDuration {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_EFFECTIVE_SINCE, required = true)\n+    @HonoTimestamp\n+    private Instant effectiveSince;\n+\n+    @JsonProperty(TenantConstants.FIELD_MAX_MINUTES)\n+    private long maxMinutes = TenantConstants.UNLIMITED_MINUTES;\n+\n+    @JsonProperty(TenantConstants.FIELD_PERIOD)\n+    private ResourceLimitsPeriod period;", "originalCommit": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5MTI1NA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371691254", "bodyText": "My bad, I have added it now.", "author": "kaniyan", "createdAt": "2020-01-28T09:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MzczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NDExOA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371254118", "bodyText": "isn't there a constant for this value? Is 0 a reasonable value?", "author": "sophokles73", "createdAt": "2020-01-27T13:59:47Z", "path": "core/src/main/java/org/eclipse/hono/util/ConnectionDuration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * The resource limits definition corresponding to the connection duration.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ConnectionDuration {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_EFFECTIVE_SINCE, required = true)\n+    @HonoTimestamp\n+    private Instant effectiveSince;\n+\n+    @JsonProperty(TenantConstants.FIELD_MAX_MINUTES)\n+    private long maxMinutes = TenantConstants.UNLIMITED_MINUTES;\n+\n+    @JsonProperty(TenantConstants.FIELD_PERIOD)\n+    private ResourceLimitsPeriod period;\n+\n+    /**\n+     * Gets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @return The instant on which the connection duration limit came into effective or \n+     *         {@code null} if not set.\n+     */\n+    public final Instant getEffectiveSince() {\n+        return effectiveSince;\n+    }\n+\n+    /**\n+     * Sets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @param effectiveSince the point in time on which the connection duration limit came into effect\n+     *                       and it comply to the {@link DateTimeFormatter#ISO_OFFSET_DATE_TIME}.\n+     * @return  a reference to this for fluent use.\n+     */\n+    public final ConnectionDuration setEffectiveSince(final Instant effectiveSince) {\n+        this.effectiveSince = effectiveSince;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum device connection duration in minutes to be allowed for the time period \n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @return The maximum number of minutes or {@link TenantConstants#UNLIMITED_MINUTES}\n+     *         if not set.\n+     */\n+    public final long getMaxMinutes(){\n+        return maxMinutes;\n+    }\n+\n+    /**\n+     * Sets the maximum device connection duration in minutes to be allowed for the time period\n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @param maxMinutes The maximum connection duration in minutes to be allowed.\n+     * @return  a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the maximum number of minutes is set to less than -1.\n+     */\n+    public final ConnectionDuration setMaxMinutes(final long maxMinutes) {\n+        if (maxMinutes < -1) {", "originalCommit": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI5MTEzMQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371291131", "bodyText": "IMHO 0 is a reasonable value. It can be set to 0 to ensure that no more connections are allowed. Also we allow data volume to set to 0.", "author": "kaniyan", "createdAt": "2020-01-27T15:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NDExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0NDI2OA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371344268", "bodyText": "Ok, then we should allow it here as well.", "author": "sophokles73", "createdAt": "2020-01-27T16:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NDExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NTA5OQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371255099", "bodyText": "I would rather have the name indicate the purpose than the unit of the argument, e.g. setMaxDuration. The parameter name and JavaDoc already indicate the unit, don't they?", "author": "sophokles73", "createdAt": "2020-01-27T14:01:36Z", "path": "core/src/main/java/org/eclipse/hono/util/ConnectionDuration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * The resource limits definition corresponding to the connection duration.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ConnectionDuration {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_EFFECTIVE_SINCE, required = true)\n+    @HonoTimestamp\n+    private Instant effectiveSince;\n+\n+    @JsonProperty(TenantConstants.FIELD_MAX_MINUTES)\n+    private long maxMinutes = TenantConstants.UNLIMITED_MINUTES;\n+\n+    @JsonProperty(TenantConstants.FIELD_PERIOD)\n+    private ResourceLimitsPeriod period;\n+\n+    /**\n+     * Gets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @return The instant on which the connection duration limit came into effective or \n+     *         {@code null} if not set.\n+     */\n+    public final Instant getEffectiveSince() {\n+        return effectiveSince;\n+    }\n+\n+    /**\n+     * Sets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @param effectiveSince the point in time on which the connection duration limit came into effect\n+     *                       and it comply to the {@link DateTimeFormatter#ISO_OFFSET_DATE_TIME}.\n+     * @return  a reference to this for fluent use.\n+     */\n+    public final ConnectionDuration setEffectiveSince(final Instant effectiveSince) {\n+        this.effectiveSince = effectiveSince;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum device connection duration in minutes to be allowed for the time period \n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @return The maximum number of minutes or {@link TenantConstants#UNLIMITED_MINUTES}\n+     *         if not set.\n+     */\n+    public final long getMaxMinutes(){\n+        return maxMinutes;\n+    }\n+\n+    /**\n+     * Sets the maximum device connection duration in minutes to be allowed for the time period\n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @param maxMinutes The maximum connection duration in minutes to be allowed.\n+     * @return  a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the maximum number of minutes is set to less than -1.\n+     */\n+    public final ConnectionDuration setMaxMinutes(final long maxMinutes) {", "originalCommit": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NDg3MA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371284870", "bodyText": "I set it to setMaxMinutes to keep in alignment with the existing naming convention in resource-limits namelyDataVolume.setMaxBytes(...). setMaxDuration makes more sense and we could also rename later DataVolume.setMaxBytes(...) to DataVolume.setMaxVolume(...).", "author": "kaniyan", "createdAt": "2020-01-27T14:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NTA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0MzM0OA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371343348", "bodyText": "Hm, now that you mention the DataVolume spec ... The whole class is already named ConnectionDuration so it probably is obvious that we are setting the max duration. Let's stick with maxMinutes and maxBytes. At least, this way it is consistent and we do not need to rename existing properties.", "author": "sophokles73", "createdAt": "2020-01-27T16:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NTA5OQ=="}], "type": "inlineReview"}, {"oid": "ba13983fe371c90f8da18041aea5be6bcc57fc61", "url": "https://github.com/eclipse/hono/commit/ba13983fe371c90f8da18041aea5be6bcc57fc61", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>", "committedDate": "2020-01-28T09:25:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNDY0OQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371704649", "bodyText": "IMHO this will throw a NullpointerException if the period property is not set (it is defined as optional if I am not mistaken) ...", "author": "sophokles73", "createdAt": "2020-01-28T09:58:35Z", "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/PrometheusBasedResourceLimitChecks.java", "diffHunk": "@@ -292,6 +296,108 @@ private Span createSpan(final String name, final SpanContext parent, final Tenan\n                 });\n     }\n \n+    @Override\n+    public Future<Boolean> isConnectionDurationLimitReached(\n+            final TenantObject tenant,\n+            final SpanContext spanContext) {\n+\n+        Objects.requireNonNull(tenant);\n+\n+        final Span span = createSpan(\"verify connection duration limit\", spanContext, tenant);\n+        final Map<String, Object> items = new HashMap<>();\n+\n+        final Promise<Boolean> result = Promise.promise();\n+\n+        if (tenant.getResourceLimits() == null) {\n+            items.put(Fields.EVENT, \"no resource limits configured\");\n+            log.trace(\"no resource limits configured for tenant [{}]\", tenant.getTenantId());\n+            result.complete(Boolean.FALSE);\n+        } else if (tenant.getResourceLimits().getConnectionDuration() == null) {\n+            items.put(Fields.EVENT, \"no connection duration limit configured\");\n+            log.trace(\"no connection duration limit configured for tenant [{}]\", tenant.getTenantId());\n+            result.complete(Boolean.FALSE);\n+        } else {\n+            checkConnectionDurationLimit(tenant, items, span, result);\n+        }\n+\n+        return result.future()\n+                .map(b -> {\n+                    items.put(\"limit exceeded\", b);\n+                    span.log(items);\n+                    span.finish();\n+                    return b;\n+                });\n+    }\n+\n+    private void checkConnectionDurationLimit(final TenantObject tenant, final Map<String, Object> items,\n+            final Span span, final Promise<Boolean> result) {\n+        final ConnectionDuration connectionDurationConfig = tenant.getResourceLimits().getConnectionDuration();\n+        final long maxConnectionDurationInMinutes = connectionDurationConfig.getMaxMinutes();\n+        final Instant effectiveSince = connectionDurationConfig.getEffectiveSince();\n+        final PeriodMode periodMode = PeriodMode.from(connectionDurationConfig.getPeriod().getMode());", "originalCommit": "ba13983fe371c90f8da18041aea5be6bcc57fc61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2MDg5Mg==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371760892", "bodyText": "IMHO the property period should not be optional. The property connection-duration, doesn't make sense without period. I would update it.", "author": "kaniyan", "createdAt": "2020-01-28T12:00:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNDY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4OTI1OA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371789258", "bodyText": "sounds reasonable", "author": "sophokles73", "createdAt": "2020-01-28T13:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNDY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjYyMA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371706620", "bodyText": "if this is always the current instant then I do not think that you need to pass it in as a parameter, do you?", "author": "sophokles73", "createdAt": "2020-01-28T10:02:10Z", "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/PrometheusBasedResourceLimitChecks.java", "diffHunk": "@@ -470,69 +576,61 @@ private Long extractLongValue(final JsonObject response, final Span span) {\n     }\n \n     /**\n-     * Calculates the data volume (in bytes) that is allowed for a tenant for \n-     * the current period based on the mode defined by \n-     * {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     * Calculates the effective resource limit for a tenant for the current period from the configured values.\n      * <p>\n-     * In <em>monthly</em> mode, if the effectiveSince date doesn't fall on the \n-     * first day of the month then the allowed data volume for the tenant is \n-     * calculated as below. For rest of the months and the <em>days</em> mode,\n-     * the maxBytes defined by {@link TenantConstants#FIELD_MAX_BYTES} is used directly.\n+     * In the <em>monthly</em> mode, if the effectiveSince date doesn't fall on the \n+     * first day of the month then the effective resource limit for the tenant is \n+     * calculated as below.\n      * <pre>\n-     *             maxBytes \n+     *             configured limit \n      *   ---------------------------------- x No. of days from effectiveSince till lastDay of the targetDateMonth.\n      *    No. of days in the current month\n      * </pre>\n      * <p>\n-     * \n-     * @param effectiveSince The point of time on which the data volume limit \n-     *                       came into effect.\n-     * @param targetDateTime The target point of time used for the data usage period \n-     *                       calculation.\n+     * For rest of the months and the <em>days</em> mode, the configured limit is used directly.\n+     *\n+     * @param effectiveSince The point of time on which the given resource limit came into effect.\n+     * @param currentDateTime The current date and time.\n      * @param mode The mode of the period. \n-     * @param maxBytes The maximum allowed bytes defined in configuration by \n-     *                 {@link TenantConstants#FIELD_MAX_BYTES}. \n-     * @return The allowed data-volume in bytes.\n+     * @param configuredLimit The configured limit. \n+     * @return The effective resource limit that has been calculated.\n      */\n-    long calculateDataVolume(\n+    long calculateEffectiveLimit(\n             final OffsetDateTime effectiveSince,\n-            final OffsetDateTime targetDateTime,\n+            final OffsetDateTime currentDateTime,", "originalCommit": "ba13983fe371c90f8da18041aea5be6bcc57fc61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwODQzMg==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371708432", "bodyText": "It need not be passed. I will update it.", "author": "kaniyan", "createdAt": "2020-01-28T10:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1MTA2OA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371751068", "bodyText": "As I checked, there is an existing test namely verifyEffectiveResourceLimitCalculation uses this method. It verifies the calculated limit values under various scenarios. If the current date is always the actual date time then the expected result also keeps changing and unable to verify. It is better if we have this parameter, so that a fixed date time can be passed and the calculated value can be verified.  WDYT?", "author": "kaniyan", "createdAt": "2020-01-28T11:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4OTA4OA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371789088", "bodyText": "That is also ok and indeed helpful for testing. However, the parameter then should not be named currentDateTime but keep its original name FMPOV", "author": "sophokles73", "createdAt": "2020-01-28T13:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5MTU2Mw==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371791563", "bodyText": "yes, I will keep the original name.", "author": "kaniyan", "createdAt": "2020-01-28T13:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjYyMA=="}], "type": "inlineReview"}, {"oid": "0e458cab947321fcc78a11ad2b25e5249ff69b89", "url": "https://github.com/eclipse/hono/commit/0e458cab947321fcc78a11ad2b25e5249ff69b89", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>", "committedDate": "2020-01-28T13:25:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MzE0NQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371853145", "bodyText": "if period is mandatory, can you set it to null?", "author": "sophokles73", "createdAt": "2020-01-28T14:57:50Z", "path": "core/src/main/java/org/eclipse/hono/util/ConnectionDuration.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * The resource limits definition corresponding to the connection duration.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ConnectionDuration {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_EFFECTIVE_SINCE, required = true)\n+    @HonoTimestamp\n+    private Instant effectiveSince;\n+\n+    @JsonProperty(TenantConstants.FIELD_MAX_MINUTES)\n+    private long maxMinutes = TenantConstants.UNLIMITED_MINUTES;\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD, required = true)\n+    private ResourceLimitsPeriod period;\n+\n+    /**\n+     * Gets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @return The instant on which the connection duration limit came into effective or \n+     *         {@code null} if not set.\n+     */\n+    public final Instant getEffectiveSince() {\n+        return effectiveSince;\n+    }\n+\n+    /**\n+     * Sets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @param effectiveSince the point in time on which the connection duration limit came into effect\n+     *                       and it comply to the {@link DateTimeFormatter#ISO_OFFSET_DATE_TIME}.\n+     * @return  a reference to this for fluent use.\n+     */\n+    public final ConnectionDuration setEffectiveSince(final Instant effectiveSince) {\n+        this.effectiveSince = effectiveSince;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum device connection duration in minutes to be allowed for the time period \n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @return The maximum connection duration in minutes or {@link TenantConstants#UNLIMITED_MINUTES}\n+     *         if not set.\n+     */\n+    public final long getMaxMinutes(){\n+        return maxMinutes;\n+    }\n+\n+    /**\n+     * Sets the maximum device connection duration in minutes to be allowed for the time period\n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @param maxMinutes The maximum connection duration in minutes to be allowed.\n+     * @return  a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the maximum number of minutes is set to less than \n+     *                                  {@link TenantConstants#UNLIMITED_MINUTES}.\n+     */\n+    public final ConnectionDuration setMaxDuration(final long maxMinutes) {\n+        if (maxMinutes < TenantConstants.UNLIMITED_MINUTES) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Maximum minutes must be set to value >= %s\", TenantConstants.UNLIMITED_MINUTES));\n+        }\n+        this.maxMinutes = maxMinutes;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the period for the connection duration calculation.\n+     *\n+     * @return The period for the connection duration calculation.\n+     */\n+    public final ResourceLimitsPeriod getPeriod() {\n+        return period;\n+    }\n+\n+    /**\n+     * Sets the period for the connection duration calculation.\n+     *\n+     * @param period The period for the connection duration calculation.\n+     * @return a reference to this for fluent use.\n+     */\n+    public final ConnectionDuration setPeriod(final ResourceLimitsPeriod period) {", "originalCommit": "0e458cab947321fcc78a11ad2b25e5249ff69b89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1NjcxMw==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372356713", "bodyText": "Done.", "author": "kaniyan", "createdAt": "2020-01-29T12:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MzE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NDQ1Nw==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371854457", "bodyText": "can you set this to null?", "author": "sophokles73", "createdAt": "2020-01-28T14:59:48Z", "path": "core/src/main/java/org/eclipse/hono/util/ResourceLimitsPeriod.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The period definition corresponding to a resource limit for a tenant.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ResourceLimitsPeriod {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD_MODE, required = true)\n+    private String mode;\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD_NO_OF_DAYS)\n+    private int noOfDays;\n+\n+    /**\n+     * Gets the mode of period for resource limit calculation.\n+     *\n+     * @return The mode of period for resource limit calculation.\n+     */\n+    public final String getMode() {\n+        return mode;\n+    }\n+\n+    /**\n+     * Sets the mode of period for resource limit calculation.\n+     *\n+     * @param mode The mode of period for resource limit calculation.\n+     * @return  a reference to this for fluent use.\n+     */\n+    public final ResourceLimitsPeriod setMode(final String mode) {", "originalCommit": "0e458cab947321fcc78a11ad2b25e5249ff69b89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1NjczMQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372356731", "bodyText": "Done.", "author": "kaniyan", "createdAt": "2020-01-29T12:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NDQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODEwMA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371858100", "bodyText": "could this method be moved to ResourceLimitPeriod? It doesn't seem to be tied to a Prometheus specific implementation of checks but provides a rather generic helper, doesn't it?", "author": "sophokles73", "createdAt": "2020-01-28T15:05:39Z", "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/PrometheusBasedResourceLimitChecks.java", "diffHunk": "@@ -470,69 +576,61 @@ private Long extractLongValue(final JsonObject response, final Span span) {\n     }\n \n     /**\n-     * Calculates the data volume (in bytes) that is allowed for a tenant for \n-     * the current period based on the mode defined by \n-     * {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     * Calculates the effective resource limit for a tenant for the given period from the configured values.\n      * <p>\n-     * In <em>monthly</em> mode, if the effectiveSince date doesn't fall on the \n-     * first day of the month then the allowed data volume for the tenant is \n-     * calculated as below. For rest of the months and the <em>days</em> mode,\n-     * the maxBytes defined by {@link TenantConstants#FIELD_MAX_BYTES} is used directly.\n+     * In the <em>monthly</em> mode, if the effectiveSince date doesn't fall on the \n+     * first day of the month then the effective resource limit for the tenant is \n+     * calculated as below.\n      * <pre>\n-     *             maxBytes \n+     *             configured limit \n      *   ---------------------------------- x No. of days from effectiveSince till lastDay of the targetDateMonth.\n      *    No. of days in the current month\n      * </pre>\n      * <p>\n-     * \n-     * @param effectiveSince The point of time on which the data volume limit \n-     *                       came into effect.\n-     * @param targetDateTime The target point of time used for the data usage period \n-     *                       calculation.\n+     * For rest of the months and the <em>days</em> mode, the configured limit is used directly.\n+     *\n+     * @param effectiveSince The point of time on which the given resource limit came into effect.\n+     * @param targetDateTime The target date and time.\n      * @param mode The mode of the period. \n-     * @param maxBytes The maximum allowed bytes defined in configuration by \n-     *                 {@link TenantConstants#FIELD_MAX_BYTES}. \n-     * @return The allowed data-volume in bytes.\n+     * @param configuredLimit The configured limit. \n+     * @return The effective resource limit that has been calculated.\n      */\n-    long calculateDataVolume(\n+    long calculateEffectiveLimit(\n             final OffsetDateTime effectiveSince,\n             final OffsetDateTime targetDateTime,\n             final PeriodMode mode,\n-            final long maxBytes) {\n+            final long configuredLimit) {\n         if (PeriodMode.MONTHLY.equals(mode)\n-                && maxBytes > 0\n+                && configuredLimit > 0\n                 && !targetDateTime.isBefore(effectiveSince)\n                 && YearMonth.from(targetDateTime).equals(YearMonth.from(effectiveSince))\n                 && effectiveSince.getDayOfMonth() != 1) {\n             final OffsetDateTime lastDayOfMonth = effectiveSince.with(TemporalAdjusters.lastDayOfMonth());\n             final long daysBetween = ChronoUnit.DAYS\n                     .between(effectiveSince, lastDayOfMonth) + 1;\n-            return Double.valueOf(Math.ceil(daysBetween * maxBytes / lastDayOfMonth.getDayOfMonth())).longValue();\n+            return Double.valueOf(Math.ceil(daysBetween * configuredLimit / lastDayOfMonth.getDayOfMonth()))\n+                    .longValue();\n         }\n-        return maxBytes;\n+        return configuredLimit;\n     }\n \n     /**\n-     * Calculates the period for which the data usage is to be retrieved from the\n-     * prometheus server based on the mode defined by \n+     * Calculates the period for which the resource usage like volume of used data, connection duration etc. \n+     * is to be retrieved from the Prometheus server based on the mode defined by \n      * {@link TenantConstants#FIELD_PERIOD_MODE}.\n      *\n-     * @param effectiveSince The point of time on which the data volume limit came\n-     *                      into effect.\n-     * @param targetDateTime The target point of time used for the data usage period \n-     *                       calculation.\n-     * @param mode The mode of the period defined by\n-     *                   {@link TenantConstants#FIELD_PERIOD_MODE}.\n-     * @param periodInDays The number of days defined by \n-     *                     {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}. \n-     * @return The period in days for which the data usage is to be calculated.\n+     * @param effectiveSince The point of time on which the resource limit came into effect.\n+     * @param currentDateTime The current date and time used for the resource usage period calculation.\n+     * @param mode The mode of the period defined by {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     * @param periodInDays The number of days defined by {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}. \n+     * @return The period in days for which the resource usage is to be calculated.\n      */\n-    long calculateDataUsagePeriod(\n+    long calculateResourceUsagePeriod(", "originalCommit": "0e458cab947321fcc78a11ad2b25e5249ff69b89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1NjYxMQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372356611", "bodyText": "I have moved the calculateResourceUsagePeriod to ResourceLimitPeriod. I have pushed the changes. Would you mind taking a look?", "author": "kaniyan", "createdAt": "2020-01-29T12:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODEwMA=="}], "type": "inlineReview"}, {"oid": "dd5b8cd4ca94c1bb394aae281da2fcd013fd7a3d", "url": "https://github.com/eclipse/hono/commit/dd5b8cd4ca94c1bb394aae281da2fcd013fd7a3d", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-29T12:25:08Z", "type": "forcePushed"}, {"oid": "5ceeaf604d524ff1b57ba7068ee354b4257b8dcd", "url": "https://github.com/eclipse/hono/commit/5ceeaf604d524ff1b57ba7068ee354b4257b8dcd", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-29T12:41:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MTM2OA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372361368", "bodyText": "I would have expected this method to not be final but instead operate on the instance's fields instead of passing in the mode and periodInDays or doesn't that work?", "author": "sophokles73", "createdAt": "2020-01-29T12:46:01Z", "path": "core/src/main/java/org/eclipse/hono/util/ResourceLimitsPeriod.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.time.OffsetDateTime;\n+import java.time.YearMonth;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Objects;\n+\n+/**\n+ * The period definition corresponding to a resource limit for a tenant.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ResourceLimitsPeriod {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD_MODE, required = true)\n+    private String mode;\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD_NO_OF_DAYS)\n+    private int noOfDays;\n+\n+    /**\n+     * Gets the mode of period for resource limit calculation.\n+     *\n+     * @return The mode of period for resource limit calculation.\n+     */\n+    public final String getMode() {\n+        return mode;\n+    }\n+\n+    /**\n+     * Sets the mode of period for resource limit calculation.\n+     *\n+     * @param mode The mode of period for resource limit calculation.\n+     * @return  a reference to this for fluent use.\n+     * @throws NullPointerException if mode is {@code null}.\n+     */\n+    public final ResourceLimitsPeriod setMode(final String mode) {\n+        this.mode = Objects.requireNonNull(mode);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the number of days for which resource usage is calculated.\n+     *\n+     * @return The number of days for a resource limit calculation.\n+     */\n+    public final int getNoOfDays() {\n+        return noOfDays;\n+    }\n+\n+    /**\n+     * Sets the number of days for which resource usage is calculated.\n+     *\n+     * @param noOfDays The number of days for which resource usage is calculated.\n+     * @return  a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the number of days is negative.\n+     */\n+    public final ResourceLimitsPeriod setNoOfDays(final int noOfDays) {\n+        if (noOfDays < 0) {\n+            throw new IllegalArgumentException(\"Number of days property must be  set to value >= 0\");\n+        }\n+        this.noOfDays = noOfDays;\n+        return this;\n+    }\n+\n+    /**\n+     * Calculates the period in days for which the resource usage like volume of used data, \n+     * connection duration etc. is to be calculated based on the mode defined by \n+     * {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     *\n+     * @param effectiveSince The point of time on which the resource limit came into effect.\n+     * @param targetDateTime The target date and time used for the resource usage period calculation.\n+     * @param mode The mode of the period defined by {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     * @param periodInDays The number of days defined by {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}. \n+     * @return The period in days for which the resource usage is to be calculated.\n+     * @throws NullPointerException if effectiveSince, targetDateTime or mode is {@code null}.\n+     */\n+    public static long calculateResourceUsagePeriod(", "originalCommit": "5ceeaf604d524ff1b57ba7068ee354b4257b8dcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MTQ5Mg==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372371492", "bodyText": "The DataVolume is still using DataVolumePeriod not  ResourceLimitsPeriod. Until then the mode and periodInDays have to be passed.", "author": "kaniyan", "createdAt": "2020-01-29T13:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQwNjAwMw==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372406003", "bodyText": "We could create a common abstract base class for DataVolumePeriod and ResourceLimitsPeriod which defines the shared functionality. WDYT?", "author": "sophokles73", "createdAt": "2020-01-29T14:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxNTE1OQ==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372415159", "bodyText": "Yes we can create one base class. But I think then it needs to be marked as deprecated for removal in 2.0.0. Once the DataVolumePeriod has been removed, then this new base class should be merged with ResourceLimitsPeriod. Considering the new base class and the related changes, I am wondering if it is worthwhile to move now the calculateResourceUsagePeriod from the PrometheusBasedResourceLimitChecks. I think while removing the DataVolumePeriod, this activity can also be carried out. WDYT?", "author": "kaniyan", "createdAt": "2020-01-29T14:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNzQyNg==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372427426", "bodyText": "I agree, it's not worth the effort to move the code at all for the time being ...", "author": "sophokles73", "createdAt": "2020-01-29T14:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ0MTk0Nw==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372441947", "bodyText": "For the time being I have reverted this method back to the PrometheusBasedResourceLimitChecks. Please take a look.", "author": "kaniyan", "createdAt": "2020-01-29T15:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MTM2OA=="}], "type": "inlineReview"}, {"oid": "87a37eb6816af8388b8e6ea409003ef992e121c3", "url": "https://github.com/eclipse/hono/commit/87a37eb6816af8388b8e6ea409003ef992e121c3", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-29T12:56:36Z", "type": "forcePushed"}, {"oid": "2188770b24ede3d400d77e9d9830ff7b5a168f1f", "url": "https://github.com/eclipse/hono/commit/2188770b24ede3d400d77e9d9830ff7b5a168f1f", "message": "[#1716] Extend Tenant API for connection duration limit.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-29T15:12:15Z", "type": "commit"}, {"oid": "4aa564f28e08391217aa31a71a75db22b70f075b", "url": "https://github.com/eclipse/hono/commit/4aa564f28e08391217aa31a71a75db22b70f075b", "message": "[#1716] Deprecate DataVolumePeriod in favor of ResourceLimitsPeriod.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-29T15:12:15Z", "type": "commit"}, {"oid": "8926780230910fe3892b83fcdb72d937fb2cfff5", "url": "https://github.com/eclipse/hono/commit/8926780230910fe3892b83fcdb72d937fb2cfff5", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-29T15:12:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNDI4NA==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372514284", "bodyText": "this is not a limit but simply the current period's connection duration, isn't it?", "author": "sophokles73", "createdAt": "2020-01-29T17:09:14Z", "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/PrometheusBasedResourceLimitChecks.java", "diffHunk": "@@ -292,6 +296,108 @@ private Span createSpan(final String name, final SpanContext parent, final Tenan\n                 });\n     }\n \n+    @Override\n+    public Future<Boolean> isConnectionDurationLimitReached(\n+            final TenantObject tenant,\n+            final SpanContext spanContext) {\n+\n+        Objects.requireNonNull(tenant);\n+\n+        final Span span = createSpan(\"verify connection duration limit\", spanContext, tenant);\n+        final Map<String, Object> items = new HashMap<>();\n+\n+        final Promise<Boolean> result = Promise.promise();\n+\n+        if (tenant.getResourceLimits() == null) {\n+            items.put(Fields.EVENT, \"no resource limits configured\");\n+            log.trace(\"no resource limits configured for tenant [{}]\", tenant.getTenantId());\n+            result.complete(Boolean.FALSE);\n+        } else if (tenant.getResourceLimits().getConnectionDuration() == null) {\n+            items.put(Fields.EVENT, \"no connection duration limit configured\");\n+            log.trace(\"no connection duration limit configured for tenant [{}]\", tenant.getTenantId());\n+            result.complete(Boolean.FALSE);\n+        } else {\n+            checkConnectionDurationLimit(tenant, items, span, result);\n+        }\n+\n+        return result.future()\n+                .map(b -> {\n+                    items.put(\"limit exceeded\", b);\n+                    span.log(items);\n+                    span.finish();\n+                    return b;\n+                });\n+    }\n+\n+    private void checkConnectionDurationLimit(final TenantObject tenant, final Map<String, Object> items,\n+            final Span span, final Promise<Boolean> result) {\n+        final ConnectionDuration connectionDurationConfig = tenant.getResourceLimits().getConnectionDuration();\n+        final long maxConnectionDurationInMinutes = connectionDurationConfig.getMaxMinutes();\n+        final Instant effectiveSince = connectionDurationConfig.getEffectiveSince();\n+        final PeriodMode periodMode = PeriodMode.from(connectionDurationConfig.getPeriod().getMode());\n+        final long periodInDays = Optional.ofNullable(connectionDurationConfig.getPeriod())\n+                .map(ResourceLimitsPeriod::getNoOfDays)\n+                .orElse(0);\n+\n+        log.trace(\"connection duration config for the tenant [{}] is [{}:{}, {}:{}, {}:{}, {}:{}]\",\n+                tenant.getTenantId(),\n+                TenantConstants.FIELD_MAX_MINUTES, maxConnectionDurationInMinutes,\n+                TenantConstants.FIELD_EFFECTIVE_SINCE, effectiveSince,\n+                TenantConstants.FIELD_PERIOD_MODE, periodMode,\n+                TenantConstants.FIELD_PERIOD_NO_OF_DAYS, periodInDays);\n+\n+        if (maxConnectionDurationInMinutes == TenantConstants.UNLIMITED_MINUTES || effectiveSince == null || PeriodMode.UNKNOWN.equals(periodMode)) {\n+            result.complete(Boolean.FALSE);\n+        } else {\n+            final long allowedMaxMinutes = getOrAddToCache(limitsCache,\n+                    String.format(\"%s_allowed_max_minutes\", tenant.getTenantId()),\n+                    () -> calculateEffectiveLimit(\n+                            OffsetDateTime.ofInstant(effectiveSince, ZoneOffset.UTC),\n+                            OffsetDateTime.now(ZoneOffset.UTC),\n+                            periodMode,\n+                            maxConnectionDurationInMinutes));\n+            final long connectionDurationUsagePeriod = getOrAddToCache(limitsCache,\n+                    String.format(\"%s_conn_duration_usage_period\", tenant.getTenantId()),\n+                    () -> calculateResourceUsagePeriod(\n+                            OffsetDateTime.ofInstant(effectiveSince, ZoneOffset.UTC),\n+                            OffsetDateTime.now(ZoneOffset.UTC),\n+                            periodMode,\n+                            periodInDays));\n+\n+            items.put(\"current period connection duration limit in minutes\", allowedMaxMinutes);\n+\n+            if (connectionDurationUsagePeriod <= 0) {\n+                result.complete(Boolean.FALSE);\n+            } else {\n+                final String queryParams = String.format(\"minute( sum (increase (%s {tenant=\\\"%s\\\"} [%sd])))\",\n+                        CONNECTIONS_DURATION_METRIC_NAME,\n+                        tenant.getTenantId(),\n+                        connectionDurationUsagePeriod);\n+                final String key = String.format(\"%s_minutes_consumed\", tenant.getTenantId());\n+\n+                Optional.ofNullable(limitsCache)\n+                        .map(ok -> limitsCache.get(key))\n+                        .map(cachedValue -> Future.succeededFuture((long) cachedValue))\n+                        .orElseGet(() -> executeQuery(queryParams, span)\n+                                .map(minutesConnected -> addToCache(limitsCache, key, minutesConnected)))\n+                        .map(minutesConnected -> {\n+                            items.put(\"current period connection duration limit in minutes\", minutesConnected);", "originalCommit": "8926780230910fe3892b83fcdb72d937fb2cfff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNzI4Nw==", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372827287", "bodyText": "yes, I have updated it and pushed the change.", "author": "kaniyan", "createdAt": "2020-01-30T09:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNDI4NA=="}], "type": "inlineReview"}, {"oid": "576a28cd0050a7bf52f89f3e128965078b493a60", "url": "https://github.com/eclipse/hono/commit/576a28cd0050a7bf52f89f3e128965078b493a60", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-30T09:00:33Z", "type": "forcePushed"}, {"oid": "567f3446f7c30a641874acc7fc44593bdcd292c5", "url": "https://github.com/eclipse/hono/commit/567f3446f7c30a641874acc7fc44593bdcd292c5", "message": "[#1716] Extend resource limit checks for connection duration.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-30T10:19:05Z", "type": "commit"}, {"oid": "8ac17fe4d9fbe1732be880631b0d07fcf466d81c", "url": "https://github.com/eclipse/hono/commit/8ac17fe4d9fbe1732be880631b0d07fcf466d81c", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-30T10:19:05Z", "type": "commit"}, {"oid": "8ac17fe4d9fbe1732be880631b0d07fcf466d81c", "url": "https://github.com/eclipse/hono/commit/8ac17fe4d9fbe1732be880631b0d07fcf466d81c", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>", "committedDate": "2020-01-30T10:19:05Z", "type": "forcePushed"}]}