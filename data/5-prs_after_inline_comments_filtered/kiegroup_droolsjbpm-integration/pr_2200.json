{"pr_number": 2200, "pr_title": "[JBPM-9296]  Self contained Audit/History module", "pr_createdAt": "2020-08-17T10:55:33Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200", "timeline": [{"oid": "15b5aa477fc9552606e80329a1fa1c92554a14e6", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/15b5aa477fc9552606e80329a1fa1c92554a14e6", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-18T10:37:41Z", "type": "forcePushed"}, {"oid": "8eaca2a50a6dde3601bc6a6087047edc59a2b2c4", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/8eaca2a50a6dde3601bc6a6087047edc59a2b2c4", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-18T10:39:09Z", "type": "forcePushed"}, {"oid": "d4832f88e85b4b3348ad522c8cfd2e7f08e4bb3e", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/d4832f88e85b4b3348ad522c8cfd2e7f08e4bb3e", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-18T16:00:45Z", "type": "forcePushed"}, {"oid": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-19T07:50:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzMTc3OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r473831778", "bodyText": "Maybe we can also mention we can query by tasks also here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ApiOperation(value = \"Queries processes by variables\")\n          \n          \n            \n                @ApiOperation(value = \"Queries processes by variables and tasks\")", "author": "afalhambra", "createdAt": "2020-08-20T09:52:49Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-jbpm/src/main/java/org/kie/server/remote/rest/jbpm/RuntimeDataResource.java", "diffHunk": "@@ -766,10 +768,12 @@ public Response getTasksByVariables(@Context HttpHeaders headers,\n         }\n     }\n \n+    @ApiOperation(value = \"Queries processes by variables\")", "originalCommit": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3NjUwNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r475476505", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-24T09:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzMTc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0MzMxMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r473843310", "bodyText": "IOException not thrown in this code. Please remove", "author": "afalhambra", "createdAt": "2020-08-20T10:07:03Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-common/src/main/java/org/kie/server/remote/rest/common/marker/KieServerEndpointRequestFilter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.remote.rest.common.marker;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType;\n+\n+import static java.util.Arrays.asList;\n+import static javax.ws.rs.core.Response.Status.SERVICE_UNAVAILABLE;\n+\n+@Provider\n+public class KieServerEndpointRequestFilter implements ContainerRequestFilter {\n+\n+    private final List<EndpointType> valid = Arrays.asList(KieServerEndpoint.EndpointType.ALWAYS, KieServerEndpoint.EndpointType.HISTORY);\n+\n+    @Context\n+    private ResourceInfo resourceInfo;\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext) throws IOException {", "originalCommit": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3NjI2NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r475476264", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-08-24T09:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0MzMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0OTAwNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r473849004", "bodyText": "Maybe we can also mention we can query by tasks also here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ApiOperation(value = \"Queries cases by variables\")\n          \n          \n            \n                @ApiOperation(value = \"Queries cases by variables and tasks\")", "author": "afalhambra", "createdAt": "2020-08-20T10:13:46Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-case-mgmt/src/main/java/org/kie/server/remote/rest/casemgmt/CaseQueryResource.java", "diffHunk": "@@ -376,10 +378,12 @@ public Response getCaseInstanceDataItems(@javax.ws.rs.core.Context HttpHeaders h\n                 });\n     }\n \n+    @ApiOperation(value = \"Queries cases by variables\")", "originalCommit": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3NjAyNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r475476024", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-24T09:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0OTAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1MzE5OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r473853199", "bodyText": "column param should be null? - guess there is no real impact at the end, but maybe it's worth to avoid confusions.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new QueryParam(\"TABLE\", \"MODE\", Arrays.asList(\"HISTORY\"));\n          \n          \n            \n                    return new QueryParam(null, \"MODE\", Arrays.asList(\"HISTORY\"));", "author": "afalhambra", "createdAt": "2020-08-20T10:19:02Z", "path": "kie-server-parent/kie-server-api/src/main/java/org/kie/server/api/util/QueryParamFactory.java", "diffHunk": "@@ -102,6 +102,10 @@ public static QueryParam type(String column, Comparable<?> type) {\n         return new QueryParam(column, \"TYPE\", Arrays.asList(type));\n     }\n \n+    public static QueryParam history() {\n+        return new QueryParam(\"TABLE\", \"MODE\", Arrays.asList(\"HISTORY\"));", "originalCommit": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3NDgxNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r475474817", "bodyText": "it does not really matter. I set it to table for convenience.", "author": "elguardian", "createdAt": "2020-08-24T09:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1MzE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NjI4Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r473876287", "bodyText": "We're not actually calling any history data here. Wouldn't it make sense to have some task variable attributes to search for? and check data returned afterwards? wdyt?\nWould be nice to a similar test for cases as well.", "author": "afalhambra", "createdAt": "2020-08-20T10:48:40Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-jbpm/src/test/java/org/kie/server/integrationtests/jbpm/RuntimeDataServiceIntegrationTest.java", "diffHunk": "@@ -1866,6 +1868,12 @@ public void testQueryProcessesByVariables() throws Exception {\n         assertNotNull(listProcesses);\n         listProcesses.stream().forEach(e -> assertEquals(CONTAINER_ID, e.getContainerId()));\n \n+        SearchQueryFilterSpec specHistory = new SearchQueryFilterSpec();\n+        specHistory.setAttributesQueryParams(list(history(), equalsTo(PROCESS_ATTR_DEPLOYMENT_ID, CONTAINER_ID)));\n+        List<ProcessInstanceCustomVars> listHistoryProcesses = queryClient.queryProcessesByVariables(specHistory, 0, 2);\n+        assertNotNull(listHistoryProcesses);\n+        listHistoryProcesses.stream().forEach(e -> assertEquals(CONTAINER_ID, e.getContainerId()));\n+        ", "originalCommit": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3ODI5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r475478293", "bodyText": "actually we are doing. history is doing the integration test with audit tables already. This is tested at jbpm side. See code coverage.", "author": "elguardian", "createdAt": "2020-08-24T09:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NjI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MTk1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r473891956", "bodyText": "Maybe x-history makes more sense here? not sure, wdyt?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String SWAGGER_EXTENSION_READ_ONLY = \"x-readonly\"; \n          \n          \n            \n                public static final String SWAGGER_EXTENSION_READ_ONLY = \"x-history\";", "author": "afalhambra", "createdAt": "2020-08-20T11:12:33Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-swagger/src/main/java/org/kie/server/remote/rest/swagger/HistorySwaggerDecoration.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.remote.rest.swagger;\n+\n+import static java.util.Arrays.asList;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.ws.rs.GET;\n+\n+import org.kie.server.remote.rest.common.marker.KieServerEndpoint;\n+import org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType;\n+\n+import io.swagger.jaxrs.ext.AbstractSwaggerExtension;\n+import io.swagger.jaxrs.ext.SwaggerExtension;\n+import io.swagger.models.Operation;\n+\n+\n+public class HistorySwaggerDecoration extends AbstractSwaggerExtension {\n+\n+    public static final String SWAGGER_EXTENSION_READ_ONLY = \"x-readonly\"; ", "originalCommit": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3NjkzNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r475476937", "bodyText": "not really. At first I thought history was the good one, but all operations are read only for database. I think makes more sense.", "author": "elguardian", "createdAt": "2020-08-24T09:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MTk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MjkxMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r473892911", "bodyText": "We don't need to use Mockito here. Please remove", "author": "afalhambra", "createdAt": "2020-08-20T11:14:32Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-swagger/src/test/java/org/kie/server/remote/rest/swagger/HistorySwaggerDecorationTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.remote.rest.swagger;\n+\n+import static java.util.Collections.emptyListIterator;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.CoreMatchers.not;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.server.remote.rest.common.marker.KieServerEndpoint;\n+import org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType;\n+import org.kie.server.remote.rest.common.marker.KieServerEndpointRequestFilter;\n+import org.mockito.InjectMocks;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import io.swagger.models.Operation;\n+\n+@RunWith(MockitoJUnitRunner.class)", "originalCommit": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3Nzc5Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r475477792", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-08-24T09:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MzA0OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r473893049", "bodyText": "Not needed. Please remove.", "author": "afalhambra", "createdAt": "2020-08-20T11:14:49Z", "path": "kie-server-parent/kie-server-remote/kie-server-rest/kie-server-rest-swagger/src/test/java/org/kie/server/remote/rest/swagger/HistorySwaggerDecorationTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.remote.rest.swagger;\n+\n+import static java.util.Collections.emptyListIterator;\n+import static org.hamcrest.CoreMatchers.hasItems;\n+import static org.hamcrest.CoreMatchers.not;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.server.remote.rest.common.marker.KieServerEndpoint;\n+import org.kie.server.remote.rest.common.marker.KieServerEndpoint.EndpointType;\n+import org.kie.server.remote.rest.common.marker.KieServerEndpointRequestFilter;\n+import org.mockito.InjectMocks;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import io.swagger.models.Operation;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HistorySwaggerDecorationTest {\n+\n+    \n+    static class TestSimpleOperations {\n+        @GET\n+        public void test1() {\n+            // nothing\n+        }\n+        @POST\n+        public void test2() {\n+            // nothing\n+        }\n+    }\n+\n+    static class TestAnnotationOperations {\n+        @KieServerEndpoint(categories = EndpointType.DEFAULT)\n+        public void test1() {\n+            // nothing\n+        }\n+        @KieServerEndpoint(categories = EndpointType.ALWAYS)\n+        public void test2() {\n+            // nothing\n+        }\n+        @KieServerEndpoint(categories = EndpointType.HISTORY)\n+        public void test3() {\n+            // nothing\n+        }\n+    }\n+\n+    @KieServerEndpoint(categories = EndpointType.HISTORY)\n+    static class TestTypeAnnotationOperations {\n+        @KieServerEndpoint(categories = EndpointType.DEFAULT)\n+        public void test1() {\n+            // nothing\n+        }\n+\n+        public void test2() {\n+            // nothing\n+        }\n+    }\n+    \n+\n+\n+    \n+\n+    @InjectMocks\n+    private KieServerEndpointRequestFilter filter = new KieServerEndpointRequestFilter();", "originalCommit": "c7c7146abe4efe47a3cddbd8b4b17a04821712b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3NzkyNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2200#discussion_r475477925", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-08-24T09:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MzA0OQ=="}], "type": "inlineReview"}, {"oid": "86dfd09539f6422055b256d24352b671c7664e59", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/86dfd09539f6422055b256d24352b671c7664e59", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-24T09:47:37Z", "type": "forcePushed"}, {"oid": "9b8aeee235e70e55e0353d649cdca98ff39ac008", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/9b8aeee235e70e55e0353d649cdca98ff39ac008", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-24T09:58:10Z", "type": "commit"}, {"oid": "9b8aeee235e70e55e0353d649cdca98ff39ac008", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/9b8aeee235e70e55e0353d649cdca98ff39ac008", "message": "[JBPM-9296] Self contained Audit/History module", "committedDate": "2020-08-24T09:58:10Z", "type": "forcePushed"}]}