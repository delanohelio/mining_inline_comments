{"pr_number": 964, "pr_title": "Add hook for custom damage logic", "pr_createdAt": "2020-07-28T17:20:26Z", "pr_url": "https://github.com/FabricMC/fabric/pull/964", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgxOTI2MA==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r461819260", "bodyText": "No need for else block here, drop the else half and just return amount.", "author": "i509VCB", "createdAt": "2020-07-28T19:26:37Z", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/mixin/item/ItemStackMixin.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.item;\n+\n+import java.util.function.Consumer;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyArg;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.item.v1.CustomDamageHandler;\n+\n+@Mixin(ItemStack.class)\n+public abstract class ItemStackMixin {\n+\t@Shadow public abstract Item getItem();\n+\n+\t@Unique\n+\tprivate LivingEntity fabric_damagingEntity;\n+\n+\t@Unique\n+\tprivate Consumer<LivingEntity> fabric_breakCallback;\n+\n+\t@Inject(method = \"damage(ILnet/minecraft/entity/LivingEntity;Ljava/util/function/Consumer;)V\",\n+\t\t\tat = @At(\"HEAD\"))\n+\tprivate void saveDamager(int amount, LivingEntity entity, Consumer<LivingEntity> breakCallback, CallbackInfo ci) {\n+\t\tthis.fabric_damagingEntity = entity;\n+\t\tthis.fabric_breakCallback = breakCallback;\n+\t}\n+\n+\t@ModifyArg(method = \"damage(ILnet/minecraft/entity/LivingEntity;Ljava/util/function/Consumer;)V\",\n+\t\t\tat = @At(value = \"INVOKE\", target = \"Lnet/minecraft/item/ItemStack;damage(ILjava/util/Random;Lnet/minecraft/server/network/ServerPlayerEntity;)Z\"),\n+\t\t\tindex = 0)\n+\tprivate int hookDamage(int amount) {\n+\t\tif (getItem() instanceof CustomDamageHandler) {\n+\t\t\treturn ((CustomDamageHandler) getItem()).damage((ItemStack) (Object) this, amount, fabric_damagingEntity, fabric_breakCallback);\n+\t\t} else {\n+\t\t\treturn amount;", "originalCommit": "f42afd05e6eea04fd9595570dfd44ce9b09b5fff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyMDcyOQ==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r461820729", "bodyText": "I very much disagree with modmuss's stance on keeping the entire mixin statement on one line, I may revisit this with a conventions document I'll propose in a few days.\nFor now I think modmuss wants these mixin annotations as one liners.", "author": "i509VCB", "createdAt": "2020-07-28T19:29:18Z", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/mixin/item/ItemStackMixin.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.item;\n+\n+import java.util.function.Consumer;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyArg;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.item.v1.CustomDamageHandler;\n+\n+@Mixin(ItemStack.class)\n+public abstract class ItemStackMixin {\n+\t@Shadow public abstract Item getItem();\n+\n+\t@Unique\n+\tprivate LivingEntity fabric_damagingEntity;\n+\n+\t@Unique\n+\tprivate Consumer<LivingEntity> fabric_breakCallback;\n+\n+\t@Inject(method = \"damage(ILnet/minecraft/entity/LivingEntity;Ljava/util/function/Consumer;)V\",\n+\t\t\tat = @At(\"HEAD\"))", "originalCommit": "f42afd05e6eea04fd9595570dfd44ce9b09b5fff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzODM5OA==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r461838398", "bodyText": "consider documenting the break callback.", "author": "liach", "createdAt": "2020-07-28T19:54:23Z", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/CustomDamageHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.item.v1;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+/**\n+ * Implement this interface on an item to run custom logic when {@link ItemStack#damage(int, LivingEntity, Consumer)} is called.\n+ */\n+public interface CustomDamageHandler {\n+\t/**\n+\t * Called to apply damage to the given stack.\n+\t * This can be used to e.g. drain from a battery before actually damaging the item\n+\t * @param amount The amount of damage originally requested\n+\t * @return The amount of damage to pass to vanilla's logic\n+\t */\n+\t<T extends LivingEntity> int damage(ItemStack stack, int amount, T entity, Consumer<T> breakCallback);", "originalCommit": "f42afd05e6eea04fd9595570dfd44ce9b09b5fff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg0MzI2Nw==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r461843267", "bodyText": "it's the same as the one passed to the vanilla method, so i'll just put a see this", "author": "williewillus", "createdAt": "2020-07-28T20:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzODM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzODgzOA==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r461838838", "bodyText": "maybe keep the result of  getItem in a local var to reduce unnecessary calls if computations are made in getItem call", "author": "liach", "createdAt": "2020-07-28T19:55:09Z", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/mixin/item/ItemStackMixin.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.item;\n+\n+import java.util.function.Consumer;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyArg;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.item.v1.CustomDamageHandler;\n+\n+@Mixin(ItemStack.class)\n+public abstract class ItemStackMixin {\n+\t@Shadow public abstract Item getItem();\n+\n+\t@Unique\n+\tprivate LivingEntity fabric_damagingEntity;\n+\n+\t@Unique\n+\tprivate Consumer<LivingEntity> fabric_breakCallback;\n+\n+\t@Inject(method = \"damage(ILnet/minecraft/entity/LivingEntity;Ljava/util/function/Consumer;)V\",\n+\t\t\tat = @At(\"HEAD\"))\n+\tprivate void saveDamager(int amount, LivingEntity entity, Consumer<LivingEntity> breakCallback, CallbackInfo ci) {\n+\t\tthis.fabric_damagingEntity = entity;\n+\t\tthis.fabric_breakCallback = breakCallback;\n+\t}\n+\n+\t@ModifyArg(method = \"damage(ILnet/minecraft/entity/LivingEntity;Ljava/util/function/Consumer;)V\",\n+\t\t\tat = @At(value = \"INVOKE\", target = \"Lnet/minecraft/item/ItemStack;damage(ILjava/util/Random;Lnet/minecraft/server/network/ServerPlayerEntity;)Z\"),\n+\t\t\tindex = 0)\n+\tprivate int hookDamage(int amount) {\n+\t\tif (getItem() instanceof CustomDamageHandler) {", "originalCommit": "f42afd05e6eea04fd9595570dfd44ce9b09b5fff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg0MzQwMQ==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r461843401", "bodyText": "Sure, though I would be very :concern: if getItem() is modified to do computation", "author": "williewillus", "createdAt": "2020-07-28T20:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzODgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MzY0Nw==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r461893647", "bodyText": "Well this keeping the item can at least skip an isEmpty check", "author": "liach", "createdAt": "2020-07-28T21:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzODgzOA=="}], "type": "inlineReview"}, {"oid": "82cd5ee0669a3a7299359081c919be06acf9f767", "url": "https://github.com/FabricMC/fabric/commit/82cd5ee0669a3a7299359081c919be06acf9f767", "message": "Add hook for custom damage logic", "committedDate": "2020-08-24T02:43:10Z", "type": "commit"}, {"oid": "66a434b942b478c7e16d4b8d14ad33f9694a58ec", "url": "https://github.com/FabricMC/fabric/commit/66a434b942b478c7e16d4b8d14ad33f9694a58ec", "message": "Address comments", "committedDate": "2020-08-24T02:43:10Z", "type": "commit"}, {"oid": "d33de77f408781b99fe6a6120f4c8653ac032731", "url": "https://github.com/FabricMC/fabric/commit/d33de77f408781b99fe6a6120f4c8653ac032731", "message": "Change to use new FabricItemSettings", "committedDate": "2020-08-24T03:16:04Z", "type": "commit"}, {"oid": "d33de77f408781b99fe6a6120f4c8653ac032731", "url": "https://github.com/FabricMC/fabric/commit/d33de77f408781b99fe6a6120f4c8653ac032731", "message": "Change to use new FabricItemSettings", "committedDate": "2020-08-24T03:16:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NjIwNA==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r478946204", "bodyText": "I don't think it's possible, but just in case can this be turned into a functional interface so that the actual implementation of making a new CustomDamageHandler is a lot neater? Ideally I'd love to just be able to pass a lambda into the item settings method, but that might not be doable.", "author": "Vaerian", "createdAt": "2020-08-28T08:35:29Z", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/CustomDamageHandler.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.item.v1;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+\n+/**\n+ * Allows an item to run custom logic when {@link ItemStack#damage(int, LivingEntity, Consumer)} is called.\n+ * This is useful for items that, for example, may drain durability from some other source before damaging\n+ * the stack itself.\n+ *\n+ * <p>Custom damage handlers can be set with {@link FabricItemSettings#customDamage}.\n+ */\n+public interface CustomDamageHandler {", "originalCommit": "d33de77f408781b99fe6a6120f4c8653ac032731", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI3OTA0Nw==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r479279047", "bodyText": "This is effectively a functional interface but without the marker.", "author": "i509VCB", "createdAt": "2020-08-28T13:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NjIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyMDAyMg==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r479420022", "bodyText": "Not really required, but for these kinds of interfaces it is advised to throw the @FunctionalInterface in", "author": "i509VCB", "createdAt": "2020-08-28T16:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NjIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTg2Ng==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r479541866", "bodyText": "Yeah but it uses a generic type parameter meaning it can't be expressed as a lambda. I tested an example of it in an IDE and it threw an error because the interface method was generic. Apparently this is just a limitation of java right now. The only way to allow it to be expressed as a lambda would be to remove the generic type parameter which sounds like it might end up being the plan.", "author": "Vaerian", "createdAt": "2020-08-28T21:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NjIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MTk5Ng==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r479541996", "bodyText": "But yeah we should also add @FunctionalInterface to it", "author": "Vaerian", "createdAt": "2020-08-28T21:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NjIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1Nzk1NA==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r478957954", "bodyText": "This is related to the comment above, but like I said this kind of implementation for the custom damage handler just seems clunky, just checking if we're able to avoid it or not with lambdas.\nIdeally I'd love to just be able to do something like\nsuper(\n    ToolMaterials.GOLD,\n    1,\n    -2.8F,\n    new FabricItemSettings()\n        .customDamage((stack, amount, entity, callback) -> {\n            if (entity.isSneaking()) {\n                return amount;\n            } else {\n                CompoundTag tag = stack.getOrCreateTag();\n                tag.putInt(\"weird\", tag.getInt(\"weird\") + 1);\n                return 0;\n            }\n        })\n);", "author": "Vaerian", "createdAt": "2020-08-28T08:47:46Z", "path": "fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/CustomDamageTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.item;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.PickaxeItem;\n+import net.minecraft.item.ToolMaterials;\n+import net.minecraft.nbt.CompoundTag;\n+import net.minecraft.text.Text;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.item.v1.CustomDamageHandler;\n+import net.fabricmc.fabric.api.item.v1.FabricItemSettings;\n+\n+public class CustomDamageTest implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-item-api-v1-testmod\", \"weird_pickaxe\"), new WeirdPick());\n+\t}\n+\n+\tpublic static final CustomDamageHandler WEIRD_DAMAGE_HANDLER = new CustomDamageHandler() {", "originalCommit": "d33de77f408781b99fe6a6120f4c8653ac032731", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxOTQyNw==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r479419427", "bodyText": "Really a javadoc nitpick, but possibly add @see CustomDamageHandler so people can see it relates to the handler.", "author": "i509VCB", "createdAt": "2020-08-28T16:44:26Z", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItemSettings.java", "diffHunk": "@@ -42,6 +42,14 @@ public FabricItemSettings equipmentSlot(EquipmentSlotProvider equipmentSlotProvi\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the custom damage handler of the item.", "originalCommit": "d33de77f408781b99fe6a6120f4c8653ac032731", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyMDg0MQ==", "url": "https://github.com/FabricMC/fabric/pull/964#discussion_r479420841", "bodyText": "Is this called on items that are not damageable? If this is not called on that case, then you need to add javadoc saying the item must be damagable", "author": "i509VCB", "createdAt": "2020-08-28T16:47:12Z", "path": "fabric-item-api-v1/src/main/java/net/fabricmc/fabric/api/item/v1/FabricItemSettings.java", "diffHunk": "@@ -42,6 +42,14 @@ public FabricItemSettings equipmentSlot(EquipmentSlotProvider equipmentSlotProvi\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the custom damage handler of the item.\n+\t */\n+\tpublic FabricItemSettings customDamage(CustomDamageHandler handler) {", "originalCommit": "d33de77f408781b99fe6a6120f4c8653ac032731", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "73d590f49182bd2a74c24df8f04c6bb1a513dece", "url": "https://github.com/FabricMC/fabric/commit/73d590f49182bd2a74c24df8f04c6bb1a513dece", "message": "Make CustomDamageHandler a functional interface", "committedDate": "2020-08-29T02:13:45Z", "type": "commit"}]}