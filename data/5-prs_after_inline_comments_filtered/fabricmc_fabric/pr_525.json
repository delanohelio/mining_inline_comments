{"pr_number": 525, "pr_title": "Fix some known issues with the registry sync module.", "pr_createdAt": "2020-03-11T19:34:05Z", "pr_url": "https://github.com/FabricMC/fabric/pull/525", "timeline": [{"oid": "1b0605ea5f722a18737bab4aa4cfa717905d8105", "url": "https://github.com/FabricMC/fabric/commit/1b0605ea5f722a18737bab4aa4cfa717905d8105", "message": "Try to detect if a registry is modded, if its not it will left alone and no syncing or saving will take place.", "committedDate": "2020-03-11T19:29:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0OTU5NQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r391449595", "bodyText": "Shouldn't this be a set ?", "author": "Pyrofab", "createdAt": "2020-03-12T07:53:52Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -55,6 +59,9 @@\n \tprivate static final Set<Identifier> REGISTRY_BLACKLIST = ImmutableSet.of();\n \tprivate static final Set<Identifier> REGISTRY_BLACKLIST_NETWORK = ImmutableSet.of();\n \n+\tpublic static final HashMap<Registry<?>, Integer> bootstrapRegistryHashes = new HashMap<>();\n+\tpublic static final ArrayList<Registry<?>> moddedRegistries = new ArrayList<>();", "originalCommit": "1b0605ea5f722a18737bab4aa4cfa717905d8105", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ0OTkxOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r391449918", "bodyText": "Should use fastutil's Object2IntMap", "author": "Pyrofab", "createdAt": "2020-03-12T07:54:44Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -55,6 +59,9 @@\n \tprivate static final Set<Identifier> REGISTRY_BLACKLIST = ImmutableSet.of();\n \tprivate static final Set<Identifier> REGISTRY_BLACKLIST_NETWORK = ImmutableSet.of();\n \n+\tpublic static final HashMap<Registry<?>, Integer> bootstrapRegistryHashes = new HashMap<>();", "originalCommit": "1b0605ea5f722a18737bab4aa4cfa717905d8105", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1c7a00f35f545635f429b5eaa455e87b5babd78a", "url": "https://github.com/FabricMC/fabric/commit/1c7a00f35f545635f429b5eaa455e87b5babd78a", "message": "Some more work on moddable registries", "committedDate": "2020-03-16T21:17:29Z", "type": "commit"}, {"oid": "c4eefc32a80ea8924bd645c40b8c7e9a11eeaa73", "url": "https://github.com/FabricMC/fabric/commit/c4eefc32a80ea8924bd645c40b8c7e9a11eeaa73", "message": "Checkstyle", "committedDate": "2020-03-16T21:26:33Z", "type": "commit"}, {"oid": "de260f3066543079fa2c63aa86438adf6f153376", "url": "https://github.com/FabricMC/fabric/commit/de260f3066543079fa2c63aa86438adf6f153376", "message": "Fix licences", "committedDate": "2020-03-16T21:33:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMjUwNg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r393332506", "bodyText": "This may not be ideal, as mod provided registries should be able to define these.", "author": "modmuss50", "createdAt": "2020-03-16T21:57:38Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -216,4 +268,67 @@ public static void unmap() throws RemapException {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tpublic static void bootstrapRegistries() {\n+\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n+\t\t\tif (registry instanceof ModdableRegistry) {\n+\t\t\t\t((ModdableRegistry) registry).storeIdHash(registry.getIds().hashCode());\n+\t\t\t}\n+\t\t}\n+\n+\t\tpostBootstrap = true;\n+\t}\n+\n+\tprivate static void markModded(Registry<?> registry) {\n+\t\tif (registry instanceof ModdableRegistry) {\n+\t\t\t((ModdableRegistry) registry).markModded();\n+\t\t} else {\n+\t\t\tthrow new RuntimeException(\"Cannot mark a none moddable registry as modded!\");\n+\t\t}\n+\t}\n+\n+\tpublic static boolean isRegistryModded(Identifier registryId) {\n+\t\t//All none minecraft registries are modded\n+\t\tif (!registryId.getNamespace().equals(\"minecraft\")) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tRegistry<?> registry = Registry.REGISTRIES.get(registryId);\n+\n+\t\tif (registry instanceof ModdableRegistry) {\n+\t\t\tModdableRegistry moddableRegistry = (ModdableRegistry) registry;\n+\t\t\treturn moddableRegistry.isModded();\n+\t\t} else {\n+\t\t\treturn false; //TODO what should this be?\n+\t\t}\n+\t}\n+\n+\tprivate static class RegistryTypes {", "originalCommit": "de260f3066543079fa2c63aa86438adf6f153376", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b5259c209890b4b50c3bd512f1434e463245427e", "url": "https://github.com/FabricMC/fabric/commit/b5259c209890b4b50c3bd512f1434e463245427e", "message": "Merge branch '1.16' into vanilla_registries", "committedDate": "2020-04-16T21:43:36Z", "type": "commit"}, {"oid": "1062b723644b43e6b774588a92056e5d1547ec98", "url": "https://github.com/FabricMC/fabric/commit/1062b723644b43e6b774588a92056e5d1547ec98", "message": "Cleanup registry attributes", "committedDate": "2020-04-16T22:12:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4Njk0OA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409886948", "bodyText": "Hmm, can we use like a class than an enum in case mods add custom attributes", "author": "liach", "createdAt": "2020-04-16T22:33:18Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttribute.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package net.fabricmc.fabric.api.event.registry;\n+\n+public enum RegistryAttribute {", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNTMzNg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409905336", "bodyText": "Humm, possibly. Not too sure what the use would be / if they would need to be more than just a yes/no?", "author": "modmuss50", "createdAt": "2020-04-16T23:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4Njk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzI5Ng==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409887296", "bodyText": "I'd prefer one\nvoid registerAttributes(Registry<?> registry, RegistryAttribute attribute);\nvoid registerAttributes(Registry<?> registry, RegistryAttribute... attributes);\ninstead\nAlso consider turning these attributes into like keys, like RegistryAttribute<T> where T may carry custom values for properties", "author": "liach", "createdAt": "2020-04-16T22:34:12Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.RegistryAttributeRegistryImpl;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+//TODO better class name here lol\n+public interface RegistryAttributeRegistry {\n+\n+\tRegistryAttributeRegistry INSTANCE = RegistryAttributeRegistryImpl.INSTANCE;\n+\n+\tvoid registerAttributes(RegistryAttribute attribute, Registry<?>... registries);", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODgwNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r418778804", "bodyText": "Possibly, I want to rethink this this part of the API.", "author": "modmuss50", "createdAt": "2020-05-01T23:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzI5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NDc1NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409884754", "bodyText": "Would SyncAttributeRegistry make sense?", "author": "i509VCB", "createdAt": "2020-04-16T22:27:31Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/RegistryAttributeRegistry.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.RegistryAttributeRegistryImpl;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+\n+//TODO better class name here lol\n+public interface RegistryAttributeRegistry {", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTA2Nw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409889067", "bodyText": "Its more than just syncing", "author": "modmuss50", "createdAt": "2020-04-16T22:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NDc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTcwMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409885700", "bodyText": "Maybe throw a comment in, like a TODO saying we need to add new registries to this list if a new one appears during an update.\nAlso could there be a way we can detect if a registry needs to be synced or persisted without having to manually specify these for all 39+ registries.", "author": "i509VCB", "createdAt": "2020-04-16T22:30:05Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeRegistry;\n+import net.minecraft.util.registry.Registry;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t//TODO this is a basic list of what should be done, a full list needs to be created", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwNTA3Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409905072", "bodyText": "Yes, this TODO here is just saying that its incomplete and need fully populating before its ready to be merged.\nIm not sure of a way to be able to detect this, it would be nice to be able to ensure that we cover all bases. This is honesly going to be a big pita to keep up to date and correct, but I dont see another way to go about this.", "author": "modmuss50", "createdAt": "2020-04-16T23:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NTcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NjQzMg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409886432", "bodyText": "Maybe this should be ModifiableRegistry?", "author": "i509VCB", "createdAt": "2020-04-16T22:31:55Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/ModdableRegistry.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+public interface ModdableRegistry {", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzgxNQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409903815", "bodyText": "Possibly, Modifiable might mean its changeable, where as this is directally a reigstry that can have modded items in.\nI might remove this instance and move it to be part of the attributes.", "author": "modmuss50", "createdAt": "2020-04-16T23:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NjQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzM0Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409887342", "bodyText": "Would a version bump make sense?\nObviously the schema hasn't changed but it's worth considering.", "author": "i509VCB", "createdAt": "2020-04-16T22:34:20Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -168,18 +204,38 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t\tregistryTag.putInt(id.toString(), rawId);\n \t\t\t\t}\n \n+\t\t\t\t// Look for existing registry key/values that are not in the current registries\n+\t\t\t\tif (!isClientSync && existingRegistryData != null) {\n+\t\t\t\t\tfor (String key : existingRegistryData.getKeys()) {\n+\t\t\t\t\t\tif (!registryTag.contains(key)) {\n+\t\t\t\t\t\t\tLOGGER.info(\"Saving orphaned registry entry: \" + key);\n+\t\t\t\t\t\t\tregistryTag.putInt(key, registryTag.getInt(key));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n \t\t\t\tmainTag.put(registryId.toString(), registryTag);\n \t\t\t}\n \t\t}\n \n+\t\t// Ensure any orphaned registry's are kept on disk\n+\t\tif (!isClientSync && activeIdMap != null) {\n+\t\t\tfor (String registryKey : activeIdMap.getKeys()) {\n+\t\t\t\tif (!mainTag.contains(registryKey)) {\n+\t\t\t\t\tLOGGER.info(\"Saving orphaned registry: \" + registryKey);\n+\t\t\t\t\tmainTag.put(registryKey, activeIdMap.getCompound(registryKey));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n \t\tCompoundTag tag = new CompoundTag();\n \t\ttag.putInt(\"version\", 1);", "originalCommit": "1062b723644b43e6b774588a92056e5d1547ec98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTgxMg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409889812", "bodyText": "imo using an arbitrary verison here is not as good as using channels with version in channel names, like fabric-registry-sync:sync/v1 etc", "author": "liach", "createdAt": "2020-04-16T22:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzUyMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r409903520", "bodyText": "I think once im more happy with the state of the PR I will make it a -v1, its easier to see the changes like this now.", "author": "modmuss50", "createdAt": "2020-04-16T23:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MDA4Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422550082", "bodyText": "Decided this is not needed, as it should be forwards/backwards compatible, as the format didnt change.", "author": "modmuss50", "createdAt": "2020-05-09T21:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzM0Mg=="}], "type": "inlineReview"}, {"oid": "d04ae79675e225997b75f8dffa83cc3fffb46063", "url": "https://github.com/FabricMC/fabric/commit/d04ae79675e225997b75f8dffa83cc3fffb46063", "message": "Merge branch '1.16' into vanilla_registries\n\n# Conflicts:\n#\tfabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinLevelStorageSession.java", "committedDate": "2020-05-03T21:05:40Z", "type": "commit"}, {"oid": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "url": "https://github.com/FabricMC/fabric/commit/a995b1c341320be9d50e7200d5f0f14fffba0c73", "message": "Rework again", "committedDate": "2020-05-03T21:47:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NTI5OQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419165299", "bodyText": "This should prob be moved from here, to adding RegistryAttribute.MODDED when creating the RegistryAttributeHolder", "author": "modmuss50", "createdAt": "2020-05-03T21:49:22Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -216,4 +268,41 @@ public static void unmap() throws RemapException {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tpublic static void bootstrapRegistries() {\n+\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n+\t\t\tif (registry instanceof HashedRegistry) {\n+\t\t\t\t((HashedRegistry) registry).storeHash();\n+\t\t\t}\n+\t\t}\n+\n+\t\tpostBootstrap = true;\n+\t}\n+\n+\t// Checks the stored hash against the current hash, if it has changed mark as modded\n+\tpublic static void checkRegistryHashes() {\n+\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n+\t\t\tif (registry instanceof HashedRegistry) {\n+\t\t\t\tif (((HashedRegistry) registry).getStoredHash() != ((HashedRegistry) registry).storeHash()) {\n+\t\t\t\t\tRegistryAttributeHolder<?> holder = RegistryAttributeHolder.get(registry);\n+\n+\t\t\t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\t\t\t\tLOGGER.debug(\"Registry {} has been marked as modded as the hash changed since bootstrap\", Registry.REGISTRIES.getId(registry));\n+\t\t\t\t\t\tholder.addAttribute(RegistryAttribute.MODDED);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static boolean isRegistryModded(Identifier registryId) {\n+\t\t//All none minecraft registries are modded\n+\t\tif (!registryId.getNamespace().equals(\"minecraft\")) {\n+\t\t\treturn true;\n+\t\t}", "originalCommit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NTQwMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419165401", "bodyText": "Would storing the values or implementing the RegistryAttributeHolder onto the Registry make more sense?", "author": "i509VCB", "createdAt": "2020-05-03T21:50:14Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistryAttributesImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class RegistryAttributesImpl<T> implements RegistryAttributeHolder<T> {\n+\tprivate static final Map<Registry<?>, RegistryAttributeHolder<?>> registryAttributeMap = new HashMap<>();", "originalCommit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2Njg1NQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419166855", "bodyText": "Yes, possibly. I dont see why not", "author": "modmuss50", "createdAt": "2020-05-03T22:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NTQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NTY2Ng==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419165666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tLOGGER.debug(\"Not saving none-persistent registry: \" + registryId);\n          \n          \n            \n            \t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);", "author": "i509VCB", "createdAt": "2020-05-03T21:52:23Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -131,13 +139,35 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (REGISTRY_BLACKLIST.contains(registryId)) {\n+\t\t\tCompoundTag existingRegistryData = null;\n+\n+\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\t}\n+\n+\t\t\t//noinspection unchecked\n+\t\t\tif (!isClientSync && !RegistryAttributeHolder.get(registry).hasAttribute(RegistryAttribute.PERSISTENT)) {\n+\t\t\t\tLOGGER.debug(\"Not saving none-persistent registry: \" + registryId);", "originalCommit": "a995b1c341320be9d50e7200d5f0f14fffba0c73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32626a437574da74e22959f9bf9dfb915da0e70d", "url": "https://github.com/FabricMC/fabric/commit/32626a437574da74e22959f9bf9dfb915da0e70d", "message": "Some small tweaks", "committedDate": "2020-05-03T21:58:25Z", "type": "commit"}, {"oid": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "url": "https://github.com/FabricMC/fabric/commit/d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "message": "Yet another refactor", "committedDate": "2020-05-04T13:58:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1Nzc2Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419457763", "bodyText": "Everything that has a comment on I have checked. If someone can validate this that would be great.\nI will finish off the other later.", "author": "modmuss50", "createdAt": "2020-05-04T13:59:50Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1OTg5NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419459894", "bodyText": "uhh, find and replace went wrong here ;) I will fix this. Should just be \"synced\"", "author": "modmuss50", "createdAt": "2020-05-04T14:02:47Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Saved and RegistryAttribute.SYNCED using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3NTM1Nw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419475357", "bodyText": "From what I can tell we dont need to sync items, but im not sure what happens with server side only items? We might need a way only make sure that the registries contain the same keys?", "author": "modmuss50", "createdAt": "2020-05-04T14:24:06Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5MTAwMw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419491003", "bodyText": "If it is a builder wouldn't you want to just call the method attribute(RegistryAttribute)", "author": "i509VCB", "createdAt": "2020-05-04T14:44:58Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+public class FabricRegistryBuilder<T> {\n+\tpublic static <T> FabricRegistryBuilder<T> create(Registry<T> registry) {\n+\t\treturn new FabricRegistryBuilder<>(registry);\n+\t}\n+\n+\tprivate final Registry<T> registry;\n+\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\n+\tprivate FabricRegistryBuilder(Registry<T> registry) {\n+\t\tthis.registry = registry;\n+\t\taddAttribute(RegistryAttribute.MODDED);\n+\t}\n+\n+\tpublic FabricRegistryBuilder<T> addAttribute(RegistryAttribute attribute) {", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NDc4Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419494782", "bodyText": "I assume the fact this is used in a data tracker isn't a real issue with syncing. (I think it calls getRawId when being queried to track)\nThis is part of the VillagerDataContainer but that stores this as an identifier.\nSomething similar with the Villager professions.", "author": "i509VCB", "createdAt": "2020-05-04T14:50:10Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Saved and RegistryAttribute.SYNCED using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in PaintingSpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt seem to be RegistryAttribute.SYNCED or saved, STAT_TYPE seems to handle the syncing.\n+\t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n+\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in OpenScreenS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n+\n+\t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n+\n+\t\t// RegistryAttribute.SYNCED in StatisticsS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMjM1Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r421812352", "bodyText": "Looking at this it needs to be synced as its written to a packet using the raw id.", "author": "modmuss50", "createdAt": "2020-05-07T21:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NDc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTMwOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r419495309", "bodyText": "Only present on a server world from my knowledge.", "author": "i509VCB", "createdAt": "2020-05-04T14:50:54Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// RegistryAttribute.SYNCED in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// RegistryAttribute.SYNCED with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or RegistryAttribute.SYNCED, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Saved and RegistryAttribute.SYNCED using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be RegistryAttribute.SYNCED\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n+\n+\t\t// RegistryAttribute.SYNCED in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// RegistryAttribute.SYNCED in PaintingSpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt seem to be RegistryAttribute.SYNCED or saved, STAT_TYPE seems to handle the syncing.\n+\t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n+\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n+\n+\t\t// RegistryAttribute.SYNCED in OpenScreenS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n+\n+\t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n+\n+\t\t// RegistryAttribute.SYNCED in StatisticsS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE);\n+\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);\n+\n+\t\tRegistryAttributeHolder.get(Registry.POINT_OF_INTEREST_TYPE);", "originalCommit": "d54ed1af9ec219ea41caac5a47d8b1d188eb32a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "36e2a931e1085541998d5a1fa326ab7361433d38", "url": "https://github.com/FabricMC/fabric/commit/36e2a931e1085541998d5a1fa326ab7361433d38", "message": "Merge branch '1.16' into vanilla_registries", "committedDate": "2020-05-07T21:33:58Z", "type": "commit"}, {"oid": "5a8135c210eefbc0f1d32fd1161851f967f75271", "url": "https://github.com/FabricMC/fabric/commit/5a8135c210eefbc0f1d32fd1161851f967f75271", "message": "Some minor style fixes", "committedDate": "2020-05-07T21:36:50Z", "type": "commit"}, {"oid": "2da1e2b041e6a01b13a7e085ff9235f7fc77bb86", "url": "https://github.com/FabricMC/fabric/commit/2da1e2b041e6a01b13a7e085ff9235f7fc77bb86", "message": "Finish checking registries", "committedDate": "2020-05-07T21:48:07Z", "type": "commit"}, {"oid": "57cf312c5e581efb0a1414bed2525b4fe3e362ba", "url": "https://github.com/FabricMC/fabric/commit/57cf312c5e581efb0a1414bed2525b4fe3e362ba", "message": "Start on a test mod, and apply some fixes.", "committedDate": "2020-05-08T12:37:52Z", "type": "commit"}, {"oid": "c8916aee09265a79f16512d7ba002ca0363bcce6", "url": "https://github.com/FabricMC/fabric/commit/c8916aee09265a79f16512d7ba002ca0363bcce6", "message": "Checkstyle fixes", "committedDate": "2020-05-09T20:55:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjE1Nw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546157", "bodyText": "Need a synced here, you missed that line", "author": "liach", "createdAt": "2020-05-09T21:06:22Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// Synced in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Saved and synced using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// Synced in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);\n+\n+\t\t// Synced in GameJoinS2CPacket and PlayerRespawnS2CPacket. Entities and maps also use the id when saving.\n+\t\tRegistryAttributeHolder.get(Registry.DIMENSION_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in PaintingSpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PAINTING_MOTIVE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt seem to be synced or saved, STAT_TYPE seems to handle the syncing.\n+\t\tRegistryAttributeHolder.get(Registry.CUSTOM_STAT);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_STATUS);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PIECE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.RULE_TEST);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.POS_RULE_TEST);\n+\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_PROCESSOR);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.STRUCTURE_POOL_ELEMENT);\n+\n+\t\t// Synced in OpenScreenS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.SCREEN_HANDLER)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not seem to be serialised, only queried by id. Not synced\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_TYPE);\n+\n+\t\t// Synced by id\n+\t\tRegistryAttributeHolder.get(Registry.RECIPE_SERIALIZER);\n+\n+\t\t// Synced and saved by id\n+\t\tRegistryAttributeHolder.get(Registry.ATTRIBUTES);\n+\n+\t\t// Synced in StatisticsS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.STAT_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced by rawID in TrackedDataHandlerRegistry.VILLAGER_DATA\n+\t\tRegistryAttributeHolder.get(Registry.VILLAGER_PROFESSION);", "originalCommit": "c8916aee09265a79f16512d7ba002ca0363bcce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjgxMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546810", "bodyText": "Yes, thank you.", "author": "modmuss50", "createdAt": "2020-05-09T21:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjIzOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546239", "bodyText": "Should probably bump version here", "author": "liach", "createdAt": "2020-05-09T21:07:01Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -168,18 +204,38 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t\tregistryTag.putInt(id.toString(), rawId);\n \t\t\t\t}\n \n+\t\t\t\t// Look for existing registry key/values that are not in the current registries\n+\t\t\t\tif (!isClientSync && existingRegistryData != null) {\n+\t\t\t\t\tfor (String key : existingRegistryData.getKeys()) {\n+\t\t\t\t\t\tif (!registryTag.contains(key)) {\n+\t\t\t\t\t\t\tLOGGER.info(\"Saving orphaned registry entry: \" + key);\n+\t\t\t\t\t\t\tregistryTag.putInt(key, registryTag.getInt(key));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n \t\t\t\tmainTag.put(registryId.toString(), registryTag);\n \t\t\t}\n \t\t}\n \n+\t\t// Ensure any orphaned registry's are kept on disk\n+\t\tif (!isClientSync && activeIdMap != null) {\n+\t\t\tfor (String registryKey : activeIdMap.getKeys()) {\n+\t\t\t\tif (!mainTag.contains(registryKey)) {\n+\t\t\t\t\tLOGGER.info(\"Saving orphaned registry: \" + registryKey);\n+\t\t\t\t\tmainTag.put(registryKey, activeIdMap.getCompound(registryKey));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n \t\tCompoundTag tag = new CompoundTag();\n \t\ttag.putInt(\"version\", 1);", "originalCommit": "c8916aee09265a79f16512d7ba002ca0363bcce6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0Njc3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546774", "bodyText": "No, it should be compatible with previous fabric api versions. I need to test this.", "author": "modmuss50", "createdAt": "2020-05-09T21:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NjQwOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422546408", "bodyText": "enum set maybe? unless you use manningheim mills", "author": "liach", "createdAt": "2020-05-09T21:08:25Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n+\n+@Mixin(Registry.class)\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+\t@Unique\n+\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();", "originalCommit": "c8916aee09265a79f16512d7ba002ca0363bcce6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6186a43450f0fe7004f973b7389db27872c721fb", "url": "https://github.com/FabricMC/fabric/commit/6186a43450f0fe7004f973b7389db27872c721fb", "message": "Tweak the logic behind previously modded registries", "committedDate": "2020-05-09T21:36:33Z", "type": "commit"}, {"oid": "6da77ed8f8424d6a6d02906f8111c2dc7e476e61", "url": "https://github.com/FabricMC/fabric/commit/6da77ed8f8424d6a6d02906f8111c2dc7e476e61", "message": "Use EnumSet", "committedDate": "2020-05-09T21:46:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mjc0NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422552744", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.allOf(RegistryAttribute.class);\n          \n          \n            \n            \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);", "author": "liach", "createdAt": "2020-05-09T22:13:40Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -34,7 +34,7 @@\n @Mixin(Registry.class)\n public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n \t@Unique\n-\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.allOf(RegistryAttribute.class);", "originalCommit": "6da77ed8f8424d6a6d02906f8111c2dc7e476e61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mjk4Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422552983", "bodyText": "Im glad you here ;P", "author": "modmuss50", "createdAt": "2020-05-09T22:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mjc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mzg2Ng==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422553866", "bodyText": "Hmm I knew that looked odd", "author": "i509VCB", "createdAt": "2020-05-09T22:25:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mjc0NA=="}], "type": "inlineReview"}, {"oid": "976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "url": "https://github.com/FabricMC/fabric/commit/976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "message": "Update fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java\n\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>", "committedDate": "2020-05-09T22:16:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzMwMg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422553302", "bodyText": "are all registries always going to be modded, just curious?", "author": "liach", "createdAt": "2020-05-09T22:19:28Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+public class FabricRegistryBuilder<T> {\n+\tpublic static <T> FabricRegistryBuilder<T> create(Registry<T> registry) {\n+\t\treturn new FabricRegistryBuilder<>(registry);\n+\t}\n+\n+\tprivate final Registry<T> registry;\n+\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();\n+\n+\tprivate FabricRegistryBuilder(Registry<T> registry) {\n+\t\tthis.registry = registry;\n+\t\tattribute(RegistryAttribute.MODDED);", "originalCommit": "976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1Mzk0MA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422553940", "bodyText": "Via the builder, probably. But I assume there will be a way to not require syncing", "author": "i509VCB", "createdAt": "2020-05-09T22:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTI0OA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422555248", "bodyText": "All modded registries are always going to be modded.", "author": "modmuss50", "createdAt": "2020-05-09T22:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTUzNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422555534", "bodyText": "Oh right this is a registry builder, thought this was a registry attribute builder", "author": "liach", "createdAt": "2020-05-09T22:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzM4Nw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422553387", "bodyText": "Wondering if we can sort these calls by their order of appearance in Registry class or how are we going to organize and make sure no vanilla registry is missed?", "author": "liach", "createdAt": "2020-05-09T22:20:20Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)", "originalCommit": "976c20e6fd9c5c8c5882aa7fc0d13a912a7eacc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTMxOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r422555318", "bodyText": "They should be in the right order, making sure they are all covered should be quite easy. Possibly just printing out that a registry hasnt been accounted for?", "author": "modmuss50", "createdAt": "2020-05-09T22:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1MzM4Nw=="}], "type": "inlineReview"}, {"oid": "a2f7212d4f8669a579e9f0c42130e1ae07374be2", "url": "https://github.com/FabricMC/fabric/commit/a2f7212d4f8669a579e9f0c42130e1ae07374be2", "message": "Merge branch '1.16' into vanilla_registries", "committedDate": "2020-05-11T23:56:23Z", "type": "commit"}, {"oid": "926ef1e408dc1361a9600f6429c4099629ce4b3e", "url": "https://github.com/FabricMC/fabric/commit/926ef1e408dc1361a9600f6429c4099629ce4b3e", "message": "Fix generics, add javadoc, add tests", "committedDate": "2020-05-12T00:11:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423394379", "bodyText": "I personally find it a bit odd to pass registry into a builder.", "author": "i509VCB", "createdAt": "2020-05-12T00:27:17Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+/**\n+ * Used to create custom registry's, with specified registry attributes.\n+ *\n+ * <pre>\n+ *     MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())", "originalCommit": "926ef1e408dc1361a9600f6429c4099629ce4b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NzQwMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423397401", "bodyText": "Yeah, it is slightly odd. I could keep this but add createSimple and createDefault?", "author": "modmuss50", "createdAt": "2020-05-12T00:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5ODMwMw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423398303", "bodyText": "Yeah that seems like a reasonable approach. Maybe make the method where you can pass a custom registry through something like from.\nI'd createDefaulted is a bit more descriptive for the second name", "author": "i509VCB", "createdAt": "2020-05-12T00:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMzE0Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423613143", "bodyText": "{@literal} please for < and >, or use &lt; for < and &gt; for >.", "author": "liach", "createdAt": "2020-05-12T09:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNzcxMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r423627711", "bodyText": "Or you can use a {@code} tag as well, see this.", "author": "Juuxel", "createdAt": "2020-05-12T10:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDM3OQ=="}], "type": "inlineReview"}, {"oid": "3fb992723f4b4463f59d74705459e420ba8a6d9c", "url": "https://github.com/FabricMC/fabric/commit/3fb992723f4b4463f59d74705459e420ba8a6d9c", "message": "More changes", "committedDate": "2020-05-13T17:06:44Z", "type": "commit"}, {"oid": "ecb4240a44d716ac7c553e046805834644bea52c", "url": "https://github.com/FabricMC/fabric/commit/ecb4240a44d716ac7c553e046805834644bea52c", "message": "Merge branch '1.16' into vanilla_registries", "committedDate": "2020-05-15T13:16:31Z", "type": "commit"}, {"oid": "7b62eada728c2ccd9f66793286103563c2c3031c", "url": "https://github.com/FabricMC/fabric/commit/7b62eada728c2ccd9f66793286103563c2c3031c", "message": "Checkstyle fixes", "committedDate": "2020-05-15T13:18:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MjYyNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426152624", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Used to create custom registry's, with specified registry attributes.\n          \n          \n            \n             * Used to create custom registries, with specified registry attributes.", "author": "Earthcomputer", "createdAt": "2020-05-16T13:13:24Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+/**\n+ * Used to create custom registry's, with specified registry attributes.", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NjUxOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426156519", "bodyText": "This implementation of storeHash rings alarm bells for me. This hashCode is implemented by AbstractSet, which simply sums the hashCode of its elements. Each element is an Identifier, which is itself a bad hash function.\nRather than using a hash, it would be far better to simply check the size of the registry to check if it has been added to. No-one is going to remove from a registry after all (that's a hard thing to do and no-one would want to anyway).", "author": "Earthcomputer", "createdAt": "2020-05-16T14:05:56Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n+\n+@Mixin(Registry.class)\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+\t@Unique\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n+\n+\t@Unique\n+\tprivate int preBootstrapHash = -1;\n+\n+\t@Shadow\n+\tpublic abstract Set<Identifier> getIds();\n+\n+\t/**\n+\t * This is used to denote backwards compatibility, when false default attributes will be applied.\n+\t * This is set to true when using FabricRegistryBuilder\n+\t */\n+\t@Unique\n+\tprivate boolean builtWithBuilder = false;\n+\n+\t@Override\n+\tpublic RegistryAttributeHolder addAttribute(RegistryAttribute attribute) {\n+\t\tattributes.add(attribute);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasAttribute(RegistryAttribute attribute) {\n+\t\treturn attributes.contains(attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void build(Set<RegistryAttribute> attributes) {\n+\t\tbuiltWithBuilder = true;\n+\t\tthis.attributes.addAll(attributes);\n+\t}\n+\n+\t@Override\n+\tpublic boolean builtByBuilder() {\n+\t\treturn builtWithBuilder;\n+\t}\n+\n+\t@Override\n+\tpublic int getStoredHash() {\n+\t\treturn preBootstrapHash;\n+\t}\n+\n+\t@Override\n+\tpublic int storeHash() {\n+\t\treturn preBootstrapHash = getIds().hashCode();", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NzgzNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426167834", "bodyText": "Removal from registries to replace stuff has been seen before, the hallow did it to allow place able pumpkin pie.", "author": "i509VCB", "createdAt": "2020-05-16T16:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NjUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3MTIxOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426171219", "bodyText": "Why is this hash even needed? It does nothing extra compared to what MixinSimpleRegistry does.", "author": "Earthcomputer", "createdAt": "2020-05-16T17:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NjUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODMzOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426518339", "bodyText": "The only use for this whole hash thing is trying to detect mods that remove from the registry without marking the registry as modified.\nThe whole thing could be removed as mods that do odd things should start using the api provided to mark the registry as modded. This is here to try and maintain backwards compat where possible.", "author": "modmuss50", "createdAt": "2020-05-18T10:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NjUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1Njg1Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426156853", "bodyText": "Maybe also check if this registry is the registry registry.", "author": "Earthcomputer", "createdAt": "2020-05-16T14:10:04Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinSimpleRegistry.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.RegistrySyncManager;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+\n+@Mixin(SimpleRegistry.class)\n+public abstract class MixinSimpleRegistry<T> extends Registry<T> {\n+\t@Unique\n+\tprivate static final Logger FARBIC_LOGGER = LogManager.getLogger(\"FabricRegistrySync\");\n+\n+\t@Inject(method = \"add\", at = @At(\"RETURN\"))\n+\tprivate <V extends T> void add(Identifier id, V entry, CallbackInfoReturnable<V> info) {\n+\t\tonChange(id);\n+\t\tcheckEntry(id, entry);\n+\t}\n+\n+\t@Inject(method = \"set\", at = @At(\"RETURN\"))\n+\tprivate <V extends T> void set(int rawId, Identifier id, V entry, CallbackInfoReturnable<V> info) {\n+\t\tonChange(id);\n+\t\tcheckEntry(id, entry);\n+\t}\n+\n+\t@Unique\n+\tprivate void onChange(Identifier id) {\n+\t\tif (RegistrySyncManager.postBootstrap || !id.getNamespace().equals(\"minecraft\")) {\n+\t\t\tRegistryAttributeHolder holder = RegistryAttributeHolder.get(this);\n+\n+\t\t\tif (!holder.hasAttribute(RegistryAttribute.MODDED)) {\n+\t\t\t\t//noinspection unchecked\n+\t\t\t\tFARBIC_LOGGER.debug(\"Registry {} has been marked as modded, registry entry {} was changed\", Registry.REGISTRIES.getId((MutableRegistry<T>) (Object) this), id);\n+\t\t\t\tRegistryAttributeHolder.get(this).addAttribute(RegistryAttribute.MODDED);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Unique\n+\tprivate <V extends T> void checkEntry(Identifier id, V entry) {\n+\t\t// Detect legacy modded registries, this is deprecated as they should use the builder from now on.\n+\t\tif (entry instanceof FabricRegistry) {", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODcyMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426518721", "bodyText": "good idea. Yes", "author": "modmuss50", "createdAt": "2020-05-18T10:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1Njg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NzUzNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426157534", "bodyText": "From what I understand, the purpose of this check is to handle implementations of MutableRegistry which are not SimpleRegistrys or to handle SimpleRegistrys modified through accessor mixins. Otherwise, surely what is in MixinSimpleRegistry is sufficient. I would like to point out that all vanilla registries which are MutableRegistrys are also SimpleRegistrys.", "author": "Earthcomputer", "createdAt": "2020-05-16T14:19:46Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -216,4 +278,30 @@ public static void unmap() throws RemapException {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tpublic static void bootstrapRegistries() {\n+\t\tfor (MutableRegistry<?> registry : Registry.REGISTRIES) {\n+\t\t\tif (registry instanceof HashedRegistry) {\n+\t\t\t\t((HashedRegistry) registry).storeHash();\n+\t\t\t}\n+\t\t}\n+\n+\t\tpostBootstrap = true;\n+\t}\n+\n+\t// Checks the stored hash against the current hash, if it has changed mark as modded\n+\tpublic static void checkRegistryHashes() {", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1Nzg4MQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426157881", "bodyText": "This is a bad name as it's set every time storeHash is called, which includes in RegistrySyncManager.bootstrapRegistries(), which is called after bootstrap.", "author": "Earthcomputer", "createdAt": "2020-05-16T14:23:34Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.impl.registry.sync.HashedRegistry;\n+\n+@Mixin(Registry.class)\n+public abstract class MixinRegistry<T> implements RegistryAttributeHolder, FabricRegistry, HashedRegistry {\n+\t@Unique\n+\tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n+\n+\t@Unique\n+\tprivate int preBootstrapHash = -1;", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODQ2Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426408462", "bodyText": "Gone as of 20w20a", "author": "i509VCB", "createdAt": "2020-05-18T07:04:43Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// Synced in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM);\n+\n+\t\t// Saved and synced using string ID.\n+\t\tRegistryAttributeHolder.get(Registry.POTION);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.CARVER);\n+\n+\t\t// Doesnt seem to be accessed apart from registering?\n+\t\tRegistryAttributeHolder.get(Registry.SURFACE_BUILDER);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.DECORATOR);\n+\n+\t\t// Saved to level format\n+\t\tRegistryAttributeHolder.get(Registry.BIOME)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_STATE_PROVIDER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FOLIAGE_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.TRUNK_PLACER_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.TREE_DECORATOR_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.FEATURE_SIZE_TYPE);\n+\n+\t\t// Synced in ParticleS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.PARTICLE_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.BIOME_SOURCE_TYPE);\n+\n+\t\t// Serialised by string, doesnt seem to be synced\n+\t\tRegistryAttributeHolder.get(Registry.CHUNK_GENERATOR_TYPE);", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODk3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426518974", "bodyText": "ill merge it up", "author": "modmuss50", "createdAt": "2020-05-18T10:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwODQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMDMwMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426410301", "bodyText": "Checkstyle your drunk, go home.", "author": "i509VCB", "createdAt": "2020-05-18T07:09:04Z", "path": "fabric-registry-sync-v0/src/testmod/java/net/fabricmc/fabric/test/registry/sync/RegistrySyncTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.registry.sync;\n+\n+import org.apache.commons.lang3.Validate;\n+\n+import net.minecraft.block.AbstractBlock;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Material;\n+import net.minecraft.item.BlockItem;\n+import net.minecraft.item.Item;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+import net.fabricmc.fabric.api.event.registry.FabricRegistryBuilder;\n+\n+public class RegistrySyncTest implements ModInitializer {\n+\t/**\n+\t * These are system property's as it allows for easier testing with different run configurations.\n+\t */\n+\tpublic static final boolean REGISTER_BLOCKS = Boolean.parseBoolean(System.getProperty(\"fabric.registry.sync.test.register.blocks\", \"true\"));\n+\tpublic static final boolean REGISTER_ITEMS = Boolean.parseBoolean(System.getProperty(\"fabric.registry.sync.test.register.items\", \"true\"));\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tif (REGISTER_BLOCKS) {\n+\t\t\tfor (int i = 0; i < 5; i++) {\n+\t\t\t\tBlock block = new Block(AbstractBlock.Settings.of(Material.STONE));\n+\t\t\t\tRegistry.BLOCK.add(new Identifier(\"registry_sync\", \"block_\" + i), block);\n+\n+\t\t\t\tif (REGISTER_ITEMS) {\n+\t\t\t\t\tBlockItem blockItem = new BlockItem(block, new Item.Settings());\n+\t\t\t\t\tRegistry.ITEM.add(new Identifier(\"registry_sync\", \"block_\" + i), blockItem);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tValidate.isTrue(RegistryAttributeHolder.get(Registry.BLOCK).hasAttribute(RegistryAttribute.MODDED), \"Modded block was registered but registry not marked as modded\");\n+\n+\t\t\tif (REGISTER_ITEMS) {\n+\t\t\t\tValidate.isTrue(RegistryAttributeHolder.get(Registry.ITEM).hasAttribute(RegistryAttribute.MODDED), \"Modded item was registered but registry not marked as modded\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tMutableRegistry<String> fabricRegistry = FabricRegistryBuilder.createSimple(String.class)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t.build();", "originalCommit": "7b62eada728c2ccd9f66793286103563c2c3031c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzNjMzMw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426436333", "bodyText": "Checkstyle wasn't run on travis as it is only run after compilation success.", "author": "liach", "createdAt": "2020-05-18T07:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2MTc4NQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r426661785", "bodyText": "this passes", "author": "modmuss50", "createdAt": "2020-05-18T14:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMDMwMQ=="}], "type": "inlineReview"}, {"oid": "d690625ac15672ae7ce786b054b8db3ad8b80916", "url": "https://github.com/FabricMC/fabric/commit/d690625ac15672ae7ce786b054b8db3ad8b80916", "message": "Minor fixes", "committedDate": "2020-05-18T14:23:54Z", "type": "commit"}, {"oid": "12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "url": "https://github.com/FabricMC/fabric/commit/12a1bbb5765ecd77828f9432e3f82cc0f609dbf3", "message": "Remove hash stuff", "committedDate": "2020-05-19T12:31:06Z", "type": "commit"}, {"oid": "adb73e4b980a3d0f6fac0ee3ab4618819395712b", "url": "https://github.com/FabricMC/fabric/commit/adb73e4b980a3d0f6fac0ee3ab4618819395712b", "message": "Merge branch '1.16' into vanilla_registries\n\n# Conflicts:\n#\tfabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "committedDate": "2020-05-21T18:17:25Z", "type": "commit"}, {"oid": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "url": "https://github.com/FabricMC/fabric/commit/d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "message": "20w21a - massive changes", "committedDate": "2020-05-21T19:05:30Z", "type": "commit"}, {"oid": "b9d1f803937de229fbaef06965d6a1c160661acd", "url": "https://github.com/FabricMC/fabric/commit/b9d1f803937de229fbaef06965d6a1c160661acd", "message": "fix build", "committedDate": "2020-05-21T19:14:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjAxNg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428862016", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Applies the attributes to the registry and register's it.\n          \n          \n            \n            \t * Applies the attributes to the registry and registers it.", "author": "Earthcomputer", "createdAt": "2020-05-21T19:21:07Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -97,12 +104,16 @@ private FabricRegistryBuilder(R registry) {\n \t}\n \n \t/**\n-\t * Applies the attributes to the registry.\n+\t * Applies the attributes to the registry and register's it.", "originalCommit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428862642", "bodyText": "Should there be helper methods here to allow for passing an Identifier rather than a RegistryKey here? And a default value for lifecycle?", "author": "Earthcomputer", "createdAt": "2020-05-21T19:22:26Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -50,31 +55,33 @@\n \t * @param <R> The registry type\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T, R extends Registry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n+\tpublic static <T, R extends MutableRegistry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n \t\treturn new FabricRegistryBuilder<>(registry);\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param type A class matching the type being stored in the registry\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type) {\n-\t\treturn from(new SimpleRegistry<>());\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {", "originalCommit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDkwNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428864904", "bodyText": "The RegistryKey now provides the type T removes the need for passing a Class as well.", "author": "modmuss50", "createdAt": "2020-05-21T19:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MTM4Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428991382", "bodyText": "That generic sugar in registry key is totally unused and can be safely casted. I support earthcomputer's proposal here. A needed registry key in this case can always be created by RegistryKey.ofRegistry(id), creating a registry key of any type extending Registry<T> (T is a wildcard), with registry \"minecraft:root\" and value from id parameter.", "author": "liach", "createdAt": "2020-05-22T01:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MjE1MQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428992151", "bodyText": "Also on lifecycle: we can use Lifecycle.stable() as the default lifecycle.", "author": "liach", "createdAt": "2020-05-22T01:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NTQ4Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429275483", "bodyText": "I dont really think there is a need to pass the Lifecyle, stable should be fine for all.", "author": "modmuss50", "createdAt": "2020-05-22T14:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDAyNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428864024", "bodyText": "Screw backwards compatibility at this point, I guess?", "author": "Earthcomputer", "createdAt": "2020-05-21T19:25:11Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinRegistry.java", "diffHunk": "@@ -35,16 +33,6 @@\n \t@Unique\n \tprivate final EnumSet<RegistryAttribute> attributes = EnumSet.noneOf(RegistryAttribute.class);\n \n-\t@Shadow\n-\tpublic abstract Set<Identifier> getIds();\n-\n-\t/**\n-\t * This is used to denote backwards compatibility, when false default attributes will be applied.\n-\t * This is set to true when using FabricRegistryBuilder\n-\t */\n-\t@Unique\n-\tprivate boolean builtWithBuilder = false;", "originalCommit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDY3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428864674", "bodyText": "Yes, an API is needed to add a registry now, so no point in assuming the old way is used anymore. If mods have updated in the past few days then they should be active enought to move to the API.", "author": "modmuss50", "createdAt": "2020-05-21T19:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDAyNA=="}], "type": "inlineReview"}, {"oid": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "url": "https://github.com/FabricMC/fabric/commit/89e5bfbde8bcb196583b5937c27ba3446f3408b7", "message": "Update fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java\n\nCo-authored-by: Joseph Burton <burtonjae@hotmail.co.uk>", "committedDate": "2020-05-21T19:27:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MTgxOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r428991818", "bodyText": "Imo we should use an identifier. You cannot prevent people from passing botched registry keys with registry reference other than minecraft:root, while an identifier only specifying the value of the registry key is always safe.", "author": "liach", "createdAt": "2020-05-22T01:02:43Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -50,31 +55,33 @@\n \t * @param <R> The registry type\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T, R extends Registry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n+\tpublic static <T, R extends MutableRegistry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n \t\treturn new FabricRegistryBuilder<>(registry);\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param type A class matching the type being stored in the registry\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(Class<T> type) {\n-\t\treturn from(new SimpleRegistry<>());\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n \t}\n \n \t/**\n \t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n \t *\n-\t * @param type A class matching the type being stored in the registry\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n \t * @param defaultId The default registry id\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Class<T> type, Identifier defaultId) {\n-\t\treturn from(new DefaultedRegistry<>(defaultId.toString()));\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {", "originalCommit": "d712ba3dca89ed6430f7faa0788d8c8ba37e3005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMDgxNQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429010815", "bodyText": "EnumSet", "author": "sfPlayer1", "createdAt": "2020-05-22T02:27:21Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.mojang.serialization.Lifecycle;\n+\n+import net.minecraft.class_5321;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n+\n+/**\n+ * Used to create custom registries, with specified registry attributes.\n+ *\n+ * <pre>\n+ * {@code\n+ *  MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.build();\n+ * \tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);\n+ * \t}\n+ * </pre>\n+ *\n+ * @param <T> The type stored in the Registry\n+ * @param <R> The registry type\n+ */\n+public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {\n+\t/**\n+\t * Create a new {@link FabricRegistryBuilder}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n+\t *\n+\t * @param registry The base registry type such as {@link net.minecraft.util.registry.SimpleRegistry} or {@link net.minecraft.util.registry.DefaultedRegistry}\n+\t * @param <T> The type stored in the Registry\n+\t * @param <R> The registry type\n+\t * @return An instance of FabricRegistryBuilder\n+\t */\n+\tpublic static <T, R extends MutableRegistry<T>> FabricRegistryBuilder<T, R> from(R registry) {\n+\t\treturn new FabricRegistryBuilder<>(registry);\n+\t}\n+\n+\t/**\n+\t * Create a new {@link FabricRegistryBuilder} using a {@link SimpleRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n+\t *\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param <T> The type stored in the Registry\n+\t * @return An instance of FabricRegistryBuilder\n+\t */\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\t\treturn from(new SimpleRegistry<>(registryKey, lifecycle));\n+\t}\n+\n+\t/**\n+\t * Create a new {@link FabricRegistryBuilder} using a {@link DefaultedRegistry}, the registry has the {@link RegistryAttribute#MODDED} attribute by default.\n+\t *\n+\t * @param registryKey The RegistryKey to create the registry\n+\t * @param lifecycle The {@link Lifecycle} used to create the registry\n+\t * @param defaultId The default registry id\n+\t * @param <T> The type stored in the Registry\n+\t * @return An instance of FabricRegistryBuilder\n+\t */\n+\tpublic static <T> FabricRegistryBuilder<T, DefaultedRegistry<T>> createDefaulted(Identifier defaultId, class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\t\treturn from(new DefaultedRegistry<>(defaultId.toString(), registryKey, lifecycle));\n+\t}\n+\n+\tprivate final R registry;\n+\tprivate final Set<RegistryAttribute> attributes = new HashSet<>();", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNzU0Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429017543", "bodyText": "Shouldn't we register it fully? The code in buildAndRegister does AccessorRegistry.getRootRegistry().add(((AccessorRegistry) registry).getRegistryKey(), registry);, which looks similar?", "author": "sfPlayer1", "createdAt": "2020-05-22T02:56:57Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.mojang.serialization.Lifecycle;\n+\n+import net.minecraft.class_5321;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n+\n+/**\n+ * Used to create custom registries, with specified registry attributes.\n+ *\n+ * <pre>\n+ * {@code\n+ *  MutableRegistry<String> exampleRegistry = FabricRegistryBuilder.create(new SimpleRegistry<String>())\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t.build();\n+ * \tRegistry.REGISTRIES.add(new Identifier(\"mod_id\", \"example_registry\"), exampleRegistry);", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2OTE4MQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429169181", "bodyText": "Ah, the javadoc needs updating since it was changed.", "author": "modmuss50", "createdAt": "2020-05-22T10:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNzU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDU4Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429020582", "bodyText": "IMO this code would be clearer by writing it like thhs since I had to look twice whether it was exhaustive:\nif (!attributeHolder.hasAttribute(isClientSync ? RegistryAttribute.SYNCED : RegistryAttribute.PERSISTED)) {\n\tLOGGER.debug(\"Not {} registry: {}\", isClientSync ? \"syncing\" : \"saving\", registryId);\n\tcontinue;\n}", "author": "sfPlayer1", "createdAt": "2020-05-22T03:10:52Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -130,13 +133,44 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (REGISTRY_BLACKLIST.contains(registryId)) {\n+\t\t\tCompoundTag existingRegistryData = null;\n+\n+\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\t}\n+\n+\t\t\tRegistryAttributeHolder attributeHolder = RegistryAttributeHolder.get(registry);\n+\n+\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n \t\t\t\tcontinue;\n-\t\t\t} else if (isClientSync && REGISTRY_BLACKLIST_NETWORK.contains(registryId)) {\n+\t\t\t}\n+\n+\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n+\t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n \t\t\t\tcontinue;\n \t\t\t}", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDgzMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429020831", "bodyText": "\"preserve existing registry ids if they exist\"", "author": "sfPlayer1", "createdAt": "2020-05-22T03:11:58Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -130,13 +133,44 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (REGISTRY_BLACKLIST.contains(registryId)) {\n+\t\t\tCompoundTag existingRegistryData = null;\n+\n+\t\t\tif (activeIdMap != null && activeIdMap.contains(registryId.toString())) {\n+\t\t\t\texistingRegistryData = activeIdMap.getCompound(registryId.toString());\n+\t\t\t}\n+\n+\t\t\tRegistryAttributeHolder attributeHolder = RegistryAttributeHolder.get(registry);\n+\n+\t\t\tif (!isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.PERSISTED)) {\n+\t\t\t\tLOGGER.debug(\"Not saving non-persistent registry: \" + registryId);\n \t\t\t\tcontinue;\n-\t\t\t} else if (isClientSync && REGISTRY_BLACKLIST_NETWORK.contains(registryId)) {\n+\t\t\t}\n+\n+\t\t\tif (isClientSync && !attributeHolder.hasAttribute(RegistryAttribute.SYNCED)) {\n+\t\t\t\tLOGGER.debug(\"Not syncing registry: \" + registryId);\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tRegistry registry = Registry.REGISTRIES.get(registryId);\n+\t\t\t/*\n+\t\t\t * Dont do anything with vanilla registries on client sync.\n+\t\t\t * When saving, preserve existing registry ids if they exist, else dont save the registry.", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMTUwMQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429021501", "bodyText": "It is quite unclear from a quick look what \"existingRegistryData\" and \"activeIdMap\" are supposed to mean", "author": "sfPlayer1", "createdAt": "2020-05-22T03:15:13Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/RegistrySyncManager.java", "diffHunk": "@@ -130,13 +133,44 @@ public static CompoundTag toTag(boolean isClientSync) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (REGISTRY_BLACKLIST.contains(registryId)) {\n+\t\t\tCompoundTag existingRegistryData = null;", "originalCommit": "89e5bfbde8bcb196583b5937c27ba3446f3408b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2OTQ2NQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429169465", "bodyText": "I will go around and put some comments on things.", "author": "modmuss50", "createdAt": "2020-05-22T10:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMTUwMQ=="}], "type": "inlineReview"}, {"oid": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "url": "https://github.com/FabricMC/fabric/commit/af7a17b7bc44a9c474f61fd65c84f2975e584870", "message": "Feedback and update mappings", "committedDate": "2020-05-22T13:29:01Z", "type": "commit"}, {"oid": "c2eda65f7a6ad0b62bed53c120f9522107d8c915", "url": "https://github.com/FabricMC/fabric/commit/c2eda65f7a6ad0b62bed53c120f9522107d8c915", "message": "Merge remote-tracking branch 'modmuss50/vanilla_registries' into vanilla_registries", "committedDate": "2020-05-22T13:29:33Z", "type": "commit"}, {"oid": "b7ce13e9abc0f5076ecfa775258e2898fd4e88f4", "url": "https://github.com/FabricMC/fabric/commit/b7ce13e9abc0f5076ecfa775258e2898fd4e88f4", "message": "No longer apply mappings to vanilla registries, no longer save empty mapping data.", "committedDate": "2020-05-22T14:04:17Z", "type": "commit"}, {"oid": "ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "url": "https://github.com/FabricMC/fabric/commit/ccbe1bc4dfc0a7aea1c6c9973b7d37f2c67e62c1", "message": "Use Identifier in FabricRegistryBuilder over RegistryKey\nImprove empty registry tag handling", "committedDate": "2020-05-22T14:22:45Z", "type": "commit"}, {"oid": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "url": "https://github.com/FabricMC/fabric/commit/90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "message": "Reorder toTag empty checks", "committedDate": "2020-05-22T14:47:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MzczNA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429593734", "bodyText": "Maybe also clarify this is synced from the RegistryTagManager", "author": "i509VCB", "createdAt": "2020-05-24T02:40:10Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// Synced in EntitySpawnS2CPacket", "originalCommit": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5Mzc3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r429593774", "bodyText": "Needs to be synced. Called by RegistryTagManager which syncs raw ids", "author": "i509VCB", "createdAt": "2020-05-24T02:41:03Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);\n+\n+\t\t// Synced in EntitySpawnS2CPacket\n+\t\tRegistryAttributeHolder.get(Registry.ENTITY_TYPE)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Doesnt appear to need syncing or saving?\n+\t\tRegistryAttributeHolder.get(Registry.ITEM);", "originalCommit": "90e4b4dfaa42d0ecccf6f96942d71588726bbf92", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f56b2f5f1f80162569a68d2673c4226f816437b5", "url": "https://github.com/FabricMC/fabric/commit/f56b2f5f1f80162569a68d2673c4226f816437b5", "message": "Minor fixes", "committedDate": "2020-05-25T16:16:04Z", "type": "commit"}, {"oid": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "url": "https://github.com/FabricMC/fabric/commit/5398201dbc8b34cc83ff451e6bc907524f23ad6f", "message": "Merge remote-tracking branch 'modmuss50/vanilla_registries' into vanilla_registries", "committedDate": "2020-05-25T16:16:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MTcwOA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430691708", "bodyText": "Should this be final?", "author": "i509VCB", "createdAt": "2020-05-26T20:34:02Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import java.util.EnumSet;\n+\n+import com.mojang.serialization.Lifecycle;\n+\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.registry.DefaultedRegistry;\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.SimpleRegistry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.impl.registry.sync.FabricRegistry;\n+import net.fabricmc.fabric.mixin.registry.sync.AccessorRegistry;\n+\n+/**\n+ * Used to create custom registries, with specified registry attributes.\n+ *\n+ * <pre>\n+ * {@code\n+ *  SimpleRegistry<String> registry = FabricRegistryBuilder.createSimple(String.class, new Identifier(\"registry_sync\", \"fabric_registry\"))\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.attribute(RegistryAttribute.SYNCED)\n+ * \t\t\t\t\t\t\t\t\t\t\t\t\t.buildAndRegister();\n+ * \t}\n+ * </pre>\n+ *\n+ * @param <T> The type stored in the Registry\n+ * @param <R> The registry type\n+ */\n+public class FabricRegistryBuilder<T, R extends MutableRegistry<T>> {", "originalCommit": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MjIwMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430692200", "bodyText": "RegistryAccessor?", "author": "i509VCB", "createdAt": "2020-05-26T20:34:36Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/AccessorRegistry.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+@Mixin(Registry.class)\n+public interface AccessorRegistry<T> {", "originalCommit": "5398201dbc8b34cc83ff451e6bc907524f23ad6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5OTQyMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430699420", "bodyText": "AccessibleRegistry or RegistryAccess/RegistryAccessor. AccessorRegistry sounds like a registry of accessors.", "author": "liach", "createdAt": "2020-05-26T20:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MjIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMjM5Ng==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430702396", "bodyText": "The rest of the module has Mixin* (including MixinRegistry). so not sure what to do here.", "author": "modmuss50", "createdAt": "2020-05-26T20:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MjIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMjg0Mg==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430702842", "bodyText": "no worries, this is rather trivial.", "author": "liach", "createdAt": "2020-05-26T20:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MjIwMA=="}], "type": "inlineReview"}, {"oid": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "url": "https://github.com/FabricMC/fabric/commit/1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "message": "Make FabricRegistryBuilder final", "committedDate": "2020-05-26T20:55:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMTU0OA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430721548", "bodyText": "Can't Lifecycle.stable() be a default?", "author": "Earthcomputer", "createdAt": "2020-05-26T21:36:06Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/FabricRegistryBuilder.java", "diffHunk": "@@ -67,7 +67,7 @@\n \t * @param <T> The type stored in the Registry\n \t * @return An instance of FabricRegistryBuilder\n \t */\n-\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(class_5321<Registry<T>> registryKey, Lifecycle lifecycle) {\n+\tpublic static <T> FabricRegistryBuilder<T, SimpleRegistry<T>> createSimple(RegistryKey<Registry<T>> registryKey, Lifecycle lifecycle) {", "originalCommit": "af7a17b7bc44a9c474f61fd65c84f2975e584870", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMjE0MA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430722140", "bodyText": "Oh, I can't read apparently", "author": "Earthcomputer", "createdAt": "2020-05-26T21:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMjI3NA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430722274", "bodyText": "People should decide the lifecycle themselves.", "author": "i509VCB", "createdAt": "2020-05-26T21:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMzEyNQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r430723125", "bodyText": "People should decide the lifecycle themselves.\n\nWhy... Lifecycle.experimental() should not be used except in truly experimental circumstances (which are exceptional). It causes a warning message to pup up for the player.", "author": "Earthcomputer", "createdAt": "2020-05-26T21:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMTU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4MzQ0MQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r432083441", "bodyText": "Raw id used in the EnchantmentTableScreenHandler. Needs to be synced", "author": "i509VCB", "createdAt": "2020-05-28T19:52:15Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Synced in PlaySoundS2CPacket.\n+\t\tRegistryAttributeHolder.get(Registry.SOUND_EVENT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Synced with RegistryTagContainer from RegistryTagManager.\n+\t\tRegistryAttributeHolder.get(Registry.FLUID)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// StatusEffectInstance serialises with raw id.\n+\t\tRegistryAttributeHolder.get(Registry.STATUS_EFFECT)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED)\n+\t\t\t\t.addAttribute(RegistryAttribute.PERSISTED);\n+\n+\t\t// Synced in ChunkDeltaUpdateS2CPacket among other places, a pallet is used when saving.\n+\t\tRegistryAttributeHolder.get(Registry.BLOCK)\n+\t\t\t\t.addAttribute(RegistryAttribute.SYNCED);\n+\n+\t\t// Does not appear to be saved or synced, the string id is used.\n+\t\tRegistryAttributeHolder.get(Registry.ENCHANTMENT);", "originalCommit": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDI5Mw==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r432690293", "bodyText": "Great spot, thanks a lot.", "author": "modmuss50", "createdAt": "2020-05-29T19:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4MzQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzMTQwOQ==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r432131409", "bodyText": "Entry for BlockEntityType is missing", "author": "i509VCB", "createdAt": "2020-05-28T21:22:41Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/FabricRegistryInit.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttribute;\n+import net.fabricmc.fabric.api.event.registry.RegistryAttributeHolder;\n+\n+public class FabricRegistryInit implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {", "originalCommit": "1d2c8afcc4ec30f1d9b55024fe24a21ae3f0de1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzMTkxMA==", "url": "https://github.com/FabricMC/fabric/pull/525#discussion_r432131910", "bodyText": "From my checks, the raw ids are not used anywhere", "author": "i509VCB", "createdAt": "2020-05-28T21:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzMTQwOQ=="}], "type": "inlineReview"}, {"oid": "edfbf82966fcc736b9f40cd0461500748ba9ef36", "url": "https://github.com/FabricMC/fabric/commit/edfbf82966fcc736b9f40cd0461500748ba9ef36", "message": "Merge branch '1.16' into vanilla_registries\n\n# Conflicts:\n#\tbuild.gradle\n#\tfabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinMinecraftDedicatedServer.java\n#\tfabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/MixinIdRegistry.java", "committedDate": "2020-05-29T19:22:04Z", "type": "commit"}, {"oid": "bc362d49d7891775e1c4c4a7320962771ae7d5f7", "url": "https://github.com/FabricMC/fabric/commit/bc362d49d7891775e1c4c4a7320962771ae7d5f7", "message": "Update registry attributes", "committedDate": "2020-05-29T19:27:36Z", "type": "commit"}, {"oid": "a1c295c9093c1eb5ed08605f347855a26ec338f4", "url": "https://github.com/FabricMC/fabric/commit/a1c295c9093c1eb5ed08605f347855a26ec338f4", "message": "Merge remote-tracking branch 'remotes/origin/1.16' into vanilla_registries", "committedDate": "2020-06-04T20:25:15Z", "type": "commit"}, {"oid": "ad4e033bf603860318a7fee6a73ce5128b5efebd", "url": "https://github.com/FabricMC/fabric/commit/ad4e033bf603860318a7fee6a73ce5128b5efebd", "message": "Fix compile issue", "committedDate": "2020-06-04T20:27:23Z", "type": "commit"}]}