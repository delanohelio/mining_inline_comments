{"pr_number": 4074, "pr_title": "DB-9803 Implement GET_NEAREST_TRANSACTION sql function.", "pr_createdAt": "2020-09-02T17:05:12Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4074", "timeline": [{"oid": "b57af712f7bee940e172208496f77af0166c6237", "url": "https://github.com/splicemachine/spliceengine/commit/b57af712f7bee940e172208496f77af0166c6237", "message": "DB-9803 Implement GET_NEAREST_TRANSACTION sql function.", "committedDate": "2020-09-02T17:04:24Z", "type": "commit"}, {"oid": "0a6e034051cb4b8aaf4e8164551563ce4a611d7c", "url": "https://github.com/splicemachine/spliceengine/commit/0a6e034051cb4b8aaf4e8164551563ce4a611d7c", "message": "Merge remote-tracking branch 'origin/master' into DB-9803", "committedDate": "2020-09-02T17:26:54Z", "type": "commit"}, {"oid": "f7019b47f1536da0ce877d3d22dd4a31e969bcd8", "url": "https://github.com/splicemachine/spliceengine/commit/f7019b47f1536da0ce877d3d22dd4a31e969bcd8", "message": "DB-9803 fix spotbug issues.", "committedDate": "2020-09-02T17:45:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMzM2NA==", "url": "https://github.com/splicemachine/spliceengine/pull/4074#discussion_r483413364", "bodyText": "If there are other ITs running concurrently at the time of this test, and there is another write txn goes in between the two calls of values get_nearest_transaction(current_timestamp), would we guarantee to get result1=result2?", "author": "yxia92", "createdAt": "2020-09-04T06:27:54Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/transactions/GetNearestTransactionIT.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.transactions;\n+\n+import com.splicemachine.derby.test.framework.SpliceSchemaWatcher;\n+import com.splicemachine.derby.test.framework.SpliceTableWatcher;\n+import com.splicemachine.derby.test.framework.SpliceWatcher;\n+import com.splicemachine.derby.test.framework.TestConnection;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TestRule;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import static org.hamcrest.Matchers.lessThan;\n+\n+public class GetNearestTransactionIT {\n+\n+    private static final String schemaName = GetNearestTransactionIT.class.getSimpleName().toUpperCase();\n+\n+    private static final SpliceSchemaWatcher schemaWatcher = new SpliceSchemaWatcher(schemaName);\n+\n+    private static final SpliceTableWatcher table = new SpliceTableWatcher(\"A\",schemaWatcher.schemaName,\"(a INT)\");\n+\n+    private static final SpliceWatcher classWatcher = new SpliceWatcher();\n+\n+    @ClassRule\n+    public static TestRule chain = RuleChain.outerRule(classWatcher)\n+            .around(schemaWatcher)\n+            .around(table);\n+\n+    private static TestConnection conn;\n+    private static TestConnection connACOff;\n+\n+    @BeforeClass\n+    public static void setUpClass() throws Exception {\n+        conn = classWatcher.getOrCreateConnection();\n+        connACOff = classWatcher.createConnection();\n+        connACOff.setAutoCommit(false);\n+    }\n+\n+    long resultOf(String query, TestConnection conn) throws SQLException {\n+        ResultSet rs = conn.query(query);\n+        Assert.assertTrue(rs.next());\n+        long result = rs.getLong(1);\n+        Assert.assertFalse(rs.wasNull());\n+        Assert.assertFalse(rs.next());\n+        return result;\n+    }\n+\n+    @Test\n+    public void GetNearestTransactionBeforeFirstTransactionReturnsNull() throws Exception {\n+        ResultSet rs = conn.query(\"VALUES get_nearest_Transaction(TIMESTAMPADD(SQL_TSI_MONTH, -10, CURRENT_TIMESTAMP ))\");\n+        Assert.assertTrue(rs.next());\n+        Assert.assertEquals(0, rs.getLong(1));\n+        Assert.assertTrue(rs.wasNull());\n+        Assert.assertFalse(rs.next());\n+    }\n+\n+    @Test\n+    public void GetNearestTransactionWorksCorrectlyWithAutoCommit() throws Exception {\n+        try {\n+            long result1 = resultOf(\"VALUES get_nearest_Transaction(CURRENT_TIMESTAMP)\", connACOff);\n+            long result2 = resultOf(\"VALUES get_nearest_Transaction(CURRENT_TIMESTAMP)\", connACOff);\n+            Assert.assertEquals(result1, result2);", "originalCommit": "f7019b47f1536da0ce877d3d22dd4a31e969bcd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNTkxMw==", "url": "https://github.com/splicemachine/spliceengine/pull/4074#discussion_r490225913", "bodyText": "You're right, this test could fail if other tests run on parallel with it.", "author": "hatyo", "createdAt": "2020-09-17T13:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMzM2NA=="}], "type": "inlineReview"}, {"oid": "29c8d9fd3320b13c6c3d9c2f3cee2ea171ac2b61", "url": "https://github.com/splicemachine/spliceengine/commit/29c8d9fd3320b13c6c3d9c2f3cee2ea171ac2b61", "message": "DB-9803 address comments.", "committedDate": "2020-09-17T13:12:32Z", "type": "commit"}, {"oid": "8536efca6aa5cd8fc2dfae68741d059cdeb86bce", "url": "https://github.com/splicemachine/spliceengine/commit/8536efca6aa5cd8fc2dfae68741d059cdeb86bce", "message": "Merge remote-tracking branch 'origin/master' into DB-9803", "committedDate": "2020-09-17T13:12:46Z", "type": "commit"}, {"oid": "33e18307d5af4137727c9c308c3df6a624fec48e", "url": "https://github.com/splicemachine/spliceengine/commit/33e18307d5af4137727c9c308c3df6a624fec48e", "message": "DB-9803 moved GetNearestTransactionIT test to hbase tests.", "committedDate": "2020-09-17T14:37:19Z", "type": "commit"}]}