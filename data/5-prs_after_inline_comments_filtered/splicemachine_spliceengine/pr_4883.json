{"pr_number": 4883, "pr_title": "DB-11047 add option splice.function.preserveLineEndings", "pr_createdAt": "2020-12-16T21:14:39Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4883", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTI2Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r545531266", "bodyText": "License header is missing", "author": "jyuanca", "createdAt": "2020-12-18T02:25:01Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvParserConfig.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.splicemachine.derby.stream.function.csv;\n+import org.supercsv.prefs.CsvPreference;\n+", "originalCommit": "c45bf3cc9d6030b474820efe3af9b562d6f10fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODUwMA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r545628500", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-12-18T07:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzMTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzNTM2MA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r545535360", "bodyText": "is0D0Amode is always false and never true, then why we need this flag?", "author": "jyuanca", "createdAt": "2020-12-18T02:37:23Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "diffHunk": "@@ -310,8 +314,10 @@ private String getCurrentLine() {\n             return currentRow.last();\n         }\n     }\n+    boolean is0D0Amode = false;\n ", "originalCommit": "c45bf3cc9d6030b474820efe3af9b562d6f10fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyODkxNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r545628914", "bodyText": "you're right, that's a leftover from a previous attempt i forgot to remove. thanks!", "author": "martinrupp", "createdAt": "2020-12-18T07:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUzNTM2MA=="}], "type": "inlineReview"}, {"oid": "5a31a9bb7f0668875dd2fdc910bc1a258a556ddf", "url": "https://github.com/splicemachine/spliceengine/commit/5a31a9bb7f0668875dd2fdc910bc1a258a556ddf", "message": "DB-11047 add option splice.function.skipCarriageReturn to configure if we skip 0D", "committedDate": "2020-12-18T09:51:54Z", "type": "forcePushed"}, {"oid": "3a3c30b7b30881c59bf86bb733c7442259ee6b01", "url": "https://github.com/splicemachine/spliceengine/commit/3a3c30b7b30881c59bf86bb733c7442259ee6b01", "message": "DB-11047 add option splice.function.skipCarriageReturn to configure if we skip 0D", "committedDate": "2020-12-18T09:52:53Z", "type": "forcePushed"}, {"oid": "a62b782ed6540d3549cdace2cff7022e8fa7c285", "url": "https://github.com/splicemachine/spliceengine/commit/a62b782ed6540d3549cdace2cff7022e8fa7c285", "message": "DB-11047 own code", "committedDate": "2020-12-18T23:12:07Z", "type": "forcePushed"}, {"oid": "5a3e0941441d6ea830aee68f0e0797e358d91b1b", "url": "https://github.com/splicemachine/spliceengine/commit/5a3e0941441d6ea830aee68f0e0797e358d91b1b", "message": "DB-11047 add option splice.function.skipCarriageReturn to configure if we skip 0D", "committedDate": "2020-12-21T20:00:52Z", "type": "forcePushed"}, {"oid": "35b898bba707296c119f8f2752752426da902444", "url": "https://github.com/splicemachine/spliceengine/commit/35b898bba707296c119f8f2752752426da902444", "message": "DB-11047 add option splice.function.skipCarriageReturn to configure if we skip 0D", "committedDate": "2020-12-21T20:46:18Z", "type": "forcePushed"}, {"oid": "00f29d93d4d2dd6097834ad5bb8d33bc9b55c1d7", "url": "https://github.com/splicemachine/spliceengine/commit/00f29d93d4d2dd6097834ad5bb8d33bc9b55c1d7", "message": "DB-11047 add option splice.function.skipCarriageReturn to configure if we skip 0D", "committedDate": "2020-12-21T20:49:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg2MzgyMg==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547863822", "bodyText": "This logic looks reversed to me, it shouldn't have the ! I think.", "author": "dgomezferro", "createdAt": "2020-12-23T09:38:56Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/storage/SpliceRegionAdmin.java", "diffHunk": "@@ -782,8 +782,14 @@ public static  ConglomerateDescriptor getIndex(TableDescriptor td, String indexN\n \n         boolean quotedEmptyIsNull = !PropertyUtil.getCachedDatabaseBoolean(\n                 lcc, Property.SPLICE_DB2_IMPORT_EMPTY_STRING_COMPATIBLE);\n-        MutableCSVTokenizer tokenizer = new MutableCSVTokenizer(reader,preference, false, quotedEmptyIsNull,\n+        boolean preserveLineEndings = !PropertyUtil.getCachedDatabaseBoolean(", "originalCommit": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTM5NA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955394", "bodyText": "you're right", "author": "martinrupp", "createdAt": "2020-12-23T13:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg2MzgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODg2MA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478860", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-12-28T20:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg2MzgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MzU1Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547893557", "bodyText": "I don't think reusing the StringBuilder makes a big difference, but if you want to reuse it I'd call sb.setLength(0) rather than sb.delete() to clear it, since the latter ends up calling a native method.", "author": "dgomezferro", "createdAt": "2020-12-23T10:41:00Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/QuoteTrackingTokenizer.java", "diffHunk": "@@ -110,7 +110,10 @@ public String at(int index) {\n         }\n \n         public String toString() {\n-            StringBuilder sb = new StringBuilder(length());\n+            if(sb == null)\n+                 sb = new StringBuilder(length());\n+            else\n+                sb.delete(0, sb.length());", "originalCommit": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTU0Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955543", "bodyText": "ok", "author": "martinrupp", "createdAt": "2020-12-23T13:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODc3MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478771", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-12-28T20:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5MzU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NjEzOA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547896138", "bodyText": "Is it possible to remove this BufferedReader then?", "author": "dgomezferro", "createdAt": "2020-12-23T10:47:11Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/StreamFileFunction.java", "diffHunk": "@@ -80,12 +86,13 @@ public boolean hasNext() {\n                                 return hasNext;\n                             try {\n                                 if (!initialized) {\n+                                    // BUFFERED? it's buffered again...\n                                     reader = new BufferedReader(new InputStreamReader(s,charset));", "originalCommit": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTY1NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955655", "bodyText": "i think so i forgot to check this again", "author": "martinrupp", "createdAt": "2020-12-23T13:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NjEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODY0OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478649", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-12-28T20:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5NjEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNTA1OA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547925058", "bodyText": "Can you repeat this same case with sizes 4 and 6 (buffer ending just before the carriage return, and just after the line feed)?", "author": "dgomezferro", "createdAt": "2020-12-23T12:02:07Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/CsvLineReaderCRTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.impl.load;\n+\n+import com.splicemachine.derby.stream.function.csv.CsvLineReaderCR;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+public class CsvLineReaderCRTest {\n+    void test(String s, String[] expected, int configBufferSize) throws IOException {\n+        CsvLineReaderCR r = new CsvLineReaderCR(new StringReader(s), 1024, configBufferSize);\n+\n+        for(int i=0; ; i++) {\n+            String line = r.readLine();\n+            if( line == null ) break;\n+            Assert.assertTrue( i < expected.length );\n+            Assert.assertEquals(r.getLineNumber(), i+1);\n+            Assert.assertEquals( expected[i*2], line);\n+            Assert.assertEquals( expected[i*2+1], r.getCurrentLineEnding());\n+        }\n+        Assert.assertEquals( expected.length/2, r.getLineNumber() );\n+\n+    }\n+    @Test\n+    public void testSimple() throws IOException {\n+        test( \"Hello\\nWorld\\n\", new String[]{\"Hello\", \"\\n\", \"World\", \"\\n\"}, 1024);\n+        test( \"Hello\\r\\nWorld\\n\", new String[]{\"Hello\", \"\\r\\n\", \"World\", \"\\n\"}, 1024);\n+        test( \"Hello\\nWorld\\r\", new String[]{\"Hello\", \"\\n\", \"World\", \"\\r\"}, 1024);\n+        test( \"Hello\\r\\nWorld\\r\\n\", new String[]{\"Hello\", \"\\r\\n\", \"World\", \"\\r\\n\"}, 1024);\n+        test( \"Hello\\rWorld\", new String[]{\"Hello\", \"\\r\", \"World\", \"\"}, 1024);\n+    }\n+\n+    @Test\n+    public void testAllCases() throws IOException {\n+        boolean crNewline = true;\n+        test(\"\", new String[]{}, 5);\n+\n+        // CASE 1 : configBufferSize=10\n+        // 1234\\n\n+        test(\"1234\\n\", new String[]{\"1234\", \"\\n\"}, 10);\n+        // CASE 2 : configBufferSize=10\n+        // 1234<EOF>\n+        test(\"1234\", new String[]{\"1234\", \"\"}, 10);\n+\n+        // CASE 3 : configBufferSize=20\n+        // 123\\r\\n123\\r\\n\n+        test(\"123\\r\\n123\\r\\nabc\\n\", new String[]{\"123\", \"\\r\\n\", \"123\", \"\\r\\n\", \"abc\", \"\\n\"}, 20);\n+\n+\n+        // CASE 4 : configBufferSize=20\n+        // 123\\r123\\r\\n\n+\n+        test(\"123\\r123\\r\\nabc\\n\", new String[]{\"123\", \"\\r\", \"123\", \"\\r\\n\", \"abc\", \"\\n\"}, 20);\n+\n+        // CASE 5 : configBufferSize=5\n+        // 1234\\r<EOF>\n+        test(\"1234\\r\", new String[]{\"1234\", \"\\r\"}, 5);\n+        //test(\"1234\\r\", new String[]{\"1234\\r\"}, false, 5);\n+\n+        // CASE 6 : configBufferSize=5\n+        // 1234\\r\\n\n+        // abc\\r\\n\n+        test(\"1234\\r\\nabc\\r\\n\", new String[]{\"1234\", \"\\r\\n\", \"abc\", \"\\r\\n\"}, 5);", "originalCommit": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTc3Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955776", "bodyText": "yes good idea", "author": "martinrupp", "createdAt": "2020-12-23T13:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNTA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODUzMQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478531", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-12-28T20:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNTA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjM1NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547926355", "bodyText": "I think this could be protected since it's only accessed from a subclass", "author": "dgomezferro", "createdAt": "2020-12-23T12:05:30Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/AbstractFileFunction.java", "diffHunk": "@@ -268,7 +270,7 @@ else if (values.size() < returnRow.nColumns()) {\n         }\n     }\n \n-    void checkPreference() {\n+    public void checkPreference() {", "originalCommit": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTgxMw==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955813", "bodyText": "ok", "author": "martinrupp", "createdAt": "2020-12-23T13:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODQyNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478424", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-12-28T20:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjM1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTk0Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547929946", "bodyText": "We should use StringBuilder (non thread safe version, recommended)", "author": "dgomezferro", "createdAt": "2020-12-23T12:14:57Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/function/csv/CsvLineReaderCR.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.stream.function.csv;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+\n+/**\n+ * A buffered CSV line reader which is able to return the current line ending's type via\n+ * getCurrentLineEndingType / getCurrentLineEnding (like \"\\r\\n\", \"\\r\", \"\\n\", or \"\" = EOF)\n+ */\n+public class CsvLineReaderCR {\n+    private final Reader reader;\n+    private final int configInitialStringBufferSize;\n+    private final int configBufferSize;\n+\n+    private char bufferBytes[];\n+    private int bufferSize, bufferPos;\n+    private int lineNumber = 0;\n+\n+    private StringBuffer res = null;", "originalCommit": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1NTg2Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547955867", "bodyText": "ah ok", "author": "martinrupp", "createdAt": "2020-12-23T13:21:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3ODQ2MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r549478461", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-12-28T20:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNDcxNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547934714", "bodyText": "@OlegMazurov does HdfsImportIT work with the remote ITs? Do we need to ignore these added tests for the remote profile?", "author": "dgomezferro", "createdAt": "2020-12-23T12:27:16Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/load/HdfsImportIT.java", "diffHunk": "@@ -2117,4 +2122,95 @@ public void testVarbitColumn() throws Exception {\n         Assert.assertEquals(expected, result);\n     }\n \n+    @Test\n+    public void testAnalyzeExternalTable() throws Exception {", "originalCommit": "d723b8e2d0ae517660f5c5d65f6158ec5a90a26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0Njg5Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4883#discussion_r547946893", "bodyText": "I see HdfsImportIT is excluded in remote_it, so disregard this.", "author": "dgomezferro", "createdAt": "2020-12-23T12:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNDcxNA=="}], "type": "inlineReview"}, {"oid": "a39cf3692a4ca737a8c7e65b99542935e1e4ca72", "url": "https://github.com/splicemachine/spliceengine/commit/a39cf3692a4ca737a8c7e65b99542935e1e4ca72", "message": "DB-11047 fix mem platform", "committedDate": "2020-12-28T20:30:45Z", "type": "forcePushed"}, {"oid": "17a4e0ba782ee8b3b2b5ee60ee5e068391b77d1a", "url": "https://github.com/splicemachine/spliceengine/commit/17a4e0ba782ee8b3b2b5ee60ee5e068391b77d1a", "message": "DB-11047 add option splice.function.skipCarriageReturn to configure if we skip 0D", "committedDate": "2021-01-04T08:44:20Z", "type": "commit"}, {"oid": "eae94dbbe01025734e29d1d66f2a70771b820b3f", "url": "https://github.com/splicemachine/spliceengine/commit/eae94dbbe01025734e29d1d66f2a70771b820b3f", "message": "DB-11047 renamed to splice.function.skipCarriageReturnIn0D0A, added QuoteTrackingTokenizer Test", "committedDate": "2021-01-04T08:44:20Z", "type": "commit"}, {"oid": "07123e4c23044317f2062a37fcbfc1ef65c058cb", "url": "https://github.com/splicemachine/spliceengine/commit/07123e4c23044317f2062a37fcbfc1ef65c058cb", "message": "DB-11047 renamed to splice.function.preserveLineEndings, fix single line problems\n\n- splice.function.preserveLineEndings (default = false)\n- if splice.function.preserveLineEndings = true, multiline strings will contain the \\r, \\r\\n, \\n\nexactly like in file. Otherwise all are \\n.", "committedDate": "2021-01-04T08:44:20Z", "type": "commit"}, {"oid": "3270b8b2a44f9b208eced1a512ca41e4c057af83", "url": "https://github.com/splicemachine/spliceengine/commit/3270b8b2a44f9b208eced1a512ca41e4c057af83", "message": "DB-11047 fix some namings, test", "committedDate": "2021-01-04T08:44:20Z", "type": "commit"}, {"oid": "ccfa025d439862de7c616ac6bf2110b8f1edb041", "url": "https://github.com/splicemachine/spliceengine/commit/ccfa025d439862de7c616ac6bf2110b8f1edb041", "message": "DB-11047 fix QuoteTrackingTokenizerTest", "committedDate": "2021-01-04T08:44:20Z", "type": "commit"}, {"oid": "9cdf62c0700994bccf0647d2391ba36ce62b9e83", "url": "https://github.com/splicemachine/spliceengine/commit/9cdf62c0700994bccf0647d2391ba36ce62b9e83", "message": "DB-11047 Fix review comments", "committedDate": "2021-01-04T08:44:20Z", "type": "commit"}, {"oid": "c40b1426088b8fd0510f08104cb4676c3f503234", "url": "https://github.com/splicemachine/spliceengine/commit/c40b1426088b8fd0510f08104cb4676c3f503234", "message": "DB-11047 fix mem platform", "committedDate": "2021-01-04T08:44:20Z", "type": "commit"}, {"oid": "ab5aed71ab226fcadfd5679c72dc30c638007e5c", "url": "https://github.com/splicemachine/spliceengine/commit/ab5aed71ab226fcadfd5679c72dc30c638007e5c", "message": "DB-11047 remove double testAnalyzeExternalTable causing mem failure", "committedDate": "2021-01-04T08:44:20Z", "type": "commit"}, {"oid": "ab5aed71ab226fcadfd5679c72dc30c638007e5c", "url": "https://github.com/splicemachine/spliceengine/commit/ab5aed71ab226fcadfd5679c72dc30c638007e5c", "message": "DB-11047 remove double testAnalyzeExternalTable causing mem failure", "committedDate": "2021-01-04T08:44:20Z", "type": "forcePushed"}, {"oid": "c6e1b22efc00ec731ab4f5f80797740b338afde5", "url": "https://github.com/splicemachine/spliceengine/commit/c6e1b22efc00ec731ab4f5f80797740b338afde5", "message": "DB-11047 fix", "committedDate": "2021-01-04T13:06:59Z", "type": "commit"}]}