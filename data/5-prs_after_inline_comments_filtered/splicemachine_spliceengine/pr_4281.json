{"pr_number": 4281, "pr_title": "DB-9010 implement FK ON DELETE CASCADE", "pr_createdAt": "2020-10-13T19:29:22Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4281", "timeline": [{"oid": "488d4458222da9f21a067c9668a76014fd8393fb", "url": "https://github.com/splicemachine/spliceengine/commit/488d4458222da9f21a067c9668a76014fd8393fb", "message": "DB-9009 implement FK ON DELETE SET NULL.", "committedDate": "2020-10-08T15:36:24Z", "type": "commit"}, {"oid": "8f113738d59d877946937c0988bf2b6d11715dec", "url": "https://github.com/splicemachine/spliceengine/commit/8f113738d59d877946937c0988bf2b6d11715dec", "message": "DB-9009 refactoring and cleaning up.", "committedDate": "2020-10-08T15:37:02Z", "type": "commit"}, {"oid": "bed852b3949b015f6ddea7f6d489b7c407957c7d", "url": "https://github.com/splicemachine/spliceengine/commit/bed852b3949b015f6ddea7f6d489b7c407957c7d", "message": "DB-9009 address spotbugs issues.", "committedDate": "2020-10-08T17:04:42Z", "type": "commit"}, {"oid": "d9fa652767e34e1fe0a92ba8658619cb4819badd", "url": "https://github.com/splicemachine/spliceengine/commit/d9fa652767e34e1fe0a92ba8658619cb4819badd", "message": "DB-9009 make FK tests green.", "committedDate": "2020-10-08T18:02:47Z", "type": "commit"}, {"oid": "e868cbfa2c6bc8efd7a4b92901b22ab8185debcb", "url": "https://github.com/splicemachine/spliceengine/commit/e868cbfa2c6bc8efd7a4b92901b22ab8185debcb", "message": "DB-9009 add tests and fixes.\n\n- add tests for ON DELETE SET NULL.\n- fix self-referencing FK with ON DELETE SET NULL.\n- other smaller fixes.", "committedDate": "2020-10-08T19:55:26Z", "type": "commit"}, {"oid": "be8ecb2293a12ebfaec9b4bf49bb0cc0729e47ea", "url": "https://github.com/splicemachine/spliceengine/commit/be8ecb2293a12ebfaec9b4bf49bb0cc0729e47ea", "message": "Merge remote-tracking branch 'origin/master' into DB-9009", "committedDate": "2020-10-08T19:57:16Z", "type": "commit"}, {"oid": "bb96fc91fb918b8bef0c2a2a06073618ac3cd914", "url": "https://github.com/splicemachine/spliceengine/commit/bb96fc91fb918b8bef0c2a2a06073618ac3cd914", "message": "DB-10435 Add test.", "committedDate": "2020-10-08T20:15:10Z", "type": "commit"}, {"oid": "f557ff1d7eb3edf6a99bccc527abcde6e30f203a", "url": "https://github.com/splicemachine/spliceengine/commit/f557ff1d7eb3edf6a99bccc527abcde6e30f203a", "message": "Merge remote-tracking branch 'origin/master' into DB-9009", "committedDate": "2020-10-12T07:00:07Z", "type": "commit"}, {"oid": "a112b13605964b374f99a0f71b4bf8358d639a9b", "url": "https://github.com/splicemachine/spliceengine/commit/a112b13605964b374f99a0f71b4bf8358d639a9b", "message": "DB-9009 address comments.", "committedDate": "2020-10-12T11:28:41Z", "type": "commit"}, {"oid": "a67c4e7532a033098c2dbe79e1c9cd3a756eebac", "url": "https://github.com/splicemachine/spliceengine/commit/a67c4e7532a033098c2dbe79e1c9cd3a756eebac", "message": "Merge remote-tracking branch 'origin/master' into DB-9009", "committedDate": "2020-10-12T11:36:23Z", "type": "commit"}, {"oid": "30c5d9c6f571c6a4af826e0a9e395b86504ce392", "url": "https://github.com/splicemachine/spliceengine/commit/30c5d9c6f571c6a4af826e0a9e395b86504ce392", "message": "DB-9009 fix spotbugs issues.", "committedDate": "2020-10-12T14:28:35Z", "type": "commit"}, {"oid": "a0e78c7485a1d769a625c91f05f63814e9e7b4f6", "url": "https://github.com/splicemachine/spliceengine/commit/a0e78c7485a1d769a625c91f05f63814e9e7b4f6", "message": "DB-9009 address comments.", "committedDate": "2020-10-13T19:07:34Z", "type": "commit"}, {"oid": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a", "url": "https://github.com/splicemachine/spliceengine/commit/e80b0bb7b957de7c5eeac040ef3f431c2b66952a", "message": "DB-9010 suppport foreign key ON DELETE CASCADE.", "committedDate": "2020-10-13T19:24:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5MzE2OA==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504393168", "bodyText": "What impact will this change have?", "author": "jyuanca", "createdAt": "2020-10-14T04:24:33Z", "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/config/SharedWriteConfiguration.java", "diffHunk": "@@ -105,7 +105,7 @@ public WriteResponse partialFailure(BulkWriteResult result, BulkWrite request) t\n                         context.failed(main, mutationResult);\n                     }\n                 }\n-                return WriteResponse.IGNORE;\n+                return WriteResponse.THROW_ERROR;\n             }", "originalCommit": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0ODAyMw==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504548023", "bodyText": "Changing the WriteResponse to THROW_ERROR will cause the caller is throw an exception, in BuldWriteAction:\nWriteResponse writeResponse=writeConfiguration.partialFailure(bulkWriteResult,currentBulkWrite);\n                        switch(writeResponse){\n                            case THROW_ERROR:\n                                partialThrownErrorRows.add(currentBulkWrite.getSize());\n                                thrown=true;\n                                throw parseIntoException(bulkWriteResult);\n\nThe thrown exception informs the caller of the BulkWriteAction (which in our case, could be yet another WriteHandler) that something went wrong so we also cancel persisting the mutations during the call to flush.\nWithout changing this, I was running into the following problem that is best illustrated with an example; we have three tables parent, child, and grandChild related to each other with FK relationships (notice that child's FK has on delete cascade while grandChild's FK has on delete no action):\ncreate table parent(col1 int, col2 varchar(2), col3 int, col4 int, primary key (col2, col4));\ninsert into parent values (1, 'a', 1, 1);\ninsert into parent values (2, 'b', 2, 2);\ninsert into parent values (3, 'c', 3, 3);\ncreate table child(col1 int primary key, col2 varchar(2), col3 int, col4 timestamp, constraint fkey_1 foreign key(col2, col3) references parent(col2, col4) on delete cascade);\ninsert into child values (1, 'b', 2, '2020-09-09 10:10:10.123456');\ninsert into child values (400, 'a', 1, '2019-09-09 10:10:10.123456');\ninsert into child values (2, 'b', 2, '2018-09-09 10:10:10.123456');\ncreate table grandChild(col1 int references child(col1) on delete no action, col2 varchar(2));\ninsert into grandChild values (1, 'z');\ninsert into grandChild values (1, 'z');\ninsert into grandChild values (1, 'z');\ninsert into grandChild values (400, 'y');\n\nIf we attempt to delete from parent:\ndelete from parent where col1 = 2;\n\nthe deletion will remove the row (2, 'b', 2, 2) from parent and also cause these rows to be deleted from child:\n(1, 'b', 2, '2020-09-09 10:10:10.123456')\n(2, 'b', 2, '2018-09-09 10:10:10.123456')\n\nHowever the deletion of (1, 'b', 2, '2020-09-09 10:10:10.123456') will violate the grandChild's FK since it is referenced by the following rows:\n(1, 'z')\n(1, 'z')\n(1, 'z')\n\nWith WriteResponse.IGNORE;, the failure triggered by the child foreign key interceptor is not send to the parent foreign key interceptor, this means the deletion on the parent works but fails on the child. As a result, we get the following inconsistent results:\nsplice> select * From parent;\nCOL1       |C&|COL3       |COL4\n--------------------------------------\n1          |a |1          |1\n3          |c |3          |3\n2 rows selected\nELAPSED TIME = 29 milliseconds\nsplice> select * from child;\nCOL1       |COL2|COL3       |COL4\n----------------------------------------------------------\n1          |b   |2          |2020-09-09 10:10:10.123456\n2          |b   |2          |2018-09-09 10:10:10.123456\n400        |a   |1          |2019-09-09 10:10:10.123456\n3 rows selected\nELAPSED TIME = 14 milliseconds\nsplice> select * from grandchild;\nCOL1       |COL2\n----------------\n1          |z\n1          |z\n1          |z\n400        |y\n\nWith WriteResponse.THROW_ERROR the exception is propagated and caught by = parent foreign key interceptor so it also cancels the deletion causing the overall operation to rollback and preserving the referential integrity of the database.\nI honestly still do not know the full scope of changing the WriteRespose like that, but it looks to be more correct than the previous behavior (to simply ignore partial failures), I think also @dgomezferro agrees on this. I am hoping we have enough test coverage that can unravel any potential issue introduced with this.", "author": "hatyo", "createdAt": "2020-10-14T09:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5MzE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5NDQwNw==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504394407", "bodyText": "currentRowKey is not used", "author": "jyuanca", "createdAt": "2020-10-14T04:29:26Z", "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/context/PipelineWriteContext.java", "diffHunk": "@@ -124,14 +124,21 @@ public void result(KVPair put, WriteResult result) {\n \n     @Override\n     public void result(byte[] resultRowKey, WriteResult result) {\n+        boolean added = false;\n         for (KVPair kvPair : resultsMap.keySet()) {\n             byte[] currentRowKey = kvPair.getRowKey();\n             if (Arrays.equals(currentRowKey, resultRowKey)) {\n                 resultsMap.put(kvPair, result);\n-                return;\n+                added = true;\n+                break;\n+            }\n+        }\n+        if (!added) {\n+            for (KVPair kvPair : resultsMap.keySet()) {\n+                byte[] currentRowKey = kvPair.getRowKey();", "originalCommit": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0OTUxNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504549515", "bodyText": "Fixed it, thanks!", "author": "hatyo", "createdAt": "2020-10-14T09:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5NDQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwOTQwOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504409409", "bodyText": "Can you comment the magic number 2?", "author": "jyuanca", "createdAt": "2020-10-14T05:26:10Z", "path": "splice_machine/src/main/java/com/splicemachine/pipeline/foreignkey/actions/OnDeleteAbstractAction.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.pipeline.foreignkey.actions;\n+\n+import com.carrotsearch.hppc.ObjectObjectHashMap;\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.services.io.StoredFormatIds;\n+import com.splicemachine.ddl.DDLMessage;\n+import com.splicemachine.derby.ddl.DDLUtils;\n+import com.splicemachine.derby.utils.marshall.dvd.TypeProvider;\n+import com.splicemachine.derby.utils.marshall.dvd.VersionedSerializers;\n+import com.splicemachine.encoding.Encoding;\n+import com.splicemachine.encoding.MultiFieldDecoder;\n+import com.splicemachine.kvpair.KVPair;\n+import com.splicemachine.pipeline.callbuffer.CallBuffer;\n+import com.splicemachine.pipeline.client.WriteResult;\n+import com.splicemachine.pipeline.context.WriteContext;\n+import com.splicemachine.pipeline.foreignkey.ForeignKeyViolationProcessor;\n+import com.splicemachine.primitives.Bytes;\n+import com.splicemachine.si.api.data.TxnOperationFactory;\n+import com.splicemachine.si.api.txn.TxnView;\n+import com.splicemachine.si.impl.SimpleTxnFilter;\n+import com.splicemachine.si.impl.driver.SIDriver;\n+import com.splicemachine.si.impl.readresolve.NoOpReadResolver;\n+import com.splicemachine.si.impl.txn.ActiveWriteTxn;\n+import com.splicemachine.si.impl.txn.WritableTxn;\n+import com.splicemachine.storage.*;\n+import com.splicemachine.utils.Pair;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public abstract class OnDeleteAbstractAction extends Action {\n+\n+    private static final int MAX_BUFFER_SIZE = 1000;\n+\n+    protected final DDLMessage.FKConstraintInfo constraintInfo;\n+    protected final ObjectObjectHashMap<KVPair, KVPair> mutationBuffer;\n+    protected final CallBuffer<KVPair> pipelineBuffer;\n+    Partition indexTable;\n+    private final TxnOperationFactory txnOperationFactory;\n+\n+    private final ForeignKeyViolationProcessor violationProcessor;\n+\n+    public OnDeleteAbstractAction(Long backingIndexConglomId,\n+                                  DDLMessage.FKConstraintInfo constraintInfo,\n+                                  WriteContext writeContext,\n+                                  TxnOperationFactory txnOperationFactory, ForeignKeyViolationProcessor violationProcessor) throws Exception {\n+        super(constraintInfo.getTable().getConglomerate(), backingIndexConglomId);\n+        this.txnOperationFactory = txnOperationFactory;\n+        assert childBaseTableConglomId != null;\n+        assert backingIndexConglomId != null;\n+        assert violationProcessor != null;\n+        this.constraintInfo = constraintInfo;\n+        this.mutationBuffer = new ObjectObjectHashMap<>();\n+        this.pipelineBuffer = writeContext.getSharedWriteBuffer(\n+                DDLUtils.getIndexConglomBytes(childBaseTableConglomId),\n+                this.mutationBuffer,\n+                MAX_BUFFER_SIZE * 2 + 10,\n+                true,\n+                writeContext.getTxn(),\n+                writeContext.getToken());\n+        this.indexTable = null;\n+        this.violationProcessor = violationProcessor;\n+    }\n+\n+    /*\n+     * The way prefix keys work is that longer keys sort after shorter keys. We\n+     * are already starting exactly where we want to be, and we want to end as soon\n+     * as we hit a record which is not this key.\n+     *\n+     * Historically, we did this by using an HBase PrefixFilter. We can do that again,\n+     * but it's a bit of a pain to make that work in an architecture-independent\n+     * way (we would need to implement a version of that for other architectures,\n+     * for example. It's much easier for us to just make use of row key sorting\n+     * to do the job for us.\n+     *\n+     * We start where we want, and we need to end as soon as we run off that. The\n+     * first key which is higher than the start key is the start key as a prefix followed\n+     * by 0x00 (in unsigned sort order). Therefore, we make the end key\n+     * [startKey | 0x00].\n+     */\n+    private static DataScan prepareScan(TxnOperationFactory factory, KVPair needle) {\n+        byte[] startKey = needle.getRowKey();\n+        byte[] stopKey = Bytes.unsignedCopyAndIncrement(startKey); // +1 from startKey.\n+        DataScan scan = factory.newDataScan(null); // Non-Transactional, will resolve on this side\n+        return scan.startKey(startKey).stopKey(stopKey);\n+    }\n+\n+    private static Pair<SimpleTxnFilter, SimpleTxnFilter> prepareScanFilters(TxnView txnView, long indexConglomerateId) throws IOException {\n+        SimpleTxnFilter readUncommittedFilter, readCommittedFilter;\n+        if (txnView instanceof ActiveWriteTxn) {\n+            readCommittedFilter = new SimpleTxnFilter(Long.toString(indexConglomerateId), ((ActiveWriteTxn) txnView).getReadCommittedActiveTxn(), NoOpReadResolver.INSTANCE, SIDriver.driver().getTxnStore());\n+            readUncommittedFilter = new SimpleTxnFilter(Long.toString(indexConglomerateId), ((ActiveWriteTxn) txnView).getReadUncommittedActiveTxn(), NoOpReadResolver.INSTANCE, SIDriver.driver().getTxnStore());\n+\n+        } else if (txnView instanceof WritableTxn) {\n+            readCommittedFilter = new SimpleTxnFilter(Long.toString(indexConglomerateId), ((WritableTxn) txnView).getReadCommittedActiveTxn(), NoOpReadResolver.INSTANCE, SIDriver.driver().getTxnStore());\n+            readUncommittedFilter = new SimpleTxnFilter(Long.toString(indexConglomerateId), ((WritableTxn) txnView).getReadUncommittedActiveTxn(), NoOpReadResolver.INSTANCE, SIDriver.driver().getTxnStore());\n+        } else {\n+            throw new IOException(\"invalidTxn,\");\n+        }\n+        return Pair.newPair(readCommittedFilter, readUncommittedFilter);\n+    }\n+\n+    private byte[] isVisible(List<DataCell> next, SimpleTxnFilter txnFilter) throws IOException {\n+        int cellCount = next.size();\n+        for(DataCell dc:next){\n+            DataFilter.ReturnCode rC = txnFilter.filterCell(dc);\n+            switch(rC){\n+                case NEXT_ROW:\n+                    return null; //the entire row is filtered\n+                case SKIP:\n+                case NEXT_COL:\n+                case SEEK:\n+                    cellCount--; //the cell is filtered\n+                    break;\n+                case INCLUDE:\n+                case INCLUDE_AND_NEXT_COL: //the cell is included\n+                default:\n+                    break;\n+            }\n+        }\n+        if(cellCount > 0) {\n+            return next.get(0).key();\n+        }\n+        return null;\n+    }\n+\n+    private Partition getTable() throws IOException {\n+        if(indexTable == null) {\n+            indexTable = SIDriver.driver().getTableFactory().getTable(Long.toString((backingIndexConglomId)));\n+        }\n+        return indexTable;\n+    }\n+\n+    protected abstract WriteResult handleExistingRow(byte[] indexRow, byte[] sourceRowKey) throws Exception;\n+\n+    protected static byte[] toChildBaseRowId(byte[] indexRowId, DDLMessage.FKConstraintInfo fkConstraintInfo) throws StandardException {\n+        MultiFieldDecoder multiFieldDecoder = MultiFieldDecoder.create();\n+        TypeProvider typeProvider = VersionedSerializers.typesForVersion(fkConstraintInfo.getParentTableVersion());\n+        int position = 0;\n+        multiFieldDecoder.set(indexRowId);\n+        for (int i = 0; i < fkConstraintInfo.getFormatIdsCount(); i++) {\n+            if (multiFieldDecoder.nextIsNull()) {\n+                throw StandardException.newException(String.format(\"unexpected index rowid format %s\", Bytes.toHex(indexRowId)));\n+            }\n+            if (fkConstraintInfo.getFormatIds(i) == StoredFormatIds.SQL_DOUBLE_ID) {\n+                position += multiFieldDecoder.skipDouble();\n+            } else if (fkConstraintInfo.getFormatIds(i) == StoredFormatIds.SQL_REAL_ID) {\n+                position += multiFieldDecoder.skipFloat();\n+            } else if (typeProvider.isScalar(fkConstraintInfo.getFormatIds(i))) {\n+                position += multiFieldDecoder.skipLong();\n+            } else {\n+                position += multiFieldDecoder.skip();\n+            }\n+        }\n+        int lastKeyIndex = position - 2;\n+", "originalCommit": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MDE2Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504570162", "bodyText": "I simplified it a bit and added more documentation.", "author": "hatyo", "createdAt": "2020-10-14T10:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwOTQwOQ=="}], "type": "inlineReview"}, {"oid": "c11fcb6a3f13a31c51693a16836cfbaebde324fa", "url": "https://github.com/splicemachine/spliceengine/commit/c11fcb6a3f13a31c51693a16836cfbaebde324fa", "message": "DB-9010 address comments.", "committedDate": "2020-10-14T10:29:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDc1NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504590755", "bodyText": "I don't understand this change, if the rowKey is found it's updated with the result, otherwise all rows are updated with the result? What's the rationale behind it?", "author": "dgomezferro", "createdAt": "2020-10-14T11:06:17Z", "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/context/PipelineWriteContext.java", "diffHunk": "@@ -124,14 +124,21 @@ public void result(KVPair put, WriteResult result) {\n \n     @Override\n     public void result(byte[] resultRowKey, WriteResult result) {", "originalCommit": "e80b0bb7b957de7c5eeac040ef3f431c2b66952a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NDk1OA==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r504774958", "bodyText": "I think previously it wasn't expected to reach this code path with a resultRowKey that is not part of the result.\nNow it is possible when a failure from another inner pipeline is propagated, I thought the best way to handle it is to write the same result (in failing cascade it would be failure) to all rows rolling it back.\nIt kind of makes sense for the particular case of on delete cascade that I demonstrated to Jun in another comment, but I am not this does not break other code paths, therefore I would appreciate more feedback on this if possible.", "author": "hatyo", "createdAt": "2020-10-14T15:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI5MjAzNw==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r505292037", "bodyText": "I think we need to map the lower level failure to the specific rows that failed at this level, and keep the same code we had here.", "author": "dgomezferro", "createdAt": "2020-10-15T07:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3Mjg0NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4281#discussion_r505372845", "bodyText": "Thanks Daniel, will do.", "author": "hatyo", "createdAt": "2020-10-15T08:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDc1NQ=="}], "type": "inlineReview"}, {"oid": "1539ea9be372153a1391a2091fd556bc212961b0", "url": "https://github.com/splicemachine/spliceengine/commit/1539ea9be372153a1391a2091fd556bc212961b0", "message": "DB-9010 address spotbugs issues.", "committedDate": "2020-10-14T11:10:28Z", "type": "commit"}, {"oid": "d48e0db750256adca9c796ea4096bef827b7e44b", "url": "https://github.com/splicemachine/spliceengine/commit/d48e0db750256adca9c796ea4096bef827b7e44b", "message": "Merge remote-tracking branch 'origin/master' into DB-9010", "committedDate": "2020-10-14T13:50:24Z", "type": "commit"}, {"oid": "c435c1e10243fb519045fa35595ea04e50a9054d", "url": "https://github.com/splicemachine/spliceengine/commit/c435c1e10243fb519045fa35595ea04e50a9054d", "message": "DB-9010 address comments.", "committedDate": "2020-10-15T20:51:20Z", "type": "commit"}, {"oid": "206b21a1395e4474043393cbd58b10fbe9a9c9fe", "url": "https://github.com/splicemachine/spliceengine/commit/206b21a1395e4474043393cbd58b10fbe9a9c9fe", "message": "DB-9010 fix bugs and add more tests.", "committedDate": "2020-10-16T12:27:57Z", "type": "commit"}, {"oid": "be5e7ff9dad1f9ba10aac0ff227fff971081997b", "url": "https://github.com/splicemachine/spliceengine/commit/be5e7ff9dad1f9ba10aac0ff227fff971081997b", "message": "Merge remote-tracking branch 'origin/master' into DB-9010", "committedDate": "2020-10-16T14:00:05Z", "type": "commit"}]}