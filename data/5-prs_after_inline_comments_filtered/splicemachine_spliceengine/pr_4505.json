{"pr_number": 4505, "pr_title": "DB-10678 Modify accepted params for [VAR]CHAR function ", "pr_createdAt": "2020-11-06T17:08:52Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4505", "timeline": [{"oid": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e", "url": "https://github.com/splicemachine/spliceengine/commit/e6ed1a2e255df79e857fb4e4c78ca57282b8684e", "message": "DB-10678 Modify accepted parameters for [VAR]CHAR() function\n\nAs far as second parameters for the char function, we now accept:\nchar(<a character expression> ,  integer)\nor\nchar(<a datetime expression>, ISO/USA/EUR/...)\n\nif an integer is passed as a second param of char() but the first param is not a char expression -> throw\nIf a ISO/USA/\u2026 is passed as a second param of char() but the first param is not a datetime -> throw", "committedDate": "2020-11-06T17:04:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4ODUxNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518888515", "bodyText": "why not use SQLState.LANG_INVALID_CAST", "author": "martinrupp", "createdAt": "2020-11-06T17:11:38Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java", "diffHunk": "@@ -725,5 +726,46 @@ public void testDateTimeToCharVarcharConstants() throws Exception {\n             Assert.assertEquals(\"22018\", e.getSQLState());\n         }\n     }\n+\n+    @Test\n+    public void testCastToCharWithLength() throws Exception {\n+        try (ResultSet ignored = methodWatcher.executeQuery(\"select char(current date, 20)\")) {\n+            Assert.fail(\"expect failure since we cannot specify a length with something which is not a char/varchar\");\n+        } catch (SQLException e) {\n+            assertEquals(\"42846\", e.getSQLState());\n+            Assert.assertThat(e.getMessage(), containsString(\"Cannot set a length\"));\n+        }\n+        try (ResultSet ignored = methodWatcher.executeQuery(\"select char(42, 20)\")) {\n+            Assert.fail(\"expect failure since we cannot specify a length with something which is not a char/varchar\");\n+        } catch (SQLException e) {\n+            assertEquals(\"42846\", e.getSQLState());", "originalCommit": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5ODI2Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518898263", "bodyText": "I'm using a variation of it. Same prefix number, but more comprehensive error message", "author": "arnaud-splice", "createdAt": "2020-11-06T17:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4ODUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMTMwNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518901304", "bodyText": "I'm not sure if this is always fine. I wanted to do check here, but then there are cases where sourceCTI is null.", "author": "ascend1", "createdAt": "2020-11-06T17:34:37Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CastNode.java", "diffHunk": "@@ -320,6 +324,20 @@ else if (this.targetCharType == Types.VARCHAR)\n \n         bindCastNodeOnly();\n \n+        if (getTypeId().isCharOrVarChar()) {\n+            if (requestedStringLength != -1 && !sourceCTI.isCharOrVarChar()) {\n+                throw StandardException.newException(\n+                        SQLState.LANG_INVALID_CAST_TO_CHAR_WITH_LENGTH_NOT_FROM_CHAR,\n+                        sourceCTI.getSQLTypeName(),\n+                        getTypeId().getSQLTypeName());\n+            }\n+            if (dateToStringFormat != -1 && !sourceCTI.isDateTimeTimeStampTypeID()) {\n+                throw StandardException.newException(\n+                        SQLState.LANG_INVALID_CAST_TO_CHAR_WITH_FORMAT_NOT_FROM_DATE\n+                );\n+            }", "originalCommit": "e6ed1a2e255df79e857fb4e4c78ca57282b8684e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNjUyOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518906529", "bodyText": "Do you know when that can be null?\nIn the meantime, I added a nullcheck", "author": "arnaud-splice", "createdAt": "2020-11-06T17:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMTMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzQzOA==", "url": "https://github.com/splicemachine/spliceengine/pull/4505#discussion_r518913438", "bodyText": "I moved line 367 and 368 out, then added a check like if (sourceJDBCTypeId == Types.TIMESTAMP && stringFormat >= 0) then throw (because DB2 doesn\u2019t accept datetime format for timestamp), and run tests, then there will be NPE.", "author": "ascend1", "createdAt": "2020-11-06T17:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMTMwNA=="}], "type": "inlineReview"}, {"oid": "99eb1c8540a23d02ee595c6b07f491b211ecafc4", "url": "https://github.com/splicemachine/spliceengine/commit/99eb1c8540a23d02ee595c6b07f491b211ecafc4", "message": "DB-10678 Add null check", "committedDate": "2020-11-06T17:44:06Z", "type": "commit"}]}