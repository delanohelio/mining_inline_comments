{"pr_number": 3889, "pr_title": "DB-9682 SELECT on external table needs to check number of columns returned", "pr_createdAt": "2020-07-24T13:26:55Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3889", "timeline": [{"oid": "38c389820e37b79bbdeeac4eb6f730c0ff87f735", "url": "https://github.com/splicemachine/spliceengine/commit/38c389820e37b79bbdeeac4eb6f730c0ff87f735", "message": "DB-7348 truncate CHAR/VARCHAR from external tables", "committedDate": "2020-07-24T13:41:45Z", "type": "forcePushed"}, {"oid": "be1772e1bc366cfa52d35433ce007ec14bdfeee1", "url": "https://github.com/splicemachine/spliceengine/commit/be1772e1bc366cfa52d35433ce007ec14bdfeee1", "message": "DB-7348 truncate CHAR/VARCHAR from external tables", "committedDate": "2020-07-26T20:59:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzOTU0Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r460939546", "bodyText": "I am almost sure you don't need col parameter here. If you think you still need it, maybe you could consider splitting this function again such that you don't have as in/out parameter.", "author": "hatyo", "createdAt": "2020-07-27T14:38:53Z", "path": "hbase_sql/src/main/java/com/splicemachine/derby/stream/spark/SparkDataSetProcessor.java", "diffHunk": "@@ -672,6 +671,37 @@ public Boolean isCached(long conglomerateId) throws StandardException {\n \n     }\n \n+    /**\n+     * since spark has only strings, not CHAR/VARCHAR,\n+     * we need to \"create\" CHAR/VARCHAR column out of string columns\n+     * - for CHAR, we need to right-pad strings\n+     * - for CHAR/VARCHAR, we need to make sure we're considering the maximum string length\n+     *   note that we will use Java/Scala String length, which is measured in\n+     *   UTF-16 characters, which is NOT the byte length and also NOT necessarily the character length.\n+     *   e.g. the single character U+1F602 (https://www.fileformat.info/info/unicode/char/1f602/index.htm)\n+     *   is encoded as 0xD83D 0xDE02 and therefore has length 2.\n+     */\n+    private Column convertSparkStringColToCharVarchar(Column col, DataValueDescriptor dvd, String name) {", "originalCommit": "be1772e1bc366cfa52d35433ce007ec14bdfeee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNzQ4OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r462627489", "bodyText": "the column is needed as you create the new column from the old column by transforming it with a function", "author": "martinrupp", "createdAt": "2020-07-29T22:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzOTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0MzU3OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r460943579", "bodyText": "nice! \ud83d\udc4d could be made static I guess?", "author": "hatyo", "createdAt": "2020-07-27T14:44:27Z", "path": "hbase_sql/src/main/java/com/splicemachine/derby/stream/spark/SparkDataSetProcessor.java", "diffHunk": "@@ -810,7 +842,17 @@ private String intArrayToString(int[] ints) {\n         }\n     }\n \n-    private static Column createFilterCondition(Dataset dataset,String[] allColIdInSpark, Qualifier[][] qual_list, int[] baseColumnMap, DataValueDescriptor probeValue) throws StandardException {\n+    /// check that we don't access a column that's not there with baseColumnMap\n+    private void checkNumColumns(String location, int[] baseColumnMap, Dataset<Row> table) throws StandardException {", "originalCommit": "be1772e1bc366cfa52d35433ce007ec14bdfeee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNzYyMg==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r462627622", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-07-29T22:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0MzU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NTc5Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r460945797", "bodyText": "could be removed since it is not adding any info :)", "author": "hatyo", "createdAt": "2020-07-27T14:47:26Z", "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableTypeHelper.java", "diffHunk": "@@ -151,6 +146,15 @@ public void checkResultSetSelectAll(ResultSet rs) throws SQLException {\n             results.add(sb.toString());\n         }\n         results.sort(String::compareTo);\n+        return results;\n+    }\n+    /**\n+     * compare that result in ResultSet rs is the same as from the generated insert values.\n+     * @param rs ResultSet from a select *.\n+     * @throws SQLException", "originalCommit": "be1772e1bc366cfa52d35433ce007ec14bdfeee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NjIzMg==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r460946232", "bodyText": "List instead of ArrayList maybe?", "author": "hatyo", "createdAt": "2020-07-27T14:47:57Z", "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableTypeHelper.java", "diffHunk": "@@ -151,6 +146,15 @@ public void checkResultSetSelectAll(ResultSet rs) throws SQLException {\n             results.add(sb.toString());\n         }\n         results.sort(String::compareTo);\n+        return results;\n+    }\n+    /**\n+     * compare that result in ResultSet rs is the same as from the generated insert values.\n+     * @param rs ResultSet from a select *.\n+     * @throws SQLException\n+     */\n+    public void checkResultSetSelectAll(ResultSet rs) throws SQLException {\n+        ArrayList<String> results = getArrayListResult(rs);", "originalCommit": "be1772e1bc366cfa52d35433ce007ec14bdfeee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyOTE4OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r462629188", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-07-29T22:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NjIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1MTAxMA==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r460951010", "bodyText": "ditto", "author": "hatyo", "createdAt": "2020-07-27T14:54:18Z", "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java", "diffHunk": "@@ -485,6 +486,45 @@ public void testWriteReadFromSimpleExternalTable() throws Exception {\n \n     }\n \n+    @Test\n+    public void testWriteReadCharVarcharTruncation() throws Exception {\n+        for( String fileFormat : fileFormats ){\n+            // we're using our internal ORC reader which doesn't support CHAR padding or CHAR/VARCHAR truncation\n+            // see DB-9911 for reevalutation of this\n+            if( fileFormat.equals(\"ORC\")) {\n+                continue;\n+            }\n+            String name = \"char_varchar_\" + fileFormat;\n+\n+            String file = getExternalResourceDirectory() + name;\n+            methodWatcher.executeUpdate(\"create external table \" + name +\n+                    \" ( col1 varchar(100), col2 varchar(100), col3 varchar(100) ) \" +\n+                    \"STORED AS \" + fileFormat + \" LOCATION '\" + file + \"'\");\n+\n+            int insertCount = methodWatcher.executeUpdate(\"insert into \" + name + \" values \" +\n+                    \"( '123456789', '123456789', '12345')\");\n+            Assert.assertEquals(\"insertCount is wrong\", 1, insertCount);\n+\n+            ResultSet rs1 = methodWatcher.executeQuery(\"select * from \" + name);\n+            ArrayList<String> res1 = CreateTableTypeHelper.getArrayListResult(rs1);\n+            Assert.assertEquals(1, res1.size());\n+            Assert.assertEquals(\"'123456789', '123456789', '12345'\", res1.get(0));\n+\n+            methodWatcher.execute(\"drop table \" + name );\n+\n+            // create table in same location, but with shorter strings\n+            methodWatcher.executeUpdate(\"create external table \" + name + \" ( col1 VARCHAR(5), col2 CHAR(5), col3 CHAR(10) ) \" +\n+                    \"STORED AS \" + fileFormat + \" LOCATION '\" + file + \"'\");\n+\n+            ResultSet rs2 = methodWatcher.executeQuery(\"select * from \" + name);\n+            ArrayList<String> res2 = CreateTableTypeHelper.getArrayListResult(rs2);", "originalCommit": "be1772e1bc366cfa52d35433ce007ec14bdfeee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyOTIzNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r462629235", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-07-29T22:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1MTAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1Mjc1Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r460952756", "bodyText": "awesome", "author": "hatyo", "createdAt": "2020-07-27T14:56:39Z", "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java", "diffHunk": "@@ -941,6 +981,24 @@ public void testReadTextExternalTableDelimiter() throws Exception {\n                 \"  2  |MACHINE |2015-09-02 |\" ,TestUtils.FormattedResult.ResultFactory.toString(rs));\n     }\n \n+    @Test // DB-9682\n+    public void testReadTextMismatchSchema() throws Exception {\n+        String file = getResourceDirectory() + \"test_external_text\";\n+        methodWatcher.executeUpdate(String.format(\"create external table external_t2 (col1 int, col2 varchar(20), col3 date, col4 date)\" +\n+                \"ROW FORMAT DELIMITED FIELDS TERMINATED BY '|' ESCAPED BY '\\\\\\\\' LINES TERMINATED BY '\\\\n'\" +\n+                \" STORED AS TEXTFILE LOCATION '%s'\", file));\n+        try {\n+            methodWatcher.executeQuery(\"select * from external_t2\");\n+            Assert.fail(\"Exception not thrown\");\n+        } catch (SQLException e) {\n+            Assert.assertEquals(\"Wrong Exception (\" + e.getMessage() + \")\", EXTERNAL_TABLES_READ_FAILURE, e.getSQLState());\n+            Assert.assertEquals( \"wrong exception message\",\n+                    \"External Table read failed with exception '4 attribute(s) defined but 3 present \" +\n+                            \"in the external file : '\" + file + \"'. Suggested Schema is 'CREATE EXTERNAL TABLE T \" +\n+                            \"(_c0 CHAR/VARCHAR(x), _c1 CHAR/VARCHAR(x), _c2 CHAR/VARCHAR(x));'.'\",", "originalCommit": "be1772e1bc366cfa52d35433ce007ec14bdfeee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0MzQ2NA==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r461543464", "bodyText": "is only \">\" condition is error? Should not it be \"!=\" here?", "author": "ipraznik-splice", "createdAt": "2020-07-28T12:33:41Z", "path": "hbase_sql/src/main/java/com/splicemachine/derby/stream/spark/SparkDataSetProcessor.java", "diffHunk": "@@ -810,7 +842,17 @@ private String intArrayToString(int[] ints) {\n         }\n     }\n \n-    private static Column createFilterCondition(Dataset dataset,String[] allColIdInSpark, Qualifier[][] qual_list, int[] baseColumnMap, DataValueDescriptor probeValue) throws StandardException {\n+    /// check that we don't access a column that's not there with baseColumnMap\n+    private void checkNumColumns(String location, int[] baseColumnMap, Dataset<Row> table) throws StandardException {\n+        if( baseColumnMap.length > table.schema().fields().length) {", "originalCommit": "be1772e1bc366cfa52d35433ce007ec14bdfeee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNDg2OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r462624869", "bodyText": "is enough. That means your File eg CSV has more columns than you specified, which is a case we can handle", "author": "martinrupp", "createdAt": "2020-07-29T22:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0MzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNjQwOA==", "url": "https://github.com/splicemachine/spliceengine/pull/3889#discussion_r481136408", "bodyText": "actually, you were right", "author": "martinrupp", "createdAt": "2020-09-01T13:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0MzQ2NA=="}], "type": "inlineReview"}, {"oid": "5f68258d3f3806588ac6e2e78b3a261060a99aa5", "url": "https://github.com/splicemachine/spliceengine/commit/5f68258d3f3806588ac6e2e78b3a261060a99aa5", "message": "DB-9682 SELECT on external table needs to check number of columns returned\n\nFixing bug \"SELECT on external table with text format fails with\nArrayOutOfBoundsException if not enough Columns in file\". Will now\nthrow more understandable exception.\n\nOther options here would be to default the missing columns to NULL\nor a custom value (-> feature request).", "committedDate": "2020-07-29T22:29:57Z", "type": "commit"}, {"oid": "de6a3f0f78cbdda57e622bf33cf65318bfb1b6aa", "url": "https://github.com/splicemachine/spliceengine/commit/de6a3f0f78cbdda57e622bf33cf65318bfb1b6aa", "message": "DB-7348 truncate CHAR/VARCHAR from external tables", "committedDate": "2020-07-29T22:34:48Z", "type": "commit"}, {"oid": "62aa81dbcb2453135d818e92cd361cc96e36942f", "url": "https://github.com/splicemachine/spliceengine/commit/62aa81dbcb2453135d818e92cd361cc96e36942f", "message": "DB-9682 address comments", "committedDate": "2020-07-29T22:35:58Z", "type": "forcePushed"}, {"oid": "89cd62dcb396192cd98e8b436d7afdbc3ecd3aa6", "url": "https://github.com/splicemachine/spliceengine/commit/89cd62dcb396192cd98e8b436d7afdbc3ecd3aa6", "message": "DB-9682 address comments", "committedDate": "2020-07-30T07:51:25Z", "type": "commit"}, {"oid": "89cd62dcb396192cd98e8b436d7afdbc3ecd3aa6", "url": "https://github.com/splicemachine/spliceengine/commit/89cd62dcb396192cd98e8b436d7afdbc3ecd3aa6", "message": "DB-9682 address comments", "committedDate": "2020-07-30T07:51:25Z", "type": "forcePushed"}]}