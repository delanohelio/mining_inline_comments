{"pr_number": 3182, "pr_title": "DB-9015 Add support for STRING_AGG", "pr_createdAt": "2020-01-31T12:33:34Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3182", "timeline": [{"oid": "5a1e1a032402b5a554262777ce8f509e44a2412b", "url": "https://github.com/splicemachine/spliceengine/commit/5a1e1a032402b5a554262777ce8f509e44a2412b", "message": "DB-9015 Add support for STRING_AGG\n\nIt works on scalar aggregates, groupped aggregates and window functions\nThe ORDER BY clause is not yet supported", "committedDate": "2020-01-31T15:06:27Z", "type": "commit"}, {"oid": "5a1e1a032402b5a554262777ce8f509e44a2412b", "url": "https://github.com/splicemachine/spliceengine/commit/5a1e1a032402b5a554262777ce8f509e44a2412b", "message": "DB-9015 Add support for STRING_AGG\n\nIt works on scalar aggregates, groupped aggregates and window functions\nThe ORDER BY clause is not yet supported", "committedDate": "2020-01-31T15:06:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxMzk2NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3182#discussion_r373713965", "bodyText": "Make sure to also add these to SpliceSparkKryoRegistrator.java.", "author": "msirek", "createdAt": "2020-01-31T22:29:58Z", "path": "splice_machine/src/main/java/com/splicemachine/SpliceKryoRegistry.java", "diffHunk": "@@ -960,5 +960,7 @@ public Optional read(Kryo kryo, Input input, Class<Optional> type) {\n         instance.register(BroadcastFullOuterJoinOperation.class,EXTERNALIZABLE_SERIALIZER,326);\n         instance.register(MergeSortFullOuterJoinOperation.class,EXTERNALIZABLE_SERIALIZER,327);\n         instance.register(FakeColumnStatisticsImpl.class,EXTERNALIZABLE_SERIALIZER,328);\n+        instance.register(StringAggregator.class,EXTERNALIZABLE_SERIALIZER,329);\n+        instance.register(StringBuilder.class,330);", "originalCommit": "5a1e1a032402b5a554262777ce8f509e44a2412b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDU5Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3182#discussion_r373714592", "bodyText": "Update the \"Created by\" text.", "author": "msirek", "createdAt": "2020-01-31T22:32:08Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/window/function/StringAggregator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.impl.sql.execute.operations.window.function;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.services.io.FormatableHashtable;\n+import com.splicemachine.db.iapi.services.loader.ClassFactory;\n+import com.splicemachine.db.iapi.sql.execute.WindowFunction;\n+import com.splicemachine.db.iapi.types.DataTypeDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.NumberDataValue;\n+import com.splicemachine.db.iapi.types.SQLLongint;\n+import com.splicemachine.db.iapi.types.SQLVarchar;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+/**\n+ *\n+ * Created by jyuan on 7/31/14.", "originalCommit": "5a1e1a032402b5a554262777ce8f509e44a2412b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4MzM2MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3182#discussion_r374383360", "bodyText": "I did not create this file :-)", "author": "jyuanca", "createdAt": "2020-02-03T22:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDkyNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3182#discussion_r373714925", "bodyText": "Please consider writing a class version number (e.g. 1) as part of SerDe in case this is ever stored on disk.", "author": "msirek", "createdAt": "2020-01-31T22:33:22Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/window/function/StringAggregator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.splicemachine.derby.impl.sql.execute.operations.window.function;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.services.io.FormatableHashtable;\n+import com.splicemachine.db.iapi.services.loader.ClassFactory;\n+import com.splicemachine.db.iapi.sql.execute.WindowFunction;\n+import com.splicemachine.db.iapi.types.DataTypeDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.NumberDataValue;\n+import com.splicemachine.db.iapi.types.SQLLongint;\n+import com.splicemachine.db.iapi.types.SQLVarchar;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+/**\n+ *\n+ * Created by jyuan on 7/31/14.\n+ */\n+public class StringAggregator extends SpliceGenericWindowFunction {\n+    private StringBuilder acc;\n+    private String separator;\n+\n+    public StringAggregator(){}\n+\n+    public StringAggregator(String separator) {\n+        this.separator = separator;\n+    }\n+\n+    @Override\n+    public WindowFunction setup(ClassFactory classFactory, String aggregateName, DataTypeDescriptor returnDataType,\n+                                FormatableHashtable functionSpecificArgs) throws StandardException {\n+        super.setup( classFactory, aggregateName, returnDataType );\n+        acc = new StringBuilder();\n+        separator = ((DataValueDescriptor) functionSpecificArgs.get(\"param\")).getString();\n+        return this;\n+    }\n+\n+    @Override\n+    public void accumulate(DataValueDescriptor[] valueDescriptors) throws StandardException {\n+        this.add(valueDescriptors);\n+    }\n+\n+    @Override\n+    public void reset() {\n+        super.reset();\n+        acc = new StringBuilder();\n+    }\n+\n+    @Override\n+    protected void calculateOnAdd(WindowChunk chunk, DataValueDescriptor[] dvds) throws StandardException {\n+        if (acc.length() == 0)\n+            acc.append(dvds[0].getString());\n+        else\n+            acc.append(separator).append(dvds[0].getString());\n+    }\n+\n+    @Override\n+    protected void calculateOnRemove(WindowChunk chunk, DataValueDescriptor[] dvds) throws StandardException {\n+        String str = dvds[0].getString();\n+        int from = acc.indexOf(str);\n+        if (from == -1) return;\n+        int len = str.length() + separator.length();\n+        if (len > acc.length()) len = acc.length();\n+        acc.delete(from, len);\n+    }\n+\n+    @Override\n+    public DataValueDescriptor getResult() throws StandardException {\n+        return new SQLVarchar(acc.toString());\n+    }\n+\n+    @Override\n+    public WindowFunction newWindowFunction() {\n+        return new StringAggregator(separator);\n+    }\n+\n+    @Override\n+    public void writeExternal(ObjectOutput out) throws IOException {\n+        out.writeObject(acc);", "originalCommit": "5a1e1a032402b5a554262777ce8f509e44a2412b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4OTk1NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3182#discussion_r374389955", "bodyText": "@dgomezferro I think you addressed that for the non window string aggregator, but not for this one here.", "author": "arnaud-splice", "createdAt": "2020-02-03T22:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNTA0OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3182#discussion_r373715048", "bodyText": "Please consider writing a class version number (e.g. 1) as part of SerDe in case this is ever stored on disk.", "author": "msirek", "createdAt": "2020-01-31T22:33:46Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/StringAggregator.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * Some parts of this source code are based on Apache Derby, and the following notices apply to\n+ * Apache Derby:\n+ *\n+ * Apache Derby is a subproject of the Apache DB project, and is licensed under\n+ * the Apache License, Version 2.0 (the \"License\"); you may not use these files\n+ * except in compliance with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed\n+ * under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n+ * CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * Splice Machine, Inc. has modified the Apache Derby code in this file.\n+ *\n+ * All such Splice Machine modifications are Copyright 2012 - 2020 Splice Machine, Inc.,\n+ * and are licensed to you under the GNU Affero General Public License.\n+ */\n+\n+package com.splicemachine.db.impl.sql.execute;\n+\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.SQLState;\n+import com.splicemachine.db.iapi.services.io.StoredFormatIds;\n+import com.splicemachine.db.iapi.services.loader.ClassFactory;\n+import com.splicemachine.db.iapi.sql.execute.ExecAggregator;\n+import com.splicemachine.db.iapi.types.DataTypeDescriptor;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.NumberDataValue;\n+import com.splicemachine.db.iapi.types.SQLVarchar;\n+import com.splicemachine.db.iapi.types.StringDataValue;\n+import com.splicemachine.db.iapi.types.TypeId;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+\n+public final class StringAggregator extends OrderableAggregator {\n+    private StringBuilder aggregator;\n+    private String separator;\n+\n+    public StringAggregator(){}\n+\n+    public StringAggregator(String separator) {\n+        this.separator = separator;\n+    }\n+\n+    public Class getAggregatorClass() {\n+        return aggregator.getClass();\n+    }\n+\n+    @Override\n+    public ExecAggregator setup(ClassFactory cf, String aggregateName, DataTypeDescriptor returnDataType, DataValueDescriptor param) throws StandardException {\n+        if (aggregator == null) {\n+            this.aggregator = new StringBuilder();\n+            separator = param.getString();\n+        }\n+        return this;\n+    }\n+\n+    protected void accumulate(DataValueDescriptor addend)\n+            throws StandardException {\n+        if (aggregator.length() == 0)\n+            aggregator.append(addend.getString());\n+        else\n+            aggregator.append(separator).append(addend.getString());\n+        return;\n+\n+    }\n+\n+    public void merge(ExecAggregator addend)\n+            throws StandardException {\n+        if (addend == null) return; //ignore null entries\n+        StringBuilder other = ((StringAggregator) addend).aggregator;\n+        if (aggregator.length() == 0)\n+            aggregator.append(other);\n+        else\n+            aggregator.append(separator).append(other);\n+    }\n+\n+    public void add(DataValueDescriptor addend) throws StandardException {\n+        accumulate(addend);\n+    }\n+\n+    /**\n+     * Return the result of the aggregation.  If the count\n+     * is zero, then we haven't averaged anything yet, so\n+     * we return null.  Otherwise, return the running\n+     * average as a double.\n+     *\n+     * @return null or the average as Double\n+     */\n+    public DataValueDescriptor getResult() throws StandardException {\n+        if (this.aggregator.length() == 0) {\n+            return null;\n+        }\n+        return new SQLVarchar(aggregator.toString());\n+    }\n+\n+    @Override\n+    public ExecAggregator newAggregator() {\n+        StringAggregator strAggregator = new StringAggregator(separator);\n+        strAggregator.aggregator = new StringBuilder();\n+        return strAggregator;\n+    }\n+\n+    /////////////////////////////////////////////////////////////\n+    //\n+    // EXTERNALIZABLE INTERFACE\n+    //\n+    /////////////////////////////////////////////////////////////\n+\n+    /**\n+     * @throws IOException on error\n+     */\n+    public void writeExternal(ObjectOutput out) throws IOException {\n+        out.writeObject(aggregator);", "originalCommit": "5a1e1a032402b5a554262777ce8f509e44a2412b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0fc507c0beea54233e33c528b0c60a17c9d1ee66", "url": "https://github.com/splicemachine/spliceengine/commit/0fc507c0beea54233e33c528b0c60a17c9d1ee66", "message": "Merge remote-tracking branch 'origin/master' into DB-9015", "committedDate": "2020-02-04T10:40:45Z", "type": "commit"}, {"oid": "d144eaeda0c196da3a34393ee9c1fc230aba6cee", "url": "https://github.com/splicemachine/spliceengine/commit/d144eaeda0c196da3a34393ee9c1fc230aba6cee", "message": "DB-9015 Address review comments", "committedDate": "2020-02-04T10:41:25Z", "type": "commit"}, {"oid": "03e61020f02f1d8c2d92b9c01d21f04b649fe5cf", "url": "https://github.com/splicemachine/spliceengine/commit/03e61020f02f1d8c2d92b9c01d21f04b649fe5cf", "message": "Merge remote-tracking branch 'origin/master' into DB-9015", "committedDate": "2020-02-04T17:55:51Z", "type": "commit"}]}