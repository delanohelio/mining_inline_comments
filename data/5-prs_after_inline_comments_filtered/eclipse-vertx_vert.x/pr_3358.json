{"pr_number": 3358, "pr_title": "HAProxy protocol support", "pr_createdAt": "2020-04-05T21:29:43Z", "pr_url": "https://github.com/eclipse-vertx/vert.x/pull/3358", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404068829", "bodyText": "we should only add this to the pipeline when the option is configured. pipeline handlers have effect on performance and we should avoid adding them when it is not necessary", "author": "vietj", "createdAt": "2020-04-06T12:57:24Z", "path": "src/main/java/io/vertx/core/http/impl/HttpServerChannelInitializer.java", "diffHunk": "@@ -217,6 +218,7 @@ private void configureHttp1OrH2C(ChannelPipeline pipeline, HandlerHolder<? exten\n     if (HttpServerImpl.USE_FLASH_POLICY_HANDLER) {\n       pipeline.addLast(\"flashpolicy\", new FlashPolicyHandler());\n     }\n+    pipeline.addLast(\"optionalHAProxyMessageDecoder\", new OptionalHAProxyMessageDecoder());", "originalCommit": "1aeccd54b370fad47627232c1e6210432f23a719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTgzOA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404069838", "bodyText": "so there should be an option for enabling / disabling it in server", "author": "vietj", "createdAt": "2020-04-06T12:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MDQwMg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404070402", "bodyText": "also this will allow to run without the ha proxy class on the classpath by default", "author": "vietj", "createdAt": "2020-04-06T12:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MTM2MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404071360", "bodyText": "Have in mind that its autoremoved once the first 12 bytes are received (12 bytes are the number of bytes required to find out if its an haproxy protocol)\nInstead of an option we could check if HaProxy is in classpatch and enable it\nTell me which one you prefer and will implement\nOption or classpath?", "author": "zenios", "createdAt": "2020-04-06T13:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA3MzUzNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404073536", "bodyText": "good point for the removal, for now let's do classpath as I would like to avoid having the jar OOTB.", "author": "vietj", "createdAt": "2020-04-06T13:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2ODgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwODQzOA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404108438", "bodyText": "can you catch Throwable to avoid any class initialisation error", "author": "vietj", "createdAt": "2020-04-06T13:54:02Z", "path": "src/main/java/io/vertx/core/http/impl/haproxy/OptionalHAProxyMessageDecoder.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2011-2019 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.core.http.impl.haproxy;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.ByteToMessageDecoder;\n+import io.netty.handler.codec.ProtocolDetectionResult;\n+import io.netty.handler.codec.haproxy.HAProxyMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyProtocolVersion;\n+\n+import java.util.List;\n+\n+public class OptionalHAProxyMessageDecoder extends ByteToMessageDecoder {\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n+    } catch (ClassNotFoundException ex) {", "originalCommit": "c3270115a8b40aa801c50a6cd26866f47d24e294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5MjE0NA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404392144", "bodyText": "rename it proxyProtocolSupport instead, proxy is confusing given that the client supports a proxyOptions", "author": "vietj", "createdAt": "2020-04-06T21:14:20Z", "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -54,11 +54,17 @@\n    */\n   public static final boolean DEFAULT_SNI = false;\n \n+  /**\n+   * Default value of whether the server supports HA Proxy protocol = false\n+   */\n+  public static final boolean DEFAULT_PROXY_SUPPORT = false;\n+\n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n+  private boolean proxySupport;", "originalCommit": "a74f0f717cc48465d74beaae52f7a4041b9aaff8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404746930", "bodyText": "why did you remove this ?", "author": "vietj", "createdAt": "2020-04-07T11:48:45Z", "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -468,18 +471,19 @@ public ChannelPromise channelFuture() {\n   }\n \n   public String remoteName() {\n-    java.net.SocketAddress addr = chctx.channel().remoteAddress();\n-    if (addr instanceof InetSocketAddress) {\n-      // Use hostString that does not trigger a DNS resolution\n-      return ((InetSocketAddress)addr).getHostString();", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MjI2OQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404762269", "bodyText": "In case of ha proxy we need to use the overriden address and not chctx.channel().remoteAddress\nI was going to make another PR later to remove this method or at least deprecate it since i think it does exactly the same work as remoteAddress().host()\nPlease corrent me if i am wrong", "author": "zenios", "createdAt": "2020-04-07T12:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MzM5NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404763395", "bodyText": "I mean the precise usage of getHostString() that has a purpose here to be not blocking", "author": "vietj", "createdAt": "2020-04-07T12:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MTExNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404781116", "bodyText": "remoteAddress().host() is exactly the same think.\npublic SocketAddressImpl(InetSocketAddress address) {\n    Arguments.requireInRange(address.getPort(), 0, 65535, \"port p must be in range 0 <= p <= 65535\");\n    this.path = null;\n    this.port= address.getPort();\n    this.host = address.getHostString();\n    if (address.isUnresolved()) {\n      this.hostName = address.getHostName();\n      this.ipAddress = null;\n    } else {\n      String host = address.getHostString();\n      if (NetUtil.isValidIpV4Address(host) || NetUtil.isValidIpV6Address(host)) {\n        host = null;\n      }\n      this.hostName = host;\n      this.ipAddress = address.getAddress();\n    }\n  }", "author": "zenios", "createdAt": "2020-04-07T12:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4NzIyNQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404787225", "bodyText": "Now i get it. I assume that is the part that will block when using normal remoteAddress().host(). Right?\nif (address.isUnresolved()) {\n      this.hostName = address.getHostName();\n      this.ipAddress = null;\n}", "author": "zenios", "createdAt": "2020-04-07T12:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NjkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MDQ0OQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404750449", "bodyText": "here we need to use instead this pattern:\njava.net.SocketAddress addr;\nif (channel.hasAttr(REMOTE_ADDRESS_OVERRIDE)) {\n  Attribute< java.net.SocketAddress> attr = channel.hasAttr(REMOTE_ADDRESS_OVERRIDE);\n  addr = attr.get();\n} else {\n  addr = chctx.channel().remoteAddress();\n}\nCalling attr(key) while it is not set will have the side effect to create the attribute. Attributes cannot be removed.", "author": "vietj", "createdAt": "2020-04-07T11:55:35Z", "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -468,18 +471,19 @@ public ChannelPromise channelFuture() {\n   }\n \n   public String remoteName() {\n-    java.net.SocketAddress addr = chctx.channel().remoteAddress();\n-    if (addr instanceof InetSocketAddress) {\n-      // Use hostString that does not trigger a DNS resolution\n-      return ((InetSocketAddress)addr).getHostString();\n-    }\n+    SocketAddress addr = remoteAddress();\n+    if(addr != null)\n+      return addr.host();\n     return null;\n   }\n \n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+      java.net.SocketAddress addr = chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null);", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MDczNw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404750737", "bodyText": "we need to check how this works with GraalVM native compilation. @pmlopes can you provide guidance here ?", "author": "vietj", "createdAt": "2020-04-07T11:56:11Z", "path": "src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.vertx.core.net.impl;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyMessage;\n+import io.netty.util.NetUtil;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAProxyMessage> {\n+  private static final Logger log = LoggerFactory.getLogger(HAProxyMessageCompletionHandler.class);\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MjE3Mg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404752172", "bodyText": "as this is Netty code, we should rather use here a Netty Promise<Channel> instead", "author": "vietj", "createdAt": "2020-04-07T11:58:46Z", "path": "src/main/java/io/vertx/core/net/impl/HAProxyMessageCompletionHandler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.vertx.core.net.impl;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+import io.netty.handler.codec.haproxy.HAProxyMessage;\n+import io.netty.util.NetUtil;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.impl.logging.Logger;\n+import io.vertx.core.impl.logging.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+public class HAProxyMessageCompletionHandler extends MessageToMessageDecoder<HAProxyMessage> {\n+  private static final Logger log = LoggerFactory.getLogger(HAProxyMessageCompletionHandler.class);\n+  private static final boolean hasProxyProtocolSupport;\n+\n+  static {\n+    boolean proxyProtocolCheck = true;\n+    try {\n+      Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n+    } catch (Throwable ex) {\n+      proxyProtocolCheck = false;\n+    }\n+    hasProxyProtocolSupport = proxyProtocolCheck;\n+  }\n+\n+  public static boolean hasProxyProtocolSupport(boolean requested) {\n+    if (requested && !hasProxyProtocolSupport)\n+      log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");\n+    return hasProxyProtocolSupport && requested;\n+  }\n+\n+\n+  private final Handler<AsyncResult<Channel>> handler;", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2NjU5Mw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404766593", "bodyText": "SslHandshakeCompletionHandler which is almost the same is using Handler<AsyncResult> handler so i copied it\nWill change it now", "author": "zenios", "createdAt": "2020-04-07T12:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MjE3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3MDE0NA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404770144", "bodyText": "we might eventually change the SslHandshakeCompletionHandler as well later, thanks for noticing", "author": "vietj", "createdAt": "2020-04-07T12:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MjE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1Mjc5Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404752796", "bodyText": "this should fail the test if that's called", "author": "vietj", "createdAt": "2020-04-07T11:59:56Z", "path": "src/test/java/io/vertx/core/http/Http1xTest.java", "diffHunk": "@@ -4865,4 +4866,80 @@ public void testUnsolicitedHttpResponse() throws Exception {\n     }));\n     await();\n   }\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));\n+    server.requestHandler(req -> {\n+      req.response().end();", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MzA1Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r404753056", "bodyText": "we should set an exceptionHandler on the HTTP server and check it is called with the failure.", "author": "vietj", "createdAt": "2020-04-07T12:00:23Z", "path": "src/test/java/io/vertx/core/http/Http1xTest.java", "diffHunk": "@@ -4865,4 +4866,80 @@ public void testUnsolicitedHttpResponse() throws Exception {\n     }));\n     await();\n   }\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setProxyProtocolSupport(true));", "originalCommit": "eb7f13563529afb9e32ed2651d81479b5c0288ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0OTcwNA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405449704", "bodyText": "actually we should rename to useProxyProtocol like we do have useProxyAuth already in this test class", "author": "vietj", "createdAt": "2020-04-08T11:21:27Z", "path": "src/test/java/io/vertx/core/http/HttpTLSTest.java", "diffHunk": "@@ -921,13 +922,15 @@ public TrustOptions copy() {\n     boolean serverOpenSSL;\n     boolean serverUsesAlpn;\n     boolean serverSSL = true;\n+    boolean proxyProtocolSupport = false;", "originalCommit": "242f3859ec30618721faee047fca531a1bdde005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1MDM1OA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405450358", "bodyText": "we should rename to useProxyProtocol we already have useAlpn in options", "author": "vietj", "createdAt": "2020-04-08T11:22:46Z", "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -54,11 +54,17 @@\n    */\n   public static final boolean DEFAULT_SNI = false;\n \n+  /**\n+   * Default value of whether the server supports HA Proxy protocol = false\n+   */\n+  public static final boolean DEFAULT_PROXY_PROTOCOL_SUPPORT = false;\n+\n   private int port;\n   private String host;\n   private int acceptBacklog;\n   private ClientAuth clientAuth;\n   private boolean sni;\n+  private boolean proxyProtocolSupport;", "originalCommit": "242f3859ec30618721faee047fca531a1bdde005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODI2Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405498266", "bodyText": "rather than support we should say \"Set whether the server uses the HA Proxy protocol\" , the \"supports\" words indicate it can be optional and it is actually not", "author": "vietj", "createdAt": "2020-04-08T12:49:35Z", "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -400,16 +400,16 @@ public NetServerOptions setSni(boolean sni) {\n   /**\n    * @return whether the server supports HA Proxy protocol\n    */\n-  public boolean isProxyProtocolSupport() { return proxyProtocolSupport; }\n+  public boolean isUseProxyProtocol() { return useProxyProtocol; }\n \n \n   /**\n    * Set whether the server supports HA Proxy protocol\n    *\n    * @return a reference to this, so the API can be used fluently\n    */\n-  public NetServerOptions setProxyProtocolSupport(boolean proxyProtocolSupport) {\n-    this.proxyProtocolSupport = proxyProtocolSupport;\n+  public NetServerOptions setUseProxyProtocol(boolean useProxyProtocol) {", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODQ2MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405498460", "bodyText": "whether the server uses the HA Proxy protocol", "author": "vietj", "createdAt": "2020-04-08T12:49:54Z", "path": "src/main/java/io/vertx/core/net/NetServerOptions.java", "diffHunk": "@@ -400,16 +400,16 @@ public NetServerOptions setSni(boolean sni) {\n   /**\n    * @return whether the server supports HA Proxy protocol", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5OTA0MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405499040", "bodyText": "Extra space between the dot and upper case M in .Make", "author": "vietj", "createdAt": "2020-04-08T12:50:50Z", "path": "src/main/java/io/vertx/core/net/impl/haproxy/HAProxyMessageReader.java", "diffHunk": "@@ -14,22 +14,22 @@\n \n public class HAProxyMessageReader extends MessageToMessageDecoder<HAProxyMessage> {\n   private static final Logger log = LoggerFactory.getLogger(HAProxyMessageReader.class);\n-  private static final boolean hasProxyProtocolSupport;\n+  private static final boolean proxyProtocolCodecFound;\n \n   static {\n-    boolean proxyProtocolCheck = true;\n+    boolean proxyProtocolCodecCheck = true;\n     try {\n       Class.forName(\"io.netty.handler.codec.haproxy.HAProxyMessageDecoder\");\n     } catch (Throwable ex) {\n-      proxyProtocolCheck = false;\n+      proxyProtocolCodecCheck = false;\n     }\n-    hasProxyProtocolSupport = proxyProtocolCheck;\n+    proxyProtocolCodecFound = proxyProtocolCodecCheck;\n   }\n \n-  public static boolean hasProxyProtocolSupport(boolean requested) {\n-    if (requested && !hasProxyProtocolSupport)\n+  public static boolean canUseProxyProtocol(boolean requested) {\n+    if (requested && !proxyProtocolCodecFound)\n       log.warn(\"Proxy protocol support could not be enabled.Make sure that netty-codec-haproxy is included in your classpath\");", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjM4MQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502381", "bodyText": "here we should use waitFor(2) and have two condition to end the test", "author": "vietj", "createdAt": "2020-04-08T12:56:06Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MTgzNA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405541834", "bodyText": "@vietj\nI have fixed all the test cases except this one.The problem with this one is that it behave differently for http1 and http2\nFor http1\nWe get two HAProxyDecoder Exception\nio.netty.handler.codec.haproxy.HAProxyProtocolException: io.netty.handler.codec.haproxy.HAProxyProtocolException: unknown identifier: GET\nio.netty.handler.codec.haproxy.HAProxyProtocolException: io.netty.handler.codec.haproxy.HAProxyProtocolException: unknown identifier: host:\n\nAnd for http2\nWe get one HAProxyDecoder Exception\nio.netty.handler.codec.haproxy.HAProxyProtocolException: header length (over 269) exceeds the allowed maximum (108)\n\nAnd one from SSLHandler\njava.nio.channels.ClosedChannelException\n\nSo if using waitFor(2) assuming 1 is from complete of client  the other should countdown when exception instanceof HAProxyProtocolException\nThe we will have 3 countdowns for http1 and two countdowns for http2\nHow do you suggest we should handle this problem?\nSplit the test between http1 / http2 ?", "author": "zenios", "createdAt": "2020-04-08T13:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDkzMg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406150932", "bodyText": "that's fine for now", "author": "vietj", "createdAt": "2020-04-09T11:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjU1MQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502551", "bodyText": "use complete() here instead of testComplete()", "author": "vietj", "createdAt": "2020-04-08T12:56:23Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMjkxMw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405502913", "bodyText": "add a complete() statement after assertTrue(event.failed()) to end the test and be sure that the assertion will be reported correctly to the test", "author": "vietj", "createdAt": "2020-04-08T12:56:59Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMzA4Mw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405503083", "bodyText": "call stop() that in a finally block", "author": "vietj", "createdAt": "2020-04-08T12:57:15Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNDE5NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405504195", "bodyText": "call proxy.stop() in a finally block", "author": "vietj", "createdAt": "2020-04-08T12:58:57Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTA5Nw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505097", "bodyText": "use onSuccess(response -> { ... }) and avoid if/else block", "author": "vietj", "createdAt": "2020-04-08T13:00:19Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTM5Ng==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505396", "bodyText": "use onSuccess(event -> }) block", "author": "vietj", "createdAt": "2020-04-08T13:00:45Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTU2OA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505568", "bodyText": "stop in a finally", "author": "vietj", "createdAt": "2020-04-08T13:01:01Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5913,4 +5914,88 @@ private void testClientRequestWithLargeBodyInSmallChunks(boolean chunked) throws\n     }));\n     await();\n   }\n+\n+\n+  @Test\n+  public void testProxyProtocolIllegalHeader() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions()\n+      .setUseProxyProtocol(true))\n+      .exceptionHandler(exception -> {\n+        if(exception instanceof io.netty.handler.codec.haproxy.HAProxyProtocolException)\n+          testComplete();\n+      });\n+    server.requestHandler(req -> {\n+      fail(\"Should not be called\");\n+    });\n+\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.failed());\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+\n+  @Test\n+  public void testHAProxyProtocolVersion1() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        assertTrue(event.succeeded());\n+        testComplete();\n+      })\n+      .end();\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT,version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().setUseProxyProtocol(true));\n+    server.requestHandler(req -> {\n+      assertEquals(req.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(req.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(req.remoteAddress().port(), 56324);\n+      assertEquals(req.localAddress().port(), 443);\n+      req.response().end();\n+    });\n+    startServer();\n+    client.request(HttpMethod.GET, proxy.getPort(), proxy.getHost(), DEFAULT_TEST_URI)\n+      .onComplete(event -> {\n+        if(event.failed())\n+          event.cause().printStackTrace();\n+        else {\n+          assertTrue(event.succeeded());\n+          testComplete();\n+        }\n+      })\n+      .end();\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNTk1Nw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405505957", "bodyText": "finally :)", "author": "vietj", "createdAt": "2020-04-08T13:01:38Z", "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjA3MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506070", "bodyText": "finally clause", "author": "vietj", "createdAt": "2020-04-08T13:01:48Z", "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2Support() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjIyMw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506223", "bodyText": "use onSuccess", "author": "vietj", "createdAt": "2020-04-08T13:02:01Z", "path": "src/test/java/io/vertx/core/net/NetTest.java", "diffHunk": "@@ -3682,4 +3689,106 @@ public void testNetSocketHandlerFailureReportedToContextExceptionHandler() throw\n     await();\n   }\n \n+  @Test\n+  public void testHaProxyProtocolVersion1Support() throws Exception {\n+    Buffer version1ProtocolHeader = HAProxy.createVersion1ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version1ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testHaProxyProtocolVersion2Support() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createNetServer(new NetServerOptions().setUseProxyProtocol(true));\n+    server.connectHandler(so -> {\n+      assertEquals(so.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(so.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(so.remoteAddress().port(), 56324);\n+      assertEquals(so.localAddress().port(), 443);\n+      testComplete();\n+    });\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), onSuccess(so -> {\n+      so.write(\"ping\");\n+      so.close();\n+    }));\n+    await();\n+    proxy.stop();\n+  }\n+\n+  @Test\n+  public void testConnectSSLWithHAProxy() throws Exception {\n+    Buffer version2ProtocolHeader = HAProxy.createVersion2ProtocolHeader(\"192.168.0.1\", 56324, \"192.168.0.11\", 443);\n+    HAProxy proxy = new HAProxy(testAddress.host(), testAddress.port(), version2ProtocolHeader);\n+    proxy.start(vertx);\n+\n+    server.close();\n+    NetServerOptions options = new NetServerOptions()\n+      .setPort(testAddress.port())\n+      .setHost(testAddress.host())\n+      .setSsl(true)\n+      .setKeyCertOptions(Cert.SERVER_JKS_ROOT_CA.get())\n+      .setUseProxyProtocol(true);\n+    server = vertx.createNetServer(options);\n+\n+    NetClientOptions clientOptions = new NetClientOptions()\n+      .setHostnameVerificationAlgorithm(\"HTTPS\")\n+      .setSsl(true)\n+      .setTrustOptions(Trust.SERVER_JKS_ROOT_CA.get());\n+    NetClient client = vertx.createNetClient(clientOptions);\n+    server.connectHandler(event -> {\n+      assertEquals(event.remoteAddress().hostAddress(), \"192.168.0.1\");\n+      assertEquals(event.localAddress().hostAddress(), \"192.168.0.11\");\n+      assertEquals(event.remoteAddress().port(), 56324);\n+      assertEquals(event.localAddress().port(), 443);\n+    });\n+\n+    startServer();\n+    client.connect(proxy.getPort(), proxy.getHost(), ar2 -> {\n+      assertTrue(ar2.succeeded());", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNjg2NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r405506865", "bodyText": "instead of setting an exception handler + body handler , use\nresp.body().onComplete(onSuccess(body -> ...));", "author": "vietj", "createdAt": "2020-04-08T13:02:58Z", "path": "src/test/java/io/vertx/it/HAProxyTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2011-2019 Contributors to the Eclipse Foundation\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+ */\n+\n+package io.vertx.it;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpClient;\n+import io.vertx.test.core.VertxTestBase;\n+import org.junit.Test;\n+\n+import static io.vertx.core.http.HttpTestBase.DEFAULT_HTTP_HOST;\n+import static io.vertx.core.http.HttpTestBase.DEFAULT_HTTP_PORT;\n+\n+/**\n+ * @author <a href=\"mailto:dimitris.zenios@gmail.com\">Dimitris Zenios</a>\n+ */\n+public class HAProxyTest extends VertxTestBase {\n+  @Test\n+  public void testHttpWithoutHAProxySupport() {\n+    Vertx vertx = Vertx.vertx();\n+    try {\n+      vertx.createHttpServer().requestHandler(req -> {\n+        req.response().end(\"hello\");\n+      }).listen(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, onSuccess(s -> {\n+        HttpClient client = vertx.createHttpClient();\n+        client.get(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, \"/\", onSuccess(resp -> {\n+          resp.exceptionHandler(this::fail);", "originalCommit": "2adf45da72b139c2fd131c26a1b0a966f4ecb7d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDE2Mg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406150162", "bodyText": "why getAndSet here instead of get() ? clearing the value will not remove the attribue", "author": "vietj", "createdAt": "2020-04-09T11:52:35Z", "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -479,7 +482,10 @@ public String remoteName() {\n   public SocketAddress remoteAddress() {\n     SocketAddress address = remoteAddress;\n     if (address == null) {\n-      java.net.SocketAddress addr = chctx.channel().remoteAddress();\n+      java.net.SocketAddress addr = chctx.channel().hasAttr(REMOTE_ADDRESS_OVERRIDE) ?\n+        chctx.channel().attr(REMOTE_ADDRESS_OVERRIDE).getAndSet(null) :", "originalCommit": "fe36a69f60e3209dc12fa0a14153c2563dd8680a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MTQ3Mg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406151472", "bodyText": "Since we cache the address no need to keep the attribute around.\ngetAndRemove is deprecated with a note to use getAndSet with null value.\nhttps://netty.io/4.0/api/io/netty/util/Attribute.html", "author": "zenios", "createdAt": "2020-04-09T11:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwODM4NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406208385", "bodyText": "why do we need setSslHandshakeTimeout here ? we don't need it for this test", "author": "vietj", "createdAt": "2020-04-09T13:35:30Z", "path": "src/test/java/io/vertx/core/http/HttpTest.java", "diffHunk": "@@ -5992,7 +6005,29 @@ public void testHaProxyProtocolVersion2() throws Exception {\n       .end();\n     try {\n       await();\n-    }finally {\n+    } finally {\n+      proxy.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testHAProxyProtocolIdleTimeout() throws Exception {\n+    HAProxy proxy = new HAProxy(DEFAULT_HTTP_HOST, DEFAULT_HTTP_PORT, Buffer.buffer());\n+    proxy.start(vertx);\n+\n+    server.close();\n+    server = vertx.createHttpServer(createBaseServerOptions().\n+      setIdleTimeout(2).\n+      setSslHandshakeTimeout(2).", "originalCommit": "5fe78c95baf1de8bee057217e6c690687e44f4b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjcwNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406212706", "bodyText": "Not exactly. In HTTP2 the connection is closed not because of IdleHandler (Which is not yet added to the pipeline) but because of timeout waiting for handshake from (SSLHandler) which is configured using setSslHandshakeTimeout.\nThis is how i found that the setting is not respected", "author": "zenios", "createdAt": "2020-04-09T13:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwODM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMzQ4NQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406213485", "bodyText": "I think we should add:\nserver.requestHandler(request -> {\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n  System.out.println(request.remoteAddress());\n});", "author": "vietj", "createdAt": "2020-04-09T13:42:49Z", "path": "src/main/java/examples/HTTPExamples.java", "diffHunk": "@@ -918,6 +918,14 @@ public void example60(Vertx vertx) {\n \n   }\n \n+  public void example61(Vertx vertx) {\n+\n+    HttpServerOptions options = new HttpServerOptions()\n+      .setUseProxyProtocol(true);\n+\n+    HttpServer server = vertx.createHttpServer(options);", "originalCommit": "b1efa43ca6257a364bd467935a5b20546cbc91de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNDg1OQ==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406214859", "bodyText": "I think we should add:\nserver.connectHandler(so -> {\n  // Print the actual client address provided by the HA proxy protocol instead of the proxy address\n  System.out.println(so.remoteAddress());\n});", "author": "vietj", "createdAt": "2020-04-09T13:44:52Z", "path": "src/main/java/examples/NetExamples.java", "diffHunk": "@@ -598,6 +598,11 @@ public void example50(Vertx vertx) throws CertificateException {\n       .listen(8080);\n   }\n \n+  public void example51(Vertx vertx) {\n+    NetServerOptions options = new NetServerOptions().setUseProxyProtocol(true);\n+    NetServer server = vertx.createNetServer(options);", "originalCommit": "b1efa43ca6257a364bd467935a5b20546cbc91de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406378680", "bodyText": "Do we need to document localAddress as well? Just like we did for remoteAddress?", "author": "zenios", "createdAt": "2020-04-09T17:57:43Z", "path": "src/main/java/io/vertx/core/net/impl/ConnectionBase.java", "diffHunk": "@@ -491,7 +497,10 @@ public SocketAddress remoteAddress() {\n   public SocketAddress localAddress() {", "originalCommit": "02a75a617fd172002bda696a230cb11aa9481b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NzQwNg==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406487406", "bodyText": "yes, I forgot this", "author": "vietj", "createdAt": "2020-04-09T21:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NzczNw==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406487737", "bodyText": "yes", "author": "vietj", "createdAt": "2020-04-09T21:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4OTEwMA==", "url": "https://github.com/eclipse-vertx/vert.x/pull/3358#discussion_r406489100", "bodyText": "Ok will do that now and remove the hardcoded version.Thanks", "author": "zenios", "createdAt": "2020-04-09T21:31:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODY4MA=="}], "type": "inlineReview"}, {"oid": "9bae540281c69579d5e6aed0170ccef0414e0cc9", "url": "https://github.com/eclipse-vertx/vert.x/commit/9bae540281c69579d5e6aed0170ccef0414e0cc9", "message": "HAProxy protocol support\n\nSigned-off-by: Dimitris Zenios <dimitris.zenios@gmail.com>", "committedDate": "2020-04-09T21:36:40Z", "type": "commit"}, {"oid": "7768d617d8363f6e691ca213aeffa032d32753a9", "url": "https://github.com/eclipse-vertx/vert.x/commit/7768d617d8363f6e691ca213aeffa032d32753a9", "message": "1.Implement support for all HAProxy proxied protocols\n2.Added seperate settings for ha proxy idle timeout\n\nSigned-off-by: Dimitris Zenios <dimitris.zenios@gmail.com>", "committedDate": "2020-04-10T10:46:01Z", "type": "commit"}]}