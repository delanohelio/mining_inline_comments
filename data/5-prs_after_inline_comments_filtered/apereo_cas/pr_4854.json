{"pr_number": 4854, "pr_title": "ServicesManager should use ServiceRegistry for find operations", "pr_createdAt": "2020-05-14T14:50:09Z", "pr_url": "https://github.com/apereo/cas/pull/4854", "timeline": [{"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "url": "https://github.com/apereo/cas/commit/db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "message": "Cache services in ServicesManager", "committedDate": "2020-05-25T14:29:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMDcwMg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425200702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by matching with the supplied name.\n          \n          \n            \n                 * Find a {@link RegisteredService} by matching with the supplied name.", "author": "mmoayyed", "createdAt": "2020-05-14T14:54:18Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMDg1MQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425200851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService that matches the supplied service.\n          \n          \n            \n                 * @return the {@link RegisteredService} that matches the supplied service.", "author": "mmoayyed", "createdAt": "2020-05-14T14:54:29Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTI5MA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425201290", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by matching with the supplied name.\n          \n          \n            \n                 * Find a {@link RegisteredService} by matching with the supplied name.", "author": "mmoayyed", "createdAt": "2020-05-14T14:55:01Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.\n+     */\n+    RegisteredService findServiceByName(String name);\n+\n+    /**\n+     * Find a RegisteredService by matching with the supplied name.", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTQ2NQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425201465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService that matches the supplied service.\n          \n          \n            \n                 * @return the {@link RegisteredService} that matches the supplied service.", "author": "mmoayyed", "createdAt": "2020-05-14T14:55:14Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.\n+     */\n+    RegisteredService findServiceByName(String name);\n+\n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param <T>   the type parameter\n+     * @param name    the name to match with.\n+     * @param clazz the clazz\n+     * @return the RegisteredService that matches the supplied service.", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMjIzMg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425202232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RegisteredService service = getCandidateServicesToMatch(serviceId)\n          \n          \n            \n                    var service = getCandidateServicesToMatch(serviceId)", "author": "mmoayyed", "createdAt": "2020-05-14T14:56:11Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +104,14 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        RegisteredService service = getCandidateServicesToMatch(serviceId)", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMjQxNg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425202416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RegisteredService result = this.services.get(id);\n          \n          \n            \n                    var result = this.services.get(id);", "author": "mmoayyed", "createdAt": "2020-05-14T14:56:25Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,30 +158,54 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        RegisteredService result = this.services.get(id);", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjU2MQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042561", "bodyText": "Seems like you should explain these in much more detail.", "author": "mmoayyed", "createdAt": "2020-05-25T18:32:28Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -144,7 +144,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity.\n+    */\n+    private int cachCapacity = Integer.MAX_VALUE;\n+    ", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjYzMg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042632", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by exact service id.\n          \n          \n            \n                 * Find a {@link RegisteredService} by exact service id.", "author": "mmoayyed", "createdAt": "2020-05-25T18:32:52Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,38 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by exact service id.", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjY5MQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042691", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService\n          \n          \n            \n                 * @return the service definition or null", "author": "mmoayyed", "createdAt": "2020-05-25T18:33:06Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,38 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the RegisteredService", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mjg0NQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042845", "bodyText": "Is this change needed?", "author": "mmoayyed", "createdAt": "2020-05-25T18:33:48Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -63,7 +55,7 @@ public RegisteredService save(final RegisteredService registeredService) {\n     @Override\n     public synchronized RegisteredService save(final RegisteredService registeredService, final boolean publishEvent) {\n         publishEvent(new CasRegisteredServicePreSaveEvent(this, registeredService));\n-        val r = this.serviceRegistry.save(registeredService);\n+        var r = this.serviceRegistry.save(registeredService);", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mjk3MQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042971", "bodyText": "It would be good to add some log statements here under trace to explain the behavior and flow.", "author": "mmoayyed", "createdAt": "2020-05-25T18:34:20Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,17 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzAxMA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043010", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var results= serviceRegistry.findServicePredicate(predicate).\n          \n          \n            \n                    var results = serviceRegistry.findServicePredicate(predicate).", "author": "mmoayyed", "createdAt": "2020-05-25T18:34:32Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -118,22 +117,24 @@ public RegisteredService findServiceBy(final String serviceId) {\n     @Override\n     public RegisteredService findServiceBy(final Service service) {\n         return Optional.ofNullable(service)\n-            .map(svc -> findServiceBy(svc.getId()))\n-            .orElse(null);\n+                .map(svc -> findServiceBy(svc.getId()))\n+                .orElse(null);\n     }\n \n     @Override\n     public Collection<RegisteredService> findServiceBy(final Predicate<RegisteredService> predicate) {\n         if (predicate == null) {\n             return new ArrayList<>(0);\n         }\n-\n-        return getAllServices()\n-            .stream()\n-            .filter(getRegisteredServicesFilteringPredicate(predicate))\n-            .sorted()\n-            .peek(RegisteredService::initialize)\n-            .collect(Collectors.toList());\n+        var results= serviceRegistry.findServicePredicate(predicate).", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzI5MA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043290", "bodyText": "Are you switching to var in order to correctly determine the final type?", "author": "mmoayyed", "createdAt": "2020-05-25T18:35:53Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzQyNw==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043427", "bodyText": "Similar to above, log statements under trace would be good.", "author": "mmoayyed", "createdAt": "2020-05-25T18:36:28Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzQ4Ng==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043486", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n          \n          \n            \n                    var result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);", "author": "mmoayyed", "createdAt": "2020-05-25T18:36:49Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzY5MA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043690", "bodyText": "This won't work.\nWhat happens if the result is null?", "author": "mmoayyed", "createdAt": "2020-05-25T18:37:48Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzgxMw==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043813", "bodyText": "Likewise, logs would be good.", "author": "mmoayyed", "createdAt": "2020-05-25T18:38:16Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mzg1NA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n          \n          \n            \n                                LOGGER.trace(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",", "author": "mmoayyed", "createdAt": "2020-05-25T18:38:32Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values()\n-            .stream()\n-            .filter(this::validateAndFilterServiceByEnvironment)\n-            .filter(getRegisteredServicesFilteringPredicate())\n-            .sorted()\n-            .peek(RegisteredService::initialize)\n-            .collect(Collectors.toList());\n+        return this.services.asMap().values().\n+                stream().\n+                filter(this::validateAndFilterServiceByEnvironment).\n+                filter(getRegisteredServicesFilteringPredicate()).\n+                sorted().\n+                peek(RegisteredService::initialize).\n+                collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n-            .stream()\n-            .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n-                return r.getId();\n-            }, Function.identity(), (r, s) -> s));\n+        this.services.putAll(this.serviceRegistry.load()\n+                .stream()\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689", "url": "https://github.com/apereo/cas/commit/e588a12be9d4ede0518bdb716fd5741b25356689", "message": "ServicesManager more tests", "committedDate": "2020-05-29T10:19:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTA1NA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432399054", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n          \n          \n            \n                        LOGGER.trace(\"The service that matches the service id [{}] is not found in the cache; trying to find it from [{}]\",", "author": "mmoayyed", "createdAt": "2020-05-29T10:34:12Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,21 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTE1Mg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432399152", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n          \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]\", serviceRegistry.getName(),", "author": "mmoayyed", "createdAt": "2020-05-29T10:34:30Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,21 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), ", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDcwMg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400702", "bodyText": "This doesn't look right. Should be:\nresult = services.get(result.getId(), k -> this.serviceRegistry.findServiceById(id, clazz));\n\nAlso, don't forget to check the result to make sure it's has the correct type based on clazz", "author": "mmoayyed", "createdAt": "2020-05-29T10:38:12Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDg3NQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400875", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n          \n          \n            \n                        LOGGER.trace(\"The service with name [{}] is not found in the cache, try to find it from [{}]\",", "author": "mmoayyed", "createdAt": "2020-05-29T10:38:37Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDk3OQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n          \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]\", serviceRegistry.getName(),\n          \n      \n    \n    \n  \n\nAlso, formatting of parameters is off here. Should be: \"The service [{}] is found in service registry [{}]\" and cached.", "author": "mmoayyed", "createdAt": "2020-05-29T10:38:52Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTU5OQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432401599", "bodyText": "Same as above.", "author": "mmoayyed", "createdAt": "2020-05-29T10:40:20Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTY2Nw==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432401667", "bodyText": "Same as above.", "author": "mmoayyed", "createdAt": "2020-05-29T10:40:29Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzAwOQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403009", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n          \n          \n            \n                 * Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.", "author": "mmoayyed", "createdAt": "2020-05-29T10:43:23Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzA1OQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403059", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache size specifies the maximum number of entries the cache may contain.\n          \n          \n            \n                 * Services cache size specifies the maximum number of entries the cache may contain.", "author": "mmoayyed", "createdAt": "2020-05-29T10:43:31Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size specifies the maximum number of entries the cache may contain.", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzEyNA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403124", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache capacity sets the minimum total size for the internal data structures.\n          \n          \n            \n                 * Services cache capacity sets the minimum total size for the internal data structures.", "author": "mmoayyed", "createdAt": "2020-05-29T10:43:40Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size specifies the maximum number of entries the cache may contain.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity sets the minimum total size for the internal data structures.", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "url": "https://github.com/apereo/cas/commit/e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "message": "ServicesManager uses ServiceRegistry", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "url": "https://github.com/apereo/cas/commit/ebf2fe473dd3cd70716393477fc25235b201b3cb", "message": "Cache services in ServicesManager", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "528f21e68f420da94b5b3451aada6da549bed65b", "url": "https://github.com/apereo/cas/commit/528f21e68f420da94b5b3451aada6da549bed65b", "message": "ServicesManager more tests", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "url": "https://github.com/apereo/cas/commit/52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "message": "fixes and changes for test", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "ef34b087459d3123589b4a8a9fddd9425854de49", "url": "https://github.com/apereo/cas/commit/ef34b087459d3123589b4a8a9fddd9425854de49", "message": "Change cache capacity", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "5fe13d76c372fa43dfb83d07e2cf1626887dc5fe", "url": "https://github.com/apereo/cas/commit/5fe13d76c372fa43dfb83d07e2cf1626887dc5fe", "message": "Fix test", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "25a37fc3ae39b8a6bdf9bdb6f70c5c7e25e6b364", "url": "https://github.com/apereo/cas/commit/25a37fc3ae39b8a6bdf9bdb6f70c5c7e25e6b364", "message": "More tests", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "1bf27ab93f5758d9c923cf87cd0dd036f561ab10", "url": "https://github.com/apereo/cas/commit/1bf27ab93f5758d9c923cf87cd0dd036f561ab10", "message": "Fix simple tests", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "1bf27ab93f5758d9c923cf87cd0dd036f561ab10", "url": "https://github.com/apereo/cas/commit/1bf27ab93f5758d9c923cf87cd0dd036f561ab10", "message": "Fix simple tests", "committedDate": "2020-06-15T08:29:17Z", "type": "forcePushed"}, {"oid": "3eaf406edc4b8253aeb86784d237077691d8c8c1", "url": "https://github.com/apereo/cas/commit/3eaf406edc4b8253aeb86784d237077691d8c8c1", "message": "revert change", "committedDate": "2020-06-15T08:32:10Z", "type": "commit"}, {"oid": "c96e6950e142e5c3feb44c739ae1f303b25dcd6f", "url": "https://github.com/apereo/cas/commit/c96e6950e142e5c3feb44c739ae1f303b25dcd6f", "message": "fix SAML tests", "committedDate": "2020-06-15T15:16:07Z", "type": "commit"}]}