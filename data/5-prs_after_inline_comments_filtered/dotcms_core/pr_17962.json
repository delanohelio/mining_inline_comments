{"pr_number": 17962, "pr_title": "Issue 17944 binary indexable", "pr_createdAt": "2020-02-06T20:50:23Z", "pr_url": "https://github.com/dotCMS/core/pull/17962", "timeline": [{"oid": "d02501c328cfdb9d8115cc0a7bd7e5ca9b608756", "url": "https://github.com/dotCMS/core/commit/d02501c328cfdb9d8115cc0a7bd7e5ca9b608756", "message": "#17944 first refactor", "committedDate": "2020-02-05T04:25:00Z", "type": "commit"}, {"oid": "f4adde22fe4138accfb9bf451c5364eacbc2b366", "url": "https://github.com/dotCMS/core/commit/f4adde22fe4138accfb9bf451c5364eacbc2b366", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17944-binary-indexable", "committedDate": "2020-02-05T23:43:41Z", "type": "commit"}, {"oid": "244b27f6257090d985a377a0ee57fff3733c43e5", "url": "https://github.com/dotCMS/core/commit/244b27f6257090d985a377a0ee57fff3733c43e5", "message": "#17944 adding an unit test", "committedDate": "2020-02-06T05:33:42Z", "type": "commit"}, {"oid": "3f9f86d3757958027992dd6ed8a2923878dd63d2", "url": "https://github.com/dotCMS/core/commit/3f9f86d3757958027992dd6ed8a2923878dd63d2", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17944-binary-indexable", "committedDate": "2020-02-06T19:50:32Z", "type": "commit"}, {"oid": "8882dd12d1c306f13224c169cebbf00941e5bcdb", "url": "https://github.com/dotCMS/core/commit/8882dd12d1c306f13224c169cebbf00941e5bcdb", "message": "#17944 adding a second draft", "committedDate": "2020-02-06T20:51:23Z", "type": "commit"}, {"oid": "ce8d5c1636361df6214c0fdb59d6c8a3c031f2e6", "url": "https://github.com/dotCMS/core/commit/ce8d5c1636361df6214c0fdb59d6c8a3c031f2e6", "message": "#17944 third draft for the metadata generation", "committedDate": "2020-02-06T22:02:52Z", "type": "commit"}, {"oid": "cb3fe6d2f9aa53143ddc5217012f11962579cecb", "url": "https://github.com/dotCMS/core/commit/cb3fe6d2f9aa53143ddc5217012f11962579cecb", "message": "#17944 now binary fields could be indexable and searchable", "committedDate": "2020-02-07T22:33:51Z", "type": "commit"}, {"oid": "edf898e0cf26d610f4749c046e32c1242e9ac04e", "url": "https://github.com/dotCMS/core/commit/edf898e0cf26d610f4749c046e32c1242e9ac04e", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17944-binary-indexable", "committedDate": "2020-02-10T16:18:54Z", "type": "commit"}, {"oid": "3432ba2afc29662f099ce3fc78a43ab74a5eb211", "url": "https://github.com/dotCMS/core/commit/3432ba2afc29662f099ce3fc78a43ab74a5eb211", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17944-binary-indexable", "committedDate": "2020-02-10T18:35:12Z", "type": "commit"}, {"oid": "2977cd1ab3c7230805212e7a9b6e4e1362ee4580", "url": "https://github.com/dotCMS/core/commit/2977cd1ab3c7230805212e7a9b6e4e1362ee4580", "message": "#17944 Added refactoring and fixes to save the json into the file system", "committedDate": "2020-02-11T05:16:00Z", "type": "commit"}, {"oid": "0942bced922e081c19e51c8c12246b6a42ef77cb", "url": "https://github.com/dotCMS/core/commit/0942bced922e081c19e51c8c12246b6a42ef77cb", "message": "#17944 setting the length instead of the size", "committedDate": "2020-02-11T06:07:12Z", "type": "commit"}, {"oid": "b0f822f2ceea0907182c317dda08e4966e523895", "url": "https://github.com/dotCMS/core/commit/b0f822f2ceea0907182c317dda08e4966e523895", "message": "#17944 fixes and changes for binary indexing", "committedDate": "2020-02-11T21:19:21Z", "type": "commit"}, {"oid": "c37a34d10c3b118bdad6a21261fb186e1ef3b2bf", "url": "https://github.com/dotCMS/core/commit/c37a34d10c3b118bdad6a21261fb186e1ef3b2bf", "message": "#17944 added an unit test and final changes", "committedDate": "2020-02-11T22:27:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNTQyNg==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r379515426", "bodyText": "You can use Logger.warnAndDebug method instead", "author": "nollymar", "createdAt": "2020-02-14T16:10:10Z", "path": "dotCMS/src/main/java/com/dotcms/tika/TikaUtils.java", "diffHunk": "@@ -199,6 +329,60 @@ public boolean generateMetaData(Contentlet contentlet, boolean force)\n         return false;\n     }\n \n+    /**\n+     * Similar as {@link #getMetaDataMap(String, File, boolean)} but includes the metadata fields to filter from the tika collection\n+     * and the max length of the binary file to parse.\n+     * Also, it is not storing anything on the file system as the reference method {@link #getMetaDataMap(String, File, boolean)}\n+     * This one does everything on memory, means forceMemory is always true and the file system cache has to be performed on upper layers\n+     */\n+    private Map<String, Object> getForcedMetaDataMap(final File binFile,\n+                                               final Set<String> metadataFields,\n+                                               final int maxLength) {\n+\n+        if (!osgiInitialized) {\n+            Logger.error(this.getClass(),\n+                    \"Unable to get file Meta Data, OSGI Framework not initialized\");\n+            return Collections.emptyMap();\n+        }\n+\n+        final Map<String, Object> metaMap = new TreeMap<>();\n+        this.tikaService.setMaxStringLength(maxLength);\n+\n+        try (InputStream stream = Files.newInputStream(binFile.toPath())) {\n+            // no worry about the limit and less time to process.\n+            final String content = this.tikaService.parseToString(stream);\n+\n+            //Creating the meta data map to use by our content\n+            metaMap.putAll(this.buildMetaDataMap());\n+            metaMap.put(FileAssetAPI.CONTENT_FIELD, content);\n+        } catch (IOException ioExc) {\n+            if (this.isZeroByteFileException(ioExc.getCause())) {\n+                logWarning(binFile, ioExc.getCause());\n+            } else {\n+                final String errorMessage = String\n+                        .format(\"Error Reading Tika parsed Stream for file [%s] [%s] \",\n+                                binFile.getAbsolutePath(),\n+                                UtilMethods.isSet(ioExc.getMessage()) ? ioExc.getMessage()\n+                                        : ioExc.getCause().getMessage());\n+                Logger.warn(this.getClass(), errorMessage);", "originalCommit": "c37a34d10c3b118bdad6a21261fb186e1ef3b2bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxODQ1NQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r379518455", "bodyText": "does this test fail with an empty starter? why don't you use new SiteDataGen().nextPersisted(); to get a new host?", "author": "nollymar", "createdAt": "2020-02-14T16:15:53Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -75,11 +97,126 @@ public static void prepare() throws Exception {\n         contentTypeAPI = APILocator.getContentTypeAPI(user);\n         contentletAPI = APILocator.getContentletAPI();\n         fieldAPI = APILocator.getContentTypeFieldAPI();\n+        folderAPI = APILocator.getFolderAPI();\n         languageAPI = APILocator.getLanguageAPI();\n         language = languageAPI.getDefaultLanguage();\n         relationshipAPI = APILocator.getRelationshipAPI();\n     }\n \n+    @Test\n+    public void test_toMap_fileasset_txt_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);", "originalCommit": "c37a34d10c3b118bdad6a21261fb186e1ef3b2bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5MjcxMw==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r383492713", "bodyText": "It is working fine", "author": "jdotcms", "createdAt": "2020-02-24T20:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxODQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxOTAyMQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r379519021", "bodyText": "I'm not sure this test runs with an empty starter/empty DB", "author": "nollymar", "createdAt": "2020-02-14T16:16:58Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -75,11 +97,126 @@ public static void prepare() throws Exception {\n         contentTypeAPI = APILocator.getContentTypeAPI(user);\n         contentletAPI = APILocator.getContentletAPI();\n         fieldAPI = APILocator.getContentTypeFieldAPI();\n+        folderAPI = APILocator.getFolderAPI();\n         languageAPI = APILocator.getLanguageAPI();\n         language = languageAPI.getDefaultLanguage();\n         relationshipAPI = APILocator.getRelationshipAPI();\n     }\n \n+    @Test\n+    public void test_toMap_fileasset_txt_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String rootFolderName = String.format(\"lolFolder-%d\", System.currentTimeMillis());\n+        final Folder root1 = folderAPI.createFolders(rootFolderName, host, user, false);\n+        final FileAsset fileAsset = new FileAsset();\n+        final ImmutableFileAssetContentType.Builder builder = ImmutableFileAssetContentType.builder();\n+        builder.name(\"Test\").variable(\"testfa\");\n+        final ContentType fileAssetContentType = contentTypeAPI.find(\"FileAsset\");", "originalCommit": "c37a34d10c3b118bdad6a21261fb186e1ef3b2bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxOTE4Mg==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r379519182", "bodyText": "same here", "author": "nollymar", "createdAt": "2020-02-14T16:17:14Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -75,11 +97,126 @@ public static void prepare() throws Exception {\n         contentTypeAPI = APILocator.getContentTypeAPI(user);\n         contentletAPI = APILocator.getContentletAPI();\n         fieldAPI = APILocator.getContentTypeFieldAPI();\n+        folderAPI = APILocator.getFolderAPI();\n         languageAPI = APILocator.getLanguageAPI();\n         language = languageAPI.getDefaultLanguage();\n         relationshipAPI = APILocator.getRelationshipAPI();\n     }\n \n+    @Test\n+    public void test_toMap_fileasset_txt_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String rootFolderName = String.format(\"lolFolder-%d\", System.currentTimeMillis());\n+        final Folder root1 = folderAPI.createFolders(rootFolderName, host, user, false);\n+        final FileAsset fileAsset = new FileAsset();\n+        final ImmutableFileAssetContentType.Builder builder = ImmutableFileAssetContentType.builder();\n+        builder.name(\"Test\").variable(\"testfa\");\n+        final ContentType fileAssetContentType = contentTypeAPI.find(\"FileAsset\");\n+        final String fileName1 = TEMP_FILE + System.currentTimeMillis();\n+        final File tempFile1 = File.createTempFile(fileName1, TXT);\n+        final String anyContent = \"LOL!\";\n+        FileUtil.write(tempFile1, anyContent);\n+        final String fileNameField1 = fileName1 + DOT_TXT;\n+        final String title1 = \"Contentlet-1\";\n+\n+        fileAsset.setContentType(fileAssetContentType);\n+        fileAsset.setFolder(root1.getInode());\n+        fileAsset.setBinary(FileAssetAPI.BINARY_FIELD, tempFile1);\n+        fileAsset.setStringProperty(FileAssetAPI.HOST_FOLDER_FIELD, root1.getInode());\n+        fileAsset.setStringProperty(FileAssetAPI.TITLE_FIELD, title1);\n+        fileAsset.setStringProperty(FileAssetAPI.FILE_NAME_FIELD, fileNameField1);\n+        fileAsset.setIndexPolicy(IndexPolicy.FORCE);\n+\n+        // Create a piece of content for the default host\n+        final Map<String,Object>  contentletMap = esMappingAPI.toMap(APILocator.getContentletAPI().checkin(fileAsset, user, false));\n+\n+        assertNotNull(contentletMap);\n+        assertEquals(fileNameField1.toLowerCase(), contentletMap.get(\"fileasset.filename\"));\n+        assertEquals(\"fileasset\", contentletMap.get(\"structurename\"));\n+        assertEquals(\"text/plain; charset=iso-8859-1\", contentletMap.get(\"metadata.contenttype\"));\n+        assertEquals(\"4\", contentletMap.get(\"metadata.filesize\"));\n+        assertTrue( contentletMap.get(\"metadata.content\").toString().contains(\"lol!\"));\n+\n+    }\n+\n+    @Test\n+    public void test_toMap_binary_field_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final FieldAPI         fieldAPI        = APILocator.getContentTypeFieldAPI();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);", "originalCommit": "c37a34d10c3b118bdad6a21261fb186e1ef3b2bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "url": "https://github.com/dotCMS/core/commit/98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "message": "#17944 feedback done", "committedDate": "2020-02-19T15:46:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjA1OQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406059", "bodyText": "Issue found: Ensure that resources like this OutputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:32Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjA3OA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406078", "bodyText": "Issue found: Ensure that resources like this InputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:33Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"egzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"bzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"bzip2\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"bzip2\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"ebzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.BZIP2);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.BZIP2);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjA5MA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406090", "bodyText": "Issue found: The String literal \"The file recovery should be the file saved\" appears 5 times in this file; the first occurrence is on line 37", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:35Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjEwMw==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406103", "bodyText": "Issue found: Ensure that resources like this InputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:36Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"egzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjEyMA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406120", "bodyText": "Issue found: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:37Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESMappingAPIImpl.java", "diffHunk": "@@ -464,203 +546,217 @@ protected void loadPermissions(final Contentlet con, final Map<String,Object> m)\n \n \tpublic static final FastDateFormat timeFormat = FastDateFormat.getInstance(\"HH:mm:ss\");\n \n-\tprotected void loadFields(Contentlet con, Map<String, Object> m) throws DotDataException {\n+\tprotected void loadFields(final Contentlet contentlet, final Map<String, Object> contentletMap) throws DotDataException {\n \n \t\t// https://github.com/dotCMS/dotCMS/issues/6152\n-\t\tDecimalFormatSymbols otherSymbols = new DecimalFormatSymbols();\n+\t\tfinal DecimalFormatSymbols otherSymbols = new DecimalFormatSymbols();\n \t\totherSymbols.setDecimalSeparator('.');\n \n-\t\tDecimalFormat numFormatter = new DecimalFormat(\"0000000000000000000.000000000000000000\", otherSymbols);\n-\n-\t\tFieldAPI fAPI=APILocator.getFieldAPI();\n-\t\tfinal List<Field> fields = new ArrayList<>(\n-\t\t\t\tFieldsCache.getFieldsByStructureInode(con.getStructureInode()));\n-\n-\t\tStructure st=con.getStructure();\n+\t\tfinal DecimalFormat numFormatter = new DecimalFormat(\"0000000000000000000.000000000000000000\", otherSymbols);\n+\t\tfinal FieldAPI fieldAPI   = APILocator.getFieldAPI();\n+\t\tfinal List<Field> fields  = new ArrayList<>(\n+\t\t\t\tFieldsCache.getFieldsByStructureInode(contentlet.getStructureInode()));\n+\t\tfinal Structure structure = contentlet.getStructure();\n \t\tStringBuilder keyNameBuilder;\n \t\tString keyName;\n \t\tString keyNameText;\n-\n \t\tfinal TikaUtils tikaUtils = new TikaUtils();\n \n-\t\tfor (Field f : fields) {\n+\t\tfor (final Field field : fields) {\n \n-\t\t\tkeyNameBuilder = new StringBuilder(st.getVelocityVarName()).append(\".\")\n-\t\t\t\t\t.append(f.getVelocityVarName());\n+\t\t\tkeyNameBuilder = new StringBuilder(structure.getVelocityVarName()).append(\".\")\n+\t\t\t\t\t.append(field.getVelocityVarName());\n \t\t\tkeyName        = keyNameBuilder.toString();\n \t\t\tkeyNameText    = keyNameBuilder.append(TEXT).toString();\n-\t\t\tif (f.getFieldType().equals(Field.FieldType.BINARY.toString())\n-\t\t\t\t\t|| f.getFieldContentlet() != null && (f.getFieldContentlet().startsWith(ESMappingConstants.FIELD_TYPE_SYSTEM_FIELD) && !f.getFieldType().equals(Field.FieldType.TAG.toString()))) {\n+\t\t\tif (field.getFieldType().equals(Field.FieldType.BINARY.toString()) // todo: remove this since we are going to index the binary fields\n+\t\t\t\t\t|| field.getFieldContentlet() != null && (field.getFieldContentlet().startsWith(ESMappingConstants.FIELD_TYPE_SYSTEM_FIELD)\n+\t\t\t\t\t&& !field.getFieldType().equals(Field.FieldType.TAG.toString()))) {\n+\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tif(!f.isIndexed()){\n+\n+\t\t\tif(!field.isIndexed()) {\n+\n \t\t\t\tcontinue;\n \t\t\t}\n+\n \t\t\ttry {\n-\t\t\t\tif(fAPI.isElementConstant(f)){\n-\t\t\t\t\tm.put(keyName, (f.getValues() == null ? \"\":f.getValues()));\n+\t\t\t\tif(fieldAPI.isElementConstant(field)){\n+\t\t\t\t\tcontentletMap.put(keyName, (field.getValues() == null ? \"\":field.getValues()));\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \n-\t\t\t\tObject valueObj = con.get(f.getVelocityVarName());\n+\t\t\t\tObject valueObj = contentlet.get(field.getVelocityVarName());\n \n-\t\t\t\tif (f.getFieldContentlet().startsWith(ESMappingConstants.FIELD_TYPE_SECTION_DIVIDER)) {\n+\t\t\t\tif (field.getFieldContentlet().startsWith(ESMappingConstants.FIELD_TYPE_SECTION_DIVIDER)) {\n \t\t\t\t\tvalueObj = \"\";\n \t\t\t\t}\n \n-\t\t\t\tif (!UtilMethods.isSet(valueObj) && !f.getFieldType()\n+\t\t\t\tif (!UtilMethods.isSet(valueObj) && !field.getFieldType()\n \t\t\t\t\t\t.equals(Field.FieldType.TAG.toString())) {\n-\t\t\t\t\tm.put(keyName, null);\n+\t\t\t\t\tcontentletMap.put(keyName, null);\n \t\t\t\t}\n-\t\t\t\telse if(f.getFieldType().equals(ESMappingConstants.FIELD_TYPE_TIME)) {\n+\t\t\t\telse if(field.getFieldType().equals(ESMappingConstants.FIELD_TYPE_TIME)) {\n \t\t\t\t\ttry{\n \t\t\t\t\t\tString timeStr=timeFormat.format(valueObj);\n-\t\t\t\t\t\tm.put(keyName, elasticSearchDateTimeFormat.format(valueObj));\n-\t\t\t\t\t\tm.put(keyNameText, timeStr);\n+\t\t\t\t\t\tcontentletMap.put(keyName, elasticSearchDateTimeFormat.format(valueObj));\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, timeStr);\n \t\t\t\t\t}\n \t\t\t\t\tcatch(Exception e){\n-\t\t\t\t\t\tm.put(keyName, null);\n-\t\t\t\t\t\tm.put(keyNameText, null);\n+\t\t\t\t\t\tcontentletMap.put(keyName, null);\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, null);\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\telse if (f.getFieldType().equals(ESMappingConstants.FIELD_ELASTIC_TYPE_DATE)) {\n+\t\t\t\telse if (field.getFieldType().equals(ESMappingConstants.FIELD_ELASTIC_TYPE_DATE)) {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tString dateString = dateFormat.format(valueObj);\n-\t\t\t\t\t\tm.put(keyName, elasticSearchDateTimeFormat.format(valueObj));\n-\t\t\t\t\t\tm.put(keyNameText, dateString);\n+\t\t\t\t\t\tcontentletMap.put(keyName, elasticSearchDateTimeFormat.format(valueObj));\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, dateString);\n \t\t\t\t\t}\n \t\t\t\t\tcatch(Exception ex) {\n-\t\t\t\t\t\tm.put(keyName, null);\n-\t\t\t\t\t\tm.put(keyNameText, null);\n+\t\t\t\t\t\tcontentletMap.put(keyName, null);\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, null);\n \t\t\t\t\t}\n-\t\t\t\t} else if(f.getFieldType().equals(ESMappingConstants.FIELD_TYPE_DATE_TIME)) {\n+\t\t\t\t} else if(field.getFieldType().equals(ESMappingConstants.FIELD_TYPE_DATE_TIME)) {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tString datetimeString = datetimeFormat.format(valueObj);\n-\t\t\t\t\t\tm.put(keyName, elasticSearchDateTimeFormat.format(valueObj));\n-\t\t\t\t\t\tm.put(keyNameText, datetimeString);\n+\t\t\t\t\t\tcontentletMap.put(keyName, elasticSearchDateTimeFormat.format(valueObj));\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, datetimeString);\n \t\t\t\t\t}\n \t\t\t\t\tcatch(Exception ex) {\n-\t\t\t\t\t\tm.put(keyName, null);\n-\t\t\t\t\t\tm.put(keyNameText, null);\n+\t\t\t\t\t\tcontentletMap.put(keyName, null);\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, null);\n \t\t\t\t\t}\n-\t\t\t\t} else if (f.getFieldType().equals(ESMappingConstants.FIELD_TYPE_CATEGORY)) {\n+\t\t\t\t} else if (field.getFieldType().equals(ESMappingConstants.FIELD_TYPE_CATEGORY)) {\n \t\t\t\t\t// moved the logic to loadCategories\n-\t\t\t\t} else if (f.getFieldType().equals(ESMappingConstants.FIELD_TYPE_RELATIONSHIP)) {\n+\t\t\t\t} else if (field.getFieldType().equals(ESMappingConstants.FIELD_TYPE_RELATIONSHIP)) {\n                     // loadRelationshipFields processes relationship fields\n                     continue;\n-                } else if (f.getFieldType().equals(ESMappingConstants.FIELD_TYPE_CHECKBOX) || f\n+                } else if (field.getFieldType().equals(ESMappingConstants.FIELD_TYPE_CHECKBOX) || field\n \t\t\t\t\t\t.getFieldType().equals(ESMappingConstants.FIELD_TYPE_MULTI_SELECT)) {\n-\t\t\t\t\tif (f.getFieldContentlet().startsWith(ESMappingConstants.FIELD_ELASTIC_TYPE_BOOLEAN)) {\n-\t\t\t\t\t\tm.put(keyName, valueObj);\n-\t\t\t\t\t\tm.put(keyNameText, valueObj.toString());\n+\t\t\t\t\tif (field.getFieldContentlet().startsWith(ESMappingConstants.FIELD_ELASTIC_TYPE_BOOLEAN)) {\n+\t\t\t\t\t\tcontentletMap.put(keyName, valueObj);\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, valueObj.toString());\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tm.put(keyName,\n+\t\t\t\t\t\tcontentletMap.put(keyName,\n \t\t\t\t\t\t\t\tUtilMethods.listToString(valueObj.toString()));\n \t\t\t\t\t}\n-\t\t\t\t} else if (f.getFieldType().equals(ESMappingConstants.FIELD_TYPE_KEY_VALUE)){\n+\t\t\t\t} else if (field.getFieldType().equals(ESMappingConstants.FIELD_TYPE_KEY_VALUE)){\n \t\t\t\t\tfinal boolean fileMetadata =\n-\t\t\t\t\t\t\tf.getVelocityVarName().equals(FileAssetAPI.META_DATA_FIELD)\n-\t\t\t\t\t\t\t\t\t&& st.getStructureType() == Structure.STRUCTURE_TYPE_FILEASSET;\n+\t\t\t\t\t\t\tfield.getVelocityVarName().equals(FileAssetAPI.META_DATA_FIELD)\n+\t\t\t\t\t\t\t\t\t&& structure.getStructureType() == Structure.STRUCTURE_TYPE_FILEASSET;\n \t\t\t\t\tif(LicenseUtil.getLevel()>= LicenseLevel.STANDARD.level) {\n \n-\t\t\t\t\t\tMap<String,Object> keyValueMap = KeyValueFieldUtil.JSONValueToHashMap((String)valueObj);\n-\n-\t\t\t\t\t\tSet<String> allowedFields = new HashSet<>();\n-\t\t\t\t\t\tif(fileMetadata) {\n-\t\t\t\t\t\t\t// http://jira.dotmarketing.net/browse/DOTCMS-7243\n-\t\t\t\t\t\t\tList<FieldVariable> fieldVariables=APILocator.getFieldAPI().getFieldVariablesForField(\n-\t\t\t\t\t\t\t\t\tf.getInode(), APILocator.getUserAPI().getSystemUser(), false);\n-\t\t\t\t\t\t\tfor(FieldVariable fv : fieldVariables) {\n-\t\t\t\t\t\t\t\tif(fv.getKey().equals(ESMappingConstants.DOT_INDEX_PATTERN)) {\n-\t\t\t\t\t\t\t\t\tString[] names=fv.getValue().split(\",\");\n-\t\t\t\t\t\t\t\t\tallowedFields=new HashSet<>();\n-\t\t\t\t\t\t\t\t\tfor(String n : names)\n-\t\t\t\t\t\t\t\t\t\tallowedFields.add(n.trim().toLowerCase());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\tallowedFields\n-\t\t\t\t\t\t\t\t\t.addAll(tikaUtils.getConfiguredMetadataFields());\n-\n-\t\t\t\t\t\t\ttikaUtils.filterMetadataFields(keyValueMap, allowedFields);\n-\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tfinal String keyValuePrefix = fileMetadata ?\n-\t\t\t\t\t\t\t\tFileAssetAPI.META_DATA_FIELD.toLowerCase() : keyName;\n-\t\t\t\t\t\tkeyValueMap.forEach((k, v) -> m\n-\t\t\t\t\t\t\t\t.put(keyValuePrefix + StringPool.PERIOD + k, v));\n+\t\t\t\t\t\tthis.loadKeyValueField(contentletMap, keyName, tikaUtils, field, (String) valueObj, fileMetadata);\n \t\t\t\t\t}\n-\t\t\t\t} else if(f.getFieldType().equals(Field.FieldType.TAG.toString())) {\n-\n-\t\t\t\t\tStringBuilder personaTags = new StringBuilder();\n-\t\t\t\t\tList<Tag> tagList = APILocator.getTagAPI().getTagsByInode(con.getInode());\n-\t\t\t\t\tif(tagList ==null || tagList.size()==0) continue;\n+\t\t\t\t} else if(field.getFieldType().equals(Field.FieldType.TAG.toString())) {\n \n-\t\t\t\t\tfinal String tagDelimit = Config.getStringProperty(\"ES_TAG_DELIMITER_PATTERN\", \",,\");\n+\t\t\t\t\tif (this.loadTagsField(contentlet, contentletMap, structure, keyName)) {\n \n-\n-\t\t\t\t\tfor ( Tag t : tagList ) {\n-\t\t\t\t\t\tif(t.getTagName() ==null) continue;\n-\t\t\t\t\t\tString myTag = t.getTagName().trim();\n-\t\t\t\t\t\tif ( t.isPersona() ) {\n-\t\t\t\t\t\t\tpersonaTags.append(myTag).append(' ');\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tcontinue;\n \t\t\t\t\t}\n-\n-\t\t\t\t\tfinal List<String> tagsNames = tagList.stream().map(Tag::getTagName).collect(\n-\t\t\t\t\t\t\tCollectors.toList());\n-\n-\t\t\t\t\tm.put(keyName, tagsNames);\n-\t\t\t\t\tm.put(ESMappingConstants.TAGS, tagsNames);\n-\n-\t\t\t\t\tif ( Structure.STRUCTURE_TYPE_PERSONA != con.getStructure().getStructureType() ) {\n-\t\t\t\t\t\tfinal List<String> personaTagsNames = tagList.stream()\n-\t\t\t\t\t\t\t\t.filter(Tag::isPersona)\n-\t\t\t\t\t\t\t\t.map(Tag::getTagName)\n-\t\t\t\t\t\t\t\t.collect(Collectors.toList());\n-\n-\t\t\t\t\t\tm.put(st.getVelocityVarName() + \".\"\n-\t\t\t\t\t\t\t\t+ ESMappingConstants.PERSONAS, personaTagsNames);\n-\t\t\t\t\t\tm.put(ESMappingConstants.PERSONAS, personaTagsNames);\n-\t\t\t\t\t}\n-\n-\t\t\t\t} else if(f.getFieldType().equals(CUSTOM_FIELD.legacyValue())\n-\t\t\t\t\t\t&& f.getVelocityVarName().equals(PERSONA_KEY_TAG_FIELD_VAR)) {\n-\t\t\t\t\tm.put(PERSONA_KEY_TAG,valueObj.toString());\n-\t\t\t\t\tm.put(keyName, valueObj.toString());\n+\t\t\t\t} else if(field.getFieldType().equals(CUSTOM_FIELD.legacyValue())\n+\t\t\t\t\t\t&& field.getVelocityVarName().equals(PERSONA_KEY_TAG_FIELD_VAR)) {\n+\t\t\t\t\tcontentletMap.put(PERSONA_KEY_TAG,valueObj.toString());\n+\t\t\t\t\tcontentletMap.put(keyName, valueObj.toString());\n \t\t\t\t} else {\n-\t\t\t\t\tif (f.getFieldContentlet()\n+\t\t\t\t\tif (field.getFieldContentlet()\n \t\t\t\t\t\t\t.startsWith(ESMappingConstants.FIELD_ELASTIC_TYPE_BOOLEAN)) {\n-\t\t\t\t\t\tm.put(keyName, valueObj);\n-\t\t\t\t\t\tm.put(keyNameText,valueObj.toString());\n-\t\t\t\t\t} else if (f.getFieldContentlet()\n-\t\t\t\t\t\t\t.startsWith(ESMappingConstants.FIELD_ELASTIC_TYPE_FLOAT) || f\n+\t\t\t\t\t\tcontentletMap.put(keyName, valueObj);\n+\t\t\t\t\t\tcontentletMap.put(keyNameText,valueObj.toString());\n+\t\t\t\t\t} else if (field.getFieldContentlet()\n+\t\t\t\t\t\t\t.startsWith(ESMappingConstants.FIELD_ELASTIC_TYPE_FLOAT) || field\n \t\t\t\t\t\t\t.getFieldContentlet()\n \t\t\t\t\t\t\t.startsWith(ESMappingConstants.FIELD_ELASTIC_TYPE_INTEGER)) {\n-\t\t\t\t\t\tm.put(keyName, valueObj);\n-\t\t\t\t\t\tm.put(keyNameText, numFormatter.format(valueObj));\n+\t\t\t\t\t\tcontentletMap.put(keyName, valueObj);\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, numFormatter.format(valueObj));\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tm.put(keyName, valueObj);\n-\t\t\t\t\t\tm.put(keyNameText, valueObj.toString());\n+\t\t\t\t\t\tcontentletMap.put(keyName, valueObj);\n+\t\t\t\t\t\tcontentletMap.put(keyNameText, valueObj.toString());\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Store sha256 hash for unique fields in the index\n-\t\t\t\tif (f.isUnique() && m.containsKey(keyName)) {\n-\t\t\t\t\tfinal Object uniqueValue = m.get(keyName);\n-\t\t\t\t\tm.put(keyName + ESUtils.SHA_256,\n-\t\t\t\t\t\t\tESUtils.sha256(keyName, uniqueValue, con.getLanguageId()));\n+\t\t\t\tif (field.isUnique() && contentletMap.containsKey(keyName)) {\n+\t\t\t\t\tfinal Object uniqueValue = contentletMap.get(keyName);\n+\t\t\t\t\tcontentletMap.put(keyName + ESUtils.SHA_256,\n+\t\t\t\t\t\t\tESUtils.sha256(keyName, uniqueValue, contentlet.getLanguageId()));\n \t\t\t\t}\n-\n \t\t\t} catch (Exception e) {\n-\t\t\t\tLogger.warn(ESMappingAPIImpl.class, \"Error indexing field: \" + f.getFieldName()\n-\t\t\t\t\t\t+ \" of contentlet: \" + con.getInode(), e);\n+\t\t\t\tLogger.warn(ESMappingAPIImpl.class, \"Error indexing field: \" + field.getFieldName()\n+\t\t\t\t\t\t+ \" of contentlet: \" + contentlet.getInode(), e);\n \t\t\t\tthrow new DotDataException(e.getMessage(),e);\n \t\t\t}\n \t\t}\n \t}\n \n+\tprivate boolean loadTagsField(final Contentlet contentlet,\n+\t\t\t\t\t\t\t\t  final Map<String, Object> contentletMap,\n+\t\t\t\t\t\t\t\t  final Structure structure,\n+\t\t\t\t\t\t\t\t  final String keyName) throws DotDataException {\n+\n+\t\tfinal List<Tag> tagList = APILocator.getTagAPI().getTagsByInode(contentlet.getInode());\n+\t\tif(tagList ==null || tagList.size()==0) {", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjEzNg==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406136", "bodyText": "Issue found: Avoid unused local variables such as 'errorMessage'.", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:38Z", "path": "dotCMS/src/main/java/com/dotcms/tika/TikaUtils.java", "diffHunk": "@@ -199,6 +321,59 @@ public boolean generateMetaData(Contentlet contentlet, boolean force)\n         return false;\n     }\n \n+    /**\n+     * Similar as {@link #getMetaDataMap(String, File, boolean)} but includes the metadata fields to filter from the tika collection\n+     * and the max length of the binary file to parse.\n+     * Also, it is not storing anything on the file system as the reference method {@link #getMetaDataMap(String, File, boolean)}\n+     * This one does everything on memory, means forceMemory is always true and the file system cache has to be performed on upper layers\n+     */\n+    private Map<String, Object> getForcedMetaDataMap(final File binFile,\n+                                               final Set<String> metadataFields,\n+                                               final int maxLength) {\n+\n+        if (!osgiInitialized) {\n+            Logger.error(this.getClass(),\n+                    \"Unable to get file Meta Data, OSGI Framework not initialized\");\n+            return Collections.emptyMap();\n+        }\n+\n+        final Map<String, Object> metaMap = new TreeMap<>();\n+        this.tikaService.setMaxStringLength(maxLength);\n+\n+        try (InputStream stream = Files.newInputStream(binFile.toPath())) {\n+            // no worry about the limit and less time to process.\n+            final String content = this.tikaService.parseToString(stream);\n+\n+            //Creating the meta data map to use by our content\n+            metaMap.putAll(this.buildMetaDataMap());\n+            metaMap.put(FileAssetAPI.CONTENT_FIELD, content);\n+        } catch (IOException ioExc) {\n+            if (this.isZeroByteFileException(ioExc.getCause())) {\n+                logWarning(binFile, ioExc.getCause());\n+            } else {\n+                final String errorMessage = String", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjE1NQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406155", "bodyText": "Issue found: The String literal \"title\" appears 6 times in this file; the first occurrence is on line 164", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:40Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -75,11 +97,126 @@ public static void prepare() throws Exception {\n         contentTypeAPI = APILocator.getContentTypeAPI(user);\n         contentletAPI = APILocator.getContentletAPI();\n         fieldAPI = APILocator.getContentTypeFieldAPI();\n+        folderAPI = APILocator.getFolderAPI();\n         languageAPI = APILocator.getLanguageAPI();\n         language = languageAPI.getDefaultLanguage();\n         relationshipAPI = APILocator.getRelationshipAPI();\n     }\n \n+    @Test\n+    public void test_toMap_fileasset_txt_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String rootFolderName = String.format(\"lolFolder-%d\", System.currentTimeMillis());\n+        final Folder root1 = folderAPI.createFolders(rootFolderName, host, user, false);\n+        final FileAsset fileAsset = new FileAsset();\n+        final ImmutableFileAssetContentType.Builder builder = ImmutableFileAssetContentType.builder();\n+        builder.name(\"Test\").variable(\"testfa\");\n+        final ContentType fileAssetContentType = contentTypeAPI.find(\"FileAsset\");\n+        final String fileName1 = TEMP_FILE + System.currentTimeMillis();\n+        final File tempFile1 = File.createTempFile(fileName1, TXT);\n+        final String anyContent = \"LOL!\";\n+        FileUtil.write(tempFile1, anyContent);\n+        final String fileNameField1 = fileName1 + DOT_TXT;\n+        final String title1 = \"Contentlet-1\";\n+\n+        fileAsset.setContentType(fileAssetContentType);\n+        fileAsset.setFolder(root1.getInode());\n+        fileAsset.setBinary(FileAssetAPI.BINARY_FIELD, tempFile1);\n+        fileAsset.setStringProperty(FileAssetAPI.HOST_FOLDER_FIELD, root1.getInode());\n+        fileAsset.setStringProperty(FileAssetAPI.TITLE_FIELD, title1);\n+        fileAsset.setStringProperty(FileAssetAPI.FILE_NAME_FIELD, fileNameField1);\n+        fileAsset.setIndexPolicy(IndexPolicy.FORCE);\n+\n+        // Create a piece of content for the default host\n+        final Map<String,Object>  contentletMap = esMappingAPI.toMap(APILocator.getContentletAPI().checkin(fileAsset, user, false));\n+\n+        assertNotNull(contentletMap);\n+        assertEquals(fileNameField1.toLowerCase(), contentletMap.get(\"fileasset.filename\"));\n+        assertEquals(\"fileasset\", contentletMap.get(\"structurename\"));\n+        assertEquals(\"text/plain; charset=iso-8859-1\", contentletMap.get(\"metadata.contenttype\"));\n+        assertEquals(\"4\", contentletMap.get(\"metadata.filesize\"));\n+        assertTrue( contentletMap.get(\"metadata.content\").toString().contains(\"lol!\"));\n+\n+    }\n+\n+    @Test\n+    public void test_toMap_binary_field_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final FieldAPI         fieldAPI        = APILocator.getContentTypeFieldAPI();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String varname = \"testcontenttypetwobinaryfields\" + System.currentTimeMillis();\n+\n+        ContentType contentType = ContentTypeBuilder.builder(BaseContentType.CONTENT.immutableClass())\n+                .description(\"Test ContentType Binary Fields\")\n+                .host(host.getIdentifier())\n+                .name(\"Test ContentType Binary Fields\")\n+                .owner(\"owner\")\n+                .variable(varname)\n+                .build();\n+\n+        contentType = contentTypeAPI.save(contentType);\n+\n+        Field textField = ImmutableTextField.builder()\n+                .name(\"Title\")\n+                .variable(\"title\")", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjE3MA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406170", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.contenttype.model.type.ImmutableSimpleContentType'", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:41Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -14,13 +14,21 @@\n import com.dotcms.contenttype.business.ContentTypeAPI;\n import com.dotcms.contenttype.business.FieldAPI;\n import com.dotcms.contenttype.model.field.CategoryField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n import com.dotcms.contenttype.model.field.Field;\n import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.ImmutableBinaryField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n import com.dotcms.contenttype.model.field.RelationshipField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.FileAssetContentType;\n+import com.dotcms.contenttype.model.type.ImmutableFileAssetContentType;\n+import com.dotcms.contenttype.model.type.ImmutableSimpleContentType;", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjE4Mg==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406182", "bodyText": "Issue found: Avoid variables with short names like in", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:42Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjE5NA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406194", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.contenttype.model.type.FileAssetContentType'", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:43Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -14,13 +14,21 @@\n import com.dotcms.contenttype.business.ContentTypeAPI;\n import com.dotcms.contenttype.business.FieldAPI;\n import com.dotcms.contenttype.model.field.CategoryField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n import com.dotcms.contenttype.model.field.Field;\n import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.ImmutableBinaryField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n import com.dotcms.contenttype.model.field.RelationshipField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.FileAssetContentType;", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjIxNQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406215", "bodyText": "Issue found: Ensure that resources like this InputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:45Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjIyOQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406229", "bodyText": "Issue found: Ensure that resources like this OutputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:46Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"egzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"bzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"bzip2\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"bzip2\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"ebzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.BZIP2);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjIzMw==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406233", "bodyText": "Issue found: Avoid variables with short names like in", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:47Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"egzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjI0Nw==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406247", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertTrue' due to existing static import 'org.junit.Assert.assertTrue'", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:48Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -75,11 +97,126 @@ public static void prepare() throws Exception {\n         contentTypeAPI = APILocator.getContentTypeAPI(user);\n         contentletAPI = APILocator.getContentletAPI();\n         fieldAPI = APILocator.getContentTypeFieldAPI();\n+        folderAPI = APILocator.getFolderAPI();\n         languageAPI = APILocator.getLanguageAPI();\n         language = languageAPI.getDefaultLanguage();\n         relationshipAPI = APILocator.getRelationshipAPI();\n     }\n \n+    @Test\n+    public void test_toMap_fileasset_txt_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String rootFolderName = String.format(\"lolFolder-%d\", System.currentTimeMillis());\n+        final Folder root1 = folderAPI.createFolders(rootFolderName, host, user, false);\n+        final FileAsset fileAsset = new FileAsset();\n+        final ImmutableFileAssetContentType.Builder builder = ImmutableFileAssetContentType.builder();\n+        builder.name(\"Test\").variable(\"testfa\");\n+        final ContentType fileAssetContentType = contentTypeAPI.find(\"FileAsset\");\n+        final String fileName1 = TEMP_FILE + System.currentTimeMillis();\n+        final File tempFile1 = File.createTempFile(fileName1, TXT);\n+        final String anyContent = \"LOL!\";\n+        FileUtil.write(tempFile1, anyContent);\n+        final String fileNameField1 = fileName1 + DOT_TXT;\n+        final String title1 = \"Contentlet-1\";\n+\n+        fileAsset.setContentType(fileAssetContentType);\n+        fileAsset.setFolder(root1.getInode());\n+        fileAsset.setBinary(FileAssetAPI.BINARY_FIELD, tempFile1);\n+        fileAsset.setStringProperty(FileAssetAPI.HOST_FOLDER_FIELD, root1.getInode());\n+        fileAsset.setStringProperty(FileAssetAPI.TITLE_FIELD, title1);\n+        fileAsset.setStringProperty(FileAssetAPI.FILE_NAME_FIELD, fileNameField1);\n+        fileAsset.setIndexPolicy(IndexPolicy.FORCE);\n+\n+        // Create a piece of content for the default host\n+        final Map<String,Object>  contentletMap = esMappingAPI.toMap(APILocator.getContentletAPI().checkin(fileAsset, user, false));\n+\n+        assertNotNull(contentletMap);\n+        assertEquals(fileNameField1.toLowerCase(), contentletMap.get(\"fileasset.filename\"));\n+        assertEquals(\"fileasset\", contentletMap.get(\"structurename\"));\n+        assertEquals(\"text/plain; charset=iso-8859-1\", contentletMap.get(\"metadata.contenttype\"));\n+        assertEquals(\"4\", contentletMap.get(\"metadata.filesize\"));\n+        assertTrue( contentletMap.get(\"metadata.content\").toString().contains(\"lol!\"));\n+\n+    }\n+\n+    @Test\n+    public void test_toMap_binary_field_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final FieldAPI         fieldAPI        = APILocator.getContentTypeFieldAPI();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String varname = \"testcontenttypetwobinaryfields\" + System.currentTimeMillis();\n+\n+        ContentType contentType = ContentTypeBuilder.builder(BaseContentType.CONTENT.immutableClass())\n+                .description(\"Test ContentType Binary Fields\")\n+                .host(host.getIdentifier())\n+                .name(\"Test ContentType Binary Fields\")\n+                .owner(\"owner\")\n+                .variable(varname)\n+                .build();\n+\n+        contentType = contentTypeAPI.save(contentType);\n+\n+        Field textField = ImmutableTextField.builder()\n+                .name(\"Title\")\n+                .variable(\"title\")\n+                .contentTypeId(contentType.id())\n+                .dataType(DataTypes.TEXT)\n+                .build();\n+\n+        textField = fieldAPI.save(textField, user);\n+\n+        //Creating First Binary Field.\n+        Field binaryField1 = ImmutableBinaryField.builder()\n+                .name(\"Binary 1\")\n+                .variable(\"binary1\")\n+                .contentTypeId(contentType.id())\n+                .build();\n+\n+        binaryField1 = fieldAPI.save(binaryField1, user);\n+\n+        //Creating Second Binary Field.\n+        Field binaryField2 = ImmutableBinaryField.builder()\n+                .name(\"Binary 2\")\n+                .variable(\"binary2\")\n+                .indexed(true)\n+                .searchable(true)\n+                .contentTypeId(contentType.id())\n+                .build();\n+\n+        binaryField2 = fieldAPI.save(binaryField2, user);\n+\n+        final Contentlet contentlet = new Contentlet();\n+        contentlet.setContentType(contentType);\n+        contentlet.setProperty(\"title\", \"binary1\");\n+\n+        final String fileName1 = TEMP_FILE + System.currentTimeMillis();\n+        final File binary1 = File.createTempFile(fileName1, TXT);\n+        final String anyContent = \"LOL!\";\n+        FileUtil.write(binary1, anyContent);\n+        final File binary2 = new File(ESMappingAPITest.class.getClassLoader().getResource(\"images/test.jpg\").getFile());\n+\n+        Assert.assertTrue(binary2.exists());", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjI1OA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406258", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.util.Config'", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:49Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -33,21 +41,31 @@\n import com.dotmarketing.portlets.categories.model.Category;\n import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n import com.dotmarketing.portlets.languagesmanager.model.Language;\n import com.dotmarketing.portlets.structure.model.Relationship;\n+import com.dotmarketing.util.Config;", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjI3MQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406271", "bodyText": "Issue found: Ensure that resources like this InputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:50Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjI4NQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406285", "bodyText": "Issue found: Ensure that resources like this OutputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:52Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjMwMA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406300", "bodyText": "Issue found: Ensure that resources like this InputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:53Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"egzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"bzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"bzip2\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"bzip2\");", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjMxNA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406314", "bodyText": "Issue found: Ensure that resources like this OutputStream object are closed after use", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:54Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"egzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"bzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"bzip2\");", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjMyNw==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406327", "bodyText": "Issue found: Avoid variables with short names like in", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:55Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"egzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"bzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"bzip2\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"bzip2\");", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjM0MA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406340", "bodyText": "Issue found: Avoid variables with short names like in", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:56Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjM2MA==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406360", "bodyText": "Issue found: In J2EE, getClassLoader() might not work as expected.  Use Thread.currentThread().getContextClassLoader() instead.", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:58Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -75,11 +97,126 @@ public static void prepare() throws Exception {\n         contentTypeAPI = APILocator.getContentTypeAPI(user);\n         contentletAPI = APILocator.getContentletAPI();\n         fieldAPI = APILocator.getContentTypeFieldAPI();\n+        folderAPI = APILocator.getFolderAPI();\n         languageAPI = APILocator.getLanguageAPI();\n         language = languageAPI.getDefaultLanguage();\n         relationshipAPI = APILocator.getRelationshipAPI();\n     }\n \n+    @Test\n+    public void test_toMap_fileasset_txt_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String rootFolderName = String.format(\"lolFolder-%d\", System.currentTimeMillis());\n+        final Folder root1 = folderAPI.createFolders(rootFolderName, host, user, false);\n+        final FileAsset fileAsset = new FileAsset();\n+        final ImmutableFileAssetContentType.Builder builder = ImmutableFileAssetContentType.builder();\n+        builder.name(\"Test\").variable(\"testfa\");\n+        final ContentType fileAssetContentType = contentTypeAPI.find(\"FileAsset\");\n+        final String fileName1 = TEMP_FILE + System.currentTimeMillis();\n+        final File tempFile1 = File.createTempFile(fileName1, TXT);\n+        final String anyContent = \"LOL!\";\n+        FileUtil.write(tempFile1, anyContent);\n+        final String fileNameField1 = fileName1 + DOT_TXT;\n+        final String title1 = \"Contentlet-1\";\n+\n+        fileAsset.setContentType(fileAssetContentType);\n+        fileAsset.setFolder(root1.getInode());\n+        fileAsset.setBinary(FileAssetAPI.BINARY_FIELD, tempFile1);\n+        fileAsset.setStringProperty(FileAssetAPI.HOST_FOLDER_FIELD, root1.getInode());\n+        fileAsset.setStringProperty(FileAssetAPI.TITLE_FIELD, title1);\n+        fileAsset.setStringProperty(FileAssetAPI.FILE_NAME_FIELD, fileNameField1);\n+        fileAsset.setIndexPolicy(IndexPolicy.FORCE);\n+\n+        // Create a piece of content for the default host\n+        final Map<String,Object>  contentletMap = esMappingAPI.toMap(APILocator.getContentletAPI().checkin(fileAsset, user, false));\n+\n+        assertNotNull(contentletMap);\n+        assertEquals(fileNameField1.toLowerCase(), contentletMap.get(\"fileasset.filename\"));\n+        assertEquals(\"fileasset\", contentletMap.get(\"structurename\"));\n+        assertEquals(\"text/plain; charset=iso-8859-1\", contentletMap.get(\"metadata.contenttype\"));\n+        assertEquals(\"4\", contentletMap.get(\"metadata.filesize\"));\n+        assertTrue( contentletMap.get(\"metadata.content\").toString().contains(\"lol!\"));\n+\n+    }\n+\n+    @Test\n+    public void test_toMap_binary_field_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final FieldAPI         fieldAPI        = APILocator.getContentTypeFieldAPI();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String varname = \"testcontenttypetwobinaryfields\" + System.currentTimeMillis();\n+\n+        ContentType contentType = ContentTypeBuilder.builder(BaseContentType.CONTENT.immutableClass())\n+                .description(\"Test ContentType Binary Fields\")\n+                .host(host.getIdentifier())\n+                .name(\"Test ContentType Binary Fields\")\n+                .owner(\"owner\")\n+                .variable(varname)\n+                .build();\n+\n+        contentType = contentTypeAPI.save(contentType);\n+\n+        Field textField = ImmutableTextField.builder()\n+                .name(\"Title\")\n+                .variable(\"title\")\n+                .contentTypeId(contentType.id())\n+                .dataType(DataTypes.TEXT)\n+                .build();\n+\n+        textField = fieldAPI.save(textField, user);\n+\n+        //Creating First Binary Field.\n+        Field binaryField1 = ImmutableBinaryField.builder()\n+                .name(\"Binary 1\")\n+                .variable(\"binary1\")\n+                .contentTypeId(contentType.id())\n+                .build();\n+\n+        binaryField1 = fieldAPI.save(binaryField1, user);\n+\n+        //Creating Second Binary Field.\n+        Field binaryField2 = ImmutableBinaryField.builder()\n+                .name(\"Binary 2\")\n+                .variable(\"binary2\")\n+                .indexed(true)\n+                .searchable(true)\n+                .contentTypeId(contentType.id())\n+                .build();\n+\n+        binaryField2 = fieldAPI.save(binaryField2, user);\n+\n+        final Contentlet contentlet = new Contentlet();\n+        contentlet.setContentType(contentType);\n+        contentlet.setProperty(\"title\", \"binary1\");\n+\n+        final String fileName1 = TEMP_FILE + System.currentTimeMillis();\n+        final File binary1 = File.createTempFile(fileName1, TXT);\n+        final String anyContent = \"LOL!\";\n+        FileUtil.write(binary1, anyContent);\n+        final File binary2 = new File(ESMappingAPITest.class.getClassLoader().getResource(\"images/test.jpg\").getFile());", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5NzkzMw==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r383497933", "bodyText": "Done", "author": "jdotcms", "createdAt": "2020-02-24T20:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjM3NQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406375", "bodyText": "Issue found: Avoid variables with short names like in", "author": "dev-dotcms", "createdAt": "2020-02-19T16:52:59Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"gzip\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"egzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.GZIP);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"bzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"bzip2\");\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file, \"bzip2\");\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_bzip2_enum_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"ebzip2\");\n+        final OutputStream out = FileUtil.createOutputStream(file.toPath(), FileUtil.StreamCompressorType.BZIP2);\n+\n+        final String  string = \"testcompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file.toPath(), FileUtil.StreamCompressorType.BZIP2);", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjM5Mg==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406392", "bodyText": "Issue found: The String literal \"testcompress\" appears 4 times in this file; the first occurrence is on line 46", "author": "dev-dotcms", "createdAt": "2020-02-19T16:53:00Z", "path": "dotCMS/src/test/java/com/liferay/util/FileUtilTest.java", "diffHunk": "@@ -2,19 +2,118 @@\n \n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.nio.file.Files;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n \n+import com.dotcms.util.CloseUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.ImmutableList;\n import static org.junit.Assert.assertEquals;\n \n public class FileUtilTest {\n \n-  @Test\n+    @Test\n+    public void test_uncompress_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"nocompre_\");\n+        final OutputStream out = FileUtil.createOutputStream(file);\n+\n+        final String  string = \"testuncompress\";\n+        final byte [] bytes  = string.getBytes();\n+        out.write(bytes);\n+        CloseUtils.closeQuietly(out);\n+\n+        final InputStream in   = FileUtil.createInputStream(file);\n+        final byte [] buff     = new byte[bytes.length];\n+        in.read(buff);\n+        CloseUtils.closeQuietly(in);\n+\n+        Assert.assertEquals(\"The file recovery should be the file saved\", new String(buff), string);\n+    }\n+\n+    @Test\n+    public void test_compress_gzip_outputstream()  throws Exception {\n+\n+        final File file = com.dotmarketing.util.FileUtil.createTemporalFile(\"gzip\");\n+        final OutputStream out = FileUtil.createOutputStream(file, \"gzip\");\n+\n+        final String  string = \"testcompress\";", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwNjQwMQ==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r381406401", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-02-19T16:53:02Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESMappingAPIImpl.java", "diffHunk": "@@ -464,203 +546,217 @@ protected void loadPermissions(final Contentlet con, final Map<String,Object> m)\n \n \tpublic static final FastDateFormat timeFormat = FastDateFormat.getInstance(\"HH:mm:ss\");\n \n-\tprotected void loadFields(Contentlet con, Map<String, Object> m) throws DotDataException {\n+\tprotected void loadFields(final Contentlet contentlet, final Map<String, Object> contentletMap) throws DotDataException {\n \n \t\t// https://github.com/dotCMS/dotCMS/issues/6152\n-\t\tDecimalFormatSymbols otherSymbols = new DecimalFormatSymbols();\n+\t\tfinal DecimalFormatSymbols otherSymbols = new DecimalFormatSymbols();\n \t\totherSymbols.setDecimalSeparator('.');\n \n-\t\tDecimalFormat numFormatter = new DecimalFormat(\"0000000000000000000.000000000000000000\", otherSymbols);\n-\n-\t\tFieldAPI fAPI=APILocator.getFieldAPI();\n-\t\tfinal List<Field> fields = new ArrayList<>(\n-\t\t\t\tFieldsCache.getFieldsByStructureInode(con.getStructureInode()));\n-\n-\t\tStructure st=con.getStructure();\n+\t\tfinal DecimalFormat numFormatter = new DecimalFormat(\"0000000000000000000.000000000000000000\", otherSymbols);\n+\t\tfinal FieldAPI fieldAPI   = APILocator.getFieldAPI();\n+\t\tfinal List<Field> fields  = new ArrayList<>(\n+\t\t\t\tFieldsCache.getFieldsByStructureInode(contentlet.getStructureInode()));\n+\t\tfinal Structure structure = contentlet.getStructure();\n \t\tStringBuilder keyNameBuilder;\n \t\tString keyName;\n \t\tString keyNameText;\n-\n \t\tfinal TikaUtils tikaUtils = new TikaUtils();\n \n-\t\tfor (Field f : fields) {\n+\t\tfor (final Field field : fields) {\n \n-\t\t\tkeyNameBuilder = new StringBuilder(st.getVelocityVarName()).append(\".\")\n-\t\t\t\t\t.append(f.getVelocityVarName());\n+\t\t\tkeyNameBuilder = new StringBuilder(structure.getVelocityVarName()).append(\".\")\n+\t\t\t\t\t.append(field.getVelocityVarName());\n \t\t\tkeyName        = keyNameBuilder.toString();\n \t\t\tkeyNameText    = keyNameBuilder.append(TEXT).toString();\n-\t\t\tif (f.getFieldType().equals(Field.FieldType.BINARY.toString())\n-\t\t\t\t\t|| f.getFieldContentlet() != null && (f.getFieldContentlet().startsWith(ESMappingConstants.FIELD_TYPE_SYSTEM_FIELD) && !f.getFieldType().equals(Field.FieldType.TAG.toString()))) {\n+\t\t\tif (field.getFieldType().equals(Field.FieldType.BINARY.toString()) // todo: remove this since we are going to index the binary fields\n+\t\t\t\t\t|| field.getFieldContentlet() != null && (field.getFieldContentlet().startsWith(ESMappingConstants.FIELD_TYPE_SYSTEM_FIELD)\n+\t\t\t\t\t&& !field.getFieldType().equals(Field.FieldType.TAG.toString()))) {\n+\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tif(!f.isIndexed()){\n+\n+\t\t\tif(!field.isIndexed()) {\n+\n \t\t\t\tcontinue;\n \t\t\t}\n+\n \t\t\ttry {\n-\t\t\t\tif(fAPI.isElementConstant(f)){\n-\t\t\t\t\tm.put(keyName, (f.getValues() == null ? \"\":f.getValues()));\n+\t\t\t\tif(fieldAPI.isElementConstant(field)){\n+\t\t\t\t\tcontentletMap.put(keyName, (field.getValues() == null ? \"\":field.getValues()));", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNzQyNg==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r382707426", "bodyText": "Just as suggestion: use more explicit variable names since a dotcms \"variable\" can belong to different type of things, so only varname can be confusing for referencing. Suggestion: testContentTypeVarName", "author": "dsilvam", "createdAt": "2020-02-21T17:23:16Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESMappingAPITest.java", "diffHunk": "@@ -75,11 +97,126 @@ public static void prepare() throws Exception {\n         contentTypeAPI = APILocator.getContentTypeAPI(user);\n         contentletAPI = APILocator.getContentletAPI();\n         fieldAPI = APILocator.getContentTypeFieldAPI();\n+        folderAPI = APILocator.getFolderAPI();\n         languageAPI = APILocator.getLanguageAPI();\n         language = languageAPI.getDefaultLanguage();\n         relationshipAPI = APILocator.getRelationshipAPI();\n     }\n \n+    @Test\n+    public void test_toMap_fileasset_txt_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String rootFolderName = String.format(\"lolFolder-%d\", System.currentTimeMillis());\n+        final Folder root1 = folderAPI.createFolders(rootFolderName, host, user, false);\n+        final FileAsset fileAsset = new FileAsset();\n+        final ImmutableFileAssetContentType.Builder builder = ImmutableFileAssetContentType.builder();\n+        builder.name(\"Test\").variable(\"testfa\");\n+        final ContentType fileAssetContentType = contentTypeAPI.find(\"FileAsset\");\n+        final String fileName1 = TEMP_FILE + System.currentTimeMillis();\n+        final File tempFile1 = File.createTempFile(fileName1, TXT);\n+        final String anyContent = \"LOL!\";\n+        FileUtil.write(tempFile1, anyContent);\n+        final String fileNameField1 = fileName1 + DOT_TXT;\n+        final String title1 = \"Contentlet-1\";\n+\n+        fileAsset.setContentType(fileAssetContentType);\n+        fileAsset.setFolder(root1.getInode());\n+        fileAsset.setBinary(FileAssetAPI.BINARY_FIELD, tempFile1);\n+        fileAsset.setStringProperty(FileAssetAPI.HOST_FOLDER_FIELD, root1.getInode());\n+        fileAsset.setStringProperty(FileAssetAPI.TITLE_FIELD, title1);\n+        fileAsset.setStringProperty(FileAssetAPI.FILE_NAME_FIELD, fileNameField1);\n+        fileAsset.setIndexPolicy(IndexPolicy.FORCE);\n+\n+        // Create a piece of content for the default host\n+        final Map<String,Object>  contentletMap = esMappingAPI.toMap(APILocator.getContentletAPI().checkin(fileAsset, user, false));\n+\n+        assertNotNull(contentletMap);\n+        assertEquals(fileNameField1.toLowerCase(), contentletMap.get(\"fileasset.filename\"));\n+        assertEquals(\"fileasset\", contentletMap.get(\"structurename\"));\n+        assertEquals(\"text/plain; charset=iso-8859-1\", contentletMap.get(\"metadata.contenttype\"));\n+        assertEquals(\"4\", contentletMap.get(\"metadata.filesize\"));\n+        assertTrue( contentletMap.get(\"metadata.content\").toString().contains(\"lol!\"));\n+\n+    }\n+\n+    @Test\n+    public void test_toMap_binary_field_shouldSuccess() throws Exception {\n+\n+        final ESMappingAPIImpl esMappingAPI    = new ESMappingAPIImpl();\n+        final FieldAPI         fieldAPI        = APILocator.getContentTypeFieldAPI();\n+        final Host host = APILocator.getHostAPI().findDefaultHost(user, false);\n+        final String varname = \"testcontenttypetwobinaryfields\" + System.currentTimeMillis();", "originalCommit": "98e1fdb8b053c8982cdd52fd7bc3bd25be63c058", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5NDE5Ng==", "url": "https://github.com/dotCMS/core/pull/17962#discussion_r383494196", "bodyText": "Done", "author": "jdotcms", "createdAt": "2020-02-24T20:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNzQyNg=="}], "type": "inlineReview"}]}