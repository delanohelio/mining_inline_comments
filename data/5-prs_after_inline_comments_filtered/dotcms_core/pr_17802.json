{"pr_number": 17802, "pr_title": "Issue 17698 webdav casing issues", "pr_createdAt": "2020-01-09T14:15:52Z", "pr_url": "https://github.com/dotCMS/core/pull/17802", "timeline": [{"oid": "fbe1e3744e5ded6972180b84b4d3e8741267b095", "url": "https://github.com/dotCMS/core/commit/fbe1e3744e5ded6972180b84b4d3e8741267b095", "message": "#17698 making webdav impl cases insensitive", "committedDate": "2020-01-07T18:15:53Z", "type": "commit"}, {"oid": "290ce9044b273eb9b42f63d267ebb81258446a76", "url": "https://github.com/dotCMS/core/commit/290ce9044b273eb9b42f63d267ebb81258446a76", "message": "#17698  casing file names via webdav", "committedDate": "2020-01-08T15:49:21Z", "type": "commit"}, {"oid": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "url": "https://github.com/dotCMS/core/commit/2c42e9ad3e1350c72db597e98dddb1705b2e696b", "message": "#17698  fix  move file when source and dest are the same. e.g. Lowecasing the file name", "committedDate": "2020-01-09T13:52:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwNTAyMQ==", "url": "https://github.com/dotCMS/core/pull/17802#discussion_r364805021", "bodyText": "Issue found: Avoid variables with short names like n", "author": "dev-dotcms", "createdAt": "2020-01-09T15:33:19Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/webdav/DotWebdavHelperTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotmarketing.webdav;\n+\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.repackage.com.bradmcevoy.http.FileResource;\n+import com.dotcms.repackage.com.bradmcevoy.http.FolderResource;\n+import com.dotcms.repackage.com.bradmcevoy.http.Resource;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.util.FileUtil;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DotWebdavHelperTest {\n+\n+    private final DotWebdavHelper helper = new DotWebdavHelper();\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_Then_Get_File_Resource() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String folderPath = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/\",host.getName(),parent.getName());\n+        final Resource folderResource = helper.getResourceFromURL(folderPath);\n+        Assert.assertNotNull(folderResource);\n+        Assert.assertTrue(folderResource instanceof FolderResource);\n+        final String fileResourcePath = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName());\n+        final Resource fileResource = helper.getResourceFromURL(fileResourcePath);\n+        Assert.assertNotNull(fileResource);\n+        Assert.assertTrue(fileResource instanceof FileResource);\n+    }\n+\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_Then_Get_File_Resource_Shuffled_Casing() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String folderPath = upperCaseRandom(String.format(\"http://localhost:8080/webdav/live/1/%s/%s/\",host.getName(),parent.getName()), 8);\n+\n+        final Resource folderResource = helper.getResourceFromURL(folderPath);\n+        Assert.assertNotNull(folderResource);\n+        Assert.assertTrue(folderResource instanceof FolderResource);\n+        final String fileResourcePath = upperCaseRandom(String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName()),8);\n+        final Resource fileResource = helper.getResourceFromURL(fileResourcePath);\n+        Assert.assertNotNull(fileResource);\n+        Assert.assertTrue(fileResource instanceof FileResource);\n+    }\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_For_Non_Existing_Path() throws IOException, DotDataException, DotSecurityException {\n+        String path = \"http://localhost:8080/webdav/live/1/demo.dotcms.com/images/black.png\";\n+        final Resource folderResource = helper.getResourceFromURL(path);\n+        Assert.assertNull(folderResource);\n+    }\n+\n+    @Test\n+    public void Test_Same_Resource_For_Paths_With_Different_Casing() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String path = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName());\n+        final String fileResourcePath1 = upperCaseRandom(path,8);\n+        final String fileResourcePath2 = upperCaseRandom(path,10);\n+        Assert.assertNotEquals(fileResourcePath1,fileResourcePath2);\n+        Assert.assertTrue(helper.isSameResourceURL(fileResourcePath1,fileResourcePath2, file.getName()));\n+    }\n+\n+    private static String upperCaseRandom(final String input, final int n) {", "originalCommit": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwNTAyOA==", "url": "https://github.com/dotCMS/core/pull/17802#discussion_r364805028", "bodyText": "Issue found: Local variable 'path' could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-09T15:33:20Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/webdav/DotWebdavHelperTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotmarketing.webdav;\n+\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.repackage.com.bradmcevoy.http.FileResource;\n+import com.dotcms.repackage.com.bradmcevoy.http.FolderResource;\n+import com.dotcms.repackage.com.bradmcevoy.http.Resource;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.util.FileUtil;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DotWebdavHelperTest {\n+\n+    private final DotWebdavHelper helper = new DotWebdavHelper();\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_Then_Get_File_Resource() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String folderPath = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/\",host.getName(),parent.getName());\n+        final Resource folderResource = helper.getResourceFromURL(folderPath);\n+        Assert.assertNotNull(folderResource);\n+        Assert.assertTrue(folderResource instanceof FolderResource);\n+        final String fileResourcePath = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName());\n+        final Resource fileResource = helper.getResourceFromURL(fileResourcePath);\n+        Assert.assertNotNull(fileResource);\n+        Assert.assertTrue(fileResource instanceof FileResource);\n+    }\n+\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_Then_Get_File_Resource_Shuffled_Casing() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String folderPath = upperCaseRandom(String.format(\"http://localhost:8080/webdav/live/1/%s/%s/\",host.getName(),parent.getName()), 8);\n+\n+        final Resource folderResource = helper.getResourceFromURL(folderPath);\n+        Assert.assertNotNull(folderResource);\n+        Assert.assertTrue(folderResource instanceof FolderResource);\n+        final String fileResourcePath = upperCaseRandom(String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName()),8);\n+        final Resource fileResource = helper.getResourceFromURL(fileResourcePath);\n+        Assert.assertNotNull(fileResource);\n+        Assert.assertTrue(fileResource instanceof FileResource);\n+    }\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_For_Non_Existing_Path() throws IOException, DotDataException, DotSecurityException {\n+        String path = \"http://localhost:8080/webdav/live/1/demo.dotcms.com/images/black.png\";", "originalCommit": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwNTA0MQ==", "url": "https://github.com/dotCMS/core/pull/17802#discussion_r364805041", "bodyText": "Issue found: Local variable 'fileAssetDataGen' could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-09T15:33:21Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/webdav/DotWebdavHelperTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotmarketing.webdav;\n+\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.repackage.com.bradmcevoy.http.FileResource;\n+import com.dotcms.repackage.com.bradmcevoy.http.FolderResource;\n+import com.dotcms.repackage.com.bradmcevoy.http.Resource;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.util.FileUtil;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DotWebdavHelperTest {\n+\n+    private final DotWebdavHelper helper = new DotWebdavHelper();\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_Then_Get_File_Resource() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String folderPath = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/\",host.getName(),parent.getName());\n+        final Resource folderResource = helper.getResourceFromURL(folderPath);\n+        Assert.assertNotNull(folderResource);\n+        Assert.assertTrue(folderResource instanceof FolderResource);\n+        final String fileResourcePath = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName());\n+        final Resource fileResource = helper.getResourceFromURL(fileResourcePath);\n+        Assert.assertNotNull(fileResource);\n+        Assert.assertTrue(fileResource instanceof FileResource);\n+    }\n+\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_Then_Get_File_Resource_Shuffled_Casing() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String folderPath = upperCaseRandom(String.format(\"http://localhost:8080/webdav/live/1/%s/%s/\",host.getName(),parent.getName()), 8);\n+\n+        final Resource folderResource = helper.getResourceFromURL(folderPath);\n+        Assert.assertNotNull(folderResource);\n+        Assert.assertTrue(folderResource instanceof FolderResource);\n+        final String fileResourcePath = upperCaseRandom(String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName()),8);\n+        final Resource fileResource = helper.getResourceFromURL(fileResourcePath);\n+        Assert.assertNotNull(fileResource);\n+        Assert.assertTrue(fileResource instanceof FileResource);\n+    }\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_For_Non_Existing_Path() throws IOException, DotDataException, DotSecurityException {\n+        String path = \"http://localhost:8080/webdav/live/1/demo.dotcms.com/images/black.png\";\n+        final Resource folderResource = helper.getResourceFromURL(path);\n+        Assert.assertNull(folderResource);\n+    }\n+\n+    @Test\n+    public void Test_Same_Resource_For_Paths_With_Different_Casing() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);", "originalCommit": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwNTA2Mg==", "url": "https://github.com/dotCMS/core/pull/17802#discussion_r364805062", "bodyText": "Issue found: Local variable 'file' could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-09T15:33:23Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/webdav/DotWebdavHelperTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotmarketing.webdav;\n+\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.repackage.com.bradmcevoy.http.FileResource;\n+import com.dotcms.repackage.com.bradmcevoy.http.FolderResource;\n+import com.dotcms.repackage.com.bradmcevoy.http.Resource;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.util.FileUtil;\n+import java.io.IOException;\n+import java.util.Random;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class DotWebdavHelperTest {\n+\n+    private final DotWebdavHelper helper = new DotWebdavHelper();\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_Then_Get_File_Resource() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String folderPath = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/\",host.getName(),parent.getName());\n+        final Resource folderResource = helper.getResourceFromURL(folderPath);\n+        Assert.assertNotNull(folderResource);\n+        Assert.assertTrue(folderResource instanceof FolderResource);\n+        final String fileResourcePath = String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName());\n+        final Resource fileResource = helper.getResourceFromURL(fileResourcePath);\n+        Assert.assertNotNull(fileResource);\n+        Assert.assertTrue(fileResource instanceof FileResource);\n+    }\n+\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_Then_Get_File_Resource_Shuffled_Casing() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");\n+        FileUtil.write(file, \"helloworld\");\n+        FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(child, file);\n+        fileAssetDataGen.nextPersisted();\n+        final String folderPath = upperCaseRandom(String.format(\"http://localhost:8080/webdav/live/1/%s/%s/\",host.getName(),parent.getName()), 8);\n+\n+        final Resource folderResource = helper.getResourceFromURL(folderPath);\n+        Assert.assertNotNull(folderResource);\n+        Assert.assertTrue(folderResource instanceof FolderResource);\n+        final String fileResourcePath = upperCaseRandom(String.format(\"http://localhost:8080/webdav/live/1/%s/%s/%s/%s\",host.getName(),parent.getName(),child.getName(),file.getName()),8);\n+        final Resource fileResource = helper.getResourceFromURL(fileResourcePath);\n+        Assert.assertNotNull(fileResource);\n+        Assert.assertTrue(fileResource instanceof FileResource);\n+    }\n+\n+    @Test\n+    public void Test_Get_Folder_Resource_For_Non_Existing_Path() throws IOException, DotDataException, DotSecurityException {\n+        String path = \"http://localhost:8080/webdav/live/1/demo.dotcms.com/images/black.png\";\n+        final Resource folderResource = helper.getResourceFromURL(path);\n+        Assert.assertNull(folderResource);\n+    }\n+\n+    @Test\n+    public void Test_Same_Resource_For_Paths_With_Different_Casing() throws IOException, DotDataException, DotSecurityException {\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        final FolderDataGen folderDataGen = new FolderDataGen();\n+        final Host host = siteDataGen.nextPersisted();\n+        final Folder parent = folderDataGen.site(host).nextPersisted();\n+        final Folder child = folderDataGen.parent(parent).nextPersisted();\n+        java.io.File file = java.io.File.createTempFile(\"texto\", \".txt\");", "originalCommit": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwNTA3Mw==", "url": "https://github.com/dotCMS/core/pull/17802#discussion_r364805073", "bodyText": "Issue found: Avoid reassigning parameters such as 'url'", "author": "dev-dotcms", "createdAt": "2020-01-09T15:33:24Z", "path": "dotCMS/src/main/java/com/dotmarketing/webdav/ResourceFactorytImpl.java", "diffHunk": "@@ -43,26 +43,30 @@ public ResourceFactorytImpl() {\n \t */\n     @WrapInTransaction\n \tpublic Resource getResource(String davHost, String url) {\n+\t\treturn getResource(davHost, url, dotDavHelper, hostAPI);\n+\t}\n+\n+\tpublic static Resource getResource(final String davHost, String url, final DotWebdavHelper dotDavHelper, final HostAPI hostAPI) {", "originalCommit": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxMTMyMg==", "url": "https://github.com/dotCMS/core/pull/17802#discussion_r365311322", "bodyText": "good", "author": "jdotcms", "createdAt": "2020-01-10T16:12:53Z", "path": "dotCMS/src/main/java/com/dotmarketing/webdav/DotWebdavHelper.java", "diffHunk": "@@ -1069,30 +1090,39 @@ public void move(String fromPath, String toPath, User user,boolean autoPublish)t\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tAPILocator.getFileAssetAPI().moveFile(fileAssetCont, toParentFolder, user, false);\n \t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\telse {\n+\t\t\t\t\t} else {\n \t\t\t\t\t\t// if the destination exists lets just create a new version and delete the original file\n-\t\t\t\t\t\tContentlet origin = conAPI.findContentletByIdentifier(identifier.getId(), false, defaultLang, user, false);\n-\t\t\t\t\t\tContentlet toContentlet = conAPI.findContentletByIdentifier(identTo.getId(), false, defaultLang, user, false);\n-\t\t\t\t\t\tContentlet newversion = conAPI.checkout(toContentlet.getInode(), user, false);\n+\t\t\t\t\t\tfinal Contentlet origin = conAPI.findContentletByIdentifier(identifier.getId(), false, defaultLang, user, false);\n+\t\t\t\t\t\tfinal Contentlet toContentlet = conAPI.findContentletByIdentifier(identTo.getId(), false, defaultLang, user, false);\n+\t\t\t\t\t\tContentlet newVersion = conAPI.checkout(toContentlet.getInode(), user, false);\n+\n+\t\t\t\t\t\tfinal boolean sameSourceAndTarget = (origin.getIdentifier().equals(newVersion.getIdentifier()));\n \n \t\t\t\t\t\t// get a copy in a tmp folder to avoid filename change\n-\t\t\t\t\t\tFile tmpDir=new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary()\n-\t\t\t\t\t\t\t\t+File.separator+UUIDGenerator.generateUuid());\n-\t\t\t\t\t\tFile tmp=new File(tmpDir, toContentlet.getBinary(FileAssetAPI.BINARY_FIELD).getName());\n+\t\t\t\t\t\tfinal File tmpDir = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary()\n+\t\t\t\t\t\t\t\t+ File.separator+UUIDGenerator.generateUuid());\n+\t\t\t\t\t\tfinal File tmp = new File(tmpDir, toContentlet.getBinary(FileAssetAPI.BINARY_FIELD).getName());\n \t\t\t\t\t\tFileUtil.copyFile(origin.getBinary(FileAssetAPI.BINARY_FIELD), tmp);\n \n-\t\t\t\t\t\tnewversion.setBinary(FileAssetAPI.BINARY_FIELD, tmp);\n-\t\t\t\t\t\tnewversion.setLanguageId(defaultLang);\n-\t\t\t\t\t\tnewversion = conAPI.checkin(newversion, user, false);\n+\t\t\t\t\t\tnewVersion.setBinary(FileAssetAPI.BINARY_FIELD, tmp);\n+\t\t\t\t\t\tnewVersion.setLanguageId(defaultLang);\n+\t\t\t\t\t\tnewVersion = conAPI.checkin(newVersion, user, false);\n \t\t\t\t\t\tif(autoPublish) {\n-\t\t\t\t\t\t\tconAPI.publish(newversion, user, false);\n+\t\t\t\t\t\t\tconAPI.publish(newVersion, user, false);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif(sameSourceAndTarget){", "originalCommit": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxMTg3MA==", "url": "https://github.com/dotCMS/core/pull/17802#discussion_r365311870", "bodyText": "we have contants on StringUtils for it", "author": "jdotcms", "createdAt": "2020-01-10T16:14:01Z", "path": "dotCMS/src/main/java/com/dotmarketing/webdav/DotWebdavHelper.java", "diffHunk": "@@ -1109,32 +1139,44 @@ public void move(String fromPath, String toPath, User user,boolean autoPublish)t\n \t\t\t\t\tLogger.error(DotWebdavHelper.class,e1.getMessage(),e1);\n \t\t\t\t\tthrow new IOException(e1.getMessage());\n \t\t\t\t}\n-\t\t\t\tif (getFolderName(fromPathStripped).equals(getFolderName(toPath))) {\n-\t\t\t\t\tLogger.debug(this, \"Calling Folderfactory to rename \" + fromPathStripped + \" to \" + toPath);\n-\t\t\t\t\ttry{\n-\t\t\t\t\t\t// Folder must end with \"/\", otherwise we get the parent folder\n-\t\t\t\t\t\tString folderToPath = getPath(toPath);\n-\t\t\t\t\t\tif(!folderToPath.endsWith(\"/\")) { folderToPath = folderToPath + \"/\"; }\n+\t\t\t\tfinal boolean sourceAndDestinationAreTheSame = isSameResourcePath(fromPathStripped, toPath, user);\n+\t\t\t\tif (getFolderName(fromPathStripped).equals(getFolderName(toPath))) { //This line verifies the parent folder is the same.\n+\t\t\t\t\tLogger.debug(this, \"Calling FolderFactory to rename \" + fromPathStripped + \" to \" + toPath);\n \n-\t\t\t\t\t\tFolder folder = folderAPI.findFolderByPath(folderToPath, host, user, false);\n-\t\t\t\t\t\tremoveObject(toPath, user);\n-\t\t\t\t\t\tfc.removeFolder(folder, idapi.find(folder));\n-\t\t\t\t\t}catch (Exception e) {\n-\t\t\t\t\t\tLogger.debug(this, \"Unable to delete toPath \" + toPath);\n+\t\t\t\t\t//need to verify the source and destination are not the same because we could be renaming the folder to be the same but with different casing.\n+\t\t\t\t\tif (!sourceAndDestinationAreTheSame) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Folder must end with \"/\", otherwise we get the parent folder\n+\t\t\t\t\t\t\tString folderToPath = getPath(toPath);\n+\t\t\t\t\t\t\tif (!folderToPath.endsWith(\"/\")) {", "originalCommit": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxMzI4Nw==", "url": "https://github.com/dotCMS/core/pull/17802#discussion_r365313287", "bodyText": "StringUtils", "author": "jdotcms", "createdAt": "2020-01-10T16:16:51Z", "path": "dotCMS/src/main/java/com/dotmarketing/webdav/DotWebdavHelper.java", "diffHunk": "@@ -1277,7 +1319,125 @@ public void removeObject(String uri, User user) throws IOException, DotDataExcep\n \n \t\t}\n \n+\t}\n+\n+\t/**\n+\t * This will validate that the operation triggered is a Method `MOVE` call\n+\t * And extracts the source and target to compare if the source and destination\n+\t * @param resourceValidationName\n+\t * @return\n+\t */\n+\tboolean isSameTargetAndDestinationResourceOnMove(final String resourceValidationName) {\n+\t\tfinal Request request = HttpManager.request();\n+\t\tif (null != request) {\n+\t\t\tfinal Request.Method method = request.getMethod();\n+\t\t\tif (Method.MOVE.equals(method)) {\n+\t\t\t\tif (UtilMethods.isSet(request.getAbsoluteUrl()) && UtilMethods\n+\t\t\t\t\t\t.isSet(request.getDestinationHeader())) {\n+\t\t\t\t\tfinal boolean sameResource = isSameResourceURL(request.getAbsoluteUrl(),request.getDestinationHeader(), resourceValidationName);\n+\t\t\t\t\tif (sameResource) {\n+\t\t\t\t\t\tLogger.warn(DotWebdavHelper.class,\n+\t\t\t\t\t\t\t\t() -> \" Attempt to perform a `MOVE` operation over the same source and target resource.\");\n+\t\t\t\t\t}\n+\t\t\t\t\treturn sameResource;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t *\n+\t * @param sourcePath\n+\t * @param targetPath\n+\t * @return\n+\t */\n+\tboolean isSameResourcePath(final String sourcePath, final String targetPath, final User user) {\n+\t\ttry {\n+\t\t\tfinal Folder sourceFolder = getFolder(sourcePath, user);\n+\t\t\tfinal Folder targetFolder = getFolder(targetPath, user);\n+\t\t\tif (null != sourceFolder && UtilMethods.isSet(sourceFolder.getIdentifier())\n+\t\t\t\t\t&& null != targetFolder && UtilMethods.isSet(targetFolder.getIdentifier())) {\n+\t\t\t\treturn sourceFolder.getIdentifier().equals(targetFolder.getIdentifier());\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\tLogger.error(DotWebdavHelper.class,\n+\t\t\t\t\tString.format(\"Error trying to determine if these 2 uris (`%s`,`%s`) are the same folder.\", sourcePath, targetPath),\n+\t\t\t\t\te);\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate Folder getFolder(final String uri, final User user)\n+\t\t\tthrows DotSecurityException, DotDataException {\n+\t   final String hostName = getHostName(uri);\n+\t   final String path = getPath(uri);\n+\t   final Host host = hostAPI.findByName(hostName, user, false);\n+\t   return folderAPI.findFolderByPath(path, host, user, false);\n+\t}\n+\n+\t/**\n+ \t * This takes care of situations like case sensitivity and and backslash at the end etc.\n+\t * Example  http:/demo.dotcms.com/blah/products vs http:/demo.dotcms.com/blah/Products/\n+\t * @param sourceUrl basically url#1\n+\t * @param targetUrl basically url#2\n+\t * @param resourceName this ia an extra param to perform an additional validation on the resourceName\n+\t * @return same resource returns true otherwise false.\n+\t */\n+    @VisibleForTesting\n+\tboolean isSameResourceURL(String sourceUrl, String targetUrl, final String resourceName) {\n+\n+\t\ttry {\n+\t\t\tfinal Resource source = getResourceFromURL(sourceUrl);\n+\t\t\tfinal Resource target = getResourceFromURL(targetUrl);\n+\n+\t\t\tif (source != null && target != null) {\n+\t\t\t\t\treturn source.getUniqueId().equals(target.getUniqueId()) && UtilMethods\n+\t\t\t\t\t\t\t.isSet(source.getName()) && source.getName()\n+\t\t\t\t\t\t\t.equalsIgnoreCase(resourceName);\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tLogger.error(DotWebdavHelper.class,\n+\t\t\t\t\tString.format(\"Error trying to determine if these 2 urls (`%s`,`%s`) are the same resource.\", sourceUrl, targetUrl),\n+\t\t\t  e);\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+    @VisibleForTesting\n+\tResource getResourceFromURL(String url) {\n+\t\tString host = null;\n+\t\tString path = null;\n+\t\tfinal URLUtils.ParsedURL sourceParts = URLUtils.parseURL(url);\n+\t\tif (null != sourceParts) {\n+\t\t\tif (UtilMethods.isSet(sourceParts.getHost())) {\n+\t\t\t\thost = sourceParts.getHost();\n+\t\t\t}\n+\n+\t\t\tif (UtilMethods.isSet(sourceParts.getPath())) {\n+\t\t\t\tpath = sourceParts.getPath();\n+\t\t\t}\n+\n+\t\t\tif (UtilMethods.isSet(sourceParts.getResource())) {\n+\t\t\t\tif (UtilMethods.isSet(path)) {\n+\t\t\t\t\tif (!path.endsWith(\"/\")) {", "originalCommit": "2c42e9ad3e1350c72db597e98dddb1705b2e696b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}