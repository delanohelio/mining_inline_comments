{"pr_number": 18079, "pr_title": "Issue 18076 front end login", "pr_createdAt": "2020-03-02T20:50:10Z", "pr_url": "https://github.com/dotCMS/core/pull/18079", "timeline": [{"oid": "0bb7364a8bf12a26caf22b4175609c2c3d0bade6", "url": "https://github.com/dotCMS/core/commit/0bb7364a8bf12a26caf22b4175609c2c3d0bade6", "message": "#18076 front end login working", "committedDate": "2020-03-02T20:21:18Z", "type": "commit"}, {"oid": "5ec249a38ac1ce87f6645e508974505c16ff4c72", "url": "https://github.com/dotCMS/core/commit/5ec249a38ac1ce87f6645e508974505c16ff4c72", "message": "#18076 adding tests", "committedDate": "2020-03-02T20:45:55Z", "type": "commit"}, {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143", "url": "https://github.com/dotCMS/core/commit/852fa17c156aa391f758de8ca00f4fb79d457143", "message": "#18076 just in case closes", "committedDate": "2020-03-02T20:49:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzg2NA==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647864", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.mock.request.BaseRequest'", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:15Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzg3Ng==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647876", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:16Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzg4Ng==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647886", "bodyText": "Issue found: Avoid unused private fields such as 'testUser'.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:17Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzg5OA==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647898", "bodyText": "Issue found: Avoid unnecessary comparisons in boolean expressions", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:18Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NzkwNQ==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647905", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:20Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NzkxNg==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647916", "bodyText": "Issue found: Local variable 'user' could be declared final", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:21Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "diffHunk": "@@ -16,55 +13,65 @@\n  */\r\n public class UserWebAPIImpl extends UserAPIImpl implements UserWebAPI {\r\n \r\n-\tpublic UserWebAPIImpl() {\r\n-\t\t\r\n-\t}\r\n+    public UserWebAPIImpl() {\r\n+\r\n+    }\r\n+\r\n \r\n-\t@CloseDBIfOpened\r\n+\r\n+    @CloseDBIfOpened\r\n     @Override\r\n     public User getUser(HttpServletRequest request) {\r\n-      try{\r\n-        User user = this.getLoggedInUser(request);\r\n-        if(user==null){\r\n-          user =  APILocator.getUserAPI().getAnonymousUser();\r\n+\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        if (user == null) {\r\n+            user = APILocator.getUserAPI().getAnonymousUserNoThrow();\r\n         }\r\n         return user;\r\n-      }catch(Exception e){\r\n-        throw new DotStateException(e);\r\n-      }\r\n+\r\n+    }\r\n+\r\n+\r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public User getLoggedInUser(HttpServletRequest request) {\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r\n+                        ? user\r\n+                        : null;\r\n+    }\r\n+\r\n+    @Deprecated\r\n+    @Override\r\n+    public User getLoggedInUser(final HttpSession session) {\r\n+        User user = PortalUtil.getUser(session);\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r\n+                        ? user\r\n+                        : null;\r\n+    }\r\n+    \r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public boolean isLoggedToBackend(HttpServletRequest request) {\r\n+        return PortalUtil.getUser(request) != null && PortalUtil.getUser(request).isBackendUser();\r\n     }\r\n     \r\n-\t@Override\r\n-\tpublic User getLoggedInUser(HttpServletRequest request) {\r\n-\t\tUser user = PortalUtil.getUser(request);\r\n-\t\treturn (user == null)?\r\n-\t\t\t\t//Assuming is a front-end access\r\n-\t\t\t\tthis.getLoggedInUser(request.getSession(false)):user;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic User getLoggedInUser(final HttpSession session) {\r\n-\r\n-\t\treturn  PortalUtil.getUser(session);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic boolean isLoggedToBackend(HttpServletRequest request) {\r\n-\t\treturn PortalUtil.getUser(request) != null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic User getLoggedInFrontendUser(HttpServletRequest request)  {\r\n-\t\tHttpSession session = request.getSession(false);\r\n-\t\tif(session != null)\r\n-\t\t\treturn (User) session.getAttribute(WebKeys.CMS_USER);\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic boolean isLoggedToFrontend(HttpServletRequest req)  {\r\n-\t\treturn !isLoggedToBackend(req);\r\n-\t}\r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public User getLoggedInFrontendUser(HttpServletRequest request) {\r\n+        User user = getLoggedInUser(request);\r\n+\r\n+        return user != null && PortalUtil.getUser(request).isFrontendUser() ? user : null;\r\n+    }\r\n+    \r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public boolean isLoggedToFrontend(HttpServletRequest request) {\r\n+        User user = getLoggedInUser(request);\r", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NzkyNA==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647924", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:22Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static UserAPI userAPI;\n+    private static User frontEndUser, backEndUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userAPI = APILocator.getUserAPI();\n+\n+    }\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    /**\n+     * Front end users can never have any page mode other than LIVE, even when you try to set it\n+     * explictily\n+     */\n+\n+    @Test\n+    public void test_front_end_user_is_only_LIVE() {", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NzkzOA==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647938", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:23Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToFrontend() {\n+\n+        assert (userWebAPI.isLoggedToFrontend(backEndRequest()) == false);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk0Ng==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647946", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:24Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk1NA==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647954", "bodyText": "Issue found: Avoid unused private fields such as 'systemUser'.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:25Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk2Nw==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647967", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:26Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk3Nw==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647977", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:27Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToFrontend() {\n+\n+        assert (userWebAPI.isLoggedToFrontend(backEndRequest()) == false);\n+        assert (userWebAPI.isLoggedToFrontend(frontEndRequest()) == true);\n+\n+        assert (userWebAPI.isLoggedToFrontend(anonymousRequest()) == false);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk4OQ==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647989", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:28Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static UserAPI userAPI;\n+    private static User frontEndUser, backEndUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userAPI = APILocator.getUserAPI();\n+\n+    }\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    /**\n+     * Front end users can never have any page mode other than LIVE, even when you try to set it\n+     * explictily\n+     */\n+\n+    @Test\n+    public void test_front_end_user_is_only_LIVE() {\n+\n+        HttpServletRequest request = frontEndRequest();\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+        PageMode.setPageMode(request, PageMode.EDIT_MODE);\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+    }\n+\n+\n+\n+    /**\n+     * Back end users can have their page mode set to EDIT MODE\n+     */\n+    @Test\n+    public void test_back_end_user_can_be_set_to_EDIT() {\n+\n+        HttpServletRequest request = backEndRequest();\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+        PageMode.setPageMode(request, PageMode.EDIT_MODE);\n+\n+        assert (PageMode.get(request) == PageMode.EDIT_MODE);\n+\n+    }\n+\n+    /**\n+     * getting and setting a PAGE MODE does not create a session\n+     */\n+    @Test\n+    public void test_page_mode_does_not_create_session() {", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAwMA==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648000", "bodyText": "Issue found: Local variable 'user' could be declared final", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:30Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "diffHunk": "@@ -16,55 +13,65 @@\n  */\r\n public class UserWebAPIImpl extends UserAPIImpl implements UserWebAPI {\r\n \r\n-\tpublic UserWebAPIImpl() {\r\n-\t\t\r\n-\t}\r\n+    public UserWebAPIImpl() {\r\n+\r\n+    }\r\n+\r\n \r\n-\t@CloseDBIfOpened\r\n+\r\n+    @CloseDBIfOpened\r\n     @Override\r\n     public User getUser(HttpServletRequest request) {\r\n-      try{\r\n-        User user = this.getLoggedInUser(request);\r\n-        if(user==null){\r\n-          user =  APILocator.getUserAPI().getAnonymousUser();\r\n+\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        if (user == null) {\r\n+            user = APILocator.getUserAPI().getAnonymousUserNoThrow();\r\n         }\r\n         return user;\r\n-      }catch(Exception e){\r\n-        throw new DotStateException(e);\r\n-      }\r\n+\r\n+    }\r\n+\r\n+\r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public User getLoggedInUser(HttpServletRequest request) {\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r\n+                        ? user\r\n+                        : null;\r\n+    }\r\n+\r\n+    @Deprecated\r\n+    @Override\r\n+    public User getLoggedInUser(final HttpSession session) {\r\n+        User user = PortalUtil.getUser(session);\r", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAwNw==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648007", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:31Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAxMg==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648012", "bodyText": "Issue found: Avoid unused private fields such as 'userAPI'.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:32Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static UserAPI userAPI;", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAyMQ==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648021", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:33Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAzMQ==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648031", "bodyText": "Issue found: Local variable 'request' could be declared final", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:34Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static UserAPI userAPI;\n+    private static User frontEndUser, backEndUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userAPI = APILocator.getUserAPI();\n+\n+    }\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    /**\n+     * Front end users can never have any page mode other than LIVE, even when you try to set it\n+     * explictily\n+     */\n+\n+    @Test\n+    public void test_front_end_user_is_only_LIVE() {\n+\n+        HttpServletRequest request = frontEndRequest();\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+        PageMode.setPageMode(request, PageMode.EDIT_MODE);\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+    }\n+\n+\n+\n+    /**\n+     * Back end users can have their page mode set to EDIT MODE\n+     */\n+    @Test\n+    public void test_back_end_user_can_be_set_to_EDIT() {\n+\n+        HttpServletRequest request = backEndRequest();\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+        PageMode.setPageMode(request, PageMode.EDIT_MODE);\n+\n+        assert (PageMode.get(request) == PageMode.EDIT_MODE);\n+\n+    }\n+\n+    /**\n+     * getting and setting a PAGE MODE does not create a session\n+     */\n+    @Test\n+    public void test_page_mode_does_not_create_session() {\n+\n+        HttpServletRequest request = backEndRequest();", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAzOA==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648038", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:35Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA0Mw==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648043", "bodyText": "Issue found: Avoid unnecessary comparisons in boolean expressions", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:36Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToFrontend() {\n+\n+        assert (userWebAPI.isLoggedToFrontend(backEndRequest()) == false);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA0Nw==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648047", "bodyText": "Issue found: Avoid unnecessary comparisons in boolean expressions", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:37Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA1OQ==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648059", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:38Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA3MQ==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648071", "bodyText": "Issue found: Avoid unnecessary comparisons in boolean expressions", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:40Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToFrontend() {\n+\n+        assert (userWebAPI.isLoggedToFrontend(backEndRequest()) == false);\n+        assert (userWebAPI.isLoggedToFrontend(frontEndRequest()) == true);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA4OA==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648088", "bodyText": "Issue found: Local variable 'sessionPageMode' could be declared final", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:41Z", "path": "dotCMS/src/main/java/com/dotmarketing/util/PageMode.java", "diffHunk": "@@ -166,9 +177,15 @@ private static PageMode getCurrentPageMode(final HttpSession ses) {\n     }\n \n     private static boolean isNavigateEditMode(final HttpSession ses) {\n-        PageMode sessionPageMode = (PageMode) ses.getAttribute(WebKeys.PAGE_MODE_SESSION);\n+        PageMode sessionPageMode = ses==null ? DEFAULT_PAGE_MODE : (PageMode) ses.getAttribute(WebKeys.PAGE_MODE_SESSION);", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA5NQ==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648095", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-03-02T21:02:42Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "diffHunk": "@@ -16,55 +13,65 @@\n  */\r\n public class UserWebAPIImpl extends UserAPIImpl implements UserWebAPI {\r\n \r\n-\tpublic UserWebAPIImpl() {\r\n-\t\t\r\n-\t}\r\n+    public UserWebAPIImpl() {\r\n+\r\n+    }\r\n+\r\n \r\n-\t@CloseDBIfOpened\r\n+\r\n+    @CloseDBIfOpened\r\n     @Override\r\n     public User getUser(HttpServletRequest request) {\r\n-      try{\r\n-        User user = this.getLoggedInUser(request);\r\n-        if(user==null){\r\n-          user =  APILocator.getUserAPI().getAnonymousUser();\r\n+\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        if (user == null) {\r\n+            user = APILocator.getUserAPI().getAnonymousUserNoThrow();\r\n         }\r\n         return user;\r\n-      }catch(Exception e){\r\n-        throw new DotStateException(e);\r\n-      }\r\n+\r\n+    }\r\n+\r\n+\r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public User getLoggedInUser(HttpServletRequest request) {\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r\n+                        ? user\r\n+                        : null;\r\n+    }\r\n+\r\n+    @Deprecated\r\n+    @Override\r\n+    public User getLoggedInUser(final HttpSession session) {\r\n+        User user = PortalUtil.getUser(session);\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMTk2Mw==", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r387211963", "bodyText": "Looks like a wrong javadoc here", "author": "dsilvam", "createdAt": "2020-03-03T18:31:13Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * ", "originalCommit": "852fa17c156aa391f758de8ca00f4fb79d457143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}