{"pr_number": 18383, "pr_title": "Issue 18348 d", "pr_createdAt": "2020-04-28T20:23:51Z", "pr_url": "https://github.com/dotCMS/core/pull/18383", "timeline": [{"oid": "22a2cde23e761f75b239c5868db9729572db25e4", "url": "https://github.com/dotCMS/core/commit/22a2cde23e761f75b239c5868db9729572db25e4", "message": "#18348 Fixing icons on dotassets", "committedDate": "2020-04-28T16:57:15Z", "type": "commit"}, {"oid": "3f47407681545d39e0310692643b7b313b68d354", "url": "https://github.com/dotCMS/core/commit/3f47407681545d39e0310692643b7b313b68d354", "message": "#18348 adding the mime type for dotAsset", "committedDate": "2020-04-28T20:22:22Z", "type": "commit"}, {"oid": "ff23ac7a53b0f8d5a84caf965f346e5ad05a49d7", "url": "https://github.com/dotCMS/core/commit/ff23ac7a53b0f8d5a84caf965f346e5ad05a49d7", "message": "#18348 fixing issues with the dotAsset on the content editor", "committedDate": "2020-04-29T05:56:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3MDkzMw==", "url": "https://github.com/dotCMS/core/pull/18383#discussion_r417370933", "bodyText": "any test?", "author": "freddyucv", "createdAt": "2020-04-29T14:42:41Z", "path": "dotCMS/src/main/java/com/dotmarketing/util/UtilHTML.java", "diffHunk": "@@ -442,9 +442,10 @@ public static String getIconClass(final Contentlet contentlet) throws DotDataExc\n                 return IconType.VANITY_URL.iconName();\n             case DOTASSET:\n \n-                return \"uknIcon \" + UtilMethods.getFileExtension(\n-                \t\tTry.of(()-> contentlet.getBinary(\"asset\").getName())\n-\t\t\t\t\t\t\t\t.getOrElse(\"ukn\") )+ \"Icon\";\n+            \tfinal String dotUri  = Try.of(()-> contentlet.getBinary(\"asset\").getName()).getOrElse(\"ukn\");\n+            \tfinal String dotIcon = UtilMethods.getFileExtension(dotUri);\n+\n+\t\t\t\treturn dotUri.equals(dotIcon)? \"uknIcon\": dotIcon + \"Icon\";\n             default:\n                 return IconType.UNKNOWN.iconName();\n         }", "originalCommit": "ff23ac7a53b0f8d5a84caf965f346e5ad05a49d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NTAxNw==", "url": "https://github.com/dotCMS/core/pull/18383#discussion_r417495017", "bodyText": "Don't we have a transformer you can use for this @jdotcms ?", "author": "dsilvam", "createdAt": "2020-04-29T17:41:07Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/browser/ajax/BrowserAjax.java", "diffHunk": "@@ -648,6 +653,23 @@ else if(cont.getStructure().getStructureType()==Structure.STRUCTURE_TYPE_HTMLPAG\n \t\t\t    pageMap.put(\"mimeType\", \"application/dotpage\");\n \t            pageMap.put(\"pageURI\", ident.getURI());\n \t            return pageMap;\n+\t\t\t} else if(cont.getStructure().getStructureType()== BaseContentType.DOTASSET.getType()) {\n+\n+\t\t\t\tfinal java.io.File file = Try.of(()->cont.getBinary(DotAssetContentType.ASSET_FIELD_VAR)).getOrNull();\n+\t\t\t\tif (null != file) {\n+\t\t\t\t\tfinal String fileName = file.getName();\n+\t\t\t\t\tfinal String mimeType = servletContext.getMimeType(fileName.toLowerCase());\n+\n+\t\t\t\t\tfinal Map<String, Object> fileMap = cont.getMap();\n+\t\t\t\t\tfileMap.put(\"mimeType\", mimeType);\n+\t\t\t\t\tfileMap.put(\"path\",          \"/dA/\" + cont.getIdentifier() + StringPool.SLASH);\n+\t\t\t\t\tfileMap.put(\"type\", \"dotasset\");\n+\t\t\t\t\tfileMap.put(\"type\", \"dotasset\");\n+\t\t\t\t\tfileMap.put(\"name\",     fileName);\n+\t\t\t\t\tfileMap.put(\"fileName\", fileName);\n+\n+\t\t\t\t\treturn fileMap;", "originalCommit": "ff23ac7a53b0f8d5a84caf965f346e5ad05a49d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2Mjk5MA==", "url": "https://github.com/dotCMS/core/pull/18383#discussion_r417562990", "bodyText": "if not exists any, Should we create a new transformer?", "author": "freddyucv", "createdAt": "2020-04-29T19:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NTAxNw=="}], "type": "inlineReview"}, {"oid": "21fcc30614b499e70bfd0a1ceca59d174b3ff606", "url": "https://github.com/dotCMS/core/commit/21fcc30614b499e70bfd0a1ceca59d174b3ff606", "message": "#18348 unit test", "committedDate": "2020-04-29T19:22:32Z", "type": "commit"}, {"oid": "0085f0fee0f365b6efc6e1d776a904262537b2c0", "url": "https://github.com/dotCMS/core/commit/0085f0fee0f365b6efc6e1d776a904262537b2c0", "message": "#18348 unit test doc", "committedDate": "2020-04-29T19:28:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2MTYxNQ==", "url": "https://github.com/dotCMS/core/pull/18383#discussion_r417561615", "bodyText": "Issue found: Local variable 'txtFile' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-29T19:34:37Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/UtilHTMLTest.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.dotmarketing.util;\n+\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit test for {@link UtilHTML}\n+ */\n+public class UtilHTMLTest {\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given an unknown base type\n+     * ExpectedResult: Unknown icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_unknown () throws DotDataException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.ANY;\n+        when(contentlet.getContentType()).thenReturn(type);\n+        when(type.baseType()).thenReturn(any);\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"uknIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a contentlet base type\n+     * ExpectedResult: contentIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_content () throws DotDataException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.CONTENT;\n+        when(contentlet.getContentType()).thenReturn(type);\n+        when(type.baseType()).thenReturn(any);\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"contentIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a widget base type\n+     * ExpectedResult: gearIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_widget () throws DotDataException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.WIDGET;\n+        when(contentlet.getContentType()).thenReturn(type);\n+        when(type.baseType()).thenReturn(any);\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"gearIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a form base type\n+     * ExpectedResult: formIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_form () throws DotDataException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.FORM;\n+        when(contentlet.getContentType()).thenReturn(type);\n+        when(type.baseType()).thenReturn(any);\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"formIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a file  base type and txt file\n+     * ExpectedResult: txtIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_txt_file () throws DotDataException, IOException, DotSecurityException {\n+\n+        final Folder folder1 = new FolderDataGen().site(APILocator.systemHost()).nextPersisted();\n+        final Contentlet contentlet = FileAssetDataGen.createFileAsset(folder1, \"text1\", \".txt\");\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"txtIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a file  base type and vtl file\n+     * ExpectedResult: vtlIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_vtl_file () throws DotDataException, IOException, DotSecurityException {\n+\n+        final Folder folder1 = new FolderDataGen().site(APILocator.systemHost()).nextPersisted();\n+        final Contentlet contentlet = FileAssetDataGen.createFileAsset(folder1, \"text2\", \".vtl\");\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"vtlIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a page base type\n+     * ExpectedResult: pageIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_page () throws DotDataException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.HTMLPAGE;\n+        when(contentlet.getContentType()).thenReturn(type);\n+        when(type.baseType()).thenReturn(any);\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"pageIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a key value base type\n+     * ExpectedResult: keyValueIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_keyvalue () throws DotDataException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.KEY_VALUE;\n+        when(contentlet.getContentType()).thenReturn(type);\n+        when(type.baseType()).thenReturn(any);\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"keyValueIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a persona base type\n+     * ExpectedResult: personaIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_persona () throws DotDataException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.PERSONA;\n+        when(contentlet.getContentType()).thenReturn(type);\n+        when(type.baseType()).thenReturn(any);\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"personaIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a vanity url base type\n+     * ExpectedResult: vanityIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_vanity () throws DotDataException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.VANITY_URL;\n+        when(contentlet.getContentType()).thenReturn(type);\n+        when(type.baseType()).thenReturn(any);\n+\n+        final String iconClass = UtilHTML.getIconClass(contentlet);\n+        assertNotNull(iconClass);\n+        assertEquals(\"vanityIcon\", iconClass);\n+    }\n+\n+    /**\n+     * Method to test: getIconClass\n+     * Given Scenario: Given a dotasset base type and txt file\n+     * ExpectedResult: txtIcon icon should be returned\n+     */\n+    @Test\n+    public void test_getIconClass_dotasset_txt () throws DotDataException, IOException {\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final ContentType type      = mock(ContentType.class);\n+        final BaseContentType any   = BaseContentType.DOTASSET;\n+        File txtFile                = FileUtil.createTemporalFile(\"testtxt\", \".txt\");", "originalCommit": "0085f0fee0f365b6efc6e1d776a904262537b2c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}