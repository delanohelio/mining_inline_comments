{"pr_number": 17911, "pr_title": "#17885 upgrade ES version", "pr_createdAt": "2020-01-24T21:26:34Z", "pr_url": "https://github.com/dotCMS/core/pull/17911", "timeline": [{"oid": "ddc04c598161a2979d1e698da8db2200163c10b1", "url": "https://github.com/dotCMS/core/commit/ddc04c598161a2979d1e698da8db2200163c10b1", "message": "#17885 upgrade ES version", "committedDate": "2020-01-24T21:18:19Z", "type": "commit"}, {"oid": "9120473281b55c15980de7f73d5bfaf551048708", "url": "https://github.com/dotCMS/core/commit/9120473281b55c15980de7f73d5bfaf551048708", "message": "#17885 upgrade ES version", "committedDate": "2020-01-24T21:28:08Z", "type": "commit"}, {"oid": "db592a7dc4fe6b4b37559c4d6f69b99670bdc0a1", "url": "https://github.com/dotCMS/core/commit/db592a7dc4fe6b4b37559c4d6f69b99670bdc0a1", "message": "#17885 fix test", "committedDate": "2020-01-28T22:46:03Z", "type": "commit"}, {"oid": "361b4cb6c4c716e4d4eacfc6040034029a893bf4", "url": "https://github.com/dotCMS/core/commit/361b4cb6c4c716e4d4eacfc6040034029a893bf4", "message": "#17885 fix tests", "committedDate": "2020-01-29T16:27:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5NDg4NA==", "url": "https://github.com/dotCMS/core/pull/17911#discussion_r372494884", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-01-29T16:35:56Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletFactoryTest.java", "diffHunk": "@@ -63,33 +70,46 @@ public void findAllCurrent () throws DotDataException, DotSecurityException {\n     @Test\n     public void findAllCurrentOffsetLimit () throws DotDataException, DotSecurityException {\n \n-        //Getting all contentlets live/working contentlets\n-        List<Contentlet> contentlets = contentletFactory.findAllCurrent( 0, 5 );\n-\n-        //Validations\n-        assertTrue( contentlets != null && !contentlets.isEmpty() );\n-        assertEquals( contentlets.size(), 5 );\n-\n-        //Validate the integrity of the array\n-        Contentlet foundContentlet = null;\n-        for ( Contentlet contentlet : contentlets ) {\n-\n-            //TODO: We need to verify for null because the findAllCurrent CAN return null objects, this could happen because the index can return inodes that are not into the db....\n-            if ( contentlet != null ) {\n-                foundContentlet = contentlet;\n-                break;\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        final ContentletDataGen contentletDataGen = new ContentletDataGen(type.id());\n+        final List<Contentlet> newContentlets = new ArrayList<>();\n+\n+        try {\n+\n+            // Let's create 10 contentlets, 5 live 5 working\n+            IntStream.range(0, 10).forEach(\n+                    (i) -> {\n+                        final Contentlet newContent = contentletDataGen.nextPersisted();\n+                        if (i % 2 == 0) {\n+                            Sneaky.sneaked(() -> APILocator.getContentletAPI()\n+                                    .publish(newContent, user, false));\n+                        }\n+                        newContentlets.add(newContent);\n+                    }\n+            );\n+\n+            //Getting all contentlets live/working contentlets\n+            List<Contentlet> contentlets = contentletFactory.findAllCurrent(0, 10);\n+\n+            // filter out null records\n+            contentlets = contentlets.stream().filter(Objects::nonNull).collect(Collectors.toList());\n+            //Validations\n+            assertTrue(contentlets != null && !contentlets.isEmpty());\n+            assertTrue(contentlets.size() >= 10);\n+\n+            //Search for one of the objects we found\n+            String inode = contentlets.get(0).getInode();\n+            Contentlet contentlet = contentletFactory.find(inode);\n+\n+            //Validations\n+            assertTrue(\n+                    contentlet != null && (contentlet.getInode() != null && !contentlet.getInode()", "originalCommit": "361b4cb6c4c716e4d4eacfc6040034029a893bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5NDg5Mw==", "url": "https://github.com/dotCMS/core/pull/17911#discussion_r372494893", "bodyText": "Issue found: Local variable 'inode' could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-29T16:35:57Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletFactoryTest.java", "diffHunk": "@@ -63,33 +70,46 @@ public void findAllCurrent () throws DotDataException, DotSecurityException {\n     @Test\n     public void findAllCurrentOffsetLimit () throws DotDataException, DotSecurityException {\n \n-        //Getting all contentlets live/working contentlets\n-        List<Contentlet> contentlets = contentletFactory.findAllCurrent( 0, 5 );\n-\n-        //Validations\n-        assertTrue( contentlets != null && !contentlets.isEmpty() );\n-        assertEquals( contentlets.size(), 5 );\n-\n-        //Validate the integrity of the array\n-        Contentlet foundContentlet = null;\n-        for ( Contentlet contentlet : contentlets ) {\n-\n-            //TODO: We need to verify for null because the findAllCurrent CAN return null objects, this could happen because the index can return inodes that are not into the db....\n-            if ( contentlet != null ) {\n-                foundContentlet = contentlet;\n-                break;\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        final ContentletDataGen contentletDataGen = new ContentletDataGen(type.id());\n+        final List<Contentlet> newContentlets = new ArrayList<>();\n+\n+        try {\n+\n+            // Let's create 10 contentlets, 5 live 5 working\n+            IntStream.range(0, 10).forEach(\n+                    (i) -> {\n+                        final Contentlet newContent = contentletDataGen.nextPersisted();\n+                        if (i % 2 == 0) {\n+                            Sneaky.sneaked(() -> APILocator.getContentletAPI()\n+                                    .publish(newContent, user, false));\n+                        }\n+                        newContentlets.add(newContent);\n+                    }\n+            );\n+\n+            //Getting all contentlets live/working contentlets\n+            List<Contentlet> contentlets = contentletFactory.findAllCurrent(0, 10);\n+\n+            // filter out null records\n+            contentlets = contentlets.stream().filter(Objects::nonNull).collect(Collectors.toList());\n+            //Validations\n+            assertTrue(contentlets != null && !contentlets.isEmpty());\n+            assertTrue(contentlets.size() >= 10);\n+\n+            //Search for one of the objects we found\n+            String inode = contentlets.get(0).getInode();", "originalCommit": "361b4cb6c4c716e4d4eacfc6040034029a893bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}