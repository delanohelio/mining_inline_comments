{"pr_number": 18688, "pr_title": "Issue 17842 show notification if es is read only missing cases", "pr_createdAt": "2020-06-17T17:34:29Z", "pr_url": "https://github.com/dotCMS/core/pull/18688", "timeline": [{"oid": "c801c01b2365c029d2506189712e8ba674ba959b", "url": "https://github.com/dotCMS/core/commit/c801c01b2365c029d2506189712e8ba674ba959b", "message": "#17842 Case when the disk space was full and try to put the read only to false", "committedDate": "2020-06-16T15:00:29Z", "type": "commit"}, {"oid": "42a7d20050a868e56eaa4508b347992003b8253e", "url": "https://github.com/dotCMS/core/commit/42a7d20050a868e56eaa4508b347992003b8253e", "message": "#17842 Not ignoring test", "committedDate": "2020-06-16T15:07:48Z", "type": "commit"}, {"oid": "a68fa6828f955c560f379f0eb633f2d0f3c0135e", "url": "https://github.com/dotCMS/core/commit/a68fa6828f955c560f379f0eb633f2d0f3c0135e", "message": "#17842 Fixing", "committedDate": "2020-06-16T18:12:17Z", "type": "commit"}, {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8", "url": "https://github.com/dotCMS/core/commit/f58a8b56937d47b512e00711721b72ffd004bcb8", "message": "#16976 refactoring", "committedDate": "2020-06-17T14:24:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNzUxOQ==", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441717519", "bodyText": "incorrect method to test", "author": "dsilvam", "createdAt": "2020-06-17T17:41:22Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ElasticsearchUtilTest.java", "diffHunk": "@@ -257,6 +259,51 @@ public void shouldReturnFalseWhenTheClusterIsInReadOnlyMode(final String propert\n         }\n     }\n \n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}", "originalCommit": "f58a8b56937d47b512e00711721b72ffd004bcb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNzY1NA==", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441717654", "bodyText": "incorrect method to test", "author": "dsilvam", "createdAt": "2020-06-17T17:41:36Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ElasticsearchUtilTest.java", "diffHunk": "@@ -257,6 +259,51 @@ public void shouldReturnFalseWhenTheClusterIsInReadOnlyMode(final String propert\n         }\n     }\n \n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in minutes\n+     * Should: return the right valus in millis\n+     */\n+    @Test\n+    public void whenIntervalUpdateIsSetInMinutes(){\n+        try {\n+            setClusterUpdateInterval(\"2m\");\n+            final long millisExpected = Duration.ofMinutes(2).toMillis();\n+            assertEquals(millisExpected, ElasticsearchUtil.getClusterUpdateInterval());\n+        }finally {\n+            setClusterUpdateInterval(\"30s\");\n+        }\n+    }\n+\n+\n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}", "originalCommit": "f58a8b56937d47b512e00711721b72ffd004bcb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxODM0Mg==", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441718342", "bodyText": "here should be \"default value\" instead of \"seconds\"", "author": "dsilvam", "createdAt": "2020-06-17T17:42:47Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ElasticsearchUtilTest.java", "diffHunk": "@@ -257,6 +259,51 @@ public void shouldReturnFalseWhenTheClusterIsInReadOnlyMode(final String propert\n         }\n     }\n \n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in minutes\n+     * Should: return the right valus in millis\n+     */\n+    @Test\n+    public void whenIntervalUpdateIsSetInMinutes(){\n+        try {\n+            setClusterUpdateInterval(\"2m\");\n+            final long millisExpected = Duration.ofMinutes(2).toMillis();\n+            assertEquals(millisExpected, ElasticsearchUtil.getClusterUpdateInterval());\n+        }finally {\n+            setClusterUpdateInterval(\"30s\");\n+        }\n+    }\n+\n+\n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in seconds", "originalCommit": "f58a8b56937d47b512e00711721b72ffd004bcb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxODQ5OQ==", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441718499", "bodyText": "here should be \"seconds\" instead of \"default value\"", "author": "dsilvam", "createdAt": "2020-06-17T17:43:03Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ElasticsearchUtilTest.java", "diffHunk": "@@ -257,6 +259,51 @@ public void shouldReturnFalseWhenTheClusterIsInReadOnlyMode(final String propert\n         }\n     }\n \n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in minutes\n+     * Should: return the right valus in millis\n+     */\n+    @Test\n+    public void whenIntervalUpdateIsSetInMinutes(){\n+        try {\n+            setClusterUpdateInterval(\"2m\");\n+            final long millisExpected = Duration.ofMinutes(2).toMillis();\n+            assertEquals(millisExpected, ElasticsearchUtil.getClusterUpdateInterval());\n+        }finally {\n+            setClusterUpdateInterval(\"30s\");\n+        }\n+    }\n+\n+\n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in seconds\n+     * Should: return the right valus in millis\n+     */\n+    @Test\n+    public void whenIntervalUpdateIsSetInDefaultValue(){\n+        setClusterUpdateInterval(null);\n+        final long millisExpected = Duration.ofSeconds(30).toMillis();\n+        assertEquals(millisExpected, ElasticsearchUtil.getClusterUpdateInterval());\n+    }\n+\n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in the default value", "originalCommit": "f58a8b56937d47b512e00711721b72ffd004bcb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e92ff7919efd810498cda63d53590ba758c36b29", "url": "https://github.com/dotCMS/core/commit/e92ff7919efd810498cda63d53590ba758c36b29", "message": "#17842  doc and refactoring", "committedDate": "2020-06-17T17:58:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTkxNg==", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441741916", "bodyText": "remove this comment", "author": "nollymar", "createdAt": "2020-06-17T18:23:23Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESReadOnlyMonitorTest.java", "diffHunk": "@@ -209,8 +213,49 @@ public void shouldSendLargeMessageTwice(final String propertyName) throws DotDat\n \n             setReadOnly(indiciesInfo.getWorking(), propertyName, true);\n \n+            Thread.sleep(ESReadOnlyMonitor.getInstance().timeToWaitAfterWriteModeSet + TimeUnit.MINUTES.toMillis(1));\n+            //checkLargeMessageSent(user, 1);", "originalCommit": "e92ff7919efd810498cda63d53590ba758c36b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "99e156a55a9b41061bef5ace3f2e7e13a7e3d052", "url": "https://github.com/dotCMS/core/commit/99e156a55a9b41061bef5ace3f2e7e13a7e3d052", "message": "#17842 Not sending request to early to ES server", "committedDate": "2020-06-17T20:01:42Z", "type": "commit"}, {"oid": "b9b0d1d1b7ae157fc3dd711e25163dd2052f5719", "url": "https://github.com/dotCMS/core/commit/b9b0d1d1b7ae157fc3dd711e25163dd2052f5719", "message": "#17842 Fixing test", "committedDate": "2020-06-17T22:39:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxMTI5NA==", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441911294", "bodyText": "Codacy found an issue: Use block level rather than method level synchronization", "author": "dev-dotcms", "createdAt": "2020-06-18T01:00:17Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESReadOnlyMonitor.java", "diffHunk": "@@ -79,118 +84,158 @@ public void start(final String message){\n      * @return false if a ESReadOnlyMonitor was started before\n      */\n     public boolean start(){\n+\n+        if (timeToWaitAfterWriteModeSet == TIME_TO_WAIT_AFTER_WRITE_MODE_SET_NOTY_VALUE) {\n+            loadTimeToWaitAfterWriteModeSet();\n+        }\n+\n+        final boolean clusterInReadOnlyMode = ElasticsearchUtil.isClusterInReadOnlyMode();\n+        final boolean eitherLiveOrWorkingIndicesReadOnly = ElasticsearchUtil.isEitherLiveOrWorkingIndicesReadOnly();\n+\n         if (started.compareAndSet(false, true)) {\n-            if (ElasticsearchUtil.isClusterInReadOnlyMode()) {\n-                ReindexThread.setCurrentIndexReadOnly(true);\n-                sendMessage(\"es.cluster.read.only.message\");\n+            if (clusterInReadOnlyMode) {\n+                this.readOnlyMessageKey = \"es.cluster.read.only.message\";\n+                sendReadOnlyMessage();\n                 startClusterMonitor();\n-            } else if (ElasticsearchUtil.isEitherLiveOrWorkingIndicesReadOnly()) {\n-                ReindexThread.setCurrentIndexReadOnly(true);\n-                sendMessage(\"es.index.read.only.message\");\n+            } else if (eitherLiveOrWorkingIndicesReadOnly) {\n+                this.readOnlyMessageKey = \"es.index.read.only.message\";\n+                sendReadOnlyMessage();\n                 startIndexMonitor();\n             } else {\n                 started.set(false);\n             }\n \n-            return true;\n+            return this.started.get();\n         } else {\n             return false;\n         }\n     }\n \n+    private void loadTimeToWaitAfterWriteModeSet() {\n+        timeToWaitAfterWriteModeSet = ElasticsearchUtil.getClusterUpdateInterval() +\n+                TimeUnit.MINUTES.toMillis(INTERVAL_IN_MINUTES_TO_CHECK_READ_ONLY) +\n+                TimeUnit.SECONDS.toMillis(10);\n+    }\n+\n+    public void sendReadOnlyMessage() {\n+        sendMessage(readOnlyMessageKey);\n+    }\n+\n     private void sendMessage(final String messageKey) {\n         try {\n+            final String message = LanguageUtil.get(messageKey);\n+\n             final Role adminRole = roleAPI.loadCMSAdminRole();\n             final List<String> usersId = roleAPI.findUsersForRole(adminRole)\n                     .stream()\n                     .map(user -> user.getUserId())\n                     .collect(Collectors.toList());\n \n-            final String message = LanguageUtil.get(messageKey);\n-\n             final SystemMessageBuilder messageBuilder = new SystemMessageBuilder()\n                     .setMessage(message)\n                     .setSeverity(MessageSeverity.ERROR)\n                     .setType(MessageType.SIMPLE_MESSAGE)\n                     .setLife(TimeUnit.SECONDS.toMillis(5));\n-\n-            Logger.error(ESReadOnlyMonitor.class, message);\n+            Logger.error(this.getClass(), message);\n             systemMessageEventUtil.pushMessage(messageBuilder.create(), usersId);\n-        } catch (final LanguageException | DotDataException | DotSecurityException e) {\n+        } catch (final  LanguageException | DotDataException | DotSecurityException e) {\n             Logger.warn(ESReadOnlyMonitor.class, () -> e.getMessage());\n         }\n     }\n \n-    private void putCurrentIndicesToWriteMode() {\n-        try {\n-            Logger.debug(this.getClass(), () -> \"Trying to set the current indices to Write mode\");\n-            ElasticsearchUtil.setLiveAndWorkingIndicesToWriteMode();\n-            sendMessage(\"es.index.write.allow.message\");\n-            ReindexThread.setCurrentIndexReadOnly(false);\n-\n-            this.stop();\n-        } catch (final ElasticsearchResponseException e) {\n-            Logger.info(ESReadOnlyMonitor.class, ()  -> e.getMessage());\n-        }\n+    private void putCurrentIndicesToWriteMode() throws ElasticsearchResponseException {\n+        Logger.debug(this.getClass(), () -> \"Trying to set the current indices to Write mode\");\n+        ElasticsearchUtil.setLiveAndWorkingIndicesToWriteMode();\n     }\n \n-    private void putClusterToWriteMode() {\n-        try{\n-            Logger.debug(this.getClass(), () -> \"Trying to set the current indices to Write mode\");\n-            ElasticsearchUtil.setClusterToWriteMode();\n-            sendMessage(\"es.cluster.write.allow.message\");\n-            ReindexThread.setCurrentIndexReadOnly(false);\n-\n-            this.stop();\n-        } catch (final ElasticsearchResponseException e) {\n-            Logger.info(ESReadOnlyMonitor.class, ()  -> e.getMessage());\n-        }\n+    private void putClusterToWriteMode() throws ElasticsearchResponseException {\n+        Logger.debug(this.getClass(), () -> \"Trying to set the cluster to Write mode\");\n+        ElasticsearchUtil.setClusterToWriteMode();\n     }\n \n     private void startIndexMonitor() {\n-         schedule(new IndexMonitorTimerTask(this));\n+         schedule(\n+                 this::putCurrentIndicesToWriteMode,\n+                 ElasticsearchUtil::isEitherLiveOrWorkingIndicesReadOnly,\n+                 \"es.index.write.allow.message\"\n+         );\n     }\n \n-    private synchronized void schedule(final TimerTask timerTask) {\n-        timer = new Timer(true);\n-        timer.schedule(timerTask, 0, TimeUnit.MINUTES.toMillis(1));\n+    private synchronized void schedule(", "originalCommit": "b9b0d1d1b7ae157fc3dd711e25163dd2052f5719", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}