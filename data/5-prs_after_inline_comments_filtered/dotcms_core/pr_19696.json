{"pr_number": 19696, "pr_title": "#19527 - This comes to solve the 10K items count limitation on ES.", "pr_createdAt": "2020-12-11T20:30:32Z", "pr_url": "https://github.com/dotCMS/core/pull/19696", "timeline": [{"oid": "ae74028fe16be90721346d72e16f6a0b41c3fa84", "url": "https://github.com/dotCMS/core/commit/ae74028fe16be90721346d72e16f6a0b41c3fa84", "message": "#19527 - This comes to solve the 10K items count limitation on ES.", "committedDate": "2020-12-11T20:24:29Z", "type": "commit"}, {"oid": "2032da5fb6063d0439ed48e0cf7d1357bce0efdb", "url": "https://github.com/dotCMS/core/commit/2032da5fb6063d0439ed48e0cf7d1357bce0efdb", "message": "#19527  making track_total_hits a param", "committedDate": "2020-12-12T04:24:56Z", "type": "commit"}, {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "url": "https://github.com/dotCMS/core/commit/a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "message": "#19527 cleanup code", "committedDate": "2020-12-14T15:29:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NzM0MQ==", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542567341", "bodyText": "I would change this to\nreturn query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")? info.getLive(): info.getWorking()", "author": "jdotcms", "createdAt": "2020-12-14T17:26:54Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1489,55 +1454,60 @@ protected void indexCount(final String query,\n         final String queryStringQuery =\n                 LuceneQueryDateTimeFormatter.findAndReplaceQueryDates(translateQuery(query, null).getQuery());\n \n-        // we check the query to figure out wich indexes to hit\n-        IndiciesInfo info;\n-\n         try {\n+            final CountRequest countRequest = getCountRequest(queryStringQuery);\n \n-            info=APILocator.getIndiciesAPI().loadIndicies();\n-        } catch(DotDataException ee) {\n-            Logger.fatal(this, \"Can't get indicies information\",ee);\n-            if (null != indexCountFailure) {\n+            RestHighLevelClientProvider.getInstance().getClient().countAsync(countRequest,\n+                    RequestOptions.DEFAULT, new ActionListener<CountResponse>() {\n+                        @Override\n+                        public void onResponse(CountResponse countResponse) {\n+                            indexCountSuccess.accept(countResponse.getCount());\n+                        }\n \n+                        @Override\n+                        public void onFailure(Exception e) {\n+                            if (null != indexCountFailure) {\n+                                indexCountFailure.accept(e);\n+                            }\n+                        }\n+                    });\n+        }catch (Exception ee){\n+            Logger.fatal(this, \"Can't get indices information\",ee);\n+            if (null != indexCountFailure) {\n                 indexCountFailure.accept(ee);\n             }\n-            return;\n         }\n \n-        SearchRequest searchRequest = getCountSearchRequest(queryStringQuery);\n-        searchRequest.indices(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")?\n-                info.getLive(): info.getWorking());\n-\n-        RestHighLevelClientProvider.getInstance().getClient().searchAsync(searchRequest, RequestOptions.DEFAULT,\n-                        new ActionListener<SearchResponse>() {\n-            @Override\n-            public void onResponse(SearchResponse searchResponse) {\n-\n-                indexCountSuccess.accept(searchResponse.getHits().getTotalHits().value);\n-            }\n-\n-            @Override\n-            public void onFailure(Exception e) {\n-\n-                if (null != indexCountFailure) {\n-\n-                    indexCountFailure.accept(e);\n-                }\n-            }\n-        });\n     }\n \n     @NotNull\n-    private SearchRequest getCountSearchRequest(final String queryString) {\n-        SearchRequest searchRequest = new SearchRequest();\n-        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n-        searchSourceBuilder.query(QueryBuilders.queryStringQuery(queryString));\n-        searchSourceBuilder.size(0);\n-        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n-        searchRequest.source(searchSourceBuilder);\n-        return searchRequest;\n+    private CountRequest getCountRequest(final String queryString) {\n+        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n+        sourceBuilder.query(QueryBuilders.queryStringQuery(queryString));\n+        final CountRequest countRequest = new CountRequest(inferIndexToHit(queryString));\n+        countRequest.source(sourceBuilder);\n+        return countRequest;\n     }\n \n+   private String inferIndexToHit(final String query)  {\n+       // we check the query to figure out which indexes to hit\n+\n+       final IndiciesInfo info;\n+       try {\n+           info = APILocator.getIndiciesAPI().loadIndicies();\n+       } catch (DotDataException e) {\n+           throw new DotRuntimeException(e);\n+       }\n+\n+       final String indexToHit;", "originalCommit": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNDE3Ng==", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542504176", "bodyText": "I don't think we need the new cache region or the new methods here.", "author": "wezell", "createdAt": "2020-12-14T16:05:37Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/ESQueryCache.java", "diffHunk": "@@ -36,7 +38,7 @@ public ESQueryCache() {\n     }\n \n \n-    final static String[] groups = new String[] {\"esquerycache\"};\n+    final static String[] groups = new String[] {\"esQueryCache\",\"esQueryCountCache\"};", "originalCommit": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjQ1Nw==", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542506457", "bodyText": "Are we adding a new unneeded ES query here?  The SearchHits here should have the proper count and a majority of the time, that will return from cache.  I don't know why we need to do a separate query here.", "author": "wezell", "createdAt": "2020-12-14T16:08:32Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1430,56 +1433,18 @@ protected Identifier getRelatedIdentifier(Contentlet contentlet, String relation\n \tprotected long indexCount(final String query) {\n \t    final String qq = LuceneQueryDateTimeFormatter\n                 .findAndReplaceQueryDates(translateQuery(query, null).getQuery());\n+        final CountRequest countRequest = getCountRequest(qq);\n+        return cachedIndexCount(countRequest);\n+    }\n \n-\t    // we check the query to figure out wich indexes to hit\n-        String indexToHit;\n-        IndiciesInfo info;\n-        try {\n-            info = APILocator.getIndiciesAPI().loadIndicies();\n-        }\n-        catch(DotDataException ee) {\n-            Logger.fatal(this, \"Can't get indicies information\",ee);\n-            return 0;\n-        }\n-        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n-            indexToHit = info.getLive();\n-        } else {\n-            indexToHit = info.getWorking();\n-        }\n-\n-        SearchRequest searchRequest = getCountSearchRequest(qq);\n-        searchRequest.indices(indexToHit);\n-\n-        final SearchHits hits = cachedIndexSearch(searchRequest);\n-       return hits.getTotalHits().value;\n-\t}\n-\n+    //TODO: This method was no longer using the time-out. We should probably remove it.\n     @Override\n     protected long indexCount(final String query,\n                         final long timeoutMillis) {\n-\n-        final String queryStringQuery =\n-                LuceneQueryDateTimeFormatter.findAndReplaceQueryDates(translateQuery(query, null).getQuery());\n-\n-        // we check the query to figure out which indexes to hit\n-        IndiciesInfo info;\n-\n-        try {\n-\n-            info = this.indiciesAPI.loadIndicies();\n-        } catch(DotDataException ee) {\n-            Logger.fatal(this, \"Can't get indicies information\",ee);\n-            return 0;\n-        }\n-\n-        SearchRequest searchRequest = getCountSearchRequest(queryStringQuery);\n-        searchRequest.indices(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")?\n-                info.getLive(): info.getWorking());\n-\n-        final SearchHits hits = cachedIndexSearch(searchRequest);\n-        return hits.getTotalHits().value;\n+       return indexCount(query);", "originalCommit": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzMDQzNw==", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r543530437", "bodyText": "nope.", "author": "fabrizzio-dotCMS", "createdAt": "2020-12-15T17:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0Mjc2MA==", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542542760", "bodyText": "We should always provide the default when calling Config.getStringProperty();\nAlso, we have a Config.getBooleanProperty(); that might be better to use here", "author": "wezell", "createdAt": "2020-12-14T16:54:32Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1598,8 +1568,36 @@ private boolean shouldQueryCache() {\n         }\n         return useQueryCache;\n     }\n-    \n \n+    /**\n+     * The track_total_hits parameter allows you to control how the total number of hits should be tracked.\n+     * The default is set to 10K. This means that requests will count the total hit accurately up to 10,000 hits.\n+     * If the param is absent from the properties it still default to 10K. The param can also be set to a true|false\n+     * if set to true it'll track as many items as there are. if set to false no tracking will be performed at all.\n+     * So it's better if it isn't set to false ever.\n+     * @param searchSourceBuilder\n+     */\n+    private void setTrackHits(final SearchSourceBuilder searchSourceBuilder){\n+        final String trackTotalHitsRaw = Config.getStringProperty(\"ES_TRACK_TOTAL_HITS\");", "originalCommit": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTMzNA==", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542569334", "bodyText": "Do we need this if we are getting the correct total back from the SearchHits?", "author": "wezell", "createdAt": "2020-12-14T17:29:26Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1631,7 +1629,40 @@ SearchHits cachedIndexSearch(final SearchRequest searchRequest) {\n         \n         \n     }\n-    \n+\n+    /**\n+     * if enabled CountRequest are executed and then cached\n+     * @param countRequest\n+     * @return\n+     */\n+    Long cachedIndexCount(final CountRequest countRequest) {", "originalCommit": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzMjcwOQ==", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r543532709", "bodyText": "This one is always accurate. and does not depend on the track_total_hits", "author": "fabrizzio-dotCMS", "createdAt": "2020-12-15T17:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTMzNA=="}], "type": "inlineReview"}, {"oid": "2ba25776ebc80e1722af05b59a5ff8fde73d0569", "url": "https://github.com/dotCMS/core/commit/2ba25776ebc80e1722af05b59a5ff8fde73d0569", "message": "#19527 unused code removed + test cases", "committedDate": "2020-12-14T23:31:13Z", "type": "commit"}, {"oid": "02d255b5c95ac9db8b23a89bf004439e2f9f0b29", "url": "https://github.com/dotCMS/core/commit/02d255b5c95ac9db8b23a89bf004439e2f9f0b29", "message": "#19527  fix test", "committedDate": "2020-12-15T03:43:37Z", "type": "commit"}, {"oid": "7e42ead7ed3c3d114a2b4376d2323eac78f9ddc9", "url": "https://github.com/dotCMS/core/commit/7e42ead7ed3c3d114a2b4376d2323eac78f9ddc9", "message": "#19527 testing indexCount logic", "committedDate": "2020-12-15T14:43:40Z", "type": "commit"}, {"oid": "3c5b37a2b8e46f6eb349604343d6256c55fe94fb", "url": "https://github.com/dotCMS/core/commit/3c5b37a2b8e46f6eb349604343d6256c55fe94fb", "message": "#19527 feedback", "committedDate": "2020-12-16T17:08:52Z", "type": "commit"}, {"oid": "8d8185b61d913c0342825db73e2391d2691918c3", "url": "https://github.com/dotCMS/core/commit/8d8185b61d913c0342825db73e2391d2691918c3", "message": "#19527 fix tests", "committedDate": "2020-12-16T19:08:45Z", "type": "commit"}]}