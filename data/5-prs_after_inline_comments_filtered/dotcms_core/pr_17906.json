{"pr_number": 17906, "pr_title": "Unable to create rules", "pr_createdAt": "2020-01-24T18:04:11Z", "pr_url": "https://github.com/dotCMS/core/pull/17906", "timeline": [{"oid": "067066ca8c6b2f0b75e2433b381ee27a854dd7fc", "url": "https://github.com/dotCMS/core/commit/067066ca8c6b2f0b75e2433b381ee27a854dd7fc", "message": "#17901 isHost method should return true for a Contentelet Objesct instance who represent a Host", "committedDate": "2020-01-24T17:47:52Z", "type": "commit"}, {"oid": "d7bff616de46bb60b222be89e66941d0a83f1218", "url": "https://github.com/dotCMS/core/commit/d7bff616de46bb60b222be89e66941d0a83f1218", "message": "#17901 testing", "committedDate": "2020-01-24T18:03:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MDExMw==", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r370770113", "bodyText": "I think we should use the contentlet.isHost() method here rather than recreating it", "author": "wezell", "createdAt": "2020-01-24T18:11:28Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -1406,6 +1406,7 @@ private boolean isFolder(final Permissionable permissionable) {\n \tprivate boolean isHost(final Permissionable permissionable) {\r\n \r\n \t\treturn permissionable instanceof Host ||\r\n+\t\t\t\t(permissionable instanceof Contentlet && Host.class.getSimpleName().equals(((Contentlet) permissionable).getContentType().name())) ||\r", "originalCommit": "d7bff616de46bb60b222be89e66941d0a83f1218", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyODY2MQ==", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r371328661", "bodyText": "done 0eabafd", "author": "freddyucv", "createdAt": "2020-01-27T16:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MDExMw=="}], "type": "inlineReview"}, {"oid": "0eabafde4729f91ac99fece796c7d50cbaba5f40", "url": "https://github.com/dotCMS/core/commit/0eabafde4729f91ac99fece796c7d50cbaba5f40", "message": "#17906 using content.isHost in PermissionBitAPIImpl.isHost method", "committedDate": "2020-01-24T19:31:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTIxNQ==", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r370809215", "bodyText": "Issue found: Avoid empty catch blocks", "author": "dev-dotcms", "createdAt": "2020-01-24T19:40:18Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.dotcms.enterprise.rules;\n+\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.RuleDataGen;\n+import com.dotmarketing.portlets.rules.model.Rule;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Integration test of {@link RulesAPIImpl}\n+ */\n+public class RulesAPIImplIntegrationTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRule(Rule, User, boolean)}\n+     * When: A not admin user with right permission try to save a new rule\n+     * Should: Save the new rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveNewRule() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).next();\n+\n+        this.addPermission(role, host, true);\n+        APILocator.getRulesAPI().saveRule(rule, user, false);\n+\n+        final List<Rule> rules = APILocator.getRulesAPI().getAllRulesByParent(host, APILocator.systemUser(), true);\n+        assertEquals(1, rules.size());\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRule(Rule, User, boolean)}\n+     * When: A not admin user without permission try to save a new rule\n+     * Should: Not save the new rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldNotSaveNewRule() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).next();\n+\n+        this.addPermission(role, host, false);\n+\n+        try {\n+            APILocator.getRulesAPI().saveRule(rule, user, false);\n+            throw new AssertionError(\"DotSecurityException expected\");\n+        } catch(DotSecurityException e) {", "originalCommit": "0eabafde4729f91ac99fece796c7d50cbaba5f40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTIzMA==", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r370809230", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-01-24T19:40:20Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.dotcms.enterprise.rules;\n+\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.RuleDataGen;\n+import com.dotmarketing.portlets.rules.model.Rule;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Integration test of {@link RulesAPIImpl}\n+ */\n+public class RulesAPIImplIntegrationTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "0eabafde4729f91ac99fece796c7d50cbaba5f40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTI0MQ==", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r370809241", "bodyText": "Issue found: Field host has the same name as a method", "author": "dev-dotcms", "createdAt": "2020-01-24T19:40:21Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/rules/RuleDataGen.java", "diffHunk": "@@ -30,6 +30,7 @@\n \n     private Rule.FireOn fireOn = Rule.FireOn.EVERY_PAGE;\n     private String name = \"defaultName\";\n+    private Host host;", "originalCommit": "0eabafde4729f91ac99fece796c7d50cbaba5f40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}