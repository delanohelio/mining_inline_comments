{"pr_number": 18009, "pr_title": "Issue 18005 graphql file and image field types no fields available", "pr_createdAt": "2020-02-19T00:38:14Z", "pr_url": "https://github.com/dotCMS/core/pull/18009", "timeline": [{"oid": "3e6d33da339243e3de549423a0eeda8469182ec3", "url": "https://github.com/dotCMS/core/commit/3e6d33da339243e3de549423a0eeda8469182ec3", "message": "#18005 restore image/file fields", "committedDate": "2020-02-19T00:28:51Z", "type": "commit"}, {"oid": "48a1214bd8fffd1fcb53056d2085a7959e9c75fb", "url": "https://github.com/dotCMS/core/commit/48a1214bd8fffd1fcb53056d2085a7959e9c75fb", "message": "#18005 proper data fetcher", "committedDate": "2020-02-19T00:31:35Z", "type": "commit"}, {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1", "url": "https://github.com/dotCMS/core/commit/d5e0d212fb9205eb78b703171d42d2492dfcfdc1", "message": "#18005 test cases", "committedDate": "2020-02-19T21:42:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NDcwMQ==", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381564701", "bodyText": "Issue found: Local variable 'fileAssetFields' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-19T21:48:34Z", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -701,6 +714,62 @@ public void testGetSchema_GivenEELicense_EnterpriseBaseTypeCollectionsShouldBeAv\n                 +\"BaseTypeCollection\"));\n     }\n \n+    /**\n+     * This method tests that given a {@link Field} of type {@link com.dotcms.contenttype.model.field.FileField}\n+     * or {@link com.dotcms.contenttype.model.field.ImageField}, the following GraphQL fields are\n+     * available to query:\n+     *\n+     * {@link FileAssetContentType#FILEASSET_FILE_NAME_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_DESCRIPTION_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_FILEASSET_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_METADATA_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SHOW_ON_MENU_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SORT_ORDER_FIELD_VAR}\n+     */\n+\n+    @Test\n+    public void testAvailableGraphQLFieldsOnImageAndFileFields()\n+            throws DotDataException, DotSecurityException {\n+        ContentType contentType = null;\n+        try {\n+            contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field fileField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(FileField.class).nextPersisted();\n+            final Field imageField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(ImageField.class).nextPersisted();\n+\n+            APILocator.getGraphqlAPI().invalidateSchema();\n+\n+            final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n+\n+            final GraphQLFieldDefinition fileFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(fileField.variable());\n+\n+            final GraphQLFieldDefinition imageFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(imageField.variable());\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), fileFieldDefinition.getType());\n+\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) fileFieldDefinition.getType()));\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) imageFieldDefinition.getType()));\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), imageFieldDefinition.getType());\n+        } finally {\n+            APILocator.getContentTypeAPI(APILocator.systemUser()).delete(contentType);\n+        }\n+    }\n+\n+    private boolean areFileassetFieldsPresent(final GraphQLObjectType objectType) {\n+        List<String> fileAssetFields = list(FILEASSET_FILE_NAME_FIELD_VAR,", "originalCommit": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NDcxMw==", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381564713", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-02-19T21:48:36Z", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -701,6 +714,62 @@ public void testGetSchema_GivenEELicense_EnterpriseBaseTypeCollectionsShouldBeAv\n                 +\"BaseTypeCollection\"));\n     }\n \n+    /**\n+     * This method tests that given a {@link Field} of type {@link com.dotcms.contenttype.model.field.FileField}\n+     * or {@link com.dotcms.contenttype.model.field.ImageField}, the following GraphQL fields are\n+     * available to query:\n+     *\n+     * {@link FileAssetContentType#FILEASSET_FILE_NAME_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_DESCRIPTION_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_FILEASSET_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_METADATA_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SHOW_ON_MENU_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SORT_ORDER_FIELD_VAR}\n+     */\n+\n+    @Test\n+    public void testAvailableGraphQLFieldsOnImageAndFileFields()\n+            throws DotDataException, DotSecurityException {\n+        ContentType contentType = null;\n+        try {\n+            contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field fileField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(FileField.class).nextPersisted();\n+            final Field imageField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(ImageField.class).nextPersisted();\n+\n+            APILocator.getGraphqlAPI().invalidateSchema();\n+\n+            final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n+\n+            final GraphQLFieldDefinition fileFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(fileField.variable());\n+\n+            final GraphQLFieldDefinition imageFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(imageField.variable());\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), fileFieldDefinition.getType());\n+\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) fileFieldDefinition.getType()));\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) imageFieldDefinition.getType()));\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), imageFieldDefinition.getType());\n+        } finally {\n+            APILocator.getContentTypeAPI(APILocator.systemUser()).delete(contentType);\n+        }\n+    }\n+\n+    private boolean areFileassetFieldsPresent(final GraphQLObjectType objectType) {\n+        List<String> fileAssetFields = list(FILEASSET_FILE_NAME_FIELD_VAR,\n+                FILEASSET_DESCRIPTION_FIELD_VAR, FILEASSET_FILEASSET_FIELD_VAR,\n+                FILEASSET_METADATA_FIELD_VAR, FILEASSET_SHOW_ON_MENU_FIELD_VAR,\n+                FILEASSET_SORT_ORDER_FIELD_VAR);\n+        return objectType.getFieldDefinitions().stream().allMatch((fieldDefinition ->", "originalCommit": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3MDY4NA==", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381570684", "bodyText": "maybe we can move this logic into a private method, something like:\nMap<String, TypeFetcher> getFileAssetTypeFields(){\n...\n}", "author": "freddyucv", "createdAt": "2020-02-19T22:00:45Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/CustomFieldType.java", "diffHunk": "@@ -103,6 +115,17 @@\n         userTypeFields.put(\"lastName\", GraphQLString);\n         userTypeFields.put(\"email\", GraphQLString);\n         customFieldTypes.put(\"USER\", TypeUtil.createObjectType(\"User\", userTypeFields, null));\n+\n+        final Map<String, TypeFetcher> fileAssetTypeFields = new HashMap<>();\n+        fileAssetTypeFields.put(FILEASSET_FILE_NAME_FIELD_VAR, new TypeFetcher(GraphQLString, new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_DESCRIPTION_FIELD_VAR, new TypeFetcher(GraphQLString, new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_FILEASSET_FIELD_VAR,\n+                new TypeFetcher(CustomFieldType.BINARY.getType(),new BinaryFieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_METADATA_FIELD_VAR,\n+                new TypeFetcher(list(CustomFieldType.KEY_VALUE.getType()), new KeyValueFieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_SHOW_ON_MENU_FIELD_VAR, new TypeFetcher(list(GraphQLString), new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_SORT_ORDER_FIELD_VAR, new TypeFetcher(GraphQLInt, new FieldDataFetcher()));", "originalCommit": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78163eb893fb18cf4bcbfba5afad151e4672a056", "url": "https://github.com/dotCMS/core/commit/78163eb893fb18cf4bcbfba5afad151e4672a056", "message": "#18005 codacy feedback", "committedDate": "2020-02-20T15:27:31Z", "type": "commit"}]}