{"pr_number": 18300, "pr_title": "#18292 Fix: error when try to submit a form", "pr_createdAt": "2020-04-09T19:49:53Z", "pr_url": "https://github.com/dotCMS/core/pull/18300", "timeline": [{"oid": "48de94ba2cdb874a3b1e48fb6d99c72a0bb7a249", "url": "https://github.com/dotCMS/core/commit/48de94ba2cdb874a3b1e48fb6d99c72a0bb7a249", "message": "#18292 Fix: error when try to submit a form", "committedDate": "2020-04-09T19:44:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1Njg5MQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r406456891", "bodyText": "I think there are more places to change on the saveDraft, where the respect front end roles is being hardcored", "author": "jdotcms", "createdAt": "2020-04-09T20:25:27Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -7835,7 +7833,7 @@ public Contentlet saveDraft(final Contentlet contentlet,\n             throws IllegalArgumentException,DotDataException,DotSecurityException, DotContentletStateException, DotContentletValidationException {\n \n         if (!InodeUtils.isSet(contentlet.getInode())) {\n-            return checkin(contentlet, contentletRelationships, cats, permissions, user, false);", "originalCommit": "48de94ba2cdb874a3b1e48fb6d99c72a0bb7a249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MDYwOA==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r408890608", "bodyText": "done\n1aa3444#diff-0e42bc8d57cb229663e56b48259b767dR7855-R7870\n1aa3444#diff-013f41c9cebd179a7239798b2e45fb94R118", "author": "freddyucv", "createdAt": "2020-04-15T14:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1Njg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NzQwNQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r406457405", "bodyText": "I think SaveContentlet needs the same", "author": "jdotcms", "createdAt": "2020-04-09T20:26:30Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentAsDraftActionlet.java", "diffHunk": "@@ -29,16 +31,27 @@\n public class SaveContentAsDraftActionlet extends WorkFlowActionlet {", "originalCommit": "48de94ba2cdb874a3b1e48fb6d99c72a0bb7a249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MTI3OQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r408891279", "bodyText": "done 1aa3444#diff-7834fdbf27d8f42237ae8fb6b94bee62R71", "author": "freddyucv", "createdAt": "2020-04-15T14:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NzQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwOTUyNg==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r406509526", "bodyText": "I think this constructor doesn't need to be public", "author": "nollymar", "createdAt": "2020-04-09T22:20:55Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentAsDraftActionlet.java", "diffHunk": "@@ -29,16 +31,27 @@\n public class SaveContentAsDraftActionlet extends WorkFlowActionlet {\n \n \tprivate final ContentletAPI   contentletAPI;\n-\tprivate final RelationshipAPI relationshipAPI;\n \tprivate final CategoryAPI     categoryAPI;\n \tprivate final PermissionAPI   permissionAPI;\n \n \tpublic SaveContentAsDraftActionlet() {\n+\t\tthis(\n+\t\t\tAPILocator.getContentletAPI(),\n+\t\t\tAPILocator.getCategoryAPI(),\n+\t\t\tAPILocator.getPermissionAPI()\n+\t\t);\n+\t}\n+\n+\t@VisibleForTesting\n+\tpublic SaveContentAsDraftActionlet(", "originalCommit": "48de94ba2cdb874a3b1e48fb6d99c72a0bb7a249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MTUyNA==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r408891524", "bodyText": "done 1aa3444#diff-013f41c9cebd179a7239798b2e45fb94R46", "author": "freddyucv", "createdAt": "2020-04-15T14:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwOTUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwOTk5OQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r406509999", "bodyText": "remove this commented line", "author": "nollymar", "createdAt": "2020-04-09T22:22:22Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentAsDraftActionletTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.categories.business.CategoryAPI;\n+import com.dotmarketing.portlets.categories.model.Category;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.structure.model.ContentletRelationships;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(DataProviderRunner.class)\n+public class SaveContentAsDraftActionletTest {\n+\n+    private SaveContentAsDraftActionlet saveContentAsDraftActionlet;\n+    private ContentletAPI contentletAPI;\n+    private CategoryAPI categoryAPI;\n+    private PermissionAPI permissionAPI;\n+\n+    @Before\n+    public void init(){\n+        contentletAPI = mock(ContentletAPI.class);\n+        categoryAPI = mock(CategoryAPI.class);\n+        permissionAPI = mock(PermissionAPI.class);\n+\n+        saveContentAsDraftActionlet = new SaveContentAsDraftActionlet(contentletAPI, categoryAPI, permissionAPI);\n+    }\n+\n+    private static class TestCase {\n+        final private boolean respectFrontendRoles;\n+\n+        private TestCase(boolean respectFrontendRoles) {\n+            this.respectFrontendRoles = respectFrontendRoles;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] respectFrontendRolesValues() {\n+        return new TestCase[]{new TestCase(true), new TestCase(false)};\n+    }\n+\n+    /**\n+     * When: {@link WorkflowProcessor#getContentletDependencies()} is not null\n+     * Should: call {@link ContentletAPI#saveDraft(Contentlet, Map, List, List, User, boolean)} with the right parameters\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"respectFrontendRolesValues\")\n+    public void shouldCallSaveDraftWithTheRightParameters(final TestCase testCase) throws DotSecurityException, DotDataException {\n+        final WorkflowProcessor processor = mock(WorkflowProcessor.class);\n+        final Map<String, WorkflowActionClassParameter> params = map();\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final User user  = mock(User.class);\n+\n+        when(processor.getUser()).thenReturn(user);\n+        when(processor.getContentlet()).thenReturn(contentlet);\n+\n+        List<Category> categories = mock(List.class);\n+\n+        final List<Permission> permissions = mock(List.class);\n+        when(this.permissionAPI.getPermissions(contentlet, false, true)).thenReturn(permissions);\n+\n+        final ContentletDependencies contentletDependencies = mock(ContentletDependencies.class);\n+        when(processor.getContentletDependencies()).thenReturn(contentletDependencies);\n+\n+        final Contentlet contentletNew = mock(Contentlet.class);\n+        when(contentletDependencies.getCategories()).thenReturn(categories);\n+\n+        when(processor.getContentletDependencies().isRespectAnonymousPermissions()).thenReturn(testCase.respectFrontendRoles);\n+\n+        when(this.contentletAPI.saveDraft(\n+                contentlet, (ContentletRelationships) null, categories, permissions, user, testCase.respectFrontendRoles))\n+                .thenReturn(contentletNew);\n+\n+        saveContentAsDraftActionlet.executeAction(processor, params);\n+\n+        //verify(processor, times(1)).setContentlet(contentletNew);", "originalCommit": "48de94ba2cdb874a3b1e48fb6d99c72a0bb7a249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MTgxNQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r408891815", "bodyText": "really this line need to be uncomment\n1aa3444#diff-4e93f1c0bcf3f04b2c6542297d6360eeR97", "author": "freddyucv", "createdAt": "2020-04-15T14:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwOTk5OQ=="}], "type": "inlineReview"}, {"oid": "1aa3444ac01b694697c3580a424d7e3566aabc35", "url": "https://github.com/dotCMS/core/commit/1aa3444ac01b694697c3580a424d7e3566aabc35", "message": "testing", "committedDate": "2020-04-13T20:08:12Z", "type": "commit"}, {"oid": "6ec56462ac0e4aa37aba4848e2acd55943dfea20", "url": "https://github.com/dotCMS/core/commit/6ec56462ac0e4aa37aba4848e2acd55943dfea20", "message": "refactoring", "committedDate": "2020-04-15T14:25:07Z", "type": "commit"}, {"oid": "5a55c5cbe5fda751ac68a5ab2e141ef85498022c", "url": "https://github.com/dotCMS/core/commit/5a55c5cbe5fda751ac68a5ab2e141ef85498022c", "message": "refactoring", "committedDate": "2020-04-15T16:02:54Z", "type": "commit"}, {"oid": "bbf178ca1ddda41914c6094aff0842a6491dc75c", "url": "https://github.com/dotCMS/core/commit/bbf178ca1ddda41914c6094aff0842a6491dc75c", "message": "testing", "committedDate": "2020-04-15T20:22:13Z", "type": "commit"}, {"oid": "ad480cb6770029865e6ece0d4ab74470a08384b5", "url": "https://github.com/dotCMS/core/commit/ad480cb6770029865e6ece0d4ab74470a08384b5", "message": "#18300 testing", "committedDate": "2020-04-16T15:15:49Z", "type": "commit"}, {"oid": "408a922f3c11bf07b47c07cbd96e678467fcfbef", "url": "https://github.com/dotCMS/core/commit/408a922f3c11bf07b47c07cbd96e678467fcfbef", "message": "#18292 testing", "committedDate": "2020-04-16T17:42:40Z", "type": "commit"}, {"oid": "a959e06e9aec0dd4f08d061c17e373c9b9aab905", "url": "https://github.com/dotCMS/core/commit/a959e06e9aec0dd4f08d061c17e373c9b9aab905", "message": "#18292 testing", "committedDate": "2020-04-16T19:01:50Z", "type": "commit"}, {"oid": "905288f487833e18bfca9394a8bc2c32d98dd3bb", "url": "https://github.com/dotCMS/core/commit/905288f487833e18bfca9394a8bc2c32d98dd3bb", "message": "testing", "committedDate": "2020-04-16T20:25:20Z", "type": "commit"}, {"oid": "c684c988033d0a0eedf5d94acc7df6dde5508816", "url": "https://github.com/dotCMS/core/commit/c684c988033d0a0eedf5d94acc7df6dde5508816", "message": "testing", "committedDate": "2020-04-16T21:50:31Z", "type": "commit"}, {"oid": "b659bb20216e24d87807351b41481805392a361a", "url": "https://github.com/dotCMS/core/commit/b659bb20216e24d87807351b41481805392a361a", "message": "testing", "committedDate": "2020-04-16T22:39:58Z", "type": "commit"}, {"oid": "03d6aeec97c63e9699d66a5c806a9f2c3359cbbc", "url": "https://github.com/dotCMS/core/commit/03d6aeec97c63e9699d66a5c806a9f2c3359cbbc", "message": "testing", "committedDate": "2020-04-17T13:48:58Z", "type": "commit"}, {"oid": "a86ba376e84ff3b9de4f9b33cba8296f22db645c", "url": "https://github.com/dotCMS/core/commit/a86ba376e84ff3b9de4f9b33cba8296f22db645c", "message": "testing", "committedDate": "2020-04-17T17:47:49Z", "type": "commit"}, {"oid": "fe932565ee8beb1bddb018dfc607d9dd5ecf4fab", "url": "https://github.com/dotCMS/core/commit/fe932565ee8beb1bddb018dfc607d9dd5ecf4fab", "message": "Merge remote-tracking branch 'origin/master' into issue-18292-When-try-to-submit-a-form-get-permission-error", "committedDate": "2020-04-17T21:22:48Z", "type": "commit"}, {"oid": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "url": "https://github.com/dotCMS/core/commit/c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "message": "#18292 Testing", "committedDate": "2020-04-17T21:39:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODIyMg==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488222", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-17T21:53:58Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -83,48 +188,96 @@ private static ContentType createTestType(final ContentTypeAPI contentTypeAPI)\n     @AfterClass\n     public static void cleanup()\n             throws DotDataException, DotSecurityException {\n+        for (final ContentType contentType : contentTypes) {\n+            if (null != contentType) {\n \n-        if (null != customContentType) {\n-\n-            final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n-            contentTypeAPI.delete(customContentType);\n+                final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+                contentTypeAPI.delete(contentType);\n+            }\n         }\n \n         cleanupDebug(SaveContentActionletTest.class);\n     } // cleanup\n \n+    /**\n+     * Method to test: {@link WorkflowAPI#fireContentWorkflow(Contentlet, ContentletDependencies)}\n+     * Given Scenario: Try to Save and publish a {@link Contentlet} with different users, when the ContentType does not\n+     * have a 'Site or folder' field\n+     * Expected Result: The follow are the expected result according to the user\n+     * - If the user is system should save and publish the contentlet\n+     * - If the user have {@link PermissionLevel#CAN_ADD_CHILDREN} over the ContentType\n+     * - If the user doesn't have any permission should throw a DotSecurityException when try to save it\n+     * - If the user just has {@link PermissionLevel#CAN_ADD_CHILDREN} over the save {@link ContentType} then should throw a DotSecurityException when try to save it\n+     */\n     @Test\n-    public void test_Publish_With_Save_Contentlet_Actionlet_Tag () throws DotSecurityException, DotDataException {\n+    @UseDataProvider(\"usersAndContentTypeWithoutHostField\")\n+    public void test_Publish_With_Save_Contentlet (final TestCase testCase) throws DotSecurityException, DotDataException {\n+        final WorkflowAPI workflowAPI = APILocator.getWorkflowAPI();\n \n-        final Contentlet contentlet = new Contentlet();\n-        contentlet.setContentType(customContentType);\n-        contentlet.setProperty(\"title\", \"Test\");\n-        contentlet.setProperty(\"txt\", \"Test\");\n-        contentlet.setProperty(\"tag\", \"test\");\n+        final Contentlet contentlet = new ContentletDataGen(testCase.contentType.id())\n+            .setProperty(\"title\", \"Test\")\n+            .setProperty(\"txt\", \"Test\")\n+            .setProperty(\"tag\", \"test\")\n+            .next();\n \n-        final Contentlet contentletSaved =\n-                workflowAPI.fireContentWorkflow(contentlet,\n-                    new ContentletDependencies.Builder()\n-                        .modUser(APILocator.systemUser())\n-                        .workflowActionId(SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID)\n-                        .build());\n+        Contentlet contentletSaved = null;\n \n-        Assert.assertNotNull(contentletSaved);\n-        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"title\"));\n-        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"txt\"));\n+        try {\n+            contentletSaved =\n+                    workflowAPI.fireContentWorkflow(contentlet,\n+                            new ContentletDependencies.Builder()\n+                                    .modUser(testCase.user)\n+                                    .respectAnonymousPermissions(testCase.respectFrontendRoles)\n+                                    .workflowActionId(SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID)\n+                                    .build());\n \n-        final List<TagInode> tagInodes = APILocator.getTagAPI().getTagInodesByInode(contentletSaved.getInode());\n-        Assert.assertNotNull(tagInodes);\n-        Assert.assertFalse(tagInodes.isEmpty());\n+            checkContentSaved(contentletSaved);\n+\n+            Assert.assertTrue(\n+                    testCase.hasContentTypeAddChildrenPermission &&\n+                            testCase.hasSaveActionPermission ||\n+                            (testCase.respectFrontendRoles && this.haveFrontendPermission(testCase.contentType))\n+            );\n+        } catch(Exception e) {\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                try {\n+                    Assert.assertTrue(\n+                            !testCase.hasContentTypeAddChildrenPermission ||\n+                                    !testCase.hasSaveActionPermission ||\n+                                    (systemUser.isFrontendUser() && !testCase.respectFrontendRoles)", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODIyOQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488229", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-04-17T21:53:59Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -6,57 +6,155 @@\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n import com.dotmarketing.portlets.folders.business.FolderAPI;\n import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkFlowFactory;\n import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n import com.dotmarketing.tag.model.TagInode;\n+import com.github.rjeschke.txtmark.Run;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.jetbrains.annotations.NotNull;\n import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.*;\n \n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.set;\n+\n+@RunWith(DataProviderRunner.class)\n public class SaveContentActionletTest extends BaseWorkflowIntegrationTest {\n \n-    private static WorkflowAPI workflowAPI = null;\n-    private static ContentTypeAPI contentTypeAPI = null;\n-    private static ContentType customContentType = null;\n-    private static final int LIMIT = 20;\n+    private static User systemUser = APILocator.systemUser();\n+    private static List<ContentType> contentTypes = new ArrayList<>();\n+\n+    private static class TestCase {\n+        private final boolean respectFrontendRoles;\n+        private final User user;\n+        private final boolean hasSaveActionPermission;\n+        private final boolean hasContentTypeAddChildrenPermission;\n+        private final ContentType contentType;\n+\n+        private TestCase(\n+                final boolean respectFrontendRoles,\n+                final User user,\n+                final ContentType contentType,\n+                final boolean hasSaveActionPermission,\n+                final boolean hasContentTypeAddChildrenPermission) {\n+            this.respectFrontendRoles = respectFrontendRoles;\n+            this.user = user;\n+            this.hasSaveActionPermission = hasSaveActionPermission;\n+            this.hasContentTypeAddChildrenPermission = hasContentTypeAddChildrenPermission;\n+            this.contentType = contentType;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] usersAndContentTypeWithoutHostField() throws Exception {", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODIzNg==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488236", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.util.CollectionsUtils.list'", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:00Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -6,57 +6,155 @@\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n import com.dotmarketing.portlets.folders.business.FolderAPI;\n import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkFlowFactory;\n import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n import com.dotmarketing.tag.model.TagInode;\n+import com.github.rjeschke.txtmark.Run;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.jetbrains.annotations.NotNull;\n import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.*;\n \n+import static com.dotcms.util.CollectionsUtils.list;", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODI0Mg==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488242", "bodyText": "Issue found: Avoid unused imports such as 'com.github.rjeschke.txtmark.Run'", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:01Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -6,57 +6,155 @@\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n import com.dotmarketing.portlets.folders.business.FolderAPI;\n import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkFlowFactory;\n import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n import com.dotmarketing.tag.model.TagInode;\n+import com.github.rjeschke.txtmark.Run;", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODI0Nw==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488247", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.workflows.business.WorkFlowFactory'", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:02Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -6,57 +6,155 @@\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n import com.dotmarketing.portlets.folders.business.FolderAPI;\n import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkFlowFactory;", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODI1Mg==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488252", "bodyText": "Issue found: The String literal \"Test\" appears 6 times in this file; the first occurrence is on line 235", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:03Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -83,48 +188,96 @@ private static ContentType createTestType(final ContentTypeAPI contentTypeAPI)\n     @AfterClass\n     public static void cleanup()\n             throws DotDataException, DotSecurityException {\n+        for (final ContentType contentType : contentTypes) {\n+            if (null != contentType) {\n \n-        if (null != customContentType) {\n-\n-            final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n-            contentTypeAPI.delete(customContentType);\n+                final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+                contentTypeAPI.delete(contentType);\n+            }\n         }\n \n         cleanupDebug(SaveContentActionletTest.class);\n     } // cleanup\n \n+    /**\n+     * Method to test: {@link WorkflowAPI#fireContentWorkflow(Contentlet, ContentletDependencies)}\n+     * Given Scenario: Try to Save and publish a {@link Contentlet} with different users, when the ContentType does not\n+     * have a 'Site or folder' field\n+     * Expected Result: The follow are the expected result according to the user\n+     * - If the user is system should save and publish the contentlet\n+     * - If the user have {@link PermissionLevel#CAN_ADD_CHILDREN} over the ContentType\n+     * - If the user doesn't have any permission should throw a DotSecurityException when try to save it\n+     * - If the user just has {@link PermissionLevel#CAN_ADD_CHILDREN} over the save {@link ContentType} then should throw a DotSecurityException when try to save it\n+     */\n     @Test\n-    public void test_Publish_With_Save_Contentlet_Actionlet_Tag () throws DotSecurityException, DotDataException {\n+    @UseDataProvider(\"usersAndContentTypeWithoutHostField\")\n+    public void test_Publish_With_Save_Contentlet (final TestCase testCase) throws DotSecurityException, DotDataException {\n+        final WorkflowAPI workflowAPI = APILocator.getWorkflowAPI();\n \n-        final Contentlet contentlet = new Contentlet();\n-        contentlet.setContentType(customContentType);\n-        contentlet.setProperty(\"title\", \"Test\");\n-        contentlet.setProperty(\"txt\", \"Test\");\n-        contentlet.setProperty(\"tag\", \"test\");\n+        final Contentlet contentlet = new ContentletDataGen(testCase.contentType.id())\n+            .setProperty(\"title\", \"Test\")", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODI1OQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488259", "bodyText": "Issue found: Avoid throwing raw exception types.", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:04Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -133,4 +286,78 @@ public void test_Publish_With_Save_Contentlet_Actionlet_Tag () throws DotSecurit\n         Assert.assertTrue(contentletPublished.isLive());\n     }\n \n+    private void checkContentSaved(final Contentlet contentletSaved) throws DotDataException {\n+        Assert.assertNotNull(contentletSaved);\n+        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"title\"));\n+        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"txt\"));\n+\n+        final List<TagInode> tagInodes = APILocator.getTagAPI().getTagInodesByInode(contentletSaved.getInode());\n+        Assert.assertNotNull(tagInodes);\n+        Assert.assertFalse(tagInodes.isEmpty());\n+\n+        contentletSaved.setTags();\n+    }\n+\n+    @NotNull\n+    private static void addPermissionToAddChildren(final Role role, final ContentType contentType) throws DotDataException {\n+\n+        final Permission contentTypePermission = getPermission(role, contentType, PermissionLevel.WRITE.getType());\n+\n+        try {\n+\n+            APILocator.getPermissionAPI().save(contentTypePermission, contentType, systemUser, false);\n+\n+        } catch (DotDataException | DotSecurityException e){\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @NotNull\n+    private static void addPermissionToActions(final Role role) throws DotDataException {\n+        final WorkflowAction saveAction = FactoryLocator.getWorkFlowFactory().findAction(SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID);\n+        final WorkflowAction publishAction = FactoryLocator.getWorkFlowFactory().findAction(SystemWorkflowConstants.WORKFLOW_PUBLISH_ACTION_ID);\n+\n+        final Permission publishPermission = getPermission(role, publishAction, PermissionLevel.USE.getType());\n+        final Permission savePermission = getPermission(role, saveAction, PermissionLevel.USE.getType());\n+\n+        try {\n+             APILocator.getPermissionAPI().save(savePermission, saveAction, systemUser, false);\n+            APILocator.getPermissionAPI().save(publishPermission, publishAction, systemUser, false);\n+\n+        } catch (DotDataException | DotSecurityException e){\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static WorkflowAction getSaveActionFromSystemSchema(final String actionName){\n+\n+        try {\n+            final WorkflowScheme systemWorkflowScheme = APILocator.getWorkflowAPI().findSystemWorkflowScheme();\n+            final List<WorkflowAction> actions = APILocator.getWorkflowAPI().findActions(systemWorkflowScheme, systemUser);\n+\n+            for (final WorkflowAction workflowAction : actions) {\n+                if (workflowAction.getName().equals(actionName)) {\n+                    return workflowAction;\n+                }\n+            }\n+\n+        } catch (DotDataException | DotSecurityException e) {\n+            throw new RuntimeException(e);", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODI2NQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488265", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:05Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -83,48 +188,96 @@ private static ContentType createTestType(final ContentTypeAPI contentTypeAPI)\n     @AfterClass\n     public static void cleanup()\n             throws DotDataException, DotSecurityException {\n+        for (final ContentType contentType : contentTypes) {\n+            if (null != contentType) {\n \n-        if (null != customContentType) {\n-\n-            final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n-            contentTypeAPI.delete(customContentType);\n+                final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+                contentTypeAPI.delete(contentType);\n+            }\n         }\n \n         cleanupDebug(SaveContentActionletTest.class);\n     } // cleanup\n \n+    /**\n+     * Method to test: {@link WorkflowAPI#fireContentWorkflow(Contentlet, ContentletDependencies)}\n+     * Given Scenario: Try to Save and publish a {@link Contentlet} with different users, when the ContentType does not\n+     * have a 'Site or folder' field\n+     * Expected Result: The follow are the expected result according to the user\n+     * - If the user is system should save and publish the contentlet\n+     * - If the user have {@link PermissionLevel#CAN_ADD_CHILDREN} over the ContentType\n+     * - If the user doesn't have any permission should throw a DotSecurityException when try to save it\n+     * - If the user just has {@link PermissionLevel#CAN_ADD_CHILDREN} over the save {@link ContentType} then should throw a DotSecurityException when try to save it\n+     */\n     @Test\n-    public void test_Publish_With_Save_Contentlet_Actionlet_Tag () throws DotSecurityException, DotDataException {\n+    @UseDataProvider(\"usersAndContentTypeWithoutHostField\")\n+    public void test_Publish_With_Save_Contentlet (final TestCase testCase) throws DotSecurityException, DotDataException {\n+        final WorkflowAPI workflowAPI = APILocator.getWorkflowAPI();\n \n-        final Contentlet contentlet = new Contentlet();\n-        contentlet.setContentType(customContentType);\n-        contentlet.setProperty(\"title\", \"Test\");\n-        contentlet.setProperty(\"txt\", \"Test\");\n-        contentlet.setProperty(\"tag\", \"test\");\n+        final Contentlet contentlet = new ContentletDataGen(testCase.contentType.id())\n+            .setProperty(\"title\", \"Test\")\n+            .setProperty(\"txt\", \"Test\")\n+            .setProperty(\"tag\", \"test\")\n+            .next();\n \n-        final Contentlet contentletSaved =\n-                workflowAPI.fireContentWorkflow(contentlet,\n-                    new ContentletDependencies.Builder()\n-                        .modUser(APILocator.systemUser())\n-                        .workflowActionId(SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID)\n-                        .build());\n+        Contentlet contentletSaved = null;\n \n-        Assert.assertNotNull(contentletSaved);\n-        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"title\"));\n-        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"txt\"));\n+        try {\n+            contentletSaved =\n+                    workflowAPI.fireContentWorkflow(contentlet,\n+                            new ContentletDependencies.Builder()\n+                                    .modUser(testCase.user)\n+                                    .respectAnonymousPermissions(testCase.respectFrontendRoles)\n+                                    .workflowActionId(SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID)\n+                                    .build());\n \n-        final List<TagInode> tagInodes = APILocator.getTagAPI().getTagInodesByInode(contentletSaved.getInode());\n-        Assert.assertNotNull(tagInodes);\n-        Assert.assertFalse(tagInodes.isEmpty());\n+            checkContentSaved(contentletSaved);\n+\n+            Assert.assertTrue(\n+                    testCase.hasContentTypeAddChildrenPermission &&\n+                            testCase.hasSaveActionPermission ||\n+                            (testCase.respectFrontendRoles && this.haveFrontendPermission(testCase.contentType))\n+            );\n+        } catch(Exception e) {", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODI2Nw==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488267", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business'", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:06Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -6,57 +6,155 @@\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODI4NA==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488284", "bodyText": "Issue found: Local variable 'categories' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:07Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentAsDraftActionletTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.categories.business.CategoryAPI;\n+import com.dotmarketing.portlets.categories.model.Category;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.structure.model.ContentletRelationships;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(DataProviderRunner.class)\n+public class SaveContentAsDraftActionletTest {\n+\n+    private SaveContentAsDraftActionlet saveContentAsDraftActionlet;\n+    private ContentletAPI contentletAPI;\n+    private CategoryAPI categoryAPI;\n+    private PermissionAPI permissionAPI;\n+\n+    @Before\n+    public void init(){\n+        contentletAPI = mock(ContentletAPI.class);\n+        categoryAPI = mock(CategoryAPI.class);\n+        permissionAPI = mock(PermissionAPI.class);\n+\n+        saveContentAsDraftActionlet = new SaveContentAsDraftActionlet(contentletAPI, categoryAPI, permissionAPI);\n+    }\n+\n+    private static class TestCase {\n+        final private boolean respectFrontendRoles;\n+\n+        private TestCase(final boolean respectFrontendRoles) {\n+            this.respectFrontendRoles = respectFrontendRoles;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] respectFrontendRolesValues() {\n+        return new TestCase[]{new TestCase(true), new TestCase(false)};\n+    }\n+\n+    /**\n+     * When: {@link WorkflowProcessor#getContentletDependencies()} is not null\n+     * Should: call {@link ContentletAPI#saveDraft(Contentlet, Map, List, List, User, boolean)} with the right parameters\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"respectFrontendRolesValues\")\n+    public void shouldCallSaveDraftWithTheRightParameters(final TestCase testCase) throws DotSecurityException, DotDataException {\n+        final WorkflowProcessor processor = mock(WorkflowProcessor.class);\n+        final Map<String, WorkflowActionClassParameter> params = map();\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final User user  = mock(User.class);\n+\n+        when(processor.getUser()).thenReturn(user);\n+        when(processor.getContentlet()).thenReturn(contentlet);\n+\n+        final List<Category> categories = mock(List.class);\n+\n+        final List<Permission> permissions = mock(List.class);\n+        when(this.permissionAPI.getPermissions(contentlet, false, true)).thenReturn(permissions);\n+\n+        final ContentletDependencies contentletDependencies = mock(ContentletDependencies.class);\n+        when(processor.getContentletDependencies()).thenReturn(contentletDependencies);\n+\n+        final Contentlet contentletNew = mock(Contentlet.class);\n+        when(contentletDependencies.getCategories()).thenReturn(categories);\n+\n+        when(processor.getContentletDependencies().isRespectAnonymousPermissions()).thenReturn(testCase.respectFrontendRoles);\n+\n+        when(this.contentletAPI.saveDraft(\n+                contentlet, (ContentletRelationships) null, categories, permissions, user, testCase.respectFrontendRoles))\n+                .thenReturn(contentletNew);\n+\n+        saveContentAsDraftActionlet.executeAction(processor, params);\n+\n+        verify(processor, times(1)).setContentlet(contentletNew);\n+        verify(this.contentletAPI, times(1)).saveDraft(\n+                contentlet, (ContentletRelationships) null, categories, permissions, user, testCase.respectFrontendRoles\n+        );\n+\n+        verify(this.categoryAPI, never()).getParents(contentlet, user, false);\n+    }\n+\n+    /**\n+     * When: {@link WorkflowProcessor#getContentletDependencies()} is null\n+     * Should: call {@link ContentletAPI#saveDraft(Contentlet, Map, List, List, User, boolean)} with the right parameters\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"respectFrontendRolesValues\")\n+    public void shouldCallSaveDraftWithTheRightParametersWhenContentletDependenciesIsNull(final TestCase testCase) throws DotSecurityException, DotDataException {\n+        final WorkflowProcessor processor = mock(WorkflowProcessor.class);\n+        final Map<String, WorkflowActionClassParameter> params = map();\n+\n+        final Contentlet contentlet = mock(Contentlet.class);\n+        final User user  = mock(User.class);\n+\n+        when(processor.getUser()).thenReturn(user);\n+        when(processor.getContentlet()).thenReturn(contentlet);\n+\n+        List<Category> categories = mock(List.class);", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODI5NA==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488294", "bodyText": "Issue found: Avoid unused private methods such as 'getSaveActionFromSystemSchema(String)'.", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:08Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -133,4 +286,78 @@ public void test_Publish_With_Save_Contentlet_Actionlet_Tag () throws DotSecurit\n         Assert.assertTrue(contentletPublished.isLive());\n     }\n \n+    private void checkContentSaved(final Contentlet contentletSaved) throws DotDataException {\n+        Assert.assertNotNull(contentletSaved);\n+        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"title\"));\n+        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"txt\"));\n+\n+        final List<TagInode> tagInodes = APILocator.getTagAPI().getTagInodesByInode(contentletSaved.getInode());\n+        Assert.assertNotNull(tagInodes);\n+        Assert.assertFalse(tagInodes.isEmpty());\n+\n+        contentletSaved.setTags();\n+    }\n+\n+    @NotNull\n+    private static void addPermissionToAddChildren(final Role role, final ContentType contentType) throws DotDataException {\n+\n+        final Permission contentTypePermission = getPermission(role, contentType, PermissionLevel.WRITE.getType());\n+\n+        try {\n+\n+            APILocator.getPermissionAPI().save(contentTypePermission, contentType, systemUser, false);\n+\n+        } catch (DotDataException | DotSecurityException e){\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @NotNull\n+    private static void addPermissionToActions(final Role role) throws DotDataException {\n+        final WorkflowAction saveAction = FactoryLocator.getWorkFlowFactory().findAction(SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID);\n+        final WorkflowAction publishAction = FactoryLocator.getWorkFlowFactory().findAction(SystemWorkflowConstants.WORKFLOW_PUBLISH_ACTION_ID);\n+\n+        final Permission publishPermission = getPermission(role, publishAction, PermissionLevel.USE.getType());\n+        final Permission savePermission = getPermission(role, saveAction, PermissionLevel.USE.getType());\n+\n+        try {\n+             APILocator.getPermissionAPI().save(savePermission, saveAction, systemUser, false);\n+            APILocator.getPermissionAPI().save(publishPermission, publishAction, systemUser, false);\n+\n+        } catch (DotDataException | DotSecurityException e){\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static WorkflowAction getSaveActionFromSystemSchema(final String actionName){", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODMwOA==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488308", "bodyText": "Issue found: Avoid unused imports such as 'org.mockito.Mockito'", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:09Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentAsDraftActionletTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.categories.business.CategoryAPI;\n+import com.dotmarketing.portlets.categories.model.Category;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.structure.model.ContentletRelationships;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.mockito.Mockito.*;", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODMxNg==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488316", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.util.CollectionsUtils.set'", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:10Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -6,57 +6,155 @@\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n import com.dotmarketing.portlets.folders.business.FolderAPI;\n import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkFlowFactory;\n import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n import com.dotmarketing.tag.model.TagInode;\n+import com.github.rjeschke.txtmark.Run;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.jetbrains.annotations.NotNull;\n import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.*;\n \n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.set;", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODMyMA==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488320", "bodyText": "Issue found: Avoid unused local variables such as 'userWithPermission'.", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:11Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -6,57 +6,155 @@\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n import com.dotmarketing.portlets.folders.business.FolderAPI;\n import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkFlowFactory;\n import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n import com.dotmarketing.tag.model.TagInode;\n+import com.github.rjeschke.txtmark.Run;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.jetbrains.annotations.NotNull;\n import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.*;\n \n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.set;\n+\n+@RunWith(DataProviderRunner.class)\n public class SaveContentActionletTest extends BaseWorkflowIntegrationTest {\n \n-    private static WorkflowAPI workflowAPI = null;\n-    private static ContentTypeAPI contentTypeAPI = null;\n-    private static ContentType customContentType = null;\n-    private static final int LIMIT = 20;\n+    private static User systemUser = APILocator.systemUser();\n+    private static List<ContentType> contentTypes = new ArrayList<>();\n+\n+    private static class TestCase {\n+        private final boolean respectFrontendRoles;\n+        private final User user;\n+        private final boolean hasSaveActionPermission;\n+        private final boolean hasContentTypeAddChildrenPermission;\n+        private final ContentType contentType;\n+\n+        private TestCase(\n+                final boolean respectFrontendRoles,\n+                final User user,\n+                final ContentType contentType,\n+                final boolean hasSaveActionPermission,\n+                final boolean hasContentTypeAddChildrenPermission) {\n+            this.respectFrontendRoles = respectFrontendRoles;\n+            this.user = user;\n+            this.hasSaveActionPermission = hasSaveActionPermission;\n+            this.hasContentTypeAddChildrenPermission = hasContentTypeAddChildrenPermission;\n+            this.contentType = contentType;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] usersAndContentTypeWithoutHostField() throws Exception {\n+        // creates the type to trigger the scheme\n+        final ContentType contentType = createTestType();\n+        contentTypes.add(contentType);\n+\n+        final User userWithPermission = createUserWithPermission(contentType);", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODMyNQ==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488325", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:12Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -83,48 +188,96 @@ private static ContentType createTestType(final ContentTypeAPI contentTypeAPI)\n     @AfterClass\n     public static void cleanup()\n             throws DotDataException, DotSecurityException {\n+        for (final ContentType contentType : contentTypes) {\n+            if (null != contentType) {\n \n-        if (null != customContentType) {\n-\n-            final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n-            contentTypeAPI.delete(customContentType);\n+                final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+                contentTypeAPI.delete(contentType);\n+            }\n         }\n \n         cleanupDebug(SaveContentActionletTest.class);\n     } // cleanup\n \n+    /**\n+     * Method to test: {@link WorkflowAPI#fireContentWorkflow(Contentlet, ContentletDependencies)}\n+     * Given Scenario: Try to Save and publish a {@link Contentlet} with different users, when the ContentType does not\n+     * have a 'Site or folder' field\n+     * Expected Result: The follow are the expected result according to the user\n+     * - If the user is system should save and publish the contentlet\n+     * - If the user have {@link PermissionLevel#CAN_ADD_CHILDREN} over the ContentType\n+     * - If the user doesn't have any permission should throw a DotSecurityException when try to save it\n+     * - If the user just has {@link PermissionLevel#CAN_ADD_CHILDREN} over the save {@link ContentType} then should throw a DotSecurityException when try to save it\n+     */\n     @Test\n-    public void test_Publish_With_Save_Contentlet_Actionlet_Tag () throws DotSecurityException, DotDataException {\n+    @UseDataProvider(\"usersAndContentTypeWithoutHostField\")\n+    public void test_Publish_With_Save_Contentlet (final TestCase testCase) throws DotSecurityException, DotDataException {\n+        final WorkflowAPI workflowAPI = APILocator.getWorkflowAPI();\n \n-        final Contentlet contentlet = new Contentlet();\n-        contentlet.setContentType(customContentType);\n-        contentlet.setProperty(\"title\", \"Test\");\n-        contentlet.setProperty(\"txt\", \"Test\");\n-        contentlet.setProperty(\"tag\", \"test\");\n+        final Contentlet contentlet = new ContentletDataGen(testCase.contentType.id())\n+            .setProperty(\"title\", \"Test\")\n+            .setProperty(\"txt\", \"Test\")\n+            .setProperty(\"tag\", \"test\")\n+            .next();\n \n-        final Contentlet contentletSaved =\n-                workflowAPI.fireContentWorkflow(contentlet,\n-                    new ContentletDependencies.Builder()\n-                        .modUser(APILocator.systemUser())\n-                        .workflowActionId(SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID)\n-                        .build());\n+        Contentlet contentletSaved = null;\n \n-        Assert.assertNotNull(contentletSaved);\n-        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"title\"));\n-        Assert.assertEquals(\"Test\", contentletSaved.getStringProperty(\"txt\"));\n+        try {\n+            contentletSaved =\n+                    workflowAPI.fireContentWorkflow(contentlet,\n+                            new ContentletDependencies.Builder()\n+                                    .modUser(testCase.user)\n+                                    .respectAnonymousPermissions(testCase.respectFrontendRoles)\n+                                    .workflowActionId(SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID)\n+                                    .build());\n \n-        final List<TagInode> tagInodes = APILocator.getTagAPI().getTagInodesByInode(contentletSaved.getInode());\n-        Assert.assertNotNull(tagInodes);\n-        Assert.assertFalse(tagInodes.isEmpty());\n+            checkContentSaved(contentletSaved);\n+\n+            Assert.assertTrue(\n+                    testCase.hasContentTypeAddChildrenPermission &&\n+                            testCase.hasSaveActionPermission ||\n+                            (testCase.respectFrontendRoles && this.haveFrontendPermission(testCase.contentType))", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODMzMg==", "url": "https://github.com/dotCMS/core/pull/18300#discussion_r410488332", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "author": "dev-dotcms", "createdAt": "2020-04-17T21:54:13Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/SaveContentActionletTest.java", "diffHunk": "@@ -6,57 +6,155 @@\n import com.dotcms.contenttype.model.type.ContentType;\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.exception.ExceptionUtil;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n import com.dotmarketing.portlets.folders.business.FolderAPI;\n import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkFlowFactory;\n import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n import com.dotmarketing.portlets.workflows.model.WorkflowScheme;\n import com.dotmarketing.tag.model.TagInode;\n+import com.github.rjeschke.txtmark.Run;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.jetbrains.annotations.NotNull;\n import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.*;\n \n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.set;\n+\n+@RunWith(DataProviderRunner.class)\n public class SaveContentActionletTest extends BaseWorkflowIntegrationTest {\n \n-    private static WorkflowAPI workflowAPI = null;\n-    private static ContentTypeAPI contentTypeAPI = null;\n-    private static ContentType customContentType = null;\n-    private static final int LIMIT = 20;\n+    private static User systemUser = APILocator.systemUser();\n+    private static List<ContentType> contentTypes = new ArrayList<>();\n+\n+    private static class TestCase {\n+        private final boolean respectFrontendRoles;\n+        private final User user;\n+        private final boolean hasSaveActionPermission;\n+        private final boolean hasContentTypeAddChildrenPermission;\n+        private final ContentType contentType;\n+\n+        private TestCase(\n+                final boolean respectFrontendRoles,\n+                final User user,\n+                final ContentType contentType,\n+                final boolean hasSaveActionPermission,\n+                final boolean hasContentTypeAddChildrenPermission) {\n+            this.respectFrontendRoles = respectFrontendRoles;\n+            this.user = user;\n+            this.hasSaveActionPermission = hasSaveActionPermission;\n+            this.hasContentTypeAddChildrenPermission = hasContentTypeAddChildrenPermission;\n+            this.contentType = contentType;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] usersAndContentTypeWithoutHostField() throws Exception {\n+        // creates the type to trigger the scheme\n+        final ContentType contentType = createTestType();\n+        contentTypes.add(contentType);\n+\n+        final User userWithPermission = createUserWithPermission(contentType);", "originalCommit": "c31a385f03597c5ec2bc9d6416418c3a61c1e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}