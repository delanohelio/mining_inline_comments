{"pr_number": 19493, "pr_title": "Issue 19440 apps button", "pr_createdAt": "2020-10-23T19:14:41Z", "pr_url": "https://github.com/dotCMS/core/pull/19493", "timeline": [{"oid": "b462e8f0d0e405d2878ad8f9bd28641ef00f0701", "url": "https://github.com/dotCMS/core/commit/b462e8f0d0e405d2878ad8f9bd28641ef00f0701", "message": "#19440 initial commit", "committedDate": "2020-10-21T15:57:56Z", "type": "commit"}, {"oid": "0d71f2be4cfaac59457eab3467427d23bb716a8c", "url": "https://github.com/dotCMS/core/commit/0d71f2be4cfaac59457eab3467427d23bb716a8c", "message": "Merge branch 'master' into issue-19440-apps-button", "committedDate": "2020-10-21T20:14:46Z", "type": "commit"}, {"oid": "dbe8fec810f036add6f0456bcb0e628611fc340c", "url": "https://github.com/dotCMS/core/commit/dbe8fec810f036add6f0456bcb0e628611fc340c", "message": "#19440 adding velocity templates capabilities to the yml apps", "committedDate": "2020-10-23T01:58:26Z", "type": "commit"}, {"oid": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "url": "https://github.com/dotCMS/core/commit/a915f4e685f77d9c19e16fc222d841dde1a18e7a", "message": "#19440 adding interpolation test to MainSuit", "committedDate": "2020-10-23T19:13:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTQyNQ==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101425", "bodyText": "Codacy found an issue: The String literal \"param1\" appears 5 times in this file; the first occurrence is on line 55", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:11Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/view/AppsInterpolationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.AppDescriptorDataGen;\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotcms.security.apps.AppDescriptor;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Secret;\n+import com.dotcms.security.apps.Type;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class AppsInterpolationTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    static final ObjectMapper mapper = DotObjectMapperProvider.getInstance()\n+            .getDefaultObjectMapper();\n+\n+    /**\n+     * Given scenario: we build an AppView json based on an AppDescriptor. This fires the serializers so that any embedded velocity code will br processed\n+     * Expected Results: No velocity variable declared in the data model used to create the initial json such as `$myva` should make it in the result.\n+     * Also we validate the replacements individually.\n+     * @throws JsonProcessingException\n+     */\n+    @Test\n+    public void Test_Interpolation() throws JsonProcessingException {\n+\n+        final List<Map<String, String>> list = ImmutableList.of(\n+                ImmutableMap.of(\"label\", \"-\", \"value\", \"\"),\n+                ImmutableMap.of(\"label\", \"$uno\", \"value\", \"1\"),\n+                //This entry is required to be mutable since the selected attribute gets removed internally.\n+                new HashMap<>(ImmutableMap.of(\"label\", \"dos\", \"value\", \"2\", \"selected\", \"true\")),\n+                ImmutableMap.of(\"label\", \"tres\", \"value\", \"3\")\n+        );\n+\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"param1\", false, true, \"lol\", \"name is `$param1.name`.\", \"This is `$param2.value`'s hint.\")", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTQzNw==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101437", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:12Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/ViewUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import com.dotmarketing.util.Logger;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.velocity.Template;\n+import org.apache.velocity.VelocityContext;\n+import org.apache.velocity.runtime.RuntimeServices;\n+import org.apache.velocity.runtime.RuntimeSingleton;\n+import org.apache.velocity.runtime.parser.ParseException;\n+import org.apache.velocity.runtime.parser.node.SimpleNode;\n+\n+class ViewUtil {\n+\n+    private static final ThreadLocal<StackContext> threadLocal = new ThreadLocal<>();\n+\n+    static void newStackContext(final AppView appView) {\n+        threadLocal.set(new StackContext(appView));\n+    }\n+\n+    private static StackContext currentStackContext() {\n+        return threadLocal.get();\n+    }\n+\n+    static void currentSite(final String siteId) {\n+        final StackContext currentStack = currentStackContext();\n+        if(null == currentStack){\n+            throw new IllegalStateException(\"Create stack hasn't been called yet.\");\n+        }\n+        currentStack.currentSite = siteId;\n+    }\n+\n+    static void pushSecret(final Map<String, Object> map) {\n+        final StackContext context = currentStackContext();\n+        if(null == context){\n+            throw new IllegalStateException(\"Create stack hasn't been called yet.\");\n+        }\n+        if (null == context.currentSite) {\n+            throw new IllegalStateException(\n+                    \"Site must be pushed prior to pushing a secret.\");\n+        }\n+        context.secretsBySite.computeIfAbsent(context.currentSite, k -> new ArrayList<>()).add(map);\n+    }\n+\n+    static void disposeStackContext() {\n+        threadLocal.remove();\n+    }\n+\n+    static class StackContext {\n+\n+        final Map<String, List<Map<String,Object>>> secretsBySite = new HashMap<>();\n+\n+        final AppView appView;\n+\n+        String currentSite;\n+\n+        StackContext(final AppView appView) {\n+           this.appView = appView;\n+        }\n+\n+    }\n+\n+    public static class SecretHolder {\n+\n+        private final String name;\n+        private final String label;\n+        private final String hint;\n+        private final Object value;\n+\n+        SecretHolder(final String name, final String label, final String hint, Object value) {\n+            this.name = name;\n+            this.value = value;\n+            this.label = label;\n+            this.hint = hint;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public Object getValue() {\n+            return value;\n+        }\n+\n+        public String getLabel() {\n+            return label;\n+        }\n+\n+        public String getHint() {\n+            return hint;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"SecretHolder{\" +\n+                    \"name='\" + name + '\\'' +\n+                    \", value='\" + value + '\\'' +\n+                    \", label='\" + label + '\\'' +\n+                    \", hint='\" + hint + '\\'' +\n+                    '}';\n+        }\n+    }\n+\n+\n+    static String interpolateValues(final String inputJson) {\n+        final StackContext context = ViewUtil.currentStackContext();\n+        if (null == context) {\n+            throw new IllegalStateException(\n+                    \"This method can only be called once a context has been previously created.\");\n+        }\n+        try {\n+            final RuntimeServices runtimeServices = RuntimeSingleton.getRuntimeServices();\n+            final StringReader stringReader = new StringReader(inputJson);\n+            final SimpleNode simpleNode = runtimeServices.parse(stringReader, \"app template\");\n+\n+            final Template template = new Template();\n+            template.setData(simpleNode);\n+            template.initDocument();\n+\n+            final VelocityContext velocityContext = new VelocityContext();\n+\n+            velocityContext.put(\"app\", context.appView);\n+\n+            final List<SiteView> sites = context.appView.getSites();\n+            if (null != sites) {\n+                final Map<String, SiteView> sitesById = sites.stream()\n+                        .collect(Collectors.toMap(SiteView::getId, Function.identity()));\n+\n+                if (null != context.currentSite) {\n+\n+                    final SiteView siteView = sitesById.get(context.currentSite);\n+\n+                    velocityContext.put(\"siteId\", context.currentSite);\n+                    velocityContext.put(\"siteName\", siteView.getName());\n+                    velocityContext.put(\"configured\", siteView.isConfigured());\n+\n+                    final List<Map<String, Object>> currentSiteSecrets = context.secretsBySite\n+                            .get(context.currentSite);\n+                    if (null != currentSiteSecrets) {\n+                        for (final Map<String, Object> siteSecret : currentSiteSecrets) {\n+                            final String name = (String) siteSecret.get(\"name\");\n+                            final String hint = (String) siteSecret.get(\"hint\");\n+                            final String label = (String) siteSecret.get(\"label\");\n+                            final Object value = siteSecret.get(\"value\");\n+                            velocityContext.put(name, new SecretHolder(name, label, hint, value));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            final StringWriter stringWriter = new StringWriter();\n+            template.merge(velocityContext, stringWriter);\n+            return stringWriter.toString();\n+        } catch (Exception e) {", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTQ1MA==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101450", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.apache.velocity.runtime.parser.ParseException'", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:13Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/ViewUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import com.dotmarketing.util.Logger;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.velocity.Template;\n+import org.apache.velocity.VelocityContext;\n+import org.apache.velocity.runtime.RuntimeServices;\n+import org.apache.velocity.runtime.RuntimeSingleton;\n+import org.apache.velocity.runtime.parser.ParseException;", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTQ1OA==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101458", "bodyText": "Codacy found an issue: Ensure that resources like this StringReader object are closed after use", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:14Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/ViewUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import com.dotmarketing.util.Logger;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.velocity.Template;\n+import org.apache.velocity.VelocityContext;\n+import org.apache.velocity.runtime.RuntimeServices;\n+import org.apache.velocity.runtime.RuntimeSingleton;\n+import org.apache.velocity.runtime.parser.ParseException;\n+import org.apache.velocity.runtime.parser.node.SimpleNode;\n+\n+class ViewUtil {\n+\n+    private static final ThreadLocal<StackContext> threadLocal = new ThreadLocal<>();\n+\n+    static void newStackContext(final AppView appView) {\n+        threadLocal.set(new StackContext(appView));\n+    }\n+\n+    private static StackContext currentStackContext() {\n+        return threadLocal.get();\n+    }\n+\n+    static void currentSite(final String siteId) {\n+        final StackContext currentStack = currentStackContext();\n+        if(null == currentStack){\n+            throw new IllegalStateException(\"Create stack hasn't been called yet.\");\n+        }\n+        currentStack.currentSite = siteId;\n+    }\n+\n+    static void pushSecret(final Map<String, Object> map) {\n+        final StackContext context = currentStackContext();\n+        if(null == context){\n+            throw new IllegalStateException(\"Create stack hasn't been called yet.\");\n+        }\n+        if (null == context.currentSite) {\n+            throw new IllegalStateException(\n+                    \"Site must be pushed prior to pushing a secret.\");\n+        }\n+        context.secretsBySite.computeIfAbsent(context.currentSite, k -> new ArrayList<>()).add(map);\n+    }\n+\n+    static void disposeStackContext() {\n+        threadLocal.remove();\n+    }\n+\n+    static class StackContext {\n+\n+        final Map<String, List<Map<String,Object>>> secretsBySite = new HashMap<>();\n+\n+        final AppView appView;\n+\n+        String currentSite;\n+\n+        StackContext(final AppView appView) {\n+           this.appView = appView;\n+        }\n+\n+    }\n+\n+    public static class SecretHolder {\n+\n+        private final String name;\n+        private final String label;\n+        private final String hint;\n+        private final Object value;\n+\n+        SecretHolder(final String name, final String label, final String hint, Object value) {\n+            this.name = name;\n+            this.value = value;\n+            this.label = label;\n+            this.hint = hint;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public Object getValue() {\n+            return value;\n+        }\n+\n+        public String getLabel() {\n+            return label;\n+        }\n+\n+        public String getHint() {\n+            return hint;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"SecretHolder{\" +\n+                    \"name='\" + name + '\\'' +\n+                    \", value='\" + value + '\\'' +\n+                    \", label='\" + label + '\\'' +\n+                    \", hint='\" + hint + '\\'' +\n+                    '}';\n+        }\n+    }\n+\n+\n+    static String interpolateValues(final String inputJson) {\n+        final StackContext context = ViewUtil.currentStackContext();\n+        if (null == context) {\n+            throw new IllegalStateException(\n+                    \"This method can only be called once a context has been previously created.\");\n+        }\n+        try {\n+            final RuntimeServices runtimeServices = RuntimeSingleton.getRuntimeServices();\n+            final StringReader stringReader = new StringReader(inputJson);", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTQ2Mw==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101463", "bodyText": "Codacy found an issue: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:15Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/ViewUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import com.dotmarketing.util.Logger;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.velocity.Template;\n+import org.apache.velocity.VelocityContext;\n+import org.apache.velocity.runtime.RuntimeServices;\n+import org.apache.velocity.runtime.RuntimeSingleton;\n+import org.apache.velocity.runtime.parser.ParseException;\n+import org.apache.velocity.runtime.parser.node.SimpleNode;\n+\n+class ViewUtil {", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTQ3Mw==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101473", "bodyText": "Codacy found an issue: The String literal \"label\" appears 6 times in this file; the first occurrence is on line 47", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:16Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/view/AppsInterpolationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.AppDescriptorDataGen;\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotcms.security.apps.AppDescriptor;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Secret;\n+import com.dotcms.security.apps.Type;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class AppsInterpolationTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    static final ObjectMapper mapper = DotObjectMapperProvider.getInstance()\n+            .getDefaultObjectMapper();\n+\n+    /**\n+     * Given scenario: we build an AppView json based on an AppDescriptor. This fires the serializers so that any embedded velocity code will br processed\n+     * Expected Results: No velocity variable declared in the data model used to create the initial json such as `$myva` should make it in the result.\n+     * Also we validate the replacements individually.\n+     * @throws JsonProcessingException\n+     */\n+    @Test\n+    public void Test_Interpolation() throws JsonProcessingException {\n+\n+        final List<Map<String, String>> list = ImmutableList.of(\n+                ImmutableMap.of(\"label\", \"-\", \"value\", \"\"),", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTQ4OA==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101488", "bodyText": "Codacy found an issue: The String literal \"selectParam\" appears 5 times in this file; the first occurrence is on line 57", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:17Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/view/AppsInterpolationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.AppDescriptorDataGen;\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotcms.security.apps.AppDescriptor;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Secret;\n+import com.dotcms.security.apps.Type;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class AppsInterpolationTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    static final ObjectMapper mapper = DotObjectMapperProvider.getInstance()\n+            .getDefaultObjectMapper();\n+\n+    /**\n+     * Given scenario: we build an AppView json based on an AppDescriptor. This fires the serializers so that any embedded velocity code will br processed\n+     * Expected Results: No velocity variable declared in the data model used to create the initial json such as `$myva` should make it in the result.\n+     * Also we validate the replacements individually.\n+     * @throws JsonProcessingException\n+     */\n+    @Test\n+    public void Test_Interpolation() throws JsonProcessingException {\n+\n+        final List<Map<String, String>> list = ImmutableList.of(\n+                ImmutableMap.of(\"label\", \"-\", \"value\", \"\"),\n+                ImmutableMap.of(\"label\", \"$uno\", \"value\", \"1\"),\n+                //This entry is required to be mutable since the selected attribute gets removed internally.\n+                new HashMap<>(ImmutableMap.of(\"label\", \"dos\", \"value\", \"2\", \"selected\", \"true\")),\n+                ImmutableMap.of(\"label\", \"tres\", \"value\", \"3\")\n+        );\n+\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"param1\", false, true, \"lol\", \"name is `$param1.name`.\", \"This is `$param2.value`'s hint.\")\n+                .stringParam(\"param2\", false, true, \"none\", \"name is `$param2.name`.\", \"This is `$param1.value`'s hint.\")\n+                .selectParam(\"selectParam\", true, list)", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTUwNQ==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101505", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:18Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/view/AppsInterpolationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.AppDescriptorDataGen;\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotcms.security.apps.AppDescriptor;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Secret;\n+import com.dotcms.security.apps.Type;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class AppsInterpolationTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEwMTUxNQ==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r511101515", "bodyText": "Codacy found an issue: The String literal \"param2\" appears 5 times in this file; the first occurrence is on line 56", "author": "dev-dotcms", "createdAt": "2020-10-23T19:22:19Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/view/AppsInterpolationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.AppDescriptorDataGen;\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotcms.security.apps.AppDescriptor;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Secret;\n+import com.dotcms.security.apps.Type;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class AppsInterpolationTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    static final ObjectMapper mapper = DotObjectMapperProvider.getInstance()\n+            .getDefaultObjectMapper();\n+\n+    /**\n+     * Given scenario: we build an AppView json based on an AppDescriptor. This fires the serializers so that any embedded velocity code will br processed\n+     * Expected Results: No velocity variable declared in the data model used to create the initial json such as `$myva` should make it in the result.\n+     * Also we validate the replacements individually.\n+     * @throws JsonProcessingException\n+     */\n+    @Test\n+    public void Test_Interpolation() throws JsonProcessingException {\n+\n+        final List<Map<String, String>> list = ImmutableList.of(\n+                ImmutableMap.of(\"label\", \"-\", \"value\", \"\"),\n+                ImmutableMap.of(\"label\", \"$uno\", \"value\", \"1\"),\n+                //This entry is required to be mutable since the selected attribute gets removed internally.\n+                new HashMap<>(ImmutableMap.of(\"label\", \"dos\", \"value\", \"2\", \"selected\", \"true\")),\n+                ImmutableMap.of(\"label\", \"tres\", \"value\", \"3\")\n+        );\n+\n+        final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                .stringParam(\"param1\", false, true, \"lol\", \"name is `$param1.name`.\", \"This is `$param2.value`'s hint.\")\n+                .stringParam(\"param2\", false, true, \"none\", \"name is `$param2.name`.\", \"This is `$param1.value`'s hint.\")", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5NDEwNg==", "url": "https://github.com/dotCMS/core/pull/19493#discussion_r512094106", "bodyText": "Some doc", "author": "jdotcms", "createdAt": "2020-10-26T16:25:44Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/ViewUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import com.dotmarketing.util.Logger;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.velocity.Template;\n+import org.apache.velocity.VelocityContext;\n+import org.apache.velocity.runtime.RuntimeServices;\n+import org.apache.velocity.runtime.RuntimeSingleton;\n+import org.apache.velocity.runtime.parser.ParseException;\n+import org.apache.velocity.runtime.parser.node.SimpleNode;\n+\n+class ViewUtil {", "originalCommit": "a915f4e685f77d9c19e16fc222d841dde1a18e7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}