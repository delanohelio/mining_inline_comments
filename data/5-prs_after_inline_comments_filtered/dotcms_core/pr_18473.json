{"pr_number": 18473, "pr_title": "Issue 18356 whats changed", "pr_createdAt": "2020-05-12T15:50:38Z", "pr_url": "https://github.com/dotCMS/core/pull/18473", "timeline": [{"oid": "2d0da934c0f5a394c0e1ec0e5c492b9bb9c45506", "url": "https://github.com/dotCMS/core/commit/2d0da934c0f5a394c0e1ec0e5c492b9bb9c45506", "message": "#18356 whats changed", "committedDate": "2020-05-11T14:59:20Z", "type": "commit"}, {"oid": "c3750272d57d9cd26c6af473c21b48fd431a54bd", "url": "https://github.com/dotCMS/core/commit/c3750272d57d9cd26c6af473c21b48fd431a54bd", "message": "#18356  adding a diff tool test", "committedDate": "2020-05-12T15:29:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTQwMg==", "url": "https://github.com/dotCMS/core/pull/18473#discussion_r423855402", "bodyText": "Expected Result looks incomplete", "author": "dsilvam", "createdAt": "2020-05-12T16:07:16Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/HTMLDiffUtilTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.enterprise;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.repackage.org.jsoup.Jsoup;\n+import com.dotcms.repackage.org.jsoup.nodes.Document;\n+import com.dotcms.repackage.org.jsoup.nodes.Element;\n+import com.dotcms.repackage.org.jsoup.select.Elements;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.factories.MultiTreeAPI;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+public class HTMLDiffUtilTest extends IntegrationTestBase {\n+\n+    private static ContentletAPI contentletAPI;\n+    private static MultiTreeAPI multiTreeAPI;\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+    private static Language defaultLang;\n+    private static String uuid;\n+\n+    private static final String NOTHING_CHANGED = \"Nothing Changed\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+        contentletAPI = APILocator.getContentletAPI();\n+        final LanguageAPI languageAPI = APILocator.getLanguageAPI();\n+        multiTreeAPI = APILocator.getMultiTreeAPI();\n+        systemUser = APILocator.systemUser();\n+        site = new SiteDataGen().nextPersisted();\n+        defaultLang = languageAPI.getDefaultLanguage();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"anyTestContainer\" + System.currentTimeMillis();\n+        uuid = UUIDGenerator.generateUuid();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier(), uuid)\n+                .nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+    }\n+\n+    /**\n+     * Given scenario: We have a page created out of a layout and a container. The Container holds a List of items.\n+     * Expected Result:  We create", "originalCommit": "c3750272d57d9cd26c6af473c21b48fd431a54bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34a8e74ea794bf4efb423d4ef7e0ad5168c2ec9c", "url": "https://github.com/dotCMS/core/commit/34a8e74ea794bf4efb423d4ef7e0ad5168c2ec9c", "message": "#18356 improve javadoc", "committedDate": "2020-05-12T17:38:34Z", "type": "commit"}, {"oid": "ce1d90744a8cc00cf4c728c98681df4605ac0a73", "url": "https://github.com/dotCMS/core/commit/ce1d90744a8cc00cf4c728c98681df4605ac0a73", "message": "#18356 feedback", "committedDate": "2020-05-12T17:44:58Z", "type": "commit"}, {"oid": "fc13aca3811836abe30f29c75eb810f7557eb466", "url": "https://github.com/dotCMS/core/commit/fc13aca3811836abe30f29c75eb810f7557eb466", "message": "#18356 feedback", "committedDate": "2020-05-12T18:02:03Z", "type": "commit"}, {"oid": "056bd139924fd2514d1b0cf4e49d86f97e1f8a56", "url": "https://github.com/dotCMS/core/commit/056bd139924fd2514d1b0cf4e49d86f97e1f8a56", "message": "#18356 test must use HTMLDiffUtilProxy", "committedDate": "2020-05-13T15:49:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTM3OQ==", "url": "https://github.com/dotCMS/core/pull/18473#discussion_r424559379", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-05-13T16:09:32Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/HTMLDiffUtilTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package com.dotcms.enterprise;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.repackage.org.jsoup.Jsoup;\n+import com.dotcms.repackage.org.jsoup.nodes.Document;\n+import com.dotcms.repackage.org.jsoup.nodes.Element;\n+import com.dotcms.repackage.org.jsoup.select.Elements;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.factories.MultiTreeAPI;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+public class HTMLDiffUtilTest extends IntegrationTestBase {\n+\n+    private static ContentletAPI contentletAPI;\n+    private static MultiTreeAPI multiTreeAPI;\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+    private static Language defaultLang;\n+    private static String uuid;\n+\n+    private static final String NOTHING_CHANGED = \"Nothing Changed\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+        contentletAPI = APILocator.getContentletAPI();\n+        final LanguageAPI languageAPI = APILocator.getLanguageAPI();\n+        multiTreeAPI = APILocator.getMultiTreeAPI();\n+        systemUser = APILocator.systemUser();\n+        site = new SiteDataGen().nextPersisted();\n+        defaultLang = languageAPI.getDefaultLanguage();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"anyTestContainer\" + System.currentTimeMillis();\n+        uuid = UUIDGenerator.generateUuid();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier(), uuid)\n+                .nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+    }\n+\n+    /**\n+     * Given scenario: We have a page created out of a layout and a container. The Container holds a List of items.\n+     * Expected Result:  We create a working copy and modify the list of items. The new items must replace the old ones.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void Test_Page_With_Changes_Expect_Difference() throws Exception {\n+\n+        final String pageName = \"seekers-expect-difference-page\";\n+\n+        final Set<String> seekers = ImmutableSet.of(\"Skywarp\", \"Starscream\", \"Thundercracker\");\n+\n+        final Set<String> coneheads = ImmutableSet.of(\"Thrust\", \"Ramjet\", \"Dirge\");\n+\n+        final Contentlet contentlet = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang.getId())\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"seekers\")\n+                .setProperty(\"body\", String.join(\",\", seekers))\n+                .nextPersisted();\n+\n+        contentlet.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet, systemUser, false);\n+\n+        final HTMLPageAsset pageLive = new HTMLPageDataGen(folder, template).languageId(defaultLang.getId())\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+\n+        final MultiTree multiTreeV1 = new MultiTree(pageLive.getIdentifier(),\n+                container.getIdentifier(), contentlet.getIdentifier(),\n+                getDotParserContainerUUID(uuid), 0);\n+        multiTreeAPI.saveMultiTree(multiTreeV1);\n+        HTMLPageDataGen.publish(pageLive);\n+\n+        final Contentlet workingPage = contentletAPI\n+                .checkout(pageLive.getInode(), systemUser, false);\n+        final Contentlet checkedOut = contentletAPI\n+                .checkout(contentlet.getInode(), systemUser, false);\n+        checkedOut.setProperty(\"body\", String.join(\",\", coneheads));\n+        contentletAPI.checkin(checkedOut, systemUser, false);\n+        contentletAPI.checkin(workingPage, systemUser, false);\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(request.getRequestURI()).thenReturn(\"/\"+pageName);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER_ID))\n+                .thenReturn(systemUser.getUserId());\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER)).thenReturn(systemUser);\n+        when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        when(request.getParameter(\"host_id\")).thenReturn(site.getIdentifier());\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(site);\n+        when(session.getAttribute(WebKeys.HTMLPAGE_LANGUAGE)).thenReturn(defaultLang.getId()+\"\");\n+        when(session.getAttribute(WebKeys.PAGE_MODE_SESSION)).thenReturn(PageMode.PREVIEW_MODE);\n+\n+        // Collection to store attributes keys/values\n+        final Map<String, Object> attributes = new ConcurrentHashMap<>();\n+\n+        // Mock setAttribute\n+        Mockito.doAnswer((Answer<Void>) invocation -> {\n+            final String key = invocation.getArgumentAt(0, String.class);\n+            final Object value = invocation.getArgumentAt(1, Object.class);\n+            attributes.put(key, value);\n+            return null;\n+        }).when(request).setAttribute(Mockito.anyString(), Mockito.anyObject());\n+\n+        // Mock getAttribute\n+        Mockito.doAnswer((Answer<Object>) invocation -> {\n+            final String key = invocation.getArgumentAt(0, String.class);\n+            return attributes.get(key);\n+        }).when(request).getAttribute(Mockito.anyString());\n+\n+        final String diff = new HTMLDiffUtilProxy().htmlDiffPage(pageLive, systemUser, request, response);\n+        Assert.assertNotEquals(NOTHING_CHANGED,diff);\n+        final Document document = Jsoup.parse(diff);\n+        final Elements removedElements = document.select(\"span.diff-html-removed\");\n+        for (final Element removedElement : removedElements) {\n+           Assert.assertTrue(seekers.contains(removedElement.text()));\n+        }\n+\n+        final Elements addedElements = document.select(\"span.diff-html-added\");\n+        for (final Element addedElement : addedElements) {\n+            Assert.assertTrue(coneheads.contains(addedElement.text()));\n+        }\n+    }\n+\n+\n+    /**\n+     *Given scenario: We have a page created out of a layout and a container. The Container holds a List of items.\n+     * Expected Result:  We create a working copy od the page but this one isn't modified. So whn compared\n+     * @throws Exception\n+     */\n+    @Test\n+    public void Test_Page_No_Changes_Expect_Nothing_Changed_Message() throws Exception {", "originalCommit": "056bd139924fd2514d1b0cf4e49d86f97e1f8a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTM5MQ==", "url": "https://github.com/dotCMS/core/pull/18473#discussion_r424559391", "bodyText": "Issue found: Do not add empty strings", "author": "dev-dotcms", "createdAt": "2020-05-13T16:09:33Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/HTMLDiffUtilTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package com.dotcms.enterprise;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.repackage.org.jsoup.Jsoup;\n+import com.dotcms.repackage.org.jsoup.nodes.Document;\n+import com.dotcms.repackage.org.jsoup.nodes.Element;\n+import com.dotcms.repackage.org.jsoup.select.Elements;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.factories.MultiTreeAPI;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+public class HTMLDiffUtilTest extends IntegrationTestBase {\n+\n+    private static ContentletAPI contentletAPI;\n+    private static MultiTreeAPI multiTreeAPI;\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+    private static Language defaultLang;\n+    private static String uuid;\n+\n+    private static final String NOTHING_CHANGED = \"Nothing Changed\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+        contentletAPI = APILocator.getContentletAPI();\n+        final LanguageAPI languageAPI = APILocator.getLanguageAPI();\n+        multiTreeAPI = APILocator.getMultiTreeAPI();\n+        systemUser = APILocator.systemUser();\n+        site = new SiteDataGen().nextPersisted();\n+        defaultLang = languageAPI.getDefaultLanguage();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"anyTestContainer\" + System.currentTimeMillis();\n+        uuid = UUIDGenerator.generateUuid();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier(), uuid)\n+                .nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+    }\n+\n+    /**\n+     * Given scenario: We have a page created out of a layout and a container. The Container holds a List of items.\n+     * Expected Result:  We create a working copy and modify the list of items. The new items must replace the old ones.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void Test_Page_With_Changes_Expect_Difference() throws Exception {\n+\n+        final String pageName = \"seekers-expect-difference-page\";\n+\n+        final Set<String> seekers = ImmutableSet.of(\"Skywarp\", \"Starscream\", \"Thundercracker\");\n+\n+        final Set<String> coneheads = ImmutableSet.of(\"Thrust\", \"Ramjet\", \"Dirge\");\n+\n+        final Contentlet contentlet = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang.getId())\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"seekers\")\n+                .setProperty(\"body\", String.join(\",\", seekers))\n+                .nextPersisted();\n+\n+        contentlet.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet, systemUser, false);\n+\n+        final HTMLPageAsset pageLive = new HTMLPageDataGen(folder, template).languageId(defaultLang.getId())\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+\n+        final MultiTree multiTreeV1 = new MultiTree(pageLive.getIdentifier(),\n+                container.getIdentifier(), contentlet.getIdentifier(),\n+                getDotParserContainerUUID(uuid), 0);\n+        multiTreeAPI.saveMultiTree(multiTreeV1);\n+        HTMLPageDataGen.publish(pageLive);\n+\n+        final Contentlet workingPage = contentletAPI\n+                .checkout(pageLive.getInode(), systemUser, false);\n+        final Contentlet checkedOut = contentletAPI\n+                .checkout(contentlet.getInode(), systemUser, false);\n+        checkedOut.setProperty(\"body\", String.join(\",\", coneheads));\n+        contentletAPI.checkin(checkedOut, systemUser, false);\n+        contentletAPI.checkin(workingPage, systemUser, false);\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(request.getRequestURI()).thenReturn(\"/\"+pageName);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER_ID))\n+                .thenReturn(systemUser.getUserId());\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER)).thenReturn(systemUser);\n+        when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        when(request.getParameter(\"host_id\")).thenReturn(site.getIdentifier());\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(site);\n+        when(session.getAttribute(WebKeys.HTMLPAGE_LANGUAGE)).thenReturn(defaultLang.getId()+\"\");\n+        when(session.getAttribute(WebKeys.PAGE_MODE_SESSION)).thenReturn(PageMode.PREVIEW_MODE);\n+\n+        // Collection to store attributes keys/values\n+        final Map<String, Object> attributes = new ConcurrentHashMap<>();\n+\n+        // Mock setAttribute\n+        Mockito.doAnswer((Answer<Void>) invocation -> {\n+            final String key = invocation.getArgumentAt(0, String.class);\n+            final Object value = invocation.getArgumentAt(1, Object.class);\n+            attributes.put(key, value);\n+            return null;\n+        }).when(request).setAttribute(Mockito.anyString(), Mockito.anyObject());\n+\n+        // Mock getAttribute\n+        Mockito.doAnswer((Answer<Object>) invocation -> {\n+            final String key = invocation.getArgumentAt(0, String.class);\n+            return attributes.get(key);\n+        }).when(request).getAttribute(Mockito.anyString());\n+\n+        final String diff = new HTMLDiffUtilProxy().htmlDiffPage(pageLive, systemUser, request, response);\n+        Assert.assertNotEquals(NOTHING_CHANGED,diff);\n+        final Document document = Jsoup.parse(diff);\n+        final Elements removedElements = document.select(\"span.diff-html-removed\");\n+        for (final Element removedElement : removedElements) {\n+           Assert.assertTrue(seekers.contains(removedElement.text()));\n+        }\n+\n+        final Elements addedElements = document.select(\"span.diff-html-added\");\n+        for (final Element addedElement : addedElements) {\n+            Assert.assertTrue(coneheads.contains(addedElement.text()));\n+        }\n+    }\n+\n+\n+    /**\n+     *Given scenario: We have a page created out of a layout and a container. The Container holds a List of items.\n+     * Expected Result:  We create a working copy od the page but this one isn't modified. So whn compared\n+     * @throws Exception\n+     */\n+    @Test\n+    public void Test_Page_No_Changes_Expect_Nothing_Changed_Message() throws Exception {\n+\n+        final String pageName = \"seekers-expect-No-difference-page\";\n+\n+        final Contentlet contentlet = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang.getId())\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"seekers\")\n+                .setProperty(\"body\", \"Skywarp, Starscream, Thundercracker\")\n+                .nextPersisted();\n+\n+        contentlet.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet, systemUser, false);\n+\n+       final HTMLPageAsset pageLive = new HTMLPageDataGen(folder, template).languageId(defaultLang.getId())\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+\n+        final MultiTree multiTreeV1 = new MultiTree(pageLive.getIdentifier(),\n+                container.getIdentifier(), contentlet.getIdentifier(),\n+                getDotParserContainerUUID(uuid), 0);\n+        multiTreeAPI.saveMultiTree(multiTreeV1);\n+        HTMLPageDataGen.publish(pageLive);\n+\n+        //Force a working copy identical to the original\n+        final Contentlet workingPage = contentletAPI.checkout(pageLive.getInode(), systemUser, false);\n+        contentletAPI.checkin(workingPage, systemUser, false);\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(request.getRequestURI()).thenReturn(\"/\"+pageName);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER_ID))\n+                .thenReturn(systemUser.getUserId());\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER)).thenReturn(systemUser);\n+        when(session.getAttribute(com.dotmarketing.util.WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        when(request.getParameter(\"host_id\")).thenReturn(site.getIdentifier());\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(site);\n+        when(session.getAttribute(WebKeys.HTMLPAGE_LANGUAGE)).thenReturn(defaultLang.getId()+\"\");", "originalCommit": "056bd139924fd2514d1b0cf4e49d86f97e1f8a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTQwMw==", "url": "https://github.com/dotCMS/core/pull/18473#discussion_r424559403", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-05-13T16:09:34Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/HTMLDiffUtilTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package com.dotcms.enterprise;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.repackage.org.jsoup.Jsoup;\n+import com.dotcms.repackage.org.jsoup.nodes.Document;\n+import com.dotcms.repackage.org.jsoup.nodes.Element;\n+import com.dotcms.repackage.org.jsoup.select.Elements;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.factories.MultiTreeAPI;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+public class HTMLDiffUtilTest extends IntegrationTestBase {\n+\n+    private static ContentletAPI contentletAPI;\n+    private static MultiTreeAPI multiTreeAPI;\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+    private static Language defaultLang;\n+    private static String uuid;\n+\n+    private static final String NOTHING_CHANGED = \"Nothing Changed\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+        contentletAPI = APILocator.getContentletAPI();\n+        final LanguageAPI languageAPI = APILocator.getLanguageAPI();\n+        multiTreeAPI = APILocator.getMultiTreeAPI();\n+        systemUser = APILocator.systemUser();\n+        site = new SiteDataGen().nextPersisted();\n+        defaultLang = languageAPI.getDefaultLanguage();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"anyTestContainer\" + System.currentTimeMillis();\n+        uuid = UUIDGenerator.generateUuid();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier(), uuid)\n+                .nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+    }\n+\n+    /**\n+     * Given scenario: We have a page created out of a layout and a container. The Container holds a List of items.\n+     * Expected Result:  We create a working copy and modify the list of items. The new items must replace the old ones.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void Test_Page_With_Changes_Expect_Difference() throws Exception {", "originalCommit": "056bd139924fd2514d1b0cf4e49d86f97e1f8a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTQxMQ==", "url": "https://github.com/dotCMS/core/pull/18473#discussion_r424559411", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-05-13T16:09:35Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/HTMLDiffUtilTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package com.dotcms.enterprise;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.repackage.org.jsoup.Jsoup;\n+import com.dotcms.repackage.org.jsoup.nodes.Document;\n+import com.dotcms.repackage.org.jsoup.nodes.Element;\n+import com.dotcms.repackage.org.jsoup.select.Elements;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.factories.MultiTreeAPI;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+public class HTMLDiffUtilTest extends IntegrationTestBase {\n+\n+    private static ContentletAPI contentletAPI;\n+    private static MultiTreeAPI multiTreeAPI;\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+    private static Language defaultLang;\n+    private static String uuid;\n+\n+    private static final String NOTHING_CHANGED = \"Nothing Changed\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "056bd139924fd2514d1b0cf4e49d86f97e1f8a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTQyOA==", "url": "https://github.com/dotCMS/core/pull/18473#discussion_r424559428", "bodyText": "Issue found: Unnecessary use of fully qualified name 'com.dotmarketing.util.WebKeys.CMS_USER' due to existing import 'com.dotmarketing.util.WebKeys'", "author": "dev-dotcms", "createdAt": "2020-05-13T16:09:36Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/HTMLDiffUtilTest.java", "diffHunk": "@@ -0,0 +1,273 @@\n+package com.dotcms.enterprise;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.repackage.org.jsoup.Jsoup;\n+import com.dotcms.repackage.org.jsoup.nodes.Document;\n+import com.dotcms.repackage.org.jsoup.nodes.Element;\n+import com.dotcms.repackage.org.jsoup.select.Elements;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.factories.MultiTreeAPI;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageAPI;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.collect.ImmutableSet;\n+import com.liferay.portal.model.User;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n+\n+public class HTMLDiffUtilTest extends IntegrationTestBase {\n+\n+    private static ContentletAPI contentletAPI;\n+    private static MultiTreeAPI multiTreeAPI;\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+    private static Language defaultLang;\n+    private static String uuid;\n+\n+    private static final String NOTHING_CHANGED = \"Nothing Changed\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+        contentletAPI = APILocator.getContentletAPI();\n+        final LanguageAPI languageAPI = APILocator.getLanguageAPI();\n+        multiTreeAPI = APILocator.getMultiTreeAPI();\n+        systemUser = APILocator.systemUser();\n+        site = new SiteDataGen().nextPersisted();\n+        defaultLang = languageAPI.getDefaultLanguage();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"anyTestContainer\" + System.currentTimeMillis();\n+        uuid = UUIDGenerator.generateUuid();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier(), uuid)\n+                .nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+    }\n+\n+    /**\n+     * Given scenario: We have a page created out of a layout and a container. The Container holds a List of items.\n+     * Expected Result:  We create a working copy and modify the list of items. The new items must replace the old ones.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void Test_Page_With_Changes_Expect_Difference() throws Exception {\n+\n+        final String pageName = \"seekers-expect-difference-page\";\n+\n+        final Set<String> seekers = ImmutableSet.of(\"Skywarp\", \"Starscream\", \"Thundercracker\");\n+\n+        final Set<String> coneheads = ImmutableSet.of(\"Thrust\", \"Ramjet\", \"Dirge\");\n+\n+        final Contentlet contentlet = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang.getId())\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"seekers\")\n+                .setProperty(\"body\", String.join(\",\", seekers))\n+                .nextPersisted();\n+\n+        contentlet.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet, systemUser, false);\n+\n+        final HTMLPageAsset pageLive = new HTMLPageDataGen(folder, template).languageId(defaultLang.getId())\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+\n+        final MultiTree multiTreeV1 = new MultiTree(pageLive.getIdentifier(),\n+                container.getIdentifier(), contentlet.getIdentifier(),\n+                getDotParserContainerUUID(uuid), 0);\n+        multiTreeAPI.saveMultiTree(multiTreeV1);\n+        HTMLPageDataGen.publish(pageLive);\n+\n+        final Contentlet workingPage = contentletAPI\n+                .checkout(pageLive.getInode(), systemUser, false);\n+        final Contentlet checkedOut = contentletAPI\n+                .checkout(contentlet.getInode(), systemUser, false);\n+        checkedOut.setProperty(\"body\", String.join(\",\", coneheads));\n+        contentletAPI.checkin(checkedOut, systemUser, false);\n+        contentletAPI.checkin(workingPage, systemUser, false);\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(request.getRequestURI()).thenReturn(\"/\"+pageName);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER_ID))\n+                .thenReturn(systemUser.getUserId());\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER)).thenReturn(systemUser);\n+        when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        when(request.getParameter(\"host_id\")).thenReturn(site.getIdentifier());\n+        when(request.getAttribute(WebKeys.CURRENT_HOST)).thenReturn(site);\n+        when(session.getAttribute(WebKeys.HTMLPAGE_LANGUAGE)).thenReturn(defaultLang.getId()+\"\");\n+        when(session.getAttribute(WebKeys.PAGE_MODE_SESSION)).thenReturn(PageMode.PREVIEW_MODE);\n+\n+        // Collection to store attributes keys/values\n+        final Map<String, Object> attributes = new ConcurrentHashMap<>();\n+\n+        // Mock setAttribute\n+        Mockito.doAnswer((Answer<Void>) invocation -> {\n+            final String key = invocation.getArgumentAt(0, String.class);\n+            final Object value = invocation.getArgumentAt(1, Object.class);\n+            attributes.put(key, value);\n+            return null;\n+        }).when(request).setAttribute(Mockito.anyString(), Mockito.anyObject());\n+\n+        // Mock getAttribute\n+        Mockito.doAnswer((Answer<Object>) invocation -> {\n+            final String key = invocation.getArgumentAt(0, String.class);\n+            return attributes.get(key);\n+        }).when(request).getAttribute(Mockito.anyString());\n+\n+        final String diff = new HTMLDiffUtilProxy().htmlDiffPage(pageLive, systemUser, request, response);\n+        Assert.assertNotEquals(NOTHING_CHANGED,diff);\n+        final Document document = Jsoup.parse(diff);\n+        final Elements removedElements = document.select(\"span.diff-html-removed\");\n+        for (final Element removedElement : removedElements) {\n+           Assert.assertTrue(seekers.contains(removedElement.text()));\n+        }\n+\n+        final Elements addedElements = document.select(\"span.diff-html-added\");\n+        for (final Element addedElement : addedElements) {\n+            Assert.assertTrue(coneheads.contains(addedElement.text()));\n+        }\n+    }\n+\n+\n+    /**\n+     *Given scenario: We have a page created out of a layout and a container. The Container holds a List of items.\n+     * Expected Result:  We create a working copy od the page but this one isn't modified. So whn compared\n+     * @throws Exception\n+     */\n+    @Test\n+    public void Test_Page_No_Changes_Expect_Nothing_Changed_Message() throws Exception {\n+\n+        final String pageName = \"seekers-expect-No-difference-page\";\n+\n+        final Contentlet contentlet = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang.getId())\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"seekers\")\n+                .setProperty(\"body\", \"Skywarp, Starscream, Thundercracker\")\n+                .nextPersisted();\n+\n+        contentlet.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet, systemUser, false);\n+\n+       final HTMLPageAsset pageLive = new HTMLPageDataGen(folder, template).languageId(defaultLang.getId())\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+\n+        final MultiTree multiTreeV1 = new MultiTree(pageLive.getIdentifier(),\n+                container.getIdentifier(), contentlet.getIdentifier(),\n+                getDotParserContainerUUID(uuid), 0);\n+        multiTreeAPI.saveMultiTree(multiTreeV1);\n+        HTMLPageDataGen.publish(pageLive);\n+\n+        //Force a working copy identical to the original\n+        final Contentlet workingPage = contentletAPI.checkout(pageLive.getInode(), systemUser, false);\n+        contentletAPI.checkin(workingPage, systemUser, false);\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+        final HttpSession session = mock(HttpSession.class);\n+\n+        when(request.getRequestURI()).thenReturn(\"/\"+pageName);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER_ID))\n+                .thenReturn(systemUser.getUserId());\n+        when(request.getAttribute(com.liferay.portal.util.WebKeys.USER)).thenReturn(systemUser);\n+        when(session.getAttribute(com.dotmarketing.util.WebKeys.CMS_USER)).thenReturn(systemUser);", "originalCommit": "056bd139924fd2514d1b0cf4e49d86f97e1f8a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}