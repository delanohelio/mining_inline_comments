{"pr_number": 18243, "pr_title": "Issue 17917 query cache", "pr_createdAt": "2020-04-01T19:19:20Z", "pr_url": "https://github.com/dotCMS/core/pull/18243", "timeline": [{"oid": "6a3d514579afaadc8e7f2dd82e147c03cb9246cf", "url": "https://github.com/dotCMS/core/commit/6a3d514579afaadc8e7f2dd82e147c03cb9246cf", "message": "#17917 testing query cache", "committedDate": "2020-03-26T17:18:17Z", "type": "commit"}, {"oid": "d12a6137061b9f22e9b4fcf5a1dcce754ceb6c7b", "url": "https://github.com/dotCMS/core/commit/d12a6137061b9f22e9b4fcf5a1dcce754ceb6c7b", "message": "Merge remote-tracking branch 'origin/master' into issue-17917-query-cache", "committedDate": "2020-04-01T13:02:38Z", "type": "commit"}, {"oid": "c1329ceacf1d793b33c76297bd2364155fb06ebd", "url": "https://github.com/dotCMS/core/commit/c1329ceacf1d793b33c76297bd2364155fb06ebd", "message": "#17917 add es query cache", "committedDate": "2020-04-01T19:09:22Z", "type": "commit"}, {"oid": "39401909d25b8c7dd64fbff512feb429f8dc4d2e", "url": "https://github.com/dotCMS/core/commit/39401909d25b8c7dd64fbff512feb429f8dc4d2e", "message": "#17917 removed from abstract factory", "committedDate": "2020-04-01T19:16:30Z", "type": "commit"}, {"oid": "7c383813eb76500a32f5779c29ea22bd3ad1aafe", "url": "https://github.com/dotCMS/core/commit/7c383813eb76500a32f5779c29ea22bd3ad1aafe", "message": "#17917 removed just the string cache", "committedDate": "2020-04-01T19:31:08Z", "type": "commit"}, {"oid": "fa15b258966784446924fe9fc3d7c7b7289d94d2", "url": "https://github.com/dotCMS/core/commit/fa15b258966784446924fe9fc3d7c7b7289d94d2", "message": "#17917 cleanup and less diff", "committedDate": "2020-04-01T19:43:13Z", "type": "commit"}, {"oid": "4ccee818c4659291005b1ea6555bd52fae9f313e", "url": "https://github.com/dotCMS/core/commit/4ccee818c4659291005b1ea6555bd52fae9f313e", "message": "#17917 calling searchRequest.source invokes a lot of json parsing", "committedDate": "2020-04-01T20:21:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTExMw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r401955113", "bodyText": "An IT should be implemented for this change in case a test for the old logic didn't exist", "author": "nollymar", "createdAt": "2020-04-01T22:49:46Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -960,33 +959,12 @@ protected Contentlet find(final String inode) throws ElasticsearchException, Dot\n \n \t@Override\n \tprotected Contentlet findContentletByIdentifier(String identifier, Boolean live, Long languageId) throws DotDataException {\n-\t\ttry {\n-\t\t\tStringWriter query= new StringWriter();\n-\t\t\tquery.append(\" +identifier:\" + identifier);\n-\t\t\tquery.append(\" +languageid:\" + languageId);\n-\t\t\tquery.append(\" +deleted:false\");\n-\n-            final SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(query.toString());\n-\t\t\tIndiciesInfo info=APILocator.getIndiciesAPI().loadIndicies();\n-\n-\t\t\tfinal  SearchRequest searchRequest = new SearchRequest();\n-\t\t\tsearchRequest.source(searchSourceBuilder);\n-\t\t\tsearchRequest.indices((live ? info.getLive() : info.getWorking()));\n-\n-            final SearchResponse response = Sneaky.sneak(()->\n-                    RestHighLevelClientProvider.getInstance().getClient().search(searchRequest, RequestOptions.DEFAULT));\n-            SearchHits hits = response.getHits();\n-\n-\t\t\treturn find(hits.getAt(0).getSourceAsMap().get(\"inode\").toString());\n-\t\t}\n-\t\t// if we don't have the con in this language\n-\t\tcatch(ArrayIndexOutOfBoundsException aibex){\n-\t\t\treturn null;\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tthrow new ElasticsearchException(e.getMessage(), e);\n-\n-\t\t}\n+        final ContentletVersionInfo cvi = APILocator.getVersionableAPI().getContentletVersionInfo(identifier, languageId);", "originalCommit": "4ccee818c4659291005b1ea6555bd52fae9f313e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "68614ab1ad423bce26b570fc351728ee3470e4af", "url": "https://github.com/dotCMS/core/commit/68614ab1ad423bce26b570fc351728ee3470e4af", "message": "#17917 invalidate cache for tests", "committedDate": "2020-04-02T00:30:17Z", "type": "commit"}, {"oid": "4e4ebfe3a2735c52fee4ddd87d62ba81a352eccb", "url": "https://github.com/dotCMS/core/commit/4e4ebfe3a2735c52fee4ddd87d62ba81a352eccb", "message": "#17917 fixing tests", "committedDate": "2020-04-02T00:47:16Z", "type": "commit"}, {"oid": "746ff8814294ce4a95bd0814ca002066d91b7903", "url": "https://github.com/dotCMS/core/commit/746ff8814294ce4a95bd0814ca002066d91b7903", "message": "Merge remote-tracking branch 'origin/master' into issue-17917-query-cache", "committedDate": "2020-04-02T00:51:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MDMyMA==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r402360320", "bodyText": "doc?", "author": "freddyucv", "createdAt": "2020-04-02T14:32:34Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/ESQueryCache.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.search.SearchHits;\n+import com.dotcms.enterprise.license.LicenseManager;\n+import com.dotmarketing.business.Cachable;\n+import com.dotmarketing.business.CacheLocator;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.PageMode;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.hash.Hashing;\n+\n+public class ESQueryCache implements Cachable {", "originalCommit": "4e4ebfe3a2735c52fee4ddd87d62ba81a352eccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2NzY2NA==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r402367664", "bodyText": "I think is not need to do this test, it is test with the others test", "author": "freddyucv", "createdAt": "2020-04-02T14:41:52Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin, true);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }", "originalCommit": "4e4ebfe3a2735c52fee4ddd87d62ba81a352eccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MjQwOA==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r402372408", "bodyText": "maybe we can do a test where sleep the main thread for:\nhttps://github.com/dotCMS/core/pull/18243/files#diff-9eef290d7e7caa46fa38e7f59dfe65cdR512\nand test that the value was clean", "author": "freddyucv", "createdAt": "2020-04-02T14:47:36Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin, true);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+        searchSourceBuilder.query(QueryBuilders.queryStringQuery(query));\n+        searchSourceBuilder.size(0);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.source(searchSourceBuilder);\n+        searchRequest.indices((live ? \"live\" : \"working\"));\n+        return searchRequest;\n+    }\n+\n+    static DotCacheAdministrator admin = new DotCacheAdministrator() {\n+\n+        private Map<String, SearchHits> hitMap = new HashMap<>();\n+\n+        @Override\n+        public void shutdown() {\n+\n+\n+        }\n+\n+        @Override\n+        public void setTransport(CacheTransport transport) {\n+\n+\n+        }\n+\n+        @Override\n+        public void removeLocalOnly(String key, String group, boolean ignoreDistributed) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void remove(String key, String group) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void put(String key, Object content, String group) {\n+            hitMap.put(key + group, (SearchHits) content);\n+\n+        }\n+\n+        @Override\n+        public void invalidateCacheMesageFromCluster(String message) {\n+\n+\n+        }\n+\n+        @Override\n+        public void initProviders() {\n+\n+\n+        }\n+\n+        @Override\n+        public CacheTransport getTransport() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public DotCacheAdministrator getImplementationObject() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Class getImplementationClass() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Set<String> getGroups() {\n+\n+            return ImmutableSet.of(cache.getPrimaryGroup());\n+        }\n+\n+        @Override\n+        public List<CacheProviderStats> getCacheStatsList() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Object get(String key, String group) throws DotCacheException {\n+\n+            return hitMap.get(key + group);\n+        }\n+\n+        @Override\n+        public void flushGroupLocalOnly(String group, boolean ignoreDistributed) {\n+            hitMap.clear();\n+\n+        }\n+\n+        @Override\n+        public void flushGroup(String group) {\n+\n+            hitMap.clear();\n+        }\n+\n+        @Override\n+        public void flushAll() {\n+            hitMap.clear();\n+\n+        }\n+\n+        @Override\n+        public void flushAlLocalOnly(boolean ignoreDistributed) {\n+            hitMap.clear();\n+\n+        }\n+    };\n+\n+\n+\n+}", "originalCommit": "4e4ebfe3a2735c52fee4ddd87d62ba81a352eccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MjczOQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r402372739", "bodyText": "maybe we can do a test to this: https://github.com/dotCMS/core/pull/18243/files#diff-9eef290d7e7caa46fa38e7f59dfe65cdR512", "author": "freddyucv", "createdAt": "2020-04-02T14:48:00Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin, true);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+        searchSourceBuilder.query(QueryBuilders.queryStringQuery(query));\n+        searchSourceBuilder.size(0);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.source(searchSourceBuilder);\n+        searchRequest.indices((live ? \"live\" : \"working\"));\n+        return searchRequest;\n+    }\n+\n+    static DotCacheAdministrator admin = new DotCacheAdministrator() {\n+\n+        private Map<String, SearchHits> hitMap = new HashMap<>();\n+\n+        @Override\n+        public void shutdown() {\n+\n+\n+        }\n+\n+        @Override\n+        public void setTransport(CacheTransport transport) {\n+\n+\n+        }\n+\n+        @Override\n+        public void removeLocalOnly(String key, String group, boolean ignoreDistributed) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void remove(String key, String group) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void put(String key, Object content, String group) {\n+            hitMap.put(key + group, (SearchHits) content);\n+\n+        }\n+\n+        @Override\n+        public void invalidateCacheMesageFromCluster(String message) {\n+\n+\n+        }\n+\n+        @Override\n+        public void initProviders() {\n+\n+\n+        }\n+\n+        @Override\n+        public CacheTransport getTransport() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public DotCacheAdministrator getImplementationObject() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Class getImplementationClass() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Set<String> getGroups() {\n+\n+            return ImmutableSet.of(cache.getPrimaryGroup());\n+        }\n+\n+        @Override\n+        public List<CacheProviderStats> getCacheStatsList() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Object get(String key, String group) throws DotCacheException {\n+\n+            return hitMap.get(key + group);\n+        }\n+\n+        @Override\n+        public void flushGroupLocalOnly(String group, boolean ignoreDistributed) {\n+            hitMap.clear();\n+\n+        }\n+\n+        @Override\n+        public void flushGroup(String group) {\n+\n+            hitMap.clear();\n+        }\n+\n+        @Override\n+        public void flushAll() {\n+            hitMap.clear();\n+\n+        }\n+\n+        @Override\n+        public void flushAlLocalOnly(boolean ignoreDistributed) {\n+            hitMap.clear();\n+\n+        }\n+    };\n+\n+\n+\n+}", "originalCommit": "4e4ebfe3a2735c52fee4ddd87d62ba81a352eccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4OTk4MQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r403189981", "bodyText": "That is testing something else - the TimedCacheProvider", "author": "wezell", "createdAt": "2020-04-03T17:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MjczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NzIwNQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r402377205", "bodyText": "I think we don't have test to prove the cache is used here, maybe we can do a unit test mocking the RestHighLevelClientProvider  instance and verify that the search method is not call", "author": "freddyucv", "createdAt": "2020-04-02T14:53:34Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1520,23 +1495,62 @@ private SearchSourceBuilder createSearchSourceBuilder(final String query, final\n         return searchSourceBuilder;\n     }\n \n-\t@Override\n-\tprotected SearchHits indexSearch(final String query, final int limit, final int offset, String sortBy) {\n+    \n+\n+\n+    \n+\n+    SearchHits cachedIndexSearch(final SearchRequest searchRequest) {\n+        \n \n-\t    final String formattedQuery = LuceneQueryDateTimeFormatter\n+        final Optional<SearchHits> optionalHits = queryCache.get(searchRequest);\n+        if(optionalHits.isPresent()) {\n+            return optionalHits.get();\n+        }\n+        try {\n+            SearchResponse response = RestHighLevelClientProvider.getInstance().getClient().search(searchRequest, RequestOptions.DEFAULT);\n+            SearchHits hits  = response.getHits();\n+            queryCache.put(searchRequest, hits);", "originalCommit": "4e4ebfe3a2735c52fee4ddd87d62ba81a352eccb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a1eba614724497395cfda413126b19fb3a169cb", "url": "https://github.com/dotCMS/core/commit/3a1eba614724497395cfda413126b19fb3a169cb", "message": "#17917 invalidating on reindex", "committedDate": "2020-04-02T15:56:09Z", "type": "commit"}, {"oid": "586311174ec3dc5e94d4e8bbf0502a0c78766fed", "url": "https://github.com/dotCMS/core/commit/586311174ec3dc5e94d4e8bbf0502a0c78766fed", "message": "#17917 removing unneeded code", "committedDate": "2020-04-02T15:58:44Z", "type": "commit"}, {"oid": "ab5b39b40c3020c2fe1d6a59df26d2ebb07b2ab0", "url": "https://github.com/dotCMS/core/commit/ab5b39b40c3020c2fe1d6a59df26d2ebb07b2ab0", "message": "17917 prevent unneded puts", "committedDate": "2020-04-02T15:59:50Z", "type": "commit"}, {"oid": "342668f12b9fe35ce0558e0b091ab409aeea8989", "url": "https://github.com/dotCMS/core/commit/342668f12b9fe35ce0558e0b091ab409aeea8989", "message": "#17917 cleanup", "committedDate": "2020-04-02T16:04:10Z", "type": "commit"}, {"oid": "732114168ce255d471c2a65e9f9de769aa853a91", "url": "https://github.com/dotCMS/core/commit/732114168ce255d471c2a65e9f9de769aa853a91", "message": "#17917 cleanup", "committedDate": "2020-04-02T16:05:45Z", "type": "commit"}, {"oid": "90dbaf58940338c1ec13ffaa8820725e3c452608", "url": "https://github.com/dotCMS/core/commit/90dbaf58940338c1ec13ffaa8820725e3c452608", "message": "#17917 clear index on delete", "committedDate": "2020-04-02T16:18:30Z", "type": "commit"}, {"oid": "493b65312a53bd3aa42a0925800c51452963a689", "url": "https://github.com/dotCMS/core/commit/493b65312a53bd3aa42a0925800c51452963a689", "message": "#17917 flush on a reindex switchover", "committedDate": "2020-04-02T19:14:07Z", "type": "commit"}, {"oid": "0a77ea62a20230fe3d19962e7cf947ce6d342bd5", "url": "https://github.com/dotCMS/core/commit/0a77ea62a20230fe3d19962e7cf947ce6d342bd5", "message": "#17917 making sure isInodeInIndex works", "committedDate": "2020-04-03T15:03:30Z", "type": "commit"}, {"oid": "c69dd13fb53345cca5c0180468b932ac02f9bf7a", "url": "https://github.com/dotCMS/core/commit/c69dd13fb53345cca5c0180468b932ac02f9bf7a", "message": "#17917 added some javadoc", "committedDate": "2020-04-03T16:28:15Z", "type": "commit"}, {"oid": "264f841157fe4a8d54e9862d92ebc7dd8312da53", "url": "https://github.com/dotCMS/core/commit/264f841157fe4a8d54e9862d92ebc7dd8312da53", "message": "#17917 adding it test for findByIdentifier", "committedDate": "2020-04-03T17:09:11Z", "type": "commit"}, {"oid": "bd534d8a9a05f68f8b310c2cf6594b4e7e3a8a01", "url": "https://github.com/dotCMS/core/commit/bd534d8a9a05f68f8b310c2cf6594b4e7e3a8a01", "message": "#17917 test cached search hits", "committedDate": "2020-04-03T17:37:42Z", "type": "commit"}, {"oid": "f592844181128898bd4460df255a09b0c3ad6107", "url": "https://github.com/dotCMS/core/commit/f592844181128898bd4460df255a09b0c3ad6107", "message": "#17917 test cached search hits", "committedDate": "2020-04-03T17:44:39Z", "type": "commit"}, {"oid": "940fc285b9a06d34b5691bfa776a21e02ae72617", "url": "https://github.com/dotCMS/core/commit/940fc285b9a06d34b5691bfa776a21e02ae72617", "message": "#17917 more javadocs", "committedDate": "2020-04-03T17:53:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTAwMg==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r405199002", "bodyText": "@wezell is the uuid stuff required yet?", "author": "nollymar", "createdAt": "2020-04-08T00:59:32Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ContentletIndexAPIImplTest.java", "diffHunk": "@@ -506,10 +506,10 @@ public void addRemoveContentToIndex () throws Exception {\n             indexAPI.removeContentFromIndex( testContentlet );\n \n             //We are just making time in order to let it apply the index\n-            wasContentRemoved( query );\n+            wasContentRemoved( query + \" \" + UUIDGenerator.generateUuid() );", "originalCommit": "940fc285b9a06d34b5691bfa776a21e02ae72617", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMTQwNg==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r405201406", "bodyText": "why do you need to clear cache here?", "author": "nollymar", "createdAt": "2020-04-08T01:09:01Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/ImportUtilTest.java", "diffHunk": "@@ -1442,7 +1443,7 @@ public void importFile_updateRelatedContentWithEmptyColumn_shouldWipeOutRelatedC\n                     TITLE_FIELD_NAME + \", \" + BODY_FIELD_NAME + \", \" + field.variable()\n                             + \"\\r\\n\" +\n                             \"parent contentlet, parent contentlet body, \");\n-\n+            CacheLocator.getESQueryCache().clearCache();", "originalCommit": "940fc285b9a06d34b5691bfa776a21e02ae72617", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "54684379d2a7f1df1cec0ffd595aad412701e595", "url": "https://github.com/dotCMS/core/commit/54684379d2a7f1df1cec0ffd595aad412701e595", "message": "#17917 fixing test", "committedDate": "2020-04-09T15:20:12Z", "type": "commit"}, {"oid": "3bc57868fe35bf9986a7bb2ced64d3f78b18d9c2", "url": "https://github.com/dotCMS/core/commit/3bc57868fe35bf9986a7bb2ced64d3f78b18d9c2", "message": "#17917 removing unneeded changes", "committedDate": "2020-04-09T16:25:46Z", "type": "commit"}, {"oid": "54a73c1624ae0036faeb1ea2985ef159276986ee", "url": "https://github.com/dotCMS/core/commit/54a73c1624ae0036faeb1ea2985ef159276986ee", "message": "#17917 merge with master", "committedDate": "2020-04-09T21:13:36Z", "type": "commit"}, {"oid": "e7c3e21a973ad8188289feb4e77a4bf70852e3ae", "url": "https://github.com/dotCMS/core/commit/e7c3e21a973ad8188289feb4e77a4bf70852e3ae", "message": "Merge branch 'issue-17917-query-cache' of github.com:dotCMS/core into issue-17917-query-cache", "committedDate": "2020-04-09T21:13:55Z", "type": "commit"}, {"oid": "fdba266e69d73710ae7ba1f59b52d70e8111bcce", "url": "https://github.com/dotCMS/core/commit/fdba266e69d73710ae7ba1f59b52d70e8111bcce", "message": "#17917 merge with master", "committedDate": "2020-04-09T21:15:57Z", "type": "commit"}, {"oid": "3438952c02eb9a535aadb19d85393d75caed31a6", "url": "https://github.com/dotCMS/core/commit/3438952c02eb9a535aadb19d85393d75caed31a6", "message": "#17917 additional asserts for tests", "committedDate": "2020-04-09T23:03:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTA5Mw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525093", "bodyText": "Issue found: Local variable 'request2' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:51Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTEwMA==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525100", "bodyText": "Issue found: The String literal \"myBody\" appears 4 times in this file; the first occurrence is on line 500", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:52Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImplTest.java", "diffHunk": "@@ -537,4 +542,163 @@ private void runLuceneQueryAndValidateResults(final String query, final Contentl\n         assertEquals(contentlet.getInode(), hits[0].getSourceAsMap().get(\"inode\"));\n     }\n \n+    @Test\n+    public void test_findContentletByIdentifier() throws Exception {\n+    \n+        final Language language1 = new LanguageDataGen().nextPersisted();\n+        final Language language2 = new LanguageDataGen().nextPersisted();\n+        final ContentType blogType = TestDataUtils.getBlogLikeContentType(site);\n+        \n+\n+        // create URL-Mapped content\n+        final Contentlet workingOneLanguage = new ContentletDataGen(blogType.id())\n+                .languageId(language1.getId())\n+                .setProperty(\"body\", \"myBody\")", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTEwNw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525107", "bodyText": "Issue found: Local variable 'req2' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:53Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTExNQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525115", "bodyText": "Issue found: Parameter 'message' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:54Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+        searchSourceBuilder.query(QueryBuilders.queryStringQuery(query));\n+        searchSourceBuilder.size(0);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.source(searchSourceBuilder);\n+        searchRequest.indices((live ? \"live\" : \"working\"));\n+        return searchRequest;\n+    }\n+\n+    static DotCacheAdministrator admin = new DotCacheAdministrator() {\n+\n+        private Map<String, SearchHits> hitMap = new HashMap<>();\n+\n+        @Override\n+        public void shutdown() {\n+\n+\n+        }\n+\n+        @Override\n+        public void setTransport(CacheTransport transport) {\n+\n+\n+        }\n+\n+        @Override\n+        public void removeLocalOnly(String key, String group, boolean ignoreDistributed) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void remove(String key, String group) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void put(String key, Object content, String group) {\n+            hitMap.put(key + group, (SearchHits) content);\n+\n+        }\n+\n+        @Override\n+        public void invalidateCacheMesageFromCluster(String message) {", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTEyMQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525121", "bodyText": "Issue found: Parameter 'transport' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:55Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+        searchSourceBuilder.query(QueryBuilders.queryStringQuery(query));\n+        searchSourceBuilder.size(0);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.source(searchSourceBuilder);\n+        searchRequest.indices((live ? \"live\" : \"working\"));\n+        return searchRequest;\n+    }\n+\n+    static DotCacheAdministrator admin = new DotCacheAdministrator() {\n+\n+        private Map<String, SearchHits> hitMap = new HashMap<>();\n+\n+        @Override\n+        public void shutdown() {\n+\n+\n+        }\n+\n+        @Override\n+        public void setTransport(CacheTransport transport) {", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTEyNw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525127", "bodyText": "Issue found: Local variable 'searchRequest' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:56Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTEzMw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525133", "bodyText": "Issue found: Local variable 'rand' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:57Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); ", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTEzOQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525139", "bodyText": "Issue found: Parameter 'ignoreDistributed' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:58Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+        searchSourceBuilder.query(QueryBuilders.queryStringQuery(query));\n+        searchSourceBuilder.size(0);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.source(searchSourceBuilder);\n+        searchRequest.indices((live ? \"live\" : \"working\"));\n+        return searchRequest;\n+    }\n+\n+    static DotCacheAdministrator admin = new DotCacheAdministrator() {\n+\n+        private Map<String, SearchHits> hitMap = new HashMap<>();\n+\n+        @Override\n+        public void shutdown() {\n+\n+\n+        }\n+\n+        @Override\n+        public void setTransport(CacheTransport transport) {\n+\n+\n+        }\n+\n+        @Override\n+        public void removeLocalOnly(String key, String group, boolean ignoreDistributed) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void remove(String key, String group) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void put(String key, Object content, String group) {\n+            hitMap.put(key + group, (SearchHits) content);\n+\n+        }\n+\n+        @Override\n+        public void invalidateCacheMesageFromCluster(String message) {\n+\n+\n+        }\n+\n+        @Override\n+        public void initProviders() {\n+\n+\n+        }\n+\n+        @Override\n+        public CacheTransport getTransport() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public DotCacheAdministrator getImplementationObject() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Class getImplementationClass() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Set<String> getGroups() {\n+\n+            return ImmutableSet.of(cache.getPrimaryGroup());\n+        }\n+\n+        @Override\n+        public List<CacheProviderStats> getCacheStatsList() {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public Object get(String key, String group) throws DotCacheException {\n+\n+            return hitMap.get(key + group);\n+        }\n+\n+        @Override\n+        public void flushGroupLocalOnly(String group, boolean ignoreDistributed) {", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTE0NA==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525144", "bodyText": "Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y)", "author": "dev-dotcms", "createdAt": "2020-04-09T23:09:59Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImplTest.java", "diffHunk": "@@ -537,4 +542,163 @@ private void runLuceneQueryAndValidateResults(final String query, final Contentl\n         assertEquals(contentlet.getInode(), hits[0].getSourceAsMap().get(\"inode\"));\n     }\n \n+    @Test\n+    public void test_findContentletByIdentifier() throws Exception {\n+    \n+        final Language language1 = new LanguageDataGen().nextPersisted();\n+        final Language language2 = new LanguageDataGen().nextPersisted();\n+        final ContentType blogType = TestDataUtils.getBlogLikeContentType(site);\n+        \n+\n+        // create URL-Mapped content\n+        final Contentlet workingOneLanguage = new ContentletDataGen(blogType.id())\n+                .languageId(language1.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .nextPersisted();\n+        \n+        // create URL-Mapped content\n+        final Contentlet workingTwoLanguage = new ContentletDataGen(blogType.id())\n+                .languageId(language1.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .nextPersisted();\n+        \n+        // create URL-Mapped content\n+        final Contentlet publishedTwoLanguage2 = new ContentletDataGen(blogType.id())\n+                .languageId(language2.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .setProperty(\"identifier\", workingTwoLanguage.getIdentifier())\n+                .nextPersisted();\n+        \n+        \n+        APILocator.getContentletAPI().publish(publishedTwoLanguage2, APILocator.systemUser(), false);\n+        \n+        \n+        \n+        assertEquals(\"workingOneLanguage exists and is working\", workingOneLanguage, instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), false, language1.getId()));\n+        assertNull(\"workingOneLanguage does not exist in 2nd language\", instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), false, language2.getId()));\n+        assertNull(\"workingOneLanguage does not exist in live\", instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), true, language1.getId()));\n+\n+        assertNull(\"workingTwoLanguage in language1 is not live\", instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), true, language1.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge1 and is working\", workingTwoLanguage, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), false, language1.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge2 and is working\", publishedTwoLanguage2, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), false, language2.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge2 and is live\", publishedTwoLanguage2, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), true, language2.getId()));\n+\n+    }\n+    \n+    /**\n+     * This tests whether we are getting cached results from queries to elasticsearch and that these\n+     * results are invalidated when a new piece of content is checked in\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_cached_es_query_response() throws Exception {\n+        \n+        final Language language1 = new LanguageDataGen().nextPersisted();\n+\n+        final ContentType blogType = TestDataUtils.getBlogLikeContentType(site);\n+        \n+\n+        assert(CacheLocator.getESQueryCache() !=null);\n+        final String liveQuery = \"+baseType:1 +live:true\" ;\n+        final String workingQuery = \"+baseType:1 +live:false\" ;\n+        \n+\n+        SearchHits hits = instance.indexSearch(liveQuery, 10, 0, null);\n+        \n+        //assert we have results\n+        assertTrue(hits.getTotalHits().value > 0);\n+        \n+        SearchHits hits2 = instance.indexSearch(liveQuery, 10, 0, null);\n+        \n+        // hits and hits2 are the same object in memory (meaning, it came from cache)\n+        assertTrue(hits == hits2);", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTE0Nw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525147", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:00Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTE1Mg==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525152", "bodyText": "Issue found: Document empty method body", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:01Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+        searchSourceBuilder.query(QueryBuilders.queryStringQuery(query));\n+        searchSourceBuilder.size(0);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.source(searchSourceBuilder);\n+        searchRequest.indices((live ? \"live\" : \"working\"));\n+        return searchRequest;\n+    }\n+\n+    static DotCacheAdministrator admin = new DotCacheAdministrator() {\n+\n+        private Map<String, SearchHits> hitMap = new HashMap<>();\n+\n+        @Override\n+        public void shutdown() {\n+\n+\n+        }\n+\n+        @Override\n+        public void setTransport(CacheTransport transport) {\n+\n+\n+        }\n+\n+        @Override\n+        public void removeLocalOnly(String key, String group, boolean ignoreDistributed) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void remove(String key, String group) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void put(String key, Object content, String group) {\n+            hitMap.put(key + group, (SearchHits) content);\n+\n+        }\n+\n+        @Override\n+        public void invalidateCacheMesageFromCluster(String message) {", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTE2MQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525161", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:02Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTE2OQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525169", "bodyText": "Issue found: Unnecessary use of fully qualified name 'com.dotcms.content.elasticsearch.ESQueryCache' due to existing import 'com.dotcms.content.elasticsearch.ESQueryCache'", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:03Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/CacheLocator.java", "diffHunk": "@@ -436,6 +443,7 @@ Cachable create() {\n \t      \tcase MultiTreeCache : return new MultiTreeCache();\n \t      \tcase ApiTokenCache : return new ApiTokenCache();\n \t      \tcase PortletCache : return new PortletCache();\n+\t      \tcase ESQueryCache : return new com.dotcms.content.elasticsearch.ESQueryCache();", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTE4Ng==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525186", "bodyText": "Issue found: Avoid unused imports such as 'io.vavr.API'", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:04Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImplTest.java", "diffHunk": "@@ -31,32 +52,16 @@\n import com.dotmarketing.portlets.contentlet.business.ContentletFactory;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.languagesmanager.business.LanguageDataGen;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n import com.dotmarketing.util.Logger;\n import com.dotmarketing.util.UUIDGenerator;\n import com.dotmarketing.util.UtilMethods;\n import com.liferay.portal.model.User;\n import com.tngtech.java.junit.dataprovider.DataProvider;\n import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n import com.tngtech.java.junit.dataprovider.UseDataProvider;\n-import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import org.elasticsearch.search.SearchHit;\n-import org.elasticsearch.search.SearchHits;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import io.vavr.API;", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTIwMA==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525200", "bodyText": "Issue found: Document empty method body", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:05Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+        searchSourceBuilder.query(QueryBuilders.queryStringQuery(query));\n+        searchSourceBuilder.size(0);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.source(searchSourceBuilder);\n+        searchRequest.indices((live ? \"live\" : \"working\"));\n+        return searchRequest;\n+    }\n+\n+    static DotCacheAdministrator admin = new DotCacheAdministrator() {\n+\n+        private Map<String, SearchHits> hitMap = new HashMap<>();\n+\n+        @Override\n+        public void shutdown() {\n+\n+\n+        }\n+\n+        @Override\n+        public void setTransport(CacheTransport transport) {", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTIxMA==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525210", "bodyText": "Issue found: Parameter 'query' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:06Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTIxNg==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525216", "bodyText": "Issue found: Local variable 'request1' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:07Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTIyMw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525223", "bodyText": "Issue found: Local variable 'request2' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:08Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTIzMg==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525232", "bodyText": "Issue found: Parameter 'key' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:09Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n+        searchSourceBuilder.query(QueryBuilders.queryStringQuery(query));\n+        searchSourceBuilder.size(0);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.source(searchSourceBuilder);\n+        searchRequest.indices((live ? \"live\" : \"working\"));\n+        return searchRequest;\n+    }\n+\n+    static DotCacheAdministrator admin = new DotCacheAdministrator() {\n+\n+        private Map<String, SearchHits> hitMap = new HashMap<>();\n+\n+        @Override\n+        public void shutdown() {\n+\n+\n+        }\n+\n+        @Override\n+        public void setTransport(CacheTransport transport) {\n+\n+\n+        }\n+\n+        @Override\n+        public void removeLocalOnly(String key, String group, boolean ignoreDistributed) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void remove(String key, String group) {\n+            hitMap.remove(key + group);\n+\n+        }\n+\n+        @Override\n+        public void put(String key, Object content, String group) {", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTI0NQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525245", "bodyText": "Issue found: Local variable 'user' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:10Z", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/TestUserUtils.java", "diffHunk": "@@ -173,8 +173,10 @@ public static User getUser(final Role role, final String email,\n             final String lastName, final String password)\n             throws DotDataException {\n         final List<User> users = APILocator.getUserAPI().getUsersByNameOrEmail(email, 0, 1);\n-        if (UtilMethods.isSet(users)) {\n-            return users.get(0);\n+        if (UtilMethods.isSet(users) && !users.isEmpty()) {\n+            User user = users.get(0);", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTI0Nw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525247", "bodyText": "Issue found: Avoid unused local variables such as 'workingQuery'.", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:11Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImplTest.java", "diffHunk": "@@ -537,4 +542,163 @@ private void runLuceneQueryAndValidateResults(final String query, final Contentl\n         assertEquals(contentlet.getInode(), hits[0].getSourceAsMap().get(\"inode\"));\n     }\n \n+    @Test\n+    public void test_findContentletByIdentifier() throws Exception {\n+    \n+        final Language language1 = new LanguageDataGen().nextPersisted();\n+        final Language language2 = new LanguageDataGen().nextPersisted();\n+        final ContentType blogType = TestDataUtils.getBlogLikeContentType(site);\n+        \n+\n+        // create URL-Mapped content\n+        final Contentlet workingOneLanguage = new ContentletDataGen(blogType.id())\n+                .languageId(language1.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .nextPersisted();\n+        \n+        // create URL-Mapped content\n+        final Contentlet workingTwoLanguage = new ContentletDataGen(blogType.id())\n+                .languageId(language1.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .nextPersisted();\n+        \n+        // create URL-Mapped content\n+        final Contentlet publishedTwoLanguage2 = new ContentletDataGen(blogType.id())\n+                .languageId(language2.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .setProperty(\"identifier\", workingTwoLanguage.getIdentifier())\n+                .nextPersisted();\n+        \n+        \n+        APILocator.getContentletAPI().publish(publishedTwoLanguage2, APILocator.systemUser(), false);\n+        \n+        \n+        \n+        assertEquals(\"workingOneLanguage exists and is working\", workingOneLanguage, instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), false, language1.getId()));\n+        assertNull(\"workingOneLanguage does not exist in 2nd language\", instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), false, language2.getId()));\n+        assertNull(\"workingOneLanguage does not exist in live\", instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), true, language1.getId()));\n+\n+        assertNull(\"workingTwoLanguage in language1 is not live\", instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), true, language1.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge1 and is working\", workingTwoLanguage, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), false, language1.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge2 and is working\", publishedTwoLanguage2, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), false, language2.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge2 and is live\", publishedTwoLanguage2, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), true, language2.getId()));\n+\n+    }\n+    \n+    /**\n+     * This tests whether we are getting cached results from queries to elasticsearch and that these\n+     * results are invalidated when a new piece of content is checked in\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_cached_es_query_response() throws Exception {\n+        \n+        final Language language1 = new LanguageDataGen().nextPersisted();\n+\n+        final ContentType blogType = TestDataUtils.getBlogLikeContentType(site);\n+        \n+\n+        assert(CacheLocator.getESQueryCache() !=null);\n+        final String liveQuery = \"+baseType:1 +live:true\" ;\n+        final String workingQuery = \"+baseType:1 +live:false\" ;", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTI1Mw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525253", "bodyText": "Issue found: Use equals() to compare object references.", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:12Z", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImplTest.java", "diffHunk": "@@ -537,4 +542,163 @@ private void runLuceneQueryAndValidateResults(final String query, final Contentl\n         assertEquals(contentlet.getInode(), hits[0].getSourceAsMap().get(\"inode\"));\n     }\n \n+    @Test\n+    public void test_findContentletByIdentifier() throws Exception {\n+    \n+        final Language language1 = new LanguageDataGen().nextPersisted();\n+        final Language language2 = new LanguageDataGen().nextPersisted();\n+        final ContentType blogType = TestDataUtils.getBlogLikeContentType(site);\n+        \n+\n+        // create URL-Mapped content\n+        final Contentlet workingOneLanguage = new ContentletDataGen(blogType.id())\n+                .languageId(language1.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .nextPersisted();\n+        \n+        // create URL-Mapped content\n+        final Contentlet workingTwoLanguage = new ContentletDataGen(blogType.id())\n+                .languageId(language1.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .nextPersisted();\n+        \n+        // create URL-Mapped content\n+        final Contentlet publishedTwoLanguage2 = new ContentletDataGen(blogType.id())\n+                .languageId(language2.getId())\n+                .setProperty(\"body\", \"myBody\")\n+                .setProperty(\"identifier\", workingTwoLanguage.getIdentifier())\n+                .nextPersisted();\n+        \n+        \n+        APILocator.getContentletAPI().publish(publishedTwoLanguage2, APILocator.systemUser(), false);\n+        \n+        \n+        \n+        assertEquals(\"workingOneLanguage exists and is working\", workingOneLanguage, instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), false, language1.getId()));\n+        assertNull(\"workingOneLanguage does not exist in 2nd language\", instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), false, language2.getId()));\n+        assertNull(\"workingOneLanguage does not exist in live\", instance.findContentletByIdentifier(workingOneLanguage.getIdentifier(), true, language1.getId()));\n+\n+        assertNull(\"workingTwoLanguage in language1 is not live\", instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), true, language1.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge1 and is working\", workingTwoLanguage, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), false, language1.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge2 and is working\", publishedTwoLanguage2, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), false, language2.getId()));\n+        assertEquals(\"workingTwoLanguage exists in langauge2 and is live\", publishedTwoLanguage2, instance.findContentletByIdentifier(workingTwoLanguage.getIdentifier(), true, language2.getId()));\n+\n+    }\n+    \n+    /**\n+     * This tests whether we are getting cached results from queries to elasticsearch and that these\n+     * results are invalidated when a new piece of content is checked in\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_cached_es_query_response() throws Exception {\n+        \n+        final Language language1 = new LanguageDataGen().nextPersisted();\n+\n+        final ContentType blogType = TestDataUtils.getBlogLikeContentType(site);\n+        \n+\n+        assert(CacheLocator.getESQueryCache() !=null);\n+        final String liveQuery = \"+baseType:1 +live:true\" ;\n+        final String workingQuery = \"+baseType:1 +live:false\" ;\n+        \n+\n+        SearchHits hits = instance.indexSearch(liveQuery, 10, 0, null);\n+        \n+        //assert we have results\n+        assertTrue(hits.getTotalHits().value > 0);\n+        \n+        SearchHits hits2 = instance.indexSearch(liveQuery, 10, 0, null);\n+        \n+        // hits and hits2 are the same object in memory (meaning, it came from cache)\n+        assertTrue(hits == hits2);", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTI1OQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525259", "bodyText": "Issue found: Local variable 'testQuery' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:14Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTI2Mw==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525263", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:15Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTI2OQ==", "url": "https://github.com/dotCMS/core/pull/18243#discussion_r406525269", "bodyText": "Issue found: Local variable 'searchSourceBuilder' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-09T23:10:16Z", "path": "dotCMS/src/test/java/com/dotcms/content/elasticsearch/ESQueryCacheTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package com.dotcms.content.elasticsearch;\n+\n+import static com.dotcms.content.elasticsearch.business.ESIndexAPI.INDEX_OPERATIONS_TIMEOUT_IN_MS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.apache.lucene.search.TotalHits;\n+import org.apache.lucene.search.TotalHits.Relation;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.common.text.Text;\n+import org.elasticsearch.common.unit.TimeValue;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.elasticsearch.search.SearchHits;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotmarketing.business.DotCacheAdministrator;\n+import com.dotmarketing.business.DotCacheException;\n+import com.dotmarketing.business.cache.provider.CacheProviderStats;\n+import com.dotmarketing.business.cache.transport.CacheTransport;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class ESQueryCacheTest {\n+\n+\n+    static ESQueryCache cache;\n+\n+\n+    @BeforeClass\n+    public static void setup() {\n+\n+        cache = new  ESQueryCache(admin);\n+        \n+        \n+        \n+    }\n+\n+    @Test\n+    public void test_hash() {\n+\n+        String testQuery =RandomStringUtils.randomAscii(200);\n+\n+        SearchRequest request1 = getSearchRquest(testQuery, true) ;\n+        SearchRequest request2 = getSearchRquest(testQuery, true) ;\n+        \n+\n+        assertEquals(cache.hash(request1), cache.hash(request2));\n+        \n+        \n+        SearchRequest request3 = getSearchRquest(testQuery, false) ;\n+        \n+\n+        assertNotEquals(cache.hash(request1), cache.hash(request3));\n+    }\n+\n+    \n+    @Test\n+    public void test_get_hits_by_query() {\n+\n+        SearchRequest request = getSearchRequest();\n+        SearchHits hits= hits();\n+        cache.put(request, hits);\n+        \n+        assertTrue(cache.get(request).isPresent());\n+        \n+        assertEquals(hits, cache.get(request).get());\n+        \n+        SearchRequest request2 = getSearchRequest();\n+        assertTrue(!cache.get(request2).isPresent());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_get_hits_by_request() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        assert(cache.get(req1).isPresent());\n+        \n+        assert(cache.get(req2).isPresent());\n+        \n+        assertEquals(cache.get(req1).get(), cache.get(req2).get());\n+\n+    }\n+    \n+    \n+    @Test\n+    public void test_clear_cache() {\n+\n+        final String testQuery =RandomStringUtils.randomAscii(200);\n+        SearchHits hits= hits();\n+        \n+        SearchRequest req1 = getSearchRquest(testQuery, true);\n+        SearchRequest req2 = getSearchRquest(testQuery, true);\n+        cache.put(req1, hits);\n+        \n+\n+        \n+        assert(cache.get(req1).isPresent());\n+        assert(cache.get(req2).isPresent());\n+        \n+        cache.clearCache();\n+        \n+        assert(!cache.get(req1).isPresent());\n+        assert(!cache.get(req2).isPresent());\n+\n+\n+    }\n+    \n+    \n+    \n+    \n+    SearchHits hits() {\n+        Random rand = new Random(); \n+        List<SearchHit> hitList = new ArrayList<>();\n+        for(int i=0;i< rand.nextInt(10);i++) {\n+            Text text = new Text(RandomStringUtils.randomAscii(36));\n+            SearchHit hit = new SearchHit(i,RandomStringUtils.randomAscii(36),text,new HashMap<>());\n+            hitList.add(hit);\n+        }\n+        \n+        return new SearchHits(hitList.toArray(new SearchHit[0]), new TotalHits(2, Relation.EQUAL_TO), .7f);\n+        \n+        \n+    }\n+    \n+    \n+    \n+    private SearchRequest getSearchRequest() {\n+\n+        return getSearchRquest(RandomStringUtils.randomAscii(200), true) ;\n+        \n+    }\n+    \n+    @NotNull\n+    private SearchRequest getSearchRquest(String query, boolean live) {\n+        SearchRequest searchRequest = new SearchRequest();\n+        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();", "originalCommit": "3438952c02eb9a535aadb19d85393d75caed31a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}