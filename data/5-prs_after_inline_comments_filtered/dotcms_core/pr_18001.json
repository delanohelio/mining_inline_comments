{"pr_number": 18001, "pr_title": "Issue 17843 programatic pool config", "pr_createdAt": "2020-02-18T18:44:16Z", "pr_url": "https://github.com/dotCMS/core/pull/18001", "timeline": [{"oid": "81502c4905d723c7cc00628163ab48d228546f5f", "url": "https://github.com/dotCMS/core/commit/81502c4905d723c7cc00628163ab48d228546f5f", "message": "#17843 Initial commit to support HikariCP", "committedDate": "2020-01-23T19:14:44Z", "type": "commit"}, {"oid": "fe2e066bf335cb34e932e9774b5c0b386c403cc5", "url": "https://github.com/dotCMS/core/commit/fe2e066bf335cb34e932e9774b5c0b386c403cc5", "message": "#17843 Support HikariCP through DockerSecret and System Environment configurations", "committedDate": "2020-01-23T22:58:13Z", "type": "commit"}, {"oid": "0a77911e678e09c19f1d7c5bea6eb78ed285e919", "url": "https://github.com/dotCMS/core/commit/0a77911e678e09c19f1d7c5bea6eb78ed285e919", "message": "#17843 Improving logger message", "committedDate": "2020-01-23T22:58:49Z", "type": "commit"}, {"oid": "7170a4fff27e3f5bed1a2d31d661e9e09a12865c", "url": "https://github.com/dotCMS/core/commit/7170a4fff27e3f5bed1a2d31d661e9e09a12865c", "message": "#17843 Changes to test docker secret strategy", "committedDate": "2020-02-13T17:38:53Z", "type": "commit"}, {"oid": "f767f17fa20b9ac8368ec32ab4051f3c88fb537e", "url": "https://github.com/dotCMS/core/commit/f767f17fa20b9ac8368ec32ab4051f3c88fb537e", "message": "#17843 Fixing errors reading docker secrets", "committedDate": "2020-02-13T22:42:39Z", "type": "commit"}, {"oid": "e782211c2921941aa0e6272433d1292af0d47664", "url": "https://github.com/dotCMS/core/commit/e782211c2921941aa0e6272433d1292af0d47664", "message": "#17843 Avoid looking datasource using jndi", "committedDate": "2020-02-15T03:52:58Z", "type": "commit"}, {"oid": "34ca102fa6675876e104bc00e474314ff25779d5", "url": "https://github.com/dotCMS/core/commit/34ca102fa6675876e104bc00e474314ff25779d5", "message": "#17843 Setting datasource to JNDI context", "committedDate": "2020-02-18T15:51:20Z", "type": "commit"}, {"oid": "ec309e9eb489ece1d8f1d248d23abfb0a394f971", "url": "https://github.com/dotCMS/core/commit/ec309e9eb489ece1d8f1d248d23abfb0a394f971", "message": "#17843 Setting datasource to JNDI context", "committedDate": "2020-02-18T16:24:47Z", "type": "commit"}, {"oid": "ff7290901e09fe30cd71dfe3d1e186bd23622696", "url": "https://github.com/dotCMS/core/commit/ff7290901e09fe30cd71dfe3d1e186bd23622696", "message": "#17843 Setting datasource to JNDI context", "committedDate": "2020-02-18T16:33:26Z", "type": "commit"}, {"oid": "ac357151805e2da21715d8d570601627b9913706", "url": "https://github.com/dotCMS/core/commit/ac357151805e2da21715d8d570601627b9913706", "message": "#17843 Renaming properties names", "committedDate": "2020-02-18T18:28:40Z", "type": "commit"}, {"oid": "adc9a627ed69e3d8655ea998d2b7f08afc953699", "url": "https://github.com/dotCMS/core/commit/adc9a627ed69e3d8655ea998d2b7f08afc953699", "message": "#17843 Rolling back changes", "committedDate": "2020-02-18T18:43:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MTcwNQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r380951705", "bodyText": "does it has unit test?\nit should check diff scenarios", "author": "jdotcms", "createdAt": "2020-02-18T21:41:18Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * Original code was taken from https://github.com/carsdotcom/docker-secrets-java/blob/master/src/main/java/com/cars/framework/secrets/DockerSecrets.java\n+ * and modified to our needs (License type: Apache 2.0)\n+ * @author github.com/carsdotcom\n+ */\n+public class DockerSecretsUtil {\n+\n+    private static final String SECRETS_DIR = \"/run/secrets/\";\n+\n+    public static Map<String, String> load() throws DotRuntimeException {\n+        File secretsDir = new File(SECRETS_DIR);\n+        return load(secretsDir);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final String fileName) throws DotRuntimeException {\n+        File secretsFile;\n+        if (Paths.get(fileName).isAbsolute()){\n+            secretsFile = new File(fileName);\n+        }else{\n+            secretsFile = new File(SECRETS_DIR + fileName);\n+        }\n+\n+        return loadFromFile(secretsFile);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final File secretsFile)\n+            throws DotRuntimeException {\n+\n+        if (!secretsFile.exists()) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+\n+        final Map<String, String> secrets = new HashMap<>();\n+\n+        try {\n+            final List<String> lines = Files.readAllLines(secretsFile.toPath(), Charset.defaultCharset());", "originalCommit": "adc9a627ed69e3d8655ea998d2b7f08afc953699", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEyNTU3NA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382125574", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-20T16:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MTcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MTkxNA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r380951914", "bodyText": "I used to do also secretsDir.canRead()", "author": "jdotcms", "createdAt": "2020-02-18T21:41:47Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * Original code was taken from https://github.com/carsdotcom/docker-secrets-java/blob/master/src/main/java/com/cars/framework/secrets/DockerSecrets.java\n+ * and modified to our needs (License type: Apache 2.0)\n+ * @author github.com/carsdotcom\n+ */\n+public class DockerSecretsUtil {\n+\n+    private static final String SECRETS_DIR = \"/run/secrets/\";\n+\n+    public static Map<String, String> load() throws DotRuntimeException {\n+        File secretsDir = new File(SECRETS_DIR);\n+        return load(secretsDir);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final String fileName) throws DotRuntimeException {\n+        File secretsFile;\n+        if (Paths.get(fileName).isAbsolute()){\n+            secretsFile = new File(fileName);\n+        }else{\n+            secretsFile = new File(SECRETS_DIR + fileName);\n+        }\n+\n+        return loadFromFile(secretsFile);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final File secretsFile)\n+            throws DotRuntimeException {\n+\n+        if (!secretsFile.exists()) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+\n+        final Map<String, String> secrets = new HashMap<>();\n+\n+        try {\n+            final List<String> lines = Files.readAllLines(secretsFile.toPath(), Charset.defaultCharset());\n+            for (String line : lines) {\n+                final int index = line.indexOf(\"=\");\n+                if (index < 0) {\n+                    throw new DotRuntimeException(\n+                            \"Invalid secrets in file at [\" + secretsFile.toPath() + \"]\");\n+                }\n+                final String key = line.substring(0, index);\n+                final String value = line.substring(index + 1);\n+                secrets.put(key, value);\n+            }\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+        return secrets;\n+\n+    }\n+\n+\n+    public static Map<String, String> load(final File secretsDir) throws DotRuntimeException {\n+\n+        if (!secretsDir.exists()) {", "originalCommit": "adc9a627ed69e3d8655ea998d2b7f08afc953699", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjYwNQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r380952605", "bodyText": "this could be FunctionalInterface since it is just want method, also add some doc", "author": "jdotcms", "createdAt": "2020-02-18T21:43:17Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DotDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.dotmarketing.db;\n+\n+import javax.sql.DataSource;\n+\n+public interface DotDatasourceStrategy {", "originalCommit": "adc9a627ed69e3d8655ea998d2b7f08afc953699", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2Njc3Mw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r381366773", "bodyText": "Use DB_PROPERTIES_FILE_NAME", "author": "dsilvam", "createdAt": "2020-02-19T15:57:20Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import com.dotcms.repackage.com.zaxxer.hikari.HikariConfig;\n+import com.dotcms.repackage.com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(\"db.properties\");", "originalCommit": "adc9a627ed69e3d8655ea998d2b7f08afc953699", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzQyMQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r381387421", "bodyText": "Please remove this stack", "author": "dsilvam", "createdAt": "2020-02-19T16:25:40Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import com.dotcms.repackage.com.zaxxer.hikari.HikariConfig;\n+import com.dotcms.repackage.com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(\"db.properties\");\n+        return resourceURL!=null && new File(resourceURL.getPath()).exists();\n+    }\n+\n+    @Override\n+    public DataSource getDatasource() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME);\n+\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+            properties.load(loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME));\n+\n+            final HikariConfig config = new HikariConfig();\n+\n+            config.setPoolName(Constants.DATABASE_DEFAULT_DATASOURCE);\n+            config.setDriverClassName(properties.getString(\"connection_db_driver\"));\n+            config.setJdbcUrl(properties.getString(\"connection_db_base_url\"));\n+            config.setUsername(properties.getString(\"connection_db_username\"));\n+            config.setPassword(properties.getString(\"connection_db_password\"));\n+            config.setMaximumPoolSize(properties.getInt(\"connection_db_max_total\", 60));\n+            config.setIdleTimeout(properties.getInt(\"connection_db_max_idle\", 10) * 1000);\n+            config.setMaxLifetime(properties.getInt(\"connection_db_max_wait\", 60000));\n+            config.setConnectionTestQuery(properties.getString(\"connection_db_validation_query\"));\n+\n+            // This property controls the amount of time that a connection can be out of the pool before a message\n+            // is logged indicating a possible connection leak. A value of 0 means leak detection is disabled.\n+            // Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0\n+            config.setLeakDetectionThreshold(properties.getInt(\"connection_db_leak_detection_threshold\", 60000));\n+\n+            config.setTransactionIsolation(properties.getString(\"connection_db_default_transaction_isolation\"));\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException e) {\n+            Logger.error(DBPropertiesDatasourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+            if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n+                e.printStackTrace();", "originalCommit": "adc9a627ed69e3d8655ea998d2b7f08afc953699", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f92ee37ee8dd80592d70b089f587a5c5c679c6e6", "url": "https://github.com/dotCMS/core/commit/f92ee37ee8dd80592d70b089f587a5c5c679c6e6", "message": "#17843 Upgrading HikariCP library", "committedDate": "2020-02-19T17:00:36Z", "type": "commit"}, {"oid": "30c5a811a1d95775e431c42e165c0ab5be91282e", "url": "https://github.com/dotCMS/core/commit/30c5a811a1d95775e431c42e165c0ab5be91282e", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-17843-programatic-pool-config", "committedDate": "2020-02-19T17:00:52Z", "type": "commit"}, {"oid": "521720f175109f99816ea2f0e538d9aead7c6856", "url": "https://github.com/dotCMS/core/commit/521720f175109f99816ea2f0e538d9aead7c6856", "message": "Troubleshooting", "committedDate": "2020-02-19T19:03:11Z", "type": "commit"}, {"oid": "825f152905fdbf338e0b49a9f2011ee1eb7cf237", "url": "https://github.com/dotCMS/core/commit/825f152905fdbf338e0b49a9f2011ee1eb7cf237", "message": "#17843 Making configurable saving datasource in JNDI", "committedDate": "2020-02-19T19:59:36Z", "type": "commit"}, {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1", "url": "https://github.com/dotCMS/core/commit/73de78567051455eb88b97b28c3ca4fc25e1e0f1", "message": "#17843 Applying code review suggestions", "committedDate": "2020-02-19T21:45:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5OTQyMg==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382099422", "bodyText": "I think it should be a private method: addJNDIIfNeeded,  and remove the comment", "author": "freddyucv", "createdAt": "2020-02-20T16:07:31Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -100,20 +112,34 @@ public static DataSource getDataSource() {\n             synchronized (DbConnectionFactory.class) {\n \n                 if (null == defaultDataSource) {\n+                    if (DBPropertiesDatasourceStrategy.getInstance().existsDBPropertiesFile()) {\n+                        defaultDataSource = DBPropertiesDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from db.properties file\");\n+                    } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                        defaultDataSource = SystemEnvDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from system environment\");\n+                    } else {\n+                        defaultDataSource = DockerSecretDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from Docker Secret\");\n+                    }\n+\n+                    if (null == defaultDataSource){\n+                        defaultDataSource = TomcatDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from context.xml\");\n+                    }\n \n                     try {\n-                        final InitialContext ctx = new InitialContext();\n-                        defaultDataSource = (DataSource) JNDIUtil.lookup(ctx, Constants.DATABASE_DEFAULT_DATASOURCE);\n-                    } catch (Throwable e) {\n-                        Logger.error(DbConnectionFactory.class,\n-                                \"---------- DBConnectionFactory: error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE,\n-                                e);\n-                        if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n-                          e.printStackTrace();\n-                          System.exit(1);\n+                        //Adds datasource to JNDI if needed", "originalCommit": "73de78567051455eb88b97b28c3ca4fc25e1e0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzMzgxMQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382233811", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-20T20:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5OTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMDIwNg==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382100206", "bodyText": "I think this logci should be done here\nhttps://github.com/dotCMS/core/pull/18001/files#diff-af00bd78368cad4f517e1e6efb230d80R124\nand not in each Strategy", "author": "freddyucv", "createdAt": "2020-02-20T16:08:54Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotmarketing.db;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        return resourceURL!=null && new File(resourceURL.getPath()).exists();\n+    }\n+\n+    @Override\n+    public DataSource getDatasource() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME);\n+\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+            properties.load(loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME));\n+\n+            final HikariConfig config = new HikariConfig();\n+\n+            config.setPoolName(Constants.DATABASE_DEFAULT_DATASOURCE);\n+            config.setDriverClassName(properties.getString(\"connection_db_driver\"));\n+            config.setJdbcUrl(properties.getString(\"connection_db_base_url\"));\n+            config.setUsername(properties.getString(\"connection_db_username\"));\n+            config.setPassword(properties.getString(\"connection_db_password\"));\n+            config.setMaximumPoolSize(properties.getInt(\"connection_db_max_total\", 60));\n+            config.setIdleTimeout(properties.getInt(\"connection_db_max_idle\", 10) * 1000);\n+            config.setMaxLifetime(properties.getInt(\"connection_db_max_wait\", 60000));\n+            config.setConnectionTestQuery(properties.getString(\"connection_db_validation_query\"));\n+\n+            // This property controls the amount of time that a connection can be out of the pool before a message\n+            // is logged indicating a possible connection leak. A value of 0 means leak detection is disabled.\n+            // Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0\n+            config.setLeakDetectionThreshold(properties.getInt(\"connection_db_leak_detection_threshold\", 60000));\n+\n+            config.setTransactionIsolation(properties.getString(\"connection_db_default_transaction_isolation\"));\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException e) {\n+            Logger.error(DBPropertiesDatasourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+            if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n+                System.exit(1);", "originalCommit": "73de78567051455eb88b97b28c3ca4fc25e1e0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzMjkyNQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382232925", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-20T20:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMDIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTY3NQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382101675", "bodyText": "I think each strategy should have test", "author": "freddyucv", "createdAt": "2020-02-20T16:11:23Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotmarketing.db;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        return resourceURL!=null && new File(resourceURL.getPath()).exists();\n+    }\n+\n+    @Override\n+    public DataSource getDatasource() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME);\n+\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+            properties.load(loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME));\n+\n+            final HikariConfig config = new HikariConfig();\n+\n+            config.setPoolName(Constants.DATABASE_DEFAULT_DATASOURCE);\n+            config.setDriverClassName(properties.getString(\"connection_db_driver\"));\n+            config.setJdbcUrl(properties.getString(\"connection_db_base_url\"));\n+            config.setUsername(properties.getString(\"connection_db_username\"));\n+            config.setPassword(properties.getString(\"connection_db_password\"));\n+            config.setMaximumPoolSize(properties.getInt(\"connection_db_max_total\", 60));\n+            config.setIdleTimeout(properties.getInt(\"connection_db_max_idle\", 10) * 1000);\n+            config.setMaxLifetime(properties.getInt(\"connection_db_max_wait\", 60000));\n+            config.setConnectionTestQuery(properties.getString(\"connection_db_validation_query\"));\n+\n+            // This property controls the amount of time that a connection can be out of the pool before a message\n+            // is logged indicating a possible connection leak. A value of 0 means leak detection is disabled.\n+            // Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0\n+            config.setLeakDetectionThreshold(properties.getInt(\"connection_db_leak_detection_threshold\", 60000));\n+\n+            config.setTransactionIsolation(properties.getString(\"connection_db_default_transaction_isolation\"));\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException e) {\n+            Logger.error(DBPropertiesDatasourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+            if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n+                System.exit(1);\n+            }\n+\n+            throw new DotRuntimeException(e.toString());\n+        }\n+    }\n+}", "originalCommit": "73de78567051455eb88b97b28c3ca4fc25e1e0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0OTAyOQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r383549029", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-24T22:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTc3OQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382101779", "bodyText": "test?", "author": "freddyucv", "createdAt": "2020-02-20T16:11:32Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -100,20 +112,34 @@ public static DataSource getDataSource() {\n             synchronized (DbConnectionFactory.class) {\n \n                 if (null == defaultDataSource) {\n+                    if (DBPropertiesDatasourceStrategy.getInstance().existsDBPropertiesFile()) {\n+                        defaultDataSource = DBPropertiesDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from db.properties file\");\n+                    } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                        defaultDataSource = SystemEnvDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from system environment\");\n+                    } else {\n+                        defaultDataSource = DockerSecretDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from Docker Secret\");\n+                    }\n+\n+                    if (null == defaultDataSource){\n+                        defaultDataSource = TomcatDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from context.xml\");\n+                    }", "originalCommit": "73de78567051455eb88b97b28c3ca4fc25e1e0f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0OTQyMA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r383549420", "bodyText": "It's difficult to add a test to this method without using PowerMockito", "author": "nollymar", "createdAt": "2020-02-24T22:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTc3OQ=="}], "type": "inlineReview"}, {"oid": "7b45f7559219c645facab43038256ae4ca136a9c", "url": "https://github.com/dotCMS/core/commit/7b45f7559219c645facab43038256ae4ca136a9c", "message": "#17843 Implementing unit tests", "committedDate": "2020-02-20T16:48:18Z", "type": "commit"}, {"oid": "7e31e948f23cf0439070a86f521582b0ee231474", "url": "https://github.com/dotCMS/core/commit/7e31e948f23cf0439070a86f521582b0ee231474", "message": "#17843 Adding support for custom datasource strategy and some refactoring", "committedDate": "2020-02-20T20:12:42Z", "type": "commit"}, {"oid": "6cf64a8873a49bf6da6505e0b9bc648dd1c0054d", "url": "https://github.com/dotCMS/core/commit/6cf64a8873a49bf6da6505e0b9bc648dd1c0054d", "message": "#17843 Applying code review suggestions", "committedDate": "2020-02-20T20:14:59Z", "type": "commit"}, {"oid": "d40613b532053216c4cf27b45d9c4e8b7a2899b2", "url": "https://github.com/dotCMS/core/commit/d40613b532053216c4cf27b45d9c4e8b7a2899b2", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-17843-programatic-pool-config", "committedDate": "2020-02-21T18:21:33Z", "type": "commit"}, {"oid": "0e82d7770767723fd7894886645954935bc726c2", "url": "https://github.com/dotCMS/core/commit/0e82d7770767723fd7894886645954935bc726c2", "message": "#17843 Fixing validation", "committedDate": "2020-02-21T19:21:27Z", "type": "commit"}, {"oid": "522d9b60c31665d7bb27d58111a6f0db608d713c", "url": "https://github.com/dotCMS/core/commit/522d9b60c31665d7bb27d58111a6f0db608d713c", "message": "#17843 Renaming datasources classes", "committedDate": "2020-02-24T21:28:17Z", "type": "commit"}, {"oid": "05b701fe411832233b4a82301fbf16f7be650e83", "url": "https://github.com/dotCMS/core/commit/05b701fe411832233b4a82301fbf16f7be650e83", "message": "#17843 Implementing ITs", "committedDate": "2020-02-24T21:31:35Z", "type": "commit"}, {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c", "url": "https://github.com/dotCMS/core/commit/1c4aaa49e57bf9086399a1504d8316eee337008c", "message": "#17843 New utility class to get system environment tests", "committedDate": "2020-02-24T21:32:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMjI5MQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384012291", "bodyText": "what is the expected result of this test?", "author": "dsilvam", "createdAt": "2020-02-25T17:16:42Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {", "originalCommit": "1c4aaa49e57bf9086399a1504d8316eee337008c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDg1Mw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160853", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-25T22:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMjI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMzU5OA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384013598", "bodyText": "should these properties be constants? I see them repeated a few times", "author": "dsilvam", "createdAt": "2020-02-25T17:18:42Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        Mockito.when(systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")).thenReturn(tempFile.getPath());\n+\n+        final DockerSecretDataSourceStrategy strategy = new DockerSecretDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final DataSource dataSource = strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    @Test\n+    public void testGetHikariConfig(){\n+        final Map<String, String> dockerSecretsMap = new HashMap<>();\n+\n+        dockerSecretsMap.put(\"connection_db_driver\", \"org.postgresql.Driver\");", "originalCommit": "1c4aaa49e57bf9086399a1504d8316eee337008c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDgwNA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160804", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-25T22:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMzU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNDMyNw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384014327", "bodyText": "given scenario and expected result?", "author": "dsilvam", "createdAt": "2020-02-25T17:19:56Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, NamingException {", "originalCommit": "1c4aaa49e57bf9086399a1504d8316eee337008c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDc2OQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160769", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-25T22:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNDMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNTQ0Ng==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384015446", "bodyText": "given scenario and expected result?", "author": "dsilvam", "createdAt": "2020-02-25T17:21:37Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, NamingException {", "originalCommit": "1c4aaa49e57bf9086399a1504d8316eee337008c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDc0Mw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160743", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-25T22:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNTQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNDQ1Mw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384024453", "bodyText": "if Docker secrets can't be applied, do we log this anyways? might be deceiving", "author": "dsilvam", "createdAt": "2020-02-25T17:36:31Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -123,6 +133,79 @@ public static DataSource getDataSource() {\n         return defaultDataSource;\n     }\n \n+    /**\n+     * Method that loads a datasource from a custom implementation if <b>DATASOURCE_PROVIDER_STRATEGY_CLASS</b>\n+     * property is defined. Otherwise, the datasource is initialized using any of these implementations (respecting order):<br>\n+     * 1. A db.properties file in WEB-INF/classes implemented by {@link DBPropertiesDataSourceStrategy}<br>\n+     * 2. Configuration is taken from environment variables implemented by {@link SystemEnvDataSourceStrategy}<br>\n+     * 3. Getting Docker Secrets if set. Implementation: {@link DockerSecretDataSourceStrategy}<br>\n+     * 4. A context.xml file in META-INF. Implementation: {@link TomcatDataSourceStrategy}\n+     *\n+     * @throws InstantiationException\n+     * @throws IllegalAccessException\n+     * @throws ClassNotFoundException\n+     */\n+    private static void loadDatasource()\n+            throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+        final String providerClassName = Config\n+                .getStringProperty(\"DATASOURCE_PROVIDER_STRATEGY_CLASS\", null);\n+\n+        if (!UtilMethods.isSet(providerClassName)) {\n+            if (DBPropertiesDataSourceStrategy.getInstance()\n+                    .existsDBPropertiesFile()) {\n+                defaultDataSource = DBPropertiesDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from db.properties file\");\n+            } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                defaultDataSource = SystemEnvDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from system environment\");\n+            } else {\n+                defaultDataSource = DockerSecretDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,", "originalCommit": "1c4aaa49e57bf9086399a1504d8316eee337008c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNTMyMA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384025320", "bodyText": "shouldn't this else check for something like systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")!=null like in the Docker strategy, or something else? or if not at least not logging  Datasource loaded from Docker Secret in case defaultDataSource is null.", "author": "dsilvam", "createdAt": "2020-02-25T17:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNDQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDY3NA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160674", "bodyText": "Done", "author": "nollymar", "createdAt": "2020-02-25T22:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNDQ1Mw=="}], "type": "inlineReview"}, {"oid": "c07140a0c71ef64b80ca947fc1ca6616545d4bc2", "url": "https://github.com/dotCMS/core/commit/c07140a0c71ef64b80ca947fc1ca6616545d4bc2", "message": "#17843 Javadoc", "committedDate": "2020-02-25T22:13:25Z", "type": "commit"}, {"oid": "c198d8f9ea81afc9c6104da3efa9b3e12d5341fb", "url": "https://github.com/dotCMS/core/commit/c198d8f9ea81afc9c6104da3efa9b3e12d5341fb", "message": "#17843 Refactoring logic to obtain a datasource provider", "committedDate": "2020-02-25T22:16:06Z", "type": "commit"}, {"oid": "c1949a3414e19a7f89c0848646cbeac10df2373c", "url": "https://github.com/dotCMS/core/commit/c1949a3414e19a7f89c0848646cbeac10df2373c", "message": "#17843 Deprecating unused class", "committedDate": "2020-02-25T22:17:02Z", "type": "commit"}, {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b", "url": "https://github.com/dotCMS/core/commit/e471264c8b61c5473139b9299774ba75d9e15a8b", "message": "#17843 Some refactoring to extract constant variables", "committedDate": "2020-02-25T22:17:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDkyMA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164920", "bodyText": "Issue found: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:48Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDataSourceStrategy.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.dotmarketing.db;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDataSourceStrategy implements DotDataSourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private static File propertiesFile;\n+\n+    @VisibleForTesting\n+    DBPropertiesDataSourceStrategy(final File file){\n+        propertiesFile = file;\n+    }\n+\n+    private DBPropertiesDataSourceStrategy(){\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        if (resourceURL!=null){\n+            propertiesFile = new File(resourceURL.getPath());\n+        }\n+\n+    }\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDataSourceStrategy INSTANCE = new DBPropertiesDataSourceStrategy();\n+    }\n+\n+    public static DBPropertiesDataSourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        return propertiesFile!=null && propertiesFile.exists();\n+    }\n+\n+    @Override\n+    public DataSource apply() {\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+\n+            if (!(existsDBPropertiesFile())){\n+                throw new FileNotFoundException(\"DB properties file not found\");\n+            }\n+\n+            properties.load(new FileInputStream(propertiesFile));", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDkzNg==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164936", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:49Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretDataSourceStrategy.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotmarketing.db;\n+\n+import static com.dotmarketing.db.DataSourceStrategyProvider.CONNECTION_DB_MAX_WAIT;\n+import static com.dotmarketing.db.DataSourceStrategyProvider.CONNECTION_DB_PASSWORD;\n+\n+import com.dotmarketing.util.Constants;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Singleton class that provides a datasource using docker secret configuration\n+ * If <b>DOCKER_SECRET_FILE_PATH</b> environment variable is set, secrets credential will be taken from this file.\n+ * Otherwise, they will be read from <b>/run/secrets/</b> path\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategy implements DotDataSourceStrategy {\n+\n+    private static SystemEnvironmentProperties systemEnvironmentProperties;\n+\n+    public static final String DOCKER_SECRET_FILE_PATH_PROPERTY = \"DOCKER_SECRET_FILE_PATH\";\n+\n+    private DockerSecretDataSourceStrategy(){\n+        systemEnvironmentProperties = new SystemEnvironmentProperties();\n+    }\n+\n+    @VisibleForTesting\n+    DockerSecretDataSourceStrategy(final SystemEnvironmentProperties systemEnvironmentProperties){\n+        this.systemEnvironmentProperties = systemEnvironmentProperties;\n+    }\n+\n+\n+    private static class SingletonHelper{\n+        private static final DockerSecretDataSourceStrategy INSTANCE = new DockerSecretDataSourceStrategy();\n+    }\n+\n+    public static DockerSecretDataSourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    public boolean dockerSecretPathExists(){\n+\n+        final File secretsDir = new File(DockerSecretsUtil.SECRETS_DIR);\n+        return systemEnvironmentProperties.getVariable(DOCKER_SECRET_FILE_PATH_PROPERTY) != null\n+                || (secretsDir.exists() && secretsDir.canRead());", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk0NA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164944", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:51Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DBPropertiesDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for {@link DBPropertiesDataSourceStrategy} class\n+ *\n+ * @author nollymar\n+ */\n+public class DBPropertiesDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk1Mg==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164952", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:52Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();\n+\n+        assertNotNull(result);\n+        assertEquals(dummyDatasource, result);\n+\n+        Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk2MA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164960", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:53Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk2OQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164969", "bodyText": "Issue found: New exception is thrown in catch block, original stack trace may be lost", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:54Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDataSourceStrategy.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.dotmarketing.db;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDataSourceStrategy implements DotDataSourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private static File propertiesFile;\n+\n+    @VisibleForTesting\n+    DBPropertiesDataSourceStrategy(final File file){\n+        propertiesFile = file;\n+    }\n+\n+    private DBPropertiesDataSourceStrategy(){\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        if (resourceURL!=null){\n+            propertiesFile = new File(resourceURL.getPath());\n+        }\n+\n+    }\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDataSourceStrategy INSTANCE = new DBPropertiesDataSourceStrategy();\n+    }\n+\n+    public static DBPropertiesDataSourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        return propertiesFile!=null && propertiesFile.exists();\n+    }\n+\n+    @Override\n+    public DataSource apply() {\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+\n+            if (!(existsDBPropertiesFile())){\n+                throw new FileNotFoundException(\"DB properties file not found\");\n+            }\n+\n+            properties.load(new FileInputStream(propertiesFile));\n+\n+            final HikariConfig config = getHikariConfig(properties);\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException | FileNotFoundException e) {\n+            Logger.error(DBPropertiesDataSourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+\n+            throw new DotRuntimeException(e.toString());", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk4Mw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164983", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:55Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk5MA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164990", "bodyText": "Issue found: Local variable 'customStrategy' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:56Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DataSourceStrategyProvider.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Class used to obtain a valid DataSource strategy provider\n+ * @author nollymar\n+ */\n+public class DataSourceStrategyProvider {\n+\n+    static final String CONNECTION_DB_DRIVER = \"connection_db_driver\";\n+    static final String CONNECTION_DB_BASE_URL = \"connection_db_base_url\";\n+    static final String CONNECTION_DB_USERNAME = \"connection_db_username\";\n+    static final String CONNECTION_DB_PASSWORD = \"connection_db_password\";\n+    static final String CONNECTION_DB_MAX_WAIT = \"connection_db_max_wait\";\n+    static final String CONNECTION_DB_MAX_TOTAL = \"connection_db_max_total\";\n+    static final String CONNECTION_DB_MAX_IDLE = \"connection_db_max_idle\";\n+    static final String CONNECTION_DB_VALIDATION_QUERY = \"connection_db_validation_query\";\n+    static final String CONNECTION_DB_LEAK_DETECTION_THRESHOLD = \"connection_db_leak_detection_threshold\";\n+    static final String CONNECTION_DB_DEFAULT_TRANSACTION_ISOLATION = \"connection_db_default_transaction_isolation\";\n+    private static SystemEnvironmentProperties systemEnvironmentProperties;\n+\n+    @VisibleForTesting\n+    DataSourceStrategyProvider(){\n+        systemEnvironmentProperties = new SystemEnvironmentProperties();\n+    }\n+\n+    private static class SingletonHelper{\n+        private static final DataSourceStrategyProvider INSTANCE = new DataSourceStrategyProvider();\n+    }\n+\n+    public static DataSourceStrategyProvider getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     * Method that loads a datasource from a custom implementation if <b>DATASOURCE_PROVIDER_STRATEGY_CLASS</b>\n+     * property is defined. Otherwise, the datasource is initialized using any of these implementations (respecting order):<br>\n+     * 1. A db.properties file in WEB-INF/classes implemented by {@link DBPropertiesDataSourceStrategy}<br>\n+     * 2. Configuration is taken from environment variables implemented by {@link SystemEnvDataSourceStrategy}<br>\n+     * 3. Getting Docker Secrets if set. Implementation: {@link DockerSecretDataSourceStrategy}<br>\n+     * 4. A context.xml file in META-INF. Implementation: {@link TomcatDataSourceStrategy}\n+     *\n+     * @throws InstantiationException\n+     * @throws IllegalAccessException\n+     * @throws ClassNotFoundException\n+     */\n+    public DataSource get()\n+            throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n+\n+        DataSource defaultDataSource = null;\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = getSystemEnvironmentProperties();\n+\n+        final String providerClassName = getCustomDataSourceProvider();\n+\n+        if (!UtilMethods.isSet(providerClassName)) {\n+            if (getDBPropertiesInstance()\n+                    .existsDBPropertiesFile()) {\n+                defaultDataSource = getDBPropertiesInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from db.properties file\");\n+            } else if (systemEnvironmentProperties.getVariable(\"connection_db_base_url\") != null) {\n+                defaultDataSource = getSystemEnvDataSourceInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from system environment\");\n+            } else if (getDockerSecretDataSourceInstance().dockerSecretPathExists()){\n+                defaultDataSource = getDockerSecretDataSourceInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from Docker Secret\");\n+            }\n+\n+            if (null == defaultDataSource) {\n+                defaultDataSource = getTomcatDataSourceInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from context.xml\");\n+            }\n+        } else {\n+            DotDataSourceStrategy customStrategy = ((Class<DotDataSourceStrategy>) Class", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTAwMQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165001", "bodyText": "Issue found: New exception is thrown in catch block, original stack trace may be lost", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:57Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * Original code was taken from https://github.com/carsdotcom/docker-secrets-java/blob/master/src/main/java/com/cars/framework/secrets/DockerSecrets.java\n+ * and modified to our needs (License type: Apache 2.0)\n+ * @author github.com/carsdotcom\n+ */\n+public final class DockerSecretsUtil {\n+\n+    public static final String SECRETS_DIR = \"/run/secrets/\";\n+\n+    private DockerSecretsUtil(){\n+\n+    }\n+\n+    public static Map<String, String> load() throws DotRuntimeException {\n+        final File secretsDir = new File(SECRETS_DIR);\n+        return load(secretsDir);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final String fileName) throws DotRuntimeException {\n+        File secretsFile;\n+        if (Paths.get(fileName).isAbsolute()){\n+            secretsFile = new File(fileName);\n+        }else{\n+            secretsFile = new File(SECRETS_DIR + fileName);\n+        }\n+\n+        return loadFromFile(secretsFile);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final File secretsFile)\n+            throws DotRuntimeException {\n+\n+        if (!secretsFile.exists() || !secretsFile.canRead()) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+\n+        final Map<String, String> secrets = new HashMap<>();\n+\n+        try {\n+            final List<String> lines = Files.readAllLines(secretsFile.toPath(), Charset.defaultCharset());\n+            for (final String line : lines) {\n+                final int index = line.indexOf('=');\n+                if (index < 0) {\n+                    throw new DotRuntimeException(\n+                            \"Invalid secrets in file at [\" + secretsFile.toPath() + \"]\");\n+                }\n+                final String key = line.substring(0, index);\n+                final String value = line.substring(index + 1);\n+                secrets.put(key, value);\n+            }\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTAxMg==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165012", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:58Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();\n+\n+        assertNotNull(result);\n+        assertEquals(dummyDatasource, result);\n+\n+        Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n+        Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();\n+        Mockito.verify(dockerSecretStrategy, Mockito.times(testCase.equals(\"DockerSecret\")? 1: 0)).apply();\n+        Mockito.verify(tomcatDataSourceStrategy, Mockito.times(testCase.equals(\"Tomcat\")? 1: 0)).apply();", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTAyMg==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165022", "bodyText": "Issue found: JUnit 4 tests that execute tests should use the @Test annotation, JUnit 5 tests should use @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest", "author": "dev-dotcms", "createdAt": "2020-02-25T22:27:59Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTAzMA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165030", "bodyText": "Issue found: New exception is thrown in catch block, original stack trace may be lost", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:01Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/TomcatDataSourceStrategy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.dotmarketing.db;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.JNDIUtil;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Singleton class that obtains a datasource from a <b>context.xml</b> file\n+ * @author nollymar\n+ */\n+public class TomcatDataSourceStrategy implements DotDataSourceStrategy {\n+\n+    private TomcatDataSourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static TomcatDataSourceStrategy INSTANCE = new TomcatDataSourceStrategy();\n+    }\n+\n+    public static TomcatDataSourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    @Override\n+    public DataSource apply() {\n+        try {\n+            final InitialContext ctx = new InitialContext();\n+            final HikariConfig config = new HikariConfig();\n+            config.setDataSource((DataSource) JNDIUtil.lookup(ctx, Constants.DATABASE_DEFAULT_DATASOURCE));\n+            return new HikariDataSource(config);\n+        } catch (NamingException e) {\n+            Logger.error(TomcatDataSourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE + \" from context.xml\",\n+                    e);\n+\n+            throw new DotRuntimeException(e.toString());", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA0NQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165045", "bodyText": "Issue found: Parameter 'properties' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:03Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link SystemEnvDataSourceStrategy#apply()}\n+     * Test case: Happy path to get a DataSource using system environment variables\n+     * Expected result: A valid HikariDataSource should be returned\n+     * @throws SQLException\n+     * @throws NamingException\n+     */\n+    @Test\n+    public void testApply() throws SQLException, NamingException {\n+        final Map<String, String> properties = new HashMap<>();\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+        properties.put(\"connection_db_driver\", testDatasource.getDriverClassName());\n+        properties.put(\"connection_db_base_url\", testDatasource.getJdbcUrl());\n+        properties.put(\"connection_db_username\", testDatasource.getUsername());\n+        properties.put(\"connection_db_password\", testDatasource.getPassword());\n+        properties.put(\"connection_db_max_total\", \"60\");\n+        properties.put(\"connection_db_max_idle\", \"10\");\n+        properties.put(\"connection_db_max_wait\", \"60000\");\n+        properties.put(\"connection_db_validation_query\", \"SELECT 1\");\n+        properties.put(\"connection_db_leak_detection_threshold\", \"60000\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        properties.forEach((k,v) -> Mockito.when(systemEnvironmentProperties.getVariable(k)).thenReturn(v));\n+\n+        SystemEnvDataSourceStrategy strategy = new SystemEnvDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final HikariDataSource dataSource = (HikariDataSource)\n+                strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertNotNull(dataSource.getConnection());\n+        validateConfiguration(dataSource, properties);\n+    }\n+\n+    /**\n+     * Verifies all values in the dataSource object are set correctly\n+     * @param dataSource {@link HikariDataSource} to be validated\n+     * @param properties {@link Map} contains the expected values to be compared\n+     */\n+    private void validateConfiguration(final HikariDataSource dataSource, Map<String, String> properties) {", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA2MA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165060", "bodyText": "Issue found: Local variable 'result' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:05Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA3Mw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165073", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:06Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();\n+\n+        assertNotNull(result);\n+        assertEquals(dummyDatasource, result);\n+\n+        Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n+        Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA5MQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165091", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:07Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DBPropertiesDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for {@link DBPropertiesDataSourceStrategy} class\n+ *\n+ * @author nollymar\n+ */\n+public class DBPropertiesDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testExistsDBPropertiesFileShouldReturnFalse() {\n+        final DBPropertiesDataSourceStrategy strategy = new DBPropertiesDataSourceStrategy(\n+                new File(\"fake_file.properties\"));\n+        assertFalse(strategy.existsDBPropertiesFile());\n+    }\n+\n+    @Test\n+    public void testExistsDBPropertiesFileShouldReturnTrue() throws IOException {\n+        final Path path = Files.createTempFile(\"test\", String.valueOf(System.currentTimeMillis()));\n+        final DBPropertiesDataSourceStrategy strategy = new DBPropertiesDataSourceStrategy(\n+                path.toFile());\n+        assertTrue(strategy.existsDBPropertiesFile());\n+    }\n+\n+    @Test(expected = DotRuntimeException.class)\n+    public void testApplyWithANonExistingFileShouldFail() {\n+        new DBPropertiesDataSourceStrategy(new File(\"fake_file.properties\")).apply();\n+    }\n+\n+    @Test(expected = DotRuntimeException.class)\n+    public void testApplyWithANullFileShouldFail() {\n+        new DBPropertiesDataSourceStrategy(null).apply();\n+    }\n+\n+    @Test\n+    public void testApplyWithValidFileShouldPass()\n+            throws IOException, SQLException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final DataSource dataSource = new DBPropertiesDataSourceStrategy(tempFile).apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    @Test\n+    public void testGetHikariConfigWithValidFileShouldPass()", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTEwMg==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165102", "bodyText": "Issue found: Parameter 'dockerSecretsMap' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:09Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link DockerSecretDataSourceStrategy#apply()}\n+     * Test case: Happy path to get a DataSource using a docker secrets file\n+     * Expected result: A valid HikariDataSource should be returned\n+     * @throws SQLException\n+     * @throws IOException\n+     * @throws NamingException\n+     */\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        Mockito.when(systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")).thenReturn(tempFile.getPath());\n+\n+        final DockerSecretDataSourceStrategy strategy = new DockerSecretDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final DataSource dataSource = strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    /**\n+     * Method to test: {@link DockerSecretDataSourceStrategy#getHikariConfig(Map)}\n+     * Test case: Tests that all values in the config object are set correctly\n+     * Expected result: Success\n+     */\n+    @Test\n+    public void testGetHikariConfig(){\n+        final Map<String, String> dockerSecretsMap = new HashMap<>();\n+\n+        dockerSecretsMap.put(\"connection_db_driver\", \"org.postgresql.Driver\");\n+        dockerSecretsMap.put(\"connection_db_base_url\", \"jdbc:postgresql://localhost/dotcms\");\n+        dockerSecretsMap.put(\"connection_db_username\", \"username\");\n+        dockerSecretsMap.put(\"connection_db_password\", \"password\");\n+        dockerSecretsMap.put(\"connection_db_max_total\", \"60\");\n+        dockerSecretsMap.put(\"connection_db_max_idle\", \"10\");\n+        dockerSecretsMap.put(\"connection_db_max_wait\", \"60000\");\n+        dockerSecretsMap.put(\"connection_db_validation_query\", \"SELECT 1\");\n+        dockerSecretsMap.put(\"connection_db_leak_detection_threshold\", \"60000\");\n+\n+        final HikariConfig config = DockerSecretDataSourceStrategy.getInstance()\n+                .getHikariConfig(dockerSecretsMap);\n+\n+        validateConfiguration(config, dockerSecretsMap);\n+    }\n+\n+    /**\n+     * Verifies all values in the config object are set correctly\n+     * @param config {@link HikariConfig} to be validated\n+     * @param dockerSecretsMap {@link Map} contains the expected values to be compared\n+     */\n+    private void validateConfiguration(final HikariConfig config, Map<String, String> dockerSecretsMap) {", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTExNQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165115", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:10Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTEyMw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165123", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:11Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTEzMw==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165133", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:12Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTEzOQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165139", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:13Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();\n+\n+        assertNotNull(result);\n+        assertEquals(dummyDatasource, result);\n+\n+        Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n+        Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();\n+        Mockito.verify(dockerSecretStrategy, Mockito.times(testCase.equals(\"DockerSecret\")? 1: 0)).apply();", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTE1MA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165150", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:15Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link DockerSecretDataSourceStrategy#apply()}\n+     * Test case: Happy path to get a DataSource using a docker secrets file\n+     * Expected result: A valid HikariDataSource should be returned\n+     * @throws SQLException\n+     * @throws IOException\n+     * @throws NamingException\n+     */\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        Mockito.when(systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")).thenReturn(tempFile.getPath());\n+\n+        final DockerSecretDataSourceStrategy strategy = new DockerSecretDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final DataSource dataSource = strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    /**\n+     * Method to test: {@link DockerSecretDataSourceStrategy#getHikariConfig(Map)}\n+     * Test case: Tests that all values in the config object are set correctly\n+     * Expected result: Success\n+     */\n+    @Test\n+    public void testGetHikariConfig(){", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTE1OA==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165158", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:16Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/TomcatDatasourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for {@link TomcatDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class TomcatDatasourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTE2OQ==", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165169", "bodyText": "Issue found: Local variable 'strategy' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-25T22:28:17Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link SystemEnvDataSourceStrategy#apply()}\n+     * Test case: Happy path to get a DataSource using system environment variables\n+     * Expected result: A valid HikariDataSource should be returned\n+     * @throws SQLException\n+     * @throws NamingException\n+     */\n+    @Test\n+    public void testApply() throws SQLException, NamingException {\n+        final Map<String, String> properties = new HashMap<>();\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+        properties.put(\"connection_db_driver\", testDatasource.getDriverClassName());\n+        properties.put(\"connection_db_base_url\", testDatasource.getJdbcUrl());\n+        properties.put(\"connection_db_username\", testDatasource.getUsername());\n+        properties.put(\"connection_db_password\", testDatasource.getPassword());\n+        properties.put(\"connection_db_max_total\", \"60\");\n+        properties.put(\"connection_db_max_idle\", \"10\");\n+        properties.put(\"connection_db_max_wait\", \"60000\");\n+        properties.put(\"connection_db_validation_query\", \"SELECT 1\");\n+        properties.put(\"connection_db_leak_detection_threshold\", \"60000\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        properties.forEach((k,v) -> Mockito.when(systemEnvironmentProperties.getVariable(k)).thenReturn(v));\n+\n+        SystemEnvDataSourceStrategy strategy = new SystemEnvDataSourceStrategy(systemEnvironmentProperties);", "originalCommit": "e471264c8b61c5473139b9299774ba75d9e15a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}