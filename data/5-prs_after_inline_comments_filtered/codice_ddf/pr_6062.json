{"pr_number": 6062, "pr_title": "DDF-6061 Remove all uses of deprecated mockito-all dependency", "pr_createdAt": "2020-05-14T23:56:08Z", "pr_url": "https://github.com/codice/ddf/pull/6062", "timeline": [{"oid": "fc3750eb5525b4c636f6e8ade965943fd033542a", "url": "https://github.com/codice/ddf/commit/fc3750eb5525b4c636f6e8ade965943fd033542a", "message": "DDF-6061 Remove deprecated mockito-all dependency", "committedDate": "2020-05-18T19:07:52Z", "type": "commit"}, {"oid": "f74f7660a5ca6ef2159bb4e81d47bc7ed362eea1", "url": "https://github.com/codice/ddf/commit/f74f7660a5ca6ef2159bb4e81d47bc7ed362eea1", "message": "DDF-6061 Replace deprecated Matchers class with ArgumentMatchers interface", "committedDate": "2020-05-18T19:08:22Z", "type": "commit"}, {"oid": "7e35093fd0d28f9ccdbcfac874a33a691e62e606", "url": "https://github.com/codice/ddf/commit/7e35093fd0d28f9ccdbcfac874a33a691e62e606", "message": "DDF-6061 Correct ArgumentMatcher implementations", "committedDate": "2020-05-18T19:08:34Z", "type": "commit"}, {"oid": "8ad7bf911cd5c65c0bab824facc6532187e40010", "url": "https://github.com/codice/ddf/commit/8ad7bf911cd5c65c0bab824facc6532187e40010", "message": "DDF-6061 Fix argThat usages", "committedDate": "2020-05-18T19:08:34Z", "type": "commit"}, {"oid": "dd283912cbccefe460a14934e1f209df588cda09", "url": "https://github.com/codice/ddf/commit/dd283912cbccefe460a14934e1f209df588cda09", "message": "DDF-6061 Fix getArgumentAt uses", "committedDate": "2020-05-18T19:08:35Z", "type": "commit"}, {"oid": "800e38565faf01f9b558c658860edb024ab3d199", "url": "https://github.com/codice/ddf/commit/800e38565faf01f9b558c658860edb024ab3d199", "message": "DDF-6061 Replace org.mockito.runners.MockitoJUnitRunner with org.mockito.junit.MockitoJUnitRunner", "committedDate": "2020-05-18T19:08:35Z", "type": "commit"}, {"oid": "d94b49eeba9627730d724ae8ad4e785bff52ef62", "url": "https://github.com/codice/ddf/commit/d94b49eeba9627730d724ae8ad4e785bff52ef62", "message": "DDF-6061 Update deprecated Mockito matcher methods", "committedDate": "2020-05-18T19:08:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MzY5Mw==", "url": "https://github.com/codice/ddf/pull/6062#discussion_r426843693", "bodyText": "I think it would be better if we add this login in the getWebClientForSubject method instead.", "author": "blen-desta", "createdAt": "2020-05-18T19:21:30Z", "path": "catalog/opensearch/catalog-opensearch-source/src/main/java/org/codice/ddf/opensearch/source/OpenSearchSource.java", "diffHunk": "@@ -1161,7 +1161,9 @@ private RestUrl newRestUrl(String url) {\n    */\n   private WebClient newOpenSearchClient(String url, Subject subj) {\n     SecureCxfClientFactory<OpenSearch> clientFactory = createClientFactory(url, username, password);\n-    return clientFactory.getWebClientForSubject(subj);\n+    return (subj != null)\n+        ? clientFactory.getWebClientForSubject(subj)\n+        : clientFactory.getWebClient();", "originalCommit": "20236c756b5159f8ee62efc3957046939a7cf959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNzc5NA==", "url": "https://github.com/codice/ddf/pull/6062#discussion_r426927794", "bodyText": "As-is, passing null to SecureCxfClientFactory::getWebClientForSubject works fine. But the API never specifies what the behavior should be when passed a null value, so this seems like the safer approach.", "author": "SmithJosh", "createdAt": "2020-05-18T22:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0MzY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NzMwMg==", "url": "https://github.com/codice/ddf/pull/6062#discussion_r426877302", "bodyText": "Same comment as above", "author": "blen-desta", "createdAt": "2020-05-18T20:31:59Z", "path": "catalog/spatial/csw/spatial-csw-source-common/src/main/java/org/codice/ddf/spatial/ogc/csw/catalog/common/source/AbstractCswSource.java", "diffHunk": "@@ -794,7 +794,7 @@ public boolean isAvailable(SourceMonitor sourceMonitor) {\n   @Override\n   public SourceResponse query(QueryRequest queryRequest) throws UnsupportedQueryException {\n     Subject subject = (Subject) queryRequest.getPropertyValue(SecurityConstants.SECURITY_SUBJECT);\n-    Csw csw = factory.getClientForSubject(subject);\n+    Csw csw = (subject != null) ? factory.getClientForSubject(subject) : factory.getClient();", "originalCommit": "20236c756b5159f8ee62efc3957046939a7cf959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NzM5NQ==", "url": "https://github.com/codice/ddf/pull/6062#discussion_r426877395", "bodyText": "Same comment as above", "author": "blen-desta", "createdAt": "2020-05-18T20:32:13Z", "path": "catalog/spatial/csw/spatial-csw-source-common/src/main/java/org/codice/ddf/spatial/ogc/csw/catalog/common/source/AbstractCswSource.java", "diffHunk": "@@ -985,9 +985,8 @@ public ResourceResponse retrieveResource(\n   private ResourceResponse retrieveResourceById(\n       Map<String, Serializable> requestProperties, String metacardId)\n       throws ResourceNotFoundException {\n-    Csw csw =\n-        factory.getClientForSubject(\n-            (Subject) requestProperties.get(SecurityConstants.SECURITY_SUBJECT));\n+    Subject subject = (Subject) requestProperties.get(SecurityConstants.SECURITY_SUBJECT);\n+    Csw csw = (subject != null) ? factory.getClientForSubject(subject) : factory.getClient();", "originalCommit": "20236c756b5159f8ee62efc3957046939a7cf959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0aa9f86c702a8e10db016a3d012224a309e09689", "url": "https://github.com/codice/ddf/commit/0aa9f86c702a8e10db016a3d012224a309e09689", "message": "DDF-6061 Fix tests", "committedDate": "2020-05-18T23:08:16Z", "type": "commit"}, {"oid": "0aa9f86c702a8e10db016a3d012224a309e09689", "url": "https://github.com/codice/ddf/commit/0aa9f86c702a8e10db016a3d012224a309e09689", "message": "DDF-6061 Fix tests", "committedDate": "2020-05-18T23:08:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNjQxOA==", "url": "https://github.com/codice/ddf/pull/6062#discussion_r427516418", "bodyText": "\u270f\ufe0f If we are expecting a Boolean to be here instead of a boolean, it might be worth changing the variable type.", "author": "bakejeyner", "createdAt": "2020-05-19T18:34:51Z", "path": "catalog/spatial/wfs/1.1.0/spatial-wfs-v1_1_0-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/v110/catalog/source/WfsSource.java", "diffHunk": "@@ -230,7 +230,7 @@\n \n   private String srsName;\n \n-  private boolean allowRedirects;\n+  private boolean allowRedirects = Boolean.FALSE;", "originalCommit": "0aa9f86c702a8e10db016a3d012224a309e09689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}